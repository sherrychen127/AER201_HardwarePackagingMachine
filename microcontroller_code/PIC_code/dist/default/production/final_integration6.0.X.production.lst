

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 04:28:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.45
    94                           ; Generated 16/11/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  006264                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _motorStop_3
   133  006264  0C                 	db	12
   134                           
   135                           ;initializer for _motorStart_3
   136  006265  0B                 	db	11
   137                           
   138                           ;initializer for _motorStop_2
   139  006266  0A                 	db	10
   140                           
   141                           ;initializer for _motorStart_2
   142  006267  39                 	db	57
   143                           
   144                           ;initializer for _motorStop_1
   145  006268  38                 	db	56
   146                           
   147                           ;initializer for _motorStart_1
   148  006269  37                 	db	55
   149                           
   150                           ;initializer for _motorStop_0
   151  00626A  36                 	db	54
   152                           
   153                           ;initializer for _motorStart_0
   154  00626B  35                 	db	53
   155                           
   156                           	psect	idataBANK0
   157  00628C                     __pidataBANK0:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _spacingTime
   161  00628C  0BB8               	dw	3000
   162                           
   163                           ;initializer for _close_handle
   164  00628E  0E                 	db	14
   165                           
   166                           ;initializer for _servo_ramp
   167  00628F  0D                 	db	13
   168                           
   169                           ;initializer for _rotate_1compartment
   170  006290  31                 	db	49
   171                           
   172                           ;initializer for _rotate_gear
   173  006291  30                 	db	48
   174                           
   175                           	psect	idataBANK1
   176  006246                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _W_max
   180  006246  0004               	dw	4
   181                           
   182                           ;initializer for _S_max
   183  006248  0004               	dw	4
   184                           
   185                           ;initializer for _N_max
   186  00624A  0004               	dw	4
   187                           
   188                           ;initializer for _B_max
   189  00624C  0004               	dw	4
   190                           
   191                           ;initializer for _init_position
   192  00624E  0005               	dw	5
   193                           
   194                           	psect	mediumconst
   195  00FC52                     __pmediumconst:
   196                           	opt stack 0
   197  00FC52  00                 	db	0
   198  00FC53                     _keys:
   199                           	opt stack 0
   200  00FC53  31                 	db	49
   201  00FC54  32                 	db	50
   202  00FC55  33                 	db	51
   203  00FC56  41                 	db	65
   204  00FC57  34                 	db	52
   205  00FC58  35                 	db	53
   206  00FC59  36                 	db	54
   207  00FC5A  42                 	db	66
   208  00FC5B  37                 	db	55
   209  00FC5C  38                 	db	56
   210  00FC5D  39                 	db	57
   211  00FC5E  43                 	db	67
   212  00FC5F  2A                 	db	42
   213  00FC60  30                 	db	48
   214  00FC61  23                 	db	35
   215  00FC62  44                 	db	68
   216  00FC63  00                 	db	0
   217  00FC64                     __end_of_keys:
   218                           	opt stack 0
   219  00FC64                     _dpowers:
   220                           	opt stack 0
   221  00FC64  0001               	dw	1
   222  00FC66  000A               	dw	10
   223  00FC68  0064               	dw	100
   224  00FC6A  03E8               	dw	1000
   225  00FC6C  2710               	dw	10000
   226  00FC6E                     __end_of_dpowers:
   227                           	opt stack 0
   228  00FC6E                     _hexpowers:
   229                           	opt stack 0
   230  00FC6E  0001               	dw	1
   231  00FC70  0010               	dw	16
   232  00FC72  0100               	dw	256
   233  00FC74  1000               	dw	4096
   234  00FC76                     __end_of_hexpowers:
   235                           	opt stack 0
   236  00FC76                     _happynewyear:
   237                           	opt stack 0
   238  00FC76  45                 	db	69
   239  00FC77  14                 	db	20
   240  00FC78  14                 	db	20
   241  00FC79  00                 	db	0
   242  00FC7A  11                 	db	17
   243  00FC7B  03                 	db	3
   244  00FC7C  18                 	db	24
   245  00FC7D                     __end_of_happynewyear:
   246                           	opt stack 0
   247  00FC7D                     _VIOLET:
   248                           	opt stack 0
   249  00FC7D  00D3               	dw	211
   250  00FC7F  0094               	dw	148
   251  00FC81                     __end_of_VIOLET:
   252                           	opt stack 0
   253  00FC81                     _INDIGO:
   254                           	opt stack 0
   255  00FC81  0082               	dw	130
   256  00FC83  004B               	dw	75
   257  00FC85                     __end_of_INDIGO:
   258                           	opt stack 0
   259  00FC85                     _BLUE:
   260                           	opt stack 0
   261  00FC85  00FF               	dw	255
   262  00FC87  0000               	dw	0
   263  00FC89                     __end_of_BLUE:
   264                           	opt stack 0
   265  00FC89                     _GREEN:
   266                           	opt stack 0
   267  00FC89  FF00               	dw	65280
   268  00FC8B  0000               	dw	0
   269  00FC8D                     __end_of_GREEN:
   270                           	opt stack 0
   271  00FC8D                     _YELLOW:
   272                           	opt stack 0
   273  00FC8D  FF00               	dw	65280
   274  00FC8F  00FF               	dw	255
   275  00FC91                     __end_of_YELLOW:
   276                           	opt stack 0
   277  00FC91                     _ORANGE:
   278                           	opt stack 0
   279  00FC91  8C00               	dw	35840
   280  00FC93  00FF               	dw	255
   281  00FC95                     __end_of_ORANGE:
   282                           	opt stack 0
   283  00FC95                     _RED:
   284                           	opt stack 0
   285  00FC95  0000               	dw	0
   286  00FC97  00FF               	dw	255
   287  00FC99                     __end_of_RED:
   288                           	opt stack 0
   289  00FC99                     _WHITE:
   290                           	opt stack 0
   291  00FC99  FFFF               	dw	65535
   292  00FC9B  00FF               	dw	255
   293  00FC9D                     __end_of_WHITE:
   294                           	opt stack 0
   295  00FC9D                     _GREY:
   296                           	opt stack 0
   297  00FC9D  8080               	dw	32896
   298  00FC9F  0080               	dw	128
   299  00FCA1                     __end_of_GREY:
   300                           	opt stack 0
   301  00FCA1                     _BLACK:
   302                           	opt stack 0
   303  00FCA1  0000               	dw	0
   304  00FCA3  0000               	dw	0
   305  00FCA5                     __end_of_BLACK:
   306                           	opt stack 0
   307  00FCA5                     _array:
   308                           	opt stack 0
   309  00FCA5  30                 	db	48
   310  00FCA6  31                 	db	49
   311  00FCA7  00                 	db	0
   312  00FCA8                     __end_of_array:
   313                           	opt stack 0
   314  00FCA8  C7                 	db	199
   315  00FCA9                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   316                           	opt stack 0
   317  00FCA9                     GLCD_PIC@INST_VMCTR1:
   318                           	opt stack 0
   319  00FCA9  C5                 	db	197
   320  00FCAA                     __end_ofGLCD_PIC@INST_VMCTR1:
   321                           	opt stack 0
   322  00FCAA                     GLCD_PIC@INST_PWCTR5:
   323                           	opt stack 0
   324  00FCAA  C4                 	db	196
   325  00FCAB                     __end_ofGLCD_PIC@INST_PWCTR5:
   326                           	opt stack 0
   327  00FCAB                     GLCD_PIC@INST_PWCTR4:
   328                           	opt stack 0
   329  00FCAB  C3                 	db	195
   330  00FCAC                     __end_ofGLCD_PIC@INST_PWCTR4:
   331                           	opt stack 0
   332  00FCAC                     GLCD_PIC@INST_PWCTR3:
   333                           	opt stack 0
   334  00FCAC  C2                 	db	194
   335  00FCAD                     __end_ofGLCD_PIC@INST_PWCTR3:
   336                           	opt stack 0
   337  00FCAD                     GLCD_PIC@INST_PWCTR2:
   338                           	opt stack 0
   339  00FCAD  C1                 	db	193
   340  00FCAE                     __end_ofGLCD_PIC@INST_PWCTR2:
   341                           	opt stack 0
   342  00FCAE                     GLCD_PIC@INST_PWCTR1:
   343                           	opt stack 0
   344  00FCAE  C0                 	db	192
   345  00FCAF                     __end_ofGLCD_PIC@INST_PWCTR1:
   346                           	opt stack 0
   347  00FCAF                     GLCD_PIC@INST_INVCTR:
   348                           	opt stack 0
   349  00FCAF  B4                 	db	180
   350  00FCB0                     __end_ofGLCD_PIC@INST_INVCTR:
   351                           	opt stack 0
   352  00FCB0                     GLCD_PIC@INST_FRMCTR3:
   353                           	opt stack 0
   354  00FCB0  B3                 	db	179
   355  00FCB1                     __end_ofGLCD_PIC@INST_FRMCTR3:
   356                           	opt stack 0
   357  00FCB1                     GLCD_PIC@INST_FRMCTR2:
   358                           	opt stack 0
   359  00FCB1  B2                 	db	178
   360  00FCB2                     __end_ofGLCD_PIC@INST_FRMCTR2:
   361                           	opt stack 0
   362  00FCB2                     GLCD_PIC@INST_FRMCTR1:
   363                           	opt stack 0
   364  00FCB2  B1                 	db	177
   365  00FCB3                     __end_ofGLCD_PIC@INST_FRMCTR1:
   366                           	opt stack 0
   367  00FCB3                     GLCD_PIC@INST_COLMOD:
   368                           	opt stack 0
   369  00FCB3  3A                 	db	58
   370  00FCB4                     __end_ofGLCD_PIC@INST_COLMOD:
   371                           	opt stack 0
   372  00FCB4  39                 	db	57
   373  00FCB5                     __end_ofGLCD_PIC@INST_IDMON:
   374                           	opt stack 0
   375  00FCB5                     GLCD_PIC@INST_IDMOFF:
   376                           	opt stack 0
   377  00FCB5  38                 	db	56
   378  00FCB6                     __end_ofGLCD_PIC@INST_IDMOFF:
   379                           	opt stack 0
   380  00FCB6                     GLCD_PIC@INST_MADCTL:
   381                           	opt stack 0
   382  00FCB6  36                 	db	54
   383  00FCB7                     __end_ofGLCD_PIC@INST_MADCTL:
   384                           	opt stack 0
   385  00FCB7  35                 	db	53
   386  00FCB8                     __end_ofGLCD_PIC@INST_TEON:
   387                           	opt stack 0
   388  00FCB8  34                 	db	52
   389  00FCB9                     __end_ofGLCD_PIC@INST_TEOFF:
   390                           	opt stack 0
   391  00FCB9  30                 	db	48
   392  00FCBA                     __end_ofGLCD_PIC@INST_PTLAR:
   393                           	opt stack 0
   394  00FCBA                     GLCD_PIC@INST_RAMWR:
   395                           	opt stack 0
   396  00FCBA  2C                 	db	44
   397  00FCBB                     __end_ofGLCD_PIC@INST_RAMWR:
   398                           	opt stack 0
   399  00FCBB                     GLCD_PIC@INST_RASET:
   400                           	opt stack 0
   401  00FCBB  2B                 	db	43
   402  00FCBC                     __end_ofGLCD_PIC@INST_RASET:
   403                           	opt stack 0
   404  00FCBC                     GLCD_PIC@INST_CASET:
   405                           	opt stack 0
   406  00FCBC  2A                 	db	42
   407  00FCBD                     __end_ofGLCD_PIC@INST_CASET:
   408                           	opt stack 0
   409  00FCBD                     GLCD_PIC@INST_DISPON:
   410                           	opt stack 0
   411  00FCBD  29                 	db	41
   412  00FCBE                     __end_ofGLCD_PIC@INST_DISPON:
   413                           	opt stack 0
   414  00FCBE  28                 	db	40
   415  00FCBF                     __end_ofGLCD_PIC@INST_DISPOFF:
   416                           	opt stack 0
   417  00FCBF                     GLCD_PIC@INST_GAMSET:
   418                           	opt stack 0
   419  00FCBF  26                 	db	38
   420  00FCC0                     __end_ofGLCD_PIC@INST_GAMSET:
   421                           	opt stack 0
   422  00FCC0  21                 	db	33
   423  00FCC1                     __end_ofGLCD_PIC@INST_INVON:
   424                           	opt stack 0
   425  00FCC1                     GLCD_PIC@INST_INVOFF:
   426                           	opt stack 0
   427  00FCC1  20                 	db	32
   428  00FCC2                     __end_ofGLCD_PIC@INST_INVOFF:
   429                           	opt stack 0
   430  00FCC2                     GLCD_PIC@INST_NORON:
   431                           	opt stack 0
   432  00FCC2  13                 	db	19
   433  00FCC3                     __end_ofGLCD_PIC@INST_NORON:
   434                           	opt stack 0
   435  00FCC3  12                 	db	18
   436  00FCC4                     __end_ofGLCD_PIC@INST_PTLON:
   437                           	opt stack 0
   438  00FCC4                     GLCD_PIC@INST_SLPOUT:
   439                           	opt stack 0
   440  00FCC4  11                 	db	17
   441  00FCC5                     __end_ofGLCD_PIC@INST_SLPOUT:
   442                           	opt stack 0
   443  00FCC5  10                 	db	16
   444  00FCC6                     __end_ofGLCD_PIC@INST_SLPIN:
   445                           	opt stack 0
   446  00FCC6                     GLCD_PIC@INST_SWRESET:
   447                           	opt stack 0
   448  00FCC6  01                 	db	1
   449  00FCC7                     __end_ofGLCD_PIC@INST_SWRESET:
   450                           	opt stack 0
   451  00FCC7  00                 	db	0
   452  00FCC8                     __end_ofGLCD_PIC@INST_NOP:
   453                           	opt stack 0
   454  00FCC8  C7                 	db	199
   455  00FCC9                     __end_of_INST_VMOFCTR2:
   456                           	opt stack 0
   457  00FCC9  C5                 	db	197
   458  00FCCA                     __end_of_INST_VMCTR1:
   459                           	opt stack 0
   460  00FCCA  C4                 	db	196
   461  00FCCB                     __end_of_INST_PWCTR5:
   462                           	opt stack 0
   463  00FCCB  C3                 	db	195
   464  00FCCC                     __end_of_INST_PWCTR4:
   465                           	opt stack 0
   466  00FCCC  C2                 	db	194
   467  00FCCD                     __end_of_INST_PWCTR3:
   468                           	opt stack 0
   469  00FCCD  C1                 	db	193
   470  00FCCE                     __end_of_INST_PWCTR2:
   471                           	opt stack 0
   472  00FCCE  C0                 	db	192
   473  00FCCF                     __end_of_INST_PWCTR1:
   474                           	opt stack 0
   475  00FCCF  B4                 	db	180
   476  00FCD0                     __end_of_INST_INVCTR:
   477                           	opt stack 0
   478  00FCD0  B3                 	db	179
   479  00FCD1                     __end_of_INST_FRMCTR3:
   480                           	opt stack 0
   481  00FCD1  B2                 	db	178
   482  00FCD2                     __end_of_INST_FRMCTR2:
   483                           	opt stack 0
   484  00FCD2  B1                 	db	177
   485  00FCD3                     __end_of_INST_FRMCTR1:
   486                           	opt stack 0
   487  00FCD3  3A                 	db	58
   488  00FCD4                     __end_of_INST_COLMOD:
   489                           	opt stack 0
   490  00FCD4  39                 	db	57
   491  00FCD5                     __end_of_INST_IDMON:
   492                           	opt stack 0
   493  00FCD5  38                 	db	56
   494  00FCD6                     __end_of_INST_IDMOFF:
   495                           	opt stack 0
   496  00FCD6  36                 	db	54
   497  00FCD7                     __end_of_INST_MADCTL:
   498                           	opt stack 0
   499  00FCD7  35                 	db	53
   500  00FCD8                     __end_of_INST_TEON:
   501                           	opt stack 0
   502  00FCD8  34                 	db	52
   503  00FCD9                     __end_of_INST_TEOFF:
   504                           	opt stack 0
   505  00FCD9  30                 	db	48
   506  00FCDA                     __end_of_INST_PTLAR:
   507                           	opt stack 0
   508  00FCDA  2C                 	db	44
   509  00FCDB                     __end_of_INST_RAMWR:
   510                           	opt stack 0
   511  00FCDB  2B                 	db	43
   512  00FCDC                     __end_of_INST_RASET:
   513                           	opt stack 0
   514  00FCDC  2A                 	db	42
   515  00FCDD                     __end_of_INST_CASET:
   516                           	opt stack 0
   517  00FCDD  29                 	db	41
   518  00FCDE                     __end_of_INST_DISPON:
   519                           	opt stack 0
   520  00FCDE  28                 	db	40
   521  00FCDF                     __end_of_INST_DISPOFF:
   522                           	opt stack 0
   523  00FCDF  26                 	db	38
   524  00FCE0                     __end_of_INST_GAMSET:
   525                           	opt stack 0
   526  00FCE0  21                 	db	33
   527  00FCE1                     __end_of_INST_INVON:
   528                           	opt stack 0
   529  00FCE1  20                 	db	32
   530  00FCE2                     __end_of_INST_INVOFF:
   531                           	opt stack 0
   532  00FCE2  13                 	db	19
   533  00FCE3                     __end_of_INST_NORON:
   534                           	opt stack 0
   535  00FCE3  12                 	db	18
   536  00FCE4                     __end_of_INST_PTLON:
   537                           	opt stack 0
   538  00FCE4  11                 	db	17
   539  00FCE5                     __end_of_INST_SLPOUT:
   540                           	opt stack 0
   541  00FCE5  10                 	db	16
   542  00FCE6                     __end_of_INST_SLPIN:
   543                           	opt stack 0
   544  00FCE6  01                 	db	1
   545  00FCE7                     __end_of_INST_SWRESET:
   546                           	opt stack 0
   547  00FCE7  00                 	db	0
   548  00FCE8                     __end_of_INST_NOP:
   549                           	opt stack 0
   550  00FCE8                     _GLCD_SIZE_VERT:
   551                           	opt stack 0
   552  00FCE8  80                 	db	128
   553  00FCE9                     __end_of_GLCD_SIZE_VERT:
   554                           	opt stack 0
   555  00FCE9                     _GLCD_SIZE_HORZ:
   556                           	opt stack 0
   557  00FCE9  80                 	db	128
   558  00FCEA                     __end_of_GLCD_SIZE_HORZ:
   559                           	opt stack 0
   560  00FCEA                     _GLCD_ADDRESSABLE_SIZE_VERT:
   561                           	opt stack 0
   562  00FCEA  A0                 	db	160
   563  00FCEB                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   564                           	opt stack 0
   565  00FCEB                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   566                           	opt stack 0
   567  00FCEB  80                 	db	128
   568  00FCEC                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   569                           	opt stack 0
   570  00FCEC                     _LCD_LEFT:
   571                           	opt stack 0
   572  00FCEC  00                 	db	0
   573  00FCED                     __end_of_LCD_LEFT:
   574                           	opt stack 0
   575  00FCED                     _LCD_RIGHT:
   576                           	opt stack 0
   577  00FCED  01                 	db	1
   578  00FCEE                     __end_of_LCD_RIGHT:
   579                           	opt stack 0
   580  00FCEE                     _LCD_SIZE_VERT:
   581                           	opt stack 0
   582  00FCEE  02                 	db	2
   583  00FCEF                     __end_of_LCD_SIZE_VERT:
   584                           	opt stack 0
   585  00FCEF                     _LCD_SIZE_HORZ:
   586                           	opt stack 0
   587  00FCEF  10                 	db	16
   588  00FCF0                     __end_of_LCD_SIZE_HORZ:
   589                           	opt stack 0
   590  00FCF0                     _LCD_VERT_LIMIT:
   591                           	opt stack 0
   592  00FCF0  02                 	db	2
   593  00FCF1                     __end_of_LCD_VERT_LIMIT:
   594                           	opt stack 0
   595  00FCF1                     _LCD_HORZ_LIMIT:
   596                           	opt stack 0
   597  00FCF1  28                 	db	40
   598  00FCF2                     __end_of_LCD_HORZ_LIMIT:
   599                           	opt stack 0
   600  00FCF2                     _strs:
   601                           	opt stack 0
   602  00FCF2  42                 	db	66
   603  00FCF3  00                 	db	0
   604  00FCF4  00                 	db	0
   605  00FCF5  00                 	db	0
   606  00FCF6  00                 	db	0
   607  00FCF7  4E                 	db	78
   608  00FCF8  00                 	db	0
   609  00FCF9  00                 	db	0
   610  00FCFA  00                 	db	0
   611  00FCFB  00                 	db	0
   612  00FCFC  53                 	db	83
   613  00FCFD  00                 	db	0
   614  00FCFE  00                 	db	0
   615  00FCFF  00                 	db	0
   616  00FD00  00                 	db	0
   617  00FD01  57                 	db	87
   618  00FD02  00                 	db	0
   619  00FD03  00                 	db	0
   620  00FD04  00                 	db	0
   621  00FD05  00                 	db	0
   622  00FD06  42                 	db	66
   623  00FD07  4E                 	db	78
   624  00FD08  00                 	db	0
   625  00FD09  00                 	db	0
   626  00FD0A  00                 	db	0
   627  00FD0B  42                 	db	66
   628  00FD0C  53                 	db	83
   629  00FD0D  00                 	db	0
   630  00FD0E  00                 	db	0
   631  00FD0F  00                 	db	0
   632  00FD10  42                 	db	66
   633  00FD11  57                 	db	87
   634  00FD12  00                 	db	0
   635  00FD13  00                 	db	0
   636  00FD14  00                 	db	0
   637  00FD15  42                 	db	66
   638  00FD16  42                 	db	66
   639  00FD17  4E                 	db	78
   640  00FD18  00                 	db	0
   641  00FD19  00                 	db	0
   642  00FD1A  42                 	db	66
   643  00FD1B  42                 	db	66
   644  00FD1C  53                 	db	83
   645  00FD1D  00                 	db	0
   646  00FD1E  00                 	db	0
   647  00FD1F  42                 	db	66
   648  00FD20  42                 	db	66
   649  00FD21  57                 	db	87
   650  00FD22  00                 	db	0
   651  00FD23  00                 	db	0
   652  00FD24  42                 	db	66
   653  00FD25  4E                 	db	78
   654  00FD26  57                 	db	87
   655  00FD27  00                 	db	0
   656  00FD28  00                 	db	0
   657  00FD29  42                 	db	66
   658  00FD2A  53                 	db	83
   659  00FD2B  57                 	db	87
   660  00FD2C  00                 	db	0
   661  00FD2D  00                 	db	0
   662  00FD2E  42                 	db	66
   663  00FD2F  57                 	db	87
   664  00FD30  57                 	db	87
   665  00FD31  00                 	db	0
   666  00FD32  00                 	db	0
   667  00FD33  42                 	db	66
   668  00FD34  4E                 	db	78
   669  00FD35  57                 	db	87
   670  00FD36  57                 	db	87
   671  00FD37  00                 	db	0
   672  00FD38  42                 	db	66
   673  00FD39  53                 	db	83
   674  00FD3A  57                 	db	87
   675  00FD3B  57                 	db	87
   676  00FD3C  00                 	db	0
   677  00FD3D  42                 	db	66
   678  00FD3E  42                 	db	66
   679  00FD3F  53                 	db	83
   680  00FD40  57                 	db	87
   681  00FD41  00                 	db	0
   682  00FD42  42                 	db	66
   683  00FD43  42                 	db	66
   684  00FD44  4E                 	db	78
   685  00FD45  57                 	db	87
   686  00FD46  00                 	db	0
   687  00FD47  42                 	db	66
   688  00FD48  4E                 	db	78
   689  00FD49  4E                 	db	78
   690  00FD4A  57                 	db	87
   691  00FD4B  00                 	db	0
   692  00FD4C  42                 	db	66
   693  00FD4D  4E                 	db	78
   694  00FD4E  4E                 	db	78
   695  00FD4F  4E                 	db	78
   696  00FD50  00                 	db	0
   697  00FD51  42                 	db	66
   698  00FD52  57                 	db	87
   699  00FD53  57                 	db	87
   700  00FD54  57                 	db	87
   701  00FD55  00                 	db	0
   702  00FD56                     __end_of_strs:
   703                           	opt stack 0
   704  0000                     _SSPSTATbits	set	4039
   705  0000                     _EECON2	set	4007
   706  0000                     _EEDATA	set	4008
   707  0000                     _EEADR	set	4009
   708  0000                     _EECON1bits	set	4006
   709  0000                     _SSPBUF	set	4041
   710  0000                     _SSPCON2bits	set	4037
   711  0000                     _SSPADD	set	4040
   712  0000                     _SSPCON2	set	4037
   713  0000                     _SSPCON1	set	4038
   714  0000                     _SSPSTAT	set	4039
   715  0000                     _SSPCON1bits	set	4038
   716  0000                     _PORTAbits	set	3968
   717  0000                     _TRISAbits	set	3986
   718  0000                     _TRISDbits	set	3989
   719  0000                     _T0CONbits	set	4053
   720  0000                     _ADRESL	set	4035
   721  0000                     _ADRESH	set	4036
   722  0000                     _ADCON0bits	set	4034
   723  0000                     _PORTBbits	set	3969
   724  0000                     _PORTB	set	3969
   725  0000                     _TRISBbits	set	3987
   726  0000                     _TRISCbits	set	3988
   727  0000                     _LATCbits	set	3979
   728  0000                     _ADCON1	set	4033
   729  0000                     _ADCON0	set	4034
   730  0000                     _TRISE	set	3990
   731  0000                     _TRISD	set	3989
   732  0000                     _TRISC	set	3988
   733  0000                     _TRISB	set	3987
   734  0000                     _TRISA	set	3986
   735  0000                     _LATE	set	3981
   736  0000                     _LATC	set	3979
   737  0000                     _LATB	set	3978
   738  0000                     _LATA	set	3977
   739  0000                     _OSCTUNEbits	set	3995
   740  0000                     _OSCCONbits	set	4051
   741  0000                     _INTCONbits	set	4082
   742  0000                     _LATD	set	3980
   743  0000                     _LATDbits	set	3980
   744  0000                     _SSPIF	set	31987
   745  0000                     _ADON	set	32272
   746  0000                     _TMR0IF	set	32658
   747  0000                     _TMR0IE	set	32661
   748  0000                     _RBIF	set	32656
   749  0000                     _INT1IF	set	32640
   750  0000                     _RBIE	set	32659
   751  0000                     _INT1IE	set	32643
   752  00FD56                     STR_70:
   753  00FD56  42                 	db	66	;'B'
   754  00FD57  3A                 	db	58	;':'
   755  00FD58  25                 	db	37
   756  00FD59  64                 	db	100	;'d'
   757  00FD5A  2C                 	db	44
   758  00FD5B  4E                 	db	78	;'N'
   759  00FD5C  3A                 	db	58	;':'
   760  00FD5D  25                 	db	37
   761  00FD5E  64                 	db	100	;'d'
   762  00FD5F  2C                 	db	44
   763  00FD60  53                 	db	83	;'S'
   764  00FD61  3A                 	db	58	;':'
   765  00FD62  25                 	db	37
   766  00FD63  64                 	db	100	;'d'
   767  00FD64  2C                 	db	44
   768  00FD65  57                 	db	87	;'W'
   769  00FD66  3A                 	db	58	;':'
   770  00FD67  25                 	db	37
   771  00FD68  64                 	db	100	;'d'
   772  00FD69  00                 	db	0
   773  00FD6A                     STR_2:
   774  00FD6A  32                 	db	50	;'2'
   775  00FD6B  3A                 	db	58	;':'
   776  00FD6C  45                 	db	69	;'E'
   777  00FD6D  6E                 	db	110	;'n'
   778  00FD6E  74                 	db	116	;'t'
   779  00FD6F  65                 	db	101	;'e'
   780  00FD70  72                 	db	114	;'r'
   781  00FD71  20                 	db	32
   782  00FD72  49                 	db	73	;'I'
   783  00FD73  6E                 	db	110	;'n'
   784  00FD74  73                 	db	115	;'s'
   785  00FD75  74                 	db	116	;'t'
   786  00FD76  72                 	db	114	;'r'
   787  00FD77  75                 	db	117	;'u'
   788  00FD78  63                 	db	99	;'c'
   789  00FD79  74                 	db	116	;'t'
   790  00FD7A  69                 	db	105	;'i'
   791  00FD7B  6F                 	db	111	;'o'
   792  00FD7C  6E                 	db	110	;'n'
   793  00FD7D  00                 	db	0
   794  00FD7E                     STR_63:
   795  00FD7E  73                 	db	115	;'s'
   796  00FD7F  70                 	db	112	;'p'
   797  00FD80  61                 	db	97	;'a'
   798  00FD81  63                 	db	99	;'c'
   799  00FD82  65                 	db	101	;'e'
   800  00FD83  72                 	db	114	;'r'
   801  00FD84  5F                 	db	95	;'_'
   802  00FD85  69                 	db	105	;'i'
   803  00FD86  6E                 	db	110	;'n'
   804  00FD87  74                 	db	116	;'t'
   805  00FD88  65                 	db	101	;'e'
   806  00FD89  72                 	db	114	;'r'
   807  00FD8A  72                 	db	114	;'r'
   808  00FD8B  75                 	db	117	;'u'
   809  00FD8C  70                 	db	112	;'p'
   810  00FD8D  74                 	db	116	;'t'
   811  00FD8E  65                 	db	101	;'e'
   812  00FD8F  64                 	db	100	;'d'
   813  00FD90  00                 	db	0
   814  00FD91                     STR_64:
   815  00FD91  77                 	db	119	;'w'
   816  00FD92  61                 	db	97	;'a'
   817  00FD93  73                 	db	115	;'s'
   818  00FD94  68                 	db	104	;'h'
   819  00FD95  65                 	db	101	;'e'
   820  00FD96  72                 	db	114	;'r'
   821  00FD97  5F                 	db	95	;'_'
   822  00FD98  69                 	db	105	;'i'
   823  00FD99  6E                 	db	110	;'n'
   824  00FD9A  74                 	db	116	;'t'
   825  00FD9B  65                 	db	101	;'e'
   826  00FD9C  72                 	db	114	;'r'
   827  00FD9D  72                 	db	114	;'r'
   828  00FD9E  75                 	db	117	;'u'
   829  00FD9F  70                 	db	112	;'p'
   830  00FDA0  74                 	db	116	;'t'
   831  00FDA1  65                 	db	101	;'e'
   832  00FDA2  64                 	db	100	;'d'
   833  00FDA3  00                 	db	0
   834  00FDA4                     STR_28:
   835  00FDA4  20                 	db	32
   836  00FDA5  32                 	db	50	;'2'
   837  00FDA6  3A                 	db	58	;':'
   838  00FDA7  20                 	db	32
   839  00FDA8  4F                 	db	79	;'O'
   840  00FDA9  70                 	db	112	;'p'
   841  00FDAA  65                 	db	101	;'e'
   842  00FDAB  72                 	db	114	;'r'
   843  00FDAC  61                 	db	97	;'a'
   844  00FDAD  74                 	db	116	;'t'
   845  00FDAE  69                 	db	105	;'i'
   846  00FDAF  6F                 	db	111	;'o'
   847  00FDB0  6E                 	db	110	;'n'
   848  00FDB1  20                 	db	32
   849  00FDB2  54                 	db	84	;'T'
   850  00FDB3  69                 	db	105	;'i'
   851  00FDB4  6D                 	db	109	;'m'
   852  00FDB5  65                 	db	101	;'e'
   853  00FDB6  00                 	db	0
   854  00FDB7  50                 	db	80	;'P'
   855  00FDB8  72                 	db	114	;'r'
   856  00FDB9  6F                 	db	111	;'o'
   857  00FDBA  67                 	db	103	;'g'
   858  00FDBB  72                 	db	114	;'r'
   859  00FDBC  61                 	db	97	;'a'
   860  00FDBD  6D                 	db	109	;'m'
   861  00FDBE  20                 	db	32
   862  00FDBF  54                 	db	84	;'T'
   863  00FDC0  65                 	db	101	;'e'
   864  00FDC1  72                 	db	114	;'r'
   865  00FDC2  6D                 	db	109	;'m'
   866  00FDC3  69                 	db	105	;'i'
   867  00FDC4  6E                 	db	110	;'n'
   868  00FDC5  61                 	db	97	;'a'
   869  00FDC6  74                 	db	116	;'t'
   870  00FDC7  65                 	db	101	;'e'
   871  00FDC8  73                 	db	115	;'s'
   872  00FDC9  00                 	db	0
   873  00FDCA                     STR_14:
   874  00FDCA  50                 	db	80	;'P'
   875  00FDCB  72                 	db	114	;'r'
   876  00FDCC  65                 	db	101	;'e'
   877  00FDCD  73                 	db	115	;'s'
   878  00FDCE  73                 	db	115	;'s'
   879  00FDCF  20                 	db	32
   880  00FDD0  23                 	db	35
   881  00FDD1  20                 	db	32
   882  00FDD2  74                 	db	116	;'t'
   883  00FDD3  6F                 	db	111	;'o'
   884  00FDD4  20                 	db	32
   885  00FDD5  73                 	db	115	;'s'
   886  00FDD6  74                 	db	116	;'t'
   887  00FDD7  61                 	db	97	;'a'
   888  00FDD8  72                 	db	114	;'r'
   889  00FDD9  74                 	db	116	;'t'
   890  00FDDA  21                 	db	33
   891  00FDDB  00                 	db	0
   892  00FDDC                     STR_99:
   893  00FDDC  30                 	db	48	;'0'
   894  00FDDD  31                 	db	49	;'1'
   895  00FDDE  32                 	db	50	;'2'
   896  00FDDF  33                 	db	51	;'3'
   897  00FDE0  34                 	db	52	;'4'
   898  00FDE1  35                 	db	53	;'5'
   899  00FDE2  36                 	db	54	;'6'
   900  00FDE3  37                 	db	55	;'7'
   901  00FDE4  38                 	db	56	;'8'
   902  00FDE5  39                 	db	57	;'9'
   903  00FDE6  61                 	db	97	;'a'
   904  00FDE7  62                 	db	98	;'b'
   905  00FDE8  63                 	db	99	;'c'
   906  00FDE9  64                 	db	100	;'d'
   907  00FDEA  65                 	db	101	;'e'
   908  00FDEB  66                 	db	102	;'f'
   909  00FDEC  00                 	db	0
   910  00FDED                     STR_25:
   911  00FDED  53                 	db	83	;'S'
   912  00FDEE  70                 	db	112	;'p'
   913  00FDEF  61                 	db	97	;'a'
   914  00FDF0  63                 	db	99	;'c'
   915  00FDF1  65                 	db	101	;'e'
   916  00FDF2  72                 	db	114	;'r'
   917  00FDF3  5F                 	db	95	;'_'
   918  00FDF4  72                 	db	114	;'r'
   919  00FDF5  65                 	db	101	;'e'
   920  00FDF6  6D                 	db	109	;'m'
   921  00FDF7  61                 	db	97	;'a'
   922  00FDF8  69                 	db	105	;'i'
   923  00FDF9  6E                 	db	110	;'n'
   924  00FDFA  3A                 	db	58	;':'
   925  00FDFB  25                 	db	37
   926  00FDFC  64                 	db	100	;'d'
   927  00FDFD  00                 	db	0
   928  00FDFE                     STR_26:
   929  00FDFE  57                 	db	87	;'W'
   930  00FDFF  61                 	db	97	;'a'
   931  00FE00  73                 	db	115	;'s'
   932  00FE01  68                 	db	104	;'h'
   933  00FE02  65                 	db	101	;'e'
   934  00FE03  72                 	db	114	;'r'
   935  00FE04  5F                 	db	95	;'_'
   936  00FE05  72                 	db	114	;'r'
   937  00FE06  65                 	db	101	;'e'
   938  00FE07  6D                 	db	109	;'m'
   939  00FE08  61                 	db	97	;'a'
   940  00FE09  69                 	db	105	;'i'
   941  00FE0A  6E                 	db	110	;'n'
   942  00FE0B  3A                 	db	58	;':'
   943  00FE0C  25                 	db	37
   944  00FE0D  64                 	db	100	;'d'
   945  00FE0E  00                 	db	0
   946  00FE0F                     STR_7:
   947  00FE0F  61                 	db	97	;'a'
   948  00FE10  73                 	db	115	;'s'
   949  00FE11  73                 	db	115	;'s'
   950  00FE12  65                 	db	101	;'e'
   951  00FE13  6D                 	db	109	;'m'
   952  00FE14  62                 	db	98	;'b'
   953  00FE15  6C                 	db	108	;'l'
   954  00FE16  79                 	db	121	;'y'
   955  00FE17  20                 	db	32
   956  00FE18  73                 	db	115	;'s'
   957  00FE19  74                 	db	116	;'t'
   958  00FE1A  65                 	db	101	;'e'
   959  00FE1B  70                 	db	112	;'p'
   960  00FE1C  3A                 	db	58	;':'
   961  00FE1D  25                 	db	37
   962  00FE1E  64                 	db	100	;'d'
   963  00FE1F  00                 	db	0
   964  00FE20                     STR_27:
   965  00FE20  31                 	db	49	;'1'
   966  00FE21  3A                 	db	58	;':'
   967  00FE22  20                 	db	32
   968  00FE23  44                 	db	68	;'D'
   969  00FE24  61                 	db	97	;'a'
   970  00FE25  74                 	db	116	;'t'
   971  00FE26  65                 	db	101	;'e'
   972  00FE27  20                 	db	32
   973  00FE28  61                 	db	97	;'a'
   974  00FE29  6E                 	db	110	;'n'
   975  00FE2A  64                 	db	100	;'d'
   976  00FE2B  20                 	db	32
   977  00FE2C  54                 	db	84	;'T'
   978  00FE2D  69                 	db	105	;'i'
   979  00FE2E  6D                 	db	109	;'m'
   980  00FE2F  65                 	db	101	;'e'
   981  00FE30  00                 	db	0
   982  00FE31                     STR_35:
   983  00FE31  6F                 	db	111	;'o'
   984  00FE32  70                 	db	112	;'p'
   985  00FE33  65                 	db	101	;'e'
   986  00FE34  72                 	db	114	;'r'
   987  00FE35  61                 	db	97	;'a'
   988  00FE36  74                 	db	116	;'t'
   989  00FE37  69                 	db	105	;'i'
   990  00FE38  6F                 	db	111	;'o'
   991  00FE39  6E                 	db	110	;'n'
   992  00FE3A  20                 	db	32
   993  00FE3B  74                 	db	116	;'t'
   994  00FE3C  69                 	db	105	;'i'
   995  00FE3D  6D                 	db	109	;'m'
   996  00FE3E  65                 	db	101	;'e'
   997  00FE3F  3A                 	db	58	;':'
   998  00FE40  00                 	db	0
   999  00FE41                     STR_1:
  1000  00FE41  31                 	db	49	;'1'
  1001  00FE42  3A                 	db	58	;':'
  1002  00FE43  64                 	db	100	;'d'
  1003  00FE44  61                 	db	97	;'a'
  1004  00FE45  74                 	db	116	;'t'
  1005  00FE46  65                 	db	101	;'e'
  1006  00FE47  20                 	db	32
  1007  00FE48  61                 	db	97	;'a'
  1008  00FE49  6E                 	db	110	;'n'
  1009  00FE4A  64                 	db	100	;'d'
  1010  00FE4B  20                 	db	32
  1011  00FE4C  74                 	db	116	;'t'
  1012  00FE4D  69                 	db	105	;'i'
  1013  00FE4E  6D                 	db	109	;'m'
  1014  00FE4F  65                 	db	101	;'e'
  1015  00FE50  00                 	db	0
  1016  00FE51                     STR_15:
  1017  00FE51  73                 	db	115	;'s'
  1018  00FE52  74                 	db	116	;'t'
  1019  00FE53  61                 	db	97	;'a'
  1020  00FE54  72                 	db	114	;'r'
  1021  00FE55  74                 	db	116	;'t'
  1022  00FE56  20                 	db	32
  1023  00FE57  6F                 	db	111	;'o'
  1024  00FE58  70                 	db	112	;'p'
  1025  00FE59  65                 	db	101	;'e'
  1026  00FE5A  72                 	db	114	;'r'
  1027  00FE5B  61                 	db	97	;'a'
  1028  00FE5C  74                 	db	116	;'t'
  1029  00FE5D  69                 	db	105	;'i'
  1030  00FE5E  6F                 	db	111	;'o'
  1031  00FE5F  6E                 	db	110	;'n'
  1032  00FE60  00                 	db	0
  1033  00FE61                     STR_45:
  1034  00FE61  57                 	db	87	;'W'
  1035  00FE62  72                 	db	114	;'r'
  1036  00FE63  6F                 	db	111	;'o'
  1037  00FE64  6E                 	db	110	;'n'
  1038  00FE65  67                 	db	103	;'g'
  1039  00FE66  20                 	db	32
  1040  00FE67  6E                 	db	110	;'n'
  1041  00FE68  75                 	db	117	;'u'
  1042  00FE69  6D                 	db	109	;'m'
  1043  00FE6A  62                 	db	98	;'b'
  1044  00FE6B  65                 	db	101	;'e'
  1045  00FE6C  72                 	db	114	;'r'
  1046  00FE6D  21                 	db	33
  1047  00FE6E  20                 	db	32
  1048  00FE6F  00                 	db	0
  1049  00FE70                     STR_3:
  1050  00FE70  61                 	db	97	;'a'
  1051  00FE71  73                 	db	115	;'s'
  1052  00FE72  73                 	db	115	;'s'
  1053  00FE73  65                 	db	101	;'e'
  1054  00FE74  6D                 	db	109	;'m'
  1055  00FE75  62                 	db	98	;'b'
  1056  00FE76  6C                 	db	108	;'l'
  1057  00FE77  79                 	db	121	;'y'
  1058  00FE78  20                 	db	32
  1059  00FE79  73                 	db	115	;'s'
  1060  00FE7A  74                 	db	116	;'t'
  1061  00FE7B  65                 	db	101	;'e'
  1062  00FE7C  70                 	db	112	;'p'
  1063  00FE7D  3A                 	db	58	;':'
  1064  00FE7E  00                 	db	0
  1065  00FE7F                     STR_23:
  1066  00FE7F  42                 	db	66	;'B'
  1067  00FE80  6F                 	db	111	;'o'
  1068  00FE81  6C                 	db	108	;'l'
  1069  00FE82  74                 	db	116	;'t'
  1070  00FE83  5F                 	db	95	;'_'
  1071  00FE84  72                 	db	114	;'r'
  1072  00FE85  65                 	db	101	;'e'
  1073  00FE86  6D                 	db	109	;'m'
  1074  00FE87  61                 	db	97	;'a'
  1075  00FE88  69                 	db	105	;'i'
  1076  00FE89  6E                 	db	110	;'n'
  1077  00FE8A  3A                 	db	58	;':'
  1078  00FE8B  25                 	db	37
  1079  00FE8C  64                 	db	100	;'d'
  1080  00FE8D  00                 	db	0
  1081  00FE8E                     STR_19:
  1082  00FE8E  70                 	db	112	;'p'
  1083  00FE8F  72                 	db	114	;'r'
  1084  00FE90  6F                 	db	111	;'o'
  1085  00FE91  63                 	db	99	;'c'
  1086  00FE92  65                 	db	101	;'e'
  1087  00FE93  73                 	db	115	;'s'
  1088  00FE94  73                 	db	115	;'s'
  1089  00FE95  69                 	db	105	;'i'
  1090  00FE96  6E                 	db	110	;'n'
  1091  00FE97  67                 	db	103	;'g'
  1092  00FE98  20                 	db	32
  1093  00FE99  43                 	db	67	;'C'
  1094  00FE9A  25                 	db	37
  1095  00FE9B  64                 	db	100	;'d'
  1096  00FE9C  00                 	db	0
  1097  00FE9D                     STR_61:
  1098  00FE9D  62                 	db	98	;'b'
  1099  00FE9E  6F                 	db	111	;'o'
  1100  00FE9F  6C                 	db	108	;'l'
  1101  00FEA0  74                 	db	116	;'t'
  1102  00FEA1  5F                 	db	95	;'_'
  1103  00FEA2  69                 	db	105	;'i'
  1104  00FEA3  6E                 	db	110	;'n'
  1105  00FEA4  74                 	db	116	;'t'
  1106  00FEA5  65                 	db	101	;'e'
  1107  00FEA6  72                 	db	114	;'r'
  1108  00FEA7  72                 	db	114	;'r'
  1109  00FEA8  75                 	db	117	;'u'
  1110  00FEA9  70                 	db	112	;'p'
  1111  00FEAA  74                 	db	116	;'t'
  1112  00FEAB  00                 	db	0
  1113  00FEAC                     STR_31:
  1114  00FEAC  25                 	db	37
  1115  00FEAD  30                 	db	48	;'0'
  1116  00FEAE  32                 	db	50	;'2'
  1117  00FEAF  78                 	db	120	;'x'
  1118  00FEB0  2F                 	db	47
  1119  00FEB1  25                 	db	37
  1120  00FEB2  30                 	db	48	;'0'
  1121  00FEB3  32                 	db	50	;'2'
  1122  00FEB4  78                 	db	120	;'x'
  1123  00FEB5  2F                 	db	47
  1124  00FEB6  25                 	db	37
  1125  00FEB7  30                 	db	48	;'0'
  1126  00FEB8  32                 	db	50	;'2'
  1127  00FEB9  78                 	db	120	;'x'
  1128  00FEBA  00                 	db	0
  1129  00FEBB                     STR_32:
  1130  00FEBB  25                 	db	37
  1131  00FEBC  30                 	db	48	;'0'
  1132  00FEBD  32                 	db	50	;'2'
  1133  00FEBE  78                 	db	120	;'x'
  1134  00FEBF  3A                 	db	58	;':'
  1135  00FEC0  25                 	db	37
  1136  00FEC1  30                 	db	48	;'0'
  1137  00FEC2  32                 	db	50	;'2'
  1138  00FEC3  78                 	db	120	;'x'
  1139  00FEC4  3A                 	db	58	;':'
  1140  00FEC5  25                 	db	37
  1141  00FEC6  30                 	db	48	;'0'
  1142  00FEC7  32                 	db	50	;'2'
  1143  00FEC8  78                 	db	120	;'x'
  1144  00FEC9  00                 	db	0
  1145  00FECA                     STR_58:
  1146  00FECA  50                 	db	80	;'P'
  1147  00FECB  72                 	db	114	;'r'
  1148  00FECC  6F                 	db	111	;'o'
  1149  00FECD  63                 	db	99	;'c'
  1150  00FECE  65                 	db	101	;'e'
  1151  00FECF  73                 	db	115	;'s'
  1152  00FED0  73                 	db	115	;'s'
  1153  00FED1  69                 	db	105	;'i'
  1154  00FED2  6E                 	db	110	;'n'
  1155  00FED3  67                 	db	103	;'g'
  1156  00FED4  2E                 	db	46
  1157  00FED5  2E                 	db	46
  1158  00FED6  2E                 	db	46
  1159  00FED7  00                 	db	0
  1160  00FED8                     STR_4:
  1161  00FED8  66                 	db	102	;'f'
  1162  00FED9  61                 	db	97	;'a'
  1163  00FEDA  73                 	db	115	;'s'
  1164  00FEDB  74                 	db	116	;'t'
  1165  00FEDC  65                 	db	101	;'e'
  1166  00FEDD  6E                 	db	110	;'n'
  1167  00FEDE  65                 	db	101	;'e'
  1168  00FEDF  72                 	db	114	;'r'
  1169  00FEE0  20                 	db	32
  1170  00FEE1  73                 	db	115	;'s'
  1171  00FEE2  65                 	db	101	;'e'
  1172  00FEE3  74                 	db	116	;'t'
  1173  00FEE4  3A                 	db	58	;':'
  1174  00FEE5  00                 	db	0
  1175  00FEE6                     STR_24:
  1176  00FEE6  4E                 	db	78	;'N'
  1177  00FEE7  75                 	db	117	;'u'
  1178  00FEE8  74                 	db	116	;'t'
  1179  00FEE9  5F                 	db	95	;'_'
  1180  00FEEA  72                 	db	114	;'r'
  1181  00FEEB  65                 	db	101	;'e'
  1182  00FEEC  6D                 	db	109	;'m'
  1183  00FEED  61                 	db	97	;'a'
  1184  00FEEE  69                 	db	105	;'i'
  1185  00FEEF  6E                 	db	110	;'n'
  1186  00FEF0  3A                 	db	58	;':'
  1187  00FEF1  25                 	db	37
  1188  00FEF2  64                 	db	100	;'d'
  1189  00FEF3  00                 	db	0
  1190  00FEF4                     STR_62:
  1191  00FEF4  6E                 	db	110	;'n'
  1192  00FEF5  75                 	db	117	;'u'
  1193  00FEF6  74                 	db	116	;'t'
  1194  00FEF7  5F                 	db	95	;'_'
  1195  00FEF8  69                 	db	105	;'i'
  1196  00FEF9  6E                 	db	110	;'n'
  1197  00FEFA  74                 	db	116	;'t'
  1198  00FEFB  65                 	db	101	;'e'
  1199  00FEFC  72                 	db	114	;'r'
  1200  00FEFD  72                 	db	114	;'r'
  1201  00FEFE  75                 	db	117	;'u'
  1202  00FEFF  70                 	db	112	;'p'
  1203  00FF00  74                 	db	116	;'t'
  1204  00FF01  00                 	db	0
  1205  00FF02                     STR_36:
  1206  00FF02  25                 	db	37
  1207  00FF03  64                 	db	100	;'d'
  1208  00FF04  6D                 	db	109	;'m'
  1209  00FF05  69                 	db	105	;'i'
  1210  00FF06  6E                 	db	110	;'n'
  1211  00FF07  20                 	db	32
  1212  00FF08  25                 	db	37
  1213  00FF09  64                 	db	100	;'d'
  1214  00FF0A  73                 	db	115	;'s'
  1215  00FF0B  65                 	db	101	;'e'
  1216  00FF0C  63                 	db	99	;'c'
  1217  00FF0D  73                 	db	115	;'s'
  1218  00FF0E  00                 	db	0
  1219  00FF0F                     STR_17:
  1220  00FF0F  4C                 	db	76	;'L'
  1221  00FF10  6F                 	db	111	;'o'
  1222  00FF11  63                 	db	99	;'c'
  1223  00FF12  61                 	db	97	;'a'
  1224  00FF13  74                 	db	116	;'t'
  1225  00FF14  69                 	db	105	;'i'
  1226  00FF15  6E                 	db	110	;'n'
  1227  00FF16  67                 	db	103	;'g'
  1228  00FF17  20                 	db	32
  1229  00FF18  43                 	db	67	;'C'
  1230  00FF19  31                 	db	49	;'1'
  1231  00FF1A  00                 	db	0
  1232  00FF1B                     STR_38:
  1233  00FF1B  43                 	db	67	;'C'
  1234  00FF1C  25                 	db	37
  1235  00FF1D  64                 	db	100	;'d'
  1236  00FF1E  3A                 	db	58	;':'
  1237  00FF1F  42                 	db	66	;'B'
  1238  00FF20  25                 	db	37
  1239  00FF21  64                 	db	100	;'d'
  1240  00FF22  2C                 	db	44
  1241  00FF23  4E                 	db	78	;'N'
  1242  00FF24  25                 	db	37
  1243  00FF25  64                 	db	100	;'d'
  1244  00FF26  00                 	db	0
  1245  00FF27                     STR_39:
  1246  00FF27  20                 	db	32
  1247  00FF28  20                 	db	32
  1248  00FF29  20                 	db	32
  1249  00FF2A  20                 	db	32
  1250  00FF2B  53                 	db	83	;'S'
  1251  00FF2C  25                 	db	37
  1252  00FF2D  64                 	db	100	;'d'
  1253  00FF2E  2C                 	db	44
  1254  00FF2F  57                 	db	87	;'W'
  1255  00FF30  25                 	db	37
  1256  00FF31  64                 	db	100	;'d'
  1257  00FF32  00                 	db	0
  1258  00FF33                     STR_18:
  1259  00FF33  43                 	db	67	;'C'
  1260  00FF34  31                 	db	49	;'1'
  1261  00FF35  20                 	db	32
  1262  00FF36  69                 	db	105	;'i'
  1263  00FF37  73                 	db	115	;'s'
  1264  00FF38  20                 	db	32
  1265  00FF39  66                 	db	102	;'f'
  1266  00FF3A  6F                 	db	111	;'o'
  1267  00FF3B  75                 	db	117	;'u'
  1268  00FF3C  6E                 	db	110	;'n'
  1269  00FF3D  64                 	db	100	;'d'
  1270  00FF3E  00                 	db	0
  1271  00FF3F                     STR_59:
  1272  00FF3F  57                 	db	87	;'W'
  1273  00FF40  72                 	db	114	;'r'
  1274  00FF41  6F                 	db	111	;'o'
  1275  00FF42  6E                 	db	110	;'n'
  1276  00FF43  67                 	db	103	;'g'
  1277  00FF44  20                 	db	32
  1278  00FF45  69                 	db	105	;'i'
  1279  00FF46  6E                 	db	110	;'n'
  1280  00FF47  70                 	db	112	;'p'
  1281  00FF48  75                 	db	117	;'u'
  1282  00FF49  74                 	db	116	;'t'
  1283  00FF4A  00                 	db	0
  1284  00FF4B                     STR_21:
  1285  00FF4B  54                 	db	84	;'T'
  1286  00FF4C  65                 	db	101	;'e'
  1287  00FF4D  72                 	db	114	;'r'
  1288  00FF4E  6D                 	db	109	;'m'
  1289  00FF4F  69                 	db	105	;'i'
  1290  00FF50  6E                 	db	110	;'n'
  1291  00FF51  61                 	db	97	;'a'
  1292  00FF52  74                 	db	116	;'t'
  1293  00FF53  65                 	db	101	;'e'
  1294  00FF54  21                 	db	33
  1295  00FF55  00                 	db	0
  1296  00FF56                     STR_53:
  1297  00FF56  77                 	db	119	;'w'
  1298  00FF57  72                 	db	114	;'r'
  1299  00FF58  6F                 	db	111	;'o'
  1300  00FF59  6E                 	db	110	;'n'
  1301  00FF5A  67                 	db	103	;'g'
  1302  00FF5B  20                 	db	32
  1303  00FF5C  73                 	db	115	;'s'
  1304  00FF5D  65                 	db	101	;'e'
  1305  00FF5E  74                 	db	116	;'t'
  1306  00FF5F  21                 	db	33
  1307  00FF60  00                 	db	0
  1308  00FF61                     STR_29:
  1309  00FF61  33                 	db	51	;'3'
  1310  00FF62  3A                 	db	58	;':'
  1311  00FF63  73                 	db	115	;'s'
  1312  00FF64  75                 	db	117	;'u'
  1313  00FF65  6D                 	db	109	;'m'
  1314  00FF66  6D                 	db	109	;'m'
  1315  00FF67  61                 	db	97	;'a'
  1316  00FF68  72                 	db	114	;'r'
  1317  00FF69  79                 	db	121	;'y'
  1318  00FF6A  00                 	db	0
  1319  00FF6B                     STR_50:
  1320  00FF6B  63                 	db	99	;'c'
  1321  00FF6C  6F                 	db	111	;'o'
  1322  00FF6D  72                 	db	114	;'r'
  1323  00FF6E  72                 	db	114	;'r'
  1324  00FF6F  65                 	db	101	;'e'
  1325  00FF70  63                 	db	99	;'c'
  1326  00FF71  74                 	db	116	;'t'
  1327  00FF72  21                 	db	33
  1328  00FF73  00                 	db	0
  1329  00FF74                     STR_60:
  1330  00FF74  54                 	db	84	;'T'
  1331  00FF75  4F                 	db	79	;'O'
  1332  00FF76  4F                 	db	79	;'O'
  1333  00FF77  20                 	db	32
  1334  00FF78  4D                 	db	77	;'M'
  1335  00FF79  41                 	db	65	;'A'
  1336  00FF7A  4E                 	db	78	;'N'
  1337  00FF7B  59                 	db	89	;'Y'
  1338  00FF7C  00                 	db	0
  1339  00FF7D                     STR_20:
  1340  00FF7D  64                 	db	100	;'d'
  1341  00FF7E  6F                 	db	111	;'o'
  1342  00FF7F  6E                 	db	110	;'n'
  1343  00FF80  65                 	db	101	;'e'
  1344  00FF81  20                 	db	32
  1345  00FF82  43                 	db	67	;'C'
  1346  00FF83  25                 	db	37
  1347  00FF84  64                 	db	100	;'d'
  1348  00FF85  00                 	db	0
  1349  00FF86                     STR_30:
  1350  00FF86  34                 	db	52	;'4'
  1351  00FF87  3A                 	db	58	;':'
  1352  00FF88  72                 	db	114	;'r'
  1353  00FF89  65                 	db	101	;'e'
  1354  00FF8A  74                 	db	116	;'t'
  1355  00FF8B  75                 	db	117	;'u'
  1356  00FF8C  72                 	db	114	;'r'
  1357  00FF8D  6E                 	db	110	;'n'
  1358  00FF8E  00                 	db	0
  1359  00FF8F                     STR_6:
  1360  00FF8F  6E                 	db	110	;'n'
  1361  00FF90  75                 	db	117	;'u'
  1362  00FF91  6D                 	db	109	;'m'
  1363  00FF92  62                 	db	98	;'b'
  1364  00FF93  65                 	db	101	;'e'
  1365  00FF94  72                 	db	114	;'r'
  1366  00FF95  3A                 	db	58	;':'
  1367  00FF96  00                 	db	0
  1368  00FF97                     STR_98:
  1369  00FF97  28                 	db	40
  1370  00FF98  6E                 	db	110	;'n'
  1371  00FF99  75                 	db	117	;'u'
  1372  00FF9A  6C                 	db	108	;'l'
  1373  00FF9B  6C                 	db	108	;'l'
  1374  00FF9C  29                 	db	41
  1375  00FF9D  00                 	db	0
  1376  00FF9E                     STR_56:
  1377  00FF9E  77                 	db	119	;'w'
  1378  00FF9F  72                 	db	114	;'r'
  1379  00FFA0  6F                 	db	111	;'o'
  1380  00FFA1  6E                 	db	110	;'n'
  1381  00FFA2  67                 	db	103	;'g'
  1382  00FFA3  21                 	db	33
  1383  00FFA4  00                 	db	0
  1384  00FFA5                     STR_16:
  1385  00FFA5  6D                 	db	109	;'m'
  1386  00FFA6  6F                 	db	111	;'o'
  1387  00FFA7  64                 	db	100	;'d'
  1388  00FFA8  65                 	db	101	;'e'
  1389  00FFA9  20                 	db	32
  1390  00FFAA  32                 	db	50	;'2'
  1391  00FFAB  00                 	db	0
  1392  00FFAC                     STR_96:
  1393  00FFAC  42                 	db	66	;'B'
  1394  00FFAD  4E                 	db	78	;'N'
  1395  00FFAE  4E                 	db	78	;'N'
  1396  00FFAF  4E                 	db	78	;'N'
  1397  00FFB0  00                 	db	0
  1398  00FFB1                     STR_94:
  1399  00FFB1  42                 	db	66	;'B'
  1400  00FFB2  42                 	db	66	;'B'
  1401  00FFB3  4E                 	db	78	;'N'
  1402  00FFB4  57                 	db	87	;'W'
  1403  00FFB5  00                 	db	0
  1404  00FFB6                     STR_95:
  1405  00FFB6  42                 	db	66	;'B'
  1406  00FFB7  4E                 	db	78	;'N'
  1407  00FFB8  4E                 	db	78	;'N'
  1408  00FFB9  57                 	db	87	;'W'
  1409  00FFBA  00                 	db	0
  1410  00FFBB                     STR_93:
  1411  00FFBB  42                 	db	66	;'B'
  1412  00FFBC  42                 	db	66	;'B'
  1413  00FFBD  53                 	db	83	;'S'
  1414  00FFBE  57                 	db	87	;'W'
  1415  00FFBF  00                 	db	0
  1416  00FFC0                     STR_91:
  1417  00FFC0  42                 	db	66	;'B'
  1418  00FFC1  4E                 	db	78	;'N'
  1419  00FFC2  57                 	db	87	;'W'
  1420  00FFC3  57                 	db	87	;'W'
  1421  00FFC4  00                 	db	0
  1422  00FFC5                     STR_92:
  1423  00FFC5  42                 	db	66	;'B'
  1424  00FFC6  53                 	db	83	;'S'
  1425  00FFC7  57                 	db	87	;'W'
  1426  00FFC8  57                 	db	87	;'W'
  1427  00FFC9  00                 	db	0
  1428  00FFCA                     STR_97:
  1429  00FFCA  42                 	db	66	;'B'
  1430  00FFCB  57                 	db	87	;'W'
  1431  00FFCC  57                 	db	87	;'W'
  1432  00FFCD  57                 	db	87	;'W'
  1433  00FFCE  00                 	db	0
  1434  00FFCF                     STR_66:
  1435  00FFCF  42                 	db	66	;'B'
  1436  00FFD0  3A                 	db	58	;':'
  1437  00FFD1  25                 	db	37
  1438  00FFD2  64                 	db	100	;'d'
  1439  00FFD3  00                 	db	0
  1440  00FFD4                     STR_67:
  1441  00FFD4  4E                 	db	78	;'N'
  1442  00FFD5  3A                 	db	58	;':'
  1443  00FFD6  25                 	db	37
  1444  00FFD7  64                 	db	100	;'d'
  1445  00FFD8  00                 	db	0
  1446  00FFD9                     STR_68:
  1447  00FFD9  53                 	db	83	;'S'
  1448  00FFDA  3A                 	db	58	;':'
  1449  00FFDB  25                 	db	37
  1450  00FFDC  64                 	db	100	;'d'
  1451  00FFDD  00                 	db	0
  1452  00FFDE                     STR_44:
  1453  00FFDE  44                 	db	68	;'D'
  1454  00FFDF  6F                 	db	111	;'o'
  1455  00FFE0  6E                 	db	110	;'n'
  1456  00FFE1  65                 	db	101	;'e'
  1457  00FFE2  00                 	db	0
  1458  00FFE3                     STR_8:
  1459  00FFE3  73                 	db	115	;'s'
  1460  00FFE4  74                 	db	116	;'t'
  1461  00FFE5  65                 	db	101	;'e'
  1462  00FFE6  70                 	db	112	;'p'
  1463  00FFE7  00                 	db	0
  1464  00FFE8                     STR_85:
  1465  00FFE8  42                 	db	66	;'B'
  1466  00FFE9  42                 	db	66	;'B'
  1467  00FFEA  4E                 	db	78	;'N'
  1468  00FFEB  00                 	db	0
  1469  00FFEC                     STR_86:
  1470  00FFEC  42                 	db	66	;'B'
  1471  00FFED  42                 	db	66	;'B'
  1472  00FFEE  53                 	db	83	;'S'
  1473  00FFEF  00                 	db	0
  1474  00FFF0                     STR_87:
  1475  00FFF0  42                 	db	66	;'B'
  1476  00FFF1  42                 	db	66	;'B'
  1477  00FFF2  57                 	db	87	;'W'
  1478  00FFF3  00                 	db	0
  1479  00FFF4                     STR_90:
  1480  00FFF4  42                 	db	66	;'B'
  1481  00FFF5  57                 	db	87	;'W'
  1482  00FFF6  57                 	db	87	;'W'
  1483  00FFF7  00                 	db	0
  1484  00FFF8                     STR_5:
  1485  00FFF8  25                 	db	37
  1486  00FFF9  73                 	db	115	;'s'
  1487  00FFFA  00                 	db	0
  1488  00FFFB                     STR_12:
  1489  00FFFB  2C                 	db	44
  1490  00FFFC  00                 	db	0
  1491  00FFFD                     STR_46:
  1492  00FFFD  42                 	db	66	;'B'
  1493  00FFFE  00                 	db	0
  1494  0000                     
  1495                           ; #config settings
  1496  00FFFF  00                 	db	0	; dummy byte at the end
  1497  0000                     
  1498                           	psect	cinit
  1499  00568A                     __pcinit:
  1500                           	opt stack 0
  1501  00568A                     start_initialization:
  1502                           	opt stack 0
  1503  00568A                     __initialization:
  1504                           	opt stack 0
  1505                           
  1506                           ; Initialize objects allocated to BANK1 (10 bytes)
  1507                           ; load TBLPTR registers with __pidataBANK1
  1508  00568A  0E46               	movlw	low __pidataBANK1
  1509  00568C  6EF6               	movwf	tblptrl,c
  1510  00568E  0E62               	movlw	high __pidataBANK1
  1511  005690  6EF7               	movwf	tblptrh,c
  1512  005692  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1513  005694  6EF8               	movwf	tblptru,c
  1514  005696  EE01  F0E9         	lfsr	0,__pdataBANK1
  1515  00569A  EE10 F00A          	lfsr	1,10
  1516  00569E                     copy_data0:
  1517  00569E  0009               	tblrd		*+
  1518  0056A0  CFF5 FFEE          	movff	tablat,postinc0
  1519  0056A4  50E5               	movf	postdec1,w,c
  1520  0056A6  50E1               	movf	fsr1l,w,c
  1521  0056A8  E1FA               	bnz	copy_data0
  1522                           
  1523                           ; Initialize objects allocated to BANK0 (6 bytes)
  1524                           ; load TBLPTR registers with __pidataBANK0
  1525  0056AA  0E8C               	movlw	low __pidataBANK0
  1526  0056AC  6EF6               	movwf	tblptrl,c
  1527  0056AE  0E62               	movlw	high __pidataBANK0
  1528  0056B0  6EF7               	movwf	tblptrh,c
  1529  0056B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1530  0056B4  6EF8               	movwf	tblptru,c
  1531  0056B6  EE00  F0FA         	lfsr	0,__pdataBANK0
  1532  0056BA  EE10 F006          	lfsr	1,6
  1533  0056BE                     copy_data1:
  1534  0056BE  0009               	tblrd		*+
  1535  0056C0  CFF5 FFEE          	movff	tablat,postinc0
  1536  0056C4  50E5               	movf	postdec1,w,c
  1537  0056C6  50E1               	movf	fsr1l,w,c
  1538  0056C8  E1FA               	bnz	copy_data1
  1539                           
  1540                           ; Initialize objects allocated to COMRAM (8 bytes)
  1541                           ; load TBLPTR registers with __pidataCOMRAM
  1542  0056CA  0E64               	movlw	low __pidataCOMRAM
  1543  0056CC  6EF6               	movwf	tblptrl,c
  1544  0056CE  0E62               	movlw	high __pidataCOMRAM
  1545  0056D0  6EF7               	movwf	tblptrh,c
  1546  0056D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1547  0056D4  6EF8               	movwf	tblptru,c
  1548  0056D6  EE00  F077         	lfsr	0,__pdataCOMRAM
  1549  0056DA  EE10 F008          	lfsr	1,8
  1550  0056DE                     copy_data2:
  1551  0056DE  0009               	tblrd		*+
  1552  0056E0  CFF5 FFEE          	movff	tablat,postinc0
  1553  0056E4  50E5               	movf	postdec1,w,c
  1554  0056E6  50E1               	movf	fsr1l,w,c
  1555  0056E8  E1FA               	bnz	copy_data2
  1556                           
  1557                           ; Clear objects allocated to BANK2 (200 bytes)
  1558  0056EA  EE02  F000         	lfsr	0,__pbssBANK2
  1559  0056EE  0EC8               	movlw	200
  1560  0056F0                     clear_0:
  1561  0056F0  6AEE               	clrf	postinc0,c
  1562  0056F2  06E8               	decf	wreg,f,c
  1563  0056F4  E1FD               	bnz	clear_0
  1564                           
  1565                           ; Clear objects allocated to BANK1 (233 bytes)
  1566  0056F6  EE01  F000         	lfsr	0,__pbssBANK1
  1567  0056FA  0EE9               	movlw	233
  1568  0056FC                     clear_1:
  1569  0056FC  6AEE               	clrf	postinc0,c
  1570  0056FE  06E8               	decf	wreg,f,c
  1571  005700  E1FD               	bnz	clear_1
  1572                           
  1573                           ; Clear objects allocated to BANK0 (67 bytes)
  1574  005702  EE00  F080         	lfsr	0,__pbssBANK0
  1575  005706  0E43               	movlw	67
  1576  005708                     clear_2:
  1577  005708  6AEE               	clrf	postinc0,c
  1578  00570A  06E8               	decf	wreg,f,c
  1579  00570C  E1FD               	bnz	clear_2
  1580                           
  1581                           ; Clear objects allocated to COMRAM (53 bytes)
  1582  00570E  EE00  F042         	lfsr	0,__pbssCOMRAM
  1583  005712  0E35               	movlw	53
  1584  005714                     clear_3:
  1585  005714  6AEE               	clrf	postinc0,c
  1586  005716  06E8               	decf	wreg,f,c
  1587  005718  E1FD               	bnz	clear_3
  1588  00571A                     end_of_initialization:
  1589                           	opt stack 0
  1590  00571A                     __end_of__initialization:
  1591                           	opt stack 0
  1592  00571A  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1593  00571C  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1594  00571E  0100               	movlb	0
  1595  005720  EF20  F00F         	goto	_main	;jump to C main() function
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1l	equ	0xFE1
  1604                           
  1605                           	psect	bssCOMRAM
  1606  000042                     __pbssCOMRAM:
  1607                           	opt stack 0
  1608  000042                     _compartment_number:
  1609                           	opt stack 0
  1610  000042                     	ds	16
  1611  000052                     _W:
  1612                           	opt stack 0
  1613  000052                     	ds	2
  1614  000054                     _S:
  1615                           	opt stack 0
  1616  000054                     	ds	2
  1617  000056                     _N:
  1618                           	opt stack 0
  1619  000056                     	ds	2
  1620  000058                     _B:
  1621                           	opt stack 0
  1622  000058                     	ds	2
  1623  00005A                     _counter_step:
  1624                           	opt stack 0
  1625  00005A                     	ds	2
  1626  00005C                     _counter:
  1627                           	opt stack 0
  1628  00005C                     	ds	2
  1629  00005E                     _operationTime:
  1630                           	opt stack 0
  1631  00005E                     	ds	2
  1632  000060                     _prev:
  1633                           	opt stack 0
  1634  000060                     	ds	2
  1635  000062                     _gear_counter:
  1636                           	opt stack 0
  1637  000062                     	ds	2
  1638  000064                     _operation_done:
  1639                           	opt stack 0
  1640  000064                     	ds	2
  1641  000066                     _operation:
  1642                           	opt stack 0
  1643  000066                     	ds	2
  1644  000068                     _white_tape:
  1645                           	opt stack 0
  1646  000068                     	ds	2
  1647  00006A                     _timerCounter:
  1648                           	opt stack 0
  1649  00006A                     	ds	1
  1650  00006B                     _j:
  1651                           	opt stack 0
  1652  00006B                     	ds	1
  1653  00006C                     _input_ch:
  1654                           	opt stack 0
  1655  00006C                     	ds	1
  1656  00006D                     _nuts_data:
  1657                           	opt stack 0
  1658  00006D                     	ds	1
  1659  00006E                     _temp:
  1660                           	opt stack 0
  1661  00006E                     	ds	1
  1662  00006F                     	ds	1
  1663  000070                     _current_set2:
  1664                           	opt stack 0
  1665  000070                     	ds	5
  1666  000075                     _number:
  1667                           	opt stack 0
  1668  000075                     	ds	2
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           
  1678                           	psect	dataCOMRAM
  1679  000077                     __pdataCOMRAM:
  1680                           	opt stack 0
  1681  000077                     _motorStop_3:
  1682                           	opt stack 0
  1683  000077                     	ds	1
  1684  000078                     _motorStart_3:
  1685                           	opt stack 0
  1686  000078                     	ds	1
  1687  000079                     _motorStop_2:
  1688                           	opt stack 0
  1689  000079                     	ds	1
  1690  00007A                     _motorStart_2:
  1691                           	opt stack 0
  1692  00007A                     	ds	1
  1693  00007B                     _motorStop_1:
  1694                           	opt stack 0
  1695  00007B                     	ds	1
  1696  00007C                     _motorStart_1:
  1697                           	opt stack 0
  1698  00007C                     	ds	1
  1699  00007D                     _motorStop_0:
  1700                           	opt stack 0
  1701  00007D                     	ds	1
  1702  00007E                     _motorStart_0:
  1703                           	opt stack 0
  1704  00007E                     	ds	1
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           
  1714                           	psect	bssBANK0
  1715  000080                     __pbssBANK0:
  1716                           	opt stack 0
  1717  000080                     _compartment_array:
  1718                           	opt stack 0
  1719  000080                     	ds	16
  1720  000090                     _time:
  1721                           	opt stack 0
  1722  000090                     	ds	7
  1723  000097                     _W_spacingTime:
  1724                           	opt stack 0
  1725  000097                     	ds	2
  1726  000099                     _S_spacingTime:
  1727                           	opt stack 0
  1728  000099                     	ds	2
  1729  00009B                     _N_spacingTime:
  1730                           	opt stack 0
  1731  00009B                     	ds	2
  1732  00009D                     _B_spacingTime:
  1733                           	opt stack 0
  1734  00009D                     	ds	2
  1735  00009F                     _W_remain:
  1736                           	opt stack 0
  1737  00009F                     	ds	2
  1738  0000A1                     _S_remain:
  1739                           	opt stack 0
  1740  0000A1                     	ds	2
  1741  0000A3                     _N_remain:
  1742                           	opt stack 0
  1743  0000A3                     	ds	2
  1744  0000A5                     _B_remain:
  1745                           	opt stack 0
  1746  0000A5                     	ds	2
  1747  0000A7                     _W_counter:
  1748                           	opt stack 0
  1749  0000A7                     	ds	2
  1750  0000A9                     _N_counter:
  1751                           	opt stack 0
  1752  0000A9                     	ds	2
  1753  0000AB                     _S_counter:
  1754                           	opt stack 0
  1755  0000AB                     	ds	2
  1756  0000AD                     _B_counter:
  1757                           	opt stack 0
  1758  0000AD                     	ds	2
  1759  0000AF                     _assembly_step:
  1760                           	opt stack 0
  1761  0000AF                     	ds	2
  1762  0000B1                     _state:
  1763                           	opt stack 0
  1764  0000B1                     	ds	2
  1765  0000B3                     _change_mode:
  1766                           	opt stack 0
  1767  0000B3                     	ds	2
  1768  0000B5                     _mode:
  1769                           	opt stack 0
  1770  0000B5                     	ds	2
  1771  0000B7                     _i:
  1772                           	opt stack 0
  1773  0000B7                     	ds	2
  1774  0000B9                     _MADCTLbits:
  1775                           	opt stack 0
  1776  0000B9                     	ds	1
  1777  0000BA                     _NeedToCloseLid:
  1778                           	opt stack 0
  1779  0000BA                     	ds	1
  1780  0000BB                     _EndOfProgram:
  1781                           	opt stack 0
  1782  0000BB                     	ds	1
  1783  0000BC                     _openHandle_data:
  1784                           	opt stack 0
  1785  0000BC                     	ds	1
  1786  0000BD                     _LCDinterruptState:
  1787                           	opt stack 0
  1788  0000BD                     	ds	1
  1789  0000BE                     _current_set:
  1790                           	opt stack 0
  1791  0000BE                     	ds	5
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           
  1801                           	psect	dataBANK0
  1802  0000FA                     __pdataBANK0:
  1803                           	opt stack 0
  1804  0000FA                     _spacingTime:
  1805                           	opt stack 0
  1806  0000FA                     	ds	2
  1807  0000FC                     _close_handle:
  1808                           	opt stack 0
  1809  0000FC                     	ds	1
  1810  0000FD                     _servo_ramp:
  1811                           	opt stack 0
  1812  0000FD                     	ds	1
  1813  0000FE                     _rotate_1compartment:
  1814                           	opt stack 0
  1815  0000FE                     	ds	1
  1816  0000FF                     _rotate_gear:
  1817                           	opt stack 0
  1818  0000FF                     	ds	1
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           
  1828                           	psect	bssBANK1
  1829  000100                     __pbssBANK1:
  1830                           	opt stack 0
  1831  000100                     _W_array:
  1832                           	opt stack 0
  1833  000100                     	ds	16
  1834  000110                     _N_array:
  1835                           	opt stack 0
  1836  000110                     	ds	16
  1837  000120                     _S_array:
  1838                           	opt stack 0
  1839  000120                     	ds	16
  1840  000130                     _B_array:
  1841                           	opt stack 0
  1842  000130                     	ds	16
  1843  000140                     _prev_number:
  1844                           	opt stack 0
  1845  000140                     	ds	16
  1846  000150                     _final_number:
  1847                           	opt stack 0
  1848  000150                     	ds	16
  1849  000160                     _final_time:
  1850                           	opt stack 0
  1851  000160                     	ds	2
  1852  000162                     _sec_final:
  1853                           	opt stack 0
  1854  000162                     	ds	2
  1855  000164                     _min_final:
  1856                           	opt stack 0
  1857  000164                     	ds	2
  1858  000166                     _hr_final:
  1859                           	opt stack 0
  1860  000166                     	ds	2
  1861  000168                     _initial_time:
  1862                           	opt stack 0
  1863  000168                     	ds	2
  1864  00016A                     _sec_initial:
  1865                           	opt stack 0
  1866  00016A                     	ds	2
  1867  00016C                     _min_initial:
  1868                           	opt stack 0
  1869  00016C                     	ds	2
  1870  00016E                     _hr_initial:
  1871                           	opt stack 0
  1872  00016E                     	ds	2
  1873  000170                     _W_total_dispensed:
  1874                           	opt stack 0
  1875  000170                     	ds	2
  1876  000172                     _S_total_dispensed:
  1877                           	opt stack 0
  1878  000172                     	ds	2
  1879  000174                     _N_total_dispensed:
  1880                           	opt stack 0
  1881  000174                     	ds	2
  1882  000176                     _B_total_dispensed:
  1883                           	opt stack 0
  1884  000176                     	ds	2
  1885  000178                     _W_done:
  1886                           	opt stack 0
  1887  000178                     	ds	2
  1888  00017A                     _S_done:
  1889                           	opt stack 0
  1890  00017A                     	ds	2
  1891  00017C                     _N_done:
  1892                           	opt stack 0
  1893  00017C                     	ds	2
  1894  00017E                     _B_done:
  1895                           	opt stack 0
  1896  00017E                     	ds	2
  1897  000180                     _W_input:
  1898                           	opt stack 0
  1899  000180                     	ds	2
  1900  000182                     _S_input:
  1901                           	opt stack 0
  1902  000182                     	ds	2
  1903  000184                     _N_input:
  1904                           	opt stack 0
  1905  000184                     	ds	2
  1906  000186                     _B_input:
  1907                           	opt stack 0
  1908  000186                     	ds	2
  1909  000188                     _prev_state:
  1910                           	opt stack 0
  1911  000188                     	ds	2
  1912  00018A                     _total_number:
  1913                           	opt stack 0
  1914  00018A                     	ds	2
  1915  00018C                     _valid:
  1916                           	opt stack 0
  1917  00018C                     	ds	2
  1918  00018E                     _error:
  1919                           	opt stack 0
  1920  00018E                     	ds	2
  1921  000190                     _compartment_pos:
  1922                           	opt stack 0
  1923  000190                     	ds	2
  1924  000192                     _angle:
  1925                           	opt stack 0
  1926  000192                     	ds	2
  1927  000194                     _prev_set:
  1928                           	opt stack 0
  1929  000194                     	ds	40
  1930  0001BC                     _final_set:
  1931                           	opt stack 0
  1932  0001BC                     	ds	40
  1933  0001E4                     _temp_set:
  1934                           	opt stack 0
  1935  0001E4                     	ds	5
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	dataBANK1
  1946  0001E9                     __pdataBANK1:
  1947                           	opt stack 0
  1948  0001E9                     _W_max:
  1949                           	opt stack 0
  1950  0001E9                     	ds	2
  1951  0001EB                     _S_max:
  1952                           	opt stack 0
  1953  0001EB                     	ds	2
  1954  0001ED                     _N_max:
  1955                           	opt stack 0
  1956  0001ED                     	ds	2
  1957  0001EF                     _B_max:
  1958                           	opt stack 0
  1959  0001EF                     	ds	2
  1960  0001F1                     _init_position:
  1961                           	opt stack 0
  1962  0001F1                     	ds	2
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           
  1972                           	psect	bssBANK2
  1973  000200                     __pbssBANK2:
  1974                           	opt stack 0
  1975  000200                     _fastener:
  1976                           	opt stack 0
  1977  000200                     	ds	200
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postdec1	equ	0xFE5
  1985                           fsr1l	equ	0xFE1
  1986                           
  1987                           	psect	cstackBANK0
  1988  0000C3                     __pcstackBANK0:
  1989                           	opt stack 0
  1990  0000C3                     ??_isdigit:
  1991  0000C3                     ??_I2C_Master_Wait:
  1992  0000C3                     ??_spiTransfer:
  1993  0000C3                     ?___awdiv:
  1994                           	opt stack 0
  1995  0000C3                     ?___lwdiv:
  1996                           	opt stack 0
  1997  0000C3                     ?___lldiv:
  1998                           	opt stack 0
  1999  0000C3                     lcdNibble@temp:
  2000                           	opt stack 0
  2001  0000C3                     spiInit@divider:
  2002                           	opt stack 0
  2003  0000C3                     generate_compartment_array@step:
  2004                           	opt stack 0
  2005  0000C3                     ___awdiv@dividend:
  2006                           	opt stack 0
  2007  0000C3                     ___lwdiv@dividend:
  2008                           	opt stack 0
  2009  0000C3                     ___lldiv@dividend:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x0
  2013  0000C3                     	ds	1
  2014  0000C4                     lcdNibble@data:
  2015                           	opt stack 0
  2016  0000C4                     I2C_Master_Read@ackBit:
  2017                           	opt stack 0
  2018  0000C4                     spiTransfer@byteToTransfer:
  2019                           	opt stack 0
  2020  0000C4                     _isdigit$2258:
  2021                           	opt stack 0
  2022  0000C4                     I2C_Master_Write@byteToWrite:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x1
  2026  0000C4                     	ds	1
  2027  0000C5                     ??_generate_compartment_array:
  2028  0000C5                     lcdInst@data:
  2029                           	opt stack 0
  2030  0000C5                     putch@data:
  2031                           	opt stack 0
  2032  0000C5                     I2C_Master_Read@receivedByte:
  2033                           	opt stack 0
  2034  0000C5                     spiSend@val:
  2035                           	opt stack 0
  2036  0000C5                     isdigit@c:
  2037                           	opt stack 0
  2038  0000C5                     ___awdiv@divisor:
  2039                           	opt stack 0
  2040  0000C5                     ___lwdiv@divisor:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0000C5                     	ds	1
  2045  0000C6                     ??_initLCD:
  2046  0000C6                     I2C_sendData@char_data:
  2047                           	opt stack 0
  2048  0000C6                     glcdTransfer@cmd:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x3
  2052  0000C6                     	ds	1
  2053  0000C7                     ??_glcdTransfer:
  2054  0000C7                     ___awdiv@counter:
  2055                           	opt stack 0
  2056  0000C7                     ___lwdiv@quotient:
  2057                           	opt stack 0
  2058  0000C7                     ___lldiv@divisor:
  2059                           	opt stack 0
  2060                           
  2061                           ; 4 bytes @ 0x4
  2062  0000C7                     	ds	1
  2063  0000C8                     glcdTransfer@byte:
  2064                           	opt stack 0
  2065  0000C8                     ___awdiv@sign:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x5
  2069  0000C8                     	ds	1
  2070  0000C9                     glcdSetCOLMOD@numBitsPerPixel:
  2071                           	opt stack 0
  2072  0000C9                     ___lwdiv@counter:
  2073                           	opt stack 0
  2074  0000C9                     ___awdiv@quotient:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x6
  2078  0000C9                     	ds	1
  2079  0000CA                     ?___lwmod:
  2080                           	opt stack 0
  2081  0000CA                     glcdSetCOLMOD@rawData:
  2082                           	opt stack 0
  2083  0000CA                     ___lwmod@dividend:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x7
  2087  0000CA                     	ds	1
  2088  0000CB                     ?___wmul:
  2089                           	opt stack 0
  2090  0000CB                     ___wmul@multiplier:
  2091                           	opt stack 0
  2092  0000CB                     ___lldiv@quotient:
  2093                           	opt stack 0
  2094                           
  2095                           ; 4 bytes @ 0x8
  2096  0000CB                     	ds	1
  2097  0000CC                     ___lwmod@divisor:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x9
  2101  0000CC                     	ds	1
  2102  0000CD                     ___wmul@multiplicand:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0xA
  2106  0000CD                     	ds	1
  2107  0000CE                     ___lwmod@counter:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0xB
  2111  0000CE                     	ds	1
  2112  0000CF                     ___lldiv@counter:
  2113                           	opt stack 0
  2114  0000CF                     ___wmul@product:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0xC
  2118  0000CF                     	ds	1
  2119  0000D0                     I2C_Master_Init@clockFreq:
  2120                           	opt stack 0
  2121                           
  2122                           ; 4 bytes @ 0xD
  2123  0000D0                     	ds	1
  2124  0000D1                     ?_printf:
  2125                           	opt stack 0
  2126  0000D1                     glcdDrawRectangle@XE:
  2127                           	opt stack 0
  2128  0000D1                     printf@f:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0xE
  2132  0000D1                     	ds	1
  2133  0000D2                     glcdDrawRectangle@YS:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0xF
  2137  0000D2                     	ds	1
  2138  0000D3                     glcdDrawRectangle@YE:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x10
  2142  0000D3                     	ds	1
  2143  0000D4                     ??_I2C_Master_Init:
  2144  0000D4                     glcdDrawRectangle@color:
  2145                           	opt stack 0
  2146                           
  2147                           ; 4 bytes @ 0x11
  2148  0000D4                     	ds	4
  2149  0000D8                     ??_glcdDrawRectangle:
  2150                           
  2151                           ; 1 bytes @ 0x15
  2152  0000D8                     	ds	3
  2153  0000DB                     ??_printf:
  2154                           
  2155                           ; 1 bytes @ 0x18
  2156  0000DB                     	ds	1
  2157  0000DC                     glcdDrawRectangle@numLoops:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x19
  2161  0000DC                     	ds	2
  2162  0000DE                     glcdDrawRectangle@i:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x1B
  2166  0000DE                     	ds	1
  2167  0000DF                     printf@idx:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x1C
  2171  0000DF                     	ds	1
  2172  0000E0                     printf@prec:
  2173                           	opt stack 0
  2174  0000E0                     glcdDrawRectangle@colorData:
  2175                           	opt stack 0
  2176                           
  2177                           ; 3 bytes @ 0x1D
  2178  0000E0                     	ds	1
  2179  0000E1                     printf@cp:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x1E
  2183  0000E1                     	ds	2
  2184  0000E3                     glcdDrawRectangle@XS:
  2185                           	opt stack 0
  2186  0000E3                     printf@ap:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x20
  2190  0000E3                     	ds	1
  2191  0000E4                     ??_initGLCD:
  2192  0000E4                     ??_drawTeamName:
  2193  0000E4                     ??_drawBolt:
  2194  0000E4                     ??_drawNut:
  2195  0000E4                     ??_drawSpacer:
  2196  0000E4                     ??_drawWasher:
  2197                           
  2198                           ; 1 bytes @ 0x21
  2199  0000E4                     	ds	1
  2200  0000E5                     printf@len:
  2201                           	opt stack 0
  2202                           
  2203                           ; 2 bytes @ 0x22
  2204  0000E5                     	ds	2
  2205  0000E7                     printf@val:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x24
  2209  0000E7                     	ds	2
  2210  0000E9                     printf@flag:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x26
  2214  0000E9                     	ds	1
  2215  0000EA                     printf@width:
  2216                           	opt stack 0
  2217                           
  2218                           ; 2 bytes @ 0x27
  2219  0000EA                     	ds	2
  2220  0000EC                     printf@c:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x29
  2224  0000EC                     	ds	1
  2225  0000ED                     Bolt_dispense@B_max:
  2226                           	opt stack 0
  2227  0000ED                     Nut_dispense@N_max:
  2228                           	opt stack 0
  2229  0000ED                     Spacer_dispense@S_max:
  2230                           	opt stack 0
  2231  0000ED                     Washer_dispense@W_max:
  2232                           	opt stack 0
  2233  0000ED                     Bolt_remain@time:
  2234                           	opt stack 0
  2235  0000ED                     Nut_remain@time:
  2236                           	opt stack 0
  2237  0000ED                     Spacer_remain@time:
  2238                           	opt stack 0
  2239  0000ED                     Washer_remain@time:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x2A
  2243  0000ED                     	ds	2
  2244  0000EF                     ??_Bolt_dispense:
  2245  0000EF                     ??_Nut_dispense:
  2246  0000EF                     ??_Spacer_dispense:
  2247  0000EF                     ??_Washer_dispense:
  2248  0000EF                     ??_Nut_remain:
  2249  0000EF                     ??_Washer_remain:
  2250  0000EF                     ??_Spacer_remain:
  2251  0000EF                     ??_Bolt_remain:
  2252                           
  2253                           ; 1 bytes @ 0x2C
  2254  0000EF                     	ds	2
  2255  0000F1                     ??_main:
  2256                           
  2257                           ; 1 bytes @ 0x2E
  2258  0000F1                     	ds	2
  2259  0000F3                     main@rotation:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x30
  2263  0000F3                     	ds	1
  2264  0000F4                     main@x:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x31
  2268  0000F4                     	ds	1
  2269  0000F5                     main@y:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x32
  2273  0000F5                     	ds	1
  2274  0000F6                     _main$2694:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x33
  2278  0000F6                     	ds	2
  2279  0000F8                     main@compart_id:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x35
  2283  0000F8                     	ds	2
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           
  2293                           	psect	cstackCOMRAM
  2294  000001                     __pcstackCOMRAM:
  2295                           	opt stack 0
  2296  000001                     ??i2_I2C_Master_Wait:
  2297  000001                     ??i2_isdigit:
  2298  000001                     ?_check:
  2299                           	opt stack 0
  2300  000001                     ?_strcmp:
  2301                           	opt stack 0
  2302  000001                     ?___awmod:
  2303                           	opt stack 0
  2304  000001                     ?i2___wmul:
  2305                           	opt stack 0
  2306  000001                     ?i2___awdiv:
  2307                           	opt stack 0
  2308  000001                     ?i2___lwdiv:
  2309                           	opt stack 0
  2310  000001                     ?i2___lldiv:
  2311                           	opt stack 0
  2312  000001                     i2lcdNibble@temp:
  2313                           	opt stack 0
  2314  000001                     ___awmod@dividend:
  2315                           	opt stack 0
  2316  000001                     strcat@to:
  2317                           	opt stack 0
  2318  000001                     strcmp@s1:
  2319                           	opt stack 0
  2320  000001                     i2generate_compartment_array@step:
  2321                           	opt stack 0
  2322  000001                     i2___wmul@multiplier:
  2323                           	opt stack 0
  2324  000001                     i2___awdiv@dividend:
  2325                           	opt stack 0
  2326  000001                     i2___lwdiv@dividend:
  2327                           	opt stack 0
  2328  000001                     i2___lldiv@dividend:
  2329                           	opt stack 0
  2330                           
  2331                           ; 4 bytes @ 0x0
  2332  000001                     	ds	1
  2333  000002                     i2lcdNibble@data:
  2334                           	opt stack 0
  2335  000002                     i2I2C_Master_Read@ackBit:
  2336                           	opt stack 0
  2337  000002                     i2_isdigit$2258:
  2338                           	opt stack 0
  2339  000002                     i2I2C_Master_Write@byteToWrite:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x1
  2343  000002                     	ds	1
  2344  000003                     ??i2_generate_compartment_array:
  2345  000003                     i2lcdInst@data:
  2346                           	opt stack 0
  2347  000003                     i2putch@data:
  2348                           	opt stack 0
  2349  000003                     i2I2C_Master_Read@receivedByte:
  2350                           	opt stack 0
  2351  000003                     i2isdigit@c:
  2352                           	opt stack 0
  2353  000003                     ___awmod@divisor:
  2354                           	opt stack 0
  2355  000003                     strcat@from:
  2356                           	opt stack 0
  2357  000003                     strcmp@s2:
  2358                           	opt stack 0
  2359  000003                     i2___wmul@multiplicand:
  2360                           	opt stack 0
  2361  000003                     i2___awdiv@divisor:
  2362                           	opt stack 0
  2363  000003                     i2___lwdiv@divisor:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x2
  2367  000003                     	ds	1
  2368  000004                     ??i2_initLCD:
  2369  000004                     
  2370                           ; 1 bytes @ 0x3
  2371  000004                     	ds	1
  2372  000005                     ??_strcmp:
  2373  000005                     ___awmod@counter:
  2374                           	opt stack 0
  2375  000005                     i2___awdiv@counter:
  2376                           	opt stack 0
  2377  000005                     strcat@cp:
  2378                           	opt stack 0
  2379  000005                     i2___wmul@product:
  2380                           	opt stack 0
  2381  000005                     i2___lwdiv@quotient:
  2382                           	opt stack 0
  2383  000005                     i2___lldiv@divisor:
  2384                           	opt stack 0
  2385                           
  2386                           ; 4 bytes @ 0x4
  2387  000005                     	ds	1
  2388  000006                     ___awmod@sign:
  2389                           	opt stack 0
  2390  000006                     strcmp@r:
  2391                           	opt stack 0
  2392  000006                     i2___awdiv@sign:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x5
  2396  000006                     	ds	1
  2397  000007                     ??_is_valid:
  2398  000007                     ?_strncmp:
  2399                           	opt stack 0
  2400  000007                     i2___lwdiv@counter:
  2401                           	opt stack 0
  2402  000007                     strcpy@to:
  2403                           	opt stack 0
  2404  000007                     strncmp@s1:
  2405                           	opt stack 0
  2406  000007                     i2___awdiv@quotient:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x6
  2410  000007                     	ds	1
  2411  000008                     ?i2___lwmod:
  2412                           	opt stack 0
  2413  000008                     i2___lwmod@dividend:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x7
  2417  000008                     	ds	1
  2418  000009                     strcpy@from:
  2419                           	opt stack 0
  2420  000009                     strncmp@s2:
  2421                           	opt stack 0
  2422  000009                     i2___lldiv@quotient:
  2423                           	opt stack 0
  2424                           
  2425                           ; 4 bytes @ 0x8
  2426  000009                     	ds	1
  2427  00000A                     i2___lwmod@divisor:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x9
  2431  00000A                     	ds	1
  2432  00000B                     strcpy@cp:
  2433                           	opt stack 0
  2434  00000B                     strncmp@len:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0xA
  2438  00000B                     	ds	1
  2439  00000C                     i2___lwmod@counter:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0xB
  2443  00000C                     	ds	1
  2444  00000D                     ??_strncmp:
  2445  00000D                     ?i2_printf:
  2446                           	opt stack 0
  2447  00000D                     i2___lldiv@counter:
  2448                           	opt stack 0
  2449  00000D                     i2printf@f:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xC
  2453  00000D                     	ds	1
  2454  00000E                     i2I2C_Master_Init@clockFreq:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0xD
  2458  00000E                     	ds	4
  2459  000012                     ??i2_I2C_Master_Init:
  2460                           
  2461                           ; 1 bytes @ 0x11
  2462  000012                     	ds	3
  2463  000015                     ??i2_printf:
  2464                           
  2465                           ; 1 bytes @ 0x14
  2466  000015                     	ds	4
  2467  000019                     i2printf@idx:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x18
  2471  000019                     	ds	1
  2472  00001A                     i2printf@prec:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x19
  2476  00001A                     	ds	1
  2477  00001B                     i2printf@cp:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x1A
  2481  00001B                     	ds	2
  2482  00001D                     i2printf@ap:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x1C
  2486  00001D                     	ds	2
  2487  00001F                     i2printf@len:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x1E
  2491  00001F                     	ds	2
  2492  000021                     i2printf@val:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x20
  2496  000021                     	ds	2
  2497  000023                     i2printf@flag:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x22
  2501  000023                     	ds	1
  2502  000024                     i2printf@width:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x23
  2506  000024                     	ds	2
  2507  000026                     i2printf@c:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x25
  2511  000026                     	ds	1
  2512  000027                     ??_interruptHandler:
  2513                           
  2514                           ; 1 bytes @ 0x26
  2515  000027                     	ds	23
  2516  00003E                     interruptHandler@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x3D
  2520  00003E                     	ds	2
  2521  000040                     interruptHandler@keypress:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x3F
  2525  000040                     	ds	1
  2526  000041                     interruptHandler@temp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 1 bytes @ 0x40
  2530  000041                     	ds	1
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1l	equ	0xFE1
  2539                           
  2540 ;;
  2541 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2542 ;;
  2543 ;; *************** function _main *****************
  2544 ;; Defined at:
  2545 ;;		line 105 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  compart_id      2   53[BANK0 ] int 
  2550 ;;  y               1   50[BANK0 ] unsigned char 
  2551 ;;  x               1   49[BANK0 ] unsigned char 
  2552 ;;  rotation        1   48[BANK0 ] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;Total ram usage:        9 bytes
  2567 ;; Hardware stack levels required when called:   10
  2568 ;; This function calls:
  2569 ;;		_Bolt_dispense
  2570 ;;		_Bolt_remain
  2571 ;;		_I2C_Master_Read
  2572 ;;		_I2C_Master_Start
  2573 ;;		_I2C_Master_Stop
  2574 ;;		_I2C_Master_Write
  2575 ;;		_I2C_init
  2576 ;;		_I2C_sendData
  2577 ;;		_Nut_dispense
  2578 ;;		_Nut_remain
  2579 ;;		_Spacer_dispense
  2580 ;;		_Spacer_remain
  2581 ;;		_Washer_dispense
  2582 ;;		_Washer_remain
  2583 ;;		___awdiv
  2584 ;;		___wmul
  2585 ;;		_drawTeamName
  2586 ;;		_generate_compartment_array
  2587 ;;		_initGLCD
  2588 ;;		_initLCD
  2589 ;;		_initVibTimer
  2590 ;;		_initialize
  2591 ;;		_lcdInst
  2592 ;;		_printf
  2593 ;; This function is called by:
  2594 ;;		Startup code after reset
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text0
  2599  001E40                     __ptext0:
  2600                           	opt stack 0
  2601  001E40                     _main:
  2602                           	opt stack 21
  2603                           
  2604                           ;main.c: 111: OSCCONbits.IRCF2 = 1;
  2605                           
  2606                           ;incstack = 0
  2607  001E40  8CD3               	bsf	4051,6,c	;volatile
  2608                           
  2609                           ;main.c: 112: OSCCONbits.IRCF1 = 1;
  2610  001E42  8AD3               	bsf	4051,5,c	;volatile
  2611                           
  2612                           ;main.c: 113: OSCCONbits.IRCF0 = 1;
  2613  001E44  88D3               	bsf	4051,4,c	;volatile
  2614                           
  2615                           ;main.c: 114: OSCCONbits.SCS1 = 1;
  2616  001E46  82D3               	bsf	4051,1,c	;volatile
  2617                           
  2618                           ;main.c: 115: OSCTUNEbits.PLLEN = 1;
  2619  001E48  8C9B               	bsf	3995,6,c	;volatile
  2620                           
  2621                           ;main.c: 118: LATA = 0x00;
  2622  001E4A  0E00               	movlw	0
  2623  001E4C  6E89               	movwf	3977,c	;volatile
  2624                           
  2625                           ;main.c: 119: LATB = 0x00;
  2626  001E4E  0E00               	movlw	0
  2627  001E50  6E8A               	movwf	3978,c	;volatile
  2628                           
  2629                           ;main.c: 120: LATC = 0x00;
  2630  001E52  0E00               	movlw	0
  2631  001E54  6E8B               	movwf	3979,c	;volatile
  2632                           
  2633                           ;main.c: 121: LATD = 0x00;
  2634  001E56  0E00               	movlw	0
  2635  001E58  6E8C               	movwf	3980,c	;volatile
  2636                           
  2637                           ;main.c: 122: LATE = 0x00;
  2638  001E5A  0E00               	movlw	0
  2639  001E5C  6E8D               	movwf	3981,c	;volatile
  2640                           
  2641                           ;main.c: 126: TRISA = 0xFF;
  2642  001E5E  6892               	setf	3986,c	;volatile
  2643                           
  2644                           ;main.c: 127: TRISB = 0xFF;
  2645  001E60  6893               	setf	3987,c	;volatile
  2646                           
  2647                           ;main.c: 128: TRISC = 0b10000000;
  2648  001E62  0E80               	movlw	128
  2649  001E64  6E94               	movwf	3988,c	;volatile
  2650                           
  2651                           ;main.c: 132: TRISD = 0b00000001;
  2652  001E66  0E01               	movlw	1
  2653  001E68  6E95               	movwf	3989,c	;volatile
  2654                           
  2655                           ;main.c: 138: TRISE = 0b00000100;
  2656  001E6A  0E04               	movlw	4
  2657  001E6C  6E96               	movwf	3990,c	;volatile
  2658                           
  2659                           ;main.c: 145: ADCON0 = 0x00;
  2660  001E6E  0E00               	movlw	0
  2661  001E70  6EC2               	movwf	4034,c	;volatile
  2662                           
  2663                           ;main.c: 146: ADCON1 = 0b00001111;
  2664  001E72  0E0F               	movlw	15
  2665  001E74  6EC1               	movwf	4033,c	;volatile
  2666                           
  2667                           ;main.c: 149: INT1IE = 1;
  2668  001E76  86F0               	bsf	intcon3,3,c	;volatile
  2669                           
  2670                           ;main.c: 150: (INTCONbits.GIE = 1);
  2671  001E78  8EF2               	bsf	intcon,7,c	;volatile
  2672                           
  2673                           ;main.c: 155: initLCD();
  2674  001E7A  ECF9  F02E         	call	_initLCD	;wreg free
  2675                           
  2676                           ;main.c: 156: initGLCD();
  2677  001E7E  EC5B  F01D         	call	_initGLCD	;wreg free
  2678                           
  2679                           ;main.c: 159: unsigned char rotation = 0, x = 0, y = 0;
  2680  001E82  0E00               	movlw	0
  2681  001E84  0100               	movlb	0	; () banked
  2682  001E86  6FF3               	movwf	main@rotation& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685  001E88  0E00               	movlw	0
  2686  001E8A  6FF4               	movwf	main@x& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689  001E8C  0E00               	movlw	0
  2690  001E8E  6FF5               	movwf	main@y& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 161: drawTeamName();
  2694  001E90  EC36  F01F         	call	_drawTeamName	;wreg free
  2695  001E94                     
  2696                           ;main.c: 166: if (mode == 0){
  2697  001E94  0100               	movlb	0	; () banked
  2698  001E96  51B5               	movf	_mode& (0+255),w,b
  2699  001E98  11B6               	iorwf	(_mode+1)& (0+255),w,b
  2700  001E9A  A4D8               	btfss	status,2,c
  2701  001E9C  D031               	goto	l506
  2702  001E9E                     u5320:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main.c: 168: printf("1:date and time");
  2706                           
  2707                           ; BSR set to: 0
  2708                           
  2709                           ;main.c: 167: while(1){
  2710  001E9E  0E41               	movlw	low STR_1
  2711  001EA0  6FD1               	movwf	printf@f& (0+255),b
  2712  001EA2  0EFE               	movlw	high STR_1
  2713  001EA4  6FD2               	movwf	(printf@f+1)& (0+255),b
  2714  001EA6  EC2A  F019         	call	_printf	;wreg free
  2715                           
  2716                           ;main.c: 169: lcdInst(0xC0);;
  2717  001EAA  0EC0               	movlw	192
  2718  001EAC  ECDF  F030         	call	_lcdInst
  2719                           
  2720                           ;main.c: 170: printf("2:Enter Instruction");
  2721  001EB0  0E6A               	movlw	low STR_2
  2722  001EB2  0100               	movlb	0	; () banked
  2723  001EB4  6FD1               	movwf	printf@f& (0+255),b
  2724  001EB6  0EFD               	movlw	high STR_2
  2725  001EB8  6FD2               	movwf	(printf@f+1)& (0+255),b
  2726  001EBA  EC2A  F019         	call	_printf	;wreg free
  2727                           
  2728                           ;main.c: 171: _delay((unsigned long)((100)*(32000000/4000.0)));
  2729  001EBE  0E05               	movlw	5
  2730  001EC0  0100               	movlb	0	; () banked
  2731  001EC2  6FF2               	movwf	(??_main+1)& (0+255),b
  2732  001EC4  0E0F               	movlw	15
  2733  001EC6  6FF1               	movwf	??_main& (0+255),b
  2734  001EC8  0EF1               	movlw	241
  2735  001ECA                     u6597:
  2736  001ECA  2EE8               	decfsz	wreg,f,c
  2737  001ECC  D7FE               	bra	u6597
  2738  001ECE  2FF1               	decfsz	??_main& (0+255),f,b
  2739  001ED0  D7FC               	bra	u6597
  2740  001ED2  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2741  001ED4  D7FA               	bra	u6597
  2742                           
  2743                           ;main.c: 172: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2744  001ED6  0E80               	movlw	128
  2745  001ED8  ECDF  F030         	call	_lcdInst
  2746  001EDC  0E34               	movlw	52
  2747  001EDE  0100               	movlb	0	; () banked
  2748  001EE0  6FF1               	movwf	??_main& (0+255),b
  2749  001EE2  0EF1               	movlw	241
  2750  001EE4                     u6607:
  2751  001EE4  2EE8               	decfsz	wreg,f,c
  2752  001EE6  D7FE               	bra	u6607
  2753  001EE8  2FF1               	decfsz	??_main& (0+255),f,b
  2754  001EEA  D7FC               	bra	u6607
  2755  001EEC  D000               	nop2	
  2756                           
  2757                           ;main.c: 173: if (change_mode == 1){
  2758  001EEE  0100               	movlb	0	; () banked
  2759  001EF0  05B3               	decf	_change_mode& (0+255),w,b
  2760  001EF2  11B4               	iorwf	(_change_mode+1)& (0+255),w,b
  2761  001EF4  A4D8               	btfss	status,2,c
  2762  001EF6  D7D3               	goto	u5320
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 174: mode = 1;
  2766  001EF8  0E00               	movlw	0
  2767  001EFA  6FB6               	movwf	(_mode+1)& (0+255),b
  2768  001EFC  0E01               	movlw	1
  2769  001EFE  6FB5               	movwf	_mode& (0+255),b
  2770  001F00                     l506:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 176: }
  2774                           ;main.c: 177: }
  2775                           ;main.c: 179: }
  2776                           ;main.c: 182: if (mode == 1){
  2777                           
  2778                           ; BSR set to: 0
  2779                           
  2780                           ; BSR set to: 0
  2781  001F00  05B5               	decf	_mode& (0+255),w,b
  2782  001F02  11B6               	iorwf	(_mode+1)& (0+255),w,b
  2783  001F04  A4D8               	btfss	status,2,c
  2784  001F06  D1E5               	goto	l508
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 184: initLCD();
  2788  001F08  ECF9  F02E         	call	_initLCD	;wreg free
  2789  001F0C                     
  2790                           ;main.c: 187: if (state == 0){
  2791  001F0C  0100               	movlb	0	; () banked
  2792  001F0E  51B1               	movf	_state& (0+255),w,b
  2793  001F10  11B2               	iorwf	(_state+1)& (0+255),w,b
  2794  001F12  A4D8               	btfss	status,2,c
  2795  001F14  D022               	goto	l510
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 189: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2799  001F16  0E80               	movlw	128
  2800  001F18  ECDF  F030         	call	_lcdInst
  2801  001F1C  0E34               	movlw	52
  2802  001F1E  0100               	movlb	0	; () banked
  2803  001F20  6FF1               	movwf	??_main& (0+255),b
  2804  001F22  0EF1               	movlw	241
  2805  001F24                     u6617:
  2806  001F24  2EE8               	decfsz	wreg,f,c
  2807  001F26  D7FE               	bra	u6617
  2808  001F28  2FF1               	decfsz	??_main& (0+255),f,b
  2809  001F2A  D7FC               	bra	u6617
  2810  001F2C  D000               	nop2	
  2811                           
  2812                           ;main.c: 190: printf("assembly step:");
  2813  001F2E  0E70               	movlw	low STR_3
  2814  001F30  0100               	movlb	0	; () banked
  2815  001F32  6FD1               	movwf	printf@f& (0+255),b
  2816  001F34  0EFE               	movlw	high STR_3
  2817  001F36  6FD2               	movwf	(printf@f+1)& (0+255),b
  2818  001F38  EC2A  F019         	call	_printf	;wreg free
  2819                           
  2820                           ;main.c: 191: _delay((unsigned long)((100)*(32000000/4000.0)));
  2821  001F3C  0E05               	movlw	5
  2822  001F3E  0100               	movlb	0	; () banked
  2823  001F40  6FF2               	movwf	(??_main+1)& (0+255),b
  2824  001F42  0E0F               	movlw	15
  2825  001F44  6FF1               	movwf	??_main& (0+255),b
  2826  001F46  0EF1               	movlw	241
  2827  001F48                     u6627:
  2828  001F48  2EE8               	decfsz	wreg,f,c
  2829  001F4A  D7FE               	bra	u6627
  2830  001F4C  2FF1               	decfsz	??_main& (0+255),f,b
  2831  001F4E  D7FC               	bra	u6627
  2832  001F50  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2833  001F52  D7FA               	bra	u6627
  2834                           
  2835                           ;main.c: 192: lcdInst(0xC0);;
  2836  001F54  0EC0               	movlw	192
  2837  001F56  ECDF  F030         	call	_lcdInst
  2838  001F5A                     l510:
  2839                           
  2840                           ;main.c: 193: }
  2841                           ;main.c: 194: if (state ==1){
  2842  001F5A  0100               	movlb	0	; () banked
  2843  001F5C  05B1               	decf	_state& (0+255),w,b
  2844  001F5E  11B2               	iorwf	(_state+1)& (0+255),w,b
  2845  001F60  A4D8               	btfss	status,2,c
  2846  001F62  D023               	goto	l511
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 195: initLCD();
  2850  001F64  ECF9  F02E         	call	_initLCD	;wreg free
  2851                           
  2852                           ;main.c: 196: printf("fastener set:");
  2853  001F68  0ED8               	movlw	low STR_4
  2854  001F6A  0100               	movlb	0	; () banked
  2855  001F6C  6FD1               	movwf	printf@f& (0+255),b
  2856  001F6E  0EFE               	movlw	high STR_4
  2857  001F70  6FD2               	movwf	(printf@f+1)& (0+255),b
  2858  001F72  EC2A  F019         	call	_printf	;wreg free
  2859                           
  2860                           ;main.c: 197: lcdInst(0xC0);;
  2861  001F76  0EC0               	movlw	192
  2862  001F78  ECDF  F030         	call	_lcdInst
  2863                           
  2864                           ;main.c: 198: printf("%s",current_set);
  2865  001F7C  0EF8               	movlw	low STR_5
  2866  001F7E  0100               	movlb	0	; () banked
  2867  001F80  6FD1               	movwf	printf@f& (0+255),b
  2868  001F82  0EFF               	movlw	high STR_5
  2869  001F84  6FD2               	movwf	(printf@f+1)& (0+255),b
  2870  001F86  0EBE               	movlw	low _current_set
  2871  001F88  6FD3               	movwf	(?_printf+2)& (0+255),b
  2872  001F8A  0E00               	movlw	high _current_set
  2873  001F8C  6FD4               	movwf	(?_printf+3)& (0+255),b
  2874  001F8E  EC2A  F019         	call	_printf	;wreg free
  2875                           
  2876                           ;main.c: 199: _delay((unsigned long)((100)*(32000000/4000.0)));
  2877  001F92  0E05               	movlw	5
  2878  001F94  0100               	movlb	0	; () banked
  2879  001F96  6FF2               	movwf	(??_main+1)& (0+255),b
  2880  001F98  0E0F               	movlw	15
  2881  001F9A  6FF1               	movwf	??_main& (0+255),b
  2882  001F9C  0EF1               	movlw	241
  2883  001F9E                     u6637:
  2884  001F9E  2EE8               	decfsz	wreg,f,c
  2885  001FA0  D7FE               	bra	u6637
  2886  001FA2  2FF1               	decfsz	??_main& (0+255),f,b
  2887  001FA4  D7FC               	bra	u6637
  2888  001FA6  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2889  001FA8  D7FA               	bra	u6637
  2890  001FAA                     l511:
  2891                           
  2892                           ;main.c: 200: }
  2893                           ;main.c: 202: if (state == 2){
  2894  001FAA  0E02               	movlw	2
  2895  001FAC  0100               	movlb	0	; () banked
  2896  001FAE  19B1               	xorwf	_state& (0+255),w,b
  2897  001FB0  11B2               	iorwf	(_state+1)& (0+255),w,b
  2898  001FB2  A4D8               	btfss	status,2,c
  2899  001FB4  D015               	goto	l512
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 203: initLCD();
  2903  001FB6  ECF9  F02E         	call	_initLCD	;wreg free
  2904                           
  2905                           ;main.c: 204: printf("number:");
  2906  001FBA  0E8F               	movlw	low STR_6
  2907  001FBC  0100               	movlb	0	; () banked
  2908  001FBE  6FD1               	movwf	printf@f& (0+255),b
  2909  001FC0  0EFF               	movlw	high STR_6
  2910  001FC2  6FD2               	movwf	(printf@f+1)& (0+255),b
  2911  001FC4  EC2A  F019         	call	_printf	;wreg free
  2912                           
  2913                           ;main.c: 205: _delay((unsigned long)((100)*(32000000/4000.0)));
  2914  001FC8  0E05               	movlw	5
  2915  001FCA  0100               	movlb	0	; () banked
  2916  001FCC  6FF2               	movwf	(??_main+1)& (0+255),b
  2917  001FCE  0E0F               	movlw	15
  2918  001FD0  6FF1               	movwf	??_main& (0+255),b
  2919  001FD2  0EF1               	movlw	241
  2920  001FD4                     u6647:
  2921  001FD4  2EE8               	decfsz	wreg,f,c
  2922  001FD6  D7FE               	bra	u6647
  2923  001FD8  2FF1               	decfsz	??_main& (0+255),f,b
  2924  001FDA  D7FC               	bra	u6647
  2925  001FDC  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2926  001FDE  D7FA               	bra	u6647
  2927  001FE0                     l512:
  2928                           
  2929                           ;main.c: 206: }
  2930                           ;main.c: 208: if (state == 3){
  2931  001FE0  0E03               	movlw	3
  2932  001FE2  0100               	movlb	0	; () banked
  2933  001FE4  19B1               	xorwf	_state& (0+255),w,b
  2934  001FE6  11B2               	iorwf	(_state+1)& (0+255),w,b
  2935  001FE8  A4D8               	btfss	status,2,c
  2936  001FEA  D090               	goto	l513
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 209: initLCD();
  2940  001FEC  ECF9  F02E         	call	_initLCD	;wreg free
  2941                           
  2942                           ;main.c: 210: printf("assembly step:%d",assembly_step);
  2943  001FF0  0E0F               	movlw	low STR_7
  2944  001FF2  0100               	movlb	0	; () banked
  2945  001FF4  6FD1               	movwf	printf@f& (0+255),b
  2946  001FF6  0EFE               	movlw	high STR_7
  2947  001FF8  6FD2               	movwf	(printf@f+1)& (0+255),b
  2948  001FFA  C0AF  F0D3         	movff	_assembly_step,?_printf+2
  2949  001FFE  C0B0  F0D4         	movff	_assembly_step+1,?_printf+3
  2950  002002  EC2A  F019         	call	_printf	;wreg free
  2951                           
  2952                           ;main.c: 211: _delay((unsigned long)((200)*(32000000/4000.0)));
  2953  002006  0E09               	movlw	9
  2954  002008  0100               	movlb	0	; () banked
  2955  00200A  6FF2               	movwf	(??_main+1)& (0+255),b
  2956  00200C  0E1E               	movlw	30
  2957  00200E  6FF1               	movwf	??_main& (0+255),b
  2958  002010  0EE4               	movlw	228
  2959  002012                     u6657:
  2960  002012  2EE8               	decfsz	wreg,f,c
  2961  002014  D7FE               	bra	u6657
  2962  002016  2FF1               	decfsz	??_main& (0+255),f,b
  2963  002018  D7FC               	bra	u6657
  2964  00201A  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2965  00201C  D7FA               	bra	u6657
  2966  00201E  F000               	nop	
  2967                           
  2968                           ;main.c: 212: for ( i=0; i<assembly_step; i++){
  2969  002020  0E00               	movlw	0
  2970  002022  0100               	movlb	0	; () banked
  2971  002024  6FB8               	movwf	(_i+1)& (0+255),b
  2972  002026  0E00               	movlw	0
  2973  002028  6FB7               	movwf	_i& (0+255),b
  2974  00202A  D066               	goto	l514
  2975  00202C                     
  2976                           ; BSR set to: 0
  2977                           ;main.c: 214: initLCD();
  2978                           
  2979                           ; BSR set to: 0
  2980  00202C  ECF9  F02E         	call	_initLCD	;wreg free
  2981                           
  2982                           ;main.c: 216: printf("step");
  2983  002030  0EE3               	movlw	low STR_8
  2984  002032  0100               	movlb	0	; () banked
  2985  002034  6FD1               	movwf	printf@f& (0+255),b
  2986  002036  0EFF               	movlw	high STR_8
  2987  002038  6FD2               	movwf	(printf@f+1)& (0+255),b
  2988  00203A  EC2A  F019         	call	_printf	;wreg free
  2989                           
  2990                           ;main.c: 217: printf("%d", i+1);
  2991  00203E  0ED1               	movlw	low (STR_66+2)
  2992  002040  0100               	movlb	0	; () banked
  2993  002042  6FD1               	movwf	printf@f& (0+255),b
  2994  002044  0EFF               	movlw	high (STR_66+2)
  2995  002046  6FD2               	movwf	(printf@f+1)& (0+255),b
  2996  002048  0E01               	movlw	1
  2997  00204A  25B7               	addwf	_i& (0+255),w,b
  2998  00204C  6FD3               	movwf	(?_printf+2)& (0+255),b
  2999  00204E  0E00               	movlw	0
  3000  002050  21B8               	addwfc	(_i+1)& (0+255),w,b
  3001  002052  6FD4               	movwf	(?_printf+3)& (0+255),b
  3002  002054  EC2A  F019         	call	_printf	;wreg free
  3003                           
  3004                           ;main.c: 218: printf(":");
  3005  002058  0E3F               	movlw	low (STR_35+14)
  3006  00205A  0100               	movlb	0	; () banked
  3007  00205C  6FD1               	movwf	printf@f& (0+255),b
  3008  00205E  0EFE               	movlw	high (STR_35+14)
  3009  002060  6FD2               	movwf	(printf@f+1)& (0+255),b
  3010  002062  EC2A  F019         	call	_printf	;wreg free
  3011                           
  3012                           ;main.c: 219: printf("%s", final_set[i]);
  3013  002066  C0B7  F0CB         	movff	_i,___wmul@multiplier
  3014  00206A  C0B8  F0CC         	movff	_i+1,___wmul@multiplier+1
  3015  00206E  0E00               	movlw	0
  3016  002070  0100               	movlb	0	; () banked
  3017  002072  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3018  002074  0E05               	movlw	5
  3019  002076  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3020  002078  EC66  F030         	call	___wmul	;wreg free
  3021  00207C  0EBC               	movlw	low _final_set
  3022  00207E  0100               	movlb	0	; () banked
  3023  002080  25CB               	addwf	?___wmul& (0+255),w,b
  3024  002082  6FF6               	movwf	_main$2694& (0+255),b
  3025  002084  0E01               	movlw	high _final_set
  3026  002086  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3027  002088  6FF7               	movwf	(_main$2694+1)& (0+255),b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 219: printf("%s", final_set[i]);
  3031  00208A  0EF8               	movlw	low STR_5
  3032  00208C  6FD1               	movwf	printf@f& (0+255),b
  3033  00208E  0EFF               	movlw	high STR_5
  3034  002090  6FD2               	movwf	(printf@f+1)& (0+255),b
  3035  002092  C0F6  F0D3         	movff	_main$2694,?_printf+2
  3036  002096  C0F7  F0D4         	movff	_main$2694+1,?_printf+3
  3037  00209A  EC2A  F019         	call	_printf	;wreg free
  3038                           
  3039                           ;main.c: 220: printf(",");
  3040  00209E  0EFB               	movlw	low STR_12
  3041  0020A0  0100               	movlb	0	; () banked
  3042  0020A2  6FD1               	movwf	printf@f& (0+255),b
  3043  0020A4  0EFF               	movlw	high STR_12
  3044  0020A6  6FD2               	movwf	(printf@f+1)& (0+255),b
  3045  0020A8  EC2A  F019         	call	_printf	;wreg free
  3046                           
  3047                           ;main.c: 221: printf("%d",final_number[i]);
  3048  0020AC  0ED1               	movlw	low (STR_66+2)
  3049  0020AE  0100               	movlb	0	; () banked
  3050  0020B0  6FD1               	movwf	printf@f& (0+255),b
  3051  0020B2  0EFF               	movlw	high (STR_66+2)
  3052  0020B4  6FD2               	movwf	(printf@f+1)& (0+255),b
  3053  0020B6  90D8               	bcf	status,0,c
  3054  0020B8  35B7               	rlcf	_i& (0+255),w,b
  3055  0020BA  6ED9               	movwf	fsr2l,c
  3056  0020BC  35B8               	rlcf	(_i+1)& (0+255),w,b
  3057  0020BE  6EDA               	movwf	fsr2h,c
  3058  0020C0  0E50               	movlw	low _final_number
  3059  0020C2  26D9               	addwf	fsr2l,f,c
  3060  0020C4  0E01               	movlw	high _final_number
  3061  0020C6  22DA               	addwfc	fsr2h,f,c
  3062  0020C8  CFDE F0D3          	movff	postinc2,?_printf+2
  3063  0020CC  CFDD F0D4          	movff	postdec2,?_printf+3
  3064  0020D0  EC2A  F019         	call	_printf	;wreg free
  3065                           
  3066                           ;main.c: 222: _delay((unsigned long)((100)*(32000000/4000.0)));
  3067  0020D4  0E05               	movlw	5
  3068  0020D6  0100               	movlb	0	; () banked
  3069  0020D8  6FF2               	movwf	(??_main+1)& (0+255),b
  3070  0020DA  0E0F               	movlw	15
  3071  0020DC  6FF1               	movwf	??_main& (0+255),b
  3072  0020DE  0EF1               	movlw	241
  3073  0020E0                     u6667:
  3074  0020E0  2EE8               	decfsz	wreg,f,c
  3075  0020E2  D7FE               	bra	u6667
  3076  0020E4  2FF1               	decfsz	??_main& (0+255),f,b
  3077  0020E6  D7FC               	bra	u6667
  3078  0020E8  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3079  0020EA  D7FA               	bra	u6667
  3080                           
  3081                           ;main.c: 223: lcdInst(0xC0);;
  3082  0020EC  0EC0               	movlw	192
  3083  0020EE  ECDF  F030         	call	_lcdInst
  3084  0020F2  0100               	movlb	0	; () banked
  3085  0020F4  4BB7               	infsnz	_i& (0+255),f,b
  3086  0020F6  2BB8               	incf	(_i+1)& (0+255),f,b
  3087  0020F8                     l514:
  3088                           
  3089                           ; BSR set to: 0
  3090                           
  3091                           ; BSR set to: 0
  3092  0020F8  51AF               	movf	_assembly_step& (0+255),w,b
  3093  0020FA  5DB7               	subwf	_i& (0+255),w,b
  3094  0020FC  51B0               	movf	(_assembly_step+1)& (0+255),w,b
  3095  0020FE  59B8               	subwfb	(_i+1)& (0+255),w,b
  3096  002100  A0D8               	btfss	status,0,c
  3097  002102  D794               	goto	l515
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 224: }
  3101                           ;main.c: 225: state = 4;
  3102                           
  3103                           ; BSR set to: 0
  3104  002104  0E00               	movlw	0
  3105  002106  6FB2               	movwf	(_state+1)& (0+255),b
  3106  002108  0E04               	movlw	4
  3107  00210A  6FB1               	movwf	_state& (0+255),b
  3108  00210C                     l513:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 226: }
  3112                           ;main.c: 227: if (state == 4){
  3113                           
  3114                           ; BSR set to: 0
  3115  00210C  0E04               	movlw	4
  3116  00210E  19B1               	xorwf	_state& (0+255),w,b
  3117  002110  11B2               	iorwf	(_state+1)& (0+255),w,b
  3118  002112  A4D8               	btfss	status,2,c
  3119  002114  D01F               	goto	l517
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 228: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3123  002116  0E80               	movlw	128
  3124  002118  ECDF  F030         	call	_lcdInst
  3125  00211C  0E34               	movlw	52
  3126  00211E  0100               	movlb	0	; () banked
  3127  002120  6FF1               	movwf	??_main& (0+255),b
  3128  002122  0EF1               	movlw	241
  3129  002124                     u6677:
  3130  002124  2EE8               	decfsz	wreg,f,c
  3131  002126  D7FE               	bra	u6677
  3132  002128  2FF1               	decfsz	??_main& (0+255),f,b
  3133  00212A  D7FC               	bra	u6677
  3134  00212C  D000               	nop2	
  3135                           
  3136                           ;main.c: 229: printf("Press # to start!");
  3137  00212E  0ECA               	movlw	low STR_14
  3138  002130  0100               	movlb	0	; () banked
  3139  002132  6FD1               	movwf	printf@f& (0+255),b
  3140  002134  0EFD               	movlw	high STR_14
  3141  002136  6FD2               	movwf	(printf@f+1)& (0+255),b
  3142  002138  EC2A  F019         	call	_printf	;wreg free
  3143                           
  3144                           ;main.c: 230: _delay((unsigned long)((100)*(32000000/4000.0)));
  3145  00213C  0E05               	movlw	5
  3146  00213E  0100               	movlb	0	; () banked
  3147  002140  6FF2               	movwf	(??_main+1)& (0+255),b
  3148  002142  0E0F               	movlw	15
  3149  002144  6FF1               	movwf	??_main& (0+255),b
  3150  002146  0EF1               	movlw	241
  3151  002148                     u6687:
  3152  002148  2EE8               	decfsz	wreg,f,c
  3153  00214A  D7FE               	bra	u6687
  3154  00214C  2FF1               	decfsz	??_main& (0+255),f,b
  3155  00214E  D7FC               	bra	u6687
  3156  002150  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3157  002152  D7FA               	bra	u6687
  3158  002154                     l517:
  3159                           
  3160                           ;main.c: 231: }
  3161                           ;main.c: 232: if (state == 5){
  3162  002154  0E05               	movlw	5
  3163  002156  0100               	movlb	0	; () banked
  3164  002158  19B1               	xorwf	_state& (0+255),w,b
  3165  00215A  11B2               	iorwf	(_state+1)& (0+255),w,b
  3166  00215C  A4D8               	btfss	status,2,c
  3167  00215E  D6D6               	goto	l509
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 238: I2C_init();
  3171  002160  EC0F  F030         	call	_I2C_init	;wreg free
  3172                           
  3173                           ;main.c: 240: I2C_Master_Start();
  3174  002164  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3175                           
  3176                           ;main.c: 241: I2C_Master_Write(0b11010000);
  3177  002168  0E00               	movlw	0
  3178  00216A  0100               	movlb	0	; () banked
  3179  00216C  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3180  00216E  0ED0               	movlw	208
  3181  002170  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3182  002172  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3183                           
  3184                           ;main.c: 242: I2C_Master_Write(0x00);
  3185  002176  0E00               	movlw	0
  3186  002178  0100               	movlb	0	; () banked
  3187  00217A  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3188  00217C  0E00               	movlw	0
  3189  00217E  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3190  002180  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3191                           
  3192                           ;main.c: 243: I2C_Master_Stop();
  3193  002184  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  3194                           
  3195                           ;main.c: 246: I2C_Master_Start();
  3196  002188  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3197                           
  3198                           ;main.c: 247: I2C_Master_Write(0b11010001);
  3199  00218C  0E00               	movlw	0
  3200  00218E  0100               	movlb	0	; () banked
  3201  002190  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3202  002192  0ED1               	movlw	209
  3203  002194  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3204  002196  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3205                           
  3206                           ;main.c: 248: for(i = 0; i < 6; i++){
  3207  00219A  0E00               	movlw	0
  3208  00219C  0100               	movlb	0	; () banked
  3209  00219E  6FB8               	movwf	(_i+1)& (0+255),b
  3210  0021A0  0E00               	movlw	0
  3211  0021A2  6FB7               	movwf	_i& (0+255),b
  3212  0021A4                     l7449:
  3213                           
  3214                           ; BSR set to: 0
  3215  0021A4  51B8               	movf	(_i+1)& (0+255),w,b
  3216  0021A6  E112               	bnz	l7459
  3217  0021A8  0E06               	movlw	6
  3218  0021AA  5DB7               	subwf	_i& (0+255),w,b
  3219  0021AC  B0D8               	btfsc	status,0,c
  3220  0021AE  D00E               	goto	u5430
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 249: time[i] = I2C_Master_Read(0);
  3224                           
  3225                           ; BSR set to: 0
  3226                           
  3227                           ; BSR set to: 0
  3228  0021B0  0E90               	movlw	low _time
  3229  0021B2  25B7               	addwf	_i& (0+255),w,b
  3230  0021B4  6ED9               	movwf	fsr2l,c
  3231  0021B6  0E00               	movlw	high _time
  3232  0021B8  21B8               	addwfc	(_i+1)& (0+255),w,b
  3233  0021BA  6EDA               	movwf	fsr2h,c
  3234  0021BC  0E00               	movlw	0
  3235  0021BE  EC3D  F030         	call	_I2C_Master_Read
  3236  0021C2  6EDF               	movwf	indf2,c
  3237  0021C4  0100               	movlb	0	; () banked
  3238  0021C6  4BB7               	infsnz	_i& (0+255),f,b
  3239  0021C8  2BB8               	incf	(_i+1)& (0+255),f,b
  3240  0021CA  D7EC               	goto	l7449
  3241  0021CC                     u5430:
  3242  0021CC                     l7459:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 250: }
  3246                           ;main.c: 251: time[6] = I2C_Master_Read(1);
  3247  0021CC  0E01               	movlw	1
  3248  0021CE  EC3D  F030         	call	_I2C_Master_Read
  3249  0021D2  0100               	movlb	0	; () banked
  3250  0021D4  6F96               	movwf	(_time+6)& (0+255),b
  3251                           
  3252                           ;main.c: 252: I2C_Master_Stop();
  3253  0021D6  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  3254                           
  3255                           ;main.c: 254: hr_initial = time[2]/16*10+time[2]%16;
  3256  0021DA  C092  F0F1         	movff	_time+2,??_main
  3257  0021DE  0E0F               	movlw	15
  3258  0021E0  0100               	movlb	0	; () banked
  3259  0021E2  17F1               	andwf	??_main& (0+255),f,b
  3260  0021E4  0E00               	movlw	0
  3261  0021E6  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3262  0021E8  0E10               	movlw	16
  3263  0021EA  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3264  0021EC  C092  F0C3         	movff	_time+2,___awdiv@dividend
  3265  0021F0  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3266  0021F2  EC21  F02C         	call	___awdiv	;wreg free
  3267  0021F6  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3268  0021FA  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3269  0021FE  0E00               	movlw	0
  3270  002200  0100               	movlb	0	; () banked
  3271  002202  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3272  002204  0E0A               	movlw	10
  3273  002206  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3274  002208  EC66  F030         	call	___wmul	;wreg free
  3275  00220C  0100               	movlb	0	; () banked
  3276  00220E  51F1               	movf	??_main& (0+255),w,b
  3277  002210  25CB               	addwf	?___wmul& (0+255),w,b
  3278  002212  0101               	movlb	1	; () banked
  3279  002214  6F6E               	movwf	_hr_initial& (0+255),b
  3280  002216  0100               	movlb	0	; () banked
  3281  002218  0E00               	movlw	0
  3282  00221A  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3283  00221C  0101               	movlb	1	; () banked
  3284  00221E  6F6F               	movwf	(_hr_initial+1)& (0+255),b
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;main.c: 255: min_initial = time[1]/16*10 + time[1]%16;
  3288  002220  C091  F0F1         	movff	_time+1,??_main
  3289  002224  0E0F               	movlw	15
  3290  002226  0100               	movlb	0	; () banked
  3291  002228  17F1               	andwf	??_main& (0+255),f,b
  3292  00222A  0E00               	movlw	0
  3293  00222C  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3294  00222E  0E10               	movlw	16
  3295  002230  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3296  002232  C091  F0C3         	movff	_time+1,___awdiv@dividend
  3297  002236  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3298  002238  EC21  F02C         	call	___awdiv	;wreg free
  3299  00223C  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3300  002240  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3301  002244  0E00               	movlw	0
  3302  002246  0100               	movlb	0	; () banked
  3303  002248  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3304  00224A  0E0A               	movlw	10
  3305  00224C  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3306  00224E  EC66  F030         	call	___wmul	;wreg free
  3307  002252  0100               	movlb	0	; () banked
  3308  002254  51F1               	movf	??_main& (0+255),w,b
  3309  002256  25CB               	addwf	?___wmul& (0+255),w,b
  3310  002258  0101               	movlb	1	; () banked
  3311  00225A  6F6C               	movwf	_min_initial& (0+255),b
  3312  00225C  0100               	movlb	0	; () banked
  3313  00225E  0E00               	movlw	0
  3314  002260  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3315  002262  0101               	movlb	1	; () banked
  3316  002264  6F6D               	movwf	(_min_initial+1)& (0+255),b
  3317                           
  3318                           ; BSR set to: 1
  3319                           ;main.c: 256: sec_initial = time[0]/16*10 +time[0]%16;
  3320  002266  C090  F0F1         	movff	_time,??_main
  3321  00226A  0E0F               	movlw	15
  3322  00226C  0100               	movlb	0	; () banked
  3323  00226E  17F1               	andwf	??_main& (0+255),f,b
  3324  002270  0E00               	movlw	0
  3325  002272  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3326  002274  0E10               	movlw	16
  3327  002276  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3328  002278  C090  F0C3         	movff	_time,___awdiv@dividend
  3329  00227C  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3330  00227E  EC21  F02C         	call	___awdiv	;wreg free
  3331  002282  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3332  002286  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3333  00228A  0E00               	movlw	0
  3334  00228C  0100               	movlb	0	; () banked
  3335  00228E  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3336  002290  0E0A               	movlw	10
  3337  002292  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3338  002294  EC66  F030         	call	___wmul	;wreg free
  3339  002298  0100               	movlb	0	; () banked
  3340  00229A  51F1               	movf	??_main& (0+255),w,b
  3341  00229C  25CB               	addwf	?___wmul& (0+255),w,b
  3342  00229E  0101               	movlb	1	; () banked
  3343  0022A0  6F6A               	movwf	_sec_initial& (0+255),b
  3344  0022A2  0100               	movlb	0	; () banked
  3345  0022A4  0E00               	movlw	0
  3346  0022A6  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3347  0022A8  0101               	movlb	1	; () banked
  3348  0022AA  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;main.c: 260: initVibTimer();
  3352  0022AC  ECEB  F030         	call	_initVibTimer	;wreg free
  3353                           
  3354                           ;main.c: 261: mode = 2;
  3355  0022B0  0E00               	movlw	0
  3356  0022B2  0100               	movlb	0	; () banked
  3357  0022B4  6FB6               	movwf	(_mode+1)& (0+255),b
  3358  0022B6  0E02               	movlw	2
  3359  0022B8  6FB5               	movwf	_mode& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 262: printf("start operation");
  3363  0022BA  0E51               	movlw	low STR_15
  3364  0022BC  6FD1               	movwf	printf@f& (0+255),b
  3365  0022BE  0EFE               	movlw	high STR_15
  3366  0022C0  6FD2               	movwf	(printf@f+1)& (0+255),b
  3367  0022C2  EC2A  F019         	call	_printf	;wreg free
  3368                           
  3369                           ;main.c: 266: }
  3370                           ;main.c: 268: }
  3371                           ;main.c: 269: generate_compartment_array(assembly_step);
  3372                           
  3373                           ;main.c: 264: break;
  3374  0022C6  C0AF  F0C3         	movff	_assembly_step,generate_compartment_array@step
  3375  0022CA  C0B0  F0C4         	movff	_assembly_step+1,generate_compartment_array@step+1
  3376  0022CE  EC76  F025         	call	_generate_compartment_array	;wreg free
  3377  0022D2                     l508:
  3378                           
  3379                           ;main.c: 270: }
  3380                           ;main.c: 283: if (mode == 2){
  3381  0022D2  0E02               	movlw	2
  3382  0022D4  0100               	movlb	0	; () banked
  3383  0022D6  19B5               	xorwf	_mode& (0+255),w,b
  3384  0022D8  11B6               	iorwf	(_mode+1)& (0+255),w,b
  3385  0022DA  A4D8               	btfss	status,2,c
  3386  0022DC  D5DB               	goto	l502
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 285: (INTCONbits.GIE = 1);
  3390  0022DE  8EF2               	bsf	intcon,7,c	;volatile
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 286: initLCD();
  3394  0022E0  ECF9  F02E         	call	_initLCD	;wreg free
  3395                           
  3396                           ;main.c: 287: printf("mode 2");
  3397  0022E4  0EA5               	movlw	low STR_16
  3398  0022E6  0100               	movlb	0	; () banked
  3399  0022E8  6FD1               	movwf	printf@f& (0+255),b
  3400  0022EA  0EFF               	movlw	high STR_16
  3401  0022EC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3402  0022EE  EC2A  F019         	call	_printf	;wreg free
  3403                           
  3404                           ;main.c: 288: _delay((unsigned long)((100)*(32000000/4000.0)));
  3405  0022F2  0E05               	movlw	5
  3406  0022F4  0100               	movlb	0	; () banked
  3407  0022F6  6FF2               	movwf	(??_main+1)& (0+255),b
  3408  0022F8  0E0F               	movlw	15
  3409  0022FA  6FF1               	movwf	??_main& (0+255),b
  3410  0022FC  0EF1               	movlw	241
  3411  0022FE                     u6697:
  3412  0022FE  2EE8               	decfsz	wreg,f,c
  3413  002300  D7FE               	bra	u6697
  3414  002302  2FF1               	decfsz	??_main& (0+255),f,b
  3415  002304  D7FC               	bra	u6697
  3416  002306  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3417  002308  D7FA               	bra	u6697
  3418                           
  3419                           ;main.c: 292: I2C_init();
  3420  00230A  EC0F  F030         	call	_I2C_init	;wreg free
  3421                           
  3422                           ;main.c: 294: LATCbits.LATC0 = 1;
  3423  00230E  808B               	bsf	3979,0,c	;volatile
  3424                           
  3425                           ;main.c: 295: TRISCbits.RC0 = 0;
  3426  002310  9094               	bcf	3988,0,c	;volatile
  3427                           
  3428                           ;main.c: 297: INT1IE = 0;
  3429  002312  96F0               	bcf	intcon3,3,c	;volatile
  3430                           
  3431                           ;main.c: 298: RBIE = 1;
  3432  002314  86F2               	bsf	intcon,3,c	;volatile
  3433                           
  3434                           ;main.c: 301: initLCD();
  3435  002316  ECF9  F02E         	call	_initLCD	;wreg free
  3436                           
  3437                           ;main.c: 302: printf("Locating C1");
  3438  00231A  0E0F               	movlw	low STR_17
  3439  00231C  0100               	movlb	0	; () banked
  3440  00231E  6FD1               	movwf	printf@f& (0+255),b
  3441  002320  0EFF               	movlw	high STR_17
  3442  002322  6FD2               	movwf	(printf@f+1)& (0+255),b
  3443  002324  EC2A  F019         	call	_printf	;wreg free
  3444                           
  3445                           ;main.c: 306: TRISBbits.RB5 = 1;
  3446  002328  8A93               	bsf	3987,5,c	;volatile
  3447                           
  3448                           ;main.c: 307: TRISBbits.RB7 = 1;
  3449  00232A  8E93               	bsf	3987,7,c	;volatile
  3450                           
  3451                           ;main.c: 308: TRISBbits.RB6 = 1;
  3452  00232C  8C93               	bsf	3987,6,c	;volatile
  3453                           
  3454                           ;main.c: 309: TRISBbits.RB4 = 1;
  3455  00232E  8893               	bsf	3987,4,c	;volatile
  3456                           
  3457                           ;main.c: 312: I2C_sendData(rotate_gear);
  3458  002330  0100               	movlb	0	; () banked
  3459  002332  51FF               	movf	_rotate_gear& (0+255),w,b
  3460  002334  EC7A  F030         	call	_I2C_sendData
  3461                           
  3462                           ;main.c: 317: openHandle_data = '1';
  3463  002338  0E31               	movlw	49
  3464  00233A  0100               	movlb	0	; () banked
  3465  00233C  6FBC               	movwf	_openHandle_data& (0+255),b
  3466                           
  3467                           ;main.c: 318: while(openHandle_data != '0'){
  3468  00233E  D010               	goto	l524
  3469  002340                     
  3470                           ; BSR set to: 0
  3471                           ;main.c: 319: I2C_Master_Start();
  3472                           
  3473                           ; BSR set to: 0
  3474  002340  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3475                           
  3476                           ;main.c: 320: I2C_Master_Write(0b00010001);
  3477  002344  0E00               	movlw	0
  3478  002346  0100               	movlb	0	; () banked
  3479  002348  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3480  00234A  0E11               	movlw	17
  3481  00234C  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3482  00234E  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3483                           
  3484                           ;main.c: 321: openHandle_data = I2C_Master_Read(1);
  3485  002352  0E01               	movlw	1
  3486  002354  EC3D  F030         	call	_I2C_Master_Read
  3487  002358  0100               	movlb	0	; () banked
  3488  00235A  6FBC               	movwf	_openHandle_data& (0+255),b
  3489                           
  3490                           ;main.c: 322: I2C_Master_Stop();
  3491  00235C  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  3492  002360                     l524:
  3493  002360  0E30               	movlw	48
  3494  002362  0100               	movlb	0	; () banked
  3495  002364  19BC               	xorwf	_openHandle_data& (0+255),w,b
  3496  002366  A4D8               	btfss	status,2,c
  3497  002368  D7EB               	goto	l525
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;main.c: 325: }
  3501                           ;main.c: 326: initLCD();
  3502                           
  3503                           ; BSR set to: 0
  3504  00236A  ECF9  F02E         	call	_initLCD	;wreg free
  3505                           
  3506                           ;main.c: 327: printf("C1 is found");
  3507  00236E  0E33               	movlw	low STR_18
  3508  002370  0100               	movlb	0	; () banked
  3509  002372  6FD1               	movwf	printf@f& (0+255),b
  3510  002374  0EFF               	movlw	high STR_18
  3511  002376  6FD2               	movwf	(printf@f+1)& (0+255),b
  3512  002378  EC2A  F019         	call	_printf	;wreg free
  3513                           
  3514                           ;main.c: 328: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3515  00237C  0E80               	movlw	128
  3516  00237E  ECDF  F030         	call	_lcdInst
  3517  002382  0E34               	movlw	52
  3518  002384  0100               	movlb	0	; () banked
  3519  002386  6FF1               	movwf	??_main& (0+255),b
  3520  002388  0EF1               	movlw	241
  3521  00238A                     u6707:
  3522  00238A  2EE8               	decfsz	wreg,f,c
  3523  00238C  D7FE               	bra	u6707
  3524  00238E  2FF1               	decfsz	??_main& (0+255),f,b
  3525  002390  D7FC               	bra	u6707
  3526  002392  D000               	nop2	
  3527                           
  3528                           ;main.c: 334: I2C_init();
  3529  002394  EC0F  F030         	call	_I2C_init	;wreg free
  3530                           
  3531                           ;main.c: 335: generate_compartment_array(assembly_step);
  3532  002398  C0AF  F0C3         	movff	_assembly_step,generate_compartment_array@step
  3533  00239C  C0B0  F0C4         	movff	_assembly_step+1,generate_compartment_array@step+1
  3534  0023A0  EC76  F025         	call	_generate_compartment_array	;wreg free
  3535                           
  3536                           ;main.c: 336: int compart_id = 0;
  3537  0023A4  0E00               	movlw	0
  3538  0023A6  0100               	movlb	0	; () banked
  3539  0023A8  6FF9               	movwf	(main@compart_id+1)& (0+255),b
  3540  0023AA  0E00               	movlw	0
  3541  0023AC  6FF8               	movwf	main@compart_id& (0+255),b
  3542                           
  3543                           ;main.c: 337: while(NeedToCloseLid != 1 && compart_id < 8){
  3544  0023AE  D0BA               	goto	l527
  3545  0023B0                     
  3546                           ; BSR set to: 0
  3547                           ;main.c: 338: initLCD();
  3548                           
  3549                           ; BSR set to: 0
  3550  0023B0  ECF9  F02E         	call	_initLCD	;wreg free
  3551                           
  3552                           ;main.c: 339: printf("processing C%d",(compart_id+1));
  3553  0023B4  0E8E               	movlw	low STR_19
  3554  0023B6  0100               	movlb	0	; () banked
  3555  0023B8  6FD1               	movwf	printf@f& (0+255),b
  3556  0023BA  0EFE               	movlw	high STR_19
  3557  0023BC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3558  0023BE  0E01               	movlw	1
  3559  0023C0  25F8               	addwf	main@compart_id& (0+255),w,b
  3560  0023C2  6FD3               	movwf	(?_printf+2)& (0+255),b
  3561  0023C4  0E00               	movlw	0
  3562  0023C6  21F9               	addwfc	(main@compart_id+1)& (0+255),w,b
  3563  0023C8  6FD4               	movwf	(?_printf+3)& (0+255),b
  3564  0023CA  EC2A  F019         	call	_printf	;wreg free
  3565                           
  3566                           ;main.c: 340: _delay((unsigned long)((100)*(32000000/4000.0)));
  3567  0023CE  0E05               	movlw	5
  3568  0023D0  0100               	movlb	0	; () banked
  3569  0023D2  6FF2               	movwf	(??_main+1)& (0+255),b
  3570  0023D4  0E0F               	movlw	15
  3571  0023D6  6FF1               	movwf	??_main& (0+255),b
  3572  0023D8  0EF1               	movlw	241
  3573  0023DA                     u6717:
  3574  0023DA  2EE8               	decfsz	wreg,f,c
  3575  0023DC  D7FE               	bra	u6717
  3576  0023DE  2FF1               	decfsz	??_main& (0+255),f,b
  3577  0023E0  D7FC               	bra	u6717
  3578  0023E2  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3579  0023E4  D7FA               	bra	u6717
  3580                           
  3581                           ;main.c: 342: if (compartment_array[compart_id] == 1){
  3582  0023E6  90D8               	bcf	status,0,c
  3583  0023E8  0100               	movlb	0	; () banked
  3584  0023EA  35F8               	rlcf	main@compart_id& (0+255),w,b
  3585  0023EC  6ED9               	movwf	fsr2l,c
  3586  0023EE  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3587  0023F0  6EDA               	movwf	fsr2h,c
  3588  0023F2  0E80               	movlw	low _compartment_array
  3589  0023F4  26D9               	addwf	fsr2l,f,c
  3590  0023F6  0E00               	movlw	high _compartment_array
  3591  0023F8  22DA               	addwfc	fsr2h,f,c
  3592  0023FA  04DE               	decf	postinc2,w,c
  3593  0023FC  10DE               	iorwf	postinc2,w,c
  3594  0023FE  A4D8               	btfss	status,2,c
  3595  002400  D05B               	goto	l533
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 343: B_counter = 0;
  3599  002402  0E00               	movlw	0
  3600  002404  6FAE               	movwf	(_B_counter+1)& (0+255),b
  3601  002406  0E00               	movlw	0
  3602  002408  6FAD               	movwf	_B_counter& (0+255),b
  3603                           
  3604                           ;main.c: 344: N_counter = 0;
  3605  00240A  0E00               	movlw	0
  3606  00240C  6FAA               	movwf	(_N_counter+1)& (0+255),b
  3607  00240E  0E00               	movlw	0
  3608  002410  6FA9               	movwf	_N_counter& (0+255),b
  3609                           
  3610                           ;main.c: 345: S_counter = 0;
  3611  002412  0E00               	movlw	0
  3612  002414  6FAC               	movwf	(_S_counter+1)& (0+255),b
  3613  002416  0E00               	movlw	0
  3614  002418  6FAB               	movwf	_S_counter& (0+255),b
  3615                           
  3616                           ;main.c: 346: W_counter = 0;
  3617  00241A  0E00               	movlw	0
  3618  00241C  6FA8               	movwf	(_W_counter+1)& (0+255),b
  3619  00241E  0E00               	movlw	0
  3620  002420  6FA7               	movwf	_W_counter& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 348: if (NeedToCloseLid != 1)
  3624  002422  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3625  002424  B4D8               	btfsc	status,2,c
  3626  002426  D00F               	goto	l530
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 349: Bolt_dispense(B_array[compart_id]);
  3630  002428  90D8               	bcf	status,0,c
  3631  00242A  35F8               	rlcf	main@compart_id& (0+255),w,b
  3632  00242C  6ED9               	movwf	fsr2l,c
  3633  00242E  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3634  002430  6EDA               	movwf	fsr2h,c
  3635  002432  0E30               	movlw	low _B_array
  3636  002434  26D9               	addwf	fsr2l,f,c
  3637  002436  0E01               	movlw	high _B_array
  3638  002438  22DA               	addwfc	fsr2h,f,c
  3639  00243A  CFDE F0ED          	movff	postinc2,Bolt_dispense@B_max
  3640  00243E  CFDD F0EE          	movff	postdec2,Bolt_dispense@B_max+1
  3641  002442  EC92  F02B         	call	_Bolt_dispense	;wreg free
  3642  002446                     l530:
  3643                           
  3644                           ;main.c: 352: if (NeedToCloseLid != 1)
  3645  002446  0100               	movlb	0	; () banked
  3646  002448  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3647  00244A  B4D8               	btfsc	status,2,c
  3648  00244C  D00F               	goto	l531
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 353: Nut_dispense(N_array[compart_id]);
  3652  00244E  90D8               	bcf	status,0,c
  3653  002450  35F8               	rlcf	main@compart_id& (0+255),w,b
  3654  002452  6ED9               	movwf	fsr2l,c
  3655  002454  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3656  002456  6EDA               	movwf	fsr2h,c
  3657  002458  0E10               	movlw	low _N_array
  3658  00245A  26D9               	addwf	fsr2l,f,c
  3659  00245C  0E01               	movlw	high _N_array
  3660  00245E  22DA               	addwfc	fsr2h,f,c
  3661  002460  CFDE F0ED          	movff	postinc2,Nut_dispense@N_max
  3662  002464  CFDD F0EE          	movff	postdec2,Nut_dispense@N_max+1
  3663  002468  ECF5  F02A         	call	_Nut_dispense	;wreg free
  3664  00246C                     l531:
  3665                           
  3666                           ;main.c: 356: if (NeedToCloseLid != 1)
  3667  00246C  0100               	movlb	0	; () banked
  3668  00246E  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3669  002470  B4D8               	btfsc	status,2,c
  3670  002472  D00F               	goto	l532
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 357: Spacer_dispense(S_array[compart_id]);
  3674  002474  90D8               	bcf	status,0,c
  3675  002476  35F8               	rlcf	main@compart_id& (0+255),w,b
  3676  002478  6ED9               	movwf	fsr2l,c
  3677  00247A  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3678  00247C  6EDA               	movwf	fsr2h,c
  3679  00247E  0E20               	movlw	low _S_array
  3680  002480  26D9               	addwf	fsr2l,f,c
  3681  002482  0E01               	movlw	high _S_array
  3682  002484  22DA               	addwfc	fsr2h,f,c
  3683  002486  CFDE F0ED          	movff	postinc2,Spacer_dispense@S_max
  3684  00248A  CFDD F0EE          	movff	postdec2,Spacer_dispense@S_max+1
  3685  00248E  ECA5  F02A         	call	_Spacer_dispense	;wreg free
  3686  002492                     l532:
  3687                           
  3688                           ;main.c: 359: if (NeedToCloseLid != 1)
  3689  002492  0100               	movlb	0	; () banked
  3690  002494  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3691  002496  B4D8               	btfsc	status,2,c
  3692  002498  D00F               	goto	l533
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;main.c: 360: Washer_dispense(W_array[compart_id]);
  3696  00249A  90D8               	bcf	status,0,c
  3697  00249C  35F8               	rlcf	main@compart_id& (0+255),w,b
  3698  00249E  6ED9               	movwf	fsr2l,c
  3699  0024A0  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3700  0024A2  6EDA               	movwf	fsr2h,c
  3701  0024A4  0E00               	movlw	low _W_array
  3702  0024A6  26D9               	addwf	fsr2l,f,c
  3703  0024A8  0E01               	movlw	high _W_array
  3704  0024AA  22DA               	addwfc	fsr2h,f,c
  3705  0024AC  CFDE F0ED          	movff	postinc2,Washer_dispense@W_max
  3706  0024B0  CFDD F0EE          	movff	postdec2,Washer_dispense@W_max+1
  3707  0024B4  EC55  F02A         	call	_Washer_dispense	;wreg free
  3708  0024B8                     l533:
  3709                           
  3710                           ;main.c: 362: }
  3711                           ;main.c: 364: printf("done C%d",compart_id);
  3712  0024B8  0E7D               	movlw	low STR_20
  3713  0024BA  0100               	movlb	0	; () banked
  3714  0024BC  6FD1               	movwf	printf@f& (0+255),b
  3715  0024BE  0EFF               	movlw	high STR_20
  3716  0024C0  6FD2               	movwf	(printf@f+1)& (0+255),b
  3717  0024C2  C0F8  F0D3         	movff	main@compart_id,?_printf+2
  3718  0024C6  C0F9  F0D4         	movff	main@compart_id+1,?_printf+3
  3719  0024CA  EC2A  F019         	call	_printf	;wreg free
  3720                           
  3721                           ;main.c: 365: if (NeedToCloseLid != 1 && compart_id < 7){
  3722  0024CE  0100               	movlb	0	; () banked
  3723  0024D0  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3724  0024D2  B4D8               	btfsc	status,2,c
  3725  0024D4  D025               	goto	u5540
  3726                           
  3727                           ; BSR set to: 0
  3728  0024D6  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3729  0024D8  D006               	goto	u5520
  3730  0024DA  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3731  0024DC  E121               	bnz	l7569
  3732  0024DE  0E07               	movlw	7
  3733  0024E0  5DF8               	subwf	main@compart_id& (0+255),w,b
  3734  0024E2  B0D8               	btfsc	status,0,c
  3735  0024E4  D01D               	goto	u5540
  3736  0024E6                     u5520:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 366: I2C_sendData(rotate_1compartment);
  3740  0024E6  51FE               	movf	_rotate_1compartment& (0+255),w,b
  3741  0024E8  EC7A  F030         	call	_I2C_sendData
  3742                           
  3743                           ;main.c: 367: while(NeedToCloseLid != 1){
  3744  0024EC  D015               	goto	l537
  3745  0024EE                     
  3746                           ;main.c: 368: I2C_Master_Start();
  3747  0024EE  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3748                           
  3749                           ;main.c: 369: I2C_Master_Write(0b00010001);
  3750  0024F2  0E00               	movlw	0
  3751  0024F4  0100               	movlb	0	; () banked
  3752  0024F6  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3753  0024F8  0E11               	movlw	17
  3754  0024FA  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3755  0024FC  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3756                           
  3757                           ;main.c: 370: openHandle_data = I2C_Master_Read(1);
  3758  002500  0E01               	movlw	1
  3759  002502  EC3D  F030         	call	_I2C_Master_Read
  3760  002506  0100               	movlb	0	; () banked
  3761  002508  6FBC               	movwf	_openHandle_data& (0+255),b
  3762                           
  3763                           ;main.c: 371: I2C_Master_Stop();
  3764  00250A  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  3765                           
  3766                           ;main.c: 372: if (openHandle_data == '1'){
  3767  00250E  0E31               	movlw	49
  3768  002510  0100               	movlb	0	; () banked
  3769  002512  19BC               	xorwf	_openHandle_data& (0+255),w,b
  3770  002514  B4D8               	btfsc	status,2,c
  3771  002516  D004               	goto	u5540
  3772  002518                     l537:
  3773                           
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  002518  0100               	movlb	0	; () banked
  3778  00251A  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3779  00251C  A4D8               	btfss	status,2,c
  3780  00251E  D7E7               	goto	l536
  3781  002520                     u5540:
  3782  002520                     l7569:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 375: }
  3786                           ;main.c: 376: }
  3787                           ;main.c: 377: }
  3788                           ;main.c: 378: compart_id ++;
  3789  002520  4BF8               	infsnz	main@compart_id& (0+255),f,b
  3790  002522  2BF9               	incf	(main@compart_id+1)& (0+255),f,b
  3791  002524                     l527:
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796  002524  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3797  002526  B4D8               	btfsc	status,2,c
  3798  002528  D008               	goto	u5560
  3799                           
  3800                           ; BSR set to: 0
  3801  00252A  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3802  00252C  D741               	goto	l528
  3803  00252E  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3804  002530  E104               	bnz	l7575
  3805  002532  0E08               	movlw	8
  3806  002534  5DF8               	subwf	main@compart_id& (0+255),w,b
  3807  002536  A0D8               	btfss	status,0,c
  3808  002538  D73B               	goto	l528
  3809  00253A                     u5560:
  3810  00253A                     l7575:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 379: }
  3814                           ;main.c: 385: I2C_sendData(close_handle);
  3815  00253A  51FC               	movf	_close_handle& (0+255),w,b
  3816  00253C  EC7A  F030         	call	_I2C_sendData
  3817                           
  3818                           ;main.c: 388: _delay((unsigned long)((2500)*(32000000/4000.0)));
  3819  002540  0E66               	movlw	102
  3820  002542  0100               	movlb	0	; () banked
  3821  002544  6FF2               	movwf	(??_main+1)& (0+255),b
  3822  002546  0E76               	movlw	118
  3823  002548  6FF1               	movwf	??_main& (0+255),b
  3824  00254A  0EC1               	movlw	193
  3825  00254C                     u6727:
  3826  00254C  2EE8               	decfsz	wreg,f,c
  3827  00254E  D7FE               	bra	u6727
  3828  002550  2FF1               	decfsz	??_main& (0+255),f,b
  3829  002552  D7FC               	bra	u6727
  3830  002554  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3831  002556  D7FA               	bra	u6727
  3832                           
  3833                           ;main.c: 392: I2C_sendData(servo_ramp);
  3834  002558  0100               	movlb	0	; () banked
  3835  00255A  51FD               	movf	_servo_ramp& (0+255),w,b
  3836  00255C  EC7A  F030         	call	_I2C_sendData
  3837                           
  3838                           ;main.c: 395: _delay((unsigned long)((100)*(32000000/4000.0)));
  3839  002560  0E05               	movlw	5
  3840  002562  0100               	movlb	0	; () banked
  3841  002564  6FF2               	movwf	(??_main+1)& (0+255),b
  3842  002566  0E0F               	movlw	15
  3843  002568  6FF1               	movwf	??_main& (0+255),b
  3844  00256A  0EF1               	movlw	241
  3845  00256C                     u6737:
  3846  00256C  2EE8               	decfsz	wreg,f,c
  3847  00256E  D7FE               	bra	u6737
  3848  002570  2FF1               	decfsz	??_main& (0+255),f,b
  3849  002572  D7FC               	bra	u6737
  3850  002574  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3851  002576  D7FA               	bra	u6737
  3852                           
  3853                           ;main.c: 409: if (EndOfProgram != 1){
  3854  002578  0100               	movlb	0	; () banked
  3855  00257A  05BB               	decf	_EndOfProgram& (0+255),w,b
  3856  00257C  B4D8               	btfsc	status,2,c
  3857  00257E  D006               	goto	l542
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;main.c: 410: Nut_remain(spacingTime);
  3861  002580  C0FA  F0ED         	movff	_spacingTime,Nut_remain@time
  3862  002584  C0FB  F0EE         	movff	_spacingTime+1,Nut_remain@time+1
  3863  002588  EC99  F029         	call	_Nut_remain	;wreg free
  3864  00258C                     l542:
  3865                           
  3866                           ;main.c: 412: }
  3867                           ;main.c: 413: if (EndOfProgram != 1){
  3868  00258C  0100               	movlb	0	; () banked
  3869  00258E  05BB               	decf	_EndOfProgram& (0+255),w,b
  3870  002590  B4D8               	btfsc	status,2,c
  3871  002592  D006               	goto	l543
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 414: Washer_remain(spacingTime);
  3875  002594  C0FA  F0ED         	movff	_spacingTime,Washer_remain@time
  3876  002598  C0FB  F0EE         	movff	_spacingTime+1,Washer_remain@time+1
  3877  00259C  ECDD  F028         	call	_Washer_remain	;wreg free
  3878  0025A0                     l543:
  3879                           
  3880                           ;main.c: 415: }
  3881                           ;main.c: 416: if (EndOfProgram != 1){
  3882  0025A0  0100               	movlb	0	; () banked
  3883  0025A2  05BB               	decf	_EndOfProgram& (0+255),w,b
  3884  0025A4  B4D8               	btfsc	status,2,c
  3885  0025A6  D006               	goto	l544
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 417: Spacer_remain(spacingTime);
  3889  0025A8  C0FA  F0ED         	movff	_spacingTime,Spacer_remain@time
  3890  0025AC  C0FB  F0EE         	movff	_spacingTime+1,Spacer_remain@time+1
  3891  0025B0  EC3B  F029         	call	_Spacer_remain	;wreg free
  3892  0025B4                     l544:
  3893                           
  3894                           ;main.c: 418: }
  3895                           ;main.c: 419: if (EndOfProgram != 1){
  3896  0025B4  0100               	movlb	0	; () banked
  3897  0025B6  05BB               	decf	_EndOfProgram& (0+255),w,b
  3898  0025B8  B4D8               	btfsc	status,2,c
  3899  0025BA  D006               	goto	l545
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;main.c: 420: Bolt_remain(spacingTime);
  3903  0025BC  C0FA  F0ED         	movff	_spacingTime,Bolt_remain@time
  3904  0025C0  C0FB  F0EE         	movff	_spacingTime+1,Bolt_remain@time+1
  3905  0025C4  ECF7  F029         	call	_Bolt_remain	;wreg free
  3906  0025C8                     l545:
  3907                           
  3908                           ;main.c: 421: }
  3909                           ;main.c: 434: initLCD();
  3910  0025C8  ECF9  F02E         	call	_initLCD	;wreg free
  3911                           
  3912                           ;main.c: 435: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3913  0025CC  0E80               	movlw	128
  3914  0025CE  ECDF  F030         	call	_lcdInst
  3915  0025D2  0E34               	movlw	52
  3916  0025D4  0100               	movlb	0	; () banked
  3917  0025D6  6FF1               	movwf	??_main& (0+255),b
  3918  0025D8  0EF1               	movlw	241
  3919  0025DA                     u6747:
  3920  0025DA  2EE8               	decfsz	wreg,f,c
  3921  0025DC  D7FE               	bra	u6747
  3922  0025DE  2FF1               	decfsz	??_main& (0+255),f,b
  3923  0025E0  D7FC               	bra	u6747
  3924  0025E2  D000               	nop2	
  3925                           
  3926                           ;main.c: 436: printf("Terminate!");
  3927  0025E4  0E4B               	movlw	low STR_21
  3928  0025E6  0100               	movlb	0	; () banked
  3929  0025E8  6FD1               	movwf	printf@f& (0+255),b
  3930  0025EA  0EFF               	movlw	high STR_21
  3931  0025EC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3932  0025EE  EC2A  F019         	call	_printf	;wreg free
  3933                           
  3934                           ;main.c: 437: _delay((unsigned long)((500)*(32000000/4000.0)));
  3935  0025F2  0E15               	movlw	21
  3936  0025F4  0100               	movlb	0	; () banked
  3937  0025F6  6FF2               	movwf	(??_main+1)& (0+255),b
  3938  0025F8  0E4B               	movlw	75
  3939  0025FA  6FF1               	movwf	??_main& (0+255),b
  3940  0025FC  0EBE               	movlw	190
  3941  0025FE                     u6757:
  3942  0025FE  2EE8               	decfsz	wreg,f,c
  3943  002600  D7FE               	bra	u6757
  3944  002602  2FF1               	decfsz	??_main& (0+255),f,b
  3945  002604  D7FC               	bra	u6757
  3946  002606  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3947  002608  D7FA               	bra	u6757
  3948  00260A  F000               	nop	
  3949                           
  3950                           ;main.c: 440: I2C_init();
  3951  00260C  EC0F  F030         	call	_I2C_init	;wreg free
  3952                           
  3953                           ;main.c: 442: I2C_Master_Start();
  3954  002610  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3955                           
  3956                           ;main.c: 443: I2C_Master_Write(0b11010000);
  3957  002614  0E00               	movlw	0
  3958  002616  0100               	movlb	0	; () banked
  3959  002618  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3960  00261A  0ED0               	movlw	208
  3961  00261C  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3962  00261E  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3963                           
  3964                           ;main.c: 444: I2C_Master_Write(0x00);
  3965  002622  0E00               	movlw	0
  3966  002624  0100               	movlb	0	; () banked
  3967  002626  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3968  002628  0E00               	movlw	0
  3969  00262A  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3970  00262C  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3971                           
  3972                           ;main.c: 445: I2C_Master_Stop();
  3973  002630  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  3974                           
  3975                           ;main.c: 448: I2C_Master_Start();
  3976  002634  EC3A  F031         	call	_I2C_Master_Start	;wreg free
  3977                           
  3978                           ;main.c: 449: I2C_Master_Write(0b11010001);
  3979  002638  0E00               	movlw	0
  3980  00263A  0100               	movlb	0	; () banked
  3981  00263C  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3982  00263E  0ED1               	movlw	209
  3983  002640  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3984  002642  EC28  F031         	call	_I2C_Master_Write	;wreg free
  3985                           
  3986                           ;main.c: 450: for(i = 0; i < 6; i++){
  3987  002646  0E00               	movlw	0
  3988  002648  0100               	movlb	0	; () banked
  3989  00264A  6FB8               	movwf	(_i+1)& (0+255),b
  3990  00264C  0E00               	movlw	0
  3991  00264E  6FB7               	movwf	_i& (0+255),b
  3992  002650                     l7621:
  3993                           
  3994                           ; BSR set to: 0
  3995  002650  51B8               	movf	(_i+1)& (0+255),w,b
  3996  002652  E112               	bnz	l7631
  3997  002654  0E06               	movlw	6
  3998  002656  5DB7               	subwf	_i& (0+255),w,b
  3999  002658  B0D8               	btfsc	status,0,c
  4000  00265A  D00E               	goto	u5620
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;main.c: 451: time[i] = I2C_Master_Read(0);
  4004                           
  4005                           ; BSR set to: 0
  4006                           
  4007                           ; BSR set to: 0
  4008  00265C  0E90               	movlw	low _time
  4009  00265E  25B7               	addwf	_i& (0+255),w,b
  4010  002660  6ED9               	movwf	fsr2l,c
  4011  002662  0E00               	movlw	high _time
  4012  002664  21B8               	addwfc	(_i+1)& (0+255),w,b
  4013  002666  6EDA               	movwf	fsr2h,c
  4014  002668  0E00               	movlw	0
  4015  00266A  EC3D  F030         	call	_I2C_Master_Read
  4016  00266E  6EDF               	movwf	indf2,c
  4017  002670  0100               	movlb	0	; () banked
  4018  002672  4BB7               	infsnz	_i& (0+255),f,b
  4019  002674  2BB8               	incf	(_i+1)& (0+255),f,b
  4020  002676  D7EC               	goto	l7621
  4021  002678                     u5620:
  4022  002678                     l7631:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;main.c: 452: }
  4026                           ;main.c: 453: time[6] = I2C_Master_Read(1);
  4027  002678  0E01               	movlw	1
  4028  00267A  EC3D  F030         	call	_I2C_Master_Read
  4029  00267E  0100               	movlb	0	; () banked
  4030  002680  6F96               	movwf	(_time+6)& (0+255),b
  4031                           
  4032                           ;main.c: 454: I2C_Master_Stop();
  4033  002682  EC36  F031         	call	_I2C_Master_Stop	;wreg free
  4034                           
  4035                           ;main.c: 456: hr_final = time[2]/16*10+time[2]%16;
  4036  002686  C092  F0F1         	movff	_time+2,??_main
  4037  00268A  0E0F               	movlw	15
  4038  00268C  0100               	movlb	0	; () banked
  4039  00268E  17F1               	andwf	??_main& (0+255),f,b
  4040  002690  0E00               	movlw	0
  4041  002692  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4042  002694  0E10               	movlw	16
  4043  002696  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4044  002698  C092  F0C3         	movff	_time+2,___awdiv@dividend
  4045  00269C  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4046  00269E  EC21  F02C         	call	___awdiv	;wreg free
  4047  0026A2  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4048  0026A6  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4049  0026AA  0E00               	movlw	0
  4050  0026AC  0100               	movlb	0	; () banked
  4051  0026AE  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4052  0026B0  0E0A               	movlw	10
  4053  0026B2  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4054  0026B4  EC66  F030         	call	___wmul	;wreg free
  4055  0026B8  0100               	movlb	0	; () banked
  4056  0026BA  51F1               	movf	??_main& (0+255),w,b
  4057  0026BC  25CB               	addwf	?___wmul& (0+255),w,b
  4058  0026BE  0101               	movlb	1	; () banked
  4059  0026C0  6F66               	movwf	_hr_final& (0+255),b
  4060  0026C2  0100               	movlb	0	; () banked
  4061  0026C4  0E00               	movlw	0
  4062  0026C6  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4063  0026C8  0101               	movlb	1	; () banked
  4064  0026CA  6F67               	movwf	(_hr_final+1)& (0+255),b
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;main.c: 457: min_final = time[1]/16*10 + time[1]%16;
  4068  0026CC  C091  F0F1         	movff	_time+1,??_main
  4069  0026D0  0E0F               	movlw	15
  4070  0026D2  0100               	movlb	0	; () banked
  4071  0026D4  17F1               	andwf	??_main& (0+255),f,b
  4072  0026D6  0E00               	movlw	0
  4073  0026D8  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4074  0026DA  0E10               	movlw	16
  4075  0026DC  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4076  0026DE  C091  F0C3         	movff	_time+1,___awdiv@dividend
  4077  0026E2  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4078  0026E4  EC21  F02C         	call	___awdiv	;wreg free
  4079  0026E8  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4080  0026EC  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4081  0026F0  0E00               	movlw	0
  4082  0026F2  0100               	movlb	0	; () banked
  4083  0026F4  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4084  0026F6  0E0A               	movlw	10
  4085  0026F8  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4086  0026FA  EC66  F030         	call	___wmul	;wreg free
  4087  0026FE  0100               	movlb	0	; () banked
  4088  002700  51F1               	movf	??_main& (0+255),w,b
  4089  002702  25CB               	addwf	?___wmul& (0+255),w,b
  4090  002704  0101               	movlb	1	; () banked
  4091  002706  6F64               	movwf	_min_final& (0+255),b
  4092  002708  0100               	movlb	0	; () banked
  4093  00270A  0E00               	movlw	0
  4094  00270C  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4095  00270E  0101               	movlb	1	; () banked
  4096  002710  6F65               	movwf	(_min_final+1)& (0+255),b
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;main.c: 458: sec_final = time[0]/16*10 + time[0]%16;
  4100  002712  C090  F0F1         	movff	_time,??_main
  4101  002716  0E0F               	movlw	15
  4102  002718  0100               	movlb	0	; () banked
  4103  00271A  17F1               	andwf	??_main& (0+255),f,b
  4104  00271C  0E00               	movlw	0
  4105  00271E  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4106  002720  0E10               	movlw	16
  4107  002722  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4108  002724  C090  F0C3         	movff	_time,___awdiv@dividend
  4109  002728  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4110  00272A  EC21  F02C         	call	___awdiv	;wreg free
  4111  00272E  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4112  002732  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4113  002736  0E00               	movlw	0
  4114  002738  0100               	movlb	0	; () banked
  4115  00273A  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4116  00273C  0E0A               	movlw	10
  4117  00273E  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4118  002740  EC66  F030         	call	___wmul	;wreg free
  4119  002744  0100               	movlb	0	; () banked
  4120  002746  51F1               	movf	??_main& (0+255),w,b
  4121  002748  25CB               	addwf	?___wmul& (0+255),w,b
  4122  00274A  0101               	movlb	1	; () banked
  4123  00274C  6F62               	movwf	_sec_final& (0+255),b
  4124  00274E  0100               	movlb	0	; () banked
  4125  002750  0E00               	movlw	0
  4126  002752  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4127  002754  0101               	movlb	1	; () banked
  4128  002756  6F63               	movwf	(_sec_final+1)& (0+255),b
  4129                           
  4130                           ; BSR set to: 1
  4131                           ;main.c: 463: initLCD();
  4132  002758  ECF9  F02E         	call	_initLCD	;wreg free
  4133                           
  4134                           ;main.c: 464: printf("Terminate!");
  4135  00275C  0E4B               	movlw	low STR_21
  4136  00275E  0100               	movlb	0	; () banked
  4137  002760  6FD1               	movwf	printf@f& (0+255),b
  4138  002762  0EFF               	movlw	high STR_21
  4139  002764  6FD2               	movwf	(printf@f+1)& (0+255),b
  4140  002766  EC2A  F019         	call	_printf	;wreg free
  4141                           
  4142                           ;main.c: 465: _delay((unsigned long)((500)*(32000000/4000.0)));
  4143  00276A  0E15               	movlw	21
  4144  00276C  0100               	movlb	0	; () banked
  4145  00276E  6FF2               	movwf	(??_main+1)& (0+255),b
  4146  002770  0E4B               	movlw	75
  4147  002772  6FF1               	movwf	??_main& (0+255),b
  4148  002774  0EBE               	movlw	190
  4149  002776                     u6767:
  4150  002776  2EE8               	decfsz	wreg,f,c
  4151  002778  D7FE               	bra	u6767
  4152  00277A  2FF1               	decfsz	??_main& (0+255),f,b
  4153  00277C  D7FC               	bra	u6767
  4154  00277E  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4155  002780  D7FA               	bra	u6767
  4156  002782  F000               	nop	
  4157                           
  4158                           ;main.c: 466: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4159  002784  0E80               	movlw	128
  4160  002786  ECDF  F030         	call	_lcdInst
  4161  00278A  0E34               	movlw	52
  4162  00278C  0100               	movlb	0	; () banked
  4163  00278E  6FF1               	movwf	??_main& (0+255),b
  4164  002790  0EF1               	movlw	241
  4165  002792                     u6777:
  4166  002792  2EE8               	decfsz	wreg,f,c
  4167  002794  D7FE               	bra	u6777
  4168  002796  2FF1               	decfsz	??_main& (0+255),f,b
  4169  002798  D7FC               	bra	u6777
  4170  00279A  D000               	nop2	
  4171                           
  4172                           ;main.c: 471: drawTeamName();
  4173  00279C  EC36  F01F         	call	_drawTeamName	;wreg free
  4174                           
  4175                           ;main.c: 473: printf("Bolt_remain:%d",B_remain);
  4176  0027A0  0E7F               	movlw	low STR_23
  4177  0027A2  0100               	movlb	0	; () banked
  4178  0027A4  6FD1               	movwf	printf@f& (0+255),b
  4179  0027A6  0EFE               	movlw	high STR_23
  4180  0027A8  6FD2               	movwf	(printf@f+1)& (0+255),b
  4181  0027AA  C0A5  F0D3         	movff	_B_remain,?_printf+2
  4182  0027AE  C0A6  F0D4         	movff	_B_remain+1,?_printf+3
  4183  0027B2  EC2A  F019         	call	_printf	;wreg free
  4184                           
  4185                           ;main.c: 474: _delay((unsigned long)((300)*(32000000/4000.0)));
  4186  0027B6  0E0D               	movlw	13
  4187  0027B8  0100               	movlb	0	; () banked
  4188  0027BA  6FF2               	movwf	(??_main+1)& (0+255),b
  4189  0027BC  0E2D               	movlw	45
  4190  0027BE  6FF1               	movwf	??_main& (0+255),b
  4191  0027C0  0ED7               	movlw	215
  4192  0027C2                     u6787:
  4193  0027C2  2EE8               	decfsz	wreg,f,c
  4194  0027C4  D7FE               	bra	u6787
  4195  0027C6  2FF1               	decfsz	??_main& (0+255),f,b
  4196  0027C8  D7FC               	bra	u6787
  4197  0027CA  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4198  0027CC  D7FA               	bra	u6787
  4199  0027CE  D000               	nop2	
  4200                           
  4201                           ;main.c: 475: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4202  0027D0  0E01               	movlw	1
  4203  0027D2  ECDF  F030         	call	_lcdInst
  4204  0027D6  0E9C               	movlw	156
  4205  0027D8  0100               	movlb	0	; () banked
  4206  0027DA  6FF1               	movwf	??_main& (0+255),b
  4207  0027DC  0ED7               	movlw	215
  4208  0027DE                     u6797:
  4209  0027DE  2EE8               	decfsz	wreg,f,c
  4210  0027E0  D7FE               	bra	u6797
  4211  0027E2  2FF1               	decfsz	??_main& (0+255),f,b
  4212  0027E4  D7FC               	bra	u6797
  4213                           
  4214                           ;main.c: 476: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4215  0027E6  0E80               	movlw	128
  4216  0027E8  ECDF  F030         	call	_lcdInst
  4217  0027EC  0E34               	movlw	52
  4218  0027EE  0100               	movlb	0	; () banked
  4219  0027F0  6FF1               	movwf	??_main& (0+255),b
  4220  0027F2  0EF1               	movlw	241
  4221  0027F4                     u6807:
  4222  0027F4  2EE8               	decfsz	wreg,f,c
  4223  0027F6  D7FE               	bra	u6807
  4224  0027F8  2FF1               	decfsz	??_main& (0+255),f,b
  4225  0027FA  D7FC               	bra	u6807
  4226  0027FC  D000               	nop2	
  4227                           
  4228                           ;main.c: 477: printf("Nut_remain:%d",N_remain);
  4229  0027FE  0EE6               	movlw	low STR_24
  4230  002800  0100               	movlb	0	; () banked
  4231  002802  6FD1               	movwf	printf@f& (0+255),b
  4232  002804  0EFE               	movlw	high STR_24
  4233  002806  6FD2               	movwf	(printf@f+1)& (0+255),b
  4234  002808  C0A3  F0D3         	movff	_N_remain,?_printf+2
  4235  00280C  C0A4  F0D4         	movff	_N_remain+1,?_printf+3
  4236  002810  EC2A  F019         	call	_printf	;wreg free
  4237                           
  4238                           ;main.c: 478: _delay((unsigned long)((300)*(32000000/4000.0)));
  4239  002814  0E0D               	movlw	13
  4240  002816  0100               	movlb	0	; () banked
  4241  002818  6FF2               	movwf	(??_main+1)& (0+255),b
  4242  00281A  0E2D               	movlw	45
  4243  00281C  6FF1               	movwf	??_main& (0+255),b
  4244  00281E  0ED7               	movlw	215
  4245  002820                     u6817:
  4246  002820  2EE8               	decfsz	wreg,f,c
  4247  002822  D7FE               	bra	u6817
  4248  002824  2FF1               	decfsz	??_main& (0+255),f,b
  4249  002826  D7FC               	bra	u6817
  4250  002828  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4251  00282A  D7FA               	bra	u6817
  4252  00282C  D000               	nop2	
  4253                           
  4254                           ;main.c: 479: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4255  00282E  0E01               	movlw	1
  4256  002830  ECDF  F030         	call	_lcdInst
  4257  002834  0E9C               	movlw	156
  4258  002836  0100               	movlb	0	; () banked
  4259  002838  6FF1               	movwf	??_main& (0+255),b
  4260  00283A  0ED7               	movlw	215
  4261  00283C                     u6827:
  4262  00283C  2EE8               	decfsz	wreg,f,c
  4263  00283E  D7FE               	bra	u6827
  4264  002840  2FF1               	decfsz	??_main& (0+255),f,b
  4265  002842  D7FC               	bra	u6827
  4266                           
  4267                           ;main.c: 480: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4268  002844  0E80               	movlw	128
  4269  002846  ECDF  F030         	call	_lcdInst
  4270  00284A  0E34               	movlw	52
  4271  00284C  0100               	movlb	0	; () banked
  4272  00284E  6FF1               	movwf	??_main& (0+255),b
  4273  002850  0EF1               	movlw	241
  4274  002852                     u6837:
  4275  002852  2EE8               	decfsz	wreg,f,c
  4276  002854  D7FE               	bra	u6837
  4277  002856  2FF1               	decfsz	??_main& (0+255),f,b
  4278  002858  D7FC               	bra	u6837
  4279  00285A  D000               	nop2	
  4280                           
  4281                           ;main.c: 481: printf("Spacer_remain:%d",S_remain);
  4282  00285C  0EED               	movlw	low STR_25
  4283  00285E  0100               	movlb	0	; () banked
  4284  002860  6FD1               	movwf	printf@f& (0+255),b
  4285  002862  0EFD               	movlw	high STR_25
  4286  002864  6FD2               	movwf	(printf@f+1)& (0+255),b
  4287  002866  C0A1  F0D3         	movff	_S_remain,?_printf+2
  4288  00286A  C0A2  F0D4         	movff	_S_remain+1,?_printf+3
  4289  00286E  EC2A  F019         	call	_printf	;wreg free
  4290                           
  4291                           ;main.c: 482: _delay((unsigned long)((300)*(32000000/4000.0)));
  4292  002872  0E0D               	movlw	13
  4293  002874  0100               	movlb	0	; () banked
  4294  002876  6FF2               	movwf	(??_main+1)& (0+255),b
  4295  002878  0E2D               	movlw	45
  4296  00287A  6FF1               	movwf	??_main& (0+255),b
  4297  00287C  0ED7               	movlw	215
  4298  00287E                     u6847:
  4299  00287E  2EE8               	decfsz	wreg,f,c
  4300  002880  D7FE               	bra	u6847
  4301  002882  2FF1               	decfsz	??_main& (0+255),f,b
  4302  002884  D7FC               	bra	u6847
  4303  002886  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4304  002888  D7FA               	bra	u6847
  4305  00288A  D000               	nop2	
  4306                           
  4307                           ;main.c: 483: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4308  00288C  0E01               	movlw	1
  4309  00288E  ECDF  F030         	call	_lcdInst
  4310  002892  0E9C               	movlw	156
  4311  002894  0100               	movlb	0	; () banked
  4312  002896  6FF1               	movwf	??_main& (0+255),b
  4313  002898  0ED7               	movlw	215
  4314  00289A                     u6857:
  4315  00289A  2EE8               	decfsz	wreg,f,c
  4316  00289C  D7FE               	bra	u6857
  4317  00289E  2FF1               	decfsz	??_main& (0+255),f,b
  4318  0028A0  D7FC               	bra	u6857
  4319                           
  4320                           ;main.c: 484: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4321  0028A2  0E80               	movlw	128
  4322  0028A4  ECDF  F030         	call	_lcdInst
  4323  0028A8  0E34               	movlw	52
  4324  0028AA  0100               	movlb	0	; () banked
  4325  0028AC  6FF1               	movwf	??_main& (0+255),b
  4326  0028AE  0EF1               	movlw	241
  4327  0028B0                     u6867:
  4328  0028B0  2EE8               	decfsz	wreg,f,c
  4329  0028B2  D7FE               	bra	u6867
  4330  0028B4  2FF1               	decfsz	??_main& (0+255),f,b
  4331  0028B6  D7FC               	bra	u6867
  4332  0028B8  D000               	nop2	
  4333                           
  4334                           ;main.c: 485: printf("Washer_remain:%d",W_remain);
  4335  0028BA  0EFE               	movlw	low STR_26
  4336  0028BC  0100               	movlb	0	; () banked
  4337  0028BE  6FD1               	movwf	printf@f& (0+255),b
  4338  0028C0  0EFD               	movlw	high STR_26
  4339  0028C2  6FD2               	movwf	(printf@f+1)& (0+255),b
  4340  0028C4  C09F  F0D3         	movff	_W_remain,?_printf+2
  4341  0028C8  C0A0  F0D4         	movff	_W_remain+1,?_printf+3
  4342  0028CC  EC2A  F019         	call	_printf	;wreg free
  4343                           
  4344                           ;main.c: 486: _delay((unsigned long)((300)*(32000000/4000.0)));
  4345  0028D0  0E0D               	movlw	13
  4346  0028D2  0100               	movlb	0	; () banked
  4347  0028D4  6FF2               	movwf	(??_main+1)& (0+255),b
  4348  0028D6  0E2D               	movlw	45
  4349  0028D8  6FF1               	movwf	??_main& (0+255),b
  4350  0028DA  0ED7               	movlw	215
  4351  0028DC                     u6877:
  4352  0028DC  2EE8               	decfsz	wreg,f,c
  4353  0028DE  D7FE               	bra	u6877
  4354  0028E0  2FF1               	decfsz	??_main& (0+255),f,b
  4355  0028E2  D7FC               	bra	u6877
  4356  0028E4  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4357  0028E6  D7FA               	bra	u6877
  4358  0028E8  D000               	nop2	
  4359                           
  4360                           ;main.c: 487: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4361  0028EA  0E01               	movlw	1
  4362  0028EC  ECDF  F030         	call	_lcdInst
  4363  0028F0  0E9C               	movlw	156
  4364  0028F2  0100               	movlb	0	; () banked
  4365  0028F4  6FF1               	movwf	??_main& (0+255),b
  4366  0028F6  0ED7               	movlw	215
  4367  0028F8                     u6887:
  4368  0028F8  2EE8               	decfsz	wreg,f,c
  4369  0028FA  D7FE               	bra	u6887
  4370  0028FC  2FF1               	decfsz	??_main& (0+255),f,b
  4371  0028FE  D7FC               	bra	u6887
  4372                           
  4373                           ;main.c: 488: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4374  002900  0E80               	movlw	128
  4375  002902  ECDF  F030         	call	_lcdInst
  4376  002906  0E34               	movlw	52
  4377  002908  0100               	movlb	0	; () banked
  4378  00290A  6FF1               	movwf	??_main& (0+255),b
  4379  00290C  0EF1               	movlw	241
  4380  00290E                     u6897:
  4381  00290E  2EE8               	decfsz	wreg,f,c
  4382  002910  D7FE               	bra	u6897
  4383  002912  2FF1               	decfsz	??_main& (0+255),f,b
  4384  002914  D7FC               	bra	u6897
  4385  002916  D000               	nop2	
  4386                           
  4387                           ;main.c: 511: (INTCONbits.GIE = 1);
  4388  002918  8EF2               	bsf	intcon,7,c	;volatile
  4389                           
  4390                           ;main.c: 512: LATCbits.LATC0 = 0;
  4391  00291A  908B               	bcf	3979,0,c	;volatile
  4392                           
  4393                           ;main.c: 513: TRISCbits.RC0 = 0;
  4394  00291C  9094               	bcf	3988,0,c	;volatile
  4395                           
  4396                           ;main.c: 515: RBIE = 0;
  4397  00291E  96F2               	bcf	intcon,3,c	;volatile
  4398                           
  4399                           ;main.c: 516: INT1IE = 1;
  4400  002920  86F0               	bsf	intcon3,3,c	;volatile
  4401  002922                     
  4402                           ;main.c: 519: (INTCONbits.GIE = 1);
  4403  002922  8EF2               	bsf	intcon,7,c	;volatile
  4404                           
  4405                           ;main.c: 521: operation = 1;
  4406  002924  0E00               	movlw	0
  4407  002926  6E67               	movwf	_operation+1,c
  4408  002928  0E01               	movlw	1
  4409  00292A  6E66               	movwf	_operation,c
  4410                           
  4411                           ;main.c: 522: printf("1: Date and Time");
  4412  00292C  0E20               	movlw	low STR_27
  4413  00292E  0100               	movlb	0	; () banked
  4414  002930  6FD1               	movwf	printf@f& (0+255),b
  4415  002932  0EFE               	movlw	high STR_27
  4416  002934  6FD2               	movwf	(printf@f+1)& (0+255),b
  4417  002936  EC2A  F019         	call	_printf	;wreg free
  4418                           
  4419                           ;main.c: 523: lcdInst(0xC0);;
  4420  00293A  0EC0               	movlw	192
  4421  00293C  ECDF  F030         	call	_lcdInst
  4422                           
  4423                           ;main.c: 524: printf(" 2: Operation Time");
  4424  002940  0EA4               	movlw	low STR_28
  4425  002942  0100               	movlb	0	; () banked
  4426  002944  6FD1               	movwf	printf@f& (0+255),b
  4427  002946  0EFD               	movlw	high STR_28
  4428  002948  6FD2               	movwf	(printf@f+1)& (0+255),b
  4429  00294A  EC2A  F019         	call	_printf	;wreg free
  4430                           
  4431                           ;main.c: 525: _delay((unsigned long)((600)*(32000000/4000.0)));
  4432  00294E  0E19               	movlw	25
  4433  002950  0100               	movlb	0	; () banked
  4434  002952  6FF2               	movwf	(??_main+1)& (0+255),b
  4435  002954  0E5A               	movlw	90
  4436  002956  6FF1               	movwf	??_main& (0+255),b
  4437  002958  0EB1               	movlw	177
  4438  00295A                     u6907:
  4439  00295A  2EE8               	decfsz	wreg,f,c
  4440  00295C  D7FE               	bra	u6907
  4441  00295E  2FF1               	decfsz	??_main& (0+255),f,b
  4442  002960  D7FC               	bra	u6907
  4443  002962  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4444  002964  D7FA               	bra	u6907
  4445  002966  D000               	nop2	
  4446                           
  4447                           ;main.c: 526: initLCD();
  4448  002968  ECF9  F02E         	call	_initLCD	;wreg free
  4449                           
  4450                           ;main.c: 527: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4451  00296C  0E80               	movlw	128
  4452  00296E  ECDF  F030         	call	_lcdInst
  4453  002972  0E34               	movlw	52
  4454  002974  0100               	movlb	0	; () banked
  4455  002976  6FF1               	movwf	??_main& (0+255),b
  4456  002978  0EF1               	movlw	241
  4457  00297A                     u6917:
  4458  00297A  2EE8               	decfsz	wreg,f,c
  4459  00297C  D7FE               	bra	u6917
  4460  00297E  2FF1               	decfsz	??_main& (0+255),f,b
  4461  002980  D7FC               	bra	u6917
  4462  002982  D000               	nop2	
  4463                           
  4464                           ;main.c: 528: printf("3:summary");
  4465  002984  0E61               	movlw	low STR_29
  4466  002986  0100               	movlb	0	; () banked
  4467  002988  6FD1               	movwf	printf@f& (0+255),b
  4468  00298A  0EFF               	movlw	high STR_29
  4469  00298C  6FD2               	movwf	(printf@f+1)& (0+255),b
  4470  00298E  EC2A  F019         	call	_printf	;wreg free
  4471                           
  4472                           ;main.c: 529: lcdInst(0xC0);;
  4473  002992  0EC0               	movlw	192
  4474  002994  ECDF  F030         	call	_lcdInst
  4475                           
  4476                           ;main.c: 530: printf("4:return");
  4477  002998  0E86               	movlw	low STR_30
  4478  00299A  0100               	movlb	0	; () banked
  4479  00299C  6FD1               	movwf	printf@f& (0+255),b
  4480  00299E  0EFF               	movlw	high STR_30
  4481  0029A0  6FD2               	movwf	(printf@f+1)& (0+255),b
  4482  0029A2  EC2A  F019         	call	_printf	;wreg free
  4483                           
  4484                           ;main.c: 532: _delay((unsigned long)((100)*(32000000/4000.0)));
  4485  0029A6  0E05               	movlw	5
  4486  0029A8  0100               	movlb	0	; () banked
  4487  0029AA  6FF2               	movwf	(??_main+1)& (0+255),b
  4488  0029AC  0E0F               	movlw	15
  4489  0029AE  6FF1               	movwf	??_main& (0+255),b
  4490  0029B0  0EF1               	movlw	241
  4491  0029B2                     u6927:
  4492  0029B2  2EE8               	decfsz	wreg,f,c
  4493  0029B4  D7FE               	bra	u6927
  4494  0029B6  2FF1               	decfsz	??_main& (0+255),f,b
  4495  0029B8  D7FC               	bra	u6927
  4496  0029BA  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4497  0029BC  D7FA               	bra	u6927
  4498                           
  4499                           ;main.c: 533: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4500  0029BE  0E80               	movlw	128
  4501  0029C0  ECDF  F030         	call	_lcdInst
  4502  0029C4  0E34               	movlw	52
  4503  0029C6  0100               	movlb	0	; () banked
  4504  0029C8  6FF1               	movwf	??_main& (0+255),b
  4505  0029CA  0EF1               	movlw	241
  4506  0029CC                     u6937:
  4507  0029CC  2EE8               	decfsz	wreg,f,c
  4508  0029CE  D7FE               	bra	u6937
  4509  0029D0  2FF1               	decfsz	??_main& (0+255),f,b
  4510  0029D2  D7FC               	bra	u6937
  4511  0029D4  D000               	nop2	
  4512                           
  4513                           ;main.c: 535: if(operation_done == 1){
  4514  0029D6  0464               	decf	_operation_done,w,c
  4515  0029D8  1065               	iorwf	_operation_done+1,w,c
  4516  0029DA  A4D8               	btfss	status,2,c
  4517  0029DC  D7A2               	goto	l548
  4518                           
  4519                           ;main.c: 537: }
  4520                           ;main.c: 538: }
  4521                           ;main.c: 539: initialize();
  4522                           
  4523                           ;main.c: 536: break;
  4524  0029DE  EC34  F028         	call	_initialize	;wreg free
  4525                           
  4526                           ;main.c: 540: mode = 0;
  4527  0029E2  0E00               	movlw	0
  4528  0029E4  0100               	movlb	0	; () banked
  4529  0029E6  6FB6               	movwf	(_mode+1)& (0+255),b
  4530  0029E8  0E00               	movlw	0
  4531  0029EA  6FB5               	movwf	_mode& (0+255),b
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  0029EC  EF4A  F00F         	goto	l502
  4537  0029F0                     __end_of_main:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           intcon	equ	0xFF2
  4544                           intcon3	equ	0xFF0
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1l	equ	0xFE1
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           postdec2	equ	0xFDD
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _initialize *****************
  4557 ;; Defined at:
  4558 ;;		line 1100 in file "main.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    4
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text1
  4587  005068                     __ptext1:
  4588                           	opt stack 0
  4589  005068                     _initialize:
  4590                           	opt stack 26
  4591                           
  4592                           ;main.c: 1101: white_tape = 0;
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;incstack = 0
  4596  005068  0E00               	movlw	0
  4597  00506A  6E69               	movwf	_white_tape+1,c
  4598  00506C  0E00               	movlw	0
  4599  00506E  6E68               	movwf	_white_tape,c
  4600                           
  4601                           ;main.c: 1102: mode = 0;
  4602  005070  0E00               	movlw	0
  4603  005072  0100               	movlb	0	; () banked
  4604  005074  6FB6               	movwf	(_mode+1)& (0+255),b
  4605  005076  0E00               	movlw	0
  4606  005078  6FB5               	movwf	_mode& (0+255),b
  4607                           
  4608                           ;main.c: 1103: state = 0;
  4609  00507A  0E00               	movlw	0
  4610  00507C  6FB2               	movwf	(_state+1)& (0+255),b
  4611  00507E  0E00               	movlw	0
  4612  005080  6FB1               	movwf	_state& (0+255),b
  4613                           
  4614                           ;main.c: 1104: assembly_step = 0;
  4615  005082  0E00               	movlw	0
  4616  005084  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  4617  005086  0E00               	movlw	0
  4618  005088  6FAF               	movwf	_assembly_step& (0+255),b
  4619                           
  4620                           ;main.c: 1105: counter_step = 0;
  4621  00508A  0E00               	movlw	0
  4622  00508C  6E5B               	movwf	_counter_step+1,c
  4623  00508E  0E00               	movlw	0
  4624  005090  6E5A               	movwf	_counter_step,c
  4625                           
  4626                           ;main.c: 1107: valid = 0;
  4627  005092  0E00               	movlw	0
  4628  005094  0101               	movlb	1	; () banked
  4629  005096  6F8D               	movwf	(_valid+1)& (0+255),b
  4630  005098  0E00               	movlw	0
  4631  00509A  6F8C               	movwf	_valid& (0+255),b
  4632                           
  4633                           ;main.c: 1108: number = 0;
  4634  00509C  0E00               	movlw	0
  4635  00509E  6E76               	movwf	_number+1,c
  4636  0050A0  0E00               	movlw	0
  4637  0050A2  6E75               	movwf	_number,c
  4638                           
  4639                           ;main.c: 1109: total_number=0;
  4640  0050A4  0E00               	movlw	0
  4641  0050A6  6F8B               	movwf	(_total_number+1)& (0+255),b
  4642  0050A8  0E00               	movlw	0
  4643  0050AA  6F8A               	movwf	_total_number& (0+255),b
  4644                           
  4645                           ;main.c: 1111: B=0,N=0,S=0,W=0;
  4646  0050AC  0E00               	movlw	0
  4647  0050AE  6E59               	movwf	_B+1,c
  4648  0050B0  0E00               	movlw	0
  4649  0050B2  6E58               	movwf	_B,c
  4650  0050B4  0E00               	movlw	0
  4651  0050B6  6E57               	movwf	_N+1,c
  4652  0050B8  0E00               	movlw	0
  4653  0050BA  6E56               	movwf	_N,c
  4654  0050BC  0E00               	movlw	0
  4655  0050BE  6E55               	movwf	_S+1,c
  4656  0050C0  0E00               	movlw	0
  4657  0050C2  6E54               	movwf	_S,c
  4658  0050C4  0E00               	movlw	0
  4659  0050C6  6E53               	movwf	_W+1,c
  4660  0050C8  0E00               	movlw	0
  4661  0050CA  6E52               	movwf	_W,c
  4662                           
  4663                           ;main.c: 1113: B_counter= 0;
  4664  0050CC  0E00               	movlw	0
  4665  0050CE  0100               	movlb	0	; () banked
  4666  0050D0  6FAE               	movwf	(_B_counter+1)& (0+255),b
  4667  0050D2  0E00               	movlw	0
  4668  0050D4  6FAD               	movwf	_B_counter& (0+255),b
  4669                           
  4670                           ;main.c: 1114: S_counter= 0;
  4671  0050D6  0E00               	movlw	0
  4672  0050D8  6FAC               	movwf	(_S_counter+1)& (0+255),b
  4673  0050DA  0E00               	movlw	0
  4674  0050DC  6FAB               	movwf	_S_counter& (0+255),b
  4675                           
  4676                           ;main.c: 1115: N_counter= 0;
  4677  0050DE  0E00               	movlw	0
  4678  0050E0  6FAA               	movwf	(_N_counter+1)& (0+255),b
  4679  0050E2  0E00               	movlw	0
  4680  0050E4  6FA9               	movwf	_N_counter& (0+255),b
  4681                           
  4682                           ;main.c: 1116: W_counter= 0;
  4683  0050E6  0E00               	movlw	0
  4684  0050E8  6FA8               	movwf	(_W_counter+1)& (0+255),b
  4685  0050EA  0E00               	movlw	0
  4686  0050EC  6FA7               	movwf	_W_counter& (0+255),b
  4687                           
  4688                           ;main.c: 1119: initial_time = 0;
  4689  0050EE  0E00               	movlw	0
  4690  0050F0  0101               	movlb	1	; () banked
  4691  0050F2  6F69               	movwf	(_initial_time+1)& (0+255),b
  4692  0050F4  0E00               	movlw	0
  4693  0050F6  6F68               	movwf	_initial_time& (0+255),b
  4694                           
  4695                           ;main.c: 1120: final_time = 0;
  4696  0050F8  0E00               	movlw	0
  4697  0050FA  6F61               	movwf	(_final_time+1)& (0+255),b
  4698  0050FC  0E00               	movlw	0
  4699  0050FE  6F60               	movwf	_final_time& (0+255),b
  4700                           
  4701                           ;main.c: 1122: for (i=0;i<8;i++){
  4702  005100  0E00               	movlw	0
  4703  005102  0100               	movlb	0	; () banked
  4704  005104  6FB8               	movwf	(_i+1)& (0+255),b
  4705  005106  0E00               	movlw	0
  4706  005108  6FB7               	movwf	_i& (0+255),b
  4707  00510A                     l6631:
  4708                           
  4709                           ; BSR set to: 0
  4710  00510A  51B8               	movf	(_i+1)& (0+255),w,b
  4711  00510C  E155               	bnz	l632
  4712  00510E  0E08               	movlw	8
  4713  005110  5DB7               	subwf	_i& (0+255),w,b
  4714  005112  B0D8               	btfsc	status,0,c
  4715  005114  0012               	return	
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;main.c: 1123: compartment_array[i] = 0;
  4719                           
  4720                           ; BSR set to: 0
  4721                           
  4722                           ; BSR set to: 0
  4723  005116  90D8               	bcf	status,0,c
  4724  005118  35B7               	rlcf	_i& (0+255),w,b
  4725  00511A  6ED9               	movwf	fsr2l,c
  4726  00511C  35B8               	rlcf	(_i+1)& (0+255),w,b
  4727  00511E  6EDA               	movwf	fsr2h,c
  4728  005120  0E80               	movlw	low _compartment_array
  4729  005122  26D9               	addwf	fsr2l,f,c
  4730  005124  0E00               	movlw	high _compartment_array
  4731  005126  22DA               	addwfc	fsr2h,f,c
  4732  005128  0E00               	movlw	0
  4733  00512A  6EDE               	movwf	postinc2,c
  4734  00512C  0E00               	movlw	0
  4735  00512E  6EDD               	movwf	postdec2,c
  4736                           
  4737                           ;main.c: 1124: compartment_number[i] = 0;
  4738  005130  90D8               	bcf	status,0,c
  4739  005132  35B7               	rlcf	_i& (0+255),w,b
  4740  005134  6ED9               	movwf	fsr2l,c
  4741  005136  35B8               	rlcf	(_i+1)& (0+255),w,b
  4742  005138  6EDA               	movwf	fsr2h,c
  4743  00513A  0E42               	movlw	low _compartment_number
  4744  00513C  26D9               	addwf	fsr2l,f,c
  4745  00513E  0E00               	movlw	high _compartment_number
  4746  005140  22DA               	addwfc	fsr2h,f,c
  4747  005142  0E00               	movlw	0
  4748  005144  6EDE               	movwf	postinc2,c
  4749  005146  0E00               	movlw	0
  4750  005148  6EDD               	movwf	postdec2,c
  4751                           
  4752                           ;main.c: 1125: B_array[i] = 0;
  4753  00514A  90D8               	bcf	status,0,c
  4754  00514C  35B7               	rlcf	_i& (0+255),w,b
  4755  00514E  6ED9               	movwf	fsr2l,c
  4756  005150  35B8               	rlcf	(_i+1)& (0+255),w,b
  4757  005152  6EDA               	movwf	fsr2h,c
  4758  005154  0E30               	movlw	low _B_array
  4759  005156  26D9               	addwf	fsr2l,f,c
  4760  005158  0E01               	movlw	high _B_array
  4761  00515A  22DA               	addwfc	fsr2h,f,c
  4762  00515C  0E00               	movlw	0
  4763  00515E  6EDE               	movwf	postinc2,c
  4764  005160  0E00               	movlw	0
  4765  005162  6EDD               	movwf	postdec2,c
  4766                           
  4767                           ;main.c: 1126: N_array[i] = 0;
  4768  005164  90D8               	bcf	status,0,c
  4769  005166  35B7               	rlcf	_i& (0+255),w,b
  4770  005168  6ED9               	movwf	fsr2l,c
  4771  00516A  35B8               	rlcf	(_i+1)& (0+255),w,b
  4772  00516C  6EDA               	movwf	fsr2h,c
  4773  00516E  0E10               	movlw	low _N_array
  4774  005170  26D9               	addwf	fsr2l,f,c
  4775  005172  0E01               	movlw	high _N_array
  4776  005174  22DA               	addwfc	fsr2h,f,c
  4777  005176  0E00               	movlw	0
  4778  005178  6EDE               	movwf	postinc2,c
  4779  00517A  0E00               	movlw	0
  4780  00517C  6EDD               	movwf	postdec2,c
  4781                           
  4782                           ;main.c: 1127: S_array[i] = 0;
  4783  00517E  90D8               	bcf	status,0,c
  4784  005180  35B7               	rlcf	_i& (0+255),w,b
  4785  005182  6ED9               	movwf	fsr2l,c
  4786  005184  35B8               	rlcf	(_i+1)& (0+255),w,b
  4787  005186  6EDA               	movwf	fsr2h,c
  4788  005188  0E20               	movlw	low _S_array
  4789  00518A  26D9               	addwf	fsr2l,f,c
  4790  00518C  0E01               	movlw	high _S_array
  4791  00518E  22DA               	addwfc	fsr2h,f,c
  4792  005190  0E00               	movlw	0
  4793  005192  6EDE               	movwf	postinc2,c
  4794  005194  0E00               	movlw	0
  4795  005196  6EDD               	movwf	postdec2,c
  4796                           
  4797                           ;main.c: 1128: W_array[i] = 0;
  4798  005198  90D8               	bcf	status,0,c
  4799  00519A  35B7               	rlcf	_i& (0+255),w,b
  4800  00519C  6ED9               	movwf	fsr2l,c
  4801  00519E  35B8               	rlcf	(_i+1)& (0+255),w,b
  4802  0051A0  6EDA               	movwf	fsr2h,c
  4803  0051A2  0E00               	movlw	low _W_array
  4804  0051A4  26D9               	addwf	fsr2l,f,c
  4805  0051A6  0E01               	movlw	high _W_array
  4806  0051A8  22DA               	addwfc	fsr2h,f,c
  4807  0051AA  0E00               	movlw	0
  4808  0051AC  6EDE               	movwf	postinc2,c
  4809  0051AE  0E00               	movlw	0
  4810  0051B0  6EDD               	movwf	postdec2,c
  4811                           
  4812                           ; BSR set to: 0
  4813  0051B2  4BB7               	infsnz	_i& (0+255),f,b
  4814  0051B4  2BB8               	incf	(_i+1)& (0+255),f,b
  4815  0051B6  D7A9               	goto	l6631
  4816  0051B8                     l632:
  4817                           
  4818                           ; BSR set to: 0
  4819  0051B8  0012               	return		;funcret
  4820  0051BA                     __end_of_initialize:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           intcon	equ	0xFF2
  4827                           intcon3	equ	0xFF0
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _initVibTimer *****************
  4840 ;; Defined at:
  4841 ;;		line 1576 in file "main.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      void 
  4848 ;; Registers used:
  4849 ;;		None
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    4
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text2
  4870  0061D6                     __ptext2:
  4871                           	opt stack 0
  4872  0061D6                     _initVibTimer:
  4873                           	opt stack 26
  4874                           
  4875                           ;main.c: 1578: INTCONbits.TMR0IE = 1;
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;incstack = 0
  4879  0061D6  8AF2               	bsf	intcon,5,c	;volatile
  4880                           
  4881                           ;main.c: 1579: (INTCONbits.GIE = 1);
  4882  0061D8  8EF2               	bsf	intcon,7,c	;volatile
  4883                           
  4884                           ;main.c: 1581: T0CONbits.T08BIT = 0;
  4885  0061DA  9CD5               	bcf	4053,6,c	;volatile
  4886                           
  4887                           ;main.c: 1582: T0CONbits.T0CS = 0;
  4888  0061DC  9AD5               	bcf	4053,5,c	;volatile
  4889                           
  4890                           ;main.c: 1583: T0CONbits.PSA = 0;
  4891  0061DE  96D5               	bcf	4053,3,c	;volatile
  4892                           
  4893                           ;main.c: 1584: T0CONbits.T0PS0 = 1;
  4894  0061E0  80D5               	bsf	4053,0,c	;volatile
  4895                           
  4896                           ;main.c: 1585: T0CONbits.T0PS1 = 1 ;
  4897  0061E2  82D5               	bsf	4053,1,c	;volatile
  4898                           
  4899                           ;main.c: 1586: T0CONbits.T0PS2 = 1;
  4900  0061E4  84D5               	bsf	4053,2,c	;volatile
  4901                           
  4902                           ;main.c: 1588: T0CONbits.TMR0ON = 1;
  4903  0061E6  8ED5               	bsf	4053,7,c	;volatile
  4904  0061E8  0012               	return		;funcret
  4905  0061EA                     __end_of_initVibTimer:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           intcon	equ	0xFF2
  4912                           intcon3	equ	0xFF0
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _initLCD *****************
  4925 ;; Defined at:
  4926 ;;		line 60 in file "lcd.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        1 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    6
  4947 ;; This function calls:
  4948 ;;		_lcdInst
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;;		_count_gear
  4952 ;;		_nut_washer_remain
  4953 ;;		_bolt_spacer_remain
  4954 ;;		_all_remain
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text3
  4959  005DF2                     __ptext3:
  4960                           	opt stack 0
  4961  005DF2                     _initLCD:
  4962                           	opt stack 24
  4963                           
  4964                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  4965                           
  4966                           ;incstack = 0
  4967  005DF2  0E9C               	movlw	156
  4968  005DF4  0100               	movlb	0	; () banked
  4969  005DF6  6FC6               	movwf	??_initLCD& (0+255),b
  4970  005DF8  0ED7               	movlw	215
  4971  005DFA                     u6947:
  4972  005DFA  2EE8               	decfsz	wreg,f,c
  4973  005DFC  D7FE               	bra	u6947
  4974  005DFE  2FC6               	decfsz	??_initLCD& (0+255),f,b
  4975  005E00  D7FC               	bra	u6947
  4976                           
  4977                           ;lcd.c: 69: lcdInst(0b00110011);
  4978  005E02  0E33               	movlw	51
  4979  005E04  ECDF  F030         	call	_lcdInst
  4980                           
  4981                           ;lcd.c: 70: lcdInst(0b00110010);
  4982  005E08  0E32               	movlw	50
  4983  005E0A  ECDF  F030         	call	_lcdInst
  4984                           
  4985                           ;lcd.c: 71: lcdInst(0b00101000);
  4986  005E0E  0E28               	movlw	40
  4987  005E10  ECDF  F030         	call	_lcdInst
  4988                           
  4989                           ;lcd.c: 72: lcdInst(0b00001111);
  4990  005E14  0E0F               	movlw	15
  4991  005E16  ECDF  F030         	call	_lcdInst
  4992                           
  4993                           ;lcd.c: 73: lcdInst(0b00000110);
  4994  005E1A  0E06               	movlw	6
  4995  005E1C  ECDF  F030         	call	_lcdInst
  4996                           
  4997                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4998  005E20  0E01               	movlw	1
  4999  005E22  ECDF  F030         	call	_lcdInst
  5000  005E26  0E9C               	movlw	156
  5001  005E28  0100               	movlb	0	; () banked
  5002  005E2A  6FC6               	movwf	??_initLCD& (0+255),b
  5003  005E2C  0ED7               	movlw	215
  5004  005E2E                     u6957:
  5005  005E2E  2EE8               	decfsz	wreg,f,c
  5006  005E30  D7FE               	bra	u6957
  5007  005E32  2FC6               	decfsz	??_initLCD& (0+255),f,b
  5008  005E34  D7FC               	bra	u6957
  5009                           
  5010                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5011  005E36  0E0F               	movlw	15
  5012  005E38  ECDF  F030         	call	_lcdInst
  5013  005E3C  0012               	return		;funcret
  5014  005E3E                     __end_of_initLCD:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           intcon	equ	0xFF2
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _initGLCD *****************
  5034 ;; Defined at:
  5035 ;;		line 238 in file "GLCD_PIC.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        2 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    8
  5056 ;; This function calls:
  5057 ;;		_glcdDrawRectangle
  5058 ;;		_glcdSetCOLMOD
  5059 ;;		_glcdTransfer
  5060 ;;		_spiInit
  5061 ;; This function is called by:
  5062 ;;		_main
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text4
  5067  003AB6                     __ptext4:
  5068                           	opt stack 0
  5069  003AB6                     _initGLCD:
  5070                           	opt stack 22
  5071                           
  5072                           ;GLCD_PIC.c: 262: LATDbits.LATD0 = 1;
  5073                           
  5074                           ;incstack = 0
  5075  003AB6  808C               	bsf	3980,0,c	;volatile
  5076                           
  5077                           ;GLCD_PIC.c: 263: LATDbits.LATD1 = 1;
  5078  003AB8  828C               	bsf	3980,1,c	;volatile
  5079                           
  5080                           ;GLCD_PIC.c: 264: TRISDbits.TRISD0 = 0;
  5081  003ABA  9095               	bcf	3989,0,c	;volatile
  5082                           
  5083                           ;GLCD_PIC.c: 265: TRISDbits.TRISD1 = 0;
  5084  003ABC  9295               	bcf	3989,1,c	;volatile
  5085                           
  5086                           ;GLCD_PIC.c: 268: spiInit(4);
  5087  003ABE  0E04               	movlw	4
  5088  003AC0  ECF1  F02F         	call	_spiInit
  5089                           
  5090                           ;GLCD_PIC.c: 272: _delay((unsigned long)((20)*(32000000/4000.0)));
  5091  003AC4  0ED0               	movlw	208
  5092  003AC6  0100               	movlb	0	; () banked
  5093  003AC8  6FE4               	movwf	??_initGLCD& (0+255),b
  5094  003ACA  0EC9               	movlw	201
  5095  003ACC                     u6967:
  5096  003ACC  2EE8               	decfsz	wreg,f,c
  5097  003ACE  D7FE               	bra	u6967
  5098  003AD0  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5099  003AD2  D7FC               	bra	u6967
  5100  003AD4  D000               	nop2	
  5101                           
  5102                           ;GLCD_PIC.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(3200000
      +                          0/4000.0))); };
  5103  003AD6  0E01               	movlw	1
  5104  003AD8  0100               	movlb	0	; () banked
  5105  003ADA  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5106  003ADC  0EC6               	movlw	low GLCD_PIC@INST_SWRESET
  5107  003ADE  6EF6               	movwf	tblptrl,c
  5108  003AE0                     	if	1	;There is more than 1 active tblptr byte
  5109  003AE0  0EFC               	movlw	high GLCD_PIC@INST_SWRESET
  5110  003AE2  6EF7               	movwf	tblptrh,c
  5111  003AE4                     	endif
  5112  003AE4                     	if	1	;There are 3 active tblptr bytes
  5113  003AE4  0E00               	movlw	low (GLCD_PIC@INST_SWRESET shr (0+16))
  5114  003AE6  6EF8               	movwf	tblptru,c
  5115  003AE8                     	endif
  5116  003AE8  0008               	tblrd		*
  5117  003AEA  50F5               	movf	tablat,w,c
  5118  003AEC  EC26  F030         	call	_glcdTransfer
  5119  003AF0  0E06               	movlw	6
  5120  003AF2  0100               	movlb	0	; () banked
  5121  003AF4  6FE5               	movwf	(??_initGLCD+1)& (0+255),b
  5122  003AF6  0E47               	movlw	71
  5123  003AF8  6FE4               	movwf	??_initGLCD& (0+255),b
  5124  003AFA  0EA0               	movlw	160
  5125  003AFC                     u6977:
  5126  003AFC  2EE8               	decfsz	wreg,f,c
  5127  003AFE  D7FE               	bra	u6977
  5128  003B00  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5129  003B02  D7FC               	bra	u6977
  5130  003B04  2FE5               	decfsz	(??_initGLCD+1)& (0+255),f,b
  5131  003B06  D7FA               	bra	u6977
  5132  003B08  F000               	nop	
  5133                           
  5134                           ;GLCD_PIC.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(32000000
      +                          /4000.0))); };
  5135  003B0A  0E01               	movlw	1
  5136  003B0C  0100               	movlb	0	; () banked
  5137  003B0E  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5138  003B10  0EC4               	movlw	low GLCD_PIC@INST_SLPOUT
  5139  003B12  6EF6               	movwf	tblptrl,c
  5140  003B14                     	if	1	;There is more than 1 active tblptr byte
  5141  003B14  0EFC               	movlw	high GLCD_PIC@INST_SLPOUT
  5142  003B16  6EF7               	movwf	tblptrh,c
  5143  003B18                     	endif
  5144  003B18                     	if	1	;There are 3 active tblptr bytes
  5145  003B18  0E00               	movlw	low (GLCD_PIC@INST_SLPOUT shr (0+16))
  5146  003B1A  6EF8               	movwf	tblptru,c
  5147  003B1C                     	endif
  5148  003B1C  0008               	tblrd		*
  5149  003B1E  50F5               	movf	tablat,w,c
  5150  003B20  EC26  F030         	call	_glcdTransfer
  5151  003B24  0E06               	movlw	6
  5152  003B26  0100               	movlb	0	; () banked
  5153  003B28  6FE5               	movwf	(??_initGLCD+1)& (0+255),b
  5154  003B2A  0E47               	movlw	71
  5155  003B2C  6FE4               	movwf	??_initGLCD& (0+255),b
  5156  003B2E  0EA0               	movlw	160
  5157  003B30                     u6987:
  5158  003B30  2EE8               	decfsz	wreg,f,c
  5159  003B32  D7FE               	bra	u6987
  5160  003B34  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5161  003B36  D7FC               	bra	u6987
  5162  003B38  2FE5               	decfsz	(??_initGLCD+1)& (0+255),f,b
  5163  003B3A  D7FA               	bra	u6987
  5164  003B3C  F000               	nop	
  5165                           
  5166                           ;GLCD_PIC.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  5167  003B3E  0E01               	movlw	1
  5168  003B40  0100               	movlb	0	; () banked
  5169  003B42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5170  003B44  0EB2               	movlw	low GLCD_PIC@INST_FRMCTR1
  5171  003B46  6EF6               	movwf	tblptrl,c
  5172  003B48                     	if	1	;There is more than 1 active tblptr byte
  5173  003B48  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR1
  5174  003B4A  6EF7               	movwf	tblptrh,c
  5175  003B4C                     	endif
  5176  003B4C                     	if	1	;There are 3 active tblptr bytes
  5177  003B4C  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR1 shr (0+16))
  5178  003B4E  6EF8               	movwf	tblptru,c
  5179  003B50                     	endif
  5180  003B50  0008               	tblrd		*
  5181  003B52  50F5               	movf	tablat,w,c
  5182  003B54  EC26  F030         	call	_glcdTransfer
  5183                           
  5184                           ;GLCD_PIC.c: 281: glcdTransfer(0x00, 0);
  5185  003B58  0E00               	movlw	0
  5186  003B5A  0100               	movlb	0	; () banked
  5187  003B5C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5188  003B5E  0E00               	movlw	0
  5189  003B60  EC26  F030         	call	_glcdTransfer
  5190                           
  5191                           ;GLCD_PIC.c: 282: glcdTransfer(0x06, 0);
  5192  003B64  0E00               	movlw	0
  5193  003B66  0100               	movlb	0	; () banked
  5194  003B68  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5195  003B6A  0E06               	movlw	6
  5196  003B6C  EC26  F030         	call	_glcdTransfer
  5197                           
  5198                           ;GLCD_PIC.c: 283: glcdTransfer(0x03, 0);
  5199  003B70  0E00               	movlw	0
  5200  003B72  0100               	movlb	0	; () banked
  5201  003B74  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5202  003B76  0E03               	movlw	3
  5203  003B78  EC26  F030         	call	_glcdTransfer
  5204                           
  5205                           ;GLCD_PIC.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  5206  003B7C  0E01               	movlw	1
  5207  003B7E  0100               	movlb	0	; () banked
  5208  003B80  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5209  003B82  0EB1               	movlw	low GLCD_PIC@INST_FRMCTR2
  5210  003B84  6EF6               	movwf	tblptrl,c
  5211  003B86                     	if	1	;There is more than 1 active tblptr byte
  5212  003B86  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR2
  5213  003B88  6EF7               	movwf	tblptrh,c
  5214  003B8A                     	endif
  5215  003B8A                     	if	1	;There are 3 active tblptr bytes
  5216  003B8A  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR2 shr (0+16))
  5217  003B8C  6EF8               	movwf	tblptru,c
  5218  003B8E                     	endif
  5219  003B8E  0008               	tblrd		*
  5220  003B90  50F5               	movf	tablat,w,c
  5221  003B92  EC26  F030         	call	_glcdTransfer
  5222                           
  5223                           ;GLCD_PIC.c: 286: glcdTransfer(0x01, 0);
  5224  003B96  0E00               	movlw	0
  5225  003B98  0100               	movlb	0	; () banked
  5226  003B9A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5227  003B9C  0E01               	movlw	1
  5228  003B9E  EC26  F030         	call	_glcdTransfer
  5229                           
  5230                           ;GLCD_PIC.c: 287: glcdTransfer(0x2C, 0);
  5231  003BA2  0E00               	movlw	0
  5232  003BA4  0100               	movlb	0	; () banked
  5233  003BA6  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5234  003BA8  0E2C               	movlw	44
  5235  003BAA  EC26  F030         	call	_glcdTransfer
  5236                           
  5237                           ;GLCD_PIC.c: 288: glcdTransfer(0x2D, 0);
  5238  003BAE  0E00               	movlw	0
  5239  003BB0  0100               	movlb	0	; () banked
  5240  003BB2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5241  003BB4  0E2D               	movlw	45
  5242  003BB6  EC26  F030         	call	_glcdTransfer
  5243                           
  5244                           ;GLCD_PIC.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  5245  003BBA  0E01               	movlw	1
  5246  003BBC  0100               	movlb	0	; () banked
  5247  003BBE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5248  003BC0  0EB0               	movlw	low GLCD_PIC@INST_FRMCTR3
  5249  003BC2  6EF6               	movwf	tblptrl,c
  5250  003BC4                     	if	1	;There is more than 1 active tblptr byte
  5251  003BC4  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR3
  5252  003BC6  6EF7               	movwf	tblptrh,c
  5253  003BC8                     	endif
  5254  003BC8                     	if	1	;There are 3 active tblptr bytes
  5255  003BC8  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR3 shr (0+16))
  5256  003BCA  6EF8               	movwf	tblptru,c
  5257  003BCC                     	endif
  5258  003BCC  0008               	tblrd		*
  5259  003BCE  50F5               	movf	tablat,w,c
  5260  003BD0  EC26  F030         	call	_glcdTransfer
  5261                           
  5262                           ;GLCD_PIC.c: 291: glcdTransfer(0x01, 0);
  5263  003BD4  0E00               	movlw	0
  5264  003BD6  0100               	movlb	0	; () banked
  5265  003BD8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5266  003BDA  0E01               	movlw	1
  5267  003BDC  EC26  F030         	call	_glcdTransfer
  5268                           
  5269                           ;GLCD_PIC.c: 292: glcdTransfer(0x2C, 0);
  5270  003BE0  0E00               	movlw	0
  5271  003BE2  0100               	movlb	0	; () banked
  5272  003BE4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5273  003BE6  0E2C               	movlw	44
  5274  003BE8  EC26  F030         	call	_glcdTransfer
  5275                           
  5276                           ;GLCD_PIC.c: 293: glcdTransfer(0x2D, 0);
  5277  003BEC  0E00               	movlw	0
  5278  003BEE  0100               	movlb	0	; () banked
  5279  003BF0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5280  003BF2  0E2D               	movlw	45
  5281  003BF4  EC26  F030         	call	_glcdTransfer
  5282                           
  5283                           ;GLCD_PIC.c: 295: glcdTransfer(INST_INVCTR, 1);
  5284  003BF8  0E01               	movlw	1
  5285  003BFA  0100               	movlb	0	; () banked
  5286  003BFC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5287  003BFE  0EAF               	movlw	low GLCD_PIC@INST_INVCTR
  5288  003C00  6EF6               	movwf	tblptrl,c
  5289  003C02                     	if	1	;There is more than 1 active tblptr byte
  5290  003C02  0EFC               	movlw	high GLCD_PIC@INST_INVCTR
  5291  003C04  6EF7               	movwf	tblptrh,c
  5292  003C06                     	endif
  5293  003C06                     	if	1	;There are 3 active tblptr bytes
  5294  003C06  0E00               	movlw	low (GLCD_PIC@INST_INVCTR shr (0+16))
  5295  003C08  6EF8               	movwf	tblptru,c
  5296  003C0A                     	endif
  5297  003C0A  0008               	tblrd		*
  5298  003C0C  50F5               	movf	tablat,w,c
  5299  003C0E  EC26  F030         	call	_glcdTransfer
  5300                           
  5301                           ;GLCD_PIC.c: 296: glcdTransfer(0x00, 0);
  5302  003C12  0E00               	movlw	0
  5303  003C14  0100               	movlb	0	; () banked
  5304  003C16  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5305  003C18  0E00               	movlw	0
  5306  003C1A  EC26  F030         	call	_glcdTransfer
  5307                           
  5308                           ;GLCD_PIC.c: 299: glcdTransfer(INST_PWCTR1, 1);
  5309  003C1E  0E01               	movlw	1
  5310  003C20  0100               	movlb	0	; () banked
  5311  003C22  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5312  003C24  0EAE               	movlw	low GLCD_PIC@INST_PWCTR1
  5313  003C26  6EF6               	movwf	tblptrl,c
  5314  003C28                     	if	1	;There is more than 1 active tblptr byte
  5315  003C28  0EFC               	movlw	high GLCD_PIC@INST_PWCTR1
  5316  003C2A  6EF7               	movwf	tblptrh,c
  5317  003C2C                     	endif
  5318  003C2C                     	if	1	;There are 3 active tblptr bytes
  5319  003C2C  0E00               	movlw	low (GLCD_PIC@INST_PWCTR1 shr (0+16))
  5320  003C2E  6EF8               	movwf	tblptru,c
  5321  003C30                     	endif
  5322  003C30  0008               	tblrd		*
  5323  003C32  50F5               	movf	tablat,w,c
  5324  003C34  EC26  F030         	call	_glcdTransfer
  5325                           
  5326                           ;GLCD_PIC.c: 300: glcdTransfer(0xA2, 0);
  5327  003C38  0E00               	movlw	0
  5328  003C3A  0100               	movlb	0	; () banked
  5329  003C3C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5330  003C3E  0EA2               	movlw	162
  5331  003C40  EC26  F030         	call	_glcdTransfer
  5332                           
  5333                           ;GLCD_PIC.c: 301: glcdTransfer(0x02, 0);
  5334  003C44  0E00               	movlw	0
  5335  003C46  0100               	movlb	0	; () banked
  5336  003C48  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5337  003C4A  0E02               	movlw	2
  5338  003C4C  EC26  F030         	call	_glcdTransfer
  5339                           
  5340                           ;GLCD_PIC.c: 302: glcdTransfer(0x84, 0);
  5341  003C50  0E00               	movlw	0
  5342  003C52  0100               	movlb	0	; () banked
  5343  003C54  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5344  003C56  0E84               	movlw	132
  5345  003C58  EC26  F030         	call	_glcdTransfer
  5346                           
  5347                           ;GLCD_PIC.c: 304: glcdTransfer(INST_PWCTR2, 1);
  5348  003C5C  0E01               	movlw	1
  5349  003C5E  0100               	movlb	0	; () banked
  5350  003C60  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5351  003C62  0EAD               	movlw	low GLCD_PIC@INST_PWCTR2
  5352  003C64  6EF6               	movwf	tblptrl,c
  5353  003C66                     	if	1	;There is more than 1 active tblptr byte
  5354  003C66  0EFC               	movlw	high GLCD_PIC@INST_PWCTR2
  5355  003C68  6EF7               	movwf	tblptrh,c
  5356  003C6A                     	endif
  5357  003C6A                     	if	1	;There are 3 active tblptr bytes
  5358  003C6A  0E00               	movlw	low (GLCD_PIC@INST_PWCTR2 shr (0+16))
  5359  003C6C  6EF8               	movwf	tblptru,c
  5360  003C6E                     	endif
  5361  003C6E  0008               	tblrd		*
  5362  003C70  50F5               	movf	tablat,w,c
  5363  003C72  EC26  F030         	call	_glcdTransfer
  5364                           
  5365                           ;GLCD_PIC.c: 305: glcdTransfer(0xC5, 0);
  5366  003C76  0E00               	movlw	0
  5367  003C78  0100               	movlb	0	; () banked
  5368  003C7A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5369  003C7C  0EC5               	movlw	197
  5370  003C7E  EC26  F030         	call	_glcdTransfer
  5371                           
  5372                           ;GLCD_PIC.c: 307: glcdTransfer(INST_PWCTR3, 1);
  5373  003C82  0E01               	movlw	1
  5374  003C84  0100               	movlb	0	; () banked
  5375  003C86  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5376  003C88  0EAC               	movlw	low GLCD_PIC@INST_PWCTR3
  5377  003C8A  6EF6               	movwf	tblptrl,c
  5378  003C8C                     	if	1	;There is more than 1 active tblptr byte
  5379  003C8C  0EFC               	movlw	high GLCD_PIC@INST_PWCTR3
  5380  003C8E  6EF7               	movwf	tblptrh,c
  5381  003C90                     	endif
  5382  003C90                     	if	1	;There are 3 active tblptr bytes
  5383  003C90  0E00               	movlw	low (GLCD_PIC@INST_PWCTR3 shr (0+16))
  5384  003C92  6EF8               	movwf	tblptru,c
  5385  003C94                     	endif
  5386  003C94  0008               	tblrd		*
  5387  003C96  50F5               	movf	tablat,w,c
  5388  003C98  EC26  F030         	call	_glcdTransfer
  5389                           
  5390                           ;GLCD_PIC.c: 308: glcdTransfer(0x0A, 0);
  5391  003C9C  0E00               	movlw	0
  5392  003C9E  0100               	movlb	0	; () banked
  5393  003CA0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5394  003CA2  0E0A               	movlw	10
  5395  003CA4  EC26  F030         	call	_glcdTransfer
  5396                           
  5397                           ;GLCD_PIC.c: 309: glcdTransfer(0x00, 0);
  5398  003CA8  0E00               	movlw	0
  5399  003CAA  0100               	movlb	0	; () banked
  5400  003CAC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5401  003CAE  0E00               	movlw	0
  5402  003CB0  EC26  F030         	call	_glcdTransfer
  5403                           
  5404                           ;GLCD_PIC.c: 311: glcdTransfer(INST_PWCTR4, 1);
  5405  003CB4  0E01               	movlw	1
  5406  003CB6  0100               	movlb	0	; () banked
  5407  003CB8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5408  003CBA  0EAB               	movlw	low GLCD_PIC@INST_PWCTR4
  5409  003CBC  6EF6               	movwf	tblptrl,c
  5410  003CBE                     	if	1	;There is more than 1 active tblptr byte
  5411  003CBE  0EFC               	movlw	high GLCD_PIC@INST_PWCTR4
  5412  003CC0  6EF7               	movwf	tblptrh,c
  5413  003CC2                     	endif
  5414  003CC2                     	if	1	;There are 3 active tblptr bytes
  5415  003CC2  0E00               	movlw	low (GLCD_PIC@INST_PWCTR4 shr (0+16))
  5416  003CC4  6EF8               	movwf	tblptru,c
  5417  003CC6                     	endif
  5418  003CC6  0008               	tblrd		*
  5419  003CC8  50F5               	movf	tablat,w,c
  5420  003CCA  EC26  F030         	call	_glcdTransfer
  5421                           
  5422                           ;GLCD_PIC.c: 312: glcdTransfer(0x8A, 0);
  5423  003CCE  0E00               	movlw	0
  5424  003CD0  0100               	movlb	0	; () banked
  5425  003CD2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5426  003CD4  0E8A               	movlw	138
  5427  003CD6  EC26  F030         	call	_glcdTransfer
  5428                           
  5429                           ;GLCD_PIC.c: 313: glcdTransfer(0x2A, 0);
  5430  003CDA  0E00               	movlw	0
  5431  003CDC  0100               	movlb	0	; () banked
  5432  003CDE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5433  003CE0  0E2A               	movlw	42
  5434  003CE2  EC26  F030         	call	_glcdTransfer
  5435                           
  5436                           ;GLCD_PIC.c: 315: glcdTransfer(INST_PWCTR5, 1);
  5437  003CE6  0E01               	movlw	1
  5438  003CE8  0100               	movlb	0	; () banked
  5439  003CEA  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5440  003CEC  0EAA               	movlw	low GLCD_PIC@INST_PWCTR5
  5441  003CEE  6EF6               	movwf	tblptrl,c
  5442  003CF0                     	if	1	;There is more than 1 active tblptr byte
  5443  003CF0  0EFC               	movlw	high GLCD_PIC@INST_PWCTR5
  5444  003CF2  6EF7               	movwf	tblptrh,c
  5445  003CF4                     	endif
  5446  003CF4                     	if	1	;There are 3 active tblptr bytes
  5447  003CF4  0E00               	movlw	low (GLCD_PIC@INST_PWCTR5 shr (0+16))
  5448  003CF6  6EF8               	movwf	tblptru,c
  5449  003CF8                     	endif
  5450  003CF8  0008               	tblrd		*
  5451  003CFA  50F5               	movf	tablat,w,c
  5452  003CFC  EC26  F030         	call	_glcdTransfer
  5453                           
  5454                           ;GLCD_PIC.c: 316: glcdTransfer(0x8A, 0);
  5455  003D00  0E00               	movlw	0
  5456  003D02  0100               	movlb	0	; () banked
  5457  003D04  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5458  003D06  0E8A               	movlw	138
  5459  003D08  EC26  F030         	call	_glcdTransfer
  5460                           
  5461                           ;GLCD_PIC.c: 317: glcdTransfer(0x2A, 0);
  5462  003D0C  0E00               	movlw	0
  5463  003D0E  0100               	movlb	0	; () banked
  5464  003D10  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5465  003D12  0E2A               	movlw	42
  5466  003D14  EC26  F030         	call	_glcdTransfer
  5467                           
  5468                           ;GLCD_PIC.c: 320: glcdTransfer(INST_VMCTR1, 1);
  5469  003D18  0E01               	movlw	1
  5470  003D1A  0100               	movlb	0	; () banked
  5471  003D1C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5472  003D1E  0EA9               	movlw	low GLCD_PIC@INST_VMCTR1
  5473  003D20  6EF6               	movwf	tblptrl,c
  5474  003D22                     	if	1	;There is more than 1 active tblptr byte
  5475  003D22  0EFC               	movlw	high GLCD_PIC@INST_VMCTR1
  5476  003D24  6EF7               	movwf	tblptrh,c
  5477  003D26                     	endif
  5478  003D26                     	if	1	;There are 3 active tblptr bytes
  5479  003D26  0E00               	movlw	low (GLCD_PIC@INST_VMCTR1 shr (0+16))
  5480  003D28  6EF8               	movwf	tblptru,c
  5481  003D2A                     	endif
  5482  003D2A  0008               	tblrd		*
  5483  003D2C  50F5               	movf	tablat,w,c
  5484  003D2E  EC26  F030         	call	_glcdTransfer
  5485                           
  5486                           ;GLCD_PIC.c: 321: glcdTransfer(0x3C, 0);
  5487  003D32  0E00               	movlw	0
  5488  003D34  0100               	movlb	0	; () banked
  5489  003D36  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5490  003D38  0E3C               	movlw	60
  5491  003D3A  EC26  F030         	call	_glcdTransfer
  5492                           
  5493                           ;GLCD_PIC.c: 323: glcdTransfer(INST_INVOFF, 1);
  5494  003D3E  0E01               	movlw	1
  5495  003D40  0100               	movlb	0	; () banked
  5496  003D42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5497  003D44  0EC1               	movlw	low GLCD_PIC@INST_INVOFF
  5498  003D46  6EF6               	movwf	tblptrl,c
  5499  003D48                     	if	1	;There is more than 1 active tblptr byte
  5500  003D48  0EFC               	movlw	high GLCD_PIC@INST_INVOFF
  5501  003D4A  6EF7               	movwf	tblptrh,c
  5502  003D4C                     	endif
  5503  003D4C                     	if	1	;There are 3 active tblptr bytes
  5504  003D4C  0E00               	movlw	low (GLCD_PIC@INST_INVOFF shr (0+16))
  5505  003D4E  6EF8               	movwf	tblptru,c
  5506  003D50                     	endif
  5507  003D50  0008               	tblrd		*
  5508  003D52  50F5               	movf	tablat,w,c
  5509  003D54  EC26  F030         	call	_glcdTransfer
  5510                           
  5511                           ;GLCD_PIC.c: 331: glcdSetCOLMOD(18);
  5512  003D58  0E12               	movlw	18
  5513  003D5A  EC4A  F02E         	call	_glcdSetCOLMOD
  5514                           
  5515                           ;GLCD_PIC.c: 334: glcdTransfer(INST_GAMSET, 1);
  5516  003D5E  0E01               	movlw	1
  5517  003D60  0100               	movlb	0	; () banked
  5518  003D62  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5519  003D64  0EBF               	movlw	low GLCD_PIC@INST_GAMSET
  5520  003D66  6EF6               	movwf	tblptrl,c
  5521  003D68                     	if	1	;There is more than 1 active tblptr byte
  5522  003D68  0EFC               	movlw	high GLCD_PIC@INST_GAMSET
  5523  003D6A  6EF7               	movwf	tblptrh,c
  5524  003D6C                     	endif
  5525  003D6C                     	if	1	;There are 3 active tblptr bytes
  5526  003D6C  0E00               	movlw	low (GLCD_PIC@INST_GAMSET shr (0+16))
  5527  003D6E  6EF8               	movwf	tblptru,c
  5528  003D70                     	endif
  5529  003D70  0008               	tblrd		*
  5530  003D72  50F5               	movf	tablat,w,c
  5531  003D74  EC26  F030         	call	_glcdTransfer
  5532                           
  5533                           ;GLCD_PIC.c: 335: glcdTransfer(0x01, 0);
  5534  003D78  0E00               	movlw	0
  5535  003D7A  0100               	movlb	0	; () banked
  5536  003D7C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5537  003D7E  0E01               	movlw	1
  5538  003D80  EC26  F030         	call	_glcdTransfer
  5539                           
  5540                           ;GLCD_PIC.c: 337: glcdTransfer(INST_IDMOFF, 1);
  5541  003D84  0E01               	movlw	1
  5542  003D86  0100               	movlb	0	; () banked
  5543  003D88  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5544  003D8A  0EB5               	movlw	low GLCD_PIC@INST_IDMOFF
  5545  003D8C  6EF6               	movwf	tblptrl,c
  5546  003D8E                     	if	1	;There is more than 1 active tblptr byte
  5547  003D8E  0EFC               	movlw	high GLCD_PIC@INST_IDMOFF
  5548  003D90  6EF7               	movwf	tblptrh,c
  5549  003D92                     	endif
  5550  003D92                     	if	1	;There are 3 active tblptr bytes
  5551  003D92  0E00               	movlw	low (GLCD_PIC@INST_IDMOFF shr (0+16))
  5552  003D94  6EF8               	movwf	tblptru,c
  5553  003D96                     	endif
  5554  003D96  0008               	tblrd		*
  5555  003D98  50F5               	movf	tablat,w,c
  5556  003D9A  EC26  F030         	call	_glcdTransfer
  5557                           
  5558                           ;GLCD_PIC.c: 339: glcdTransfer(INST_NORON, 1);
  5559  003D9E  0E01               	movlw	1
  5560  003DA0  0100               	movlb	0	; () banked
  5561  003DA2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5562  003DA4  0EC2               	movlw	low GLCD_PIC@INST_NORON
  5563  003DA6  6EF6               	movwf	tblptrl,c
  5564  003DA8                     	if	1	;There is more than 1 active tblptr byte
  5565  003DA8  0EFC               	movlw	high GLCD_PIC@INST_NORON
  5566  003DAA  6EF7               	movwf	tblptrh,c
  5567  003DAC                     	endif
  5568  003DAC                     	if	1	;There are 3 active tblptr bytes
  5569  003DAC  0E00               	movlw	low (GLCD_PIC@INST_NORON shr (0+16))
  5570  003DAE  6EF8               	movwf	tblptru,c
  5571  003DB0                     	endif
  5572  003DB0  0008               	tblrd		*
  5573  003DB2  50F5               	movf	tablat,w,c
  5574  003DB4  EC26  F030         	call	_glcdTransfer
  5575                           
  5576                           ;GLCD_PIC.c: 342: MADCTLbits.MX = 1;
  5577  003DB8  0100               	movlb	0	; () banked
  5578  003DBA  8DB9               	bsf	_MADCTLbits& (0+255),6,b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;GLCD_PIC.c: 343: MADCTLbits.MY = 1;
  5582  003DBC  8FB9               	bsf	_MADCTLbits& (0+255),7,b
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;GLCD_PIC.c: 344: MADCTLbits.MV = 1;
  5586  003DBE  8BB9               	bsf	_MADCTLbits& (0+255),5,b
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;GLCD_PIC.c: 345: MADCTLbits.ML = 0;
  5590  003DC0  99B9               	bcf	_MADCTLbits& (0+255),4,b
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;GLCD_PIC.c: 346: MADCTLbits.RGB = 0;
  5594  003DC2  97B9               	bcf	_MADCTLbits& (0+255),3,b
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;GLCD_PIC.c: 347: MADCTLbits.MH = 0;
  5598  003DC4  95B9               	bcf	_MADCTLbits& (0+255),2,b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;GLCD_PIC.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);};
  5602  003DC6  0E01               	movlw	1
  5603  003DC8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5604  003DCA  0EB6               	movlw	low GLCD_PIC@INST_MADCTL
  5605  003DCC  6EF6               	movwf	tblptrl,c
  5606  003DCE                     	if	1	;There is more than 1 active tblptr byte
  5607  003DCE  0EFC               	movlw	high GLCD_PIC@INST_MADCTL
  5608  003DD0  6EF7               	movwf	tblptrh,c
  5609  003DD2                     	endif
  5610  003DD2                     	if	1	;There are 3 active tblptr bytes
  5611  003DD2  0E00               	movlw	low (GLCD_PIC@INST_MADCTL shr (0+16))
  5612  003DD4  6EF8               	movwf	tblptru,c
  5613  003DD6                     	endif
  5614  003DD6  0008               	tblrd		*
  5615  003DD8  50F5               	movf	tablat,w,c
  5616  003DDA  EC26  F030         	call	_glcdTransfer
  5617  003DDE  0E00               	movlw	0
  5618  003DE0  0100               	movlb	0	; () banked
  5619  003DE2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5620  003DE4  51B9               	movf	_MADCTLbits& (0+255),w,b
  5621  003DE6  EC26  F030         	call	_glcdTransfer
  5622                           
  5623                           ;GLCD_PIC.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  5624  003DEA  0EE9               	movlw	low _GLCD_SIZE_HORZ
  5625  003DEC  6EF6               	movwf	tblptrl,c
  5626  003DEE                     	if	1	;There is more than 1 active tblptr byte
  5627  003DEE  0EFC               	movlw	high _GLCD_SIZE_HORZ
  5628  003DF0  6EF7               	movwf	tblptrh,c
  5629  003DF2                     	endif
  5630  003DF2                     	if	1	;There are 3 active tblptr bytes
  5631  003DF2  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  5632  003DF4  6EF8               	movwf	tblptru,c
  5633  003DF6                     	endif
  5634  003DF6  0008               	tblrd		*
  5635  003DF8  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  5636  003DFC  0E00               	movlw	0
  5637  003DFE  0100               	movlb	0	; () banked
  5638  003E00  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  5639  003E02  0EE8               	movlw	low _GLCD_SIZE_VERT
  5640  003E04  6EF6               	movwf	tblptrl,c
  5641  003E06                     	if	1	;There is more than 1 active tblptr byte
  5642  003E06  0EFC               	movlw	high _GLCD_SIZE_VERT
  5643  003E08  6EF7               	movwf	tblptrh,c
  5644  003E0A                     	endif
  5645  003E0A                     	if	1	;There are 3 active tblptr bytes
  5646  003E0A  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  5647  003E0C  6EF8               	movwf	tblptru,c
  5648  003E0E                     	endif
  5649  003E0E  0008               	tblrd		*
  5650  003E10  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  5651  003E14  0EA1               	movlw	low _BLACK
  5652  003E16  6EF6               	movwf	tblptrl,c
  5653  003E18                     	if	1	;There is more than 1 active tblptr byte
  5654  003E18  0EFC               	movlw	high _BLACK
  5655  003E1A  6EF7               	movwf	tblptrh,c
  5656  003E1C                     	endif
  5657  003E1C                     	if	1	;There are 3 active tblptr bytes
  5658  003E1C  0E00               	movlw	low (_BLACK shr (0+16))
  5659  003E1E  6EF8               	movwf	tblptru,c
  5660  003E20                     	endif
  5661  003E20  0009               	tblrd		*+
  5662  003E22  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  5663  003E26  0009               	tblrd		*+
  5664  003E28  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  5665  003E2C  0009               	tblrd		*+
  5666  003E2E  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  5667  003E32  000A               	tblrd		*-
  5668  003E34  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  5669  003E38  0E00               	movlw	0
  5670  003E3A  ECA8  F026         	call	_glcdDrawRectangle
  5671                           
  5672                           ;GLCD_PIC.c: 354: glcdTransfer(INST_DISPON, 1);
  5673  003E3E  0E01               	movlw	1
  5674  003E40  0100               	movlb	0	; () banked
  5675  003E42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5676  003E44  0EBD               	movlw	low GLCD_PIC@INST_DISPON
  5677  003E46  6EF6               	movwf	tblptrl,c
  5678  003E48                     	if	1	;There is more than 1 active tblptr byte
  5679  003E48  0EFC               	movlw	high GLCD_PIC@INST_DISPON
  5680  003E4A  6EF7               	movwf	tblptrh,c
  5681  003E4C                     	endif
  5682  003E4C                     	if	1	;There are 3 active tblptr bytes
  5683  003E4C  0E00               	movlw	low (GLCD_PIC@INST_DISPON shr (0+16))
  5684  003E4E  6EF8               	movwf	tblptru,c
  5685  003E50                     	endif
  5686  003E50  0008               	tblrd		*
  5687  003E52  50F5               	movf	tablat,w,c
  5688  003E54  EC26  F030         	call	_glcdTransfer
  5689                           
  5690                           ;GLCD_PIC.c: 355: _delay((unsigned long)((10)*(32000000/4000.0)));
  5691  003E58  0E68               	movlw	104
  5692  003E5A  0100               	movlb	0	; () banked
  5693  003E5C  6FE4               	movwf	??_initGLCD& (0+255),b
  5694  003E5E  0EE4               	movlw	228
  5695  003E60                     u6997:
  5696  003E60  2EE8               	decfsz	wreg,f,c
  5697  003E62  D7FE               	bra	u6997
  5698  003E64  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5699  003E66  D7FC               	bra	u6997
  5700  003E68  F000               	nop	
  5701  003E6A  0012               	return		;funcret
  5702  003E6C                     __end_of_initGLCD:
  5703                           	opt stack 0
  5704                           tblptru	equ	0xFF8
  5705                           tblptrh	equ	0xFF7
  5706                           tblptrl	equ	0xFF6
  5707                           tablat	equ	0xFF5
  5708                           intcon	equ	0xFF2
  5709                           intcon3	equ	0xFF0
  5710                           postinc0	equ	0xFEE
  5711                           wreg	equ	0xFE8
  5712                           postdec1	equ	0xFE5
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _glcdSetCOLMOD *****************
  5722 ;; Defined at:
  5723 ;;		line 167 in file "GLCD_PIC.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  numBitsPerPi    1    wreg     unsigned char 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  numBitsPerPi    1    6[BANK0 ] unsigned char 
  5728 ;;  rawData         2    7[BANK0 ] unsigned short 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        3 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    7
  5745 ;; This function calls:
  5746 ;;		_glcdTransfer
  5747 ;; This function is called by:
  5748 ;;		_initGLCD
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text5
  5753  005C94                     __ptext5:
  5754                           	opt stack 0
  5755  005C94                     _glcdSetCOLMOD:
  5756                           	opt stack 22
  5757                           
  5758                           ;incstack = 0
  5759                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  5760  005C94  0100               	movlb	0	; () banked
  5761  005C96  6FC9               	movwf	glcdSetCOLMOD@numBitsPerPixel& (0+255),b
  5762                           
  5763                           ;GLCD_PIC.c: 176: unsigned short rawData;
  5764                           ;GLCD_PIC.c: 177: switch(numBitsPerPixel){
  5765  005C98  D00E               	goto	l1357
  5766  005C9A                     
  5767                           ;GLCD_PIC.c: 179: rawData = 0b00000011;
  5768  005C9A  0E00               	movlw	0
  5769  005C9C  0100               	movlb	0	; () banked
  5770  005C9E  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5771  005CA0  0E03               	movlw	3
  5772  005CA2  D003               	goto	L2
  5773  005CA4                     
  5774                           ; BSR set to: 0
  5775                           ;GLCD_PIC.c: 182: rawData = 0b00000101;
  5776                           
  5777                           ; BSR set to: 0
  5778  005CA4  0E00               	movlw	0
  5779  005CA6  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5780  005CA8  0E05               	movlw	5
  5781  005CAA                     L2:
  5782  005CAA  6FCA               	movwf	glcdSetCOLMOD@rawData& (0+255),b
  5783                           
  5784                           ;GLCD_PIC.c: 186: break;
  5785  005CAC  D00E               	goto	l1359
  5786  005CAE                     
  5787                           ; BSR set to: 0
  5788                           ;GLCD_PIC.c: 188: rawData = 0b00000110;
  5789                           
  5790                           ; BSR set to: 0
  5791  005CAE  0E00               	movlw	0
  5792  005CB0  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5793  005CB2  0E06               	movlw	6
  5794  005CB4  D7FA               	goto	L2
  5795  005CB6                     l1357:
  5796                           
  5797                           ; BSR set to: 0
  5798  005CB6  0100               	movlb	0	; () banked
  5799  005CB8  51C9               	movf	glcdSetCOLMOD@numBitsPerPixel& (0+255),w,b
  5800                           
  5801                           ; Switch size 1, requested type "space"
  5802                           ; Number of cases is 3, Range of values is 12 to 18
  5803                           ; switch strategies available:
  5804                           ; Name         Instructions Cycles
  5805                           ; simple_byte           10     6 (average)
  5806                           ;	Chosen strategy is simple_byte
  5807  005CBA  0A0C               	xorlw	12	; case 12
  5808  005CBC  B4D8               	btfsc	status,2,c
  5809  005CBE  D7ED               	goto	l1358
  5810  005CC0  0A1C               	xorlw	28	; case 16
  5811  005CC2  B4D8               	btfsc	status,2,c
  5812  005CC4  D7EF               	goto	l1360
  5813  005CC6  0A02               	xorlw	2	; case 18
  5814  005CC8  D7F2               	goto	l1362
  5815  005CCA                     l1359:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;GLCD_PIC.c: 191: glcdTransfer(INST_COLMOD, 1);
  5819                           
  5820                           ; BSR set to: 0
  5821  005CCA  0E01               	movlw	1
  5822  005CCC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5823  005CCE  0EB3               	movlw	low GLCD_PIC@INST_COLMOD
  5824  005CD0  6EF6               	movwf	tblptrl,c
  5825  005CD2                     	if	1	;There is more than 1 active tblptr byte
  5826  005CD2  0EFC               	movlw	high GLCD_PIC@INST_COLMOD
  5827  005CD4  6EF7               	movwf	tblptrh,c
  5828  005CD6                     	endif
  5829  005CD6                     	if	1	;There are 3 active tblptr bytes
  5830  005CD6  0E00               	movlw	low (GLCD_PIC@INST_COLMOD shr (0+16))
  5831  005CD8  6EF8               	movwf	tblptru,c
  5832  005CDA                     	endif
  5833  005CDA  0008               	tblrd		*
  5834  005CDC  50F5               	movf	tablat,w,c
  5835  005CDE  EC26  F030         	call	_glcdTransfer
  5836                           
  5837                           ;GLCD_PIC.c: 192: glcdTransfer(rawData, 0);
  5838  005CE2  0E00               	movlw	0
  5839  005CE4  0100               	movlb	0	; () banked
  5840  005CE6  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5841  005CE8  51CA               	movf	glcdSetCOLMOD@rawData& (0+255),w,b
  5842  005CEA  EC26  F030         	call	_glcdTransfer
  5843  005CEE  0012               	return		;funcret
  5844  005CF0                     __end_of_glcdSetCOLMOD:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           intcon	equ	0xFF2
  5851                           intcon3	equ	0xFF0
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function _generate_compartment_array *****************
  5864 ;; Defined at:
  5865 ;;		line 220 in file "keypad.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  step            2    0[BANK0 ] int 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;Total ram usage:        4 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    4
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           	psect	text6
  5894  004AEC                     __ptext6:
  5895                           	opt stack 0
  5896  004AEC                     _generate_compartment_array:
  5897                           	opt stack 26
  5898                           
  5899                           ;keypad.c: 222: switch(step){
  5900                           
  5901                           ;incstack = 0
  5902  004AEC  D117               	goto	l1064
  5903  004AEE                     
  5904                           ;keypad.c: 224: compartment_array[0] = 1;
  5905  004AEE  0E00               	movlw	0
  5906  004AF0  0100               	movlb	0	; () banked
  5907  004AF2  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5908  004AF4  0E01               	movlw	1
  5909  004AF6  6F80               	movwf	_compartment_array& (0+255),b
  5910                           
  5911                           ;keypad.c: 225: compartment_array[2] = 1;
  5912  004AF8  0E00               	movlw	0
  5913  004AFA  6F85               	movwf	(_compartment_array+5)& (0+255),b
  5914  004AFC  0E01               	movlw	1
  5915  004AFE  6F84               	movwf	(_compartment_array+4)& (0+255),b
  5916                           
  5917                           ;keypad.c: 226: compartment_array[4] = 1;
  5918  004B00  0E00               	movlw	0
  5919  004B02  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5920  004B04  0E01               	movlw	1
  5921  004B06  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5922                           
  5923                           ;keypad.c: 227: compartment_array[6] = 1;
  5924  004B08  0E00               	movlw	0
  5925  004B0A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5926  004B0C  0E01               	movlw	1
  5927  004B0E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5928                           
  5929                           ;keypad.c: 230: compartment_number[0] = 0;
  5930  004B10  0E00               	movlw	0
  5931  004B12  6E43               	movwf	_compartment_number+1,c
  5932  004B14  0E00               	movlw	0
  5933  004B16  6E42               	movwf	_compartment_number,c
  5934                           
  5935                           ;keypad.c: 231: compartment_number[1] = 2;
  5936  004B18  0E00               	movlw	0
  5937  004B1A  6E45               	movwf	_compartment_number+3,c
  5938  004B1C  0E02               	movlw	2
  5939  004B1E  6E44               	movwf	_compartment_number+2,c
  5940                           
  5941                           ;keypad.c: 232: compartment_number[2] = 4;
  5942  004B20  0E00               	movlw	0
  5943  004B22  6E47               	movwf	_compartment_number+5,c
  5944  004B24  0E04               	movlw	4
  5945  004B26  6E46               	movwf	_compartment_number+4,c
  5946                           
  5947                           ;keypad.c: 233: compartment_number[3] = 6;
  5948  004B28  0E00               	movlw	0
  5949  004B2A  6E49               	movwf	_compartment_number+7,c
  5950  004B2C  0E06               	movlw	6
  5951  004B2E  6E48               	movwf	_compartment_number+6,c
  5952                           
  5953                           ;keypad.c: 235: break;
  5954  004B30  0012               	return	
  5955  004B32                     
  5956                           ; BSR set to: 0
  5957                           ;keypad.c: 237: compartment_array[0] = 1;
  5958                           
  5959                           ; BSR set to: 0
  5960  004B32  0E00               	movlw	0
  5961  004B34  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5962  004B36  0E01               	movlw	1
  5963  004B38  6F80               	movwf	_compartment_array& (0+255),b
  5964                           
  5965                           ;keypad.c: 238: compartment_array[1] = 1;
  5966  004B3A  0E00               	movlw	0
  5967  004B3C  6F83               	movwf	(_compartment_array+3)& (0+255),b
  5968  004B3E  0E01               	movlw	1
  5969  004B40  6F82               	movwf	(_compartment_array+2)& (0+255),b
  5970                           
  5971                           ;keypad.c: 239: compartment_array[3] = 1;
  5972  004B42  0E00               	movlw	0
  5973  004B44  6F87               	movwf	(_compartment_array+7)& (0+255),b
  5974  004B46  0E01               	movlw	1
  5975  004B48  6F86               	movwf	(_compartment_array+6)& (0+255),b
  5976                           
  5977                           ;keypad.c: 240: compartment_array[4] = 1;
  5978  004B4A  0E00               	movlw	0
  5979  004B4C  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5980  004B4E  0E01               	movlw	1
  5981  004B50  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5982                           
  5983                           ;keypad.c: 241: compartment_array[6] = 1;
  5984  004B52  0E00               	movlw	0
  5985  004B54  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5986  004B56  0E01               	movlw	1
  5987  004B58  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5988                           
  5989                           ;keypad.c: 245: compartment_number[0] = 0;
  5990  004B5A  0E00               	movlw	0
  5991  004B5C  6E43               	movwf	_compartment_number+1,c
  5992  004B5E  0E00               	movlw	0
  5993  004B60  6E42               	movwf	_compartment_number,c
  5994                           
  5995                           ;keypad.c: 246: compartment_number[1] = 1;
  5996  004B62  0E00               	movlw	0
  5997  004B64  6E45               	movwf	_compartment_number+3,c
  5998  004B66  0E01               	movlw	1
  5999  004B68  6E44               	movwf	_compartment_number+2,c
  6000                           
  6001                           ;keypad.c: 247: compartment_number[2] = 3;
  6002  004B6A  0E00               	movlw	0
  6003  004B6C  6E47               	movwf	_compartment_number+5,c
  6004  004B6E  0E03               	movlw	3
  6005  004B70  6E46               	movwf	_compartment_number+4,c
  6006                           
  6007                           ;keypad.c: 248: compartment_number[3] = 4;
  6008  004B72  0E00               	movlw	0
  6009  004B74  6E49               	movwf	_compartment_number+7,c
  6010  004B76  0E04               	movlw	4
  6011  004B78  6E48               	movwf	_compartment_number+6,c
  6012                           
  6013                           ;keypad.c: 249: compartment_number[4] = 6;
  6014  004B7A  0E00               	movlw	0
  6015  004B7C  6E4B               	movwf	_compartment_number+9,c
  6016  004B7E  0E06               	movlw	6
  6017  004B80  6E4A               	movwf	_compartment_number+8,c
  6018                           
  6019                           ;keypad.c: 251: break;
  6020  004B82  0012               	return	
  6021  004B84                     
  6022                           ; BSR set to: 0
  6023                           ;keypad.c: 254: compartment_array[0] = 1;
  6024                           
  6025                           ; BSR set to: 0
  6026  004B84  0E00               	movlw	0
  6027  004B86  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6028  004B88  0E01               	movlw	1
  6029  004B8A  6F80               	movwf	_compartment_array& (0+255),b
  6030                           
  6031                           ;keypad.c: 255: compartment_array[1] = 1;
  6032  004B8C  0E00               	movlw	0
  6033  004B8E  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6034  004B90  0E01               	movlw	1
  6035  004B92  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6036                           
  6037                           ;keypad.c: 256: compartment_array[2] = 1;
  6038  004B94  0E00               	movlw	0
  6039  004B96  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6040  004B98  0E01               	movlw	1
  6041  004B9A  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6042                           
  6043                           ;keypad.c: 257: compartment_array[4] = 1;
  6044  004B9C  0E00               	movlw	0
  6045  004B9E  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6046  004BA0  0E01               	movlw	1
  6047  004BA2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6048                           
  6049                           ;keypad.c: 258: compartment_array[5] = 1;
  6050  004BA4  0E00               	movlw	0
  6051  004BA6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6052  004BA8  0E01               	movlw	1
  6053  004BAA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6054                           
  6055                           ;keypad.c: 259: compartment_array[6] = 1;
  6056  004BAC  0E00               	movlw	0
  6057  004BAE  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6058  004BB0  0E01               	movlw	1
  6059  004BB2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6060                           
  6061                           ;keypad.c: 262: compartment_number[0] = 0;
  6062  004BB4  0E00               	movlw	0
  6063  004BB6  6E43               	movwf	_compartment_number+1,c
  6064  004BB8  0E00               	movlw	0
  6065  004BBA  6E42               	movwf	_compartment_number,c
  6066                           
  6067                           ;keypad.c: 263: compartment_number[1] = 1;
  6068  004BBC  0E00               	movlw	0
  6069  004BBE  6E45               	movwf	_compartment_number+3,c
  6070  004BC0  0E01               	movlw	1
  6071  004BC2  6E44               	movwf	_compartment_number+2,c
  6072                           
  6073                           ;keypad.c: 264: compartment_number[2] = 2;
  6074  004BC4  0E00               	movlw	0
  6075  004BC6  6E47               	movwf	_compartment_number+5,c
  6076  004BC8  0E02               	movlw	2
  6077  004BCA  6E46               	movwf	_compartment_number+4,c
  6078                           
  6079                           ;keypad.c: 265: compartment_number[3] = 4;
  6080  004BCC  0E00               	movlw	0
  6081  004BCE  6E49               	movwf	_compartment_number+7,c
  6082  004BD0  0E04               	movlw	4
  6083  004BD2  6E48               	movwf	_compartment_number+6,c
  6084                           
  6085                           ;keypad.c: 266: compartment_number[4] = 5;
  6086  004BD4  0E00               	movlw	0
  6087  004BD6  6E4B               	movwf	_compartment_number+9,c
  6088  004BD8  0E05               	movlw	5
  6089  004BDA  6E4A               	movwf	_compartment_number+8,c
  6090                           
  6091                           ;keypad.c: 267: compartment_number[5] = 6;
  6092  004BDC  0E00               	movlw	0
  6093  004BDE  6E4D               	movwf	_compartment_number+11,c
  6094  004BE0  0E06               	movlw	6
  6095  004BE2  6E4C               	movwf	_compartment_number+10,c
  6096                           
  6097                           ;keypad.c: 269: break;
  6098  004BE4  0012               	return	
  6099  004BE6                     
  6100                           ; BSR set to: 0
  6101                           ;keypad.c: 271: compartment_array[0] = 1;
  6102                           
  6103                           ; BSR set to: 0
  6104  004BE6  0E00               	movlw	0
  6105  004BE8  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6106  004BEA  0E01               	movlw	1
  6107  004BEC  6F80               	movwf	_compartment_array& (0+255),b
  6108                           
  6109                           ;keypad.c: 272: compartment_array[1] = 1;
  6110  004BEE  0E00               	movlw	0
  6111  004BF0  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6112  004BF2  0E01               	movlw	1
  6113  004BF4  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6114                           
  6115                           ;keypad.c: 273: compartment_array[2] = 1;
  6116  004BF6  0E00               	movlw	0
  6117  004BF8  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6118  004BFA  0E01               	movlw	1
  6119  004BFC  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6120                           
  6121                           ;keypad.c: 274: compartment_array[3] = 1;
  6122  004BFE  0E00               	movlw	0
  6123  004C00  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6124  004C02  0E01               	movlw	1
  6125  004C04  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6126                           
  6127                           ;keypad.c: 275: compartment_array[4] = 1;
  6128  004C06  0E00               	movlw	0
  6129  004C08  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6130  004C0A  0E01               	movlw	1
  6131  004C0C  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6132                           
  6133                           ;keypad.c: 276: compartment_array[5] = 1;
  6134  004C0E  0E00               	movlw	0
  6135  004C10  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6136  004C12  0E01               	movlw	1
  6137  004C14  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6138                           
  6139                           ;keypad.c: 277: compartment_array[6] = 1;
  6140  004C16  0E00               	movlw	0
  6141  004C18  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6142  004C1A  0E01               	movlw	1
  6143  004C1C  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6144                           
  6145                           ;keypad.c: 280: compartment_number[0] = 0;
  6146  004C1E  0E00               	movlw	0
  6147  004C20  6E43               	movwf	_compartment_number+1,c
  6148  004C22  0E00               	movlw	0
  6149  004C24  6E42               	movwf	_compartment_number,c
  6150                           
  6151                           ;keypad.c: 281: compartment_number[1] = 1;
  6152  004C26  0E00               	movlw	0
  6153  004C28  6E45               	movwf	_compartment_number+3,c
  6154  004C2A  0E01               	movlw	1
  6155  004C2C  6E44               	movwf	_compartment_number+2,c
  6156                           
  6157                           ;keypad.c: 282: compartment_number[2] = 2;
  6158  004C2E  0E00               	movlw	0
  6159  004C30  6E47               	movwf	_compartment_number+5,c
  6160  004C32  0E02               	movlw	2
  6161  004C34  6E46               	movwf	_compartment_number+4,c
  6162                           
  6163                           ;keypad.c: 283: compartment_number[3] = 3;
  6164  004C36  0E00               	movlw	0
  6165  004C38  6E49               	movwf	_compartment_number+7,c
  6166  004C3A  0E03               	movlw	3
  6167  004C3C  6E48               	movwf	_compartment_number+6,c
  6168                           
  6169                           ;keypad.c: 284: compartment_number[4] = 4;
  6170  004C3E  0E00               	movlw	0
  6171  004C40  6E4B               	movwf	_compartment_number+9,c
  6172  004C42  0E04               	movlw	4
  6173  004C44  6E4A               	movwf	_compartment_number+8,c
  6174                           
  6175                           ;keypad.c: 285: compartment_number[5] = 5;
  6176  004C46  0E00               	movlw	0
  6177  004C48  6E4D               	movwf	_compartment_number+11,c
  6178  004C4A  0E05               	movlw	5
  6179  004C4C  6E4C               	movwf	_compartment_number+10,c
  6180                           
  6181                           ;keypad.c: 286: compartment_number[6] = 6;
  6182  004C4E  0E00               	movlw	0
  6183  004C50  6E4F               	movwf	_compartment_number+13,c
  6184  004C52  0E06               	movlw	6
  6185  004C54  6E4E               	movwf	_compartment_number+12,c
  6186                           
  6187                           ;keypad.c: 288: break;
  6188  004C56  0012               	return	
  6189  004C58                     
  6190                           ; BSR set to: 0
  6191                           ;keypad.c: 290: compartment_array[0] = 1;
  6192                           
  6193                           ; BSR set to: 0
  6194  004C58  0E00               	movlw	0
  6195  004C5A  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6196  004C5C  0E01               	movlw	1
  6197  004C5E  6F80               	movwf	_compartment_array& (0+255),b
  6198                           
  6199                           ;keypad.c: 291: compartment_array[1] = 1;
  6200  004C60  0E00               	movlw	0
  6201  004C62  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6202  004C64  0E01               	movlw	1
  6203  004C66  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6204                           
  6205                           ;keypad.c: 292: compartment_array[2] = 1;
  6206  004C68  0E00               	movlw	0
  6207  004C6A  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6208  004C6C  0E01               	movlw	1
  6209  004C6E  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6210                           
  6211                           ;keypad.c: 293: compartment_array[3] = 1;
  6212  004C70  0E00               	movlw	0
  6213  004C72  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6214  004C74  0E01               	movlw	1
  6215  004C76  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6216                           
  6217                           ;keypad.c: 294: compartment_array[4] = 1;
  6218  004C78  0E00               	movlw	0
  6219  004C7A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6220  004C7C  0E01               	movlw	1
  6221  004C7E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6222                           
  6223                           ;keypad.c: 295: compartment_array[5] = 1;
  6224  004C80  0E00               	movlw	0
  6225  004C82  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6226  004C84  0E01               	movlw	1
  6227  004C86  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6228                           
  6229                           ;keypad.c: 296: compartment_array[6] = 1;
  6230  004C88  0E00               	movlw	0
  6231  004C8A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6232  004C8C  0E01               	movlw	1
  6233  004C8E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6234                           
  6235                           ;keypad.c: 297: compartment_array[7] = 1;
  6236  004C90  0E00               	movlw	0
  6237  004C92  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  6238  004C94  0E01               	movlw	1
  6239  004C96  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  6240                           
  6241                           ;keypad.c: 300: compartment_number[0] = 0;
  6242  004C98  0E00               	movlw	0
  6243  004C9A  6E43               	movwf	_compartment_number+1,c
  6244  004C9C  0E00               	movlw	0
  6245  004C9E  6E42               	movwf	_compartment_number,c
  6246                           
  6247                           ;keypad.c: 301: compartment_number[1] = 1;
  6248  004CA0  0E00               	movlw	0
  6249  004CA2  6E45               	movwf	_compartment_number+3,c
  6250  004CA4  0E01               	movlw	1
  6251  004CA6  6E44               	movwf	_compartment_number+2,c
  6252                           
  6253                           ;keypad.c: 302: compartment_number[2] = 2;
  6254  004CA8  0E00               	movlw	0
  6255  004CAA  6E47               	movwf	_compartment_number+5,c
  6256  004CAC  0E02               	movlw	2
  6257  004CAE  6E46               	movwf	_compartment_number+4,c
  6258                           
  6259                           ;keypad.c: 303: compartment_number[3] = 3;
  6260  004CB0  0E00               	movlw	0
  6261  004CB2  6E49               	movwf	_compartment_number+7,c
  6262  004CB4  0E03               	movlw	3
  6263  004CB6  6E48               	movwf	_compartment_number+6,c
  6264                           
  6265                           ;keypad.c: 304: compartment_number[4] = 4;
  6266  004CB8  0E00               	movlw	0
  6267  004CBA  6E4B               	movwf	_compartment_number+9,c
  6268  004CBC  0E04               	movlw	4
  6269  004CBE  6E4A               	movwf	_compartment_number+8,c
  6270                           
  6271                           ;keypad.c: 305: compartment_number[5] = 5;
  6272  004CC0  0E00               	movlw	0
  6273  004CC2  6E4D               	movwf	_compartment_number+11,c
  6274  004CC4  0E05               	movlw	5
  6275  004CC6  6E4C               	movwf	_compartment_number+10,c
  6276                           
  6277                           ;keypad.c: 306: compartment_number[6] = 6;
  6278  004CC8  0E00               	movlw	0
  6279  004CCA  6E4F               	movwf	_compartment_number+13,c
  6280  004CCC  0E06               	movlw	6
  6281  004CCE  6E4E               	movwf	_compartment_number+12,c
  6282                           
  6283                           ;keypad.c: 307: compartment_number[7] = 7;
  6284  004CD0  0E00               	movlw	0
  6285  004CD2  6E51               	movwf	_compartment_number+15,c
  6286  004CD4  0E07               	movlw	7
  6287  004CD6  6E50               	movwf	_compartment_number+14,c
  6288                           
  6289                           ;keypad.c: 309: break;
  6290  004CD8  0012               	return	
  6291  004CDA                     
  6292                           ; BSR set to: 0
  6293                           ;keypad.c: 311: compartment_array[0] = 0;
  6294                           
  6295                           ; BSR set to: 0
  6296  004CDA  0E00               	movlw	0
  6297  004CDC  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6298  004CDE  0E00               	movlw	0
  6299  004CE0  6F80               	movwf	_compartment_array& (0+255),b
  6300                           
  6301                           ;keypad.c: 312: compartment_array[1] = 0;
  6302  004CE2  0E00               	movlw	0
  6303  004CE4  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6304  004CE6  0E00               	movlw	0
  6305  004CE8  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6306                           
  6307                           ;keypad.c: 313: compartment_array[2] = 0;
  6308  004CEA  0E00               	movlw	0
  6309  004CEC  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6310  004CEE  0E00               	movlw	0
  6311  004CF0  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6312                           
  6313                           ;keypad.c: 314: compartment_array[3] = 0;
  6314  004CF2  0E00               	movlw	0
  6315  004CF4  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6316  004CF6  0E00               	movlw	0
  6317  004CF8  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6318                           
  6319                           ;keypad.c: 315: compartment_array[4] = 0;
  6320  004CFA  0E00               	movlw	0
  6321  004CFC  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6322  004CFE  0E00               	movlw	0
  6323  004D00  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6324                           
  6325                           ;keypad.c: 316: compartment_array[5] = 0;
  6326  004D02  0E00               	movlw	0
  6327  004D04  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6328  004D06  0E00               	movlw	0
  6329  004D08  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6330                           
  6331                           ;keypad.c: 317: compartment_array[6] = 0;
  6332  004D0A  0E00               	movlw	0
  6333  004D0C  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6334  004D0E  0E00               	movlw	0
  6335  004D10  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6336                           
  6337                           ;keypad.c: 318: compartment_array[7] = 0;
  6338  004D12  0E00               	movlw	0
  6339  004D14  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  6340  004D16  0E00               	movlw	0
  6341  004D18  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  6342                           
  6343                           ;keypad.c: 320: }
  6344  004D1A  0012               	return	
  6345  004D1C                     l1064:
  6346                           
  6347                           ; BSR set to: 0
  6348  004D1C  C0C3  F0C5         	movff	generate_compartment_array@step,??_generate_compartment_array
  6349  004D20  C0C4  F0C6         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  6350                           
  6351                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6352                           ; Switch size 1, requested type "space"
  6353                           ; Number of cases is 1, Range of values is 0 to 0
  6354                           ; switch strategies available:
  6355                           ; Name         Instructions Cycles
  6356                           ; simple_byte            4     3 (average)
  6357                           ;	Chosen strategy is simple_byte
  6358  004D24  0100               	movlb	0	; () banked
  6359  004D26  51C6               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  6360  004D28  0A00               	xorlw	0	; case 0
  6361  004D2A  A4D8               	btfss	status,2,c
  6362  004D2C  D7D6               	goto	l1071
  6363                           
  6364                           ; BSR set to: 0
  6365                           ; Switch size 1, requested type "space"
  6366                           ; Number of cases is 5, Range of values is 4 to 8
  6367                           ; switch strategies available:
  6368                           ; Name         Instructions Cycles
  6369                           ; simple_byte           16     9 (average)
  6370                           ;	Chosen strategy is simple_byte
  6371  004D2E  51C5               	movf	??_generate_compartment_array& (0+255),w,b
  6372  004D30  0A04               	xorlw	4	; case 4
  6373  004D32  B4D8               	btfsc	status,2,c
  6374  004D34  D6DC               	goto	l1065
  6375  004D36  0A01               	xorlw	1	; case 5
  6376  004D38  B4D8               	btfsc	status,2,c
  6377  004D3A  D6FB               	goto	l1067
  6378  004D3C  0A03               	xorlw	3	; case 6
  6379  004D3E  B4D8               	btfsc	status,2,c
  6380  004D40  D721               	goto	l1068
  6381  004D42  0A01               	xorlw	1	; case 7
  6382  004D44  B4D8               	btfsc	status,2,c
  6383  004D46  D74F               	goto	l1069
  6384  004D48  0A0F               	xorlw	15	; case 8
  6385  004D4A  B4D8               	btfsc	status,2,c
  6386  004D4C  D785               	goto	l1070
  6387  004D4E  D7C5               	goto	l1071
  6388  004D50                     __end_of_generate_compartment_array:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           intcon	equ	0xFF2
  6395                           intcon3	equ	0xFF0
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _drawTeamName *****************
  6408 ;; Defined at:
  6409 ;;		line 1594 in file "main.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      void 
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;Total ram usage:        1 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    8
  6430 ;; This function calls:
  6431 ;;		_I2C_Master_Init
  6432 ;;		_glcdDrawRectangle
  6433 ;;		_spiInit
  6434 ;; This function is called by:
  6435 ;;		_main
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text7
  6440  003E6C                     __ptext7:
  6441                           	opt stack 0
  6442  003E6C                     _drawTeamName:
  6443                           	opt stack 22
  6444                           
  6445                           ;main.c: 1595: spiInit(4);
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;incstack = 0
  6449  003E6C  0E04               	movlw	4
  6450  003E6E  ECF1  F02F         	call	_spiInit
  6451                           
  6452                           ;main.c: 1596: _delay((unsigned long)((20)*(32000000/4000.0)));
  6453  003E72  0ED0               	movlw	208
  6454  003E74  0100               	movlb	0	; () banked
  6455  003E76  6FE4               	movwf	??_drawTeamName& (0+255),b
  6456  003E78  0EC9               	movlw	201
  6457  003E7A                     u7007:
  6458  003E7A  2EE8               	decfsz	wreg,f,c
  6459  003E7C  D7FE               	bra	u7007
  6460  003E7E  2FE4               	decfsz	??_drawTeamName& (0+255),f,b
  6461  003E80  D7FC               	bra	u7007
  6462  003E82  D000               	nop2	
  6463                           
  6464                           ;main.c: 1597: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  6465  003E84  0EE9               	movlw	low _GLCD_SIZE_HORZ
  6466  003E86  6EF6               	movwf	tblptrl,c
  6467  003E88                     	if	1	;There is more than 1 active tblptr byte
  6468  003E88  0EFC               	movlw	high _GLCD_SIZE_HORZ
  6469  003E8A  6EF7               	movwf	tblptrh,c
  6470  003E8C                     	endif
  6471  003E8C                     	if	1	;There are 3 active tblptr bytes
  6472  003E8C  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  6473  003E8E  6EF8               	movwf	tblptru,c
  6474  003E90                     	endif
  6475  003E90  0008               	tblrd		*
  6476  003E92  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  6477  003E96  0E00               	movlw	0
  6478  003E98  0100               	movlb	0	; () banked
  6479  003E9A  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6480  003E9C  0EE8               	movlw	low _GLCD_SIZE_VERT
  6481  003E9E  6EF6               	movwf	tblptrl,c
  6482  003EA0                     	if	1	;There is more than 1 active tblptr byte
  6483  003EA0  0EFC               	movlw	high _GLCD_SIZE_VERT
  6484  003EA2  6EF7               	movwf	tblptrh,c
  6485  003EA4                     	endif
  6486  003EA4                     	if	1	;There are 3 active tblptr bytes
  6487  003EA4  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  6488  003EA6  6EF8               	movwf	tblptru,c
  6489  003EA8                     	endif
  6490  003EA8  0008               	tblrd		*
  6491  003EAA  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  6492  003EAE  0EA1               	movlw	low _BLACK
  6493  003EB0  6EF6               	movwf	tblptrl,c
  6494  003EB2                     	if	1	;There is more than 1 active tblptr byte
  6495  003EB2  0EFC               	movlw	high _BLACK
  6496  003EB4  6EF7               	movwf	tblptrh,c
  6497  003EB6                     	endif
  6498  003EB6                     	if	1	;There are 3 active tblptr bytes
  6499  003EB6  0E00               	movlw	low (_BLACK shr (0+16))
  6500  003EB8  6EF8               	movwf	tblptru,c
  6501  003EBA                     	endif
  6502  003EBA  0009               	tblrd		*+
  6503  003EBC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6504  003EC0  0009               	tblrd		*+
  6505  003EC2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6506  003EC6  0009               	tblrd		*+
  6507  003EC8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6508  003ECC  000A               	tblrd		*-
  6509  003ECE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6510  003ED2  0E00               	movlw	0
  6511  003ED4  ECA8  F026         	call	_glcdDrawRectangle
  6512                           
  6513                           ;main.c: 1599: glcdDrawRectangle(5*4, 11*4, 9*4, 11*4, WHITE);
  6514  003ED8  0E2C               	movlw	44
  6515  003EDA  0100               	movlb	0	; () banked
  6516  003EDC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6517  003EDE  0E24               	movlw	36
  6518  003EE0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6519  003EE2  0E2C               	movlw	44
  6520  003EE4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6521  003EE6  0E99               	movlw	low _WHITE
  6522  003EE8  6EF6               	movwf	tblptrl,c
  6523  003EEA                     	if	1	;There is more than 1 active tblptr byte
  6524  003EEA  0EFC               	movlw	high _WHITE
  6525  003EEC  6EF7               	movwf	tblptrh,c
  6526  003EEE                     	endif
  6527  003EEE                     	if	1	;There are 3 active tblptr bytes
  6528  003EEE  0E00               	movlw	low (_WHITE shr (0+16))
  6529  003EF0  6EF8               	movwf	tblptru,c
  6530  003EF2                     	endif
  6531  003EF2  0009               	tblrd		*+
  6532  003EF4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6533  003EF8  0009               	tblrd		*+
  6534  003EFA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6535  003EFE  0009               	tblrd		*+
  6536  003F00  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6537  003F04  000A               	tblrd		*-
  6538  003F06  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6539  003F0A  0E14               	movlw	20
  6540  003F0C  ECA8  F026         	call	_glcdDrawRectangle
  6541                           
  6542                           ;main.c: 1600: glcdDrawRectangle(8*4, 9*4, 11*4, 16*4, WHITE);
  6543  003F10  0E24               	movlw	36
  6544  003F12  0100               	movlb	0	; () banked
  6545  003F14  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6546  003F16  0E2C               	movlw	44
  6547  003F18  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6548  003F1A  0E40               	movlw	64
  6549  003F1C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6550  003F1E  0E99               	movlw	low _WHITE
  6551  003F20  6EF6               	movwf	tblptrl,c
  6552  003F22                     	if	1	;There is more than 1 active tblptr byte
  6553  003F22  0EFC               	movlw	high _WHITE
  6554  003F24  6EF7               	movwf	tblptrh,c
  6555  003F26                     	endif
  6556  003F26                     	if	1	;There are 3 active tblptr bytes
  6557  003F26  0E00               	movlw	low (_WHITE shr (0+16))
  6558  003F28  6EF8               	movwf	tblptru,c
  6559  003F2A                     	endif
  6560  003F2A  0009               	tblrd		*+
  6561  003F2C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6562  003F30  0009               	tblrd		*+
  6563  003F32  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6564  003F36  0009               	tblrd		*+
  6565  003F38  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6566  003F3C  000A               	tblrd		*-
  6567  003F3E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6568  003F42  0E20               	movlw	32
  6569  003F44  ECA8  F026         	call	_glcdDrawRectangle
  6570                           
  6571                           ;main.c: 1602: glcdDrawRectangle(12*4, 17*4, 9*4, 11*4, WHITE);
  6572  003F48  0E44               	movlw	68
  6573  003F4A  0100               	movlb	0	; () banked
  6574  003F4C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6575  003F4E  0E24               	movlw	36
  6576  003F50  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6577  003F52  0E2C               	movlw	44
  6578  003F54  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6579  003F56  0E99               	movlw	low _WHITE
  6580  003F58  6EF6               	movwf	tblptrl,c
  6581  003F5A                     	if	1	;There is more than 1 active tblptr byte
  6582  003F5A  0EFC               	movlw	high _WHITE
  6583  003F5C  6EF7               	movwf	tblptrh,c
  6584  003F5E                     	endif
  6585  003F5E                     	if	1	;There are 3 active tblptr bytes
  6586  003F5E  0E00               	movlw	low (_WHITE shr (0+16))
  6587  003F60  6EF8               	movwf	tblptru,c
  6588  003F62                     	endif
  6589  003F62  0009               	tblrd		*+
  6590  003F64  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6591  003F68  0009               	tblrd		*+
  6592  003F6A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6593  003F6E  0009               	tblrd		*+
  6594  003F70  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6595  003F74  000A               	tblrd		*-
  6596  003F76  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6597  003F7A  0E30               	movlw	48
  6598  003F7C  ECA8  F026         	call	_glcdDrawRectangle
  6599                           
  6600                           ;main.c: 1603: glcdDrawRectangle(16*4, 17*4, 11*4, 16*4, WHITE);
  6601  003F80  0E44               	movlw	68
  6602  003F82  0100               	movlb	0	; () banked
  6603  003F84  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6604  003F86  0E2C               	movlw	44
  6605  003F88  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6606  003F8A  0E40               	movlw	64
  6607  003F8C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6608  003F8E  0E99               	movlw	low _WHITE
  6609  003F90  6EF6               	movwf	tblptrl,c
  6610  003F92                     	if	1	;There is more than 1 active tblptr byte
  6611  003F92  0EFC               	movlw	high _WHITE
  6612  003F94  6EF7               	movwf	tblptrh,c
  6613  003F96                     	endif
  6614  003F96                     	if	1	;There are 3 active tblptr bytes
  6615  003F96  0E00               	movlw	low (_WHITE shr (0+16))
  6616  003F98  6EF8               	movwf	tblptru,c
  6617  003F9A                     	endif
  6618  003F9A  0009               	tblrd		*+
  6619  003F9C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6620  003FA0  0009               	tblrd		*+
  6621  003FA2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6622  003FA6  0009               	tblrd		*+
  6623  003FA8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6624  003FAC  000A               	tblrd		*-
  6625  003FAE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6626  003FB2  0E40               	movlw	64
  6627  003FB4  ECA8  F026         	call	_glcdDrawRectangle
  6628                           
  6629                           ;main.c: 1604: glcdDrawRectangle(12*4, 16*4, 12*4, 13*4, WHITE);
  6630  003FB8  0E40               	movlw	64
  6631  003FBA  0100               	movlb	0	; () banked
  6632  003FBC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6633  003FBE  0E30               	movlw	48
  6634  003FC0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6635  003FC2  0E34               	movlw	52
  6636  003FC4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6637  003FC6  0E99               	movlw	low _WHITE
  6638  003FC8  6EF6               	movwf	tblptrl,c
  6639  003FCA                     	if	1	;There is more than 1 active tblptr byte
  6640  003FCA  0EFC               	movlw	high _WHITE
  6641  003FCC  6EF7               	movwf	tblptrh,c
  6642  003FCE                     	endif
  6643  003FCE                     	if	1	;There are 3 active tblptr bytes
  6644  003FCE  0E00               	movlw	low (_WHITE shr (0+16))
  6645  003FD0  6EF8               	movwf	tblptru,c
  6646  003FD2                     	endif
  6647  003FD2  0009               	tblrd		*+
  6648  003FD4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6649  003FD8  0009               	tblrd		*+
  6650  003FDA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6651  003FDE  0009               	tblrd		*+
  6652  003FE0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6653  003FE4  000A               	tblrd		*-
  6654  003FE6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6655  003FEA  0E30               	movlw	48
  6656  003FEC  ECA8  F026         	call	_glcdDrawRectangle
  6657                           
  6658                           ;main.c: 1605: glcdDrawRectangle(12*4, 16*4, 14*4, 16*4, WHITE);
  6659  003FF0  0E40               	movlw	64
  6660  003FF2  0100               	movlb	0	; () banked
  6661  003FF4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6662  003FF6  0E38               	movlw	56
  6663  003FF8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6664  003FFA  0E40               	movlw	64
  6665  003FFC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6666  003FFE  0E99               	movlw	low _WHITE
  6667  004000  6EF6               	movwf	tblptrl,c
  6668  004002                     	if	1	;There is more than 1 active tblptr byte
  6669  004002  0EFC               	movlw	high _WHITE
  6670  004004  6EF7               	movwf	tblptrh,c
  6671  004006                     	endif
  6672  004006                     	if	1	;There are 3 active tblptr bytes
  6673  004006  0E00               	movlw	low (_WHITE shr (0+16))
  6674  004008  6EF8               	movwf	tblptru,c
  6675  00400A                     	endif
  6676  00400A  0009               	tblrd		*+
  6677  00400C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6678  004010  0009               	tblrd		*+
  6679  004012  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6680  004016  0009               	tblrd		*+
  6681  004018  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6682  00401C  000A               	tblrd		*-
  6683  00401E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6684  004022  0E30               	movlw	48
  6685  004024  ECA8  F026         	call	_glcdDrawRectangle
  6686                           
  6687                           ;main.c: 1607: glcdDrawRectangle(18*4, 19*4, 9*4, 14*4, WHITE);
  6688  004028  0E4C               	movlw	76
  6689  00402A  0100               	movlb	0	; () banked
  6690  00402C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6691  00402E  0E24               	movlw	36
  6692  004030  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6693  004032  0E38               	movlw	56
  6694  004034  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6695  004036  0E99               	movlw	low _WHITE
  6696  004038  6EF6               	movwf	tblptrl,c
  6697  00403A                     	if	1	;There is more than 1 active tblptr byte
  6698  00403A  0EFC               	movlw	high _WHITE
  6699  00403C  6EF7               	movwf	tblptrh,c
  6700  00403E                     	endif
  6701  00403E                     	if	1	;There are 3 active tblptr bytes
  6702  00403E  0E00               	movlw	low (_WHITE shr (0+16))
  6703  004040  6EF8               	movwf	tblptru,c
  6704  004042                     	endif
  6705  004042  0009               	tblrd		*+
  6706  004044  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6707  004048  0009               	tblrd		*+
  6708  00404A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6709  00404E  0009               	tblrd		*+
  6710  004050  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6711  004054  000A               	tblrd		*-
  6712  004056  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6713  00405A  0E48               	movlw	72
  6714  00405C  ECA8  F026         	call	_glcdDrawRectangle
  6715                           
  6716                           ;main.c: 1608: glcdDrawRectangle(19*4, 23*4, 12*4, 14*4, WHITE);
  6717  004060  0E5C               	movlw	92
  6718  004062  0100               	movlb	0	; () banked
  6719  004064  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6720  004066  0E30               	movlw	48
  6721  004068  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6722  00406A  0E38               	movlw	56
  6723  00406C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6724  00406E  0E99               	movlw	low _WHITE
  6725  004070  6EF6               	movwf	tblptrl,c
  6726  004072                     	if	1	;There is more than 1 active tblptr byte
  6727  004072  0EFC               	movlw	high _WHITE
  6728  004074  6EF7               	movwf	tblptrh,c
  6729  004076                     	endif
  6730  004076                     	if	1	;There are 3 active tblptr bytes
  6731  004076  0E00               	movlw	low (_WHITE shr (0+16))
  6732  004078  6EF8               	movwf	tblptru,c
  6733  00407A                     	endif
  6734  00407A  0009               	tblrd		*+
  6735  00407C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6736  004080  0009               	tblrd		*+
  6737  004082  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6738  004086  0009               	tblrd		*+
  6739  004088  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6740  00408C  000A               	tblrd		*-
  6741  00408E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6742  004092  0E4C               	movlw	76
  6743  004094  ECA8  F026         	call	_glcdDrawRectangle
  6744                           
  6745                           ;main.c: 1609: glcdDrawRectangle(21*4, 22*4, 9*4, 16*4, WHITE);
  6746  004098  0E58               	movlw	88
  6747  00409A  0100               	movlb	0	; () banked
  6748  00409C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6749  00409E  0E24               	movlw	36
  6750  0040A0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6751  0040A2  0E40               	movlw	64
  6752  0040A4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6753  0040A6  0E99               	movlw	low _WHITE
  6754  0040A8  6EF6               	movwf	tblptrl,c
  6755  0040AA                     	if	1	;There is more than 1 active tblptr byte
  6756  0040AA  0EFC               	movlw	high _WHITE
  6757  0040AC  6EF7               	movwf	tblptrh,c
  6758  0040AE                     	endif
  6759  0040AE                     	if	1	;There are 3 active tblptr bytes
  6760  0040AE  0E00               	movlw	low (_WHITE shr (0+16))
  6761  0040B0  6EF8               	movwf	tblptru,c
  6762  0040B2                     	endif
  6763  0040B2  0009               	tblrd		*+
  6764  0040B4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6765  0040B8  0009               	tblrd		*+
  6766  0040BA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6767  0040BE  0009               	tblrd		*+
  6768  0040C0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6769  0040C4  000A               	tblrd		*-
  6770  0040C6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6771  0040CA  0E54               	movlw	84
  6772  0040CC  ECA8  F026         	call	_glcdDrawRectangle
  6773                           
  6774                           ;main.c: 1612: glcdDrawRectangle(24*4, 25*4, 10*4, 13*4, RED);
  6775  0040D0  0E64               	movlw	100
  6776  0040D2  0100               	movlb	0	; () banked
  6777  0040D4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6778  0040D6  0E28               	movlw	40
  6779  0040D8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6780  0040DA  0E34               	movlw	52
  6781  0040DC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6782  0040DE  0E95               	movlw	low _RED
  6783  0040E0  6EF6               	movwf	tblptrl,c
  6784  0040E2                     	if	1	;There is more than 1 active tblptr byte
  6785  0040E2  0EFC               	movlw	high _RED
  6786  0040E4  6EF7               	movwf	tblptrh,c
  6787  0040E6                     	endif
  6788  0040E6                     	if	1	;There are 3 active tblptr bytes
  6789  0040E6  0E00               	movlw	low (_RED shr (0+16))
  6790  0040E8  6EF8               	movwf	tblptru,c
  6791  0040EA                     	endif
  6792  0040EA  0009               	tblrd		*+
  6793  0040EC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6794  0040F0  0009               	tblrd		*+
  6795  0040F2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6796  0040F6  0009               	tblrd		*+
  6797  0040F8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6798  0040FC  000A               	tblrd		*-
  6799  0040FE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6800  004102  0E60               	movlw	96
  6801  004104  ECA8  F026         	call	_glcdDrawRectangle
  6802                           
  6803                           ;main.c: 1613: glcdDrawRectangle(25*4, 27*4, 9*4, 14*4, RED);
  6804  004108  0E6C               	movlw	108
  6805  00410A  0100               	movlb	0	; () banked
  6806  00410C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6807  00410E  0E24               	movlw	36
  6808  004110  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6809  004112  0E38               	movlw	56
  6810  004114  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6811  004116  0E95               	movlw	low _RED
  6812  004118  6EF6               	movwf	tblptrl,c
  6813  00411A                     	if	1	;There is more than 1 active tblptr byte
  6814  00411A  0EFC               	movlw	high _RED
  6815  00411C  6EF7               	movwf	tblptrh,c
  6816  00411E                     	endif
  6817  00411E                     	if	1	;There are 3 active tblptr bytes
  6818  00411E  0E00               	movlw	low (_RED shr (0+16))
  6819  004120  6EF8               	movwf	tblptru,c
  6820  004122                     	endif
  6821  004122  0009               	tblrd		*+
  6822  004124  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6823  004128  0009               	tblrd		*+
  6824  00412A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6825  00412E  0009               	tblrd		*+
  6826  004130  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6827  004134  000A               	tblrd		*-
  6828  004136  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6829  00413A  0E64               	movlw	100
  6830  00413C  ECA8  F026         	call	_glcdDrawRectangle
  6831                           
  6832                           ;main.c: 1614: glcdDrawRectangle(27*4, 28*4, 10*4, 15*4, RED);
  6833  004140  0E70               	movlw	112
  6834  004142  0100               	movlb	0	; () banked
  6835  004144  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6836  004146  0E28               	movlw	40
  6837  004148  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6838  00414A  0E3C               	movlw	60
  6839  00414C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6840  00414E  0E95               	movlw	low _RED
  6841  004150  6EF6               	movwf	tblptrl,c
  6842  004152                     	if	1	;There is more than 1 active tblptr byte
  6843  004152  0EFC               	movlw	high _RED
  6844  004154  6EF7               	movwf	tblptrh,c
  6845  004156                     	endif
  6846  004156                     	if	1	;There are 3 active tblptr bytes
  6847  004156  0E00               	movlw	low (_RED shr (0+16))
  6848  004158  6EF8               	movwf	tblptru,c
  6849  00415A                     	endif
  6850  00415A  0009               	tblrd		*+
  6851  00415C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6852  004160  0009               	tblrd		*+
  6853  004162  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6854  004166  0009               	tblrd		*+
  6855  004168  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6856  00416C  000A               	tblrd		*-
  6857  00416E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6858  004172  0E6C               	movlw	108
  6859  004174  ECA8  F026         	call	_glcdDrawRectangle
  6860                           
  6861                           ;main.c: 1616: glcdDrawRectangle(28*4, 30*4, 9*4, 14*4, RED);
  6862  004178  0E78               	movlw	120
  6863  00417A  0100               	movlb	0	; () banked
  6864  00417C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6865  00417E  0E24               	movlw	36
  6866  004180  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6867  004182  0E38               	movlw	56
  6868  004184  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6869  004186  0E95               	movlw	low _RED
  6870  004188  6EF6               	movwf	tblptrl,c
  6871  00418A                     	if	1	;There is more than 1 active tblptr byte
  6872  00418A  0EFC               	movlw	high _RED
  6873  00418C  6EF7               	movwf	tblptrh,c
  6874  00418E                     	endif
  6875  00418E                     	if	1	;There are 3 active tblptr bytes
  6876  00418E  0E00               	movlw	low (_RED shr (0+16))
  6877  004190  6EF8               	movwf	tblptru,c
  6878  004192                     	endif
  6879  004192  0009               	tblrd		*+
  6880  004194  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6881  004198  0009               	tblrd		*+
  6882  00419A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6883  00419E  0009               	tblrd		*+
  6884  0041A0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6885  0041A4  000A               	tblrd		*-
  6886  0041A6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6887  0041AA  0E70               	movlw	112
  6888  0041AC  ECA8  F026         	call	_glcdDrawRectangle
  6889                           
  6890                           ;main.c: 1617: glcdDrawRectangle(30*4, 31*4, 10*4, 13*4, RED);
  6891  0041B0  0E7C               	movlw	124
  6892  0041B2  0100               	movlb	0	; () banked
  6893  0041B4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6894  0041B6  0E28               	movlw	40
  6895  0041B8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6896  0041BA  0E34               	movlw	52
  6897  0041BC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6898  0041BE  0E95               	movlw	low _RED
  6899  0041C0  6EF6               	movwf	tblptrl,c
  6900  0041C2                     	if	1	;There is more than 1 active tblptr byte
  6901  0041C2  0EFC               	movlw	high _RED
  6902  0041C4  6EF7               	movwf	tblptrh,c
  6903  0041C6                     	endif
  6904  0041C6                     	if	1	;There are 3 active tblptr bytes
  6905  0041C6  0E00               	movlw	low (_RED shr (0+16))
  6906  0041C8  6EF8               	movwf	tblptru,c
  6907  0041CA                     	endif
  6908  0041CA  0009               	tblrd		*+
  6909  0041CC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6910  0041D0  0009               	tblrd		*+
  6911  0041D2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6912  0041D6  0009               	tblrd		*+
  6913  0041D8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6914  0041DC  000A               	tblrd		*-
  6915  0041DE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6916  0041E2  0E78               	movlw	120
  6917  0041E4  ECA8  F026         	call	_glcdDrawRectangle
  6918                           
  6919                           ;main.c: 1618: I2C_Master_Init(100000);
  6920  0041E8  0EA0               	movlw	160
  6921  0041EA  0100               	movlb	0	; () banked
  6922  0041EC  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  6923  0041EE  0E86               	movlw	134
  6924  0041F0  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  6925  0041F2  0E01               	movlw	1
  6926  0041F4  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  6927  0041F6  0E00               	movlw	0
  6928  0041F8  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  6929  0041FA  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
  6930  0041FE  0012               	return		;funcret
  6931  004200                     __end_of_drawTeamName:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           intcon	equ	0xFF2
  6938                           intcon3	equ	0xFF0
  6939                           postinc0	equ	0xFEE
  6940                           wreg	equ	0xFE8
  6941                           postdec1	equ	0xFE5
  6942                           fsr1l	equ	0xFE1
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           postdec2	equ	0xFDD
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function ___awdiv *****************
  6951 ;; Defined at:
  6952 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  dividend        2    0[BANK0 ] int 
  6955 ;;  divisor         2    2[BANK0 ] int 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  quotient        2    6[BANK0 ] int 
  6958 ;;  sign            1    5[BANK0 ] unsigned char 
  6959 ;;  counter         1    4[BANK0 ] unsigned char 
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  2    0[BANK0 ] int 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;Total ram usage:        8 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    4
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_main
  6980 ;;		_get_RTC_initial
  6981 ;;		_get_RTC_final
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text8
  6986  005842                     __ptext8:
  6987                           	opt stack 0
  6988  005842                     ___awdiv:
  6989                           	opt stack 26
  6990                           
  6991                           ;incstack = 0
  6992  005842  0E00               	movlw	0
  6993  005844  0100               	movlb	0	; () banked
  6994  005846  6FC8               	movwf	___awdiv@sign& (0+255),b
  6995                           
  6996                           ; BSR set to: 0
  6997  005848  AFC6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6998  00584A  D006               	goto	l1626
  6999                           
  7000                           ; BSR set to: 0
  7001  00584C  6DC5               	negf	___awdiv@divisor& (0+255),b
  7002  00584E  1FC6               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7003  005850  B0D8               	btfsc	status,0,c
  7004  005852  2BC6               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007  005854  0E01               	movlw	1
  7008  005856  6FC8               	movwf	___awdiv@sign& (0+255),b
  7009  005858                     l1626:
  7010                           
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  005858  AFC4               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7015  00585A  D006               	goto	l1627
  7016                           
  7017                           ; BSR set to: 0
  7018  00585C  6DC3               	negf	___awdiv@dividend& (0+255),b
  7019  00585E  1FC4               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7020  005860  B0D8               	btfsc	status,0,c
  7021  005862  2BC4               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 0
  7024  005864  0E01               	movlw	1
  7025  005866  1BC8               	xorwf	___awdiv@sign& (0+255),f,b
  7026  005868                     l1627:
  7027                           
  7028                           ; BSR set to: 0
  7029                           
  7030                           ; BSR set to: 0
  7031  005868  0E00               	movlw	0
  7032  00586A  6FCA               	movwf	(___awdiv@quotient+1)& (0+255),b
  7033  00586C  0E00               	movlw	0
  7034  00586E  6FC9               	movwf	___awdiv@quotient& (0+255),b
  7035                           
  7036                           ; BSR set to: 0
  7037  005870  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7038  005872  11C6               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7039  005874  B4D8               	btfsc	status,2,c
  7040  005876  D01C               	goto	l1634
  7041                           
  7042                           ; BSR set to: 0
  7043  005878  0E01               	movlw	1
  7044  00587A  6FC7               	movwf	___awdiv@counter& (0+255),b
  7045  00587C  D004               	goto	l1629
  7046  00587E                     
  7047                           ; BSR set to: 0
  7048                           
  7049                           ; BSR set to: 0
  7050  00587E  90D8               	bcf	status,0,c
  7051  005880  37C5               	rlcf	___awdiv@divisor& (0+255),f,b
  7052  005882  37C6               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7053  005884  2BC7               	incf	___awdiv@counter& (0+255),f,b
  7054  005886                     l1629:
  7055                           
  7056                           ; BSR set to: 0
  7057                           
  7058                           ; BSR set to: 0
  7059  005886  AFC6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7060  005888  D7FA               	goto	l1630
  7061  00588A                     u4790:
  7062                           
  7063                           ; BSR set to: 0
  7064                           
  7065                           ; BSR set to: 0
  7066                           
  7067                           ; BSR set to: 0
  7068  00588A  90D8               	bcf	status,0,c
  7069  00588C  37C9               	rlcf	___awdiv@quotient& (0+255),f,b
  7070  00588E  37CA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7071                           
  7072                           ; BSR set to: 0
  7073  005890  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7074  005892  5DC3               	subwf	___awdiv@dividend& (0+255),w,b
  7075  005894  51C6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7076  005896  59C4               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7077  005898  A0D8               	btfss	status,0,c
  7078  00589A  D005               	goto	l1633
  7079                           
  7080                           ; BSR set to: 0
  7081  00589C  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7082  00589E  5FC3               	subwf	___awdiv@dividend& (0+255),f,b
  7083  0058A0  51C6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7084  0058A2  5BC4               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  0058A4  81C9               	bsf	___awdiv@quotient& (0+255),0,b
  7088  0058A6                     l1633:
  7089                           
  7090                           ; BSR set to: 0
  7091                           
  7092                           ; BSR set to: 0
  7093  0058A6  90D8               	bcf	status,0,c
  7094  0058A8  33C6               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7095  0058AA  33C5               	rrcf	___awdiv@divisor& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098  0058AC  2FC7               	decfsz	___awdiv@counter& (0+255),f,b
  7099  0058AE  D7ED               	goto	u4790
  7100  0058B0                     l1634:
  7101                           
  7102                           ; BSR set to: 0
  7103                           
  7104                           ; BSR set to: 0
  7105                           
  7106                           ; BSR set to: 0
  7107  0058B0  51C8               	movf	___awdiv@sign& (0+255),w,b
  7108  0058B2  B4D8               	btfsc	status,2,c
  7109  0058B4  D004               	goto	l1635
  7110                           
  7111                           ; BSR set to: 0
  7112  0058B6  6DC9               	negf	___awdiv@quotient& (0+255),b
  7113  0058B8  1FCA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7114  0058BA  B0D8               	btfsc	status,0,c
  7115  0058BC  2BCA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7116  0058BE                     l1635:
  7117                           
  7118                           ; BSR set to: 0
  7119                           
  7120                           ; BSR set to: 0
  7121  0058BE  C0C9  F0C3         	movff	___awdiv@quotient,?___awdiv
  7122  0058C2  C0CA  F0C4         	movff	___awdiv@quotient+1,?___awdiv+1
  7123  0058C6  0012               	return	
  7124  0058C8                     __end_of___awdiv:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           intcon	equ	0xFF2
  7131                           intcon3	equ	0xFF0
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           postdec1	equ	0xFE5
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _Washer_remain *****************
  7144 ;; Defined at:
  7145 ;;		line 1549 in file "main.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  time            2   42[BANK0 ] int 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;Total ram usage:        4 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    9
  7166 ;; This function calls:
  7167 ;;		_I2C_sendData
  7168 ;;		_drawWasher
  7169 ;;		_lcdInst
  7170 ;;		_printf
  7171 ;; This function is called by:
  7172 ;;		_main
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text9
  7177  0051BA                     __ptext9:
  7178                           	opt stack 0
  7179  0051BA                     _Washer_remain:
  7180                           	opt stack 21
  7181                           
  7182                           ;main.c: 1550: drawWasher();
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;incstack = 0
  7186  0051BA  ECF8  F014         	call	_drawWasher	;wreg free
  7187                           
  7188                           ;main.c: 1551: _delay((unsigned long)((100)*(32000000/4000.0)));
  7189  0051BE  0E05               	movlw	5
  7190  0051C0  0100               	movlb	0	; () banked
  7191  0051C2  6FF0               	movwf	(??_Washer_remain+1)& (0+255),b
  7192  0051C4  0E0F               	movlw	15
  7193  0051C6  6FEF               	movwf	??_Washer_remain& (0+255),b
  7194  0051C8  0EF1               	movlw	241
  7195  0051CA                     u7017:
  7196  0051CA  2EE8               	decfsz	wreg,f,c
  7197  0051CC  D7FE               	bra	u7017
  7198  0051CE  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7199  0051D0  D7FC               	bra	u7017
  7200  0051D2  2FF0               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  7201  0051D4  D7FA               	bra	u7017
  7202                           
  7203                           ;main.c: 1552: I2C_sendData(11);
  7204  0051D6  0E0B               	movlw	11
  7205  0051D8  EC7A  F030         	call	_I2C_sendData
  7206                           
  7207                           ;main.c: 1553: while(EndOfProgram != 1 && W_spacingTime < time){
  7208  0051DC  D026               	goto	l778
  7209  0051DE                     
  7210                           ;main.c: 1554: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7211  0051DE  0E01               	movlw	1
  7212  0051E0  ECDF  F030         	call	_lcdInst
  7213  0051E4  0E9C               	movlw	156
  7214  0051E6  0100               	movlb	0	; () banked
  7215  0051E8  6FEF               	movwf	??_Washer_remain& (0+255),b
  7216  0051EA  0ED7               	movlw	215
  7217  0051EC                     u7027:
  7218  0051EC  2EE8               	decfsz	wreg,f,c
  7219  0051EE  D7FE               	bra	u7027
  7220  0051F0  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7221  0051F2  D7FC               	bra	u7027
  7222                           
  7223                           ;main.c: 1555: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7224  0051F4  0E80               	movlw	128
  7225  0051F6  ECDF  F030         	call	_lcdInst
  7226  0051FA  0E34               	movlw	52
  7227  0051FC  0100               	movlb	0	; () banked
  7228  0051FE  6FEF               	movwf	??_Washer_remain& (0+255),b
  7229  005200  0EF1               	movlw	241
  7230  005202                     u7037:
  7231  005202  2EE8               	decfsz	wreg,f,c
  7232  005204  D7FE               	bra	u7037
  7233  005206  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7234  005208  D7FC               	bra	u7037
  7235  00520A  D000               	nop2	
  7236                           
  7237                           ;main.c: 1556: W_spacingTime +=30;
  7238  00520C  0E1E               	movlw	30
  7239  00520E  0100               	movlb	0	; () banked
  7240  005210  2797               	addwf	_W_spacingTime& (0+255),f,b
  7241  005212  0E00               	movlw	0
  7242  005214  2398               	addwfc	(_W_spacingTime+1)& (0+255),f,b
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;main.c: 1557: printf("W:%d",W_counter);
  7246  005216  0E65               	movlw	low (STR_70+15)
  7247  005218  6FD1               	movwf	printf@f& (0+255),b
  7248  00521A  0EFD               	movlw	high (STR_70+15)
  7249  00521C  6FD2               	movwf	(printf@f+1)& (0+255),b
  7250  00521E  C0A7  F0D3         	movff	_W_counter,?_printf+2
  7251  005222  C0A8  F0D4         	movff	_W_counter+1,?_printf+3
  7252  005226  EC2A  F019         	call	_printf	;wreg free
  7253  00522A                     l778:
  7254  00522A  0100               	movlb	0	; () banked
  7255  00522C  05BB               	decf	_EndOfProgram& (0+255),w,b
  7256  00522E  B4D8               	btfsc	status,2,c
  7257  005230  D00A               	goto	u4330
  7258                           
  7259                           ; BSR set to: 0
  7260  005232  51ED               	movf	Washer_remain@time& (0+255),w,b
  7261  005234  5D97               	subwf	_W_spacingTime& (0+255),w,b
  7262  005236  5198               	movf	(_W_spacingTime+1)& (0+255),w,b
  7263  005238  0A80               	xorlw	128
  7264  00523A  6FEF               	movwf	??_Washer_remain& (0+255),b
  7265  00523C  51EE               	movf	(Washer_remain@time+1)& (0+255),w,b
  7266  00523E  0A80               	xorlw	128
  7267  005240  59EF               	subwfb	??_Washer_remain& (0+255),w,b
  7268  005242  A0D8               	btfss	status,0,c
  7269  005244  D7CC               	goto	l779
  7270  005246                     u4330:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;main.c: 1558: }
  7274                           ;main.c: 1559: W_remain = W_counter;
  7275                           
  7276                           ; BSR set to: 0
  7277  005246  C0A7  F09F         	movff	_W_counter,_W_remain
  7278  00524A  C0A8  F0A0         	movff	_W_counter+1,_W_remain+1
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 1560: I2C_sendData(12);
  7282  00524E  0E0C               	movlw	12
  7283  005250  EC7A  F030         	call	_I2C_sendData
  7284                           
  7285                           ;main.c: 1561: if(EndOfProgram != 1){
  7286  005254  0100               	movlb	0	; () banked
  7287  005256  05BB               	decf	_EndOfProgram& (0+255),w,b
  7288  005258  B4D8               	btfsc	status,2,c
  7289  00525A  0012               	return	
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 1562: _delay((unsigned long)((100)*(32000000/4000.0)));
  7293  00525C  0E05               	movlw	5
  7294  00525E  0100               	movlb	0	; () banked
  7295  005260  6FF0               	movwf	(??_Washer_remain+1)& (0+255),b
  7296  005262  0E0F               	movlw	15
  7297  005264  6FEF               	movwf	??_Washer_remain& (0+255),b
  7298  005266  0EF1               	movlw	241
  7299  005268                     u7047:
  7300  005268  2EE8               	decfsz	wreg,f,c
  7301  00526A  D7FE               	bra	u7047
  7302  00526C  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7303  00526E  D7FC               	bra	u7047
  7304  005270  2FF0               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  7305  005272  D7FA               	bra	u7047
  7306  005274  0012               	return	
  7307  005276                     __end_of_Washer_remain:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           intcon	equ	0xFF2
  7314                           intcon3	equ	0xFF0
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _Washer_dispense *****************
  7327 ;; Defined at:
  7328 ;;		line 1349 in file "main.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  W_max           2   42[BANK0 ] int 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7342 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;Total ram usage:        4 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    9
  7349 ;; This function calls:
  7350 ;;		_I2C_sendData
  7351 ;;		_drawWasher
  7352 ;;		_lcdInst
  7353 ;;		_printf
  7354 ;; This function is called by:
  7355 ;;		_main
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text10
  7360  0054AA                     __ptext10:
  7361                           	opt stack 0
  7362  0054AA                     _Washer_dispense:
  7363                           	opt stack 21
  7364                           
  7365                           ;main.c: 1350: if (W_max == 0){
  7366                           
  7367                           ;incstack = 0
  7368  0054AA  0100               	movlb	0	; () banked
  7369  0054AC  51ED               	movf	Washer_dispense@W_max& (0+255),w,b
  7370  0054AE  11EE               	iorwf	(Washer_dispense@W_max+1)& (0+255),w,b
  7371  0054B0  B4D8               	btfsc	status,2,c
  7372  0054B2  0012               	return	
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;main.c: 1352: }
  7376                           ;main.c: 1353: drawWasher();
  7377                           
  7378                           ; BSR set to: 0
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 1351: return;
  7382  0054B4  ECF8  F014         	call	_drawWasher	;wreg free
  7383                           
  7384                           ;main.c: 1354: _delay((unsigned long)((100)*(32000000/4000.0)));
  7385  0054B8  0E05               	movlw	5
  7386  0054BA  0100               	movlb	0	; () banked
  7387  0054BC  6FF0               	movwf	(??_Washer_dispense+1)& (0+255),b
  7388  0054BE  0E0F               	movlw	15
  7389  0054C0  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7390  0054C2  0EF1               	movlw	241
  7391  0054C4                     u7057:
  7392  0054C4  2EE8               	decfsz	wreg,f,c
  7393  0054C6  D7FE               	bra	u7057
  7394  0054C8  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7395  0054CA  D7FC               	bra	u7057
  7396  0054CC  2FF0               	decfsz	(??_Washer_dispense+1)& (0+255),f,b
  7397  0054CE  D7FA               	bra	u7057
  7398                           
  7399                           ;main.c: 1355: I2C_sendData(11);
  7400  0054D0  0E0B               	movlw	11
  7401  0054D2  EC7A  F030         	call	_I2C_sendData
  7402                           
  7403                           ;main.c: 1356: W_counter = 0;
  7404  0054D6  0E00               	movlw	0
  7405  0054D8  0100               	movlb	0	; () banked
  7406  0054DA  6FA8               	movwf	(_W_counter+1)& (0+255),b
  7407  0054DC  0E00               	movlw	0
  7408  0054DE  6FA7               	movwf	_W_counter& (0+255),b
  7409                           
  7410                           ;main.c: 1357: while(NeedToCloseLid != 1 && W_counter < W_max){
  7411  0054E0  D022               	goto	l704
  7412  0054E2                     
  7413                           ; BSR set to: 0
  7414                           ;main.c: 1358: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7415                           
  7416                           ; BSR set to: 0
  7417  0054E2  0E01               	movlw	1
  7418  0054E4  ECDF  F030         	call	_lcdInst
  7419  0054E8  0E9C               	movlw	156
  7420  0054EA  0100               	movlb	0	; () banked
  7421  0054EC  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7422  0054EE  0ED7               	movlw	215
  7423  0054F0                     u7067:
  7424  0054F0  2EE8               	decfsz	wreg,f,c
  7425  0054F2  D7FE               	bra	u7067
  7426  0054F4  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7427  0054F6  D7FC               	bra	u7067
  7428                           
  7429                           ;main.c: 1359: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7430  0054F8  0E80               	movlw	128
  7431  0054FA  ECDF  F030         	call	_lcdInst
  7432  0054FE  0E34               	movlw	52
  7433  005500  0100               	movlb	0	; () banked
  7434  005502  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7435  005504  0EF1               	movlw	241
  7436  005506                     u7077:
  7437  005506  2EE8               	decfsz	wreg,f,c
  7438  005508  D7FE               	bra	u7077
  7439  00550A  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7440  00550C  D7FC               	bra	u7077
  7441  00550E  D000               	nop2	
  7442                           
  7443                           ;main.c: 1360: printf("W:%d",W_counter);
  7444  005510  0E65               	movlw	low (STR_70+15)
  7445  005512  0100               	movlb	0	; () banked
  7446  005514  6FD1               	movwf	printf@f& (0+255),b
  7447  005516  0EFD               	movlw	high (STR_70+15)
  7448  005518  6FD2               	movwf	(printf@f+1)& (0+255),b
  7449  00551A  C0A7  F0D3         	movff	_W_counter,?_printf+2
  7450  00551E  C0A8  F0D4         	movff	_W_counter+1,?_printf+3
  7451  005522  EC2A  F019         	call	_printf	;wreg free
  7452  005526                     l704:
  7453  005526  0100               	movlb	0	; () banked
  7454  005528  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  7455  00552A  B4D8               	btfsc	status,2,c
  7456  00552C  D00A               	goto	u4280
  7457                           
  7458                           ; BSR set to: 0
  7459  00552E  51ED               	movf	Washer_dispense@W_max& (0+255),w,b
  7460  005530  5DA7               	subwf	_W_counter& (0+255),w,b
  7461  005532  51A8               	movf	(_W_counter+1)& (0+255),w,b
  7462  005534  0A80               	xorlw	128
  7463  005536  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7464  005538  51EE               	movf	(Washer_dispense@W_max+1)& (0+255),w,b
  7465  00553A  0A80               	xorlw	128
  7466  00553C  59EF               	subwfb	??_Washer_dispense& (0+255),w,b
  7467  00553E  A0D8               	btfss	status,0,c
  7468  005540  D7D0               	goto	l705
  7469  005542                     u4280:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;main.c: 1361: }
  7473                           ;main.c: 1362: I2C_sendData(12);
  7474                           
  7475                           ; BSR set to: 0
  7476                           
  7477                           ; BSR set to: 0
  7478  005542  0E0C               	movlw	12
  7479  005544  EC7A  F030         	call	_I2C_sendData
  7480  005548  0012               	return	
  7481  00554A                     __end_of_Washer_dispense:
  7482                           	opt stack 0
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           intcon	equ	0xFF2
  7488                           intcon3	equ	0xFF0
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function _drawWasher *****************
  7501 ;; Defined at:
  7502 ;;		line 1623 in file "main.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  1    wreg      void 
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    8
  7523 ;; This function calls:
  7524 ;;		_I2C_Master_Init
  7525 ;;		_glcdDrawRectangle
  7526 ;;		_spiInit
  7527 ;; This function is called by:
  7528 ;;		_Washer_dispense
  7529 ;;		_Washer_remain
  7530 ;;		_nut_washer_remain
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text11
  7535  0029F0                     __ptext11:
  7536                           	opt stack 0
  7537  0029F0                     _drawWasher:
  7538                           	opt stack 21
  7539                           
  7540                           ;main.c: 1624: spiInit(4);
  7541                           
  7542                           ;incstack = 0
  7543  0029F0  0E04               	movlw	4
  7544  0029F2  ECF1  F02F         	call	_spiInit
  7545                           
  7546                           ;main.c: 1625: _delay((unsigned long)((20)*(32000000/4000.0)));
  7547  0029F6  0ED0               	movlw	208
  7548  0029F8  0100               	movlb	0	; () banked
  7549  0029FA  6FE4               	movwf	??_drawWasher& (0+255),b
  7550  0029FC  0EC9               	movlw	201
  7551  0029FE                     u7087:
  7552  0029FE  2EE8               	decfsz	wreg,f,c
  7553  002A00  D7FE               	bra	u7087
  7554  002A02  2FE4               	decfsz	??_drawWasher& (0+255),f,b
  7555  002A04  D7FC               	bra	u7087
  7556  002A06  D000               	nop2	
  7557                           
  7558                           ;main.c: 1626: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  7559  002A08  0EE9               	movlw	low _GLCD_SIZE_HORZ
  7560  002A0A  6EF6               	movwf	tblptrl,c
  7561  002A0C                     	if	1	;There is more than 1 active tblptr byte
  7562  002A0C  0EFC               	movlw	high _GLCD_SIZE_HORZ
  7563  002A0E  6EF7               	movwf	tblptrh,c
  7564  002A10                     	endif
  7565  002A10                     	if	1	;There are 3 active tblptr bytes
  7566  002A10  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  7567  002A12  6EF8               	movwf	tblptru,c
  7568  002A14                     	endif
  7569  002A14  0008               	tblrd		*
  7570  002A16  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  7571  002A1A  0E00               	movlw	0
  7572  002A1C  0100               	movlb	0	; () banked
  7573  002A1E  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7574  002A20  0EE8               	movlw	low _GLCD_SIZE_VERT
  7575  002A22  6EF6               	movwf	tblptrl,c
  7576  002A24                     	if	1	;There is more than 1 active tblptr byte
  7577  002A24  0EFC               	movlw	high _GLCD_SIZE_VERT
  7578  002A26  6EF7               	movwf	tblptrh,c
  7579  002A28                     	endif
  7580  002A28                     	if	1	;There are 3 active tblptr bytes
  7581  002A28  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  7582  002A2A  6EF8               	movwf	tblptru,c
  7583  002A2C                     	endif
  7584  002A2C  0008               	tblrd		*
  7585  002A2E  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  7586  002A32  0EA1               	movlw	low _BLACK
  7587  002A34  6EF6               	movwf	tblptrl,c
  7588  002A36                     	if	1	;There is more than 1 active tblptr byte
  7589  002A36  0EFC               	movlw	high _BLACK
  7590  002A38  6EF7               	movwf	tblptrh,c
  7591  002A3A                     	endif
  7592  002A3A                     	if	1	;There are 3 active tblptr bytes
  7593  002A3A  0E00               	movlw	low (_BLACK shr (0+16))
  7594  002A3C  6EF8               	movwf	tblptru,c
  7595  002A3E                     	endif
  7596  002A3E  0009               	tblrd		*+
  7597  002A40  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7598  002A44  0009               	tblrd		*+
  7599  002A46  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7600  002A4A  0009               	tblrd		*+
  7601  002A4C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7602  002A50  000A               	tblrd		*-
  7603  002A52  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7604  002A56  0E00               	movlw	0
  7605  002A58  ECA8  F026         	call	_glcdDrawRectangle
  7606                           
  7607                           ;main.c: 1629: glcdDrawRectangle(5*4,6*4, 13*4, 20*4, WHITE);
  7608  002A5C  0E18               	movlw	24
  7609  002A5E  0100               	movlb	0	; () banked
  7610  002A60  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7611  002A62  0E34               	movlw	52
  7612  002A64  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7613  002A66  0E50               	movlw	80
  7614  002A68  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7615  002A6A  0E99               	movlw	low _WHITE
  7616  002A6C  6EF6               	movwf	tblptrl,c
  7617  002A6E                     	if	1	;There is more than 1 active tblptr byte
  7618  002A6E  0EFC               	movlw	high _WHITE
  7619  002A70  6EF7               	movwf	tblptrh,c
  7620  002A72                     	endif
  7621  002A72                     	if	1	;There are 3 active tblptr bytes
  7622  002A72  0E00               	movlw	low (_WHITE shr (0+16))
  7623  002A74  6EF8               	movwf	tblptru,c
  7624  002A76                     	endif
  7625  002A76  0009               	tblrd		*+
  7626  002A78  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7627  002A7C  0009               	tblrd		*+
  7628  002A7E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7629  002A82  0009               	tblrd		*+
  7630  002A84  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7631  002A88  000A               	tblrd		*-
  7632  002A8A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7633  002A8E  0E14               	movlw	20
  7634  002A90  ECA8  F026         	call	_glcdDrawRectangle
  7635                           
  7636                           ;main.c: 1630: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
  7637  002A94  0E1C               	movlw	28
  7638  002A96  0100               	movlb	0	; () banked
  7639  002A98  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7640  002A9A  0E2C               	movlw	44
  7641  002A9C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7642  002A9E  0E34               	movlw	52
  7643  002AA0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7644  002AA2  0E99               	movlw	low _WHITE
  7645  002AA4  6EF6               	movwf	tblptrl,c
  7646  002AA6                     	if	1	;There is more than 1 active tblptr byte
  7647  002AA6  0EFC               	movlw	high _WHITE
  7648  002AA8  6EF7               	movwf	tblptrh,c
  7649  002AAA                     	endif
  7650  002AAA                     	if	1	;There are 3 active tblptr bytes
  7651  002AAA  0E00               	movlw	low (_WHITE shr (0+16))
  7652  002AAC  6EF8               	movwf	tblptru,c
  7653  002AAE                     	endif
  7654  002AAE  0009               	tblrd		*+
  7655  002AB0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7656  002AB4  0009               	tblrd		*+
  7657  002AB6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7658  002ABA  0009               	tblrd		*+
  7659  002ABC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7660  002AC0  000A               	tblrd		*-
  7661  002AC2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7662  002AC6  0E18               	movlw	24
  7663  002AC8  ECA8  F026         	call	_glcdDrawRectangle
  7664                           
  7665                           ;main.c: 1631: glcdDrawRectangle(7*4,8*4, 9*4, 11*4, WHITE);
  7666  002ACC  0E20               	movlw	32
  7667  002ACE  0100               	movlb	0	; () banked
  7668  002AD0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7669  002AD2  0E24               	movlw	36
  7670  002AD4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7671  002AD6  0E2C               	movlw	44
  7672  002AD8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7673  002ADA  0E99               	movlw	low _WHITE
  7674  002ADC  6EF6               	movwf	tblptrl,c
  7675  002ADE                     	if	1	;There is more than 1 active tblptr byte
  7676  002ADE  0EFC               	movlw	high _WHITE
  7677  002AE0  6EF7               	movwf	tblptrh,c
  7678  002AE2                     	endif
  7679  002AE2                     	if	1	;There are 3 active tblptr bytes
  7680  002AE2  0E00               	movlw	low (_WHITE shr (0+16))
  7681  002AE4  6EF8               	movwf	tblptru,c
  7682  002AE6                     	endif
  7683  002AE6  0009               	tblrd		*+
  7684  002AE8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7685  002AEC  0009               	tblrd		*+
  7686  002AEE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7687  002AF2  0009               	tblrd		*+
  7688  002AF4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7689  002AF8  000A               	tblrd		*-
  7690  002AFA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7691  002AFE  0E1C               	movlw	28
  7692  002B00  ECA8  F026         	call	_glcdDrawRectangle
  7693                           
  7694                           ;main.c: 1633: glcdDrawRectangle(8*4,9*4, 8*4, 9*4, WHITE);
  7695  002B04  0E24               	movlw	36
  7696  002B06  0100               	movlb	0	; () banked
  7697  002B08  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7698  002B0A  0E20               	movlw	32
  7699  002B0C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7700  002B0E  0E24               	movlw	36
  7701  002B10  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7702  002B12  0E99               	movlw	low _WHITE
  7703  002B14  6EF6               	movwf	tblptrl,c
  7704  002B16                     	if	1	;There is more than 1 active tblptr byte
  7705  002B16  0EFC               	movlw	high _WHITE
  7706  002B18  6EF7               	movwf	tblptrh,c
  7707  002B1A                     	endif
  7708  002B1A                     	if	1	;There are 3 active tblptr bytes
  7709  002B1A  0E00               	movlw	low (_WHITE shr (0+16))
  7710  002B1C  6EF8               	movwf	tblptru,c
  7711  002B1E                     	endif
  7712  002B1E  0009               	tblrd		*+
  7713  002B20  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7714  002B24  0009               	tblrd		*+
  7715  002B26  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7716  002B2A  0009               	tblrd		*+
  7717  002B2C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7718  002B30  000A               	tblrd		*-
  7719  002B32  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7720  002B36  0E20               	movlw	32
  7721  002B38  ECA8  F026         	call	_glcdDrawRectangle
  7722                           
  7723                           ;main.c: 1634: glcdDrawRectangle(9*4,11*4, 7*4, 8*4, WHITE);
  7724  002B3C  0E2C               	movlw	44
  7725  002B3E  0100               	movlb	0	; () banked
  7726  002B40  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7727  002B42  0E1C               	movlw	28
  7728  002B44  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7729  002B46  0E20               	movlw	32
  7730  002B48  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7731  002B4A  0E99               	movlw	low _WHITE
  7732  002B4C  6EF6               	movwf	tblptrl,c
  7733  002B4E                     	if	1	;There is more than 1 active tblptr byte
  7734  002B4E  0EFC               	movlw	high _WHITE
  7735  002B50  6EF7               	movwf	tblptrh,c
  7736  002B52                     	endif
  7737  002B52                     	if	1	;There are 3 active tblptr bytes
  7738  002B52  0E00               	movlw	low (_WHITE shr (0+16))
  7739  002B54  6EF8               	movwf	tblptru,c
  7740  002B56                     	endif
  7741  002B56  0009               	tblrd		*+
  7742  002B58  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7743  002B5C  0009               	tblrd		*+
  7744  002B5E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7745  002B62  0009               	tblrd		*+
  7746  002B64  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7747  002B68  000A               	tblrd		*-
  7748  002B6A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7749  002B6E  0E24               	movlw	36
  7750  002B70  ECA8  F026         	call	_glcdDrawRectangle
  7751                           
  7752                           ;main.c: 1635: glcdDrawRectangle(11*4,13*4, 6*4, 7*4, WHITE);
  7753  002B74  0E34               	movlw	52
  7754  002B76  0100               	movlb	0	; () banked
  7755  002B78  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7756  002B7A  0E18               	movlw	24
  7757  002B7C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7758  002B7E  0E1C               	movlw	28
  7759  002B80  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7760  002B82  0E99               	movlw	low _WHITE
  7761  002B84  6EF6               	movwf	tblptrl,c
  7762  002B86                     	if	1	;There is more than 1 active tblptr byte
  7763  002B86  0EFC               	movlw	high _WHITE
  7764  002B88  6EF7               	movwf	tblptrh,c
  7765  002B8A                     	endif
  7766  002B8A                     	if	1	;There are 3 active tblptr bytes
  7767  002B8A  0E00               	movlw	low (_WHITE shr (0+16))
  7768  002B8C  6EF8               	movwf	tblptru,c
  7769  002B8E                     	endif
  7770  002B8E  0009               	tblrd		*+
  7771  002B90  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7772  002B94  0009               	tblrd		*+
  7773  002B96  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7774  002B9A  0009               	tblrd		*+
  7775  002B9C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7776  002BA0  000A               	tblrd		*-
  7777  002BA2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7778  002BA6  0E2C               	movlw	44
  7779  002BA8  ECA8  F026         	call	_glcdDrawRectangle
  7780                           
  7781                           ;main.c: 1637: glcdDrawRectangle(13*4,20*4, 5*4, 6*4, WHITE);
  7782  002BAC  0E50               	movlw	80
  7783  002BAE  0100               	movlb	0	; () banked
  7784  002BB0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7785  002BB2  0E14               	movlw	20
  7786  002BB4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7787  002BB6  0E18               	movlw	24
  7788  002BB8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7789  002BBA  0E99               	movlw	low _WHITE
  7790  002BBC  6EF6               	movwf	tblptrl,c
  7791  002BBE                     	if	1	;There is more than 1 active tblptr byte
  7792  002BBE  0EFC               	movlw	high _WHITE
  7793  002BC0  6EF7               	movwf	tblptrh,c
  7794  002BC2                     	endif
  7795  002BC2                     	if	1	;There are 3 active tblptr bytes
  7796  002BC2  0E00               	movlw	low (_WHITE shr (0+16))
  7797  002BC4  6EF8               	movwf	tblptru,c
  7798  002BC6                     	endif
  7799  002BC6  0009               	tblrd		*+
  7800  002BC8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7801  002BCC  0009               	tblrd		*+
  7802  002BCE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7803  002BD2  0009               	tblrd		*+
  7804  002BD4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7805  002BD8  000A               	tblrd		*-
  7806  002BDA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7807  002BDE  0E34               	movlw	52
  7808  002BE0  ECA8  F026         	call	_glcdDrawRectangle
  7809                           
  7810                           ;main.c: 1638: glcdDrawRectangle(20*4,22*4, 6*4, 7*4, WHITE);
  7811  002BE4  0E58               	movlw	88
  7812  002BE6  0100               	movlb	0	; () banked
  7813  002BE8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7814  002BEA  0E18               	movlw	24
  7815  002BEC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7816  002BEE  0E1C               	movlw	28
  7817  002BF0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7818  002BF2  0E99               	movlw	low _WHITE
  7819  002BF4  6EF6               	movwf	tblptrl,c
  7820  002BF6                     	if	1	;There is more than 1 active tblptr byte
  7821  002BF6  0EFC               	movlw	high _WHITE
  7822  002BF8  6EF7               	movwf	tblptrh,c
  7823  002BFA                     	endif
  7824  002BFA                     	if	1	;There are 3 active tblptr bytes
  7825  002BFA  0E00               	movlw	low (_WHITE shr (0+16))
  7826  002BFC  6EF8               	movwf	tblptru,c
  7827  002BFE                     	endif
  7828  002BFE  0009               	tblrd		*+
  7829  002C00  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7830  002C04  0009               	tblrd		*+
  7831  002C06  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7832  002C0A  0009               	tblrd		*+
  7833  002C0C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7834  002C10  000A               	tblrd		*-
  7835  002C12  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7836  002C16  0E50               	movlw	80
  7837  002C18  ECA8  F026         	call	_glcdDrawRectangle
  7838                           
  7839                           ;main.c: 1639: glcdDrawRectangle(22*4,24*4, 7*4, 8*4, WHITE);
  7840  002C1C  0E60               	movlw	96
  7841  002C1E  0100               	movlb	0	; () banked
  7842  002C20  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7843  002C22  0E1C               	movlw	28
  7844  002C24  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7845  002C26  0E20               	movlw	32
  7846  002C28  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7847  002C2A  0E99               	movlw	low _WHITE
  7848  002C2C  6EF6               	movwf	tblptrl,c
  7849  002C2E                     	if	1	;There is more than 1 active tblptr byte
  7850  002C2E  0EFC               	movlw	high _WHITE
  7851  002C30  6EF7               	movwf	tblptrh,c
  7852  002C32                     	endif
  7853  002C32                     	if	1	;There are 3 active tblptr bytes
  7854  002C32  0E00               	movlw	low (_WHITE shr (0+16))
  7855  002C34  6EF8               	movwf	tblptru,c
  7856  002C36                     	endif
  7857  002C36  0009               	tblrd		*+
  7858  002C38  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7859  002C3C  0009               	tblrd		*+
  7860  002C3E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7861  002C42  0009               	tblrd		*+
  7862  002C44  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7863  002C48  000A               	tblrd		*-
  7864  002C4A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7865  002C4E  0E58               	movlw	88
  7866  002C50  ECA8  F026         	call	_glcdDrawRectangle
  7867                           
  7868                           ;main.c: 1641: glcdDrawRectangle(24*4,25*4, 8*4, 9*4, WHITE);
  7869  002C54  0E64               	movlw	100
  7870  002C56  0100               	movlb	0	; () banked
  7871  002C58  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7872  002C5A  0E20               	movlw	32
  7873  002C5C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7874  002C5E  0E24               	movlw	36
  7875  002C60  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7876  002C62  0E99               	movlw	low _WHITE
  7877  002C64  6EF6               	movwf	tblptrl,c
  7878  002C66                     	if	1	;There is more than 1 active tblptr byte
  7879  002C66  0EFC               	movlw	high _WHITE
  7880  002C68  6EF7               	movwf	tblptrh,c
  7881  002C6A                     	endif
  7882  002C6A                     	if	1	;There are 3 active tblptr bytes
  7883  002C6A  0E00               	movlw	low (_WHITE shr (0+16))
  7884  002C6C  6EF8               	movwf	tblptru,c
  7885  002C6E                     	endif
  7886  002C6E  0009               	tblrd		*+
  7887  002C70  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7888  002C74  0009               	tblrd		*+
  7889  002C76  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7890  002C7A  0009               	tblrd		*+
  7891  002C7C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7892  002C80  000A               	tblrd		*-
  7893  002C82  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7894  002C86  0E60               	movlw	96
  7895  002C88  ECA8  F026         	call	_glcdDrawRectangle
  7896                           
  7897                           ;main.c: 1643: glcdDrawRectangle(25*4,26*4, 9*4, 11*4, WHITE);
  7898  002C8C  0E68               	movlw	104
  7899  002C8E  0100               	movlb	0	; () banked
  7900  002C90  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7901  002C92  0E24               	movlw	36
  7902  002C94  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7903  002C96  0E2C               	movlw	44
  7904  002C98  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7905  002C9A  0E99               	movlw	low _WHITE
  7906  002C9C  6EF6               	movwf	tblptrl,c
  7907  002C9E                     	if	1	;There is more than 1 active tblptr byte
  7908  002C9E  0EFC               	movlw	high _WHITE
  7909  002CA0  6EF7               	movwf	tblptrh,c
  7910  002CA2                     	endif
  7911  002CA2                     	if	1	;There are 3 active tblptr bytes
  7912  002CA2  0E00               	movlw	low (_WHITE shr (0+16))
  7913  002CA4  6EF8               	movwf	tblptru,c
  7914  002CA6                     	endif
  7915  002CA6  0009               	tblrd		*+
  7916  002CA8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7917  002CAC  0009               	tblrd		*+
  7918  002CAE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7919  002CB2  0009               	tblrd		*+
  7920  002CB4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7921  002CB8  000A               	tblrd		*-
  7922  002CBA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7923  002CBE  0E64               	movlw	100
  7924  002CC0  ECA8  F026         	call	_glcdDrawRectangle
  7925                           
  7926                           ;main.c: 1644: glcdDrawRectangle(26*4,27*4, 11*4, 13*4, WHITE);
  7927  002CC4  0E6C               	movlw	108
  7928  002CC6  0100               	movlb	0	; () banked
  7929  002CC8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7930  002CCA  0E2C               	movlw	44
  7931  002CCC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7932  002CCE  0E34               	movlw	52
  7933  002CD0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7934  002CD2  0E99               	movlw	low _WHITE
  7935  002CD4  6EF6               	movwf	tblptrl,c
  7936  002CD6                     	if	1	;There is more than 1 active tblptr byte
  7937  002CD6  0EFC               	movlw	high _WHITE
  7938  002CD8  6EF7               	movwf	tblptrh,c
  7939  002CDA                     	endif
  7940  002CDA                     	if	1	;There are 3 active tblptr bytes
  7941  002CDA  0E00               	movlw	low (_WHITE shr (0+16))
  7942  002CDC  6EF8               	movwf	tblptru,c
  7943  002CDE                     	endif
  7944  002CDE  0009               	tblrd		*+
  7945  002CE0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7946  002CE4  0009               	tblrd		*+
  7947  002CE6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7948  002CEA  0009               	tblrd		*+
  7949  002CEC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7950  002CF0  000A               	tblrd		*-
  7951  002CF2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7952  002CF6  0E68               	movlw	104
  7953  002CF8  ECA8  F026         	call	_glcdDrawRectangle
  7954                           
  7955                           ;main.c: 1645: glcdDrawRectangle(27*4,28*4, 13*4, 20*4, WHITE);
  7956  002CFC  0E70               	movlw	112
  7957  002CFE  0100               	movlb	0	; () banked
  7958  002D00  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7959  002D02  0E34               	movlw	52
  7960  002D04  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7961  002D06  0E50               	movlw	80
  7962  002D08  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7963  002D0A  0E99               	movlw	low _WHITE
  7964  002D0C  6EF6               	movwf	tblptrl,c
  7965  002D0E                     	if	1	;There is more than 1 active tblptr byte
  7966  002D0E  0EFC               	movlw	high _WHITE
  7967  002D10  6EF7               	movwf	tblptrh,c
  7968  002D12                     	endif
  7969  002D12                     	if	1	;There are 3 active tblptr bytes
  7970  002D12  0E00               	movlw	low (_WHITE shr (0+16))
  7971  002D14  6EF8               	movwf	tblptru,c
  7972  002D16                     	endif
  7973  002D16  0009               	tblrd		*+
  7974  002D18  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7975  002D1C  0009               	tblrd		*+
  7976  002D1E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7977  002D22  0009               	tblrd		*+
  7978  002D24  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7979  002D28  000A               	tblrd		*-
  7980  002D2A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7981  002D2E  0E6C               	movlw	108
  7982  002D30  ECA8  F026         	call	_glcdDrawRectangle
  7983                           
  7984                           ;main.c: 1647: glcdDrawRectangle(26*4,27*4, 20*4, 22*4, WHITE);
  7985  002D34  0E6C               	movlw	108
  7986  002D36  0100               	movlb	0	; () banked
  7987  002D38  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7988  002D3A  0E50               	movlw	80
  7989  002D3C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7990  002D3E  0E58               	movlw	88
  7991  002D40  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7992  002D42  0E99               	movlw	low _WHITE
  7993  002D44  6EF6               	movwf	tblptrl,c
  7994  002D46                     	if	1	;There is more than 1 active tblptr byte
  7995  002D46  0EFC               	movlw	high _WHITE
  7996  002D48  6EF7               	movwf	tblptrh,c
  7997  002D4A                     	endif
  7998  002D4A                     	if	1	;There are 3 active tblptr bytes
  7999  002D4A  0E00               	movlw	low (_WHITE shr (0+16))
  8000  002D4C  6EF8               	movwf	tblptru,c
  8001  002D4E                     	endif
  8002  002D4E  0009               	tblrd		*+
  8003  002D50  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8004  002D54  0009               	tblrd		*+
  8005  002D56  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8006  002D5A  0009               	tblrd		*+
  8007  002D5C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8008  002D60  000A               	tblrd		*-
  8009  002D62  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8010  002D66  0E68               	movlw	104
  8011  002D68  ECA8  F026         	call	_glcdDrawRectangle
  8012                           
  8013                           ;main.c: 1648: glcdDrawRectangle(27*4,28*4, 22*4, 24*4, WHITE);
  8014  002D6C  0E70               	movlw	112
  8015  002D6E  0100               	movlb	0	; () banked
  8016  002D70  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8017  002D72  0E58               	movlw	88
  8018  002D74  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8019  002D76  0E60               	movlw	96
  8020  002D78  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8021  002D7A  0E99               	movlw	low _WHITE
  8022  002D7C  6EF6               	movwf	tblptrl,c
  8023  002D7E                     	if	1	;There is more than 1 active tblptr byte
  8024  002D7E  0EFC               	movlw	high _WHITE
  8025  002D80  6EF7               	movwf	tblptrh,c
  8026  002D82                     	endif
  8027  002D82                     	if	1	;There are 3 active tblptr bytes
  8028  002D82  0E00               	movlw	low (_WHITE shr (0+16))
  8029  002D84  6EF8               	movwf	tblptru,c
  8030  002D86                     	endif
  8031  002D86  0009               	tblrd		*+
  8032  002D88  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8033  002D8C  0009               	tblrd		*+
  8034  002D8E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8035  002D92  0009               	tblrd		*+
  8036  002D94  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8037  002D98  000A               	tblrd		*-
  8038  002D9A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8039  002D9E  0E6C               	movlw	108
  8040  002DA0  ECA8  F026         	call	_glcdDrawRectangle
  8041                           
  8042                           ;main.c: 1649: glcdDrawRectangle(26*4,27*4, 20*4, 22*4, WHITE);
  8043  002DA4  0E6C               	movlw	108
  8044  002DA6  0100               	movlb	0	; () banked
  8045  002DA8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8046  002DAA  0E50               	movlw	80
  8047  002DAC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8048  002DAE  0E58               	movlw	88
  8049  002DB0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8050  002DB2  0E99               	movlw	low _WHITE
  8051  002DB4  6EF6               	movwf	tblptrl,c
  8052  002DB6                     	if	1	;There is more than 1 active tblptr byte
  8053  002DB6  0EFC               	movlw	high _WHITE
  8054  002DB8  6EF7               	movwf	tblptrh,c
  8055  002DBA                     	endif
  8056  002DBA                     	if	1	;There are 3 active tblptr bytes
  8057  002DBA  0E00               	movlw	low (_WHITE shr (0+16))
  8058  002DBC  6EF8               	movwf	tblptru,c
  8059  002DBE                     	endif
  8060  002DBE  0009               	tblrd		*+
  8061  002DC0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8062  002DC4  0009               	tblrd		*+
  8063  002DC6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8064  002DCA  0009               	tblrd		*+
  8065  002DCC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8066  002DD0  000A               	tblrd		*-
  8067  002DD2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8068  002DD6  0E68               	movlw	104
  8069  002DD8  ECA8  F026         	call	_glcdDrawRectangle
  8070                           
  8071                           ;main.c: 1651: glcdDrawRectangle(25*4,26*4, 22*4, 24*4, WHITE);
  8072  002DDC  0E68               	movlw	104
  8073  002DDE  0100               	movlb	0	; () banked
  8074  002DE0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8075  002DE2  0E58               	movlw	88
  8076  002DE4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8077  002DE6  0E60               	movlw	96
  8078  002DE8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8079  002DEA  0E99               	movlw	low _WHITE
  8080  002DEC  6EF6               	movwf	tblptrl,c
  8081  002DEE                     	if	1	;There is more than 1 active tblptr byte
  8082  002DEE  0EFC               	movlw	high _WHITE
  8083  002DF0  6EF7               	movwf	tblptrh,c
  8084  002DF2                     	endif
  8085  002DF2                     	if	1	;There are 3 active tblptr bytes
  8086  002DF2  0E00               	movlw	low (_WHITE shr (0+16))
  8087  002DF4  6EF8               	movwf	tblptru,c
  8088  002DF6                     	endif
  8089  002DF6  0009               	tblrd		*+
  8090  002DF8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8091  002DFC  0009               	tblrd		*+
  8092  002DFE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8093  002E02  0009               	tblrd		*+
  8094  002E04  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8095  002E08  000A               	tblrd		*-
  8096  002E0A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8097  002E0E  0E64               	movlw	100
  8098  002E10  ECA8  F026         	call	_glcdDrawRectangle
  8099                           
  8100                           ;main.c: 1652: glcdDrawRectangle(24*4,25*4, 24*4, 25*4, WHITE);
  8101  002E14  0E64               	movlw	100
  8102  002E16  0100               	movlb	0	; () banked
  8103  002E18  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8104  002E1A  0E60               	movlw	96
  8105  002E1C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8106  002E1E  0E64               	movlw	100
  8107  002E20  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8108  002E22  0E99               	movlw	low _WHITE
  8109  002E24  6EF6               	movwf	tblptrl,c
  8110  002E26                     	if	1	;There is more than 1 active tblptr byte
  8111  002E26  0EFC               	movlw	high _WHITE
  8112  002E28  6EF7               	movwf	tblptrh,c
  8113  002E2A                     	endif
  8114  002E2A                     	if	1	;There are 3 active tblptr bytes
  8115  002E2A  0E00               	movlw	low (_WHITE shr (0+16))
  8116  002E2C  6EF8               	movwf	tblptru,c
  8117  002E2E                     	endif
  8118  002E2E  0009               	tblrd		*+
  8119  002E30  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8120  002E34  0009               	tblrd		*+
  8121  002E36  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8122  002E3A  0009               	tblrd		*+
  8123  002E3C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8124  002E40  000A               	tblrd		*-
  8125  002E42  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8126  002E46  0E60               	movlw	96
  8127  002E48  ECA8  F026         	call	_glcdDrawRectangle
  8128                           
  8129                           ;main.c: 1653: glcdDrawRectangle(22*4,24*4, 25*4, 26*4, WHITE);
  8130  002E4C  0E60               	movlw	96
  8131  002E4E  0100               	movlb	0	; () banked
  8132  002E50  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8133  002E52  0E64               	movlw	100
  8134  002E54  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8135  002E56  0E68               	movlw	104
  8136  002E58  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8137  002E5A  0E99               	movlw	low _WHITE
  8138  002E5C  6EF6               	movwf	tblptrl,c
  8139  002E5E                     	if	1	;There is more than 1 active tblptr byte
  8140  002E5E  0EFC               	movlw	high _WHITE
  8141  002E60  6EF7               	movwf	tblptrh,c
  8142  002E62                     	endif
  8143  002E62                     	if	1	;There are 3 active tblptr bytes
  8144  002E62  0E00               	movlw	low (_WHITE shr (0+16))
  8145  002E64  6EF8               	movwf	tblptru,c
  8146  002E66                     	endif
  8147  002E66  0009               	tblrd		*+
  8148  002E68  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8149  002E6C  0009               	tblrd		*+
  8150  002E6E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8151  002E72  0009               	tblrd		*+
  8152  002E74  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8153  002E78  000A               	tblrd		*-
  8154  002E7A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8155  002E7E  0E58               	movlw	88
  8156  002E80  ECA8  F026         	call	_glcdDrawRectangle
  8157                           
  8158                           ;main.c: 1655: glcdDrawRectangle(20*4,22*4, 26*4, 27*4, WHITE);
  8159  002E84  0E58               	movlw	88
  8160  002E86  0100               	movlb	0	; () banked
  8161  002E88  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8162  002E8A  0E68               	movlw	104
  8163  002E8C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8164  002E8E  0E6C               	movlw	108
  8165  002E90  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8166  002E92  0E99               	movlw	low _WHITE
  8167  002E94  6EF6               	movwf	tblptrl,c
  8168  002E96                     	if	1	;There is more than 1 active tblptr byte
  8169  002E96  0EFC               	movlw	high _WHITE
  8170  002E98  6EF7               	movwf	tblptrh,c
  8171  002E9A                     	endif
  8172  002E9A                     	if	1	;There are 3 active tblptr bytes
  8173  002E9A  0E00               	movlw	low (_WHITE shr (0+16))
  8174  002E9C  6EF8               	movwf	tblptru,c
  8175  002E9E                     	endif
  8176  002E9E  0009               	tblrd		*+
  8177  002EA0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8178  002EA4  0009               	tblrd		*+
  8179  002EA6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8180  002EAA  0009               	tblrd		*+
  8181  002EAC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8182  002EB0  000A               	tblrd		*-
  8183  002EB2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8184  002EB6  0E50               	movlw	80
  8185  002EB8  ECA8  F026         	call	_glcdDrawRectangle
  8186                           
  8187                           ;main.c: 1656: glcdDrawRectangle(13*4,20*4, 27*4, 28*4, WHITE);
  8188  002EBC  0E50               	movlw	80
  8189  002EBE  0100               	movlb	0	; () banked
  8190  002EC0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8191  002EC2  0E6C               	movlw	108
  8192  002EC4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8193  002EC6  0E70               	movlw	112
  8194  002EC8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8195  002ECA  0E99               	movlw	low _WHITE
  8196  002ECC  6EF6               	movwf	tblptrl,c
  8197  002ECE                     	if	1	;There is more than 1 active tblptr byte
  8198  002ECE  0EFC               	movlw	high _WHITE
  8199  002ED0  6EF7               	movwf	tblptrh,c
  8200  002ED2                     	endif
  8201  002ED2                     	if	1	;There are 3 active tblptr bytes
  8202  002ED2  0E00               	movlw	low (_WHITE shr (0+16))
  8203  002ED4  6EF8               	movwf	tblptru,c
  8204  002ED6                     	endif
  8205  002ED6  0009               	tblrd		*+
  8206  002ED8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8207  002EDC  0009               	tblrd		*+
  8208  002EDE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8209  002EE2  0009               	tblrd		*+
  8210  002EE4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8211  002EE8  000A               	tblrd		*-
  8212  002EEA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8213  002EEE  0E34               	movlw	52
  8214  002EF0  ECA8  F026         	call	_glcdDrawRectangle
  8215                           
  8216                           ;main.c: 1657: glcdDrawRectangle(11*4,13*4, 26*4, 27*4, WHITE);
  8217  002EF4  0E34               	movlw	52
  8218  002EF6  0100               	movlb	0	; () banked
  8219  002EF8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8220  002EFA  0E68               	movlw	104
  8221  002EFC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8222  002EFE  0E6C               	movlw	108
  8223  002F00  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8224  002F02  0E99               	movlw	low _WHITE
  8225  002F04  6EF6               	movwf	tblptrl,c
  8226  002F06                     	if	1	;There is more than 1 active tblptr byte
  8227  002F06  0EFC               	movlw	high _WHITE
  8228  002F08  6EF7               	movwf	tblptrh,c
  8229  002F0A                     	endif
  8230  002F0A                     	if	1	;There are 3 active tblptr bytes
  8231  002F0A  0E00               	movlw	low (_WHITE shr (0+16))
  8232  002F0C  6EF8               	movwf	tblptru,c
  8233  002F0E                     	endif
  8234  002F0E  0009               	tblrd		*+
  8235  002F10  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8236  002F14  0009               	tblrd		*+
  8237  002F16  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8238  002F1A  0009               	tblrd		*+
  8239  002F1C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8240  002F20  000A               	tblrd		*-
  8241  002F22  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8242  002F26  0E2C               	movlw	44
  8243  002F28  ECA8  F026         	call	_glcdDrawRectangle
  8244                           
  8245                           ;main.c: 1659: glcdDrawRectangle(9*4,11*4, 25*4, 26*4, WHITE);
  8246  002F2C  0E2C               	movlw	44
  8247  002F2E  0100               	movlb	0	; () banked
  8248  002F30  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8249  002F32  0E64               	movlw	100
  8250  002F34  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8251  002F36  0E68               	movlw	104
  8252  002F38  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8253  002F3A  0E99               	movlw	low _WHITE
  8254  002F3C  6EF6               	movwf	tblptrl,c
  8255  002F3E                     	if	1	;There is more than 1 active tblptr byte
  8256  002F3E  0EFC               	movlw	high _WHITE
  8257  002F40  6EF7               	movwf	tblptrh,c
  8258  002F42                     	endif
  8259  002F42                     	if	1	;There are 3 active tblptr bytes
  8260  002F42  0E00               	movlw	low (_WHITE shr (0+16))
  8261  002F44  6EF8               	movwf	tblptru,c
  8262  002F46                     	endif
  8263  002F46  0009               	tblrd		*+
  8264  002F48  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8265  002F4C  0009               	tblrd		*+
  8266  002F4E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8267  002F52  0009               	tblrd		*+
  8268  002F54  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8269  002F58  000A               	tblrd		*-
  8270  002F5A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8271  002F5E  0E24               	movlw	36
  8272  002F60  ECA8  F026         	call	_glcdDrawRectangle
  8273                           
  8274                           ;main.c: 1660: glcdDrawRectangle(8*4,9*4, 24*4, 25*4, WHITE);
  8275  002F64  0E24               	movlw	36
  8276  002F66  0100               	movlb	0	; () banked
  8277  002F68  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8278  002F6A  0E60               	movlw	96
  8279  002F6C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8280  002F6E  0E64               	movlw	100
  8281  002F70  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8282  002F72  0E99               	movlw	low _WHITE
  8283  002F74  6EF6               	movwf	tblptrl,c
  8284  002F76                     	if	1	;There is more than 1 active tblptr byte
  8285  002F76  0EFC               	movlw	high _WHITE
  8286  002F78  6EF7               	movwf	tblptrh,c
  8287  002F7A                     	endif
  8288  002F7A                     	if	1	;There are 3 active tblptr bytes
  8289  002F7A  0E00               	movlw	low (_WHITE shr (0+16))
  8290  002F7C  6EF8               	movwf	tblptru,c
  8291  002F7E                     	endif
  8292  002F7E  0009               	tblrd		*+
  8293  002F80  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8294  002F84  0009               	tblrd		*+
  8295  002F86  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8296  002F8A  0009               	tblrd		*+
  8297  002F8C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8298  002F90  000A               	tblrd		*-
  8299  002F92  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8300  002F96  0E20               	movlw	32
  8301  002F98  ECA8  F026         	call	_glcdDrawRectangle
  8302                           
  8303                           ;main.c: 1661: glcdDrawRectangle(7*4,8*4, 22*4, 24*4, WHITE);
  8304  002F9C  0E20               	movlw	32
  8305  002F9E  0100               	movlb	0	; () banked
  8306  002FA0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8307  002FA2  0E58               	movlw	88
  8308  002FA4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8309  002FA6  0E60               	movlw	96
  8310  002FA8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8311  002FAA  0E99               	movlw	low _WHITE
  8312  002FAC  6EF6               	movwf	tblptrl,c
  8313  002FAE                     	if	1	;There is more than 1 active tblptr byte
  8314  002FAE  0EFC               	movlw	high _WHITE
  8315  002FB0  6EF7               	movwf	tblptrh,c
  8316  002FB2                     	endif
  8317  002FB2                     	if	1	;There are 3 active tblptr bytes
  8318  002FB2  0E00               	movlw	low (_WHITE shr (0+16))
  8319  002FB4  6EF8               	movwf	tblptru,c
  8320  002FB6                     	endif
  8321  002FB6  0009               	tblrd		*+
  8322  002FB8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8323  002FBC  0009               	tblrd		*+
  8324  002FBE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8325  002FC2  0009               	tblrd		*+
  8326  002FC4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8327  002FC8  000A               	tblrd		*-
  8328  002FCA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8329  002FCE  0E1C               	movlw	28
  8330  002FD0  ECA8  F026         	call	_glcdDrawRectangle
  8331                           
  8332                           ;main.c: 1663: glcdDrawRectangle(6*4,7*4, 20*4, 22*4, WHITE);
  8333  002FD4  0E1C               	movlw	28
  8334  002FD6  0100               	movlb	0	; () banked
  8335  002FD8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8336  002FDA  0E50               	movlw	80
  8337  002FDC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8338  002FDE  0E58               	movlw	88
  8339  002FE0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8340  002FE2  0E99               	movlw	low _WHITE
  8341  002FE4  6EF6               	movwf	tblptrl,c
  8342  002FE6                     	if	1	;There is more than 1 active tblptr byte
  8343  002FE6  0EFC               	movlw	high _WHITE
  8344  002FE8  6EF7               	movwf	tblptrh,c
  8345  002FEA                     	endif
  8346  002FEA                     	if	1	;There are 3 active tblptr bytes
  8347  002FEA  0E00               	movlw	low (_WHITE shr (0+16))
  8348  002FEC  6EF8               	movwf	tblptru,c
  8349  002FEE                     	endif
  8350  002FEE  0009               	tblrd		*+
  8351  002FF0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8352  002FF4  0009               	tblrd		*+
  8353  002FF6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8354  002FFA  0009               	tblrd		*+
  8355  002FFC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8356  003000  000A               	tblrd		*-
  8357  003002  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8358  003006  0E18               	movlw	24
  8359  003008  ECA8  F026         	call	_glcdDrawRectangle
  8360                           
  8361                           ;main.c: 1667: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
  8362  00300C  0E38               	movlw	56
  8363  00300E  0100               	movlb	0	; () banked
  8364  003010  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8365  003012  0E38               	movlw	56
  8366  003014  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8367  003016  0E44               	movlw	68
  8368  003018  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8369  00301A  0E99               	movlw	low _WHITE
  8370  00301C  6EF6               	movwf	tblptrl,c
  8371  00301E                     	if	1	;There is more than 1 active tblptr byte
  8372  00301E  0EFC               	movlw	high _WHITE
  8373  003020  6EF7               	movwf	tblptrh,c
  8374  003022                     	endif
  8375  003022                     	if	1	;There are 3 active tblptr bytes
  8376  003022  0E00               	movlw	low (_WHITE shr (0+16))
  8377  003024  6EF8               	movwf	tblptru,c
  8378  003026                     	endif
  8379  003026  0009               	tblrd		*+
  8380  003028  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8381  00302C  0009               	tblrd		*+
  8382  00302E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8383  003032  0009               	tblrd		*+
  8384  003034  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8385  003038  000A               	tblrd		*-
  8386  00303A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8387  00303E  0E34               	movlw	52
  8388  003040  ECA8  F026         	call	_glcdDrawRectangle
  8389                           
  8390                           ;main.c: 1668: glcdDrawRectangle(14*4,15*4, 13*4, 14*4, WHITE);
  8391  003044  0E3C               	movlw	60
  8392  003046  0100               	movlb	0	; () banked
  8393  003048  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8394  00304A  0E34               	movlw	52
  8395  00304C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8396  00304E  0E38               	movlw	56
  8397  003050  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8398  003052  0E99               	movlw	low _WHITE
  8399  003054  6EF6               	movwf	tblptrl,c
  8400  003056                     	if	1	;There is more than 1 active tblptr byte
  8401  003056  0EFC               	movlw	high _WHITE
  8402  003058  6EF7               	movwf	tblptrh,c
  8403  00305A                     	endif
  8404  00305A                     	if	1	;There are 3 active tblptr bytes
  8405  00305A  0E00               	movlw	low (_WHITE shr (0+16))
  8406  00305C  6EF8               	movwf	tblptru,c
  8407  00305E                     	endif
  8408  00305E  0009               	tblrd		*+
  8409  003060  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8410  003064  0009               	tblrd		*+
  8411  003066  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8412  00306A  0009               	tblrd		*+
  8413  00306C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8414  003070  000A               	tblrd		*-
  8415  003072  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8416  003076  0E38               	movlw	56
  8417  003078  ECA8  F026         	call	_glcdDrawRectangle
  8418                           
  8419                           ;main.c: 1669: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
  8420  00307C  0E1C               	movlw	28
  8421  00307E  0100               	movlb	0	; () banked
  8422  003080  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8423  003082  0E2C               	movlw	44
  8424  003084  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8425  003086  0E34               	movlw	52
  8426  003088  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8427  00308A  0E99               	movlw	low _WHITE
  8428  00308C  6EF6               	movwf	tblptrl,c
  8429  00308E                     	if	1	;There is more than 1 active tblptr byte
  8430  00308E  0EFC               	movlw	high _WHITE
  8431  003090  6EF7               	movwf	tblptrh,c
  8432  003092                     	endif
  8433  003092                     	if	1	;There are 3 active tblptr bytes
  8434  003092  0E00               	movlw	low (_WHITE shr (0+16))
  8435  003094  6EF8               	movwf	tblptru,c
  8436  003096                     	endif
  8437  003096  0009               	tblrd		*+
  8438  003098  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8439  00309C  0009               	tblrd		*+
  8440  00309E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8441  0030A2  0009               	tblrd		*+
  8442  0030A4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8443  0030A8  000A               	tblrd		*-
  8444  0030AA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8445  0030AE  0E18               	movlw	24
  8446  0030B0  ECA8  F026         	call	_glcdDrawRectangle
  8447                           
  8448                           ;main.c: 1671: glcdDrawRectangle(15*4,18*4, 12*4, 13*4, WHITE);
  8449  0030B4  0E48               	movlw	72
  8450  0030B6  0100               	movlb	0	; () banked
  8451  0030B8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8452  0030BA  0E30               	movlw	48
  8453  0030BC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8454  0030BE  0E34               	movlw	52
  8455  0030C0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8456  0030C2  0E99               	movlw	low _WHITE
  8457  0030C4  6EF6               	movwf	tblptrl,c
  8458  0030C6                     	if	1	;There is more than 1 active tblptr byte
  8459  0030C6  0EFC               	movlw	high _WHITE
  8460  0030C8  6EF7               	movwf	tblptrh,c
  8461  0030CA                     	endif
  8462  0030CA                     	if	1	;There are 3 active tblptr bytes
  8463  0030CA  0E00               	movlw	low (_WHITE shr (0+16))
  8464  0030CC  6EF8               	movwf	tblptru,c
  8465  0030CE                     	endif
  8466  0030CE  0009               	tblrd		*+
  8467  0030D0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8468  0030D4  0009               	tblrd		*+
  8469  0030D6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8470  0030DA  0009               	tblrd		*+
  8471  0030DC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8472  0030E0  000A               	tblrd		*-
  8473  0030E2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8474  0030E6  0E3C               	movlw	60
  8475  0030E8  ECA8  F026         	call	_glcdDrawRectangle
  8476                           
  8477                           ;main.c: 1672: glcdDrawRectangle(18*4,19*4, 13*4, 14*4, WHITE);
  8478  0030EC  0E4C               	movlw	76
  8479  0030EE  0100               	movlb	0	; () banked
  8480  0030F0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8481  0030F2  0E34               	movlw	52
  8482  0030F4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8483  0030F6  0E38               	movlw	56
  8484  0030F8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8485  0030FA  0E99               	movlw	low _WHITE
  8486  0030FC  6EF6               	movwf	tblptrl,c
  8487  0030FE                     	if	1	;There is more than 1 active tblptr byte
  8488  0030FE  0EFC               	movlw	high _WHITE
  8489  003100  6EF7               	movwf	tblptrh,c
  8490  003102                     	endif
  8491  003102                     	if	1	;There are 3 active tblptr bytes
  8492  003102  0E00               	movlw	low (_WHITE shr (0+16))
  8493  003104  6EF8               	movwf	tblptru,c
  8494  003106                     	endif
  8495  003106  0009               	tblrd		*+
  8496  003108  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8497  00310C  0009               	tblrd		*+
  8498  00310E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8499  003112  0009               	tblrd		*+
  8500  003114  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8501  003118  000A               	tblrd		*-
  8502  00311A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8503  00311E  0E48               	movlw	72
  8504  003120  ECA8  F026         	call	_glcdDrawRectangle
  8505                           
  8506                           ;main.c: 1673: glcdDrawRectangle(19*4,20*4, 14*4, 17*4, WHITE);
  8507  003124  0E50               	movlw	80
  8508  003126  0100               	movlb	0	; () banked
  8509  003128  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8510  00312A  0E38               	movlw	56
  8511  00312C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8512  00312E  0E44               	movlw	68
  8513  003130  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8514  003132  0E99               	movlw	low _WHITE
  8515  003134  6EF6               	movwf	tblptrl,c
  8516  003136                     	if	1	;There is more than 1 active tblptr byte
  8517  003136  0EFC               	movlw	high _WHITE
  8518  003138  6EF7               	movwf	tblptrh,c
  8519  00313A                     	endif
  8520  00313A                     	if	1	;There are 3 active tblptr bytes
  8521  00313A  0E00               	movlw	low (_WHITE shr (0+16))
  8522  00313C  6EF8               	movwf	tblptru,c
  8523  00313E                     	endif
  8524  00313E  0009               	tblrd		*+
  8525  003140  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8526  003144  0009               	tblrd		*+
  8527  003146  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8528  00314A  0009               	tblrd		*+
  8529  00314C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8530  003150  000A               	tblrd		*-
  8531  003152  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8532  003156  0E4C               	movlw	76
  8533  003158  ECA8  F026         	call	_glcdDrawRectangle
  8534                           
  8535                           ;main.c: 1674: glcdDrawRectangle(18*4,19*4, 17*4, 18*4, WHITE);
  8536  00315C  0E4C               	movlw	76
  8537  00315E  0100               	movlb	0	; () banked
  8538  003160  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8539  003162  0E44               	movlw	68
  8540  003164  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8541  003166  0E48               	movlw	72
  8542  003168  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8543  00316A  0E99               	movlw	low _WHITE
  8544  00316C  6EF6               	movwf	tblptrl,c
  8545  00316E                     	if	1	;There is more than 1 active tblptr byte
  8546  00316E  0EFC               	movlw	high _WHITE
  8547  003170  6EF7               	movwf	tblptrh,c
  8548  003172                     	endif
  8549  003172                     	if	1	;There are 3 active tblptr bytes
  8550  003172  0E00               	movlw	low (_WHITE shr (0+16))
  8551  003174  6EF8               	movwf	tblptru,c
  8552  003176                     	endif
  8553  003176  0009               	tblrd		*+
  8554  003178  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8555  00317C  0009               	tblrd		*+
  8556  00317E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8557  003182  0009               	tblrd		*+
  8558  003184  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8559  003188  000A               	tblrd		*-
  8560  00318A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8561  00318E  0E48               	movlw	72
  8562  003190  ECA8  F026         	call	_glcdDrawRectangle
  8563                           
  8564                           ;main.c: 1676: glcdDrawRectangle(15*4,18*4, 18*4, 19*4, WHITE);
  8565  003194  0E48               	movlw	72
  8566  003196  0100               	movlb	0	; () banked
  8567  003198  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8568  00319A  0E48               	movlw	72
  8569  00319C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8570  00319E  0E4C               	movlw	76
  8571  0031A0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8572  0031A2  0E99               	movlw	low _WHITE
  8573  0031A4  6EF6               	movwf	tblptrl,c
  8574  0031A6                     	if	1	;There is more than 1 active tblptr byte
  8575  0031A6  0EFC               	movlw	high _WHITE
  8576  0031A8  6EF7               	movwf	tblptrh,c
  8577  0031AA                     	endif
  8578  0031AA                     	if	1	;There are 3 active tblptr bytes
  8579  0031AA  0E00               	movlw	low (_WHITE shr (0+16))
  8580  0031AC  6EF8               	movwf	tblptru,c
  8581  0031AE                     	endif
  8582  0031AE  0009               	tblrd		*+
  8583  0031B0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8584  0031B4  0009               	tblrd		*+
  8585  0031B6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8586  0031BA  0009               	tblrd		*+
  8587  0031BC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8588  0031C0  000A               	tblrd		*-
  8589  0031C2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8590  0031C6  0E3C               	movlw	60
  8591  0031C8  ECA8  F026         	call	_glcdDrawRectangle
  8592                           
  8593                           ;main.c: 1677: glcdDrawRectangle(14*4,15*4, 16*4, 17*4, WHITE);
  8594  0031CC  0E3C               	movlw	60
  8595  0031CE  0100               	movlb	0	; () banked
  8596  0031D0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8597  0031D2  0E40               	movlw	64
  8598  0031D4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8599  0031D6  0E44               	movlw	68
  8600  0031D8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8601  0031DA  0E99               	movlw	low _WHITE
  8602  0031DC  6EF6               	movwf	tblptrl,c
  8603  0031DE                     	if	1	;There is more than 1 active tblptr byte
  8604  0031DE  0EFC               	movlw	high _WHITE
  8605  0031E0  6EF7               	movwf	tblptrh,c
  8606  0031E2                     	endif
  8607  0031E2                     	if	1	;There are 3 active tblptr bytes
  8608  0031E2  0E00               	movlw	low (_WHITE shr (0+16))
  8609  0031E4  6EF8               	movwf	tblptru,c
  8610  0031E6                     	endif
  8611  0031E6  0009               	tblrd		*+
  8612  0031E8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8613  0031EC  0009               	tblrd		*+
  8614  0031EE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8615  0031F2  0009               	tblrd		*+
  8616  0031F4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8617  0031F8  000A               	tblrd		*-
  8618  0031FA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8619  0031FE  0E38               	movlw	56
  8620  003200  ECA8  F026         	call	_glcdDrawRectangle
  8621                           
  8622                           ;main.c: 1678: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
  8623  003204  0E38               	movlw	56
  8624  003206  0100               	movlb	0	; () banked
  8625  003208  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8626  00320A  0E38               	movlw	56
  8627  00320C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8628  00320E  0E44               	movlw	68
  8629  003210  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8630  003212  0E99               	movlw	low _WHITE
  8631  003214  6EF6               	movwf	tblptrl,c
  8632  003216                     	if	1	;There is more than 1 active tblptr byte
  8633  003216  0EFC               	movlw	high _WHITE
  8634  003218  6EF7               	movwf	tblptrh,c
  8635  00321A                     	endif
  8636  00321A                     	if	1	;There are 3 active tblptr bytes
  8637  00321A  0E00               	movlw	low (_WHITE shr (0+16))
  8638  00321C  6EF8               	movwf	tblptru,c
  8639  00321E                     	endif
  8640  00321E  0009               	tblrd		*+
  8641  003220  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8642  003224  0009               	tblrd		*+
  8643  003226  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8644  00322A  0009               	tblrd		*+
  8645  00322C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8646  003230  000A               	tblrd		*-
  8647  003232  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8648  003236  0E34               	movlw	52
  8649  003238  ECA8  F026         	call	_glcdDrawRectangle
  8650                           
  8651                           ;main.c: 1679: I2C_Master_Init(100000);
  8652  00323C  0EA0               	movlw	160
  8653  00323E  0100               	movlb	0	; () banked
  8654  003240  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  8655  003242  0E86               	movlw	134
  8656  003244  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  8657  003246  0E01               	movlw	1
  8658  003248  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  8659  00324A  0E00               	movlw	0
  8660  00324C  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  8661  00324E  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
  8662  003252  0012               	return		;funcret
  8663  003254                     __end_of_drawWasher:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           intcon	equ	0xFF2
  8670                           intcon3	equ	0xFF0
  8671                           postinc0	equ	0xFEE
  8672                           wreg	equ	0xFE8
  8673                           postdec1	equ	0xFE5
  8674                           fsr1l	equ	0xFE1
  8675                           indf2	equ	0xFDF
  8676                           postinc2	equ	0xFDE
  8677                           postdec2	equ	0xFDD
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function _Spacer_remain *****************
  8683 ;; Defined at:
  8684 ;;		line 1531 in file "main.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  time            2   42[BANK0 ] int 
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      void 
  8691 ;; Registers used:
  8692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8698 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;Total ram usage:        4 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    9
  8705 ;; This function calls:
  8706 ;;		_I2C_sendData
  8707 ;;		_drawSpacer
  8708 ;;		_lcdInst
  8709 ;;		_printf
  8710 ;; This function is called by:
  8711 ;;		_main
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text12
  8716  005276                     __ptext12:
  8717                           	opt stack 0
  8718  005276                     _Spacer_remain:
  8719                           	opt stack 21
  8720                           
  8721                           ;main.c: 1532: drawSpacer();
  8722                           
  8723                           ;incstack = 0
  8724  005276  EC00  F021         	call	_drawSpacer	;wreg free
  8725                           
  8726                           ;main.c: 1533: _delay((unsigned long)((100)*(32000000/4000.0)));
  8727  00527A  0E05               	movlw	5
  8728  00527C  0100               	movlb	0	; () banked
  8729  00527E  6FF0               	movwf	(??_Spacer_remain+1)& (0+255),b
  8730  005280  0E0F               	movlw	15
  8731  005282  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8732  005284  0EF1               	movlw	241
  8733  005286                     u7097:
  8734  005286  2EE8               	decfsz	wreg,f,c
  8735  005288  D7FE               	bra	u7097
  8736  00528A  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8737  00528C  D7FC               	bra	u7097
  8738  00528E  2FF0               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  8739  005290  D7FA               	bra	u7097
  8740                           
  8741                           ;main.c: 1534: I2C_sendData('9');
  8742  005292  0E39               	movlw	57
  8743  005294  EC7A  F030         	call	_I2C_sendData
  8744                           
  8745                           ;main.c: 1535: while(EndOfProgram != 1 && S_spacingTime < time){
  8746  005298  D026               	goto	l769
  8747  00529A                     
  8748                           ;main.c: 1536: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  8749  00529A  0E01               	movlw	1
  8750  00529C  ECDF  F030         	call	_lcdInst
  8751  0052A0  0E9C               	movlw	156
  8752  0052A2  0100               	movlb	0	; () banked
  8753  0052A4  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8754  0052A6  0ED7               	movlw	215
  8755  0052A8                     u7107:
  8756  0052A8  2EE8               	decfsz	wreg,f,c
  8757  0052AA  D7FE               	bra	u7107
  8758  0052AC  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8759  0052AE  D7FC               	bra	u7107
  8760                           
  8761                           ;main.c: 1537: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  8762  0052B0  0E80               	movlw	128
  8763  0052B2  ECDF  F030         	call	_lcdInst
  8764  0052B6  0E34               	movlw	52
  8765  0052B8  0100               	movlb	0	; () banked
  8766  0052BA  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8767  0052BC  0EF1               	movlw	241
  8768  0052BE                     u7117:
  8769  0052BE  2EE8               	decfsz	wreg,f,c
  8770  0052C0  D7FE               	bra	u7117
  8771  0052C2  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8772  0052C4  D7FC               	bra	u7117
  8773  0052C6  D000               	nop2	
  8774                           
  8775                           ;main.c: 1538: S_spacingTime +=30;
  8776  0052C8  0E1E               	movlw	30
  8777  0052CA  0100               	movlb	0	; () banked
  8778  0052CC  2799               	addwf	_S_spacingTime& (0+255),f,b
  8779  0052CE  0E00               	movlw	0
  8780  0052D0  239A               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;main.c: 1539: printf("S:%d",S_counter);
  8784  0052D2  0ED9               	movlw	low STR_68
  8785  0052D4  6FD1               	movwf	printf@f& (0+255),b
  8786  0052D6  0EFF               	movlw	high STR_68
  8787  0052D8  6FD2               	movwf	(printf@f+1)& (0+255),b
  8788  0052DA  C0AB  F0D3         	movff	_S_counter,?_printf+2
  8789  0052DE  C0AC  F0D4         	movff	_S_counter+1,?_printf+3
  8790  0052E2  EC2A  F019         	call	_printf	;wreg free
  8791  0052E6                     l769:
  8792  0052E6  0100               	movlb	0	; () banked
  8793  0052E8  05BB               	decf	_EndOfProgram& (0+255),w,b
  8794  0052EA  B4D8               	btfsc	status,2,c
  8795  0052EC  D00A               	goto	u4360
  8796                           
  8797                           ; BSR set to: 0
  8798  0052EE  51ED               	movf	Spacer_remain@time& (0+255),w,b
  8799  0052F0  5D99               	subwf	_S_spacingTime& (0+255),w,b
  8800  0052F2  519A               	movf	(_S_spacingTime+1)& (0+255),w,b
  8801  0052F4  0A80               	xorlw	128
  8802  0052F6  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8803  0052F8  51EE               	movf	(Spacer_remain@time+1)& (0+255),w,b
  8804  0052FA  0A80               	xorlw	128
  8805  0052FC  59EF               	subwfb	??_Spacer_remain& (0+255),w,b
  8806  0052FE  A0D8               	btfss	status,0,c
  8807  005300  D7CC               	goto	l770
  8808  005302                     u4360:
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;main.c: 1540: }
  8812                           ;main.c: 1541: S_remain = S_counter;
  8813                           
  8814                           ; BSR set to: 0
  8815  005302  C0AB  F0A1         	movff	_S_counter,_S_remain
  8816  005306  C0AC  F0A2         	movff	_S_counter+1,_S_remain+1
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 1542: I2C_sendData(10);
  8820  00530A  0E0A               	movlw	10
  8821  00530C  EC7A  F030         	call	_I2C_sendData
  8822                           
  8823                           ;main.c: 1543: if(EndOfProgram != 1){
  8824  005310  0100               	movlb	0	; () banked
  8825  005312  05BB               	decf	_EndOfProgram& (0+255),w,b
  8826  005314  B4D8               	btfsc	status,2,c
  8827  005316  0012               	return	
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;main.c: 1544: _delay((unsigned long)((100)*(32000000/4000.0)));
  8831  005318  0E05               	movlw	5
  8832  00531A  0100               	movlb	0	; () banked
  8833  00531C  6FF0               	movwf	(??_Spacer_remain+1)& (0+255),b
  8834  00531E  0E0F               	movlw	15
  8835  005320  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8836  005322  0EF1               	movlw	241
  8837  005324                     u7127:
  8838  005324  2EE8               	decfsz	wreg,f,c
  8839  005326  D7FE               	bra	u7127
  8840  005328  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8841  00532A  D7FC               	bra	u7127
  8842  00532C  2FF0               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  8843  00532E  D7FA               	bra	u7127
  8844  005330  0012               	return	
  8845  005332                     __end_of_Spacer_remain:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           intcon	equ	0xFF2
  8852                           intcon3	equ	0xFF0
  8853                           postinc0	equ	0xFEE
  8854                           wreg	equ	0xFE8
  8855                           postdec1	equ	0xFE5
  8856                           fsr1l	equ	0xFE1
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           fsr2h	equ	0xFDA
  8861                           fsr2l	equ	0xFD9
  8862                           status	equ	0xFD8
  8863                           
  8864 ;; *************** function _Spacer_dispense *****************
  8865 ;; Defined at:
  8866 ;;		line 1332 in file "main.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  S_max           2   42[BANK0 ] int 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;		None
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;Total ram usage:        4 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    9
  8887 ;; This function calls:
  8888 ;;		_I2C_sendData
  8889 ;;		_drawSpacer
  8890 ;;		_lcdInst
  8891 ;;		_printf
  8892 ;; This function is called by:
  8893 ;;		_main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text13
  8898  00554A                     __ptext13:
  8899                           	opt stack 0
  8900  00554A                     _Spacer_dispense:
  8901                           	opt stack 21
  8902                           
  8903                           ;main.c: 1333: if (S_max == 0){
  8904                           
  8905                           ;incstack = 0
  8906  00554A  0100               	movlb	0	; () banked
  8907  00554C  51ED               	movf	Spacer_dispense@S_max& (0+255),w,b
  8908  00554E  11EE               	iorwf	(Spacer_dispense@S_max+1)& (0+255),w,b
  8909  005550  B4D8               	btfsc	status,2,c
  8910  005552  0012               	return	
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;main.c: 1335: }
  8914                           ;main.c: 1336: drawSpacer();
  8915                           
  8916                           ; BSR set to: 0
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;main.c: 1334: return;
  8920  005554  EC00  F021         	call	_drawSpacer	;wreg free
  8921                           
  8922                           ;main.c: 1337: _delay((unsigned long)((100)*(32000000/4000.0)));
  8923  005558  0E05               	movlw	5
  8924  00555A  0100               	movlb	0	; () banked
  8925  00555C  6FF0               	movwf	(??_Spacer_dispense+1)& (0+255),b
  8926  00555E  0E0F               	movlw	15
  8927  005560  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8928  005562  0EF1               	movlw	241
  8929  005564                     u7137:
  8930  005564  2EE8               	decfsz	wreg,f,c
  8931  005566  D7FE               	bra	u7137
  8932  005568  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8933  00556A  D7FC               	bra	u7137
  8934  00556C  2FF0               	decfsz	(??_Spacer_dispense+1)& (0+255),f,b
  8935  00556E  D7FA               	bra	u7137
  8936                           
  8937                           ;main.c: 1338: I2C_sendData('9');
  8938  005570  0E39               	movlw	57
  8939  005572  EC7A  F030         	call	_I2C_sendData
  8940                           
  8941                           ;main.c: 1339: S_counter = 0;
  8942  005576  0E00               	movlw	0
  8943  005578  0100               	movlb	0	; () banked
  8944  00557A  6FAC               	movwf	(_S_counter+1)& (0+255),b
  8945  00557C  0E00               	movlw	0
  8946  00557E  6FAB               	movwf	_S_counter& (0+255),b
  8947                           
  8948                           ;main.c: 1340: while(NeedToCloseLid != 1 && S_counter < S_max){
  8949  005580  D022               	goto	l695
  8950  005582                     
  8951                           ; BSR set to: 0
  8952                           ;main.c: 1342: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  8953                           
  8954                           ; BSR set to: 0
  8955  005582  0E80               	movlw	128
  8956  005584  ECDF  F030         	call	_lcdInst
  8957  005588  0E34               	movlw	52
  8958  00558A  0100               	movlb	0	; () banked
  8959  00558C  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8960  00558E  0EF1               	movlw	241
  8961  005590                     u7147:
  8962  005590  2EE8               	decfsz	wreg,f,c
  8963  005592  D7FE               	bra	u7147
  8964  005594  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8965  005596  D7FC               	bra	u7147
  8966  005598  D000               	nop2	
  8967                           
  8968                           ;main.c: 1343: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  8969  00559A  0E01               	movlw	1
  8970  00559C  ECDF  F030         	call	_lcdInst
  8971  0055A0  0E9C               	movlw	156
  8972  0055A2  0100               	movlb	0	; () banked
  8973  0055A4  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8974  0055A6  0ED7               	movlw	215
  8975  0055A8                     u7157:
  8976  0055A8  2EE8               	decfsz	wreg,f,c
  8977  0055AA  D7FE               	bra	u7157
  8978  0055AC  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8979  0055AE  D7FC               	bra	u7157
  8980                           
  8981                           ;main.c: 1344: printf("S:%d", S_counter);
  8982  0055B0  0ED9               	movlw	low STR_68
  8983  0055B2  0100               	movlb	0	; () banked
  8984  0055B4  6FD1               	movwf	printf@f& (0+255),b
  8985  0055B6  0EFF               	movlw	high STR_68
  8986  0055B8  6FD2               	movwf	(printf@f+1)& (0+255),b
  8987  0055BA  C0AB  F0D3         	movff	_S_counter,?_printf+2
  8988  0055BE  C0AC  F0D4         	movff	_S_counter+1,?_printf+3
  8989  0055C2  EC2A  F019         	call	_printf	;wreg free
  8990  0055C6                     l695:
  8991  0055C6  0100               	movlb	0	; () banked
  8992  0055C8  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  8993  0055CA  B4D8               	btfsc	status,2,c
  8994  0055CC  D00A               	goto	u4250
  8995                           
  8996                           ; BSR set to: 0
  8997  0055CE  51ED               	movf	Spacer_dispense@S_max& (0+255),w,b
  8998  0055D0  5DAB               	subwf	_S_counter& (0+255),w,b
  8999  0055D2  51AC               	movf	(_S_counter+1)& (0+255),w,b
  9000  0055D4  0A80               	xorlw	128
  9001  0055D6  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  9002  0055D8  51EE               	movf	(Spacer_dispense@S_max+1)& (0+255),w,b
  9003  0055DA  0A80               	xorlw	128
  9004  0055DC  59EF               	subwfb	??_Spacer_dispense& (0+255),w,b
  9005  0055DE  A0D8               	btfss	status,0,c
  9006  0055E0  D7D0               	goto	l696
  9007  0055E2                     u4250:
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;main.c: 1345: }
  9011                           ;main.c: 1346: I2C_sendData(10);
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016  0055E2  0E0A               	movlw	10
  9017  0055E4  EC7A  F030         	call	_I2C_sendData
  9018  0055E8  0012               	return		;funcret
  9019  0055EA                     __end_of_Spacer_dispense:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           intcon	equ	0xFF2
  9026                           intcon3	equ	0xFF0
  9027                           postinc0	equ	0xFEE
  9028                           wreg	equ	0xFE8
  9029                           postdec1	equ	0xFE5
  9030                           fsr1l	equ	0xFE1
  9031                           indf2	equ	0xFDF
  9032                           postinc2	equ	0xFDE
  9033                           postdec2	equ	0xFDD
  9034                           fsr2h	equ	0xFDA
  9035                           fsr2l	equ	0xFD9
  9036                           status	equ	0xFD8
  9037                           
  9038 ;; *************** function _drawSpacer *****************
  9039 ;; Defined at:
  9040 ;;		line 1722 in file "main.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:        1 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    8
  9061 ;; This function calls:
  9062 ;;		_I2C_Master_Init
  9063 ;;		_glcdDrawRectangle
  9064 ;;		_spiInit
  9065 ;; This function is called by:
  9066 ;;		_Spacer_dispense
  9067 ;;		_Spacer_remain
  9068 ;;		_bolt_spacer_remain
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text14
  9073  004200                     __ptext14:
  9074                           	opt stack 0
  9075  004200                     _drawSpacer:
  9076                           	opt stack 21
  9077                           
  9078                           ;main.c: 1723: spiInit(4);
  9079                           
  9080                           ;incstack = 0
  9081  004200  0E04               	movlw	4
  9082  004202  ECF1  F02F         	call	_spiInit
  9083                           
  9084                           ;main.c: 1724: _delay((unsigned long)((20)*(32000000/4000.0)));
  9085  004206  0ED0               	movlw	208
  9086  004208  0100               	movlb	0	; () banked
  9087  00420A  6FE4               	movwf	??_drawSpacer& (0+255),b
  9088  00420C  0EC9               	movlw	201
  9089  00420E                     u7167:
  9090  00420E  2EE8               	decfsz	wreg,f,c
  9091  004210  D7FE               	bra	u7167
  9092  004212  2FE4               	decfsz	??_drawSpacer& (0+255),f,b
  9093  004214  D7FC               	bra	u7167
  9094  004216  D000               	nop2	
  9095                           
  9096                           ;main.c: 1725: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  9097  004218  0EE9               	movlw	low _GLCD_SIZE_HORZ
  9098  00421A  6EF6               	movwf	tblptrl,c
  9099  00421C                     	if	1	;There is more than 1 active tblptr byte
  9100  00421C  0EFC               	movlw	high _GLCD_SIZE_HORZ
  9101  00421E  6EF7               	movwf	tblptrh,c
  9102  004220                     	endif
  9103  004220                     	if	1	;There are 3 active tblptr bytes
  9104  004220  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  9105  004222  6EF8               	movwf	tblptru,c
  9106  004224                     	endif
  9107  004224  0008               	tblrd		*
  9108  004226  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  9109  00422A  0E00               	movlw	0
  9110  00422C  0100               	movlb	0	; () banked
  9111  00422E  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9112  004230  0EE8               	movlw	low _GLCD_SIZE_VERT
  9113  004232  6EF6               	movwf	tblptrl,c
  9114  004234                     	if	1	;There is more than 1 active tblptr byte
  9115  004234  0EFC               	movlw	high _GLCD_SIZE_VERT
  9116  004236  6EF7               	movwf	tblptrh,c
  9117  004238                     	endif
  9118  004238                     	if	1	;There are 3 active tblptr bytes
  9119  004238  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  9120  00423A  6EF8               	movwf	tblptru,c
  9121  00423C                     	endif
  9122  00423C  0008               	tblrd		*
  9123  00423E  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  9124  004242  0EA1               	movlw	low _BLACK
  9125  004244  6EF6               	movwf	tblptrl,c
  9126  004246                     	if	1	;There is more than 1 active tblptr byte
  9127  004246  0EFC               	movlw	high _BLACK
  9128  004248  6EF7               	movwf	tblptrh,c
  9129  00424A                     	endif
  9130  00424A                     	if	1	;There are 3 active tblptr bytes
  9131  00424A  0E00               	movlw	low (_BLACK shr (0+16))
  9132  00424C  6EF8               	movwf	tblptru,c
  9133  00424E                     	endif
  9134  00424E  0009               	tblrd		*+
  9135  004250  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9136  004254  0009               	tblrd		*+
  9137  004256  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9138  00425A  0009               	tblrd		*+
  9139  00425C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9140  004260  000A               	tblrd		*-
  9141  004262  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9142  004266  0E00               	movlw	0
  9143  004268  ECA8  F026         	call	_glcdDrawRectangle
  9144                           
  9145                           ;main.c: 1726: glcdDrawRectangle(6*4,7*4, 12*4, 17*4, WHITE);
  9146  00426C  0E1C               	movlw	28
  9147  00426E  0100               	movlb	0	; () banked
  9148  004270  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9149  004272  0E30               	movlw	48
  9150  004274  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9151  004276  0E44               	movlw	68
  9152  004278  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9153  00427A  0E99               	movlw	low _WHITE
  9154  00427C  6EF6               	movwf	tblptrl,c
  9155  00427E                     	if	1	;There is more than 1 active tblptr byte
  9156  00427E  0EFC               	movlw	high _WHITE
  9157  004280  6EF7               	movwf	tblptrh,c
  9158  004282                     	endif
  9159  004282                     	if	1	;There are 3 active tblptr bytes
  9160  004282  0E00               	movlw	low (_WHITE shr (0+16))
  9161  004284  6EF8               	movwf	tblptru,c
  9162  004286                     	endif
  9163  004286  0009               	tblrd		*+
  9164  004288  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9165  00428C  0009               	tblrd		*+
  9166  00428E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9167  004292  0009               	tblrd		*+
  9168  004294  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9169  004298  000A               	tblrd		*-
  9170  00429A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9171  00429E  0E18               	movlw	24
  9172  0042A0  ECA8  F026         	call	_glcdDrawRectangle
  9173                           
  9174                           ;main.c: 1727: glcdDrawRectangle(16*4,17*4, 15*4, 16*4, WHITE);
  9175  0042A4  0E44               	movlw	68
  9176  0042A6  0100               	movlb	0	; () banked
  9177  0042A8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9178  0042AA  0E3C               	movlw	60
  9179  0042AC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9180  0042AE  0E40               	movlw	64
  9181  0042B0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9182  0042B2  0E99               	movlw	low _WHITE
  9183  0042B4  6EF6               	movwf	tblptrl,c
  9184  0042B6                     	if	1	;There is more than 1 active tblptr byte
  9185  0042B6  0EFC               	movlw	high _WHITE
  9186  0042B8  6EF7               	movwf	tblptrh,c
  9187  0042BA                     	endif
  9188  0042BA                     	if	1	;There are 3 active tblptr bytes
  9189  0042BA  0E00               	movlw	low (_WHITE shr (0+16))
  9190  0042BC  6EF8               	movwf	tblptru,c
  9191  0042BE                     	endif
  9192  0042BE  0009               	tblrd		*+
  9193  0042C0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9194  0042C4  0009               	tblrd		*+
  9195  0042C6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9196  0042CA  0009               	tblrd		*+
  9197  0042CC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9198  0042D0  000A               	tblrd		*-
  9199  0042D2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9200  0042D6  0E40               	movlw	64
  9201  0042D8  ECA8  F026         	call	_glcdDrawRectangle
  9202                           
  9203                           ;main.c: 1728: glcdDrawRectangle(7*4,8*4, 11*4, 12*4, WHITE);
  9204  0042DC  0E20               	movlw	32
  9205  0042DE  0100               	movlb	0	; () banked
  9206  0042E0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9207  0042E2  0E2C               	movlw	44
  9208  0042E4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9209  0042E6  0E30               	movlw	48
  9210  0042E8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9211  0042EA  0E99               	movlw	low _WHITE
  9212  0042EC  6EF6               	movwf	tblptrl,c
  9213  0042EE                     	if	1	;There is more than 1 active tblptr byte
  9214  0042EE  0EFC               	movlw	high _WHITE
  9215  0042F0  6EF7               	movwf	tblptrh,c
  9216  0042F2                     	endif
  9217  0042F2                     	if	1	;There are 3 active tblptr bytes
  9218  0042F2  0E00               	movlw	low (_WHITE shr (0+16))
  9219  0042F4  6EF8               	movwf	tblptru,c
  9220  0042F6                     	endif
  9221  0042F6  0009               	tblrd		*+
  9222  0042F8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9223  0042FC  0009               	tblrd		*+
  9224  0042FE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9225  004302  0009               	tblrd		*+
  9226  004304  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9227  004308  000A               	tblrd		*-
  9228  00430A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9229  00430E  0E1C               	movlw	28
  9230  004310  ECA8  F026         	call	_glcdDrawRectangle
  9231                           
  9232                           ;main.c: 1730: glcdDrawRectangle(8*4,23*4, 10*4, 11*4, WHITE);
  9233  004314  0E5C               	movlw	92
  9234  004316  0100               	movlb	0	; () banked
  9235  004318  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9236  00431A  0E28               	movlw	40
  9237  00431C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9238  00431E  0E2C               	movlw	44
  9239  004320  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9240  004322  0E99               	movlw	low _WHITE
  9241  004324  6EF6               	movwf	tblptrl,c
  9242  004326                     	if	1	;There is more than 1 active tblptr byte
  9243  004326  0EFC               	movlw	high _WHITE
  9244  004328  6EF7               	movwf	tblptrh,c
  9245  00432A                     	endif
  9246  00432A                     	if	1	;There are 3 active tblptr bytes
  9247  00432A  0E00               	movlw	low (_WHITE shr (0+16))
  9248  00432C  6EF8               	movwf	tblptru,c
  9249  00432E                     	endif
  9250  00432E  0009               	tblrd		*+
  9251  004330  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9252  004334  0009               	tblrd		*+
  9253  004336  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9254  00433A  0009               	tblrd		*+
  9255  00433C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9256  004340  000A               	tblrd		*-
  9257  004342  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9258  004346  0E20               	movlw	32
  9259  004348  ECA8  F026         	call	_glcdDrawRectangle
  9260                           
  9261                           ;main.c: 1733: glcdDrawRectangle(8*4,9*4, 13*4, 15*4, WHITE);
  9262  00434C  0E24               	movlw	36
  9263  00434E  0100               	movlb	0	; () banked
  9264  004350  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9265  004352  0E34               	movlw	52
  9266  004354  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9267  004356  0E3C               	movlw	60
  9268  004358  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9269  00435A  0E99               	movlw	low _WHITE
  9270  00435C  6EF6               	movwf	tblptrl,c
  9271  00435E                     	if	1	;There is more than 1 active tblptr byte
  9272  00435E  0EFC               	movlw	high _WHITE
  9273  004360  6EF7               	movwf	tblptrh,c
  9274  004362                     	endif
  9275  004362                     	if	1	;There are 3 active tblptr bytes
  9276  004362  0E00               	movlw	low (_WHITE shr (0+16))
  9277  004364  6EF8               	movwf	tblptru,c
  9278  004366                     	endif
  9279  004366  0009               	tblrd		*+
  9280  004368  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9281  00436C  0009               	tblrd		*+
  9282  00436E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9283  004372  0009               	tblrd		*+
  9284  004374  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9285  004378  000A               	tblrd		*-
  9286  00437A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9287  00437E  0E20               	movlw	32
  9288  004380  ECA8  F026         	call	_glcdDrawRectangle
  9289                           
  9290                           ;main.c: 1734: glcdDrawRectangle(9*4,10*4, 14*4, 16*4, WHITE);
  9291  004384  0E28               	movlw	40
  9292  004386  0100               	movlb	0	; () banked
  9293  004388  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9294  00438A  0E38               	movlw	56
  9295  00438C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9296  00438E  0E40               	movlw	64
  9297  004390  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9298  004392  0E99               	movlw	low _WHITE
  9299  004394  6EF6               	movwf	tblptrl,c
  9300  004396                     	if	1	;There is more than 1 active tblptr byte
  9301  004396  0EFC               	movlw	high _WHITE
  9302  004398  6EF7               	movwf	tblptrh,c
  9303  00439A                     	endif
  9304  00439A                     	if	1	;There are 3 active tblptr bytes
  9305  00439A  0E00               	movlw	low (_WHITE shr (0+16))
  9306  00439C  6EF8               	movwf	tblptru,c
  9307  00439E                     	endif
  9308  00439E  0009               	tblrd		*+
  9309  0043A0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9310  0043A4  0009               	tblrd		*+
  9311  0043A6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9312  0043AA  0009               	tblrd		*+
  9313  0043AC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9314  0043B0  000A               	tblrd		*-
  9315  0043B2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9316  0043B6  0E24               	movlw	36
  9317  0043B8  ECA8  F026         	call	_glcdDrawRectangle
  9318                           
  9319                           ;main.c: 1735: glcdDrawRectangle(10*4,11*4, 11*4, 12*4, WHITE);
  9320  0043BC  0E2C               	movlw	44
  9321  0043BE  0100               	movlb	0	; () banked
  9322  0043C0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9323  0043C2  0E2C               	movlw	44
  9324  0043C4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9325  0043C6  0E30               	movlw	48
  9326  0043C8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9327  0043CA  0E99               	movlw	low _WHITE
  9328  0043CC  6EF6               	movwf	tblptrl,c
  9329  0043CE                     	if	1	;There is more than 1 active tblptr byte
  9330  0043CE  0EFC               	movlw	high _WHITE
  9331  0043D0  6EF7               	movwf	tblptrh,c
  9332  0043D2                     	endif
  9333  0043D2                     	if	1	;There are 3 active tblptr bytes
  9334  0043D2  0E00               	movlw	low (_WHITE shr (0+16))
  9335  0043D4  6EF8               	movwf	tblptru,c
  9336  0043D6                     	endif
  9337  0043D6  0009               	tblrd		*+
  9338  0043D8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9339  0043DC  0009               	tblrd		*+
  9340  0043DE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9341  0043E2  0009               	tblrd		*+
  9342  0043E4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9343  0043E8  000A               	tblrd		*-
  9344  0043EA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9345  0043EE  0E28               	movlw	40
  9346  0043F0  ECA8  F026         	call	_glcdDrawRectangle
  9347                           
  9348                           ;main.c: 1737: glcdDrawRectangle(11*4,12*4, 12*4, 17*4, WHITE);
  9349  0043F4  0E30               	movlw	48
  9350  0043F6  0100               	movlb	0	; () banked
  9351  0043F8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9352  0043FA  0E30               	movlw	48
  9353  0043FC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9354  0043FE  0E44               	movlw	68
  9355  004400  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9356  004402  0E99               	movlw	low _WHITE
  9357  004404  6EF6               	movwf	tblptrl,c
  9358  004406                     	if	1	;There is more than 1 active tblptr byte
  9359  004406  0EFC               	movlw	high _WHITE
  9360  004408  6EF7               	movwf	tblptrh,c
  9361  00440A                     	endif
  9362  00440A                     	if	1	;There are 3 active tblptr bytes
  9363  00440A  0E00               	movlw	low (_WHITE shr (0+16))
  9364  00440C  6EF8               	movwf	tblptru,c
  9365  00440E                     	endif
  9366  00440E  0009               	tblrd		*+
  9367  004410  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9368  004414  0009               	tblrd		*+
  9369  004416  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9370  00441A  0009               	tblrd		*+
  9371  00441C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9372  004420  000A               	tblrd		*-
  9373  004422  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9374  004426  0E2C               	movlw	44
  9375  004428  ECA8  F026         	call	_glcdDrawRectangle
  9376                           
  9377                           ;main.c: 1738: glcdDrawRectangle(7*4,8*4, 17*4, 18*4, WHITE);
  9378  00442C  0E20               	movlw	32
  9379  00442E  0100               	movlb	0	; () banked
  9380  004430  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9381  004432  0E44               	movlw	68
  9382  004434  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9383  004436  0E48               	movlw	72
  9384  004438  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9385  00443A  0E99               	movlw	low _WHITE
  9386  00443C  6EF6               	movwf	tblptrl,c
  9387  00443E                     	if	1	;There is more than 1 active tblptr byte
  9388  00443E  0EFC               	movlw	high _WHITE
  9389  004440  6EF7               	movwf	tblptrh,c
  9390  004442                     	endif
  9391  004442                     	if	1	;There are 3 active tblptr bytes
  9392  004442  0E00               	movlw	low (_WHITE shr (0+16))
  9393  004444  6EF8               	movwf	tblptru,c
  9394  004446                     	endif
  9395  004446  0009               	tblrd		*+
  9396  004448  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9397  00444C  0009               	tblrd		*+
  9398  00444E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9399  004452  0009               	tblrd		*+
  9400  004454  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9401  004458  000A               	tblrd		*-
  9402  00445A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9403  00445E  0E1C               	movlw	28
  9404  004460  ECA8  F026         	call	_glcdDrawRectangle
  9405                           
  9406                           ;main.c: 1739: glcdDrawRectangle(10*4,11*4, 17*4, 18*4, WHITE);
  9407  004464  0E2C               	movlw	44
  9408  004466  0100               	movlb	0	; () banked
  9409  004468  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9410  00446A  0E44               	movlw	68
  9411  00446C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9412  00446E  0E48               	movlw	72
  9413  004470  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9414  004472  0E99               	movlw	low _WHITE
  9415  004474  6EF6               	movwf	tblptrl,c
  9416  004476                     	if	1	;There is more than 1 active tblptr byte
  9417  004476  0EFC               	movlw	high _WHITE
  9418  004478  6EF7               	movwf	tblptrh,c
  9419  00447A                     	endif
  9420  00447A                     	if	1	;There are 3 active tblptr bytes
  9421  00447A  0E00               	movlw	low (_WHITE shr (0+16))
  9422  00447C  6EF8               	movwf	tblptru,c
  9423  00447E                     	endif
  9424  00447E  0009               	tblrd		*+
  9425  004480  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9426  004484  0009               	tblrd		*+
  9427  004486  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9428  00448A  0009               	tblrd		*+
  9429  00448C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9430  004490  000A               	tblrd		*-
  9431  004492  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9432  004496  0E28               	movlw	40
  9433  004498  ECA8  F026         	call	_glcdDrawRectangle
  9434                           
  9435                           ;main.c: 1741: glcdDrawRectangle(8*4,23*4, 18*4, 19*4, WHITE);
  9436  00449C  0E5C               	movlw	92
  9437  00449E  0100               	movlb	0	; () banked
  9438  0044A0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9439  0044A2  0E48               	movlw	72
  9440  0044A4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9441  0044A6  0E4C               	movlw	76
  9442  0044A8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9443  0044AA  0E99               	movlw	low _WHITE
  9444  0044AC  6EF6               	movwf	tblptrl,c
  9445  0044AE                     	if	1	;There is more than 1 active tblptr byte
  9446  0044AE  0EFC               	movlw	high _WHITE
  9447  0044B0  6EF7               	movwf	tblptrh,c
  9448  0044B2                     	endif
  9449  0044B2                     	if	1	;There are 3 active tblptr bytes
  9450  0044B2  0E00               	movlw	low (_WHITE shr (0+16))
  9451  0044B4  6EF8               	movwf	tblptru,c
  9452  0044B6                     	endif
  9453  0044B6  0009               	tblrd		*+
  9454  0044B8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9455  0044BC  0009               	tblrd		*+
  9456  0044BE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9457  0044C2  0009               	tblrd		*+
  9458  0044C4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9459  0044C8  000A               	tblrd		*-
  9460  0044CA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9461  0044CE  0E20               	movlw	32
  9462  0044D0  ECA8  F026         	call	_glcdDrawRectangle
  9463                           
  9464                           ;main.c: 1742: glcdDrawRectangle(23*4,24*4, 17*4, 18*4, WHITE);
  9465  0044D4  0E60               	movlw	96
  9466  0044D6  0100               	movlb	0	; () banked
  9467  0044D8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9468  0044DA  0E44               	movlw	68
  9469  0044DC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9470  0044DE  0E48               	movlw	72
  9471  0044E0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9472  0044E2  0E99               	movlw	low _WHITE
  9473  0044E4  6EF6               	movwf	tblptrl,c
  9474  0044E6                     	if	1	;There is more than 1 active tblptr byte
  9475  0044E6  0EFC               	movlw	high _WHITE
  9476  0044E8  6EF7               	movwf	tblptrh,c
  9477  0044EA                     	endif
  9478  0044EA                     	if	1	;There are 3 active tblptr bytes
  9479  0044EA  0E00               	movlw	low (_WHITE shr (0+16))
  9480  0044EC  6EF8               	movwf	tblptru,c
  9481  0044EE                     	endif
  9482  0044EE  0009               	tblrd		*+
  9483  0044F0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9484  0044F4  0009               	tblrd		*+
  9485  0044F6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9486  0044FA  0009               	tblrd		*+
  9487  0044FC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9488  004500  000A               	tblrd		*-
  9489  004502  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9490  004506  0E5C               	movlw	92
  9491  004508  ECA8  F026         	call	_glcdDrawRectangle
  9492                           
  9493                           ;main.c: 1744: glcdDrawRectangle(23*4,24*4, 11*4, 12*4, WHITE);
  9494  00450C  0E60               	movlw	96
  9495  00450E  0100               	movlb	0	; () banked
  9496  004510  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9497  004512  0E2C               	movlw	44
  9498  004514  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9499  004516  0E30               	movlw	48
  9500  004518  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9501  00451A  0E99               	movlw	low _WHITE
  9502  00451C  6EF6               	movwf	tblptrl,c
  9503  00451E                     	if	1	;There is more than 1 active tblptr byte
  9504  00451E  0EFC               	movlw	high _WHITE
  9505  004520  6EF7               	movwf	tblptrh,c
  9506  004522                     	endif
  9507  004522                     	if	1	;There are 3 active tblptr bytes
  9508  004522  0E00               	movlw	low (_WHITE shr (0+16))
  9509  004524  6EF8               	movwf	tblptru,c
  9510  004526                     	endif
  9511  004526  0009               	tblrd		*+
  9512  004528  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9513  00452C  0009               	tblrd		*+
  9514  00452E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9515  004532  0009               	tblrd		*+
  9516  004534  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9517  004538  000A               	tblrd		*-
  9518  00453A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9519  00453E  0E5C               	movlw	92
  9520  004540  ECA8  F026         	call	_glcdDrawRectangle
  9521                           
  9522                           ;main.c: 1745: glcdDrawRectangle(24*4,25*4, 12*4, 17 *4, WHITE);
  9523  004544  0E64               	movlw	100
  9524  004546  0100               	movlb	0	; () banked
  9525  004548  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9526  00454A  0E30               	movlw	48
  9527  00454C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9528  00454E  0E44               	movlw	68
  9529  004550  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9530  004552  0E99               	movlw	low _WHITE
  9531  004554  6EF6               	movwf	tblptrl,c
  9532  004556                     	if	1	;There is more than 1 active tblptr byte
  9533  004556  0EFC               	movlw	high _WHITE
  9534  004558  6EF7               	movwf	tblptrh,c
  9535  00455A                     	endif
  9536  00455A                     	if	1	;There are 3 active tblptr bytes
  9537  00455A  0E00               	movlw	low (_WHITE shr (0+16))
  9538  00455C  6EF8               	movwf	tblptru,c
  9539  00455E                     	endif
  9540  00455E  0009               	tblrd		*+
  9541  004560  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9542  004564  0009               	tblrd		*+
  9543  004566  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9544  00456A  0009               	tblrd		*+
  9545  00456C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9546  004570  000A               	tblrd		*-
  9547  004572  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9548  004576  0E60               	movlw	96
  9549  004578  ECA8  F026         	call	_glcdDrawRectangle
  9550                           
  9551                           ;main.c: 1746: I2C_Master_Init(100000);
  9552  00457C  0EA0               	movlw	160
  9553  00457E  0100               	movlb	0	; () banked
  9554  004580  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  9555  004582  0E86               	movlw	134
  9556  004584  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  9557  004586  0E01               	movlw	1
  9558  004588  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  9559  00458A  0E00               	movlw	0
  9560  00458C  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  9561  00458E  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
  9562  004592  0012               	return		;funcret
  9563  004594                     __end_of_drawSpacer:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           intcon	equ	0xFF2
  9570                           intcon3	equ	0xFF0
  9571                           postinc0	equ	0xFEE
  9572                           wreg	equ	0xFE8
  9573                           postdec1	equ	0xFE5
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _Nut_remain *****************
  9583 ;; Defined at:
  9584 ;;		line 1513 in file "main.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  time            2   42[BANK0 ] int 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;		None
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  1    wreg      void 
  9591 ;; Registers used:
  9592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;Total ram usage:        4 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    9
  9605 ;; This function calls:
  9606 ;;		_I2C_sendData
  9607 ;;		_drawNut
  9608 ;;		_lcdInst
  9609 ;;		_printf
  9610 ;; This function is called by:
  9611 ;;		_main
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           	psect	text15
  9616  005332                     __ptext15:
  9617                           	opt stack 0
  9618  005332                     _Nut_remain:
  9619                           	opt stack 21
  9620                           
  9621                           ;main.c: 1514: drawNut();
  9622                           
  9623                           ;incstack = 0
  9624  005332  ECCA  F022         	call	_drawNut	;wreg free
  9625                           
  9626                           ;main.c: 1515: _delay((unsigned long)((100)*(32000000/4000.0)));
  9627  005336  0E05               	movlw	5
  9628  005338  0100               	movlb	0	; () banked
  9629  00533A  6FF0               	movwf	(??_Nut_remain+1)& (0+255),b
  9630  00533C  0E0F               	movlw	15
  9631  00533E  6FEF               	movwf	??_Nut_remain& (0+255),b
  9632  005340  0EF1               	movlw	241
  9633  005342                     u7177:
  9634  005342  2EE8               	decfsz	wreg,f,c
  9635  005344  D7FE               	bra	u7177
  9636  005346  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9637  005348  D7FC               	bra	u7177
  9638  00534A  2FF0               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  9639  00534C  D7FA               	bra	u7177
  9640                           
  9641                           ;main.c: 1516: I2C_sendData('7');
  9642  00534E  0E37               	movlw	55
  9643  005350  EC7A  F030         	call	_I2C_sendData
  9644                           
  9645                           ;main.c: 1517: while(EndOfProgram!= 1 && N_spacingTime < time){
  9646  005354  D026               	goto	l760
  9647  005356                     
  9648                           ;main.c: 1518: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9649  005356  0E01               	movlw	1
  9650  005358  ECDF  F030         	call	_lcdInst
  9651  00535C  0E9C               	movlw	156
  9652  00535E  0100               	movlb	0	; () banked
  9653  005360  6FEF               	movwf	??_Nut_remain& (0+255),b
  9654  005362  0ED7               	movlw	215
  9655  005364                     u7187:
  9656  005364  2EE8               	decfsz	wreg,f,c
  9657  005366  D7FE               	bra	u7187
  9658  005368  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9659  00536A  D7FC               	bra	u7187
  9660                           
  9661                           ;main.c: 1519: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9662  00536C  0E80               	movlw	128
  9663  00536E  ECDF  F030         	call	_lcdInst
  9664  005372  0E34               	movlw	52
  9665  005374  0100               	movlb	0	; () banked
  9666  005376  6FEF               	movwf	??_Nut_remain& (0+255),b
  9667  005378  0EF1               	movlw	241
  9668  00537A                     u7197:
  9669  00537A  2EE8               	decfsz	wreg,f,c
  9670  00537C  D7FE               	bra	u7197
  9671  00537E  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9672  005380  D7FC               	bra	u7197
  9673  005382  D000               	nop2	
  9674                           
  9675                           ;main.c: 1520: N_spacingTime +=30;
  9676  005384  0E1E               	movlw	30
  9677  005386  0100               	movlb	0	; () banked
  9678  005388  279B               	addwf	_N_spacingTime& (0+255),f,b
  9679  00538A  0E00               	movlw	0
  9680  00538C  239C               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;main.c: 1521: printf("N:%d",N_counter);
  9684  00538E  0ED4               	movlw	low STR_67
  9685  005390  6FD1               	movwf	printf@f& (0+255),b
  9686  005392  0EFF               	movlw	high STR_67
  9687  005394  6FD2               	movwf	(printf@f+1)& (0+255),b
  9688  005396  C0A9  F0D3         	movff	_N_counter,?_printf+2
  9689  00539A  C0AA  F0D4         	movff	_N_counter+1,?_printf+3
  9690  00539E  EC2A  F019         	call	_printf	;wreg free
  9691  0053A2                     l760:
  9692  0053A2  0100               	movlb	0	; () banked
  9693  0053A4  05BB               	decf	_EndOfProgram& (0+255),w,b
  9694  0053A6  B4D8               	btfsc	status,2,c
  9695  0053A8  D00A               	goto	u4300
  9696                           
  9697                           ; BSR set to: 0
  9698  0053AA  51ED               	movf	Nut_remain@time& (0+255),w,b
  9699  0053AC  5D9B               	subwf	_N_spacingTime& (0+255),w,b
  9700  0053AE  519C               	movf	(_N_spacingTime+1)& (0+255),w,b
  9701  0053B0  0A80               	xorlw	128
  9702  0053B2  6FEF               	movwf	??_Nut_remain& (0+255),b
  9703  0053B4  51EE               	movf	(Nut_remain@time+1)& (0+255),w,b
  9704  0053B6  0A80               	xorlw	128
  9705  0053B8  59EF               	subwfb	??_Nut_remain& (0+255),w,b
  9706  0053BA  A0D8               	btfss	status,0,c
  9707  0053BC  D7CC               	goto	l761
  9708  0053BE                     u4300:
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;main.c: 1522: }
  9712                           ;main.c: 1523: N_remain = N_counter;
  9713                           
  9714                           ; BSR set to: 0
  9715  0053BE  C0A9  F0A3         	movff	_N_counter,_N_remain
  9716  0053C2  C0AA  F0A4         	movff	_N_counter+1,_N_remain+1
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;main.c: 1524: I2C_sendData('8');
  9720  0053C6  0E38               	movlw	56
  9721  0053C8  EC7A  F030         	call	_I2C_sendData
  9722                           
  9723                           ;main.c: 1525: if(EndOfProgram != 1){
  9724  0053CC  0100               	movlb	0	; () banked
  9725  0053CE  05BB               	decf	_EndOfProgram& (0+255),w,b
  9726  0053D0  B4D8               	btfsc	status,2,c
  9727  0053D2  0012               	return	
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;main.c: 1526: _delay((unsigned long)((100)*(32000000/4000.0)));
  9731  0053D4  0E05               	movlw	5
  9732  0053D6  0100               	movlb	0	; () banked
  9733  0053D8  6FF0               	movwf	(??_Nut_remain+1)& (0+255),b
  9734  0053DA  0E0F               	movlw	15
  9735  0053DC  6FEF               	movwf	??_Nut_remain& (0+255),b
  9736  0053DE  0EF1               	movlw	241
  9737  0053E0                     u7207:
  9738  0053E0  2EE8               	decfsz	wreg,f,c
  9739  0053E2  D7FE               	bra	u7207
  9740  0053E4  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9741  0053E6  D7FC               	bra	u7207
  9742  0053E8  2FF0               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  9743  0053EA  D7FA               	bra	u7207
  9744  0053EC  0012               	return	
  9745  0053EE                     __end_of_Nut_remain:
  9746                           	opt stack 0
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           intcon	equ	0xFF2
  9752                           intcon3	equ	0xFF0
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _Nut_dispense *****************
  9765 ;; Defined at:
  9766 ;;		line 1314 in file "main.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  N_max           2   42[BANK0 ] int 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        4 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    9
  9787 ;; This function calls:
  9788 ;;		_I2C_sendData
  9789 ;;		_drawNut
  9790 ;;		_lcdInst
  9791 ;;		_printf
  9792 ;; This function is called by:
  9793 ;;		_main
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text16
  9798  0055EA                     __ptext16:
  9799                           	opt stack 0
  9800  0055EA                     _Nut_dispense:
  9801                           	opt stack 21
  9802                           
  9803                           ;main.c: 1315: if (N_max == 0){
  9804                           
  9805                           ;incstack = 0
  9806  0055EA  0100               	movlb	0	; () banked
  9807  0055EC  51ED               	movf	Nut_dispense@N_max& (0+255),w,b
  9808  0055EE  11EE               	iorwf	(Nut_dispense@N_max+1)& (0+255),w,b
  9809  0055F0  B4D8               	btfsc	status,2,c
  9810  0055F2  0012               	return	
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;main.c: 1317: }
  9814                           ;main.c: 1318: drawNut();
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;main.c: 1316: return;
  9820  0055F4  ECCA  F022         	call	_drawNut	;wreg free
  9821                           
  9822                           ;main.c: 1319: _delay((unsigned long)((100)*(32000000/4000.0)));
  9823  0055F8  0E05               	movlw	5
  9824  0055FA  0100               	movlb	0	; () banked
  9825  0055FC  6FF0               	movwf	(??_Nut_dispense+1)& (0+255),b
  9826  0055FE  0E0F               	movlw	15
  9827  005600  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9828  005602  0EF1               	movlw	241
  9829  005604                     u7217:
  9830  005604  2EE8               	decfsz	wreg,f,c
  9831  005606  D7FE               	bra	u7217
  9832  005608  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9833  00560A  D7FC               	bra	u7217
  9834  00560C  2FF0               	decfsz	(??_Nut_dispense+1)& (0+255),f,b
  9835  00560E  D7FA               	bra	u7217
  9836                           
  9837                           ;main.c: 1320: I2C_sendData('7');
  9838  005610  0E37               	movlw	55
  9839  005612  EC7A  F030         	call	_I2C_sendData
  9840                           
  9841                           ;main.c: 1321: N_counter = 0;
  9842  005616  0E00               	movlw	0
  9843  005618  0100               	movlb	0	; () banked
  9844  00561A  6FAA               	movwf	(_N_counter+1)& (0+255),b
  9845  00561C  0E00               	movlw	0
  9846  00561E  6FA9               	movwf	_N_counter& (0+255),b
  9847                           
  9848                           ;main.c: 1322: while(NeedToCloseLid != 1 && N_counter < N_max){
  9849  005620  D022               	goto	l686
  9850  005622                     
  9851                           ; BSR set to: 0
  9852                           ;main.c: 1324: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9853                           
  9854                           ; BSR set to: 0
  9855  005622  0E80               	movlw	128
  9856  005624  ECDF  F030         	call	_lcdInst
  9857  005628  0E34               	movlw	52
  9858  00562A  0100               	movlb	0	; () banked
  9859  00562C  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9860  00562E  0EF1               	movlw	241
  9861  005630                     u7227:
  9862  005630  2EE8               	decfsz	wreg,f,c
  9863  005632  D7FE               	bra	u7227
  9864  005634  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9865  005636  D7FC               	bra	u7227
  9866  005638  D000               	nop2	
  9867                           
  9868                           ;main.c: 1325: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9869  00563A  0E01               	movlw	1
  9870  00563C  ECDF  F030         	call	_lcdInst
  9871  005640  0E9C               	movlw	156
  9872  005642  0100               	movlb	0	; () banked
  9873  005644  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9874  005646  0ED7               	movlw	215
  9875  005648                     u7237:
  9876  005648  2EE8               	decfsz	wreg,f,c
  9877  00564A  D7FE               	bra	u7237
  9878  00564C  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9879  00564E  D7FC               	bra	u7237
  9880                           
  9881                           ;main.c: 1326: printf("N:%d",N_counter);
  9882  005650  0ED4               	movlw	low STR_67
  9883  005652  0100               	movlb	0	; () banked
  9884  005654  6FD1               	movwf	printf@f& (0+255),b
  9885  005656  0EFF               	movlw	high STR_67
  9886  005658  6FD2               	movwf	(printf@f+1)& (0+255),b
  9887  00565A  C0A9  F0D3         	movff	_N_counter,?_printf+2
  9888  00565E  C0AA  F0D4         	movff	_N_counter+1,?_printf+3
  9889  005662  EC2A  F019         	call	_printf	;wreg free
  9890  005666                     l686:
  9891  005666  0100               	movlb	0	; () banked
  9892  005668  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  9893  00566A  B4D8               	btfsc	status,2,c
  9894  00566C  D00A               	goto	u4220
  9895                           
  9896                           ; BSR set to: 0
  9897  00566E  51ED               	movf	Nut_dispense@N_max& (0+255),w,b
  9898  005670  5DA9               	subwf	_N_counter& (0+255),w,b
  9899  005672  51AA               	movf	(_N_counter+1)& (0+255),w,b
  9900  005674  0A80               	xorlw	128
  9901  005676  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9902  005678  51EE               	movf	(Nut_dispense@N_max+1)& (0+255),w,b
  9903  00567A  0A80               	xorlw	128
  9904  00567C  59EF               	subwfb	??_Nut_dispense& (0+255),w,b
  9905  00567E  A0D8               	btfss	status,0,c
  9906  005680  D7D0               	goto	l687
  9907  005682                     u4220:
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;main.c: 1327: }
  9911                           ;main.c: 1328: I2C_sendData('8');
  9912                           
  9913                           ; BSR set to: 0
  9914                           
  9915                           ; BSR set to: 0
  9916  005682  0E38               	movlw	56
  9917  005684  EC7A  F030         	call	_I2C_sendData
  9918  005688  0012               	return		;funcret
  9919  00568A                     __end_of_Nut_dispense:
  9920                           	opt stack 0
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           intcon	equ	0xFF2
  9926                           intcon3	equ	0xFF0
  9927                           postinc0	equ	0xFEE
  9928                           wreg	equ	0xFE8
  9929                           postdec1	equ	0xFE5
  9930                           fsr1l	equ	0xFE1
  9931                           indf2	equ	0xFDF
  9932                           postinc2	equ	0xFDE
  9933                           postdec2	equ	0xFDD
  9934                           fsr2h	equ	0xFDA
  9935                           fsr2l	equ	0xFD9
  9936                           status	equ	0xFD8
  9937                           
  9938 ;; *************** function _drawNut *****************
  9939 ;; Defined at:
  9940 ;;		line 1699 in file "main.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;		None
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;		None
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      void 
  9947 ;; Registers used:
  9948 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9958 ;;Total ram usage:        1 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; Hardware stack levels required when called:    8
  9961 ;; This function calls:
  9962 ;;		_I2C_Master_Init
  9963 ;;		_glcdDrawRectangle
  9964 ;;		_spiInit
  9965 ;; This function is called by:
  9966 ;;		_Nut_dispense
  9967 ;;		_Nut_remain
  9968 ;;		_nut_washer_remain
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           	psect	text17
  9973  004594                     __ptext17:
  9974                           	opt stack 0
  9975  004594                     _drawNut:
  9976                           	opt stack 21
  9977                           
  9978                           ;main.c: 1700: spiInit(4);
  9979                           
  9980                           ;incstack = 0
  9981  004594  0E04               	movlw	4
  9982  004596  ECF1  F02F         	call	_spiInit
  9983                           
  9984                           ;main.c: 1701: _delay((unsigned long)((20)*(32000000/4000.0)));
  9985  00459A  0ED0               	movlw	208
  9986  00459C  0100               	movlb	0	; () banked
  9987  00459E  6FE4               	movwf	??_drawNut& (0+255),b
  9988  0045A0  0EC9               	movlw	201
  9989  0045A2                     u7247:
  9990  0045A2  2EE8               	decfsz	wreg,f,c
  9991  0045A4  D7FE               	bra	u7247
  9992  0045A6  2FE4               	decfsz	??_drawNut& (0+255),f,b
  9993  0045A8  D7FC               	bra	u7247
  9994  0045AA  D000               	nop2	
  9995                           
  9996                           ;main.c: 1702: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  9997  0045AC  0EE9               	movlw	low _GLCD_SIZE_HORZ
  9998  0045AE  6EF6               	movwf	tblptrl,c
  9999  0045B0                     	if	1	;There is more than 1 active tblptr byte
 10000  0045B0  0EFC               	movlw	high _GLCD_SIZE_HORZ
 10001  0045B2  6EF7               	movwf	tblptrh,c
 10002  0045B4                     	endif
 10003  0045B4                     	if	1	;There are 3 active tblptr bytes
 10004  0045B4  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
 10005  0045B6  6EF8               	movwf	tblptru,c
 10006  0045B8                     	endif
 10007  0045B8  0008               	tblrd		*
 10008  0045BA  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
 10009  0045BE  0E00               	movlw	0
 10010  0045C0  0100               	movlb	0	; () banked
 10011  0045C2  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10012  0045C4  0EE8               	movlw	low _GLCD_SIZE_VERT
 10013  0045C6  6EF6               	movwf	tblptrl,c
 10014  0045C8                     	if	1	;There is more than 1 active tblptr byte
 10015  0045C8  0EFC               	movlw	high _GLCD_SIZE_VERT
 10016  0045CA  6EF7               	movwf	tblptrh,c
 10017  0045CC                     	endif
 10018  0045CC                     	if	1	;There are 3 active tblptr bytes
 10019  0045CC  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
 10020  0045CE  6EF8               	movwf	tblptru,c
 10021  0045D0                     	endif
 10022  0045D0  0008               	tblrd		*
 10023  0045D2  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
 10024  0045D6  0EA1               	movlw	low _BLACK
 10025  0045D8  6EF6               	movwf	tblptrl,c
 10026  0045DA                     	if	1	;There is more than 1 active tblptr byte
 10027  0045DA  0EFC               	movlw	high _BLACK
 10028  0045DC  6EF7               	movwf	tblptrh,c
 10029  0045DE                     	endif
 10030  0045DE                     	if	1	;There are 3 active tblptr bytes
 10031  0045DE  0E00               	movlw	low (_BLACK shr (0+16))
 10032  0045E0  6EF8               	movwf	tblptru,c
 10033  0045E2                     	endif
 10034  0045E2  0009               	tblrd		*+
 10035  0045E4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10036  0045E8  0009               	tblrd		*+
 10037  0045EA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10038  0045EE  0009               	tblrd		*+
 10039  0045F0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10040  0045F4  000A               	tblrd		*-
 10041  0045F6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10042  0045FA  0E00               	movlw	0
 10043  0045FC  ECA8  F026         	call	_glcdDrawRectangle
 10044                           
 10045                           ;main.c: 1703: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
 10046  004600  0E38               	movlw	56
 10047  004602  0100               	movlb	0	; () banked
 10048  004604  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10049  004606  0E38               	movlw	56
 10050  004608  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10051  00460A  0E44               	movlw	68
 10052  00460C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10053  00460E  0E99               	movlw	low _WHITE
 10054  004610  6EF6               	movwf	tblptrl,c
 10055  004612                     	if	1	;There is more than 1 active tblptr byte
 10056  004612  0EFC               	movlw	high _WHITE
 10057  004614  6EF7               	movwf	tblptrh,c
 10058  004616                     	endif
 10059  004616                     	if	1	;There are 3 active tblptr bytes
 10060  004616  0E00               	movlw	low (_WHITE shr (0+16))
 10061  004618  6EF8               	movwf	tblptru,c
 10062  00461A                     	endif
 10063  00461A  0009               	tblrd		*+
 10064  00461C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10065  004620  0009               	tblrd		*+
 10066  004622  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10067  004626  0009               	tblrd		*+
 10068  004628  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10069  00462C  000A               	tblrd		*-
 10070  00462E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10071  004632  0E34               	movlw	52
 10072  004634  ECA8  F026         	call	_glcdDrawRectangle
 10073                           
 10074                           ;main.c: 1704: glcdDrawRectangle(14*4,15*4, 13*4, 14*4, WHITE);
 10075  004638  0E3C               	movlw	60
 10076  00463A  0100               	movlb	0	; () banked
 10077  00463C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10078  00463E  0E34               	movlw	52
 10079  004640  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10080  004642  0E38               	movlw	56
 10081  004644  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10082  004646  0E99               	movlw	low _WHITE
 10083  004648  6EF6               	movwf	tblptrl,c
 10084  00464A                     	if	1	;There is more than 1 active tblptr byte
 10085  00464A  0EFC               	movlw	high _WHITE
 10086  00464C  6EF7               	movwf	tblptrh,c
 10087  00464E                     	endif
 10088  00464E                     	if	1	;There are 3 active tblptr bytes
 10089  00464E  0E00               	movlw	low (_WHITE shr (0+16))
 10090  004650  6EF8               	movwf	tblptru,c
 10091  004652                     	endif
 10092  004652  0009               	tblrd		*+
 10093  004654  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10094  004658  0009               	tblrd		*+
 10095  00465A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10096  00465E  0009               	tblrd		*+
 10097  004660  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10098  004664  000A               	tblrd		*-
 10099  004666  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10100  00466A  0E38               	movlw	56
 10101  00466C  ECA8  F026         	call	_glcdDrawRectangle
 10102                           
 10103                           ;main.c: 1705: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
 10104  004670  0E1C               	movlw	28
 10105  004672  0100               	movlb	0	; () banked
 10106  004674  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10107  004676  0E2C               	movlw	44
 10108  004678  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10109  00467A  0E34               	movlw	52
 10110  00467C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10111  00467E  0E99               	movlw	low _WHITE
 10112  004680  6EF6               	movwf	tblptrl,c
 10113  004682                     	if	1	;There is more than 1 active tblptr byte
 10114  004682  0EFC               	movlw	high _WHITE
 10115  004684  6EF7               	movwf	tblptrh,c
 10116  004686                     	endif
 10117  004686                     	if	1	;There are 3 active tblptr bytes
 10118  004686  0E00               	movlw	low (_WHITE shr (0+16))
 10119  004688  6EF8               	movwf	tblptru,c
 10120  00468A                     	endif
 10121  00468A  0009               	tblrd		*+
 10122  00468C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10123  004690  0009               	tblrd		*+
 10124  004692  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10125  004696  0009               	tblrd		*+
 10126  004698  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10127  00469C  000A               	tblrd		*-
 10128  00469E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10129  0046A2  0E18               	movlw	24
 10130  0046A4  ECA8  F026         	call	_glcdDrawRectangle
 10131                           
 10132                           ;main.c: 1707: glcdDrawRectangle(15*4,18*4, 12*4, 13*4, WHITE);
 10133  0046A8  0E48               	movlw	72
 10134  0046AA  0100               	movlb	0	; () banked
 10135  0046AC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10136  0046AE  0E30               	movlw	48
 10137  0046B0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10138  0046B2  0E34               	movlw	52
 10139  0046B4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10140  0046B6  0E99               	movlw	low _WHITE
 10141  0046B8  6EF6               	movwf	tblptrl,c
 10142  0046BA                     	if	1	;There is more than 1 active tblptr byte
 10143  0046BA  0EFC               	movlw	high _WHITE
 10144  0046BC  6EF7               	movwf	tblptrh,c
 10145  0046BE                     	endif
 10146  0046BE                     	if	1	;There are 3 active tblptr bytes
 10147  0046BE  0E00               	movlw	low (_WHITE shr (0+16))
 10148  0046C0  6EF8               	movwf	tblptru,c
 10149  0046C2                     	endif
 10150  0046C2  0009               	tblrd		*+
 10151  0046C4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10152  0046C8  0009               	tblrd		*+
 10153  0046CA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10154  0046CE  0009               	tblrd		*+
 10155  0046D0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10156  0046D4  000A               	tblrd		*-
 10157  0046D6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10158  0046DA  0E3C               	movlw	60
 10159  0046DC  ECA8  F026         	call	_glcdDrawRectangle
 10160                           
 10161                           ;main.c: 1708: glcdDrawRectangle(18*4,19*4, 13*4, 14*4, WHITE);
 10162  0046E0  0E4C               	movlw	76
 10163  0046E2  0100               	movlb	0	; () banked
 10164  0046E4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10165  0046E6  0E34               	movlw	52
 10166  0046E8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10167  0046EA  0E38               	movlw	56
 10168  0046EC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10169  0046EE  0E99               	movlw	low _WHITE
 10170  0046F0  6EF6               	movwf	tblptrl,c
 10171  0046F2                     	if	1	;There is more than 1 active tblptr byte
 10172  0046F2  0EFC               	movlw	high _WHITE
 10173  0046F4  6EF7               	movwf	tblptrh,c
 10174  0046F6                     	endif
 10175  0046F6                     	if	1	;There are 3 active tblptr bytes
 10176  0046F6  0E00               	movlw	low (_WHITE shr (0+16))
 10177  0046F8  6EF8               	movwf	tblptru,c
 10178  0046FA                     	endif
 10179  0046FA  0009               	tblrd		*+
 10180  0046FC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10181  004700  0009               	tblrd		*+
 10182  004702  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10183  004706  0009               	tblrd		*+
 10184  004708  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10185  00470C  000A               	tblrd		*-
 10186  00470E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10187  004712  0E48               	movlw	72
 10188  004714  ECA8  F026         	call	_glcdDrawRectangle
 10189                           
 10190                           ;main.c: 1709: glcdDrawRectangle(19*4,20*4, 14*4, 17*4, WHITE);
 10191  004718  0E50               	movlw	80
 10192  00471A  0100               	movlb	0	; () banked
 10193  00471C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10194  00471E  0E38               	movlw	56
 10195  004720  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10196  004722  0E44               	movlw	68
 10197  004724  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10198  004726  0E99               	movlw	low _WHITE
 10199  004728  6EF6               	movwf	tblptrl,c
 10200  00472A                     	if	1	;There is more than 1 active tblptr byte
 10201  00472A  0EFC               	movlw	high _WHITE
 10202  00472C  6EF7               	movwf	tblptrh,c
 10203  00472E                     	endif
 10204  00472E                     	if	1	;There are 3 active tblptr bytes
 10205  00472E  0E00               	movlw	low (_WHITE shr (0+16))
 10206  004730  6EF8               	movwf	tblptru,c
 10207  004732                     	endif
 10208  004732  0009               	tblrd		*+
 10209  004734  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10210  004738  0009               	tblrd		*+
 10211  00473A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10212  00473E  0009               	tblrd		*+
 10213  004740  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10214  004744  000A               	tblrd		*-
 10215  004746  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10216  00474A  0E4C               	movlw	76
 10217  00474C  ECA8  F026         	call	_glcdDrawRectangle
 10218                           
 10219                           ;main.c: 1710: glcdDrawRectangle(18*4,19*4, 17*4, 18*4, WHITE);
 10220  004750  0E4C               	movlw	76
 10221  004752  0100               	movlb	0	; () banked
 10222  004754  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10223  004756  0E44               	movlw	68
 10224  004758  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10225  00475A  0E48               	movlw	72
 10226  00475C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10227  00475E  0E99               	movlw	low _WHITE
 10228  004760  6EF6               	movwf	tblptrl,c
 10229  004762                     	if	1	;There is more than 1 active tblptr byte
 10230  004762  0EFC               	movlw	high _WHITE
 10231  004764  6EF7               	movwf	tblptrh,c
 10232  004766                     	endif
 10233  004766                     	if	1	;There are 3 active tblptr bytes
 10234  004766  0E00               	movlw	low (_WHITE shr (0+16))
 10235  004768  6EF8               	movwf	tblptru,c
 10236  00476A                     	endif
 10237  00476A  0009               	tblrd		*+
 10238  00476C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10239  004770  0009               	tblrd		*+
 10240  004772  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10241  004776  0009               	tblrd		*+
 10242  004778  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10243  00477C  000A               	tblrd		*-
 10244  00477E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10245  004782  0E48               	movlw	72
 10246  004784  ECA8  F026         	call	_glcdDrawRectangle
 10247                           
 10248                           ;main.c: 1712: glcdDrawRectangle(15*4,18*4, 18*4, 19*4, WHITE);
 10249  004788  0E48               	movlw	72
 10250  00478A  0100               	movlb	0	; () banked
 10251  00478C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10252  00478E  0E48               	movlw	72
 10253  004790  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10254  004792  0E4C               	movlw	76
 10255  004794  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10256  004796  0E99               	movlw	low _WHITE
 10257  004798  6EF6               	movwf	tblptrl,c
 10258  00479A                     	if	1	;There is more than 1 active tblptr byte
 10259  00479A  0EFC               	movlw	high _WHITE
 10260  00479C  6EF7               	movwf	tblptrh,c
 10261  00479E                     	endif
 10262  00479E                     	if	1	;There are 3 active tblptr bytes
 10263  00479E  0E00               	movlw	low (_WHITE shr (0+16))
 10264  0047A0  6EF8               	movwf	tblptru,c
 10265  0047A2                     	endif
 10266  0047A2  0009               	tblrd		*+
 10267  0047A4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10268  0047A8  0009               	tblrd		*+
 10269  0047AA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10270  0047AE  0009               	tblrd		*+
 10271  0047B0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10272  0047B4  000A               	tblrd		*-
 10273  0047B6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10274  0047BA  0E3C               	movlw	60
 10275  0047BC  ECA8  F026         	call	_glcdDrawRectangle
 10276                           
 10277                           ;main.c: 1713: glcdDrawRectangle(14*4,15*4, 16*4, 17*4, WHITE);
 10278  0047C0  0E3C               	movlw	60
 10279  0047C2  0100               	movlb	0	; () banked
 10280  0047C4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10281  0047C6  0E40               	movlw	64
 10282  0047C8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10283  0047CA  0E44               	movlw	68
 10284  0047CC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10285  0047CE  0E99               	movlw	low _WHITE
 10286  0047D0  6EF6               	movwf	tblptrl,c
 10287  0047D2                     	if	1	;There is more than 1 active tblptr byte
 10288  0047D2  0EFC               	movlw	high _WHITE
 10289  0047D4  6EF7               	movwf	tblptrh,c
 10290  0047D6                     	endif
 10291  0047D6                     	if	1	;There are 3 active tblptr bytes
 10292  0047D6  0E00               	movlw	low (_WHITE shr (0+16))
 10293  0047D8  6EF8               	movwf	tblptru,c
 10294  0047DA                     	endif
 10295  0047DA  0009               	tblrd		*+
 10296  0047DC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10297  0047E0  0009               	tblrd		*+
 10298  0047E2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10299  0047E6  0009               	tblrd		*+
 10300  0047E8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10301  0047EC  000A               	tblrd		*-
 10302  0047EE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10303  0047F2  0E38               	movlw	56
 10304  0047F4  ECA8  F026         	call	_glcdDrawRectangle
 10305                           
 10306                           ;main.c: 1714: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
 10307  0047F8  0E38               	movlw	56
 10308  0047FA  0100               	movlb	0	; () banked
 10309  0047FC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10310  0047FE  0E38               	movlw	56
 10311  004800  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10312  004802  0E44               	movlw	68
 10313  004804  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10314  004806  0E99               	movlw	low _WHITE
 10315  004808  6EF6               	movwf	tblptrl,c
 10316  00480A                     	if	1	;There is more than 1 active tblptr byte
 10317  00480A  0EFC               	movlw	high _WHITE
 10318  00480C  6EF7               	movwf	tblptrh,c
 10319  00480E                     	endif
 10320  00480E                     	if	1	;There are 3 active tblptr bytes
 10321  00480E  0E00               	movlw	low (_WHITE shr (0+16))
 10322  004810  6EF8               	movwf	tblptru,c
 10323  004812                     	endif
 10324  004812  0009               	tblrd		*+
 10325  004814  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10326  004818  0009               	tblrd		*+
 10327  00481A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10328  00481E  0009               	tblrd		*+
 10329  004820  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10330  004824  000A               	tblrd		*-
 10331  004826  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10332  00482A  0E34               	movlw	52
 10333  00482C  ECA8  F026         	call	_glcdDrawRectangle
 10334                           
 10335                           ;main.c: 1717: glcdDrawRectangle(16*4,17*4, 15*4, 16*4, WHITE);
 10336  004830  0E44               	movlw	68
 10337  004832  0100               	movlb	0	; () banked
 10338  004834  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10339  004836  0E3C               	movlw	60
 10340  004838  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10341  00483A  0E40               	movlw	64
 10342  00483C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10343  00483E  0E99               	movlw	low _WHITE
 10344  004840  6EF6               	movwf	tblptrl,c
 10345  004842                     	if	1	;There is more than 1 active tblptr byte
 10346  004842  0EFC               	movlw	high _WHITE
 10347  004844  6EF7               	movwf	tblptrh,c
 10348  004846                     	endif
 10349  004846                     	if	1	;There are 3 active tblptr bytes
 10350  004846  0E00               	movlw	low (_WHITE shr (0+16))
 10351  004848  6EF8               	movwf	tblptru,c
 10352  00484A                     	endif
 10353  00484A  0009               	tblrd		*+
 10354  00484C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10355  004850  0009               	tblrd		*+
 10356  004852  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10357  004856  0009               	tblrd		*+
 10358  004858  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10359  00485C  000A               	tblrd		*-
 10360  00485E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10361  004862  0E40               	movlw	64
 10362  004864  ECA8  F026         	call	_glcdDrawRectangle
 10363                           
 10364                           ;main.c: 1718: I2C_Master_Init(100000);
 10365  004868  0EA0               	movlw	160
 10366  00486A  0100               	movlb	0	; () banked
 10367  00486C  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 10368  00486E  0E86               	movlw	134
 10369  004870  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 10370  004872  0E01               	movlw	1
 10371  004874  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 10372  004876  0E00               	movlw	0
 10373  004878  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 10374  00487A  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
 10375  00487E  0012               	return		;funcret
 10376  004880                     __end_of_drawNut:
 10377                           	opt stack 0
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           intcon	equ	0xFF2
 10383                           intcon3	equ	0xFF0
 10384                           postinc0	equ	0xFEE
 10385                           wreg	equ	0xFE8
 10386                           postdec1	equ	0xFE5
 10387                           fsr1l	equ	0xFE1
 10388                           indf2	equ	0xFDF
 10389                           postinc2	equ	0xFDE
 10390                           postdec2	equ	0xFDD
 10391                           fsr2h	equ	0xFDA
 10392                           fsr2l	equ	0xFD9
 10393                           status	equ	0xFD8
 10394                           
 10395 ;; *************** function _I2C_init *****************
 10396 ;; Defined at:
 10397 ;;		line 1280 in file "main.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		wreg, status,2, status,0, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;Total ram usage:        0 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    6
 10418 ;; This function calls:
 10419 ;;		_I2C_Master_Init
 10420 ;;		_I2C_Master_Start
 10421 ;;		_I2C_Master_Stop
 10422 ;;		_I2C_Master_Write
 10423 ;; This function is called by:
 10424 ;;		_main
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           	psect	text18
 10429  00601E                     __ptext18:
 10430                           	opt stack 0
 10431  00601E                     _I2C_init:
 10432                           	opt stack 24
 10433                           
 10434                           ;main.c: 1281: I2C_Master_Init(100000);
 10435                           
 10436                           ;incstack = 0
 10437  00601E  0EA0               	movlw	160
 10438  006020  0100               	movlb	0	; () banked
 10439  006022  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 10440  006024  0E86               	movlw	134
 10441  006026  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 10442  006028  0E01               	movlw	1
 10443  00602A  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 10444  00602C  0E00               	movlw	0
 10445  00602E  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 10446  006030  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
 10447                           
 10448                           ;main.c: 1282: I2C_Master_Start();
 10449  006034  EC3A  F031         	call	_I2C_Master_Start	;wreg free
 10450                           
 10451                           ;main.c: 1283: I2C_Master_Write(0b00010000);
 10452  006038  0E00               	movlw	0
 10453  00603A  0100               	movlb	0	; () banked
 10454  00603C  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10455  00603E  0E10               	movlw	16
 10456  006040  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 10457  006042  EC28  F031         	call	_I2C_Master_Write	;wreg free
 10458                           
 10459                           ;main.c: 1284: I2C_Master_Stop();
 10460  006046  EC36  F031         	call	_I2C_Master_Stop	;wreg free
 10461  00604A  0012               	return	
 10462  00604C                     __end_of_I2C_init:
 10463                           	opt stack 0
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           intcon	equ	0xFF2
 10469                           intcon3	equ	0xFF0
 10470                           postinc0	equ	0xFEE
 10471                           wreg	equ	0xFE8
 10472                           postdec1	equ	0xFE5
 10473                           fsr1l	equ	0xFE1
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           postdec2	equ	0xFDD
 10477                           fsr2h	equ	0xFDA
 10478                           fsr2l	equ	0xFD9
 10479                           status	equ	0xFD8
 10480                           
 10481 ;; *************** function _I2C_Master_Read *****************
 10482 ;; Defined at:
 10483 ;;		line 120 in file "I2C.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  ackBit          1    wreg     unsigned char 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  ackBit          1    1[BANK0 ] unsigned char 
 10488 ;;  receivedByte    1    2[BANK0 ] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      unsigned char 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;Total ram usage:        2 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		_I2C_Master_Wait
 10507 ;; This function is called by:
 10508 ;;		_main
 10509 ;;		_get_RTC_initial
 10510 ;;		_get_RTC_final
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           	psect	text19
 10515  00607A                     __ptext19:
 10516                           	opt stack 0
 10517  00607A                     _I2C_Master_Read:
 10518                           	opt stack 25
 10519                           
 10520                           ;incstack = 0
 10521                           ;I2C_Master_Read@ackBit stored from wreg
 10522  00607A  0100               	movlb	0	; () banked
 10523  00607C  6FC4               	movwf	I2C_Master_Read@ackBit& (0+255),b
 10524                           
 10525                           ;I2C.c: 130: unsigned char receivedByte;
 10526                           ;I2C.c: 132: I2C_Master_Wait();
 10527  00607E  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 10528                           
 10529                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 10530  006082  86C5               	bsf	4037,3,c	;volatile
 10531                           
 10532                           ;I2C.c: 135: I2C_Master_Wait();
 10533  006084  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 10534                           
 10535                           ;I2C.c: 136: receivedByte = SSPBUF;
 10536  006088  CFC9 F0C5          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 10537                           
 10538                           ;I2C.c: 138: I2C_Master_Wait();
 10539  00608C  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 10540                           
 10541                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 10542  006090  0100               	movlb	0	; () banked
 10543  006092  B1C4               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
 10544  006094  D002               	bra	u4165
 10545  006096  9AC5               	bcf	4037,5,c	;volatile
 10546  006098  D001               	bra	u4166
 10547  00609A                     u4165:
 10548  00609A  8AC5               	bsf	4037,5,c	;volatile
 10549  00609C                     u4166:
 10550                           
 10551                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 10552  00609C  88C5               	bsf	4037,4,c	;volatile
 10553                           
 10554                           ;I2C.c: 142: return receivedByte;
 10555  00609E  0100               	movlb	0	; () banked
 10556  0060A0  51C5               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
 10557  0060A2  0012               	return	
 10558  0060A4                     __end_of_I2C_Master_Read:
 10559                           	opt stack 0
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           intcon	equ	0xFF2
 10565                           intcon3	equ	0xFF0
 10566                           postinc0	equ	0xFEE
 10567                           wreg	equ	0xFE8
 10568                           postdec1	equ	0xFE5
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _Bolt_remain *****************
 10578 ;; Defined at:
 10579 ;;		line 1495 in file "main.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  time            2   42[BANK0 ] int 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;Total ram usage:        4 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    9
 10600 ;; This function calls:
 10601 ;;		_I2C_sendData
 10602 ;;		_drawBolt
 10603 ;;		_lcdInst
 10604 ;;		_printf
 10605 ;; This function is called by:
 10606 ;;		_main
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text20
 10611  0053EE                     __ptext20:
 10612                           	opt stack 0
 10613  0053EE                     _Bolt_remain:
 10614                           	opt stack 21
 10615                           
 10616                           ;main.c: 1496: drawBolt();
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;incstack = 0
 10620  0053EE  EC82  F027         	call	_drawBolt	;wreg free
 10621                           
 10622                           ;main.c: 1497: _delay((unsigned long)((100)*(32000000/4000.0)));
 10623  0053F2  0E05               	movlw	5
 10624  0053F4  0100               	movlb	0	; () banked
 10625  0053F6  6FF0               	movwf	(??_Bolt_remain+1)& (0+255),b
 10626  0053F8  0E0F               	movlw	15
 10627  0053FA  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10628  0053FC  0EF1               	movlw	241
 10629  0053FE                     u7257:
 10630  0053FE  2EE8               	decfsz	wreg,f,c
 10631  005400  D7FE               	bra	u7257
 10632  005402  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10633  005404  D7FC               	bra	u7257
 10634  005406  2FF0               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
 10635  005408  D7FA               	bra	u7257
 10636                           
 10637                           ;main.c: 1498: I2C_sendData('5');
 10638  00540A  0E35               	movlw	53
 10639  00540C  EC7A  F030         	call	_I2C_sendData
 10640                           
 10641                           ;main.c: 1499: while(EndOfProgram!= 1 && B_spacingTime < time){
 10642  005410  D026               	goto	l751
 10643  005412                     
 10644                           ;main.c: 1500: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10645  005412  0E80               	movlw	128
 10646  005414  ECDF  F030         	call	_lcdInst
 10647  005418  0E34               	movlw	52
 10648  00541A  0100               	movlb	0	; () banked
 10649  00541C  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10650  00541E  0EF1               	movlw	241
 10651  005420                     u7267:
 10652  005420  2EE8               	decfsz	wreg,f,c
 10653  005422  D7FE               	bra	u7267
 10654  005424  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10655  005426  D7FC               	bra	u7267
 10656  005428  D000               	nop2	
 10657                           
 10658                           ;main.c: 1501: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10659  00542A  0E01               	movlw	1
 10660  00542C  ECDF  F030         	call	_lcdInst
 10661  005430  0E9C               	movlw	156
 10662  005432  0100               	movlb	0	; () banked
 10663  005434  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10664  005436  0ED7               	movlw	215
 10665  005438                     u7277:
 10666  005438  2EE8               	decfsz	wreg,f,c
 10667  00543A  D7FE               	bra	u7277
 10668  00543C  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10669  00543E  D7FC               	bra	u7277
 10670                           
 10671                           ;main.c: 1502: B_spacingTime +=30;
 10672  005440  0E1E               	movlw	30
 10673  005442  0100               	movlb	0	; () banked
 10674  005444  279D               	addwf	_B_spacingTime& (0+255),f,b
 10675  005446  0E00               	movlw	0
 10676  005448  239E               	addwfc	(_B_spacingTime+1)& (0+255),f,b
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;main.c: 1503: printf("B:%d",B_counter);
 10680  00544A  0ECF               	movlw	low STR_66
 10681  00544C  6FD1               	movwf	printf@f& (0+255),b
 10682  00544E  0EFF               	movlw	high STR_66
 10683  005450  6FD2               	movwf	(printf@f+1)& (0+255),b
 10684  005452  C0AD  F0D3         	movff	_B_counter,?_printf+2
 10685  005456  C0AE  F0D4         	movff	_B_counter+1,?_printf+3
 10686  00545A  EC2A  F019         	call	_printf	;wreg free
 10687  00545E                     l751:
 10688  00545E  0100               	movlb	0	; () banked
 10689  005460  05BB               	decf	_EndOfProgram& (0+255),w,b
 10690  005462  B4D8               	btfsc	status,2,c
 10691  005464  D00A               	goto	u4390
 10692                           
 10693                           ; BSR set to: 0
 10694  005466  51ED               	movf	Bolt_remain@time& (0+255),w,b
 10695  005468  5D9D               	subwf	_B_spacingTime& (0+255),w,b
 10696  00546A  519E               	movf	(_B_spacingTime+1)& (0+255),w,b
 10697  00546C  0A80               	xorlw	128
 10698  00546E  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10699  005470  51EE               	movf	(Bolt_remain@time+1)& (0+255),w,b
 10700  005472  0A80               	xorlw	128
 10701  005474  59EF               	subwfb	??_Bolt_remain& (0+255),w,b
 10702  005476  A0D8               	btfss	status,0,c
 10703  005478  D7CC               	goto	l752
 10704  00547A                     u4390:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;main.c: 1504: }
 10708                           ;main.c: 1505: B_remain = B_counter;
 10709                           
 10710                           ; BSR set to: 0
 10711  00547A  C0AD  F0A5         	movff	_B_counter,_B_remain
 10712  00547E  C0AE  F0A6         	movff	_B_counter+1,_B_remain+1
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;main.c: 1506: I2C_sendData('6');
 10716  005482  0E36               	movlw	54
 10717  005484  EC7A  F030         	call	_I2C_sendData
 10718                           
 10719                           ;main.c: 1507: if(EndOfProgram != 1){
 10720  005488  0100               	movlb	0	; () banked
 10721  00548A  05BB               	decf	_EndOfProgram& (0+255),w,b
 10722  00548C  B4D8               	btfsc	status,2,c
 10723  00548E  0012               	return	
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;main.c: 1508: _delay((unsigned long)((100)*(32000000/4000.0)));
 10727  005490  0E05               	movlw	5
 10728  005492  0100               	movlb	0	; () banked
 10729  005494  6FF0               	movwf	(??_Bolt_remain+1)& (0+255),b
 10730  005496  0E0F               	movlw	15
 10731  005498  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10732  00549A  0EF1               	movlw	241
 10733  00549C                     u7287:
 10734  00549C  2EE8               	decfsz	wreg,f,c
 10735  00549E  D7FE               	bra	u7287
 10736  0054A0  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10737  0054A2  D7FC               	bra	u7287
 10738  0054A4  2FF0               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
 10739  0054A6  D7FA               	bra	u7287
 10740  0054A8  0012               	return	
 10741  0054AA                     __end_of_Bolt_remain:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           intcon	equ	0xFF2
 10748                           intcon3	equ	0xFF0
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           postdec1	equ	0xFE5
 10752                           fsr1l	equ	0xFE1
 10753                           indf2	equ	0xFDF
 10754                           postinc2	equ	0xFDE
 10755                           postdec2	equ	0xFDD
 10756                           fsr2h	equ	0xFDA
 10757                           fsr2l	equ	0xFD9
 10758                           status	equ	0xFD8
 10759                           
 10760 ;; *************** function _Bolt_dispense *****************
 10761 ;; Defined at:
 10762 ;;		line 1298 in file "main.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  B_max           2   42[BANK0 ] int 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  1    wreg      void 
 10769 ;; Registers used:
 10770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;Total ram usage:        4 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    9
 10783 ;; This function calls:
 10784 ;;		_I2C_sendData
 10785 ;;		_drawBolt
 10786 ;;		_lcdInst
 10787 ;;		_printf
 10788 ;; This function is called by:
 10789 ;;		_main
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           	psect	text21
 10794  005724                     __ptext21:
 10795                           	opt stack 0
 10796  005724                     _Bolt_dispense:
 10797                           	opt stack 21
 10798                           
 10799                           ;main.c: 1299: if (B_max == 0){
 10800                           
 10801                           ;incstack = 0
 10802  005724  0100               	movlb	0	; () banked
 10803  005726  51ED               	movf	Bolt_dispense@B_max& (0+255),w,b
 10804  005728  11EE               	iorwf	(Bolt_dispense@B_max+1)& (0+255),w,b
 10805  00572A  B4D8               	btfsc	status,2,c
 10806  00572C  0012               	return	
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 1301: }
 10810                           ;main.c: 1303: drawBolt();
 10811                           
 10812                           ; BSR set to: 0
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;main.c: 1300: return;
 10816  00572E  EC82  F027         	call	_drawBolt	;wreg free
 10817                           
 10818                           ;main.c: 1304: _delay((unsigned long)((100)*(32000000/4000.0)));
 10819  005732  0E05               	movlw	5
 10820  005734  0100               	movlb	0	; () banked
 10821  005736  6FF0               	movwf	(??_Bolt_dispense+1)& (0+255),b
 10822  005738  0E0F               	movlw	15
 10823  00573A  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10824  00573C  0EF1               	movlw	241
 10825  00573E                     u7297:
 10826  00573E  2EE8               	decfsz	wreg,f,c
 10827  005740  D7FE               	bra	u7297
 10828  005742  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10829  005744  D7FC               	bra	u7297
 10830  005746  2FF0               	decfsz	(??_Bolt_dispense+1)& (0+255),f,b
 10831  005748  D7FA               	bra	u7297
 10832                           
 10833                           ;main.c: 1305: I2C_sendData('5');
 10834  00574A  0E35               	movlw	53
 10835  00574C  EC7A  F030         	call	_I2C_sendData
 10836                           
 10837                           ;main.c: 1306: while(NeedToCloseLid != 1 && B_counter < B_max){
 10838  005750  D022               	goto	l677
 10839  005752                     
 10840                           ;main.c: 1307: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10841  005752  0E01               	movlw	1
 10842  005754  ECDF  F030         	call	_lcdInst
 10843  005758  0E9C               	movlw	156
 10844  00575A  0100               	movlb	0	; () banked
 10845  00575C  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10846  00575E  0ED7               	movlw	215
 10847  005760                     u7307:
 10848  005760  2EE8               	decfsz	wreg,f,c
 10849  005762  D7FE               	bra	u7307
 10850  005764  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10851  005766  D7FC               	bra	u7307
 10852                           
 10853                           ;main.c: 1308: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10854  005768  0E80               	movlw	128
 10855  00576A  ECDF  F030         	call	_lcdInst
 10856  00576E  0E34               	movlw	52
 10857  005770  0100               	movlb	0	; () banked
 10858  005772  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10859  005774  0EF1               	movlw	241
 10860  005776                     u7317:
 10861  005776  2EE8               	decfsz	wreg,f,c
 10862  005778  D7FE               	bra	u7317
 10863  00577A  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10864  00577C  D7FC               	bra	u7317
 10865  00577E  D000               	nop2	
 10866                           
 10867                           ;main.c: 1309: printf("B:%d",B_counter);
 10868  005780  0ECF               	movlw	low STR_66
 10869  005782  0100               	movlb	0	; () banked
 10870  005784  6FD1               	movwf	printf@f& (0+255),b
 10871  005786  0EFF               	movlw	high STR_66
 10872  005788  6FD2               	movwf	(printf@f+1)& (0+255),b
 10873  00578A  C0AD  F0D3         	movff	_B_counter,?_printf+2
 10874  00578E  C0AE  F0D4         	movff	_B_counter+1,?_printf+3
 10875  005792  EC2A  F019         	call	_printf	;wreg free
 10876  005796                     l677:
 10877  005796  0100               	movlb	0	; () banked
 10878  005798  05BA               	decf	_NeedToCloseLid& (0+255),w,b
 10879  00579A  B4D8               	btfsc	status,2,c
 10880  00579C  D00A               	goto	u4190
 10881                           
 10882                           ; BSR set to: 0
 10883  00579E  51ED               	movf	Bolt_dispense@B_max& (0+255),w,b
 10884  0057A0  5DAD               	subwf	_B_counter& (0+255),w,b
 10885  0057A2  51AE               	movf	(_B_counter+1)& (0+255),w,b
 10886  0057A4  0A80               	xorlw	128
 10887  0057A6  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10888  0057A8  51EE               	movf	(Bolt_dispense@B_max+1)& (0+255),w,b
 10889  0057AA  0A80               	xorlw	128
 10890  0057AC  59EF               	subwfb	??_Bolt_dispense& (0+255),w,b
 10891  0057AE  A0D8               	btfss	status,0,c
 10892  0057B0  D7D0               	goto	l678
 10893  0057B2                     u4190:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;main.c: 1310: }
 10897                           ;main.c: 1311: I2C_sendData('6');
 10898                           
 10899                           ; BSR set to: 0
 10900                           
 10901                           ; BSR set to: 0
 10902  0057B2  0E36               	movlw	54
 10903  0057B4  EC7A  F030         	call	_I2C_sendData
 10904  0057B8  0012               	return		;funcret
 10905  0057BA                     __end_of_Bolt_dispense:
 10906                           	opt stack 0
 10907                           tblptru	equ	0xFF8
 10908                           tblptrh	equ	0xFF7
 10909                           tblptrl	equ	0xFF6
 10910                           tablat	equ	0xFF5
 10911                           intcon	equ	0xFF2
 10912                           intcon3	equ	0xFF0
 10913                           postinc0	equ	0xFEE
 10914                           wreg	equ	0xFE8
 10915                           postdec1	equ	0xFE5
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           postdec2	equ	0xFDD
 10920                           fsr2h	equ	0xFDA
 10921                           fsr2l	equ	0xFD9
 10922                           status	equ	0xFD8
 10923                           
 10924 ;; *************** function _printf *****************
 10925 ;; Defined at:
 10926 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10929 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
 10930 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 10931 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
 10932 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
 10933 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
 10934 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 10935 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
 10936 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
 10937 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
 10938 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
 10939 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
 10940 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
 10941 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
 10942 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
 10943 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
 10944 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
 10945 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 10946 ;;		 -> STR_2(20), STR_1(16), 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  idx             1   28[BANK0 ] unsigned char 
 10949 ;;  tmpval          4    0        struct .
 10950 ;;  width           2   39[BANK0 ] int 
 10951 ;;  val             2   36[BANK0 ] unsigned int 
 10952 ;;  len             2   34[BANK0 ] unsigned int 
 10953 ;;  ap              2   32[BANK0 ] PTR void [1]
 10954 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10955 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
 10956 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 10957 ;;  c               1   41[BANK0 ] char 
 10958 ;;  flag            1   38[BANK0 ] unsigned char 
 10959 ;;  prec            1   29[BANK0 ] char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  2   14[BANK0 ] int 
 10962 ;; Registers used:
 10963 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10969 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;Total ram usage:       28 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    6
 10976 ;; This function calls:
 10977 ;;		___lwdiv
 10978 ;;		___lwmod
 10979 ;;		___wmul
 10980 ;;		_isdigit
 10981 ;;		_putch
 10982 ;; This function is called by:
 10983 ;;		_main
 10984 ;;		_Bolt_dispense
 10985 ;;		_Nut_dispense
 10986 ;;		_Spacer_dispense
 10987 ;;		_Washer_dispense
 10988 ;;		_Bolt_remain
 10989 ;;		_Nut_remain
 10990 ;;		_Spacer_remain
 10991 ;;		_Washer_remain
 10992 ;;		_count_gear
 10993 ;;		_nut_washer_remain
 10994 ;;		_bolt_spacer_remain
 10995 ;;		_all_remain
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text22
 11000  003254                     __ptext22:
 11001                           	opt stack 0
 11002  003254                     _printf:
 11003                           	opt stack 24
 11004                           
 11005                           ;doprnt.c: 466: va_list ap;
 11006                           ;doprnt.c: 499: signed char c;
 11007                           ;doprnt.c: 501: int width;
 11008                           ;doprnt.c: 506: signed char prec;
 11009                           ;doprnt.c: 508: unsigned char flag;
 11010                           ;doprnt.c: 523: union {
 11011                           ;doprnt.c: 524: unsigned long vd;
 11012                           ;doprnt.c: 525: double integ;
 11013                           ;doprnt.c: 526: } tmpval;
 11014                           ;doprnt.c: 528: unsigned int val;
 11015                           ;doprnt.c: 529: unsigned len;
 11016                           ;doprnt.c: 530: const char * cp;
 11017                           ;doprnt.c: 533: *ap = __va_start();
 11018                           
 11019                           ;incstack = 0
 11020  003254  0ED3               	movlw	low (?_printf+2)
 11021  003256  0100               	movlb	0	; () banked
 11022  003258  6FE3               	movwf	printf@ap& (0+255),b
 11023  00325A  0E00               	movlw	high (?_printf+2)
 11024  00325C  6FE4               	movwf	(printf@ap+1)& (0+255),b
 11025                           
 11026                           ;doprnt.c: 536: while(c = *f++) {
 11027  00325E  D20F               	goto	u3990
 11028  003260                     
 11029                           ; BSR set to: 0
 11030                           ;doprnt.c: 538: if(c != '%')
 11031                           
 11032                           ; BSR set to: 0
 11033  003260  0E25               	movlw	37
 11034  003262  19EC               	xorwf	printf@c& (0+255),w,b
 11035  003264  B4D8               	btfsc	status,2,c
 11036  003266  D004               	goto	l1393
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;doprnt.c: 540: {
 11040                           ;doprnt.c: 541: (putch(c) );
 11041  003268  51EC               	movf	printf@c& (0+255),w,b
 11042  00326A  ECD3  F030         	call	_putch
 11043                           
 11044                           ;doprnt.c: 542: continue;
 11045  00326E  D207               	goto	u3990
 11046  003270                     l1393:
 11047                           
 11048                           ;doprnt.c: 543: }
 11049                           ;doprnt.c: 546: width = 0;
 11050  003270  0E00               	movlw	0
 11051  003272  0100               	movlb	0	; () banked
 11052  003274  6FEB               	movwf	(printf@width+1)& (0+255),b
 11053  003276  0E00               	movlw	0
 11054  003278  6FEA               	movwf	printf@width& (0+255),b
 11055                           
 11056                           ;doprnt.c: 548: flag = 0;
 11057  00327A  0E00               	movlw	0
 11058  00327C  6FE9               	movwf	printf@flag& (0+255),b
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;doprnt.c: 551: switch(*f) {
 11062                           
 11063                           ;doprnt.c: 550: for(;;) {
 11064  00327E  D004               	goto	l1395
 11065  003280                     
 11066                           ;doprnt.c: 580: flag |= 0x04;
 11067                           
 11068                           ; BSR set to: 0
 11069  003280  0100               	movlb	0	; () banked
 11070  003282  85E9               	bsf	printf@flag& (0+255),2,b
 11071                           
 11072                           ;doprnt.c: 581: f++;
 11073  003284  4BD1               	infsnz	printf@f& (0+255),f,b
 11074  003286  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11075  003288                     l1395:
 11076                           
 11077                           ; BSR set to: 0
 11078  003288  C0D1  FFF6         	movff	printf@f,tblptrl
 11079  00328C  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11080  003290                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11081  003290  6AF8               	clrf	tblptru,c
 11082  003292                     	endif
 11083  003292                     	if	0	;tblptru may be non-zero
 11084  003292                     	endif
 11085  003292  0008               	tblrd		*
 11086  003294  50F5               	movf	tablat,w,c
 11087                           
 11088                           ; Switch size 1, requested type "space"
 11089                           ; Number of cases is 1, Range of values is 48 to 48
 11090                           ; switch strategies available:
 11091                           ; Name         Instructions Cycles
 11092                           ; simple_byte            4     3 (average)
 11093                           ;	Chosen strategy is simple_byte
 11094  003296  0A30               	xorlw	48	; case 48
 11095  003298  B4D8               	btfsc	status,2,c
 11096  00329A  D7F2               	goto	l1396
 11097                           
 11098                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11099                           
 11100                           ;doprnt.c: 586: }
 11101                           
 11102                           ;doprnt.c: 585: break;
 11103  00329C  C0D1  FFF6         	movff	printf@f,tblptrl
 11104  0032A0  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11105  0032A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11106  0032A4  6AF8               	clrf	tblptru,c
 11107  0032A6                     	endif
 11108  0032A6                     	if	0	;tblptru may be non-zero
 11109  0032A6                     	endif
 11110  0032A6  0008               	tblrd		*
 11111  0032A8  50F5               	movf	tablat,w,c
 11112  0032AA  ECB3  F030         	call	_isdigit
 11113  0032AE  A0D8               	btfss	status,0,c
 11114  0032B0  D0AE               	goto	l1403
 11115                           
 11116                           ;doprnt.c: 598: width = 0;
 11117  0032B2  0E00               	movlw	0
 11118  0032B4  0100               	movlb	0	; () banked
 11119  0032B6  6FEB               	movwf	(printf@width+1)& (0+255),b
 11120  0032B8  0E00               	movlw	0
 11121  0032BA  6FEA               	movwf	printf@width& (0+255),b
 11122  0032BC                     
 11123                           ;doprnt.c: 600: width *= 10;
 11124                           
 11125                           ; BSR set to: 0
 11126  0032BC  C0EA  F0CB         	movff	printf@width,___wmul@multiplier
 11127  0032C0  C0EB  F0CC         	movff	printf@width+1,___wmul@multiplier+1
 11128  0032C4  0E00               	movlw	0
 11129  0032C6  0100               	movlb	0	; () banked
 11130  0032C8  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11131  0032CA  0E0A               	movlw	10
 11132  0032CC  6FCD               	movwf	___wmul@multiplicand& (0+255),b
 11133  0032CE  EC66  F030         	call	___wmul	;wreg free
 11134  0032D2  C0CB  F0EA         	movff	?___wmul,printf@width
 11135  0032D6  C0CC  F0EB         	movff	?___wmul+1,printf@width+1
 11136                           
 11137                           ;doprnt.c: 601: width += *f++ - '0';
 11138  0032DA  0ED0               	movlw	208
 11139  0032DC  0100               	movlb	0	; () banked
 11140  0032DE  6FDB               	movwf	??_printf& (0+255),b
 11141  0032E0  0EFF               	movlw	255
 11142  0032E2  6FDC               	movwf	(??_printf+1)& (0+255),b
 11143  0032E4  C0D1  FFF6         	movff	printf@f,tblptrl
 11144  0032E8  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11145  0032EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11146  0032EC  6AF8               	clrf	tblptru,c
 11147  0032EE                     	endif
 11148  0032EE                     	if	0	;tblptru may be non-zero
 11149  0032EE                     	endif
 11150  0032EE  0008               	tblrd		*
 11151  0032F0  50F5               	movf	tablat,w,c
 11152  0032F2  6FDD               	movwf	(??_printf+2)& (0+255),b
 11153  0032F4  6BDE               	clrf	(??_printf+3)& (0+255),b
 11154  0032F6  51DB               	movf	??_printf& (0+255),w,b
 11155  0032F8  27DD               	addwf	(??_printf+2)& (0+255),f,b
 11156  0032FA  51DC               	movf	(??_printf+1)& (0+255),w,b
 11157  0032FC  23DE               	addwfc	(??_printf+3)& (0+255),f,b
 11158  0032FE  51DD               	movf	(??_printf+2)& (0+255),w,b
 11159  003300  27EA               	addwf	printf@width& (0+255),f,b
 11160  003302  51DE               	movf	(??_printf+3)& (0+255),w,b
 11161  003304  23EB               	addwfc	(printf@width+1)& (0+255),f,b
 11162                           
 11163                           ; BSR set to: 0
 11164  003306  4BD1               	infsnz	printf@f& (0+255),f,b
 11165  003308  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11169  00330A  C0D1  FFF6         	movff	printf@f,tblptrl
 11170  00330E  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11171  003312                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11172  003312  6AF8               	clrf	tblptru,c
 11173  003314                     	endif
 11174  003314                     	if	0	;tblptru may be non-zero
 11175  003314                     	endif
 11176  003314  0008               	tblrd		*
 11177  003316  50F5               	movf	tablat,w,c
 11178  003318  ECB3  F030         	call	_isdigit
 11179  00331C  A0D8               	btfss	status,0,c
 11180  00331E  D077               	goto	l1403
 11181  003320  D7CD               	goto	l1401
 11182  003322                     
 11183                           ;doprnt.c: 721: flag |= 0x80;
 11184  003322  0100               	movlb	0	; () banked
 11185  003324  8FE9               	bsf	printf@flag& (0+255),7,b
 11186                           
 11187                           ;doprnt.c: 723: break;
 11188  003326  D08F               	goto	l1408
 11189  003328                     
 11190                           ; BSR set to: 0
 11191                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11192                           
 11193                           ; BSR set to: 0
 11194  003328  C0E3  FFD9         	movff	printf@ap,fsr2l
 11195  00332C  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11196  003330  CFDE F0E1          	movff	postinc2,printf@cp
 11197  003334  CFDD F0E2          	movff	postdec2,printf@cp+1
 11198                           
 11199                           ; BSR set to: 0
 11200  003338  0E02               	movlw	2
 11201  00333A  27E3               	addwf	printf@ap& (0+255),f,b
 11202  00333C  0E00               	movlw	0
 11203  00333E  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;doprnt.c: 740: if(!cp)
 11207  003340  51E1               	movf	printf@cp& (0+255),w,b
 11208  003342  11E2               	iorwf	(printf@cp+1)& (0+255),w,b
 11209  003344  A4D8               	btfss	status,2,c
 11210  003346  D004               	goto	l1411
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;doprnt.c: 741: cp = "(null)";
 11214  003348  0E97               	movlw	low STR_98
 11215  00334A  6FE1               	movwf	printf@cp& (0+255),b
 11216  00334C  0EFF               	movlw	high STR_98
 11217  00334E  6FE2               	movwf	(printf@cp+1)& (0+255),b
 11218  003350                     l1411:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;doprnt.c: 745: len = 0;
 11222                           
 11223                           ; BSR set to: 0
 11224  003350  0E00               	movlw	0
 11225  003352  6FE6               	movwf	(printf@len+1)& (0+255),b
 11226  003354  0E00               	movlw	0
 11227  003356  6FE5               	movwf	printf@len& (0+255),b
 11228                           
 11229                           ;doprnt.c: 746: while(cp[len])
 11230  003358  D003               	goto	l1412
 11231  00335A                     
 11232                           ;doprnt.c: 747: len++;
 11233                           
 11234                           ; BSR set to: 0
 11235  00335A  0100               	movlb	0	; () banked
 11236  00335C  4BE5               	infsnz	printf@len& (0+255),f,b
 11237  00335E  2BE6               	incf	(printf@len+1)& (0+255),f,b
 11238  003360                     l1412:
 11239                           
 11240                           ; BSR set to: 0
 11241                           
 11242                           ; BSR set to: 0
 11243  003360  51E5               	movf	printf@len& (0+255),w,b
 11244  003362  25E1               	addwf	printf@cp& (0+255),w,b
 11245  003364  6FDB               	movwf	??_printf& (0+255),b
 11246  003366  51E6               	movf	(printf@len+1)& (0+255),w,b
 11247  003368  21E2               	addwfc	(printf@cp+1)& (0+255),w,b
 11248  00336A  6FDC               	movwf	(??_printf+1)& (0+255),b
 11249  00336C  C0DB  FFF6         	movff	??_printf,tblptrl
 11250  003370  C0DC  FFF7         	movff	??_printf+1,tblptrh
 11251  003374  0E00               	movlw	low (__mediumconst shr (0+16))
 11252  003376  6EF8               	movwf	tblptru,c
 11253  003378  0E0F               	movlw	(high __ramtop+-1)
 11254  00337A  64F7               	cpfsgt	tblptrh,c
 11255  00337C  D003               	bra	u3757
 11256  00337E  0008               	tblrd		*
 11257  003380  50F5               	movf	tablat,w,c
 11258  003382  D005               	bra	u3750
 11259  003384                     u3757:
 11260  003384  CFF6 FFE9          	movff	tblptrl,fsr0l
 11261  003388  CFF7 FFEA          	movff	tblptrh,fsr0h
 11262  00338C  50EF               	movf	indf0,w,c
 11263  00338E                     u3750:
 11264  00338E  0900               	iorlw	0
 11265  003390  A4D8               	btfss	status,2,c
 11266  003392  D7E3               	goto	l1413
 11267                           
 11268                           ;doprnt.c: 757: if(width > len)
 11269  003394  0100               	movlb	0	; () banked
 11270  003396  51EA               	movf	printf@width& (0+255),w,b
 11271  003398  5DE5               	subwf	printf@len& (0+255),w,b
 11272  00339A  51EB               	movf	(printf@width+1)& (0+255),w,b
 11273  00339C  59E6               	subwfb	(printf@len+1)& (0+255),w,b
 11274  00339E  B0D8               	btfsc	status,0,c
 11275  0033A0  D005               	goto	l1415
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;doprnt.c: 758: width -= len;
 11279  0033A2  51E5               	movf	printf@len& (0+255),w,b
 11280  0033A4  5FEA               	subwf	printf@width& (0+255),f,b
 11281  0033A6  51E6               	movf	(printf@len+1)& (0+255),w,b
 11282  0033A8  5BEB               	subwfb	(printf@width+1)& (0+255),f,b
 11283  0033AA  D008               	goto	l1417
 11284  0033AC                     l1415:
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;doprnt.c: 759: else
 11288                           ;doprnt.c: 760: width = 0;
 11289                           
 11290                           ; BSR set to: 0
 11291  0033AC  0E00               	movlw	0
 11292  0033AE  6FEB               	movwf	(printf@width+1)& (0+255),b
 11293  0033B0  0E00               	movlw	0
 11294  0033B2  6FEA               	movwf	printf@width& (0+255),b
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;doprnt.c: 764: while(width--)
 11298  0033B4  D003               	goto	l1417
 11299  0033B6                     l5817:
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;doprnt.c: 765: (putch(' ') );
 11303  0033B6  0E20               	movlw	32
 11304  0033B8  ECD3  F030         	call	_putch
 11305  0033BC                     l1417:
 11306  0033BC  0100               	movlb	0	; () banked
 11307  0033BE  07EA               	decf	printf@width& (0+255),f,b
 11308  0033C0  A0D8               	btfss	status,0,c
 11309  0033C2  07EB               	decf	(printf@width+1)& (0+255),f,b
 11310  0033C4  29EA               	incf	printf@width& (0+255),w,b
 11311  0033C6  E1F7               	bnz	l5817
 11312  0033C8  29EB               	incf	(printf@width+1)& (0+255),w,b
 11313  0033CA  B4D8               	btfsc	status,2,c
 11314  0033CC  D017               	goto	l1420
 11315  0033CE  D7F3               	goto	l1418
 11316  0033D0                     l5821:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;doprnt.c: 768: (putch(*cp++) );
 11320  0033D0  C0E1  FFF6         	movff	printf@cp,tblptrl
 11321  0033D4  C0E2  FFF7         	movff	printf@cp+1,tblptrh
 11322  0033D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11323  0033DA  6EF8               	movwf	tblptru,c
 11324  0033DC  0E0F               	movlw	(high __ramtop+-1)
 11325  0033DE  64F7               	cpfsgt	tblptrh,c
 11326  0033E0  D003               	bra	u3797
 11327  0033E2  0008               	tblrd		*
 11328  0033E4  50F5               	movf	tablat,w,c
 11329  0033E6  D005               	bra	u3790
 11330  0033E8                     u3797:
 11331  0033E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11332  0033EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11333  0033F0  50EF               	movf	indf0,w,c
 11334  0033F2                     u3790:
 11335  0033F2  ECD3  F030         	call	_putch
 11336  0033F6  0100               	movlb	0	; () banked
 11337  0033F8  4BE1               	infsnz	printf@cp& (0+255),f,b
 11338  0033FA  2BE2               	incf	(printf@cp+1)& (0+255),f,b
 11339  0033FC                     l1420:
 11340                           
 11341                           ; BSR set to: 0
 11342                           
 11343                           ; BSR set to: 0
 11344  0033FC  07E5               	decf	printf@len& (0+255),f,b
 11345  0033FE  A0D8               	btfss	status,0,c
 11346  003400  07E6               	decf	(printf@len+1)& (0+255),f,b
 11347  003402  29E5               	incf	printf@len& (0+255),w,b
 11348  003404  E1E5               	bnz	l5821
 11349  003406  29E6               	incf	(printf@len+1)& (0+255),w,b
 11350  003408  B4D8               	btfsc	status,2,c
 11351  00340A  D139               	goto	u3990
 11352  00340C  D7E1               	goto	l1421
 11353  00340E                     l1403:
 11354                           
 11355                           ; BSR set to: 0
 11356  00340E  C0D1  FFF6         	movff	printf@f,tblptrl
 11357  003412  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11358  003416  0100               	movlb	0	; () banked
 11359  003418  4BD1               	infsnz	printf@f& (0+255),f,b
 11360  00341A  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11361  00341C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11362  00341C  6AF8               	clrf	tblptru,c
 11363  00341E                     	endif
 11364  00341E                     	if	0	;tblptru may be non-zero
 11365  00341E                     	endif
 11366  00341E  0008               	tblrd		*
 11367  003420  CFF5 F0EC          	movff	tablat,printf@c
 11368  003424  51EC               	movf	printf@c& (0+255),w,b
 11369                           
 11370                           ; Switch size 1, requested type "space"
 11371                           ; Number of cases is 5, Range of values is 0 to 120
 11372                           ; switch strategies available:
 11373                           ; Name         Instructions Cycles
 11374                           ; simple_byte           16     9 (average)
 11375                           ;	Chosen strategy is simple_byte
 11376  003426  0A00               	xorlw	0	; case 0
 11377  003428  B4D8               	btfsc	status,2,c
 11378  00342A  0012               	return	
 11379  00342C  0A64               	xorlw	100	; case 100
 11380  00342E  B4D8               	btfsc	status,2,c
 11381  003430  D00A               	goto	l1408
 11382  003432  0A0D               	xorlw	13	; case 105
 11383  003434  B4D8               	btfsc	status,2,c
 11384  003436  D007               	goto	l1408
 11385  003438  0A1A               	xorlw	26	; case 115
 11386  00343A  B4D8               	btfsc	status,2,c
 11387  00343C  D775               	goto	l1410
 11388  00343E  0A0B               	xorlw	11	; case 120
 11389  003440  B4D8               	btfsc	status,2,c
 11390  003442  D76F               	goto	l1409
 11391  003444  D11C               	goto	u3990
 11392  003446                     l1408:
 11393                           
 11394                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11395  003446  0100               	movlb	0	; () banked
 11396  003448  BFE9               	btfsc	printf@flag& (0+255),7,b
 11397  00344A  D015               	goto	l1424
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;doprnt.c: 1253: {
 11401                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11402  00344C  C0E3  FFD9         	movff	printf@ap,fsr2l
 11403  003450  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11404  003454  CFDE F0E7          	movff	postinc2,printf@val
 11405  003458  CFDD F0E8          	movff	postdec2,printf@val+1
 11406                           
 11407                           ; BSR set to: 0
 11408  00345C  0E02               	movlw	2
 11409  00345E  27E3               	addwf	printf@ap& (0+255),f,b
 11410  003460  0E00               	movlw	0
 11411  003462  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;doprnt.c: 1261: if((int)val < 0) {
 11415  003464  AFE8               	btfss	(printf@val+1)& (0+255),7,b
 11416  003466  D04A               	goto	l1427
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;doprnt.c: 1262: flag |= 0x03;
 11420  003468  0E03               	movlw	3
 11421  00346A  13E9               	iorwf	printf@flag& (0+255),f,b
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;doprnt.c: 1263: val = -val;
 11425  00346C  6DE7               	negf	printf@val& (0+255),b
 11426  00346E  1FE8               	comf	(printf@val+1)& (0+255),f,b
 11427  003470  B0D8               	btfsc	status,0,c
 11428  003472  2BE8               	incf	(printf@val+1)& (0+255),f,b
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;doprnt.c: 1264: }
 11432                           ;doprnt.c: 1266: }
 11433  003474  D043               	goto	l1427
 11434  003476                     l1424:
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;doprnt.c: 1268: else
 11438                           ;doprnt.c: 1273: {
 11439                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11440                           
 11441                           ; BSR set to: 0
 11442  003476  C0E3  FFD9         	movff	printf@ap,fsr2l
 11443  00347A  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11444  00347E  CFDE F0E7          	movff	postinc2,printf@val
 11445  003482  CFDD F0E8          	movff	postdec2,printf@val+1
 11446                           
 11447                           ; BSR set to: 0
 11448  003486  0E02               	movlw	2
 11449  003488  27E3               	addwf	printf@ap& (0+255),f,b
 11450  00348A  0E00               	movlw	0
 11451  00348C  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;doprnt.c: 1287: }
 11455                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11456  00348E  D036               	goto	l1427
 11457  003490                     
 11458                           ; BSR set to: 0
 11459                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11460                           
 11461                           ; BSR set to: 0
 11462  003490  0E01               	movlw	1
 11463  003492  6FEC               	movwf	printf@c& (0+255),b
 11464  003494                     l5847:
 11465                           
 11466                           ; BSR set to: 0
 11467  003494  0E05               	movlw	5
 11468  003496  19EC               	xorwf	printf@c& (0+255),w,b
 11469  003498  B4D8               	btfsc	status,2,c
 11470  00349A  D038               	goto	l1432
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;doprnt.c: 1306: if(val < dpowers[c])
 11474                           
 11475                           ; BSR set to: 0
 11476                           
 11477                           ; BSR set to: 0
 11478  00349C  51EC               	movf	printf@c& (0+255),w,b
 11479  00349E  0D02               	mullw	2
 11480  0034A0  0E64               	movlw	low _dpowers
 11481  0034A2  24F3               	addwf	prodl,w,c
 11482  0034A4  6EF6               	movwf	tblptrl,c
 11483  0034A6  0EFC               	movlw	high _dpowers
 11484  0034A8  20F4               	addwfc	prodh,w,c
 11485  0034AA  6EF7               	movwf	tblptrh,c
 11486  0034AC                     	if	1	;There are 3 active tblptr bytes
 11487  0034AC  6AF8               	clrf	tblptru,c
 11488  0034AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11489  0034B0  22F8               	addwfc	tblptru,f,c
 11490  0034B2                     	endif
 11491  0034B2  0009               	tblrd		*+
 11492  0034B4  50F5               	movf	tablat,w,c
 11493  0034B6  5DE7               	subwf	printf@val& (0+255),w,b
 11494  0034B8  0009               	tblrd		*+
 11495  0034BA  50F5               	movf	tablat,w,c
 11496  0034BC  59E8               	subwfb	(printf@val+1)& (0+255),w,b
 11497  0034BE  A0D8               	btfss	status,0,c
 11498  0034C0  D025               	goto	l1432
 11499                           
 11500                           ; BSR set to: 0
 11501                           
 11502                           ; BSR set to: 0
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;doprnt.c: 1307: break;
 11506  0034C2  2BEC               	incf	printf@c& (0+255),f,b
 11507  0034C4  D7E7               	goto	l5847
 11508  0034C6                     
 11509                           ; BSR set to: 0
 11510                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11511                           
 11512                           ; BSR set to: 0
 11513  0034C6  0E01               	movlw	1
 11514  0034C8  6FEC               	movwf	printf@c& (0+255),b
 11515  0034CA                     l5861:
 11516                           
 11517                           ; BSR set to: 0
 11518  0034CA  0E04               	movlw	4
 11519  0034CC  19EC               	xorwf	printf@c& (0+255),w,b
 11520  0034CE  B4D8               	btfsc	status,2,c
 11521  0034D0  D01D               	goto	l1432
 11522                           
 11523                           ; BSR set to: 0
 11524                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11525                           
 11526                           ; BSR set to: 0
 11527                           
 11528                           ; BSR set to: 0
 11529  0034D2  51EC               	movf	printf@c& (0+255),w,b
 11530  0034D4  0D02               	mullw	2
 11531  0034D6  0E6E               	movlw	low _hexpowers
 11532  0034D8  24F3               	addwf	prodl,w,c
 11533  0034DA  6EF6               	movwf	tblptrl,c
 11534  0034DC  0EFC               	movlw	high _hexpowers
 11535  0034DE  20F4               	addwfc	prodh,w,c
 11536  0034E0  6EF7               	movwf	tblptrh,c
 11537  0034E2                     	if	1	;There are 3 active tblptr bytes
 11538  0034E2  6AF8               	clrf	tblptru,c
 11539  0034E4  0E00               	movlw	low (__mediumconst shr (0+16))
 11540  0034E6  22F8               	addwfc	tblptru,f,c
 11541  0034E8                     	endif
 11542  0034E8  0009               	tblrd		*+
 11543  0034EA  50F5               	movf	tablat,w,c
 11544  0034EC  5DE7               	subwf	printf@val& (0+255),w,b
 11545  0034EE  0009               	tblrd		*+
 11546  0034F0  50F5               	movf	tablat,w,c
 11547  0034F2  59E8               	subwfb	(printf@val+1)& (0+255),w,b
 11548  0034F4  A0D8               	btfss	status,0,c
 11549  0034F6  D00A               	goto	l1432
 11550                           
 11551                           ; BSR set to: 0
 11552                           
 11553                           ; BSR set to: 0
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;doprnt.c: 1318: break;
 11557  0034F8  2BEC               	incf	printf@c& (0+255),f,b
 11558  0034FA  D7E7               	goto	l5861
 11559  0034FC                     l1427:
 11560                           
 11561                           ; BSR set to: 0
 11562                           
 11563                           ; BSR set to: 0
 11564  0034FC  51E9               	movf	printf@flag& (0+255),w,b
 11565  0034FE  0B80               	andlw	128
 11566                           
 11567                           ; Switch size 1, requested type "space"
 11568                           ; Number of cases is 2, Range of values is 0 to 128
 11569                           ; switch strategies available:
 11570                           ; Name         Instructions Cycles
 11571                           ; simple_byte            7     4 (average)
 11572                           ;	Chosen strategy is simple_byte
 11573  003500  0A00               	xorlw	0	; case 0
 11574  003502  B4D8               	btfsc	status,2,c
 11575  003504  D7C5               	goto	l1428
 11576  003506  0A80               	xorlw	128	; case 128
 11577  003508  B4D8               	btfsc	status,2,c
 11578  00350A  D7DD               	goto	l1433
 11579  00350C                     l1432:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11583                           
 11584                           ; BSR set to: 0
 11585  00350C  51EA               	movf	printf@width& (0+255),w,b
 11586  00350E  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11587  003510  B4D8               	btfsc	status,2,c
 11588  003512  D009               	goto	l1437
 11589                           
 11590                           ; BSR set to: 0
 11591  003514  C0E9  F0DB         	movff	printf@flag,??_printf
 11592  003518  0E03               	movlw	3
 11593  00351A  17DB               	andwf	??_printf& (0+255),f,b
 11594  00351C  B4D8               	btfsc	status,2,c
 11595  00351E  D003               	goto	l1437
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;doprnt.c: 1346: width--;
 11599  003520  07EA               	decf	printf@width& (0+255),f,b
 11600  003522  A0D8               	btfss	status,0,c
 11601  003524  07EB               	decf	(printf@width+1)& (0+255),f,b
 11602  003526                     l1437:
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;doprnt.c: 1381: if(width > c)
 11606                           
 11607                           ; BSR set to: 0
 11608  003526  0E80               	movlw	128
 11609  003528  BFEC               	btfsc	printf@c& (0+255),7,b
 11610  00352A  0E7F               	movlw	127
 11611  00352C  6FDB               	movwf	??_printf& (0+255),b
 11612  00352E  51EA               	movf	printf@width& (0+255),w,b
 11613  003530  5DEC               	subwf	printf@c& (0+255),w,b
 11614  003532  51EB               	movf	(printf@width+1)& (0+255),w,b
 11615  003534  0A80               	xorlw	128
 11616  003536  59DB               	subwfb	??_printf& (0+255),w,b
 11617  003538  B0D8               	btfsc	status,0,c
 11618  00353A  D007               	goto	l1438
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;doprnt.c: 1382: width -= c;
 11622  00353C  51EC               	movf	printf@c& (0+255),w,b
 11623  00353E  5FEA               	subwf	printf@width& (0+255),f,b
 11624  003540  0E00               	movlw	0
 11625  003542  BFEC               	btfsc	printf@c& (0+255),7,b
 11626  003544  0EFF               	movlw	255
 11627  003546  5BEB               	subwfb	(printf@width+1)& (0+255),f,b
 11628  003548  D004               	goto	l1439
 11629  00354A                     l1438:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;doprnt.c: 1383: else
 11633                           ;doprnt.c: 1384: width = 0;
 11634                           
 11635                           ; BSR set to: 0
 11636  00354A  0E00               	movlw	0
 11637  00354C  6FEB               	movwf	(printf@width+1)& (0+255),b
 11638  00354E  0E00               	movlw	0
 11639  003550  6FEA               	movwf	printf@width& (0+255),b
 11640  003552                     l1439:
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;doprnt.c: 1387: if(flag & 0x04) {
 11644                           
 11645                           ; BSR set to: 0
 11646  003552  A5E9               	btfss	printf@flag& (0+255),2,b
 11647  003554  D016               	goto	l1440
 11648                           
 11649                           ; BSR set to: 0
 11650                           ;doprnt.c: 1392: if(flag & 0x03)
 11651  003556  C0E9  F0DB         	movff	printf@flag,??_printf
 11652  00355A  0E03               	movlw	3
 11653  00355C  17DB               	andwf	??_printf& (0+255),f,b
 11654  00355E  B4D8               	btfsc	status,2,c
 11655  003560  D003               	goto	l1441
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;doprnt.c: 1393: (putch('-') );
 11659  003562  0E2D               	movlw	45
 11660  003564  ECD3  F030         	call	_putch
 11661  003568                     l1441:
 11662                           
 11663                           ;doprnt.c: 1415: if(width)
 11664  003568  0100               	movlb	0	; () banked
 11665  00356A  51EA               	movf	printf@width& (0+255),w,b
 11666  00356C  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11667  00356E  B4D8               	btfsc	status,2,c
 11668  003570  D020               	goto	l1449
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;doprnt.c: 1417: (putch('0') );
 11672                           
 11673                           ; BSR set to: 0
 11674                           
 11675                           ;doprnt.c: 1416: do
 11676  003572  0E30               	movlw	48
 11677  003574  ECD3  F030         	call	_putch
 11678                           
 11679                           ;doprnt.c: 1418: while(--width);
 11680  003578  0100               	movlb	0	; () banked
 11681  00357A  07EA               	decf	printf@width& (0+255),f,b
 11682  00357C  A0D8               	btfss	status,0,c
 11683  00357E  07EB               	decf	(printf@width+1)& (0+255),f,b
 11684  003580  D7F4               	goto	L16
 11685  003582                     l1440:
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;doprnt.c: 1422: {
 11689                           ;doprnt.c: 1424: if(width
 11690                           ;doprnt.c: 1428: )
 11691                           
 11692                           ; BSR set to: 0
 11693  003582  51EA               	movf	printf@width& (0+255),w,b
 11694  003584  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11695  003586  B4D8               	btfsc	status,2,c
 11696  003588  D00B               	goto	u3970
 11697  00358A                     u3960:
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;doprnt.c: 1430: (putch(' ') );
 11701                           
 11702                           ; BSR set to: 0
 11703                           
 11704                           ;doprnt.c: 1429: do
 11705  00358A  0E20               	movlw	32
 11706  00358C  ECD3  F030         	call	_putch
 11707                           
 11708                           ;doprnt.c: 1431: while(--width);
 11709  003590  0100               	movlb	0	; () banked
 11710  003592  07EA               	decf	printf@width& (0+255),f,b
 11711  003594  A0D8               	btfss	status,0,c
 11712  003596  07EB               	decf	(printf@width+1)& (0+255),f,b
 11713  003598  51EA               	movf	printf@width& (0+255),w,b
 11714  00359A  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11715  00359C  A4D8               	btfss	status,2,c
 11716  00359E  D7F5               	goto	u3960
 11717  0035A0                     u3970:
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;doprnt.c: 1438: if(flag & 0x03)
 11721                           
 11722                           ; BSR set to: 0
 11723                           
 11724                           ; BSR set to: 0
 11725  0035A0  C0E9  F0DB         	movff	printf@flag,??_printf
 11726  0035A4  0E03               	movlw	3
 11727  0035A6  17DB               	andwf	??_printf& (0+255),f,b
 11728  0035A8  B4D8               	btfsc	status,2,c
 11729  0035AA  D003               	goto	l1449
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;doprnt.c: 1439: (putch('-') );
 11733  0035AC  0E2D               	movlw	45
 11734  0035AE  ECD3  F030         	call	_putch
 11735  0035B2                     l1449:
 11736                           
 11737                           ;doprnt.c: 1469: }
 11738                           ;doprnt.c: 1472: prec = c;
 11739  0035B2  C0EC  F0E0         	movff	printf@c,printf@prec
 11740                           
 11741                           ;doprnt.c: 1474: while(prec--) {
 11742  0035B6  D05E               	goto	l1450
 11743  0035B8                     
 11744                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11745  0035B8  0100               	movlb	0	; () banked
 11746  0035BA  51E0               	movf	printf@prec& (0+255),w,b
 11747  0035BC  0D02               	mullw	2
 11748  0035BE  0E64               	movlw	low _dpowers
 11749  0035C0  24F3               	addwf	prodl,w,c
 11750  0035C2  6EF6               	movwf	tblptrl,c
 11751  0035C4  0EFC               	movlw	high _dpowers
 11752  0035C6  20F4               	addwfc	prodh,w,c
 11753  0035C8  6EF7               	movwf	tblptrh,c
 11754  0035CA                     	if	1	;There are 3 active tblptr bytes
 11755  0035CA  6AF8               	clrf	tblptru,c
 11756  0035CC  0E00               	movlw	low (__mediumconst shr (0+16))
 11757  0035CE  22F8               	addwfc	tblptru,f,c
 11758  0035D0                     	endif
 11759  0035D0  0009               	tblrd		*+
 11760  0035D2  CFF5 F0C5          	movff	tablat,___lwdiv@divisor
 11761  0035D6  000A               	tblrd		*-
 11762  0035D8  CFF5 F0C6          	movff	tablat,___lwdiv@divisor+1
 11763  0035DC  C0E7  F0C3         	movff	printf@val,___lwdiv@dividend
 11764  0035E0  C0E8  F0C4         	movff	printf@val+1,___lwdiv@dividend+1
 11765  0035E4  ECA6  F02E         	call	___lwdiv	;wreg free
 11766  0035E8  C0C3  F0CA         	movff	?___lwdiv,___lwmod@dividend
 11767  0035EC  C0C4  F0CB         	movff	?___lwdiv+1,___lwmod@dividend+1
 11768  0035F0  0E00               	movlw	0
 11769  0035F2  0100               	movlb	0	; () banked
 11770  0035F4  6FCD               	movwf	(___lwmod@divisor+1)& (0+255),b
 11771  0035F6  0E0A               	movlw	10
 11772  0035F8  6FCC               	movwf	___lwmod@divisor& (0+255),b
 11773  0035FA  EC8D  F02F         	call	___lwmod	;wreg free
 11774  0035FE  0100               	movlb	0	; () banked
 11775  003600  51CA               	movf	?___lwmod& (0+255),w,b
 11776  003602  0F30               	addlw	48
 11777  003604  6FEC               	movwf	printf@c& (0+255),b
 11778                           
 11779                           ;doprnt.c: 1491: break;
 11780  003606  D033               	goto	l1454
 11781  003608                     
 11782                           ; BSR set to: 0
 11783                           ;doprnt.c: 1499: {
 11784                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11785                           
 11786                           ; BSR set to: 0
 11787  003608  C0E7  F0C3         	movff	printf@val,___lwdiv@dividend
 11788  00360C  C0E8  F0C4         	movff	printf@val+1,___lwdiv@dividend+1
 11789  003610  51E0               	movf	printf@prec& (0+255),w,b
 11790  003612  0D02               	mullw	2
 11791  003614  0E6E               	movlw	low _hexpowers
 11792  003616  24F3               	addwf	prodl,w,c
 11793  003618  6EF6               	movwf	tblptrl,c
 11794  00361A  0EFC               	movlw	high _hexpowers
 11795  00361C  20F4               	addwfc	prodh,w,c
 11796  00361E  6EF7               	movwf	tblptrh,c
 11797  003620                     	if	1	;There are 3 active tblptr bytes
 11798  003620  6AF8               	clrf	tblptru,c
 11799  003622  0E00               	movlw	low (__mediumconst shr (0+16))
 11800  003624  22F8               	addwfc	tblptru,f,c
 11801  003626                     	endif
 11802  003626  0009               	tblrd		*+
 11803  003628  CFF5 F0C5          	movff	tablat,___lwdiv@divisor
 11804  00362C  000A               	tblrd		*-
 11805  00362E  CFF5 F0C6          	movff	tablat,___lwdiv@divisor+1
 11806  003632  ECA6  F02E         	call	___lwdiv	;wreg free
 11807  003636  0100               	movlb	0	; () banked
 11808  003638  51C3               	movf	?___lwdiv& (0+255),w,b
 11809  00363A  0B0F               	andlw	15
 11810  00363C  6FDF               	movwf	printf@idx& (0+255),b
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11814  00363E  51DF               	movf	printf@idx& (0+255),w,b
 11815  003640  0D01               	mullw	1
 11816  003642  0EDC               	movlw	low STR_99
 11817  003644  24F3               	addwf	prodl,w,c
 11818  003646  6EF6               	movwf	tblptrl,c
 11819  003648  0EFD               	movlw	high STR_99
 11820  00364A  20F4               	addwfc	prodh,w,c
 11821  00364C  6EF7               	movwf	tblptrh,c
 11822  00364E                     	if	1	;There are 3 active tblptr bytes
 11823  00364E  6AF8               	clrf	tblptru,c
 11824  003650  0E00               	movlw	low (__mediumconst shr (0+16))
 11825  003652  22F8               	addwfc	tblptru,f,c
 11826  003654                     	endif
 11827  003654  0008               	tblrd		*
 11828  003656  CFF5 F0EC          	movff	tablat,printf@c
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;doprnt.c: 1523: }
 11832                           
 11833                           ;doprnt.c: 1508: }
 11834                           ;doprnt.c: 1510: break;
 11835  00365A  D009               	goto	l1454
 11836  00365C                     
 11837                           ; BSR set to: 0
 11838  00365C  0100               	movlb	0	; () banked
 11839  00365E  51E9               	movf	printf@flag& (0+255),w,b
 11840  003660  0B80               	andlw	128
 11841                           
 11842                           ; Switch size 1, requested type "space"
 11843                           ; Number of cases is 2, Range of values is 0 to 128
 11844                           ; switch strategies available:
 11845                           ; Name         Instructions Cycles
 11846                           ; simple_byte            7     4 (average)
 11847                           ;	Chosen strategy is simple_byte
 11848  003662  0A00               	xorlw	0	; case 0
 11849  003664  B4D8               	btfsc	status,2,c
 11850  003666  D7A8               	goto	l1453
 11851  003668  0A80               	xorlw	128	; case 128
 11852  00366A  B4D8               	btfsc	status,2,c
 11853  00366C  D7CD               	goto	l1455
 11854  00366E                     l1454:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;doprnt.c: 1524: (putch(c) );
 11858                           
 11859                           ; BSR set to: 0
 11860  00366E  51EC               	movf	printf@c& (0+255),w,b
 11861  003670  ECD3  F030         	call	_putch
 11862  003674                     l1450:
 11863  003674  0100               	movlb	0	; () banked
 11864  003676  07E0               	decf	printf@prec& (0+255),f,b
 11865  003678  29E0               	incf	printf@prec& (0+255),w,b
 11866  00367A  A4D8               	btfss	status,2,c
 11867  00367C  D7EF               	goto	l1452
 11868  00367E                     u3990:
 11869                           
 11870                           ; BSR set to: 0
 11871                           
 11872                           ; BSR set to: 0
 11873  00367E  C0D1  FFF6         	movff	printf@f,tblptrl
 11874  003682  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11875  003686  0100               	movlb	0	; () banked
 11876  003688  4BD1               	infsnz	printf@f& (0+255),f,b
 11877  00368A  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11878  00368C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11879  00368C  6AF8               	clrf	tblptru,c
 11880  00368E                     	endif
 11881  00368E                     	if	0	;tblptru may be non-zero
 11882  00368E                     	endif
 11883  00368E  0008               	tblrd		*
 11884  003690  CFF5 F0EC          	movff	tablat,printf@c
 11885  003694  51EC               	movf	printf@c& (0+255),w,b
 11886  003696  B4D8               	btfsc	status,2,c
 11887  003698  0012               	return	
 11888  00369A  D5E2               	goto	l1392
 11889  00369C                     __end_of_printf:
 11890                           	opt stack 0
 11891                           tblptru	equ	0xFF8
 11892                           tblptrh	equ	0xFF7
 11893                           tblptrl	equ	0xFF6
 11894                           tablat	equ	0xFF5
 11895                           prodh	equ	0xFF4
 11896                           prodl	equ	0xFF3
 11897                           intcon	equ	0xFF2
 11898                           intcon3	equ	0xFF0
 11899                           indf0	equ	0xFEF
 11900                           postinc0	equ	0xFEE
 11901                           fsr0h	equ	0xFEA
 11902                           fsr0l	equ	0xFE9
 11903                           wreg	equ	0xFE8
 11904                           postdec1	equ	0xFE5
 11905                           fsr1l	equ	0xFE1
 11906                           indf2	equ	0xFDF
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function _putch *****************
 11914 ;; Defined at:
 11915 ;;		line 24 in file "lcd.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  data            1    wreg     unsigned char 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  data            1    2[BANK0 ] unsigned char 
 11920 ;; Return value:  Size  Location     Type
 11921 ;;                  1    wreg      void 
 11922 ;; Registers used:
 11923 ;;		wreg, status,2, status,0, cstack
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;Total ram usage:        1 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:    5
 11936 ;; This function calls:
 11937 ;;		_lcdNibble
 11938 ;; This function is called by:
 11939 ;;		_printf
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           	psect	text23
 11944  0061A6                     __ptext23:
 11945                           	opt stack 0
 11946  0061A6                     _putch:
 11947                           	opt stack 24
 11948                           
 11949                           ;incstack = 0
 11950                           ;putch@data stored from wreg
 11951  0061A6  0100               	movlb	0	; () banked
 11952  0061A8  6FC5               	movwf	putch@data& (0+255),b
 11953                           
 11954                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 11955  0061AA  848C               	bsf	3980,2,c	;volatile
 11956                           
 11957                           ;lcd.c: 33: lcdNibble(data);
 11958  0061AC  0100               	movlb	0	; () banked
 11959  0061AE  51C5               	movf	putch@data& (0+255),w,b
 11960  0061B0  ECDD  F02B         	call	_lcdNibble
 11961                           
 11962                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 11963  0061B4  0EA0               	movlw	160
 11964  0061B6                     u7327:
 11965  0061B6  D000               	nop2	
 11966  0061B8  2EE8               	decfsz	wreg,f,c
 11967  0061BA  D7FD               	bra	u7327
 11968  0061BC  0012               	return		;funcret
 11969  0061BE                     __end_of_putch:
 11970                           	opt stack 0
 11971                           tblptru	equ	0xFF8
 11972                           tblptrh	equ	0xFF7
 11973                           tblptrl	equ	0xFF6
 11974                           tablat	equ	0xFF5
 11975                           prodh	equ	0xFF4
 11976                           prodl	equ	0xFF3
 11977                           intcon	equ	0xFF2
 11978                           intcon3	equ	0xFF0
 11979                           indf0	equ	0xFEF
 11980                           postinc0	equ	0xFEE
 11981                           fsr0h	equ	0xFEA
 11982                           fsr0l	equ	0xFE9
 11983                           wreg	equ	0xFE8
 11984                           postdec1	equ	0xFE5
 11985                           fsr1l	equ	0xFE1
 11986                           indf2	equ	0xFDF
 11987                           postinc2	equ	0xFDE
 11988                           postdec2	equ	0xFDD
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function _isdigit *****************
 11994 ;; Defined at:
 11995 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;  c               1    wreg     unsigned char 
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;  c               1    2[BANK0 ] unsigned char 
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg, status,2, status,0
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;Total ram usage:        3 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    4
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_printf
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           	psect	text24
 12024  006166                     __ptext24:
 12025                           	opt stack 0
 12026  006166                     _isdigit:
 12027                           	opt stack 25
 12028                           
 12029                           ;incstack = 0
 12030                           ;isdigit@c stored from wreg
 12031  006166  0100               	movlb	0	; () banked
 12032  006168  6FC5               	movwf	isdigit@c& (0+255),b
 12033  00616A  0E00               	movlw	0
 12034  00616C  0100               	movlb	0	; () banked
 12035  00616E  6FC4               	movwf	_isdigit$2258& (0+255),b
 12036                           
 12037                           ; BSR set to: 0
 12038  006170  0E3A               	movlw	58
 12039  006172  61C5               	cpfslt	isdigit@c& (0+255),b
 12040  006174  D005               	goto	l1788
 12041                           
 12042                           ; BSR set to: 0
 12043  006176  0E2F               	movlw	47
 12044  006178  65C5               	cpfsgt	isdigit@c& (0+255),b
 12045  00617A  D002               	goto	l1788
 12046                           
 12047                           ; BSR set to: 0
 12048  00617C  0E01               	movlw	1
 12049  00617E  6FC4               	movwf	_isdigit$2258& (0+255),b
 12050  006180                     l1788:
 12051                           
 12052                           ; BSR set to: 0
 12053                           
 12054                           ; BSR set to: 0
 12055  006180  C0C4  F0C3         	movff	_isdigit$2258,??_isdigit
 12056  006184  31C3               	rrcf	??_isdigit& (0+255),w,b
 12057  006186  0012               	return	
 12058  006188                     __end_of_isdigit:
 12059                           	opt stack 0
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           intcon3	equ	0xFF0
 12068                           indf0	equ	0xFEF
 12069                           postinc0	equ	0xFEE
 12070                           fsr0h	equ	0xFEA
 12071                           fsr0l	equ	0xFE9
 12072                           wreg	equ	0xFE8
 12073                           postdec1	equ	0xFE5
 12074                           fsr1l	equ	0xFE1
 12075                           indf2	equ	0xFDF
 12076                           postinc2	equ	0xFDE
 12077                           postdec2	equ	0xFDD
 12078                           fsr2h	equ	0xFDA
 12079                           fsr2l	equ	0xFD9
 12080                           status	equ	0xFD8
 12081                           
 12082 ;; *************** function ___lwmod *****************
 12083 ;; Defined at:
 12084 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  dividend        2    7[BANK0 ] unsigned int 
 12087 ;;  divisor         2    9[BANK0 ] unsigned int 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  counter         1   11[BANK0 ] unsigned char 
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  2    7[BANK0 ] unsigned int 
 12092 ;; Registers used:
 12093 ;;		wreg, status,2, status,0
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12099 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;Total ram usage:        5 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    4
 12106 ;; This function calls:
 12107 ;;		Nothing
 12108 ;; This function is called by:
 12109 ;;		_printf
 12110 ;; This function uses a non-reentrant model
 12111 ;;
 12112                           
 12113                           	psect	text25
 12114  005F1A                     __ptext25:
 12115                           	opt stack 0
 12116  005F1A                     ___lwmod:
 12117                           	opt stack 25
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;incstack = 0
 12121  005F1A  0100               	movlb	0	; () banked
 12122  005F1C  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12123  005F1E  11CD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12124  005F20  B4D8               	btfsc	status,2,c
 12125  005F22  D018               	goto	l1882
 12126                           
 12127                           ; BSR set to: 0
 12128  005F24  0E01               	movlw	1
 12129  005F26  6FCE               	movwf	___lwmod@counter& (0+255),b
 12130  005F28  D004               	goto	l1877
 12131  005F2A                     
 12132                           ; BSR set to: 0
 12133                           
 12134                           ; BSR set to: 0
 12135  005F2A  90D8               	bcf	status,0,c
 12136  005F2C  37CC               	rlcf	___lwmod@divisor& (0+255),f,b
 12137  005F2E  37CD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12138  005F30  2BCE               	incf	___lwmod@counter& (0+255),f,b
 12139  005F32                     l1877:
 12140                           
 12141                           ; BSR set to: 0
 12142                           
 12143                           ; BSR set to: 0
 12144  005F32  AFCD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12145  005F34  D7FA               	goto	l1878
 12146  005F36                     u3670:
 12147                           
 12148                           ; BSR set to: 0
 12149                           
 12150                           ; BSR set to: 0
 12151                           
 12152                           ; BSR set to: 0
 12153  005F36  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12154  005F38  5DCA               	subwf	___lwmod@dividend& (0+255),w,b
 12155  005F3A  51CD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12156  005F3C  59CB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12157  005F3E  A0D8               	btfss	status,0,c
 12158  005F40  D004               	goto	l1881
 12159                           
 12160                           ; BSR set to: 0
 12161  005F42  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12162  005F44  5FCA               	subwf	___lwmod@dividend& (0+255),f,b
 12163  005F46  51CD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12164  005F48  5BCB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12165  005F4A                     l1881:
 12166                           
 12167                           ; BSR set to: 0
 12168                           
 12169                           ; BSR set to: 0
 12170  005F4A  90D8               	bcf	status,0,c
 12171  005F4C  33CD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12172  005F4E  33CC               	rrcf	___lwmod@divisor& (0+255),f,b
 12173                           
 12174                           ; BSR set to: 0
 12175  005F50  2FCE               	decfsz	___lwmod@counter& (0+255),f,b
 12176  005F52  D7F1               	goto	u3670
 12177  005F54                     l1882:
 12178                           
 12179                           ; BSR set to: 0
 12180                           
 12181                           ; BSR set to: 0
 12182  005F54  C0CA  F0CA         	movff	___lwmod@dividend,?___lwmod
 12183  005F58  C0CB  F0CB         	movff	___lwmod@dividend+1,?___lwmod+1
 12184                           
 12185                           ; BSR set to: 0
 12186  005F5C  0012               	return		;funcret
 12187  005F5E                     __end_of___lwmod:
 12188                           	opt stack 0
 12189                           tblptru	equ	0xFF8
 12190                           tblptrh	equ	0xFF7
 12191                           tblptrl	equ	0xFF6
 12192                           tablat	equ	0xFF5
 12193                           prodh	equ	0xFF4
 12194                           prodl	equ	0xFF3
 12195                           intcon	equ	0xFF2
 12196                           intcon3	equ	0xFF0
 12197                           indf0	equ	0xFEF
 12198                           postinc0	equ	0xFEE
 12199                           fsr0h	equ	0xFEA
 12200                           fsr0l	equ	0xFE9
 12201                           wreg	equ	0xFE8
 12202                           postdec1	equ	0xFE5
 12203                           fsr1l	equ	0xFE1
 12204                           indf2	equ	0xFDF
 12205                           postinc2	equ	0xFDE
 12206                           postdec2	equ	0xFDD
 12207                           fsr2h	equ	0xFDA
 12208                           fsr2l	equ	0xFD9
 12209                           status	equ	0xFD8
 12210                           
 12211 ;; *************** function ___lwdiv *****************
 12212 ;; Defined at:
 12213 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;  dividend        2    0[BANK0 ] unsigned int 
 12216 ;;  divisor         2    2[BANK0 ] unsigned int 
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;  quotient        2    4[BANK0 ] unsigned int 
 12219 ;;  counter         1    6[BANK0 ] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  2    0[BANK0 ] unsigned int 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, status,0
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        7 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    4
 12236 ;; This function calls:
 12237 ;;		Nothing
 12238 ;; This function is called by:
 12239 ;;		_printf
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text26
 12244  005D4C                     __ptext26:
 12245                           	opt stack 0
 12246  005D4C                     ___lwdiv:
 12247                           	opt stack 25
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;incstack = 0
 12251  005D4C  0E00               	movlw	0
 12252  005D4E  0100               	movlb	0	; () banked
 12253  005D50  6FC8               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12254  005D52  0E00               	movlw	0
 12255  005D54  6FC7               	movwf	___lwdiv@quotient& (0+255),b
 12256                           
 12257                           ; BSR set to: 0
 12258  005D56  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12259  005D58  11C6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12260  005D5A  B4D8               	btfsc	status,2,c
 12261  005D5C  D01C               	goto	l1872
 12262                           
 12263                           ; BSR set to: 0
 12264  005D5E  0E01               	movlw	1
 12265  005D60  6FC9               	movwf	___lwdiv@counter& (0+255),b
 12266  005D62  D004               	goto	l1867
 12267  005D64                     
 12268                           ; BSR set to: 0
 12269                           
 12270                           ; BSR set to: 0
 12271  005D64  90D8               	bcf	status,0,c
 12272  005D66  37C5               	rlcf	___lwdiv@divisor& (0+255),f,b
 12273  005D68  37C6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12274  005D6A  2BC9               	incf	___lwdiv@counter& (0+255),f,b
 12275  005D6C                     l1867:
 12276                           
 12277                           ; BSR set to: 0
 12278                           
 12279                           ; BSR set to: 0
 12280  005D6C  AFC6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12281  005D6E  D7FA               	goto	l1868
 12282  005D70                     u3640:
 12283                           
 12284                           ; BSR set to: 0
 12285                           
 12286                           ; BSR set to: 0
 12287                           
 12288                           ; BSR set to: 0
 12289  005D70  90D8               	bcf	status,0,c
 12290  005D72  37C7               	rlcf	___lwdiv@quotient& (0+255),f,b
 12291  005D74  37C8               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12292                           
 12293                           ; BSR set to: 0
 12294  005D76  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12295  005D78  5DC3               	subwf	___lwdiv@dividend& (0+255),w,b
 12296  005D7A  51C6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12297  005D7C  59C4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12298  005D7E  A0D8               	btfss	status,0,c
 12299  005D80  D005               	goto	l1871
 12300                           
 12301                           ; BSR set to: 0
 12302  005D82  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12303  005D84  5FC3               	subwf	___lwdiv@dividend& (0+255),f,b
 12304  005D86  51C6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12305  005D88  5BC4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12306                           
 12307                           ; BSR set to: 0
 12308  005D8A  81C7               	bsf	___lwdiv@quotient& (0+255),0,b
 12309  005D8C                     l1871:
 12310                           
 12311                           ; BSR set to: 0
 12312                           
 12313                           ; BSR set to: 0
 12314  005D8C  90D8               	bcf	status,0,c
 12315  005D8E  33C6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12316  005D90  33C5               	rrcf	___lwdiv@divisor& (0+255),f,b
 12317                           
 12318                           ; BSR set to: 0
 12319  005D92  2FC9               	decfsz	___lwdiv@counter& (0+255),f,b
 12320  005D94  D7ED               	goto	u3640
 12321  005D96                     l1872:
 12322                           
 12323                           ; BSR set to: 0
 12324                           
 12325                           ; BSR set to: 0
 12326  005D96  C0C7  F0C3         	movff	___lwdiv@quotient,?___lwdiv
 12327  005D9A  C0C8  F0C4         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12328                           
 12329                           ; BSR set to: 0
 12330  005D9E  0012               	return		;funcret
 12331  005DA0                     __end_of___lwdiv:
 12332                           	opt stack 0
 12333                           tblptru	equ	0xFF8
 12334                           tblptrh	equ	0xFF7
 12335                           tblptrl	equ	0xFF6
 12336                           tablat	equ	0xFF5
 12337                           prodh	equ	0xFF4
 12338                           prodl	equ	0xFF3
 12339                           intcon	equ	0xFF2
 12340                           intcon3	equ	0xFF0
 12341                           indf0	equ	0xFEF
 12342                           postinc0	equ	0xFEE
 12343                           fsr0h	equ	0xFEA
 12344                           fsr0l	equ	0xFE9
 12345                           wreg	equ	0xFE8
 12346                           postdec1	equ	0xFE5
 12347                           fsr1l	equ	0xFE1
 12348                           indf2	equ	0xFDF
 12349                           postinc2	equ	0xFDE
 12350                           postdec2	equ	0xFDD
 12351                           fsr2h	equ	0xFDA
 12352                           fsr2l	equ	0xFD9
 12353                           status	equ	0xFD8
 12354                           
 12355 ;; *************** function _lcdInst *****************
 12356 ;; Defined at:
 12357 ;;		line 11 in file "lcd.c"
 12358 ;; Parameters:    Size  Location     Type
 12359 ;;  data            1    wreg     unsigned char 
 12360 ;; Auto vars:     Size  Location     Type
 12361 ;;  data            1    2[BANK0 ] unsigned char 
 12362 ;; Return value:  Size  Location     Type
 12363 ;;                  1    wreg      void 
 12364 ;; Registers used:
 12365 ;;		wreg, status,2, status,0, cstack
 12366 ;; Tracked objects:
 12367 ;;		On entry : 0/0
 12368 ;;		On exit  : 0/0
 12369 ;;		Unchanged: 0/0
 12370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;Total ram usage:        1 bytes
 12376 ;; Hardware stack levels used:    1
 12377 ;; Hardware stack levels required when called:    5
 12378 ;; This function calls:
 12379 ;;		_lcdNibble
 12380 ;; This function is called by:
 12381 ;;		_initLCD
 12382 ;;		_main
 12383 ;;		_Bolt_dispense
 12384 ;;		_Nut_dispense
 12385 ;;		_Spacer_dispense
 12386 ;;		_Washer_dispense
 12387 ;;		_Bolt_remain
 12388 ;;		_Nut_remain
 12389 ;;		_Spacer_remain
 12390 ;;		_Washer_remain
 12391 ;;		_lcd_set_cursor
 12392 ;;		_lcd_shift_cursor
 12393 ;;		_lcd_shift_display
 12394 ;;		_count_gear
 12395 ;;		_nut_washer_remain
 12396 ;;		_bolt_spacer_remain
 12397 ;;		_all_remain
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           	psect	text27
 12402  0061BE                     __ptext27:
 12403                           	opt stack 0
 12404  0061BE                     _lcdInst:
 12405                           	opt stack 25
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;incstack = 0
 12409                           ;lcdInst@data stored from wreg
 12410  0061BE  0100               	movlb	0	; () banked
 12411  0061C0  6FC5               	movwf	lcdInst@data& (0+255),b
 12412                           
 12413                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12414  0061C2  948C               	bcf	3980,2,c	;volatile
 12415                           
 12416                           ;lcd.c: 20: lcdNibble(data);
 12417  0061C4  0100               	movlb	0	; () banked
 12418  0061C6  51C5               	movf	lcdInst@data& (0+255),w,b
 12419  0061C8  ECDD  F02B         	call	_lcdNibble
 12420                           
 12421                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12422  0061CC  0EA0               	movlw	160
 12423  0061CE                     u7337:
 12424  0061CE  D000               	nop2	
 12425  0061D0  2EE8               	decfsz	wreg,f,c
 12426  0061D2  D7FD               	bra	u7337
 12427  0061D4  0012               	return		;funcret
 12428  0061D6                     __end_of_lcdInst:
 12429                           	opt stack 0
 12430                           tblptru	equ	0xFF8
 12431                           tblptrh	equ	0xFF7
 12432                           tblptrl	equ	0xFF6
 12433                           tablat	equ	0xFF5
 12434                           prodh	equ	0xFF4
 12435                           prodl	equ	0xFF3
 12436                           intcon	equ	0xFF2
 12437                           intcon3	equ	0xFF0
 12438                           indf0	equ	0xFEF
 12439                           postinc0	equ	0xFEE
 12440                           fsr0h	equ	0xFEA
 12441                           fsr0l	equ	0xFE9
 12442                           wreg	equ	0xFE8
 12443                           postdec1	equ	0xFE5
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           fsr2h	equ	0xFDA
 12449                           fsr2l	equ	0xFD9
 12450                           status	equ	0xFD8
 12451                           
 12452 ;; *************** function _lcdNibble *****************
 12453 ;; Defined at:
 12454 ;;		line 37 in file "lcd.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;  data            1    wreg     unsigned char 
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;  data            1    1[BANK0 ] unsigned char 
 12459 ;;  temp            1    0[BANK0 ] unsigned char 
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  1    wreg      void 
 12462 ;; Registers used:
 12463 ;;		wreg, status,2, status,0
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12473 ;;Total ram usage:        2 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; Hardware stack levels required when called:    4
 12476 ;; This function calls:
 12477 ;;		Nothing
 12478 ;; This function is called by:
 12479 ;;		_lcdInst
 12480 ;;		_putch
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           	psect	text28
 12485  0057BA                     __ptext28:
 12486                           	opt stack 0
 12487  0057BA                     _lcdNibble:
 12488                           	opt stack 24
 12489                           
 12490                           ;incstack = 0
 12491                           ;lcdNibble@data stored from wreg
 12492  0057BA  0100               	movlb	0	; () banked
 12493  0057BC  6FC4               	movwf	lcdNibble@data& (0+255),b
 12494                           
 12495                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12496  0057BE  0100               	movlb	0	; () banked
 12497  0057C0  51C4               	movf	lcdNibble@data& (0+255),w,b
 12498  0057C2  0BF0               	andlw	240
 12499  0057C4  6FC3               	movwf	lcdNibble@temp& (0+255),b
 12500                           
 12501                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12502  0057C6  508C               	movf	3980,w,c	;volatile
 12503  0057C8  0B0F               	andlw	15
 12504  0057CA  6E8C               	movwf	3980,c	;volatile
 12505                           
 12506                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12507  0057CC  51C3               	movf	lcdNibble@temp& (0+255),w,b
 12508  0057CE  108C               	iorwf	3980,w,c	;volatile
 12509  0057D0  6E8C               	movwf	3980,c	;volatile
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12513  0057D2  0E00               	movlw	0
 12514  0057D4  BEF2               	btfsc	intcon,7,c	;volatile
 12515  0057D6  0E01               	movlw	1
 12516  0057D8  6FBD               	movwf	_LCDinterruptState& (0+255),b
 12517                           
 12518                           ; BSR set to: 0
 12519  0057DA  9EF2               	bcf	intcon,7,c	;volatile
 12520                           
 12521                           ; BSR set to: 0
 12522  0057DC  868C               	bsf	3980,3,c	;volatile
 12523                           
 12524                           ; BSR set to: 0
 12525  0057DE  0E42               	movlw	66
 12526  0057E0                     u7347:
 12527  0057E0  2EE8               	decfsz	wreg,f,c
 12528  0057E2  D7FE               	bra	u7347
 12529  0057E4  D000               	nop2	
 12530  0057E6  968C               	bcf	3980,3,c	;volatile
 12531  0057E8  0EA0               	movlw	160
 12532  0057EA                     u7357:
 12533  0057EA  D000               	nop2	
 12534  0057EC  2EE8               	decfsz	wreg,f,c
 12535  0057EE  D7FD               	bra	u7357
 12536  0057F0  0100               	movlb	0	; () banked
 12537  0057F2  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 12538  0057F4  D002               	bra	u3445
 12539  0057F6  9EF2               	bcf	intcon,7,c	;volatile
 12540  0057F8  D001               	bra	u3446
 12541  0057FA                     u3445:
 12542  0057FA  8EF2               	bsf	intcon,7,c	;volatile
 12543  0057FC                     u3446:
 12544                           
 12545                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12546  0057FC  0100               	movlb	0	; () banked
 12547  0057FE  39C4               	swapf	lcdNibble@data& (0+255),w,b
 12548  005800  0BF0               	andlw	240
 12549  005802  6FC4               	movwf	lcdNibble@data& (0+255),b
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12553  005804  51C4               	movf	lcdNibble@data& (0+255),w,b
 12554  005806  0BF0               	andlw	240
 12555  005808  6FC3               	movwf	lcdNibble@temp& (0+255),b
 12556                           
 12557                           ; BSR set to: 0
 12558                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12559  00580A  508C               	movf	3980,w,c	;volatile
 12560  00580C  0B0F               	andlw	15
 12561  00580E  6E8C               	movwf	3980,c	;volatile
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12565  005810  51C3               	movf	lcdNibble@temp& (0+255),w,b
 12566  005812  108C               	iorwf	3980,w,c	;volatile
 12567  005814  6E8C               	movwf	3980,c	;volatile
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12571  005816  0E00               	movlw	0
 12572  005818  BEF2               	btfsc	intcon,7,c	;volatile
 12573  00581A  0E01               	movlw	1
 12574  00581C  6FBD               	movwf	_LCDinterruptState& (0+255),b
 12575                           
 12576                           ; BSR set to: 0
 12577  00581E  9EF2               	bcf	intcon,7,c	;volatile
 12578                           
 12579                           ; BSR set to: 0
 12580  005820  868C               	bsf	3980,3,c	;volatile
 12581                           
 12582                           ; BSR set to: 0
 12583  005822  0E42               	movlw	66
 12584  005824                     u7367:
 12585  005824  2EE8               	decfsz	wreg,f,c
 12586  005826  D7FE               	bra	u7367
 12587  005828  D000               	nop2	
 12588  00582A  968C               	bcf	3980,3,c	;volatile
 12589  00582C  0EA0               	movlw	160
 12590  00582E                     u7377:
 12591  00582E  D000               	nop2	
 12592  005830  2EE8               	decfsz	wreg,f,c
 12593  005832  D7FD               	bra	u7377
 12594  005834  0100               	movlb	0	; () banked
 12595  005836  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 12596  005838  D002               	bra	u3455
 12597  00583A  9EF2               	bcf	intcon,7,c	;volatile
 12598  00583C  D001               	bra	u3456
 12599  00583E                     u3455:
 12600  00583E  8EF2               	bsf	intcon,7,c	;volatile
 12601  005840                     u3456:
 12602  005840  0012               	return		;funcret
 12603  005842                     __end_of_lcdNibble:
 12604                           	opt stack 0
 12605                           tblptru	equ	0xFF8
 12606                           tblptrh	equ	0xFF7
 12607                           tblptrl	equ	0xFF6
 12608                           tablat	equ	0xFF5
 12609                           prodh	equ	0xFF4
 12610                           prodl	equ	0xFF3
 12611                           intcon	equ	0xFF2
 12612                           intcon3	equ	0xFF0
 12613                           indf0	equ	0xFEF
 12614                           postinc0	equ	0xFEE
 12615                           fsr0h	equ	0xFEA
 12616                           fsr0l	equ	0xFE9
 12617                           wreg	equ	0xFE8
 12618                           postdec1	equ	0xFE5
 12619                           fsr1l	equ	0xFE1
 12620                           indf2	equ	0xFDF
 12621                           postinc2	equ	0xFDE
 12622                           postdec2	equ	0xFDD
 12623                           fsr2h	equ	0xFDA
 12624                           fsr2l	equ	0xFD9
 12625                           status	equ	0xFD8
 12626                           
 12627 ;; *************** function _drawBolt *****************
 12628 ;; Defined at:
 12629 ;;		line 1686 in file "main.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;		None
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;		None
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  1    wreg      void 
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;Total ram usage:        1 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    8
 12650 ;; This function calls:
 12651 ;;		_I2C_Master_Init
 12652 ;;		_glcdDrawRectangle
 12653 ;;		_spiInit
 12654 ;; This function is called by:
 12655 ;;		_Bolt_dispense
 12656 ;;		_Bolt_remain
 12657 ;;		_bolt_spacer_remain
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text29
 12662  004F04                     __ptext29:
 12663                           	opt stack 0
 12664  004F04                     _drawBolt:
 12665                           	opt stack 21
 12666                           
 12667                           ;main.c: 1687: spiInit(4);
 12668                           
 12669                           ;incstack = 0
 12670  004F04  0E04               	movlw	4
 12671  004F06  ECF1  F02F         	call	_spiInit
 12672                           
 12673                           ;main.c: 1688: _delay((unsigned long)((20)*(32000000/4000.0)));
 12674  004F0A  0ED0               	movlw	208
 12675  004F0C  0100               	movlb	0	; () banked
 12676  004F0E  6FE4               	movwf	??_drawBolt& (0+255),b
 12677  004F10  0EC9               	movlw	201
 12678  004F12                     u7387:
 12679  004F12  2EE8               	decfsz	wreg,f,c
 12680  004F14  D7FE               	bra	u7387
 12681  004F16  2FE4               	decfsz	??_drawBolt& (0+255),f,b
 12682  004F18  D7FC               	bra	u7387
 12683  004F1A  D000               	nop2	
 12684                           
 12685                           ;main.c: 1689: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
 12686  004F1C  0EE9               	movlw	low _GLCD_SIZE_HORZ
 12687  004F1E  6EF6               	movwf	tblptrl,c
 12688  004F20                     	if	1	;There is more than 1 active tblptr byte
 12689  004F20  0EFC               	movlw	high _GLCD_SIZE_HORZ
 12690  004F22  6EF7               	movwf	tblptrh,c
 12691  004F24                     	endif
 12692  004F24                     	if	1	;There are 3 active tblptr bytes
 12693  004F24  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
 12694  004F26  6EF8               	movwf	tblptru,c
 12695  004F28                     	endif
 12696  004F28  0008               	tblrd		*
 12697  004F2A  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
 12698  004F2E  0E00               	movlw	0
 12699  004F30  0100               	movlb	0	; () banked
 12700  004F32  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12701  004F34  0EE8               	movlw	low _GLCD_SIZE_VERT
 12702  004F36  6EF6               	movwf	tblptrl,c
 12703  004F38                     	if	1	;There is more than 1 active tblptr byte
 12704  004F38  0EFC               	movlw	high _GLCD_SIZE_VERT
 12705  004F3A  6EF7               	movwf	tblptrh,c
 12706  004F3C                     	endif
 12707  004F3C                     	if	1	;There are 3 active tblptr bytes
 12708  004F3C  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
 12709  004F3E  6EF8               	movwf	tblptru,c
 12710  004F40                     	endif
 12711  004F40  0008               	tblrd		*
 12712  004F42  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
 12713  004F46  0EA1               	movlw	low _BLACK
 12714  004F48  6EF6               	movwf	tblptrl,c
 12715  004F4A                     	if	1	;There is more than 1 active tblptr byte
 12716  004F4A  0EFC               	movlw	high _BLACK
 12717  004F4C  6EF7               	movwf	tblptrh,c
 12718  004F4E                     	endif
 12719  004F4E                     	if	1	;There are 3 active tblptr bytes
 12720  004F4E  0E00               	movlw	low (_BLACK shr (0+16))
 12721  004F50  6EF8               	movwf	tblptru,c
 12722  004F52                     	endif
 12723  004F52  0009               	tblrd		*+
 12724  004F54  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12725  004F58  0009               	tblrd		*+
 12726  004F5A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12727  004F5E  0009               	tblrd		*+
 12728  004F60  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12729  004F64  000A               	tblrd		*-
 12730  004F66  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12731  004F6A  0E00               	movlw	0
 12732  004F6C  ECA8  F026         	call	_glcdDrawRectangle
 12733                           
 12734                           ;main.c: 1690: glcdDrawRectangle(5*4,9*4, 8*4, 20*4, WHITE);
 12735  004F70  0E24               	movlw	36
 12736  004F72  0100               	movlb	0	; () banked
 12737  004F74  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12738  004F76  0E20               	movlw	32
 12739  004F78  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12740  004F7A  0E50               	movlw	80
 12741  004F7C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12742  004F7E  0E99               	movlw	low _WHITE
 12743  004F80  6EF6               	movwf	tblptrl,c
 12744  004F82                     	if	1	;There is more than 1 active tblptr byte
 12745  004F82  0EFC               	movlw	high _WHITE
 12746  004F84  6EF7               	movwf	tblptrh,c
 12747  004F86                     	endif
 12748  004F86                     	if	1	;There are 3 active tblptr bytes
 12749  004F86  0E00               	movlw	low (_WHITE shr (0+16))
 12750  004F88  6EF8               	movwf	tblptru,c
 12751  004F8A                     	endif
 12752  004F8A  0009               	tblrd		*+
 12753  004F8C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12754  004F90  0009               	tblrd		*+
 12755  004F92  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12756  004F96  0009               	tblrd		*+
 12757  004F98  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12758  004F9C  000A               	tblrd		*-
 12759  004F9E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12760  004FA2  0E14               	movlw	20
 12761  004FA4  ECA8  F026         	call	_glcdDrawRectangle
 12762                           
 12763                           ;main.c: 1691: glcdDrawRectangle(6*4,8*4, 9*4, 19*4, WHITE);
 12764  004FA8  0E20               	movlw	32
 12765  004FAA  0100               	movlb	0	; () banked
 12766  004FAC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12767  004FAE  0E24               	movlw	36
 12768  004FB0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12769  004FB2  0E4C               	movlw	76
 12770  004FB4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12771  004FB6  0E99               	movlw	low _WHITE
 12772  004FB8  6EF6               	movwf	tblptrl,c
 12773  004FBA                     	if	1	;There is more than 1 active tblptr byte
 12774  004FBA  0EFC               	movlw	high _WHITE
 12775  004FBC  6EF7               	movwf	tblptrh,c
 12776  004FBE                     	endif
 12777  004FBE                     	if	1	;There are 3 active tblptr bytes
 12778  004FBE  0E00               	movlw	low (_WHITE shr (0+16))
 12779  004FC0  6EF8               	movwf	tblptru,c
 12780  004FC2                     	endif
 12781  004FC2  0009               	tblrd		*+
 12782  004FC4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12783  004FC8  0009               	tblrd		*+
 12784  004FCA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12785  004FCE  0009               	tblrd		*+
 12786  004FD0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12787  004FD4  000A               	tblrd		*-
 12788  004FD6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12789  004FDA  0E18               	movlw	24
 12790  004FDC  ECA8  F026         	call	_glcdDrawRectangle
 12791                           
 12792                           ;main.c: 1693: glcdDrawRectangle(8*4,28*4, 11*4, 17*4, WHITE);
 12793  004FE0  0E70               	movlw	112
 12794  004FE2  0100               	movlb	0	; () banked
 12795  004FE4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12796  004FE6  0E2C               	movlw	44
 12797  004FE8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12798  004FEA  0E44               	movlw	68
 12799  004FEC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12800  004FEE  0E99               	movlw	low _WHITE
 12801  004FF0  6EF6               	movwf	tblptrl,c
 12802  004FF2                     	if	1	;There is more than 1 active tblptr byte
 12803  004FF2  0EFC               	movlw	high _WHITE
 12804  004FF4  6EF7               	movwf	tblptrh,c
 12805  004FF6                     	endif
 12806  004FF6                     	if	1	;There are 3 active tblptr bytes
 12807  004FF6  0E00               	movlw	low (_WHITE shr (0+16))
 12808  004FF8  6EF8               	movwf	tblptru,c
 12809  004FFA                     	endif
 12810  004FFA  0009               	tblrd		*+
 12811  004FFC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12812  005000  0009               	tblrd		*+
 12813  005002  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12814  005006  0009               	tblrd		*+
 12815  005008  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12816  00500C  000A               	tblrd		*-
 12817  00500E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12818  005012  0E20               	movlw	32
 12819  005014  ECA8  F026         	call	_glcdDrawRectangle
 12820                           
 12821                           ;main.c: 1694: glcdDrawRectangle(9*4,27*4, 12*4, 16*4, WHITE);
 12822  005018  0E6C               	movlw	108
 12823  00501A  0100               	movlb	0	; () banked
 12824  00501C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12825  00501E  0E30               	movlw	48
 12826  005020  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12827  005022  0E40               	movlw	64
 12828  005024  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12829  005026  0E99               	movlw	low _WHITE
 12830  005028  6EF6               	movwf	tblptrl,c
 12831  00502A                     	if	1	;There is more than 1 active tblptr byte
 12832  00502A  0EFC               	movlw	high _WHITE
 12833  00502C  6EF7               	movwf	tblptrh,c
 12834  00502E                     	endif
 12835  00502E                     	if	1	;There are 3 active tblptr bytes
 12836  00502E  0E00               	movlw	low (_WHITE shr (0+16))
 12837  005030  6EF8               	movwf	tblptru,c
 12838  005032                     	endif
 12839  005032  0009               	tblrd		*+
 12840  005034  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12841  005038  0009               	tblrd		*+
 12842  00503A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12843  00503E  0009               	tblrd		*+
 12844  005040  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12845  005044  000A               	tblrd		*-
 12846  005046  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12847  00504A  0E24               	movlw	36
 12848  00504C  ECA8  F026         	call	_glcdDrawRectangle
 12849                           
 12850                           ;main.c: 1695: I2C_Master_Init(100000);
 12851  005050  0EA0               	movlw	160
 12852  005052  0100               	movlb	0	; () banked
 12853  005054  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 12854  005056  0E86               	movlw	134
 12855  005058  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 12856  00505A  0E01               	movlw	1
 12857  00505C  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 12858  00505E  0E00               	movlw	0
 12859  005060  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 12860  005062  EC1A  F02E         	call	_I2C_Master_Init	;wreg free
 12861  005066  0012               	return		;funcret
 12862  005068                     __end_of_drawBolt:
 12863                           	opt stack 0
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon	equ	0xFF2
 12871                           intcon3	equ	0xFF0
 12872                           indf0	equ	0xFEF
 12873                           postinc0	equ	0xFEE
 12874                           fsr0h	equ	0xFEA
 12875                           fsr0l	equ	0xFE9
 12876                           wreg	equ	0xFE8
 12877                           postdec1	equ	0xFE5
 12878                           fsr1l	equ	0xFE1
 12879                           indf2	equ	0xFDF
 12880                           postinc2	equ	0xFDE
 12881                           postdec2	equ	0xFDD
 12882                           fsr2h	equ	0xFDA
 12883                           fsr2l	equ	0xFD9
 12884                           status	equ	0xFD8
 12885                           
 12886 ;; *************** function _spiInit *****************
 12887 ;; Defined at:
 12888 ;;		line 54 in file "SPI_PIC.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;  divider         1    wreg     unsigned char 
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  divider         1    0[BANK0 ] unsigned char 
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  1    wreg      void 
 12895 ;; Registers used:
 12896 ;;		wreg, status,2, status,0
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12905 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12906 ;;Total ram usage:        1 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    4
 12909 ;; This function calls:
 12910 ;;		Nothing
 12911 ;; This function is called by:
 12912 ;;		_drawTeamName
 12913 ;;		_drawWasher
 12914 ;;		_drawBolt
 12915 ;;		_drawNut
 12916 ;;		_drawSpacer
 12917 ;;		_initGLCD
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           	psect	text30
 12922  005FE2                     __ptext30:
 12923                           	opt stack 0
 12924  005FE2                     _spiInit:
 12925                           	opt stack 25
 12926                           
 12927                           ;incstack = 0
 12928                           ;spiInit@divider stored from wreg
 12929  005FE2  0100               	movlb	0	; () banked
 12930  005FE4  6FC3               	movwf	spiInit@divider& (0+255),b
 12931                           
 12932                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
 12933  005FE6  9AC6               	bcf	4038,5,c	;volatile
 12934                           
 12935                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
 12936  005FE8  0E00               	movlw	0
 12937  005FEA  6EC7               	movwf	4039,c	;volatile
 12938                           
 12939                           ;SPI_PIC.c: 71: switch(divider){
 12940  005FEC  D007               	goto	l1222
 12941  005FEE                     
 12942                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
 12943  005FEE  0E11               	movlw	17
 12944  005FF0  D003               	goto	L5
 12945  005FF2                     
 12946                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
 12947  005FF2  0E12               	movlw	18
 12948  005FF4  D001               	goto	L5
 12949  005FF6                     
 12950                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
 12951  005FF6  0E10               	movlw	16
 12952  005FF8                     L5:
 12953  005FF8  6EC6               	movwf	4038,c	;volatile
 12954                           
 12955                           ;SPI_PIC.c: 83: }
 12956  005FFA  D00C               	goto	l1224
 12957  005FFC                     l1222:
 12958  005FFC  0100               	movlb	0	; () banked
 12959  005FFE  51C3               	movf	spiInit@divider& (0+255),w,b
 12960                           
 12961                           ; Switch size 1, requested type "space"
 12962                           ; Number of cases is 3, Range of values is 4 to 64
 12963                           ; switch strategies available:
 12964                           ; Name         Instructions Cycles
 12965                           ; simple_byte           10     6 (average)
 12966                           ;	Chosen strategy is simple_byte
 12967  006000  0A04               	xorlw	4	; case 4
 12968  006002  B4D8               	btfsc	status,2,c
 12969  006004  D7F8               	goto	l1227
 12970  006006  0A14               	xorlw	20	; case 16
 12971  006008  B4D8               	btfsc	status,2,c
 12972  00600A  D7F1               	goto	l1225
 12973  00600C  0A50               	xorlw	80	; case 64
 12974  00600E  B4D8               	btfsc	status,2,c
 12975  006010  D7F0               	goto	l1226
 12976  006012  D7F1               	goto	l1227
 12977  006014                     l1224:
 12978                           
 12979                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
 12980  006014  9A94               	bcf	3988,5,c	;volatile
 12981                           
 12982                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
 12983  006016  8894               	bsf	3988,4,c	;volatile
 12984                           
 12985                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
 12986  006018  9694               	bcf	3988,3,c	;volatile
 12987                           
 12988                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
 12989  00601A  8AC6               	bsf	4038,5,c	;volatile
 12990  00601C  0012               	return		;funcret
 12991  00601E                     __end_of_spiInit:
 12992                           	opt stack 0
 12993                           tblptru	equ	0xFF8
 12994                           tblptrh	equ	0xFF7
 12995                           tblptrl	equ	0xFF6
 12996                           tablat	equ	0xFF5
 12997                           prodh	equ	0xFF4
 12998                           prodl	equ	0xFF3
 12999                           intcon	equ	0xFF2
 13000                           intcon3	equ	0xFF0
 13001                           indf0	equ	0xFEF
 13002                           postinc0	equ	0xFEE
 13003                           fsr0h	equ	0xFEA
 13004                           fsr0l	equ	0xFE9
 13005                           wreg	equ	0xFE8
 13006                           postdec1	equ	0xFE5
 13007                           fsr1l	equ	0xFE1
 13008                           indf2	equ	0xFDF
 13009                           postinc2	equ	0xFDE
 13010                           postdec2	equ	0xFDD
 13011                           fsr2h	equ	0xFDA
 13012                           fsr2l	equ	0xFD9
 13013                           status	equ	0xFD8
 13014                           
 13015 ;; *************** function _glcdDrawRectangle *****************
 13016 ;; Defined at:
 13017 ;;		line 38 in file "GLCD_PIC.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;  XS              1    wreg     unsigned char 
 13020 ;;  XE              1   14[BANK0 ] unsigned char 
 13021 ;;  YS              1   15[BANK0 ] unsigned char 
 13022 ;;  YE              1   16[BANK0 ] unsigned char 
 13023 ;;  color           4   17[BANK0 ] unsigned long 
 13024 ;; Auto vars:     Size  Location     Type
 13025 ;;  XS              1   32[BANK0 ] unsigned char 
 13026 ;;  i               2   27[BANK0 ] unsigned short 
 13027 ;;  colorData       3   29[BANK0 ] unsigned char [3]
 13028 ;;  numLoops        2   25[BANK0 ] unsigned short 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13038 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13039 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13041 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13042 ;;Total ram usage:       19 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    7
 13045 ;; This function calls:
 13046 ;;		___wmul
 13047 ;;		_glcdTransfer
 13048 ;;		_spiSend
 13049 ;; This function is called by:
 13050 ;;		_drawTeamName
 13051 ;;		_drawWasher
 13052 ;;		_drawBolt
 13053 ;;		_drawNut
 13054 ;;		_drawSpacer
 13055 ;;		_initGLCD
 13056 ;;		_glcdDrawPixel
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           	psect	text31
 13061  004D50                     __ptext31:
 13062                           	opt stack 0
 13063  004D50                     _glcdDrawRectangle:
 13064                           	opt stack 22
 13065                           
 13066                           ;incstack = 0
 13067                           ;glcdDrawRectangle@XS stored from wreg
 13068  004D50  0100               	movlb	0	; () banked
 13069  004D52  6FE3               	movwf	glcdDrawRectangle@XS& (0+255),b
 13070                           
 13071                           ;GLCD_PIC.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
 13072  004D54  0100               	movlb	0	; () banked
 13073  004D56  BDB9               	btfsc	_MADCTLbits& (0+255),6,b
 13074                           
 13075                           ; BSR set to: 0
 13076  004D58  ABB9               	btfss	_MADCTLbits& (0+255),5,b
 13077  004D5A  D005               	goto	l1338
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;GLCD_PIC.c: 60: YS += 3;
 13081  004D5C  0E03               	movlw	3
 13082  004D5E  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13083                           
 13084                           ;GLCD_PIC.c: 61: YE += 3;
 13085  004D60  0E03               	movlw	3
 13086  004D62  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13087  004D64  D015               	goto	l5623
 13088  004D66                     l1338:
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;GLCD_PIC.c: 65: else if(MADCTLbits.MY == 1){
 13092  004D66  AFB9               	btfss	_MADCTLbits& (0+255),7,b
 13093  004D68  D008               	goto	l1340
 13094                           
 13095                           ; BSR set to: 0
 13096                           ;GLCD_PIC.c: 67: YS += 2;
 13097  004D6A  0E02               	movlw	2
 13098  004D6C  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13099                           
 13100                           ;GLCD_PIC.c: 68: YE += 2;
 13101  004D6E  0E02               	movlw	2
 13102  004D70  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13103                           
 13104                           ;GLCD_PIC.c: 69: XS += 3;
 13105  004D72  0E03               	movlw	3
 13106  004D74  27E3               	addwf	glcdDrawRectangle@XS& (0+255),f,b
 13107                           
 13108                           ;GLCD_PIC.c: 70: XE += 3;
 13109  004D76  0E03               	movlw	3
 13110  004D78  D00E               	goto	L7
 13111  004D7A                     l1340:
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;GLCD_PIC.c: 72: else if(MADCTLbits.MX == 1){
 13115  004D7A  ADB9               	btfss	_MADCTLbits& (0+255),6,b
 13116  004D7C  D007               	goto	l1342
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;GLCD_PIC.c: 74: YS += 2;
 13120  004D7E  0E02               	movlw	2
 13121  004D80  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13122                           
 13123                           ;GLCD_PIC.c: 75: YE += 2;
 13124  004D82  0E02               	movlw	2
 13125  004D84  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;GLCD_PIC.c: 76: XS += 1;
 13129  004D86  2BE3               	incf	glcdDrawRectangle@XS& (0+255),f,b
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;GLCD_PIC.c: 77: XE += 1;
 13133  004D88  2BD1               	incf	glcdDrawRectangle@XE& (0+255),f,b
 13134                           
 13135                           ;GLCD_PIC.c: 78: }
 13136  004D8A  D006               	goto	l1343
 13137  004D8C                     l1342:
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;GLCD_PIC.c: 79: else{
 13141                           ;GLCD_PIC.c: 81: YS += 1;
 13142                           
 13143                           ; BSR set to: 0
 13144  004D8C  2BD2               	incf	glcdDrawRectangle@YS& (0+255),f,b
 13145                           
 13146                           ;GLCD_PIC.c: 82: YE += 1;
 13147  004D8E  2BD3               	incf	glcdDrawRectangle@YE& (0+255),f,b
 13148  004D90                     l5623:
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;GLCD_PIC.c: 83: XS += 2;
 13152  004D90  0E02               	movlw	2
 13153  004D92  27E3               	addwf	glcdDrawRectangle@XS& (0+255),f,b
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;GLCD_PIC.c: 84: XE += 2;
 13157  004D94  0E02               	movlw	2
 13158  004D96                     L7:
 13159  004D96  27D1               	addwf	glcdDrawRectangle@XE& (0+255),f,b
 13160  004D98                     l1343:
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;GLCD_PIC.c: 85: }
 13164                           ;GLCD_PIC.c: 89: glcdTransfer(INST_RASET, 1);
 13165                           
 13166                           ; BSR set to: 0
 13167                           
 13168                           ; BSR set to: 0
 13169                           
 13170                           ; BSR set to: 0
 13171  004D98  0E01               	movlw	1
 13172  004D9A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13173  004D9C  0EBB               	movlw	low GLCD_PIC@INST_RASET
 13174  004D9E  6EF6               	movwf	tblptrl,c
 13175  004DA0                     	if	1	;There is more than 1 active tblptr byte
 13176  004DA0  0EFC               	movlw	high GLCD_PIC@INST_RASET
 13177  004DA2  6EF7               	movwf	tblptrh,c
 13178  004DA4                     	endif
 13179  004DA4                     	if	1	;There are 3 active tblptr bytes
 13180  004DA4  0E00               	movlw	low (GLCD_PIC@INST_RASET shr (0+16))
 13181  004DA6  6EF8               	movwf	tblptru,c
 13182  004DA8                     	endif
 13183  004DA8  0008               	tblrd		*
 13184  004DAA  50F5               	movf	tablat,w,c
 13185  004DAC  EC26  F030         	call	_glcdTransfer
 13186                           
 13187                           ;GLCD_PIC.c: 90: glcdTransfer(0x00, 0);
 13188  004DB0  0E00               	movlw	0
 13189  004DB2  0100               	movlb	0	; () banked
 13190  004DB4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13191  004DB6  0E00               	movlw	0
 13192  004DB8  EC26  F030         	call	_glcdTransfer
 13193                           
 13194                           ;GLCD_PIC.c: 91: glcdTransfer(XS, 0);
 13195  004DBC  0E00               	movlw	0
 13196  004DBE  0100               	movlb	0	; () banked
 13197  004DC0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13198  004DC2  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13199  004DC4  EC26  F030         	call	_glcdTransfer
 13200                           
 13201                           ;GLCD_PIC.c: 92: glcdTransfer(0x00, 0);
 13202  004DC8  0E00               	movlw	0
 13203  004DCA  0100               	movlb	0	; () banked
 13204  004DCC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13205  004DCE  0E00               	movlw	0
 13206  004DD0  EC26  F030         	call	_glcdTransfer
 13207                           
 13208                           ;GLCD_PIC.c: 93: glcdTransfer(XE - 1, 0);
 13209  004DD4  0E00               	movlw	0
 13210  004DD6  0100               	movlb	0	; () banked
 13211  004DD8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13212  004DDA  05D1               	decf	glcdDrawRectangle@XE& (0+255),w,b
 13213  004DDC  EC26  F030         	call	_glcdTransfer
 13214                           
 13215                           ;GLCD_PIC.c: 97: glcdTransfer(INST_CASET, 1);
 13216  004DE0  0E01               	movlw	1
 13217  004DE2  0100               	movlb	0	; () banked
 13218  004DE4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13219  004DE6  0EBC               	movlw	low GLCD_PIC@INST_CASET
 13220  004DE8  6EF6               	movwf	tblptrl,c
 13221  004DEA                     	if	1	;There is more than 1 active tblptr byte
 13222  004DEA  0EFC               	movlw	high GLCD_PIC@INST_CASET
 13223  004DEC  6EF7               	movwf	tblptrh,c
 13224  004DEE                     	endif
 13225  004DEE                     	if	1	;There are 3 active tblptr bytes
 13226  004DEE  0E00               	movlw	low (GLCD_PIC@INST_CASET shr (0+16))
 13227  004DF0  6EF8               	movwf	tblptru,c
 13228  004DF2                     	endif
 13229  004DF2  0008               	tblrd		*
 13230  004DF4  50F5               	movf	tablat,w,c
 13231  004DF6  EC26  F030         	call	_glcdTransfer
 13232                           
 13233                           ;GLCD_PIC.c: 98: glcdTransfer(0x00, 0);
 13234  004DFA  0E00               	movlw	0
 13235  004DFC  0100               	movlb	0	; () banked
 13236  004DFE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13237  004E00  0E00               	movlw	0
 13238  004E02  EC26  F030         	call	_glcdTransfer
 13239                           
 13240                           ;GLCD_PIC.c: 99: glcdTransfer(YS, 0);
 13241  004E06  0E00               	movlw	0
 13242  004E08  0100               	movlb	0	; () banked
 13243  004E0A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13244  004E0C  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13245  004E0E  EC26  F030         	call	_glcdTransfer
 13246                           
 13247                           ;GLCD_PIC.c: 100: glcdTransfer(0x00, 0);
 13248  004E12  0E00               	movlw	0
 13249  004E14  0100               	movlb	0	; () banked
 13250  004E16  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13251  004E18  0E00               	movlw	0
 13252  004E1A  EC26  F030         	call	_glcdTransfer
 13253                           
 13254                           ;GLCD_PIC.c: 101: glcdTransfer(YE - 1, 0);
 13255  004E1E  0E00               	movlw	0
 13256  004E20  0100               	movlb	0	; () banked
 13257  004E22  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13258  004E24  05D3               	decf	glcdDrawRectangle@YE& (0+255),w,b
 13259  004E26  EC26  F030         	call	_glcdTransfer
 13260                           
 13261                           ;GLCD_PIC.c: 103: glcdTransfer(INST_RAMWR, 1);
 13262  004E2A  0E01               	movlw	1
 13263  004E2C  0100               	movlb	0	; () banked
 13264  004E2E  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13265  004E30  0EBA               	movlw	low GLCD_PIC@INST_RAMWR
 13266  004E32  6EF6               	movwf	tblptrl,c
 13267  004E34                     	if	1	;There is more than 1 active tblptr byte
 13268  004E34  0EFC               	movlw	high GLCD_PIC@INST_RAMWR
 13269  004E36  6EF7               	movwf	tblptrh,c
 13270  004E38                     	endif
 13271  004E38                     	if	1	;There are 3 active tblptr bytes
 13272  004E38  0E00               	movlw	low (GLCD_PIC@INST_RAMWR shr (0+16))
 13273  004E3A  6EF8               	movwf	tblptru,c
 13274  004E3C                     	endif
 13275  004E3C  0008               	tblrd		*
 13276  004E3E  50F5               	movf	tablat,w,c
 13277  004E40  EC26  F030         	call	_glcdTransfer
 13278                           
 13279                           ;GLCD_PIC.c: 107: if((XE == XS) && (YE == YS)){
 13280  004E44  0100               	movlb	0	; () banked
 13281  004E46  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13282  004E48  19D1               	xorwf	glcdDrawRectangle@XE& (0+255),w,b
 13283  004E4A  A4D8               	btfss	status,2,c
 13284  004E4C  D016               	goto	l1344
 13285                           
 13286                           ; BSR set to: 0
 13287  004E4E  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13288  004E50  19D3               	xorwf	glcdDrawRectangle@YE& (0+255),w,b
 13289  004E52  A4D8               	btfss	status,2,c
 13290  004E54  D012               	goto	l1344
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;GLCD_PIC.c: 114: glcdTransfer(color & 0xFF, 0);
 13294  004E56  0E00               	movlw	0
 13295  004E58  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13296  004E5A  51D4               	movf	glcdDrawRectangle@color& (0+255),w,b
 13297  004E5C  EC26  F030         	call	_glcdTransfer
 13298                           
 13299                           ;GLCD_PIC.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
 13300  004E60  0E00               	movlw	0
 13301  004E62  0100               	movlb	0	; () banked
 13302  004E64  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13303  004E66  51D5               	movf	(glcdDrawRectangle@color+1)& (0+255),w,b
 13304  004E68  EC26  F030         	call	_glcdTransfer
 13305                           
 13306                           ;GLCD_PIC.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
 13307  004E6C  0E00               	movlw	0
 13308  004E6E  0100               	movlb	0	; () banked
 13309  004E70  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13310  004E72  51D6               	movf	(glcdDrawRectangle@color+2)& (0+255),w,b
 13311  004E74  EC26  F030         	call	_glcdTransfer
 13312                           
 13313                           ;GLCD_PIC.c: 117: }
 13314  004E78  0012               	return	
 13315  004E7A                     l1344:
 13316                           
 13317                           ;GLCD_PIC.c: 118: else{
 13318                           ;GLCD_PIC.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
 13319  004E7A  0100               	movlb	0	; () banked
 13320  004E7C  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13321  004E7E  6FD8               	movwf	??_glcdDrawRectangle& (0+255),b
 13322  004E80  6BD9               	clrf	(??_glcdDrawRectangle+1)& (0+255),b
 13323  004E82  1FD8               	comf	??_glcdDrawRectangle& (0+255),f,b
 13324  004E84  1FD9               	comf	(??_glcdDrawRectangle+1)& (0+255),f,b
 13325  004E86  4BD8               	infsnz	??_glcdDrawRectangle& (0+255),f,b
 13326  004E88  2BD9               	incf	(??_glcdDrawRectangle+1)& (0+255),f,b
 13327  004E8A  51D1               	movf	glcdDrawRectangle@XE& (0+255),w,b
 13328  004E8C  25D8               	addwf	??_glcdDrawRectangle& (0+255),w,b
 13329  004E8E  6FCB               	movwf	___wmul@multiplier& (0+255),b
 13330  004E90  0E00               	movlw	0
 13331  004E92  21D9               	addwfc	(??_glcdDrawRectangle+1)& (0+255),w,b
 13332  004E94  6FCC               	movwf	(___wmul@multiplier+1)& (0+255),b
 13333  004E96  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13334  004E98  6FDA               	movwf	(??_glcdDrawRectangle+2)& (0+255),b
 13335  004E9A  6BDB               	clrf	(??_glcdDrawRectangle+3)& (0+255),b
 13336  004E9C  1FDA               	comf	(??_glcdDrawRectangle+2)& (0+255),f,b
 13337  004E9E  1FDB               	comf	(??_glcdDrawRectangle+3)& (0+255),f,b
 13338  004EA0  4BDA               	infsnz	(??_glcdDrawRectangle+2)& (0+255),f,b
 13339  004EA2  2BDB               	incf	(??_glcdDrawRectangle+3)& (0+255),f,b
 13340  004EA4  51D3               	movf	glcdDrawRectangle@YE& (0+255),w,b
 13341  004EA6  25DA               	addwf	(??_glcdDrawRectangle+2)& (0+255),w,b
 13342  004EA8  6FCD               	movwf	___wmul@multiplicand& (0+255),b
 13343  004EAA  0E00               	movlw	0
 13344  004EAC  21DB               	addwfc	(??_glcdDrawRectangle+3)& (0+255),w,b
 13345  004EAE  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13346  004EB0  EC66  F030         	call	___wmul	;wreg free
 13347  004EB4  C0CB  F0DC         	movff	?___wmul,glcdDrawRectangle@numLoops
 13348  004EB8  C0CC  F0DD         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
 13349                           
 13350                           ;GLCD_PIC.c: 131: unsigned char colorData[3];
 13351                           ;GLCD_PIC.c: 132: colorData[0] = color & 0xFF;
 13352  004EBC  C0D4  F0E0         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
 13353                           
 13354                           ;GLCD_PIC.c: 133: colorData[1] = (color >> 8) & 0xFF;
 13355  004EC0  C0D5  F0E1         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
 13356                           
 13357                           ;GLCD_PIC.c: 134: colorData[2] = (color >> 16) & 0xFF;
 13358  004EC4  C0D6  F0E2         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
 13359                           
 13360                           ;GLCD_PIC.c: 136: LATDbits.LATD0 = 0;
 13361  004EC8  908C               	bcf	3980,0,c	;volatile
 13362                           
 13363                           ;GLCD_PIC.c: 137: LATDbits.LATD1 = 1;
 13364  004ECA  828C               	bsf	3980,1,c	;volatile
 13365                           
 13366                           ;GLCD_PIC.c: 138: for(unsigned short i = 0; i < numLoops; i++){
 13367  004ECC  0E00               	movlw	0
 13368  004ECE  0100               	movlb	0	; () banked
 13369  004ED0  6FDF               	movwf	(glcdDrawRectangle@i+1)& (0+255),b
 13370  004ED2  0E00               	movlw	0
 13371  004ED4  6FDE               	movwf	glcdDrawRectangle@i& (0+255),b
 13372  004ED6  D00E               	goto	l1346
 13373  004ED8                     
 13374                           ; BSR set to: 0
 13375                           ;GLCD_PIC.c: 139: spiSend(colorData[0]);
 13376                           
 13377                           ; BSR set to: 0
 13378  004ED8  51E0               	movf	glcdDrawRectangle@colorData& (0+255),w,b
 13379  004EDA  EC1C  F031         	call	_spiSend
 13380                           
 13381                           ;GLCD_PIC.c: 140: spiSend(colorData[1]);
 13382  004EDE  0100               	movlb	0	; () banked
 13383  004EE0  51E1               	movf	(glcdDrawRectangle@colorData+1)& (0+255),w,b
 13384  004EE2  EC1C  F031         	call	_spiSend
 13385                           
 13386                           ;GLCD_PIC.c: 141: spiSend(colorData[2]);
 13387  004EE6  0100               	movlb	0	; () banked
 13388  004EE8  51E2               	movf	(glcdDrawRectangle@colorData+2)& (0+255),w,b
 13389  004EEA  EC1C  F031         	call	_spiSend
 13390  004EEE  0100               	movlb	0	; () banked
 13391  004EF0  4BDE               	infsnz	glcdDrawRectangle@i& (0+255),f,b
 13392  004EF2  2BDF               	incf	(glcdDrawRectangle@i+1)& (0+255),f,b
 13393  004EF4                     l1346:
 13394                           
 13395                           ; BSR set to: 0
 13396                           
 13397                           ; BSR set to: 0
 13398  004EF4  51DC               	movf	glcdDrawRectangle@numLoops& (0+255),w,b
 13399  004EF6  5DDE               	subwf	glcdDrawRectangle@i& (0+255),w,b
 13400  004EF8  51DD               	movf	(glcdDrawRectangle@numLoops+1)& (0+255),w,b
 13401  004EFA  59DF               	subwfb	(glcdDrawRectangle@i+1)& (0+255),w,b
 13402  004EFC  A0D8               	btfss	status,0,c
 13403  004EFE  D7EC               	goto	l1347
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;GLCD_PIC.c: 142: }
 13407                           ;GLCD_PIC.c: 143: LATDbits.LATD0 = 1;
 13408  004F00  808C               	bsf	3980,0,c	;volatile
 13409  004F02  0012               	return	
 13410  004F04                     __end_of_glcdDrawRectangle:
 13411                           	opt stack 0
 13412                           tblptru	equ	0xFF8
 13413                           tblptrh	equ	0xFF7
 13414                           tblptrl	equ	0xFF6
 13415                           tablat	equ	0xFF5
 13416                           prodh	equ	0xFF4
 13417                           prodl	equ	0xFF3
 13418                           intcon	equ	0xFF2
 13419                           intcon3	equ	0xFF0
 13420                           indf0	equ	0xFEF
 13421                           postinc0	equ	0xFEE
 13422                           fsr0h	equ	0xFEA
 13423                           fsr0l	equ	0xFE9
 13424                           wreg	equ	0xFE8
 13425                           postdec1	equ	0xFE5
 13426                           fsr1l	equ	0xFE1
 13427                           indf2	equ	0xFDF
 13428                           postinc2	equ	0xFDE
 13429                           postdec2	equ	0xFDD
 13430                           fsr2h	equ	0xFDA
 13431                           fsr2l	equ	0xFD9
 13432                           status	equ	0xFD8
 13433                           
 13434 ;; *************** function _glcdTransfer *****************
 13435 ;; Defined at:
 13436 ;;		line 18 in file "GLCD_PIC.c"
 13437 ;; Parameters:    Size  Location     Type
 13438 ;;  byte            1    wreg     unsigned char 
 13439 ;;  cmd             1    3[BANK0 ] unsigned char 
 13440 ;; Auto vars:     Size  Location     Type
 13441 ;;  byte            1    5[BANK0 ] unsigned char 
 13442 ;; Return value:  Size  Location     Type
 13443 ;;                  1    wreg      void 
 13444 ;; Registers used:
 13445 ;;		wreg, status,2, status,0, cstack
 13446 ;; Tracked objects:
 13447 ;;		On entry : 0/0
 13448 ;;		On exit  : 0/0
 13449 ;;		Unchanged: 0/0
 13450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13451 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13454 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13455 ;;Total ram usage:        3 bytes
 13456 ;; Hardware stack levels used:    1
 13457 ;; Hardware stack levels required when called:    6
 13458 ;; This function calls:
 13459 ;;		_spiSend
 13460 ;; This function is called by:
 13461 ;;		_glcdDrawRectangle
 13462 ;;		_glcdSetCOLMOD
 13463 ;;		_initGLCD
 13464 ;;		_glcdSetOrigin
 13465 ;; This function uses a non-reentrant model
 13466 ;;
 13467                           
 13468                           	psect	text32
 13469  00604C                     __ptext32:
 13470                           	opt stack 0
 13471  00604C                     _glcdTransfer:
 13472                           	opt stack 23
 13473                           
 13474                           ;incstack = 0
 13475                           ;glcdTransfer@byte stored from wreg
 13476  00604C  0100               	movlb	0	; () banked
 13477  00604E  6FC8               	movwf	glcdTransfer@byte& (0+255),b
 13478                           
 13479                           ;GLCD_PIC.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
 13480  006050  0100               	movlb	0	; () banked
 13481  006052  05C6               	decf	glcdTransfer@cmd& (0+255),w,b
 13482  006054  B4D8               	btfsc	status,2,c
 13483  006056  D003               	goto	u3480
 13484  006058  6BC7               	clrf	??_glcdTransfer& (0+255),b
 13485  00605A  2BC7               	incf	??_glcdTransfer& (0+255),f,b
 13486  00605C  D002               	goto	u3498
 13487  00605E                     u3480:
 13488  00605E  0100               	movlb	0	; () banked
 13489  006060  6BC7               	clrf	??_glcdTransfer& (0+255),b
 13490  006062                     u3498:
 13491  006062  47C7               	rlncf	??_glcdTransfer& (0+255),f,b
 13492  006064  508C               	movf	3980,w,c	;volatile
 13493  006066  19C7               	xorwf	??_glcdTransfer& (0+255),w,b
 13494  006068  0BFD               	andlw	-3
 13495  00606A  19C7               	xorwf	??_glcdTransfer& (0+255),w,b
 13496  00606C  6E8C               	movwf	3980,c	;volatile
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;GLCD_PIC.c: 31: LATDbits.LATD0 = 0;
 13500  00606E  908C               	bcf	3980,0,c	;volatile
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;GLCD_PIC.c: 33: spiSend(byte);
 13504  006070  51C8               	movf	glcdTransfer@byte& (0+255),w,b
 13505  006072  EC1C  F031         	call	_spiSend
 13506                           
 13507                           ;GLCD_PIC.c: 35: LATDbits.LATD0 = 1;
 13508  006076  808C               	bsf	3980,0,c	;volatile
 13509  006078  0012               	return		;funcret
 13510  00607A                     __end_of_glcdTransfer:
 13511                           	opt stack 0
 13512                           tblptru	equ	0xFF8
 13513                           tblptrh	equ	0xFF7
 13514                           tblptrl	equ	0xFF6
 13515                           tablat	equ	0xFF5
 13516                           prodh	equ	0xFF4
 13517                           prodl	equ	0xFF3
 13518                           intcon	equ	0xFF2
 13519                           intcon3	equ	0xFF0
 13520                           indf0	equ	0xFEF
 13521                           postinc0	equ	0xFEE
 13522                           fsr0h	equ	0xFEA
 13523                           fsr0l	equ	0xFE9
 13524                           wreg	equ	0xFE8
 13525                           postdec1	equ	0xFE5
 13526                           fsr1l	equ	0xFE1
 13527                           indf2	equ	0xFDF
 13528                           postinc2	equ	0xFDE
 13529                           postdec2	equ	0xFDD
 13530                           fsr2h	equ	0xFDA
 13531                           fsr2l	equ	0xFD9
 13532                           status	equ	0xFD8
 13533                           
 13534 ;; *************** function _spiSend *****************
 13535 ;; Defined at:
 13536 ;;		line 33 in file "SPI_PIC.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  val             1    wreg     unsigned char 
 13539 ;; Auto vars:     Size  Location     Type
 13540 ;;  val             1    2[BANK0 ] unsigned char 
 13541 ;; Return value:  Size  Location     Type
 13542 ;;                  1    wreg      void 
 13543 ;; Registers used:
 13544 ;;		wreg, status,2, cstack
 13545 ;; Tracked objects:
 13546 ;;		On entry : 0/0
 13547 ;;		On exit  : 0/0
 13548 ;;		Unchanged: 0/0
 13549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13554 ;;Total ram usage:        1 bytes
 13555 ;; Hardware stack levels used:    1
 13556 ;; Hardware stack levels required when called:    5
 13557 ;; This function calls:
 13558 ;;		_spiTransfer
 13559 ;; This function is called by:
 13560 ;;		_glcdTransfer
 13561 ;;		_glcdDrawRectangle
 13562 ;; This function uses a non-reentrant model
 13563 ;;
 13564                           
 13565                           	psect	text33
 13566  006238                     __ptext33:
 13567                           	opt stack 0
 13568  006238                     _spiSend:
 13569                           	opt stack 23
 13570                           
 13571                           ;incstack = 0
 13572                           ;spiSend@val stored from wreg
 13573  006238  0100               	movlb	0	; () banked
 13574  00623A  6FC5               	movwf	spiSend@val& (0+255),b
 13575                           
 13576                           ;SPI_PIC.c: 41: spiTransfer(val);
 13577  00623C  0100               	movlb	0	; () banked
 13578  00623E  51C5               	movf	spiSend@val& (0+255),w,b
 13579  006240  EC52  F030         	call	_spiTransfer
 13580  006244  0012               	return		;funcret
 13581  006246                     __end_of_spiSend:
 13582                           	opt stack 0
 13583                           tblptru	equ	0xFF8
 13584                           tblptrh	equ	0xFF7
 13585                           tblptrl	equ	0xFF6
 13586                           tablat	equ	0xFF5
 13587                           prodh	equ	0xFF4
 13588                           prodl	equ	0xFF3
 13589                           intcon	equ	0xFF2
 13590                           intcon3	equ	0xFF0
 13591                           indf0	equ	0xFEF
 13592                           postinc0	equ	0xFEE
 13593                           fsr0h	equ	0xFEA
 13594                           fsr0l	equ	0xFE9
 13595                           wreg	equ	0xFE8
 13596                           postdec1	equ	0xFE5
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function _spiTransfer *****************
 13606 ;; Defined at:
 13607 ;;		line 12 in file "SPI_PIC.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;  byteToTransf    1    wreg     unsigned char 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;  byteToTransf    1    1[BANK0 ] unsigned char 
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1    wreg      unsigned char 
 13614 ;; Registers used:
 13615 ;;		wreg, status,2
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;Total ram usage:        2 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:    4
 13628 ;; This function calls:
 13629 ;;		Nothing
 13630 ;; This function is called by:
 13631 ;;		_spiSend
 13632 ;;		_spiReceive
 13633 ;; This function uses a non-reentrant model
 13634 ;;
 13635                           
 13636                           	psect	text34
 13637  0060A4                     __ptext34:
 13638                           	opt stack 0
 13639  0060A4                     _spiTransfer:
 13640                           	opt stack 23
 13641                           
 13642                           ;incstack = 0
 13643                           ;spiTransfer@byteToTransfer stored from wreg
 13644  0060A4  0100               	movlb	0	; () banked
 13645  0060A6  6FC4               	movwf	spiTransfer@byteToTransfer& (0+255),b
 13646                           
 13647                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
 13648  0060A8  C0C4  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
 13649  0060AC                     l5483:
 13650  0060AC  B69E               	btfsc	3998,3,c	;volatile
 13651  0060AE  D002               	goto	u3420
 13652  0060B0  0E01               	movlw	1
 13653  0060B2  D001               	goto	u3422
 13654  0060B4                     u3420:
 13655  0060B4  0E00               	movlw	0
 13656  0060B6                     u3422:
 13657  0060B6  0100               	movlb	0	; () banked
 13658  0060B8  6FC3               	movwf	??_spiTransfer& (0+255),b
 13659  0060BA  B0C7               	btfsc	4039,0,c	;volatile
 13660  0060BC  D002               	goto	u3430
 13661  0060BE  0E01               	movlw	1
 13662  0060C0  D001               	goto	u3432
 13663  0060C2                     u3430:
 13664  0060C2  0E00               	movlw	0
 13665  0060C4                     u3432:
 13666  0060C4  11C3               	iorwf	??_spiTransfer& (0+255),w,b
 13667  0060C6  E1F2               	bnz	l5483
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;SPI_PIC.c: 30: return SSPBUF;
 13671                           
 13672                           ; BSR set to: 0
 13673  0060C8  50C9               	movf	4041,w,c	;volatile
 13674  0060CA  0012               	return	
 13675  0060CC                     __end_of_spiTransfer:
 13676                           	opt stack 0
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodh	equ	0xFF4
 13682                           prodl	equ	0xFF3
 13683                           intcon	equ	0xFF2
 13684                           intcon3	equ	0xFF0
 13685                           indf0	equ	0xFEF
 13686                           postinc0	equ	0xFEE
 13687                           fsr0h	equ	0xFEA
 13688                           fsr0l	equ	0xFE9
 13689                           wreg	equ	0xFE8
 13690                           postdec1	equ	0xFE5
 13691                           fsr1l	equ	0xFE1
 13692                           indf2	equ	0xFDF
 13693                           postinc2	equ	0xFDE
 13694                           postdec2	equ	0xFDD
 13695                           fsr2h	equ	0xFDA
 13696                           fsr2l	equ	0xFD9
 13697                           status	equ	0xFD8
 13698                           
 13699 ;; *************** function ___wmul *****************
 13700 ;; Defined at:
 13701 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  multiplier      2    8[BANK0 ] unsigned int 
 13704 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  product         2   12[BANK0 ] unsigned int 
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  2    8[BANK0 ] unsigned int 
 13709 ;; Registers used:
 13710 ;;		wreg, status,2, status,0, prodl, prodh
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13716 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13719 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13720 ;;Total ram usage:        6 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    4
 13723 ;; This function calls:
 13724 ;;		Nothing
 13725 ;; This function is called by:
 13726 ;;		_main
 13727 ;;		_glcdDrawRectangle
 13728 ;;		_printf
 13729 ;;		_get_RTC_initial
 13730 ;;		_get_RTC_final
 13731 ;;		_store_prev
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text35
 13736  0060CC                     __ptext35:
 13737                           	opt stack 0
 13738  0060CC                     ___wmul:
 13739                           	opt stack 25
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;incstack = 0
 13743  0060CC  0100               	movlb	0	; () banked
 13744  0060CE  51CB               	movf	___wmul@multiplier& (0+255),w,b
 13745  0060D0  03CD               	mulwf	___wmul@multiplicand& (0+255),b
 13746  0060D2  CFF3 F0CF          	movff	prodl,___wmul@product
 13747  0060D6  CFF4 F0D0          	movff	prodh,___wmul@product+1
 13748  0060DA  51CB               	movf	___wmul@multiplier& (0+255),w,b
 13749  0060DC  03CE               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13750  0060DE  50F3               	movf	prodl,w,c
 13751  0060E0  27D0               	addwf	(___wmul@product+1)& (0+255),f,b
 13752  0060E2  51CC               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13753  0060E4  03CD               	mulwf	___wmul@multiplicand& (0+255),b
 13754  0060E6  50F3               	movf	prodl,w,c
 13755  0060E8  27D0               	addwf	(___wmul@product+1)& (0+255),f,b
 13756                           
 13757                           ; BSR set to: 0
 13758  0060EA  C0CF  F0CB         	movff	___wmul@product,?___wmul
 13759  0060EE  C0D0  F0CC         	movff	___wmul@product+1,?___wmul+1
 13760  0060F2  0012               	return	
 13761  0060F4                     __end_of___wmul:
 13762                           	opt stack 0
 13763                           tblptru	equ	0xFF8
 13764                           tblptrh	equ	0xFF7
 13765                           tblptrl	equ	0xFF6
 13766                           tablat	equ	0xFF5
 13767                           prodh	equ	0xFF4
 13768                           prodl	equ	0xFF3
 13769                           intcon	equ	0xFF2
 13770                           intcon3	equ	0xFF0
 13771                           indf0	equ	0xFEF
 13772                           postinc0	equ	0xFEE
 13773                           fsr0h	equ	0xFEA
 13774                           fsr0l	equ	0xFE9
 13775                           wreg	equ	0xFE8
 13776                           postdec1	equ	0xFE5
 13777                           fsr1l	equ	0xFE1
 13778                           indf2	equ	0xFDF
 13779                           postinc2	equ	0xFDE
 13780                           postdec2	equ	0xFDD
 13781                           fsr2h	equ	0xFDA
 13782                           fsr2l	equ	0xFD9
 13783                           status	equ	0xFD8
 13784                           
 13785 ;; *************** function _I2C_Master_Init *****************
 13786 ;; Defined at:
 13787 ;;		line 14 in file "I2C.c"
 13788 ;; Parameters:    Size  Location     Type
 13789 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;		None
 13792 ;; Return value:  Size  Location     Type
 13793 ;;                  1    wreg      void 
 13794 ;; Registers used:
 13795 ;;		wreg, status,2, status,0, cstack
 13796 ;; Tracked objects:
 13797 ;;		On entry : 0/0
 13798 ;;		On exit  : 0/0
 13799 ;;		Unchanged: 0/0
 13800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13801 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13803 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13804 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13805 ;;Total ram usage:        8 bytes
 13806 ;; Hardware stack levels used:    1
 13807 ;; Hardware stack levels required when called:    5
 13808 ;; This function calls:
 13809 ;;		___lldiv
 13810 ;; This function is called by:
 13811 ;;		_I2C_init
 13812 ;;		_drawTeamName
 13813 ;;		_drawWasher
 13814 ;;		_drawBolt
 13815 ;;		_drawNut
 13816 ;;		_drawSpacer
 13817 ;;		_initRamp
 13818 ;;		_ramp_Rotate
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           	psect	text36
 13823  005C34                     __ptext36:
 13824                           	opt stack 0
 13825  005C34                     _I2C_Master_Init:
 13826                           	opt stack 24
 13827                           
 13828                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;incstack = 0
 13832  005C34  9AC6               	bcf	4038,5,c	;volatile
 13833                           
 13834                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 13835  005C36  8694               	bsf	3988,3,c	;volatile
 13836                           
 13837                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 13838  005C38  8894               	bsf	3988,4,c	;volatile
 13839                           
 13840                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 13841  005C3A  0E80               	movlw	128
 13842  005C3C  6EC7               	movwf	4039,c	;volatile
 13843                           
 13844                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 13845  005C3E  0E28               	movlw	40
 13846  005C40  6EC6               	movwf	4038,c	;volatile
 13847                           
 13848                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 13849  005C42  0E00               	movlw	0
 13850  005C44  6EC5               	movwf	4037,c	;volatile
 13851                           
 13852                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 13853  005C46  0E00               	movlw	0
 13854  005C48  0100               	movlb	0	; () banked
 13855  005C4A  6FC3               	movwf	___lldiv@dividend& (0+255),b
 13856  005C4C  0E48               	movlw	72
 13857  005C4E  6FC4               	movwf	(___lldiv@dividend+1)& (0+255),b
 13858  005C50  0EE8               	movlw	232
 13859  005C52  6FC5               	movwf	(___lldiv@dividend+2)& (0+255),b
 13860  005C54  0E01               	movlw	1
 13861  005C56  6FC6               	movwf	(___lldiv@dividend+3)& (0+255),b
 13862  005C58  C0D0  F0D4         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 13863  005C5C  C0D1  F0D5         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 13864  005C60  C0D2  F0D6         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 13865  005C64  C0D3  F0D7         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 13866  005C68  0E02               	movlw	2
 13867  005C6A                     u3535:
 13868  005C6A  90D8               	bcf	status,0,c
 13869  005C6C  37D4               	rlcf	??_I2C_Master_Init& (0+255),f,b
 13870  005C6E  37D5               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 13871  005C70  37D6               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 13872  005C72  37D7               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 13873  005C74  2EE8               	decfsz	wreg,f,c
 13874  005C76  D7F9               	goto	u3535
 13875  005C78  C0D4  F0C7         	movff	??_I2C_Master_Init,___lldiv@divisor
 13876  005C7C  C0D5  F0C8         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 13877  005C80  C0D6  F0C9         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 13878  005C84  C0D7  F0CA         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 13879  005C88  ECEA  F02C         	call	___lldiv	;wreg free
 13880  005C8C  0100               	movlb	0	; () banked
 13881  005C8E  05C3               	decf	?___lldiv& (0+255),w,b
 13882  005C90  6EC8               	movwf	4040,c	;volatile
 13883                           
 13884                           ; BSR set to: 0
 13885  005C92  0012               	return		;funcret
 13886  005C94                     __end_of_I2C_Master_Init:
 13887                           	opt stack 0
 13888                           tblptru	equ	0xFF8
 13889                           tblptrh	equ	0xFF7
 13890                           tblptrl	equ	0xFF6
 13891                           tablat	equ	0xFF5
 13892                           prodh	equ	0xFF4
 13893                           prodl	equ	0xFF3
 13894                           intcon	equ	0xFF2
 13895                           intcon3	equ	0xFF0
 13896                           indf0	equ	0xFEF
 13897                           postinc0	equ	0xFEE
 13898                           fsr0h	equ	0xFEA
 13899                           fsr0l	equ	0xFE9
 13900                           wreg	equ	0xFE8
 13901                           postdec1	equ	0xFE5
 13902                           fsr1l	equ	0xFE1
 13903                           indf2	equ	0xFDF
 13904                           postinc2	equ	0xFDE
 13905                           postdec2	equ	0xFDD
 13906                           fsr2h	equ	0xFDA
 13907                           fsr2l	equ	0xFD9
 13908                           status	equ	0xFD8
 13909                           
 13910 ;; *************** function ___lldiv *****************
 13911 ;; Defined at:
 13912 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;  dividend        4    0[BANK0 ] unsigned long 
 13915 ;;  divisor         4    4[BANK0 ] unsigned long 
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;  quotient        4    8[BANK0 ] unsigned long 
 13918 ;;  counter         1   12[BANK0 ] unsigned char 
 13919 ;; Return value:  Size  Location     Type
 13920 ;;                  4    0[BANK0 ] unsigned long 
 13921 ;; Registers used:
 13922 ;;		wreg, status,2, status,0
 13923 ;; Tracked objects:
 13924 ;;		On entry : 0/0
 13925 ;;		On exit  : 0/0
 13926 ;;		Unchanged: 0/0
 13927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13928 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;Total ram usage:       13 bytes
 13933 ;; Hardware stack levels used:    1
 13934 ;; Hardware stack levels required when called:    4
 13935 ;; This function calls:
 13936 ;;		Nothing
 13937 ;; This function is called by:
 13938 ;;		_I2C_Master_Init
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text37
 13943  0059D4                     __ptext37:
 13944                           	opt stack 0
 13945  0059D4                     ___lldiv:
 13946                           	opt stack 24
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;incstack = 0
 13950  0059D4  0E00               	movlw	0
 13951  0059D6  0100               	movlb	0	; () banked
 13952  0059D8  6FCB               	movwf	___lldiv@quotient& (0+255),b
 13953  0059DA  0E00               	movlw	0
 13954  0059DC  6FCC               	movwf	(___lldiv@quotient+1)& (0+255),b
 13955  0059DE  0E00               	movlw	0
 13956  0059E0  6FCD               	movwf	(___lldiv@quotient+2)& (0+255),b
 13957  0059E2  0E00               	movlw	0
 13958  0059E4  6FCE               	movwf	(___lldiv@quotient+3)& (0+255),b
 13959                           
 13960                           ; BSR set to: 0
 13961  0059E6  51C7               	movf	___lldiv@divisor& (0+255),w,b
 13962  0059E8  11C8               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13963  0059EA  11C9               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13964  0059EC  11CA               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13965  0059EE  B4D8               	btfsc	status,2,c
 13966  0059F0  D02A               	goto	l1819
 13967                           
 13968                           ; BSR set to: 0
 13969  0059F2  0E01               	movlw	1
 13970  0059F4  6FCF               	movwf	___lldiv@counter& (0+255),b
 13971  0059F6  D006               	goto	l1814
 13972  0059F8                     
 13973                           ; BSR set to: 0
 13974                           
 13975                           ; BSR set to: 0
 13976  0059F8  90D8               	bcf	status,0,c
 13977  0059FA  37C7               	rlcf	___lldiv@divisor& (0+255),f,b
 13978  0059FC  37C8               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13979  0059FE  37C9               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13980  005A00  37CA               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13981  005A02  2BCF               	incf	___lldiv@counter& (0+255),f,b
 13982  005A04                     l1814:
 13983                           
 13984                           ; BSR set to: 0
 13985                           
 13986                           ; BSR set to: 0
 13987  005A04  AFCA               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13988  005A06  D7F8               	goto	l1815
 13989  005A08                     u3510:
 13990                           
 13991                           ; BSR set to: 0
 13992                           
 13993                           ; BSR set to: 0
 13994                           
 13995                           ; BSR set to: 0
 13996  005A08  90D8               	bcf	status,0,c
 13997  005A0A  37CB               	rlcf	___lldiv@quotient& (0+255),f,b
 13998  005A0C  37CC               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13999  005A0E  37CD               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 14000  005A10  37CE               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 14001                           
 14002                           ; BSR set to: 0
 14003  005A12  51C7               	movf	___lldiv@divisor& (0+255),w,b
 14004  005A14  5DC3               	subwf	___lldiv@dividend& (0+255),w,b
 14005  005A16  51C8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14006  005A18  59C4               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 14007  005A1A  51C9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14008  005A1C  59C5               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 14009  005A1E  51CA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14010  005A20  59C6               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 14011  005A22  A0D8               	btfss	status,0,c
 14012  005A24  D009               	goto	l1818
 14013                           
 14014                           ; BSR set to: 0
 14015  005A26  51C7               	movf	___lldiv@divisor& (0+255),w,b
 14016  005A28  5FC3               	subwf	___lldiv@dividend& (0+255),f,b
 14017  005A2A  51C8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14018  005A2C  5BC4               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 14019  005A2E  51C9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14020  005A30  5BC5               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 14021  005A32  51CA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14022  005A34  5BC6               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 14023                           
 14024                           ; BSR set to: 0
 14025  005A36  81CB               	bsf	___lldiv@quotient& (0+255),0,b
 14026  005A38                     l1818:
 14027                           
 14028                           ; BSR set to: 0
 14029                           
 14030                           ; BSR set to: 0
 14031  005A38  90D8               	bcf	status,0,c
 14032  005A3A  33CA               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 14033  005A3C  33C9               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 14034  005A3E  33C8               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 14035  005A40  33C7               	rrcf	___lldiv@divisor& (0+255),f,b
 14036                           
 14037                           ; BSR set to: 0
 14038  005A42  2FCF               	decfsz	___lldiv@counter& (0+255),f,b
 14039  005A44  D7E1               	goto	u3510
 14040  005A46                     l1819:
 14041                           
 14042                           ; BSR set to: 0
 14043                           
 14044                           ; BSR set to: 0
 14045  005A46  C0CB  F0C3         	movff	___lldiv@quotient,?___lldiv
 14046  005A4A  C0CC  F0C4         	movff	___lldiv@quotient+1,?___lldiv+1
 14047  005A4E  C0CD  F0C5         	movff	___lldiv@quotient+2,?___lldiv+2
 14048  005A52  C0CE  F0C6         	movff	___lldiv@quotient+3,?___lldiv+3
 14049                           
 14050                           ; BSR set to: 0
 14051  005A56  0012               	return		;funcret
 14052  005A58                     __end_of___lldiv:
 14053                           	opt stack 0
 14054                           tblptru	equ	0xFF8
 14055                           tblptrh	equ	0xFF7
 14056                           tblptrl	equ	0xFF6
 14057                           tablat	equ	0xFF5
 14058                           prodh	equ	0xFF4
 14059                           prodl	equ	0xFF3
 14060                           intcon	equ	0xFF2
 14061                           intcon3	equ	0xFF0
 14062                           indf0	equ	0xFEF
 14063                           postinc0	equ	0xFEE
 14064                           fsr0h	equ	0xFEA
 14065                           fsr0l	equ	0xFE9
 14066                           wreg	equ	0xFE8
 14067                           postdec1	equ	0xFE5
 14068                           fsr1l	equ	0xFE1
 14069                           indf2	equ	0xFDF
 14070                           postinc2	equ	0xFDE
 14071                           postdec2	equ	0xFDD
 14072                           fsr2h	equ	0xFDA
 14073                           fsr2l	equ	0xFD9
 14074                           status	equ	0xFD8
 14075                           
 14076 ;; *************** function _I2C_sendData *****************
 14077 ;; Defined at:
 14078 ;;		line 1288 in file "main.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;  char_data       1    wreg     unsigned char 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  char_data       1    3[BANK0 ] unsigned char 
 14083 ;; Return value:  Size  Location     Type
 14084 ;;                  1    wreg      void 
 14085 ;; Registers used:
 14086 ;;		wreg, status,2, status,0, cstack
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/0
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14096 ;;Total ram usage:        1 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    6
 14099 ;; This function calls:
 14100 ;;		_I2C_Master_Start
 14101 ;;		_I2C_Master_Stop
 14102 ;;		_I2C_Master_Write
 14103 ;; This function is called by:
 14104 ;;		_main
 14105 ;;		_Bolt_dispense
 14106 ;;		_Nut_dispense
 14107 ;;		_Spacer_dispense
 14108 ;;		_Washer_dispense
 14109 ;;		_Bolt_remain
 14110 ;;		_Nut_remain
 14111 ;;		_Spacer_remain
 14112 ;;		_Washer_remain
 14113 ;;		_nut_washer_remain
 14114 ;;		_bolt_spacer_remain
 14115 ;;		_all_remain
 14116 ;; This function uses a non-reentrant model
 14117 ;;
 14118                           
 14119                           	psect	text38
 14120  0060F4                     __ptext38:
 14121                           	opt stack 0
 14122  0060F4                     _I2C_sendData:
 14123                           	opt stack 23
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;incstack = 0
 14127                           ;I2C_sendData@char_data stored from wreg
 14128  0060F4  0100               	movlb	0	; () banked
 14129  0060F6  6FC6               	movwf	I2C_sendData@char_data& (0+255),b
 14130                           
 14131                           ;main.c: 1289: I2C_Master_Start();
 14132  0060F8  EC3A  F031         	call	_I2C_Master_Start	;wreg free
 14133                           
 14134                           ;main.c: 1290: I2C_Master_Write(0b00010000);
 14135  0060FC  0E00               	movlw	0
 14136  0060FE  0100               	movlb	0	; () banked
 14137  006100  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 14138  006102  0E10               	movlw	16
 14139  006104  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 14140  006106  EC28  F031         	call	_I2C_Master_Write	;wreg free
 14141                           
 14142                           ;main.c: 1291: I2C_Master_Write(char_data);
 14143  00610A  C0C6  F0C4         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
 14144  00610E  0100               	movlb	0	; () banked
 14145  006110  6BC5               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 14146  006112  EC28  F031         	call	_I2C_Master_Write	;wreg free
 14147                           
 14148                           ;main.c: 1292: I2C_Master_Stop();
 14149  006116  EC36  F031         	call	_I2C_Master_Stop	;wreg free
 14150  00611A  0012               	return	
 14151  00611C                     __end_of_I2C_sendData:
 14152                           	opt stack 0
 14153                           tblptru	equ	0xFF8
 14154                           tblptrh	equ	0xFF7
 14155                           tblptrl	equ	0xFF6
 14156                           tablat	equ	0xFF5
 14157                           prodh	equ	0xFF4
 14158                           prodl	equ	0xFF3
 14159                           intcon	equ	0xFF2
 14160                           intcon3	equ	0xFF0
 14161                           indf0	equ	0xFEF
 14162                           postinc0	equ	0xFEE
 14163                           fsr0h	equ	0xFEA
 14164                           fsr0l	equ	0xFE9
 14165                           wreg	equ	0xFE8
 14166                           postdec1	equ	0xFE5
 14167                           fsr1l	equ	0xFE1
 14168                           indf2	equ	0xFDF
 14169                           postinc2	equ	0xFDE
 14170                           postdec2	equ	0xFDD
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _I2C_Master_Write *****************
 14176 ;; Defined at:
 14177 ;;		line 108 in file "I2C.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;		None
 14182 ;; Return value:  Size  Location     Type
 14183 ;;                  1    wreg      void 
 14184 ;; Registers used:
 14185 ;;		wreg, status,2, status,0, cstack
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;Total ram usage:        2 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; Hardware stack levels required when called:    5
 14198 ;; This function calls:
 14199 ;;		_I2C_Master_Wait
 14200 ;; This function is called by:
 14201 ;;		_main
 14202 ;;		_I2C_init
 14203 ;;		_I2C_sendData
 14204 ;;		_initRamp
 14205 ;;		_ramp_Rotate
 14206 ;;		_RTC_setTime
 14207 ;;		_get_RTC_initial
 14208 ;;		_get_RTC_final
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text39
 14213  006250                     __ptext39:
 14214                           	opt stack 0
 14215  006250                     _I2C_Master_Write:
 14216                           	opt stack 23
 14217                           
 14218                           ;I2C.c: 116: I2C_Master_Wait();
 14219                           
 14220                           ;incstack = 0
 14221  006250  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 14222                           
 14223                           ;I2C.c: 117: SSPBUF = byteToWrite;
 14224  006254  C0C4  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 14225  006258  0012               	return		;funcret
 14226  00625A                     __end_of_I2C_Master_Write:
 14227                           	opt stack 0
 14228                           tblptru	equ	0xFF8
 14229                           tblptrh	equ	0xFF7
 14230                           tblptrl	equ	0xFF6
 14231                           tablat	equ	0xFF5
 14232                           prodh	equ	0xFF4
 14233                           prodl	equ	0xFF3
 14234                           intcon	equ	0xFF2
 14235                           intcon3	equ	0xFF0
 14236                           indf0	equ	0xFEF
 14237                           postinc0	equ	0xFEE
 14238                           fsr0h	equ	0xFEA
 14239                           fsr0l	equ	0xFE9
 14240                           wreg	equ	0xFE8
 14241                           postdec1	equ	0xFE5
 14242                           fsr1l	equ	0xFE1
 14243                           indf2	equ	0xFDF
 14244                           postinc2	equ	0xFDE
 14245                           postdec2	equ	0xFDD
 14246                           fsr2h	equ	0xFDA
 14247                           fsr2l	equ	0xFD9
 14248                           status	equ	0xFD8
 14249                           
 14250 ;; *************** function _I2C_Master_Stop *****************
 14251 ;; Defined at:
 14252 ;;		line 95 in file "I2C.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;		None
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;		None
 14257 ;; Return value:  Size  Location     Type
 14258 ;;                  1    wreg      void 
 14259 ;; Registers used:
 14260 ;;		wreg, status,2, status,0, cstack
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 0/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14270 ;;Total ram usage:        0 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; Hardware stack levels required when called:    5
 14273 ;; This function calls:
 14274 ;;		_I2C_Master_Wait
 14275 ;; This function is called by:
 14276 ;;		_main
 14277 ;;		_I2C_init
 14278 ;;		_I2C_sendData
 14279 ;;		_initRamp
 14280 ;;		_ramp_Rotate
 14281 ;;		_RTC_setTime
 14282 ;;		_get_RTC_initial
 14283 ;;		_get_RTC_final
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           	psect	text40
 14288  00626C                     __ptext40:
 14289                           	opt stack 0
 14290  00626C                     _I2C_Master_Stop:
 14291                           	opt stack 23
 14292                           
 14293                           ;I2C.c: 104: I2C_Master_Wait();
 14294                           
 14295                           ;incstack = 0
 14296  00626C  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 14297                           
 14298                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 14299  006270  84C5               	bsf	4037,2,c	;volatile
 14300  006272  0012               	return		;funcret
 14301  006274                     __end_of_I2C_Master_Stop:
 14302                           	opt stack 0
 14303                           tblptru	equ	0xFF8
 14304                           tblptrh	equ	0xFF7
 14305                           tblptrl	equ	0xFF6
 14306                           tablat	equ	0xFF5
 14307                           prodh	equ	0xFF4
 14308                           prodl	equ	0xFF3
 14309                           intcon	equ	0xFF2
 14310                           intcon3	equ	0xFF0
 14311                           indf0	equ	0xFEF
 14312                           postinc0	equ	0xFEE
 14313                           fsr0h	equ	0xFEA
 14314                           fsr0l	equ	0xFE9
 14315                           wreg	equ	0xFE8
 14316                           postdec1	equ	0xFE5
 14317                           fsr1l	equ	0xFE1
 14318                           indf2	equ	0xFDF
 14319                           postinc2	equ	0xFDE
 14320                           postdec2	equ	0xFDD
 14321                           fsr2h	equ	0xFDA
 14322                           fsr2l	equ	0xFD9
 14323                           status	equ	0xFD8
 14324                           
 14325 ;; *************** function _I2C_Master_Start *****************
 14326 ;; Defined at:
 14327 ;;		line 69 in file "I2C.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;		None
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;		None
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      void 
 14334 ;; Registers used:
 14335 ;;		wreg, status,2, status,0, cstack
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    5
 14348 ;; This function calls:
 14349 ;;		_I2C_Master_Wait
 14350 ;; This function is called by:
 14351 ;;		_main
 14352 ;;		_I2C_init
 14353 ;;		_I2C_sendData
 14354 ;;		_initRamp
 14355 ;;		_ramp_Rotate
 14356 ;;		_RTC_setTime
 14357 ;;		_get_RTC_initial
 14358 ;;		_get_RTC_final
 14359 ;; This function uses a non-reentrant model
 14360 ;;
 14361                           
 14362                           	psect	text41
 14363  006274                     __ptext41:
 14364                           	opt stack 0
 14365  006274                     _I2C_Master_Start:
 14366                           	opt stack 23
 14367                           
 14368                           ;I2C.c: 78: I2C_Master_Wait();
 14369                           
 14370                           ;incstack = 0
 14371  006274  ECF5  F030         	call	_I2C_Master_Wait	;wreg free
 14372                           
 14373                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 14374  006278  80C5               	bsf	4037,0,c	;volatile
 14375  00627A  0012               	return		;funcret
 14376  00627C                     __end_of_I2C_Master_Start:
 14377                           	opt stack 0
 14378                           tblptru	equ	0xFF8
 14379                           tblptrh	equ	0xFF7
 14380                           tblptrl	equ	0xFF6
 14381                           tablat	equ	0xFF5
 14382                           prodh	equ	0xFF4
 14383                           prodl	equ	0xFF3
 14384                           intcon	equ	0xFF2
 14385                           intcon3	equ	0xFF0
 14386                           indf0	equ	0xFEF
 14387                           postinc0	equ	0xFEE
 14388                           fsr0h	equ	0xFEA
 14389                           fsr0l	equ	0xFE9
 14390                           wreg	equ	0xFE8
 14391                           postdec1	equ	0xFE5
 14392                           fsr1l	equ	0xFE1
 14393                           indf2	equ	0xFDF
 14394                           postinc2	equ	0xFDE
 14395                           postdec2	equ	0xFDD
 14396                           fsr2h	equ	0xFDA
 14397                           fsr2l	equ	0xFD9
 14398                           status	equ	0xFD8
 14399                           
 14400 ;; *************** function _I2C_Master_Wait *****************
 14401 ;; Defined at:
 14402 ;;		line 51 in file "I2C.c"
 14403 ;; Parameters:    Size  Location     Type
 14404 ;;		None
 14405 ;; Auto vars:     Size  Location     Type
 14406 ;;		None
 14407 ;; Return value:  Size  Location     Type
 14408 ;;                  1    wreg      void 
 14409 ;; Registers used:
 14410 ;;		wreg, status,2, status,0
 14411 ;; Tracked objects:
 14412 ;;		On entry : 0/0
 14413 ;;		On exit  : 0/0
 14414 ;;		Unchanged: 0/0
 14415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;Total ram usage:        1 bytes
 14421 ;; Hardware stack levels used:    1
 14422 ;; Hardware stack levels required when called:    4
 14423 ;; This function calls:
 14424 ;;		Nothing
 14425 ;; This function is called by:
 14426 ;;		_I2C_Master_Start
 14427 ;;		_I2C_Master_Stop
 14428 ;;		_I2C_Master_Write
 14429 ;;		_I2C_Master_Read
 14430 ;;		_I2C_Master_RepeatedStart
 14431 ;; This function uses a non-reentrant model
 14432 ;;
 14433                           
 14434                           	psect	text42
 14435  0061EA                     __ptext42:
 14436                           	opt stack 0
 14437  0061EA                     _I2C_Master_Wait:
 14438                           	opt stack 23
 14439                           
 14440                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14441                           
 14442                           ;incstack = 0
 14443  0061EA  B4C7               	btfsc	4039,2,c	;volatile
 14444  0061EC  D7FE               	goto	_I2C_Master_Wait
 14445  0061EE  CFC5 F0C3          	movff	4037,??_I2C_Master_Wait	;volatile
 14446  0061F2  0E1F               	movlw	31
 14447  0061F4  0100               	movlb	0	; () banked
 14448  0061F6  17C3               	andwf	??_I2C_Master_Wait& (0+255),f,b
 14449  0061F8  B4D8               	btfsc	status,2,c
 14450  0061FA  0012               	return	
 14451  0061FC  D7F6               	goto	_I2C_Master_Wait
 14452  0061FE                     __end_of_I2C_Master_Wait:
 14453                           	opt stack 0
 14454                           tblptru	equ	0xFF8
 14455                           tblptrh	equ	0xFF7
 14456                           tblptrl	equ	0xFF6
 14457                           tablat	equ	0xFF5
 14458                           prodh	equ	0xFF4
 14459                           prodl	equ	0xFF3
 14460                           intcon	equ	0xFF2
 14461                           intcon3	equ	0xFF0
 14462                           indf0	equ	0xFEF
 14463                           postinc0	equ	0xFEE
 14464                           fsr0h	equ	0xFEA
 14465                           fsr0l	equ	0xFE9
 14466                           wreg	equ	0xFE8
 14467                           postdec1	equ	0xFE5
 14468                           fsr1l	equ	0xFE1
 14469                           indf2	equ	0xFDF
 14470                           postinc2	equ	0xFDE
 14471                           postdec2	equ	0xFDD
 14472                           fsr2h	equ	0xFDA
 14473                           fsr2l	equ	0xFD9
 14474                           status	equ	0xFD8
 14475                           
 14476 ;; *************** function _interruptHandler *****************
 14477 ;; Defined at:
 14478 ;;		line 550 in file "main.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;		None
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  i               2   61[COMRAM] int 
 14483 ;;  temp            1   64[COMRAM] unsigned char 
 14484 ;;  keypress        1   63[COMRAM] unsigned char 
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      void 
 14487 ;; Registers used:
 14488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14495 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;Total ram usage:       27 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    3
 14501 ;; This function calls:
 14502 ;;		___awmod
 14503 ;;		_check
 14504 ;;		_is_valid
 14505 ;;		_strcat
 14506 ;;		_strcpy
 14507 ;;		_strncmp
 14508 ;;		i2_I2C_Master_Init
 14509 ;;		i2_I2C_Master_Read
 14510 ;;		i2_I2C_Master_Start
 14511 ;;		i2_I2C_Master_Stop
 14512 ;;		i2_I2C_Master_Write
 14513 ;;		i2___awdiv
 14514 ;;		i2___wmul
 14515 ;;		i2_generate_compartment_array
 14516 ;;		i2_initLCD
 14517 ;;		i2_lcdInst
 14518 ;;		i2_printf
 14519 ;;		i2_putch
 14520 ;; This function is called by:
 14521 ;;		Interrupt level 2
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           	psect	intcode
 14526  000008                     __pintcode:
 14527                           	opt stack 0
 14528  000008                     _interruptHandler:
 14529                           	opt stack 21
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;incstack = 0
 14533  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14534  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
 14535                           tblptru	equ	0xFF8
 14536                           tblptrh	equ	0xFF7
 14537                           tblptrl	equ	0xFF6
 14538                           tablat	equ	0xFF5
 14539                           prodh	equ	0xFF4
 14540                           prodl	equ	0xFF3
 14541                           intcon	equ	0xFF2
 14542                           intcon3	equ	0xFF0
 14543                           indf0	equ	0xFEF
 14544                           postinc0	equ	0xFEE
 14545                           fsr0h	equ	0xFEA
 14546                           fsr0l	equ	0xFE9
 14547                           wreg	equ	0xFE8
 14548                           postdec1	equ	0xFE5
 14549                           fsr1l	equ	0xFE1
 14550                           indf2	equ	0xFDF
 14551                           postinc2	equ	0xFDE
 14552                           postdec2	equ	0xFDD
 14553                           fsr2h	equ	0xFDA
 14554                           fsr2l	equ	0xFD9
 14555                           status	equ	0xFD8
 14556                           
 14557                           	psect	intcode_body
 14558  000012                     __pintcode_body:
 14559                           	opt stack 21
 14560  000012                     int_func:
 14561                           	opt stack 21
 14562  000012  0006               	pop		; remove dummy address from shadow register refresh
 14563  000014  CFFA F02C          	movff	pclath,??_interruptHandler+5
 14564  000018  CFFB F02D          	movff	pclatu,??_interruptHandler+6
 14565  00001C  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
 14566  000020  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
 14567  000024  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
 14568  000028  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
 14569  00002C  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
 14570  000030  CFDA F033          	movff	fsr2h,??_interruptHandler+12
 14571  000034  CFF3 F034          	movff	prodl,??_interruptHandler+13
 14572  000038  CFF4 F035          	movff	prodh,??_interruptHandler+14
 14573  00003C  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
 14574  000040  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
 14575  000044  CFF8 F038          	movff	tblptru,??_interruptHandler+17
 14576  000048  CFF5 F039          	movff	tablat,??_interruptHandler+18
 14577  00004C  C07F  F03A         	movff	btemp,??_interruptHandler+19
 14578  000050  C080  F03B         	movff	btemp+1,??_interruptHandler+20
 14579  000054  C081  F03C         	movff	btemp+2,??_interruptHandler+21
 14580  000058  C082  F03D         	movff	btemp+3,??_interruptHandler+22
 14581                           
 14582                           ;main.c: 561: if(INT1IF){
 14583  00005C  A0F0               	btfss	intcon3,0,c	;volatile
 14584  00005E  EF0A  F007         	goto	i2l559
 14585                           
 14586                           ;main.c: 567: unsigned char keypress = (PORTB & 0xF0) >> 4;
 14587  000062  3881               	swapf	3969,w,c	;volatile
 14588  000064  0B0F               	andlw	15
 14589  000066  0B0F               	andlw	15
 14590  000068  6E40               	movwf	interruptHandler@keypress,c
 14591                           
 14592                           ;main.c: 569: char temp = keys[keypress];
 14593  00006A  5040               	movf	interruptHandler@keypress,w,c
 14594  00006C  0D01               	mullw	1
 14595  00006E  0E53               	movlw	low _keys
 14596  000070  24F3               	addwf	prodl,w,c
 14597  000072  6EF6               	movwf	tblptrl,c
 14598  000074  0EFC               	movlw	high _keys
 14599  000076  20F4               	addwfc	prodh,w,c
 14600  000078  6EF7               	movwf	tblptrh,c
 14601  00007A                     	if	1	;There are 3 active tblptr bytes
 14602  00007A  6AF8               	clrf	tblptru,c
 14603  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
 14604  00007E  22F8               	addwfc	tblptru,f,c
 14605  000080                     	endif
 14606  000080  0008               	tblrd		*
 14607  000082  CFF5 F041          	movff	tablat,interruptHandler@temp
 14608                           
 14609                           ;main.c: 579: if (change_mode == 0){
 14610  000086  0100               	movlb	0	; () banked
 14611  000088  51B3               	movf	_change_mode& (0+255),w,b
 14612  00008A  11B4               	iorwf	(_change_mode+1)& (0+255),w,b
 14613  00008C  A4D8               	btfss	status,2,c
 14614  00008E  D09D               	goto	i2l567
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;main.c: 583: if (temp == '1'){
 14618  000090  0E31               	movlw	49
 14619  000092  1841               	xorwf	interruptHandler@temp,w,c
 14620  000094  A4D8               	btfss	status,2,c
 14621  000096  D08B               	goto	i2l561
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;main.c: 585: initLCD();
 14625  000098  EC1F  F02F         	call	i2_initLCD	;wreg free
 14626                           
 14627                           ;main.c: 586: for (i = 0; i <3; i++){
 14628  00009C  0E00               	movlw	0
 14629  00009E  0100               	movlb	0	; () banked
 14630  0000A0  6FB8               	movwf	(_i+1)& (0+255),b
 14631  0000A2  0E00               	movlw	0
 14632  0000A4  6FB7               	movwf	_i& (0+255),b
 14633                           
 14634                           ; BSR set to: 0
 14635  0000A6  51B8               	movf	(_i+1)& (0+255),w,b
 14636  0000A8  E101               	bnz	i2u567_40
 14637  0000AA  D07B               	goto	L8
 14638  0000AC                     i2u567_40:
 14639                           
 14640                           ; BSR set to: 0
 14641  0000AC  EF08  F007         	goto	i2l8197
 14642  0000B0                     
 14643                           ; BSR set to: 0
 14644                           ;main.c: 587: I2C_Master_Init(100000);
 14645                           
 14646                           ; BSR set to: 0
 14647  0000B0  0EA0               	movlw	160
 14648  0000B2  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
 14649  0000B4  0E86               	movlw	134
 14650  0000B6  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
 14651  0000B8  0E01               	movlw	1
 14652  0000BA  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
 14653  0000BC  0E00               	movlw	0
 14654  0000BE  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
 14655  0000C0  EC78  F02E         	call	i2_I2C_Master_Init	;wreg free
 14656                           
 14657                           ;main.c: 588: I2C_Master_Start();
 14658  0000C4  EC42  F031         	call	i2_I2C_Master_Start	;wreg free
 14659                           
 14660                           ;main.c: 589: I2C_Master_Write(0b11010000);
 14661  0000C8  0E00               	movlw	0
 14662  0000CA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14663  0000CC  0ED0               	movlw	208
 14664  0000CE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14665  0000D0  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14666                           
 14667                           ;main.c: 590: I2C_Master_Write(0x00);
 14668  0000D4  0E00               	movlw	0
 14669  0000D6  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14670  0000D8  0E00               	movlw	0
 14671  0000DA  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14672  0000DC  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14673                           
 14674                           ;main.c: 591: I2C_Master_Stop();
 14675  0000E0  EC3E  F031         	call	i2_I2C_Master_Stop	;wreg free
 14676                           
 14677                           ;main.c: 594: I2C_Master_Start();
 14678  0000E4  EC42  F031         	call	i2_I2C_Master_Start	;wreg free
 14679                           
 14680                           ;main.c: 595: I2C_Master_Write(0b11010001);
 14681  0000E8  0E00               	movlw	0
 14682  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14683  0000EC  0ED1               	movlw	209
 14684  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14685  0000F0  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14686                           
 14687                           ;main.c: 596: for(j = 0; j < 6; j++){
 14688  0000F4  0E00               	movlw	0
 14689  0000F6  6E6B               	movwf	_j,c
 14690  0000F8                     i2l7769:
 14691  0000F8  0E05               	movlw	5
 14692  0000FA  646B               	cpfsgt	_j,c
 14693  0000FC  D001               	goto	i2l564
 14694  0000FE  D00E               	goto	i2u569_40
 14695  000100                     i2l564:
 14696                           
 14697                           ;main.c: 597: time[j] = I2C_Master_Read(0);
 14698  000100  506B               	movf	_j,w,c
 14699  000102  0D01               	mullw	1
 14700  000104  0E90               	movlw	low _time
 14701  000106  24F3               	addwf	prodl,w,c
 14702  000108  6ED9               	movwf	fsr2l,c
 14703  00010A  0E00               	movlw	high _time
 14704  00010C  20F4               	addwfc	prodh,w,c
 14705  00010E  6EDA               	movwf	fsr2h,c
 14706  000110  0E00               	movlw	0
 14707  000112  ECA1  F030         	call	i2_I2C_Master_Read
 14708  000116  6EDF               	movwf	indf2,c
 14709  000118  2A6B               	incf	_j,f,c
 14710  00011A  D7EE               	goto	i2l7769
 14711  00011C                     i2u569_40:
 14712                           
 14713                           ;main.c: 598: }
 14714                           ;main.c: 599: time[6] = I2C_Master_Read(1);
 14715  00011C  0E01               	movlw	1
 14716  00011E  ECA1  F030         	call	i2_I2C_Master_Read
 14717  000122  0100               	movlb	0	; () banked
 14718  000124  6F96               	movwf	(_time+6)& (0+255),b
 14719                           
 14720                           ;main.c: 600: I2C_Master_Stop();
 14721  000126  EC3E  F031         	call	i2_I2C_Master_Stop	;wreg free
 14722                           
 14723                           ;main.c: 602: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 14724  00012A  0E80               	movlw	128
 14725  00012C  EC09  F031         	call	i2_lcdInst
 14726  000130  0E34               	movlw	52
 14727  000132  6E27               	movwf	??_interruptHandler& (0+255),c
 14728  000134  0EF2               	movlw	242
 14729  000136                     i2u739_47:
 14730  000136  2EE8               	decfsz	wreg,f,c
 14731  000138  D7FE               	bra	i2u739_47
 14732  00013A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14733  00013C  D7FC               	bra	i2u739_47
 14734                           
 14735                           ;main.c: 603: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
 14736  00013E  0EAC               	movlw	low STR_31
 14737  000140  6E0D               	movwf	i2printf@f,c
 14738  000142  0EFE               	movlw	high STR_31
 14739  000144  6E0E               	movwf	i2printf@f+1,c
 14740  000146  C096  F00F         	movff	_time+6,?i2_printf+2
 14741  00014A  6A10               	clrf	?i2_printf+3,c
 14742  00014C  C095  F011         	movff	_time+5,?i2_printf+4
 14743  000150  6A12               	clrf	?i2_printf+5,c
 14744  000152  C094  F013         	movff	_time+4,?i2_printf+6
 14745  000156  6A14               	clrf	?i2_printf+7,c
 14746  000158  EC4E  F01B         	call	i2_printf	;wreg free
 14747                           
 14748                           ;main.c: 604: lcdInst(0xC0);;
 14749  00015C  0EC0               	movlw	192
 14750  00015E  EC09  F031         	call	i2_lcdInst
 14751                           
 14752                           ;main.c: 605: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 14753  000162  0EBB               	movlw	low STR_32
 14754  000164  6E0D               	movwf	i2printf@f,c
 14755  000166  0EFE               	movlw	high STR_32
 14756  000168  6E0E               	movwf	i2printf@f+1,c
 14757  00016A  C092  F00F         	movff	_time+2,?i2_printf+2
 14758  00016E  6A10               	clrf	?i2_printf+3,c
 14759  000170  C091  F011         	movff	_time+1,?i2_printf+4
 14760  000174  6A12               	clrf	?i2_printf+5,c
 14761  000176  C090  F013         	movff	_time,?i2_printf+6
 14762  00017A  6A14               	clrf	?i2_printf+7,c
 14763  00017C  EC4E  F01B         	call	i2_printf	;wreg free
 14764                           
 14765                           ;main.c: 606: _delay((unsigned long)((200)*(32000000/4000.0)));
 14766  000180  0E09               	movlw	9
 14767  000182  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 14768  000184  0E1E               	movlw	30
 14769  000186  6E27               	movwf	??_interruptHandler& (0+255),c
 14770  000188  0EE4               	movlw	228
 14771  00018A                     i2u740_47:
 14772  00018A  2EE8               	decfsz	wreg,f,c
 14773  00018C  D7FE               	bra	i2u740_47
 14774  00018E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14775  000190  D7FC               	bra	i2u740_47
 14776  000192  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 14777  000194  D7FA               	bra	i2u740_47
 14778  000196  D000               	nop2	
 14779  000198  0100               	movlb	0	; () banked
 14780  00019A  4BB7               	infsnz	_i& (0+255),f,b
 14781  00019C  2BB8               	incf	(_i+1)& (0+255),f,b
 14782  00019E  51B8               	movf	(_i+1)& (0+255),w,b
 14783  0001A0  E112               	bnz	i2l7795
 14784  0001A2                     L8:
 14785  0001A2  0E03               	movlw	3
 14786  0001A4  5DB7               	subwf	_i& (0+255),w,b
 14787  0001A6  A0D8               	btfss	status,0,c
 14788  0001A8  D783               	goto	i2l562
 14789  0001AA  EF08  F007         	goto	i2l8197
 14790  0001AE                     i2l561:
 14791                           
 14792                           ; BSR set to: 0
 14793                           ;main.c: 610: }
 14794                           ;main.c: 611: if (temp == '2'){
 14795                           
 14796                           ; BSR set to: 0
 14797  0001AE  0E32               	movlw	50
 14798  0001B0  1841               	xorwf	interruptHandler@temp,w,c
 14799  0001B2  A4D8               	btfss	status,2,c
 14800  0001B4  D00A               	goto	i2l567
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;main.c: 612: change_mode = 1;
 14804  0001B6  0E00               	movlw	0
 14805  0001B8  6FB4               	movwf	(_change_mode+1)& (0+255),b
 14806  0001BA  0E01               	movlw	1
 14807  0001BC  6FB3               	movwf	_change_mode& (0+255),b
 14808                           
 14809                           ;main.c: 613: mode = 1;
 14810  0001BE  0E00               	movlw	0
 14811  0001C0  6FB6               	movwf	(_mode+1)& (0+255),b
 14812  0001C2  0E01               	movlw	1
 14813  0001C4  D264               	goto	L15
 14814  0001C6                     i2l7795:
 14815  0001C6  EF08  F007         	goto	i2l8197
 14816  0001CA                     i2l567:
 14817                           
 14818                           ; BSR set to: 0
 14819                           ;main.c: 618: }
 14820                           ;main.c: 621: }
 14821                           ;main.c: 626: if(operation == 1){
 14822                           
 14823                           ; BSR set to: 0
 14824                           
 14825                           ; BSR set to: 0
 14826  0001CA  0466               	decf	_operation,w,c
 14827  0001CC  1067               	iorwf	_operation+1,w,c
 14828  0001CE  A4D8               	btfss	status,2,c
 14829  0001D0  D260               	goto	i2l578
 14830                           
 14831                           ; BSR set to: 0
 14832                           ;main.c: 627: if (temp == '1'){
 14833  0001D2  0E31               	movlw	49
 14834  0001D4  1841               	xorwf	interruptHandler@temp,w,c
 14835  0001D6  A4D8               	btfss	status,2,c
 14836  0001D8  D08A               	goto	i2l569
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;main.c: 628: initLCD();
 14840  0001DA  EC1F  F02F         	call	i2_initLCD	;wreg free
 14841                           
 14842                           ;main.c: 629: for (i = 0; i <3; i++){
 14843  0001DE  0E00               	movlw	0
 14844  0001E0  0100               	movlb	0	; () banked
 14845  0001E2  6FB8               	movwf	(_i+1)& (0+255),b
 14846  0001E4  0E00               	movlw	0
 14847  0001E6  6FB7               	movwf	_i& (0+255),b
 14848                           
 14849                           ; BSR set to: 0
 14850  0001E8  51B8               	movf	(_i+1)& (0+255),w,b
 14851  0001EA  E101               	bnz	i2u574_40
 14852  0001EC  D07A               	goto	L9
 14853  0001EE                     i2u574_40:
 14854                           
 14855                           ; BSR set to: 0
 14856  0001EE  EF08  F007         	goto	i2l8197
 14857  0001F2                     
 14858                           ; BSR set to: 0
 14859                           ;main.c: 630: I2C_Master_Init(100000);
 14860                           
 14861                           ; BSR set to: 0
 14862  0001F2  0EA0               	movlw	160
 14863  0001F4  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
 14864  0001F6  0E86               	movlw	134
 14865  0001F8  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
 14866  0001FA  0E01               	movlw	1
 14867  0001FC  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
 14868  0001FE  0E00               	movlw	0
 14869  000200  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
 14870  000202  EC78  F02E         	call	i2_I2C_Master_Init	;wreg free
 14871                           
 14872                           ;main.c: 631: I2C_Master_Start();
 14873  000206  EC42  F031         	call	i2_I2C_Master_Start	;wreg free
 14874                           
 14875                           ;main.c: 632: I2C_Master_Write(0b11010000);
 14876  00020A  0E00               	movlw	0
 14877  00020C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14878  00020E  0ED0               	movlw	208
 14879  000210  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14880  000212  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14881                           
 14882                           ;main.c: 633: I2C_Master_Write(0x00);
 14883  000216  0E00               	movlw	0
 14884  000218  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14885  00021A  0E00               	movlw	0
 14886  00021C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14887  00021E  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14888                           
 14889                           ;main.c: 634: I2C_Master_Stop();
 14890  000222  EC3E  F031         	call	i2_I2C_Master_Stop	;wreg free
 14891                           
 14892                           ;main.c: 637: I2C_Master_Start();
 14893  000226  EC42  F031         	call	i2_I2C_Master_Start	;wreg free
 14894                           
 14895                           ;main.c: 638: I2C_Master_Write(0b11010001);
 14896  00022A  0E00               	movlw	0
 14897  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14898  00022E  0ED1               	movlw	209
 14899  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14900  000232  EC2D  F031         	call	i2_I2C_Master_Write	;wreg free
 14901                           
 14902                           ;main.c: 639: for(j = 0; j < 6; j++){
 14903  000236  0E00               	movlw	0
 14904  000238  6E6B               	movwf	_j,c
 14905  00023A                     i2l7815:
 14906  00023A  0E05               	movlw	5
 14907  00023C  646B               	cpfsgt	_j,c
 14908  00023E  D001               	goto	i2l572
 14909  000240  D00E               	goto	i2u576_40
 14910  000242                     i2l572:
 14911                           
 14912                           ;main.c: 640: time[j] = I2C_Master_Read(0);
 14913  000242  506B               	movf	_j,w,c
 14914  000244  0D01               	mullw	1
 14915  000246  0E90               	movlw	low _time
 14916  000248  24F3               	addwf	prodl,w,c
 14917  00024A  6ED9               	movwf	fsr2l,c
 14918  00024C  0E00               	movlw	high _time
 14919  00024E  20F4               	addwfc	prodh,w,c
 14920  000250  6EDA               	movwf	fsr2h,c
 14921  000252  0E00               	movlw	0
 14922  000254  ECA1  F030         	call	i2_I2C_Master_Read
 14923  000258  6EDF               	movwf	indf2,c
 14924  00025A  2A6B               	incf	_j,f,c
 14925  00025C  D7EE               	goto	i2l7815
 14926  00025E                     i2u576_40:
 14927                           
 14928                           ;main.c: 641: }
 14929                           ;main.c: 642: time[6] = I2C_Master_Read(1);
 14930  00025E  0E01               	movlw	1
 14931  000260  ECA1  F030         	call	i2_I2C_Master_Read
 14932  000264  0100               	movlb	0	; () banked
 14933  000266  6F96               	movwf	(_time+6)& (0+255),b
 14934                           
 14935                           ;main.c: 643: I2C_Master_Stop();
 14936  000268  EC3E  F031         	call	i2_I2C_Master_Stop	;wreg free
 14937                           
 14938                           ;main.c: 645: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 14939  00026C  0E80               	movlw	128
 14940  00026E  EC09  F031         	call	i2_lcdInst
 14941  000272  0E34               	movlw	52
 14942  000274  6E27               	movwf	??_interruptHandler& (0+255),c
 14943  000276  0EF2               	movlw	242
 14944  000278                     i2u741_47:
 14945  000278  2EE8               	decfsz	wreg,f,c
 14946  00027A  D7FE               	bra	i2u741_47
 14947  00027C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14948  00027E  D7FC               	bra	i2u741_47
 14949                           
 14950                           ;main.c: 646: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
 14951  000280  0EAC               	movlw	low STR_31
 14952  000282  6E0D               	movwf	i2printf@f,c
 14953  000284  0EFE               	movlw	high STR_31
 14954  000286  6E0E               	movwf	i2printf@f+1,c
 14955  000288  C096  F00F         	movff	_time+6,?i2_printf+2
 14956  00028C  6A10               	clrf	?i2_printf+3,c
 14957  00028E  C095  F011         	movff	_time+5,?i2_printf+4
 14958  000292  6A12               	clrf	?i2_printf+5,c
 14959  000294  C094  F013         	movff	_time+4,?i2_printf+6
 14960  000298  6A14               	clrf	?i2_printf+7,c
 14961  00029A  EC4E  F01B         	call	i2_printf	;wreg free
 14962                           
 14963                           ;main.c: 647: lcdInst(0xC0);;
 14964  00029E  0EC0               	movlw	192
 14965  0002A0  EC09  F031         	call	i2_lcdInst
 14966                           
 14967                           ;main.c: 648: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 14968  0002A4  0EBB               	movlw	low STR_32
 14969  0002A6  6E0D               	movwf	i2printf@f,c
 14970  0002A8  0EFE               	movlw	high STR_32
 14971  0002AA  6E0E               	movwf	i2printf@f+1,c
 14972  0002AC  C092  F00F         	movff	_time+2,?i2_printf+2
 14973  0002B0  6A10               	clrf	?i2_printf+3,c
 14974  0002B2  C091  F011         	movff	_time+1,?i2_printf+4
 14975  0002B6  6A12               	clrf	?i2_printf+5,c
 14976  0002B8  C090  F013         	movff	_time,?i2_printf+6
 14977  0002BC  6A14               	clrf	?i2_printf+7,c
 14978  0002BE  EC4E  F01B         	call	i2_printf	;wreg free
 14979                           
 14980                           ;main.c: 649: _delay((unsigned long)((600)*(32000000/4000.0)));
 14981  0002C2  0E19               	movlw	25
 14982  0002C4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 14983  0002C6  0E5A               	movlw	90
 14984  0002C8  6E27               	movwf	??_interruptHandler& (0+255),c
 14985  0002CA  0EB2               	movlw	178
 14986  0002CC                     i2u742_47:
 14987  0002CC  2EE8               	decfsz	wreg,f,c
 14988  0002CE  D7FE               	bra	i2u742_47
 14989  0002D0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14990  0002D2  D7FC               	bra	i2u742_47
 14991  0002D4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 14992  0002D6  D7FA               	bra	i2u742_47
 14993  0002D8  0100               	movlb	0	; () banked
 14994  0002DA  4BB7               	infsnz	_i& (0+255),f,b
 14995  0002DC  2BB8               	incf	(_i+1)& (0+255),f,b
 14996  0002DE  51B8               	movf	(_i+1)& (0+255),w,b
 14997  0002E0  E104               	bnz	i2u577_40
 14998  0002E2                     L9:
 14999  0002E2  0E03               	movlw	3
 15000  0002E4  5DB7               	subwf	_i& (0+255),w,b
 15001  0002E6  A0D8               	btfss	status,0,c
 15002  0002E8  D784               	goto	i2l570
 15003  0002EA                     i2u577_40:
 15004  0002EA  EF08  F007         	goto	i2l8197
 15005  0002EE                     i2l569:
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;main.c: 655: }
 15009                           ;main.c: 656: if (temp == '2'){
 15010                           
 15011                           ; BSR set to: 0
 15012  0002EE  0E32               	movlw	50
 15013  0002F0  1841               	xorwf	interruptHandler@temp,w,c
 15014  0002F2  A4D8               	btfss	status,2,c
 15015  0002F4  D099               	goto	i2l574
 15016                           
 15017                           ; BSR set to: 0
 15018                           ;main.c: 665: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
 15019  0002F6  C16E  F001         	movff	_hr_initial,i2___wmul@multiplier
 15020  0002FA  C16F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
 15021  0002FE  0E0E               	movlw	14
 15022  000300  6E04               	movwf	i2___wmul@multiplicand+1,c
 15023  000302  0E10               	movlw	16
 15024  000304  6E03               	movwf	i2___wmul@multiplicand,c
 15025  000306  EC8E  F030         	call	i2___wmul	;wreg free
 15026  00030A  C001  F027         	movff	?i2___wmul,??_interruptHandler
 15027  00030E  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 15028  000312  C16C  F001         	movff	_min_initial,i2___wmul@multiplier
 15029  000316  C16D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
 15030  00031A  0E00               	movlw	0
 15031  00031C  6E04               	movwf	i2___wmul@multiplicand+1,c
 15032  00031E  0E3C               	movlw	60
 15033  000320  6E03               	movwf	i2___wmul@multiplicand,c
 15034  000322  EC8E  F030         	call	i2___wmul	;wreg free
 15035  000326  5001               	movf	?i2___wmul,w,c
 15036  000328  2627               	addwf	??_interruptHandler,f,c
 15037  00032A  5002               	movf	?i2___wmul+1,w,c
 15038  00032C  2228               	addwfc	??_interruptHandler+1,f,c
 15039  00032E  0101               	movlb	1	; () banked
 15040  000330  516A               	movf	_sec_initial& (0+255),w,b
 15041  000332  2427               	addwf	??_interruptHandler,w,c
 15042  000334  6F68               	movwf	_initial_time& (0+255),b
 15043  000336  516B               	movf	(_sec_initial+1)& (0+255),w,b
 15044  000338  2028               	addwfc	??_interruptHandler+1,w,c
 15045  00033A  6F69               	movwf	(_initial_time+1)& (0+255),b
 15046                           
 15047                           ;main.c: 666: final_time = hr_final*3600 + min_final*60 + sec_final;
 15048  00033C  C166  F001         	movff	_hr_final,i2___wmul@multiplier
 15049  000340  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
 15050  000344  0E0E               	movlw	14
 15051  000346  6E04               	movwf	i2___wmul@multiplicand+1,c
 15052  000348  0E10               	movlw	16
 15053  00034A  6E03               	movwf	i2___wmul@multiplicand,c
 15054  00034C  EC8E  F030         	call	i2___wmul	;wreg free
 15055  000350  C001  F027         	movff	?i2___wmul,??_interruptHandler
 15056  000354  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 15057  000358  C164  F001         	movff	_min_final,i2___wmul@multiplier
 15058  00035C  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
 15059  000360  0E00               	movlw	0
 15060  000362  6E04               	movwf	i2___wmul@multiplicand+1,c
 15061  000364  0E3C               	movlw	60
 15062  000366  6E03               	movwf	i2___wmul@multiplicand,c
 15063  000368  EC8E  F030         	call	i2___wmul	;wreg free
 15064  00036C  5001               	movf	?i2___wmul,w,c
 15065  00036E  2627               	addwf	??_interruptHandler,f,c
 15066  000370  5002               	movf	?i2___wmul+1,w,c
 15067  000372  2228               	addwfc	??_interruptHandler+1,f,c
 15068  000374  0101               	movlb	1	; () banked
 15069  000376  5162               	movf	_sec_final& (0+255),w,b
 15070  000378  2427               	addwf	??_interruptHandler,w,c
 15071  00037A  6F60               	movwf	_final_time& (0+255),b
 15072  00037C  5163               	movf	(_sec_final+1)& (0+255),w,b
 15073  00037E  2028               	addwfc	??_interruptHandler+1,w,c
 15074  000380  6F61               	movwf	(_final_time+1)& (0+255),b
 15075                           
 15076                           ; BSR set to: 1
 15077                           ;main.c: 667: operationTime = final_time - initial_time;
 15078  000382  C168  F027         	movff	_initial_time,??_interruptHandler
 15079  000386  C169  F028         	movff	_initial_time+1,??_interruptHandler+1
 15080  00038A  1E27               	comf	??_interruptHandler,f,c
 15081  00038C  1E28               	comf	??_interruptHandler+1,f,c
 15082  00038E  4A27               	infsnz	??_interruptHandler,f,c
 15083  000390  2A28               	incf	??_interruptHandler+1,f,c
 15084  000392  5160               	movf	_final_time& (0+255),w,b
 15085  000394  2427               	addwf	??_interruptHandler,w,c
 15086  000396  6E5E               	movwf	_operationTime,c
 15087  000398  5161               	movf	(_final_time+1)& (0+255),w,b
 15088  00039A  2028               	addwfc	??_interruptHandler+1,w,c
 15089  00039C  6E5F               	movwf	_operationTime+1,c
 15090                           
 15091                           ; BSR set to: 1
 15092                           ;main.c: 668: initLCD();
 15093  00039E  EC1F  F02F         	call	i2_initLCD	;wreg free
 15094                           
 15095                           ;main.c: 671: printf("operation time:");
 15096  0003A2  0E31               	movlw	low STR_35
 15097  0003A4  6E0D               	movwf	i2printf@f,c
 15098  0003A6  0EFE               	movlw	high STR_35
 15099  0003A8  6E0E               	movwf	i2printf@f+1,c
 15100  0003AA  EC4E  F01B         	call	i2_printf	;wreg free
 15101                           
 15102                           ;main.c: 672: lcdInst(0xC0);;
 15103  0003AE  0EC0               	movlw	192
 15104  0003B0  EC09  F031         	call	i2_lcdInst
 15105                           
 15106                           ;main.c: 673: printf("%dmin %dsecs",operationTime/60,operationTime%60);
 15107  0003B4  0E02               	movlw	low STR_36
 15108  0003B6  6E0D               	movwf	i2printf@f,c
 15109  0003B8  0EFF               	movlw	high STR_36
 15110  0003BA  6E0E               	movwf	i2printf@f+1,c
 15111  0003BC  C05E  F001         	movff	_operationTime,i2___awdiv@dividend
 15112  0003C0  C05F  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
 15113  0003C4  0E00               	movlw	0
 15114  0003C6  6E04               	movwf	i2___awdiv@divisor+1,c
 15115  0003C8  0E3C               	movlw	60
 15116  0003CA  6E03               	movwf	i2___awdiv@divisor,c
 15117  0003CC  EC2C  F02D         	call	i2___awdiv	;wreg free
 15118  0003D0  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
 15119  0003D4  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
 15120  0003D8  C05E  F001         	movff	_operationTime,___awmod@dividend
 15121  0003DC  C05F  F002         	movff	_operationTime+1,___awmod@dividend+1
 15122  0003E0  0E00               	movlw	0
 15123  0003E2  6E04               	movwf	___awmod@divisor+1,c
 15124  0003E4  0E3C               	movlw	60
 15125  0003E6  6E03               	movwf	___awmod@divisor,c
 15126  0003E8  ECAF  F02D         	call	___awmod	;wreg free
 15127  0003EC  C001  F011         	movff	?___awmod,?i2_printf+4
 15128  0003F0  C002  F012         	movff	?___awmod+1,?i2_printf+5
 15129  0003F4  EC4E  F01B         	call	i2_printf	;wreg free
 15130                           
 15131                           ;main.c: 674: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15132  0003F8  0E80               	movlw	128
 15133  0003FA  EC09  F031         	call	i2_lcdInst
 15134  0003FE  0E34               	movlw	52
 15135  000400  6E27               	movwf	??_interruptHandler& (0+255),c
 15136  000402  0EF2               	movlw	242
 15137  000404                     i2u743_47:
 15138  000404  2EE8               	decfsz	wreg,f,c
 15139  000406  D7FE               	bra	i2u743_47
 15140  000408  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15141  00040A  D7FC               	bra	i2u743_47
 15142                           
 15143                           ;main.c: 675: _delay((unsigned long)((200)*(32000000/4000.0)));
 15144  00040C  0E09               	movlw	9
 15145  00040E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15146  000410  0E1E               	movlw	30
 15147  000412  6E27               	movwf	??_interruptHandler& (0+255),c
 15148  000414  0EE4               	movlw	228
 15149  000416                     i2u744_47:
 15150  000416  2EE8               	decfsz	wreg,f,c
 15151  000418  D7FE               	bra	i2u744_47
 15152  00041A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15153  00041C  D7FC               	bra	i2u744_47
 15154  00041E  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15155  000420  D7FA               	bra	i2u744_47
 15156  000422  D000               	nop2	
 15157  000424  EF08  F007         	goto	i2l8197
 15158  000428                     i2l574:
 15159                           
 15160                           ;main.c: 681: }
 15161                           ;main.c: 683: if (temp == '3'){
 15162  000428  0E33               	movlw	51
 15163  00042A  1841               	xorwf	interruptHandler@temp,w,c
 15164  00042C  A4D8               	btfss	status,2,c
 15165  00042E  D123               	goto	i2l575
 15166                           
 15167                           ;main.c: 688: initLCD();
 15168  000430  EC1F  F02F         	call	i2_initLCD	;wreg free
 15169                           
 15170                           ;main.c: 689: printf("assembly step:%d",assembly_step);
 15171  000434  0E0F               	movlw	low STR_7
 15172  000436  6E0D               	movwf	i2printf@f,c
 15173  000438  0EFE               	movlw	high STR_7
 15174  00043A  6E0E               	movwf	i2printf@f+1,c
 15175  00043C  C0AF  F00F         	movff	_assembly_step,?i2_printf+2
 15176  000440  C0B0  F010         	movff	_assembly_step+1,?i2_printf+3
 15177  000444  EC4E  F01B         	call	i2_printf	;wreg free
 15178                           
 15179                           ;main.c: 690: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15180  000448  0E80               	movlw	128
 15181  00044A  EC09  F031         	call	i2_lcdInst
 15182  00044E  0E34               	movlw	52
 15183  000450  6E27               	movwf	??_interruptHandler& (0+255),c
 15184  000452  0EF2               	movlw	242
 15185  000454                     i2u745_47:
 15186  000454  2EE8               	decfsz	wreg,f,c
 15187  000456  D7FE               	bra	i2u745_47
 15188  000458  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15189  00045A  D7FC               	bra	i2u745_47
 15190                           
 15191                           ;main.c: 691: initLCD();
 15192  00045C  EC1F  F02F         	call	i2_initLCD	;wreg free
 15193                           
 15194                           ;main.c: 692: for (i = 0; i<8; i++){
 15195  000460  0E00               	movlw	0
 15196  000462  0100               	movlb	0	; () banked
 15197  000464  6FB8               	movwf	(_i+1)& (0+255),b
 15198  000466  0E00               	movlw	0
 15199  000468  6FB7               	movwf	_i& (0+255),b
 15200  00046A                     i2l7875:
 15201                           
 15202                           ; BSR set to: 0
 15203  00046A  51B8               	movf	(_i+1)& (0+255),w,b
 15204  00046C  E16E               	bnz	i2l7897
 15205  00046E  0E08               	movlw	8
 15206  000470  5DB7               	subwf	_i& (0+255),w,b
 15207  000472  B0D8               	btfsc	status,0,c
 15208  000474  D06A               	goto	i2u581_40
 15209                           
 15210                           ; BSR set to: 0
 15211                           ;main.c: 693: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 15212                           
 15213                           ; BSR set to: 0
 15214                           
 15215                           ; BSR set to: 0
 15216  000476  0E01               	movlw	1
 15217  000478  EC09  F031         	call	i2_lcdInst
 15218  00047C  0E9C               	movlw	156
 15219  00047E  6E27               	movwf	??_interruptHandler& (0+255),c
 15220  000480  0ED7               	movlw	215
 15221  000482                     i2u746_47:
 15222  000482  2EE8               	decfsz	wreg,f,c
 15223  000484  D7FE               	bra	i2u746_47
 15224  000486  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15225  000488  D7FC               	bra	i2u746_47
 15226  00048A  F000               	nop	
 15227                           
 15228                           ;main.c: 694: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15229  00048C  0E80               	movlw	128
 15230  00048E  EC09  F031         	call	i2_lcdInst
 15231  000492  0E34               	movlw	52
 15232  000494  6E27               	movwf	??_interruptHandler& (0+255),c
 15233  000496  0EF2               	movlw	242
 15234  000498                     i2u747_47:
 15235  000498  2EE8               	decfsz	wreg,f,c
 15236  00049A  D7FE               	bra	i2u747_47
 15237  00049C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15238  00049E  D7FC               	bra	i2u747_47
 15239                           
 15240                           ;main.c: 695: printf("C%d:B%d,N%d", B_array[i],N_array[i]);
 15241  0004A0  0E1B               	movlw	low STR_38
 15242  0004A2  6E0D               	movwf	i2printf@f,c
 15243  0004A4  0EFF               	movlw	high STR_38
 15244  0004A6  6E0E               	movwf	i2printf@f+1,c
 15245  0004A8  90D8               	bcf	status,0,c
 15246  0004AA  0100               	movlb	0	; () banked
 15247  0004AC  35B7               	rlcf	_i& (0+255),w,b
 15248  0004AE  6ED9               	movwf	fsr2l,c
 15249  0004B0  35B8               	rlcf	(_i+1)& (0+255),w,b
 15250  0004B2  6EDA               	movwf	fsr2h,c
 15251  0004B4  0E30               	movlw	low _B_array
 15252  0004B6  26D9               	addwf	fsr2l,f,c
 15253  0004B8  0E01               	movlw	high _B_array
 15254  0004BA  22DA               	addwfc	fsr2h,f,c
 15255  0004BC  CFDE F00F          	movff	postinc2,?i2_printf+2
 15256  0004C0  CFDD F010          	movff	postdec2,?i2_printf+3
 15257  0004C4  90D8               	bcf	status,0,c
 15258  0004C6  35B7               	rlcf	_i& (0+255),w,b
 15259  0004C8  6ED9               	movwf	fsr2l,c
 15260  0004CA  35B8               	rlcf	(_i+1)& (0+255),w,b
 15261  0004CC  6EDA               	movwf	fsr2h,c
 15262  0004CE  0E10               	movlw	low _N_array
 15263  0004D0  26D9               	addwf	fsr2l,f,c
 15264  0004D2  0E01               	movlw	high _N_array
 15265  0004D4  22DA               	addwfc	fsr2h,f,c
 15266  0004D6  CFDE F011          	movff	postinc2,?i2_printf+4
 15267  0004DA  CFDD F012          	movff	postdec2,?i2_printf+5
 15268  0004DE  EC4E  F01B         	call	i2_printf	;wreg free
 15269                           
 15270                           ;main.c: 696: lcdInst(0xC0);;
 15271  0004E2  0EC0               	movlw	192
 15272  0004E4  EC09  F031         	call	i2_lcdInst
 15273                           
 15274                           ;main.c: 697: printf("    S%d,W%d", S_array[i], W_array[i]);
 15275  0004E8  0E27               	movlw	low STR_39
 15276  0004EA  6E0D               	movwf	i2printf@f,c
 15277  0004EC  0EFF               	movlw	high STR_39
 15278  0004EE  6E0E               	movwf	i2printf@f+1,c
 15279  0004F0  90D8               	bcf	status,0,c
 15280  0004F2  0100               	movlb	0	; () banked
 15281  0004F4  35B7               	rlcf	_i& (0+255),w,b
 15282  0004F6  6ED9               	movwf	fsr2l,c
 15283  0004F8  35B8               	rlcf	(_i+1)& (0+255),w,b
 15284  0004FA  6EDA               	movwf	fsr2h,c
 15285  0004FC  0E20               	movlw	low _S_array
 15286  0004FE  26D9               	addwf	fsr2l,f,c
 15287  000500  0E01               	movlw	high _S_array
 15288  000502  22DA               	addwfc	fsr2h,f,c
 15289  000504  CFDE F00F          	movff	postinc2,?i2_printf+2
 15290  000508  CFDD F010          	movff	postdec2,?i2_printf+3
 15291  00050C  90D8               	bcf	status,0,c
 15292  00050E  35B7               	rlcf	_i& (0+255),w,b
 15293  000510  6ED9               	movwf	fsr2l,c
 15294  000512  35B8               	rlcf	(_i+1)& (0+255),w,b
 15295  000514  6EDA               	movwf	fsr2h,c
 15296  000516  0E00               	movlw	low _W_array
 15297  000518  26D9               	addwf	fsr2l,f,c
 15298  00051A  0E01               	movlw	high _W_array
 15299  00051C  22DA               	addwfc	fsr2h,f,c
 15300  00051E  CFDE F011          	movff	postinc2,?i2_printf+4
 15301  000522  CFDD F012          	movff	postdec2,?i2_printf+5
 15302  000526  EC4E  F01B         	call	i2_printf	;wreg free
 15303                           
 15304                           ;main.c: 698: _delay((unsigned long)((500)*(32000000/4000.0)));
 15305  00052A  0E15               	movlw	21
 15306  00052C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15307  00052E  0E4B               	movlw	75
 15308  000530  6E27               	movwf	??_interruptHandler& (0+255),c
 15309  000532  0EBE               	movlw	190
 15310  000534                     i2u748_47:
 15311  000534  2EE8               	decfsz	wreg,f,c
 15312  000536  D7FE               	bra	i2u748_47
 15313  000538  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15314  00053A  D7FC               	bra	i2u748_47
 15315  00053C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15316  00053E  D7FA               	bra	i2u748_47
 15317  000540  D000               	nop2	
 15318  000542  0100               	movlb	0	; () banked
 15319  000544  4BB7               	infsnz	_i& (0+255),f,b
 15320  000546  2BB8               	incf	(_i+1)& (0+255),f,b
 15321  000548  D790               	goto	i2l7875
 15322  00054A                     i2u581_40:
 15323  00054A                     i2l7897:
 15324                           
 15325                           ; BSR set to: 0
 15326                           ;main.c: 704: }
 15327                           ;main.c: 707: _delay((unsigned long)((400)*(32000000/4000.0)));
 15328  00054A  0E11               	movlw	17
 15329  00054C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15330  00054E  0E3C               	movlw	60
 15331  000550  6E27               	movwf	??_interruptHandler& (0+255),c
 15332  000552  0ECB               	movlw	203
 15333  000554                     i2u749_47:
 15334  000554  2EE8               	decfsz	wreg,f,c
 15335  000556  D7FE               	bra	i2u749_47
 15336  000558  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15337  00055A  D7FC               	bra	i2u749_47
 15338  00055C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15339  00055E  D7FA               	bra	i2u749_47
 15340  000560  F000               	nop	
 15341                           
 15342                           ;main.c: 708: initLCD();
 15343  000562  EC1F  F02F         	call	i2_initLCD	;wreg free
 15344                           
 15345                           ;main.c: 710: printf("Bolt_remain:%d",B_remain);
 15346  000566  0E7F               	movlw	low STR_23
 15347  000568  6E0D               	movwf	i2printf@f,c
 15348  00056A  0EFE               	movlw	high STR_23
 15349  00056C  6E0E               	movwf	i2printf@f+1,c
 15350  00056E  C0A5  F00F         	movff	_B_remain,?i2_printf+2
 15351  000572  C0A6  F010         	movff	_B_remain+1,?i2_printf+3
 15352  000576  EC4E  F01B         	call	i2_printf	;wreg free
 15353                           
 15354                           ;main.c: 711: _delay((unsigned long)((500)*(32000000/4000.0)));
 15355  00057A  0E15               	movlw	21
 15356  00057C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15357  00057E  0E4B               	movlw	75
 15358  000580  6E27               	movwf	??_interruptHandler& (0+255),c
 15359  000582  0EBE               	movlw	190
 15360  000584                     i2u750_47:
 15361  000584  2EE8               	decfsz	wreg,f,c
 15362  000586  D7FE               	bra	i2u750_47
 15363  000588  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15364  00058A  D7FC               	bra	i2u750_47
 15365  00058C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15366  00058E  D7FA               	bra	i2u750_47
 15367  000590  D000               	nop2	
 15368                           
 15369                           ;main.c: 712: initLCD();
 15370  000592  EC1F  F02F         	call	i2_initLCD	;wreg free
 15371                           
 15372                           ;main.c: 714: printf("Nut_remain:%d",N_remain);
 15373  000596  0EE6               	movlw	low STR_24
 15374  000598  6E0D               	movwf	i2printf@f,c
 15375  00059A  0EFE               	movlw	high STR_24
 15376  00059C  6E0E               	movwf	i2printf@f+1,c
 15377  00059E  C0A3  F00F         	movff	_N_remain,?i2_printf+2
 15378  0005A2  C0A4  F010         	movff	_N_remain+1,?i2_printf+3
 15379  0005A6  EC4E  F01B         	call	i2_printf	;wreg free
 15380                           
 15381                           ;main.c: 715: _delay((unsigned long)((500)*(32000000/4000.0)));
 15382  0005AA  0E15               	movlw	21
 15383  0005AC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15384  0005AE  0E4B               	movlw	75
 15385  0005B0  6E27               	movwf	??_interruptHandler& (0+255),c
 15386  0005B2  0EBE               	movlw	190
 15387  0005B4                     i2u751_47:
 15388  0005B4  2EE8               	decfsz	wreg,f,c
 15389  0005B6  D7FE               	bra	i2u751_47
 15390  0005B8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15391  0005BA  D7FC               	bra	i2u751_47
 15392  0005BC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15393  0005BE  D7FA               	bra	i2u751_47
 15394  0005C0  D000               	nop2	
 15395                           
 15396                           ;main.c: 717: initLCD();
 15397  0005C2  EC1F  F02F         	call	i2_initLCD	;wreg free
 15398                           
 15399                           ;main.c: 718: printf("Spacer_remain:%d",S_remain);
 15400  0005C6  0EED               	movlw	low STR_25
 15401  0005C8  6E0D               	movwf	i2printf@f,c
 15402  0005CA  0EFD               	movlw	high STR_25
 15403  0005CC  6E0E               	movwf	i2printf@f+1,c
 15404  0005CE  C0A1  F00F         	movff	_S_remain,?i2_printf+2
 15405  0005D2  C0A2  F010         	movff	_S_remain+1,?i2_printf+3
 15406  0005D6  EC4E  F01B         	call	i2_printf	;wreg free
 15407                           
 15408                           ;main.c: 719: _delay((unsigned long)((500)*(32000000/4000.0)));
 15409  0005DA  0E15               	movlw	21
 15410  0005DC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15411  0005DE  0E4B               	movlw	75
 15412  0005E0  6E27               	movwf	??_interruptHandler& (0+255),c
 15413  0005E2  0EBE               	movlw	190
 15414  0005E4                     i2u752_47:
 15415  0005E4  2EE8               	decfsz	wreg,f,c
 15416  0005E6  D7FE               	bra	i2u752_47
 15417  0005E8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15418  0005EA  D7FC               	bra	i2u752_47
 15419  0005EC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15420  0005EE  D7FA               	bra	i2u752_47
 15421  0005F0  D000               	nop2	
 15422                           
 15423                           ;main.c: 721: initLCD();
 15424  0005F2  EC1F  F02F         	call	i2_initLCD	;wreg free
 15425                           
 15426                           ;main.c: 722: printf("Washer_remain:%d",W_remain);
 15427  0005F6  0EFE               	movlw	low STR_26
 15428  0005F8  6E0D               	movwf	i2printf@f,c
 15429  0005FA  0EFD               	movlw	high STR_26
 15430  0005FC  6E0E               	movwf	i2printf@f+1,c
 15431  0005FE  C09F  F00F         	movff	_W_remain,?i2_printf+2
 15432  000602  C0A0  F010         	movff	_W_remain+1,?i2_printf+3
 15433  000606  EC4E  F01B         	call	i2_printf	;wreg free
 15434                           
 15435                           ;main.c: 723: _delay((unsigned long)((500)*(32000000/4000.0)));
 15436  00060A  0E15               	movlw	21
 15437  00060C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15438  00060E  0E4B               	movlw	75
 15439  000610  6E27               	movwf	??_interruptHandler& (0+255),c
 15440  000612  0EBE               	movlw	190
 15441  000614                     i2u753_47:
 15442  000614  2EE8               	decfsz	wreg,f,c
 15443  000616  D7FE               	bra	i2u753_47
 15444  000618  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15445  00061A  D7FC               	bra	i2u753_47
 15446  00061C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15447  00061E  D7FA               	bra	i2u753_47
 15448  000620  D000               	nop2	
 15449                           
 15450                           ;main.c: 725: initLCD();
 15451  000622  EC1F  F02F         	call	i2_initLCD	;wreg free
 15452                           
 15453                           ;main.c: 727: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 15454  000626  0E01               	movlw	1
 15455  000628  EC09  F031         	call	i2_lcdInst
 15456  00062C  0E9C               	movlw	156
 15457  00062E  6E27               	movwf	??_interruptHandler& (0+255),c
 15458  000630  0ED7               	movlw	215
 15459  000632                     i2u754_47:
 15460  000632  2EE8               	decfsz	wreg,f,c
 15461  000634  D7FE               	bra	i2u754_47
 15462  000636  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15463  000638  D7FC               	bra	i2u754_47
 15464  00063A  F000               	nop	
 15465                           
 15466                           ;main.c: 728: printf("Done");
 15467  00063C  0EDE               	movlw	low STR_44
 15468  00063E  6E0D               	movwf	i2printf@f,c
 15469  000640  0EFF               	movlw	high STR_44
 15470  000642  6E0E               	movwf	i2printf@f+1,c
 15471  000644  EC4E  F01B         	call	i2_printf	;wreg free
 15472                           
 15473                           ;main.c: 729: _delay((unsigned long)((100)*(32000000/4000.0)));
 15474  000648  0E05               	movlw	5
 15475  00064A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15476  00064C  0E0F               	movlw	15
 15477  00064E  6E27               	movwf	??_interruptHandler& (0+255),c
 15478  000650  0EF1               	movlw	241
 15479  000652                     i2u755_47:
 15480  000652  2EE8               	decfsz	wreg,f,c
 15481  000654  D7FE               	bra	i2u755_47
 15482  000656  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15483  000658  D7FC               	bra	i2u755_47
 15484  00065A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15485  00065C  D7FA               	bra	i2u755_47
 15486  00065E  F000               	nop	
 15487                           
 15488                           ;main.c: 730: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15489  000660  0E80               	movlw	128
 15490  000662  EC09  F031         	call	i2_lcdInst
 15491  000666  0E34               	movlw	52
 15492  000668  6E27               	movwf	??_interruptHandler& (0+255),c
 15493  00066A  0EF2               	movlw	242
 15494  00066C                     i2u756_47:
 15495  00066C  2EE8               	decfsz	wreg,f,c
 15496  00066E  D7FE               	bra	i2u756_47
 15497  000670  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15498  000672  D7FC               	bra	i2u756_47
 15499  000674  D3CD               	goto	i2l8197
 15500  000676                     i2l575:
 15501                           
 15502                           ;main.c: 735: }
 15503                           ;main.c: 737: if (temp == '4'){
 15504  000676  0E34               	movlw	52
 15505  000678  1841               	xorwf	interruptHandler@temp,w,c
 15506  00067A  A4D8               	btfss	status,2,c
 15507  00067C  D00A               	goto	i2l578
 15508                           
 15509                           ;main.c: 738: operation_done = 1;
 15510  00067E  0E00               	movlw	0
 15511  000680  6E65               	movwf	_operation_done+1,c
 15512  000682  0E01               	movlw	1
 15513  000684  6E64               	movwf	_operation_done,c
 15514                           
 15515                           ;main.c: 739: mode = 0;
 15516  000686  0E00               	movlw	0
 15517  000688  0100               	movlb	0	; () banked
 15518  00068A  6FB6               	movwf	(_mode+1)& (0+255),b
 15519  00068C  0E00               	movlw	0
 15520  00068E                     L15:
 15521  00068E  6FB5               	movwf	_mode& (0+255),b
 15522  000690  D3BF               	goto	i2l8197
 15523  000692                     i2l578:
 15524                           
 15525                           ;main.c: 742: }
 15526                           ;main.c: 744: }
 15527                           ;main.c: 769: if (state == 0){
 15528                           
 15529                           ; BSR set to: 0
 15530                           
 15531                           ; BSR set to: 0
 15532  000692  0100               	movlb	0	; () banked
 15533  000694  51B1               	movf	_state& (0+255),w,b
 15534  000696  11B2               	iorwf	(_state+1)& (0+255),w,b
 15535  000698  A4D8               	btfss	status,2,c
 15536  00069A  D0CE               	goto	i2l579
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;main.c: 771: if(temp == '4'){
 15540  00069C  0E34               	movlw	52
 15541  00069E  1841               	xorwf	interruptHandler@temp,w,c
 15542  0006A0  A4D8               	btfss	status,2,c
 15543  0006A2  D01F               	goto	i2l580
 15544                           
 15545                           ; BSR set to: 0
 15546                           ;main.c: 772: assembly_step = 4;
 15547  0006A4  0E00               	movlw	0
 15548  0006A6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15549  0006A8  0E04               	movlw	4
 15550  0006AA  6FAF               	movwf	_assembly_step& (0+255),b
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;main.c: 773: prev_state = state;
 15554  0006AC  C0B1  F188         	movff	_state,_prev_state
 15555  0006B0  C0B2  F189         	movff	_state+1,_prev_state+1
 15556                           
 15557                           ;main.c: 774: state = 1;
 15558  0006B4  0E00               	movlw	0
 15559  0006B6  6FB2               	movwf	(_state+1)& (0+255),b
 15560  0006B8  0E01               	movlw	1
 15561  0006BA  6FB1               	movwf	_state& (0+255),b
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;main.c: 775: lcdInst(0xC0);;
 15565  0006BC  0EC0               	movlw	192
 15566  0006BE  EC09  F031         	call	i2_lcdInst
 15567                           
 15568                           ;main.c: 776: putch(keys[keypress]);
 15569  0006C2  5040               	movf	interruptHandler@keypress,w,c
 15570  0006C4  0D01               	mullw	1
 15571  0006C6  0E53               	movlw	low _keys
 15572  0006C8  24F3               	addwf	prodl,w,c
 15573  0006CA  6EF6               	movwf	tblptrl,c
 15574  0006CC  0EFC               	movlw	high _keys
 15575  0006CE  20F4               	addwfc	prodh,w,c
 15576  0006D0  6EF7               	movwf	tblptrh,c
 15577  0006D2                     	if	1	;There are 3 active tblptr bytes
 15578  0006D2  6AF8               	clrf	tblptru,c
 15579  0006D4  0E00               	movlw	low (__mediumconst shr (0+16))
 15580  0006D6  22F8               	addwfc	tblptru,f,c
 15581  0006D8                     	endif
 15582  0006D8  0008               	tblrd		*
 15583  0006DA  50F5               	movf	tablat,w,c
 15584  0006DC  ECFF  F030         	call	i2_putch
 15585                           
 15586                           ;main.c: 778: }
 15587  0006E0  D0A4               	goto	i2l589
 15588  0006E2                     i2l580:
 15589                           
 15590                           ;main.c: 779: else if(temp == '5'){
 15591  0006E2  0E35               	movlw	53
 15592  0006E4  1841               	xorwf	interruptHandler@temp,w,c
 15593  0006E6  A4D8               	btfss	status,2,c
 15594  0006E8  D020               	goto	i2l582
 15595                           
 15596                           ;main.c: 780: assembly_step = 5;
 15597  0006EA  0E00               	movlw	0
 15598  0006EC  0100               	movlb	0	; () banked
 15599  0006EE  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15600  0006F0  0E05               	movlw	5
 15601  0006F2  6FAF               	movwf	_assembly_step& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;main.c: 781: prev_state = state;
 15605  0006F4  C0B1  F188         	movff	_state,_prev_state
 15606  0006F8  C0B2  F189         	movff	_state+1,_prev_state+1
 15607                           
 15608                           ;main.c: 782: state = 1;
 15609  0006FC  0E00               	movlw	0
 15610  0006FE  6FB2               	movwf	(_state+1)& (0+255),b
 15611  000700  0E01               	movlw	1
 15612  000702  6FB1               	movwf	_state& (0+255),b
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;main.c: 783: lcdInst(0xC0);;
 15616  000704  0EC0               	movlw	192
 15617  000706  EC09  F031         	call	i2_lcdInst
 15618                           
 15619                           ;main.c: 784: putch(keys[keypress]);
 15620  00070A  5040               	movf	interruptHandler@keypress,w,c
 15621  00070C  0D01               	mullw	1
 15622  00070E  0E53               	movlw	low _keys
 15623  000710  24F3               	addwf	prodl,w,c
 15624  000712  6EF6               	movwf	tblptrl,c
 15625  000714  0EFC               	movlw	high _keys
 15626  000716  20F4               	addwfc	prodh,w,c
 15627  000718  6EF7               	movwf	tblptrh,c
 15628  00071A                     	if	1	;There are 3 active tblptr bytes
 15629  00071A  6AF8               	clrf	tblptru,c
 15630  00071C  0E00               	movlw	low (__mediumconst shr (0+16))
 15631  00071E  22F8               	addwfc	tblptru,f,c
 15632  000720                     	endif
 15633  000720  0008               	tblrd		*
 15634  000722  50F5               	movf	tablat,w,c
 15635  000724  ECFF  F030         	call	i2_putch
 15636                           
 15637                           ;main.c: 786: }
 15638  000728  D080               	goto	i2l589
 15639  00072A                     i2l582:
 15640                           
 15641                           ;main.c: 787: else if (temp == '6') {
 15642  00072A  0E36               	movlw	54
 15643  00072C  1841               	xorwf	interruptHandler@temp,w,c
 15644  00072E  A4D8               	btfss	status,2,c
 15645  000730  D020               	goto	i2l584
 15646                           
 15647                           ;main.c: 788: assembly_step = 6;
 15648  000732  0E00               	movlw	0
 15649  000734  0100               	movlb	0	; () banked
 15650  000736  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15651  000738  0E06               	movlw	6
 15652  00073A  6FAF               	movwf	_assembly_step& (0+255),b
 15653                           
 15654                           ; BSR set to: 0
 15655                           ;main.c: 789: prev_state = state;
 15656  00073C  C0B1  F188         	movff	_state,_prev_state
 15657  000740  C0B2  F189         	movff	_state+1,_prev_state+1
 15658                           
 15659                           ;main.c: 790: state = 1;
 15660  000744  0E00               	movlw	0
 15661  000746  6FB2               	movwf	(_state+1)& (0+255),b
 15662  000748  0E01               	movlw	1
 15663  00074A  6FB1               	movwf	_state& (0+255),b
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;main.c: 791: lcdInst(0xC0);;
 15667  00074C  0EC0               	movlw	192
 15668  00074E  EC09  F031         	call	i2_lcdInst
 15669                           
 15670                           ;main.c: 792: putch(keys[keypress]);
 15671  000752  5040               	movf	interruptHandler@keypress,w,c
 15672  000754  0D01               	mullw	1
 15673  000756  0E53               	movlw	low _keys
 15674  000758  24F3               	addwf	prodl,w,c
 15675  00075A  6EF6               	movwf	tblptrl,c
 15676  00075C  0EFC               	movlw	high _keys
 15677  00075E  20F4               	addwfc	prodh,w,c
 15678  000760  6EF7               	movwf	tblptrh,c
 15679  000762                     	if	1	;There are 3 active tblptr bytes
 15680  000762  6AF8               	clrf	tblptru,c
 15681  000764  0E00               	movlw	low (__mediumconst shr (0+16))
 15682  000766  22F8               	addwfc	tblptru,f,c
 15683  000768                     	endif
 15684  000768  0008               	tblrd		*
 15685  00076A  50F5               	movf	tablat,w,c
 15686  00076C  ECFF  F030         	call	i2_putch
 15687                           
 15688                           ;main.c: 793: }
 15689  000770  D05C               	goto	i2l589
 15690  000772                     i2l584:
 15691                           
 15692                           ;main.c: 794: else if (temp == '7'){
 15693  000772  0E37               	movlw	55
 15694  000774  1841               	xorwf	interruptHandler@temp,w,c
 15695  000776  A4D8               	btfss	status,2,c
 15696  000778  D020               	goto	i2l586
 15697                           
 15698                           ;main.c: 795: assembly_step = 7;
 15699  00077A  0E00               	movlw	0
 15700  00077C  0100               	movlb	0	; () banked
 15701  00077E  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15702  000780  0E07               	movlw	7
 15703  000782  6FAF               	movwf	_assembly_step& (0+255),b
 15704                           
 15705                           ; BSR set to: 0
 15706                           ;main.c: 796: prev_state = state;
 15707  000784  C0B1  F188         	movff	_state,_prev_state
 15708  000788  C0B2  F189         	movff	_state+1,_prev_state+1
 15709                           
 15710                           ;main.c: 797: state = 1;
 15711  00078C  0E00               	movlw	0
 15712  00078E  6FB2               	movwf	(_state+1)& (0+255),b
 15713  000790  0E01               	movlw	1
 15714  000792  6FB1               	movwf	_state& (0+255),b
 15715                           
 15716                           ; BSR set to: 0
 15717                           ;main.c: 798: lcdInst(0xC0);;
 15718  000794  0EC0               	movlw	192
 15719  000796  EC09  F031         	call	i2_lcdInst
 15720                           
 15721                           ;main.c: 799: putch(keys[keypress]);
 15722  00079A  5040               	movf	interruptHandler@keypress,w,c
 15723  00079C  0D01               	mullw	1
 15724  00079E  0E53               	movlw	low _keys
 15725  0007A0  24F3               	addwf	prodl,w,c
 15726  0007A2  6EF6               	movwf	tblptrl,c
 15727  0007A4  0EFC               	movlw	high _keys
 15728  0007A6  20F4               	addwfc	prodh,w,c
 15729  0007A8  6EF7               	movwf	tblptrh,c
 15730  0007AA                     	if	1	;There are 3 active tblptr bytes
 15731  0007AA  6AF8               	clrf	tblptru,c
 15732  0007AC  0E00               	movlw	low (__mediumconst shr (0+16))
 15733  0007AE  22F8               	addwfc	tblptru,f,c
 15734  0007B0                     	endif
 15735  0007B0  0008               	tblrd		*
 15736  0007B2  50F5               	movf	tablat,w,c
 15737  0007B4  ECFF  F030         	call	i2_putch
 15738                           
 15739                           ;main.c: 801: }
 15740  0007B8  D038               	goto	i2l589
 15741  0007BA                     i2l586:
 15742                           
 15743                           ;main.c: 802: else if (temp == '8'){
 15744  0007BA  0E38               	movlw	56
 15745  0007BC  1841               	xorwf	interruptHandler@temp,w,c
 15746  0007BE  A4D8               	btfss	status,2,c
 15747  0007C0  D020               	goto	i2l588
 15748                           
 15749                           ;main.c: 803: assembly_step = 8;
 15750  0007C2  0E00               	movlw	0
 15751  0007C4  0100               	movlb	0	; () banked
 15752  0007C6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15753  0007C8  0E08               	movlw	8
 15754  0007CA  6FAF               	movwf	_assembly_step& (0+255),b
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;main.c: 804: prev_state = state;
 15758  0007CC  C0B1  F188         	movff	_state,_prev_state
 15759  0007D0  C0B2  F189         	movff	_state+1,_prev_state+1
 15760                           
 15761                           ;main.c: 805: state = 1;
 15762  0007D4  0E00               	movlw	0
 15763  0007D6  6FB2               	movwf	(_state+1)& (0+255),b
 15764  0007D8  0E01               	movlw	1
 15765  0007DA  6FB1               	movwf	_state& (0+255),b
 15766                           
 15767                           ; BSR set to: 0
 15768                           ;main.c: 806: lcdInst(0xC0);;
 15769  0007DC  0EC0               	movlw	192
 15770  0007DE  EC09  F031         	call	i2_lcdInst
 15771                           
 15772                           ;main.c: 807: putch(keys[keypress]);
 15773  0007E2  5040               	movf	interruptHandler@keypress,w,c
 15774  0007E4  0D01               	mullw	1
 15775  0007E6  0E53               	movlw	low _keys
 15776  0007E8  24F3               	addwf	prodl,w,c
 15777  0007EA  6EF6               	movwf	tblptrl,c
 15778  0007EC  0EFC               	movlw	high _keys
 15779  0007EE  20F4               	addwfc	prodh,w,c
 15780  0007F0  6EF7               	movwf	tblptrh,c
 15781  0007F2                     	if	1	;There are 3 active tblptr bytes
 15782  0007F2  6AF8               	clrf	tblptru,c
 15783  0007F4  0E00               	movlw	low (__mediumconst shr (0+16))
 15784  0007F6  22F8               	addwfc	tblptru,f,c
 15785  0007F8                     	endif
 15786  0007F8  0008               	tblrd		*
 15787  0007FA  50F5               	movf	tablat,w,c
 15788  0007FC  ECFF  F030         	call	i2_putch
 15789                           
 15790                           ;main.c: 809: }
 15791  000800  D014               	goto	i2l589
 15792  000802                     i2l588:
 15793                           
 15794                           ;main.c: 810: else{
 15795                           ;main.c: 816: initLCD();
 15796  000802  EC1F  F02F         	call	i2_initLCD	;wreg free
 15797                           
 15798                           ;main.c: 817: printf("Wrong number! ");
 15799  000806  0E61               	movlw	low STR_45
 15800  000808  6E0D               	movwf	i2printf@f,c
 15801  00080A  0EFE               	movlw	high STR_45
 15802  00080C  6E0E               	movwf	i2printf@f+1,c
 15803  00080E  EC4E  F01B         	call	i2_printf	;wreg free
 15804                           
 15805                           ;main.c: 818: _delay((unsigned long)((500)*(32000000/4000.0)));
 15806  000812  0E15               	movlw	21
 15807  000814  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15808  000816  0E4B               	movlw	75
 15809  000818  6E27               	movwf	??_interruptHandler& (0+255),c
 15810  00081A  0EBE               	movlw	190
 15811  00081C                     i2u757_47:
 15812  00081C  2EE8               	decfsz	wreg,f,c
 15813  00081E  D7FE               	bra	i2u757_47
 15814  000820  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15815  000822  D7FC               	bra	i2u757_47
 15816  000824  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15817  000826  D7FA               	bra	i2u757_47
 15818  000828  D000               	nop2	
 15819  00082A                     i2l589:
 15820                           
 15821                           ;main.c: 820: }
 15822                           ;main.c: 826: generate_compartment_array(assembly_step);
 15823  00082A  C0AF  F001         	movff	_assembly_step,i2generate_compartment_array@step
 15824  00082E  C0B0  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 15825  000832  EC40  F024         	call	i2_generate_compartment_array	;wreg free
 15826  000836  D2EC               	goto	i2l8197
 15827  000838                     i2l579:
 15828                           
 15829                           ;main.c: 833: }
 15830                           ;main.c: 841: if(state == 1){
 15831  000838  0100               	movlb	0	; () banked
 15832  00083A  05B1               	decf	_state& (0+255),w,b
 15833  00083C  11B2               	iorwf	(_state+1)& (0+255),w,b
 15834  00083E  A4D8               	btfss	status,2,c
 15835  000840  D18D               	goto	i2l590
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;main.c: 846: if (temp == 'A'){
 15839  000842  0E41               	movlw	65
 15840  000844  1841               	xorwf	interruptHandler@temp,w,c
 15841  000846  A4D8               	btfss	status,2,c
 15842  000848  D01C               	goto	i2l591
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;main.c: 847: lcdInst(0xC0);;
 15846  00084A  0EC0               	movlw	192
 15847  00084C  EC09  F031         	call	i2_lcdInst
 15848                           
 15849                           ;main.c: 848: putch('B');
 15850  000850  0E42               	movlw	66
 15851  000852  ECFF  F030         	call	i2_putch
 15852                           
 15853                           ;main.c: 849: strcpy(temp_set,"B");
 15854  000856  0EE4               	movlw	low _temp_set
 15855  000858  6E07               	movwf	strcpy@to,c
 15856  00085A  0E01               	movlw	high _temp_set
 15857  00085C  6E08               	movwf	strcpy@to+1,c
 15858  00085E  0EFD               	movlw	low STR_46
 15859  000860  6E09               	movwf	strcpy@from,c
 15860  000862  0EFF               	movlw	high STR_46
 15861  000864  6E0A               	movwf	strcpy@from+1,c
 15862  000866  EC6A  F02F         	call	_strcpy	;wreg free
 15863                           
 15864                           ;main.c: 850: strcat(current_set,temp_set);
 15865  00086A  0EBE               	movlw	low _current_set
 15866  00086C  6E01               	movwf	strcat@to,c
 15867  00086E  0E00               	movlw	high _current_set
 15868  000870  6E02               	movwf	strcat@to+1,c
 15869  000872  0EE4               	movlw	low _temp_set
 15870  000874  6E03               	movwf	strcat@from,c
 15871  000876  0E01               	movlw	high _temp_set
 15872  000878  6E04               	movwf	strcat@from+1,c
 15873  00087A  ECD0  F02F         	call	_strcat	;wreg free
 15874                           
 15875                           ;main.c: 851: counter++;
 15876  00087E  4A5C               	infsnz	_counter,f,c
 15877  000880  2A5D               	incf	_counter+1,f,c
 15878  000882                     i2l591:
 15879                           
 15880                           ;main.c: 852: }
 15881                           ;main.c: 854: if(temp == 'B'){
 15882  000882  0E42               	movlw	66
 15883  000884  1841               	xorwf	interruptHandler@temp,w,c
 15884  000886  A4D8               	btfss	status,2,c
 15885  000888  D01C               	goto	i2l592
 15886                           
 15887                           ;main.c: 855: lcdInst(0xC0);;
 15888  00088A  0EC0               	movlw	192
 15889  00088C  EC09  F031         	call	i2_lcdInst
 15890                           
 15891                           ;main.c: 856: putch('N');
 15892  000890  0E4E               	movlw	78
 15893  000892  ECFF  F030         	call	i2_putch
 15894                           
 15895                           ;main.c: 857: strcpy(temp_set,"N");
 15896  000896  0EE4               	movlw	low _temp_set
 15897  000898  6E07               	movwf	strcpy@to,c
 15898  00089A  0E01               	movlw	high _temp_set
 15899  00089C  6E08               	movwf	strcpy@to+1,c
 15900  00089E  0EEA               	movlw	low (STR_85+2)
 15901  0008A0  6E09               	movwf	strcpy@from,c
 15902  0008A2  0EFF               	movlw	high (STR_85+2)
 15903  0008A4  6E0A               	movwf	strcpy@from+1,c
 15904  0008A6  EC6A  F02F         	call	_strcpy	;wreg free
 15905                           
 15906                           ;main.c: 858: strcat(current_set,temp_set);
 15907  0008AA  0EBE               	movlw	low _current_set
 15908  0008AC  6E01               	movwf	strcat@to,c
 15909  0008AE  0E00               	movlw	high _current_set
 15910  0008B0  6E02               	movwf	strcat@to+1,c
 15911  0008B2  0EE4               	movlw	low _temp_set
 15912  0008B4  6E03               	movwf	strcat@from,c
 15913  0008B6  0E01               	movlw	high _temp_set
 15914  0008B8  6E04               	movwf	strcat@from+1,c
 15915  0008BA  ECD0  F02F         	call	_strcat	;wreg free
 15916                           
 15917                           ;main.c: 859: counter++;
 15918  0008BE  4A5C               	infsnz	_counter,f,c
 15919  0008C0  2A5D               	incf	_counter+1,f,c
 15920  0008C2                     i2l592:
 15921                           
 15922                           ;main.c: 860: }
 15923                           ;main.c: 862: if(temp == 'C'){
 15924  0008C2  0E43               	movlw	67
 15925  0008C4  1841               	xorwf	interruptHandler@temp,w,c
 15926  0008C6  A4D8               	btfss	status,2,c
 15927  0008C8  D01C               	goto	i2l593
 15928                           
 15929                           ;main.c: 863: lcdInst(0xC0);;
 15930  0008CA  0EC0               	movlw	192
 15931  0008CC  EC09  F031         	call	i2_lcdInst
 15932                           
 15933                           ;main.c: 864: putch('S');
 15934  0008D0  0E53               	movlw	83
 15935  0008D2  ECFF  F030         	call	i2_putch
 15936                           
 15937                           ;main.c: 866: strcpy(temp_set,"S");
 15938  0008D6  0EE4               	movlw	low _temp_set
 15939  0008D8  6E07               	movwf	strcpy@to,c
 15940  0008DA  0E01               	movlw	high _temp_set
 15941  0008DC  6E08               	movwf	strcpy@to+1,c
 15942  0008DE  0EEE               	movlw	low (STR_86+2)
 15943  0008E0  6E09               	movwf	strcpy@from,c
 15944  0008E2  0EFF               	movlw	high (STR_86+2)
 15945  0008E4  6E0A               	movwf	strcpy@from+1,c
 15946  0008E6  EC6A  F02F         	call	_strcpy	;wreg free
 15947                           
 15948                           ;main.c: 867: strcat(current_set,temp_set);
 15949  0008EA  0EBE               	movlw	low _current_set
 15950  0008EC  6E01               	movwf	strcat@to,c
 15951  0008EE  0E00               	movlw	high _current_set
 15952  0008F0  6E02               	movwf	strcat@to+1,c
 15953  0008F2  0EE4               	movlw	low _temp_set
 15954  0008F4  6E03               	movwf	strcat@from,c
 15955  0008F6  0E01               	movlw	high _temp_set
 15956  0008F8  6E04               	movwf	strcat@from+1,c
 15957  0008FA  ECD0  F02F         	call	_strcat	;wreg free
 15958                           
 15959                           ;main.c: 868: counter++;
 15960  0008FE  4A5C               	infsnz	_counter,f,c
 15961  000900  2A5D               	incf	_counter+1,f,c
 15962  000902                     i2l593:
 15963                           
 15964                           ;main.c: 869: }
 15965                           ;main.c: 870: if (temp == 'D'){
 15966  000902  0E44               	movlw	68
 15967  000904  1841               	xorwf	interruptHandler@temp,w,c
 15968  000906  A4D8               	btfss	status,2,c
 15969  000908  D01C               	goto	i2l594
 15970                           
 15971                           ;main.c: 871: lcdInst(0xC0);;
 15972  00090A  0EC0               	movlw	192
 15973  00090C  EC09  F031         	call	i2_lcdInst
 15974                           
 15975                           ;main.c: 872: putch('W');
 15976  000910  0E57               	movlw	87
 15977  000912  ECFF  F030         	call	i2_putch
 15978                           
 15979                           ;main.c: 874: strcpy(temp_set,"W");
 15980  000916  0EE4               	movlw	low _temp_set
 15981  000918  6E07               	movwf	strcpy@to,c
 15982  00091A  0E01               	movlw	high _temp_set
 15983  00091C  6E08               	movwf	strcpy@to+1,c
 15984  00091E  0EF2               	movlw	low (STR_87+2)
 15985  000920  6E09               	movwf	strcpy@from,c
 15986  000922  0EFF               	movlw	high (STR_87+2)
 15987  000924  6E0A               	movwf	strcpy@from+1,c
 15988  000926  EC6A  F02F         	call	_strcpy	;wreg free
 15989                           
 15990                           ;main.c: 875: strcat(current_set,temp_set);
 15991  00092A  0EBE               	movlw	low _current_set
 15992  00092C  6E01               	movwf	strcat@to,c
 15993  00092E  0E00               	movlw	high _current_set
 15994  000930  6E02               	movwf	strcat@to+1,c
 15995  000932  0EE4               	movlw	low _temp_set
 15996  000934  6E03               	movwf	strcat@from,c
 15997  000936  0E01               	movlw	high _temp_set
 15998  000938  6E04               	movwf	strcat@from+1,c
 15999  00093A  ECD0  F02F         	call	_strcat	;wreg free
 16000                           
 16001                           ;main.c: 877: counter++;
 16002  00093E  4A5C               	infsnz	_counter,f,c
 16003  000940  2A5D               	incf	_counter+1,f,c
 16004  000942                     i2l594:
 16005                           
 16006                           ;main.c: 878: }
 16007                           ;main.c: 880: if (keys[keypress] == '*'){
 16008  000942  5040               	movf	interruptHandler@keypress,w,c
 16009  000944  0D01               	mullw	1
 16010  000946  0E53               	movlw	low _keys
 16011  000948  24F3               	addwf	prodl,w,c
 16012  00094A  6EF6               	movwf	tblptrl,c
 16013  00094C  0EFC               	movlw	high _keys
 16014  00094E  20F4               	addwfc	prodh,w,c
 16015  000950  6EF7               	movwf	tblptrh,c
 16016  000952                     	if	1	;There are 3 active tblptr bytes
 16017  000952  6AF8               	clrf	tblptru,c
 16018  000954  0E00               	movlw	low (__mediumconst shr (0+16))
 16019  000956  22F8               	addwfc	tblptru,f,c
 16020  000958                     	endif
 16021  000958  0008               	tblrd		*
 16022  00095A  50F5               	movf	tablat,w,c
 16023  00095C  0A2A               	xorlw	42
 16024  00095E  A4D8               	btfss	status,2,c
 16025  000960  D0D2               	goto	i2l595
 16026                           
 16027                           ;main.c: 883: _delay((unsigned long)((80)*(32000000/4000.0)));
 16028  000962  0E04               	movlw	4
 16029  000964  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16030  000966  0E40               	movlw	64
 16031  000968  6E27               	movwf	??_interruptHandler& (0+255),c
 16032  00096A  0E26               	movlw	38
 16033  00096C                     i2u758_47:
 16034  00096C  2EE8               	decfsz	wreg,f,c
 16035  00096E  D7FE               	bra	i2u758_47
 16036  000970  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16037  000972  D7FC               	bra	i2u758_47
 16038  000974  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16039  000976  D7FA               	bra	i2u758_47
 16040  000978  D000               	nop2	
 16041                           
 16042                           ;main.c: 884: counter ++;
 16043  00097A  4A5C               	infsnz	_counter,f,c
 16044  00097C  2A5D               	incf	_counter+1,f,c
 16045                           
 16046                           ;main.c: 885: for (int i=0;i<20;i++){
 16047  00097E  0E00               	movlw	0
 16048  000980  6E3F               	movwf	interruptHandler@i+1,c
 16049  000982  0E00               	movlw	0
 16050  000984  6E3E               	movwf	interruptHandler@i,c
 16051  000986  BE3F               	btfsc	interruptHandler@i+1,7,c
 16052  000988  D008               	goto	i2l596
 16053  00098A  503F               	movf	interruptHandler@i+1,w,c
 16054  00098C  E105               	bnz	i2u595_40
 16055  00098E  0E14               	movlw	20
 16056  000990  5C3E               	subwf	interruptHandler@i,w,c
 16057  000992  B0D8               	btfsc	status,0,c
 16058  000994  D07E               	goto	i2u597_40
 16059  000996  D001               	goto	i2l596
 16060  000998                     i2u595_40:
 16061  000998  D07C               	goto	i2u597_40
 16062  00099A                     i2l596:
 16063                           
 16064                           ;main.c: 886: if (strncmp(current_set,strs[i],4) == 0){
 16065  00099A  0EBE               	movlw	low _current_set
 16066  00099C  6E07               	movwf	strncmp@s1,c
 16067  00099E  0E00               	movlw	high _current_set
 16068  0009A0  6E08               	movwf	strncmp@s1+1,c
 16069  0009A2  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 16070  0009A6  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 16071  0009AA  0E00               	movlw	0
 16072  0009AC  6E04               	movwf	i2___wmul@multiplicand+1,c
 16073  0009AE  0E05               	movlw	5
 16074  0009B0  6E03               	movwf	i2___wmul@multiplicand,c
 16075  0009B2  EC8E  F030         	call	i2___wmul	;wreg free
 16076  0009B6  0EF2               	movlw	low _strs
 16077  0009B8  2401               	addwf	?i2___wmul,w,c
 16078  0009BA  6E09               	movwf	strncmp@s2,c
 16079  0009BC  0EFC               	movlw	high _strs
 16080  0009BE  2002               	addwfc	?i2___wmul+1,w,c
 16081  0009C0  6E0A               	movwf	strncmp@s2+1,c
 16082  0009C2  0E00               	movlw	0
 16083  0009C4  6E0C               	movwf	strncmp@len+1,c
 16084  0009C6  0E04               	movlw	4
 16085  0009C8  6E0B               	movwf	strncmp@len,c
 16086  0009CA  ECA7  F02C         	call	_strncmp	;wreg free
 16087  0009CE  5007               	movf	?_strncmp,w,c
 16088  0009D0  1008               	iorwf	?_strncmp+1,w,c
 16089  0009D2  A4D8               	btfss	status,2,c
 16090  0009D4  D057               	goto	i2l598
 16091                           
 16092                           ;main.c: 887: strcpy(final_set[counter_step],current_set);
 16093  0009D6  C05A  F001         	movff	_counter_step,i2___wmul@multiplier
 16094  0009DA  C05B  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 16095  0009DE  0E00               	movlw	0
 16096  0009E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 16097  0009E2  0E05               	movlw	5
 16098  0009E4  6E03               	movwf	i2___wmul@multiplicand,c
 16099  0009E6  EC8E  F030         	call	i2___wmul	;wreg free
 16100  0009EA  0EBC               	movlw	low _final_set
 16101  0009EC  2401               	addwf	?i2___wmul,w,c
 16102  0009EE  6E07               	movwf	strcpy@to,c
 16103  0009F0  0E01               	movlw	high _final_set
 16104  0009F2  2002               	addwfc	?i2___wmul+1,w,c
 16105  0009F4  6E08               	movwf	strcpy@to+1,c
 16106  0009F6  0EBE               	movlw	low _current_set
 16107  0009F8  6E09               	movwf	strcpy@from,c
 16108  0009FA  0E00               	movlw	high _current_set
 16109  0009FC  6E0A               	movwf	strcpy@from+1,c
 16110  0009FE  EC6A  F02F         	call	_strcpy	;wreg free
 16111                           
 16112                           ;main.c: 888: strcpy(current_set2,current_set);
 16113  000A02  0E70               	movlw	low _current_set2
 16114  000A04  6E07               	movwf	strcpy@to,c
 16115  000A06  0E00               	movlw	high _current_set2
 16116  000A08  6E08               	movwf	strcpy@to+1,c
 16117  000A0A  0EBE               	movlw	low _current_set
 16118  000A0C  6E09               	movwf	strcpy@from,c
 16119  000A0E  0E00               	movlw	high _current_set
 16120  000A10  6E0A               	movwf	strcpy@from+1,c
 16121  000A12  EC6A  F02F         	call	_strcpy	;wreg free
 16122                           
 16123                           ;main.c: 891: valid = 1;
 16124  000A16  0E00               	movlw	0
 16125  000A18  0101               	movlb	1	; () banked
 16126  000A1A  6F8D               	movwf	(_valid+1)& (0+255),b
 16127  000A1C  0E01               	movlw	1
 16128  000A1E  6F8C               	movwf	_valid& (0+255),b
 16129                           
 16130                           ; BSR set to: 1
 16131                           ;main.c: 892: state = 2;
 16132  000A20  0E00               	movlw	0
 16133  000A22  0100               	movlb	0	; () banked
 16134  000A24  6FB2               	movwf	(_state+1)& (0+255),b
 16135  000A26  0E02               	movlw	2
 16136  000A28  6FB1               	movwf	_state& (0+255),b
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;main.c: 894: initLCD();
 16140  000A2A  EC1F  F02F         	call	i2_initLCD	;wreg free
 16141                           
 16142                           ;main.c: 895: printf("correct!");
 16143  000A2E  0E6B               	movlw	low STR_50
 16144  000A30  6E0D               	movwf	i2printf@f,c
 16145  000A32  0EFF               	movlw	high STR_50
 16146  000A34  6E0E               	movwf	i2printf@f+1,c
 16147  000A36  EC4E  F01B         	call	i2_printf	;wreg free
 16148                           
 16149                           ;main.c: 896: _delay((unsigned long)((100)*(32000000/4000.0)));
 16150  000A3A  0E05               	movlw	5
 16151  000A3C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16152  000A3E  0E0F               	movlw	15
 16153  000A40  6E27               	movwf	??_interruptHandler& (0+255),c
 16154  000A42  0EF1               	movlw	241
 16155  000A44                     i2u759_47:
 16156  000A44  2EE8               	decfsz	wreg,f,c
 16157  000A46  D7FE               	bra	i2u759_47
 16158  000A48  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16159  000A4A  D7FC               	bra	i2u759_47
 16160  000A4C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16161  000A4E  D7FA               	bra	i2u759_47
 16162  000A50  F000               	nop	
 16163                           
 16164                           ;main.c: 898: printf("%s",current_set);
 16165  000A52  0EF8               	movlw	low STR_5
 16166  000A54  6E0D               	movwf	i2printf@f,c
 16167  000A56  0EFF               	movlw	high STR_5
 16168  000A58  6E0E               	movwf	i2printf@f+1,c
 16169  000A5A  0EBE               	movlw	low _current_set
 16170  000A5C  6E0F               	movwf	?i2_printf+2,c
 16171  000A5E  0E00               	movlw	high _current_set
 16172  000A60  6E10               	movwf	?i2_printf+3,c
 16173  000A62  EC4E  F01B         	call	i2_printf	;wreg free
 16174                           
 16175                           ;main.c: 900: strcpy(current_set,"");
 16176  000A66  0EBE               	movlw	low _current_set
 16177  000A68  6E07               	movwf	strcpy@to,c
 16178  000A6A  0E00               	movlw	high _current_set
 16179  000A6C  6E08               	movwf	strcpy@to+1,c
 16180  000A6E  0E6F               	movlw	low (STR_45+14)
 16181  000A70  6E09               	movwf	strcpy@from,c
 16182  000A72  0EFE               	movlw	high (STR_45+14)
 16183  000A74  6E0A               	movwf	strcpy@from+1,c
 16184  000A76  EC6A  F02F         	call	_strcpy	;wreg free
 16185                           
 16186                           ;main.c: 901: counter = 0;
 16187  000A7A  0E00               	movlw	0
 16188  000A7C  6E5D               	movwf	_counter+1,c
 16189  000A7E  0E00               	movlw	0
 16190  000A80  6E5C               	movwf	_counter,c
 16191                           
 16192                           ;main.c: 902: break;
 16193  000A82  D007               	goto	i2u597_40
 16194  000A84                     i2l598:
 16195  000A84  4A3E               	infsnz	interruptHandler@i,f,c
 16196  000A86  2A3F               	incf	interruptHandler@i+1,f,c
 16197  000A88  BE3F               	btfsc	interruptHandler@i+1,7,c
 16198  000A8A  D787               	goto	i2l596
 16199  000A8C  503F               	movf	interruptHandler@i+1,w,c
 16200  000A8E  E101               	bnz	i2l8087
 16201  000A90  D77E               	goto	L10
 16202  000A92                     i2u597_40:
 16203  000A92                     i2l8087:
 16204                           
 16205                           ;main.c: 904: }
 16206                           ;main.c: 905: }
 16207                           ;main.c: 906: if (valid != 1){
 16208  000A92  0101               	movlb	1	; () banked
 16209  000A94  058C               	decf	_valid& (0+255),w,b
 16210  000A96  118D               	iorwf	(_valid+1)& (0+255),w,b
 16211  000A98  B4D8               	btfsc	status,2,c
 16212  000A9A  D031               	goto	i2l599
 16213                           
 16214                           ; BSR set to: 1
 16215                           ;main.c: 908: initLCD();
 16216  000A9C  EC1F  F02F         	call	i2_initLCD	;wreg free
 16217                           
 16218                           ;main.c: 909: printf("wrong set!");
 16219  000AA0  0E56               	movlw	low STR_53
 16220  000AA2  6E0D               	movwf	i2printf@f,c
 16221  000AA4  0EFF               	movlw	high STR_53
 16222  000AA6  6E0E               	movwf	i2printf@f+1,c
 16223  000AA8  EC4E  F01B         	call	i2_printf	;wreg free
 16224                           
 16225                           ;main.c: 910: printf("%s",current_set);
 16226  000AAC  0EF8               	movlw	low STR_5
 16227  000AAE  6E0D               	movwf	i2printf@f,c
 16228  000AB0  0EFF               	movlw	high STR_5
 16229  000AB2  6E0E               	movwf	i2printf@f+1,c
 16230  000AB4  0EBE               	movlw	low _current_set
 16231  000AB6  6E0F               	movwf	?i2_printf+2,c
 16232  000AB8  0E00               	movlw	high _current_set
 16233  000ABA  6E10               	movwf	?i2_printf+3,c
 16234  000ABC  EC4E  F01B         	call	i2_printf	;wreg free
 16235                           
 16236                           ;main.c: 911: strcpy(current_set,"");
 16237  000AC0  0EBE               	movlw	low _current_set
 16238  000AC2  6E07               	movwf	strcpy@to,c
 16239  000AC4  0E00               	movlw	high _current_set
 16240  000AC6  6E08               	movwf	strcpy@to+1,c
 16241  000AC8  0E6F               	movlw	low (STR_45+14)
 16242  000ACA  6E09               	movwf	strcpy@from,c
 16243  000ACC  0EFE               	movlw	high (STR_45+14)
 16244  000ACE  6E0A               	movwf	strcpy@from+1,c
 16245  000AD0  EC6A  F02F         	call	_strcpy	;wreg free
 16246                           
 16247                           ;main.c: 912: _delay((unsigned long)((100)*(32000000/4000.0)));
 16248  000AD4  0E05               	movlw	5
 16249  000AD6  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16250  000AD8  0E0F               	movlw	15
 16251  000ADA  6E27               	movwf	??_interruptHandler& (0+255),c
 16252  000ADC  0EF1               	movlw	241
 16253  000ADE                     i2u760_47:
 16254  000ADE  2EE8               	decfsz	wreg,f,c
 16255  000AE0  D7FE               	bra	i2u760_47
 16256  000AE2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16257  000AE4  D7FC               	bra	i2u760_47
 16258  000AE6  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16259  000AE8  D7FA               	bra	i2u760_47
 16260  000AEA  F000               	nop	
 16261                           
 16262                           ;main.c: 913: counter = 0;
 16263  000AEC  0E00               	movlw	0
 16264  000AEE  6E5D               	movwf	_counter+1,c
 16265  000AF0  0E00               	movlw	0
 16266  000AF2  6E5C               	movwf	_counter,c
 16267                           
 16268                           ;main.c: 914: valid = 0;
 16269  000AF4  0E00               	movlw	0
 16270  000AF6  0101               	movlb	1	; () banked
 16271  000AF8  6F8D               	movwf	(_valid+1)& (0+255),b
 16272  000AFA  0E00               	movlw	0
 16273  000AFC  6F8C               	movwf	_valid& (0+255),b
 16274  000AFE                     i2l599:
 16275                           
 16276                           ; BSR set to: 1
 16277                           ;main.c: 915: }
 16278                           ;main.c: 916: valid = 0;
 16279                           
 16280                           ; BSR set to: 1
 16281  000AFE  0E00               	movlw	0
 16282  000B00  6F8D               	movwf	(_valid+1)& (0+255),b
 16283  000B02  0E00               	movlw	0
 16284  000B04  6F8C               	movwf	_valid& (0+255),b
 16285  000B06                     i2l595:
 16286                           
 16287                           ;main.c: 918: }
 16288                           ;main.c: 921: if (counter >= 5){
 16289                           
 16290                           ; BSR set to: 1
 16291  000B06  BE5D               	btfsc	_counter+1,7,c
 16292  000B08  D183               	goto	i2l8197
 16293  000B0A  505D               	movf	_counter+1,w,c
 16294  000B0C  E104               	bnz	i2u599_40
 16295  000B0E  0E05               	movlw	5
 16296  000B10  5C5C               	subwf	_counter,w,c
 16297  000B12  A0D8               	btfss	status,0,c
 16298  000B14  D17D               	goto	i2l8197
 16299  000B16                     i2u599_40:
 16300                           
 16301                           ;main.c: 923: initLCD();
 16302  000B16  EC1F  F02F         	call	i2_initLCD	;wreg free
 16303                           
 16304                           ;main.c: 924: printf("wrong!");
 16305  000B1A  0E9E               	movlw	low STR_56
 16306  000B1C  6E0D               	movwf	i2printf@f,c
 16307  000B1E  0EFF               	movlw	high STR_56
 16308  000B20  6E0E               	movwf	i2printf@f+1,c
 16309  000B22  EC4E  F01B         	call	i2_printf	;wreg free
 16310                           
 16311                           ;main.c: 926: _delay((unsigned long)((100)*(32000000/4000.0)));
 16312  000B26  0E05               	movlw	5
 16313  000B28  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16314  000B2A  0E0F               	movlw	15
 16315  000B2C  6E27               	movwf	??_interruptHandler& (0+255),c
 16316  000B2E  0EF1               	movlw	241
 16317  000B30                     i2u761_47:
 16318  000B30  2EE8               	decfsz	wreg,f,c
 16319  000B32  D7FE               	bra	i2u761_47
 16320  000B34  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16321  000B36  D7FC               	bra	i2u761_47
 16322  000B38  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16323  000B3A  D7FA               	bra	i2u761_47
 16324  000B3C  F000               	nop	
 16325                           
 16326                           ;main.c: 928: strcpy(current_set,"");
 16327  000B3E  0EBE               	movlw	low _current_set
 16328  000B40  6E07               	movwf	strcpy@to,c
 16329  000B42  0E00               	movlw	high _current_set
 16330  000B44  6E08               	movwf	strcpy@to+1,c
 16331  000B46  0E6F               	movlw	low (STR_45+14)
 16332  000B48  6E09               	movwf	strcpy@from,c
 16333  000B4A  0EFE               	movlw	high (STR_45+14)
 16334  000B4C  6E0A               	movwf	strcpy@from+1,c
 16335  000B4E  EC6A  F02F         	call	_strcpy	;wreg free
 16336                           
 16337                           ;main.c: 931: counter = 0;
 16338  000B52  0E00               	movlw	0
 16339  000B54  6E5D               	movwf	_counter+1,c
 16340  000B56  0E00               	movlw	0
 16341  000B58  6E5C               	movwf	_counter,c
 16342  000B5A  D15A               	goto	i2l8197
 16343  000B5C                     i2l590:
 16344                           
 16345                           ;main.c: 936: }
 16346                           ;main.c: 941: if (state ==2){
 16347  000B5C  0E02               	movlw	2
 16348  000B5E  0100               	movlb	0	; () banked
 16349  000B60  19B1               	xorwf	_state& (0+255),w,b
 16350  000B62  11B2               	iorwf	(_state+1)& (0+255),w,b
 16351  000B64  A4D8               	btfss	status,2,c
 16352  000B66  D125               	goto	i2l617
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 942: counter = 0;
 16356  000B68  0E00               	movlw	0
 16357  000B6A  6E5D               	movwf	_counter+1,c
 16358  000B6C  0E00               	movlw	0
 16359  000B6E  6E5C               	movwf	_counter,c
 16360                           
 16361                           ; BSR set to: 0
 16362                           ;main.c: 944: lcdInst(0xC0);;
 16363  000B70  0EC0               	movlw	192
 16364  000B72  EC09  F031         	call	i2_lcdInst
 16365                           
 16366                           ;main.c: 945: putch(keys[keypress]);
 16367  000B76  5040               	movf	interruptHandler@keypress,w,c
 16368  000B78  0D01               	mullw	1
 16369  000B7A  0E53               	movlw	low _keys
 16370  000B7C  24F3               	addwf	prodl,w,c
 16371  000B7E  6EF6               	movwf	tblptrl,c
 16372  000B80  0EFC               	movlw	high _keys
 16373  000B82  20F4               	addwfc	prodh,w,c
 16374  000B84  6EF7               	movwf	tblptrh,c
 16375  000B86                     	if	1	;There are 3 active tblptr bytes
 16376  000B86  6AF8               	clrf	tblptru,c
 16377  000B88  0E00               	movlw	low (__mediumconst shr (0+16))
 16378  000B8A  22F8               	addwfc	tblptru,f,c
 16379  000B8C                     	endif
 16380  000B8C  0008               	tblrd		*
 16381  000B8E  50F5               	movf	tablat,w,c
 16382  000B90  ECFF  F030         	call	i2_putch
 16383                           
 16384                           ;main.c: 946: _delay((unsigned long)((100)*(32000000/4000.0)));
 16385  000B94  0E05               	movlw	5
 16386  000B96  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16387  000B98  0E0F               	movlw	15
 16388  000B9A  6E27               	movwf	??_interruptHandler& (0+255),c
 16389  000B9C  0EF1               	movlw	241
 16390  000B9E                     i2u762_47:
 16391  000B9E  2EE8               	decfsz	wreg,f,c
 16392  000BA0  D7FE               	bra	i2u762_47
 16393  000BA2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16394  000BA4  D7FC               	bra	i2u762_47
 16395  000BA6  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16396  000BA8  D7FA               	bra	i2u762_47
 16397  000BAA  F000               	nop	
 16398                           
 16399                           ;main.c: 947: printf("Processing...");
 16400  000BAC  0ECA               	movlw	low STR_58
 16401  000BAE  6E0D               	movwf	i2printf@f,c
 16402  000BB0  0EFE               	movlw	high STR_58
 16403  000BB2  6E0E               	movwf	i2printf@f+1,c
 16404  000BB4  EC4E  F01B         	call	i2_printf	;wreg free
 16405                           
 16406                           ;main.c: 949: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
 16407  000BB8  5040               	movf	interruptHandler@keypress,w,c
 16408  000BBA  0D01               	mullw	1
 16409  000BBC  0E53               	movlw	low _keys
 16410  000BBE  24F3               	addwf	prodl,w,c
 16411  000BC0  6EF6               	movwf	tblptrl,c
 16412  000BC2  0EFC               	movlw	high _keys
 16413  000BC4  20F4               	addwfc	prodh,w,c
 16414  000BC6  6EF7               	movwf	tblptrh,c
 16415  000BC8                     	if	1	;There are 3 active tblptr bytes
 16416  000BC8  6AF8               	clrf	tblptru,c
 16417  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
 16418  000BCC  22F8               	addwfc	tblptru,f,c
 16419  000BCE                     	endif
 16420  000BCE  0008               	tblrd		*
 16421  000BD0  50F5               	movf	tablat,w,c
 16422  000BD2  0A31               	xorlw	49
 16423  000BD4  B4D8               	btfsc	status,2,c
 16424  000BD6  D05B               	goto	i2l605
 16425  000BD8  5040               	movf	interruptHandler@keypress,w,c
 16426  000BDA  0D01               	mullw	1
 16427  000BDC  0E53               	movlw	low _keys
 16428  000BDE  24F3               	addwf	prodl,w,c
 16429  000BE0  6EF6               	movwf	tblptrl,c
 16430  000BE2  0EFC               	movlw	high _keys
 16431  000BE4  20F4               	addwfc	prodh,w,c
 16432  000BE6  6EF7               	movwf	tblptrh,c
 16433  000BE8                     	if	1	;There are 3 active tblptr bytes
 16434  000BE8  6AF8               	clrf	tblptru,c
 16435  000BEA  0E00               	movlw	low (__mediumconst shr (0+16))
 16436  000BEC  22F8               	addwfc	tblptru,f,c
 16437  000BEE                     	endif
 16438  000BEE  0008               	tblrd		*
 16439  000BF0  50F5               	movf	tablat,w,c
 16440  000BF2  0A32               	xorlw	50
 16441  000BF4  B4D8               	btfsc	status,2,c
 16442  000BF6  D04B               	goto	i2l605
 16443  000BF8  5040               	movf	interruptHandler@keypress,w,c
 16444  000BFA  0D01               	mullw	1
 16445  000BFC  0E53               	movlw	low _keys
 16446  000BFE  24F3               	addwf	prodl,w,c
 16447  000C00  6EF6               	movwf	tblptrl,c
 16448  000C02  0EFC               	movlw	high _keys
 16449  000C04  20F4               	addwfc	prodh,w,c
 16450  000C06  6EF7               	movwf	tblptrh,c
 16451  000C08                     	if	1	;There are 3 active tblptr bytes
 16452  000C08  6AF8               	clrf	tblptru,c
 16453  000C0A  0E00               	movlw	low (__mediumconst shr (0+16))
 16454  000C0C  22F8               	addwfc	tblptru,f,c
 16455  000C0E                     	endif
 16456  000C0E  0008               	tblrd		*
 16457  000C10  50F5               	movf	tablat,w,c
 16458  000C12  0A33               	xorlw	51
 16459  000C14  B4D8               	btfsc	status,2,c
 16460  000C16  D03B               	goto	i2l605
 16461  000C18  5040               	movf	interruptHandler@keypress,w,c
 16462  000C1A  0D01               	mullw	1
 16463  000C1C  0E53               	movlw	low _keys
 16464  000C1E  24F3               	addwf	prodl,w,c
 16465  000C20  6EF6               	movwf	tblptrl,c
 16466  000C22  0EFC               	movlw	high _keys
 16467  000C24  20F4               	addwfc	prodh,w,c
 16468  000C26  6EF7               	movwf	tblptrh,c
 16469  000C28                     	if	1	;There are 3 active tblptr bytes
 16470  000C28  6AF8               	clrf	tblptru,c
 16471  000C2A  0E00               	movlw	low (__mediumconst shr (0+16))
 16472  000C2C  22F8               	addwfc	tblptru,f,c
 16473  000C2E                     	endif
 16474  000C2E  0008               	tblrd		*
 16475  000C30  50F5               	movf	tablat,w,c
 16476  000C32  0A34               	xorlw	52
 16477  000C34  B4D8               	btfsc	status,2,c
 16478  000C36  D02B               	goto	i2l605
 16479  000C38  D0BC               	goto	i2l617
 16480  000C3A                     
 16481                           ;main.c: 953: number = 1;
 16482  000C3A  0E00               	movlw	0
 16483  000C3C  6E76               	movwf	_number+1,c
 16484  000C3E  0E01               	movlw	1
 16485  000C40  D00F               	goto	L14
 16486  000C42                     
 16487                           ;main.c: 956: number = 2;
 16488  000C42  0E00               	movlw	0
 16489  000C44  6E76               	movwf	_number+1,c
 16490  000C46  0E02               	movlw	2
 16491  000C48  D00B               	goto	L14
 16492  000C4A                     
 16493                           ;main.c: 959: number = 3;
 16494  000C4A  0E00               	movlw	0
 16495  000C4C  6E76               	movwf	_number+1,c
 16496  000C4E  0E03               	movlw	3
 16497  000C50  D007               	goto	L14
 16498  000C52                     
 16499                           ;main.c: 962: number = 4;
 16500  000C52  0E00               	movlw	0
 16501  000C54  6E76               	movwf	_number+1,c
 16502  000C56  0E04               	movlw	4
 16503  000C58  D003               	goto	L14
 16504  000C5A                     
 16505                           ;main.c: 965: number = 5;
 16506  000C5A  0E00               	movlw	0
 16507  000C5C  6E76               	movwf	_number+1,c
 16508  000C5E  0E05               	movlw	5
 16509  000C60                     L14:
 16510  000C60  6E75               	movwf	_number,c
 16511                           
 16512                           ;main.c: 966: break;
 16513  000C62  D032               	goto	i2l607
 16514  000C64                     
 16515                           ;main.c: 968: initLCD();
 16516  000C64  EC1F  F02F         	call	i2_initLCD	;wreg free
 16517                           
 16518                           ;main.c: 969: printf("Wrong input");
 16519  000C68  0E3F               	movlw	low STR_59
 16520  000C6A  6E0D               	movwf	i2printf@f,c
 16521  000C6C  0EFF               	movlw	high STR_59
 16522  000C6E  6E0E               	movwf	i2printf@f+1,c
 16523  000C70  EC4E  F01B         	call	i2_printf	;wreg free
 16524                           
 16525                           ;main.c: 970: _delay((unsigned long)((100)*(32000000/4000.0)));
 16526  000C74  0E05               	movlw	5
 16527  000C76  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16528  000C78  0E0F               	movlw	15
 16529  000C7A  6E27               	movwf	??_interruptHandler& (0+255),c
 16530  000C7C  0EF1               	movlw	241
 16531  000C7E                     i2u763_47:
 16532  000C7E  2EE8               	decfsz	wreg,f,c
 16533  000C80  D7FE               	bra	i2u763_47
 16534  000C82  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16535  000C84  D7FC               	bra	i2u763_47
 16536  000C86  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16537  000C88  D7FA               	bra	i2u763_47
 16538  000C8A  F000               	nop	
 16539                           
 16540                           ;main.c: 971: }
 16541  000C8C  D01D               	goto	i2l607
 16542  000C8E                     i2l605:
 16543  000C8E  5040               	movf	interruptHandler@keypress,w,c
 16544  000C90  0D01               	mullw	1
 16545  000C92  0E53               	movlw	low _keys
 16546  000C94  24F3               	addwf	prodl,w,c
 16547  000C96  6EF6               	movwf	tblptrl,c
 16548  000C98  0EFC               	movlw	high _keys
 16549  000C9A  20F4               	addwfc	prodh,w,c
 16550  000C9C  6EF7               	movwf	tblptrh,c
 16551  000C9E                     	if	1	;There are 3 active tblptr bytes
 16552  000C9E  6AF8               	clrf	tblptru,c
 16553  000CA0  0E00               	movlw	low (__mediumconst shr (0+16))
 16554  000CA2  22F8               	addwfc	tblptru,f,c
 16555  000CA4                     	endif
 16556  000CA4  0008               	tblrd		*
 16557  000CA6  50F5               	movf	tablat,w,c
 16558                           
 16559                           ; Switch size 1, requested type "space"
 16560                           ; Number of cases is 5, Range of values is 49 to 53
 16561                           ; switch strategies available:
 16562                           ; Name         Instructions Cycles
 16563                           ; simple_byte           16     9 (average)
 16564                           ;	Chosen strategy is simple_byte
 16565  000CA8  0A31               	xorlw	49	; case 49
 16566  000CAA  B4D8               	btfsc	status,2,c
 16567  000CAC  D7C6               	goto	i2l606
 16568  000CAE  0A03               	xorlw	3	; case 50
 16569  000CB0  B4D8               	btfsc	status,2,c
 16570  000CB2  D7C7               	goto	i2l608
 16571  000CB4  0A01               	xorlw	1	; case 51
 16572  000CB6  B4D8               	btfsc	status,2,c
 16573  000CB8  D7C8               	goto	i2l609
 16574  000CBA  0A07               	xorlw	7	; case 52
 16575  000CBC  B4D8               	btfsc	status,2,c
 16576  000CBE  D7C9               	goto	i2l610
 16577  000CC0  0A01               	xorlw	1	; case 53
 16578  000CC2  B4D8               	btfsc	status,2,c
 16579  000CC4  D7CA               	goto	i2l611
 16580  000CC6  D7CE               	goto	i2l612
 16581  000CC8                     i2l607:
 16582                           
 16583                           ;main.c: 974: is_valid();
 16584  000CC8  ECF5  F007         	call	_is_valid	;wreg free
 16585                           
 16586                           ;main.c: 976: if ( check() == 0){
 16587  000CCC  ECE7  F02D         	call	_check	;wreg free
 16588  000CD0  5001               	movf	?_check,w,c
 16589  000CD2  1002               	iorwf	?_check+1,w,c
 16590  000CD4  A4D8               	btfss	status,2,c
 16591  000CD6  D028               	goto	i2l613
 16592                           
 16593                           ;main.c: 977: initLCD();
 16594  000CD8  EC1F  F02F         	call	i2_initLCD	;wreg free
 16595                           
 16596                           ;main.c: 978: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16597  000CDC  0E80               	movlw	128
 16598  000CDE  EC09  F031         	call	i2_lcdInst
 16599  000CE2  0E34               	movlw	52
 16600  000CE4  6E27               	movwf	??_interruptHandler& (0+255),c
 16601  000CE6  0EF2               	movlw	242
 16602  000CE8                     i2u764_47:
 16603  000CE8  2EE8               	decfsz	wreg,f,c
 16604  000CEA  D7FE               	bra	i2u764_47
 16605  000CEC  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16606  000CEE  D7FC               	bra	i2u764_47
 16607                           
 16608                           ;main.c: 979: printf("TOO MANY");
 16609  000CF0  0E74               	movlw	low STR_60
 16610  000CF2  6E0D               	movwf	i2printf@f,c
 16611  000CF4  0EFF               	movlw	high STR_60
 16612  000CF6  6E0E               	movwf	i2printf@f+1,c
 16613  000CF8  EC4E  F01B         	call	i2_printf	;wreg free
 16614                           
 16615                           ;main.c: 981: _delay((unsigned long)((100)*(32000000/4000.0)));
 16616  000CFC  0E05               	movlw	5
 16617  000CFE  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16618  000D00  0E0F               	movlw	15
 16619  000D02  6E27               	movwf	??_interruptHandler& (0+255),c
 16620  000D04  0EF1               	movlw	241
 16621  000D06                     i2u765_47:
 16622  000D06  2EE8               	decfsz	wreg,f,c
 16623  000D08  D7FE               	bra	i2u765_47
 16624  000D0A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16625  000D0C  D7FC               	bra	i2u765_47
 16626  000D0E  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16627  000D10  D7FA               	bra	i2u765_47
 16628  000D12  F000               	nop	
 16629                           
 16630                           ;main.c: 982: state = 2;
 16631  000D14  0E00               	movlw	0
 16632  000D16  0100               	movlb	0	; () banked
 16633  000D18  6FB2               	movwf	(_state+1)& (0+255),b
 16634  000D1A  0E02               	movlw	2
 16635  000D1C  6FB1               	movwf	_state& (0+255),b
 16636                           
 16637                           ; BSR set to: 0
 16638                           ;main.c: 983: number = 0;
 16639  000D1E  0E00               	movlw	0
 16640  000D20  6E76               	movwf	_number+1,c
 16641  000D22  0E00               	movlw	0
 16642  000D24  6E75               	movwf	_number,c
 16643                           
 16644                           ;main.c: 984: }
 16645  000D26  D045               	goto	i2l617
 16646  000D28                     i2l613:
 16647                           
 16648                           ;main.c: 987: else if (counter_step >= assembly_step-1){
 16649                           
 16650                           ; BSR set to: 0
 16651  000D28  0EFF               	movlw	255
 16652  000D2A  6E27               	movwf	??_interruptHandler& (0+255),c
 16653  000D2C  0EFF               	movlw	255
 16654  000D2E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16655  000D30  C0AF  F029         	movff	_assembly_step,??_interruptHandler+2
 16656  000D34  C0B0  F02A         	movff	_assembly_step+1,??_interruptHandler+3
 16657  000D38  5027               	movf	??_interruptHandler,w,c
 16658  000D3A  2629               	addwf	??_interruptHandler+2,f,c
 16659  000D3C  5028               	movf	??_interruptHandler+1,w,c
 16660  000D3E  222A               	addwfc	??_interruptHandler+3,f,c
 16661  000D40  5029               	movf	??_interruptHandler+2,w,c
 16662  000D42  5C5A               	subwf	_counter_step,w,c
 16663  000D44  505B               	movf	_counter_step+1,w,c
 16664  000D46  0A80               	xorlw	128
 16665  000D48  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
 16666  000D4A  502A               	movf	??_interruptHandler+3,w,c
 16667  000D4C  0A80               	xorlw	128
 16668  000D4E  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 16669  000D50  A0D8               	btfss	status,0,c
 16670  000D52  D013               	goto	i2l615
 16671                           
 16672                           ;main.c: 988: final_number[counter_step] = number;
 16673  000D54  90D8               	bcf	status,0,c
 16674  000D56  345A               	rlcf	_counter_step,w,c
 16675  000D58  6ED9               	movwf	fsr2l,c
 16676  000D5A  345B               	rlcf	_counter_step+1,w,c
 16677  000D5C  6EDA               	movwf	fsr2h,c
 16678  000D5E  0E50               	movlw	low _final_number
 16679  000D60  26D9               	addwf	fsr2l,f,c
 16680  000D62  0E01               	movlw	high _final_number
 16681  000D64  22DA               	addwfc	fsr2h,f,c
 16682  000D66  C075  FFDE         	movff	_number,postinc2
 16683  000D6A  C076  FFDD         	movff	_number+1,postdec2
 16684                           
 16685                           ;main.c: 989: state = 3;
 16686  000D6E  0E00               	movlw	0
 16687  000D70  0100               	movlb	0	; () banked
 16688  000D72  6FB2               	movwf	(_state+1)& (0+255),b
 16689  000D74  0E03               	movlw	3
 16690  000D76  6FB1               	movwf	_state& (0+255),b
 16691                           
 16692                           ;main.c: 990: }
 16693  000D78  D01C               	goto	i2l617
 16694  000D7A                     i2l615:
 16695                           
 16696                           ;main.c: 991: else if ( check() == 1){
 16697                           
 16698                           ; BSR set to: 0
 16699  000D7A  ECE7  F02D         	call	_check	;wreg free
 16700  000D7E  0401               	decf	?_check,w,c
 16701  000D80  1002               	iorwf	?_check+1,w,c
 16702  000D82  A4D8               	btfss	status,2,c
 16703  000D84  D016               	goto	i2l617
 16704                           
 16705                           ;main.c: 992: state = 1;
 16706  000D86  0E00               	movlw	0
 16707  000D88  0100               	movlb	0	; () banked
 16708  000D8A  6FB2               	movwf	(_state+1)& (0+255),b
 16709  000D8C  0E01               	movlw	1
 16710  000D8E  6FB1               	movwf	_state& (0+255),b
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;main.c: 993: initLCD();
 16714  000D90  EC1F  F02F         	call	i2_initLCD	;wreg free
 16715                           
 16716                           ;main.c: 996: final_number[counter_step] = number;
 16717  000D94  90D8               	bcf	status,0,c
 16718  000D96  345A               	rlcf	_counter_step,w,c
 16719  000D98  6ED9               	movwf	fsr2l,c
 16720  000D9A  345B               	rlcf	_counter_step+1,w,c
 16721  000D9C  6EDA               	movwf	fsr2h,c
 16722  000D9E  0E50               	movlw	low _final_number
 16723  000DA0  26D9               	addwf	fsr2l,f,c
 16724  000DA2  0E01               	movlw	high _final_number
 16725  000DA4  22DA               	addwfc	fsr2h,f,c
 16726  000DA6  C075  FFDE         	movff	_number,postinc2
 16727  000DAA  C076  FFDD         	movff	_number+1,postdec2
 16728                           
 16729                           ;main.c: 997: counter_step++;
 16730  000DAE  4A5A               	infsnz	_counter_step,f,c
 16731  000DB0  2A5B               	incf	_counter_step+1,f,c
 16732  000DB2                     i2l617:
 16733                           
 16734                           ;main.c: 998: }
 16735                           ;main.c: 1001: }
 16736                           ;main.c: 1003: }
 16737                           ;main.c: 1006: if(state == 4){
 16738  000DB2  0E04               	movlw	4
 16739  000DB4  0100               	movlb	0	; () banked
 16740  000DB6  19B1               	xorwf	_state& (0+255),w,b
 16741  000DB8  11B2               	iorwf	(_state+1)& (0+255),w,b
 16742  000DBA  A4D8               	btfss	status,2,c
 16743  000DBC  D014               	goto	i2l619
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;main.c: 1007: if(keys[keypress] == '#')
 16747  000DBE  5040               	movf	interruptHandler@keypress,w,c
 16748  000DC0  0D01               	mullw	1
 16749  000DC2  0E53               	movlw	low _keys
 16750  000DC4  24F3               	addwf	prodl,w,c
 16751  000DC6  6EF6               	movwf	tblptrl,c
 16752  000DC8  0EFC               	movlw	high _keys
 16753  000DCA  20F4               	addwfc	prodh,w,c
 16754  000DCC  6EF7               	movwf	tblptrh,c
 16755  000DCE                     	if	1	;There are 3 active tblptr bytes
 16756  000DCE  6AF8               	clrf	tblptru,c
 16757  000DD0  0E00               	movlw	low (__mediumconst shr (0+16))
 16758  000DD2  22F8               	addwfc	tblptru,f,c
 16759  000DD4                     	endif
 16760  000DD4  0008               	tblrd		*
 16761  000DD6  50F5               	movf	tablat,w,c
 16762  000DD8  0A23               	xorlw	35
 16763  000DDA  A4D8               	btfss	status,2,c
 16764  000DDC  D004               	goto	i2l619
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;main.c: 1008: state = 5;
 16768  000DDE  0E00               	movlw	0
 16769  000DE0  6FB2               	movwf	(_state+1)& (0+255),b
 16770  000DE2  0E05               	movlw	5
 16771  000DE4  6FB1               	movwf	_state& (0+255),b
 16772  000DE6                     i2l619:
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;main.c: 1009: }
 16776                           ;main.c: 1011: B=0;N=0;S=0;W=0;
 16777                           
 16778                           ; BSR set to: 0
 16779  000DE6  0E00               	movlw	0
 16780  000DE8  6E59               	movwf	_B+1,c
 16781  000DEA  0E00               	movlw	0
 16782  000DEC  6E58               	movwf	_B,c
 16783  000DEE  0E00               	movlw	0
 16784  000DF0  6E57               	movwf	_N+1,c
 16785  000DF2  0E00               	movlw	0
 16786  000DF4  6E56               	movwf	_N,c
 16787  000DF6  0E00               	movlw	0
 16788  000DF8  6E55               	movwf	_S+1,c
 16789  000DFA  0E00               	movlw	0
 16790  000DFC  6E54               	movwf	_S,c
 16791  000DFE  0E00               	movlw	0
 16792  000E00  6E53               	movwf	_W+1,c
 16793  000E02  0E00               	movlw	0
 16794  000E04  6E52               	movwf	_W,c
 16795                           
 16796                           ;main.c: 1012: total_number = 0;
 16797  000E06  0E00               	movlw	0
 16798  000E08  0101               	movlb	1	; () banked
 16799  000E0A  6F8B               	movwf	(_total_number+1)& (0+255),b
 16800  000E0C  0E00               	movlw	0
 16801  000E0E  6F8A               	movwf	_total_number& (0+255),b
 16802  000E10                     i2l8197:
 16803                           
 16804                           ; BSR set to: 1
 16805                           ;main.c: 1014: INT1IF = 0;
 16806  000E10  90F0               	bcf	intcon3,0,c	;volatile
 16807                           
 16808                           ; BSR set to: 1
 16809                           ;main.c: 1015: return;
 16810  000E12  D0C5               	goto	i2l625
 16811  000E14                     i2l559:
 16812                           
 16813                           ;main.c: 1016: }
 16814                           ;main.c: 1026: if (RBIF){
 16815  000E14  A0F2               	btfss	intcon,0,c	;volatile
 16816  000E16  D0B0               	goto	i2l620
 16817                           
 16818                           ;main.c: 1028: B_input = PORTBbits.RB5;
 16819  000E18  AA81               	btfss	3969,5,c	;volatile
 16820  000E1A  D003               	goto	i2u611_40
 16821  000E1C  6A27               	clrf	??_interruptHandler& (0+255),c
 16822  000E1E  2A27               	incf	??_interruptHandler& (0+255),f,c
 16823  000E20  D001               	goto	i2u611_48
 16824  000E22                     i2u611_40:
 16825  000E22  6A27               	clrf	??_interruptHandler& (0+255),c
 16826  000E24                     i2u611_48:
 16827  000E24  5027               	movf	??_interruptHandler,w,c
 16828  000E26  0101               	movlb	1	; () banked
 16829  000E28  6F86               	movwf	_B_input& (0+255),b
 16830  000E2A  6B87               	clrf	(_B_input+1)& (0+255),b
 16831                           
 16832                           ;main.c: 1029: N_input = PORTBbits.RB6;
 16833  000E2C  AC81               	btfss	3969,6,c	;volatile
 16834  000E2E  D003               	goto	i2u612_40
 16835  000E30  6A27               	clrf	??_interruptHandler& (0+255),c
 16836  000E32  2A27               	incf	??_interruptHandler& (0+255),f,c
 16837  000E34  D001               	goto	i2u612_48
 16838  000E36                     i2u612_40:
 16839  000E36  6A27               	clrf	??_interruptHandler& (0+255),c
 16840  000E38                     i2u612_48:
 16841  000E38  5027               	movf	??_interruptHandler,w,c
 16842  000E3A  0101               	movlb	1	; () banked
 16843  000E3C  6F84               	movwf	_N_input& (0+255),b
 16844  000E3E  6B85               	clrf	(_N_input+1)& (0+255),b
 16845                           
 16846                           ;main.c: 1030: S_input = PORTBbits.RB4;
 16847  000E40  A881               	btfss	3969,4,c	;volatile
 16848  000E42  D003               	goto	i2u613_40
 16849  000E44  6A27               	clrf	??_interruptHandler& (0+255),c
 16850  000E46  2A27               	incf	??_interruptHandler& (0+255),f,c
 16851  000E48  D001               	goto	i2u613_48
 16852  000E4A                     i2u613_40:
 16853  000E4A  6A27               	clrf	??_interruptHandler& (0+255),c
 16854  000E4C                     i2u613_48:
 16855  000E4C  5027               	movf	??_interruptHandler,w,c
 16856  000E4E  0101               	movlb	1	; () banked
 16857  000E50  6F82               	movwf	_S_input& (0+255),b
 16858  000E52  6B83               	clrf	(_S_input+1)& (0+255),b
 16859                           
 16860                           ;main.c: 1031: W_input = PORTBbits.RB7;
 16861  000E54  AE81               	btfss	3969,7,c	;volatile
 16862  000E56  D003               	goto	i2u614_40
 16863  000E58  6A27               	clrf	??_interruptHandler& (0+255),c
 16864  000E5A  2A27               	incf	??_interruptHandler& (0+255),f,c
 16865  000E5C  D001               	goto	i2u614_48
 16866  000E5E                     i2u614_40:
 16867  000E5E  6A27               	clrf	??_interruptHandler& (0+255),c
 16868  000E60                     i2u614_48:
 16869  000E60  5027               	movf	??_interruptHandler,w,c
 16870  000E62  0101               	movlb	1	; () banked
 16871  000E64  6F80               	movwf	_W_input& (0+255),b
 16872  000E66  6B81               	clrf	(_W_input+1)& (0+255),b
 16873                           
 16874                           ; BSR set to: 1
 16875                           ;main.c: 1035: if (B_input == 1){
 16876  000E68  0586               	decf	_B_input& (0+255),w,b
 16877  000E6A  1187               	iorwf	(_B_input+1)& (0+255),w,b
 16878  000E6C  A4D8               	btfss	status,2,c
 16879  000E6E  D01A               	goto	i2l621
 16880                           
 16881                           ; BSR set to: 1
 16882                           ;main.c: 1036: B_spacingTime = 0;
 16883  000E70  0E00               	movlw	0
 16884  000E72  0100               	movlb	0	; () banked
 16885  000E74  6F9E               	movwf	(_B_spacingTime+1)& (0+255),b
 16886  000E76  0E00               	movlw	0
 16887  000E78  6F9D               	movwf	_B_spacingTime& (0+255),b
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;main.c: 1037: initLCD();
 16891  000E7A  EC1F  F02F         	call	i2_initLCD	;wreg free
 16892                           
 16893                           ;main.c: 1038: printf("bolt_interrupt");
 16894  000E7E  0E9D               	movlw	low STR_61
 16895  000E80  6E0D               	movwf	i2printf@f,c
 16896  000E82  0EFE               	movlw	high STR_61
 16897  000E84  6E0E               	movwf	i2printf@f+1,c
 16898  000E86  EC4E  F01B         	call	i2_printf	;wreg free
 16899                           
 16900                           ;main.c: 1039: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16901  000E8A  0E80               	movlw	128
 16902  000E8C  EC09  F031         	call	i2_lcdInst
 16903  000E90  0E34               	movlw	52
 16904  000E92  6E27               	movwf	??_interruptHandler& (0+255),c
 16905  000E94  0EF2               	movlw	242
 16906  000E96                     i2u766_47:
 16907  000E96  2EE8               	decfsz	wreg,f,c
 16908  000E98  D7FE               	bra	i2u766_47
 16909  000E9A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16910  000E9C  D7FC               	bra	i2u766_47
 16911                           
 16912                           ;main.c: 1040: B_counter++;
 16913  000E9E  0100               	movlb	0	; () banked
 16914  000EA0  4BAD               	infsnz	_B_counter& (0+255),f,b
 16915  000EA2  2BAE               	incf	(_B_counter+1)& (0+255),f,b
 16916  000EA4                     i2l621:
 16917                           
 16918                           ;main.c: 1042: }
 16919                           ;main.c: 1045: if (N_input == 1){
 16920                           
 16921                           ; BSR set to: 0
 16922  000EA4  0101               	movlb	1	; () banked
 16923  000EA6  0584               	decf	_N_input& (0+255),w,b
 16924  000EA8  1185               	iorwf	(_N_input+1)& (0+255),w,b
 16925  000EAA  A4D8               	btfss	status,2,c
 16926  000EAC  D01A               	goto	i2l622
 16927                           
 16928                           ; BSR set to: 1
 16929                           ;main.c: 1046: N_spacingTime = 0;
 16930  000EAE  0E00               	movlw	0
 16931  000EB0  0100               	movlb	0	; () banked
 16932  000EB2  6F9C               	movwf	(_N_spacingTime+1)& (0+255),b
 16933  000EB4  0E00               	movlw	0
 16934  000EB6  6F9B               	movwf	_N_spacingTime& (0+255),b
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;main.c: 1047: initLCD();
 16938  000EB8  EC1F  F02F         	call	i2_initLCD	;wreg free
 16939                           
 16940                           ;main.c: 1048: printf("nut_interrupt");
 16941  000EBC  0EF4               	movlw	low STR_62
 16942  000EBE  6E0D               	movwf	i2printf@f,c
 16943  000EC0  0EFE               	movlw	high STR_62
 16944  000EC2  6E0E               	movwf	i2printf@f+1,c
 16945  000EC4  EC4E  F01B         	call	i2_printf	;wreg free
 16946                           
 16947                           ;main.c: 1049: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16948  000EC8  0E80               	movlw	128
 16949  000ECA  EC09  F031         	call	i2_lcdInst
 16950  000ECE  0E34               	movlw	52
 16951  000ED0  6E27               	movwf	??_interruptHandler& (0+255),c
 16952  000ED2  0EF2               	movlw	242
 16953  000ED4                     i2u767_47:
 16954  000ED4  2EE8               	decfsz	wreg,f,c
 16955  000ED6  D7FE               	bra	i2u767_47
 16956  000ED8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16957  000EDA  D7FC               	bra	i2u767_47
 16958                           
 16959                           ;main.c: 1050: N_counter++;
 16960  000EDC  0100               	movlb	0	; () banked
 16961  000EDE  4BA9               	infsnz	_N_counter& (0+255),f,b
 16962  000EE0  2BAA               	incf	(_N_counter+1)& (0+255),f,b
 16963  000EE2                     i2l622:
 16964                           
 16965                           ;main.c: 1051: }
 16966                           ;main.c: 1053: if (S_input == 1){
 16967                           
 16968                           ; BSR set to: 0
 16969  000EE2  0101               	movlb	1	; () banked
 16970  000EE4  0582               	decf	_S_input& (0+255),w,b
 16971  000EE6  1183               	iorwf	(_S_input+1)& (0+255),w,b
 16972  000EE8  A4D8               	btfss	status,2,c
 16973  000EEA  D019               	goto	i2l623
 16974                           
 16975                           ; BSR set to: 1
 16976                           ;main.c: 1054: S_spacingTime = 0;
 16977  000EEC  0E00               	movlw	0
 16978  000EEE  0100               	movlb	0	; () banked
 16979  000EF0  6F9A               	movwf	(_S_spacingTime+1)& (0+255),b
 16980  000EF2  0E00               	movlw	0
 16981  000EF4  6F99               	movwf	_S_spacingTime& (0+255),b
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;main.c: 1055: S_counter++;
 16985  000EF6  4BAB               	infsnz	_S_counter& (0+255),f,b
 16986  000EF8  2BAC               	incf	(_S_counter+1)& (0+255),f,b
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;main.c: 1056: initLCD();
 16990  000EFA  EC1F  F02F         	call	i2_initLCD	;wreg free
 16991                           
 16992                           ;main.c: 1058: printf("spacer_interrupted");
 16993  000EFE  0E7E               	movlw	low STR_63
 16994  000F00  6E0D               	movwf	i2printf@f,c
 16995  000F02  0EFD               	movlw	high STR_63
 16996  000F04  6E0E               	movwf	i2printf@f+1,c
 16997  000F06  EC4E  F01B         	call	i2_printf	;wreg free
 16998                           
 16999                           ;main.c: 1059: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17000  000F0A  0E80               	movlw	128
 17001  000F0C  EC09  F031         	call	i2_lcdInst
 17002  000F10  0E34               	movlw	52
 17003  000F12  6E27               	movwf	??_interruptHandler& (0+255),c
 17004  000F14  0EF2               	movlw	242
 17005  000F16                     i2u768_47:
 17006  000F16  2EE8               	decfsz	wreg,f,c
 17007  000F18  D7FE               	bra	i2u768_47
 17008  000F1A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17009  000F1C  D7FC               	bra	i2u768_47
 17010  000F1E                     i2l623:
 17011                           
 17012                           ;main.c: 1060: }
 17013                           ;main.c: 1062: if (W_input == 1){
 17014  000F1E  0101               	movlb	1	; () banked
 17015  000F20  0580               	decf	_W_input& (0+255),w,b
 17016  000F22  1181               	iorwf	(_W_input+1)& (0+255),w,b
 17017  000F24  A4D8               	btfss	status,2,c
 17018  000F26  D01A               	goto	i2l624
 17019                           
 17020                           ; BSR set to: 1
 17021                           ;main.c: 1063: W_spacingTime = 0;
 17022  000F28  0E00               	movlw	0
 17023  000F2A  0100               	movlb	0	; () banked
 17024  000F2C  6F98               	movwf	(_W_spacingTime+1)& (0+255),b
 17025  000F2E  0E00               	movlw	0
 17026  000F30  6F97               	movwf	_W_spacingTime& (0+255),b
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;main.c: 1064: initLCD();
 17030  000F32  EC1F  F02F         	call	i2_initLCD	;wreg free
 17031                           
 17032                           ;main.c: 1065: printf("washer_interrupted");
 17033  000F36  0E91               	movlw	low STR_64
 17034  000F38  6E0D               	movwf	i2printf@f,c
 17035  000F3A  0EFD               	movlw	high STR_64
 17036  000F3C  6E0E               	movwf	i2printf@f+1,c
 17037  000F3E  EC4E  F01B         	call	i2_printf	;wreg free
 17038                           
 17039                           ;main.c: 1066: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17040  000F42  0E80               	movlw	128
 17041  000F44  EC09  F031         	call	i2_lcdInst
 17042  000F48  0E34               	movlw	52
 17043  000F4A  6E27               	movwf	??_interruptHandler& (0+255),c
 17044  000F4C  0EF2               	movlw	242
 17045  000F4E                     i2u769_47:
 17046  000F4E  2EE8               	decfsz	wreg,f,c
 17047  000F50  D7FE               	bra	i2u769_47
 17048  000F52  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17049  000F54  D7FC               	bra	i2u769_47
 17050                           
 17051                           ;main.c: 1067: W_counter++;
 17052  000F56  0100               	movlb	0	; () banked
 17053  000F58  4BA7               	infsnz	_W_counter& (0+255),f,b
 17054  000F5A  2BA8               	incf	(_W_counter+1)& (0+255),f,b
 17055  000F5C                     i2l624:
 17056                           
 17057                           ;main.c: 1070: }
 17058                           ;main.c: 1071: initLCD();
 17059                           
 17060                           ; BSR set to: 0
 17061  000F5C  EC1F  F02F         	call	i2_initLCD	;wreg free
 17062                           
 17063                           ;main.c: 1073: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17064  000F60  0E80               	movlw	128
 17065  000F62  EC09  F031         	call	i2_lcdInst
 17066  000F66  0E34               	movlw	52
 17067  000F68  6E27               	movwf	??_interruptHandler& (0+255),c
 17068  000F6A  0EF2               	movlw	242
 17069  000F6C                     i2u770_47:
 17070  000F6C  2EE8               	decfsz	wreg,f,c
 17071  000F6E  D7FE               	bra	i2u770_47
 17072  000F70  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17073  000F72  D7FC               	bra	i2u770_47
 17074                           
 17075                           ;main.c: 1079: RBIF = 0;
 17076  000F74  90F2               	bcf	intcon,0,c	;volatile
 17077                           
 17078                           ;main.c: 1080: return;
 17079  000F76  D013               	goto	i2l625
 17080  000F78                     i2l620:
 17081                           
 17082                           ;main.c: 1081: }
 17083                           ;main.c: 1082: if(TMR0IE && TMR0IF){
 17084  000F78  BAF2               	btfsc	intcon,5,c	;volatile
 17085  000F7A  A4F2               	btfss	intcon,2,c	;volatile
 17086  000F7C  D010               	goto	i2l625
 17087                           
 17088                           ;main.c: 1083: timerCounter ++;
 17089  000F7E  2A6A               	incf	_timerCounter,f,c	;volatile
 17090                           
 17091                           ;main.c: 1084: if (timerCounter >= 19){
 17092  000F80  0E12               	movlw	18
 17093  000F82  646A               	cpfsgt	_timerCounter,c	;volatile
 17094  000F84  D003               	goto	i2l626
 17095                           
 17096                           ;main.c: 1085: NeedToCloseLid = 1;
 17097  000F86  0E01               	movlw	1
 17098  000F88  0100               	movlb	0	; () banked
 17099  000F8A  6FBA               	movwf	_NeedToCloseLid& (0+255),b
 17100  000F8C                     i2l626:
 17101                           
 17102                           ;main.c: 1086: }
 17103                           ;main.c: 1087: if(timerCounter >= 21){
 17104                           
 17105                           ; BSR set to: 0
 17106  000F8C  0E14               	movlw	20
 17107  000F8E  646A               	cpfsgt	_timerCounter,c	;volatile
 17108  000F90  D005               	goto	i2l627
 17109                           
 17110                           ;main.c: 1088: timerCounter = 0;
 17111  000F92  0E00               	movlw	0
 17112  000F94  6E6A               	movwf	_timerCounter,c	;volatile
 17113                           
 17114                           ;main.c: 1089: EndOfProgram = 1;
 17115  000F96  0E01               	movlw	1
 17116  000F98  0100               	movlb	0	; () banked
 17117  000F9A  6FBB               	movwf	_EndOfProgram& (0+255),b
 17118  000F9C                     i2l627:
 17119                           
 17120                           ;main.c: 1090: }
 17121                           ;main.c: 1092: TMR0IF = 0;
 17122                           
 17123                           ; BSR set to: 0
 17124  000F9C  94F2               	bcf	intcon,2,c	;volatile
 17125  000F9E                     i2l625:
 17126  000F9E  C03D  F082         	movff	??_interruptHandler+22,btemp+3
 17127  000FA2  C03C  F081         	movff	??_interruptHandler+21,btemp+2
 17128  000FA6  C03B  F080         	movff	??_interruptHandler+20,btemp+1
 17129  000FAA  C03A  F07F         	movff	??_interruptHandler+19,btemp
 17130  000FAE  C039  FFF5         	movff	??_interruptHandler+18,tablat
 17131  000FB2  C038  FFF8         	movff	??_interruptHandler+17,tblptru
 17132  000FB6  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
 17133  000FBA  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
 17134  000FBE  C035  FFF4         	movff	??_interruptHandler+14,prodh
 17135  000FC2  C034  FFF3         	movff	??_interruptHandler+13,prodl
 17136  000FC6  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
 17137  000FCA  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
 17138  000FCE  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
 17139  000FD2  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
 17140  000FD6  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
 17141  000FDA  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
 17142  000FDE  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
 17143  000FE2  C02C  FFFA         	movff	??_interruptHandler+5,pclath
 17144  000FE6  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17145  000FE8  0011               	retfie		f
 17146  000FEA                     __end_of_interruptHandler:
 17147                           	opt stack 0
 17148                           pclatu	equ	0xFFB
 17149                           pclath	equ	0xFFA
 17150                           tblptru	equ	0xFF8
 17151                           tblptrh	equ	0xFF7
 17152                           tblptrl	equ	0xFF6
 17153                           tablat	equ	0xFF5
 17154                           prodh	equ	0xFF4
 17155                           prodl	equ	0xFF3
 17156                           intcon	equ	0xFF2
 17157                           intcon3	equ	0xFF0
 17158                           indf0	equ	0xFEF
 17159                           postinc0	equ	0xFEE
 17160                           fsr0h	equ	0xFEA
 17161                           fsr0l	equ	0xFE9
 17162                           wreg	equ	0xFE8
 17163                           postdec1	equ	0xFE5
 17164                           fsr1h	equ	0xFE2
 17165                           fsr1l	equ	0xFE1
 17166                           indf2	equ	0xFDF
 17167                           postinc2	equ	0xFDE
 17168                           postdec2	equ	0xFDD
 17169                           fsr2h	equ	0xFDA
 17170                           fsr2l	equ	0xFD9
 17171                           status	equ	0xFD8
 17172                           
 17173 ;; *************** function i2_printf *****************
 17174 ;; Defined at:
 17175 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 17176 ;; Parameters:    Size  Location     Type
 17177 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17178 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
 17179 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 17180 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
 17181 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
 17182 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
 17183 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 17184 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
 17185 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
 17186 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
 17187 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
 17188 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
 17189 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
 17190 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
 17191 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
 17192 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
 17193 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
 17194 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 17195 ;;		 -> STR_2(20), STR_1(16), 
 17196 ;; Auto vars:     Size  Location     Type
 17197 ;;  printf          4    0        struct .
 17198 ;;  printf          2   35[COMRAM] int 
 17199 ;;  printf          2   32[COMRAM] unsigned int 
 17200 ;;  printf          2   30[COMRAM] unsigned int 
 17201 ;;  printf          2   28[COMRAM] PTR void [1]
 17202 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17203 ;;  printf          2   26[COMRAM] PTR const unsigned char 
 17204 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 17205 ;;  printf          1   37[COMRAM] char 
 17206 ;;  printf          1   34[COMRAM] unsigned char 
 17207 ;;  printf          1   25[COMRAM] char 
 17208 ;;  printf          1   24[COMRAM] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;                  2   12[COMRAM] int 
 17211 ;; Registers used:
 17212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17218 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17219 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17220 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17221 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17222 ;;Total ram usage:       26 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    2
 17225 ;; This function calls:
 17226 ;;		i2___lwdiv
 17227 ;;		i2___lwmod
 17228 ;;		i2___wmul
 17229 ;;		i2_isdigit
 17230 ;;		i2_putch
 17231 ;; This function is called by:
 17232 ;;		_interruptHandler
 17233 ;; This function uses a non-reentrant model
 17234 ;;
 17235                           
 17236                           	psect	text44
 17237  00369C                     __ptext44:
 17238                           	opt stack 0
 17239  00369C                     i2_printf:
 17240                           	opt stack 21
 17241                           
 17242                           ;doprnt.c: 466: va_list ap;
 17243                           ;doprnt.c: 499: signed char c;
 17244                           ;doprnt.c: 501: int width;
 17245                           ;doprnt.c: 506: signed char prec;
 17246                           ;doprnt.c: 508: unsigned char flag;
 17247                           ;doprnt.c: 523: union {
 17248                           ;doprnt.c: 524: unsigned long vd;
 17249                           ;doprnt.c: 525: double integ;
 17250                           ;doprnt.c: 526: } tmpval;
 17251                           ;doprnt.c: 528: unsigned int val;
 17252                           ;doprnt.c: 529: unsigned len;
 17253                           ;doprnt.c: 530: const char * cp;
 17254                           ;doprnt.c: 533: *ap = __va_start();
 17255                           
 17256                           ;incstack = 0
 17257  00369C  0E0F               	movlw	low (?i2_printf+2)
 17258  00369E  6E1D               	movwf	i2printf@ap,c
 17259  0036A0  0E00               	movlw	high (?i2_printf+2)
 17260  0036A2  6E1E               	movwf	i2printf@ap+1,c
 17261                           
 17262                           ;doprnt.c: 536: while(c = *f++) {
 17263  0036A4  D1FA               	goto	i2u518_40
 17264  0036A6                     
 17265                           ;doprnt.c: 538: if(c != '%')
 17266  0036A6  0E25               	movlw	37
 17267  0036A8  1826               	xorwf	i2printf@c,w,c
 17268  0036AA  B4D8               	btfsc	status,2,c
 17269  0036AC  D004               	goto	i2l1393
 17270                           
 17271                           ;doprnt.c: 540: {
 17272                           ;doprnt.c: 541: (putch(c) );
 17273  0036AE  5026               	movf	i2printf@c,w,c
 17274  0036B0  ECFF  F030         	call	i2_putch
 17275                           
 17276                           ;doprnt.c: 542: continue;
 17277  0036B4  D1F2               	goto	i2u518_40
 17278  0036B6                     i2l1393:
 17279                           
 17280                           ;doprnt.c: 543: }
 17281                           ;doprnt.c: 546: width = 0;
 17282  0036B6  0E00               	movlw	0
 17283  0036B8  6E25               	movwf	i2printf@width+1,c
 17284  0036BA  0E00               	movlw	0
 17285  0036BC  6E24               	movwf	i2printf@width,c
 17286                           
 17287                           ;doprnt.c: 548: flag = 0;
 17288  0036BE  0E00               	movlw	0
 17289  0036C0  6E23               	movwf	i2printf@flag,c
 17290                           
 17291                           ;doprnt.c: 551: switch(*f) {
 17292                           
 17293                           ;doprnt.c: 550: for(;;) {
 17294  0036C2  D003               	goto	i2l1395
 17295  0036C4                     
 17296                           ;doprnt.c: 580: flag |= 0x04;
 17297  0036C4  8423               	bsf	i2printf@flag,2,c
 17298                           
 17299                           ;doprnt.c: 581: f++;
 17300  0036C6  4A0D               	infsnz	i2printf@f,f,c
 17301  0036C8  2A0E               	incf	i2printf@f+1,f,c
 17302  0036CA                     i2l1395:
 17303  0036CA  C00D  FFF6         	movff	i2printf@f,tblptrl
 17304  0036CE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17305  0036D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17306  0036D2  6AF8               	clrf	tblptru,c
 17307  0036D4                     	endif
 17308  0036D4                     	if	0	;tblptru may be non-zero
 17309  0036D4                     	endif
 17310  0036D4  0008               	tblrd		*
 17311  0036D6  50F5               	movf	tablat,w,c
 17312                           
 17313                           ; Switch size 1, requested type "space"
 17314                           ; Number of cases is 1, Range of values is 48 to 48
 17315                           ; switch strategies available:
 17316                           ; Name         Instructions Cycles
 17317                           ; simple_byte            4     3 (average)
 17318                           ;	Chosen strategy is simple_byte
 17319  0036D8  0A30               	xorlw	48	; case 48
 17320  0036DA  B4D8               	btfsc	status,2,c
 17321  0036DC  D7F3               	goto	i2l1396
 17322                           
 17323                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17324                           
 17325                           ;doprnt.c: 586: }
 17326                           
 17327                           ;doprnt.c: 585: break;
 17328  0036DE  C00D  FFF6         	movff	i2printf@f,tblptrl
 17329  0036E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17330  0036E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17331  0036E6  6AF8               	clrf	tblptru,c
 17332  0036E8                     	endif
 17333  0036E8                     	if	0	;tblptru may be non-zero
 17334  0036E8                     	endif
 17335  0036E8  0008               	tblrd		*
 17336  0036EA  50F5               	movf	tablat,w,c
 17337  0036EC  ECC4  F030         	call	i2_isdigit
 17338  0036F0  A0D8               	btfss	status,0,c
 17339  0036F2  D0A6               	goto	i2l1403
 17340                           
 17341                           ;doprnt.c: 598: width = 0;
 17342  0036F4  0E00               	movlw	0
 17343  0036F6  6E25               	movwf	i2printf@width+1,c
 17344  0036F8  0E00               	movlw	0
 17345  0036FA  6E24               	movwf	i2printf@width,c
 17346  0036FC                     
 17347                           ;doprnt.c: 600: width *= 10;
 17348  0036FC  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
 17349  003700  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17350  003704  0E00               	movlw	0
 17351  003706  6E04               	movwf	i2___wmul@multiplicand+1,c
 17352  003708  0E0A               	movlw	10
 17353  00370A  6E03               	movwf	i2___wmul@multiplicand,c
 17354  00370C  EC8E  F030         	call	i2___wmul	;wreg free
 17355  003710  C001  F024         	movff	?i2___wmul,i2printf@width
 17356  003714  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
 17357                           
 17358                           ;doprnt.c: 601: width += *f++ - '0';
 17359  003718  0ED0               	movlw	208
 17360  00371A  6E15               	movwf	??i2_printf& (0+255),c
 17361  00371C  0EFF               	movlw	255
 17362  00371E  6E16               	movwf	(??i2_printf+1)& (0+255),c
 17363  003720  C00D  FFF6         	movff	i2printf@f,tblptrl
 17364  003724  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17365  003728                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17366  003728  6AF8               	clrf	tblptru,c
 17367  00372A                     	endif
 17368  00372A                     	if	0	;tblptru may be non-zero
 17369  00372A                     	endif
 17370  00372A  0008               	tblrd		*
 17371  00372C  50F5               	movf	tablat,w,c
 17372  00372E  6E17               	movwf	(??i2_printf+2)& (0+255),c
 17373  003730  6A18               	clrf	(??i2_printf+3)& (0+255),c
 17374  003732  5015               	movf	??i2_printf,w,c
 17375  003734  2617               	addwf	??i2_printf+2,f,c
 17376  003736  5016               	movf	??i2_printf+1,w,c
 17377  003738  2218               	addwfc	??i2_printf+3,f,c
 17378  00373A  5017               	movf	??i2_printf+2,w,c
 17379  00373C  2624               	addwf	i2printf@width,f,c
 17380  00373E  5018               	movf	??i2_printf+3,w,c
 17381  003740  2225               	addwfc	i2printf@width+1,f,c
 17382  003742  4A0D               	infsnz	i2printf@f,f,c
 17383  003744  2A0E               	incf	i2printf@f+1,f,c
 17384                           
 17385                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17386  003746  C00D  FFF6         	movff	i2printf@f,tblptrl
 17387  00374A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17388  00374E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17389  00374E  6AF8               	clrf	tblptru,c
 17390  003750                     	endif
 17391  003750                     	if	0	;tblptru may be non-zero
 17392  003750                     	endif
 17393  003750  0008               	tblrd		*
 17394  003752  50F5               	movf	tablat,w,c
 17395  003754  ECC4  F030         	call	i2_isdigit
 17396  003758  A0D8               	btfss	status,0,c
 17397  00375A  D072               	goto	i2l1403
 17398  00375C  D7CF               	goto	i2l1401
 17399  00375E                     
 17400                           ;doprnt.c: 721: flag |= 0x80;
 17401  00375E  8E23               	bsf	i2printf@flag,7,c
 17402                           
 17403                           ;doprnt.c: 723: break;
 17404  003760  D08A               	goto	i2l1408
 17405  003762                     
 17406                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17407  003762  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17408  003766  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17409  00376A  CFDE F01B          	movff	postinc2,i2printf@cp
 17410  00376E  CFDD F01C          	movff	postdec2,i2printf@cp+1
 17411  003772  0E02               	movlw	2
 17412  003774  261D               	addwf	i2printf@ap,f,c
 17413  003776  0E00               	movlw	0
 17414  003778  221E               	addwfc	i2printf@ap+1,f,c
 17415                           
 17416                           ;doprnt.c: 740: if(!cp)
 17417  00377A  501B               	movf	i2printf@cp,w,c
 17418  00377C  101C               	iorwf	i2printf@cp+1,w,c
 17419  00377E  A4D8               	btfss	status,2,c
 17420  003780  D004               	goto	i2l1411
 17421                           
 17422                           ;doprnt.c: 741: cp = "(null)";
 17423  003782  0E97               	movlw	low STR_98
 17424  003784  6E1B               	movwf	i2printf@cp,c
 17425  003786  0EFF               	movlw	high STR_98
 17426  003788  6E1C               	movwf	i2printf@cp+1,c
 17427  00378A                     i2l1411:
 17428                           
 17429                           ;doprnt.c: 745: len = 0;
 17430  00378A  0E00               	movlw	0
 17431  00378C  6E20               	movwf	i2printf@len+1,c
 17432  00378E  0E00               	movlw	0
 17433  003790  6E1F               	movwf	i2printf@len,c
 17434                           
 17435                           ;doprnt.c: 746: while(cp[len])
 17436  003792  D002               	goto	i2l1412
 17437  003794                     
 17438                           ;doprnt.c: 747: len++;
 17439  003794  4A1F               	infsnz	i2printf@len,f,c
 17440  003796  2A20               	incf	i2printf@len+1,f,c
 17441  003798                     i2l1412:
 17442  003798  501F               	movf	i2printf@len,w,c
 17443  00379A  241B               	addwf	i2printf@cp,w,c
 17444  00379C  6E15               	movwf	??i2_printf& (0+255),c
 17445  00379E  5020               	movf	i2printf@len+1,w,c
 17446  0037A0  201C               	addwfc	i2printf@cp+1,w,c
 17447  0037A2  6E16               	movwf	(??i2_printf+1)& (0+255),c
 17448  0037A4  C015  FFF6         	movff	??i2_printf,tblptrl
 17449  0037A8  C016  FFF7         	movff	??i2_printf+1,tblptrh
 17450  0037AC  0E00               	movlw	low (__mediumconst shr (0+16))
 17451  0037AE  6EF8               	movwf	tblptru,c
 17452  0037B0  0E0F               	movlw	(high __ramtop+-1)
 17453  0037B2  64F7               	cpfsgt	tblptrh,c
 17454  0037B4  D003               	bra	i2u494_47
 17455  0037B6  0008               	tblrd		*
 17456  0037B8  50F5               	movf	tablat,w,c
 17457  0037BA  D005               	bra	i2u494_40
 17458  0037BC                     i2u494_47:
 17459  0037BC  CFF6 FFE9          	movff	tblptrl,fsr0l
 17460  0037C0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17461  0037C4  50EF               	movf	indf0,w,c
 17462  0037C6                     i2u494_40:
 17463  0037C6  0900               	iorlw	0
 17464  0037C8  A4D8               	btfss	status,2,c
 17465  0037CA  D7E4               	goto	i2l1413
 17466                           
 17467                           ;doprnt.c: 757: if(width > len)
 17468  0037CC  5024               	movf	i2printf@width,w,c
 17469  0037CE  5C1F               	subwf	i2printf@len,w,c
 17470  0037D0  5025               	movf	i2printf@width+1,w,c
 17471  0037D2  5820               	subwfb	i2printf@len+1,w,c
 17472  0037D4  B0D8               	btfsc	status,0,c
 17473  0037D6  D005               	goto	i2l1415
 17474                           
 17475                           ;doprnt.c: 758: width -= len;
 17476  0037D8  501F               	movf	i2printf@len,w,c
 17477  0037DA  5E24               	subwf	i2printf@width,f,c
 17478  0037DC  5020               	movf	i2printf@len+1,w,c
 17479  0037DE  5A25               	subwfb	i2printf@width+1,f,c
 17480  0037E0  D008               	goto	i2l1417
 17481  0037E2                     i2l1415:
 17482                           
 17483                           ;doprnt.c: 759: else
 17484                           ;doprnt.c: 760: width = 0;
 17485  0037E2  0E00               	movlw	0
 17486  0037E4  6E25               	movwf	i2printf@width+1,c
 17487  0037E6  0E00               	movlw	0
 17488  0037E8  6E24               	movwf	i2printf@width,c
 17489                           
 17490                           ;doprnt.c: 764: while(width--)
 17491  0037EA  D003               	goto	i2l1417
 17492  0037EC                     i2l7127:
 17493                           
 17494                           ;doprnt.c: 765: (putch(' ') );
 17495  0037EC  0E20               	movlw	32
 17496  0037EE  ECFF  F030         	call	i2_putch
 17497  0037F2                     i2l1417:
 17498  0037F2  0624               	decf	i2printf@width,f,c
 17499  0037F4  A0D8               	btfss	status,0,c
 17500  0037F6  0625               	decf	i2printf@width+1,f,c
 17501  0037F8  2824               	incf	i2printf@width,w,c
 17502  0037FA  E1F8               	bnz	i2l7127
 17503  0037FC  2825               	incf	i2printf@width+1,w,c
 17504  0037FE  B4D8               	btfsc	status,2,c
 17505  003800  D016               	goto	i2l1420
 17506  003802  D7F4               	goto	i2l1418
 17507  003804                     i2l7131:
 17508                           
 17509                           ;doprnt.c: 768: (putch(*cp++) );
 17510  003804  C01B  FFF6         	movff	i2printf@cp,tblptrl
 17511  003808  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
 17512  00380C  0E00               	movlw	low (__mediumconst shr (0+16))
 17513  00380E  6EF8               	movwf	tblptru,c
 17514  003810  0E0F               	movlw	(high __ramtop+-1)
 17515  003812  64F7               	cpfsgt	tblptrh,c
 17516  003814  D003               	bra	i2u498_47
 17517  003816  0008               	tblrd		*
 17518  003818  50F5               	movf	tablat,w,c
 17519  00381A  D005               	bra	i2u498_40
 17520  00381C                     i2u498_47:
 17521  00381C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17522  003820  CFF7 FFEA          	movff	tblptrh,fsr0h
 17523  003824  50EF               	movf	indf0,w,c
 17524  003826                     i2u498_40:
 17525  003826  ECFF  F030         	call	i2_putch
 17526  00382A  4A1B               	infsnz	i2printf@cp,f,c
 17527  00382C  2A1C               	incf	i2printf@cp+1,f,c
 17528  00382E                     i2l1420:
 17529  00382E  061F               	decf	i2printf@len,f,c
 17530  003830  A0D8               	btfss	status,0,c
 17531  003832  0620               	decf	i2printf@len+1,f,c
 17532  003834  281F               	incf	i2printf@len,w,c
 17533  003836  E1E6               	bnz	i2l7131
 17534  003838  2820               	incf	i2printf@len+1,w,c
 17535  00383A  B4D8               	btfsc	status,2,c
 17536  00383C  D12E               	goto	i2u518_40
 17537  00383E  D7E2               	goto	i2l1421
 17538  003840                     i2l1403:
 17539  003840  C00D  FFF6         	movff	i2printf@f,tblptrl
 17540  003844  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17541  003848  4A0D               	infsnz	i2printf@f,f,c
 17542  00384A  2A0E               	incf	i2printf@f+1,f,c
 17543  00384C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17544  00384C  6AF8               	clrf	tblptru,c
 17545  00384E                     	endif
 17546  00384E                     	if	0	;tblptru may be non-zero
 17547  00384E                     	endif
 17548  00384E  0008               	tblrd		*
 17549  003850  CFF5 F026          	movff	tablat,i2printf@c
 17550  003854  5026               	movf	i2printf@c,w,c
 17551                           
 17552                           ; Switch size 1, requested type "space"
 17553                           ; Number of cases is 5, Range of values is 0 to 120
 17554                           ; switch strategies available:
 17555                           ; Name         Instructions Cycles
 17556                           ; simple_byte           16     9 (average)
 17557                           ;	Chosen strategy is simple_byte
 17558  003856  0A00               	xorlw	0	; case 0
 17559  003858  B4D8               	btfsc	status,2,c
 17560  00385A  0012               	return	
 17561  00385C  0A64               	xorlw	100	; case 100
 17562  00385E  B4D8               	btfsc	status,2,c
 17563  003860  D00A               	goto	i2l1408
 17564  003862  0A0D               	xorlw	13	; case 105
 17565  003864  B4D8               	btfsc	status,2,c
 17566  003866  D007               	goto	i2l1408
 17567  003868  0A1A               	xorlw	26	; case 115
 17568  00386A  B4D8               	btfsc	status,2,c
 17569  00386C  D77A               	goto	i2l1410
 17570  00386E  0A0B               	xorlw	11	; case 120
 17571  003870  B4D8               	btfsc	status,2,c
 17572  003872  D775               	goto	i2l1409
 17573  003874  D112               	goto	i2u518_40
 17574  003876                     i2l1408:
 17575                           
 17576                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 17577  003876  BE23               	btfsc	i2printf@flag,7,c
 17578  003878  D015               	goto	i2l1424
 17579                           
 17580                           ;doprnt.c: 1253: {
 17581                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17582  00387A  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17583  00387E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17584  003882  CFDE F021          	movff	postinc2,i2printf@val
 17585  003886  CFDD F022          	movff	postdec2,i2printf@val+1
 17586  00388A  0E02               	movlw	2
 17587  00388C  261D               	addwf	i2printf@ap,f,c
 17588  00388E  0E00               	movlw	0
 17589  003890  221E               	addwfc	i2printf@ap+1,f,c
 17590                           
 17591                           ;doprnt.c: 1261: if((int)val < 0) {
 17592  003892  AE22               	btfss	i2printf@val+1,7,c
 17593  003894  D04A               	goto	i2l1427
 17594                           
 17595                           ;doprnt.c: 1262: flag |= 0x03;
 17596  003896  0E03               	movlw	3
 17597  003898  1223               	iorwf	i2printf@flag,f,c
 17598                           
 17599                           ;doprnt.c: 1263: val = -val;
 17600  00389A  6C21               	negf	i2printf@val,c
 17601  00389C  1E22               	comf	i2printf@val+1,f,c
 17602  00389E  B0D8               	btfsc	status,0,c
 17603  0038A0  2A22               	incf	i2printf@val+1,f,c
 17604                           
 17605                           ;doprnt.c: 1264: }
 17606                           ;doprnt.c: 1266: }
 17607  0038A2  D043               	goto	i2l1427
 17608  0038A4                     i2l1424:
 17609                           
 17610                           ;doprnt.c: 1268: else
 17611                           ;doprnt.c: 1273: {
 17612                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17613  0038A4  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17614  0038A8  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17615  0038AC  CFDE F021          	movff	postinc2,i2printf@val
 17616  0038B0  CFDD F022          	movff	postdec2,i2printf@val+1
 17617  0038B4  0E02               	movlw	2
 17618  0038B6  261D               	addwf	i2printf@ap,f,c
 17619  0038B8  0E00               	movlw	0
 17620  0038BA  221E               	addwfc	i2printf@ap+1,f,c
 17621                           
 17622                           ;doprnt.c: 1287: }
 17623                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 17624  0038BC  D036               	goto	i2l1427
 17625  0038BE                     
 17626                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17627  0038BE  0E01               	movlw	1
 17628  0038C0  6E26               	movwf	i2printf@c,c
 17629  0038C2                     i2l7157:
 17630  0038C2  0E05               	movlw	5
 17631  0038C4  1826               	xorwf	i2printf@c,w,c
 17632  0038C6  B4D8               	btfsc	status,2,c
 17633  0038C8  D038               	goto	i2l1432
 17634                           
 17635                           ;doprnt.c: 1306: if(val < dpowers[c])
 17636  0038CA  5026               	movf	i2printf@c,w,c
 17637  0038CC  0D02               	mullw	2
 17638  0038CE  0E64               	movlw	low _dpowers
 17639  0038D0  24F3               	addwf	prodl,w,c
 17640  0038D2  6EF6               	movwf	tblptrl,c
 17641  0038D4  0EFC               	movlw	high _dpowers
 17642  0038D6  20F4               	addwfc	prodh,w,c
 17643  0038D8  6EF7               	movwf	tblptrh,c
 17644  0038DA                     	if	1	;There are 3 active tblptr bytes
 17645  0038DA  6AF8               	clrf	tblptru,c
 17646  0038DC  0E00               	movlw	low (__mediumconst shr (0+16))
 17647  0038DE  22F8               	addwfc	tblptru,f,c
 17648  0038E0                     	endif
 17649  0038E0  0009               	tblrd		*+
 17650  0038E2  50F5               	movf	tablat,w,c
 17651  0038E4  5C21               	subwf	i2printf@val,w,c
 17652  0038E6  0009               	tblrd		*+
 17653  0038E8  50F5               	movf	tablat,w,c
 17654  0038EA  5822               	subwfb	i2printf@val+1,w,c
 17655  0038EC  A0D8               	btfss	status,0,c
 17656  0038EE  D025               	goto	i2l1432
 17657                           
 17658                           ;doprnt.c: 1307: break;
 17659  0038F0  2A26               	incf	i2printf@c,f,c
 17660  0038F2  D7E7               	goto	i2l7157
 17661  0038F4                     
 17662                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 17663  0038F4  0E01               	movlw	1
 17664  0038F6  6E26               	movwf	i2printf@c,c
 17665  0038F8                     i2l7171:
 17666  0038F8  0E04               	movlw	4
 17667  0038FA  1826               	xorwf	i2printf@c,w,c
 17668  0038FC  B4D8               	btfsc	status,2,c
 17669  0038FE  D01D               	goto	i2l1432
 17670                           
 17671                           ;doprnt.c: 1317: if(val < hexpowers[c])
 17672  003900  5026               	movf	i2printf@c,w,c
 17673  003902  0D02               	mullw	2
 17674  003904  0E6E               	movlw	low _hexpowers
 17675  003906  24F3               	addwf	prodl,w,c
 17676  003908  6EF6               	movwf	tblptrl,c
 17677  00390A  0EFC               	movlw	high _hexpowers
 17678  00390C  20F4               	addwfc	prodh,w,c
 17679  00390E  6EF7               	movwf	tblptrh,c
 17680  003910                     	if	1	;There are 3 active tblptr bytes
 17681  003910  6AF8               	clrf	tblptru,c
 17682  003912  0E00               	movlw	low (__mediumconst shr (0+16))
 17683  003914  22F8               	addwfc	tblptru,f,c
 17684  003916                     	endif
 17685  003916  0009               	tblrd		*+
 17686  003918  50F5               	movf	tablat,w,c
 17687  00391A  5C21               	subwf	i2printf@val,w,c
 17688  00391C  0009               	tblrd		*+
 17689  00391E  50F5               	movf	tablat,w,c
 17690  003920  5822               	subwfb	i2printf@val+1,w,c
 17691  003922  A0D8               	btfss	status,0,c
 17692  003924  D00A               	goto	i2l1432
 17693                           
 17694                           ;doprnt.c: 1318: break;
 17695  003926  2A26               	incf	i2printf@c,f,c
 17696  003928  D7E7               	goto	i2l7171
 17697  00392A                     i2l1427:
 17698  00392A  5023               	movf	i2printf@flag,w,c
 17699  00392C  0B80               	andlw	128
 17700                           
 17701                           ; Switch size 1, requested type "space"
 17702                           ; Number of cases is 2, Range of values is 0 to 128
 17703                           ; switch strategies available:
 17704                           ; Name         Instructions Cycles
 17705                           ; simple_byte            7     4 (average)
 17706                           ;	Chosen strategy is simple_byte
 17707  00392E  0A00               	xorlw	0	; case 0
 17708  003930  B4D8               	btfsc	status,2,c
 17709  003932  D7C5               	goto	i2l1428
 17710  003934  0A80               	xorlw	128	; case 128
 17711  003936  B4D8               	btfsc	status,2,c
 17712  003938  D7DD               	goto	i2l1433
 17713  00393A                     i2l1432:
 17714                           
 17715                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17716  00393A  5024               	movf	i2printf@width,w,c
 17717  00393C  1025               	iorwf	i2printf@width+1,w,c
 17718  00393E  B4D8               	btfsc	status,2,c
 17719  003940  D009               	goto	i2l1437
 17720  003942  C023  F015         	movff	i2printf@flag,??i2_printf
 17721  003946  0E03               	movlw	3
 17722  003948  1615               	andwf	??i2_printf,f,c
 17723  00394A  B4D8               	btfsc	status,2,c
 17724  00394C  D003               	goto	i2l1437
 17725                           
 17726                           ;doprnt.c: 1346: width--;
 17727  00394E  0624               	decf	i2printf@width,f,c
 17728  003950  A0D8               	btfss	status,0,c
 17729  003952  0625               	decf	i2printf@width+1,f,c
 17730  003954                     i2l1437:
 17731                           
 17732                           ;doprnt.c: 1381: if(width > c)
 17733  003954  0E80               	movlw	128
 17734  003956  BE26               	btfsc	i2printf@c,7,c
 17735  003958  0E7F               	movlw	127
 17736  00395A  6E15               	movwf	??i2_printf& (0+255),c
 17737  00395C  5024               	movf	i2printf@width,w,c
 17738  00395E  5C26               	subwf	i2printf@c,w,c
 17739  003960  5025               	movf	i2printf@width+1,w,c
 17740  003962  0A80               	xorlw	128
 17741  003964  5815               	subwfb	??i2_printf& (0+255),w,c
 17742  003966  B0D8               	btfsc	status,0,c
 17743  003968  D007               	goto	i2l1438
 17744                           
 17745                           ;doprnt.c: 1382: width -= c;
 17746  00396A  5026               	movf	i2printf@c,w,c
 17747  00396C  5E24               	subwf	i2printf@width,f,c
 17748  00396E  0E00               	movlw	0
 17749  003970  BE26               	btfsc	i2printf@c,7,c
 17750  003972  0EFF               	movlw	255
 17751  003974  5A25               	subwfb	i2printf@width+1,f,c
 17752  003976  D004               	goto	i2l1439
 17753  003978                     i2l1438:
 17754                           
 17755                           ;doprnt.c: 1383: else
 17756                           ;doprnt.c: 1384: width = 0;
 17757  003978  0E00               	movlw	0
 17758  00397A  6E25               	movwf	i2printf@width+1,c
 17759  00397C  0E00               	movlw	0
 17760  00397E  6E24               	movwf	i2printf@width,c
 17761  003980                     i2l1439:
 17762                           
 17763                           ;doprnt.c: 1387: if(flag & 0x04) {
 17764  003980  A423               	btfss	i2printf@flag,2,c
 17765  003982  D014               	goto	i2l1440
 17766                           
 17767                           ;doprnt.c: 1392: if(flag & 0x03)
 17768  003984  C023  F015         	movff	i2printf@flag,??i2_printf
 17769  003988  0E03               	movlw	3
 17770  00398A  1615               	andwf	??i2_printf,f,c
 17771  00398C  B4D8               	btfsc	status,2,c
 17772  00398E  D003               	goto	i2l1441
 17773                           
 17774                           ;doprnt.c: 1393: (putch('-') );
 17775  003990  0E2D               	movlw	45
 17776  003992  ECFF  F030         	call	i2_putch
 17777  003996                     i2l1441:
 17778                           
 17779                           ;doprnt.c: 1415: if(width)
 17780  003996  5024               	movf	i2printf@width,w,c
 17781  003998  1025               	iorwf	i2printf@width+1,w,c
 17782  00399A  B4D8               	btfsc	status,2,c
 17783  00399C  D01E               	goto	i2l1449
 17784                           
 17785                           ;doprnt.c: 1417: (putch('0') );
 17786                           
 17787                           ;doprnt.c: 1416: do
 17788  00399E  0E30               	movlw	48
 17789  0039A0  ECFF  F030         	call	i2_putch
 17790                           
 17791                           ;doprnt.c: 1418: while(--width);
 17792  0039A4  0624               	decf	i2printf@width,f,c
 17793  0039A6  A0D8               	btfss	status,0,c
 17794  0039A8  0625               	decf	i2printf@width+1,f,c
 17795  0039AA  D7F5               	goto	i2l1441
 17796  0039AC                     i2l1440:
 17797                           
 17798                           ;doprnt.c: 1422: {
 17799                           ;doprnt.c: 1424: if(width
 17800                           ;doprnt.c: 1428: )
 17801  0039AC  5024               	movf	i2printf@width,w,c
 17802  0039AE  1025               	iorwf	i2printf@width+1,w,c
 17803  0039B0  B4D8               	btfsc	status,2,c
 17804  0039B2  D00A               	goto	i2u516_40
 17805  0039B4                     i2u515_40:
 17806                           
 17807                           ;doprnt.c: 1430: (putch(' ') );
 17808                           
 17809                           ;doprnt.c: 1429: do
 17810  0039B4  0E20               	movlw	32
 17811  0039B6  ECFF  F030         	call	i2_putch
 17812                           
 17813                           ;doprnt.c: 1431: while(--width);
 17814  0039BA  0624               	decf	i2printf@width,f,c
 17815  0039BC  A0D8               	btfss	status,0,c
 17816  0039BE  0625               	decf	i2printf@width+1,f,c
 17817  0039C0  5024               	movf	i2printf@width,w,c
 17818  0039C2  1025               	iorwf	i2printf@width+1,w,c
 17819  0039C4  A4D8               	btfss	status,2,c
 17820  0039C6  D7F6               	goto	i2u515_40
 17821  0039C8                     i2u516_40:
 17822                           
 17823                           ;doprnt.c: 1438: if(flag & 0x03)
 17824  0039C8  C023  F015         	movff	i2printf@flag,??i2_printf
 17825  0039CC  0E03               	movlw	3
 17826  0039CE  1615               	andwf	??i2_printf,f,c
 17827  0039D0  B4D8               	btfsc	status,2,c
 17828  0039D2  D003               	goto	i2l1449
 17829                           
 17830                           ;doprnt.c: 1439: (putch('-') );
 17831  0039D4  0E2D               	movlw	45
 17832  0039D6  ECFF  F030         	call	i2_putch
 17833  0039DA                     i2l1449:
 17834                           
 17835                           ;doprnt.c: 1469: }
 17836                           ;doprnt.c: 1472: prec = c;
 17837  0039DA  C026  F01A         	movff	i2printf@c,i2printf@prec
 17838                           
 17839                           ;doprnt.c: 1474: while(prec--) {
 17840  0039DE  D059               	goto	i2l1450
 17841  0039E0                     
 17842                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17843  0039E0  501A               	movf	i2printf@prec,w,c
 17844  0039E2  0D02               	mullw	2
 17845  0039E4  0E64               	movlw	low _dpowers
 17846  0039E6  24F3               	addwf	prodl,w,c
 17847  0039E8  6EF6               	movwf	tblptrl,c
 17848  0039EA  0EFC               	movlw	high _dpowers
 17849  0039EC  20F4               	addwfc	prodh,w,c
 17850  0039EE  6EF7               	movwf	tblptrh,c
 17851  0039F0                     	if	1	;There are 3 active tblptr bytes
 17852  0039F0  6AF8               	clrf	tblptru,c
 17853  0039F2  0E00               	movlw	low (__mediumconst shr (0+16))
 17854  0039F4  22F8               	addwfc	tblptru,f,c
 17855  0039F6                     	endif
 17856  0039F6  0009               	tblrd		*+
 17857  0039F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 17858  0039FC  000A               	tblrd		*-
 17859  0039FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 17860  003A02  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 17861  003A06  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17862  003A0A  ECD0  F02E         	call	i2___lwdiv	;wreg free
 17863  003A0E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 17864  003A12  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 17865  003A16  0E00               	movlw	0
 17866  003A18  6E0B               	movwf	i2___lwmod@divisor+1,c
 17867  003A1A  0E0A               	movlw	10
 17868  003A1C  6E0A               	movwf	i2___lwmod@divisor,c
 17869  003A1E  ECAF  F02F         	call	i2___lwmod	;wreg free
 17870  003A22  5008               	movf	?i2___lwmod,w,c
 17871  003A24  0F30               	addlw	48
 17872  003A26  6E26               	movwf	i2printf@c,c
 17873                           
 17874                           ;doprnt.c: 1491: break;
 17875  003A28  D031               	goto	i2l1454
 17876  003A2A                     
 17877                           ;doprnt.c: 1499: {
 17878                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 17879  003A2A  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 17880  003A2E  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17881  003A32  501A               	movf	i2printf@prec,w,c
 17882  003A34  0D02               	mullw	2
 17883  003A36  0E6E               	movlw	low _hexpowers
 17884  003A38  24F3               	addwf	prodl,w,c
 17885  003A3A  6EF6               	movwf	tblptrl,c
 17886  003A3C  0EFC               	movlw	high _hexpowers
 17887  003A3E  20F4               	addwfc	prodh,w,c
 17888  003A40  6EF7               	movwf	tblptrh,c
 17889  003A42                     	if	1	;There are 3 active tblptr bytes
 17890  003A42  6AF8               	clrf	tblptru,c
 17891  003A44  0E00               	movlw	low (__mediumconst shr (0+16))
 17892  003A46  22F8               	addwfc	tblptru,f,c
 17893  003A48                     	endif
 17894  003A48  0009               	tblrd		*+
 17895  003A4A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 17896  003A4E  000A               	tblrd		*-
 17897  003A50  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 17898  003A54  ECD0  F02E         	call	i2___lwdiv	;wreg free
 17899  003A58  5001               	movf	?i2___lwdiv,w,c
 17900  003A5A  0B0F               	andlw	15
 17901  003A5C  6E19               	movwf	i2printf@idx,c
 17902                           
 17903                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 17904  003A5E  5019               	movf	i2printf@idx,w,c
 17905  003A60  0D01               	mullw	1
 17906  003A62  0EDC               	movlw	low STR_99
 17907  003A64  24F3               	addwf	prodl,w,c
 17908  003A66  6EF6               	movwf	tblptrl,c
 17909  003A68  0EFD               	movlw	high STR_99
 17910  003A6A  20F4               	addwfc	prodh,w,c
 17911  003A6C  6EF7               	movwf	tblptrh,c
 17912  003A6E                     	if	1	;There are 3 active tblptr bytes
 17913  003A6E  6AF8               	clrf	tblptru,c
 17914  003A70  0E00               	movlw	low (__mediumconst shr (0+16))
 17915  003A72  22F8               	addwfc	tblptru,f,c
 17916  003A74                     	endif
 17917  003A74  0008               	tblrd		*
 17918  003A76  CFF5 F026          	movff	tablat,i2printf@c
 17919                           
 17920                           ;doprnt.c: 1523: }
 17921                           
 17922                           ;doprnt.c: 1508: }
 17923                           ;doprnt.c: 1510: break;
 17924  003A7A  D008               	goto	i2l1454
 17925  003A7C  5023               	movf	i2printf@flag,w,c
 17926  003A7E  0B80               	andlw	128
 17927                           
 17928                           ; Switch size 1, requested type "space"
 17929                           ; Number of cases is 2, Range of values is 0 to 128
 17930                           ; switch strategies available:
 17931                           ; Name         Instructions Cycles
 17932                           ; simple_byte            7     4 (average)
 17933                           ;	Chosen strategy is simple_byte
 17934  003A80  0A00               	xorlw	0	; case 0
 17935  003A82  B4D8               	btfsc	status,2,c
 17936  003A84  D7AD               	goto	i2l1453
 17937  003A86  0A80               	xorlw	128	; case 128
 17938  003A88  B4D8               	btfsc	status,2,c
 17939  003A8A  D7CF               	goto	i2l1455
 17940  003A8C                     i2l1454:
 17941                           
 17942                           ;doprnt.c: 1524: (putch(c) );
 17943  003A8C  5026               	movf	i2printf@c,w,c
 17944  003A8E  ECFF  F030         	call	i2_putch
 17945  003A92                     i2l1450:
 17946  003A92  061A               	decf	i2printf@prec,f,c
 17947  003A94  281A               	incf	i2printf@prec,w,c
 17948  003A96  A4D8               	btfss	status,2,c
 17949  003A98  D7F1               	goto	i2l1452
 17950  003A9A                     i2u518_40:
 17951  003A9A  C00D  FFF6         	movff	i2printf@f,tblptrl
 17952  003A9E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17953  003AA2  4A0D               	infsnz	i2printf@f,f,c
 17954  003AA4  2A0E               	incf	i2printf@f+1,f,c
 17955  003AA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17956  003AA6  6AF8               	clrf	tblptru,c
 17957  003AA8                     	endif
 17958  003AA8                     	if	0	;tblptru may be non-zero
 17959  003AA8                     	endif
 17960  003AA8  0008               	tblrd		*
 17961  003AAA  CFF5 F026          	movff	tablat,i2printf@c
 17962  003AAE  5026               	movf	i2printf@c,w,c
 17963  003AB0  B4D8               	btfsc	status,2,c
 17964  003AB2  0012               	return	
 17965  003AB4  D5F8               	goto	i2l1392
 17966  003AB6                     __end_ofi2_printf:
 17967                           	opt stack 0
 17968                           pclatu	equ	0xFFB
 17969                           pclath	equ	0xFFA
 17970                           tblptru	equ	0xFF8
 17971                           tblptrh	equ	0xFF7
 17972                           tblptrl	equ	0xFF6
 17973                           tablat	equ	0xFF5
 17974                           prodh	equ	0xFF4
 17975                           prodl	equ	0xFF3
 17976                           intcon	equ	0xFF2
 17977                           intcon3	equ	0xFF0
 17978                           indf0	equ	0xFEF
 17979                           postinc0	equ	0xFEE
 17980                           fsr0h	equ	0xFEA
 17981                           fsr0l	equ	0xFE9
 17982                           wreg	equ	0xFE8
 17983                           postdec1	equ	0xFE5
 17984                           fsr1h	equ	0xFE2
 17985                           fsr1l	equ	0xFE1
 17986                           indf2	equ	0xFDF
 17987                           postinc2	equ	0xFDE
 17988                           postdec2	equ	0xFDD
 17989                           fsr2h	equ	0xFDA
 17990                           fsr2l	equ	0xFD9
 17991                           status	equ	0xFD8
 17992                           
 17993 ;; *************** function i2_putch *****************
 17994 ;; Defined at:
 17995 ;;		line 24 in file "lcd.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  data            1    wreg     unsigned char 
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;  data            1    2[COMRAM] unsigned char 
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, status,2, status,0, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;Total ram usage:        1 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    1
 18016 ;; This function calls:
 18017 ;;		i2_lcdNibble
 18018 ;; This function is called by:
 18019 ;;		_interruptHandler
 18020 ;;		i2_printf
 18021 ;; This function uses a non-reentrant model
 18022 ;;
 18023                           
 18024                           	psect	text45
 18025  0061FE                     __ptext45:
 18026                           	opt stack 0
 18027  0061FE                     i2_putch:
 18028                           	opt stack 22
 18029                           
 18030                           ;incstack = 0
 18031                           ;i2putch@data stored from wreg
 18032  0061FE  6E03               	movwf	i2putch@data,c
 18033                           
 18034                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 18035  006200  848C               	bsf	3980,2,c	;volatile
 18036                           
 18037                           ;lcd.c: 33: lcdNibble(data);
 18038  006202  5003               	movf	i2putch@data,w,c
 18039  006204  EC64  F02C         	call	i2_lcdNibble
 18040                           
 18041                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 18042  006208  0EA0               	movlw	160
 18043  00620A                     i2u771_47:
 18044  00620A  D000               	nop2	
 18045  00620C  2EE8               	decfsz	wreg,f,c
 18046  00620E  D7FD               	bra	i2u771_47
 18047  006210  0012               	return		;funcret
 18048  006212                     __end_ofi2_putch:
 18049                           	opt stack 0
 18050                           pclatu	equ	0xFFB
 18051                           pclath	equ	0xFFA
 18052                           tblptru	equ	0xFF8
 18053                           tblptrh	equ	0xFF7
 18054                           tblptrl	equ	0xFF6
 18055                           tablat	equ	0xFF5
 18056                           prodh	equ	0xFF4
 18057                           prodl	equ	0xFF3
 18058                           intcon	equ	0xFF2
 18059                           intcon3	equ	0xFF0
 18060                           indf0	equ	0xFEF
 18061                           postinc0	equ	0xFEE
 18062                           fsr0h	equ	0xFEA
 18063                           fsr0l	equ	0xFE9
 18064                           wreg	equ	0xFE8
 18065                           postdec1	equ	0xFE5
 18066                           fsr1h	equ	0xFE2
 18067                           fsr1l	equ	0xFE1
 18068                           indf2	equ	0xFDF
 18069                           postinc2	equ	0xFDE
 18070                           postdec2	equ	0xFDD
 18071                           fsr2h	equ	0xFDA
 18072                           fsr2l	equ	0xFD9
 18073                           status	equ	0xFD8
 18074                           
 18075 ;; *************** function i2_isdigit *****************
 18076 ;; Defined at:
 18077 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 18078 ;; Parameters:    Size  Location     Type
 18079 ;;  c               1    wreg     unsigned char 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;  c               1    2[COMRAM] unsigned char 
 18082 ;; Return value:  Size  Location     Type
 18083 ;;		None               void
 18084 ;; Registers used:
 18085 ;;		wreg, status,2, status,0
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18094 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;Total ram usage:        3 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; This function calls:
 18098 ;;		Nothing
 18099 ;; This function is called by:
 18100 ;;		i2_printf
 18101 ;; This function uses a non-reentrant model
 18102 ;;
 18103                           
 18104                           	psect	text46
 18105  006188                     __ptext46:
 18106                           	opt stack 0
 18107  006188                     i2_isdigit:
 18108                           	opt stack 22
 18109                           
 18110                           ;incstack = 0
 18111                           ;i2isdigit@c stored from wreg
 18112  006188  6E03               	movwf	i2isdigit@c,c
 18113  00618A  0E00               	movlw	0
 18114  00618C  6E02               	movwf	i2_isdigit$2258,c
 18115  00618E  0E3A               	movlw	58
 18116  006190  6003               	cpfslt	i2isdigit@c,c
 18117  006192  D005               	goto	i2l1788
 18118  006194  0E2F               	movlw	47
 18119  006196  6403               	cpfsgt	i2isdigit@c,c
 18120  006198  D002               	goto	i2l1788
 18121  00619A  0E01               	movlw	1
 18122  00619C  6E02               	movwf	i2_isdigit$2258,c
 18123  00619E                     i2l1788:
 18124  00619E  C002  F001         	movff	i2_isdigit$2258,??i2_isdigit
 18125  0061A2  3001               	rrcf	??i2_isdigit,w,c
 18126  0061A4  0012               	return	
 18127  0061A6                     __end_ofi2_isdigit:
 18128                           	opt stack 0
 18129                           pclatu	equ	0xFFB
 18130                           pclath	equ	0xFFA
 18131                           tblptru	equ	0xFF8
 18132                           tblptrh	equ	0xFF7
 18133                           tblptrl	equ	0xFF6
 18134                           tablat	equ	0xFF5
 18135                           prodh	equ	0xFF4
 18136                           prodl	equ	0xFF3
 18137                           intcon	equ	0xFF2
 18138                           intcon3	equ	0xFF0
 18139                           indf0	equ	0xFEF
 18140                           postinc0	equ	0xFEE
 18141                           fsr0h	equ	0xFEA
 18142                           fsr0l	equ	0xFE9
 18143                           wreg	equ	0xFE8
 18144                           postdec1	equ	0xFE5
 18145                           fsr1h	equ	0xFE2
 18146                           fsr1l	equ	0xFE1
 18147                           indf2	equ	0xFDF
 18148                           postinc2	equ	0xFDE
 18149                           postdec2	equ	0xFDD
 18150                           fsr2h	equ	0xFDA
 18151                           fsr2l	equ	0xFD9
 18152                           status	equ	0xFD8
 18153                           
 18154 ;; *************** function i2___lwmod *****************
 18155 ;; Defined at:
 18156 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 18157 ;; Parameters:    Size  Location     Type
 18158 ;;  dividend        2    7[COMRAM] unsigned int 
 18159 ;;  divisor         2    9[COMRAM] unsigned int 
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;  __lwmod         1   11[COMRAM] unsigned char 
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  2    7[COMRAM] unsigned int 
 18164 ;; Registers used:
 18165 ;;		wreg, status,2, status,0
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;Total ram usage:        5 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; This function calls:
 18178 ;;		Nothing
 18179 ;; This function is called by:
 18180 ;;		i2_printf
 18181 ;; This function uses a non-reentrant model
 18182 ;;
 18183                           
 18184                           	psect	text47
 18185  005F5E                     __ptext47:
 18186                           	opt stack 0
 18187  005F5E                     i2___lwmod:
 18188                           	opt stack 22
 18189                           
 18190                           ;incstack = 0
 18191  005F5E  500A               	movf	i2___lwmod@divisor,w,c
 18192  005F60  100B               	iorwf	i2___lwmod@divisor+1,w,c
 18193  005F62  B4D8               	btfsc	status,2,c
 18194  005F64  D018               	goto	i2l1882
 18195  005F66  0E01               	movlw	1
 18196  005F68  6E0C               	movwf	i2___lwmod@counter,c
 18197  005F6A  D004               	goto	i2l1877
 18198  005F6C  90D8               	bcf	status,0,c
 18199  005F6E  360A               	rlcf	i2___lwmod@divisor,f,c
 18200  005F70  360B               	rlcf	i2___lwmod@divisor+1,f,c
 18201  005F72  2A0C               	incf	i2___lwmod@counter,f,c
 18202  005F74                     i2l1877:
 18203  005F74  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 18204  005F76  D7FA               	goto	i2l1878
 18205  005F78                     i2u414_40:
 18206  005F78  500A               	movf	i2___lwmod@divisor,w,c
 18207  005F7A  5C08               	subwf	i2___lwmod@dividend,w,c
 18208  005F7C  500B               	movf	i2___lwmod@divisor+1,w,c
 18209  005F7E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 18210  005F80  A0D8               	btfss	status,0,c
 18211  005F82  D004               	goto	i2l1881
 18212  005F84  500A               	movf	i2___lwmod@divisor,w,c
 18213  005F86  5E08               	subwf	i2___lwmod@dividend,f,c
 18214  005F88  500B               	movf	i2___lwmod@divisor+1,w,c
 18215  005F8A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 18216  005F8C                     i2l1881:
 18217  005F8C  90D8               	bcf	status,0,c
 18218  005F8E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 18219  005F90  320A               	rrcf	i2___lwmod@divisor,f,c
 18220  005F92  2E0C               	decfsz	i2___lwmod@counter,f,c
 18221  005F94  D7F1               	goto	i2u414_40
 18222  005F96                     i2l1882:
 18223  005F96  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 18224  005F9A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18225  005F9E  0012               	return		;funcret
 18226  005FA0                     __end_ofi2___lwmod:
 18227                           	opt stack 0
 18228                           pclatu	equ	0xFFB
 18229                           pclath	equ	0xFFA
 18230                           tblptru	equ	0xFF8
 18231                           tblptrh	equ	0xFF7
 18232                           tblptrl	equ	0xFF6
 18233                           tablat	equ	0xFF5
 18234                           prodh	equ	0xFF4
 18235                           prodl	equ	0xFF3
 18236                           intcon	equ	0xFF2
 18237                           intcon3	equ	0xFF0
 18238                           indf0	equ	0xFEF
 18239                           postinc0	equ	0xFEE
 18240                           fsr0h	equ	0xFEA
 18241                           fsr0l	equ	0xFE9
 18242                           wreg	equ	0xFE8
 18243                           postdec1	equ	0xFE5
 18244                           fsr1h	equ	0xFE2
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function i2___lwdiv *****************
 18254 ;; Defined at:
 18255 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  dividend        2    0[COMRAM] unsigned int 
 18258 ;;  divisor         2    2[COMRAM] unsigned int 
 18259 ;; Auto vars:     Size  Location     Type
 18260 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 18261 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 18262 ;; Return value:  Size  Location     Type
 18263 ;;                  2    0[COMRAM] unsigned int 
 18264 ;; Registers used:
 18265 ;;		wreg, status,2, status,0
 18266 ;; Tracked objects:
 18267 ;;		On entry : 0/0
 18268 ;;		On exit  : 0/0
 18269 ;;		Unchanged: 0/0
 18270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18274 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18275 ;;Total ram usage:        7 bytes
 18276 ;; Hardware stack levels used:    1
 18277 ;; This function calls:
 18278 ;;		Nothing
 18279 ;; This function is called by:
 18280 ;;		i2_printf
 18281 ;; This function uses a non-reentrant model
 18282 ;;
 18283                           
 18284                           	psect	text48
 18285  005DA0                     __ptext48:
 18286                           	opt stack 0
 18287  005DA0                     i2___lwdiv:
 18288                           	opt stack 22
 18289                           
 18290                           ;incstack = 0
 18291  005DA0  0E00               	movlw	0
 18292  005DA2  6E06               	movwf	i2___lwdiv@quotient+1,c
 18293  005DA4  0E00               	movlw	0
 18294  005DA6  6E05               	movwf	i2___lwdiv@quotient,c
 18295  005DA8  5003               	movf	i2___lwdiv@divisor,w,c
 18296  005DAA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 18297  005DAC  B4D8               	btfsc	status,2,c
 18298  005DAE  D01C               	goto	i2l1872
 18299  005DB0  0E01               	movlw	1
 18300  005DB2  6E07               	movwf	i2___lwdiv@counter,c
 18301  005DB4  D004               	goto	i2l1867
 18302  005DB6  90D8               	bcf	status,0,c
 18303  005DB8  3603               	rlcf	i2___lwdiv@divisor,f,c
 18304  005DBA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 18305  005DBC  2A07               	incf	i2___lwdiv@counter,f,c
 18306  005DBE                     i2l1867:
 18307  005DBE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 18308  005DC0  D7FA               	goto	i2l1868
 18309  005DC2                     i2u411_40:
 18310  005DC2  90D8               	bcf	status,0,c
 18311  005DC4  3605               	rlcf	i2___lwdiv@quotient,f,c
 18312  005DC6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 18313  005DC8  5003               	movf	i2___lwdiv@divisor,w,c
 18314  005DCA  5C01               	subwf	i2___lwdiv@dividend,w,c
 18315  005DCC  5004               	movf	i2___lwdiv@divisor+1,w,c
 18316  005DCE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 18317  005DD0  A0D8               	btfss	status,0,c
 18318  005DD2  D005               	goto	i2l1871
 18319  005DD4  5003               	movf	i2___lwdiv@divisor,w,c
 18320  005DD6  5E01               	subwf	i2___lwdiv@dividend,f,c
 18321  005DD8  5004               	movf	i2___lwdiv@divisor+1,w,c
 18322  005DDA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 18323  005DDC  8005               	bsf	i2___lwdiv@quotient,0,c
 18324  005DDE                     i2l1871:
 18325  005DDE  90D8               	bcf	status,0,c
 18326  005DE0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 18327  005DE2  3203               	rrcf	i2___lwdiv@divisor,f,c
 18328  005DE4  2E07               	decfsz	i2___lwdiv@counter,f,c
 18329  005DE6  D7ED               	goto	i2u411_40
 18330  005DE8                     i2l1872:
 18331  005DE8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18332  005DEC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18333  005DF0  0012               	return		;funcret
 18334  005DF2                     __end_ofi2___lwdiv:
 18335                           	opt stack 0
 18336                           pclatu	equ	0xFFB
 18337                           pclath	equ	0xFFA
 18338                           tblptru	equ	0xFF8
 18339                           tblptrh	equ	0xFF7
 18340                           tblptrl	equ	0xFF6
 18341                           tablat	equ	0xFF5
 18342                           prodh	equ	0xFF4
 18343                           prodl	equ	0xFF3
 18344                           intcon	equ	0xFF2
 18345                           intcon3	equ	0xFF0
 18346                           indf0	equ	0xFEF
 18347                           postinc0	equ	0xFEE
 18348                           fsr0h	equ	0xFEA
 18349                           fsr0l	equ	0xFE9
 18350                           wreg	equ	0xFE8
 18351                           postdec1	equ	0xFE5
 18352                           fsr1h	equ	0xFE2
 18353                           fsr1l	equ	0xFE1
 18354                           indf2	equ	0xFDF
 18355                           postinc2	equ	0xFDE
 18356                           postdec2	equ	0xFDD
 18357                           fsr2h	equ	0xFDA
 18358                           fsr2l	equ	0xFD9
 18359                           status	equ	0xFD8
 18360                           
 18361 ;; *************** function i2_initLCD *****************
 18362 ;; Defined at:
 18363 ;;		line 60 in file "lcd.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;		None
 18366 ;; Auto vars:     Size  Location     Type
 18367 ;;		None
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  1    wreg      void 
 18370 ;; Registers used:
 18371 ;;		wreg, status,2, status,0, cstack
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18381 ;;Total ram usage:        1 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    2
 18384 ;; This function calls:
 18385 ;;		i2_lcdInst
 18386 ;; This function is called by:
 18387 ;;		_interruptHandler
 18388 ;; This function uses a non-reentrant model
 18389 ;;
 18390                           
 18391                           	psect	text49
 18392  005E3E                     __ptext49:
 18393                           	opt stack 0
 18394  005E3E                     i2_initLCD:
 18395                           	opt stack 21
 18396                           
 18397                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
 18398                           
 18399                           ;incstack = 0
 18400  005E3E  0E9C               	movlw	156
 18401  005E40  6E04               	movwf	??i2_initLCD& (0+255),c
 18402  005E42  0ED7               	movlw	215
 18403  005E44                     i2u772_47:
 18404  005E44  2EE8               	decfsz	wreg,f,c
 18405  005E46  D7FE               	bra	i2u772_47
 18406  005E48  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 18407  005E4A  D7FC               	bra	i2u772_47
 18408  005E4C  F000               	nop	
 18409                           
 18410                           ;lcd.c: 69: lcdInst(0b00110011);
 18411  005E4E  0E33               	movlw	51
 18412  005E50  EC09  F031         	call	i2_lcdInst
 18413                           
 18414                           ;lcd.c: 70: lcdInst(0b00110010);
 18415  005E54  0E32               	movlw	50
 18416  005E56  EC09  F031         	call	i2_lcdInst
 18417                           
 18418                           ;lcd.c: 71: lcdInst(0b00101000);
 18419  005E5A  0E28               	movlw	40
 18420  005E5C  EC09  F031         	call	i2_lcdInst
 18421                           
 18422                           ;lcd.c: 72: lcdInst(0b00001111);
 18423  005E60  0E0F               	movlw	15
 18424  005E62  EC09  F031         	call	i2_lcdInst
 18425                           
 18426                           ;lcd.c: 73: lcdInst(0b00000110);
 18427  005E66  0E06               	movlw	6
 18428  005E68  EC09  F031         	call	i2_lcdInst
 18429                           
 18430                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 18431  005E6C  0E01               	movlw	1
 18432  005E6E  EC09  F031         	call	i2_lcdInst
 18433  005E72  0E9C               	movlw	156
 18434  005E74  6E04               	movwf	??i2_initLCD& (0+255),c
 18435  005E76  0ED7               	movlw	215
 18436  005E78                     i2u773_47:
 18437  005E78  2EE8               	decfsz	wreg,f,c
 18438  005E7A  D7FE               	bra	i2u773_47
 18439  005E7C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 18440  005E7E  D7FC               	bra	i2u773_47
 18441  005E80  F000               	nop	
 18442                           
 18443                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 18444  005E82  0E0F               	movlw	15
 18445  005E84  EC09  F031         	call	i2_lcdInst
 18446  005E88  0012               	return		;funcret
 18447  005E8A                     __end_ofi2_initLCD:
 18448                           	opt stack 0
 18449                           pclatu	equ	0xFFB
 18450                           pclath	equ	0xFFA
 18451                           tblptru	equ	0xFF8
 18452                           tblptrh	equ	0xFF7
 18453                           tblptrl	equ	0xFF6
 18454                           tablat	equ	0xFF5
 18455                           prodh	equ	0xFF4
 18456                           prodl	equ	0xFF3
 18457                           intcon	equ	0xFF2
 18458                           intcon3	equ	0xFF0
 18459                           indf0	equ	0xFEF
 18460                           postinc0	equ	0xFEE
 18461                           fsr0h	equ	0xFEA
 18462                           fsr0l	equ	0xFE9
 18463                           wreg	equ	0xFE8
 18464                           postdec1	equ	0xFE5
 18465                           fsr1h	equ	0xFE2
 18466                           fsr1l	equ	0xFE1
 18467                           indf2	equ	0xFDF
 18468                           postinc2	equ	0xFDE
 18469                           postdec2	equ	0xFDD
 18470                           fsr2h	equ	0xFDA
 18471                           fsr2l	equ	0xFD9
 18472                           status	equ	0xFD8
 18473                           
 18474 ;; *************** function i2_lcdInst *****************
 18475 ;; Defined at:
 18476 ;;		line 11 in file "lcd.c"
 18477 ;; Parameters:    Size  Location     Type
 18478 ;;  data            1    wreg     unsigned char 
 18479 ;; Auto vars:     Size  Location     Type
 18480 ;;  data            1    2[COMRAM] unsigned char 
 18481 ;; Return value:  Size  Location     Type
 18482 ;;                  1    wreg      void 
 18483 ;; Registers used:
 18484 ;;		wreg, status,2, status,0, cstack
 18485 ;; Tracked objects:
 18486 ;;		On entry : 0/0
 18487 ;;		On exit  : 0/0
 18488 ;;		Unchanged: 0/0
 18489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;Total ram usage:        1 bytes
 18495 ;; Hardware stack levels used:    1
 18496 ;; Hardware stack levels required when called:    1
 18497 ;; This function calls:
 18498 ;;		i2_lcdNibble
 18499 ;; This function is called by:
 18500 ;;		_interruptHandler
 18501 ;;		i2_initLCD
 18502 ;; This function uses a non-reentrant model
 18503 ;;
 18504                           
 18505                           	psect	text50
 18506  006212                     __ptext50:
 18507                           	opt stack 0
 18508  006212                     i2_lcdInst:
 18509                           	opt stack 22
 18510                           
 18511                           ;incstack = 0
 18512                           ;i2lcdInst@data stored from wreg
 18513  006212  6E03               	movwf	i2lcdInst@data,c
 18514                           
 18515                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 18516  006214  948C               	bcf	3980,2,c	;volatile
 18517                           
 18518                           ;lcd.c: 20: lcdNibble(data);
 18519  006216  5003               	movf	i2lcdInst@data,w,c
 18520  006218  EC64  F02C         	call	i2_lcdNibble
 18521                           
 18522                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 18523  00621C  0EA0               	movlw	160
 18524  00621E                     i2u774_47:
 18525  00621E  D000               	nop2	
 18526  006220  2EE8               	decfsz	wreg,f,c
 18527  006222  D7FD               	bra	i2u774_47
 18528  006224  0012               	return		;funcret
 18529  006226                     __end_ofi2_lcdInst:
 18530                           	opt stack 0
 18531                           pclatu	equ	0xFFB
 18532                           pclath	equ	0xFFA
 18533                           tblptru	equ	0xFF8
 18534                           tblptrh	equ	0xFF7
 18535                           tblptrl	equ	0xFF6
 18536                           tablat	equ	0xFF5
 18537                           prodh	equ	0xFF4
 18538                           prodl	equ	0xFF3
 18539                           intcon	equ	0xFF2
 18540                           intcon3	equ	0xFF0
 18541                           indf0	equ	0xFEF
 18542                           postinc0	equ	0xFEE
 18543                           fsr0h	equ	0xFEA
 18544                           fsr0l	equ	0xFE9
 18545                           wreg	equ	0xFE8
 18546                           postdec1	equ	0xFE5
 18547                           fsr1h	equ	0xFE2
 18548                           fsr1l	equ	0xFE1
 18549                           indf2	equ	0xFDF
 18550                           postinc2	equ	0xFDE
 18551                           postdec2	equ	0xFDD
 18552                           fsr2h	equ	0xFDA
 18553                           fsr2l	equ	0xFD9
 18554                           status	equ	0xFD8
 18555                           
 18556 ;; *************** function i2_lcdNibble *****************
 18557 ;; Defined at:
 18558 ;;		line 37 in file "lcd.c"
 18559 ;; Parameters:    Size  Location     Type
 18560 ;;  data            1    wreg     unsigned char 
 18561 ;; Auto vars:     Size  Location     Type
 18562 ;;  data            1    1[COMRAM] unsigned char 
 18563 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18564 ;; Return value:  Size  Location     Type
 18565 ;;                  1    wreg      void 
 18566 ;; Registers used:
 18567 ;;		wreg, status,2, status,0
 18568 ;; Tracked objects:
 18569 ;;		On entry : 0/0
 18570 ;;		On exit  : 0/0
 18571 ;;		Unchanged: 0/0
 18572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18577 ;;Total ram usage:        2 bytes
 18578 ;; Hardware stack levels used:    1
 18579 ;; This function calls:
 18580 ;;		Nothing
 18581 ;; This function is called by:
 18582 ;;		i2_lcdInst
 18583 ;;		i2_putch
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           	psect	text51
 18588  0058C8                     __ptext51:
 18589                           	opt stack 0
 18590  0058C8                     i2_lcdNibble:
 18591                           	opt stack 22
 18592                           
 18593                           ;incstack = 0
 18594                           ;i2lcdNibble@data stored from wreg
 18595  0058C8  6E02               	movwf	i2lcdNibble@data,c
 18596                           
 18597                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 18598  0058CA  5002               	movf	i2lcdNibble@data,w,c
 18599  0058CC  0BF0               	andlw	240
 18600  0058CE  6E01               	movwf	i2lcdNibble@temp,c
 18601                           
 18602                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 18603  0058D0  508C               	movf	3980,w,c	;volatile
 18604  0058D2  0B0F               	andlw	15
 18605  0058D4  6E8C               	movwf	3980,c	;volatile
 18606                           
 18607                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 18608  0058D6  5001               	movf	i2lcdNibble@temp,w,c
 18609  0058D8  108C               	iorwf	3980,w,c	;volatile
 18610  0058DA  6E8C               	movwf	3980,c	;volatile
 18611                           
 18612                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 18613  0058DC  0E00               	movlw	0
 18614  0058DE  BEF2               	btfsc	intcon,7,c	;volatile
 18615  0058E0  0E01               	movlw	1
 18616  0058E2  0100               	movlb	0	; () banked
 18617  0058E4  6FBD               	movwf	_LCDinterruptState& (0+255),b
 18618                           
 18619                           ; BSR set to: 0
 18620  0058E6  9EF2               	bcf	intcon,7,c	;volatile
 18621                           
 18622                           ; BSR set to: 0
 18623  0058E8  868C               	bsf	3980,3,c	;volatile
 18624                           
 18625                           ; BSR set to: 0
 18626  0058EA  0E42               	movlw	66
 18627  0058EC                     i2u775_47:
 18628  0058EC  2EE8               	decfsz	wreg,f,c
 18629  0058EE  D7FE               	bra	i2u775_47
 18630  0058F0  D000               	nop2	
 18631  0058F2  968C               	bcf	3980,3,c	;volatile
 18632  0058F4  0EA0               	movlw	160
 18633  0058F6                     i2u776_47:
 18634  0058F6  D000               	nop2	
 18635  0058F8  2EE8               	decfsz	wreg,f,c
 18636  0058FA  D7FD               	bra	i2u776_47
 18637  0058FC  0100               	movlb	0	; () banked
 18638  0058FE  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 18639  005900  D002               	bra	i2u369_45
 18640  005902  9EF2               	bcf	intcon,7,c	;volatile
 18641  005904  D001               	bra	i2u369_46
 18642  005906                     i2u369_45:
 18643  005906  8EF2               	bsf	intcon,7,c	;volatile
 18644  005908                     i2u369_46:
 18645                           
 18646                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 18647  005908  3802               	swapf	i2lcdNibble@data,w,c
 18648  00590A  0BF0               	andlw	240
 18649  00590C  6E02               	movwf	i2lcdNibble@data,c
 18650                           
 18651                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 18652  00590E  5002               	movf	i2lcdNibble@data,w,c
 18653  005910  0BF0               	andlw	240
 18654  005912  6E01               	movwf	i2lcdNibble@temp,c
 18655                           
 18656                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 18657  005914  508C               	movf	3980,w,c	;volatile
 18658  005916  0B0F               	andlw	15
 18659  005918  6E8C               	movwf	3980,c	;volatile
 18660                           
 18661                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 18662  00591A  5001               	movf	i2lcdNibble@temp,w,c
 18663  00591C  108C               	iorwf	3980,w,c	;volatile
 18664  00591E  6E8C               	movwf	3980,c	;volatile
 18665                           
 18666                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 18667  005920  0E00               	movlw	0
 18668  005922  BEF2               	btfsc	intcon,7,c	;volatile
 18669  005924  0E01               	movlw	1
 18670  005926  0100               	movlb	0	; () banked
 18671  005928  6FBD               	movwf	_LCDinterruptState& (0+255),b
 18672                           
 18673                           ; BSR set to: 0
 18674  00592A  9EF2               	bcf	intcon,7,c	;volatile
 18675                           
 18676                           ; BSR set to: 0
 18677  00592C  868C               	bsf	3980,3,c	;volatile
 18678                           
 18679                           ; BSR set to: 0
 18680  00592E  0E42               	movlw	66
 18681  005930                     i2u777_47:
 18682  005930  2EE8               	decfsz	wreg,f,c
 18683  005932  D7FE               	bra	i2u777_47
 18684  005934  D000               	nop2	
 18685  005936  968C               	bcf	3980,3,c	;volatile
 18686  005938  0EA0               	movlw	160
 18687  00593A                     i2u778_47:
 18688  00593A  D000               	nop2	
 18689  00593C  2EE8               	decfsz	wreg,f,c
 18690  00593E  D7FD               	bra	i2u778_47
 18691  005940  0100               	movlb	0	; () banked
 18692  005942  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 18693  005944  D002               	bra	i2u370_45
 18694  005946  9EF2               	bcf	intcon,7,c	;volatile
 18695  005948  D001               	bra	i2u370_46
 18696  00594A                     i2u370_45:
 18697  00594A  8EF2               	bsf	intcon,7,c	;volatile
 18698  00594C                     i2u370_46:
 18699  00594C  0012               	return		;funcret
 18700  00594E                     __end_ofi2_lcdNibble:
 18701                           	opt stack 0
 18702                           pclatu	equ	0xFFB
 18703                           pclath	equ	0xFFA
 18704                           tblptru	equ	0xFF8
 18705                           tblptrh	equ	0xFF7
 18706                           tblptrl	equ	0xFF6
 18707                           tablat	equ	0xFF5
 18708                           prodh	equ	0xFF4
 18709                           prodl	equ	0xFF3
 18710                           intcon	equ	0xFF2
 18711                           intcon3	equ	0xFF0
 18712                           indf0	equ	0xFEF
 18713                           postinc0	equ	0xFEE
 18714                           fsr0h	equ	0xFEA
 18715                           fsr0l	equ	0xFE9
 18716                           wreg	equ	0xFE8
 18717                           postdec1	equ	0xFE5
 18718                           fsr1h	equ	0xFE2
 18719                           fsr1l	equ	0xFE1
 18720                           indf2	equ	0xFDF
 18721                           postinc2	equ	0xFDE
 18722                           postdec2	equ	0xFDD
 18723                           fsr2h	equ	0xFDA
 18724                           fsr2l	equ	0xFD9
 18725                           status	equ	0xFD8
 18726                           
 18727 ;; *************** function i2_generate_compartment_array *****************
 18728 ;; Defined at:
 18729 ;;		line 220 in file "keypad.c"
 18730 ;; Parameters:    Size  Location     Type
 18731 ;;  step            2    0[COMRAM] int 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;		None
 18734 ;; Return value:  Size  Location     Type
 18735 ;;                  1    wreg      void 
 18736 ;; Registers used:
 18737 ;;		wreg, status,2, status,0
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18746 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;Total ram usage:        4 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; This function calls:
 18750 ;;		Nothing
 18751 ;; This function is called by:
 18752 ;;		_interruptHandler
 18753 ;; This function uses a non-reentrant model
 18754 ;;
 18755                           
 18756                           	psect	text52
 18757  004880                     __ptext52:
 18758                           	opt stack 0
 18759  004880                     i2_generate_compartment_array:
 18760                           	opt stack 23
 18761                           
 18762                           ;keypad.c: 222: switch(step){
 18763                           
 18764                           ;incstack = 0
 18765  004880  D11C               	goto	i2l1064
 18766  004882                     
 18767                           ;keypad.c: 224: compartment_array[0] = 1;
 18768  004882  0E00               	movlw	0
 18769  004884  0100               	movlb	0	; () banked
 18770  004886  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18771  004888  0E01               	movlw	1
 18772  00488A  6F80               	movwf	_compartment_array& (0+255),b
 18773                           
 18774                           ;keypad.c: 225: compartment_array[2] = 1;
 18775  00488C  0E00               	movlw	0
 18776  00488E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18777  004890  0E01               	movlw	1
 18778  004892  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18779                           
 18780                           ;keypad.c: 226: compartment_array[4] = 1;
 18781  004894  0E00               	movlw	0
 18782  004896  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18783  004898  0E01               	movlw	1
 18784  00489A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18785                           
 18786                           ;keypad.c: 227: compartment_array[6] = 1;
 18787  00489C  0E00               	movlw	0
 18788  00489E  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18789  0048A0  0E01               	movlw	1
 18790  0048A2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18791                           
 18792                           ;keypad.c: 230: compartment_number[0] = 0;
 18793  0048A4  0E00               	movlw	0
 18794  0048A6  6E43               	movwf	_compartment_number+1,c
 18795  0048A8  0E00               	movlw	0
 18796  0048AA  6E42               	movwf	_compartment_number,c
 18797                           
 18798                           ;keypad.c: 231: compartment_number[1] = 2;
 18799  0048AC  0E00               	movlw	0
 18800  0048AE  6E45               	movwf	_compartment_number+3,c
 18801  0048B0  0E02               	movlw	2
 18802  0048B2  6E44               	movwf	_compartment_number+2,c
 18803                           
 18804                           ;keypad.c: 232: compartment_number[2] = 4;
 18805  0048B4  0E00               	movlw	0
 18806  0048B6  6E47               	movwf	_compartment_number+5,c
 18807  0048B8  0E04               	movlw	4
 18808  0048BA  6E46               	movwf	_compartment_number+4,c
 18809                           
 18810                           ;keypad.c: 233: compartment_number[3] = 6;
 18811  0048BC  0E00               	movlw	0
 18812  0048BE  6E49               	movwf	_compartment_number+7,c
 18813  0048C0  0E06               	movlw	6
 18814  0048C2  6E48               	movwf	_compartment_number+6,c
 18815                           
 18816                           ;keypad.c: 235: break;
 18817  0048C4  0012               	return	
 18818  0048C6                     
 18819                           ;keypad.c: 237: compartment_array[0] = 1;
 18820                           
 18821                           ; BSR set to: 0
 18822  0048C6  0E00               	movlw	0
 18823  0048C8  0100               	movlb	0	; () banked
 18824  0048CA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18825  0048CC  0E01               	movlw	1
 18826  0048CE  6F80               	movwf	_compartment_array& (0+255),b
 18827                           
 18828                           ;keypad.c: 238: compartment_array[1] = 1;
 18829  0048D0  0E00               	movlw	0
 18830  0048D2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18831  0048D4  0E01               	movlw	1
 18832  0048D6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18833                           
 18834                           ;keypad.c: 239: compartment_array[3] = 1;
 18835  0048D8  0E00               	movlw	0
 18836  0048DA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 18837  0048DC  0E01               	movlw	1
 18838  0048DE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 18839                           
 18840                           ;keypad.c: 240: compartment_array[4] = 1;
 18841  0048E0  0E00               	movlw	0
 18842  0048E2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18843  0048E4  0E01               	movlw	1
 18844  0048E6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18845                           
 18846                           ;keypad.c: 241: compartment_array[6] = 1;
 18847  0048E8  0E00               	movlw	0
 18848  0048EA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18849  0048EC  0E01               	movlw	1
 18850  0048EE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18851                           
 18852                           ;keypad.c: 245: compartment_number[0] = 0;
 18853  0048F0  0E00               	movlw	0
 18854  0048F2  6E43               	movwf	_compartment_number+1,c
 18855  0048F4  0E00               	movlw	0
 18856  0048F6  6E42               	movwf	_compartment_number,c
 18857                           
 18858                           ;keypad.c: 246: compartment_number[1] = 1;
 18859  0048F8  0E00               	movlw	0
 18860  0048FA  6E45               	movwf	_compartment_number+3,c
 18861  0048FC  0E01               	movlw	1
 18862  0048FE  6E44               	movwf	_compartment_number+2,c
 18863                           
 18864                           ;keypad.c: 247: compartment_number[2] = 3;
 18865  004900  0E00               	movlw	0
 18866  004902  6E47               	movwf	_compartment_number+5,c
 18867  004904  0E03               	movlw	3
 18868  004906  6E46               	movwf	_compartment_number+4,c
 18869                           
 18870                           ;keypad.c: 248: compartment_number[3] = 4;
 18871  004908  0E00               	movlw	0
 18872  00490A  6E49               	movwf	_compartment_number+7,c
 18873  00490C  0E04               	movlw	4
 18874  00490E  6E48               	movwf	_compartment_number+6,c
 18875                           
 18876                           ;keypad.c: 249: compartment_number[4] = 6;
 18877  004910  0E00               	movlw	0
 18878  004912  6E4B               	movwf	_compartment_number+9,c
 18879  004914  0E06               	movlw	6
 18880  004916  6E4A               	movwf	_compartment_number+8,c
 18881                           
 18882                           ;keypad.c: 251: break;
 18883  004918  0012               	return	
 18884  00491A                     
 18885                           ;keypad.c: 254: compartment_array[0] = 1;
 18886                           
 18887                           ; BSR set to: 0
 18888  00491A  0E00               	movlw	0
 18889  00491C  0100               	movlb	0	; () banked
 18890  00491E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18891  004920  0E01               	movlw	1
 18892  004922  6F80               	movwf	_compartment_array& (0+255),b
 18893                           
 18894                           ;keypad.c: 255: compartment_array[1] = 1;
 18895  004924  0E00               	movlw	0
 18896  004926  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18897  004928  0E01               	movlw	1
 18898  00492A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18899                           
 18900                           ;keypad.c: 256: compartment_array[2] = 1;
 18901  00492C  0E00               	movlw	0
 18902  00492E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18903  004930  0E01               	movlw	1
 18904  004932  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18905                           
 18906                           ;keypad.c: 257: compartment_array[4] = 1;
 18907  004934  0E00               	movlw	0
 18908  004936  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18909  004938  0E01               	movlw	1
 18910  00493A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18911                           
 18912                           ;keypad.c: 258: compartment_array[5] = 1;
 18913  00493C  0E00               	movlw	0
 18914  00493E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 18915  004940  0E01               	movlw	1
 18916  004942  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 18917                           
 18918                           ;keypad.c: 259: compartment_array[6] = 1;
 18919  004944  0E00               	movlw	0
 18920  004946  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18921  004948  0E01               	movlw	1
 18922  00494A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18923                           
 18924                           ;keypad.c: 262: compartment_number[0] = 0;
 18925  00494C  0E00               	movlw	0
 18926  00494E  6E43               	movwf	_compartment_number+1,c
 18927  004950  0E00               	movlw	0
 18928  004952  6E42               	movwf	_compartment_number,c
 18929                           
 18930                           ;keypad.c: 263: compartment_number[1] = 1;
 18931  004954  0E00               	movlw	0
 18932  004956  6E45               	movwf	_compartment_number+3,c
 18933  004958  0E01               	movlw	1
 18934  00495A  6E44               	movwf	_compartment_number+2,c
 18935                           
 18936                           ;keypad.c: 264: compartment_number[2] = 2;
 18937  00495C  0E00               	movlw	0
 18938  00495E  6E47               	movwf	_compartment_number+5,c
 18939  004960  0E02               	movlw	2
 18940  004962  6E46               	movwf	_compartment_number+4,c
 18941                           
 18942                           ;keypad.c: 265: compartment_number[3] = 4;
 18943  004964  0E00               	movlw	0
 18944  004966  6E49               	movwf	_compartment_number+7,c
 18945  004968  0E04               	movlw	4
 18946  00496A  6E48               	movwf	_compartment_number+6,c
 18947                           
 18948                           ;keypad.c: 266: compartment_number[4] = 5;
 18949  00496C  0E00               	movlw	0
 18950  00496E  6E4B               	movwf	_compartment_number+9,c
 18951  004970  0E05               	movlw	5
 18952  004972  6E4A               	movwf	_compartment_number+8,c
 18953                           
 18954                           ;keypad.c: 267: compartment_number[5] = 6;
 18955  004974  0E00               	movlw	0
 18956  004976  6E4D               	movwf	_compartment_number+11,c
 18957  004978  0E06               	movlw	6
 18958  00497A  6E4C               	movwf	_compartment_number+10,c
 18959                           
 18960                           ;keypad.c: 269: break;
 18961  00497C  0012               	return	
 18962  00497E                     
 18963                           ;keypad.c: 271: compartment_array[0] = 1;
 18964                           
 18965                           ; BSR set to: 0
 18966  00497E  0E00               	movlw	0
 18967  004980  0100               	movlb	0	; () banked
 18968  004982  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18969  004984  0E01               	movlw	1
 18970  004986  6F80               	movwf	_compartment_array& (0+255),b
 18971                           
 18972                           ;keypad.c: 272: compartment_array[1] = 1;
 18973  004988  0E00               	movlw	0
 18974  00498A  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18975  00498C  0E01               	movlw	1
 18976  00498E  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18977                           
 18978                           ;keypad.c: 273: compartment_array[2] = 1;
 18979  004990  0E00               	movlw	0
 18980  004992  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18981  004994  0E01               	movlw	1
 18982  004996  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18983                           
 18984                           ;keypad.c: 274: compartment_array[3] = 1;
 18985  004998  0E00               	movlw	0
 18986  00499A  6F87               	movwf	(_compartment_array+7)& (0+255),b
 18987  00499C  0E01               	movlw	1
 18988  00499E  6F86               	movwf	(_compartment_array+6)& (0+255),b
 18989                           
 18990                           ;keypad.c: 275: compartment_array[4] = 1;
 18991  0049A0  0E00               	movlw	0
 18992  0049A2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18993  0049A4  0E01               	movlw	1
 18994  0049A6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18995                           
 18996                           ;keypad.c: 276: compartment_array[5] = 1;
 18997  0049A8  0E00               	movlw	0
 18998  0049AA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 18999  0049AC  0E01               	movlw	1
 19000  0049AE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19001                           
 19002                           ;keypad.c: 277: compartment_array[6] = 1;
 19003  0049B0  0E00               	movlw	0
 19004  0049B2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19005  0049B4  0E01               	movlw	1
 19006  0049B6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19007                           
 19008                           ;keypad.c: 280: compartment_number[0] = 0;
 19009  0049B8  0E00               	movlw	0
 19010  0049BA  6E43               	movwf	_compartment_number+1,c
 19011  0049BC  0E00               	movlw	0
 19012  0049BE  6E42               	movwf	_compartment_number,c
 19013                           
 19014                           ;keypad.c: 281: compartment_number[1] = 1;
 19015  0049C0  0E00               	movlw	0
 19016  0049C2  6E45               	movwf	_compartment_number+3,c
 19017  0049C4  0E01               	movlw	1
 19018  0049C6  6E44               	movwf	_compartment_number+2,c
 19019                           
 19020                           ;keypad.c: 282: compartment_number[2] = 2;
 19021  0049C8  0E00               	movlw	0
 19022  0049CA  6E47               	movwf	_compartment_number+5,c
 19023  0049CC  0E02               	movlw	2
 19024  0049CE  6E46               	movwf	_compartment_number+4,c
 19025                           
 19026                           ;keypad.c: 283: compartment_number[3] = 3;
 19027  0049D0  0E00               	movlw	0
 19028  0049D2  6E49               	movwf	_compartment_number+7,c
 19029  0049D4  0E03               	movlw	3
 19030  0049D6  6E48               	movwf	_compartment_number+6,c
 19031                           
 19032                           ;keypad.c: 284: compartment_number[4] = 4;
 19033  0049D8  0E00               	movlw	0
 19034  0049DA  6E4B               	movwf	_compartment_number+9,c
 19035  0049DC  0E04               	movlw	4
 19036  0049DE  6E4A               	movwf	_compartment_number+8,c
 19037                           
 19038                           ;keypad.c: 285: compartment_number[5] = 5;
 19039  0049E0  0E00               	movlw	0
 19040  0049E2  6E4D               	movwf	_compartment_number+11,c
 19041  0049E4  0E05               	movlw	5
 19042  0049E6  6E4C               	movwf	_compartment_number+10,c
 19043                           
 19044                           ;keypad.c: 286: compartment_number[6] = 6;
 19045  0049E8  0E00               	movlw	0
 19046  0049EA  6E4F               	movwf	_compartment_number+13,c
 19047  0049EC  0E06               	movlw	6
 19048  0049EE  6E4E               	movwf	_compartment_number+12,c
 19049                           
 19050                           ;keypad.c: 288: break;
 19051  0049F0  0012               	return	
 19052  0049F2                     
 19053                           ;keypad.c: 290: compartment_array[0] = 1;
 19054                           
 19055                           ; BSR set to: 0
 19056  0049F2  0E00               	movlw	0
 19057  0049F4  0100               	movlb	0	; () banked
 19058  0049F6  6F81               	movwf	(_compartment_array+1)& (0+255),b
 19059  0049F8  0E01               	movlw	1
 19060  0049FA  6F80               	movwf	_compartment_array& (0+255),b
 19061                           
 19062                           ;keypad.c: 291: compartment_array[1] = 1;
 19063  0049FC  0E00               	movlw	0
 19064  0049FE  6F83               	movwf	(_compartment_array+3)& (0+255),b
 19065  004A00  0E01               	movlw	1
 19066  004A02  6F82               	movwf	(_compartment_array+2)& (0+255),b
 19067                           
 19068                           ;keypad.c: 292: compartment_array[2] = 1;
 19069  004A04  0E00               	movlw	0
 19070  004A06  6F85               	movwf	(_compartment_array+5)& (0+255),b
 19071  004A08  0E01               	movlw	1
 19072  004A0A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 19073                           
 19074                           ;keypad.c: 293: compartment_array[3] = 1;
 19075  004A0C  0E00               	movlw	0
 19076  004A0E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 19077  004A10  0E01               	movlw	1
 19078  004A12  6F86               	movwf	(_compartment_array+6)& (0+255),b
 19079                           
 19080                           ;keypad.c: 294: compartment_array[4] = 1;
 19081  004A14  0E00               	movlw	0
 19082  004A16  6F89               	movwf	(_compartment_array+9)& (0+255),b
 19083  004A18  0E01               	movlw	1
 19084  004A1A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 19085                           
 19086                           ;keypad.c: 295: compartment_array[5] = 1;
 19087  004A1C  0E00               	movlw	0
 19088  004A1E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 19089  004A20  0E01               	movlw	1
 19090  004A22  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19091                           
 19092                           ;keypad.c: 296: compartment_array[6] = 1;
 19093  004A24  0E00               	movlw	0
 19094  004A26  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19095  004A28  0E01               	movlw	1
 19096  004A2A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19097                           
 19098                           ;keypad.c: 297: compartment_array[7] = 1;
 19099  004A2C  0E00               	movlw	0
 19100  004A2E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 19101  004A30  0E01               	movlw	1
 19102  004A32  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 19103                           
 19104                           ;keypad.c: 300: compartment_number[0] = 0;
 19105  004A34  0E00               	movlw	0
 19106  004A36  6E43               	movwf	_compartment_number+1,c
 19107  004A38  0E00               	movlw	0
 19108  004A3A  6E42               	movwf	_compartment_number,c
 19109                           
 19110                           ;keypad.c: 301: compartment_number[1] = 1;
 19111  004A3C  0E00               	movlw	0
 19112  004A3E  6E45               	movwf	_compartment_number+3,c
 19113  004A40  0E01               	movlw	1
 19114  004A42  6E44               	movwf	_compartment_number+2,c
 19115                           
 19116                           ;keypad.c: 302: compartment_number[2] = 2;
 19117  004A44  0E00               	movlw	0
 19118  004A46  6E47               	movwf	_compartment_number+5,c
 19119  004A48  0E02               	movlw	2
 19120  004A4A  6E46               	movwf	_compartment_number+4,c
 19121                           
 19122                           ;keypad.c: 303: compartment_number[3] = 3;
 19123  004A4C  0E00               	movlw	0
 19124  004A4E  6E49               	movwf	_compartment_number+7,c
 19125  004A50  0E03               	movlw	3
 19126  004A52  6E48               	movwf	_compartment_number+6,c
 19127                           
 19128                           ;keypad.c: 304: compartment_number[4] = 4;
 19129  004A54  0E00               	movlw	0
 19130  004A56  6E4B               	movwf	_compartment_number+9,c
 19131  004A58  0E04               	movlw	4
 19132  004A5A  6E4A               	movwf	_compartment_number+8,c
 19133                           
 19134                           ;keypad.c: 305: compartment_number[5] = 5;
 19135  004A5C  0E00               	movlw	0
 19136  004A5E  6E4D               	movwf	_compartment_number+11,c
 19137  004A60  0E05               	movlw	5
 19138  004A62  6E4C               	movwf	_compartment_number+10,c
 19139                           
 19140                           ;keypad.c: 306: compartment_number[6] = 6;
 19141  004A64  0E00               	movlw	0
 19142  004A66  6E4F               	movwf	_compartment_number+13,c
 19143  004A68  0E06               	movlw	6
 19144  004A6A  6E4E               	movwf	_compartment_number+12,c
 19145                           
 19146                           ;keypad.c: 307: compartment_number[7] = 7;
 19147  004A6C  0E00               	movlw	0
 19148  004A6E  6E51               	movwf	_compartment_number+15,c
 19149  004A70  0E07               	movlw	7
 19150  004A72  6E50               	movwf	_compartment_number+14,c
 19151                           
 19152                           ;keypad.c: 309: break;
 19153  004A74  0012               	return	
 19154  004A76                     
 19155                           ;keypad.c: 311: compartment_array[0] = 0;
 19156                           
 19157                           ; BSR set to: 0
 19158  004A76  0E00               	movlw	0
 19159  004A78  0100               	movlb	0	; () banked
 19160  004A7A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 19161  004A7C  0E00               	movlw	0
 19162  004A7E  6F80               	movwf	_compartment_array& (0+255),b
 19163                           
 19164                           ;keypad.c: 312: compartment_array[1] = 0;
 19165  004A80  0E00               	movlw	0
 19166  004A82  6F83               	movwf	(_compartment_array+3)& (0+255),b
 19167  004A84  0E00               	movlw	0
 19168  004A86  6F82               	movwf	(_compartment_array+2)& (0+255),b
 19169                           
 19170                           ;keypad.c: 313: compartment_array[2] = 0;
 19171  004A88  0E00               	movlw	0
 19172  004A8A  6F85               	movwf	(_compartment_array+5)& (0+255),b
 19173  004A8C  0E00               	movlw	0
 19174  004A8E  6F84               	movwf	(_compartment_array+4)& (0+255),b
 19175                           
 19176                           ;keypad.c: 314: compartment_array[3] = 0;
 19177  004A90  0E00               	movlw	0
 19178  004A92  6F87               	movwf	(_compartment_array+7)& (0+255),b
 19179  004A94  0E00               	movlw	0
 19180  004A96  6F86               	movwf	(_compartment_array+6)& (0+255),b
 19181                           
 19182                           ;keypad.c: 315: compartment_array[4] = 0;
 19183  004A98  0E00               	movlw	0
 19184  004A9A  6F89               	movwf	(_compartment_array+9)& (0+255),b
 19185  004A9C  0E00               	movlw	0
 19186  004A9E  6F88               	movwf	(_compartment_array+8)& (0+255),b
 19187                           
 19188                           ;keypad.c: 316: compartment_array[5] = 0;
 19189  004AA0  0E00               	movlw	0
 19190  004AA2  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 19191  004AA4  0E00               	movlw	0
 19192  004AA6  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19193                           
 19194                           ;keypad.c: 317: compartment_array[6] = 0;
 19195  004AA8  0E00               	movlw	0
 19196  004AAA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19197  004AAC  0E00               	movlw	0
 19198  004AAE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19199                           
 19200                           ;keypad.c: 318: compartment_array[7] = 0;
 19201  004AB0  0E00               	movlw	0
 19202  004AB2  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 19203  004AB4  0E00               	movlw	0
 19204  004AB6  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 19205                           
 19206                           ;keypad.c: 320: }
 19207  004AB8  0012               	return	
 19208  004ABA                     i2l1064:
 19209                           
 19210                           ; BSR set to: 0
 19211  004ABA  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 19212  004ABE  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 19213                           
 19214                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19215                           ; Switch size 1, requested type "space"
 19216                           ; Number of cases is 1, Range of values is 0 to 0
 19217                           ; switch strategies available:
 19218                           ; Name         Instructions Cycles
 19219                           ; simple_byte            4     3 (average)
 19220                           ;	Chosen strategy is simple_byte
 19221  004AC2  5004               	movf	??i2_generate_compartment_array+1,w,c
 19222  004AC4  0A00               	xorlw	0	; case 0
 19223  004AC6  A4D8               	btfss	status,2,c
 19224  004AC8  D7D6               	goto	i2l1071
 19225                           
 19226                           ; Switch size 1, requested type "space"
 19227                           ; Number of cases is 5, Range of values is 4 to 8
 19228                           ; switch strategies available:
 19229                           ; Name         Instructions Cycles
 19230                           ; simple_byte           16     9 (average)
 19231                           ;	Chosen strategy is simple_byte
 19232  004ACA  5003               	movf	??i2_generate_compartment_array,w,c
 19233  004ACC  0A04               	xorlw	4	; case 4
 19234  004ACE  B4D8               	btfsc	status,2,c
 19235  004AD0  D6D8               	goto	i2l1065
 19236  004AD2  0A01               	xorlw	1	; case 5
 19237  004AD4  B4D8               	btfsc	status,2,c
 19238  004AD6  D6F7               	goto	i2l1067
 19239  004AD8  0A03               	xorlw	3	; case 6
 19240  004ADA  B4D8               	btfsc	status,2,c
 19241  004ADC  D71E               	goto	i2l1068
 19242  004ADE  0A01               	xorlw	1	; case 7
 19243  004AE0  B4D8               	btfsc	status,2,c
 19244  004AE2  D74D               	goto	i2l1069
 19245  004AE4  0A0F               	xorlw	15	; case 8
 19246  004AE6  B4D8               	btfsc	status,2,c
 19247  004AE8  D784               	goto	i2l1070
 19248  004AEA  D7C5               	goto	i2l1071
 19249  004AEC                     __end_ofi2_generate_compartment_array:
 19250                           	opt stack 0
 19251                           pclatu	equ	0xFFB
 19252                           pclath	equ	0xFFA
 19253                           tblptru	equ	0xFF8
 19254                           tblptrh	equ	0xFF7
 19255                           tblptrl	equ	0xFF6
 19256                           tablat	equ	0xFF5
 19257                           prodh	equ	0xFF4
 19258                           prodl	equ	0xFF3
 19259                           intcon	equ	0xFF2
 19260                           intcon3	equ	0xFF0
 19261                           indf0	equ	0xFEF
 19262                           postinc0	equ	0xFEE
 19263                           fsr0h	equ	0xFEA
 19264                           fsr0l	equ	0xFE9
 19265                           wreg	equ	0xFE8
 19266                           postdec1	equ	0xFE5
 19267                           fsr1h	equ	0xFE2
 19268                           fsr1l	equ	0xFE1
 19269                           indf2	equ	0xFDF
 19270                           postinc2	equ	0xFDE
 19271                           postdec2	equ	0xFDD
 19272                           fsr2h	equ	0xFDA
 19273                           fsr2l	equ	0xFD9
 19274                           status	equ	0xFD8
 19275                           
 19276 ;; *************** function i2___awdiv *****************
 19277 ;; Defined at:
 19278 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 19279 ;; Parameters:    Size  Location     Type
 19280 ;;  dividend        2    0[COMRAM] int 
 19281 ;;  divisor         2    2[COMRAM] int 
 19282 ;; Auto vars:     Size  Location     Type
 19283 ;;  __awdiv         2    6[COMRAM] int 
 19284 ;;  __awdiv         1    5[COMRAM] unsigned char 
 19285 ;;  __awdiv         1    4[COMRAM] unsigned char 
 19286 ;; Return value:  Size  Location     Type
 19287 ;;                  2    0[COMRAM] int 
 19288 ;; Registers used:
 19289 ;;		wreg, status,2, status,0
 19290 ;; Tracked objects:
 19291 ;;		On entry : 0/0
 19292 ;;		On exit  : 0/0
 19293 ;;		Unchanged: 0/0
 19294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19299 ;;Total ram usage:        8 bytes
 19300 ;; Hardware stack levels used:    1
 19301 ;; This function calls:
 19302 ;;		Nothing
 19303 ;; This function is called by:
 19304 ;;		_interruptHandler
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text53
 19309  005A58                     __ptext53:
 19310                           	opt stack 0
 19311  005A58                     i2___awdiv:
 19312                           	opt stack 23
 19313                           
 19314                           ;incstack = 0
 19315  005A58  0E00               	movlw	0
 19316  005A5A  6E06               	movwf	i2___awdiv@sign,c
 19317  005A5C  AE04               	btfss	i2___awdiv@divisor+1,7,c
 19318  005A5E  D006               	goto	i2l1626
 19319  005A60  6C03               	negf	i2___awdiv@divisor,c
 19320  005A62  1E04               	comf	i2___awdiv@divisor+1,f,c
 19321  005A64  B0D8               	btfsc	status,0,c
 19322  005A66  2A04               	incf	i2___awdiv@divisor+1,f,c
 19323  005A68  0E01               	movlw	1
 19324  005A6A  6E06               	movwf	i2___awdiv@sign,c
 19325  005A6C                     i2l1626:
 19326  005A6C  AE02               	btfss	i2___awdiv@dividend+1,7,c
 19327  005A6E  D006               	goto	i2l1627
 19328  005A70  6C01               	negf	i2___awdiv@dividend,c
 19329  005A72  1E02               	comf	i2___awdiv@dividend+1,f,c
 19330  005A74  B0D8               	btfsc	status,0,c
 19331  005A76  2A02               	incf	i2___awdiv@dividend+1,f,c
 19332  005A78  0E01               	movlw	1
 19333  005A7A  1A06               	xorwf	i2___awdiv@sign,f,c
 19334  005A7C                     i2l1627:
 19335  005A7C  0E00               	movlw	0
 19336  005A7E  6E08               	movwf	i2___awdiv@quotient+1,c
 19337  005A80  0E00               	movlw	0
 19338  005A82  6E07               	movwf	i2___awdiv@quotient,c
 19339  005A84  5003               	movf	i2___awdiv@divisor,w,c
 19340  005A86  1004               	iorwf	i2___awdiv@divisor+1,w,c
 19341  005A88  B4D8               	btfsc	status,2,c
 19342  005A8A  D01C               	goto	i2l1634
 19343  005A8C  0E01               	movlw	1
 19344  005A8E  6E05               	movwf	i2___awdiv@counter,c
 19345  005A90  D004               	goto	i2l1629
 19346  005A92  90D8               	bcf	status,0,c
 19347  005A94  3603               	rlcf	i2___awdiv@divisor,f,c
 19348  005A96  3604               	rlcf	i2___awdiv@divisor+1,f,c
 19349  005A98  2A05               	incf	i2___awdiv@counter,f,c
 19350  005A9A                     i2l1629:
 19351  005A9A  AE04               	btfss	i2___awdiv@divisor+1,7,c
 19352  005A9C  D7FA               	goto	i2l1630
 19353  005A9E                     i2u523_40:
 19354  005A9E  90D8               	bcf	status,0,c
 19355  005AA0  3607               	rlcf	i2___awdiv@quotient,f,c
 19356  005AA2  3608               	rlcf	i2___awdiv@quotient+1,f,c
 19357  005AA4  5003               	movf	i2___awdiv@divisor,w,c
 19358  005AA6  5C01               	subwf	i2___awdiv@dividend,w,c
 19359  005AA8  5004               	movf	i2___awdiv@divisor+1,w,c
 19360  005AAA  5802               	subwfb	i2___awdiv@dividend+1,w,c
 19361  005AAC  A0D8               	btfss	status,0,c
 19362  005AAE  D005               	goto	i2l1633
 19363  005AB0  5003               	movf	i2___awdiv@divisor,w,c
 19364  005AB2  5E01               	subwf	i2___awdiv@dividend,f,c
 19365  005AB4  5004               	movf	i2___awdiv@divisor+1,w,c
 19366  005AB6  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 19367  005AB8  8007               	bsf	i2___awdiv@quotient,0,c
 19368  005ABA                     i2l1633:
 19369  005ABA  90D8               	bcf	status,0,c
 19370  005ABC  3204               	rrcf	i2___awdiv@divisor+1,f,c
 19371  005ABE  3203               	rrcf	i2___awdiv@divisor,f,c
 19372  005AC0  2E05               	decfsz	i2___awdiv@counter,f,c
 19373  005AC2  D7ED               	goto	i2u523_40
 19374  005AC4                     i2l1634:
 19375  005AC4  5006               	movf	i2___awdiv@sign,w,c
 19376  005AC6  B4D8               	btfsc	status,2,c
 19377  005AC8  D004               	goto	i2l1635
 19378  005ACA  6C07               	negf	i2___awdiv@quotient,c
 19379  005ACC  1E08               	comf	i2___awdiv@quotient+1,f,c
 19380  005ACE  B0D8               	btfsc	status,0,c
 19381  005AD0  2A08               	incf	i2___awdiv@quotient+1,f,c
 19382  005AD2                     i2l1635:
 19383  005AD2  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 19384  005AD6  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 19385  005ADA  0012               	return	
 19386  005ADC                     __end_ofi2___awdiv:
 19387                           	opt stack 0
 19388                           pclatu	equ	0xFFB
 19389                           pclath	equ	0xFFA
 19390                           tblptru	equ	0xFF8
 19391                           tblptrh	equ	0xFF7
 19392                           tblptrl	equ	0xFF6
 19393                           tablat	equ	0xFF5
 19394                           prodh	equ	0xFF4
 19395                           prodl	equ	0xFF3
 19396                           intcon	equ	0xFF2
 19397                           intcon3	equ	0xFF0
 19398                           indf0	equ	0xFEF
 19399                           postinc0	equ	0xFEE
 19400                           fsr0h	equ	0xFEA
 19401                           fsr0l	equ	0xFE9
 19402                           wreg	equ	0xFE8
 19403                           postdec1	equ	0xFE5
 19404                           fsr1h	equ	0xFE2
 19405                           fsr1l	equ	0xFE1
 19406                           indf2	equ	0xFDF
 19407                           postinc2	equ	0xFDE
 19408                           postdec2	equ	0xFDD
 19409                           fsr2h	equ	0xFDA
 19410                           fsr2l	equ	0xFD9
 19411                           status	equ	0xFD8
 19412                           
 19413 ;; *************** function i2_I2C_Master_Write *****************
 19414 ;; Defined at:
 19415 ;;		line 108 in file "I2C.c"
 19416 ;; Parameters:    Size  Location     Type
 19417 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 19418 ;; Auto vars:     Size  Location     Type
 19419 ;;		None
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  1    wreg      void 
 19422 ;; Registers used:
 19423 ;;		wreg, status,2, status,0, cstack
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;Total ram usage:        2 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:    1
 19436 ;; This function calls:
 19437 ;;		i2_I2C_Master_Wait
 19438 ;; This function is called by:
 19439 ;;		_interruptHandler
 19440 ;; This function uses a non-reentrant model
 19441 ;;
 19442                           
 19443                           	psect	text54
 19444  00625A                     __ptext54:
 19445                           	opt stack 0
 19446  00625A                     i2_I2C_Master_Write:
 19447                           	opt stack 22
 19448                           
 19449                           ;I2C.c: 116: I2C_Master_Wait();
 19450                           
 19451                           ;incstack = 0
 19452  00625A  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19453                           
 19454                           ;I2C.c: 117: SSPBUF = byteToWrite;
 19455  00625E  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 19456  006262  0012               	return		;funcret
 19457  006264                     __end_ofi2_I2C_Master_Write:
 19458                           	opt stack 0
 19459                           pclatu	equ	0xFFB
 19460                           pclath	equ	0xFFA
 19461                           tblptru	equ	0xFF8
 19462                           tblptrh	equ	0xFF7
 19463                           tblptrl	equ	0xFF6
 19464                           tablat	equ	0xFF5
 19465                           prodh	equ	0xFF4
 19466                           prodl	equ	0xFF3
 19467                           intcon	equ	0xFF2
 19468                           intcon3	equ	0xFF0
 19469                           indf0	equ	0xFEF
 19470                           postinc0	equ	0xFEE
 19471                           fsr0h	equ	0xFEA
 19472                           fsr0l	equ	0xFE9
 19473                           wreg	equ	0xFE8
 19474                           postdec1	equ	0xFE5
 19475                           fsr1h	equ	0xFE2
 19476                           fsr1l	equ	0xFE1
 19477                           indf2	equ	0xFDF
 19478                           postinc2	equ	0xFDE
 19479                           postdec2	equ	0xFDD
 19480                           fsr2h	equ	0xFDA
 19481                           fsr2l	equ	0xFD9
 19482                           status	equ	0xFD8
 19483                           
 19484 ;; *************** function i2_I2C_Master_Stop *****************
 19485 ;; Defined at:
 19486 ;;		line 95 in file "I2C.c"
 19487 ;; Parameters:    Size  Location     Type
 19488 ;;		None
 19489 ;; Auto vars:     Size  Location     Type
 19490 ;;		None
 19491 ;; Return value:  Size  Location     Type
 19492 ;;                  1    wreg      void 
 19493 ;; Registers used:
 19494 ;;		wreg, status,2, status,0, cstack
 19495 ;; Tracked objects:
 19496 ;;		On entry : 0/0
 19497 ;;		On exit  : 0/0
 19498 ;;		Unchanged: 0/0
 19499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19504 ;;Total ram usage:        0 bytes
 19505 ;; Hardware stack levels used:    1
 19506 ;; Hardware stack levels required when called:    1
 19507 ;; This function calls:
 19508 ;;		i2_I2C_Master_Wait
 19509 ;; This function is called by:
 19510 ;;		_interruptHandler
 19511 ;; This function uses a non-reentrant model
 19512 ;;
 19513                           
 19514                           	psect	text55
 19515  00627C                     __ptext55:
 19516                           	opt stack 0
 19517  00627C                     i2_I2C_Master_Stop:
 19518                           	opt stack 22
 19519                           
 19520                           ;I2C.c: 104: I2C_Master_Wait();
 19521                           
 19522                           ;incstack = 0
 19523  00627C  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19524                           
 19525                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 19526  006280  84C5               	bsf	4037,2,c	;volatile
 19527  006282  0012               	return		;funcret
 19528  006284                     __end_ofi2_I2C_Master_Stop:
 19529                           	opt stack 0
 19530                           pclatu	equ	0xFFB
 19531                           pclath	equ	0xFFA
 19532                           tblptru	equ	0xFF8
 19533                           tblptrh	equ	0xFF7
 19534                           tblptrl	equ	0xFF6
 19535                           tablat	equ	0xFF5
 19536                           prodh	equ	0xFF4
 19537                           prodl	equ	0xFF3
 19538                           intcon	equ	0xFF2
 19539                           intcon3	equ	0xFF0
 19540                           indf0	equ	0xFEF
 19541                           postinc0	equ	0xFEE
 19542                           fsr0h	equ	0xFEA
 19543                           fsr0l	equ	0xFE9
 19544                           wreg	equ	0xFE8
 19545                           postdec1	equ	0xFE5
 19546                           fsr1h	equ	0xFE2
 19547                           fsr1l	equ	0xFE1
 19548                           indf2	equ	0xFDF
 19549                           postinc2	equ	0xFDE
 19550                           postdec2	equ	0xFDD
 19551                           fsr2h	equ	0xFDA
 19552                           fsr2l	equ	0xFD9
 19553                           status	equ	0xFD8
 19554                           
 19555 ;; *************** function i2_I2C_Master_Start *****************
 19556 ;; Defined at:
 19557 ;;		line 69 in file "I2C.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;		None
 19560 ;; Auto vars:     Size  Location     Type
 19561 ;;		None
 19562 ;; Return value:  Size  Location     Type
 19563 ;;                  1    wreg      void 
 19564 ;; Registers used:
 19565 ;;		wreg, status,2, status,0, cstack
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19575 ;;Total ram usage:        0 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    1
 19578 ;; This function calls:
 19579 ;;		i2_I2C_Master_Wait
 19580 ;; This function is called by:
 19581 ;;		_interruptHandler
 19582 ;; This function uses a non-reentrant model
 19583 ;;
 19584                           
 19585                           	psect	text56
 19586  006284                     __ptext56:
 19587                           	opt stack 0
 19588  006284                     i2_I2C_Master_Start:
 19589                           	opt stack 22
 19590                           
 19591                           ;I2C.c: 78: I2C_Master_Wait();
 19592                           
 19593                           ;incstack = 0
 19594  006284  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19595                           
 19596                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 19597  006288  80C5               	bsf	4037,0,c	;volatile
 19598  00628A  0012               	return		;funcret
 19599  00628C                     __end_ofi2_I2C_Master_Start:
 19600                           	opt stack 0
 19601                           pclatu	equ	0xFFB
 19602                           pclath	equ	0xFFA
 19603                           tblptru	equ	0xFF8
 19604                           tblptrh	equ	0xFF7
 19605                           tblptrl	equ	0xFF6
 19606                           tablat	equ	0xFF5
 19607                           prodh	equ	0xFF4
 19608                           prodl	equ	0xFF3
 19609                           intcon	equ	0xFF2
 19610                           intcon3	equ	0xFF0
 19611                           indf0	equ	0xFEF
 19612                           postinc0	equ	0xFEE
 19613                           fsr0h	equ	0xFEA
 19614                           fsr0l	equ	0xFE9
 19615                           wreg	equ	0xFE8
 19616                           postdec1	equ	0xFE5
 19617                           fsr1h	equ	0xFE2
 19618                           fsr1l	equ	0xFE1
 19619                           indf2	equ	0xFDF
 19620                           postinc2	equ	0xFDE
 19621                           postdec2	equ	0xFDD
 19622                           fsr2h	equ	0xFDA
 19623                           fsr2l	equ	0xFD9
 19624                           status	equ	0xFD8
 19625                           
 19626 ;; *************** function i2_I2C_Master_Read *****************
 19627 ;; Defined at:
 19628 ;;		line 120 in file "I2C.c"
 19629 ;; Parameters:    Size  Location     Type
 19630 ;;  ackBit          1    wreg     unsigned char 
 19631 ;; Auto vars:     Size  Location     Type
 19632 ;;  ackBit          1    1[COMRAM] unsigned char 
 19633 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19634 ;; Return value:  Size  Location     Type
 19635 ;;                  1    wreg      unsigned char 
 19636 ;; Registers used:
 19637 ;;		wreg, status,2, status,0, cstack
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19647 ;;Total ram usage:        2 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; Hardware stack levels required when called:    1
 19650 ;; This function calls:
 19651 ;;		i2_I2C_Master_Wait
 19652 ;; This function is called by:
 19653 ;;		_interruptHandler
 19654 ;; This function uses a non-reentrant model
 19655 ;;
 19656                           
 19657                           	psect	text57
 19658  006142                     __ptext57:
 19659                           	opt stack 0
 19660  006142                     i2_I2C_Master_Read:
 19661                           	opt stack 22
 19662                           
 19663                           ;incstack = 0
 19664                           ;i2I2C_Master_Read@ackBit stored from wreg
 19665  006142  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 19666                           
 19667                           ;I2C.c: 130: unsigned char receivedByte;
 19668                           ;I2C.c: 132: I2C_Master_Wait();
 19669  006144  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19670                           
 19671                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 19672  006148  86C5               	bsf	4037,3,c	;volatile
 19673                           
 19674                           ;I2C.c: 135: I2C_Master_Wait();
 19675  00614A  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19676                           
 19677                           ;I2C.c: 136: receivedByte = SSPBUF;
 19678  00614E  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 19679                           
 19680                           ;I2C.c: 138: I2C_Master_Wait();
 19681  006152  EC13  F031         	call	i2_I2C_Master_Wait	;wreg free
 19682                           
 19683                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 19684  006156  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 19685  006158  D002               	bra	i2u489_45
 19686  00615A  9AC5               	bcf	4037,5,c	;volatile
 19687  00615C  D001               	bra	i2u489_46
 19688  00615E                     i2u489_45:
 19689  00615E  8AC5               	bsf	4037,5,c	;volatile
 19690  006160                     i2u489_46:
 19691                           
 19692                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 19693  006160  88C5               	bsf	4037,4,c	;volatile
 19694                           
 19695                           ;I2C.c: 142: return receivedByte;
 19696  006162  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 19697  006164  0012               	return	
 19698  006166                     __end_ofi2_I2C_Master_Read:
 19699                           	opt stack 0
 19700                           pclatu	equ	0xFFB
 19701                           pclath	equ	0xFFA
 19702                           tblptru	equ	0xFF8
 19703                           tblptrh	equ	0xFF7
 19704                           tblptrl	equ	0xFF6
 19705                           tablat	equ	0xFF5
 19706                           prodh	equ	0xFF4
 19707                           prodl	equ	0xFF3
 19708                           intcon	equ	0xFF2
 19709                           intcon3	equ	0xFF0
 19710                           indf0	equ	0xFEF
 19711                           postinc0	equ	0xFEE
 19712                           fsr0h	equ	0xFEA
 19713                           fsr0l	equ	0xFE9
 19714                           wreg	equ	0xFE8
 19715                           postdec1	equ	0xFE5
 19716                           fsr1h	equ	0xFE2
 19717                           fsr1l	equ	0xFE1
 19718                           indf2	equ	0xFDF
 19719                           postinc2	equ	0xFDE
 19720                           postdec2	equ	0xFDD
 19721                           fsr2h	equ	0xFDA
 19722                           fsr2l	equ	0xFD9
 19723                           status	equ	0xFD8
 19724                           
 19725 ;; *************** function i2_I2C_Master_Wait *****************
 19726 ;; Defined at:
 19727 ;;		line 51 in file "I2C.c"
 19728 ;; Parameters:    Size  Location     Type
 19729 ;;		None
 19730 ;; Auto vars:     Size  Location     Type
 19731 ;;		None
 19732 ;; Return value:  Size  Location     Type
 19733 ;;                  1    wreg      void 
 19734 ;; Registers used:
 19735 ;;		wreg, status,2, status,0
 19736 ;; Tracked objects:
 19737 ;;		On entry : 0/0
 19738 ;;		On exit  : 0/0
 19739 ;;		Unchanged: 0/0
 19740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19745 ;;Total ram usage:        1 bytes
 19746 ;; Hardware stack levels used:    1
 19747 ;; This function calls:
 19748 ;;		Nothing
 19749 ;; This function is called by:
 19750 ;;		i2_I2C_Master_Start
 19751 ;;		i2_I2C_Master_Stop
 19752 ;;		i2_I2C_Master_Write
 19753 ;;		i2_I2C_Master_Read
 19754 ;; This function uses a non-reentrant model
 19755 ;;
 19756                           
 19757                           	psect	text58
 19758  006226                     __ptext58:
 19759                           	opt stack 0
 19760  006226                     i2_I2C_Master_Wait:
 19761                           	opt stack 22
 19762                           
 19763                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 19764                           
 19765                           ;incstack = 0
 19766  006226  B4C7               	btfsc	4039,2,c	;volatile
 19767  006228  D7FE               	goto	i2_I2C_Master_Wait
 19768  00622A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19769  00622E  0E1F               	movlw	31
 19770  006230  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19771  006232  B4D8               	btfsc	status,2,c
 19772  006234  0012               	return	
 19773  006236  D7F7               	goto	i2_I2C_Master_Wait
 19774  006238                     __end_ofi2_I2C_Master_Wait:
 19775                           	opt stack 0
 19776                           pclatu	equ	0xFFB
 19777                           pclath	equ	0xFFA
 19778                           tblptru	equ	0xFF8
 19779                           tblptrh	equ	0xFF7
 19780                           tblptrl	equ	0xFF6
 19781                           tablat	equ	0xFF5
 19782                           prodh	equ	0xFF4
 19783                           prodl	equ	0xFF3
 19784                           intcon	equ	0xFF2
 19785                           intcon3	equ	0xFF0
 19786                           indf0	equ	0xFEF
 19787                           postinc0	equ	0xFEE
 19788                           fsr0h	equ	0xFEA
 19789                           fsr0l	equ	0xFE9
 19790                           wreg	equ	0xFE8
 19791                           postdec1	equ	0xFE5
 19792                           fsr1h	equ	0xFE2
 19793                           fsr1l	equ	0xFE1
 19794                           indf2	equ	0xFDF
 19795                           postinc2	equ	0xFDE
 19796                           postdec2	equ	0xFDD
 19797                           fsr2h	equ	0xFDA
 19798                           fsr2l	equ	0xFD9
 19799                           status	equ	0xFD8
 19800                           
 19801 ;; *************** function i2_I2C_Master_Init *****************
 19802 ;; Defined at:
 19803 ;;		line 14 in file "I2C.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;		None
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      void 
 19810 ;; Registers used:
 19811 ;;		wreg, status,2, status,0, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19819 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19820 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19821 ;;Total ram usage:        8 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    1
 19824 ;; This function calls:
 19825 ;;		i2___lldiv
 19826 ;; This function is called by:
 19827 ;;		_interruptHandler
 19828 ;; This function uses a non-reentrant model
 19829 ;;
 19830                           
 19831                           	psect	text59
 19832  005CF0                     __ptext59:
 19833                           	opt stack 0
 19834  005CF0                     i2_I2C_Master_Init:
 19835                           	opt stack 22
 19836                           
 19837                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 19838                           
 19839                           ;incstack = 0
 19840  005CF0  9AC6               	bcf	4038,5,c	;volatile
 19841                           
 19842                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 19843  005CF2  8694               	bsf	3988,3,c	;volatile
 19844                           
 19845                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 19846  005CF4  8894               	bsf	3988,4,c	;volatile
 19847                           
 19848                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 19849  005CF6  0E80               	movlw	128
 19850  005CF8  6EC7               	movwf	4039,c	;volatile
 19851                           
 19852                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 19853  005CFA  0E28               	movlw	40
 19854  005CFC  6EC6               	movwf	4038,c	;volatile
 19855                           
 19856                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 19857  005CFE  0E00               	movlw	0
 19858  005D00  6EC5               	movwf	4037,c	;volatile
 19859                           
 19860                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 19861  005D02  0E00               	movlw	0
 19862  005D04  6E01               	movwf	i2___lldiv@dividend,c
 19863  005D06  0E48               	movlw	72
 19864  005D08  6E02               	movwf	i2___lldiv@dividend+1,c
 19865  005D0A  0EE8               	movlw	232
 19866  005D0C  6E03               	movwf	i2___lldiv@dividend+2,c
 19867  005D0E  0E01               	movlw	1
 19868  005D10  6E04               	movwf	i2___lldiv@dividend+3,c
 19869  005D12  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 19870  005D16  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 19871  005D1A  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 19872  005D1E  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 19873  005D22  0E02               	movlw	2
 19874  005D24                     i2u488_45:
 19875  005D24  90D8               	bcf	status,0,c
 19876  005D26  3612               	rlcf	??i2_I2C_Master_Init,f,c
 19877  005D28  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 19878  005D2A  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 19879  005D2C  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 19880  005D2E  2EE8               	decfsz	wreg,f,c
 19881  005D30  D7F9               	goto	i2u488_45
 19882  005D32  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 19883  005D36  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 19884  005D3A  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 19885  005D3E  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 19886  005D42  EC6E  F02D         	call	i2___lldiv	;wreg free
 19887  005D46  0401               	decf	?i2___lldiv,w,c
 19888  005D48  6EC8               	movwf	4040,c	;volatile
 19889  005D4A  0012               	return		;funcret
 19890  005D4C                     __end_ofi2_I2C_Master_Init:
 19891                           	opt stack 0
 19892                           pclatu	equ	0xFFB
 19893                           pclath	equ	0xFFA
 19894                           tblptru	equ	0xFF8
 19895                           tblptrh	equ	0xFF7
 19896                           tblptrl	equ	0xFF6
 19897                           tablat	equ	0xFF5
 19898                           prodh	equ	0xFF4
 19899                           prodl	equ	0xFF3
 19900                           intcon	equ	0xFF2
 19901                           intcon3	equ	0xFF0
 19902                           indf0	equ	0xFEF
 19903                           postinc0	equ	0xFEE
 19904                           fsr0h	equ	0xFEA
 19905                           fsr0l	equ	0xFE9
 19906                           wreg	equ	0xFE8
 19907                           postdec1	equ	0xFE5
 19908                           fsr1h	equ	0xFE2
 19909                           fsr1l	equ	0xFE1
 19910                           indf2	equ	0xFDF
 19911                           postinc2	equ	0xFDE
 19912                           postdec2	equ	0xFDD
 19913                           fsr2h	equ	0xFDA
 19914                           fsr2l	equ	0xFD9
 19915                           status	equ	0xFD8
 19916                           
 19917 ;; *************** function i2___lldiv *****************
 19918 ;; Defined at:
 19919 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 19920 ;; Parameters:    Size  Location     Type
 19921 ;;  dividend        4    0[COMRAM] unsigned long 
 19922 ;;  divisor         4    4[COMRAM] unsigned long 
 19923 ;; Auto vars:     Size  Location     Type
 19924 ;;  __lldiv         4    8[COMRAM] unsigned long 
 19925 ;;  __lldiv         1   12[COMRAM] unsigned char 
 19926 ;; Return value:  Size  Location     Type
 19927 ;;                  4    0[COMRAM] unsigned long 
 19928 ;; Registers used:
 19929 ;;		wreg, status,2, status,0
 19930 ;; Tracked objects:
 19931 ;;		On entry : 0/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19935 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19936 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19938 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19939 ;;Total ram usage:       13 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; This function calls:
 19942 ;;		Nothing
 19943 ;; This function is called by:
 19944 ;;		i2_I2C_Master_Init
 19945 ;; This function uses a non-reentrant model
 19946 ;;
 19947                           
 19948                           	psect	text60
 19949  005ADC                     __ptext60:
 19950                           	opt stack 0
 19951  005ADC                     i2___lldiv:
 19952                           	opt stack 22
 19953                           
 19954                           ;incstack = 0
 19955  005ADC  0E00               	movlw	0
 19956  005ADE  6E09               	movwf	i2___lldiv@quotient,c
 19957  005AE0  0E00               	movlw	0
 19958  005AE2  6E0A               	movwf	i2___lldiv@quotient+1,c
 19959  005AE4  0E00               	movlw	0
 19960  005AE6  6E0B               	movwf	i2___lldiv@quotient+2,c
 19961  005AE8  0E00               	movlw	0
 19962  005AEA  6E0C               	movwf	i2___lldiv@quotient+3,c
 19963  005AEC  5005               	movf	i2___lldiv@divisor,w,c
 19964  005AEE  1006               	iorwf	i2___lldiv@divisor+1,w,c
 19965  005AF0  1007               	iorwf	i2___lldiv@divisor+2,w,c
 19966  005AF2  1008               	iorwf	i2___lldiv@divisor+3,w,c
 19967  005AF4  B4D8               	btfsc	status,2,c
 19968  005AF6  D02A               	goto	i2l1819
 19969  005AF8  0E01               	movlw	1
 19970  005AFA  6E0D               	movwf	i2___lldiv@counter,c
 19971  005AFC  D006               	goto	i2l1814
 19972  005AFE  90D8               	bcf	status,0,c
 19973  005B00  3605               	rlcf	i2___lldiv@divisor,f,c
 19974  005B02  3606               	rlcf	i2___lldiv@divisor+1,f,c
 19975  005B04  3607               	rlcf	i2___lldiv@divisor+2,f,c
 19976  005B06  3608               	rlcf	i2___lldiv@divisor+3,f,c
 19977  005B08  2A0D               	incf	i2___lldiv@counter,f,c
 19978  005B0A                     i2l1814:
 19979  005B0A  AE08               	btfss	i2___lldiv@divisor+3,7,c
 19980  005B0C  D7F8               	goto	i2l1815
 19981  005B0E                     i2u408_40:
 19982  005B0E  90D8               	bcf	status,0,c
 19983  005B10  3609               	rlcf	i2___lldiv@quotient,f,c
 19984  005B12  360A               	rlcf	i2___lldiv@quotient+1,f,c
 19985  005B14  360B               	rlcf	i2___lldiv@quotient+2,f,c
 19986  005B16  360C               	rlcf	i2___lldiv@quotient+3,f,c
 19987  005B18  5005               	movf	i2___lldiv@divisor,w,c
 19988  005B1A  5C01               	subwf	i2___lldiv@dividend,w,c
 19989  005B1C  5006               	movf	i2___lldiv@divisor+1,w,c
 19990  005B1E  5802               	subwfb	i2___lldiv@dividend+1,w,c
 19991  005B20  5007               	movf	i2___lldiv@divisor+2,w,c
 19992  005B22  5803               	subwfb	i2___lldiv@dividend+2,w,c
 19993  005B24  5008               	movf	i2___lldiv@divisor+3,w,c
 19994  005B26  5804               	subwfb	i2___lldiv@dividend+3,w,c
 19995  005B28  A0D8               	btfss	status,0,c
 19996  005B2A  D009               	goto	i2l1818
 19997  005B2C  5005               	movf	i2___lldiv@divisor,w,c
 19998  005B2E  5E01               	subwf	i2___lldiv@dividend,f,c
 19999  005B30  5006               	movf	i2___lldiv@divisor+1,w,c
 20000  005B32  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 20001  005B34  5007               	movf	i2___lldiv@divisor+2,w,c
 20002  005B36  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 20003  005B38  5008               	movf	i2___lldiv@divisor+3,w,c
 20004  005B3A  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 20005  005B3C  8009               	bsf	i2___lldiv@quotient,0,c
 20006  005B3E                     i2l1818:
 20007  005B3E  90D8               	bcf	status,0,c
 20008  005B40  3208               	rrcf	i2___lldiv@divisor+3,f,c
 20009  005B42  3207               	rrcf	i2___lldiv@divisor+2,f,c
 20010  005B44  3206               	rrcf	i2___lldiv@divisor+1,f,c
 20011  005B46  3205               	rrcf	i2___lldiv@divisor,f,c
 20012  005B48  2E0D               	decfsz	i2___lldiv@counter,f,c
 20013  005B4A  D7E1               	goto	i2u408_40
 20014  005B4C                     i2l1819:
 20015  005B4C  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 20016  005B50  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 20017  005B54  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 20018  005B58  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 20019  005B5C  0012               	return		;funcret
 20020  005B5E                     __end_ofi2___lldiv:
 20021                           	opt stack 0
 20022                           pclatu	equ	0xFFB
 20023                           pclath	equ	0xFFA
 20024                           tblptru	equ	0xFF8
 20025                           tblptrh	equ	0xFF7
 20026                           tblptrl	equ	0xFF6
 20027                           tablat	equ	0xFF5
 20028                           prodh	equ	0xFF4
 20029                           prodl	equ	0xFF3
 20030                           intcon	equ	0xFF2
 20031                           intcon3	equ	0xFF0
 20032                           indf0	equ	0xFEF
 20033                           postinc0	equ	0xFEE
 20034                           fsr0h	equ	0xFEA
 20035                           fsr0l	equ	0xFE9
 20036                           wreg	equ	0xFE8
 20037                           postdec1	equ	0xFE5
 20038                           fsr1h	equ	0xFE2
 20039                           fsr1l	equ	0xFE1
 20040                           indf2	equ	0xFDF
 20041                           postinc2	equ	0xFDE
 20042                           postdec2	equ	0xFDD
 20043                           fsr2h	equ	0xFDA
 20044                           fsr2l	equ	0xFD9
 20045                           status	equ	0xFD8
 20046                           
 20047 ;; *************** function _strncmp *****************
 20048 ;; Defined at:
 20049 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 20050 ;; Parameters:    Size  Location     Type
 20051 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 20052 ;;		 -> current_set(5), 
 20053 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 20054 ;;		 -> strs(100), 
 20055 ;;  len             2   10[COMRAM] unsigned int 
 20056 ;; Auto vars:     Size  Location     Type
 20057 ;;		None
 20058 ;; Return value:  Size  Location     Type
 20059 ;;                  2    6[COMRAM] int 
 20060 ;; Registers used:
 20061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20062 ;; Tracked objects:
 20063 ;;		On entry : 0/0
 20064 ;;		On exit  : 0/0
 20065 ;;		Unchanged: 0/0
 20066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20067 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20069 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20070 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20071 ;;Total ram usage:        9 bytes
 20072 ;; Hardware stack levels used:    1
 20073 ;; This function calls:
 20074 ;;		Nothing
 20075 ;; This function is called by:
 20076 ;;		_interruptHandler
 20077 ;; This function uses a non-reentrant model
 20078 ;;
 20079                           
 20080                           	psect	text61
 20081  00594E                     __ptext61:
 20082                           	opt stack 0
 20083  00594E                     _strncmp:
 20084                           	opt stack 23
 20085                           
 20086                           ;incstack = 0
 20087  00594E  D035               	goto	i2l2034
 20088  005950                     i2l6659:
 20089  005950  C007  FFD9         	movff	strncmp@s1,fsr2l
 20090  005954  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20091  005958  50DF               	movf	indf2,w,c
 20092  00595A  B4D8               	btfsc	status,2,c
 20093  00595C  D010               	goto	i2u448_40
 20094  00595E  C007  FFD9         	movff	strncmp@s1,fsr2l
 20095  005962  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20096  005966  50DF               	movf	indf2,w,c
 20097  005968  6E0D               	movwf	??_strncmp& (0+255),c
 20098  00596A  C009  FFF6         	movff	strncmp@s2,tblptrl
 20099  00596E  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 20100  005972                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20101  005972  6AF8               	clrf	tblptru,c
 20102  005974                     	endif
 20103  005974                     	if	0	;tblptru may be non-zero
 20104  005974                     	endif
 20105  005974  0008               	tblrd		*
 20106  005976  50F5               	movf	tablat,w,c
 20107  005978  180D               	xorwf	??_strncmp,w,c
 20108  00597A  B4D8               	btfsc	status,2,c
 20109  00597C  D01A               	goto	i2l2036
 20110  00597E                     i2u448_40:
 20111  00597E  C009  FFF6         	movff	strncmp@s2,tblptrl
 20112  005982  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 20113  005986                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20114  005986  6AF8               	clrf	tblptru,c
 20115  005988                     	endif
 20116  005988                     	if	0	;tblptru may be non-zero
 20117  005988                     	endif
 20118  005988  0008               	tblrd		*
 20119  00598A  50F5               	movf	tablat,w,c
 20120  00598C  6E0D               	movwf	??_strncmp& (0+255),c
 20121  00598E  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 20122  005990  1E0D               	comf	??_strncmp,f,c
 20123  005992  1E0E               	comf	??_strncmp+1,f,c
 20124  005994  4A0D               	infsnz	??_strncmp,f,c
 20125  005996  2A0E               	incf	??_strncmp+1,f,c
 20126  005998  C007  FFD9         	movff	strncmp@s1,fsr2l
 20127  00599C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20128  0059A0  50DF               	movf	indf2,w,c
 20129  0059A2  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 20130  0059A4  500F               	movf	??_strncmp+2,w,c
 20131  0059A6  240D               	addwf	??_strncmp,w,c
 20132  0059A8  6E07               	movwf	?_strncmp,c
 20133  0059AA  0E00               	movlw	0
 20134  0059AC  200E               	addwfc	??_strncmp+1,w,c
 20135  0059AE  6E08               	movwf	?_strncmp+1,c
 20136  0059B0  0012               	return	
 20137  0059B2                     i2l2036:
 20138  0059B2  4A07               	infsnz	strncmp@s1,f,c
 20139  0059B4  2A08               	incf	strncmp@s1+1,f,c
 20140  0059B6  4A09               	infsnz	strncmp@s2,f,c
 20141  0059B8  2A0A               	incf	strncmp@s2+1,f,c
 20142  0059BA                     i2l2034:
 20143  0059BA  060B               	decf	strncmp@len,f,c
 20144  0059BC  A0D8               	btfss	status,0,c
 20145  0059BE  060C               	decf	strncmp@len+1,f,c
 20146  0059C0  280B               	incf	strncmp@len,w,c
 20147  0059C2  E1C6               	bnz	i2l6659
 20148  0059C4  280C               	incf	strncmp@len+1,w,c
 20149  0059C6  A4D8               	btfss	status,2,c
 20150  0059C8  D7C3               	goto	i2l2035
 20151  0059CA  0E00               	movlw	0
 20152  0059CC  6E08               	movwf	?_strncmp+1,c
 20153  0059CE  0E00               	movlw	0
 20154  0059D0  6E07               	movwf	?_strncmp,c
 20155  0059D2  0012               	return	
 20156  0059D4                     __end_of_strncmp:
 20157                           	opt stack 0
 20158                           pclatu	equ	0xFFB
 20159                           pclath	equ	0xFFA
 20160                           tblptru	equ	0xFF8
 20161                           tblptrh	equ	0xFF7
 20162                           tblptrl	equ	0xFF6
 20163                           tablat	equ	0xFF5
 20164                           prodh	equ	0xFF4
 20165                           prodl	equ	0xFF3
 20166                           intcon	equ	0xFF2
 20167                           intcon3	equ	0xFF0
 20168                           indf0	equ	0xFEF
 20169                           postinc0	equ	0xFEE
 20170                           fsr0h	equ	0xFEA
 20171                           fsr0l	equ	0xFE9
 20172                           wreg	equ	0xFE8
 20173                           postdec1	equ	0xFE5
 20174                           fsr1h	equ	0xFE2
 20175                           fsr1l	equ	0xFE1
 20176                           indf2	equ	0xFDF
 20177                           postinc2	equ	0xFDE
 20178                           postdec2	equ	0xFDD
 20179                           fsr2h	equ	0xFDA
 20180                           fsr2l	equ	0xFD9
 20181                           status	equ	0xFD8
 20182                           
 20183 ;; *************** function _strcpy *****************
 20184 ;; Defined at:
 20185 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 20186 ;; Parameters:    Size  Location     Type
 20187 ;;  to              2    6[COMRAM] PTR unsigned char 
 20188 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 20189 ;;  from            2    8[COMRAM] PTR const unsigned char 
 20190 ;;		 -> STR_57(1), STR_55(1), STR_52(1), STR_49(2), 
 20191 ;;		 -> STR_48(2), STR_47(2), STR_46(2), current_set(5), 
 20192 ;; Auto vars:     Size  Location     Type
 20193 ;;  cp              2   10[COMRAM] PTR unsigned char 
 20194 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 20195 ;; Return value:  Size  Location     Type
 20196 ;;                  2    6[COMRAM] PTR unsigned char 
 20197 ;; Registers used:
 20198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20199 ;; Tracked objects:
 20200 ;;		On entry : 0/0
 20201 ;;		On exit  : 0/0
 20202 ;;		Unchanged: 0/0
 20203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20207 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20208 ;;Total ram usage:        6 bytes
 20209 ;; Hardware stack levels used:    1
 20210 ;; This function calls:
 20211 ;;		Nothing
 20212 ;; This function is called by:
 20213 ;;		_interruptHandler
 20214 ;; This function uses a non-reentrant model
 20215 ;;
 20216                           
 20217                           	psect	text62
 20218  005ED4                     __ptext62:
 20219                           	opt stack 0
 20220  005ED4                     _strcpy:
 20221                           	opt stack 23
 20222                           
 20223                           ;incstack = 0
 20224  005ED4  C007  F00B         	movff	strcpy@to,strcpy@cp
 20225  005ED8  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 20226  005EDC  D004               	goto	i2l2028
 20227  005EDE  4A0B               	infsnz	strcpy@cp,f,c
 20228  005EE0  2A0C               	incf	strcpy@cp+1,f,c
 20229  005EE2  4A09               	infsnz	strcpy@from,f,c
 20230  005EE4  2A0A               	incf	strcpy@from+1,f,c
 20231  005EE6                     i2l2028:
 20232  005EE6  C009  FFF6         	movff	strcpy@from,tblptrl
 20233  005EEA  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 20234  005EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 20235  005EF0  6EF8               	movwf	tblptru,c
 20236  005EF2  C00B  FFD9         	movff	strcpy@cp,fsr2l
 20237  005EF6  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 20238  005EFA  0E0F               	movlw	(high __ramtop+-1)
 20239  005EFC  64F7               	cpfsgt	tblptrh,c
 20240  005EFE  D003               	bra	i2u443_47
 20241  005F00  0008               	tblrd		*
 20242  005F02  50F5               	movf	tablat,w,c
 20243  005F04  D005               	bra	i2u443_40
 20244  005F06                     i2u443_47:
 20245  005F06  CFF6 FFE9          	movff	tblptrl,fsr0l
 20246  005F0A  CFF7 FFEA          	movff	tblptrh,fsr0h
 20247  005F0E  50EF               	movf	indf0,w,c
 20248  005F10                     i2u443_40:
 20249  005F10  6EDF               	movwf	indf2,c
 20250  005F12  50DF               	movf	indf2,w,c
 20251  005F14  B4D8               	btfsc	status,2,c
 20252  005F16  0012               	return	
 20253  005F18  D7E2               	goto	i2l2029
 20254  005F1A                     __end_of_strcpy:
 20255                           	opt stack 0
 20256                           pclatu	equ	0xFFB
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           intcon3	equ	0xFF0
 20266                           indf0	equ	0xFEF
 20267                           postinc0	equ	0xFEE
 20268                           fsr0h	equ	0xFEA
 20269                           fsr0l	equ	0xFE9
 20270                           wreg	equ	0xFE8
 20271                           postdec1	equ	0xFE5
 20272                           fsr1h	equ	0xFE2
 20273                           fsr1l	equ	0xFE1
 20274                           indf2	equ	0xFDF
 20275                           postinc2	equ	0xFDE
 20276                           postdec2	equ	0xFDD
 20277                           fsr2h	equ	0xFDA
 20278                           fsr2l	equ	0xFD9
 20279                           status	equ	0xFD8
 20280                           
 20281 ;; *************** function _strcat *****************
 20282 ;; Defined at:
 20283 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  to              2    0[COMRAM] PTR unsigned char 
 20286 ;;		 -> current_set(5), 
 20287 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20288 ;;		 -> temp_set(5), 
 20289 ;; Auto vars:     Size  Location     Type
 20290 ;;  cp              2    4[COMRAM] PTR unsigned char 
 20291 ;;		 -> current_set(5), 
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  2    0[COMRAM] PTR unsigned char 
 20294 ;; Registers used:
 20295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20304 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;Total ram usage:        6 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; This function calls:
 20308 ;;		Nothing
 20309 ;; This function is called by:
 20310 ;;		_interruptHandler
 20311 ;; This function uses a non-reentrant model
 20312 ;;
 20313                           
 20314                           	psect	text63
 20315  005FA0                     __ptext63:
 20316                           	opt stack 0
 20317  005FA0                     _strcat:
 20318                           	opt stack 23
 20319                           
 20320                           ;incstack = 0
 20321  005FA0  C001  F005         	movff	strcat@to,strcat@cp
 20322  005FA4  C002  F006         	movff	strcat@to+1,strcat@cp+1
 20323  005FA8  D002               	goto	i2l2011
 20324  005FAA  4A05               	infsnz	strcat@cp,f,c
 20325  005FAC  2A06               	incf	strcat@cp+1,f,c
 20326  005FAE                     i2l2011:
 20327  005FAE  C005  FFD9         	movff	strcat@cp,fsr2l
 20328  005FB2  C006  FFDA         	movff	strcat@cp+1,fsr2h
 20329  005FB6  50DF               	movf	indf2,w,c
 20330  005FB8  B4D8               	btfsc	status,2,c
 20331  005FBA  D005               	goto	i2l2014
 20332  005FBC  D7F6               	goto	i2l2012
 20333  005FBE  4A05               	infsnz	strcat@cp,f,c
 20334  005FC0  2A06               	incf	strcat@cp+1,f,c
 20335  005FC2  4A03               	infsnz	strcat@from,f,c
 20336  005FC4  2A04               	incf	strcat@from+1,f,c
 20337  005FC6                     i2l2014:
 20338  005FC6  C003  FFD9         	movff	strcat@from,fsr2l
 20339  005FCA  C004  FFDA         	movff	strcat@from+1,fsr2h
 20340  005FCE  C005  FFE1         	movff	strcat@cp,fsr1l
 20341  005FD2  C006  FFE2         	movff	strcat@cp+1,fsr1h
 20342  005FD6  CFDF FFE7          	movff	indf2,indf1
 20343  005FDA  50E7               	movf	indf1,w,c
 20344  005FDC  B4D8               	btfsc	status,2,c
 20345  005FDE  0012               	return	
 20346  005FE0  D7EE               	goto	i2l2015
 20347  005FE2                     __end_of_strcat:
 20348                           	opt stack 0
 20349                           pclatu	equ	0xFFB
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           intcon3	equ	0xFF0
 20359                           indf0	equ	0xFEF
 20360                           postinc0	equ	0xFEE
 20361                           fsr0h	equ	0xFEA
 20362                           fsr0l	equ	0xFE9
 20363                           wreg	equ	0xFE8
 20364                           indf1	equ	0xFE7
 20365                           postdec1	equ	0xFE5
 20366                           fsr1h	equ	0xFE2
 20367                           fsr1l	equ	0xFE1
 20368                           indf2	equ	0xFDF
 20369                           postinc2	equ	0xFDE
 20370                           postdec2	equ	0xFDD
 20371                           fsr2h	equ	0xFDA
 20372                           fsr2l	equ	0xFD9
 20373                           status	equ	0xFD8
 20374                           
 20375 ;; *************** function _is_valid *****************
 20376 ;; Defined at:
 20377 ;;		line 12 in file "keypad.c"
 20378 ;; Parameters:    Size  Location     Type
 20379 ;;		None
 20380 ;; Auto vars:     Size  Location     Type
 20381 ;;		None
 20382 ;; Return value:  Size  Location     Type
 20383 ;;                  2  157[None  ] int 
 20384 ;; Registers used:
 20385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20386 ;; Tracked objects:
 20387 ;;		On entry : 0/0
 20388 ;;		On exit  : 0/0
 20389 ;;		Unchanged: 0/0
 20390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;Total ram usage:        2 bytes
 20396 ;; Hardware stack levels used:    1
 20397 ;; Hardware stack levels required when called:    1
 20398 ;; This function calls:
 20399 ;;		_strcmp
 20400 ;;		i2___wmul
 20401 ;; This function is called by:
 20402 ;;		_interruptHandler
 20403 ;; This function uses a non-reentrant model
 20404 ;;
 20405                           
 20406                           	psect	text64
 20407  000FEA                     __ptext64:
 20408                           	opt stack 0
 20409  000FEA                     _is_valid:
 20410                           	opt stack 22
 20411                           
 20412                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 20413                           
 20414                           ;incstack = 0
 20415  000FEA  0E70               	movlw	low _current_set2
 20416  000FEC  6E01               	movwf	strcmp@s1,c
 20417  000FEE  0E00               	movlw	high _current_set2
 20418  000FF0  6E02               	movwf	strcmp@s1+1,c
 20419  000FF2  0EFD               	movlw	low STR_46
 20420  000FF4  6E03               	movwf	strcmp@s2,c
 20421  000FF6  0EFF               	movlw	high STR_46
 20422  000FF8  6E04               	movwf	strcmp@s2+1,c
 20423  000FFA  EC45  F02F         	call	_strcmp	;wreg free
 20424  000FFE  5001               	movf	?_strcmp,w,c
 20425  001000  1002               	iorwf	?_strcmp+1,w,c
 20426  001002  A4D8               	btfss	status,2,c
 20427  001004  D023               	goto	i2l1016
 20428                           
 20429                           ;keypad.c: 17: B=1*number;
 20430  001006  C075  F058         	movff	_number,_B
 20431  00100A  C076  F059         	movff	_number+1,_B+1
 20432                           
 20433                           ;keypad.c: 18: total_number = 1*number;
 20434  00100E  C075  F18A         	movff	_number,_total_number
 20435  001012  C076  F18B         	movff	_number+1,_total_number+1
 20436                           
 20437                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 20438  001016  90D8               	bcf	status,0,c
 20439  001018  345A               	rlcf	_counter_step,w,c
 20440  00101A  6ED9               	movwf	fsr2l,c
 20441  00101C  345B               	rlcf	_counter_step+1,w,c
 20442  00101E  6EDA               	movwf	fsr2h,c
 20443  001020  0E42               	movlw	low _compartment_number
 20444  001022  26D9               	addwf	fsr2l,f,c
 20445  001024  0E00               	movlw	high _compartment_number
 20446  001026  22DA               	addwfc	fsr2h,f,c
 20447  001028  CFDE F007          	movff	postinc2,??_is_valid
 20448  00102C  CFDD F008          	movff	postdec2,??_is_valid+1
 20449  001030  90D8               	bcf	status,0,c
 20450  001032  3607               	rlcf	??_is_valid,f,c
 20451  001034  3608               	rlcf	??_is_valid+1,f,c
 20452  001036  0E30               	movlw	low _B_array
 20453  001038  2407               	addwf	??_is_valid,w,c
 20454  00103A  6ED9               	movwf	fsr2l,c
 20455  00103C  0E01               	movlw	high _B_array
 20456  00103E  2008               	addwfc	??_is_valid+1,w,c
 20457  001040  6EDA               	movwf	fsr2h,c
 20458  001042  C058  FFDE         	movff	_B,postinc2
 20459  001046  C059  FFDD         	movff	_B+1,postdec2
 20460                           
 20461                           ;keypad.c: 22: }
 20462  00104A  0012               	return	
 20463  00104C                     i2l1016:
 20464                           
 20465                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 20466  00104C  0E70               	movlw	low _current_set2
 20467  00104E  6E01               	movwf	strcmp@s1,c
 20468  001050  0E00               	movlw	high _current_set2
 20469  001052  6E02               	movwf	strcmp@s1+1,c
 20470  001054  0EEA               	movlw	low (STR_85+2)
 20471  001056  6E03               	movwf	strcmp@s2,c
 20472  001058  0EFF               	movlw	high (STR_85+2)
 20473  00105A  6E04               	movwf	strcmp@s2+1,c
 20474  00105C  EC45  F02F         	call	_strcmp	;wreg free
 20475  001060  5001               	movf	?_strcmp,w,c
 20476  001062  1002               	iorwf	?_strcmp+1,w,c
 20477  001064  A4D8               	btfss	status,2,c
 20478  001066  D023               	goto	i2l1018
 20479                           
 20480                           ;keypad.c: 25: N=1*number;
 20481  001068  C075  F056         	movff	_number,_N
 20482  00106C  C076  F057         	movff	_number+1,_N+1
 20483                           
 20484                           ;keypad.c: 26: total_number = 1*number;
 20485  001070  C075  F18A         	movff	_number,_total_number
 20486  001074  C076  F18B         	movff	_number+1,_total_number+1
 20487                           
 20488                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 20489  001078  90D8               	bcf	status,0,c
 20490  00107A  345A               	rlcf	_counter_step,w,c
 20491  00107C  6ED9               	movwf	fsr2l,c
 20492  00107E  345B               	rlcf	_counter_step+1,w,c
 20493  001080  6EDA               	movwf	fsr2h,c
 20494  001082  0E42               	movlw	low _compartment_number
 20495  001084  26D9               	addwf	fsr2l,f,c
 20496  001086  0E00               	movlw	high _compartment_number
 20497  001088  22DA               	addwfc	fsr2h,f,c
 20498  00108A  CFDE F007          	movff	postinc2,??_is_valid
 20499  00108E  CFDD F008          	movff	postdec2,??_is_valid+1
 20500  001092  90D8               	bcf	status,0,c
 20501  001094  3607               	rlcf	??_is_valid,f,c
 20502  001096  3608               	rlcf	??_is_valid+1,f,c
 20503  001098  0E10               	movlw	low _N_array
 20504  00109A  2407               	addwf	??_is_valid,w,c
 20505  00109C  6ED9               	movwf	fsr2l,c
 20506  00109E  0E01               	movlw	high _N_array
 20507  0010A0  2008               	addwfc	??_is_valid+1,w,c
 20508  0010A2  6EDA               	movwf	fsr2h,c
 20509  0010A4  C056  FFDE         	movff	_N,postinc2
 20510  0010A8  C057  FFDD         	movff	_N+1,postdec2
 20511                           
 20512                           ;keypad.c: 28: }
 20513  0010AC  0012               	return	
 20514  0010AE                     i2l1018:
 20515                           
 20516                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 20517  0010AE  0E70               	movlw	low _current_set2
 20518  0010B0  6E01               	movwf	strcmp@s1,c
 20519  0010B2  0E00               	movlw	high _current_set2
 20520  0010B4  6E02               	movwf	strcmp@s1+1,c
 20521  0010B6  0EEE               	movlw	low (STR_86+2)
 20522  0010B8  6E03               	movwf	strcmp@s2,c
 20523  0010BA  0EFF               	movlw	high (STR_86+2)
 20524  0010BC  6E04               	movwf	strcmp@s2+1,c
 20525  0010BE  EC45  F02F         	call	_strcmp	;wreg free
 20526  0010C2  5001               	movf	?_strcmp,w,c
 20527  0010C4  1002               	iorwf	?_strcmp+1,w,c
 20528  0010C6  A4D8               	btfss	status,2,c
 20529  0010C8  D023               	goto	i2l1020
 20530                           
 20531                           ;keypad.c: 30: S=1*number;
 20532  0010CA  C075  F054         	movff	_number,_S
 20533  0010CE  C076  F055         	movff	_number+1,_S+1
 20534                           
 20535                           ;keypad.c: 31: total_number = 1*number;
 20536  0010D2  C075  F18A         	movff	_number,_total_number
 20537  0010D6  C076  F18B         	movff	_number+1,_total_number+1
 20538                           
 20539                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 20540  0010DA  90D8               	bcf	status,0,c
 20541  0010DC  345A               	rlcf	_counter_step,w,c
 20542  0010DE  6ED9               	movwf	fsr2l,c
 20543  0010E0  345B               	rlcf	_counter_step+1,w,c
 20544  0010E2  6EDA               	movwf	fsr2h,c
 20545  0010E4  0E42               	movlw	low _compartment_number
 20546  0010E6  26D9               	addwf	fsr2l,f,c
 20547  0010E8  0E00               	movlw	high _compartment_number
 20548  0010EA  22DA               	addwfc	fsr2h,f,c
 20549  0010EC  CFDE F007          	movff	postinc2,??_is_valid
 20550  0010F0  CFDD F008          	movff	postdec2,??_is_valid+1
 20551  0010F4  90D8               	bcf	status,0,c
 20552  0010F6  3607               	rlcf	??_is_valid,f,c
 20553  0010F8  3608               	rlcf	??_is_valid+1,f,c
 20554  0010FA  0E20               	movlw	low _S_array
 20555  0010FC  2407               	addwf	??_is_valid,w,c
 20556  0010FE  6ED9               	movwf	fsr2l,c
 20557  001100  0E01               	movlw	high _S_array
 20558  001102  2008               	addwfc	??_is_valid+1,w,c
 20559  001104  6EDA               	movwf	fsr2h,c
 20560  001106  C054  FFDE         	movff	_S,postinc2
 20561  00110A  C055  FFDD         	movff	_S+1,postdec2
 20562                           
 20563                           ;keypad.c: 33: }
 20564  00110E  0012               	return	
 20565  001110                     i2l1020:
 20566                           
 20567                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 20568  001110  0E70               	movlw	low _current_set2
 20569  001112  6E01               	movwf	strcmp@s1,c
 20570  001114  0E00               	movlw	high _current_set2
 20571  001116  6E02               	movwf	strcmp@s1+1,c
 20572  001118  0EF2               	movlw	low (STR_87+2)
 20573  00111A  6E03               	movwf	strcmp@s2,c
 20574  00111C  0EFF               	movlw	high (STR_87+2)
 20575  00111E  6E04               	movwf	strcmp@s2+1,c
 20576  001120  EC45  F02F         	call	_strcmp	;wreg free
 20577  001124  5001               	movf	?_strcmp,w,c
 20578  001126  1002               	iorwf	?_strcmp+1,w,c
 20579  001128  A4D8               	btfss	status,2,c
 20580  00112A  D023               	goto	i2l1022
 20581                           
 20582                           ;keypad.c: 35: W=1*number;
 20583  00112C  C075  F052         	movff	_number,_W
 20584  001130  C076  F053         	movff	_number+1,_W+1
 20585                           
 20586                           ;keypad.c: 36: total_number = 1*number;
 20587  001134  C075  F18A         	movff	_number,_total_number
 20588  001138  C076  F18B         	movff	_number+1,_total_number+1
 20589                           
 20590                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 20591  00113C  90D8               	bcf	status,0,c
 20592  00113E  345A               	rlcf	_counter_step,w,c
 20593  001140  6ED9               	movwf	fsr2l,c
 20594  001142  345B               	rlcf	_counter_step+1,w,c
 20595  001144  6EDA               	movwf	fsr2h,c
 20596  001146  0E42               	movlw	low _compartment_number
 20597  001148  26D9               	addwf	fsr2l,f,c
 20598  00114A  0E00               	movlw	high _compartment_number
 20599  00114C  22DA               	addwfc	fsr2h,f,c
 20600  00114E  CFDE F007          	movff	postinc2,??_is_valid
 20601  001152  CFDD F008          	movff	postdec2,??_is_valid+1
 20602  001156  90D8               	bcf	status,0,c
 20603  001158  3607               	rlcf	??_is_valid,f,c
 20604  00115A  3608               	rlcf	??_is_valid+1,f,c
 20605  00115C  0E00               	movlw	low _W_array
 20606  00115E  2407               	addwf	??_is_valid,w,c
 20607  001160  6ED9               	movwf	fsr2l,c
 20608  001162  0E01               	movlw	high _W_array
 20609  001164  2008               	addwfc	??_is_valid+1,w,c
 20610  001166  6EDA               	movwf	fsr2h,c
 20611  001168  C052  FFDE         	movff	_W,postinc2
 20612  00116C  C053  FFDD         	movff	_W+1,postdec2
 20613                           
 20614                           ;keypad.c: 38: }
 20615  001170  0012               	return	
 20616  001172                     i2l1022:
 20617                           
 20618                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 20619  001172  0E70               	movlw	low _current_set2
 20620  001174  6E01               	movwf	strcmp@s1,c
 20621  001176  0E00               	movlw	high _current_set2
 20622  001178  6E02               	movwf	strcmp@s1+1,c
 20623  00117A  0EE9               	movlw	low (STR_85+1)
 20624  00117C  6E03               	movwf	strcmp@s2,c
 20625  00117E  0EFF               	movlw	high (STR_85+1)
 20626  001180  6E04               	movwf	strcmp@s2+1,c
 20627  001182  EC45  F02F         	call	_strcmp	;wreg free
 20628  001186  5001               	movf	?_strcmp,w,c
 20629  001188  1002               	iorwf	?_strcmp+1,w,c
 20630  00118A  A4D8               	btfss	status,2,c
 20631  00118C  D043               	goto	i2l1024
 20632                           
 20633                           ;keypad.c: 40: B = 1*number;
 20634  00118E  C075  F058         	movff	_number,_B
 20635  001192  C076  F059         	movff	_number+1,_B+1
 20636                           
 20637                           ;keypad.c: 42: N = 1*number;
 20638  001196  C075  F056         	movff	_number,_N
 20639  00119A  C076  F057         	movff	_number+1,_N+1
 20640                           
 20641                           ;keypad.c: 43: total_number = 2*number;
 20642  00119E  90D8               	bcf	status,0,c
 20643  0011A0  3475               	rlcf	_number,w,c
 20644  0011A2  0101               	movlb	1	; () banked
 20645  0011A4  6F8A               	movwf	_total_number& (0+255),b
 20646  0011A6  3476               	rlcf	_number+1,w,c
 20647  0011A8  6F8B               	movwf	(_total_number+1)& (0+255),b
 20648                           
 20649                           ; BSR set to: 1
 20650                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 20651  0011AA  90D8               	bcf	status,0,c
 20652  0011AC  345A               	rlcf	_counter_step,w,c
 20653  0011AE  6ED9               	movwf	fsr2l,c
 20654  0011B0  345B               	rlcf	_counter_step+1,w,c
 20655  0011B2  6EDA               	movwf	fsr2h,c
 20656  0011B4  0E42               	movlw	low _compartment_number
 20657  0011B6  26D9               	addwf	fsr2l,f,c
 20658  0011B8  0E00               	movlw	high _compartment_number
 20659  0011BA  22DA               	addwfc	fsr2h,f,c
 20660  0011BC  CFDE F007          	movff	postinc2,??_is_valid
 20661  0011C0  CFDD F008          	movff	postdec2,??_is_valid+1
 20662  0011C4  90D8               	bcf	status,0,c
 20663  0011C6  3607               	rlcf	??_is_valid,f,c
 20664  0011C8  3608               	rlcf	??_is_valid+1,f,c
 20665  0011CA  0E30               	movlw	low _B_array
 20666  0011CC  2407               	addwf	??_is_valid,w,c
 20667  0011CE  6ED9               	movwf	fsr2l,c
 20668  0011D0  0E01               	movlw	high _B_array
 20669  0011D2  2008               	addwfc	??_is_valid+1,w,c
 20670  0011D4  6EDA               	movwf	fsr2h,c
 20671  0011D6  C058  FFDE         	movff	_B,postinc2
 20672  0011DA  C059  FFDD         	movff	_B+1,postdec2
 20673                           
 20674                           ; BSR set to: 1
 20675                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 20676  0011DE  90D8               	bcf	status,0,c
 20677  0011E0  345A               	rlcf	_counter_step,w,c
 20678  0011E2  6ED9               	movwf	fsr2l,c
 20679  0011E4  345B               	rlcf	_counter_step+1,w,c
 20680  0011E6  6EDA               	movwf	fsr2h,c
 20681  0011E8  0E42               	movlw	low _compartment_number
 20682  0011EA  26D9               	addwf	fsr2l,f,c
 20683  0011EC  0E00               	movlw	high _compartment_number
 20684  0011EE  22DA               	addwfc	fsr2h,f,c
 20685  0011F0  CFDE F007          	movff	postinc2,??_is_valid
 20686  0011F4  CFDD F008          	movff	postdec2,??_is_valid+1
 20687  0011F8  90D8               	bcf	status,0,c
 20688  0011FA  3607               	rlcf	??_is_valid,f,c
 20689  0011FC  3608               	rlcf	??_is_valid+1,f,c
 20690  0011FE  0E10               	movlw	low _N_array
 20691  001200  2407               	addwf	??_is_valid,w,c
 20692  001202  6ED9               	movwf	fsr2l,c
 20693  001204  0E01               	movlw	high _N_array
 20694  001206  2008               	addwfc	??_is_valid+1,w,c
 20695  001208  6EDA               	movwf	fsr2h,c
 20696  00120A  C056  FFDE         	movff	_N,postinc2
 20697  00120E  C057  FFDD         	movff	_N+1,postdec2
 20698                           
 20699                           ;keypad.c: 47: }
 20700  001212  0012               	return	
 20701  001214                     i2l1024:
 20702                           
 20703                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 20704                           
 20705                           ; BSR set to: 1
 20706  001214  0E70               	movlw	low _current_set2
 20707  001216  6E01               	movwf	strcmp@s1,c
 20708  001218  0E00               	movlw	high _current_set2
 20709  00121A  6E02               	movwf	strcmp@s1+1,c
 20710  00121C  0EED               	movlw	low (STR_86+1)
 20711  00121E  6E03               	movwf	strcmp@s2,c
 20712  001220  0EFF               	movlw	high (STR_86+1)
 20713  001222  6E04               	movwf	strcmp@s2+1,c
 20714  001224  EC45  F02F         	call	_strcmp	;wreg free
 20715  001228  5001               	movf	?_strcmp,w,c
 20716  00122A  1002               	iorwf	?_strcmp+1,w,c
 20717  00122C  A4D8               	btfss	status,2,c
 20718  00122E  D043               	goto	i2l1026
 20719                           
 20720                           ;keypad.c: 49: B = 1*number;
 20721  001230  C075  F058         	movff	_number,_B
 20722  001234  C076  F059         	movff	_number+1,_B+1
 20723                           
 20724                           ;keypad.c: 51: S = 1*number;
 20725  001238  C075  F054         	movff	_number,_S
 20726  00123C  C076  F055         	movff	_number+1,_S+1
 20727                           
 20728                           ;keypad.c: 52: total_number = 2*number;
 20729  001240  90D8               	bcf	status,0,c
 20730  001242  3475               	rlcf	_number,w,c
 20731  001244  0101               	movlb	1	; () banked
 20732  001246  6F8A               	movwf	_total_number& (0+255),b
 20733  001248  3476               	rlcf	_number+1,w,c
 20734  00124A  6F8B               	movwf	(_total_number+1)& (0+255),b
 20735                           
 20736                           ; BSR set to: 1
 20737                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 20738  00124C  90D8               	bcf	status,0,c
 20739  00124E  345A               	rlcf	_counter_step,w,c
 20740  001250  6ED9               	movwf	fsr2l,c
 20741  001252  345B               	rlcf	_counter_step+1,w,c
 20742  001254  6EDA               	movwf	fsr2h,c
 20743  001256  0E42               	movlw	low _compartment_number
 20744  001258  26D9               	addwf	fsr2l,f,c
 20745  00125A  0E00               	movlw	high _compartment_number
 20746  00125C  22DA               	addwfc	fsr2h,f,c
 20747  00125E  CFDE F007          	movff	postinc2,??_is_valid
 20748  001262  CFDD F008          	movff	postdec2,??_is_valid+1
 20749  001266  90D8               	bcf	status,0,c
 20750  001268  3607               	rlcf	??_is_valid,f,c
 20751  00126A  3608               	rlcf	??_is_valid+1,f,c
 20752  00126C  0E30               	movlw	low _B_array
 20753  00126E  2407               	addwf	??_is_valid,w,c
 20754  001270  6ED9               	movwf	fsr2l,c
 20755  001272  0E01               	movlw	high _B_array
 20756  001274  2008               	addwfc	??_is_valid+1,w,c
 20757  001276  6EDA               	movwf	fsr2h,c
 20758  001278  C058  FFDE         	movff	_B,postinc2
 20759  00127C  C059  FFDD         	movff	_B+1,postdec2
 20760                           
 20761                           ; BSR set to: 1
 20762                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 20763  001280  90D8               	bcf	status,0,c
 20764  001282  345A               	rlcf	_counter_step,w,c
 20765  001284  6ED9               	movwf	fsr2l,c
 20766  001286  345B               	rlcf	_counter_step+1,w,c
 20767  001288  6EDA               	movwf	fsr2h,c
 20768  00128A  0E42               	movlw	low _compartment_number
 20769  00128C  26D9               	addwf	fsr2l,f,c
 20770  00128E  0E00               	movlw	high _compartment_number
 20771  001290  22DA               	addwfc	fsr2h,f,c
 20772  001292  CFDE F007          	movff	postinc2,??_is_valid
 20773  001296  CFDD F008          	movff	postdec2,??_is_valid+1
 20774  00129A  90D8               	bcf	status,0,c
 20775  00129C  3607               	rlcf	??_is_valid,f,c
 20776  00129E  3608               	rlcf	??_is_valid+1,f,c
 20777  0012A0  0E20               	movlw	low _S_array
 20778  0012A2  2407               	addwf	??_is_valid,w,c
 20779  0012A4  6ED9               	movwf	fsr2l,c
 20780  0012A6  0E01               	movlw	high _S_array
 20781  0012A8  2008               	addwfc	??_is_valid+1,w,c
 20782  0012AA  6EDA               	movwf	fsr2h,c
 20783  0012AC  C054  FFDE         	movff	_S,postinc2
 20784  0012B0  C055  FFDD         	movff	_S+1,postdec2
 20785                           
 20786                           ;keypad.c: 57: }
 20787  0012B4  0012               	return	
 20788  0012B6                     i2l1026:
 20789                           
 20790                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 20791                           
 20792                           ; BSR set to: 1
 20793  0012B6  0E70               	movlw	low _current_set2
 20794  0012B8  6E01               	movwf	strcmp@s1,c
 20795  0012BA  0E00               	movlw	high _current_set2
 20796  0012BC  6E02               	movwf	strcmp@s1+1,c
 20797  0012BE  0EF1               	movlw	low (STR_87+1)
 20798  0012C0  6E03               	movwf	strcmp@s2,c
 20799  0012C2  0EFF               	movlw	high (STR_87+1)
 20800  0012C4  6E04               	movwf	strcmp@s2+1,c
 20801  0012C6  EC45  F02F         	call	_strcmp	;wreg free
 20802  0012CA  5001               	movf	?_strcmp,w,c
 20803  0012CC  1002               	iorwf	?_strcmp+1,w,c
 20804  0012CE  A4D8               	btfss	status,2,c
 20805  0012D0  D043               	goto	i2l1028
 20806                           
 20807                           ;keypad.c: 60: B = 1*number;
 20808  0012D2  C075  F058         	movff	_number,_B
 20809  0012D6  C076  F059         	movff	_number+1,_B+1
 20810                           
 20811                           ;keypad.c: 62: W = 1*number;
 20812  0012DA  C075  F052         	movff	_number,_W
 20813  0012DE  C076  F053         	movff	_number+1,_W+1
 20814                           
 20815                           ;keypad.c: 63: total_number = 2*number;
 20816  0012E2  90D8               	bcf	status,0,c
 20817  0012E4  3475               	rlcf	_number,w,c
 20818  0012E6  0101               	movlb	1	; () banked
 20819  0012E8  6F8A               	movwf	_total_number& (0+255),b
 20820  0012EA  3476               	rlcf	_number+1,w,c
 20821  0012EC  6F8B               	movwf	(_total_number+1)& (0+255),b
 20822                           
 20823                           ; BSR set to: 1
 20824                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 20825  0012EE  90D8               	bcf	status,0,c
 20826  0012F0  345A               	rlcf	_counter_step,w,c
 20827  0012F2  6ED9               	movwf	fsr2l,c
 20828  0012F4  345B               	rlcf	_counter_step+1,w,c
 20829  0012F6  6EDA               	movwf	fsr2h,c
 20830  0012F8  0E42               	movlw	low _compartment_number
 20831  0012FA  26D9               	addwf	fsr2l,f,c
 20832  0012FC  0E00               	movlw	high _compartment_number
 20833  0012FE  22DA               	addwfc	fsr2h,f,c
 20834  001300  CFDE F007          	movff	postinc2,??_is_valid
 20835  001304  CFDD F008          	movff	postdec2,??_is_valid+1
 20836  001308  90D8               	bcf	status,0,c
 20837  00130A  3607               	rlcf	??_is_valid,f,c
 20838  00130C  3608               	rlcf	??_is_valid+1,f,c
 20839  00130E  0E30               	movlw	low _B_array
 20840  001310  2407               	addwf	??_is_valid,w,c
 20841  001312  6ED9               	movwf	fsr2l,c
 20842  001314  0E01               	movlw	high _B_array
 20843  001316  2008               	addwfc	??_is_valid+1,w,c
 20844  001318  6EDA               	movwf	fsr2h,c
 20845  00131A  C058  FFDE         	movff	_B,postinc2
 20846  00131E  C059  FFDD         	movff	_B+1,postdec2
 20847                           
 20848                           ; BSR set to: 1
 20849                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 20850  001322  90D8               	bcf	status,0,c
 20851  001324  345A               	rlcf	_counter_step,w,c
 20852  001326  6ED9               	movwf	fsr2l,c
 20853  001328  345B               	rlcf	_counter_step+1,w,c
 20854  00132A  6EDA               	movwf	fsr2h,c
 20855  00132C  0E42               	movlw	low _compartment_number
 20856  00132E  26D9               	addwf	fsr2l,f,c
 20857  001330  0E00               	movlw	high _compartment_number
 20858  001332  22DA               	addwfc	fsr2h,f,c
 20859  001334  CFDE F007          	movff	postinc2,??_is_valid
 20860  001338  CFDD F008          	movff	postdec2,??_is_valid+1
 20861  00133C  90D8               	bcf	status,0,c
 20862  00133E  3607               	rlcf	??_is_valid,f,c
 20863  001340  3608               	rlcf	??_is_valid+1,f,c
 20864  001342  0E00               	movlw	low _W_array
 20865  001344  2407               	addwf	??_is_valid,w,c
 20866  001346  6ED9               	movwf	fsr2l,c
 20867  001348  0E01               	movlw	high _W_array
 20868  00134A  2008               	addwfc	??_is_valid+1,w,c
 20869  00134C  6EDA               	movwf	fsr2h,c
 20870  00134E  C052  FFDE         	movff	_W,postinc2
 20871  001352  C053  FFDD         	movff	_W+1,postdec2
 20872                           
 20873                           ;keypad.c: 67: }
 20874  001356  0012               	return	
 20875  001358                     i2l1028:
 20876                           
 20877                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 20878                           
 20879                           ; BSR set to: 1
 20880  001358  0E70               	movlw	low _current_set2
 20881  00135A  6E01               	movwf	strcmp@s1,c
 20882  00135C  0E00               	movlw	high _current_set2
 20883  00135E  6E02               	movwf	strcmp@s1+1,c
 20884  001360  0EE8               	movlw	low STR_85
 20885  001362  6E03               	movwf	strcmp@s2,c
 20886  001364  0EFF               	movlw	high STR_85
 20887  001366  6E04               	movwf	strcmp@s2+1,c
 20888  001368  EC45  F02F         	call	_strcmp	;wreg free
 20889  00136C  5001               	movf	?_strcmp,w,c
 20890  00136E  1002               	iorwf	?_strcmp+1,w,c
 20891  001370  A4D8               	btfss	status,2,c
 20892  001372  D04C               	goto	i2l1030
 20893                           
 20894                           ;keypad.c: 69: B = 2*number;
 20895  001374  90D8               	bcf	status,0,c
 20896  001376  3475               	rlcf	_number,w,c
 20897  001378  6E58               	movwf	_B,c
 20898  00137A  3476               	rlcf	_number+1,w,c
 20899  00137C  6E59               	movwf	_B+1,c
 20900                           
 20901                           ;keypad.c: 71: N = 1*number;
 20902  00137E  C075  F056         	movff	_number,_N
 20903  001382  C076  F057         	movff	_number+1,_N+1
 20904                           
 20905                           ;keypad.c: 72: total_number = 3*number;
 20906  001386  C075  F001         	movff	_number,i2___wmul@multiplier
 20907  00138A  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 20908  00138E  0E00               	movlw	0
 20909  001390  6E04               	movwf	i2___wmul@multiplicand+1,c
 20910  001392  0E03               	movlw	3
 20911  001394  6E03               	movwf	i2___wmul@multiplicand,c
 20912  001396  EC8E  F030         	call	i2___wmul	;wreg free
 20913  00139A  C001  F18A         	movff	?i2___wmul,_total_number
 20914  00139E  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 20915                           
 20916                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 20917  0013A2  90D8               	bcf	status,0,c
 20918  0013A4  345A               	rlcf	_counter_step,w,c
 20919  0013A6  6ED9               	movwf	fsr2l,c
 20920  0013A8  345B               	rlcf	_counter_step+1,w,c
 20921  0013AA  6EDA               	movwf	fsr2h,c
 20922  0013AC  0E42               	movlw	low _compartment_number
 20923  0013AE  26D9               	addwf	fsr2l,f,c
 20924  0013B0  0E00               	movlw	high _compartment_number
 20925  0013B2  22DA               	addwfc	fsr2h,f,c
 20926  0013B4  CFDE F007          	movff	postinc2,??_is_valid
 20927  0013B8  CFDD F008          	movff	postdec2,??_is_valid+1
 20928  0013BC  90D8               	bcf	status,0,c
 20929  0013BE  3607               	rlcf	??_is_valid,f,c
 20930  0013C0  3608               	rlcf	??_is_valid+1,f,c
 20931  0013C2  0E30               	movlw	low _B_array
 20932  0013C4  2407               	addwf	??_is_valid,w,c
 20933  0013C6  6ED9               	movwf	fsr2l,c
 20934  0013C8  0E01               	movlw	high _B_array
 20935  0013CA  2008               	addwfc	??_is_valid+1,w,c
 20936  0013CC  6EDA               	movwf	fsr2h,c
 20937  0013CE  C058  FFDE         	movff	_B,postinc2
 20938  0013D2  C059  FFDD         	movff	_B+1,postdec2
 20939                           
 20940                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 20941  0013D6  90D8               	bcf	status,0,c
 20942  0013D8  345A               	rlcf	_counter_step,w,c
 20943  0013DA  6ED9               	movwf	fsr2l,c
 20944  0013DC  345B               	rlcf	_counter_step+1,w,c
 20945  0013DE  6EDA               	movwf	fsr2h,c
 20946  0013E0  0E42               	movlw	low _compartment_number
 20947  0013E2  26D9               	addwf	fsr2l,f,c
 20948  0013E4  0E00               	movlw	high _compartment_number
 20949  0013E6  22DA               	addwfc	fsr2h,f,c
 20950  0013E8  CFDE F007          	movff	postinc2,??_is_valid
 20951  0013EC  CFDD F008          	movff	postdec2,??_is_valid+1
 20952  0013F0  90D8               	bcf	status,0,c
 20953  0013F2  3607               	rlcf	??_is_valid,f,c
 20954  0013F4  3608               	rlcf	??_is_valid+1,f,c
 20955  0013F6  0E10               	movlw	low _N_array
 20956  0013F8  2407               	addwf	??_is_valid,w,c
 20957  0013FA  6ED9               	movwf	fsr2l,c
 20958  0013FC  0E01               	movlw	high _N_array
 20959  0013FE  2008               	addwfc	??_is_valid+1,w,c
 20960  001400  6EDA               	movwf	fsr2h,c
 20961  001402  C056  FFDE         	movff	_N,postinc2
 20962  001406  C057  FFDD         	movff	_N+1,postdec2
 20963                           
 20964                           ;keypad.c: 76: }
 20965  00140A  0012               	return	
 20966  00140C                     i2l1030:
 20967                           
 20968                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 20969  00140C  0E70               	movlw	low _current_set2
 20970  00140E  6E01               	movwf	strcmp@s1,c
 20971  001410  0E00               	movlw	high _current_set2
 20972  001412  6E02               	movwf	strcmp@s1+1,c
 20973  001414  0EEC               	movlw	low STR_86
 20974  001416  6E03               	movwf	strcmp@s2,c
 20975  001418  0EFF               	movlw	high STR_86
 20976  00141A  6E04               	movwf	strcmp@s2+1,c
 20977  00141C  EC45  F02F         	call	_strcmp	;wreg free
 20978  001420  5001               	movf	?_strcmp,w,c
 20979  001422  1002               	iorwf	?_strcmp+1,w,c
 20980  001424  A4D8               	btfss	status,2,c
 20981  001426  D04C               	goto	i2l1032
 20982                           
 20983                           ;keypad.c: 78: B = 2*number;
 20984  001428  90D8               	bcf	status,0,c
 20985  00142A  3475               	rlcf	_number,w,c
 20986  00142C  6E58               	movwf	_B,c
 20987  00142E  3476               	rlcf	_number+1,w,c
 20988  001430  6E59               	movwf	_B+1,c
 20989                           
 20990                           ;keypad.c: 80: S = 1*number;
 20991  001432  C075  F054         	movff	_number,_S
 20992  001436  C076  F055         	movff	_number+1,_S+1
 20993                           
 20994                           ;keypad.c: 81: total_number = 3*number;
 20995  00143A  C075  F001         	movff	_number,i2___wmul@multiplier
 20996  00143E  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 20997  001442  0E00               	movlw	0
 20998  001444  6E04               	movwf	i2___wmul@multiplicand+1,c
 20999  001446  0E03               	movlw	3
 21000  001448  6E03               	movwf	i2___wmul@multiplicand,c
 21001  00144A  EC8E  F030         	call	i2___wmul	;wreg free
 21002  00144E  C001  F18A         	movff	?i2___wmul,_total_number
 21003  001452  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21004                           
 21005                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 21006  001456  90D8               	bcf	status,0,c
 21007  001458  345A               	rlcf	_counter_step,w,c
 21008  00145A  6ED9               	movwf	fsr2l,c
 21009  00145C  345B               	rlcf	_counter_step+1,w,c
 21010  00145E  6EDA               	movwf	fsr2h,c
 21011  001460  0E42               	movlw	low _compartment_number
 21012  001462  26D9               	addwf	fsr2l,f,c
 21013  001464  0E00               	movlw	high _compartment_number
 21014  001466  22DA               	addwfc	fsr2h,f,c
 21015  001468  CFDE F007          	movff	postinc2,??_is_valid
 21016  00146C  CFDD F008          	movff	postdec2,??_is_valid+1
 21017  001470  90D8               	bcf	status,0,c
 21018  001472  3607               	rlcf	??_is_valid,f,c
 21019  001474  3608               	rlcf	??_is_valid+1,f,c
 21020  001476  0E30               	movlw	low _B_array
 21021  001478  2407               	addwf	??_is_valid,w,c
 21022  00147A  6ED9               	movwf	fsr2l,c
 21023  00147C  0E01               	movlw	high _B_array
 21024  00147E  2008               	addwfc	??_is_valid+1,w,c
 21025  001480  6EDA               	movwf	fsr2h,c
 21026  001482  C058  FFDE         	movff	_B,postinc2
 21027  001486  C059  FFDD         	movff	_B+1,postdec2
 21028                           
 21029                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 21030  00148A  90D8               	bcf	status,0,c
 21031  00148C  345A               	rlcf	_counter_step,w,c
 21032  00148E  6ED9               	movwf	fsr2l,c
 21033  001490  345B               	rlcf	_counter_step+1,w,c
 21034  001492  6EDA               	movwf	fsr2h,c
 21035  001494  0E42               	movlw	low _compartment_number
 21036  001496  26D9               	addwf	fsr2l,f,c
 21037  001498  0E00               	movlw	high _compartment_number
 21038  00149A  22DA               	addwfc	fsr2h,f,c
 21039  00149C  CFDE F007          	movff	postinc2,??_is_valid
 21040  0014A0  CFDD F008          	movff	postdec2,??_is_valid+1
 21041  0014A4  90D8               	bcf	status,0,c
 21042  0014A6  3607               	rlcf	??_is_valid,f,c
 21043  0014A8  3608               	rlcf	??_is_valid+1,f,c
 21044  0014AA  0E20               	movlw	low _S_array
 21045  0014AC  2407               	addwf	??_is_valid,w,c
 21046  0014AE  6ED9               	movwf	fsr2l,c
 21047  0014B0  0E01               	movlw	high _S_array
 21048  0014B2  2008               	addwfc	??_is_valid+1,w,c
 21049  0014B4  6EDA               	movwf	fsr2h,c
 21050  0014B6  C054  FFDE         	movff	_S,postinc2
 21051  0014BA  C055  FFDD         	movff	_S+1,postdec2
 21052                           
 21053                           ;keypad.c: 85: }
 21054  0014BE  0012               	return	
 21055  0014C0                     i2l1032:
 21056                           
 21057                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 21058  0014C0  0E70               	movlw	low _current_set2
 21059  0014C2  6E01               	movwf	strcmp@s1,c
 21060  0014C4  0E00               	movlw	high _current_set2
 21061  0014C6  6E02               	movwf	strcmp@s1+1,c
 21062  0014C8  0EF0               	movlw	low STR_87
 21063  0014CA  6E03               	movwf	strcmp@s2,c
 21064  0014CC  0EFF               	movlw	high STR_87
 21065  0014CE  6E04               	movwf	strcmp@s2+1,c
 21066  0014D0  EC45  F02F         	call	_strcmp	;wreg free
 21067  0014D4  5001               	movf	?_strcmp,w,c
 21068  0014D6  1002               	iorwf	?_strcmp+1,w,c
 21069  0014D8  A4D8               	btfss	status,2,c
 21070  0014DA  D04C               	goto	i2l1034
 21071                           
 21072                           ;keypad.c: 87: B = 2*number;
 21073  0014DC  90D8               	bcf	status,0,c
 21074  0014DE  3475               	rlcf	_number,w,c
 21075  0014E0  6E58               	movwf	_B,c
 21076  0014E2  3476               	rlcf	_number+1,w,c
 21077  0014E4  6E59               	movwf	_B+1,c
 21078                           
 21079                           ;keypad.c: 89: W = 1*number;
 21080  0014E6  C075  F052         	movff	_number,_W
 21081  0014EA  C076  F053         	movff	_number+1,_W+1
 21082                           
 21083                           ;keypad.c: 90: total_number = 3*number;
 21084  0014EE  C075  F001         	movff	_number,i2___wmul@multiplier
 21085  0014F2  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21086  0014F6  0E00               	movlw	0
 21087  0014F8  6E04               	movwf	i2___wmul@multiplicand+1,c
 21088  0014FA  0E03               	movlw	3
 21089  0014FC  6E03               	movwf	i2___wmul@multiplicand,c
 21090  0014FE  EC8E  F030         	call	i2___wmul	;wreg free
 21091  001502  C001  F18A         	movff	?i2___wmul,_total_number
 21092  001506  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21093                           
 21094                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 21095  00150A  90D8               	bcf	status,0,c
 21096  00150C  345A               	rlcf	_counter_step,w,c
 21097  00150E  6ED9               	movwf	fsr2l,c
 21098  001510  345B               	rlcf	_counter_step+1,w,c
 21099  001512  6EDA               	movwf	fsr2h,c
 21100  001514  0E42               	movlw	low _compartment_number
 21101  001516  26D9               	addwf	fsr2l,f,c
 21102  001518  0E00               	movlw	high _compartment_number
 21103  00151A  22DA               	addwfc	fsr2h,f,c
 21104  00151C  CFDE F007          	movff	postinc2,??_is_valid
 21105  001520  CFDD F008          	movff	postdec2,??_is_valid+1
 21106  001524  90D8               	bcf	status,0,c
 21107  001526  3607               	rlcf	??_is_valid,f,c
 21108  001528  3608               	rlcf	??_is_valid+1,f,c
 21109  00152A  0E30               	movlw	low _B_array
 21110  00152C  2407               	addwf	??_is_valid,w,c
 21111  00152E  6ED9               	movwf	fsr2l,c
 21112  001530  0E01               	movlw	high _B_array
 21113  001532  2008               	addwfc	??_is_valid+1,w,c
 21114  001534  6EDA               	movwf	fsr2h,c
 21115  001536  C058  FFDE         	movff	_B,postinc2
 21116  00153A  C059  FFDD         	movff	_B+1,postdec2
 21117                           
 21118                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 21119  00153E  90D8               	bcf	status,0,c
 21120  001540  345A               	rlcf	_counter_step,w,c
 21121  001542  6ED9               	movwf	fsr2l,c
 21122  001544  345B               	rlcf	_counter_step+1,w,c
 21123  001546  6EDA               	movwf	fsr2h,c
 21124  001548  0E42               	movlw	low _compartment_number
 21125  00154A  26D9               	addwf	fsr2l,f,c
 21126  00154C  0E00               	movlw	high _compartment_number
 21127  00154E  22DA               	addwfc	fsr2h,f,c
 21128  001550  CFDE F007          	movff	postinc2,??_is_valid
 21129  001554  CFDD F008          	movff	postdec2,??_is_valid+1
 21130  001558  90D8               	bcf	status,0,c
 21131  00155A  3607               	rlcf	??_is_valid,f,c
 21132  00155C  3608               	rlcf	??_is_valid+1,f,c
 21133  00155E  0E00               	movlw	low _W_array
 21134  001560  2407               	addwf	??_is_valid,w,c
 21135  001562  6ED9               	movwf	fsr2l,c
 21136  001564  0E01               	movlw	high _W_array
 21137  001566  2008               	addwfc	??_is_valid+1,w,c
 21138  001568  6EDA               	movwf	fsr2h,c
 21139  00156A  C052  FFDE         	movff	_W,postinc2
 21140  00156E  C053  FFDD         	movff	_W+1,postdec2
 21141                           
 21142                           ;keypad.c: 94: }
 21143  001572  0012               	return	
 21144  001574                     i2l1034:
 21145                           
 21146                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 21147  001574  0E70               	movlw	low _current_set2
 21148  001576  6E01               	movwf	strcmp@s1,c
 21149  001578  0E00               	movlw	high _current_set2
 21150  00157A  6E02               	movwf	strcmp@s1+1,c
 21151  00157C  0EB2               	movlw	low (STR_94+1)
 21152  00157E  6E03               	movwf	strcmp@s2,c
 21153  001580  0EFF               	movlw	high (STR_94+1)
 21154  001582  6E04               	movwf	strcmp@s2+1,c
 21155  001584  EC45  F02F         	call	_strcmp	;wreg free
 21156  001588  5001               	movf	?_strcmp,w,c
 21157  00158A  1002               	iorwf	?_strcmp+1,w,c
 21158  00158C  A4D8               	btfss	status,2,c
 21159  00158E  D069               	goto	i2l1036
 21160                           
 21161                           ;keypad.c: 96: B = 1*number;
 21162  001590  C075  F058         	movff	_number,_B
 21163  001594  C076  F059         	movff	_number+1,_B+1
 21164                           
 21165                           ;keypad.c: 97: W = 1*number;
 21166  001598  C075  F052         	movff	_number,_W
 21167  00159C  C076  F053         	movff	_number+1,_W+1
 21168                           
 21169                           ;keypad.c: 98: N = 1*number;
 21170  0015A0  C075  F056         	movff	_number,_N
 21171  0015A4  C076  F057         	movff	_number+1,_N+1
 21172                           
 21173                           ;keypad.c: 99: total_number = 3*number;
 21174  0015A8  C075  F001         	movff	_number,i2___wmul@multiplier
 21175  0015AC  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21176  0015B0  0E00               	movlw	0
 21177  0015B2  6E04               	movwf	i2___wmul@multiplicand+1,c
 21178  0015B4  0E03               	movlw	3
 21179  0015B6  6E03               	movwf	i2___wmul@multiplicand,c
 21180  0015B8  EC8E  F030         	call	i2___wmul	;wreg free
 21181  0015BC  C001  F18A         	movff	?i2___wmul,_total_number
 21182  0015C0  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21183                           
 21184                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 21185  0015C4  90D8               	bcf	status,0,c
 21186  0015C6  345A               	rlcf	_counter_step,w,c
 21187  0015C8  6ED9               	movwf	fsr2l,c
 21188  0015CA  345B               	rlcf	_counter_step+1,w,c
 21189  0015CC  6EDA               	movwf	fsr2h,c
 21190  0015CE  0E42               	movlw	low _compartment_number
 21191  0015D0  26D9               	addwf	fsr2l,f,c
 21192  0015D2  0E00               	movlw	high _compartment_number
 21193  0015D4  22DA               	addwfc	fsr2h,f,c
 21194  0015D6  CFDE F007          	movff	postinc2,??_is_valid
 21195  0015DA  CFDD F008          	movff	postdec2,??_is_valid+1
 21196  0015DE  90D8               	bcf	status,0,c
 21197  0015E0  3607               	rlcf	??_is_valid,f,c
 21198  0015E2  3608               	rlcf	??_is_valid+1,f,c
 21199  0015E4  0E30               	movlw	low _B_array
 21200  0015E6  2407               	addwf	??_is_valid,w,c
 21201  0015E8  6ED9               	movwf	fsr2l,c
 21202  0015EA  0E01               	movlw	high _B_array
 21203  0015EC  2008               	addwfc	??_is_valid+1,w,c
 21204  0015EE  6EDA               	movwf	fsr2h,c
 21205  0015F0  C058  FFDE         	movff	_B,postinc2
 21206  0015F4  C059  FFDD         	movff	_B+1,postdec2
 21207                           
 21208                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 21209  0015F8  90D8               	bcf	status,0,c
 21210  0015FA  345A               	rlcf	_counter_step,w,c
 21211  0015FC  6ED9               	movwf	fsr2l,c
 21212  0015FE  345B               	rlcf	_counter_step+1,w,c
 21213  001600  6EDA               	movwf	fsr2h,c
 21214  001602  0E42               	movlw	low _compartment_number
 21215  001604  26D9               	addwf	fsr2l,f,c
 21216  001606  0E00               	movlw	high _compartment_number
 21217  001608  22DA               	addwfc	fsr2h,f,c
 21218  00160A  CFDE F007          	movff	postinc2,??_is_valid
 21219  00160E  CFDD F008          	movff	postdec2,??_is_valid+1
 21220  001612  90D8               	bcf	status,0,c
 21221  001614  3607               	rlcf	??_is_valid,f,c
 21222  001616  3608               	rlcf	??_is_valid+1,f,c
 21223  001618  0E00               	movlw	low _W_array
 21224  00161A  2407               	addwf	??_is_valid,w,c
 21225  00161C  6ED9               	movwf	fsr2l,c
 21226  00161E  0E01               	movlw	high _W_array
 21227  001620  2008               	addwfc	??_is_valid+1,w,c
 21228  001622  6EDA               	movwf	fsr2h,c
 21229  001624  C052  FFDE         	movff	_W,postinc2
 21230  001628  C053  FFDD         	movff	_W+1,postdec2
 21231                           
 21232                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 21233  00162C  90D8               	bcf	status,0,c
 21234  00162E  345A               	rlcf	_counter_step,w,c
 21235  001630  6ED9               	movwf	fsr2l,c
 21236  001632  345B               	rlcf	_counter_step+1,w,c
 21237  001634  6EDA               	movwf	fsr2h,c
 21238  001636  0E42               	movlw	low _compartment_number
 21239  001638  26D9               	addwf	fsr2l,f,c
 21240  00163A  0E00               	movlw	high _compartment_number
 21241  00163C  22DA               	addwfc	fsr2h,f,c
 21242  00163E  CFDE F007          	movff	postinc2,??_is_valid
 21243  001642  CFDD F008          	movff	postdec2,??_is_valid+1
 21244  001646  90D8               	bcf	status,0,c
 21245  001648  3607               	rlcf	??_is_valid,f,c
 21246  00164A  3608               	rlcf	??_is_valid+1,f,c
 21247  00164C  0E10               	movlw	low _N_array
 21248  00164E  2407               	addwf	??_is_valid,w,c
 21249  001650  6ED9               	movwf	fsr2l,c
 21250  001652  0E01               	movlw	high _N_array
 21251  001654  2008               	addwfc	??_is_valid+1,w,c
 21252  001656  6EDA               	movwf	fsr2h,c
 21253  001658  C056  FFDE         	movff	_N,postinc2
 21254  00165C  C057  FFDD         	movff	_N+1,postdec2
 21255                           
 21256                           ;keypad.c: 105: }
 21257  001660  0012               	return	
 21258  001662                     i2l1036:
 21259                           
 21260                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 21261  001662  0E70               	movlw	low _current_set2
 21262  001664  6E01               	movwf	strcmp@s1,c
 21263  001666  0E00               	movlw	high _current_set2
 21264  001668  6E02               	movwf	strcmp@s1+1,c
 21265  00166A  0EBC               	movlw	low (STR_93+1)
 21266  00166C  6E03               	movwf	strcmp@s2,c
 21267  00166E  0EFF               	movlw	high (STR_93+1)
 21268  001670  6E04               	movwf	strcmp@s2+1,c
 21269  001672  EC45  F02F         	call	_strcmp	;wreg free
 21270  001676  5001               	movf	?_strcmp,w,c
 21271  001678  1002               	iorwf	?_strcmp+1,w,c
 21272  00167A  A4D8               	btfss	status,2,c
 21273  00167C  D069               	goto	i2l1038
 21274                           
 21275                           ;keypad.c: 107: B = 1*number;
 21276  00167E  C075  F058         	movff	_number,_B
 21277  001682  C076  F059         	movff	_number+1,_B+1
 21278                           
 21279                           ;keypad.c: 108: S = 1*number;
 21280  001686  C075  F054         	movff	_number,_S
 21281  00168A  C076  F055         	movff	_number+1,_S+1
 21282                           
 21283                           ;keypad.c: 109: W = 1*number;
 21284  00168E  C075  F052         	movff	_number,_W
 21285  001692  C076  F053         	movff	_number+1,_W+1
 21286                           
 21287                           ;keypad.c: 110: total_number = 3*number;
 21288  001696  C075  F001         	movff	_number,i2___wmul@multiplier
 21289  00169A  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21290  00169E  0E00               	movlw	0
 21291  0016A0  6E04               	movwf	i2___wmul@multiplicand+1,c
 21292  0016A2  0E03               	movlw	3
 21293  0016A4  6E03               	movwf	i2___wmul@multiplicand,c
 21294  0016A6  EC8E  F030         	call	i2___wmul	;wreg free
 21295  0016AA  C001  F18A         	movff	?i2___wmul,_total_number
 21296  0016AE  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21297                           
 21298                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 21299  0016B2  90D8               	bcf	status,0,c
 21300  0016B4  345A               	rlcf	_counter_step,w,c
 21301  0016B6  6ED9               	movwf	fsr2l,c
 21302  0016B8  345B               	rlcf	_counter_step+1,w,c
 21303  0016BA  6EDA               	movwf	fsr2h,c
 21304  0016BC  0E42               	movlw	low _compartment_number
 21305  0016BE  26D9               	addwf	fsr2l,f,c
 21306  0016C0  0E00               	movlw	high _compartment_number
 21307  0016C2  22DA               	addwfc	fsr2h,f,c
 21308  0016C4  CFDE F007          	movff	postinc2,??_is_valid
 21309  0016C8  CFDD F008          	movff	postdec2,??_is_valid+1
 21310  0016CC  90D8               	bcf	status,0,c
 21311  0016CE  3607               	rlcf	??_is_valid,f,c
 21312  0016D0  3608               	rlcf	??_is_valid+1,f,c
 21313  0016D2  0E30               	movlw	low _B_array
 21314  0016D4  2407               	addwf	??_is_valid,w,c
 21315  0016D6  6ED9               	movwf	fsr2l,c
 21316  0016D8  0E01               	movlw	high _B_array
 21317  0016DA  2008               	addwfc	??_is_valid+1,w,c
 21318  0016DC  6EDA               	movwf	fsr2h,c
 21319  0016DE  C058  FFDE         	movff	_B,postinc2
 21320  0016E2  C059  FFDD         	movff	_B+1,postdec2
 21321                           
 21322                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 21323  0016E6  90D8               	bcf	status,0,c
 21324  0016E8  345A               	rlcf	_counter_step,w,c
 21325  0016EA  6ED9               	movwf	fsr2l,c
 21326  0016EC  345B               	rlcf	_counter_step+1,w,c
 21327  0016EE  6EDA               	movwf	fsr2h,c
 21328  0016F0  0E42               	movlw	low _compartment_number
 21329  0016F2  26D9               	addwf	fsr2l,f,c
 21330  0016F4  0E00               	movlw	high _compartment_number
 21331  0016F6  22DA               	addwfc	fsr2h,f,c
 21332  0016F8  CFDE F007          	movff	postinc2,??_is_valid
 21333  0016FC  CFDD F008          	movff	postdec2,??_is_valid+1
 21334  001700  90D8               	bcf	status,0,c
 21335  001702  3607               	rlcf	??_is_valid,f,c
 21336  001704  3608               	rlcf	??_is_valid+1,f,c
 21337  001706  0E20               	movlw	low _S_array
 21338  001708  2407               	addwf	??_is_valid,w,c
 21339  00170A  6ED9               	movwf	fsr2l,c
 21340  00170C  0E01               	movlw	high _S_array
 21341  00170E  2008               	addwfc	??_is_valid+1,w,c
 21342  001710  6EDA               	movwf	fsr2h,c
 21343  001712  C054  FFDE         	movff	_S,postinc2
 21344  001716  C055  FFDD         	movff	_S+1,postdec2
 21345                           
 21346                           ;keypad.c: 114: W_array[compartment_number[counter_step]] = W;
 21347  00171A  90D8               	bcf	status,0,c
 21348  00171C  345A               	rlcf	_counter_step,w,c
 21349  00171E  6ED9               	movwf	fsr2l,c
 21350  001720  345B               	rlcf	_counter_step+1,w,c
 21351  001722  6EDA               	movwf	fsr2h,c
 21352  001724  0E42               	movlw	low _compartment_number
 21353  001726  26D9               	addwf	fsr2l,f,c
 21354  001728  0E00               	movlw	high _compartment_number
 21355  00172A  22DA               	addwfc	fsr2h,f,c
 21356  00172C  CFDE F007          	movff	postinc2,??_is_valid
 21357  001730  CFDD F008          	movff	postdec2,??_is_valid+1
 21358  001734  90D8               	bcf	status,0,c
 21359  001736  3607               	rlcf	??_is_valid,f,c
 21360  001738  3608               	rlcf	??_is_valid+1,f,c
 21361  00173A  0E00               	movlw	low _W_array
 21362  00173C  2407               	addwf	??_is_valid,w,c
 21363  00173E  6ED9               	movwf	fsr2l,c
 21364  001740  0E01               	movlw	high _W_array
 21365  001742  2008               	addwfc	??_is_valid+1,w,c
 21366  001744  6EDA               	movwf	fsr2h,c
 21367  001746  C052  FFDE         	movff	_W,postinc2
 21368  00174A  C053  FFDD         	movff	_W+1,postdec2
 21369                           
 21370                           ;keypad.c: 116: }
 21371  00174E  0012               	return	
 21372  001750                     i2l1038:
 21373                           
 21374                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 21375  001750  0E70               	movlw	low _current_set2
 21376  001752  6E01               	movwf	strcmp@s1,c
 21377  001754  0E00               	movlw	high _current_set2
 21378  001756  6E02               	movwf	strcmp@s1+1,c
 21379  001758  0EF4               	movlw	low STR_90
 21380  00175A  6E03               	movwf	strcmp@s2,c
 21381  00175C  0EFF               	movlw	high STR_90
 21382  00175E  6E04               	movwf	strcmp@s2+1,c
 21383  001760  EC45  F02F         	call	_strcmp	;wreg free
 21384  001764  5001               	movf	?_strcmp,w,c
 21385  001766  1002               	iorwf	?_strcmp+1,w,c
 21386  001768  A4D8               	btfss	status,2,c
 21387  00176A  D04C               	goto	i2l1040
 21388                           
 21389                           ;keypad.c: 118: B = 1*number;
 21390  00176C  C075  F058         	movff	_number,_B
 21391  001770  C076  F059         	movff	_number+1,_B+1
 21392                           
 21393                           ;keypad.c: 119: W = 2*number;
 21394  001774  90D8               	bcf	status,0,c
 21395  001776  3475               	rlcf	_number,w,c
 21396  001778  6E52               	movwf	_W,c
 21397  00177A  3476               	rlcf	_number+1,w,c
 21398  00177C  6E53               	movwf	_W+1,c
 21399                           
 21400                           ;keypad.c: 120: total_number = 3*number;
 21401  00177E  C075  F001         	movff	_number,i2___wmul@multiplier
 21402  001782  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21403  001786  0E00               	movlw	0
 21404  001788  6E04               	movwf	i2___wmul@multiplicand+1,c
 21405  00178A  0E03               	movlw	3
 21406  00178C  6E03               	movwf	i2___wmul@multiplicand,c
 21407  00178E  EC8E  F030         	call	i2___wmul	;wreg free
 21408  001792  C001  F18A         	movff	?i2___wmul,_total_number
 21409  001796  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21410                           
 21411                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 21412  00179A  90D8               	bcf	status,0,c
 21413  00179C  345A               	rlcf	_counter_step,w,c
 21414  00179E  6ED9               	movwf	fsr2l,c
 21415  0017A0  345B               	rlcf	_counter_step+1,w,c
 21416  0017A2  6EDA               	movwf	fsr2h,c
 21417  0017A4  0E42               	movlw	low _compartment_number
 21418  0017A6  26D9               	addwf	fsr2l,f,c
 21419  0017A8  0E00               	movlw	high _compartment_number
 21420  0017AA  22DA               	addwfc	fsr2h,f,c
 21421  0017AC  CFDE F007          	movff	postinc2,??_is_valid
 21422  0017B0  CFDD F008          	movff	postdec2,??_is_valid+1
 21423  0017B4  90D8               	bcf	status,0,c
 21424  0017B6  3607               	rlcf	??_is_valid,f,c
 21425  0017B8  3608               	rlcf	??_is_valid+1,f,c
 21426  0017BA  0E30               	movlw	low _B_array
 21427  0017BC  2407               	addwf	??_is_valid,w,c
 21428  0017BE  6ED9               	movwf	fsr2l,c
 21429  0017C0  0E01               	movlw	high _B_array
 21430  0017C2  2008               	addwfc	??_is_valid+1,w,c
 21431  0017C4  6EDA               	movwf	fsr2h,c
 21432  0017C6  C058  FFDE         	movff	_B,postinc2
 21433  0017CA  C059  FFDD         	movff	_B+1,postdec2
 21434                           
 21435                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 21436  0017CE  90D8               	bcf	status,0,c
 21437  0017D0  345A               	rlcf	_counter_step,w,c
 21438  0017D2  6ED9               	movwf	fsr2l,c
 21439  0017D4  345B               	rlcf	_counter_step+1,w,c
 21440  0017D6  6EDA               	movwf	fsr2h,c
 21441  0017D8  0E42               	movlw	low _compartment_number
 21442  0017DA  26D9               	addwf	fsr2l,f,c
 21443  0017DC  0E00               	movlw	high _compartment_number
 21444  0017DE  22DA               	addwfc	fsr2h,f,c
 21445  0017E0  CFDE F007          	movff	postinc2,??_is_valid
 21446  0017E4  CFDD F008          	movff	postdec2,??_is_valid+1
 21447  0017E8  90D8               	bcf	status,0,c
 21448  0017EA  3607               	rlcf	??_is_valid,f,c
 21449  0017EC  3608               	rlcf	??_is_valid+1,f,c
 21450  0017EE  0E00               	movlw	low _W_array
 21451  0017F0  2407               	addwf	??_is_valid,w,c
 21452  0017F2  6ED9               	movwf	fsr2l,c
 21453  0017F4  0E01               	movlw	high _W_array
 21454  0017F6  2008               	addwfc	??_is_valid+1,w,c
 21455  0017F8  6EDA               	movwf	fsr2h,c
 21456  0017FA  C052  FFDE         	movff	_W,postinc2
 21457  0017FE  C053  FFDD         	movff	_W+1,postdec2
 21458                           
 21459                           ;keypad.c: 124: }
 21460  001802  0012               	return	
 21461  001804                     i2l1040:
 21462                           
 21463                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 21464  001804  0E70               	movlw	low _current_set2
 21465  001806  6E01               	movwf	strcmp@s1,c
 21466  001808  0E00               	movlw	high _current_set2
 21467  00180A  6E02               	movwf	strcmp@s1+1,c
 21468  00180C  0EC0               	movlw	low STR_91
 21469  00180E  6E03               	movwf	strcmp@s2,c
 21470  001810  0EFF               	movlw	high STR_91
 21471  001812  6E04               	movwf	strcmp@s2+1,c
 21472  001814  EC45  F02F         	call	_strcmp	;wreg free
 21473  001818  5001               	movf	?_strcmp,w,c
 21474  00181A  1002               	iorwf	?_strcmp+1,w,c
 21475  00181C  A4D8               	btfss	status,2,c
 21476  00181E  D06A               	goto	i2l1042
 21477                           
 21478                           ;keypad.c: 126: B = 1*number;
 21479  001820  C075  F058         	movff	_number,_B
 21480  001824  C076  F059         	movff	_number+1,_B+1
 21481                           
 21482                           ;keypad.c: 127: N = 1*number;
 21483  001828  C075  F056         	movff	_number,_N
 21484  00182C  C076  F057         	movff	_number+1,_N+1
 21485                           
 21486                           ;keypad.c: 128: W = 2*number;
 21487  001830  90D8               	bcf	status,0,c
 21488  001832  3475               	rlcf	_number,w,c
 21489  001834  6E52               	movwf	_W,c
 21490  001836  3476               	rlcf	_number+1,w,c
 21491  001838  6E53               	movwf	_W+1,c
 21492                           
 21493                           ;keypad.c: 129: total_number = 4*number;
 21494  00183A  C075  F007         	movff	_number,??_is_valid
 21495  00183E  C076  F008         	movff	_number+1,??_is_valid+1
 21496  001842  90D8               	bcf	status,0,c
 21497  001844  3607               	rlcf	??_is_valid,f,c
 21498  001846  3608               	rlcf	??_is_valid+1,f,c
 21499  001848  90D8               	bcf	status,0,c
 21500  00184A  3607               	rlcf	??_is_valid,f,c
 21501  00184C  3608               	rlcf	??_is_valid+1,f,c
 21502  00184E  C007  F18A         	movff	??_is_valid,_total_number
 21503  001852  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21504                           
 21505                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 21506  001856  90D8               	bcf	status,0,c
 21507  001858  345A               	rlcf	_counter_step,w,c
 21508  00185A  6ED9               	movwf	fsr2l,c
 21509  00185C  345B               	rlcf	_counter_step+1,w,c
 21510  00185E  6EDA               	movwf	fsr2h,c
 21511  001860  0E42               	movlw	low _compartment_number
 21512  001862  26D9               	addwf	fsr2l,f,c
 21513  001864  0E00               	movlw	high _compartment_number
 21514  001866  22DA               	addwfc	fsr2h,f,c
 21515  001868  CFDE F007          	movff	postinc2,??_is_valid
 21516  00186C  CFDD F008          	movff	postdec2,??_is_valid+1
 21517  001870  90D8               	bcf	status,0,c
 21518  001872  3607               	rlcf	??_is_valid,f,c
 21519  001874  3608               	rlcf	??_is_valid+1,f,c
 21520  001876  0E30               	movlw	low _B_array
 21521  001878  2407               	addwf	??_is_valid,w,c
 21522  00187A  6ED9               	movwf	fsr2l,c
 21523  00187C  0E01               	movlw	high _B_array
 21524  00187E  2008               	addwfc	??_is_valid+1,w,c
 21525  001880  6EDA               	movwf	fsr2h,c
 21526  001882  C058  FFDE         	movff	_B,postinc2
 21527  001886  C059  FFDD         	movff	_B+1,postdec2
 21528                           
 21529                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 21530  00188A  90D8               	bcf	status,0,c
 21531  00188C  345A               	rlcf	_counter_step,w,c
 21532  00188E  6ED9               	movwf	fsr2l,c
 21533  001890  345B               	rlcf	_counter_step+1,w,c
 21534  001892  6EDA               	movwf	fsr2h,c
 21535  001894  0E42               	movlw	low _compartment_number
 21536  001896  26D9               	addwf	fsr2l,f,c
 21537  001898  0E00               	movlw	high _compartment_number
 21538  00189A  22DA               	addwfc	fsr2h,f,c
 21539  00189C  CFDE F007          	movff	postinc2,??_is_valid
 21540  0018A0  CFDD F008          	movff	postdec2,??_is_valid+1
 21541  0018A4  90D8               	bcf	status,0,c
 21542  0018A6  3607               	rlcf	??_is_valid,f,c
 21543  0018A8  3608               	rlcf	??_is_valid+1,f,c
 21544  0018AA  0E10               	movlw	low _N_array
 21545  0018AC  2407               	addwf	??_is_valid,w,c
 21546  0018AE  6ED9               	movwf	fsr2l,c
 21547  0018B0  0E01               	movlw	high _N_array
 21548  0018B2  2008               	addwfc	??_is_valid+1,w,c
 21549  0018B4  6EDA               	movwf	fsr2h,c
 21550  0018B6  C056  FFDE         	movff	_N,postinc2
 21551  0018BA  C057  FFDD         	movff	_N+1,postdec2
 21552                           
 21553                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 21554  0018BE  90D8               	bcf	status,0,c
 21555  0018C0  345A               	rlcf	_counter_step,w,c
 21556  0018C2  6ED9               	movwf	fsr2l,c
 21557  0018C4  345B               	rlcf	_counter_step+1,w,c
 21558  0018C6  6EDA               	movwf	fsr2h,c
 21559  0018C8  0E42               	movlw	low _compartment_number
 21560  0018CA  26D9               	addwf	fsr2l,f,c
 21561  0018CC  0E00               	movlw	high _compartment_number
 21562  0018CE  22DA               	addwfc	fsr2h,f,c
 21563  0018D0  CFDE F007          	movff	postinc2,??_is_valid
 21564  0018D4  CFDD F008          	movff	postdec2,??_is_valid+1
 21565  0018D8  90D8               	bcf	status,0,c
 21566  0018DA  3607               	rlcf	??_is_valid,f,c
 21567  0018DC  3608               	rlcf	??_is_valid+1,f,c
 21568  0018DE  0E00               	movlw	low _W_array
 21569  0018E0  2407               	addwf	??_is_valid,w,c
 21570  0018E2  6ED9               	movwf	fsr2l,c
 21571  0018E4  0E01               	movlw	high _W_array
 21572  0018E6  2008               	addwfc	??_is_valid+1,w,c
 21573  0018E8  6EDA               	movwf	fsr2h,c
 21574  0018EA  C052  FFDE         	movff	_W,postinc2
 21575  0018EE  C053  FFDD         	movff	_W+1,postdec2
 21576                           
 21577                           ;keypad.c: 134: }
 21578  0018F2  0012               	return	
 21579  0018F4                     i2l1042:
 21580                           
 21581                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 21582  0018F4  0E70               	movlw	low _current_set2
 21583  0018F6  6E01               	movwf	strcmp@s1,c
 21584  0018F8  0E00               	movlw	high _current_set2
 21585  0018FA  6E02               	movwf	strcmp@s1+1,c
 21586  0018FC  0EC5               	movlw	low STR_92
 21587  0018FE  6E03               	movwf	strcmp@s2,c
 21588  001900  0EFF               	movlw	high STR_92
 21589  001902  6E04               	movwf	strcmp@s2+1,c
 21590  001904  EC45  F02F         	call	_strcmp	;wreg free
 21591  001908  5001               	movf	?_strcmp,w,c
 21592  00190A  1002               	iorwf	?_strcmp+1,w,c
 21593  00190C  A4D8               	btfss	status,2,c
 21594  00190E  D06A               	goto	i2l1044
 21595                           
 21596                           ;keypad.c: 136: B = 1*number;
 21597  001910  C075  F058         	movff	_number,_B
 21598  001914  C076  F059         	movff	_number+1,_B+1
 21599                           
 21600                           ;keypad.c: 137: S = 1*number;
 21601  001918  C075  F054         	movff	_number,_S
 21602  00191C  C076  F055         	movff	_number+1,_S+1
 21603                           
 21604                           ;keypad.c: 138: W = 2*number;
 21605  001920  90D8               	bcf	status,0,c
 21606  001922  3475               	rlcf	_number,w,c
 21607  001924  6E52               	movwf	_W,c
 21608  001926  3476               	rlcf	_number+1,w,c
 21609  001928  6E53               	movwf	_W+1,c
 21610                           
 21611                           ;keypad.c: 139: total_number = 4*number;
 21612  00192A  C075  F007         	movff	_number,??_is_valid
 21613  00192E  C076  F008         	movff	_number+1,??_is_valid+1
 21614  001932  90D8               	bcf	status,0,c
 21615  001934  3607               	rlcf	??_is_valid,f,c
 21616  001936  3608               	rlcf	??_is_valid+1,f,c
 21617  001938  90D8               	bcf	status,0,c
 21618  00193A  3607               	rlcf	??_is_valid,f,c
 21619  00193C  3608               	rlcf	??_is_valid+1,f,c
 21620  00193E  C007  F18A         	movff	??_is_valid,_total_number
 21621  001942  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21622                           
 21623                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 21624  001946  90D8               	bcf	status,0,c
 21625  001948  345A               	rlcf	_counter_step,w,c
 21626  00194A  6ED9               	movwf	fsr2l,c
 21627  00194C  345B               	rlcf	_counter_step+1,w,c
 21628  00194E  6EDA               	movwf	fsr2h,c
 21629  001950  0E42               	movlw	low _compartment_number
 21630  001952  26D9               	addwf	fsr2l,f,c
 21631  001954  0E00               	movlw	high _compartment_number
 21632  001956  22DA               	addwfc	fsr2h,f,c
 21633  001958  CFDE F007          	movff	postinc2,??_is_valid
 21634  00195C  CFDD F008          	movff	postdec2,??_is_valid+1
 21635  001960  90D8               	bcf	status,0,c
 21636  001962  3607               	rlcf	??_is_valid,f,c
 21637  001964  3608               	rlcf	??_is_valid+1,f,c
 21638  001966  0E30               	movlw	low _B_array
 21639  001968  2407               	addwf	??_is_valid,w,c
 21640  00196A  6ED9               	movwf	fsr2l,c
 21641  00196C  0E01               	movlw	high _B_array
 21642  00196E  2008               	addwfc	??_is_valid+1,w,c
 21643  001970  6EDA               	movwf	fsr2h,c
 21644  001972  C058  FFDE         	movff	_B,postinc2
 21645  001976  C059  FFDD         	movff	_B+1,postdec2
 21646                           
 21647                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 21648  00197A  90D8               	bcf	status,0,c
 21649  00197C  345A               	rlcf	_counter_step,w,c
 21650  00197E  6ED9               	movwf	fsr2l,c
 21651  001980  345B               	rlcf	_counter_step+1,w,c
 21652  001982  6EDA               	movwf	fsr2h,c
 21653  001984  0E42               	movlw	low _compartment_number
 21654  001986  26D9               	addwf	fsr2l,f,c
 21655  001988  0E00               	movlw	high _compartment_number
 21656  00198A  22DA               	addwfc	fsr2h,f,c
 21657  00198C  CFDE F007          	movff	postinc2,??_is_valid
 21658  001990  CFDD F008          	movff	postdec2,??_is_valid+1
 21659  001994  90D8               	bcf	status,0,c
 21660  001996  3607               	rlcf	??_is_valid,f,c
 21661  001998  3608               	rlcf	??_is_valid+1,f,c
 21662  00199A  0E20               	movlw	low _S_array
 21663  00199C  2407               	addwf	??_is_valid,w,c
 21664  00199E  6ED9               	movwf	fsr2l,c
 21665  0019A0  0E01               	movlw	high _S_array
 21666  0019A2  2008               	addwfc	??_is_valid+1,w,c
 21667  0019A4  6EDA               	movwf	fsr2h,c
 21668  0019A6  C054  FFDE         	movff	_S,postinc2
 21669  0019AA  C055  FFDD         	movff	_S+1,postdec2
 21670                           
 21671                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 21672  0019AE  90D8               	bcf	status,0,c
 21673  0019B0  345A               	rlcf	_counter_step,w,c
 21674  0019B2  6ED9               	movwf	fsr2l,c
 21675  0019B4  345B               	rlcf	_counter_step+1,w,c
 21676  0019B6  6EDA               	movwf	fsr2h,c
 21677  0019B8  0E42               	movlw	low _compartment_number
 21678  0019BA  26D9               	addwf	fsr2l,f,c
 21679  0019BC  0E00               	movlw	high _compartment_number
 21680  0019BE  22DA               	addwfc	fsr2h,f,c
 21681  0019C0  CFDE F007          	movff	postinc2,??_is_valid
 21682  0019C4  CFDD F008          	movff	postdec2,??_is_valid+1
 21683  0019C8  90D8               	bcf	status,0,c
 21684  0019CA  3607               	rlcf	??_is_valid,f,c
 21685  0019CC  3608               	rlcf	??_is_valid+1,f,c
 21686  0019CE  0E00               	movlw	low _W_array
 21687  0019D0  2407               	addwf	??_is_valid,w,c
 21688  0019D2  6ED9               	movwf	fsr2l,c
 21689  0019D4  0E01               	movlw	high _W_array
 21690  0019D6  2008               	addwfc	??_is_valid+1,w,c
 21691  0019D8  6EDA               	movwf	fsr2h,c
 21692  0019DA  C052  FFDE         	movff	_W,postinc2
 21693  0019DE  C053  FFDD         	movff	_W+1,postdec2
 21694                           
 21695                           ;keypad.c: 145: }
 21696  0019E2  0012               	return	
 21697  0019E4                     i2l1044:
 21698                           
 21699                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 21700  0019E4  0E70               	movlw	low _current_set2
 21701  0019E6  6E01               	movwf	strcmp@s1,c
 21702  0019E8  0E00               	movlw	high _current_set2
 21703  0019EA  6E02               	movwf	strcmp@s1+1,c
 21704  0019EC  0EBB               	movlw	low STR_93
 21705  0019EE  6E03               	movwf	strcmp@s2,c
 21706  0019F0  0EFF               	movlw	high STR_93
 21707  0019F2  6E04               	movwf	strcmp@s2+1,c
 21708  0019F4  EC45  F02F         	call	_strcmp	;wreg free
 21709  0019F8  5001               	movf	?_strcmp,w,c
 21710  0019FA  1002               	iorwf	?_strcmp+1,w,c
 21711  0019FC  A4D8               	btfss	status,2,c
 21712  0019FE  D06A               	goto	i2l1046
 21713                           
 21714                           ;keypad.c: 147: B = 2*number;
 21715  001A00  90D8               	bcf	status,0,c
 21716  001A02  3475               	rlcf	_number,w,c
 21717  001A04  6E58               	movwf	_B,c
 21718  001A06  3476               	rlcf	_number+1,w,c
 21719  001A08  6E59               	movwf	_B+1,c
 21720                           
 21721                           ;keypad.c: 148: S = 1*number;
 21722  001A0A  C075  F054         	movff	_number,_S
 21723  001A0E  C076  F055         	movff	_number+1,_S+1
 21724                           
 21725                           ;keypad.c: 149: W = number;
 21726  001A12  C075  F052         	movff	_number,_W
 21727  001A16  C076  F053         	movff	_number+1,_W+1
 21728                           
 21729                           ;keypad.c: 150: total_number = 4*number;
 21730  001A1A  C075  F007         	movff	_number,??_is_valid
 21731  001A1E  C076  F008         	movff	_number+1,??_is_valid+1
 21732  001A22  90D8               	bcf	status,0,c
 21733  001A24  3607               	rlcf	??_is_valid,f,c
 21734  001A26  3608               	rlcf	??_is_valid+1,f,c
 21735  001A28  90D8               	bcf	status,0,c
 21736  001A2A  3607               	rlcf	??_is_valid,f,c
 21737  001A2C  3608               	rlcf	??_is_valid+1,f,c
 21738  001A2E  C007  F18A         	movff	??_is_valid,_total_number
 21739  001A32  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21740                           
 21741                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 21742  001A36  90D8               	bcf	status,0,c
 21743  001A38  345A               	rlcf	_counter_step,w,c
 21744  001A3A  6ED9               	movwf	fsr2l,c
 21745  001A3C  345B               	rlcf	_counter_step+1,w,c
 21746  001A3E  6EDA               	movwf	fsr2h,c
 21747  001A40  0E42               	movlw	low _compartment_number
 21748  001A42  26D9               	addwf	fsr2l,f,c
 21749  001A44  0E00               	movlw	high _compartment_number
 21750  001A46  22DA               	addwfc	fsr2h,f,c
 21751  001A48  CFDE F007          	movff	postinc2,??_is_valid
 21752  001A4C  CFDD F008          	movff	postdec2,??_is_valid+1
 21753  001A50  90D8               	bcf	status,0,c
 21754  001A52  3607               	rlcf	??_is_valid,f,c
 21755  001A54  3608               	rlcf	??_is_valid+1,f,c
 21756  001A56  0E30               	movlw	low _B_array
 21757  001A58  2407               	addwf	??_is_valid,w,c
 21758  001A5A  6ED9               	movwf	fsr2l,c
 21759  001A5C  0E01               	movlw	high _B_array
 21760  001A5E  2008               	addwfc	??_is_valid+1,w,c
 21761  001A60  6EDA               	movwf	fsr2h,c
 21762  001A62  C058  FFDE         	movff	_B,postinc2
 21763  001A66  C059  FFDD         	movff	_B+1,postdec2
 21764                           
 21765                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 21766  001A6A  90D8               	bcf	status,0,c
 21767  001A6C  345A               	rlcf	_counter_step,w,c
 21768  001A6E  6ED9               	movwf	fsr2l,c
 21769  001A70  345B               	rlcf	_counter_step+1,w,c
 21770  001A72  6EDA               	movwf	fsr2h,c
 21771  001A74  0E42               	movlw	low _compartment_number
 21772  001A76  26D9               	addwf	fsr2l,f,c
 21773  001A78  0E00               	movlw	high _compartment_number
 21774  001A7A  22DA               	addwfc	fsr2h,f,c
 21775  001A7C  CFDE F007          	movff	postinc2,??_is_valid
 21776  001A80  CFDD F008          	movff	postdec2,??_is_valid+1
 21777  001A84  90D8               	bcf	status,0,c
 21778  001A86  3607               	rlcf	??_is_valid,f,c
 21779  001A88  3608               	rlcf	??_is_valid+1,f,c
 21780  001A8A  0E20               	movlw	low _S_array
 21781  001A8C  2407               	addwf	??_is_valid,w,c
 21782  001A8E  6ED9               	movwf	fsr2l,c
 21783  001A90  0E01               	movlw	high _S_array
 21784  001A92  2008               	addwfc	??_is_valid+1,w,c
 21785  001A94  6EDA               	movwf	fsr2h,c
 21786  001A96  C054  FFDE         	movff	_S,postinc2
 21787  001A9A  C055  FFDD         	movff	_S+1,postdec2
 21788                           
 21789                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 21790  001A9E  90D8               	bcf	status,0,c
 21791  001AA0  345A               	rlcf	_counter_step,w,c
 21792  001AA2  6ED9               	movwf	fsr2l,c
 21793  001AA4  345B               	rlcf	_counter_step+1,w,c
 21794  001AA6  6EDA               	movwf	fsr2h,c
 21795  001AA8  0E42               	movlw	low _compartment_number
 21796  001AAA  26D9               	addwf	fsr2l,f,c
 21797  001AAC  0E00               	movlw	high _compartment_number
 21798  001AAE  22DA               	addwfc	fsr2h,f,c
 21799  001AB0  CFDE F007          	movff	postinc2,??_is_valid
 21800  001AB4  CFDD F008          	movff	postdec2,??_is_valid+1
 21801  001AB8  90D8               	bcf	status,0,c
 21802  001ABA  3607               	rlcf	??_is_valid,f,c
 21803  001ABC  3608               	rlcf	??_is_valid+1,f,c
 21804  001ABE  0E00               	movlw	low _W_array
 21805  001AC0  2407               	addwf	??_is_valid,w,c
 21806  001AC2  6ED9               	movwf	fsr2l,c
 21807  001AC4  0E01               	movlw	high _W_array
 21808  001AC6  2008               	addwfc	??_is_valid+1,w,c
 21809  001AC8  6EDA               	movwf	fsr2h,c
 21810  001ACA  C052  FFDE         	movff	_W,postinc2
 21811  001ACE  C053  FFDD         	movff	_W+1,postdec2
 21812                           
 21813                           ;keypad.c: 155: }
 21814  001AD2  0012               	return	
 21815  001AD4                     i2l1046:
 21816                           
 21817                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 21818  001AD4  0E70               	movlw	low _current_set2
 21819  001AD6  6E01               	movwf	strcmp@s1,c
 21820  001AD8  0E00               	movlw	high _current_set2
 21821  001ADA  6E02               	movwf	strcmp@s1+1,c
 21822  001ADC  0EB1               	movlw	low STR_94
 21823  001ADE  6E03               	movwf	strcmp@s2,c
 21824  001AE0  0EFF               	movlw	high STR_94
 21825  001AE2  6E04               	movwf	strcmp@s2+1,c
 21826  001AE4  EC45  F02F         	call	_strcmp	;wreg free
 21827  001AE8  5001               	movf	?_strcmp,w,c
 21828  001AEA  1002               	iorwf	?_strcmp+1,w,c
 21829  001AEC  A4D8               	btfss	status,2,c
 21830  001AEE  D06A               	goto	i2l1048
 21831                           
 21832                           ;keypad.c: 157: B = 2*number;
 21833  001AF0  90D8               	bcf	status,0,c
 21834  001AF2  3475               	rlcf	_number,w,c
 21835  001AF4  6E58               	movwf	_B,c
 21836  001AF6  3476               	rlcf	_number+1,w,c
 21837  001AF8  6E59               	movwf	_B+1,c
 21838                           
 21839                           ;keypad.c: 158: N = 1*number;
 21840  001AFA  C075  F056         	movff	_number,_N
 21841  001AFE  C076  F057         	movff	_number+1,_N+1
 21842                           
 21843                           ;keypad.c: 159: W = 1*number;
 21844  001B02  C075  F052         	movff	_number,_W
 21845  001B06  C076  F053         	movff	_number+1,_W+1
 21846                           
 21847                           ;keypad.c: 160: total_number = 4*number;
 21848  001B0A  C075  F007         	movff	_number,??_is_valid
 21849  001B0E  C076  F008         	movff	_number+1,??_is_valid+1
 21850  001B12  90D8               	bcf	status,0,c
 21851  001B14  3607               	rlcf	??_is_valid,f,c
 21852  001B16  3608               	rlcf	??_is_valid+1,f,c
 21853  001B18  90D8               	bcf	status,0,c
 21854  001B1A  3607               	rlcf	??_is_valid,f,c
 21855  001B1C  3608               	rlcf	??_is_valid+1,f,c
 21856  001B1E  C007  F18A         	movff	??_is_valid,_total_number
 21857  001B22  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21858                           
 21859                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 21860  001B26  90D8               	bcf	status,0,c
 21861  001B28  345A               	rlcf	_counter_step,w,c
 21862  001B2A  6ED9               	movwf	fsr2l,c
 21863  001B2C  345B               	rlcf	_counter_step+1,w,c
 21864  001B2E  6EDA               	movwf	fsr2h,c
 21865  001B30  0E42               	movlw	low _compartment_number
 21866  001B32  26D9               	addwf	fsr2l,f,c
 21867  001B34  0E00               	movlw	high _compartment_number
 21868  001B36  22DA               	addwfc	fsr2h,f,c
 21869  001B38  CFDE F007          	movff	postinc2,??_is_valid
 21870  001B3C  CFDD F008          	movff	postdec2,??_is_valid+1
 21871  001B40  90D8               	bcf	status,0,c
 21872  001B42  3607               	rlcf	??_is_valid,f,c
 21873  001B44  3608               	rlcf	??_is_valid+1,f,c
 21874  001B46  0E30               	movlw	low _B_array
 21875  001B48  2407               	addwf	??_is_valid,w,c
 21876  001B4A  6ED9               	movwf	fsr2l,c
 21877  001B4C  0E01               	movlw	high _B_array
 21878  001B4E  2008               	addwfc	??_is_valid+1,w,c
 21879  001B50  6EDA               	movwf	fsr2h,c
 21880  001B52  C058  FFDE         	movff	_B,postinc2
 21881  001B56  C059  FFDD         	movff	_B+1,postdec2
 21882                           
 21883                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 21884  001B5A  90D8               	bcf	status,0,c
 21885  001B5C  345A               	rlcf	_counter_step,w,c
 21886  001B5E  6ED9               	movwf	fsr2l,c
 21887  001B60  345B               	rlcf	_counter_step+1,w,c
 21888  001B62  6EDA               	movwf	fsr2h,c
 21889  001B64  0E42               	movlw	low _compartment_number
 21890  001B66  26D9               	addwf	fsr2l,f,c
 21891  001B68  0E00               	movlw	high _compartment_number
 21892  001B6A  22DA               	addwfc	fsr2h,f,c
 21893  001B6C  CFDE F007          	movff	postinc2,??_is_valid
 21894  001B70  CFDD F008          	movff	postdec2,??_is_valid+1
 21895  001B74  90D8               	bcf	status,0,c
 21896  001B76  3607               	rlcf	??_is_valid,f,c
 21897  001B78  3608               	rlcf	??_is_valid+1,f,c
 21898  001B7A  0E10               	movlw	low _N_array
 21899  001B7C  2407               	addwf	??_is_valid,w,c
 21900  001B7E  6ED9               	movwf	fsr2l,c
 21901  001B80  0E01               	movlw	high _N_array
 21902  001B82  2008               	addwfc	??_is_valid+1,w,c
 21903  001B84  6EDA               	movwf	fsr2h,c
 21904  001B86  C056  FFDE         	movff	_N,postinc2
 21905  001B8A  C057  FFDD         	movff	_N+1,postdec2
 21906                           
 21907                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 21908  001B8E  90D8               	bcf	status,0,c
 21909  001B90  345A               	rlcf	_counter_step,w,c
 21910  001B92  6ED9               	movwf	fsr2l,c
 21911  001B94  345B               	rlcf	_counter_step+1,w,c
 21912  001B96  6EDA               	movwf	fsr2h,c
 21913  001B98  0E42               	movlw	low _compartment_number
 21914  001B9A  26D9               	addwf	fsr2l,f,c
 21915  001B9C  0E00               	movlw	high _compartment_number
 21916  001B9E  22DA               	addwfc	fsr2h,f,c
 21917  001BA0  CFDE F007          	movff	postinc2,??_is_valid
 21918  001BA4  CFDD F008          	movff	postdec2,??_is_valid+1
 21919  001BA8  90D8               	bcf	status,0,c
 21920  001BAA  3607               	rlcf	??_is_valid,f,c
 21921  001BAC  3608               	rlcf	??_is_valid+1,f,c
 21922  001BAE  0E00               	movlw	low _W_array
 21923  001BB0  2407               	addwf	??_is_valid,w,c
 21924  001BB2  6ED9               	movwf	fsr2l,c
 21925  001BB4  0E01               	movlw	high _W_array
 21926  001BB6  2008               	addwfc	??_is_valid+1,w,c
 21927  001BB8  6EDA               	movwf	fsr2h,c
 21928  001BBA  C052  FFDE         	movff	_W,postinc2
 21929  001BBE  C053  FFDD         	movff	_W+1,postdec2
 21930                           
 21931                           ;keypad.c: 165: }
 21932  001BC2  0012               	return	
 21933  001BC4                     i2l1048:
 21934                           
 21935                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 21936  001BC4  0E70               	movlw	low _current_set2
 21937  001BC6  6E01               	movwf	strcmp@s1,c
 21938  001BC8  0E00               	movlw	high _current_set2
 21939  001BCA  6E02               	movwf	strcmp@s1+1,c
 21940  001BCC  0EB6               	movlw	low STR_95
 21941  001BCE  6E03               	movwf	strcmp@s2,c
 21942  001BD0  0EFF               	movlw	high STR_95
 21943  001BD2  6E04               	movwf	strcmp@s2+1,c
 21944  001BD4  EC45  F02F         	call	_strcmp	;wreg free
 21945  001BD8  5001               	movf	?_strcmp,w,c
 21946  001BDA  1002               	iorwf	?_strcmp+1,w,c
 21947  001BDC  A4D8               	btfss	status,2,c
 21948  001BDE  D06A               	goto	i2l1050
 21949                           
 21950                           ;keypad.c: 167: B = 1*number;
 21951  001BE0  C075  F058         	movff	_number,_B
 21952  001BE4  C076  F059         	movff	_number+1,_B+1
 21953                           
 21954                           ;keypad.c: 168: N = 2*number;
 21955  001BE8  90D8               	bcf	status,0,c
 21956  001BEA  3475               	rlcf	_number,w,c
 21957  001BEC  6E56               	movwf	_N,c
 21958  001BEE  3476               	rlcf	_number+1,w,c
 21959  001BF0  6E57               	movwf	_N+1,c
 21960                           
 21961                           ;keypad.c: 169: W = 1*number;
 21962  001BF2  C075  F052         	movff	_number,_W
 21963  001BF6  C076  F053         	movff	_number+1,_W+1
 21964                           
 21965                           ;keypad.c: 170: total_number = 4*number;
 21966  001BFA  C075  F007         	movff	_number,??_is_valid
 21967  001BFE  C076  F008         	movff	_number+1,??_is_valid+1
 21968  001C02  90D8               	bcf	status,0,c
 21969  001C04  3607               	rlcf	??_is_valid,f,c
 21970  001C06  3608               	rlcf	??_is_valid+1,f,c
 21971  001C08  90D8               	bcf	status,0,c
 21972  001C0A  3607               	rlcf	??_is_valid,f,c
 21973  001C0C  3608               	rlcf	??_is_valid+1,f,c
 21974  001C0E  C007  F18A         	movff	??_is_valid,_total_number
 21975  001C12  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21976                           
 21977                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 21978  001C16  90D8               	bcf	status,0,c
 21979  001C18  345A               	rlcf	_counter_step,w,c
 21980  001C1A  6ED9               	movwf	fsr2l,c
 21981  001C1C  345B               	rlcf	_counter_step+1,w,c
 21982  001C1E  6EDA               	movwf	fsr2h,c
 21983  001C20  0E42               	movlw	low _compartment_number
 21984  001C22  26D9               	addwf	fsr2l,f,c
 21985  001C24  0E00               	movlw	high _compartment_number
 21986  001C26  22DA               	addwfc	fsr2h,f,c
 21987  001C28  CFDE F007          	movff	postinc2,??_is_valid
 21988  001C2C  CFDD F008          	movff	postdec2,??_is_valid+1
 21989  001C30  90D8               	bcf	status,0,c
 21990  001C32  3607               	rlcf	??_is_valid,f,c
 21991  001C34  3608               	rlcf	??_is_valid+1,f,c
 21992  001C36  0E30               	movlw	low _B_array
 21993  001C38  2407               	addwf	??_is_valid,w,c
 21994  001C3A  6ED9               	movwf	fsr2l,c
 21995  001C3C  0E01               	movlw	high _B_array
 21996  001C3E  2008               	addwfc	??_is_valid+1,w,c
 21997  001C40  6EDA               	movwf	fsr2h,c
 21998  001C42  C058  FFDE         	movff	_B,postinc2
 21999  001C46  C059  FFDD         	movff	_B+1,postdec2
 22000                           
 22001                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 22002  001C4A  90D8               	bcf	status,0,c
 22003  001C4C  345A               	rlcf	_counter_step,w,c
 22004  001C4E  6ED9               	movwf	fsr2l,c
 22005  001C50  345B               	rlcf	_counter_step+1,w,c
 22006  001C52  6EDA               	movwf	fsr2h,c
 22007  001C54  0E42               	movlw	low _compartment_number
 22008  001C56  26D9               	addwf	fsr2l,f,c
 22009  001C58  0E00               	movlw	high _compartment_number
 22010  001C5A  22DA               	addwfc	fsr2h,f,c
 22011  001C5C  CFDE F007          	movff	postinc2,??_is_valid
 22012  001C60  CFDD F008          	movff	postdec2,??_is_valid+1
 22013  001C64  90D8               	bcf	status,0,c
 22014  001C66  3607               	rlcf	??_is_valid,f,c
 22015  001C68  3608               	rlcf	??_is_valid+1,f,c
 22016  001C6A  0E10               	movlw	low _N_array
 22017  001C6C  2407               	addwf	??_is_valid,w,c
 22018  001C6E  6ED9               	movwf	fsr2l,c
 22019  001C70  0E01               	movlw	high _N_array
 22020  001C72  2008               	addwfc	??_is_valid+1,w,c
 22021  001C74  6EDA               	movwf	fsr2h,c
 22022  001C76  C056  FFDE         	movff	_N,postinc2
 22023  001C7A  C057  FFDD         	movff	_N+1,postdec2
 22024                           
 22025                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 22026  001C7E  90D8               	bcf	status,0,c
 22027  001C80  345A               	rlcf	_counter_step,w,c
 22028  001C82  6ED9               	movwf	fsr2l,c
 22029  001C84  345B               	rlcf	_counter_step+1,w,c
 22030  001C86  6EDA               	movwf	fsr2h,c
 22031  001C88  0E42               	movlw	low _compartment_number
 22032  001C8A  26D9               	addwf	fsr2l,f,c
 22033  001C8C  0E00               	movlw	high _compartment_number
 22034  001C8E  22DA               	addwfc	fsr2h,f,c
 22035  001C90  CFDE F007          	movff	postinc2,??_is_valid
 22036  001C94  CFDD F008          	movff	postdec2,??_is_valid+1
 22037  001C98  90D8               	bcf	status,0,c
 22038  001C9A  3607               	rlcf	??_is_valid,f,c
 22039  001C9C  3608               	rlcf	??_is_valid+1,f,c
 22040  001C9E  0E00               	movlw	low _W_array
 22041  001CA0  2407               	addwf	??_is_valid,w,c
 22042  001CA2  6ED9               	movwf	fsr2l,c
 22043  001CA4  0E01               	movlw	high _W_array
 22044  001CA6  2008               	addwfc	??_is_valid+1,w,c
 22045  001CA8  6EDA               	movwf	fsr2h,c
 22046  001CAA  C052  FFDE         	movff	_W,postinc2
 22047  001CAE  C053  FFDD         	movff	_W+1,postdec2
 22048                           
 22049                           ;keypad.c: 175: }
 22050  001CB2  0012               	return	
 22051  001CB4                     i2l1050:
 22052                           
 22053                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 22054  001CB4  0E70               	movlw	low _current_set2
 22055  001CB6  6E01               	movwf	strcmp@s1,c
 22056  001CB8  0E00               	movlw	high _current_set2
 22057  001CBA  6E02               	movwf	strcmp@s1+1,c
 22058  001CBC  0EAC               	movlw	low STR_96
 22059  001CBE  6E03               	movwf	strcmp@s2,c
 22060  001CC0  0EFF               	movlw	high STR_96
 22061  001CC2  6E04               	movwf	strcmp@s2+1,c
 22062  001CC4  EC45  F02F         	call	_strcmp	;wreg free
 22063  001CC8  5001               	movf	?_strcmp,w,c
 22064  001CCA  1002               	iorwf	?_strcmp+1,w,c
 22065  001CCC  A4D8               	btfss	status,2,c
 22066  001CCE  D055               	goto	i2l1052
 22067                           
 22068                           ;keypad.c: 177: B = 1*number;
 22069  001CD0  C075  F058         	movff	_number,_B
 22070  001CD4  C076  F059         	movff	_number+1,_B+1
 22071                           
 22072                           ;keypad.c: 178: N = 3*number;
 22073  001CD8  C075  F001         	movff	_number,i2___wmul@multiplier
 22074  001CDC  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 22075  001CE0  0E00               	movlw	0
 22076  001CE2  6E04               	movwf	i2___wmul@multiplicand+1,c
 22077  001CE4  0E03               	movlw	3
 22078  001CE6  6E03               	movwf	i2___wmul@multiplicand,c
 22079  001CE8  EC8E  F030         	call	i2___wmul	;wreg free
 22080  001CEC  C001  F056         	movff	?i2___wmul,_N
 22081  001CF0  C002  F057         	movff	?i2___wmul+1,_N+1
 22082                           
 22083                           ;keypad.c: 179: total_number = 4*number;
 22084  001CF4  C075  F007         	movff	_number,??_is_valid
 22085  001CF8  C076  F008         	movff	_number+1,??_is_valid+1
 22086  001CFC  90D8               	bcf	status,0,c
 22087  001CFE  3607               	rlcf	??_is_valid,f,c
 22088  001D00  3608               	rlcf	??_is_valid+1,f,c
 22089  001D02  90D8               	bcf	status,0,c
 22090  001D04  3607               	rlcf	??_is_valid,f,c
 22091  001D06  3608               	rlcf	??_is_valid+1,f,c
 22092  001D08  C007  F18A         	movff	??_is_valid,_total_number
 22093  001D0C  C008  F18B         	movff	??_is_valid+1,_total_number+1
 22094                           
 22095                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 22096  001D10  90D8               	bcf	status,0,c
 22097  001D12  345A               	rlcf	_counter_step,w,c
 22098  001D14  6ED9               	movwf	fsr2l,c
 22099  001D16  345B               	rlcf	_counter_step+1,w,c
 22100  001D18  6EDA               	movwf	fsr2h,c
 22101  001D1A  0E42               	movlw	low _compartment_number
 22102  001D1C  26D9               	addwf	fsr2l,f,c
 22103  001D1E  0E00               	movlw	high _compartment_number
 22104  001D20  22DA               	addwfc	fsr2h,f,c
 22105  001D22  CFDE F007          	movff	postinc2,??_is_valid
 22106  001D26  CFDD F008          	movff	postdec2,??_is_valid+1
 22107  001D2A  90D8               	bcf	status,0,c
 22108  001D2C  3607               	rlcf	??_is_valid,f,c
 22109  001D2E  3608               	rlcf	??_is_valid+1,f,c
 22110  001D30  0E30               	movlw	low _B_array
 22111  001D32  2407               	addwf	??_is_valid,w,c
 22112  001D34  6ED9               	movwf	fsr2l,c
 22113  001D36  0E01               	movlw	high _B_array
 22114  001D38  2008               	addwfc	??_is_valid+1,w,c
 22115  001D3A  6EDA               	movwf	fsr2h,c
 22116  001D3C  C058  FFDE         	movff	_B,postinc2
 22117  001D40  C059  FFDD         	movff	_B+1,postdec2
 22118                           
 22119                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 22120  001D44  90D8               	bcf	status,0,c
 22121  001D46  345A               	rlcf	_counter_step,w,c
 22122  001D48  6ED9               	movwf	fsr2l,c
 22123  001D4A  345B               	rlcf	_counter_step+1,w,c
 22124  001D4C  6EDA               	movwf	fsr2h,c
 22125  001D4E  0E42               	movlw	low _compartment_number
 22126  001D50  26D9               	addwf	fsr2l,f,c
 22127  001D52  0E00               	movlw	high _compartment_number
 22128  001D54  22DA               	addwfc	fsr2h,f,c
 22129  001D56  CFDE F007          	movff	postinc2,??_is_valid
 22130  001D5A  CFDD F008          	movff	postdec2,??_is_valid+1
 22131  001D5E  90D8               	bcf	status,0,c
 22132  001D60  3607               	rlcf	??_is_valid,f,c
 22133  001D62  3608               	rlcf	??_is_valid+1,f,c
 22134  001D64  0E10               	movlw	low _N_array
 22135  001D66  2407               	addwf	??_is_valid,w,c
 22136  001D68  6ED9               	movwf	fsr2l,c
 22137  001D6A  0E01               	movlw	high _N_array
 22138  001D6C  2008               	addwfc	??_is_valid+1,w,c
 22139  001D6E  6EDA               	movwf	fsr2h,c
 22140  001D70  C056  FFDE         	movff	_N,postinc2
 22141  001D74  C057  FFDD         	movff	_N+1,postdec2
 22142                           
 22143                           ;keypad.c: 184: }
 22144  001D78  0012               	return	
 22145  001D7A                     i2l1052:
 22146                           
 22147                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 22148  001D7A  0E70               	movlw	low _current_set2
 22149  001D7C  6E01               	movwf	strcmp@s1,c
 22150  001D7E  0E00               	movlw	high _current_set2
 22151  001D80  6E02               	movwf	strcmp@s1+1,c
 22152  001D82  0ECA               	movlw	low STR_97
 22153  001D84  6E03               	movwf	strcmp@s2,c
 22154  001D86  0EFF               	movlw	high STR_97
 22155  001D88  6E04               	movwf	strcmp@s2+1,c
 22156  001D8A  EC45  F02F         	call	_strcmp	;wreg free
 22157  001D8E  5001               	movf	?_strcmp,w,c
 22158  001D90  1002               	iorwf	?_strcmp+1,w,c
 22159  001D92  A4D8               	btfss	status,2,c
 22160  001D94  0012               	return	
 22161                           
 22162                           ;keypad.c: 186: B = 1*number;
 22163  001D96  C075  F058         	movff	_number,_B
 22164  001D9A  C076  F059         	movff	_number+1,_B+1
 22165                           
 22166                           ;keypad.c: 187: W = 3*number;
 22167  001D9E  C075  F001         	movff	_number,i2___wmul@multiplier
 22168  001DA2  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 22169  001DA6  0E00               	movlw	0
 22170  001DA8  6E04               	movwf	i2___wmul@multiplicand+1,c
 22171  001DAA  0E03               	movlw	3
 22172  001DAC  6E03               	movwf	i2___wmul@multiplicand,c
 22173  001DAE  EC8E  F030         	call	i2___wmul	;wreg free
 22174  001DB2  C001  F052         	movff	?i2___wmul,_W
 22175  001DB6  C002  F053         	movff	?i2___wmul+1,_W+1
 22176                           
 22177                           ;keypad.c: 188: total_number = 4*number;
 22178  001DBA  C075  F007         	movff	_number,??_is_valid
 22179  001DBE  C076  F008         	movff	_number+1,??_is_valid+1
 22180  001DC2  90D8               	bcf	status,0,c
 22181  001DC4  3607               	rlcf	??_is_valid,f,c
 22182  001DC6  3608               	rlcf	??_is_valid+1,f,c
 22183  001DC8  90D8               	bcf	status,0,c
 22184  001DCA  3607               	rlcf	??_is_valid,f,c
 22185  001DCC  3608               	rlcf	??_is_valid+1,f,c
 22186  001DCE  C007  F18A         	movff	??_is_valid,_total_number
 22187  001DD2  C008  F18B         	movff	??_is_valid+1,_total_number+1
 22188                           
 22189                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 22190  001DD6  90D8               	bcf	status,0,c
 22191  001DD8  345A               	rlcf	_counter_step,w,c
 22192  001DDA  6ED9               	movwf	fsr2l,c
 22193  001DDC  345B               	rlcf	_counter_step+1,w,c
 22194  001DDE  6EDA               	movwf	fsr2h,c
 22195  001DE0  0E42               	movlw	low _compartment_number
 22196  001DE2  26D9               	addwf	fsr2l,f,c
 22197  001DE4  0E00               	movlw	high _compartment_number
 22198  001DE6  22DA               	addwfc	fsr2h,f,c
 22199  001DE8  CFDE F007          	movff	postinc2,??_is_valid
 22200  001DEC  CFDD F008          	movff	postdec2,??_is_valid+1
 22201  001DF0  90D8               	bcf	status,0,c
 22202  001DF2  3607               	rlcf	??_is_valid,f,c
 22203  001DF4  3608               	rlcf	??_is_valid+1,f,c
 22204  001DF6  0E30               	movlw	low _B_array
 22205  001DF8  2407               	addwf	??_is_valid,w,c
 22206  001DFA  6ED9               	movwf	fsr2l,c
 22207  001DFC  0E01               	movlw	high _B_array
 22208  001DFE  2008               	addwfc	??_is_valid+1,w,c
 22209  001E00  6EDA               	movwf	fsr2h,c
 22210  001E02  C058  FFDE         	movff	_B,postinc2
 22211  001E06  C059  FFDD         	movff	_B+1,postdec2
 22212                           
 22213                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 22214  001E0A  90D8               	bcf	status,0,c
 22215  001E0C  345A               	rlcf	_counter_step,w,c
 22216  001E0E  6ED9               	movwf	fsr2l,c
 22217  001E10  345B               	rlcf	_counter_step+1,w,c
 22218  001E12  6EDA               	movwf	fsr2h,c
 22219  001E14  0E42               	movlw	low _compartment_number
 22220  001E16  26D9               	addwf	fsr2l,f,c
 22221  001E18  0E00               	movlw	high _compartment_number
 22222  001E1A  22DA               	addwfc	fsr2h,f,c
 22223  001E1C  CFDE F007          	movff	postinc2,??_is_valid
 22224  001E20  CFDD F008          	movff	postdec2,??_is_valid+1
 22225  001E24  90D8               	bcf	status,0,c
 22226  001E26  3607               	rlcf	??_is_valid,f,c
 22227  001E28  3608               	rlcf	??_is_valid+1,f,c
 22228  001E2A  0E00               	movlw	low _W_array
 22229  001E2C  2407               	addwf	??_is_valid,w,c
 22230  001E2E  6ED9               	movwf	fsr2l,c
 22231  001E30  0E01               	movlw	high _W_array
 22232  001E32  2008               	addwfc	??_is_valid+1,w,c
 22233  001E34  6EDA               	movwf	fsr2h,c
 22234  001E36  C052  FFDE         	movff	_W,postinc2
 22235  001E3A  C053  FFDD         	movff	_W+1,postdec2
 22236  001E3E  0012               	return	
 22237  001E40                     __end_of_is_valid:
 22238                           	opt stack 0
 22239                           pclatu	equ	0xFFB
 22240                           pclath	equ	0xFFA
 22241                           tblptru	equ	0xFF8
 22242                           tblptrh	equ	0xFF7
 22243                           tblptrl	equ	0xFF6
 22244                           tablat	equ	0xFF5
 22245                           prodh	equ	0xFF4
 22246                           prodl	equ	0xFF3
 22247                           intcon	equ	0xFF2
 22248                           intcon3	equ	0xFF0
 22249                           indf0	equ	0xFEF
 22250                           postinc0	equ	0xFEE
 22251                           fsr0h	equ	0xFEA
 22252                           fsr0l	equ	0xFE9
 22253                           wreg	equ	0xFE8
 22254                           indf1	equ	0xFE7
 22255                           postdec1	equ	0xFE5
 22256                           fsr1h	equ	0xFE2
 22257                           fsr1l	equ	0xFE1
 22258                           indf2	equ	0xFDF
 22259                           postinc2	equ	0xFDE
 22260                           postdec2	equ	0xFDD
 22261                           fsr2h	equ	0xFDA
 22262                           fsr2l	equ	0xFD9
 22263                           status	equ	0xFD8
 22264                           
 22265 ;; *************** function i2___wmul *****************
 22266 ;; Defined at:
 22267 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 22268 ;; Parameters:    Size  Location     Type
 22269 ;;  multiplier      2    0[COMRAM] unsigned int 
 22270 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22271 ;; Auto vars:     Size  Location     Type
 22272 ;;  __wmul          2    4[COMRAM] unsigned int 
 22273 ;; Return value:  Size  Location     Type
 22274 ;;                  2    0[COMRAM] unsigned int 
 22275 ;; Registers used:
 22276 ;;		wreg, status,2, status,0, prodl, prodh
 22277 ;; Tracked objects:
 22278 ;;		On entry : 0/0
 22279 ;;		On exit  : 0/0
 22280 ;;		Unchanged: 0/0
 22281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22285 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22286 ;;Total ram usage:        6 bytes
 22287 ;; Hardware stack levels used:    1
 22288 ;; This function calls:
 22289 ;;		Nothing
 22290 ;; This function is called by:
 22291 ;;		_interruptHandler
 22292 ;;		_is_valid
 22293 ;;		i2_printf
 22294 ;; This function uses a non-reentrant model
 22295 ;;
 22296                           
 22297                           	psect	text65
 22298  00611C                     __ptext65:
 22299                           	opt stack 0
 22300  00611C                     i2___wmul:
 22301                           	opt stack 22
 22302                           
 22303                           ;incstack = 0
 22304  00611C  5001               	movf	i2___wmul@multiplier,w,c
 22305  00611E  0203               	mulwf	i2___wmul@multiplicand,c
 22306  006120  CFF3 F005          	movff	prodl,i2___wmul@product
 22307  006124  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22308  006128  5001               	movf	i2___wmul@multiplier,w,c
 22309  00612A  0204               	mulwf	i2___wmul@multiplicand+1,c
 22310  00612C  50F3               	movf	prodl,w,c
 22311  00612E  2606               	addwf	i2___wmul@product+1,f,c
 22312  006130  5002               	movf	i2___wmul@multiplier+1,w,c
 22313  006132  0203               	mulwf	i2___wmul@multiplicand,c
 22314  006134  50F3               	movf	prodl,w,c
 22315  006136  2606               	addwf	i2___wmul@product+1,f,c
 22316  006138  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22317  00613C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22318  006140  0012               	return	
 22319  006142                     __end_ofi2___wmul:
 22320                           	opt stack 0
 22321                           pclatu	equ	0xFFB
 22322                           pclath	equ	0xFFA
 22323                           tblptru	equ	0xFF8
 22324                           tblptrh	equ	0xFF7
 22325                           tblptrl	equ	0xFF6
 22326                           tablat	equ	0xFF5
 22327                           prodh	equ	0xFF4
 22328                           prodl	equ	0xFF3
 22329                           intcon	equ	0xFF2
 22330                           intcon3	equ	0xFF0
 22331                           indf0	equ	0xFEF
 22332                           postinc0	equ	0xFEE
 22333                           fsr0h	equ	0xFEA
 22334                           fsr0l	equ	0xFE9
 22335                           wreg	equ	0xFE8
 22336                           indf1	equ	0xFE7
 22337                           postdec1	equ	0xFE5
 22338                           fsr1h	equ	0xFE2
 22339                           fsr1l	equ	0xFE1
 22340                           indf2	equ	0xFDF
 22341                           postinc2	equ	0xFDE
 22342                           postdec2	equ	0xFDD
 22343                           fsr2h	equ	0xFDA
 22344                           fsr2l	equ	0xFD9
 22345                           status	equ	0xFD8
 22346                           
 22347 ;; *************** function _strcmp *****************
 22348 ;; Defined at:
 22349 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 22350 ;; Parameters:    Size  Location     Type
 22351 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 22352 ;;		 -> current_set2(5), 
 22353 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 22354 ;;		 -> STR_97(5), STR_96(5), STR_95(5), STR_94(5), 
 22355 ;;		 -> STR_93(5), STR_92(5), STR_91(5), STR_90(4), 
 22356 ;;		 -> STR_89(4), STR_88(4), STR_87(4), STR_86(4), 
 22357 ;;		 -> STR_85(4), STR_84(3), STR_83(3), STR_82(3), 
 22358 ;;		 -> STR_81(2), STR_80(2), STR_79(2), STR_78(2), 
 22359 ;; Auto vars:     Size  Location     Type
 22360 ;;  r               1    5[COMRAM] char 
 22361 ;; Return value:  Size  Location     Type
 22362 ;;                  2    0[COMRAM] int 
 22363 ;; Registers used:
 22364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22365 ;; Tracked objects:
 22366 ;;		On entry : 0/0
 22367 ;;		On exit  : 0/0
 22368 ;;		Unchanged: 0/0
 22369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22373 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22374 ;;Total ram usage:        6 bytes
 22375 ;; Hardware stack levels used:    1
 22376 ;; This function calls:
 22377 ;;		Nothing
 22378 ;; This function is called by:
 22379 ;;		_is_valid
 22380 ;; This function uses a non-reentrant model
 22381 ;;
 22382                           
 22383                           	psect	text66
 22384  005E8A                     __ptext66:
 22385                           	opt stack 0
 22386  005E8A                     _strcmp:
 22387                           	opt stack 22
 22388                           
 22389                           ;incstack = 0
 22390  005E8A  D004               	goto	i2l2020
 22391  005E8C  4A01               	infsnz	strcmp@s1,f,c
 22392  005E8E  2A02               	incf	strcmp@s1+1,f,c
 22393  005E90  4A03               	infsnz	strcmp@s2,f,c
 22394  005E92  2A04               	incf	strcmp@s2+1,f,c
 22395  005E94                     i2l2020:
 22396  005E94  C001  FFD9         	movff	strcmp@s1,fsr2l
 22397  005E98  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22398  005E9C  50DF               	movf	indf2,w,c
 22399  005E9E  6E05               	movwf	??_strcmp& (0+255),c
 22400  005EA0  C003  FFF6         	movff	strcmp@s2,tblptrl
 22401  005EA4  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 22402  005EA8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22403  005EA8  6AF8               	clrf	tblptru,c
 22404  005EAA                     	endif
 22405  005EAA                     	if	0	;tblptru may be non-zero
 22406  005EAA                     	endif
 22407  005EAA  0008               	tblrd		*
 22408  005EAC  50F5               	movf	tablat,w,c
 22409  005EAE  0800               	sublw	0
 22410  005EB0  2405               	addwf	??_strcmp,w,c
 22411  005EB2  6E06               	movwf	strcmp@r,c
 22412  005EB4  5006               	movf	strcmp@r,w,c
 22413  005EB6  A4D8               	btfss	status,2,c
 22414  005EB8  D007               	goto	i2u402_40
 22415  005EBA  C001  FFD9         	movff	strcmp@s1,fsr2l
 22416  005EBE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22417  005EC2  50DF               	movf	indf2,w,c
 22418  005EC4  A4D8               	btfss	status,2,c
 22419  005EC6  D7E2               	goto	i2l2021
 22420  005EC8                     i2u402_40:
 22421  005EC8  5006               	movf	strcmp@r,w,c
 22422  005ECA  6E01               	movwf	?_strcmp,c
 22423  005ECC  6A02               	clrf	?_strcmp+1,c
 22424  005ECE  BE01               	btfsc	?_strcmp,7,c
 22425  005ED0  0602               	decf	?_strcmp+1,f,c
 22426  005ED2  0012               	return	
 22427  005ED4                     __end_of_strcmp:
 22428                           	opt stack 0
 22429                           pclatu	equ	0xFFB
 22430                           pclath	equ	0xFFA
 22431                           tblptru	equ	0xFF8
 22432                           tblptrh	equ	0xFF7
 22433                           tblptrl	equ	0xFF6
 22434                           tablat	equ	0xFF5
 22435                           prodh	equ	0xFF4
 22436                           prodl	equ	0xFF3
 22437                           intcon	equ	0xFF2
 22438                           intcon3	equ	0xFF0
 22439                           indf0	equ	0xFEF
 22440                           postinc0	equ	0xFEE
 22441                           fsr0h	equ	0xFEA
 22442                           fsr0l	equ	0xFE9
 22443                           wreg	equ	0xFE8
 22444                           indf1	equ	0xFE7
 22445                           postdec1	equ	0xFE5
 22446                           fsr1h	equ	0xFE2
 22447                           fsr1l	equ	0xFE1
 22448                           indf2	equ	0xFDF
 22449                           postinc2	equ	0xFDE
 22450                           postdec2	equ	0xFDD
 22451                           fsr2h	equ	0xFDA
 22452                           fsr2l	equ	0xFD9
 22453                           status	equ	0xFD8
 22454                           
 22455 ;; *************** function _check *****************
 22456 ;; Defined at:
 22457 ;;		line 208 in file "keypad.c"
 22458 ;; Parameters:    Size  Location     Type
 22459 ;;		None
 22460 ;; Auto vars:     Size  Location     Type
 22461 ;;		None
 22462 ;; Return value:  Size  Location     Type
 22463 ;;                  2    0[COMRAM] int 
 22464 ;; Registers used:
 22465 ;;		wreg, status,2, status,0
 22466 ;; Tracked objects:
 22467 ;;		On entry : 0/0
 22468 ;;		On exit  : 0/0
 22469 ;;		Unchanged: 0/0
 22470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22475 ;;Total ram usage:        2 bytes
 22476 ;; Hardware stack levels used:    1
 22477 ;; This function calls:
 22478 ;;		Nothing
 22479 ;; This function is called by:
 22480 ;;		_interruptHandler
 22481 ;; This function uses a non-reentrant model
 22482 ;;
 22483                           
 22484                           	psect	text67
 22485  005BCE                     __ptext67:
 22486                           	opt stack 0
 22487  005BCE                     _check:
 22488                           	opt stack 23
 22489                           
 22490                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 22491                           
 22492                           ;incstack = 0
 22493  005BCE  BE59               	btfsc	_B+1,7,c
 22494  005BD0  D006               	goto	i2u470_40
 22495  005BD2  5059               	movf	_B+1,w,c
 22496  005BD4  E125               	bnz	i2l6913
 22497  005BD6  0E03               	movlw	3
 22498  005BD8  5C58               	subwf	_B,w,c
 22499  005BDA  B0D8               	btfsc	status,0,c
 22500  005BDC  D021               	goto	i2u474_40
 22501  005BDE                     i2u470_40:
 22502  005BDE  BE57               	btfsc	_N+1,7,c
 22503  005BE0  D006               	goto	i2u471_40
 22504  005BE2  5057               	movf	_N+1,w,c
 22505  005BE4  E11D               	bnz	i2l6913
 22506  005BE6  0E04               	movlw	4
 22507  005BE8  5C56               	subwf	_N,w,c
 22508  005BEA  B0D8               	btfsc	status,0,c
 22509  005BEC  D019               	goto	i2u474_40
 22510  005BEE                     i2u471_40:
 22511  005BEE  BE55               	btfsc	_S+1,7,c
 22512  005BF0  D006               	goto	i2u472_40
 22513  005BF2  5055               	movf	_S+1,w,c
 22514  005BF4  E115               	bnz	i2l6913
 22515  005BF6  0E03               	movlw	3
 22516  005BF8  5C54               	subwf	_S,w,c
 22517  005BFA  B0D8               	btfsc	status,0,c
 22518  005BFC  D011               	goto	i2u474_40
 22519  005BFE                     i2u472_40:
 22520  005BFE  BE53               	btfsc	_W+1,7,c
 22521  005C00  D006               	goto	i2u473_40
 22522  005C02  5053               	movf	_W+1,w,c
 22523  005C04  E10D               	bnz	i2l6913
 22524  005C06  0E05               	movlw	5
 22525  005C08  5C52               	subwf	_W,w,c
 22526  005C0A  B0D8               	btfsc	status,0,c
 22527  005C0C  D009               	goto	i2u474_40
 22528  005C0E                     i2u473_40:
 22529  005C0E  0101               	movlb	1	; () banked
 22530  005C10  BF8B               	btfsc	(_total_number+1)& (0+255),7,b
 22531  005C12  D00B               	goto	i2l1058
 22532  005C14  518B               	movf	(_total_number+1)& (0+255),w,b
 22533  005C16  E104               	bnz	i2l6913
 22534  005C18  0E05               	movlw	5
 22535  005C1A  5D8A               	subwf	_total_number& (0+255),w,b
 22536  005C1C  A0D8               	btfss	status,0,c
 22537  005C1E  D005               	goto	i2l1058
 22538  005C20                     i2u474_40:
 22539  005C20                     i2l6913:
 22540                           
 22541                           ;keypad.c: 213: return 0;
 22542  005C20  0E00               	movlw	0
 22543  005C22  6E02               	movwf	?_check+1,c
 22544  005C24  0E00               	movlw	0
 22545  005C26  6E01               	movwf	?_check,c
 22546  005C28  0012               	return	
 22547  005C2A                     i2l1058:
 22548                           
 22549                           ;keypad.c: 214: }
 22550                           ;keypad.c: 215: return 1;
 22551  005C2A  0E00               	movlw	0
 22552  005C2C  6E02               	movwf	?_check+1,c
 22553  005C2E  0E01               	movlw	1
 22554  005C30  6E01               	movwf	?_check,c
 22555  005C32  0012               	return	
 22556  005C34                     __end_of_check:
 22557                           	opt stack 0
 22558                           pclatu	equ	0xFFB
 22559                           pclath	equ	0xFFA
 22560                           tblptru	equ	0xFF8
 22561                           tblptrh	equ	0xFF7
 22562                           tblptrl	equ	0xFF6
 22563                           tablat	equ	0xFF5
 22564                           prodh	equ	0xFF4
 22565                           prodl	equ	0xFF3
 22566                           intcon	equ	0xFF2
 22567                           intcon3	equ	0xFF0
 22568                           indf0	equ	0xFEF
 22569                           postinc0	equ	0xFEE
 22570                           fsr0h	equ	0xFEA
 22571                           fsr0l	equ	0xFE9
 22572                           wreg	equ	0xFE8
 22573                           indf1	equ	0xFE7
 22574                           postdec1	equ	0xFE5
 22575                           fsr1h	equ	0xFE2
 22576                           fsr1l	equ	0xFE1
 22577                           indf2	equ	0xFDF
 22578                           postinc2	equ	0xFDE
 22579                           postdec2	equ	0xFDD
 22580                           fsr2h	equ	0xFDA
 22581                           fsr2l	equ	0xFD9
 22582                           status	equ	0xFD8
 22583                           
 22584 ;; *************** function ___awmod *****************
 22585 ;; Defined at:
 22586 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 22587 ;; Parameters:    Size  Location     Type
 22588 ;;  dividend        2    0[COMRAM] int 
 22589 ;;  divisor         2    2[COMRAM] int 
 22590 ;; Auto vars:     Size  Location     Type
 22591 ;;  sign            1    5[COMRAM] unsigned char 
 22592 ;;  counter         1    4[COMRAM] unsigned char 
 22593 ;; Return value:  Size  Location     Type
 22594 ;;                  2    0[COMRAM] int 
 22595 ;; Registers used:
 22596 ;;		wreg, status,2, status,0
 22597 ;; Tracked objects:
 22598 ;;		On entry : 0/0
 22599 ;;		On exit  : 0/0
 22600 ;;		Unchanged: 0/0
 22601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22605 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;Total ram usage:        6 bytes
 22607 ;; Hardware stack levels used:    1
 22608 ;; This function calls:
 22609 ;;		Nothing
 22610 ;; This function is called by:
 22611 ;;		_interruptHandler
 22612 ;; This function uses a non-reentrant model
 22613 ;;
 22614                           
 22615                           	psect	text68
 22616  005B5E                     __ptext68:
 22617                           	opt stack 0
 22618  005B5E                     ___awmod:
 22619                           	opt stack 23
 22620                           
 22621                           ;incstack = 0
 22622  005B5E  0E00               	movlw	0
 22623  005B60  6E06               	movwf	___awmod@sign,c
 22624  005B62  AE02               	btfss	___awmod@dividend+1,7,c
 22625  005B64  D006               	goto	i2l1639
 22626  005B66  6C01               	negf	___awmod@dividend,c
 22627  005B68  1E02               	comf	___awmod@dividend+1,f,c
 22628  005B6A  B0D8               	btfsc	status,0,c
 22629  005B6C  2A02               	incf	___awmod@dividend+1,f,c
 22630  005B6E  0E01               	movlw	1
 22631  005B70  6E06               	movwf	___awmod@sign,c
 22632  005B72                     i2l1639:
 22633  005B72  AE04               	btfss	___awmod@divisor+1,7,c
 22634  005B74  D004               	goto	i2l1640
 22635  005B76  6C03               	negf	___awmod@divisor,c
 22636  005B78  1E04               	comf	___awmod@divisor+1,f,c
 22637  005B7A  B0D8               	btfsc	status,0,c
 22638  005B7C  2A04               	incf	___awmod@divisor+1,f,c
 22639  005B7E                     i2l1640:
 22640  005B7E  5003               	movf	___awmod@divisor,w,c
 22641  005B80  1004               	iorwf	___awmod@divisor+1,w,c
 22642  005B82  B4D8               	btfsc	status,2,c
 22643  005B84  D018               	goto	i2l1647
 22644  005B86  0E01               	movlw	1
 22645  005B88  6E05               	movwf	___awmod@counter,c
 22646  005B8A  D004               	goto	i2l1642
 22647  005B8C  90D8               	bcf	status,0,c
 22648  005B8E  3603               	rlcf	___awmod@divisor,f,c
 22649  005B90  3604               	rlcf	___awmod@divisor+1,f,c
 22650  005B92  2A05               	incf	___awmod@counter,f,c
 22651  005B94                     i2l1642:
 22652  005B94  AE04               	btfss	___awmod@divisor+1,7,c
 22653  005B96  D7FA               	goto	i2l1643
 22654  005B98                     i2u485_40:
 22655  005B98  5003               	movf	___awmod@divisor,w,c
 22656  005B9A  5C01               	subwf	___awmod@dividend,w,c
 22657  005B9C  5004               	movf	___awmod@divisor+1,w,c
 22658  005B9E  5802               	subwfb	___awmod@dividend+1,w,c
 22659  005BA0  A0D8               	btfss	status,0,c
 22660  005BA2  D004               	goto	i2l1646
 22661  005BA4  5003               	movf	___awmod@divisor,w,c
 22662  005BA6  5E01               	subwf	___awmod@dividend,f,c
 22663  005BA8  5004               	movf	___awmod@divisor+1,w,c
 22664  005BAA  5A02               	subwfb	___awmod@dividend+1,f,c
 22665  005BAC                     i2l1646:
 22666  005BAC  90D8               	bcf	status,0,c
 22667  005BAE  3204               	rrcf	___awmod@divisor+1,f,c
 22668  005BB0  3203               	rrcf	___awmod@divisor,f,c
 22669  005BB2  2E05               	decfsz	___awmod@counter,f,c
 22670  005BB4  D7F1               	goto	i2u485_40
 22671  005BB6                     i2l1647:
 22672  005BB6  5006               	movf	___awmod@sign,w,c
 22673  005BB8  B4D8               	btfsc	status,2,c
 22674  005BBA  D004               	goto	i2l1648
 22675  005BBC  6C01               	negf	___awmod@dividend,c
 22676  005BBE  1E02               	comf	___awmod@dividend+1,f,c
 22677  005BC0  B0D8               	btfsc	status,0,c
 22678  005BC2  2A02               	incf	___awmod@dividend+1,f,c
 22679  005BC4                     i2l1648:
 22680  005BC4  C001  F001         	movff	___awmod@dividend,?___awmod
 22681  005BC8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 22682  005BCC  0012               	return	
 22683  005BCE                     __end_of___awmod:
 22684                           	opt stack 0
 22685                           pclatu	equ	0xFFB
 22686                           pclath	equ	0xFFA
 22687                           tblptru	equ	0xFF8
 22688                           tblptrh	equ	0xFF7
 22689                           tblptrl	equ	0xFF6
 22690                           tablat	equ	0xFF5
 22691                           prodh	equ	0xFF4
 22692                           prodl	equ	0xFF3
 22693                           intcon	equ	0xFF2
 22694                           intcon3	equ	0xFF0
 22695                           indf0	equ	0xFEF
 22696                           postinc0	equ	0xFEE
 22697                           fsr0h	equ	0xFEA
 22698                           fsr0l	equ	0xFE9
 22699                           wreg	equ	0xFE8
 22700                           indf1	equ	0xFE7
 22701                           postdec1	equ	0xFE5
 22702                           fsr1h	equ	0xFE2
 22703                           fsr1l	equ	0xFE1
 22704                           indf2	equ	0xFDF
 22705                           postinc2	equ	0xFDE
 22706                           postdec2	equ	0xFDD
 22707                           fsr2h	equ	0xFDA
 22708                           fsr2l	equ	0xFD9
 22709                           status	equ	0xFD8
 22710                           pclatu	equ	0xFFB
 22711                           pclath	equ	0xFFA
 22712                           tblptru	equ	0xFF8
 22713                           tblptrh	equ	0xFF7
 22714                           tblptrl	equ	0xFF6
 22715                           tablat	equ	0xFF5
 22716                           prodh	equ	0xFF4
 22717                           prodl	equ	0xFF3
 22718                           intcon	equ	0xFF2
 22719                           intcon3	equ	0xFF0
 22720                           indf0	equ	0xFEF
 22721                           postinc0	equ	0xFEE
 22722                           fsr0h	equ	0xFEA
 22723                           fsr0l	equ	0xFE9
 22724                           wreg	equ	0xFE8
 22725                           indf1	equ	0xFE7
 22726                           postdec1	equ	0xFE5
 22727                           fsr1h	equ	0xFE2
 22728                           fsr1l	equ	0xFE1
 22729                           indf2	equ	0xFDF
 22730                           postinc2	equ	0xFDE
 22731                           postdec2	equ	0xFDD
 22732                           fsr2h	equ	0xFDA
 22733                           fsr2l	equ	0xFD9
 22734                           status	equ	0xFD8
 22735                           
 22736                           	psect	rparam
 22737  0000                     pclatu	equ	0xFFB
 22738                           pclath	equ	0xFFA
 22739                           tblptru	equ	0xFF8
 22740                           tblptrh	equ	0xFF7
 22741                           tblptrl	equ	0xFF6
 22742                           tablat	equ	0xFF5
 22743                           prodh	equ	0xFF4
 22744                           prodl	equ	0xFF3
 22745                           intcon	equ	0xFF2
 22746                           intcon3	equ	0xFF0
 22747                           indf0	equ	0xFEF
 22748                           postinc0	equ	0xFEE
 22749                           fsr0h	equ	0xFEA
 22750                           fsr0l	equ	0xFE9
 22751                           wreg	equ	0xFE8
 22752                           indf1	equ	0xFE7
 22753                           postdec1	equ	0xFE5
 22754                           fsr1h	equ	0xFE2
 22755                           fsr1l	equ	0xFE1
 22756                           indf2	equ	0xFDF
 22757                           postinc2	equ	0xFDE
 22758                           postdec2	equ	0xFDD
 22759                           fsr2h	equ	0xFDA
 22760                           fsr2l	equ	0xFD9
 22761                           status	equ	0xFD8
 22762                           
 22763                           	psect	temp
 22764  00007F                     btemp:
 22765                           	opt stack 0
 22766  00007F                     	ds	1
 22767  0000                     int$flags	set	btemp
 22768  0000                     wtemp6	set	btemp+1
 22769                           pclatu	equ	0xFFB
 22770                           pclath	equ	0xFFA
 22771                           tblptru	equ	0xFF8
 22772                           tblptrh	equ	0xFF7
 22773                           tblptrl	equ	0xFF6
 22774                           tablat	equ	0xFF5
 22775                           prodh	equ	0xFF4
 22776                           prodl	equ	0xFF3
 22777                           intcon	equ	0xFF2
 22778                           intcon3	equ	0xFF0
 22779                           indf0	equ	0xFEF
 22780                           postinc0	equ	0xFEE
 22781                           fsr0h	equ	0xFEA
 22782                           fsr0l	equ	0xFE9
 22783                           wreg	equ	0xFE8
 22784                           indf1	equ	0xFE7
 22785                           postdec1	equ	0xFE5
 22786                           fsr1h	equ	0xFE2
 22787                           fsr1l	equ	0xFE1
 22788                           indf2	equ	0xFDF
 22789                           postinc2	equ	0xFDE
 22790                           postdec2	equ	0xFDD
 22791                           fsr2h	equ	0xFDA
 22792                           fsr2l	equ	0xFD9
 22793                           status	equ	0xFD8


Data Sizes:
    Strings     681
    Constant    259
    Data        24
    BSS         553
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     55     128
    BANK1           256      0     243
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$2694	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_57(CODE[1]), STR_55(CODE[1]), STR_52(CODE[1]), STR_49(CODE[2]), 
		 -> STR_48(CODE[2]), STR_47(CODE[2]), STR_46(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_97(CODE[5]), STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), 
		 -> STR_93(CODE[5]), STR_92(CODE[5]), STR_91(CODE[5]), STR_90(CODE[4]), 
		 -> STR_89(CODE[4]), STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), 
		 -> STR_85(CODE[4]), STR_84(CODE[3]), STR_83(CODE[3]), STR_82(CODE[3]), 
		 -> STR_81(CODE[2]), STR_80(CODE[2]), STR_79(CODE[2]), STR_78(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_98(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[5]), STR_74(CODE[5]), 
		 -> STR_73(CODE[19]), STR_72(CODE[20]), STR_71(CODE[20]), STR_70(CODE[20]), 
		 -> STR_69(CODE[5]), STR_68(CODE[5]), STR_67(CODE[5]), STR_66(CODE[5]), 
		 -> STR_65(CODE[3]), STR_64(CODE[19]), STR_63(CODE[19]), STR_62(CODE[14]), 
		 -> STR_61(CODE[15]), STR_60(CODE[9]), STR_59(CODE[12]), STR_58(CODE[14]), 
		 -> STR_56(CODE[7]), STR_54(CODE[3]), STR_53(CODE[11]), STR_51(CODE[3]), 
		 -> STR_50(CODE[9]), STR_45(CODE[15]), STR_44(CODE[5]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[14]), STR_40(CODE[15]), STR_39(CODE[12]), 
		 -> STR_38(CODE[12]), STR_37(CODE[17]), STR_36(CODE[13]), STR_35(CODE[16]), 
		 -> STR_34(CODE[15]), STR_33(CODE[15]), STR_32(CODE[15]), STR_31(CODE[15]), 
		 -> STR_30(CODE[9]), STR_29(CODE[10]), STR_28(CODE[19]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[14]), STR_23(CODE[15]), 
		 -> STR_22(CODE[11]), STR_21(CODE[11]), STR_20(CODE[9]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[12]), STR_16(CODE[7]), STR_15(CODE[16]), 
		 -> STR_14(CODE[18]), STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[17]), 
		 -> STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), 
		 -> STR_2(CODE[20]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_Bolt_dispense
    _main->_Bolt_remain
    _main->_Nut_dispense
    _main->_Nut_remain
    _main->_Spacer_dispense
    _main->_Spacer_remain
    _main->_Washer_dispense
    _main->_Washer_remain
    _initLCD->_lcdInst
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _drawTeamName->_glcdDrawRectangle
    _Washer_remain->_printf
    _Washer_dispense->_printf
    _drawWasher->_glcdDrawRectangle
    _Spacer_remain->_printf
    _Spacer_dispense->_printf
    _drawSpacer->_glcdDrawRectangle
    _Nut_remain->_printf
    _Nut_dispense->_printf
    _drawNut->_glcdDrawRectangle
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Read->_I2C_Master_Wait
    _Bolt_remain->_printf
    _Bolt_dispense->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _drawBolt->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___wmul->___awdiv
    _I2C_Master_Init->___lldiv
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  507936
                                             46 BANK0      9     9      0
                      _Bolt_dispense
                        _Bolt_remain
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_init
                       _I2C_sendData
                       _Nut_dispense
                         _Nut_remain
                    _Spacer_dispense
                      _Spacer_remain
                    _Washer_dispense
                      _Washer_remain
                            ___awdiv
                             ___wmul
                       _drawTeamName
         _generate_compartment_array
                           _initGLCD
                            _initLCD
                       _initVibTimer
                         _initialize
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initVibTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   44695
                                             33 BANK0      2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4620
                                              6 BANK0      3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     224
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _drawTeamName                                         1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2224
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Washer_remain                                        4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawWasher
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Washer_dispense                                      4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawWasher
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawWasher                                           1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _Spacer_remain                                        4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawSpacer
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_dispense                                      4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawSpacer
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawSpacer                                           1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _Nut_remain                                           4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _drawNut
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_dispense                                         4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _drawNut
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawNut                                              1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0    3342
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _Bolt_remain                                          4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                           _drawBolt
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Bolt_dispense                                        4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                           _drawBolt
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    22     10   10968
                                             14 BANK0     28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _drawBolt                                             1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7   35481
                                             14 BANK0     19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4572
                                              3 BANK0      3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 BANK0      1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4145
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1044
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _I2C_sendData                                         1     1      0    2320
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2298
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    27    27      0   13532
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            30    22      8    3544
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bolt_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawBolt
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Bolt_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawBolt
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_init
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Nut_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawNut
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Nut_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawNut
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawSpacer
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawSpacer
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawWasher
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawWasher
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   ___awdiv
   ___wmul
     ___awdiv (ARG)
   _drawTeamName
     _I2C_Master_Init
       ___lldiv
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _spiInit
   _generate_compartment_array
   _initGLCD
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit
   _initLCD
     _lcdInst
       _lcdNibble
   _initVibTimer
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F3       7       94.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     37      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B9      34        0.0%
DATA                 0      0     2B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 04:28:50 2018

                                    _B 0058                                      _N 0056  
                                    _S 0054                                      _W 0052  
                                    _i 00B7                                      _j 006B  
                   i2_I2C_Master_Start 6284                     i2_I2C_Master_Write 625A  
                          _rotate_gear 00FF                            _SSPSTATbits 000FC7  
                       ??_glcdTransfer 00C7                            __CFG_CPD$ON 000000  
                         ___awdiv@sign 00C8                    ___wmul@multiplicand 00CD  
                   i2___lwdiv@dividend 0001                            __CFG_BORV$3 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  l510 1F5A                                    l502 1E94  
                                  l511 1FAA                                    l512 1FE0  
                                  l513 210C                                    l530 2446  
                                  l514 20F8                                    l506 1F00  
                                  l531 246C                                    l515 202C  
                                  l532 2492                                    l524 2360  
                                  l508 22D2                                    l533 24B8  
                                  l525 2340                                    l517 2154  
                                  l509 1F0C                                    l542 258C  
                                  l543 25A0                                    l527 2524  
                                  l704 5526                                    l632 51B8  
                                  l544 25B4                                    l536 24EE  
                                  l528 23B0                                    l705 54E2  
                                  l545 25C8                                    l537 2518  
                                  l548 2922                                    l751 545E  
                                  l752 5412                                    l760 53A2  
                                  l761 5356                                    l770 529A  
                                  l677 5796                                    l678 5752  
                                  l686 5666                                    l687 5622  
                                  l695 55C6                                    l696 5582  
                                  l769 52E6                                    l778 522A  
                                  l779 51DE                           __CFG_CPB$OFF 000000  
                                  _RED FC95              __end_ofGLCD_PIC@INST_TEON FCB8  
                  ?i2_I2C_Master_Start 0001                    ?i2_I2C_Master_Write 0002  
                      _compartment_pos 0190                           ___awmod@sign 0006  
                                  prod 000FF3                          _assembly_step 00AF  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1222 5FFC  
                                 l1070 4C58                                   l1071 4CDA  
                                 l1224 6014                                   l1064 4D1C  
                                 l1225 5FEE                                   l1401 32BC  
                                 l1065 4AEE                                   l1226 5FF2  
                                 l1410 3328                                   l1227 5FF6  
                                 l1403 340E                                   l1411 3350  
                                 l1067 4B32                                   l1340 4D7A  
                                 l1420 33FC                                   l1412 3360  
                                 l1068 4B84                                   l1421 33D0  
                                 l1413 335A                                   l1069 4BE6  
                                 l1342 4D8C                                   l1343 4D98  
                                 l1415 33AC                                   l1344 4E7A  
                                 l1440 3582                                   l1432 350C  
                                 l1424 3476                                   l1408 3446  
                                 l1360 5CA4                                   l1441 3568  
                                 l1433 34C6                                   l1417 33BC  
                                 l1409 3322                                   l1346 4EF4  
                                 l1338 4D66                                   l1450 3674  
                                 l1418 33B6                                   l1362 5CAE  
                                 l1347 4ED8                                   l1427 34FC  
                                 l1452 365C                                   l1428 3490  
                                 l1453 35B8                                   l1437 3526  
                                 l1357 5CB6                                   l1454 366E  
                                 l1438 354A                                   l1630 587E  
                                 l1358 5C9A                                   l1455 3608  
                                 l1439 3552                                   l1359 5CCA  
                                 l1392 3260                                   l1449 35B2  
                                 l1393 3270                                   l1633 58A6  
                                 l1634 58B0                                   l1626 5858  
                                 l1395 3288                                   l1635 58BE  
                                 l1627 5868                                   l1396 3280  
                                 l1629 5886                                   l1814 5A04  
                                 l1815 59F8                                   l1818 5A38  
                                 l1819 5A46                                   l1871 5D8C  
                                 l1872 5D96                                   l1881 5F4A  
                                 l1882 5F54                                   l1867 5D6C  
                                 l1868 5D64                                   l1788 6180  
                                 l1877 5F32                                   l1878 5F2A  
                                 l5623 4D90                                   l5483 60AC  
                                 l5821 33D0                                   l6631 510A  
                                 l5817 33B6                                   l5861 34CA  
                                 l7621 2650                                   l5847 3494  
                                 l7631 2678                                   l7449 21A4  
                                 l7459 21CC                                   l7575 253A  
                                 l7569 2520                                   _ADON 007E10  
                                 STR_1 FE41                                   STR_2 FD6A  
                                 STR_3 FE70                                   STR_4 FED8  
                                 STR_5 FFF8                                   STR_6 FF8F  
                                 STR_7 FE0F                                   STR_8 FFE3  
                                 STR_9 FFD1                                   _BLUE FC85  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3420 60B4  
                                 u4220 5682                                   u4300 53BE  
                                 u3510 5A08                                   u3430 60C2  
                                 u3422 60B6                                   u3432 60C4  
                                 u4250 55E2                                   u4330 5246  
                                 _GREY FC9D                                   u3445 57FA  
                                 u4165 609A                                   u3446 57FC  
                                 u4190 57B2                                   u4166 609C  
                                 u3535 5C6A                                   u3455 583E  
                                 u3480 605E                                   u3456 5840  
                                 u3640 5D70                                   u4360 5302  
                                 u4280 5542                                   u5320 1E9E  
                                 u3670 5F36                                   u3750 338E  
                                 u4390 547A                                   u5430 21CC  
                                 u7007 3E7A                                   _RBIE 007F93  
                                 u5520 24E6                                   _RBIF 007F90  
                                 u7017 51CA                                   u3498 6062  
                                 u7107 52A8                                   u7027 51EC  
                                 u5620 2678                                   u5540 2520  
                                 u3757 3384                                   u7117 52BE  
                                 u7037 5202                                   u3790 33F2  
                                 u7207 53E0                                   u7127 5324  
                                 u7047 5268                                   u3960 358A  
                                 u5560 253A                                   u7217 5604  
                                 u7137 5564                                   u7057 54C4  
                                 u3970 35A0                                   u7307 5760  
                                 u7227 5630                                   u7147 5590  
                                 u7067 54F0                                   u3797 33E8  
                                 u7317 5776                                   u7237 5648  
                                 u7157 55A8                                   u7077 5506  
                                 u3990 367E                                   u4790 588A  
                                 u7327 61B6                                   u7247 45A2  
                                 u7167 420E                                   u7087 29FE  
                                 u6607 1EE4                                   u7337 61CE  
                                 u7257 53FE                                   u7177 5342  
                                 u7097 5286                                   u6617 1F24  
                                 u7347 57E0                                   u7267 5420  
                                 u7187 5364                                   u6707 238A  
                                 u6627 1F48                                   u7357 57EA  
                                 u7277 5438                                   u7197 537A  
                                 u6717 23DA                                   u6637 1F9E  
                                 u7367 5824                                   u7287 549C  
                                 u6807 27F4                                   u6727 254C  
                                 u6647 1FD4                                   u7377 582E  
                                 u7297 573E                                   u6817 2820  
                                 u6737 256C                                   u6657 2012  
                                 u7387 4F12                                   u6907 295A  
                                 u6827 283C                                   u6747 25DA  
                                 u6667 20E0                                   u6917 297A  
                                 u6837 2852                                   u6757 25FE  
                                 u6677 2124                                   u6597 1ECA  
                                 u6927 29B2                                   u6847 287E  
                                 u6767 2776                                   u6687 2148  
                                 u6937 29CC                                   u6857 289A  
                                 u6777 2792                                   u6697 22FE  
                                 u6947 5DFA                                   u6867 28B0  
                                 u6787 27C2                                   u6957 5E2E  
                                 u6877 28DC                                   u6797 27DE  
                                 u6967 3ACC                                   u6887 28F8  
                                 u6977 3AFC                                   u6897 290E  
                                 u6987 3B30                                   u6997 3E60  
                                 _main 1E40               __end_of_interruptHandler 0FEA  
                                 _mode 00B5                                   _keys FC53  
                                 _temp 006E                                   _time 0090  
                                 _prev 0060                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 0005  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 007F  
                       ??_drawTeamName 00E4                                   _strs FCF2  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                     __end_of_I2C_init 604C                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 6212  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                          i2_lcdNibble 58C8                    __end_of_Bolt_remain 54AA  
                     __end_of_LCD_LEFT FCED                           _total_number 018A  
                I2C_Master_Read@ackBit 00C4                       ?_I2C_Master_Init 00D0  
                     ?_I2C_Master_Read 0001       i2generate_compartment_array@step 0001  
       generate_compartment_array@step 00C3                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                      __end_of___awdiv 58C8                                  _BLACK FCA1  
                                _EEADR 000FA9                                  STR_10 FE3F  
                                STR_11 FFF8                                  STR_12 FFFB  
                                STR_20 FF7D                                  STR_13 FFD1  
                                STR_21 FF4B                                  STR_22 FF4B  
                                STR_30 FF86                                  STR_14 FDCA  
                                STR_31 FEAC                                  STR_23 FE7F  
                                STR_15 FE51                                  STR_40 FE7F  
                                STR_16 FFA5                                  STR_24 FEE6  
                                STR_32 FEBB                                  STR_41 FEE6  
                                STR_33 FEAC                                  STR_17 FF0F  
                                STR_25 FDED                                  STR_42 FDED  
                                STR_34 FEBB                                  STR_50 FF6B  
                                STR_18 FF33                                  STR_26 FDFE  
                                STR_43 FDFE                                  STR_51 FFF8  
                                STR_19 FE8E                                  STR_35 FE31  
                                STR_27 FE20                                  STR_52 FE6F  
                                STR_44 FFDE                                  STR_60 FF74  
                                STR_36 FF02                                  STR_28 FDA4  
                      __end_of___awmod 5BCE                                  STR_37 FE0F  
                                STR_29 FF61                                  STR_53 FF56  
                                STR_61 FE9D                                  STR_45 FE61  
                                STR_54 FFF8                                  STR_46 FFFD  
                                STR_38 FF1B                                  STR_62 FEF4  
                                STR_70 FD56                                  STR_55 FE6F  
                                STR_47 FFEA                                  STR_39 FF27  
                                STR_63 FD7E                                  STR_80 FFEE  
                                STR_48 FFEE                                  STR_56 FF9E  
                                STR_64 FD91                                  STR_57 FE6F  
                                STR_81 FFF2                                  STR_49 FFF2  
                                STR_73 FDB7                                  STR_82 FFE9  
                                STR_74 FFCF                                  STR_90 FFF4  
                                STR_66 FFCF                                  STR_58 FECA  
                                STR_83 FFED                                  STR_75 FFD4  
                                STR_67 FFD4                                  STR_91 FFC0  
                                STR_59 FF3F                                  STR_84 FFF1  
                                STR_76 FFD9                                  STR_68 FFD9  
                                STR_92 FFC5                                  STR_77 FD65  
                                STR_69 FD65                                  STR_85 FFE8  
                                STR_93 FFBB                                  STR_78 FFFD  
                                STR_86 FFEC                                  STR_94 FFB1  
                                STR_79 FFEA                                  STR_87 FFF0  
                                STR_95 FFB6                                  STR_88 FFB2  
                                STR_96 FFAC                                  STR_89 FFBC  
                                STR_97 FFCA                                  STR_98 FF97  
                                STR_99 FDDC                        __end_of___lldiv 5A58  
                     __end_of_INST_NOP FCE8                        ___awdiv@divisor 00C5  
                                _GREEN FC89                        __end_of___lwdiv 5DA0  
                      __end_of___lwmod 5F5E                                  i2l610 0C52  
                                i2l611 0C5A                                  i2l620 0F78  
                                i2l612 0C64                                  i2l621 0EA4  
                                i2l613 0D28                                  i2l605 0C8E  
                                i2l622 0EE2                                  i2l606 0C3A  
                                i2l623 0F1E                                  i2l615 0D7A  
                                i2l607 0CC8                                  i2l624 0F5C  
                                i2l608 0C42                                  i2l625 0F9E  
                                i2l617 0DB2                                  i2l609 0C4A  
                                i2l561 01AE                                  i2l626 0F8C  
                                i2l570 01F2                                  i2l562 00B0  
                                i2l627 0F9C                                  i2l619 0DE6  
                                i2l580 06E2                                  i2l572 0242  
                                i2l564 0100                                  i2l590 0B5C  
                                i2l582 072A                                  i2l574 0428  
                                i2l591 0882                                  i2l575 0676  
                                i2l567 01CA                                  i2l559 0E14  
                                i2l592 08C2                                  i2l584 0772  
                                i2l593 0902                                  i2l569 02EE  
                                i2l594 0942                                  i2l586 07BA  
                                i2l578 0692                                  i2l595 0B06  
                                i2l579 0838                                  i2l596 099A  
                                i2l588 0802                                  i2l589 082A  
                                i2l598 0A84                                  i2l599 0AFE  
                      ___awdiv@counter 00C7                                  _PORTB 000F81  
                                _WHITE FC99                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _SSPIF 007CF3                                  _B_max 01EF  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                                _N_max 01ED                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 61D6                          _N_spacingTime 009B  
                                _S_max 01EB                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _W_max 01E9                __end_of_Washer_dispense 554A  
                      __end_of_drawNut 4880                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
        __end_ofGLCD_PIC@INST_VMOFCTR2 FCA9                        __end_of_initLCD 5E3E  
                                _check 5BCE                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                                  _angle 0192  
                      __end_of_dpowers FC6E                                  _array FCA5  
                                _error 018E                        __end_of_isdigit 6188  
                                _valid 018C                                  _state 00B1  
                                _putch 61A6                      _compartment_array 0080  
                                main@x 00F4                                  main@y 00F5  
                                pclath 000FFA                        __end_of_spiInit 601E  
                                tablat 000FF5                        __end_of_spiSend 6246  
                    _LCDinterruptState 00BD                       __end_ofi2___wmul 6142  
                         main@rotation 00F3                                  status 000FD8  
          I2C_Master_Read@receivedByte 00C5                                  wtemp6 0080  
                      __end_of_strncmp 59D4                     __size_ofi2___awdiv 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0024  
                __size_of_I2C_sendData 0028                     __size_ofi2___lldiv 0082  
                     __end_ofi2_printf 3AB6                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                           __end_of_BLUE FC89  
                         __end_of_GREY FCA1                        __initialization 568A  
                    i2___lldiv@divisor 0005                     __size_ofi2_lcdInst 0014  
                         __end_of_main 29F0                      i2___lldiv@counter 000D  
                         __end_of_keys FC64           glcdSetCOLMOD@numBitsPerPixel 00C9  
                           i2printf@ap 001D                             i2printf@cp 001B  
                         __end_of_strs FD56                     __size_ofi2_initLCD 004C  
                   __size_ofi2_isdigit 001E               __size_of_Spacer_dispense 00A0  
                    __end_of_LCD_RIGHT FCEE                                 ??_main 00F1  
                        ?_initVibTimer 0001                          __activetblptr 000003  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 00C4  
                __end_of_Spacer_remain 5332                                 ?_check 0001  
                   ??_I2C_Master_Start 00C4                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 00C6  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 00C3                        i2lcdNibble@data 0002  
                               ?_putch 0001                      _glcdDrawRectangle 4D50  
                         _I2C_sendData 60F4                        Bolt_remain@time 00ED  
                    __end_of_INST_TEON FCD8                        i2lcdNibble@temp 0001  
                               _INDIGO FC81                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 i2l1020 1110  
                               i2l1030 140C                                 i2l1022 1172  
                               i2l1040 1804                                 i2l1032 14C0  
                               i2l1024 1214                                 i2l1016 104C  
                               i2l1050 1CB4                                 i2l1042 18F4  
                               i2l1034 1574                                 i2l1026 12B6  
                               i2l1018 10AE                                 i2l2011 5FAE  
                               i2l2020 5E94                                 i2l1052 1D7A  
                               i2l1044 19E4                                 i2l1036 1662  
                               i2l1028 1358                                 i2l2012 5FAA  
                               i2l2021 5E8C                                 i2l1046 1AD4  
                               i2l1038 1750                                 i2l2014 5FC6  
                               i2l1070 49F2                                 i2l2015 5FBE  
                               i2l1071 4A76                                 i2l1048 1BC4  
                               i2l1064 4ABA                                 i2l1065 4882  
                               i2l1401 36FC                                 i2l1058 5C2A  
                               i2l2034 59BA                                 i2l1410 3762  
                               i2l2035 5950                                 i2l1067 48C6  
                               i2l1403 3840                                 i2l1411 378A  
                               i2l2028 5EE6                                 i2l2036 59B2  
                               i2l1068 491A                                 i2l1420 382E  
                               i2l1412 3798                                 i2l2029 5EDE  
                               i2l1069 497E                                 i2l1421 3804  
                               i2l1413 3794                                 i2l1415 37E2  
                               i2l1440 39AC                                 i2l1432 393A  
                               i2l1424 38A4                                 i2l1408 3876  
                               i2l1441 3996                                 i2l1433 38F4  
                               i2l1417 37F2                                 i2l1409 375E  
                               i2l1450 3A92                                 i2l1418 37EC  
                               i2l1427 392A                                 i2l1452 3A7C  
                               i2l1428 38BE                                 i2l1453 39E0  
                               i2l1437 3954                                 i2l1630 5A92  
                               i2l1454 3A8C                                 i2l1438 3978  
                               i2l1455 3A2A                                 i2l1439 3980  
                               i2l1640 5B7E                                 i2l1392 36A6  
                               i2l1633 5ABA                                 i2l1449 39DA  
                               i2l1393 36B6                                 i2l1642 5B94  
                               i2l1634 5AC4                                 i2l1626 5A6C  
                               i2l1643 5B8C                                 i2l1635 5AD2  
                               i2l1627 5A7C                                 i2l1395 36CA  
                               i2l1396 36C4                                 i2l1629 5A9A  
                               i2l1646 5BAC                                 i2l1814 5B0A  
                               i2l1647 5BB6                                 i2l1639 5B72  
                               i2l1815 5AFE                                 i2l1648 5BC4  
                               i2l1818 5B3E                                 i2l1819 5B4C  
                               i2l1871 5DDE                                 i2l1872 5DE8  
                               i2l1881 5F8C                                 i2l1882 5F96  
                               i2l1867 5DBE                                 i2l1868 5DB6  
                               i2l1788 619E                                 i2l1877 5F74  
                               i2l1878 5F6C                                 i2l7131 3804  
                               i2l7127 37EC                                 i2l7171 38F8  
                               i2l7157 38C2                   __end_of_glcdTransfer 607A  
                               i2l8087 0A92                                 i2l6913 5C20  
                               i2l6659 5950                                 i2l8197 0E10  
                               i2l7815 023A                                 i2l7769 00F8  
                               i2l7875 046A                                 i2l7795 01C6  
                               i2l7897 054A                                 _ORANGE FC91  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                     ?_glcdDrawRectangle 00D1  
                               _VIOLET FC7D                                 _SSPADD 000FC8  
                               _YELLOW FC8D                                 _SSPBUF 000FC9  
                               _B_done 017E                        _openHandle_data 00BC  
                          _Bolt_remain 53EE                                 _N_done 017C  
                               _S_done 017A                         __CFG_XINST$OFF 000000  
            glcdDrawRectangle@numLoops 00DC                                 _W_done 0178  
                     __end_of_drawBolt 5068                    ??_glcdDrawRectangle 00D8  
       ??i2_generate_compartment_array 0003                                 ___wmul 60CC  
                     __end_of_initGLCD 3E6C                              ??___awdiv 00C7  
                       __CFG_STVREN$ON 000000                              ??___awmod 0005  
                            ??___lldiv 00CB                              ??___lwdiv 00C7  
                            ??___lwmod 00CE                       __end_of_is_valid 1E40  
                               clear_0 56F0                                 clear_1 56FC  
                               clear_2 5708                                 clear_3 5714  
                     ___awdiv@quotient 00C9                        ___awmod@divisor 0003  
             __end_ofGLCD_PIC@INST_NOP FCC8                                 _number 0075  
                      ___awmod@counter 0005                              ??_lcdInst 00C5  
                               _printf 3254                         ??_initVibTimer 00C3  
                               _strcat 5FA0                                 _strcmp 5E8A  
                            ??_drawNut 00E4                                 _strcpy 5ED4  
                       i2___awdiv@sign 0006                              ??_initLCD 00C6  
                           _Nut_remain 5332                   __end_of_drawTeamName 4200  
                   _compartment_number 0042                           __pdataCOMRAM 0077  
                            ??_isdigit 00C3                      __end_ofi2___awdiv 5ADC  
                         ?_spiTransfer 0001                           _EndOfProgram 00BB  
                    __end_ofi2___lldiv 5B5E                      __end_ofi2___lwdiv 5DF2  
                         __mediumconst FC52                      __end_ofi2___lwmod 5FA0  
                            ?_I2C_init 0001                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                            ??_spiInit 00C3                              ??_spiSend 00C5  
            __end_of_glcdDrawRectangle 4F04                       ?_Washer_dispense 00ED  
                    __end_ofi2_lcdInst 6226                              ??_strncmp 000D  
                    __end_ofi2_initLCD 5E8A                      __end_ofi2_isdigit 61A6  
                           __accesstop 0080                __end_of__initialization 571A  
                        __end_of_BLACK FCA5                          ___rparam_used 000001  
                        __end_of_GREEN FC8D                          __end_of_WHITE FC9D  
          __end_ofGLCD_PIC@INST_GAMSET FCC0            __end_ofGLCD_PIC@INST_COLMOD FCB4  
          __end_ofGLCD_PIC@INST_MADCTL FCB7            __end_ofGLCD_PIC@INST_DISPON FCBE  
          __end_ofGLCD_PIC@INST_IDMOFF FCB6                     i2___lwmod@dividend 0008  
                 __end_of_happynewyear FC7D                         __pcstackCOMRAM 0001  
                   i2___lldiv@dividend 0001            __end_ofGLCD_PIC@INST_INVCTR FCB0  
          __end_ofGLCD_PIC@INST_INVOFF FCC2                           __pidataBANK0 628C  
                         __pidataBANK1 6246                i2I2C_Master_Read@ackBit 0002  
                   Bolt_dispense@B_max 00ED                          __end_of_check 5C34  
                __end_of_Bolt_dispense 57BA            __end_ofGLCD_PIC@INST_PWCTR1 FCAF  
          __end_ofGLCD_PIC@INST_PWCTR2 FCAE            __end_ofGLCD_PIC@INST_PWCTR3 FCAD  
          __end_ofGLCD_PIC@INST_PWCTR4 FCAC            __end_ofGLCD_PIC@INST_PWCTR5 FCAB  
                        __end_of_array FCA8            __end_ofGLCD_PIC@INST_VMCTR1 FCAA  
          __end_ofGLCD_PIC@INST_SLPOUT FCC5                          __end_of_putch 61BE  
                __end_of_Washer_remain 5276                            i2printf@idx 0019  
                          i2printf@len 001F                            i2printf@val 0021  
                        _B_spacingTime 009D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0088                            i2putch@data 0003  
                           ??_I2C_init 00D8                      ??_Spacer_dispense 00EF  
                            ?i2_printf 000D                                ??_check 0003  
                              ??_putch 00C5                          _INST_VMOFCTR2 FCC8  
                   i2___lldiv@quotient 0009                  __end_of_glcdSetCOLMOD 5CF0  
                           __pbssBANK0 0080                             __pbssBANK1 0100  
                           __pbssBANK2 0200                      _S_total_dispensed 0172  
                    ?_interruptHandler 0001                     ??_interruptHandler 0027  
                    Washer_remain@time 00ED                          _init_position 01F1  
                         ?i2_lcdNibble 0001                                ?___wmul 00CB  
                       main@compart_id 00F8             i2I2C_Master_Init@clockFreq 000E  
                   glcdDrawRectangle@i 00DE                     __end_of_INST_CASET FCDD  
                   __end_of_INST_IDMON FCD5                   Spacer_dispense@S_max 00ED  
                              ?_printf 00D1                     __end_of_INST_INVON FCE1  
                   __end_of_INST_RASET FCDC                     __end_of_INST_RAMWR FCDB  
                   __end_of_INST_TEOFF FCD9                                ?_strcat 0001  
                   __end_of_INST_NORON FCE3                                ?_strcmp 0001  
                              ?_strcpy 0007                     __end_of_INST_PTLAR FCDA  
                   __end_of_INST_SLPIN FCE6                     __end_of_INST_PTLON FCE4  
                           ??i2___wmul 0005                            ?_Nut_remain 00ED  
                         _gear_counter 0062                             _final_time 0160  
                __size_of_glcdTransfer 002E                             _drawSpacer 4200  
                           ??i2_printf 0015             __size_of_glcdDrawRectangle 01B4  
                           _drawWasher 29F0              spiTransfer@byteToTransfer 00C4  
                 lcd@LCDinterruptState 006F                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                              ?_drawBolt 0001  
                              _SSPSTAT 000FC7                                _B_array 0130  
                              _B_input 0186                              ?_initGLCD 0001  
                              i2_putch 61FE                              ?_is_valid 0001  
                 __end_of_initVibTimer 61EA                                _N_array 0110  
                              _N_input 0184            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 5842            __size_ofi2_I2C_Master_Write 000A  
                              _S_array 0120                                _S_input 0182  
                              __Hparam 0000                         _GLCD_SIZE_HORZ FCE9  
                           _hr_initial 016E                                __Lparam 0000  
                              _W_array 0100                         _GLCD_SIZE_VERT FCE8  
                              _W_input 0180                   __end_of_INST_DISPOFF FCDF  
                 __end_of_INST_FRMCTR1 FCD3                   __end_of_INST_FRMCTR2 FCD2  
                 __end_of_INST_FRMCTR3 FCD1                                ___awdiv 5842  
                              ___awmod 5B5E                                ___lldiv 59D4  
                      __size_of___wmul 0028                                ___lwdiv 5D4C  
                        ?_Nut_dispense 00ED                                ___lwmod 5F1A  
                __size_of_drawTeamName 0394               interruptHandler@keypress 0040  
                              __pcinit 568A                           _glcdTransfer 604C  
                              __ramtop 1000                             _initialize 5068  
                              _lcdInst 61BE                                __ptext0 1E40  
                              __ptext1 5068                                __ptext2 61D6  
                              __ptext3 5DF2                                __ptext4 3AB6  
                              __ptext5 5C94                                __ptext6 4AEC  
                              __ptext7 3E6C                                __ptext8 5842  
                              __ptext9 51BA                        __size_of_printf 0448  
                              _drawNut 4594                              _T0CONbits 000FD5  
                      __size_of_strcat 0042                        __size_of_strcmp 004A  
                 __end_of_INST_SWRESET FCE7                        __size_of_strcpy 0046  
                              _initLCD 5DF2                      __end_of_hexpowers FC76  
                              _counter 005C                                _dpowers FC64  
                              _isdigit 6166                       ___awmod@dividend 0001  
                            _LCD_RIGHT FCED               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002A                                _spiInit 5FE2  
             __size_of_I2C_Master_Wait 0014                                _spiSend 6238  
             __size_of_I2C_Master_Stop 0008                          _S_spacingTime 0099  
                 __size_of_spiTransfer 0028                             ??_drawBolt 00E4  
                              _strncmp 594E                         __pintcode_body 0012  
                 end_of_initialization 571A                  GLCD_PIC@INST_VMOFCTR2 FCA8  
                           ??_initGLCD 00E4                  __end_of_LCD_SIZE_HORZ FCF0  
                __end_of_LCD_SIZE_VERT FCEF           ??_generate_compartment_array 00C5  
                         _final_number 0150                                int_func 0012  
                  i2___wmul@multiplier 0001                             ??_is_valid 0007  
               __end_of_GLCD_SIZE_HORZ FCEA                           ?_Bolt_remain 00ED  
                       _operation_done 0064                              _INST_TEON FCD7  
               __end_of_GLCD_SIZE_VERT FCE9              __size_of_I2C_Master_Start 0008  
                         _drawTeamName 3E6C              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 00C7                           _close_handle 00FC  
                  __size_of_Nut_remain 00BC                        ___lldiv@counter 00CF  
                              printf@c 00EC                                printf@f 00D1  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                       ??_Nut_dispense 00EF                       glcdTransfer@byte 00C8  
                              strcmp@r 0006                              _PORTAbits 000F80  
                            _PORTBbits 000F81                             _prev_state 0188  
                           _servo_ramp 00FD                         spiInit@divider 00C3  
  __size_of_generate_compartment_array 0264                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                            _TRISDbits 000F95                            ?_drawSpacer 0001  
                          ?_drawWasher 0001                      i2_I2C_Master_Init 5CF0  
                    i2_I2C_Master_Read 6142                      i2_I2C_Master_Wait 6226  
                         _happynewyear FC76                      i2_I2C_Master_Stop 627C  
                            i2___awdiv 5A58                      __size_of_I2C_init 002E  
                           _white_tape 0068                              _B_counter 00AD  
                    i2___lwdiv@divisor 0003                              i2___lldiv 5ADC  
                            i2___lwdiv 5DA0                              i2___lwmod 5F5E  
                   ?i2_I2C_Master_Init 000E                      i2___lwdiv@counter 0007  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   ?i2_I2C_Master_Stop 0001                      Nut_dispense@N_max 00ED  
                            i2_lcdInst 6212                         __end_of_INDIGO FC85  
                 Washer_dispense@W_max 00ED                            printf@width 00EA  
                       __end_of_ORANGE FC95                              i2_initLCD 5E3E  
                   i2___awdiv@dividend 0001                         __end_of_VIOLET FC81  
                       __end_of_YELLOW FC91                    ??i2_I2C_Master_Init 0012  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 6188  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
         __end_ofGLCD_PIC@INST_DISPOFF FCBF           __end_ofGLCD_PIC@INST_FRMCTR1 FCB3  
         __end_ofGLCD_PIC@INST_FRMCTR2 FCB2           __end_ofGLCD_PIC@INST_FRMCTR3 FCB1  
               __size_of_Spacer_remain 00BC                        _Spacer_dispense 554A  
                       __end_of___wmul 60F4                   __size_ofi2_lcdNibble 0086  
                        __pidataCOMRAM 6264                            ?_initialize 0001  
                        i2lcdInst@data 0003           __end_ofGLCD_PIC@INST_SWRESET FCC7  
                     i2___wmul@product 0005                         __end_of_printf 369C  
                            _N_counter 00A9                         __end_of_strcat 5FE2  
                       __end_of_strcmp 5ED4                           i2printf@flag 0023  
                       __end_of_strcpy 5F1A              __end_ofi2_I2C_Master_Init 5D4C  
            __end_ofi2_I2C_Master_Read 6166              __end_ofi2_I2C_Master_Wait 6238  
                         i2printf@prec 001A                    start_initialization 568A  
            __end_ofi2_I2C_Master_Stop 6284                     i2___awdiv@quotient 0007  
                          __end_of_RED FC99                      __size_ofi2___wmul 0026  
                            i2printf@c 0026                              i2printf@f 000D  
 __end_ofi2_generate_compartment_array 4AEC  __size_ofi2_generate_compartment_array 026C  
         i2_generate_compartment_array 4880                 glcdDrawRectangle@color 00D4  
                           ?i2___awdiv 0001                  __size_of_initVibTimer 0014  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00AB                      ??_I2C_Master_Init 00D4  
                    ??_I2C_Master_Read 00C4                      ??_I2C_Master_Wait 00C3  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C4  
                         _counter_step 005A                       __CFG_OSC$INTIO67 000000  
             __size_of_Washer_dispense 00A0                             ?i2_initLCD 0001  
                           ?i2_isdigit 0001                              _W_counter 00A7  
                    interruptHandler@i 003E                    __size_of_drawSpacer 0394  
                             ??___wmul 00CF                    __size_of_drawWasher 0864  
             I2C_Master_Init@clockFreq 00D0                            __pdataBANK0 00FA  
                          __pdataBANK1 01E9                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 00DB              __size_of_interruptHandler 0FE2  
                             ??_strcat 0005                               ??_strcmp 0005  
                             ??_strcpy 000B                           ??_Nut_remain 00EF  
                         _initVibTimer 61D6     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ FCEC  
           _GLCD_ADDRESSABLE_SIZE_HORZ FCEB     __end_of_GLCD_ADDRESSABLE_SIZE_VERT FCEB  
           _GLCD_ADDRESSABLE_SIZE_VERT FCEA                            __pbssCOMRAM 0042  
                          _change_mode 00B3                          __pcstackBANK0 00C3  
           __end_ofGLCD_PIC@INST_CASET FCBD             __end_ofGLCD_PIC@INST_IDMON FCB5  
                    i2___lwmod@divisor 000A             __end_ofGLCD_PIC@INST_INVON FCC1  
           __end_ofGLCD_PIC@INST_RASET FCBC             __end_ofGLCD_PIC@INST_RAMWR FCBB  
                         _INST_DISPOFF FCDE             __end_ofGLCD_PIC@INST_TEOFF FCB9  
           __end_ofGLCD_PIC@INST_NORON FCC3             __end_ofGLCD_PIC@INST_PTLAR FCBA  
           __end_ofGLCD_PIC@INST_SLPIN FCC6                      i2___lwmod@counter 000C  
           __end_ofGLCD_PIC@INST_PTLON FCC4                           _isdigit$2258 00C4  
                        _Spacer_remain 5276                           _INST_FRMCTR1 FCD2  
                         _INST_FRMCTR2 FCD1                           _INST_FRMCTR3 FCD0  
                 __end_of_Nut_dispense 568A     __end_of_generate_compartment_array 4D50  
        ?i2_generate_compartment_array 0001             _generate_compartment_array 4AEC  
               __size_of_Bolt_dispense 0096                      __size_of_drawBolt 0164  
                             ?i2_putch 0001                 __size_of_Washer_remain 00BC  
                    _W_total_dispensed 0170                    __size_of_initialize 0152  
                    __size_of_initGLCD 03B6                           _current_set2 0070  
                         _INST_SWRESET FCE6                       _I2C_Master_Start 6274  
                     _I2C_Master_Write 6250                __end_of_Spacer_dispense 55EA  
                    __size_of_is_valid 0E56                              _main$2694 00F6  
                     ___lwdiv@dividend 00C3                           _initial_time 0168  
                   __end_of_Nut_remain 53EE                   __size_of_Bolt_remain 00BC  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FC52                              _lcdNibble 57BA  
                             ?___awdiv 00C3                               ?___awmod 0001  
                             ?___lldiv 00C3                               ?___lwdiv 00C3  
                             ?___lwmod 00CA                              _final_set 01BC  
               __size_of_glcdSetCOLMOD 005C                               ?_lcdInst 0001  
                             ?_drawNut 0001                               ?_initLCD 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Init 005C  
           __size_ofi2_I2C_Master_Read 0024             __size_ofi2_I2C_Master_Wait 0012  
                  glcdDrawRectangle@XE 00D1                    glcdDrawRectangle@YE 00D3  
                  glcdDrawRectangle@XS 00E3                    glcdDrawRectangle@YS 00D2  
           __size_ofi2_I2C_Master_Stop 0008                               _I2C_init 601E  
                  __end_of_INST_GAMSET FCE0                               ?_spiInit 0001  
                  __end_of_INST_COLMOD FCD4                               ?_spiSend 0001  
                  __end_of_INST_MADCTL FCD7                    __end_of_INST_DISPON FCDE  
                  __end_of_INST_IDMOFF FCD6                              _hexpowers FC6E  
                       ?_Spacer_remain 00ED                   GLCD_PIC@INST_DISPOFF FCBE  
                       __size_of_check 0066                    __end_of_INST_INVCTR FCD0  
                  __end_of_INST_INVOFF FCE2                       ___lwdiv@quotient 00C7  
                          ??i2___awdiv 0005                         Nut_remain@time 00ED  
                          ??i2___lldiv 0009                          _W_spacingTime 0097  
                        ?_I2C_sendData 0001                   GLCD_PIC@INST_FRMCTR1 FCB2  
                 GLCD_PIC@INST_FRMCTR2 FCB1                   GLCD_PIC@INST_FRMCTR3 FCB0  
                  __end_of_INST_PWCTR1 FCCF                    __end_of_INST_PWCTR2 FCCE  
                  __end_of_INST_PWCTR3 FCCD                    __end_of_INST_PWCTR4 FCCC  
                            _min_final 0164                    __end_of_INST_PWCTR5 FCCB  
                             ?_strncmp 0007                            ??i2___lwdiv 0005  
                  __end_of_INST_VMCTR1 FCCA                    __end_of_INST_SLPOUT FCE5  
                          ??i2___lwmod 000C                         __size_of_putch 0018  
                            _sec_final 0162                               _LCD_LEFT FCEC  
           __end_ofi2_I2C_Master_Start 628C             __end_ofi2_I2C_Master_Write 6264  
                          ??i2_lcdInst 0003                         ___wmul@product 00CF  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                          ??i2_initLCD 0004                   GLCD_PIC@INST_SWRESET FCC6  
                          ??i2_isdigit 0001                          _operationTime 005E  
                             _INST_NOP FCE7                             spiSend@val 00C5  
                             i2u402_40 5EC8                               i2u411_40 5DC2  
                             i2u414_40 5F78                               i2u408_40 5B0E  
                             i2u370_45 594A                               i2u370_46 594C  
                             i2u443_40 5F10                               i2u523_40 5A9E  
                             i2u515_40 39B4                               i2u611_40 0E22  
                             i2u443_47 5F06                               i2u516_40 39C8  
                             i2u612_40 0E36                               i2u611_48 0E24  
                             i2u613_40 0E4A                               i2u612_48 0E38  
                             i2u470_40 5BDE                               i2u518_40 3A9A  
                             i2u614_40 0E5E                               i2u613_48 0E4C  
                             i2u471_40 5BEE                               i2u614_48 0E60  
                            _operation 0066                               i2u472_40 5BFE  
                             i2u448_40 597E                               i2u473_40 5C0E  
                             i2u369_45 5906                               i2u369_46 5908  
                             i2u474_40 5C20                               i2u740_47 018A  
                             i2u485_40 5B98                               i2u581_40 054A  
                             i2u741_47 0278                               i2u494_40 37C6  
                             i2u574_40 01EE                               i2u494_47 37BC  
                             i2u750_47 0584                               i2u742_47 02CC  
                             i2u567_40 00AC                               i2u751_47 05B4  
                             i2u743_47 0404                               i2u576_40 025E  
                             i2u488_45 5D24                               i2u760_47 0ADE  
                             i2u752_47 05E4                               i2u744_47 0416  
                             i2u577_40 02EA                               i2u569_40 011C  
                             i2u489_45 615E                               i2u489_46 6160  
                             i2u761_47 0B30                               i2u753_47 0614  
                             i2u745_47 0454                               i2u498_40 3826  
                             i2u498_47 381C                               i2u770_47 0F6C  
                             i2u762_47 0B9E                               i2u754_47 0632  
                             i2u746_47 0482                               i2u595_40 0998  
                             i2u771_47 620A                               i2u763_47 0C7E  
                             i2u755_47 0652                               i2u747_47 0498  
                             i2u739_47 0136                               i2u772_47 5E44  
                             i2u764_47 0CE8                               i2u756_47 066C  
                             i2u748_47 0534                               i2u597_40 0A92  
                             i2u773_47 5E78                               i2u765_47 0D06  
                             i2u757_47 081C                               i2u749_47 0554  
                             i2u774_47 621E                               i2u766_47 0E96  
                             i2u758_47 096C                               i2u599_40 0B16  
                             i2u775_47 58EC                               i2u767_47 0ED4  
                             i2u759_47 0A44                               i2u776_47 58F6  
                             i2u768_47 0F16                               i2u777_47 5930  
                             i2u769_47 0F4E                               i2u778_47 593A  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
        i2I2C_Master_Write@byteToWrite 0002                        glcdTransfer@cmd 00C6  
                    ??_Washer_dispense 00EF                          _Bolt_dispense 5724  
                        _Washer_remain 51BA                              _nuts_data 006D  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 00CB  
                             i2___wmul 611C                          lcdNibble@data 00C4  
                             _B_remain 00A5                             printf@flag 00E9  
                        lcdNibble@temp 00C3                          ??_spiTransfer 00C3  
                           printf@prec 00E0                   glcdSetCOLMOD@rawData 00CA  
                    i2___awdiv@divisor 0003                      i2___awdiv@counter 0005  
                         ??_drawSpacer 00E4                           ??_drawWasher 00E4  
                             i2_printf 369C                         ??_I2C_sendData 00C6  
                       _LCD_HORZ_LIMIT FCF1                              copy_data0 569E  
                            copy_data1 56BE                              copy_data2 56DE  
                 interruptHandler@temp 0041                          _glcdSetCOLMOD 5C94  
                             _N_remain 00A3                       __size_ofi2_putch 0014  
                           _EECON1bits 000FA6                               _S_remain 00A1  
                       _NeedToCloseLid 00BA                       ?_Spacer_dispense 00ED  
                             __Hrparam 0000                  I2C_sendData@char_data 00C6  
                             __Lrparam 0000                               _W_remain 009F  
                   __CFG_BOREN$SBORDIS 000000                         ?_Bolt_dispense 00ED  
                   __end_of_drawSpacer 4594                     __end_of_drawWasher 3254  
                    Spacer_remain@time 00ED                       __size_of___awdiv 0086  
                     __size_of___awmod 0070                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 0084                         ?_Washer_remain 00ED  
                  _rotate_1compartment 00FE                       __size_of___lwdiv 0054  
                     __size_of___lwmod 0044                           ??_initialize 00C3  
                          _INST_GAMSET FCDF                            _INST_COLMOD FCD3  
                          _INST_MADCTL FCD6                            _INST_DISPON FCDD  
                          _INST_IDMOFF FCD5                       _interruptHandler 0008  
                          _INST_INVCTR FCCF                            _INST_INVOFF FCE1  
                     __size_of_lcdInst 0018                       __size_of_drawNut 02EC  
                          _INST_PWCTR1 FCCE                            _INST_PWCTR2 FCCD  
                          _INST_PWCTR3 FCCC                            _INST_PWCTR4 FCCB  
                          _INST_PWCTR5 FCCA                            _INST_VMCTR1 FCC9  
                          _INST_SLPOUT FCE4                        _I2C_Master_Init 5C34  
                      _I2C_Master_Read 607A                       __size_of_initLCD 004C  
                          _current_set 00BE                        _I2C_Master_Wait 61EA  
                __size_of_Nut_dispense 00A0                             strcat@from 0003  
                      ??_Spacer_remain 00EF                        _I2C_Master_Stop 626C  
               __end_of_LCD_HORZ_LIMIT FCF2                       __size_of_isdigit 0022  
                      ___lwdiv@divisor 00C5                        ___lwdiv@counter 00C9  
                             __ptext10 54AA                               __ptext11 29F0  
                             __ptext20 53EE                               __ptext12 5276  
                             __ptext21 5724                               __ptext13 554A  
                             __ptext30 5FE2                               __ptext22 3254  
                             __ptext14 4200                               __ptext31 4D50  
                             __ptext23 61A6                               __ptext15 5332  
                             __ptext40 626C                               __ptext32 604C  
                             __ptext24 6166                               __ptext16 55EA  
                             __ptext41 6274                               __ptext33 6238  
                             __ptext25 5F1A                               __ptext17 4594  
                             __ptext50 6212                               __ptext42 61EA  
                             __ptext34 60A4                               __ptext26 5D4C  
                             __ptext18 601E                               __ptext51 58C8  
                             __ptext35 60CC                               __ptext27 61BE  
                             __ptext19 607A                               __ptext60 5ADC  
                             __ptext52 4880                               __ptext44 369C  
                             __ptext36 5C34                               __ptext28 57BA  
                             __ptext61 594E                               __ptext53 5A58  
                             __ptext45 61FE                               __ptext37 59D4  
                             __ptext29 4F04                               __ptext62 5ED4  
                             __ptext54 625A                               __ptext46 6188  
                             __ptext38 60F4                               __ptext63 5FA0  
                             __ptext55 627C                               __ptext47 5F5E  
                             __ptext39 6250                               __ptext64 0FEA  
                             __ptext56 6284                               __ptext48 5DA0  
                             __ptext65 611C                               __ptext57 6142  
                             __ptext49 5E3E                               __ptext66 5E8A  
                             __ptext58 6226                               __ptext67 5BCE  
                             __ptext59 5CF0                               __ptext68 5B5E  
                     __size_of_spiInit 003C                       __size_of_spiSend 000E  
                __end_of_INST_VMOFCTR2 FCC9                               _fastener 0200  
                             _drawBolt 4F04                             _MADCTLbits 00B9  
                       _LCD_VERT_LIMIT FCF0                            _min_initial 016C  
                  __end_of_spiTransfer 60CC                         ?_glcdSetCOLMOD 0001  
                             _initGLCD 3AB6                       __size_of_strncmp 0086  
                             _hr_final 0166                             strcpy@from 0009  
                       i2_isdigit$2258 0002                    GLCD_PIC@INST_GAMSET FCBF  
                  GLCD_PIC@INST_COLMOD FCB3                    GLCD_PIC@INST_MADCTL FCB6  
                  GLCD_PIC@INST_DISPON FCBD                    GLCD_PIC@INST_IDMOFF FCB5  
                        __size_of_main 0BB0                               _is_valid 0FEA  
                  GLCD_PIC@INST_INVCTR FCAF                    GLCD_PIC@INST_INVOFF FCC1  
                           strncmp@len 000B                     __end_of_initialize 51BA  
                             _input_ch 006C                    GLCD_PIC@INST_PWCTR1 FCAE  
                  GLCD_PIC@INST_PWCTR2 FCAD                    GLCD_PIC@INST_PWCTR3 FCAC  
                  GLCD_PIC@INST_PWCTR4 FCAB                    GLCD_PIC@INST_PWCTR5 FCAA  
                  GLCD_PIC@INST_VMCTR1 FCA9                    GLCD_PIC@INST_SLPOUT FCC4  
                          _sec_initial 016A                               _temp_set 01E4  
                        ??i2_lcdNibble 0001                            ??_lcdNibble 00C3  
                             _prev_set 0194                               int$flags 007F  
                         _Nut_dispense 55EA                              printf@idx 00DF  
                            printf@len 00E5                              printf@val 00E7  
          I2C_Master_Write@byteToWrite 00C4                              putch@data 00C5  
             __end_of_I2C_Master_Start 627C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 625A                             _INTCONbits 000FF2  
                         _motorStart_0 007E                           _motorStart_1 007C  
                         _motorStart_2 007A                           _motorStart_3 0078  
               __end_of_LCD_VERT_LIMIT FCF1                      _B_total_dispensed 0176  
                             isdigit@c 00C5                      _N_total_dispensed 0174  
                           _INST_CASET FCDC                             _INST_IDMON FCD4  
                           _INST_INVON FCE0                             _INST_RASET FCDB  
                             intlevel2 0000                             _INST_RAMWR FCDA  
                           _INST_TEOFF FCD8            ?_generate_compartment_array 00C3  
                           _INST_NORON FCE2                             _INST_PTLAR FCD9  
                           _INST_SLPIN FCE5                             _INST_PTLON FCE3  
                        _LCD_SIZE_HORZ FCEF                           _timerCounter 006A  
                     ___lwmod@dividend 00CA                          _LCD_SIZE_VERT FCEE  
                     ___lldiv@dividend 00C3                     GLCD_PIC@INST_CASET FCBC  
                   GLCD_PIC@INST_IDMON FCB4                              strncmp@s1 0007  
                            strncmp@s2 0009                     GLCD_PIC@INST_INVON FCC0  
                   GLCD_PIC@INST_RASET FCBB                     GLCD_PIC@INST_RAMWR FCBA  
                   GLCD_PIC@INST_TEOFF FCB8                     GLCD_PIC@INST_NORON FCC2  
                   GLCD_PIC@INST_PTLAR FCB9                             _OSCCONbits 000FD3  
                   GLCD_PIC@INST_SLPIN FCC5                     GLCD_PIC@INST_PTLON FCC3  
                      ??_Bolt_dispense 00EF                        ??_Washer_remain 00EF  
                             printf@ap 00E3                               printf@cp 00E1  
           glcdDrawRectangle@colorData 00E0                   __end_of_I2C_sendData 611C  
              __end_of_I2C_Master_Init 5C94                __end_of_I2C_Master_Read 60A4  
              __end_of_I2C_Master_Wait 61FE                __end_of_I2C_Master_Stop 6274  
                          lcdInst@data 00C5                          ?_glcdTransfer 00C6  
                          _motorStop_0 007D                            _motorStop_1 007B  
                          _motorStop_2 0079                            _motorStop_3 0077  
                          _spacingTime 00FA                    __end_ofi2_lcdNibble 594E  
                             strcat@cp 0005                               strcat@to 0001  
                             strcmp@s1 0001                               strcmp@s2 0003  
                     ___lldiv@quotient 00CB                        ___lwmod@divisor 00CC  
                             strcpy@cp 000B                               strcpy@to 0007  
                          _spiTransfer 60A4                        ___lwmod@counter 00CE  
                    GLCD_PIC@INST_TEON FCB7                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                        ??_glcdSetCOLMOD 00C9  
                          _prev_number 0140          i2I2C_Master_Read@receivedByte 0003  
                     GLCD_PIC@INST_NOP FCC7                        _Washer_dispense 54AA  
                        ??_Bolt_remain 00EF                          ?_drawTeamName 0001  
