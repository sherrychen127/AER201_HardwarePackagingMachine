

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  9 23:22:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.45
    79                           ; Generated 16/11/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4620 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  004626                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _motorStop_3
   118  004626  0C                 	db	12
   119                           
   120                           ;initializer for _motorStart_3
   121  004627  0B                 	db	11
   122                           
   123                           ;initializer for _motorStop_2
   124  004628  0A                 	db	10
   125                           
   126                           ;initializer for _motorStart_2
   127  004629  39                 	db	57
   128                           
   129                           ;initializer for _motorStop_1
   130  00462A  38                 	db	56
   131                           
   132                           ;initializer for _motorStart_1
   133  00462B  37                 	db	55
   134                           
   135                           ;initializer for _motorStop_0
   136  00462C  36                 	db	54
   137                           
   138                           ;initializer for _motorStart_0
   139  00462D  35                 	db	53
   140                           
   141                           	psect	idataBANK0
   142  00464E                     __pidataBANK0:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _close_handle
   146  00464E  0E                 	db	14
   147                           
   148                           ;initializer for _servo_ramp
   149  00464F  0D                 	db	13
   150                           
   151                           ;initializer for _rotate_1compartment
   152  004650  31                 	db	49
   153                           
   154                           ;initializer for _rotate_gear
   155  004651  30                 	db	48
   156                           
   157                           	psect	idataBANK1
   158  004606                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for _W_max
   162  004606  0004               	dw	4
   163                           
   164                           ;initializer for _S_max
   165  004608  0004               	dw	4
   166                           
   167                           ;initializer for _N_max
   168  00460A  0004               	dw	4
   169                           
   170                           ;initializer for _B_max
   171  00460C  0004               	dw	4
   172                           
   173                           ;initializer for _spacingTime
   174  00460E  0BB8               	dw	3000
   175                           
   176                           ;initializer for _init_position
   177  004610  0005               	dw	5
   178                           
   179                           	psect	mediumconst
   180  00FCCC                     __pmediumconst:
   181                           	opt stack 0
   182  00FCCC  00                 	db	0
   183  00FCCD                     _keys:
   184                           	opt stack 0
   185  00FCCD  31                 	db	49
   186  00FCCE  32                 	db	50
   187  00FCCF  33                 	db	51
   188  00FCD0  41                 	db	65
   189  00FCD1  34                 	db	52
   190  00FCD2  35                 	db	53
   191  00FCD3  36                 	db	54
   192  00FCD4  42                 	db	66
   193  00FCD5  37                 	db	55
   194  00FCD6  38                 	db	56
   195  00FCD7  39                 	db	57
   196  00FCD8  43                 	db	67
   197  00FCD9  2A                 	db	42
   198  00FCDA  30                 	db	48
   199  00FCDB  23                 	db	35
   200  00FCDC  44                 	db	68
   201  00FCDD  00                 	db	0
   202  00FCDE                     __end_of_keys:
   203                           	opt stack 0
   204  00FCDE                     _dpowers:
   205                           	opt stack 0
   206  00FCDE  0001               	dw	1
   207  00FCE0  000A               	dw	10
   208  00FCE2  0064               	dw	100
   209  00FCE4  03E8               	dw	1000
   210  00FCE6  2710               	dw	10000
   211  00FCE8                     __end_of_dpowers:
   212                           	opt stack 0
   213  00FCE8                     _hexpowers:
   214                           	opt stack 0
   215  00FCE8  0001               	dw	1
   216  00FCEA  0010               	dw	16
   217  00FCEC  0100               	dw	256
   218  00FCEE  1000               	dw	4096
   219  00FCF0                     __end_of_hexpowers:
   220                           	opt stack 0
   221  00FCF0                     _happynewyear:
   222                           	opt stack 0
   223  00FCF0  45                 	db	69
   224  00FCF1  14                 	db	20
   225  00FCF2  14                 	db	20
   226  00FCF3  00                 	db	0
   227  00FCF4  11                 	db	17
   228  00FCF5  03                 	db	3
   229  00FCF6  18                 	db	24
   230  00FCF7                     __end_of_happynewyear:
   231                           	opt stack 0
   232  00FCF7                     _array:
   233                           	opt stack 0
   234  00FCF7  30                 	db	48
   235  00FCF8  31                 	db	49
   236  00FCF9  00                 	db	0
   237  00FCFA                     __end_of_array:
   238                           	opt stack 0
   239  00FCFA                     _LCD_LEFT:
   240                           	opt stack 0
   241  00FCFA  00                 	db	0
   242  00FCFB                     __end_of_LCD_LEFT:
   243                           	opt stack 0
   244  00FCFB                     _LCD_RIGHT:
   245                           	opt stack 0
   246  00FCFB  01                 	db	1
   247  00FCFC                     __end_of_LCD_RIGHT:
   248                           	opt stack 0
   249  00FCFC                     _LCD_SIZE_VERT:
   250                           	opt stack 0
   251  00FCFC  02                 	db	2
   252  00FCFD                     __end_of_LCD_SIZE_VERT:
   253                           	opt stack 0
   254  00FCFD                     _LCD_SIZE_HORZ:
   255                           	opt stack 0
   256  00FCFD  10                 	db	16
   257  00FCFE                     __end_of_LCD_SIZE_HORZ:
   258                           	opt stack 0
   259  00FCFE                     _LCD_VERT_LIMIT:
   260                           	opt stack 0
   261  00FCFE  02                 	db	2
   262  00FCFF                     __end_of_LCD_VERT_LIMIT:
   263                           	opt stack 0
   264  00FCFF                     _LCD_HORZ_LIMIT:
   265                           	opt stack 0
   266  00FCFF  28                 	db	40
   267  00FD00                     __end_of_LCD_HORZ_LIMIT:
   268                           	opt stack 0
   269  00FD00                     _strs:
   270                           	opt stack 0
   271  00FD00  42                 	db	66
   272  00FD01  00                 	db	0
   273  00FD02  00                 	db	0
   274  00FD03  00                 	db	0
   275  00FD04  00                 	db	0
   276  00FD05  4E                 	db	78
   277  00FD06  00                 	db	0
   278  00FD07  00                 	db	0
   279  00FD08  00                 	db	0
   280  00FD09  00                 	db	0
   281  00FD0A  53                 	db	83
   282  00FD0B  00                 	db	0
   283  00FD0C  00                 	db	0
   284  00FD0D  00                 	db	0
   285  00FD0E  00                 	db	0
   286  00FD0F  57                 	db	87
   287  00FD10  00                 	db	0
   288  00FD11  00                 	db	0
   289  00FD12  00                 	db	0
   290  00FD13  00                 	db	0
   291  00FD14  42                 	db	66
   292  00FD15  4E                 	db	78
   293  00FD16  00                 	db	0
   294  00FD17  00                 	db	0
   295  00FD18  00                 	db	0
   296  00FD19  42                 	db	66
   297  00FD1A  53                 	db	83
   298  00FD1B  00                 	db	0
   299  00FD1C  00                 	db	0
   300  00FD1D  00                 	db	0
   301  00FD1E  42                 	db	66
   302  00FD1F  57                 	db	87
   303  00FD20  00                 	db	0
   304  00FD21  00                 	db	0
   305  00FD22  00                 	db	0
   306  00FD23  42                 	db	66
   307  00FD24  42                 	db	66
   308  00FD25  4E                 	db	78
   309  00FD26  00                 	db	0
   310  00FD27  00                 	db	0
   311  00FD28  42                 	db	66
   312  00FD29  42                 	db	66
   313  00FD2A  53                 	db	83
   314  00FD2B  00                 	db	0
   315  00FD2C  00                 	db	0
   316  00FD2D  42                 	db	66
   317  00FD2E  42                 	db	66
   318  00FD2F  57                 	db	87
   319  00FD30  00                 	db	0
   320  00FD31  00                 	db	0
   321  00FD32  42                 	db	66
   322  00FD33  4E                 	db	78
   323  00FD34  57                 	db	87
   324  00FD35  00                 	db	0
   325  00FD36  00                 	db	0
   326  00FD37  42                 	db	66
   327  00FD38  53                 	db	83
   328  00FD39  57                 	db	87
   329  00FD3A  00                 	db	0
   330  00FD3B  00                 	db	0
   331  00FD3C  42                 	db	66
   332  00FD3D  57                 	db	87
   333  00FD3E  57                 	db	87
   334  00FD3F  00                 	db	0
   335  00FD40  00                 	db	0
   336  00FD41  42                 	db	66
   337  00FD42  4E                 	db	78
   338  00FD43  57                 	db	87
   339  00FD44  57                 	db	87
   340  00FD45  00                 	db	0
   341  00FD46  42                 	db	66
   342  00FD47  53                 	db	83
   343  00FD48  57                 	db	87
   344  00FD49  57                 	db	87
   345  00FD4A  00                 	db	0
   346  00FD4B  42                 	db	66
   347  00FD4C  42                 	db	66
   348  00FD4D  53                 	db	83
   349  00FD4E  57                 	db	87
   350  00FD4F  00                 	db	0
   351  00FD50  42                 	db	66
   352  00FD51  42                 	db	66
   353  00FD52  4E                 	db	78
   354  00FD53  57                 	db	87
   355  00FD54  00                 	db	0
   356  00FD55  42                 	db	66
   357  00FD56  4E                 	db	78
   358  00FD57  4E                 	db	78
   359  00FD58  57                 	db	87
   360  00FD59  00                 	db	0
   361  00FD5A  42                 	db	66
   362  00FD5B  4E                 	db	78
   363  00FD5C  4E                 	db	78
   364  00FD5D  4E                 	db	78
   365  00FD5E  00                 	db	0
   366  00FD5F  42                 	db	66
   367  00FD60  57                 	db	87
   368  00FD61  57                 	db	87
   369  00FD62  57                 	db	87
   370  00FD63  00                 	db	0
   371  00FD64                     __end_of_strs:
   372                           	opt stack 0
   373  0000                     _EECON2	set	4007
   374  0000                     _EEDATA	set	4008
   375  0000                     _EEADR	set	4009
   376  0000                     _EECON1bits	set	4006
   377  0000                     _SSPBUF	set	4041
   378  0000                     _SSPCON2bits	set	4037
   379  0000                     _SSPADD	set	4040
   380  0000                     _SSPCON2	set	4037
   381  0000                     _SSPCON1	set	4038
   382  0000                     _SSPSTAT	set	4039
   383  0000                     _SSPCON1bits	set	4038
   384  0000                     _PORTAbits	set	3968
   385  0000                     _TRISAbits	set	3986
   386  0000                     _TRISDbits	set	3989
   387  0000                     _T0CONbits	set	4053
   388  0000                     _ADRESL	set	4035
   389  0000                     _ADRESH	set	4036
   390  0000                     _ADCON0bits	set	4034
   391  0000                     _PORTBbits	set	3969
   392  0000                     _PORTB	set	3969
   393  0000                     _TRISBbits	set	3987
   394  0000                     _TRISCbits	set	3988
   395  0000                     _LATCbits	set	3979
   396  0000                     _ADCON1	set	4033
   397  0000                     _ADCON0	set	4034
   398  0000                     _TRISE	set	3990
   399  0000                     _TRISD	set	3989
   400  0000                     _TRISC	set	3988
   401  0000                     _TRISB	set	3987
   402  0000                     _TRISA	set	3986
   403  0000                     _LATE	set	3981
   404  0000                     _LATC	set	3979
   405  0000                     _LATB	set	3978
   406  0000                     _LATA	set	3977
   407  0000                     _OSCTUNEbits	set	3995
   408  0000                     _OSCCONbits	set	4051
   409  0000                     _INTCONbits	set	4082
   410  0000                     _LATD	set	3980
   411  0000                     _LATDbits	set	3980
   412  0000                     _ADON	set	32272
   413  0000                     _TMR0IF	set	32658
   414  0000                     _TMR0IE	set	32661
   415  0000                     _RBIF	set	32656
   416  0000                     _INT1IF	set	32640
   417  0000                     _RBIE	set	32659
   418  0000                     _INT1IE	set	32643
   419  00FD64                     STR_18:
   420  00FD64  42                 	db	66	;'B'
   421  00FD65  3A                 	db	58	;':'
   422  00FD66  25                 	db	37
   423  00FD67  64                 	db	100	;'d'
   424  00FD68  2C                 	db	44
   425  00FD69  4E                 	db	78	;'N'
   426  00FD6A  3A                 	db	58	;':'
   427  00FD6B  25                 	db	37
   428  00FD6C  64                 	db	100	;'d'
   429  00FD6D  2C                 	db	44
   430  00FD6E  53                 	db	83	;'S'
   431  00FD6F  3A                 	db	58	;':'
   432  00FD70  25                 	db	37
   433  00FD71  64                 	db	100	;'d'
   434  00FD72  2C                 	db	44
   435  00FD73  57                 	db	87	;'W'
   436  00FD74  3A                 	db	58	;':'
   437  00FD75  25                 	db	37
   438  00FD76  64                 	db	100	;'d'
   439  00FD77  00                 	db	0
   440  00FD78                     STR_39:
   441  00FD78  43                 	db	67	;'C'
   442  00FD79  25                 	db	37
   443  00FD7A  64                 	db	100	;'d'
   444  00FD7B  3A                 	db	58	;':'
   445  00FD7C  42                 	db	66	;'B'
   446  00FD7D  25                 	db	37
   447  00FD7E  64                 	db	100	;'d'
   448  00FD7F  2C                 	db	44
   449  00FD80  4E                 	db	78	;'N'
   450  00FD81  25                 	db	37
   451  00FD82  64                 	db	100	;'d'
   452  00FD83  2C                 	db	44
   453  00FD84  53                 	db	83	;'S'
   454  00FD85  25                 	db	37
   455  00FD86  64                 	db	100	;'d'
   456  00FD87  2C                 	db	44
   457  00FD88  57                 	db	87	;'W'
   458  00FD89  25                 	db	37
   459  00FD8A  64                 	db	100	;'d'
   460  00FD8B  00                 	db	0
   461  00FD8C                     STR_2:
   462  00FD8C  32                 	db	50	;'2'
   463  00FD8D  3A                 	db	58	;':'
   464  00FD8E  45                 	db	69	;'E'
   465  00FD8F  6E                 	db	110	;'n'
   466  00FD90  74                 	db	116	;'t'
   467  00FD91  65                 	db	101	;'e'
   468  00FD92  72                 	db	114	;'r'
   469  00FD93  20                 	db	32
   470  00FD94  49                 	db	73	;'I'
   471  00FD95  6E                 	db	110	;'n'
   472  00FD96  73                 	db	115	;'s'
   473  00FD97  74                 	db	116	;'t'
   474  00FD98  72                 	db	114	;'r'
   475  00FD99  75                 	db	117	;'u'
   476  00FD9A  63                 	db	99	;'c'
   477  00FD9B  74                 	db	116	;'t'
   478  00FD9C  69                 	db	105	;'i'
   479  00FD9D  6F                 	db	111	;'o'
   480  00FD9E  6E                 	db	110	;'n'
   481  00FD9F  00                 	db	0
   482  00FDA0                     STR_63:
   483  00FDA0  73                 	db	115	;'s'
   484  00FDA1  70                 	db	112	;'p'
   485  00FDA2  61                 	db	97	;'a'
   486  00FDA3  63                 	db	99	;'c'
   487  00FDA4  65                 	db	101	;'e'
   488  00FDA5  72                 	db	114	;'r'
   489  00FDA6  5F                 	db	95	;'_'
   490  00FDA7  69                 	db	105	;'i'
   491  00FDA8  6E                 	db	110	;'n'
   492  00FDA9  74                 	db	116	;'t'
   493  00FDAA  65                 	db	101	;'e'
   494  00FDAB  72                 	db	114	;'r'
   495  00FDAC  72                 	db	114	;'r'
   496  00FDAD  75                 	db	117	;'u'
   497  00FDAE  70                 	db	112	;'p'
   498  00FDAF  74                 	db	116	;'t'
   499  00FDB0  65                 	db	101	;'e'
   500  00FDB1  64                 	db	100	;'d'
   501  00FDB2  00                 	db	0
   502  00FDB3                     STR_64:
   503  00FDB3  77                 	db	119	;'w'
   504  00FDB4  61                 	db	97	;'a'
   505  00FDB5  73                 	db	115	;'s'
   506  00FDB6  68                 	db	104	;'h'
   507  00FDB7  65                 	db	101	;'e'
   508  00FDB8  72                 	db	114	;'r'
   509  00FDB9  5F                 	db	95	;'_'
   510  00FDBA  69                 	db	105	;'i'
   511  00FDBB  6E                 	db	110	;'n'
   512  00FDBC  74                 	db	116	;'t'
   513  00FDBD  65                 	db	101	;'e'
   514  00FDBE  72                 	db	114	;'r'
   515  00FDBF  72                 	db	114	;'r'
   516  00FDC0  75                 	db	117	;'u'
   517  00FDC1  70                 	db	112	;'p'
   518  00FDC2  74                 	db	116	;'t'
   519  00FDC3  65                 	db	101	;'e'
   520  00FDC4  64                 	db	100	;'d'
   521  00FDC5  00                 	db	0
   522  00FDC6                     STR_29:
   523  00FDC6  20                 	db	32
   524  00FDC7  32                 	db	50	;'2'
   525  00FDC8  3A                 	db	58	;':'
   526  00FDC9  20                 	db	32
   527  00FDCA  4F                 	db	79	;'O'
   528  00FDCB  70                 	db	112	;'p'
   529  00FDCC  65                 	db	101	;'e'
   530  00FDCD  72                 	db	114	;'r'
   531  00FDCE  61                 	db	97	;'a'
   532  00FDCF  74                 	db	116	;'t'
   533  00FDD0  69                 	db	105	;'i'
   534  00FDD1  6F                 	db	111	;'o'
   535  00FDD2  6E                 	db	110	;'n'
   536  00FDD3  20                 	db	32
   537  00FDD4  54                 	db	84	;'T'
   538  00FDD5  69                 	db	105	;'i'
   539  00FDD6  6D                 	db	109	;'m'
   540  00FDD7  65                 	db	101	;'e'
   541  00FDD8  00                 	db	0
   542  00FDD9                     STR_73:
   543  00FDD9  50                 	db	80	;'P'
   544  00FDDA  72                 	db	114	;'r'
   545  00FDDB  6F                 	db	111	;'o'
   546  00FDDC  67                 	db	103	;'g'
   547  00FDDD  72                 	db	114	;'r'
   548  00FDDE  61                 	db	97	;'a'
   549  00FDDF  6D                 	db	109	;'m'
   550  00FDE0  20                 	db	32
   551  00FDE1  54                 	db	84	;'T'
   552  00FDE2  65                 	db	101	;'e'
   553  00FDE3  72                 	db	114	;'r'
   554  00FDE4  6D                 	db	109	;'m'
   555  00FDE5  69                 	db	105	;'i'
   556  00FDE6  6E                 	db	110	;'n'
   557  00FDE7  61                 	db	97	;'a'
   558  00FDE8  74                 	db	116	;'t'
   559  00FDE9  65                 	db	101	;'e'
   560  00FDEA  73                 	db	115	;'s'
   561  00FDEB  00                 	db	0
   562  00FDEC                     STR_7:
   563  00FDEC  50                 	db	80	;'P'
   564  00FDED  72                 	db	114	;'r'
   565  00FDEE  65                 	db	101	;'e'
   566  00FDEF  73                 	db	115	;'s'
   567  00FDF0  73                 	db	115	;'s'
   568  00FDF1  20                 	db	32
   569  00FDF2  23                 	db	35
   570  00FDF3  20                 	db	32
   571  00FDF4  74                 	db	116	;'t'
   572  00FDF5  6F                 	db	111	;'o'
   573  00FDF6  20                 	db	32
   574  00FDF7  73                 	db	115	;'s'
   575  00FDF8  74                 	db	116	;'t'
   576  00FDF9  61                 	db	97	;'a'
   577  00FDFA  72                 	db	114	;'r'
   578  00FDFB  74                 	db	116	;'t'
   579  00FDFC  21                 	db	33
   580  00FDFD  00                 	db	0
   581  00FDFE                     STR_99:
   582  00FDFE  30                 	db	48	;'0'
   583  00FDFF  31                 	db	49	;'1'
   584  00FE00  32                 	db	50	;'2'
   585  00FE01  33                 	db	51	;'3'
   586  00FE02  34                 	db	52	;'4'
   587  00FE03  35                 	db	53	;'5'
   588  00FE04  36                 	db	54	;'6'
   589  00FE05  37                 	db	55	;'7'
   590  00FE06  38                 	db	56	;'8'
   591  00FE07  39                 	db	57	;'9'
   592  00FE08  61                 	db	97	;'a'
   593  00FE09  62                 	db	98	;'b'
   594  00FE0A  63                 	db	99	;'c'
   595  00FE0B  64                 	db	100	;'d'
   596  00FE0C  65                 	db	101	;'e'
   597  00FE0D  66                 	db	102	;'f'
   598  00FE0E  00                 	db	0
   599  00FE0F                     STR_26:
   600  00FE0F  53                 	db	83	;'S'
   601  00FE10  70                 	db	112	;'p'
   602  00FE11  61                 	db	97	;'a'
   603  00FE12  63                 	db	99	;'c'
   604  00FE13  65                 	db	101	;'e'
   605  00FE14  72                 	db	114	;'r'
   606  00FE15  5F                 	db	95	;'_'
   607  00FE16  72                 	db	114	;'r'
   608  00FE17  65                 	db	101	;'e'
   609  00FE18  6D                 	db	109	;'m'
   610  00FE19  61                 	db	97	;'a'
   611  00FE1A  69                 	db	105	;'i'
   612  00FE1B  6E                 	db	110	;'n'
   613  00FE1C  3A                 	db	58	;':'
   614  00FE1D  25                 	db	37
   615  00FE1E  64                 	db	100	;'d'
   616  00FE1F  00                 	db	0
   617  00FE20                     STR_27:
   618  00FE20  57                 	db	87	;'W'
   619  00FE21  61                 	db	97	;'a'
   620  00FE22  73                 	db	115	;'s'
   621  00FE23  68                 	db	104	;'h'
   622  00FE24  65                 	db	101	;'e'
   623  00FE25  72                 	db	114	;'r'
   624  00FE26  5F                 	db	95	;'_'
   625  00FE27  72                 	db	114	;'r'
   626  00FE28  65                 	db	101	;'e'
   627  00FE29  6D                 	db	109	;'m'
   628  00FE2A  61                 	db	97	;'a'
   629  00FE2B  69                 	db	105	;'i'
   630  00FE2C  6E                 	db	110	;'n'
   631  00FE2D  3A                 	db	58	;':'
   632  00FE2E  25                 	db	37
   633  00FE2F  64                 	db	100	;'d'
   634  00FE30  00                 	db	0
   635  00FE31                     STR_8:
   636  00FE31  61                 	db	97	;'a'
   637  00FE32  73                 	db	115	;'s'
   638  00FE33  73                 	db	115	;'s'
   639  00FE34  65                 	db	101	;'e'
   640  00FE35  6D                 	db	109	;'m'
   641  00FE36  62                 	db	98	;'b'
   642  00FE37  6C                 	db	108	;'l'
   643  00FE38  79                 	db	121	;'y'
   644  00FE39  20                 	db	32
   645  00FE3A  73                 	db	115	;'s'
   646  00FE3B  74                 	db	116	;'t'
   647  00FE3C  65                 	db	101	;'e'
   648  00FE3D  70                 	db	112	;'p'
   649  00FE3E  3A                 	db	58	;':'
   650  00FE3F  25                 	db	37
   651  00FE40  64                 	db	100	;'d'
   652  00FE41  00                 	db	0
   653  00FE42                     STR_28:
   654  00FE42  31                 	db	49	;'1'
   655  00FE43  3A                 	db	58	;':'
   656  00FE44  20                 	db	32
   657  00FE45  44                 	db	68	;'D'
   658  00FE46  61                 	db	97	;'a'
   659  00FE47  74                 	db	116	;'t'
   660  00FE48  65                 	db	101	;'e'
   661  00FE49  20                 	db	32
   662  00FE4A  61                 	db	97	;'a'
   663  00FE4B  6E                 	db	110	;'n'
   664  00FE4C  64                 	db	100	;'d'
   665  00FE4D  20                 	db	32
   666  00FE4E  54                 	db	84	;'T'
   667  00FE4F  69                 	db	105	;'i'
   668  00FE50  6D                 	db	109	;'m'
   669  00FE51  65                 	db	101	;'e'
   670  00FE52  00                 	db	0
   671  00FE53                     STR_58:
   672  00FE53  0A                 	db	10
   673  00FE54  20                 	db	32
   674  00FE55  50                 	db	80	;'P'
   675  00FE56  72                 	db	114	;'r'
   676  00FE57  6F                 	db	111	;'o'
   677  00FE58  63                 	db	99	;'c'
   678  00FE59  65                 	db	101	;'e'
   679  00FE5A  73                 	db	115	;'s'
   680  00FE5B  73                 	db	115	;'s'
   681  00FE5C  69                 	db	105	;'i'
   682  00FE5D  6E                 	db	110	;'n'
   683  00FE5E  67                 	db	103	;'g'
   684  00FE5F  2E                 	db	46
   685  00FE60  2E                 	db	46
   686  00FE61  2E                 	db	46
   687  00FE62  00                 	db	0
   688  00FE63                     STR_36:
   689  00FE63  6F                 	db	111	;'o'
   690  00FE64  70                 	db	112	;'p'
   691  00FE65  65                 	db	101	;'e'
   692  00FE66  72                 	db	114	;'r'
   693  00FE67  61                 	db	97	;'a'
   694  00FE68  74                 	db	116	;'t'
   695  00FE69  69                 	db	105	;'i'
   696  00FE6A  6F                 	db	111	;'o'
   697  00FE6B  6E                 	db	110	;'n'
   698  00FE6C  20                 	db	32
   699  00FE6D  74                 	db	116	;'t'
   700  00FE6E  69                 	db	105	;'i'
   701  00FE6F  6D                 	db	109	;'m'
   702  00FE70  65                 	db	101	;'e'
   703  00FE71  3A                 	db	58	;':'
   704  00FE72  00                 	db	0
   705  00FE73                     STR_1:
   706  00FE73  31                 	db	49	;'1'
   707  00FE74  3A                 	db	58	;':'
   708  00FE75  64                 	db	100	;'d'
   709  00FE76  61                 	db	97	;'a'
   710  00FE77  74                 	db	116	;'t'
   711  00FE78  65                 	db	101	;'e'
   712  00FE79  20                 	db	32
   713  00FE7A  61                 	db	97	;'a'
   714  00FE7B  6E                 	db	110	;'n'
   715  00FE7C  64                 	db	100	;'d'
   716  00FE7D  20                 	db	32
   717  00FE7E  74                 	db	116	;'t'
   718  00FE7F  69                 	db	105	;'i'
   719  00FE80  6D                 	db	109	;'m'
   720  00FE81  65                 	db	101	;'e'
   721  00FE82  00                 	db	0
   722  00FE83                     STR_16:
   723  00FE83  73                 	db	115	;'s'
   724  00FE84  74                 	db	116	;'t'
   725  00FE85  61                 	db	97	;'a'
   726  00FE86  72                 	db	114	;'r'
   727  00FE87  74                 	db	116	;'t'
   728  00FE88  20                 	db	32
   729  00FE89  6F                 	db	111	;'o'
   730  00FE8A  70                 	db	112	;'p'
   731  00FE8B  65                 	db	101	;'e'
   732  00FE8C  72                 	db	114	;'r'
   733  00FE8D  61                 	db	97	;'a'
   734  00FE8E  74                 	db	116	;'t'
   735  00FE8F  69                 	db	105	;'i'
   736  00FE90  6F                 	db	111	;'o'
   737  00FE91  6E                 	db	110	;'n'
   738  00FE92  00                 	db	0
   739  00FE93                     STR_45:
   740  00FE93  57                 	db	87	;'W'
   741  00FE94  72                 	db	114	;'r'
   742  00FE95  6F                 	db	111	;'o'
   743  00FE96  6E                 	db	110	;'n'
   744  00FE97  67                 	db	103	;'g'
   745  00FE98  20                 	db	32
   746  00FE99  6E                 	db	110	;'n'
   747  00FE9A  75                 	db	117	;'u'
   748  00FE9B  6D                 	db	109	;'m'
   749  00FE9C  62                 	db	98	;'b'
   750  00FE9D  65                 	db	101	;'e'
   751  00FE9E  72                 	db	114	;'r'
   752  00FE9F  21                 	db	33
   753  00FEA0  20                 	db	32
   754  00FEA1  00                 	db	0
   755  00FEA2                     STR_3:
   756  00FEA2  61                 	db	97	;'a'
   757  00FEA3  73                 	db	115	;'s'
   758  00FEA4  73                 	db	115	;'s'
   759  00FEA5  65                 	db	101	;'e'
   760  00FEA6  6D                 	db	109	;'m'
   761  00FEA7  62                 	db	98	;'b'
   762  00FEA8  6C                 	db	108	;'l'
   763  00FEA9  79                 	db	121	;'y'
   764  00FEAA  20                 	db	32
   765  00FEAB  73                 	db	115	;'s'
   766  00FEAC  74                 	db	116	;'t'
   767  00FEAD  65                 	db	101	;'e'
   768  00FEAE  70                 	db	112	;'p'
   769  00FEAF  3A                 	db	58	;':'
   770  00FEB0  00                 	db	0
   771  00FEB1                     STR_24:
   772  00FEB1  42                 	db	66	;'B'
   773  00FEB2  6F                 	db	111	;'o'
   774  00FEB3  6C                 	db	108	;'l'
   775  00FEB4  74                 	db	116	;'t'
   776  00FEB5  5F                 	db	95	;'_'
   777  00FEB6  72                 	db	114	;'r'
   778  00FEB7  65                 	db	101	;'e'
   779  00FEB8  6D                 	db	109	;'m'
   780  00FEB9  61                 	db	97	;'a'
   781  00FEBA  69                 	db	105	;'i'
   782  00FEBB  6E                 	db	110	;'n'
   783  00FEBC  3A                 	db	58	;':'
   784  00FEBD  25                 	db	37
   785  00FEBE  64                 	db	100	;'d'
   786  00FEBF  00                 	db	0
   787  00FEC0                     STR_20:
   788  00FEC0  70                 	db	112	;'p'
   789  00FEC1  72                 	db	114	;'r'
   790  00FEC2  6F                 	db	111	;'o'
   791  00FEC3  63                 	db	99	;'c'
   792  00FEC4  65                 	db	101	;'e'
   793  00FEC5  73                 	db	115	;'s'
   794  00FEC6  73                 	db	115	;'s'
   795  00FEC7  69                 	db	105	;'i'
   796  00FEC8  6E                 	db	110	;'n'
   797  00FEC9  67                 	db	103	;'g'
   798  00FECA  20                 	db	32
   799  00FECB  43                 	db	67	;'C'
   800  00FECC  25                 	db	37
   801  00FECD  64                 	db	100	;'d'
   802  00FECE  00                 	db	0
   803  00FECF                     STR_61:
   804  00FECF  62                 	db	98	;'b'
   805  00FED0  6F                 	db	111	;'o'
   806  00FED1  6C                 	db	108	;'l'
   807  00FED2  74                 	db	116	;'t'
   808  00FED3  5F                 	db	95	;'_'
   809  00FED4  69                 	db	105	;'i'
   810  00FED5  6E                 	db	110	;'n'
   811  00FED6  74                 	db	116	;'t'
   812  00FED7  65                 	db	101	;'e'
   813  00FED8  72                 	db	114	;'r'
   814  00FED9  72                 	db	114	;'r'
   815  00FEDA  75                 	db	117	;'u'
   816  00FEDB  70                 	db	112	;'p'
   817  00FEDC  74                 	db	116	;'t'
   818  00FEDD  00                 	db	0
   819  00FEDE                     STR_32:
   820  00FEDE  25                 	db	37
   821  00FEDF  30                 	db	48	;'0'
   822  00FEE0  32                 	db	50	;'2'
   823  00FEE1  78                 	db	120	;'x'
   824  00FEE2  2F                 	db	47
   825  00FEE3  25                 	db	37
   826  00FEE4  30                 	db	48	;'0'
   827  00FEE5  32                 	db	50	;'2'
   828  00FEE6  78                 	db	120	;'x'
   829  00FEE7  2F                 	db	47
   830  00FEE8  25                 	db	37
   831  00FEE9  30                 	db	48	;'0'
   832  00FEEA  32                 	db	50	;'2'
   833  00FEEB  78                 	db	120	;'x'
   834  00FEEC  00                 	db	0
   835  00FEED                     STR_33:
   836  00FEED  25                 	db	37
   837  00FEEE  30                 	db	48	;'0'
   838  00FEEF  32                 	db	50	;'2'
   839  00FEF0  78                 	db	120	;'x'
   840  00FEF1  3A                 	db	58	;':'
   841  00FEF2  25                 	db	37
   842  00FEF3  30                 	db	48	;'0'
   843  00FEF4  32                 	db	50	;'2'
   844  00FEF5  78                 	db	120	;'x'
   845  00FEF6  3A                 	db	58	;':'
   846  00FEF7  25                 	db	37
   847  00FEF8  30                 	db	48	;'0'
   848  00FEF9  32                 	db	50	;'2'
   849  00FEFA  78                 	db	120	;'x'
   850  00FEFB  00                 	db	0
   851  00FEFC                     STR_15:
   852  00FEFC  63                 	db	99	;'c'
   853  00FEFD  68                 	db	104	;'h'
   854  00FEFE  61                 	db	97	;'a'
   855  00FEFF  6E                 	db	110	;'n'
   856  00FF00  67                 	db	103	;'g'
   857  00FF01  65                 	db	101	;'e'
   858  00FF02  20                 	db	32
   859  00FF03  6D                 	db	109	;'m'
   860  00FF04  6F                 	db	111	;'o'
   861  00FF05  64                 	db	100	;'d'
   862  00FF06  65                 	db	101	;'e'
   863  00FF07  20                 	db	32
   864  00FF08  32                 	db	50	;'2'
   865  00FF09  00                 	db	0
   866  00FF0A                     STR_4:
   867  00FF0A  66                 	db	102	;'f'
   868  00FF0B  61                 	db	97	;'a'
   869  00FF0C  73                 	db	115	;'s'
   870  00FF0D  74                 	db	116	;'t'
   871  00FF0E  65                 	db	101	;'e'
   872  00FF0F  6E                 	db	110	;'n'
   873  00FF10  65                 	db	101	;'e'
   874  00FF11  72                 	db	114	;'r'
   875  00FF12  20                 	db	32
   876  00FF13  73                 	db	115	;'s'
   877  00FF14  65                 	db	101	;'e'
   878  00FF15  74                 	db	116	;'t'
   879  00FF16  3A                 	db	58	;':'
   880  00FF17  00                 	db	0
   881  00FF18                     STR_25:
   882  00FF18  4E                 	db	78	;'N'
   883  00FF19  75                 	db	117	;'u'
   884  00FF1A  74                 	db	116	;'t'
   885  00FF1B  5F                 	db	95	;'_'
   886  00FF1C  72                 	db	114	;'r'
   887  00FF1D  65                 	db	101	;'e'
   888  00FF1E  6D                 	db	109	;'m'
   889  00FF1F  61                 	db	97	;'a'
   890  00FF20  69                 	db	105	;'i'
   891  00FF21  6E                 	db	110	;'n'
   892  00FF22  3A                 	db	58	;':'
   893  00FF23  25                 	db	37
   894  00FF24  64                 	db	100	;'d'
   895  00FF25  00                 	db	0
   896  00FF26                     STR_62:
   897  00FF26  6E                 	db	110	;'n'
   898  00FF27  75                 	db	117	;'u'
   899  00FF28  74                 	db	116	;'t'
   900  00FF29  5F                 	db	95	;'_'
   901  00FF2A  69                 	db	105	;'i'
   902  00FF2B  6E                 	db	110	;'n'
   903  00FF2C  74                 	db	116	;'t'
   904  00FF2D  65                 	db	101	;'e'
   905  00FF2E  72                 	db	114	;'r'
   906  00FF2F  72                 	db	114	;'r'
   907  00FF30  75                 	db	117	;'u'
   908  00FF31  70                 	db	112	;'p'
   909  00FF32  74                 	db	116	;'t'
   910  00FF33  00                 	db	0
   911  00FF34                     STR_37:
   912  00FF34  25                 	db	37
   913  00FF35  64                 	db	100	;'d'
   914  00FF36  6D                 	db	109	;'m'
   915  00FF37  69                 	db	105	;'i'
   916  00FF38  6E                 	db	110	;'n'
   917  00FF39  20                 	db	32
   918  00FF3A  25                 	db	37
   919  00FF3B  64                 	db	100	;'d'
   920  00FF3C  73                 	db	115	;'s'
   921  00FF3D  65                 	db	101	;'e'
   922  00FF3E  63                 	db	99	;'c'
   923  00FF3F  73                 	db	115	;'s'
   924  00FF40  00                 	db	0
   925  00FF41                     STR_19:
   926  00FF41  43                 	db	67	;'C'
   927  00FF42  31                 	db	49	;'1'
   928  00FF43  20                 	db	32
   929  00FF44  69                 	db	105	;'i'
   930  00FF45  73                 	db	115	;'s'
   931  00FF46  20                 	db	32
   932  00FF47  66                 	db	102	;'f'
   933  00FF48  6F                 	db	111	;'o'
   934  00FF49  75                 	db	117	;'u'
   935  00FF4A  6E                 	db	110	;'n'
   936  00FF4B  64                 	db	100	;'d'
   937  00FF4C  00                 	db	0
   938  00FF4D                     STR_44:
   939  00FF4D  79                 	db	121	;'y'
   940  00FF4E  6F                 	db	111	;'o'
   941  00FF4F  75                 	db	117	;'u'
   942  00FF50  27                 	db	39
   943  00FF51  72                 	db	114	;'r'
   944  00FF52  65                 	db	101	;'e'
   945  00FF53  20                 	db	32
   946  00FF54  64                 	db	100	;'d'
   947  00FF55  6F                 	db	111	;'o'
   948  00FF56  6E                 	db	110	;'n'
   949  00FF57  65                 	db	101	;'e'
   950  00FF58  00                 	db	0
   951  00FF59                     STR_59:
   952  00FF59  57                 	db	87	;'W'
   953  00FF5A  72                 	db	114	;'r'
   954  00FF5B  6F                 	db	111	;'o'
   955  00FF5C  6E                 	db	110	;'n'
   956  00FF5D  67                 	db	103	;'g'
   957  00FF5E  20                 	db	32
   958  00FF5F  69                 	db	105	;'i'
   959  00FF60  6E                 	db	110	;'n'
   960  00FF61  70                 	db	112	;'p'
   961  00FF62  75                 	db	117	;'u'
   962  00FF63  74                 	db	116	;'t'
   963  00FF64  00                 	db	0
   964  00FF65                     STR_22:
   965  00FF65  54                 	db	84	;'T'
   966  00FF66  65                 	db	101	;'e'
   967  00FF67  72                 	db	114	;'r'
   968  00FF68  6D                 	db	109	;'m'
   969  00FF69  69                 	db	105	;'i'
   970  00FF6A  6E                 	db	110	;'n'
   971  00FF6B  61                 	db	97	;'a'
   972  00FF6C  74                 	db	116	;'t'
   973  00FF6D  65                 	db	101	;'e'
   974  00FF6E  21                 	db	33
   975  00FF6F  00                 	db	0
   976  00FF70                     STR_53:
   977  00FF70  77                 	db	119	;'w'
   978  00FF71  72                 	db	114	;'r'
   979  00FF72  6F                 	db	111	;'o'
   980  00FF73  6E                 	db	110	;'n'
   981  00FF74  67                 	db	103	;'g'
   982  00FF75  20                 	db	32
   983  00FF76  73                 	db	115	;'s'
   984  00FF77  65                 	db	101	;'e'
   985  00FF78  74                 	db	116	;'t'
   986  00FF79  21                 	db	33
   987  00FF7A  00                 	db	0
   988  00FF7B                     STR_30:
   989  00FF7B  33                 	db	51	;'3'
   990  00FF7C  3A                 	db	58	;':'
   991  00FF7D  73                 	db	115	;'s'
   992  00FF7E  75                 	db	117	;'u'
   993  00FF7F  6D                 	db	109	;'m'
   994  00FF80  6D                 	db	109	;'m'
   995  00FF81  61                 	db	97	;'a'
   996  00FF82  72                 	db	114	;'r'
   997  00FF83  79                 	db	121	;'y'
   998  00FF84  00                 	db	0
   999  00FF85                     STR_50:
  1000  00FF85  63                 	db	99	;'c'
  1001  00FF86  6F                 	db	111	;'o'
  1002  00FF87  72                 	db	114	;'r'
  1003  00FF88  72                 	db	114	;'r'
  1004  00FF89  65                 	db	101	;'e'
  1005  00FF8A  63                 	db	99	;'c'
  1006  00FF8B  74                 	db	116	;'t'
  1007  00FF8C  21                 	db	33
  1008  00FF8D  00                 	db	0
  1009  00FF8E                     STR_60:
  1010  00FF8E  54                 	db	84	;'T'
  1011  00FF8F  4F                 	db	79	;'O'
  1012  00FF90  4F                 	db	79	;'O'
  1013  00FF91  20                 	db	32
  1014  00FF92  4D                 	db	77	;'M'
  1015  00FF93  41                 	db	65	;'A'
  1016  00FF94  4E                 	db	78	;'N'
  1017  00FF95  59                 	db	89	;'Y'
  1018  00FF96  00                 	db	0
  1019  00FF97                     STR_21:
  1020  00FF97  64                 	db	100	;'d'
  1021  00FF98  6F                 	db	111	;'o'
  1022  00FF99  6E                 	db	110	;'n'
  1023  00FF9A  65                 	db	101	;'e'
  1024  00FF9B  20                 	db	32
  1025  00FF9C  43                 	db	67	;'C'
  1026  00FF9D  25                 	db	37
  1027  00FF9E  64                 	db	100	;'d'
  1028  00FF9F  00                 	db	0
  1029  00FFA0                     STR_31:
  1030  00FFA0  34                 	db	52	;'4'
  1031  00FFA1  3A                 	db	58	;':'
  1032  00FFA2  72                 	db	114	;'r'
  1033  00FFA3  65                 	db	101	;'e'
  1034  00FFA4  74                 	db	116	;'t'
  1035  00FFA5  75                 	db	117	;'u'
  1036  00FFA6  72                 	db	114	;'r'
  1037  00FFA7  6E                 	db	110	;'n'
  1038  00FFA8  00                 	db	0
  1039  00FFA9                     STR_6:
  1040  00FFA9  6E                 	db	110	;'n'
  1041  00FFAA  75                 	db	117	;'u'
  1042  00FFAB  6D                 	db	109	;'m'
  1043  00FFAC  62                 	db	98	;'b'
  1044  00FFAD  65                 	db	101	;'e'
  1045  00FFAE  72                 	db	114	;'r'
  1046  00FFAF  3A                 	db	58	;':'
  1047  00FFB0  00                 	db	0
  1048  00FFB1                     STR_98:
  1049  00FFB1  28                 	db	40
  1050  00FFB2  6E                 	db	110	;'n'
  1051  00FFB3  75                 	db	117	;'u'
  1052  00FFB4  6C                 	db	108	;'l'
  1053  00FFB5  6C                 	db	108	;'l'
  1054  00FFB6  29                 	db	41
  1055  00FFB7  00                 	db	0
  1056  00FFB8                     STR_56:
  1057  00FFB8  77                 	db	119	;'w'
  1058  00FFB9  72                 	db	114	;'r'
  1059  00FFBA  6F                 	db	111	;'o'
  1060  00FFBB  6E                 	db	110	;'n'
  1061  00FFBC  67                 	db	103	;'g'
  1062  00FFBD  21                 	db	33
  1063  00FFBE  00                 	db	0
  1064  00FFBF                     STR_96:
  1065  00FFBF  42                 	db	66	;'B'
  1066  00FFC0  4E                 	db	78	;'N'
  1067  00FFC1  4E                 	db	78	;'N'
  1068  00FFC2  4E                 	db	78	;'N'
  1069  00FFC3  00                 	db	0
  1070  00FFC4                     STR_94:
  1071  00FFC4  42                 	db	66	;'B'
  1072  00FFC5  42                 	db	66	;'B'
  1073  00FFC6  4E                 	db	78	;'N'
  1074  00FFC7  57                 	db	87	;'W'
  1075  00FFC8  00                 	db	0
  1076  00FFC9                     STR_95:
  1077  00FFC9  42                 	db	66	;'B'
  1078  00FFCA  4E                 	db	78	;'N'
  1079  00FFCB  4E                 	db	78	;'N'
  1080  00FFCC  57                 	db	87	;'W'
  1081  00FFCD  00                 	db	0
  1082  00FFCE                     STR_93:
  1083  00FFCE  42                 	db	66	;'B'
  1084  00FFCF  42                 	db	66	;'B'
  1085  00FFD0  53                 	db	83	;'S'
  1086  00FFD1  57                 	db	87	;'W'
  1087  00FFD2  00                 	db	0
  1088  00FFD3                     STR_91:
  1089  00FFD3  42                 	db	66	;'B'
  1090  00FFD4  4E                 	db	78	;'N'
  1091  00FFD5  57                 	db	87	;'W'
  1092  00FFD6  57                 	db	87	;'W'
  1093  00FFD7  00                 	db	0
  1094  00FFD8                     STR_92:
  1095  00FFD8  42                 	db	66	;'B'
  1096  00FFD9  53                 	db	83	;'S'
  1097  00FFDA  57                 	db	87	;'W'
  1098  00FFDB  57                 	db	87	;'W'
  1099  00FFDC  00                 	db	0
  1100  00FFDD                     STR_97:
  1101  00FFDD  42                 	db	66	;'B'
  1102  00FFDE  57                 	db	87	;'W'
  1103  00FFDF  57                 	db	87	;'W'
  1104  00FFE0  57                 	db	87	;'W'
  1105  00FFE1  00                 	db	0
  1106  00FFE2                     STR_9:
  1107  00FFE2  73                 	db	115	;'s'
  1108  00FFE3  74                 	db	116	;'t'
  1109  00FFE4  65                 	db	101	;'e'
  1110  00FFE5  70                 	db	112	;'p'
  1111  00FFE6  00                 	db	0
  1112  00FFE7                     STR_85:
  1113  00FFE7  42                 	db	66	;'B'
  1114  00FFE8  42                 	db	66	;'B'
  1115  00FFE9  4E                 	db	78	;'N'
  1116  00FFEA  00                 	db	0
  1117  00FFEB                     STR_86:
  1118  00FFEB  42                 	db	66	;'B'
  1119  00FFEC  42                 	db	66	;'B'
  1120  00FFED  53                 	db	83	;'S'
  1121  00FFEE  00                 	db	0
  1122  00FFEF                     STR_87:
  1123  00FFEF  42                 	db	66	;'B'
  1124  00FFF0  42                 	db	66	;'B'
  1125  00FFF1  57                 	db	87	;'W'
  1126  00FFF2  00                 	db	0
  1127  00FFF3                     STR_90:
  1128  00FFF3  42                 	db	66	;'B'
  1129  00FFF4  57                 	db	87	;'W'
  1130  00FFF5  57                 	db	87	;'W'
  1131  00FFF6  00                 	db	0
  1132  00FFF7                     STR_5:
  1133  00FFF7  25                 	db	37
  1134  00FFF8  73                 	db	115	;'s'
  1135  00FFF9  00                 	db	0
  1136  00FFFA                     STR_13:
  1137  00FFFA  2C                 	db	44
  1138  00FFFB  00                 	db	0
  1139  00FFFC                     STR_46:
  1140  00FFFC  42                 	db	66	;'B'
  1141  00FFFD  00                 	db	0
  1142  0000                     
  1143                           ; #config settings
  1144  00FFFE  00                 	db	0	; dummy byte at the end
  1145  0000                     
  1146                           	psect	cinit
  1147  0039BE                     __pcinit:
  1148                           	opt stack 0
  1149  0039BE                     start_initialization:
  1150                           	opt stack 0
  1151  0039BE                     __initialization:
  1152                           	opt stack 0
  1153                           
  1154                           ; Initialize objects allocated to BANK1 (12 bytes)
  1155                           ; load TBLPTR registers with __pidataBANK1
  1156  0039BE  0E06               	movlw	low __pidataBANK1
  1157  0039C0  6EF6               	movwf	tblptrl,c
  1158  0039C2  0E46               	movlw	high __pidataBANK1
  1159  0039C4  6EF7               	movwf	tblptrh,c
  1160  0039C6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1161  0039C8  6EF8               	movwf	tblptru,c
  1162  0039CA  EE01  F0E9         	lfsr	0,__pdataBANK1
  1163  0039CE  EE10 F00C          	lfsr	1,12
  1164  0039D2                     copy_data0:
  1165  0039D2  0009               	tblrd		*+
  1166  0039D4  CFF5 FFEE          	movff	tablat,postinc0
  1167  0039D8  50E5               	movf	postdec1,w,c
  1168  0039DA  50E1               	movf	fsr1l,w,c
  1169  0039DC  E1FA               	bnz	copy_data0
  1170                           
  1171                           ; Initialize objects allocated to BANK0 (4 bytes)
  1172                           ; load TBLPTR registers with __pidataBANK0
  1173  0039DE  0E4E               	movlw	low __pidataBANK0
  1174  0039E0  6EF6               	movwf	tblptrl,c
  1175  0039E2  0E46               	movlw	high __pidataBANK0
  1176  0039E4  6EF7               	movwf	tblptrh,c
  1177  0039E6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1178  0039E8  6EF8               	movwf	tblptru,c
  1179  0039EA  EE00  F0FB         	lfsr	0,__pdataBANK0
  1180  0039EE  EE10 F004          	lfsr	1,4
  1181  0039F2                     copy_data1:
  1182  0039F2  0009               	tblrd		*+
  1183  0039F4  CFF5 FFEE          	movff	tablat,postinc0
  1184  0039F8  50E5               	movf	postdec1,w,c
  1185  0039FA  50E1               	movf	fsr1l,w,c
  1186  0039FC  E1FA               	bnz	copy_data1
  1187                           
  1188                           ; Initialize objects allocated to COMRAM (8 bytes)
  1189                           ; load TBLPTR registers with __pidataCOMRAM
  1190  0039FE  0E26               	movlw	low __pidataCOMRAM
  1191  003A00  6EF6               	movwf	tblptrl,c
  1192  003A02  0E46               	movlw	high __pidataCOMRAM
  1193  003A04  6EF7               	movwf	tblptrh,c
  1194  003A06  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1195  003A08  6EF8               	movwf	tblptru,c
  1196  003A0A  EE00  F077         	lfsr	0,__pdataCOMRAM
  1197  003A0E  EE10 F008          	lfsr	1,8
  1198  003A12                     copy_data2:
  1199  003A12  0009               	tblrd		*+
  1200  003A14  CFF5 FFEE          	movff	tablat,postinc0
  1201  003A18  50E5               	movf	postdec1,w,c
  1202  003A1A  50E1               	movf	fsr1l,w,c
  1203  003A1C  E1FA               	bnz	copy_data2
  1204                           
  1205                           ; Clear objects allocated to BANK2 (200 bytes)
  1206  003A1E  EE02  F000         	lfsr	0,__pbssBANK2
  1207  003A22  0EC8               	movlw	200
  1208  003A24                     clear_0:
  1209  003A24  6AEE               	clrf	postinc0,c
  1210  003A26  06E8               	decf	wreg,f,c
  1211  003A28  E1FD               	bnz	clear_0
  1212                           
  1213                           ; Clear objects allocated to BANK1 (233 bytes)
  1214  003A2A  EE01  F000         	lfsr	0,__pbssBANK1
  1215  003A2E  0EE9               	movlw	233
  1216  003A30                     clear_1:
  1217  003A30  6AEE               	clrf	postinc0,c
  1218  003A32  06E8               	decf	wreg,f,c
  1219  003A34  E1FD               	bnz	clear_1
  1220                           
  1221                           ; Clear objects allocated to BANK0 (70 bytes)
  1222  003A36  EE00  F080         	lfsr	0,__pbssBANK0
  1223  003A3A  0E46               	movlw	70
  1224  003A3C                     clear_2:
  1225  003A3C  6AEE               	clrf	postinc0,c
  1226  003A3E  06E8               	decf	wreg,f,c
  1227  003A40  E1FD               	bnz	clear_2
  1228                           
  1229                           ; Clear objects allocated to COMRAM (49 bytes)
  1230  003A42  EE00  F046         	lfsr	0,__pbssCOMRAM
  1231  003A46  0E31               	movlw	49
  1232  003A48                     clear_3:
  1233  003A48  6AEE               	clrf	postinc0,c
  1234  003A4A  06E8               	decf	wreg,f,c
  1235  003A4C  E1FD               	bnz	clear_3
  1236  003A4E                     end_of_initialization:
  1237                           	opt stack 0
  1238  003A4E                     __end_of__initialization:
  1239                           	opt stack 0
  1240  003A4E  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1241  003A50  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1242  003A52  0100               	movlb	0
  1243  003A54  EF1F  F00F         	goto	_main	;jump to C main() function
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           
  1253                           	psect	bssCOMRAM
  1254  000046                     __pbssCOMRAM:
  1255                           	opt stack 0
  1256  000046                     _compartment_number:
  1257                           	opt stack 0
  1258  000046                     	ds	16
  1259  000056                     _W:
  1260                           	opt stack 0
  1261  000056                     	ds	2
  1262  000058                     _S:
  1263                           	opt stack 0
  1264  000058                     	ds	2
  1265  00005A                     _N:
  1266                           	opt stack 0
  1267  00005A                     	ds	2
  1268  00005C                     _B:
  1269                           	opt stack 0
  1270  00005C                     	ds	2
  1271  00005E                     _counter_step:
  1272                           	opt stack 0
  1273  00005E                     	ds	2
  1274  000060                     _counter:
  1275                           	opt stack 0
  1276  000060                     	ds	2
  1277  000062                     _operationTime:
  1278                           	opt stack 0
  1279  000062                     	ds	2
  1280  000064                     _prev:
  1281                           	opt stack 0
  1282  000064                     	ds	2
  1283  000066                     _gear_counter:
  1284                           	opt stack 0
  1285  000066                     	ds	2
  1286  000068                     _operation:
  1287                           	opt stack 0
  1288  000068                     	ds	2
  1289  00006A                     _timerCounter:
  1290                           	opt stack 0
  1291  00006A                     	ds	1
  1292  00006B                     _j:
  1293                           	opt stack 0
  1294  00006B                     	ds	1
  1295  00006C                     _input_ch:
  1296                           	opt stack 0
  1297  00006C                     	ds	1
  1298  00006D                     _nuts_data:
  1299                           	opt stack 0
  1300  00006D                     	ds	1
  1301  00006E                     _temp:
  1302                           	opt stack 0
  1303  00006E                     	ds	1
  1304  00006F                     	ds	1
  1305  000070                     _current_set2:
  1306                           	opt stack 0
  1307  000070                     	ds	5
  1308  000075                     _number:
  1309                           	opt stack 0
  1310  000075                     	ds	2
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1l	equ	0xFE1
  1319                           
  1320                           	psect	dataCOMRAM
  1321  000077                     __pdataCOMRAM:
  1322                           	opt stack 0
  1323  000077                     _motorStop_3:
  1324                           	opt stack 0
  1325  000077                     	ds	1
  1326  000078                     _motorStart_3:
  1327                           	opt stack 0
  1328  000078                     	ds	1
  1329  000079                     _motorStop_2:
  1330                           	opt stack 0
  1331  000079                     	ds	1
  1332  00007A                     _motorStart_2:
  1333                           	opt stack 0
  1334  00007A                     	ds	1
  1335  00007B                     _motorStop_1:
  1336                           	opt stack 0
  1337  00007B                     	ds	1
  1338  00007C                     _motorStart_1:
  1339                           	opt stack 0
  1340  00007C                     	ds	1
  1341  00007D                     _motorStop_0:
  1342                           	opt stack 0
  1343  00007D                     	ds	1
  1344  00007E                     _motorStart_0:
  1345                           	opt stack 0
  1346  00007E                     	ds	1
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	bssBANK0
  1357  000080                     __pbssBANK0:
  1358                           	opt stack 0
  1359  000080                     _compartment_array:
  1360                           	opt stack 0
  1361  000080                     	ds	16
  1362  000090                     _time:
  1363                           	opt stack 0
  1364  000090                     	ds	7
  1365  000097                     _W_spacingTime:
  1366                           	opt stack 0
  1367  000097                     	ds	2
  1368  000099                     _S_spacingTime:
  1369                           	opt stack 0
  1370  000099                     	ds	2
  1371  00009B                     _N_spacingTime:
  1372                           	opt stack 0
  1373  00009B                     	ds	2
  1374  00009D                     _B_spacingTime:
  1375                           	opt stack 0
  1376  00009D                     	ds	2
  1377  00009F                     _W_remain:
  1378                           	opt stack 0
  1379  00009F                     	ds	2
  1380  0000A1                     _S_remain:
  1381                           	opt stack 0
  1382  0000A1                     	ds	2
  1383  0000A3                     _N_remain:
  1384                           	opt stack 0
  1385  0000A3                     	ds	2
  1386  0000A5                     _B_remain:
  1387                           	opt stack 0
  1388  0000A5                     	ds	2
  1389  0000A7                     _W_counter:
  1390                           	opt stack 0
  1391  0000A7                     	ds	2
  1392  0000A9                     _N_counter:
  1393                           	opt stack 0
  1394  0000A9                     	ds	2
  1395  0000AB                     _S_counter:
  1396                           	opt stack 0
  1397  0000AB                     	ds	2
  1398  0000AD                     _B_counter:
  1399                           	opt stack 0
  1400  0000AD                     	ds	2
  1401  0000AF                     _assembly_step:
  1402                           	opt stack 0
  1403  0000AF                     	ds	2
  1404  0000B1                     _state:
  1405                           	opt stack 0
  1406  0000B1                     	ds	2
  1407  0000B3                     _operation_done:
  1408                           	opt stack 0
  1409  0000B3                     	ds	2
  1410  0000B5                     _change_mode:
  1411                           	opt stack 0
  1412  0000B5                     	ds	2
  1413  0000B7                     _mode:
  1414                           	opt stack 0
  1415  0000B7                     	ds	2
  1416  0000B9                     _white_tape:
  1417                           	opt stack 0
  1418  0000B9                     	ds	2
  1419  0000BB                     _i:
  1420                           	opt stack 0
  1421  0000BB                     	ds	2
  1422  0000BD                     _NeedToCloseLid:
  1423                           	opt stack 0
  1424  0000BD                     	ds	1
  1425  0000BE                     _EndOfProgram:
  1426                           	opt stack 0
  1427  0000BE                     	ds	1
  1428  0000BF                     _openHandle_data:
  1429                           	opt stack 0
  1430  0000BF                     	ds	1
  1431  0000C0                     _LCDinterruptState:
  1432                           	opt stack 0
  1433  0000C0                     	ds	1
  1434  0000C1                     _current_set:
  1435                           	opt stack 0
  1436  0000C1                     	ds	5
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1l	equ	0xFE1
  1445                           
  1446                           	psect	dataBANK0
  1447  0000FB                     __pdataBANK0:
  1448                           	opt stack 0
  1449  0000FB                     _close_handle:
  1450                           	opt stack 0
  1451  0000FB                     	ds	1
  1452  0000FC                     _servo_ramp:
  1453                           	opt stack 0
  1454  0000FC                     	ds	1
  1455  0000FD                     _rotate_1compartment:
  1456                           	opt stack 0
  1457  0000FD                     	ds	1
  1458  0000FE                     _rotate_gear:
  1459                           	opt stack 0
  1460  0000FE                     	ds	1
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           postdec1	equ	0xFE5
  1468                           fsr1l	equ	0xFE1
  1469                           
  1470                           	psect	bssBANK1
  1471  000100                     __pbssBANK1:
  1472                           	opt stack 0
  1473  000100                     _W_array:
  1474                           	opt stack 0
  1475  000100                     	ds	16
  1476  000110                     _N_array:
  1477                           	opt stack 0
  1478  000110                     	ds	16
  1479  000120                     _S_array:
  1480                           	opt stack 0
  1481  000120                     	ds	16
  1482  000130                     _B_array:
  1483                           	opt stack 0
  1484  000130                     	ds	16
  1485  000140                     _prev_number:
  1486                           	opt stack 0
  1487  000140                     	ds	16
  1488  000150                     _final_number:
  1489                           	opt stack 0
  1490  000150                     	ds	16
  1491  000160                     _final_time:
  1492                           	opt stack 0
  1493  000160                     	ds	2
  1494  000162                     _sec_final:
  1495                           	opt stack 0
  1496  000162                     	ds	2
  1497  000164                     _min_final:
  1498                           	opt stack 0
  1499  000164                     	ds	2
  1500  000166                     _hr_final:
  1501                           	opt stack 0
  1502  000166                     	ds	2
  1503  000168                     _initial_time:
  1504                           	opt stack 0
  1505  000168                     	ds	2
  1506  00016A                     _sec_initial:
  1507                           	opt stack 0
  1508  00016A                     	ds	2
  1509  00016C                     _min_initial:
  1510                           	opt stack 0
  1511  00016C                     	ds	2
  1512  00016E                     _hr_initial:
  1513                           	opt stack 0
  1514  00016E                     	ds	2
  1515  000170                     _W_total_dispensed:
  1516                           	opt stack 0
  1517  000170                     	ds	2
  1518  000172                     _S_total_dispensed:
  1519                           	opt stack 0
  1520  000172                     	ds	2
  1521  000174                     _N_total_dispensed:
  1522                           	opt stack 0
  1523  000174                     	ds	2
  1524  000176                     _B_total_dispensed:
  1525                           	opt stack 0
  1526  000176                     	ds	2
  1527  000178                     _W_done:
  1528                           	opt stack 0
  1529  000178                     	ds	2
  1530  00017A                     _S_done:
  1531                           	opt stack 0
  1532  00017A                     	ds	2
  1533  00017C                     _N_done:
  1534                           	opt stack 0
  1535  00017C                     	ds	2
  1536  00017E                     _B_done:
  1537                           	opt stack 0
  1538  00017E                     	ds	2
  1539  000180                     _W_input:
  1540                           	opt stack 0
  1541  000180                     	ds	2
  1542  000182                     _S_input:
  1543                           	opt stack 0
  1544  000182                     	ds	2
  1545  000184                     _N_input:
  1546                           	opt stack 0
  1547  000184                     	ds	2
  1548  000186                     _B_input:
  1549                           	opt stack 0
  1550  000186                     	ds	2
  1551  000188                     _prev_state:
  1552                           	opt stack 0
  1553  000188                     	ds	2
  1554  00018A                     _total_number:
  1555                           	opt stack 0
  1556  00018A                     	ds	2
  1557  00018C                     _valid:
  1558                           	opt stack 0
  1559  00018C                     	ds	2
  1560  00018E                     _error:
  1561                           	opt stack 0
  1562  00018E                     	ds	2
  1563  000190                     _compartment_pos:
  1564                           	opt stack 0
  1565  000190                     	ds	2
  1566  000192                     _angle:
  1567                           	opt stack 0
  1568  000192                     	ds	2
  1569  000194                     _prev_set:
  1570                           	opt stack 0
  1571  000194                     	ds	40
  1572  0001BC                     _final_set:
  1573                           	opt stack 0
  1574  0001BC                     	ds	40
  1575  0001E4                     _temp_set:
  1576                           	opt stack 0
  1577  0001E4                     	ds	5
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           fsr1l	equ	0xFE1
  1586                           
  1587                           	psect	dataBANK1
  1588  0001E9                     __pdataBANK1:
  1589                           	opt stack 0
  1590  0001E9                     _W_max:
  1591                           	opt stack 0
  1592  0001E9                     	ds	2
  1593  0001EB                     _S_max:
  1594                           	opt stack 0
  1595  0001EB                     	ds	2
  1596  0001ED                     _N_max:
  1597                           	opt stack 0
  1598  0001ED                     	ds	2
  1599  0001EF                     _B_max:
  1600                           	opt stack 0
  1601  0001EF                     	ds	2
  1602  0001F1                     _spacingTime:
  1603                           	opt stack 0
  1604  0001F1                     	ds	2
  1605  0001F3                     _init_position:
  1606                           	opt stack 0
  1607  0001F3                     	ds	2
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBANK2
  1618  000200                     __pbssBANK2:
  1619                           	opt stack 0
  1620  000200                     _fastener:
  1621                           	opt stack 0
  1622  000200                     	ds	200
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	cstackBANK0
  1633  0000C6                     __pcstackBANK0:
  1634                           	opt stack 0
  1635  0000C6                     ??_isdigit:
  1636  0000C6                     ??_I2C_Master_Wait:
  1637  0000C6                     ?___awdiv:
  1638                           	opt stack 0
  1639  0000C6                     ?___lwdiv:
  1640                           	opt stack 0
  1641  0000C6                     ?___lldiv:
  1642                           	opt stack 0
  1643  0000C6                     lcdNibble@temp:
  1644                           	opt stack 0
  1645  0000C6                     generate_compartment_array@step:
  1646                           	opt stack 0
  1647  0000C6                     ___awdiv@dividend:
  1648                           	opt stack 0
  1649  0000C6                     ___lwdiv@dividend:
  1650                           	opt stack 0
  1651  0000C6                     ___lldiv@dividend:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x0
  1655  0000C6                     	ds	1
  1656  0000C7                     lcdNibble@data:
  1657                           	opt stack 0
  1658  0000C7                     I2C_Master_Read@ackBit:
  1659                           	opt stack 0
  1660  0000C7                     _isdigit$1805:
  1661                           	opt stack 0
  1662  0000C7                     I2C_Master_Write@byteToWrite:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x1
  1666  0000C7                     	ds	1
  1667  0000C8                     ??_generate_compartment_array:
  1668  0000C8                     lcdInst@data:
  1669                           	opt stack 0
  1670  0000C8                     putch@data:
  1671                           	opt stack 0
  1672  0000C8                     I2C_Master_Read@receivedByte:
  1673                           	opt stack 0
  1674  0000C8                     isdigit@c:
  1675                           	opt stack 0
  1676  0000C8                     ___awdiv@divisor:
  1677                           	opt stack 0
  1678  0000C8                     ___lwdiv@divisor:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x2
  1682  0000C8                     	ds	1
  1683  0000C9                     ??_initLCD:
  1684  0000C9                     I2C_sendData@char_data:
  1685                           	opt stack 0
  1686                           
  1687                           ; 1 bytes @ 0x3
  1688  0000C9                     	ds	1
  1689  0000CA                     ___awdiv@counter:
  1690                           	opt stack 0
  1691  0000CA                     ___lwdiv@quotient:
  1692                           	opt stack 0
  1693  0000CA                     ___lldiv@divisor:
  1694                           	opt stack 0
  1695                           
  1696                           ; 4 bytes @ 0x4
  1697  0000CA                     	ds	1
  1698  0000CB                     ___awdiv@sign:
  1699                           	opt stack 0
  1700                           
  1701                           ; 1 bytes @ 0x5
  1702  0000CB                     	ds	1
  1703  0000CC                     ___lwdiv@counter:
  1704                           	opt stack 0
  1705  0000CC                     ___awdiv@quotient:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x6
  1709  0000CC                     	ds	1
  1710  0000CD                     ?___lwmod:
  1711                           	opt stack 0
  1712  0000CD                     ___lwmod@dividend:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x7
  1716  0000CD                     	ds	1
  1717  0000CE                     ?___wmul:
  1718                           	opt stack 0
  1719  0000CE                     ___wmul@multiplier:
  1720                           	opt stack 0
  1721  0000CE                     ___lldiv@quotient:
  1722                           	opt stack 0
  1723                           
  1724                           ; 4 bytes @ 0x8
  1725  0000CE                     	ds	1
  1726  0000CF                     ___lwmod@divisor:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x9
  1730  0000CF                     	ds	1
  1731  0000D0                     ___wmul@multiplicand:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0xA
  1735  0000D0                     	ds	1
  1736  0000D1                     ___lwmod@counter:
  1737                           	opt stack 0
  1738                           
  1739                           ; 1 bytes @ 0xB
  1740  0000D1                     	ds	1
  1741  0000D2                     ___lldiv@counter:
  1742                           	opt stack 0
  1743  0000D2                     ___wmul@product:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0xC
  1747  0000D2                     	ds	1
  1748  0000D3                     I2C_Master_Init@clockFreq:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0xD
  1752  0000D3                     	ds	1
  1753  0000D4                     ?_printf:
  1754                           	opt stack 0
  1755  0000D4                     printf@f:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0xE
  1759  0000D4                     	ds	3
  1760  0000D7                     ??_I2C_Master_Init:
  1761                           
  1762                           ; 1 bytes @ 0x11
  1763  0000D7                     	ds	4
  1764  0000DB                     
  1765                           ; 1 bytes @ 0x15
  1766  0000DB                     	ds	3
  1767  0000DE                     ??_printf:
  1768                           
  1769                           ; 1 bytes @ 0x18
  1770  0000DE                     	ds	4
  1771  0000E2                     printf@idx:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0x1C
  1775  0000E2                     	ds	1
  1776  0000E3                     printf@prec:
  1777                           	opt stack 0
  1778                           
  1779                           ; 1 bytes @ 0x1D
  1780  0000E3                     	ds	1
  1781  0000E4                     printf@cp:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x1E
  1785  0000E4                     	ds	2
  1786  0000E6                     printf@ap:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x20
  1790  0000E6                     	ds	2
  1791  0000E8                     printf@len:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x22
  1795  0000E8                     	ds	2
  1796  0000EA                     printf@val:
  1797                           	opt stack 0
  1798                           
  1799                           ; 2 bytes @ 0x24
  1800  0000EA                     	ds	2
  1801  0000EC                     printf@flag:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x26
  1805  0000EC                     	ds	1
  1806  0000ED                     printf@width:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x27
  1810  0000ED                     	ds	2
  1811  0000EF                     printf@c:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x29
  1815  0000EF                     	ds	1
  1816  0000F0                     Bolt_dispense@B_max:
  1817                           	opt stack 0
  1818  0000F0                     Nut_dispense@N_max:
  1819                           	opt stack 0
  1820  0000F0                     Spacer_dispense@S_max:
  1821                           	opt stack 0
  1822  0000F0                     Washer_dispense@W_max:
  1823                           	opt stack 0
  1824  0000F0                     all_remain@time:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x2A
  1828  0000F0                     	ds	2
  1829  0000F2                     ??_Bolt_dispense:
  1830  0000F2                     ??_Nut_dispense:
  1831  0000F2                     ??_Spacer_dispense:
  1832  0000F2                     ??_Washer_dispense:
  1833  0000F2                     ??_all_remain:
  1834                           
  1835                           ; 1 bytes @ 0x2C
  1836  0000F2                     	ds	2
  1837  0000F4                     all_remain@timeout:
  1838                           	opt stack 0
  1839                           
  1840                           ; 1 bytes @ 0x2E
  1841  0000F4                     	ds	1
  1842  0000F5                     ??_main:
  1843                           
  1844                           ; 1 bytes @ 0x2F
  1845  0000F5                     	ds	2
  1846  0000F7                     _main$2230:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x31
  1850  0000F7                     	ds	2
  1851  0000F9                     main@compart_id:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0x33
  1855  0000F9                     	ds	2
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           postdec1	equ	0xFE5
  1863                           fsr1l	equ	0xFE1
  1864                           
  1865                           	psect	cstackCOMRAM
  1866  000001                     __pcstackCOMRAM:
  1867                           	opt stack 0
  1868  000001                     ??i2_I2C_Master_Wait:
  1869  000001                     ??i2_isdigit:
  1870  000001                     ?_check:
  1871                           	opt stack 0
  1872  000001                     ?_strcmp:
  1873                           	opt stack 0
  1874  000001                     ?___awmod:
  1875                           	opt stack 0
  1876  000001                     ?i2___wmul:
  1877                           	opt stack 0
  1878  000001                     ?i2___awdiv:
  1879                           	opt stack 0
  1880  000001                     ?i2___lwdiv:
  1881                           	opt stack 0
  1882  000001                     ?i2___lldiv:
  1883                           	opt stack 0
  1884  000001                     i2lcdNibble@temp:
  1885                           	opt stack 0
  1886  000001                     ___awmod@dividend:
  1887                           	opt stack 0
  1888  000001                     strcat@to:
  1889                           	opt stack 0
  1890  000001                     strcmp@s1:
  1891                           	opt stack 0
  1892  000001                     i2generate_compartment_array@step:
  1893                           	opt stack 0
  1894  000001                     i2___wmul@multiplier:
  1895                           	opt stack 0
  1896  000001                     i2___awdiv@dividend:
  1897                           	opt stack 0
  1898  000001                     i2___lwdiv@dividend:
  1899                           	opt stack 0
  1900  000001                     i2___lldiv@dividend:
  1901                           	opt stack 0
  1902                           
  1903                           ; 4 bytes @ 0x0
  1904  000001                     	ds	1
  1905  000002                     i2lcdNibble@data:
  1906                           	opt stack 0
  1907  000002                     i2I2C_Master_Read@ackBit:
  1908                           	opt stack 0
  1909  000002                     i2_isdigit$1805:
  1910                           	opt stack 0
  1911  000002                     i2I2C_Master_Write@byteToWrite:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x1
  1915  000002                     	ds	1
  1916  000003                     ??i2_generate_compartment_array:
  1917  000003                     i2lcdInst@data:
  1918                           	opt stack 0
  1919  000003                     i2putch@data:
  1920                           	opt stack 0
  1921  000003                     i2I2C_Master_Read@receivedByte:
  1922                           	opt stack 0
  1923  000003                     i2isdigit@c:
  1924                           	opt stack 0
  1925  000003                     ___awmod@divisor:
  1926                           	opt stack 0
  1927  000003                     strcat@from:
  1928                           	opt stack 0
  1929  000003                     strcmp@s2:
  1930                           	opt stack 0
  1931  000003                     i2___wmul@multiplicand:
  1932                           	opt stack 0
  1933  000003                     i2___awdiv@divisor:
  1934                           	opt stack 0
  1935  000003                     i2___lwdiv@divisor:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x2
  1939  000003                     	ds	1
  1940  000004                     ??i2_initLCD:
  1941  000004                     
  1942                           ; 1 bytes @ 0x3
  1943  000004                     	ds	1
  1944  000005                     ??_strcmp:
  1945  000005                     ___awmod@counter:
  1946                           	opt stack 0
  1947  000005                     i2___awdiv@counter:
  1948                           	opt stack 0
  1949  000005                     strcat@cp:
  1950                           	opt stack 0
  1951  000005                     i2___wmul@product:
  1952                           	opt stack 0
  1953  000005                     i2___lwdiv@quotient:
  1954                           	opt stack 0
  1955  000005                     i2___lldiv@divisor:
  1956                           	opt stack 0
  1957                           
  1958                           ; 4 bytes @ 0x4
  1959  000005                     	ds	1
  1960  000006                     ___awmod@sign:
  1961                           	opt stack 0
  1962  000006                     strcmp@r:
  1963                           	opt stack 0
  1964  000006                     i2___awdiv@sign:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x5
  1968  000006                     	ds	1
  1969  000007                     ??_is_valid:
  1970  000007                     ?_strncmp:
  1971                           	opt stack 0
  1972  000007                     i2___lwdiv@counter:
  1973                           	opt stack 0
  1974  000007                     strcpy@to:
  1975                           	opt stack 0
  1976  000007                     strncmp@s1:
  1977                           	opt stack 0
  1978  000007                     i2___awdiv@quotient:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0x6
  1982  000007                     	ds	1
  1983  000008                     ?i2___lwmod:
  1984                           	opt stack 0
  1985  000008                     i2___lwmod@dividend:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x7
  1989  000008                     	ds	1
  1990  000009                     strcpy@from:
  1991                           	opt stack 0
  1992  000009                     strncmp@s2:
  1993                           	opt stack 0
  1994  000009                     i2___lldiv@quotient:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x8
  1998  000009                     	ds	1
  1999  00000A                     i2___lwmod@divisor:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x9
  2003  00000A                     	ds	1
  2004  00000B                     strcpy@cp:
  2005                           	opt stack 0
  2006  00000B                     strncmp@len:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0xA
  2010  00000B                     	ds	1
  2011  00000C                     i2___lwmod@counter:
  2012                           	opt stack 0
  2013                           
  2014                           ; 1 bytes @ 0xB
  2015  00000C                     	ds	1
  2016  00000D                     ??_strncmp:
  2017  00000D                     ?i2_printf:
  2018                           	opt stack 0
  2019  00000D                     i2___lldiv@counter:
  2020                           	opt stack 0
  2021  00000D                     i2printf@f:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0xC
  2025  00000D                     	ds	1
  2026  00000E                     i2I2C_Master_Init@clockFreq:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0xD
  2030  00000E                     	ds	4
  2031  000012                     ??i2_I2C_Master_Init:
  2032                           
  2033                           ; 1 bytes @ 0x11
  2034  000012                     	ds	7
  2035  000019                     ??i2_printf:
  2036                           
  2037                           ; 1 bytes @ 0x18
  2038  000019                     	ds	4
  2039  00001D                     i2printf@idx:
  2040                           	opt stack 0
  2041                           
  2042                           ; 1 bytes @ 0x1C
  2043  00001D                     	ds	1
  2044  00001E                     i2printf@prec:
  2045                           	opt stack 0
  2046                           
  2047                           ; 1 bytes @ 0x1D
  2048  00001E                     	ds	1
  2049  00001F                     i2printf@cp:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x1E
  2053  00001F                     	ds	2
  2054  000021                     i2printf@ap:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x20
  2058  000021                     	ds	2
  2059  000023                     i2printf@len:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x22
  2063  000023                     	ds	2
  2064  000025                     i2printf@val:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x24
  2068  000025                     	ds	2
  2069  000027                     i2printf@flag:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x26
  2073  000027                     	ds	1
  2074  000028                     i2printf@width:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x27
  2078  000028                     	ds	2
  2079  00002A                     i2printf@c:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x29
  2083  00002A                     	ds	1
  2084  00002B                     ??_interruptHandler:
  2085                           
  2086                           ; 1 bytes @ 0x2A
  2087  00002B                     	ds	23
  2088  000042                     interruptHandler@i:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x41
  2092  000042                     	ds	2
  2093  000044                     interruptHandler@keypress:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0x43
  2097  000044                     	ds	1
  2098  000045                     interruptHandler@temp:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x44
  2102  000045                     	ds	1
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           
  2112 ;;
  2113 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2114 ;;
  2115 ;; *************** function _main *****************
  2116 ;; Defined at:
  2117 ;;		line 93 in file "main.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  compart_id      2   51[BANK0 ] int 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;Total ram usage:        6 bytes
  2136 ;; Hardware stack levels required when called:    8
  2137 ;; This function calls:
  2138 ;;		_Bolt_dispense
  2139 ;;		_I2C_Master_Read
  2140 ;;		_I2C_Master_Start
  2141 ;;		_I2C_Master_Stop
  2142 ;;		_I2C_Master_Write
  2143 ;;		_I2C_init
  2144 ;;		_I2C_sendData
  2145 ;;		_Nut_dispense
  2146 ;;		_Spacer_dispense
  2147 ;;		_Washer_dispense
  2148 ;;		___awdiv
  2149 ;;		___wmul
  2150 ;;		_all_remain
  2151 ;;		_generate_compartment_array
  2152 ;;		_initLCD
  2153 ;;		_initVibTimer
  2154 ;;		_initialize
  2155 ;;		_lcdInst
  2156 ;;		_printf
  2157 ;; This function is called by:
  2158 ;;		Startup code after reset
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text0
  2163  001E3E                     __ptext0:
  2164                           	opt stack 0
  2165  001E3E                     _main:
  2166                           	opt stack 23
  2167                           
  2168                           ;main.c: 99: OSCCONbits.IRCF2 = 1;
  2169                           
  2170                           ;incstack = 0
  2171  001E3E  8CD3               	bsf	4051,6,c	;volatile
  2172                           
  2173                           ;main.c: 100: OSCCONbits.IRCF1 = 1;
  2174  001E40  8AD3               	bsf	4051,5,c	;volatile
  2175                           
  2176                           ;main.c: 101: OSCCONbits.IRCF0 = 1;
  2177  001E42  88D3               	bsf	4051,4,c	;volatile
  2178                           
  2179                           ;main.c: 102: OSCCONbits.SCS1 = 1;
  2180  001E44  82D3               	bsf	4051,1,c	;volatile
  2181                           
  2182                           ;main.c: 103: OSCTUNEbits.PLLEN = 1;
  2183  001E46  8C9B               	bsf	3995,6,c	;volatile
  2184                           
  2185                           ;main.c: 108: LATA = 0x00;
  2186  001E48  0E00               	movlw	0
  2187  001E4A  6E89               	movwf	3977,c	;volatile
  2188                           
  2189                           ;main.c: 109: LATB = 0x00;
  2190  001E4C  0E00               	movlw	0
  2191  001E4E  6E8A               	movwf	3978,c	;volatile
  2192                           
  2193                           ;main.c: 110: LATC = 0x00;
  2194  001E50  0E00               	movlw	0
  2195  001E52  6E8B               	movwf	3979,c	;volatile
  2196                           
  2197                           ;main.c: 111: LATD = 0x00;
  2198  001E54  0E00               	movlw	0
  2199  001E56  6E8C               	movwf	3980,c	;volatile
  2200                           
  2201                           ;main.c: 112: LATE = 0x00;
  2202  001E58  0E00               	movlw	0
  2203  001E5A  6E8D               	movwf	3981,c	;volatile
  2204                           
  2205                           ;main.c: 116: TRISA = 0xFF;
  2206  001E5C  6892               	setf	3986,c	;volatile
  2207                           
  2208                           ;main.c: 117: TRISB = 0xFF;
  2209  001E5E  6893               	setf	3987,c	;volatile
  2210                           
  2211                           ;main.c: 118: TRISC = 0x00;
  2212  001E60  0E00               	movlw	0
  2213  001E62  6E94               	movwf	3988,c	;volatile
  2214                           
  2215                           ;main.c: 119: TRISD = 0x00;
  2216  001E64  0E00               	movlw	0
  2217  001E66  6E95               	movwf	3989,c	;volatile
  2218                           
  2219                           ;main.c: 120: TRISE = 0x00;
  2220  001E68  0E00               	movlw	0
  2221  001E6A  6E96               	movwf	3990,c	;volatile
  2222                           
  2223                           ;main.c: 123: ADCON0 = 0x00;
  2224  001E6C  0E00               	movlw	0
  2225  001E6E  6EC2               	movwf	4034,c	;volatile
  2226                           
  2227                           ;main.c: 124: ADCON1 = 0b00001111;
  2228  001E70  0E0F               	movlw	15
  2229  001E72  6EC1               	movwf	4033,c	;volatile
  2230                           
  2231                           ;main.c: 127: INT1IE = 1;
  2232  001E74  86F0               	bsf	intcon3,3,c	;volatile
  2233                           
  2234                           ;main.c: 128: (INTCONbits.GIE = 1);
  2235  001E76  8EF2               	bsf	intcon,7,c	;volatile
  2236                           
  2237                           ;main.c: 131: initLCD();
  2238  001E78  EC29  F021         	call	_initLCD	;wreg free
  2239  001E7C                     
  2240                           ;main.c: 134: if (mode == 0){
  2241  001E7C  0100               	movlb	0	; () banked
  2242  001E7E  51B7               	movf	_mode& (0+255),w,b
  2243  001E80  11B8               	iorwf	(_mode+1)& (0+255),w,b
  2244  001E82  A4D8               	btfss	status,2,c
  2245  001E84  D031               	goto	l392
  2246  001E86                     u4900:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 136: printf("1:date and time");
  2250                           
  2251                           ; BSR set to: 0
  2252                           
  2253                           ;main.c: 135: while(1){
  2254  001E86  0E73               	movlw	low STR_1
  2255  001E88  6FD4               	movwf	printf@f& (0+255),b
  2256  001E8A  0EFE               	movlw	high STR_1
  2257  001E8C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2258  001E8E  ECC3  F014         	call	_printf	;wreg free
  2259                           
  2260                           ;main.c: 137: lcdInst(0xC0);;
  2261  001E92  0EC0               	movlw	192
  2262  001E94  ECC6  F022         	call	_lcdInst
  2263                           
  2264                           ;main.c: 138: printf("2:Enter Instruction");
  2265  001E98  0E8C               	movlw	low STR_2
  2266  001E9A  0100               	movlb	0	; () banked
  2267  001E9C  6FD4               	movwf	printf@f& (0+255),b
  2268  001E9E  0EFD               	movlw	high STR_2
  2269  001EA0  6FD5               	movwf	(printf@f+1)& (0+255),b
  2270  001EA2  ECC3  F014         	call	_printf	;wreg free
  2271                           
  2272                           ;main.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
  2273  001EA6  0E05               	movlw	5
  2274  001EA8  0100               	movlb	0	; () banked
  2275  001EAA  6FF6               	movwf	(??_main+1)& (0+255),b
  2276  001EAC  0E0F               	movlw	15
  2277  001EAE  6FF5               	movwf	??_main& (0+255),b
  2278  001EB0  0EF1               	movlw	241
  2279  001EB2                     u6107:
  2280  001EB2  2EE8               	decfsz	wreg,f,c
  2281  001EB4  D7FE               	bra	u6107
  2282  001EB6  2FF5               	decfsz	??_main& (0+255),f,b
  2283  001EB8  D7FC               	bra	u6107
  2284  001EBA  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2285  001EBC  D7FA               	bra	u6107
  2286                           
  2287                           ;main.c: 140: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2288  001EBE  0E80               	movlw	128
  2289  001EC0  ECC6  F022         	call	_lcdInst
  2290  001EC4  0E34               	movlw	52
  2291  001EC6  0100               	movlb	0	; () banked
  2292  001EC8  6FF5               	movwf	??_main& (0+255),b
  2293  001ECA  0EF1               	movlw	241
  2294  001ECC                     u6117:
  2295  001ECC  2EE8               	decfsz	wreg,f,c
  2296  001ECE  D7FE               	bra	u6117
  2297  001ED0  2FF5               	decfsz	??_main& (0+255),f,b
  2298  001ED2  D7FC               	bra	u6117
  2299  001ED4  D000               	nop2	
  2300                           
  2301                           ;main.c: 141: if (change_mode == 1){
  2302  001ED6  0100               	movlb	0	; () banked
  2303  001ED8  05B5               	decf	_change_mode& (0+255),w,b
  2304  001EDA  11B6               	iorwf	(_change_mode+1)& (0+255),w,b
  2305  001EDC  A4D8               	btfss	status,2,c
  2306  001EDE  D7D3               	goto	u4900
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;main.c: 142: mode = 1;
  2310  001EE0  0E00               	movlw	0
  2311  001EE2  6FB8               	movwf	(_mode+1)& (0+255),b
  2312  001EE4  0E01               	movlw	1
  2313  001EE6  6FB7               	movwf	_mode& (0+255),b
  2314  001EE8                     l392:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;main.c: 144: }
  2318                           ;main.c: 145: }
  2319                           ;main.c: 147: }
  2320                           ;main.c: 150: if (mode == 1){
  2321                           
  2322                           ; BSR set to: 0
  2323                           
  2324                           ; BSR set to: 0
  2325  001EE8  05B7               	decf	_mode& (0+255),w,b
  2326  001EEA  11B8               	iorwf	(_mode+1)& (0+255),w,b
  2327  001EEC  A4D8               	btfss	status,2,c
  2328  001EEE  D1DC               	goto	l394
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main.c: 152: initLCD();
  2332  001EF0  EC29  F021         	call	_initLCD	;wreg free
  2333  001EF4                     
  2334                           ;main.c: 155: if (state == 0){
  2335  001EF4  0100               	movlb	0	; () banked
  2336  001EF6  51B1               	movf	_state& (0+255),w,b
  2337  001EF8  11B2               	iorwf	(_state+1)& (0+255),w,b
  2338  001EFA  A4D8               	btfss	status,2,c
  2339  001EFC  D022               	goto	l396
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;main.c: 157: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2343  001EFE  0E80               	movlw	128
  2344  001F00  ECC6  F022         	call	_lcdInst
  2345  001F04  0E34               	movlw	52
  2346  001F06  0100               	movlb	0	; () banked
  2347  001F08  6FF5               	movwf	??_main& (0+255),b
  2348  001F0A  0EF1               	movlw	241
  2349  001F0C                     u6127:
  2350  001F0C  2EE8               	decfsz	wreg,f,c
  2351  001F0E  D7FE               	bra	u6127
  2352  001F10  2FF5               	decfsz	??_main& (0+255),f,b
  2353  001F12  D7FC               	bra	u6127
  2354  001F14  D000               	nop2	
  2355                           
  2356                           ;main.c: 158: printf("assembly step:");
  2357  001F16  0EA2               	movlw	low STR_3
  2358  001F18  0100               	movlb	0	; () banked
  2359  001F1A  6FD4               	movwf	printf@f& (0+255),b
  2360  001F1C  0EFE               	movlw	high STR_3
  2361  001F1E  6FD5               	movwf	(printf@f+1)& (0+255),b
  2362  001F20  ECC3  F014         	call	_printf	;wreg free
  2363                           
  2364                           ;main.c: 159: _delay((unsigned long)((100)*(32000000/4000.0)));
  2365  001F24  0E05               	movlw	5
  2366  001F26  0100               	movlb	0	; () banked
  2367  001F28  6FF6               	movwf	(??_main+1)& (0+255),b
  2368  001F2A  0E0F               	movlw	15
  2369  001F2C  6FF5               	movwf	??_main& (0+255),b
  2370  001F2E  0EF1               	movlw	241
  2371  001F30                     u6137:
  2372  001F30  2EE8               	decfsz	wreg,f,c
  2373  001F32  D7FE               	bra	u6137
  2374  001F34  2FF5               	decfsz	??_main& (0+255),f,b
  2375  001F36  D7FC               	bra	u6137
  2376  001F38  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2377  001F3A  D7FA               	bra	u6137
  2378                           
  2379                           ;main.c: 160: lcdInst(0xC0);;
  2380  001F3C  0EC0               	movlw	192
  2381  001F3E  ECC6  F022         	call	_lcdInst
  2382  001F42                     l396:
  2383                           
  2384                           ;main.c: 161: }
  2385                           ;main.c: 162: if (state ==1){
  2386  001F42  0100               	movlb	0	; () banked
  2387  001F44  05B1               	decf	_state& (0+255),w,b
  2388  001F46  11B2               	iorwf	(_state+1)& (0+255),w,b
  2389  001F48  A4D8               	btfss	status,2,c
  2390  001F4A  D023               	goto	l397
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;main.c: 163: initLCD();
  2394  001F4C  EC29  F021         	call	_initLCD	;wreg free
  2395                           
  2396                           ;main.c: 164: printf("fastener set:");
  2397  001F50  0E0A               	movlw	low STR_4
  2398  001F52  0100               	movlb	0	; () banked
  2399  001F54  6FD4               	movwf	printf@f& (0+255),b
  2400  001F56  0EFF               	movlw	high STR_4
  2401  001F58  6FD5               	movwf	(printf@f+1)& (0+255),b
  2402  001F5A  ECC3  F014         	call	_printf	;wreg free
  2403                           
  2404                           ;main.c: 165: lcdInst(0xC0);;
  2405  001F5E  0EC0               	movlw	192
  2406  001F60  ECC6  F022         	call	_lcdInst
  2407                           
  2408                           ;main.c: 166: printf("%s",current_set);
  2409  001F64  0EF7               	movlw	low STR_5
  2410  001F66  0100               	movlb	0	; () banked
  2411  001F68  6FD4               	movwf	printf@f& (0+255),b
  2412  001F6A  0EFF               	movlw	high STR_5
  2413  001F6C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2414  001F6E  0EC1               	movlw	low _current_set
  2415  001F70  6FD6               	movwf	(?_printf+2)& (0+255),b
  2416  001F72  0E00               	movlw	high _current_set
  2417  001F74  6FD7               	movwf	(?_printf+3)& (0+255),b
  2418  001F76  ECC3  F014         	call	_printf	;wreg free
  2419                           
  2420                           ;main.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
  2421  001F7A  0E05               	movlw	5
  2422  001F7C  0100               	movlb	0	; () banked
  2423  001F7E  6FF6               	movwf	(??_main+1)& (0+255),b
  2424  001F80  0E0F               	movlw	15
  2425  001F82  6FF5               	movwf	??_main& (0+255),b
  2426  001F84  0EF1               	movlw	241
  2427  001F86                     u6147:
  2428  001F86  2EE8               	decfsz	wreg,f,c
  2429  001F88  D7FE               	bra	u6147
  2430  001F8A  2FF5               	decfsz	??_main& (0+255),f,b
  2431  001F8C  D7FC               	bra	u6147
  2432  001F8E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2433  001F90  D7FA               	bra	u6147
  2434  001F92                     l397:
  2435                           
  2436                           ;main.c: 168: }
  2437                           ;main.c: 170: if (state == 2){
  2438  001F92  0E02               	movlw	2
  2439  001F94  0100               	movlb	0	; () banked
  2440  001F96  19B1               	xorwf	_state& (0+255),w,b
  2441  001F98  11B2               	iorwf	(_state+1)& (0+255),w,b
  2442  001F9A  A4D8               	btfss	status,2,c
  2443  001F9C  D015               	goto	l398
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;main.c: 171: initLCD();
  2447  001F9E  EC29  F021         	call	_initLCD	;wreg free
  2448                           
  2449                           ;main.c: 172: printf("number:");
  2450  001FA2  0EA9               	movlw	low STR_6
  2451  001FA4  0100               	movlb	0	; () banked
  2452  001FA6  6FD4               	movwf	printf@f& (0+255),b
  2453  001FA8  0EFF               	movlw	high STR_6
  2454  001FAA  6FD5               	movwf	(printf@f+1)& (0+255),b
  2455  001FAC  ECC3  F014         	call	_printf	;wreg free
  2456                           
  2457                           ;main.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
  2458  001FB0  0E05               	movlw	5
  2459  001FB2  0100               	movlb	0	; () banked
  2460  001FB4  6FF6               	movwf	(??_main+1)& (0+255),b
  2461  001FB6  0E0F               	movlw	15
  2462  001FB8  6FF5               	movwf	??_main& (0+255),b
  2463  001FBA  0EF1               	movlw	241
  2464  001FBC                     u6157:
  2465  001FBC  2EE8               	decfsz	wreg,f,c
  2466  001FBE  D7FE               	bra	u6157
  2467  001FC0  2FF5               	decfsz	??_main& (0+255),f,b
  2468  001FC2  D7FC               	bra	u6157
  2469  001FC4  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2470  001FC6  D7FA               	bra	u6157
  2471  001FC8                     l398:
  2472                           
  2473                           ;main.c: 174: }
  2474                           ;main.c: 176: if (state == 3){
  2475  001FC8  0E03               	movlw	3
  2476  001FCA  0100               	movlb	0	; () banked
  2477  001FCC  19B1               	xorwf	_state& (0+255),w,b
  2478  001FCE  11B2               	iorwf	(_state+1)& (0+255),w,b
  2479  001FD0  A4D8               	btfss	status,2,c
  2480  001FD2  D0A1               	goto	u4970
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;main.c: 177: initLCD();
  2484  001FD4  EC29  F021         	call	_initLCD	;wreg free
  2485                           
  2486                           ;main.c: 178: printf("Press # to start!");
  2487  001FD8  0EEC               	movlw	low STR_7
  2488  001FDA  0100               	movlb	0	; () banked
  2489  001FDC  6FD4               	movwf	printf@f& (0+255),b
  2490  001FDE  0EFD               	movlw	high STR_7
  2491  001FE0  6FD5               	movwf	(printf@f+1)& (0+255),b
  2492  001FE2  ECC3  F014         	call	_printf	;wreg free
  2493                           
  2494                           ;main.c: 179: _delay((unsigned long)((100)*(32000000/4000.0)));
  2495  001FE6  0E05               	movlw	5
  2496  001FE8  0100               	movlb	0	; () banked
  2497  001FEA  6FF6               	movwf	(??_main+1)& (0+255),b
  2498  001FEC  0E0F               	movlw	15
  2499  001FEE  6FF5               	movwf	??_main& (0+255),b
  2500  001FF0  0EF1               	movlw	241
  2501  001FF2                     u6167:
  2502  001FF2  2EE8               	decfsz	wreg,f,c
  2503  001FF4  D7FE               	bra	u6167
  2504  001FF6  2FF5               	decfsz	??_main& (0+255),f,b
  2505  001FF8  D7FC               	bra	u6167
  2506  001FFA  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2507  001FFC  D7FA               	bra	u6167
  2508                           
  2509                           ;main.c: 180: initLCD();
  2510  001FFE  EC29  F021         	call	_initLCD	;wreg free
  2511                           
  2512                           ;main.c: 181: printf("assembly step:%d",assembly_step);
  2513  002002  0E31               	movlw	low STR_8
  2514  002004  0100               	movlb	0	; () banked
  2515  002006  6FD4               	movwf	printf@f& (0+255),b
  2516  002008  0EFE               	movlw	high STR_8
  2517  00200A  6FD5               	movwf	(printf@f+1)& (0+255),b
  2518  00200C  C0AF  F0D6         	movff	_assembly_step,?_printf+2
  2519  002010  C0B0  F0D7         	movff	_assembly_step+1,?_printf+3
  2520  002014  ECC3  F014         	call	_printf	;wreg free
  2521                           
  2522                           ;main.c: 182: _delay((unsigned long)((200)*(32000000/4000.0)));
  2523  002018  0E09               	movlw	9
  2524  00201A  0100               	movlb	0	; () banked
  2525  00201C  6FF6               	movwf	(??_main+1)& (0+255),b
  2526  00201E  0E1E               	movlw	30
  2527  002020  6FF5               	movwf	??_main& (0+255),b
  2528  002022  0EE4               	movlw	228
  2529  002024                     u6177:
  2530  002024  2EE8               	decfsz	wreg,f,c
  2531  002026  D7FE               	bra	u6177
  2532  002028  2FF5               	decfsz	??_main& (0+255),f,b
  2533  00202A  D7FC               	bra	u6177
  2534  00202C  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2535  00202E  D7FA               	bra	u6177
  2536  002030  F000               	nop	
  2537                           
  2538                           ;main.c: 183: for ( i=0; i<assembly_step; i++){
  2539  002032  0E00               	movlw	0
  2540  002034  0100               	movlb	0	; () banked
  2541  002036  6FBC               	movwf	(_i+1)& (0+255),b
  2542  002038  0E00               	movlw	0
  2543  00203A  6FBB               	movwf	_i& (0+255),b
  2544  00203C  D066               	goto	l400
  2545  00203E                     
  2546                           ; BSR set to: 0
  2547                           ;main.c: 185: initLCD();
  2548                           
  2549                           ; BSR set to: 0
  2550  00203E  EC29  F021         	call	_initLCD	;wreg free
  2551                           
  2552                           ;main.c: 187: printf("step");
  2553  002042  0EE2               	movlw	low STR_9
  2554  002044  0100               	movlb	0	; () banked
  2555  002046  6FD4               	movwf	printf@f& (0+255),b
  2556  002048  0EFF               	movlw	high STR_9
  2557  00204A  6FD5               	movwf	(printf@f+1)& (0+255),b
  2558  00204C  ECC3  F014         	call	_printf	;wreg free
  2559                           
  2560                           ;main.c: 188: printf("%d", i+1);
  2561  002050  0E75               	movlw	low (STR_18+17)
  2562  002052  0100               	movlb	0	; () banked
  2563  002054  6FD4               	movwf	printf@f& (0+255),b
  2564  002056  0EFD               	movlw	high (STR_18+17)
  2565  002058  6FD5               	movwf	(printf@f+1)& (0+255),b
  2566  00205A  0E01               	movlw	1
  2567  00205C  25BB               	addwf	_i& (0+255),w,b
  2568  00205E  6FD6               	movwf	(?_printf+2)& (0+255),b
  2569  002060  0E00               	movlw	0
  2570  002062  21BC               	addwfc	(_i+1)& (0+255),w,b
  2571  002064  6FD7               	movwf	(?_printf+3)& (0+255),b
  2572  002066  ECC3  F014         	call	_printf	;wreg free
  2573                           
  2574                           ;main.c: 189: printf(":");
  2575  00206A  0E71               	movlw	low (STR_36+14)
  2576  00206C  0100               	movlb	0	; () banked
  2577  00206E  6FD4               	movwf	printf@f& (0+255),b
  2578  002070  0EFE               	movlw	high (STR_36+14)
  2579  002072  6FD5               	movwf	(printf@f+1)& (0+255),b
  2580  002074  ECC3  F014         	call	_printf	;wreg free
  2581                           
  2582                           ;main.c: 190: printf("%s", final_set[i]);
  2583  002078  C0BB  F0CE         	movff	_i,___wmul@multiplier
  2584  00207C  C0BC  F0CF         	movff	_i+1,___wmul@multiplier+1
  2585  002080  0E00               	movlw	0
  2586  002082  0100               	movlb	0	; () banked
  2587  002084  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2588  002086  0E05               	movlw	5
  2589  002088  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  2590  00208A  EC4D  F022         	call	___wmul	;wreg free
  2591  00208E  0EBC               	movlw	low _final_set
  2592  002090  0100               	movlb	0	; () banked
  2593  002092  25CE               	addwf	?___wmul& (0+255),w,b
  2594  002094  6FF7               	movwf	_main$2230& (0+255),b
  2595  002096  0E01               	movlw	high _final_set
  2596  002098  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  2597  00209A  6FF8               	movwf	(_main$2230+1)& (0+255),b
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 190: printf("%s", final_set[i]);
  2601  00209C  0EF7               	movlw	low STR_5
  2602  00209E  6FD4               	movwf	printf@f& (0+255),b
  2603  0020A0  0EFF               	movlw	high STR_5
  2604  0020A2  6FD5               	movwf	(printf@f+1)& (0+255),b
  2605  0020A4  C0F7  F0D6         	movff	_main$2230,?_printf+2
  2606  0020A8  C0F8  F0D7         	movff	_main$2230+1,?_printf+3
  2607  0020AC  ECC3  F014         	call	_printf	;wreg free
  2608                           
  2609                           ;main.c: 191: printf(",");
  2610  0020B0  0EFA               	movlw	low STR_13
  2611  0020B2  0100               	movlb	0	; () banked
  2612  0020B4  6FD4               	movwf	printf@f& (0+255),b
  2613  0020B6  0EFF               	movlw	high STR_13
  2614  0020B8  6FD5               	movwf	(printf@f+1)& (0+255),b
  2615  0020BA  ECC3  F014         	call	_printf	;wreg free
  2616                           
  2617                           ;main.c: 192: printf("%d",final_number[i]);
  2618  0020BE  0E75               	movlw	low (STR_18+17)
  2619  0020C0  0100               	movlb	0	; () banked
  2620  0020C2  6FD4               	movwf	printf@f& (0+255),b
  2621  0020C4  0EFD               	movlw	high (STR_18+17)
  2622  0020C6  6FD5               	movwf	(printf@f+1)& (0+255),b
  2623  0020C8  90D8               	bcf	status,0,c
  2624  0020CA  35BB               	rlcf	_i& (0+255),w,b
  2625  0020CC  6ED9               	movwf	fsr2l,c
  2626  0020CE  35BC               	rlcf	(_i+1)& (0+255),w,b
  2627  0020D0  6EDA               	movwf	fsr2h,c
  2628  0020D2  0E50               	movlw	low _final_number
  2629  0020D4  26D9               	addwf	fsr2l,f,c
  2630  0020D6  0E01               	movlw	high _final_number
  2631  0020D8  22DA               	addwfc	fsr2h,f,c
  2632  0020DA  CFDE F0D6          	movff	postinc2,?_printf+2
  2633  0020DE  CFDD F0D7          	movff	postdec2,?_printf+3
  2634  0020E2  ECC3  F014         	call	_printf	;wreg free
  2635                           
  2636                           ;main.c: 193: _delay((unsigned long)((100)*(32000000/4000.0)));
  2637  0020E6  0E05               	movlw	5
  2638  0020E8  0100               	movlb	0	; () banked
  2639  0020EA  6FF6               	movwf	(??_main+1)& (0+255),b
  2640  0020EC  0E0F               	movlw	15
  2641  0020EE  6FF5               	movwf	??_main& (0+255),b
  2642  0020F0  0EF1               	movlw	241
  2643  0020F2                     u6187:
  2644  0020F2  2EE8               	decfsz	wreg,f,c
  2645  0020F4  D7FE               	bra	u6187
  2646  0020F6  2FF5               	decfsz	??_main& (0+255),f,b
  2647  0020F8  D7FC               	bra	u6187
  2648  0020FA  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2649  0020FC  D7FA               	bra	u6187
  2650                           
  2651                           ;main.c: 194: lcdInst(0xC0);;
  2652  0020FE  0EC0               	movlw	192
  2653  002100  ECC6  F022         	call	_lcdInst
  2654  002104  0100               	movlb	0	; () banked
  2655  002106  4BBB               	infsnz	_i& (0+255),f,b
  2656  002108  2BBC               	incf	(_i+1)& (0+255),f,b
  2657  00210A                     l400:
  2658                           
  2659                           ; BSR set to: 0
  2660                           
  2661                           ; BSR set to: 0
  2662  00210A  51AF               	movf	_assembly_step& (0+255),w,b
  2663  00210C  5DBB               	subwf	_i& (0+255),w,b
  2664  00210E  51B0               	movf	(_assembly_step+1)& (0+255),w,b
  2665  002110  59BC               	subwfb	(_i+1)& (0+255),w,b
  2666  002112  A0D8               	btfss	status,0,c
  2667  002114  D794               	goto	l401
  2668  002116                     u4970:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 199: }
  2672                           ;main.c: 200: }
  2673                           ;main.c: 201: if (state == 4){
  2674                           
  2675                           ; BSR set to: 0
  2676                           
  2677                           ; BSR set to: 0
  2678  002116  0E04               	movlw	4
  2679  002118  19B1               	xorwf	_state& (0+255),w,b
  2680  00211A  11B2               	iorwf	(_state+1)& (0+255),w,b
  2681  00211C  A4D8               	btfss	status,2,c
  2682  00211E  D6EA               	goto	l395
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 203: initLCD();
  2686  002120  EC29  F021         	call	_initLCD	;wreg free
  2687                           
  2688                           ;main.c: 206: initLCD();
  2689  002124  EC29  F021         	call	_initLCD	;wreg free
  2690                           
  2691                           ;main.c: 207: printf("change mode 2");
  2692  002128  0EFC               	movlw	low STR_15
  2693  00212A  0100               	movlb	0	; () banked
  2694  00212C  6FD4               	movwf	printf@f& (0+255),b
  2695  00212E  0EFE               	movlw	high STR_15
  2696  002130  6FD5               	movwf	(printf@f+1)& (0+255),b
  2697  002132  ECC3  F014         	call	_printf	;wreg free
  2698                           
  2699                           ;main.c: 212: I2C_init();
  2700  002136  EC21  F022         	call	_I2C_init	;wreg free
  2701                           
  2702                           ;main.c: 214: I2C_Master_Start();
  2703  00213A  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  2704                           
  2705                           ;main.c: 215: I2C_Master_Write(0b11010000);
  2706  00213E  0E00               	movlw	0
  2707  002140  0100               	movlb	0	; () banked
  2708  002142  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2709  002144  0ED0               	movlw	208
  2710  002146  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2711  002148  EC09  F023         	call	_I2C_Master_Write	;wreg free
  2712                           
  2713                           ;main.c: 216: I2C_Master_Write(0x00);
  2714  00214C  0E00               	movlw	0
  2715  00214E  0100               	movlb	0	; () banked
  2716  002150  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2717  002152  0E00               	movlw	0
  2718  002154  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2719  002156  EC09  F023         	call	_I2C_Master_Write	;wreg free
  2720                           
  2721                           ;main.c: 217: I2C_Master_Stop();
  2722  00215A  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  2723                           
  2724                           ;main.c: 220: I2C_Master_Start();
  2725  00215E  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  2726                           
  2727                           ;main.c: 221: I2C_Master_Write(0b11010001);
  2728  002162  0E00               	movlw	0
  2729  002164  0100               	movlb	0	; () banked
  2730  002166  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2731  002168  0ED1               	movlw	209
  2732  00216A  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2733  00216C  EC09  F023         	call	_I2C_Master_Write	;wreg free
  2734                           
  2735                           ;main.c: 222: for(i = 0; i < 6; i++){
  2736  002170  0E00               	movlw	0
  2737  002172  0100               	movlb	0	; () banked
  2738  002174  6FBC               	movwf	(_i+1)& (0+255),b
  2739  002176  0E00               	movlw	0
  2740  002178  6FBB               	movwf	_i& (0+255),b
  2741  00217A                     l6049:
  2742                           
  2743                           ; BSR set to: 0
  2744  00217A  51BC               	movf	(_i+1)& (0+255),w,b
  2745  00217C  E112               	bnz	l6059
  2746  00217E  0E06               	movlw	6
  2747  002180  5DBB               	subwf	_i& (0+255),w,b
  2748  002182  B0D8               	btfsc	status,0,c
  2749  002184  D00E               	goto	u5000
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 223: time[i] = I2C_Master_Read(0);
  2753                           
  2754                           ; BSR set to: 0
  2755                           
  2756                           ; BSR set to: 0
  2757  002186  0E90               	movlw	low _time
  2758  002188  25BB               	addwf	_i& (0+255),w,b
  2759  00218A  6ED9               	movwf	fsr2l,c
  2760  00218C  0E00               	movlw	high _time
  2761  00218E  21BC               	addwfc	(_i+1)& (0+255),w,b
  2762  002190  6EDA               	movwf	fsr2h,c
  2763  002192  0E00               	movlw	0
  2764  002194  EC38  F022         	call	_I2C_Master_Read
  2765  002198  6EDF               	movwf	indf2,c
  2766  00219A  0100               	movlb	0	; () banked
  2767  00219C  4BBB               	infsnz	_i& (0+255),f,b
  2768  00219E  2BBC               	incf	(_i+1)& (0+255),f,b
  2769  0021A0  D7EC               	goto	l6049
  2770  0021A2                     u5000:
  2771  0021A2                     l6059:
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;main.c: 224: }
  2775                           ;main.c: 225: time[6] = I2C_Master_Read(1);
  2776  0021A2  0E01               	movlw	1
  2777  0021A4  EC38  F022         	call	_I2C_Master_Read
  2778  0021A8  0100               	movlb	0	; () banked
  2779  0021AA  6F96               	movwf	(_time+6)& (0+255),b
  2780                           
  2781                           ;main.c: 226: I2C_Master_Stop();
  2782  0021AC  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  2783                           
  2784                           ;main.c: 228: hr_initial = time[2]/16*10+time[2]%16;
  2785  0021B0  C092  F0F5         	movff	_time+2,??_main
  2786  0021B4  0E0F               	movlw	15
  2787  0021B6  0100               	movlb	0	; () banked
  2788  0021B8  17F5               	andwf	??_main& (0+255),f,b
  2789  0021BA  0E00               	movlw	0
  2790  0021BC  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  2791  0021BE  0E10               	movlw	16
  2792  0021C0  6FC8               	movwf	___awdiv@divisor& (0+255),b
  2793  0021C2  C092  F0C6         	movff	_time+2,___awdiv@dividend
  2794  0021C6  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  2795  0021C8  EC3F  F01E         	call	___awdiv	;wreg free
  2796  0021CC  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  2797  0021D0  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  2798  0021D4  0E00               	movlw	0
  2799  0021D6  0100               	movlb	0	; () banked
  2800  0021D8  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2801  0021DA  0E0A               	movlw	10
  2802  0021DC  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  2803  0021DE  EC4D  F022         	call	___wmul	;wreg free
  2804  0021E2  0100               	movlb	0	; () banked
  2805  0021E4  51F5               	movf	??_main& (0+255),w,b
  2806  0021E6  25CE               	addwf	?___wmul& (0+255),w,b
  2807  0021E8  0101               	movlb	1	; () banked
  2808  0021EA  6F6E               	movwf	_hr_initial& (0+255),b
  2809  0021EC  0100               	movlb	0	; () banked
  2810  0021EE  0E00               	movlw	0
  2811  0021F0  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  2812  0021F2  0101               	movlb	1	; () banked
  2813  0021F4  6F6F               	movwf	(_hr_initial+1)& (0+255),b
  2814                           
  2815                           ; BSR set to: 1
  2816                           ;main.c: 229: min_initial = time[1]/16*10 + time[1]%16;
  2817  0021F6  C091  F0F5         	movff	_time+1,??_main
  2818  0021FA  0E0F               	movlw	15
  2819  0021FC  0100               	movlb	0	; () banked
  2820  0021FE  17F5               	andwf	??_main& (0+255),f,b
  2821  002200  0E00               	movlw	0
  2822  002202  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  2823  002204  0E10               	movlw	16
  2824  002206  6FC8               	movwf	___awdiv@divisor& (0+255),b
  2825  002208  C091  F0C6         	movff	_time+1,___awdiv@dividend
  2826  00220C  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  2827  00220E  EC3F  F01E         	call	___awdiv	;wreg free
  2828  002212  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  2829  002216  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  2830  00221A  0E00               	movlw	0
  2831  00221C  0100               	movlb	0	; () banked
  2832  00221E  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2833  002220  0E0A               	movlw	10
  2834  002222  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  2835  002224  EC4D  F022         	call	___wmul	;wreg free
  2836  002228  0100               	movlb	0	; () banked
  2837  00222A  51F5               	movf	??_main& (0+255),w,b
  2838  00222C  25CE               	addwf	?___wmul& (0+255),w,b
  2839  00222E  0101               	movlb	1	; () banked
  2840  002230  6F6C               	movwf	_min_initial& (0+255),b
  2841  002232  0100               	movlb	0	; () banked
  2842  002234  0E00               	movlw	0
  2843  002236  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  2844  002238  0101               	movlb	1	; () banked
  2845  00223A  6F6D               	movwf	(_min_initial+1)& (0+255),b
  2846                           
  2847                           ; BSR set to: 1
  2848                           ;main.c: 230: sec_initial = time[0]/16*10 +time[0]%16;
  2849  00223C  C090  F0F5         	movff	_time,??_main
  2850  002240  0E0F               	movlw	15
  2851  002242  0100               	movlb	0	; () banked
  2852  002244  17F5               	andwf	??_main& (0+255),f,b
  2853  002246  0E00               	movlw	0
  2854  002248  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  2855  00224A  0E10               	movlw	16
  2856  00224C  6FC8               	movwf	___awdiv@divisor& (0+255),b
  2857  00224E  C090  F0C6         	movff	_time,___awdiv@dividend
  2858  002252  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  2859  002254  EC3F  F01E         	call	___awdiv	;wreg free
  2860  002258  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  2861  00225C  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  2862  002260  0E00               	movlw	0
  2863  002262  0100               	movlb	0	; () banked
  2864  002264  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2865  002266  0E0A               	movlw	10
  2866  002268  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  2867  00226A  EC4D  F022         	call	___wmul	;wreg free
  2868  00226E  0100               	movlb	0	; () banked
  2869  002270  51F5               	movf	??_main& (0+255),w,b
  2870  002272  25CE               	addwf	?___wmul& (0+255),w,b
  2871  002274  0101               	movlb	1	; () banked
  2872  002276  6F6A               	movwf	_sec_initial& (0+255),b
  2873  002278  0100               	movlb	0	; () banked
  2874  00227A  0E00               	movlw	0
  2875  00227C  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  2876  00227E  0101               	movlb	1	; () banked
  2877  002280  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 1
  2880                           ;main.c: 234: initVibTimer();
  2881  002282  ECD2  F022         	call	_initVibTimer	;wreg free
  2882                           
  2883                           ;main.c: 235: mode = 2;
  2884  002286  0E00               	movlw	0
  2885  002288  0100               	movlb	0	; () banked
  2886  00228A  6FB8               	movwf	(_mode+1)& (0+255),b
  2887  00228C  0E02               	movlw	2
  2888  00228E  6FB7               	movwf	_mode& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;main.c: 236: printf("start operation");
  2892  002290  0E83               	movlw	low STR_16
  2893  002292  6FD4               	movwf	printf@f& (0+255),b
  2894  002294  0EFE               	movlw	high STR_16
  2895  002296  6FD5               	movwf	(printf@f+1)& (0+255),b
  2896  002298  ECC3  F014         	call	_printf	;wreg free
  2897                           
  2898                           ;main.c: 240: }
  2899                           ;main.c: 242: }
  2900                           ;main.c: 243: generate_compartment_array(assembly_step);
  2901                           
  2902                           ;main.c: 238: break;
  2903  00229C  C0AF  F0C6         	movff	_assembly_step,generate_compartment_array@step
  2904  0022A0  C0B0  F0C7         	movff	_assembly_step+1,generate_compartment_array@step+1
  2905  0022A4  EC2A  F01A         	call	_generate_compartment_array	;wreg free
  2906  0022A8                     l394:
  2907                           
  2908                           ;main.c: 244: }
  2909                           ;main.c: 257: if (mode == 2){
  2910  0022A8  0E02               	movlw	2
  2911  0022AA  0100               	movlb	0	; () banked
  2912  0022AC  19B7               	xorwf	_mode& (0+255),w,b
  2913  0022AE  11B8               	iorwf	(_mode+1)& (0+255),w,b
  2914  0022B0  A4D8               	btfss	status,2,c
  2915  0022B2  D5E4               	goto	l388
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 259: (INTCONbits.GIE = 1);
  2919  0022B4  8EF2               	bsf	intcon,7,c	;volatile
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 260: initLCD();
  2923  0022B6  EC29  F021         	call	_initLCD	;wreg free
  2924                           
  2925                           ;main.c: 261: printf("mode 2");
  2926  0022BA  0E03               	movlw	low (STR_15+7)
  2927  0022BC  0100               	movlb	0	; () banked
  2928  0022BE  6FD4               	movwf	printf@f& (0+255),b
  2929  0022C0  0EFF               	movlw	high (STR_15+7)
  2930  0022C2  6FD5               	movwf	(printf@f+1)& (0+255),b
  2931  0022C4  ECC3  F014         	call	_printf	;wreg free
  2932                           
  2933                           ;main.c: 262: _delay((unsigned long)((100)*(32000000/4000.0)));
  2934  0022C8  0E05               	movlw	5
  2935  0022CA  0100               	movlb	0	; () banked
  2936  0022CC  6FF6               	movwf	(??_main+1)& (0+255),b
  2937  0022CE  0E0F               	movlw	15
  2938  0022D0  6FF5               	movwf	??_main& (0+255),b
  2939  0022D2  0EF1               	movlw	241
  2940  0022D4                     u6197:
  2941  0022D4  2EE8               	decfsz	wreg,f,c
  2942  0022D6  D7FE               	bra	u6197
  2943  0022D8  2FF5               	decfsz	??_main& (0+255),f,b
  2944  0022DA  D7FC               	bra	u6197
  2945  0022DC  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  2946  0022DE  D7FA               	bra	u6197
  2947                           
  2948                           ;main.c: 266: I2C_init();
  2949  0022E0  EC21  F022         	call	_I2C_init	;wreg free
  2950                           
  2951                           ;main.c: 268: LATCbits.LATC0 = 1;
  2952  0022E4  808B               	bsf	3979,0,c	;volatile
  2953                           
  2954                           ;main.c: 269: TRISCbits.RC0 = 0;
  2955  0022E6  9094               	bcf	3988,0,c	;volatile
  2956                           
  2957                           ;main.c: 271: INT1IE = 0;
  2958  0022E8  96F0               	bcf	intcon3,3,c	;volatile
  2959                           
  2960                           ;main.c: 272: RBIE = 1;
  2961  0022EA  86F2               	bsf	intcon,3,c	;volatile
  2962                           
  2963                           ;main.c: 275: initLCD();
  2964  0022EC  EC29  F021         	call	_initLCD	;wreg free
  2965                           
  2966                           ;main.c: 276: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  2967  0022F0  0E64               	movlw	low STR_18
  2968  0022F2  0100               	movlb	0	; () banked
  2969  0022F4  6FD4               	movwf	printf@f& (0+255),b
  2970  0022F6  0EFD               	movlw	high STR_18
  2971  0022F8  6FD5               	movwf	(printf@f+1)& (0+255),b
  2972  0022FA  C0AD  F0D6         	movff	_B_counter,?_printf+2
  2973  0022FE  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  2974  002302  C0A9  F0D8         	movff	_N_counter,?_printf+4
  2975  002306  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  2976  00230A  C0AB  F0DA         	movff	_S_counter,?_printf+6
  2977  00230E  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  2978  002312  C0A7  F0DC         	movff	_W_counter,?_printf+8
  2979  002316  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  2980  00231A  ECC3  F014         	call	_printf	;wreg free
  2981                           
  2982                           ;main.c: 280: TRISBbits.RB5 = 1;
  2983  00231E  8A93               	bsf	3987,5,c	;volatile
  2984                           
  2985                           ;main.c: 281: TRISBbits.RB7 = 1;
  2986  002320  8E93               	bsf	3987,7,c	;volatile
  2987                           
  2988                           ;main.c: 282: TRISBbits.RB6 = 1;
  2989  002322  8C93               	bsf	3987,6,c	;volatile
  2990                           
  2991                           ;main.c: 283: TRISBbits.RB4 = 1;
  2992  002324  8893               	bsf	3987,4,c	;volatile
  2993                           
  2994                           ;main.c: 286: I2C_sendData(rotate_gear);
  2995  002326  0100               	movlb	0	; () banked
  2996  002328  51FE               	movf	_rotate_gear& (0+255),w,b
  2997  00232A  EC61  F022         	call	_I2C_sendData
  2998                           
  2999                           ;main.c: 291: openHandle_data = '1';
  3000  00232E  0E31               	movlw	49
  3001  002330  0100               	movlb	0	; () banked
  3002  002332  6FBF               	movwf	_openHandle_data& (0+255),b
  3003                           
  3004                           ;main.c: 292: while(openHandle_data != '0'){
  3005  002334  D010               	goto	l409
  3006  002336                     
  3007                           ; BSR set to: 0
  3008                           ;main.c: 293: I2C_Master_Start();
  3009                           
  3010                           ; BSR set to: 0
  3011  002336  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  3012                           
  3013                           ;main.c: 294: I2C_Master_Write(0b00010001);
  3014  00233A  0E00               	movlw	0
  3015  00233C  0100               	movlb	0	; () banked
  3016  00233E  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3017  002340  0E11               	movlw	17
  3018  002342  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3019  002344  EC09  F023         	call	_I2C_Master_Write	;wreg free
  3020                           
  3021                           ;main.c: 295: openHandle_data = I2C_Master_Read(1);
  3022  002348  0E01               	movlw	1
  3023  00234A  EC38  F022         	call	_I2C_Master_Read
  3024  00234E  0100               	movlb	0	; () banked
  3025  002350  6FBF               	movwf	_openHandle_data& (0+255),b
  3026                           
  3027                           ;main.c: 296: I2C_Master_Stop();
  3028  002352  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  3029  002356                     l409:
  3030  002356  0E30               	movlw	48
  3031  002358  0100               	movlb	0	; () banked
  3032  00235A  19BF               	xorwf	_openHandle_data& (0+255),w,b
  3033  00235C  A4D8               	btfss	status,2,c
  3034  00235E  D7EB               	goto	l410
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;main.c: 299: }
  3038                           ;main.c: 300: initLCD();
  3039                           
  3040                           ; BSR set to: 0
  3041  002360  EC29  F021         	call	_initLCD	;wreg free
  3042                           
  3043                           ;main.c: 301: printf("C1 is found");
  3044  002364  0E41               	movlw	low STR_19
  3045  002366  0100               	movlb	0	; () banked
  3046  002368  6FD4               	movwf	printf@f& (0+255),b
  3047  00236A  0EFF               	movlw	high STR_19
  3048  00236C  6FD5               	movwf	(printf@f+1)& (0+255),b
  3049  00236E  ECC3  F014         	call	_printf	;wreg free
  3050                           
  3051                           ;main.c: 302: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3052  002372  0E80               	movlw	128
  3053  002374  ECC6  F022         	call	_lcdInst
  3054  002378  0E34               	movlw	52
  3055  00237A  0100               	movlb	0	; () banked
  3056  00237C  6FF5               	movwf	??_main& (0+255),b
  3057  00237E  0EF1               	movlw	241
  3058  002380                     u6207:
  3059  002380  2EE8               	decfsz	wreg,f,c
  3060  002382  D7FE               	bra	u6207
  3061  002384  2FF5               	decfsz	??_main& (0+255),f,b
  3062  002386  D7FC               	bra	u6207
  3063  002388  D000               	nop2	
  3064                           
  3065                           ;main.c: 308: I2C_init();
  3066  00238A  EC21  F022         	call	_I2C_init	;wreg free
  3067                           
  3068                           ;main.c: 309: generate_compartment_array(assembly_step);
  3069  00238E  C0AF  F0C6         	movff	_assembly_step,generate_compartment_array@step
  3070  002392  C0B0  F0C7         	movff	_assembly_step+1,generate_compartment_array@step+1
  3071  002396  EC2A  F01A         	call	_generate_compartment_array	;wreg free
  3072                           
  3073                           ;main.c: 310: int compart_id = 0;
  3074  00239A  0E00               	movlw	0
  3075  00239C  0100               	movlb	0	; () banked
  3076  00239E  6FFA               	movwf	(main@compart_id+1)& (0+255),b
  3077  0023A0  0E00               	movlw	0
  3078  0023A2  6FF9               	movwf	main@compart_id& (0+255),b
  3079                           
  3080                           ;main.c: 311: while(NeedToCloseLid != 1 && compart_id < 8){
  3081  0023A4  D0AC               	goto	l412
  3082  0023A6                     
  3083                           ; BSR set to: 0
  3084                           ;main.c: 312: initLCD();
  3085                           
  3086                           ; BSR set to: 0
  3087  0023A6  EC29  F021         	call	_initLCD	;wreg free
  3088                           
  3089                           ;main.c: 313: printf("processing C%d",compart_id);
  3090  0023AA  0EC0               	movlw	low STR_20
  3091  0023AC  0100               	movlb	0	; () banked
  3092  0023AE  6FD4               	movwf	printf@f& (0+255),b
  3093  0023B0  0EFE               	movlw	high STR_20
  3094  0023B2  6FD5               	movwf	(printf@f+1)& (0+255),b
  3095  0023B4  C0F9  F0D6         	movff	main@compart_id,?_printf+2
  3096  0023B8  C0FA  F0D7         	movff	main@compart_id+1,?_printf+3
  3097  0023BC  ECC3  F014         	call	_printf	;wreg free
  3098                           
  3099                           ;main.c: 316: if (compartment_array[compart_id] == 1){
  3100  0023C0  90D8               	bcf	status,0,c
  3101  0023C2  0100               	movlb	0	; () banked
  3102  0023C4  35F9               	rlcf	main@compart_id& (0+255),w,b
  3103  0023C6  6ED9               	movwf	fsr2l,c
  3104  0023C8  35FA               	rlcf	(main@compart_id+1)& (0+255),w,b
  3105  0023CA  6EDA               	movwf	fsr2h,c
  3106  0023CC  0E80               	movlw	low _compartment_array
  3107  0023CE  26D9               	addwf	fsr2l,f,c
  3108  0023D0  0E00               	movlw	high _compartment_array
  3109  0023D2  22DA               	addwfc	fsr2h,f,c
  3110  0023D4  04DE               	decf	postinc2,w,c
  3111  0023D6  10DE               	iorwf	postinc2,w,c
  3112  0023D8  A4D8               	btfss	status,2,c
  3113  0023DA  D05B               	goto	l418
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 317: B_counter = 0;
  3117  0023DC  0E00               	movlw	0
  3118  0023DE  6FAE               	movwf	(_B_counter+1)& (0+255),b
  3119  0023E0  0E00               	movlw	0
  3120  0023E2  6FAD               	movwf	_B_counter& (0+255),b
  3121                           
  3122                           ;main.c: 318: N_counter = 0;
  3123  0023E4  0E00               	movlw	0
  3124  0023E6  6FAA               	movwf	(_N_counter+1)& (0+255),b
  3125  0023E8  0E00               	movlw	0
  3126  0023EA  6FA9               	movwf	_N_counter& (0+255),b
  3127                           
  3128                           ;main.c: 319: S_counter = 0;
  3129  0023EC  0E00               	movlw	0
  3130  0023EE  6FAC               	movwf	(_S_counter+1)& (0+255),b
  3131  0023F0  0E00               	movlw	0
  3132  0023F2  6FAB               	movwf	_S_counter& (0+255),b
  3133                           
  3134                           ;main.c: 320: W_counter = 0;
  3135  0023F4  0E00               	movlw	0
  3136  0023F6  6FA8               	movwf	(_W_counter+1)& (0+255),b
  3137  0023F8  0E00               	movlw	0
  3138  0023FA  6FA7               	movwf	_W_counter& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 322: if (NeedToCloseLid != 1)
  3142  0023FC  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3143  0023FE  B4D8               	btfsc	status,2,c
  3144  002400  D00F               	goto	l415
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 323: Bolt_dispense(B_array[compart_id]);
  3148  002402  90D8               	bcf	status,0,c
  3149  002404  35F9               	rlcf	main@compart_id& (0+255),w,b
  3150  002406  6ED9               	movwf	fsr2l,c
  3151  002408  35FA               	rlcf	(main@compart_id+1)& (0+255),w,b
  3152  00240A  6EDA               	movwf	fsr2h,c
  3153  00240C  0E30               	movlw	low _B_array
  3154  00240E  26D9               	addwf	fsr2l,f,c
  3155  002410  0E01               	movlw	high _B_array
  3156  002412  22DA               	addwfc	fsr2h,f,c
  3157  002414  CFDE F0F0          	movff	postinc2,Bolt_dispense@B_max
  3158  002418  CFDD F0F1          	movff	postdec2,Bolt_dispense@B_max+1
  3159  00241C  ECCD  F01F         	call	_Bolt_dispense	;wreg free
  3160  002420                     l415:
  3161                           
  3162                           ;main.c: 324: if (NeedToCloseLid != 1)
  3163  002420  0100               	movlb	0	; () banked
  3164  002422  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3165  002424  B4D8               	btfsc	status,2,c
  3166  002426  D00F               	goto	l416
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 325: Nut_dispense(N_array[compart_id]);
  3170  002428  90D8               	bcf	status,0,c
  3171  00242A  35F9               	rlcf	main@compart_id& (0+255),w,b
  3172  00242C  6ED9               	movwf	fsr2l,c
  3173  00242E  35FA               	rlcf	(main@compart_id+1)& (0+255),w,b
  3174  002430  6EDA               	movwf	fsr2h,c
  3175  002432  0E10               	movlw	low _N_array
  3176  002434  26D9               	addwf	fsr2l,f,c
  3177  002436  0E01               	movlw	high _N_array
  3178  002438  22DA               	addwfc	fsr2h,f,c
  3179  00243A  CFDE F0F0          	movff	postinc2,Nut_dispense@N_max
  3180  00243E  CFDD F0F1          	movff	postdec2,Nut_dispense@N_max+1
  3181  002442  ECB6  F01D         	call	_Nut_dispense	;wreg free
  3182  002446                     l416:
  3183                           
  3184                           ;main.c: 326: if (NeedToCloseLid != 1)
  3185  002446  0100               	movlb	0	; () banked
  3186  002448  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3187  00244A  B4D8               	btfsc	status,2,c
  3188  00244C  D00F               	goto	l417
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 327: Spacer_dispense(S_array[compart_id]);
  3192  00244E  90D8               	bcf	status,0,c
  3193  002450  35F9               	rlcf	main@compart_id& (0+255),w,b
  3194  002452  6ED9               	movwf	fsr2l,c
  3195  002454  35FA               	rlcf	(main@compart_id+1)& (0+255),w,b
  3196  002456  6EDA               	movwf	fsr2h,c
  3197  002458  0E20               	movlw	low _S_array
  3198  00245A  26D9               	addwf	fsr2l,f,c
  3199  00245C  0E01               	movlw	high _S_array
  3200  00245E  22DA               	addwfc	fsr2h,f,c
  3201  002460  CFDE F0F0          	movff	postinc2,Spacer_dispense@S_max
  3202  002464  CFDD F0F1          	movff	postdec2,Spacer_dispense@S_max+1
  3203  002468  EC71  F01D         	call	_Spacer_dispense	;wreg free
  3204  00246C                     l417:
  3205                           
  3206                           ;main.c: 328: if (NeedToCloseLid != 1)
  3207  00246C  0100               	movlb	0	; () banked
  3208  00246E  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3209  002470  B4D8               	btfsc	status,2,c
  3210  002472  D00F               	goto	l418
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;main.c: 329: Washer_dispense(W_array[compart_id]);
  3214  002474  90D8               	bcf	status,0,c
  3215  002476  35F9               	rlcf	main@compart_id& (0+255),w,b
  3216  002478  6ED9               	movwf	fsr2l,c
  3217  00247A  35FA               	rlcf	(main@compart_id+1)& (0+255),w,b
  3218  00247C  6EDA               	movwf	fsr2h,c
  3219  00247E  0E00               	movlw	low _W_array
  3220  002480  26D9               	addwf	fsr2l,f,c
  3221  002482  0E01               	movlw	high _W_array
  3222  002484  22DA               	addwfc	fsr2h,f,c
  3223  002486  CFDE F0F0          	movff	postinc2,Washer_dispense@W_max
  3224  00248A  CFDD F0F1          	movff	postdec2,Washer_dispense@W_max+1
  3225  00248E  EC2C  F01D         	call	_Washer_dispense	;wreg free
  3226  002492                     l418:
  3227                           
  3228                           ;main.c: 330: }
  3229                           ;main.c: 332: printf("done C%d",compart_id);
  3230  002492  0E97               	movlw	low STR_21
  3231  002494  0100               	movlb	0	; () banked
  3232  002496  6FD4               	movwf	printf@f& (0+255),b
  3233  002498  0EFF               	movlw	high STR_21
  3234  00249A  6FD5               	movwf	(printf@f+1)& (0+255),b
  3235  00249C  C0F9  F0D6         	movff	main@compart_id,?_printf+2
  3236  0024A0  C0FA  F0D7         	movff	main@compart_id+1,?_printf+3
  3237  0024A4  ECC3  F014         	call	_printf	;wreg free
  3238                           
  3239                           ;main.c: 333: if (NeedToCloseLid != 1 && compart_id < 7){
  3240  0024A8  0100               	movlb	0	; () banked
  3241  0024AA  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3242  0024AC  B4D8               	btfsc	status,2,c
  3243  0024AE  D025               	goto	u5110
  3244                           
  3245                           ; BSR set to: 0
  3246  0024B0  BFFA               	btfsc	(main@compart_id+1)& (0+255),7,b
  3247  0024B2  D006               	goto	u5090
  3248  0024B4  51FA               	movf	(main@compart_id+1)& (0+255),w,b
  3249  0024B6  E121               	bnz	l6167
  3250  0024B8  0E07               	movlw	7
  3251  0024BA  5DF9               	subwf	main@compart_id& (0+255),w,b
  3252  0024BC  B0D8               	btfsc	status,0,c
  3253  0024BE  D01D               	goto	u5110
  3254  0024C0                     u5090:
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 334: I2C_sendData(rotate_1compartment);
  3258  0024C0  51FD               	movf	_rotate_1compartment& (0+255),w,b
  3259  0024C2  EC61  F022         	call	_I2C_sendData
  3260                           
  3261                           ;main.c: 335: while(NeedToCloseLid != 1){
  3262  0024C6  D015               	goto	l422
  3263  0024C8                     
  3264                           ;main.c: 336: I2C_Master_Start();
  3265  0024C8  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  3266                           
  3267                           ;main.c: 337: I2C_Master_Write(0b00010001);
  3268  0024CC  0E00               	movlw	0
  3269  0024CE  0100               	movlb	0	; () banked
  3270  0024D0  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3271  0024D2  0E11               	movlw	17
  3272  0024D4  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3273  0024D6  EC09  F023         	call	_I2C_Master_Write	;wreg free
  3274                           
  3275                           ;main.c: 338: openHandle_data = I2C_Master_Read(1);
  3276  0024DA  0E01               	movlw	1
  3277  0024DC  EC38  F022         	call	_I2C_Master_Read
  3278  0024E0  0100               	movlb	0	; () banked
  3279  0024E2  6FBF               	movwf	_openHandle_data& (0+255),b
  3280                           
  3281                           ;main.c: 339: I2C_Master_Stop();
  3282  0024E4  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  3283                           
  3284                           ;main.c: 340: if (openHandle_data == '1'){
  3285  0024E8  0E31               	movlw	49
  3286  0024EA  0100               	movlb	0	; () banked
  3287  0024EC  19BF               	xorwf	_openHandle_data& (0+255),w,b
  3288  0024EE  B4D8               	btfsc	status,2,c
  3289  0024F0  D004               	goto	u5110
  3290  0024F2                     l422:
  3291                           
  3292                           ; BSR set to: 0
  3293                           
  3294                           ; BSR set to: 0
  3295  0024F2  0100               	movlb	0	; () banked
  3296  0024F4  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3297  0024F6  A4D8               	btfss	status,2,c
  3298  0024F8  D7E7               	goto	l421
  3299  0024FA                     u5110:
  3300  0024FA                     l6167:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 343: }
  3304                           ;main.c: 344: }
  3305                           ;main.c: 345: }
  3306                           ;main.c: 346: compart_id ++;
  3307  0024FA  4BF9               	infsnz	main@compart_id& (0+255),f,b
  3308  0024FC  2BFA               	incf	(main@compart_id+1)& (0+255),f,b
  3309  0024FE                     l412:
  3310                           
  3311                           ; BSR set to: 0
  3312                           
  3313                           ; BSR set to: 0
  3314  0024FE  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3315  002500  B4D8               	btfsc	status,2,c
  3316  002502  D008               	goto	u5130
  3317                           
  3318                           ; BSR set to: 0
  3319  002504  BFFA               	btfsc	(main@compart_id+1)& (0+255),7,b
  3320  002506  D74F               	goto	l413
  3321  002508  51FA               	movf	(main@compart_id+1)& (0+255),w,b
  3322  00250A  E104               	bnz	l6173
  3323  00250C  0E08               	movlw	8
  3324  00250E  5DF9               	subwf	main@compart_id& (0+255),w,b
  3325  002510  A0D8               	btfss	status,0,c
  3326  002512  D749               	goto	l413
  3327  002514                     u5130:
  3328  002514                     l6173:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 347: }
  3332                           ;main.c: 353: I2C_sendData(close_handle);
  3333  002514  51FB               	movf	_close_handle& (0+255),w,b
  3334  002516  EC61  F022         	call	_I2C_sendData
  3335                           
  3336                           ;main.c: 356: _delay((unsigned long)((2500)*(32000000/4000.0)));
  3337  00251A  0E66               	movlw	102
  3338  00251C  0100               	movlb	0	; () banked
  3339  00251E  6FF6               	movwf	(??_main+1)& (0+255),b
  3340  002520  0E76               	movlw	118
  3341  002522  6FF5               	movwf	??_main& (0+255),b
  3342  002524  0EC1               	movlw	193
  3343  002526                     u6217:
  3344  002526  2EE8               	decfsz	wreg,f,c
  3345  002528  D7FE               	bra	u6217
  3346  00252A  2FF5               	decfsz	??_main& (0+255),f,b
  3347  00252C  D7FC               	bra	u6217
  3348  00252E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3349  002530  D7FA               	bra	u6217
  3350                           
  3351                           ;main.c: 360: I2C_sendData(servo_ramp);
  3352  002532  0100               	movlb	0	; () banked
  3353  002534  51FC               	movf	_servo_ramp& (0+255),w,b
  3354  002536  EC61  F022         	call	_I2C_sendData
  3355                           
  3356                           ;main.c: 363: _delay((unsigned long)((20)*(32000000/4000.0)));
  3357  00253A  0ED0               	movlw	208
  3358  00253C  0100               	movlb	0	; () banked
  3359  00253E  6FF5               	movwf	??_main& (0+255),b
  3360  002540  0EC9               	movlw	201
  3361  002542                     u6227:
  3362  002542  2EE8               	decfsz	wreg,f,c
  3363  002544  D7FE               	bra	u6227
  3364  002546  2FF5               	decfsz	??_main& (0+255),f,b
  3365  002548  D7FC               	bra	u6227
  3366  00254A  D000               	nop2	
  3367                           
  3368                           ;main.c: 364: if (EndOfProgram != 1){
  3369  00254C  0100               	movlb	0	; () banked
  3370  00254E  05BE               	decf	_EndOfProgram& (0+255),w,b
  3371  002550  B4D8               	btfsc	status,2,c
  3372  002552  D006               	goto	l427
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 365: all_remain(spacingTime);
  3376  002554  C1F1  F0F0         	movff	_spacingTime,all_remain@time
  3377  002558  C1F2  F0F1         	movff	_spacingTime+1,all_remain@time+1
  3378  00255C  EC5C  F01B         	call	_all_remain	;wreg free
  3379  002560                     l427:
  3380                           
  3381                           ;main.c: 366: }
  3382                           ;main.c: 393: initLCD();
  3383  002560  EC29  F021         	call	_initLCD	;wreg free
  3384                           
  3385                           ;main.c: 394: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3386  002564  0E80               	movlw	128
  3387  002566  ECC6  F022         	call	_lcdInst
  3388  00256A  0E34               	movlw	52
  3389  00256C  0100               	movlb	0	; () banked
  3390  00256E  6FF5               	movwf	??_main& (0+255),b
  3391  002570  0EF1               	movlw	241
  3392  002572                     u6237:
  3393  002572  2EE8               	decfsz	wreg,f,c
  3394  002574  D7FE               	bra	u6237
  3395  002576  2FF5               	decfsz	??_main& (0+255),f,b
  3396  002578  D7FC               	bra	u6237
  3397  00257A  D000               	nop2	
  3398                           
  3399                           ;main.c: 395: printf("Terminate!");
  3400  00257C  0E65               	movlw	low STR_22
  3401  00257E  0100               	movlb	0	; () banked
  3402  002580  6FD4               	movwf	printf@f& (0+255),b
  3403  002582  0EFF               	movlw	high STR_22
  3404  002584  6FD5               	movwf	(printf@f+1)& (0+255),b
  3405  002586  ECC3  F014         	call	_printf	;wreg free
  3406                           
  3407                           ;main.c: 396: _delay((unsigned long)((500)*(32000000/4000.0)));
  3408  00258A  0E15               	movlw	21
  3409  00258C  0100               	movlb	0	; () banked
  3410  00258E  6FF6               	movwf	(??_main+1)& (0+255),b
  3411  002590  0E4B               	movlw	75
  3412  002592  6FF5               	movwf	??_main& (0+255),b
  3413  002594  0EBE               	movlw	190
  3414  002596                     u6247:
  3415  002596  2EE8               	decfsz	wreg,f,c
  3416  002598  D7FE               	bra	u6247
  3417  00259A  2FF5               	decfsz	??_main& (0+255),f,b
  3418  00259C  D7FC               	bra	u6247
  3419  00259E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3420  0025A0  D7FA               	bra	u6247
  3421  0025A2  F000               	nop	
  3422                           
  3423                           ;main.c: 399: I2C_init();
  3424  0025A4  EC21  F022         	call	_I2C_init	;wreg free
  3425                           
  3426                           ;main.c: 401: I2C_Master_Start();
  3427  0025A8  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  3428                           
  3429                           ;main.c: 402: I2C_Master_Write(0b11010000);
  3430  0025AC  0E00               	movlw	0
  3431  0025AE  0100               	movlb	0	; () banked
  3432  0025B0  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3433  0025B2  0ED0               	movlw	208
  3434  0025B4  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3435  0025B6  EC09  F023         	call	_I2C_Master_Write	;wreg free
  3436                           
  3437                           ;main.c: 403: I2C_Master_Write(0x00);
  3438  0025BA  0E00               	movlw	0
  3439  0025BC  0100               	movlb	0	; () banked
  3440  0025BE  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3441  0025C0  0E00               	movlw	0
  3442  0025C2  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3443  0025C4  EC09  F023         	call	_I2C_Master_Write	;wreg free
  3444                           
  3445                           ;main.c: 404: I2C_Master_Stop();
  3446  0025C8  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  3447                           
  3448                           ;main.c: 407: I2C_Master_Start();
  3449  0025CC  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  3450                           
  3451                           ;main.c: 408: I2C_Master_Write(0b11010001);
  3452  0025D0  0E00               	movlw	0
  3453  0025D2  0100               	movlb	0	; () banked
  3454  0025D4  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3455  0025D6  0ED1               	movlw	209
  3456  0025D8  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3457  0025DA  EC09  F023         	call	_I2C_Master_Write	;wreg free
  3458                           
  3459                           ;main.c: 409: for(i = 0; i < 6; i++){
  3460  0025DE  0E00               	movlw	0
  3461  0025E0  0100               	movlb	0	; () banked
  3462  0025E2  6FBC               	movwf	(_i+1)& (0+255),b
  3463  0025E4  0E00               	movlw	0
  3464  0025E6  6FBB               	movwf	_i& (0+255),b
  3465  0025E8                     l6207:
  3466                           
  3467                           ; BSR set to: 0
  3468  0025E8  51BC               	movf	(_i+1)& (0+255),w,b
  3469  0025EA  E112               	bnz	l6217
  3470  0025EC  0E06               	movlw	6
  3471  0025EE  5DBB               	subwf	_i& (0+255),w,b
  3472  0025F0  B0D8               	btfsc	status,0,c
  3473  0025F2  D00E               	goto	u5160
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;main.c: 410: time[i] = I2C_Master_Read(0);
  3477                           
  3478                           ; BSR set to: 0
  3479                           
  3480                           ; BSR set to: 0
  3481  0025F4  0E90               	movlw	low _time
  3482  0025F6  25BB               	addwf	_i& (0+255),w,b
  3483  0025F8  6ED9               	movwf	fsr2l,c
  3484  0025FA  0E00               	movlw	high _time
  3485  0025FC  21BC               	addwfc	(_i+1)& (0+255),w,b
  3486  0025FE  6EDA               	movwf	fsr2h,c
  3487  002600  0E00               	movlw	0
  3488  002602  EC38  F022         	call	_I2C_Master_Read
  3489  002606  6EDF               	movwf	indf2,c
  3490  002608  0100               	movlb	0	; () banked
  3491  00260A  4BBB               	infsnz	_i& (0+255),f,b
  3492  00260C  2BBC               	incf	(_i+1)& (0+255),f,b
  3493  00260E  D7EC               	goto	l6207
  3494  002610                     u5160:
  3495  002610                     l6217:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 411: }
  3499                           ;main.c: 412: time[6] = I2C_Master_Read(1);
  3500  002610  0E01               	movlw	1
  3501  002612  EC38  F022         	call	_I2C_Master_Read
  3502  002616  0100               	movlb	0	; () banked
  3503  002618  6F96               	movwf	(_time+6)& (0+255),b
  3504                           
  3505                           ;main.c: 413: I2C_Master_Stop();
  3506  00261A  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  3507                           
  3508                           ;main.c: 415: hr_final = time[2]/16*10+time[2]%16;
  3509  00261E  C092  F0F5         	movff	_time+2,??_main
  3510  002622  0E0F               	movlw	15
  3511  002624  0100               	movlb	0	; () banked
  3512  002626  17F5               	andwf	??_main& (0+255),f,b
  3513  002628  0E00               	movlw	0
  3514  00262A  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3515  00262C  0E10               	movlw	16
  3516  00262E  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3517  002630  C092  F0C6         	movff	_time+2,___awdiv@dividend
  3518  002634  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3519  002636  EC3F  F01E         	call	___awdiv	;wreg free
  3520  00263A  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3521  00263E  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3522  002642  0E00               	movlw	0
  3523  002644  0100               	movlb	0	; () banked
  3524  002646  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3525  002648  0E0A               	movlw	10
  3526  00264A  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3527  00264C  EC4D  F022         	call	___wmul	;wreg free
  3528  002650  0100               	movlb	0	; () banked
  3529  002652  51F5               	movf	??_main& (0+255),w,b
  3530  002654  25CE               	addwf	?___wmul& (0+255),w,b
  3531  002656  0101               	movlb	1	; () banked
  3532  002658  6F66               	movwf	_hr_final& (0+255),b
  3533  00265A  0100               	movlb	0	; () banked
  3534  00265C  0E00               	movlw	0
  3535  00265E  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3536  002660  0101               	movlb	1	; () banked
  3537  002662  6F67               	movwf	(_hr_final+1)& (0+255),b
  3538                           
  3539                           ; BSR set to: 1
  3540                           ;main.c: 416: min_final = time[1]/16*10 + time[1]%16;
  3541  002664  C091  F0F5         	movff	_time+1,??_main
  3542  002668  0E0F               	movlw	15
  3543  00266A  0100               	movlb	0	; () banked
  3544  00266C  17F5               	andwf	??_main& (0+255),f,b
  3545  00266E  0E00               	movlw	0
  3546  002670  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3547  002672  0E10               	movlw	16
  3548  002674  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3549  002676  C091  F0C6         	movff	_time+1,___awdiv@dividend
  3550  00267A  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3551  00267C  EC3F  F01E         	call	___awdiv	;wreg free
  3552  002680  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3553  002684  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3554  002688  0E00               	movlw	0
  3555  00268A  0100               	movlb	0	; () banked
  3556  00268C  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3557  00268E  0E0A               	movlw	10
  3558  002690  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3559  002692  EC4D  F022         	call	___wmul	;wreg free
  3560  002696  0100               	movlb	0	; () banked
  3561  002698  51F5               	movf	??_main& (0+255),w,b
  3562  00269A  25CE               	addwf	?___wmul& (0+255),w,b
  3563  00269C  0101               	movlb	1	; () banked
  3564  00269E  6F64               	movwf	_min_final& (0+255),b
  3565  0026A0  0100               	movlb	0	; () banked
  3566  0026A2  0E00               	movlw	0
  3567  0026A4  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3568  0026A6  0101               	movlb	1	; () banked
  3569  0026A8  6F65               	movwf	(_min_final+1)& (0+255),b
  3570                           
  3571                           ; BSR set to: 1
  3572                           ;main.c: 417: sec_final = time[0]/16*10 + time[0]%16;
  3573  0026AA  C090  F0F5         	movff	_time,??_main
  3574  0026AE  0E0F               	movlw	15
  3575  0026B0  0100               	movlb	0	; () banked
  3576  0026B2  17F5               	andwf	??_main& (0+255),f,b
  3577  0026B4  0E00               	movlw	0
  3578  0026B6  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3579  0026B8  0E10               	movlw	16
  3580  0026BA  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3581  0026BC  C090  F0C6         	movff	_time,___awdiv@dividend
  3582  0026C0  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3583  0026C2  EC3F  F01E         	call	___awdiv	;wreg free
  3584  0026C6  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3585  0026CA  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3586  0026CE  0E00               	movlw	0
  3587  0026D0  0100               	movlb	0	; () banked
  3588  0026D2  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3589  0026D4  0E0A               	movlw	10
  3590  0026D6  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3591  0026D8  EC4D  F022         	call	___wmul	;wreg free
  3592  0026DC  0100               	movlb	0	; () banked
  3593  0026DE  51F5               	movf	??_main& (0+255),w,b
  3594  0026E0  25CE               	addwf	?___wmul& (0+255),w,b
  3595  0026E2  0101               	movlb	1	; () banked
  3596  0026E4  6F62               	movwf	_sec_final& (0+255),b
  3597  0026E6  0100               	movlb	0	; () banked
  3598  0026E8  0E00               	movlw	0
  3599  0026EA  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3600  0026EC  0101               	movlb	1	; () banked
  3601  0026EE  6F63               	movwf	(_sec_final+1)& (0+255),b
  3602                           
  3603                           ; BSR set to: 1
  3604                           ;main.c: 422: initLCD();
  3605  0026F0  EC29  F021         	call	_initLCD	;wreg free
  3606                           
  3607                           ;main.c: 423: printf("Terminate!");
  3608  0026F4  0E65               	movlw	low STR_22
  3609  0026F6  0100               	movlb	0	; () banked
  3610  0026F8  6FD4               	movwf	printf@f& (0+255),b
  3611  0026FA  0EFF               	movlw	high STR_22
  3612  0026FC  6FD5               	movwf	(printf@f+1)& (0+255),b
  3613  0026FE  ECC3  F014         	call	_printf	;wreg free
  3614                           
  3615                           ;main.c: 424: _delay((unsigned long)((500)*(32000000/4000.0)));
  3616  002702  0E15               	movlw	21
  3617  002704  0100               	movlb	0	; () banked
  3618  002706  6FF6               	movwf	(??_main+1)& (0+255),b
  3619  002708  0E4B               	movlw	75
  3620  00270A  6FF5               	movwf	??_main& (0+255),b
  3621  00270C  0EBE               	movlw	190
  3622  00270E                     u6257:
  3623  00270E  2EE8               	decfsz	wreg,f,c
  3624  002710  D7FE               	bra	u6257
  3625  002712  2FF5               	decfsz	??_main& (0+255),f,b
  3626  002714  D7FC               	bra	u6257
  3627  002716  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3628  002718  D7FA               	bra	u6257
  3629  00271A  F000               	nop	
  3630                           
  3631                           ;main.c: 425: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3632  00271C  0E80               	movlw	128
  3633  00271E  ECC6  F022         	call	_lcdInst
  3634  002722  0E34               	movlw	52
  3635  002724  0100               	movlb	0	; () banked
  3636  002726  6FF5               	movwf	??_main& (0+255),b
  3637  002728  0EF1               	movlw	241
  3638  00272A                     u6267:
  3639  00272A  2EE8               	decfsz	wreg,f,c
  3640  00272C  D7FE               	bra	u6267
  3641  00272E  2FF5               	decfsz	??_main& (0+255),f,b
  3642  002730  D7FC               	bra	u6267
  3643  002732  D000               	nop2	
  3644                           
  3645                           ;main.c: 432: printf("Bolt_remain:%d",B_remain);
  3646  002734  0EB1               	movlw	low STR_24
  3647  002736  0100               	movlb	0	; () banked
  3648  002738  6FD4               	movwf	printf@f& (0+255),b
  3649  00273A  0EFE               	movlw	high STR_24
  3650  00273C  6FD5               	movwf	(printf@f+1)& (0+255),b
  3651  00273E  C0A5  F0D6         	movff	_B_remain,?_printf+2
  3652  002742  C0A6  F0D7         	movff	_B_remain+1,?_printf+3
  3653  002746  ECC3  F014         	call	_printf	;wreg free
  3654                           
  3655                           ;main.c: 433: _delay((unsigned long)((300)*(32000000/4000.0)));
  3656  00274A  0E0D               	movlw	13
  3657  00274C  0100               	movlb	0	; () banked
  3658  00274E  6FF6               	movwf	(??_main+1)& (0+255),b
  3659  002750  0E2D               	movlw	45
  3660  002752  6FF5               	movwf	??_main& (0+255),b
  3661  002754  0ED7               	movlw	215
  3662  002756                     u6277:
  3663  002756  2EE8               	decfsz	wreg,f,c
  3664  002758  D7FE               	bra	u6277
  3665  00275A  2FF5               	decfsz	??_main& (0+255),f,b
  3666  00275C  D7FC               	bra	u6277
  3667  00275E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3668  002760  D7FA               	bra	u6277
  3669  002762  D000               	nop2	
  3670                           
  3671                           ;main.c: 434: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3672  002764  0E01               	movlw	1
  3673  002766  ECC6  F022         	call	_lcdInst
  3674  00276A  0E9C               	movlw	156
  3675  00276C  0100               	movlb	0	; () banked
  3676  00276E  6FF5               	movwf	??_main& (0+255),b
  3677  002770  0ED7               	movlw	215
  3678  002772                     u6287:
  3679  002772  2EE8               	decfsz	wreg,f,c
  3680  002774  D7FE               	bra	u6287
  3681  002776  2FF5               	decfsz	??_main& (0+255),f,b
  3682  002778  D7FC               	bra	u6287
  3683                           
  3684                           ;main.c: 435: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3685  00277A  0E80               	movlw	128
  3686  00277C  ECC6  F022         	call	_lcdInst
  3687  002780  0E34               	movlw	52
  3688  002782  0100               	movlb	0	; () banked
  3689  002784  6FF5               	movwf	??_main& (0+255),b
  3690  002786  0EF1               	movlw	241
  3691  002788                     u6297:
  3692  002788  2EE8               	decfsz	wreg,f,c
  3693  00278A  D7FE               	bra	u6297
  3694  00278C  2FF5               	decfsz	??_main& (0+255),f,b
  3695  00278E  D7FC               	bra	u6297
  3696  002790  D000               	nop2	
  3697                           
  3698                           ;main.c: 436: printf("Nut_remain:%d",N_remain);
  3699  002792  0E18               	movlw	low STR_25
  3700  002794  0100               	movlb	0	; () banked
  3701  002796  6FD4               	movwf	printf@f& (0+255),b
  3702  002798  0EFF               	movlw	high STR_25
  3703  00279A  6FD5               	movwf	(printf@f+1)& (0+255),b
  3704  00279C  C0A3  F0D6         	movff	_N_remain,?_printf+2
  3705  0027A0  C0A4  F0D7         	movff	_N_remain+1,?_printf+3
  3706  0027A4  ECC3  F014         	call	_printf	;wreg free
  3707                           
  3708                           ;main.c: 437: _delay((unsigned long)((300)*(32000000/4000.0)));
  3709  0027A8  0E0D               	movlw	13
  3710  0027AA  0100               	movlb	0	; () banked
  3711  0027AC  6FF6               	movwf	(??_main+1)& (0+255),b
  3712  0027AE  0E2D               	movlw	45
  3713  0027B0  6FF5               	movwf	??_main& (0+255),b
  3714  0027B2  0ED7               	movlw	215
  3715  0027B4                     u6307:
  3716  0027B4  2EE8               	decfsz	wreg,f,c
  3717  0027B6  D7FE               	bra	u6307
  3718  0027B8  2FF5               	decfsz	??_main& (0+255),f,b
  3719  0027BA  D7FC               	bra	u6307
  3720  0027BC  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3721  0027BE  D7FA               	bra	u6307
  3722  0027C0  D000               	nop2	
  3723                           
  3724                           ;main.c: 438: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3725  0027C2  0E01               	movlw	1
  3726  0027C4  ECC6  F022         	call	_lcdInst
  3727  0027C8  0E9C               	movlw	156
  3728  0027CA  0100               	movlb	0	; () banked
  3729  0027CC  6FF5               	movwf	??_main& (0+255),b
  3730  0027CE  0ED7               	movlw	215
  3731  0027D0                     u6317:
  3732  0027D0  2EE8               	decfsz	wreg,f,c
  3733  0027D2  D7FE               	bra	u6317
  3734  0027D4  2FF5               	decfsz	??_main& (0+255),f,b
  3735  0027D6  D7FC               	bra	u6317
  3736                           
  3737                           ;main.c: 439: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3738  0027D8  0E80               	movlw	128
  3739  0027DA  ECC6  F022         	call	_lcdInst
  3740  0027DE  0E34               	movlw	52
  3741  0027E0  0100               	movlb	0	; () banked
  3742  0027E2  6FF5               	movwf	??_main& (0+255),b
  3743  0027E4  0EF1               	movlw	241
  3744  0027E6                     u6327:
  3745  0027E6  2EE8               	decfsz	wreg,f,c
  3746  0027E8  D7FE               	bra	u6327
  3747  0027EA  2FF5               	decfsz	??_main& (0+255),f,b
  3748  0027EC  D7FC               	bra	u6327
  3749  0027EE  D000               	nop2	
  3750                           
  3751                           ;main.c: 440: printf("Spacer_remain:%d",S_remain);
  3752  0027F0  0E0F               	movlw	low STR_26
  3753  0027F2  0100               	movlb	0	; () banked
  3754  0027F4  6FD4               	movwf	printf@f& (0+255),b
  3755  0027F6  0EFE               	movlw	high STR_26
  3756  0027F8  6FD5               	movwf	(printf@f+1)& (0+255),b
  3757  0027FA  C0A1  F0D6         	movff	_S_remain,?_printf+2
  3758  0027FE  C0A2  F0D7         	movff	_S_remain+1,?_printf+3
  3759  002802  ECC3  F014         	call	_printf	;wreg free
  3760                           
  3761                           ;main.c: 441: _delay((unsigned long)((300)*(32000000/4000.0)));
  3762  002806  0E0D               	movlw	13
  3763  002808  0100               	movlb	0	; () banked
  3764  00280A  6FF6               	movwf	(??_main+1)& (0+255),b
  3765  00280C  0E2D               	movlw	45
  3766  00280E  6FF5               	movwf	??_main& (0+255),b
  3767  002810  0ED7               	movlw	215
  3768  002812                     u6337:
  3769  002812  2EE8               	decfsz	wreg,f,c
  3770  002814  D7FE               	bra	u6337
  3771  002816  2FF5               	decfsz	??_main& (0+255),f,b
  3772  002818  D7FC               	bra	u6337
  3773  00281A  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3774  00281C  D7FA               	bra	u6337
  3775  00281E  D000               	nop2	
  3776                           
  3777                           ;main.c: 442: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3778  002820  0E01               	movlw	1
  3779  002822  ECC6  F022         	call	_lcdInst
  3780  002826  0E9C               	movlw	156
  3781  002828  0100               	movlb	0	; () banked
  3782  00282A  6FF5               	movwf	??_main& (0+255),b
  3783  00282C  0ED7               	movlw	215
  3784  00282E                     u6347:
  3785  00282E  2EE8               	decfsz	wreg,f,c
  3786  002830  D7FE               	bra	u6347
  3787  002832  2FF5               	decfsz	??_main& (0+255),f,b
  3788  002834  D7FC               	bra	u6347
  3789                           
  3790                           ;main.c: 443: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3791  002836  0E80               	movlw	128
  3792  002838  ECC6  F022         	call	_lcdInst
  3793  00283C  0E34               	movlw	52
  3794  00283E  0100               	movlb	0	; () banked
  3795  002840  6FF5               	movwf	??_main& (0+255),b
  3796  002842  0EF1               	movlw	241
  3797  002844                     u6357:
  3798  002844  2EE8               	decfsz	wreg,f,c
  3799  002846  D7FE               	bra	u6357
  3800  002848  2FF5               	decfsz	??_main& (0+255),f,b
  3801  00284A  D7FC               	bra	u6357
  3802  00284C  D000               	nop2	
  3803                           
  3804                           ;main.c: 444: printf("Washer_remain:%d",W_remain);
  3805  00284E  0E20               	movlw	low STR_27
  3806  002850  0100               	movlb	0	; () banked
  3807  002852  6FD4               	movwf	printf@f& (0+255),b
  3808  002854  0EFE               	movlw	high STR_27
  3809  002856  6FD5               	movwf	(printf@f+1)& (0+255),b
  3810  002858  C09F  F0D6         	movff	_W_remain,?_printf+2
  3811  00285C  C0A0  F0D7         	movff	_W_remain+1,?_printf+3
  3812  002860  ECC3  F014         	call	_printf	;wreg free
  3813                           
  3814                           ;main.c: 445: _delay((unsigned long)((300)*(32000000/4000.0)));
  3815  002864  0E0D               	movlw	13
  3816  002866  0100               	movlb	0	; () banked
  3817  002868  6FF6               	movwf	(??_main+1)& (0+255),b
  3818  00286A  0E2D               	movlw	45
  3819  00286C  6FF5               	movwf	??_main& (0+255),b
  3820  00286E  0ED7               	movlw	215
  3821  002870                     u6367:
  3822  002870  2EE8               	decfsz	wreg,f,c
  3823  002872  D7FE               	bra	u6367
  3824  002874  2FF5               	decfsz	??_main& (0+255),f,b
  3825  002876  D7FC               	bra	u6367
  3826  002878  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3827  00287A  D7FA               	bra	u6367
  3828  00287C  D000               	nop2	
  3829                           
  3830                           ;main.c: 446: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3831  00287E  0E01               	movlw	1
  3832  002880  ECC6  F022         	call	_lcdInst
  3833  002884  0E9C               	movlw	156
  3834  002886  0100               	movlb	0	; () banked
  3835  002888  6FF5               	movwf	??_main& (0+255),b
  3836  00288A  0ED7               	movlw	215
  3837  00288C                     u6377:
  3838  00288C  2EE8               	decfsz	wreg,f,c
  3839  00288E  D7FE               	bra	u6377
  3840  002890  2FF5               	decfsz	??_main& (0+255),f,b
  3841  002892  D7FC               	bra	u6377
  3842                           
  3843                           ;main.c: 447: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3844  002894  0E80               	movlw	128
  3845  002896  ECC6  F022         	call	_lcdInst
  3846  00289A  0E34               	movlw	52
  3847  00289C  0100               	movlb	0	; () banked
  3848  00289E  6FF5               	movwf	??_main& (0+255),b
  3849  0028A0  0EF1               	movlw	241
  3850  0028A2                     u6387:
  3851  0028A2  2EE8               	decfsz	wreg,f,c
  3852  0028A4  D7FE               	bra	u6387
  3853  0028A6  2FF5               	decfsz	??_main& (0+255),f,b
  3854  0028A8  D7FC               	bra	u6387
  3855  0028AA  D000               	nop2	
  3856                           
  3857                           ;main.c: 470: (INTCONbits.GIE = 1);
  3858  0028AC  8EF2               	bsf	intcon,7,c	;volatile
  3859                           
  3860                           ;main.c: 471: LATCbits.LATC0 = 0;
  3861  0028AE  908B               	bcf	3979,0,c	;volatile
  3862                           
  3863                           ;main.c: 472: TRISCbits.RC0 = 0;
  3864  0028B0  9094               	bcf	3988,0,c	;volatile
  3865                           
  3866                           ;main.c: 474: RBIE = 0;
  3867  0028B2  96F2               	bcf	intcon,3,c	;volatile
  3868                           
  3869                           ;main.c: 475: INT1IE = 1;
  3870  0028B4  86F0               	bsf	intcon3,3,c	;volatile
  3871  0028B6                     
  3872                           ;main.c: 478: (INTCONbits.GIE = 1);
  3873  0028B6  8EF2               	bsf	intcon,7,c	;volatile
  3874                           
  3875                           ;main.c: 480: operation = 1;
  3876  0028B8  0E00               	movlw	0
  3877  0028BA  6E69               	movwf	_operation+1,c
  3878  0028BC  0E01               	movlw	1
  3879  0028BE  6E68               	movwf	_operation,c
  3880                           
  3881                           ;main.c: 481: printf("1: Date and Time");
  3882  0028C0  0E42               	movlw	low STR_28
  3883  0028C2  0100               	movlb	0	; () banked
  3884  0028C4  6FD4               	movwf	printf@f& (0+255),b
  3885  0028C6  0EFE               	movlw	high STR_28
  3886  0028C8  6FD5               	movwf	(printf@f+1)& (0+255),b
  3887  0028CA  ECC3  F014         	call	_printf	;wreg free
  3888                           
  3889                           ;main.c: 482: lcdInst(0xC0);;
  3890  0028CE  0EC0               	movlw	192
  3891  0028D0  ECC6  F022         	call	_lcdInst
  3892                           
  3893                           ;main.c: 483: printf(" 2: Operation Time");
  3894  0028D4  0EC6               	movlw	low STR_29
  3895  0028D6  0100               	movlb	0	; () banked
  3896  0028D8  6FD4               	movwf	printf@f& (0+255),b
  3897  0028DA  0EFD               	movlw	high STR_29
  3898  0028DC  6FD5               	movwf	(printf@f+1)& (0+255),b
  3899  0028DE  ECC3  F014         	call	_printf	;wreg free
  3900                           
  3901                           ;main.c: 484: _delay((unsigned long)((600)*(32000000/4000.0)));
  3902  0028E2  0E19               	movlw	25
  3903  0028E4  0100               	movlb	0	; () banked
  3904  0028E6  6FF6               	movwf	(??_main+1)& (0+255),b
  3905  0028E8  0E5A               	movlw	90
  3906  0028EA  6FF5               	movwf	??_main& (0+255),b
  3907  0028EC  0EB1               	movlw	177
  3908  0028EE                     u6397:
  3909  0028EE  2EE8               	decfsz	wreg,f,c
  3910  0028F0  D7FE               	bra	u6397
  3911  0028F2  2FF5               	decfsz	??_main& (0+255),f,b
  3912  0028F4  D7FC               	bra	u6397
  3913  0028F6  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3914  0028F8  D7FA               	bra	u6397
  3915  0028FA  D000               	nop2	
  3916                           
  3917                           ;main.c: 485: initLCD();
  3918  0028FC  EC29  F021         	call	_initLCD	;wreg free
  3919                           
  3920                           ;main.c: 486: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3921  002900  0E80               	movlw	128
  3922  002902  ECC6  F022         	call	_lcdInst
  3923  002906  0E34               	movlw	52
  3924  002908  0100               	movlb	0	; () banked
  3925  00290A  6FF5               	movwf	??_main& (0+255),b
  3926  00290C  0EF1               	movlw	241
  3927  00290E                     u6407:
  3928  00290E  2EE8               	decfsz	wreg,f,c
  3929  002910  D7FE               	bra	u6407
  3930  002912  2FF5               	decfsz	??_main& (0+255),f,b
  3931  002914  D7FC               	bra	u6407
  3932  002916  D000               	nop2	
  3933                           
  3934                           ;main.c: 487: printf("3:summary");
  3935  002918  0E7B               	movlw	low STR_30
  3936  00291A  0100               	movlb	0	; () banked
  3937  00291C  6FD4               	movwf	printf@f& (0+255),b
  3938  00291E  0EFF               	movlw	high STR_30
  3939  002920  6FD5               	movwf	(printf@f+1)& (0+255),b
  3940  002922  ECC3  F014         	call	_printf	;wreg free
  3941                           
  3942                           ;main.c: 488: lcdInst(0xC0);;
  3943  002926  0EC0               	movlw	192
  3944  002928  ECC6  F022         	call	_lcdInst
  3945                           
  3946                           ;main.c: 489: printf("4:return");
  3947  00292C  0EA0               	movlw	low STR_31
  3948  00292E  0100               	movlb	0	; () banked
  3949  002930  6FD4               	movwf	printf@f& (0+255),b
  3950  002932  0EFF               	movlw	high STR_31
  3951  002934  6FD5               	movwf	(printf@f+1)& (0+255),b
  3952  002936  ECC3  F014         	call	_printf	;wreg free
  3953                           
  3954                           ;main.c: 491: _delay((unsigned long)((100)*(32000000/4000.0)));
  3955  00293A  0E05               	movlw	5
  3956  00293C  0100               	movlb	0	; () banked
  3957  00293E  6FF6               	movwf	(??_main+1)& (0+255),b
  3958  002940  0E0F               	movlw	15
  3959  002942  6FF5               	movwf	??_main& (0+255),b
  3960  002944  0EF1               	movlw	241
  3961  002946                     u6417:
  3962  002946  2EE8               	decfsz	wreg,f,c
  3963  002948  D7FE               	bra	u6417
  3964  00294A  2FF5               	decfsz	??_main& (0+255),f,b
  3965  00294C  D7FC               	bra	u6417
  3966  00294E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  3967  002950  D7FA               	bra	u6417
  3968                           
  3969                           ;main.c: 492: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3970  002952  0E80               	movlw	128
  3971  002954  ECC6  F022         	call	_lcdInst
  3972  002958  0E34               	movlw	52
  3973  00295A  0100               	movlb	0	; () banked
  3974  00295C  6FF5               	movwf	??_main& (0+255),b
  3975  00295E  0EF1               	movlw	241
  3976  002960                     u6427:
  3977  002960  2EE8               	decfsz	wreg,f,c
  3978  002962  D7FE               	bra	u6427
  3979  002964  2FF5               	decfsz	??_main& (0+255),f,b
  3980  002966  D7FC               	bra	u6427
  3981  002968  D000               	nop2	
  3982                           
  3983                           ;main.c: 494: if(operation_done == 1){
  3984  00296A  0100               	movlb	0	; () banked
  3985  00296C  05B3               	decf	_operation_done& (0+255),w,b
  3986  00296E  11B4               	iorwf	(_operation_done+1)& (0+255),w,b
  3987  002970  A4D8               	btfss	status,2,c
  3988  002972  D7A1               	goto	l430
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 496: }
  3992                           ;main.c: 497: }
  3993                           ;main.c: 498: initialize();
  3994                           
  3995                           ; BSR set to: 0
  3996                           
  3997                           ; BSR set to: 0
  3998                           
  3999                           ; BSR set to: 0
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;main.c: 495: break;
  4003  002974  EC36  F01C         	call	_initialize	;wreg free
  4004                           
  4005                           ;main.c: 499: mode = 0;
  4006  002978  0E00               	movlw	0
  4007  00297A  0100               	movlb	0	; () banked
  4008  00297C  6FB8               	movwf	(_mode+1)& (0+255),b
  4009  00297E  0E00               	movlw	0
  4010  002980  6FB7               	movwf	_mode& (0+255),b
  4011                           
  4012                           ; BSR set to: 0
  4013                           
  4014                           ; BSR set to: 0
  4015  002982  EF3E  F00F         	goto	l388
  4016  002986                     __end_of_main:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           intcon	equ	0xFF2
  4023                           intcon3	equ	0xFF0
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1l	equ	0xFE1
  4028                           indf2	equ	0xFDF
  4029                           postinc2	equ	0xFDE
  4030                           postdec2	equ	0xFDD
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _initialize *****************
  4036 ;; Defined at:
  4037 ;;		line 1056 in file "main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    4
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text1
  4066  00386C                     __ptext1:
  4067                           	opt stack 0
  4068  00386C                     _initialize:
  4069                           	opt stack 26
  4070                           
  4071                           ;main.c: 1057: white_tape = 0;
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;incstack = 0
  4075  00386C  0E00               	movlw	0
  4076  00386E  0100               	movlb	0	; () banked
  4077  003870  6FBA               	movwf	(_white_tape+1)& (0+255),b
  4078  003872  0E00               	movlw	0
  4079  003874  6FB9               	movwf	_white_tape& (0+255),b
  4080                           
  4081                           ;main.c: 1058: mode = 0;
  4082  003876  0E00               	movlw	0
  4083  003878  6FB8               	movwf	(_mode+1)& (0+255),b
  4084  00387A  0E00               	movlw	0
  4085  00387C  6FB7               	movwf	_mode& (0+255),b
  4086                           
  4087                           ;main.c: 1059: state = 0;
  4088  00387E  0E00               	movlw	0
  4089  003880  6FB2               	movwf	(_state+1)& (0+255),b
  4090  003882  0E00               	movlw	0
  4091  003884  6FB1               	movwf	_state& (0+255),b
  4092                           
  4093                           ;main.c: 1060: assembly_step = 0;
  4094  003886  0E00               	movlw	0
  4095  003888  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  4096  00388A  0E00               	movlw	0
  4097  00388C  6FAF               	movwf	_assembly_step& (0+255),b
  4098                           
  4099                           ;main.c: 1061: counter_step = 0;
  4100  00388E  0E00               	movlw	0
  4101  003890  6E5F               	movwf	_counter_step+1,c
  4102  003892  0E00               	movlw	0
  4103  003894  6E5E               	movwf	_counter_step,c
  4104                           
  4105                           ;main.c: 1063: valid = 0;
  4106  003896  0E00               	movlw	0
  4107  003898  0101               	movlb	1	; () banked
  4108  00389A  6F8D               	movwf	(_valid+1)& (0+255),b
  4109  00389C  0E00               	movlw	0
  4110  00389E  6F8C               	movwf	_valid& (0+255),b
  4111                           
  4112                           ;main.c: 1064: number = 0;
  4113  0038A0  0E00               	movlw	0
  4114  0038A2  6E76               	movwf	_number+1,c
  4115  0038A4  0E00               	movlw	0
  4116  0038A6  6E75               	movwf	_number,c
  4117                           
  4118                           ;main.c: 1065: total_number=0;
  4119  0038A8  0E00               	movlw	0
  4120  0038AA  6F8B               	movwf	(_total_number+1)& (0+255),b
  4121  0038AC  0E00               	movlw	0
  4122  0038AE  6F8A               	movwf	_total_number& (0+255),b
  4123                           
  4124                           ;main.c: 1067: B=0,N=0,S=0,W=0;
  4125  0038B0  0E00               	movlw	0
  4126  0038B2  6E5D               	movwf	_B+1,c
  4127  0038B4  0E00               	movlw	0
  4128  0038B6  6E5C               	movwf	_B,c
  4129  0038B8  0E00               	movlw	0
  4130  0038BA  6E5B               	movwf	_N+1,c
  4131  0038BC  0E00               	movlw	0
  4132  0038BE  6E5A               	movwf	_N,c
  4133  0038C0  0E00               	movlw	0
  4134  0038C2  6E59               	movwf	_S+1,c
  4135  0038C4  0E00               	movlw	0
  4136  0038C6  6E58               	movwf	_S,c
  4137  0038C8  0E00               	movlw	0
  4138  0038CA  6E57               	movwf	_W+1,c
  4139  0038CC  0E00               	movlw	0
  4140  0038CE  6E56               	movwf	_W,c
  4141                           
  4142                           ;main.c: 1069: B_counter= 0;
  4143  0038D0  0E00               	movlw	0
  4144  0038D2  0100               	movlb	0	; () banked
  4145  0038D4  6FAE               	movwf	(_B_counter+1)& (0+255),b
  4146  0038D6  0E00               	movlw	0
  4147  0038D8  6FAD               	movwf	_B_counter& (0+255),b
  4148                           
  4149                           ;main.c: 1070: S_counter= 0;
  4150  0038DA  0E00               	movlw	0
  4151  0038DC  6FAC               	movwf	(_S_counter+1)& (0+255),b
  4152  0038DE  0E00               	movlw	0
  4153  0038E0  6FAB               	movwf	_S_counter& (0+255),b
  4154                           
  4155                           ;main.c: 1071: N_counter= 0;
  4156  0038E2  0E00               	movlw	0
  4157  0038E4  6FAA               	movwf	(_N_counter+1)& (0+255),b
  4158  0038E6  0E00               	movlw	0
  4159  0038E8  6FA9               	movwf	_N_counter& (0+255),b
  4160                           
  4161                           ;main.c: 1072: W_counter= 0;
  4162  0038EA  0E00               	movlw	0
  4163  0038EC  6FA8               	movwf	(_W_counter+1)& (0+255),b
  4164  0038EE  0E00               	movlw	0
  4165  0038F0  6FA7               	movwf	_W_counter& (0+255),b
  4166                           
  4167                           ;main.c: 1075: initial_time = 0;
  4168  0038F2  0E00               	movlw	0
  4169  0038F4  0101               	movlb	1	; () banked
  4170  0038F6  6F69               	movwf	(_initial_time+1)& (0+255),b
  4171  0038F8  0E00               	movlw	0
  4172  0038FA  6F68               	movwf	_initial_time& (0+255),b
  4173                           
  4174                           ;main.c: 1076: final_time = 0;
  4175  0038FC  0E00               	movlw	0
  4176  0038FE  6F61               	movwf	(_final_time+1)& (0+255),b
  4177  003900  0E00               	movlw	0
  4178  003902  6F60               	movwf	_final_time& (0+255),b
  4179                           
  4180                           ;main.c: 1078: for (i=0;i<8;i++){
  4181  003904  0E00               	movlw	0
  4182  003906  0100               	movlb	0	; () banked
  4183  003908  6FBC               	movwf	(_i+1)& (0+255),b
  4184  00390A  0E00               	movlw	0
  4185  00390C  6FBB               	movwf	_i& (0+255),b
  4186  00390E                     l5233:
  4187                           
  4188                           ; BSR set to: 0
  4189  00390E  51BC               	movf	(_i+1)& (0+255),w,b
  4190  003910  E155               	bnz	l514
  4191  003912  0E08               	movlw	8
  4192  003914  5DBB               	subwf	_i& (0+255),w,b
  4193  003916  B0D8               	btfsc	status,0,c
  4194  003918  0012               	return	
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;main.c: 1079: compartment_array[i] = 0;
  4198                           
  4199                           ; BSR set to: 0
  4200                           
  4201                           ; BSR set to: 0
  4202  00391A  90D8               	bcf	status,0,c
  4203  00391C  35BB               	rlcf	_i& (0+255),w,b
  4204  00391E  6ED9               	movwf	fsr2l,c
  4205  003920  35BC               	rlcf	(_i+1)& (0+255),w,b
  4206  003922  6EDA               	movwf	fsr2h,c
  4207  003924  0E80               	movlw	low _compartment_array
  4208  003926  26D9               	addwf	fsr2l,f,c
  4209  003928  0E00               	movlw	high _compartment_array
  4210  00392A  22DA               	addwfc	fsr2h,f,c
  4211  00392C  0E00               	movlw	0
  4212  00392E  6EDE               	movwf	postinc2,c
  4213  003930  0E00               	movlw	0
  4214  003932  6EDD               	movwf	postdec2,c
  4215                           
  4216                           ;main.c: 1080: compartment_number[i] = 0;
  4217  003934  90D8               	bcf	status,0,c
  4218  003936  35BB               	rlcf	_i& (0+255),w,b
  4219  003938  6ED9               	movwf	fsr2l,c
  4220  00393A  35BC               	rlcf	(_i+1)& (0+255),w,b
  4221  00393C  6EDA               	movwf	fsr2h,c
  4222  00393E  0E46               	movlw	low _compartment_number
  4223  003940  26D9               	addwf	fsr2l,f,c
  4224  003942  0E00               	movlw	high _compartment_number
  4225  003944  22DA               	addwfc	fsr2h,f,c
  4226  003946  0E00               	movlw	0
  4227  003948  6EDE               	movwf	postinc2,c
  4228  00394A  0E00               	movlw	0
  4229  00394C  6EDD               	movwf	postdec2,c
  4230                           
  4231                           ;main.c: 1081: B_array[i] = 0;
  4232  00394E  90D8               	bcf	status,0,c
  4233  003950  35BB               	rlcf	_i& (0+255),w,b
  4234  003952  6ED9               	movwf	fsr2l,c
  4235  003954  35BC               	rlcf	(_i+1)& (0+255),w,b
  4236  003956  6EDA               	movwf	fsr2h,c
  4237  003958  0E30               	movlw	low _B_array
  4238  00395A  26D9               	addwf	fsr2l,f,c
  4239  00395C  0E01               	movlw	high _B_array
  4240  00395E  22DA               	addwfc	fsr2h,f,c
  4241  003960  0E00               	movlw	0
  4242  003962  6EDE               	movwf	postinc2,c
  4243  003964  0E00               	movlw	0
  4244  003966  6EDD               	movwf	postdec2,c
  4245                           
  4246                           ;main.c: 1082: N_array[i] = 0;
  4247  003968  90D8               	bcf	status,0,c
  4248  00396A  35BB               	rlcf	_i& (0+255),w,b
  4249  00396C  6ED9               	movwf	fsr2l,c
  4250  00396E  35BC               	rlcf	(_i+1)& (0+255),w,b
  4251  003970  6EDA               	movwf	fsr2h,c
  4252  003972  0E10               	movlw	low _N_array
  4253  003974  26D9               	addwf	fsr2l,f,c
  4254  003976  0E01               	movlw	high _N_array
  4255  003978  22DA               	addwfc	fsr2h,f,c
  4256  00397A  0E00               	movlw	0
  4257  00397C  6EDE               	movwf	postinc2,c
  4258  00397E  0E00               	movlw	0
  4259  003980  6EDD               	movwf	postdec2,c
  4260                           
  4261                           ;main.c: 1083: S_array[i] = 0;
  4262  003982  90D8               	bcf	status,0,c
  4263  003984  35BB               	rlcf	_i& (0+255),w,b
  4264  003986  6ED9               	movwf	fsr2l,c
  4265  003988  35BC               	rlcf	(_i+1)& (0+255),w,b
  4266  00398A  6EDA               	movwf	fsr2h,c
  4267  00398C  0E20               	movlw	low _S_array
  4268  00398E  26D9               	addwf	fsr2l,f,c
  4269  003990  0E01               	movlw	high _S_array
  4270  003992  22DA               	addwfc	fsr2h,f,c
  4271  003994  0E00               	movlw	0
  4272  003996  6EDE               	movwf	postinc2,c
  4273  003998  0E00               	movlw	0
  4274  00399A  6EDD               	movwf	postdec2,c
  4275                           
  4276                           ;main.c: 1084: W_array[i] = 0;
  4277  00399C  90D8               	bcf	status,0,c
  4278  00399E  35BB               	rlcf	_i& (0+255),w,b
  4279  0039A0  6ED9               	movwf	fsr2l,c
  4280  0039A2  35BC               	rlcf	(_i+1)& (0+255),w,b
  4281  0039A4  6EDA               	movwf	fsr2h,c
  4282  0039A6  0E00               	movlw	low _W_array
  4283  0039A8  26D9               	addwf	fsr2l,f,c
  4284  0039AA  0E01               	movlw	high _W_array
  4285  0039AC  22DA               	addwfc	fsr2h,f,c
  4286  0039AE  0E00               	movlw	0
  4287  0039B0  6EDE               	movwf	postinc2,c
  4288  0039B2  0E00               	movlw	0
  4289  0039B4  6EDD               	movwf	postdec2,c
  4290                           
  4291                           ; BSR set to: 0
  4292  0039B6  4BBB               	infsnz	_i& (0+255),f,b
  4293  0039B8  2BBC               	incf	(_i+1)& (0+255),f,b
  4294  0039BA  D7A9               	goto	l5233
  4295  0039BC                     l514:
  4296                           
  4297                           ; BSR set to: 0
  4298  0039BC  0012               	return		;funcret
  4299  0039BE                     __end_of_initialize:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           intcon	equ	0xFF2
  4306                           intcon3	equ	0xFF0
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec1	equ	0xFE5
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8
  4317                           
  4318 ;; *************** function _initVibTimer *****************
  4319 ;; Defined at:
  4320 ;;		line 1456 in file "main.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		None
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    4
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text2
  4349  0045A4                     __ptext2:
  4350                           	opt stack 0
  4351  0045A4                     _initVibTimer:
  4352                           	opt stack 26
  4353                           
  4354                           ;main.c: 1458: INTCONbits.TMR0IE = 1;
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;incstack = 0
  4358  0045A4  8AF2               	bsf	intcon,5,c	;volatile
  4359                           
  4360                           ;main.c: 1459: (INTCONbits.GIE = 1);
  4361  0045A6  8EF2               	bsf	intcon,7,c	;volatile
  4362                           
  4363                           ;main.c: 1461: T0CONbits.T08BIT = 0;
  4364  0045A8  9CD5               	bcf	4053,6,c	;volatile
  4365                           
  4366                           ;main.c: 1462: T0CONbits.T0CS = 0;
  4367  0045AA  9AD5               	bcf	4053,5,c	;volatile
  4368                           
  4369                           ;main.c: 1463: T0CONbits.PSA = 0;
  4370  0045AC  96D5               	bcf	4053,3,c	;volatile
  4371                           
  4372                           ;main.c: 1464: T0CONbits.T0PS0 = 1;
  4373  0045AE  80D5               	bsf	4053,0,c	;volatile
  4374                           
  4375                           ;main.c: 1465: T0CONbits.T0PS1 = 1 ;
  4376  0045B0  82D5               	bsf	4053,1,c	;volatile
  4377                           
  4378                           ;main.c: 1466: T0CONbits.T0PS2 = 1;
  4379  0045B2  84D5               	bsf	4053,2,c	;volatile
  4380                           
  4381                           ;main.c: 1468: T0CONbits.TMR0ON = 1;
  4382  0045B4  8ED5               	bsf	4053,7,c	;volatile
  4383  0045B6  0012               	return		;funcret
  4384  0045B8                     __end_of_initVibTimer:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           intcon	equ	0xFF2
  4391                           intcon3	equ	0xFF0
  4392                           postinc0	equ	0xFEE
  4393                           wreg	equ	0xFE8
  4394                           postdec1	equ	0xFE5
  4395                           fsr1l	equ	0xFE1
  4396                           indf2	equ	0xFDF
  4397                           postinc2	equ	0xFDE
  4398                           postdec2	equ	0xFDD
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _generate_compartment_array *****************
  4404 ;; Defined at:
  4405 ;;		line 220 in file "keypad.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  step            2    0[BANK0 ] int 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, status,0
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        4 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    4
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text3
  4434  003454                     __ptext3:
  4435                           	opt stack 0
  4436  003454                     _generate_compartment_array:
  4437                           	opt stack 26
  4438                           
  4439                           ;keypad.c: 222: switch(step){
  4440                           
  4441                           ;incstack = 0
  4442  003454  D117               	goto	l915
  4443  003456                     
  4444                           ;keypad.c: 224: compartment_array[0] = 1;
  4445  003456  0E00               	movlw	0
  4446  003458  0100               	movlb	0	; () banked
  4447  00345A  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4448  00345C  0E01               	movlw	1
  4449  00345E  6F80               	movwf	_compartment_array& (0+255),b
  4450                           
  4451                           ;keypad.c: 225: compartment_array[2] = 1;
  4452  003460  0E00               	movlw	0
  4453  003462  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4454  003464  0E01               	movlw	1
  4455  003466  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4456                           
  4457                           ;keypad.c: 226: compartment_array[4] = 1;
  4458  003468  0E00               	movlw	0
  4459  00346A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4460  00346C  0E01               	movlw	1
  4461  00346E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4462                           
  4463                           ;keypad.c: 227: compartment_array[6] = 1;
  4464  003470  0E00               	movlw	0
  4465  003472  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4466  003474  0E01               	movlw	1
  4467  003476  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4468                           
  4469                           ;keypad.c: 230: compartment_number[0] = 0;
  4470  003478  0E00               	movlw	0
  4471  00347A  6E47               	movwf	_compartment_number+1,c
  4472  00347C  0E00               	movlw	0
  4473  00347E  6E46               	movwf	_compartment_number,c
  4474                           
  4475                           ;keypad.c: 231: compartment_number[1] = 2;
  4476  003480  0E00               	movlw	0
  4477  003482  6E49               	movwf	_compartment_number+3,c
  4478  003484  0E02               	movlw	2
  4479  003486  6E48               	movwf	_compartment_number+2,c
  4480                           
  4481                           ;keypad.c: 232: compartment_number[2] = 4;
  4482  003488  0E00               	movlw	0
  4483  00348A  6E4B               	movwf	_compartment_number+5,c
  4484  00348C  0E04               	movlw	4
  4485  00348E  6E4A               	movwf	_compartment_number+4,c
  4486                           
  4487                           ;keypad.c: 233: compartment_number[3] = 6;
  4488  003490  0E00               	movlw	0
  4489  003492  6E4D               	movwf	_compartment_number+7,c
  4490  003494  0E06               	movlw	6
  4491  003496  6E4C               	movwf	_compartment_number+6,c
  4492                           
  4493                           ;keypad.c: 235: break;
  4494  003498  0012               	return	
  4495  00349A                     
  4496                           ; BSR set to: 0
  4497                           ;keypad.c: 237: compartment_array[0] = 1;
  4498                           
  4499                           ; BSR set to: 0
  4500  00349A  0E00               	movlw	0
  4501  00349C  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4502  00349E  0E01               	movlw	1
  4503  0034A0  6F80               	movwf	_compartment_array& (0+255),b
  4504                           
  4505                           ;keypad.c: 238: compartment_array[1] = 1;
  4506  0034A2  0E00               	movlw	0
  4507  0034A4  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4508  0034A6  0E01               	movlw	1
  4509  0034A8  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4510                           
  4511                           ;keypad.c: 239: compartment_array[3] = 1;
  4512  0034AA  0E00               	movlw	0
  4513  0034AC  6F87               	movwf	(_compartment_array+7)& (0+255),b
  4514  0034AE  0E01               	movlw	1
  4515  0034B0  6F86               	movwf	(_compartment_array+6)& (0+255),b
  4516                           
  4517                           ;keypad.c: 240: compartment_array[4] = 1;
  4518  0034B2  0E00               	movlw	0
  4519  0034B4  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4520  0034B6  0E01               	movlw	1
  4521  0034B8  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4522                           
  4523                           ;keypad.c: 241: compartment_array[6] = 1;
  4524  0034BA  0E00               	movlw	0
  4525  0034BC  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4526  0034BE  0E01               	movlw	1
  4527  0034C0  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4528                           
  4529                           ;keypad.c: 245: compartment_number[0] = 0;
  4530  0034C2  0E00               	movlw	0
  4531  0034C4  6E47               	movwf	_compartment_number+1,c
  4532  0034C6  0E00               	movlw	0
  4533  0034C8  6E46               	movwf	_compartment_number,c
  4534                           
  4535                           ;keypad.c: 246: compartment_number[1] = 1;
  4536  0034CA  0E00               	movlw	0
  4537  0034CC  6E49               	movwf	_compartment_number+3,c
  4538  0034CE  0E01               	movlw	1
  4539  0034D0  6E48               	movwf	_compartment_number+2,c
  4540                           
  4541                           ;keypad.c: 247: compartment_number[2] = 3;
  4542  0034D2  0E00               	movlw	0
  4543  0034D4  6E4B               	movwf	_compartment_number+5,c
  4544  0034D6  0E03               	movlw	3
  4545  0034D8  6E4A               	movwf	_compartment_number+4,c
  4546                           
  4547                           ;keypad.c: 248: compartment_number[3] = 4;
  4548  0034DA  0E00               	movlw	0
  4549  0034DC  6E4D               	movwf	_compartment_number+7,c
  4550  0034DE  0E04               	movlw	4
  4551  0034E0  6E4C               	movwf	_compartment_number+6,c
  4552                           
  4553                           ;keypad.c: 249: compartment_number[4] = 6;
  4554  0034E2  0E00               	movlw	0
  4555  0034E4  6E4F               	movwf	_compartment_number+9,c
  4556  0034E6  0E06               	movlw	6
  4557  0034E8  6E4E               	movwf	_compartment_number+8,c
  4558                           
  4559                           ;keypad.c: 251: break;
  4560  0034EA  0012               	return	
  4561  0034EC                     
  4562                           ; BSR set to: 0
  4563                           ;keypad.c: 254: compartment_array[0] = 1;
  4564                           
  4565                           ; BSR set to: 0
  4566  0034EC  0E00               	movlw	0
  4567  0034EE  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4568  0034F0  0E01               	movlw	1
  4569  0034F2  6F80               	movwf	_compartment_array& (0+255),b
  4570                           
  4571                           ;keypad.c: 255: compartment_array[1] = 1;
  4572  0034F4  0E00               	movlw	0
  4573  0034F6  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4574  0034F8  0E01               	movlw	1
  4575  0034FA  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4576                           
  4577                           ;keypad.c: 256: compartment_array[2] = 1;
  4578  0034FC  0E00               	movlw	0
  4579  0034FE  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4580  003500  0E01               	movlw	1
  4581  003502  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4582                           
  4583                           ;keypad.c: 257: compartment_array[4] = 1;
  4584  003504  0E00               	movlw	0
  4585  003506  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4586  003508  0E01               	movlw	1
  4587  00350A  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4588                           
  4589                           ;keypad.c: 258: compartment_array[5] = 1;
  4590  00350C  0E00               	movlw	0
  4591  00350E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  4592  003510  0E01               	movlw	1
  4593  003512  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  4594                           
  4595                           ;keypad.c: 259: compartment_array[6] = 1;
  4596  003514  0E00               	movlw	0
  4597  003516  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4598  003518  0E01               	movlw	1
  4599  00351A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4600                           
  4601                           ;keypad.c: 262: compartment_number[0] = 0;
  4602  00351C  0E00               	movlw	0
  4603  00351E  6E47               	movwf	_compartment_number+1,c
  4604  003520  0E00               	movlw	0
  4605  003522  6E46               	movwf	_compartment_number,c
  4606                           
  4607                           ;keypad.c: 263: compartment_number[1] = 1;
  4608  003524  0E00               	movlw	0
  4609  003526  6E49               	movwf	_compartment_number+3,c
  4610  003528  0E01               	movlw	1
  4611  00352A  6E48               	movwf	_compartment_number+2,c
  4612                           
  4613                           ;keypad.c: 264: compartment_number[2] = 2;
  4614  00352C  0E00               	movlw	0
  4615  00352E  6E4B               	movwf	_compartment_number+5,c
  4616  003530  0E02               	movlw	2
  4617  003532  6E4A               	movwf	_compartment_number+4,c
  4618                           
  4619                           ;keypad.c: 265: compartment_number[3] = 4;
  4620  003534  0E00               	movlw	0
  4621  003536  6E4D               	movwf	_compartment_number+7,c
  4622  003538  0E04               	movlw	4
  4623  00353A  6E4C               	movwf	_compartment_number+6,c
  4624                           
  4625                           ;keypad.c: 266: compartment_number[4] = 5;
  4626  00353C  0E00               	movlw	0
  4627  00353E  6E4F               	movwf	_compartment_number+9,c
  4628  003540  0E05               	movlw	5
  4629  003542  6E4E               	movwf	_compartment_number+8,c
  4630                           
  4631                           ;keypad.c: 267: compartment_number[5] = 6;
  4632  003544  0E00               	movlw	0
  4633  003546  6E51               	movwf	_compartment_number+11,c
  4634  003548  0E06               	movlw	6
  4635  00354A  6E50               	movwf	_compartment_number+10,c
  4636                           
  4637                           ;keypad.c: 269: break;
  4638  00354C  0012               	return	
  4639  00354E                     
  4640                           ; BSR set to: 0
  4641                           ;keypad.c: 271: compartment_array[0] = 1;
  4642                           
  4643                           ; BSR set to: 0
  4644  00354E  0E00               	movlw	0
  4645  003550  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4646  003552  0E01               	movlw	1
  4647  003554  6F80               	movwf	_compartment_array& (0+255),b
  4648                           
  4649                           ;keypad.c: 272: compartment_array[1] = 1;
  4650  003556  0E00               	movlw	0
  4651  003558  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4652  00355A  0E01               	movlw	1
  4653  00355C  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4654                           
  4655                           ;keypad.c: 273: compartment_array[2] = 1;
  4656  00355E  0E00               	movlw	0
  4657  003560  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4658  003562  0E01               	movlw	1
  4659  003564  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4660                           
  4661                           ;keypad.c: 274: compartment_array[3] = 1;
  4662  003566  0E00               	movlw	0
  4663  003568  6F87               	movwf	(_compartment_array+7)& (0+255),b
  4664  00356A  0E01               	movlw	1
  4665  00356C  6F86               	movwf	(_compartment_array+6)& (0+255),b
  4666                           
  4667                           ;keypad.c: 275: compartment_array[4] = 1;
  4668  00356E  0E00               	movlw	0
  4669  003570  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4670  003572  0E01               	movlw	1
  4671  003574  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4672                           
  4673                           ;keypad.c: 276: compartment_array[5] = 1;
  4674  003576  0E00               	movlw	0
  4675  003578  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  4676  00357A  0E01               	movlw	1
  4677  00357C  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  4678                           
  4679                           ;keypad.c: 277: compartment_array[6] = 1;
  4680  00357E  0E00               	movlw	0
  4681  003580  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4682  003582  0E01               	movlw	1
  4683  003584  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4684                           
  4685                           ;keypad.c: 280: compartment_number[0] = 0;
  4686  003586  0E00               	movlw	0
  4687  003588  6E47               	movwf	_compartment_number+1,c
  4688  00358A  0E00               	movlw	0
  4689  00358C  6E46               	movwf	_compartment_number,c
  4690                           
  4691                           ;keypad.c: 281: compartment_number[1] = 1;
  4692  00358E  0E00               	movlw	0
  4693  003590  6E49               	movwf	_compartment_number+3,c
  4694  003592  0E01               	movlw	1
  4695  003594  6E48               	movwf	_compartment_number+2,c
  4696                           
  4697                           ;keypad.c: 282: compartment_number[2] = 2;
  4698  003596  0E00               	movlw	0
  4699  003598  6E4B               	movwf	_compartment_number+5,c
  4700  00359A  0E02               	movlw	2
  4701  00359C  6E4A               	movwf	_compartment_number+4,c
  4702                           
  4703                           ;keypad.c: 283: compartment_number[3] = 3;
  4704  00359E  0E00               	movlw	0
  4705  0035A0  6E4D               	movwf	_compartment_number+7,c
  4706  0035A2  0E03               	movlw	3
  4707  0035A4  6E4C               	movwf	_compartment_number+6,c
  4708                           
  4709                           ;keypad.c: 284: compartment_number[4] = 4;
  4710  0035A6  0E00               	movlw	0
  4711  0035A8  6E4F               	movwf	_compartment_number+9,c
  4712  0035AA  0E04               	movlw	4
  4713  0035AC  6E4E               	movwf	_compartment_number+8,c
  4714                           
  4715                           ;keypad.c: 285: compartment_number[5] = 5;
  4716  0035AE  0E00               	movlw	0
  4717  0035B0  6E51               	movwf	_compartment_number+11,c
  4718  0035B2  0E05               	movlw	5
  4719  0035B4  6E50               	movwf	_compartment_number+10,c
  4720                           
  4721                           ;keypad.c: 286: compartment_number[6] = 6;
  4722  0035B6  0E00               	movlw	0
  4723  0035B8  6E53               	movwf	_compartment_number+13,c
  4724  0035BA  0E06               	movlw	6
  4725  0035BC  6E52               	movwf	_compartment_number+12,c
  4726                           
  4727                           ;keypad.c: 288: break;
  4728  0035BE  0012               	return	
  4729  0035C0                     
  4730                           ; BSR set to: 0
  4731                           ;keypad.c: 290: compartment_array[0] = 1;
  4732                           
  4733                           ; BSR set to: 0
  4734  0035C0  0E00               	movlw	0
  4735  0035C2  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4736  0035C4  0E01               	movlw	1
  4737  0035C6  6F80               	movwf	_compartment_array& (0+255),b
  4738                           
  4739                           ;keypad.c: 291: compartment_array[1] = 1;
  4740  0035C8  0E00               	movlw	0
  4741  0035CA  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4742  0035CC  0E01               	movlw	1
  4743  0035CE  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4744                           
  4745                           ;keypad.c: 292: compartment_array[2] = 1;
  4746  0035D0  0E00               	movlw	0
  4747  0035D2  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4748  0035D4  0E01               	movlw	1
  4749  0035D6  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4750                           
  4751                           ;keypad.c: 293: compartment_array[3] = 1;
  4752  0035D8  0E00               	movlw	0
  4753  0035DA  6F87               	movwf	(_compartment_array+7)& (0+255),b
  4754  0035DC  0E01               	movlw	1
  4755  0035DE  6F86               	movwf	(_compartment_array+6)& (0+255),b
  4756                           
  4757                           ;keypad.c: 294: compartment_array[4] = 1;
  4758  0035E0  0E00               	movlw	0
  4759  0035E2  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4760  0035E4  0E01               	movlw	1
  4761  0035E6  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4762                           
  4763                           ;keypad.c: 295: compartment_array[5] = 1;
  4764  0035E8  0E00               	movlw	0
  4765  0035EA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  4766  0035EC  0E01               	movlw	1
  4767  0035EE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  4768                           
  4769                           ;keypad.c: 296: compartment_array[6] = 1;
  4770  0035F0  0E00               	movlw	0
  4771  0035F2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4772  0035F4  0E01               	movlw	1
  4773  0035F6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4774                           
  4775                           ;keypad.c: 297: compartment_array[7] = 1;
  4776  0035F8  0E00               	movlw	0
  4777  0035FA  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  4778  0035FC  0E01               	movlw	1
  4779  0035FE  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  4780                           
  4781                           ;keypad.c: 300: compartment_number[0] = 0;
  4782  003600  0E00               	movlw	0
  4783  003602  6E47               	movwf	_compartment_number+1,c
  4784  003604  0E00               	movlw	0
  4785  003606  6E46               	movwf	_compartment_number,c
  4786                           
  4787                           ;keypad.c: 301: compartment_number[1] = 1;
  4788  003608  0E00               	movlw	0
  4789  00360A  6E49               	movwf	_compartment_number+3,c
  4790  00360C  0E01               	movlw	1
  4791  00360E  6E48               	movwf	_compartment_number+2,c
  4792                           
  4793                           ;keypad.c: 302: compartment_number[2] = 2;
  4794  003610  0E00               	movlw	0
  4795  003612  6E4B               	movwf	_compartment_number+5,c
  4796  003614  0E02               	movlw	2
  4797  003616  6E4A               	movwf	_compartment_number+4,c
  4798                           
  4799                           ;keypad.c: 303: compartment_number[3] = 3;
  4800  003618  0E00               	movlw	0
  4801  00361A  6E4D               	movwf	_compartment_number+7,c
  4802  00361C  0E03               	movlw	3
  4803  00361E  6E4C               	movwf	_compartment_number+6,c
  4804                           
  4805                           ;keypad.c: 304: compartment_number[4] = 4;
  4806  003620  0E00               	movlw	0
  4807  003622  6E4F               	movwf	_compartment_number+9,c
  4808  003624  0E04               	movlw	4
  4809  003626  6E4E               	movwf	_compartment_number+8,c
  4810                           
  4811                           ;keypad.c: 305: compartment_number[5] = 5;
  4812  003628  0E00               	movlw	0
  4813  00362A  6E51               	movwf	_compartment_number+11,c
  4814  00362C  0E05               	movlw	5
  4815  00362E  6E50               	movwf	_compartment_number+10,c
  4816                           
  4817                           ;keypad.c: 306: compartment_number[6] = 6;
  4818  003630  0E00               	movlw	0
  4819  003632  6E53               	movwf	_compartment_number+13,c
  4820  003634  0E06               	movlw	6
  4821  003636  6E52               	movwf	_compartment_number+12,c
  4822                           
  4823                           ;keypad.c: 307: compartment_number[7] = 7;
  4824  003638  0E00               	movlw	0
  4825  00363A  6E55               	movwf	_compartment_number+15,c
  4826  00363C  0E07               	movlw	7
  4827  00363E  6E54               	movwf	_compartment_number+14,c
  4828                           
  4829                           ;keypad.c: 309: break;
  4830  003640  0012               	return	
  4831  003642                     
  4832                           ; BSR set to: 0
  4833                           ;keypad.c: 311: compartment_array[0] = 0;
  4834                           
  4835                           ; BSR set to: 0
  4836  003642  0E00               	movlw	0
  4837  003644  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4838  003646  0E00               	movlw	0
  4839  003648  6F80               	movwf	_compartment_array& (0+255),b
  4840                           
  4841                           ;keypad.c: 312: compartment_array[1] = 0;
  4842  00364A  0E00               	movlw	0
  4843  00364C  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4844  00364E  0E00               	movlw	0
  4845  003650  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4846                           
  4847                           ;keypad.c: 313: compartment_array[2] = 0;
  4848  003652  0E00               	movlw	0
  4849  003654  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4850  003656  0E00               	movlw	0
  4851  003658  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4852                           
  4853                           ;keypad.c: 314: compartment_array[3] = 0;
  4854  00365A  0E00               	movlw	0
  4855  00365C  6F87               	movwf	(_compartment_array+7)& (0+255),b
  4856  00365E  0E00               	movlw	0
  4857  003660  6F86               	movwf	(_compartment_array+6)& (0+255),b
  4858                           
  4859                           ;keypad.c: 315: compartment_array[4] = 0;
  4860  003662  0E00               	movlw	0
  4861  003664  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4862  003666  0E00               	movlw	0
  4863  003668  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4864                           
  4865                           ;keypad.c: 316: compartment_array[5] = 0;
  4866  00366A  0E00               	movlw	0
  4867  00366C  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  4868  00366E  0E00               	movlw	0
  4869  003670  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  4870                           
  4871                           ;keypad.c: 317: compartment_array[6] = 0;
  4872  003672  0E00               	movlw	0
  4873  003674  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4874  003676  0E00               	movlw	0
  4875  003678  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4876                           
  4877                           ;keypad.c: 318: compartment_array[7] = 0;
  4878  00367A  0E00               	movlw	0
  4879  00367C  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  4880  00367E  0E00               	movlw	0
  4881  003680  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  4882                           
  4883                           ;keypad.c: 320: }
  4884  003682  0012               	return	
  4885  003684                     l915:
  4886                           
  4887                           ; BSR set to: 0
  4888  003684  C0C6  F0C8         	movff	generate_compartment_array@step,??_generate_compartment_array
  4889  003688  C0C7  F0C9         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  4890                           
  4891                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4892                           ; Switch size 1, requested type "space"
  4893                           ; Number of cases is 1, Range of values is 0 to 0
  4894                           ; switch strategies available:
  4895                           ; Name         Instructions Cycles
  4896                           ; simple_byte            4     3 (average)
  4897                           ;	Chosen strategy is simple_byte
  4898  00368C  0100               	movlb	0	; () banked
  4899  00368E  51C9               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  4900  003690  0A00               	xorlw	0	; case 0
  4901  003692  A4D8               	btfss	status,2,c
  4902  003694  D7D6               	goto	l922
  4903                           
  4904                           ; BSR set to: 0
  4905                           ; Switch size 1, requested type "space"
  4906                           ; Number of cases is 5, Range of values is 4 to 8
  4907                           ; switch strategies available:
  4908                           ; Name         Instructions Cycles
  4909                           ; simple_byte           16     9 (average)
  4910                           ;	Chosen strategy is simple_byte
  4911  003696  51C8               	movf	??_generate_compartment_array& (0+255),w,b
  4912  003698  0A04               	xorlw	4	; case 4
  4913  00369A  B4D8               	btfsc	status,2,c
  4914  00369C  D6DC               	goto	l916
  4915  00369E  0A01               	xorlw	1	; case 5
  4916  0036A0  B4D8               	btfsc	status,2,c
  4917  0036A2  D6FB               	goto	l918
  4918  0036A4  0A03               	xorlw	3	; case 6
  4919  0036A6  B4D8               	btfsc	status,2,c
  4920  0036A8  D721               	goto	l919
  4921  0036AA  0A01               	xorlw	1	; case 7
  4922  0036AC  B4D8               	btfsc	status,2,c
  4923  0036AE  D74F               	goto	l920
  4924  0036B0  0A0F               	xorlw	15	; case 8
  4925  0036B2  B4D8               	btfsc	status,2,c
  4926  0036B4  D785               	goto	l921
  4927  0036B6  D7C5               	goto	l922
  4928  0036B8                     __end_of_generate_compartment_array:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           intcon	equ	0xFF2
  4935                           intcon3	equ	0xFF0
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           postdec1	equ	0xFE5
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           fsr2h	equ	0xFDA
  4944                           fsr2l	equ	0xFD9
  4945                           status	equ	0xFD8
  4946                           
  4947 ;; *************** function _all_remain *****************
  4948 ;; Defined at:
  4949 ;;		line 1343 in file "main.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  time            2   42[BANK0 ] int 
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  timeout         1   46[BANK0 ] unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4963 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;Total ram usage:        5 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    7
  4970 ;; This function calls:
  4971 ;;		_I2C_sendData
  4972 ;;		_initLCD
  4973 ;;		_lcdInst
  4974 ;;		_printf
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text4
  4981  0036B8                     __ptext4:
  4982                           	opt stack 0
  4983  0036B8                     _all_remain:
  4984                           	opt stack 23
  4985                           
  4986                           ;main.c: 1344: I2C_sendData('5');
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;incstack = 0
  4990  0036B8  0E35               	movlw	53
  4991  0036BA  EC61  F022         	call	_I2C_sendData
  4992                           
  4993                           ;main.c: 1345: _delay((unsigned long)((500)*(32000000/4000.0)));
  4994  0036BE  0E15               	movlw	21
  4995  0036C0  0100               	movlb	0	; () banked
  4996  0036C2  6FF3               	movwf	(??_all_remain+1)& (0+255),b
  4997  0036C4  0E4B               	movlw	75
  4998  0036C6  6FF2               	movwf	??_all_remain& (0+255),b
  4999  0036C8  0EBE               	movlw	190
  5000  0036CA                     u6437:
  5001  0036CA  2EE8               	decfsz	wreg,f,c
  5002  0036CC  D7FE               	bra	u6437
  5003  0036CE  2FF2               	decfsz	??_all_remain& (0+255),f,b
  5004  0036D0  D7FC               	bra	u6437
  5005  0036D2  2FF3               	decfsz	(??_all_remain+1)& (0+255),f,b
  5006  0036D4  D7FA               	bra	u6437
  5007  0036D6  F000               	nop	
  5008                           
  5009                           ;main.c: 1346: I2C_sendData('7');
  5010  0036D8  0E37               	movlw	55
  5011  0036DA  EC61  F022         	call	_I2C_sendData
  5012                           
  5013                           ;main.c: 1347: _delay((unsigned long)((500)*(32000000/4000.0)));
  5014  0036DE  0E15               	movlw	21
  5015  0036E0  0100               	movlb	0	; () banked
  5016  0036E2  6FF3               	movwf	(??_all_remain+1)& (0+255),b
  5017  0036E4  0E4B               	movlw	75
  5018  0036E6  6FF2               	movwf	??_all_remain& (0+255),b
  5019  0036E8  0EBE               	movlw	190
  5020  0036EA                     u6447:
  5021  0036EA  2EE8               	decfsz	wreg,f,c
  5022  0036EC  D7FE               	bra	u6447
  5023  0036EE  2FF2               	decfsz	??_all_remain& (0+255),f,b
  5024  0036F0  D7FC               	bra	u6447
  5025  0036F2  2FF3               	decfsz	(??_all_remain+1)& (0+255),f,b
  5026  0036F4  D7FA               	bra	u6447
  5027  0036F6  F000               	nop	
  5028                           
  5029                           ;main.c: 1348: I2C_sendData('9');
  5030  0036F8  0E39               	movlw	57
  5031  0036FA  EC61  F022         	call	_I2C_sendData
  5032                           
  5033                           ;main.c: 1349: _delay((unsigned long)((500)*(32000000/4000.0)));
  5034  0036FE  0E15               	movlw	21
  5035  003700  0100               	movlb	0	; () banked
  5036  003702  6FF3               	movwf	(??_all_remain+1)& (0+255),b
  5037  003704  0E4B               	movlw	75
  5038  003706  6FF2               	movwf	??_all_remain& (0+255),b
  5039  003708  0EBE               	movlw	190
  5040  00370A                     u6457:
  5041  00370A  2EE8               	decfsz	wreg,f,c
  5042  00370C  D7FE               	bra	u6457
  5043  00370E  2FF2               	decfsz	??_all_remain& (0+255),f,b
  5044  003710  D7FC               	bra	u6457
  5045  003712  2FF3               	decfsz	(??_all_remain+1)& (0+255),f,b
  5046  003714  D7FA               	bra	u6457
  5047  003716  F000               	nop	
  5048                           
  5049                           ;main.c: 1350: I2C_sendData(11);
  5050  003718  0E0B               	movlw	11
  5051  00371A  EC61  F022         	call	_I2C_sendData
  5052  00371E  D07C               	goto	l613
  5053  003720                     
  5054                           ; BSR set to: 0
  5055                           ;main.c: 1353: timeout = 1;
  5056                           
  5057                           ; BSR set to: 0
  5058  003720  0E01               	movlw	1
  5059  003722  6FF4               	movwf	all_remain@timeout& (0+255),b
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;main.c: 1354: B_spacingTime += 30;
  5063  003724  0E1E               	movlw	30
  5064  003726  279D               	addwf	_B_spacingTime& (0+255),f,b
  5065  003728  0E00               	movlw	0
  5066  00372A  239E               	addwfc	(_B_spacingTime+1)& (0+255),f,b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;main.c: 1355: N_spacingTime += 30;
  5070  00372C  0E1E               	movlw	30
  5071  00372E  279B               	addwf	_N_spacingTime& (0+255),f,b
  5072  003730  0E00               	movlw	0
  5073  003732  239C               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;main.c: 1356: W_spacingTime += 30;
  5077  003734  0E1E               	movlw	30
  5078  003736  2797               	addwf	_W_spacingTime& (0+255),f,b
  5079  003738  0E00               	movlw	0
  5080  00373A  2398               	addwfc	(_W_spacingTime+1)& (0+255),f,b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;main.c: 1357: S_spacingTime += 30;
  5084  00373C  0E1E               	movlw	30
  5085  00373E  2799               	addwf	_S_spacingTime& (0+255),f,b
  5086  003740  0E00               	movlw	0
  5087  003742  239A               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;main.c: 1358: initLCD();
  5091  003744  EC29  F021         	call	_initLCD	;wreg free
  5092                           
  5093                           ;main.c: 1359: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5094  003748  0E80               	movlw	128
  5095  00374A  ECC6  F022         	call	_lcdInst
  5096  00374E  0E34               	movlw	52
  5097  003750  0100               	movlb	0	; () banked
  5098  003752  6FF2               	movwf	??_all_remain& (0+255),b
  5099  003754  0EF1               	movlw	241
  5100  003756                     u6467:
  5101  003756  2EE8               	decfsz	wreg,f,c
  5102  003758  D7FE               	bra	u6467
  5103  00375A  2FF2               	decfsz	??_all_remain& (0+255),f,b
  5104  00375C  D7FC               	bra	u6467
  5105  00375E  D000               	nop2	
  5106                           
  5107                           ;main.c: 1360: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  5108  003760  0E64               	movlw	low STR_18
  5109  003762  0100               	movlb	0	; () banked
  5110  003764  6FD4               	movwf	printf@f& (0+255),b
  5111  003766  0EFD               	movlw	high STR_18
  5112  003768  6FD5               	movwf	(printf@f+1)& (0+255),b
  5113  00376A  C0AD  F0D6         	movff	_B_counter,?_printf+2
  5114  00376E  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  5115  003772  C0A9  F0D8         	movff	_N_counter,?_printf+4
  5116  003776  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  5117  00377A  C0AB  F0DA         	movff	_S_counter,?_printf+6
  5118  00377E  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  5119  003782  C0A7  F0DC         	movff	_W_counter,?_printf+8
  5120  003786  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  5121  00378A  ECC3  F014         	call	_printf	;wreg free
  5122                           
  5123                           ;main.c: 1361: if(B_spacingTime > time){
  5124  00378E  0100               	movlb	0	; () banked
  5125  003790  519D               	movf	_B_spacingTime& (0+255),w,b
  5126  003792  5DF0               	subwf	all_remain@time& (0+255),w,b
  5127  003794  51F1               	movf	(all_remain@time+1)& (0+255),w,b
  5128  003796  0A80               	xorlw	128
  5129  003798  6FF2               	movwf	??_all_remain& (0+255),b
  5130  00379A  519E               	movf	(_B_spacingTime+1)& (0+255),w,b
  5131  00379C  0A80               	xorlw	128
  5132  00379E  59F2               	subwfb	??_all_remain& (0+255),w,b
  5133  0037A0  B0D8               	btfsc	status,0,c
  5134  0037A2  D004               	goto	l607
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;main.c: 1362: I2C_sendData('6');
  5138  0037A4  0E36               	movlw	54
  5139  0037A6  EC61  F022         	call	_I2C_sendData
  5140                           
  5141                           ;main.c: 1363: }
  5142  0037AA  D003               	goto	l608
  5143  0037AC                     l607:
  5144                           
  5145                           ;main.c: 1364: else{
  5146                           ;main.c: 1365: timeout = 0;
  5147  0037AC  0E00               	movlw	0
  5148  0037AE  0100               	movlb	0	; () banked
  5149  0037B0  6FF4               	movwf	all_remain@timeout& (0+255),b
  5150  0037B2                     l608:
  5151                           
  5152                           ;main.c: 1366: }
  5153                           ;main.c: 1367: if(N_spacingTime > time){
  5154                           
  5155                           ; BSR set to: 0
  5156  0037B2  0100               	movlb	0	; () banked
  5157  0037B4  519B               	movf	_N_spacingTime& (0+255),w,b
  5158  0037B6  5DF0               	subwf	all_remain@time& (0+255),w,b
  5159  0037B8  51F1               	movf	(all_remain@time+1)& (0+255),w,b
  5160  0037BA  0A80               	xorlw	128
  5161  0037BC  6FF2               	movwf	??_all_remain& (0+255),b
  5162  0037BE  519C               	movf	(_N_spacingTime+1)& (0+255),w,b
  5163  0037C0  0A80               	xorlw	128
  5164  0037C2  59F2               	subwfb	??_all_remain& (0+255),w,b
  5165  0037C4  B0D8               	btfsc	status,0,c
  5166  0037C6  D004               	goto	l609
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;main.c: 1368: I2C_sendData('8');
  5170  0037C8  0E38               	movlw	56
  5171  0037CA  EC61  F022         	call	_I2C_sendData
  5172                           
  5173                           ;main.c: 1369: }
  5174  0037CE  D003               	goto	l610
  5175  0037D0                     l609:
  5176                           
  5177                           ;main.c: 1370: else{
  5178                           ;main.c: 1371: timeout = 0;
  5179  0037D0  0E00               	movlw	0
  5180  0037D2  0100               	movlb	0	; () banked
  5181  0037D4  6FF4               	movwf	all_remain@timeout& (0+255),b
  5182  0037D6                     l610:
  5183                           
  5184                           ;main.c: 1372: }
  5185                           ;main.c: 1373: if(S_spacingTime > time){
  5186                           
  5187                           ; BSR set to: 0
  5188  0037D6  0100               	movlb	0	; () banked
  5189  0037D8  5199               	movf	_S_spacingTime& (0+255),w,b
  5190  0037DA  5DF0               	subwf	all_remain@time& (0+255),w,b
  5191  0037DC  51F1               	movf	(all_remain@time+1)& (0+255),w,b
  5192  0037DE  0A80               	xorlw	128
  5193  0037E0  6FF2               	movwf	??_all_remain& (0+255),b
  5194  0037E2  519A               	movf	(_S_spacingTime+1)& (0+255),w,b
  5195  0037E4  0A80               	xorlw	128
  5196  0037E6  59F2               	subwfb	??_all_remain& (0+255),w,b
  5197  0037E8  B0D8               	btfsc	status,0,c
  5198  0037EA  D004               	goto	l611
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;main.c: 1374: I2C_sendData(10);
  5202  0037EC  0E0A               	movlw	10
  5203  0037EE  EC61  F022         	call	_I2C_sendData
  5204                           
  5205                           ;main.c: 1375: }
  5206  0037F2  D003               	goto	l612
  5207  0037F4                     l611:
  5208                           
  5209                           ;main.c: 1376: else{
  5210                           ;main.c: 1377: timeout = 0;
  5211  0037F4  0E00               	movlw	0
  5212  0037F6  0100               	movlb	0	; () banked
  5213  0037F8  6FF4               	movwf	all_remain@timeout& (0+255),b
  5214  0037FA                     l612:
  5215                           
  5216                           ;main.c: 1378: }
  5217                           ;main.c: 1379: if(W_spacingTime > time){
  5218                           
  5219                           ; BSR set to: 0
  5220  0037FA  0100               	movlb	0	; () banked
  5221  0037FC  5197               	movf	_W_spacingTime& (0+255),w,b
  5222  0037FE  5DF0               	subwf	all_remain@time& (0+255),w,b
  5223  003800  51F1               	movf	(all_remain@time+1)& (0+255),w,b
  5224  003802  0A80               	xorlw	128
  5225  003804  6FF2               	movwf	??_all_remain& (0+255),b
  5226  003806  5198               	movf	(_W_spacingTime+1)& (0+255),w,b
  5227  003808  0A80               	xorlw	128
  5228  00380A  59F2               	subwfb	??_all_remain& (0+255),w,b
  5229  00380C  B0D8               	btfsc	status,0,c
  5230  00380E  D004               	goto	l613
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;main.c: 1380: I2C_sendData(12);
  5234  003810  0E0C               	movlw	12
  5235  003812  EC61  F022         	call	_I2C_sendData
  5236                           
  5237                           ;main.c: 1381: }
  5238  003816  D003               	goto	l614
  5239  003818                     l613:
  5240                           
  5241                           ;main.c: 1382: else{
  5242                           ;main.c: 1383: timeout = 0;
  5243  003818  0E00               	movlw	0
  5244  00381A  0100               	movlb	0	; () banked
  5245  00381C  6FF4               	movwf	all_remain@timeout& (0+255),b
  5246  00381E                     l614:
  5247                           
  5248                           ; BSR set to: 0
  5249                           
  5250                           ; BSR set to: 0
  5251  00381E  0100               	movlb	0	; () banked
  5252  003820  05BE               	decf	_EndOfProgram& (0+255),w,b
  5253  003822  B4D8               	btfsc	status,2,c
  5254  003824  D003               	goto	u3980
  5255                           
  5256                           ; BSR set to: 0
  5257  003826  05F4               	decf	all_remain@timeout& (0+255),w,b
  5258  003828  A4D8               	btfss	status,2,c
  5259  00382A  D77A               	goto	l606
  5260  00382C                     u3980:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;main.c: 1384: }
  5264                           ;main.c: 1385: }
  5265                           ;main.c: 1386: I2C_sendData('6');
  5266                           
  5267                           ; BSR set to: 0
  5268                           
  5269                           ; BSR set to: 0
  5270  00382C  0E36               	movlw	54
  5271  00382E  EC61  F022         	call	_I2C_sendData
  5272                           
  5273                           ;main.c: 1387: I2C_sendData('8');
  5274  003832  0E38               	movlw	56
  5275  003834  EC61  F022         	call	_I2C_sendData
  5276                           
  5277                           ;main.c: 1388: I2C_sendData(10);
  5278  003838  0E0A               	movlw	10
  5279  00383A  EC61  F022         	call	_I2C_sendData
  5280                           
  5281                           ;main.c: 1389: I2C_sendData(12);
  5282  00383E  0E0C               	movlw	12
  5283  003840  EC61  F022         	call	_I2C_sendData
  5284                           
  5285                           ;main.c: 1390: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5286  003844  0E80               	movlw	128
  5287  003846  ECC6  F022         	call	_lcdInst
  5288  00384A  0E34               	movlw	52
  5289  00384C  0100               	movlb	0	; () banked
  5290  00384E  6FF2               	movwf	??_all_remain& (0+255),b
  5291  003850  0EF1               	movlw	241
  5292  003852                     u6477:
  5293  003852  2EE8               	decfsz	wreg,f,c
  5294  003854  D7FE               	bra	u6477
  5295  003856  2FF2               	decfsz	??_all_remain& (0+255),f,b
  5296  003858  D7FC               	bra	u6477
  5297  00385A  D000               	nop2	
  5298                           
  5299                           ;main.c: 1391: printf("Program Terminates");
  5300  00385C  0ED9               	movlw	low STR_73
  5301  00385E  0100               	movlb	0	; () banked
  5302  003860  6FD4               	movwf	printf@f& (0+255),b
  5303  003862  0EFD               	movlw	high STR_73
  5304  003864  6FD5               	movwf	(printf@f+1)& (0+255),b
  5305  003866  ECC3  F014         	call	_printf	;wreg free
  5306  00386A  0012               	return		;funcret
  5307  00386C                     __end_of_all_remain:
  5308                           	opt stack 0
  5309                           tblptru	equ	0xFF8
  5310                           tblptrh	equ	0xFF7
  5311                           tblptrl	equ	0xFF6
  5312                           tablat	equ	0xFF5
  5313                           intcon	equ	0xFF2
  5314                           intcon3	equ	0xFF0
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           postdec1	equ	0xFE5
  5318                           fsr1l	equ	0xFE1
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function ___awdiv *****************
  5327 ;; Defined at:
  5328 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  dividend        2    0[BANK0 ] int 
  5331 ;;  divisor         2    2[BANK0 ] int 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  quotient        2    6[BANK0 ] int 
  5334 ;;  sign            1    5[BANK0 ] unsigned char 
  5335 ;;  counter         1    4[BANK0 ] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  2    0[BANK0 ] int 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5345 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;Total ram usage:        8 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    4
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_main
  5356 ;;		_get_RTC_initial
  5357 ;;		_get_RTC_final
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text5
  5362  003C7E                     __ptext5:
  5363                           	opt stack 0
  5364  003C7E                     ___awdiv:
  5365                           	opt stack 26
  5366                           
  5367                           ;incstack = 0
  5368  003C7E  0E00               	movlw	0
  5369  003C80  0100               	movlb	0	; () banked
  5370  003C82  6FCB               	movwf	___awdiv@sign& (0+255),b
  5371                           
  5372                           ; BSR set to: 0
  5373  003C84  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5374  003C86  D006               	goto	l1294
  5375                           
  5376                           ; BSR set to: 0
  5377  003C88  6DC8               	negf	___awdiv@divisor& (0+255),b
  5378  003C8A  1FC9               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5379  003C8C  B0D8               	btfsc	status,0,c
  5380  003C8E  2BC9               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5381                           
  5382                           ; BSR set to: 0
  5383  003C90  0E01               	movlw	1
  5384  003C92  6FCB               	movwf	___awdiv@sign& (0+255),b
  5385  003C94                     l1294:
  5386                           
  5387                           ; BSR set to: 0
  5388                           
  5389                           ; BSR set to: 0
  5390  003C94  AFC7               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5391  003C96  D006               	goto	l1295
  5392                           
  5393                           ; BSR set to: 0
  5394  003C98  6DC6               	negf	___awdiv@dividend& (0+255),b
  5395  003C9A  1FC7               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5396  003C9C  B0D8               	btfsc	status,0,c
  5397  003C9E  2BC7               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5398                           
  5399                           ; BSR set to: 0
  5400  003CA0  0E01               	movlw	1
  5401  003CA2  1BCB               	xorwf	___awdiv@sign& (0+255),f,b
  5402  003CA4                     l1295:
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407  003CA4  0E00               	movlw	0
  5408  003CA6  6FCD               	movwf	(___awdiv@quotient+1)& (0+255),b
  5409  003CA8  0E00               	movlw	0
  5410  003CAA  6FCC               	movwf	___awdiv@quotient& (0+255),b
  5411                           
  5412                           ; BSR set to: 0
  5413  003CAC  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5414  003CAE  11C9               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5415  003CB0  B4D8               	btfsc	status,2,c
  5416  003CB2  D01C               	goto	l1302
  5417                           
  5418                           ; BSR set to: 0
  5419  003CB4  0E01               	movlw	1
  5420  003CB6  6FCA               	movwf	___awdiv@counter& (0+255),b
  5421  003CB8  D004               	goto	l1297
  5422  003CBA                     
  5423                           ; BSR set to: 0
  5424                           
  5425                           ; BSR set to: 0
  5426  003CBA  90D8               	bcf	status,0,c
  5427  003CBC  37C8               	rlcf	___awdiv@divisor& (0+255),f,b
  5428  003CBE  37C9               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5429  003CC0  2BCA               	incf	___awdiv@counter& (0+255),f,b
  5430  003CC2                     l1297:
  5431                           
  5432                           ; BSR set to: 0
  5433                           
  5434                           ; BSR set to: 0
  5435  003CC2  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5436  003CC4  D7FA               	goto	l1298
  5437  003CC6                     u4370:
  5438                           
  5439                           ; BSR set to: 0
  5440                           
  5441                           ; BSR set to: 0
  5442                           
  5443                           ; BSR set to: 0
  5444  003CC6  90D8               	bcf	status,0,c
  5445  003CC8  37CC               	rlcf	___awdiv@quotient& (0+255),f,b
  5446  003CCA  37CD               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5447                           
  5448                           ; BSR set to: 0
  5449  003CCC  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5450  003CCE  5DC6               	subwf	___awdiv@dividend& (0+255),w,b
  5451  003CD0  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5452  003CD2  59C7               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5453  003CD4  A0D8               	btfss	status,0,c
  5454  003CD6  D005               	goto	l1301
  5455                           
  5456                           ; BSR set to: 0
  5457  003CD8  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5458  003CDA  5FC6               	subwf	___awdiv@dividend& (0+255),f,b
  5459  003CDC  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5460  003CDE  5BC7               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5461                           
  5462                           ; BSR set to: 0
  5463  003CE0  81CC               	bsf	___awdiv@quotient& (0+255),0,b
  5464  003CE2                     l1301:
  5465                           
  5466                           ; BSR set to: 0
  5467                           
  5468                           ; BSR set to: 0
  5469  003CE2  90D8               	bcf	status,0,c
  5470  003CE4  33C9               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5471  003CE6  33C8               	rrcf	___awdiv@divisor& (0+255),f,b
  5472                           
  5473                           ; BSR set to: 0
  5474  003CE8  2FCA               	decfsz	___awdiv@counter& (0+255),f,b
  5475  003CEA  D7ED               	goto	u4370
  5476  003CEC                     l1302:
  5477                           
  5478                           ; BSR set to: 0
  5479                           
  5480                           ; BSR set to: 0
  5481                           
  5482                           ; BSR set to: 0
  5483  003CEC  51CB               	movf	___awdiv@sign& (0+255),w,b
  5484  003CEE  B4D8               	btfsc	status,2,c
  5485  003CF0  D004               	goto	l1303
  5486                           
  5487                           ; BSR set to: 0
  5488  003CF2  6DCC               	negf	___awdiv@quotient& (0+255),b
  5489  003CF4  1FCD               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5490  003CF6  B0D8               	btfsc	status,0,c
  5491  003CF8  2BCD               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5492  003CFA                     l1303:
  5493                           
  5494                           ; BSR set to: 0
  5495                           
  5496                           ; BSR set to: 0
  5497  003CFA  C0CC  F0C6         	movff	___awdiv@quotient,?___awdiv
  5498  003CFE  C0CD  F0C7         	movff	___awdiv@quotient+1,?___awdiv+1
  5499  003D02  0012               	return	
  5500  003D04                     __end_of___awdiv:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           intcon	equ	0xFF2
  5507                           intcon3	equ	0xFF0
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           postdec1	equ	0xFE5
  5511                           fsr1l	equ	0xFE1
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _Washer_dispense *****************
  5520 ;; Defined at:
  5521 ;;		line 1297 in file "main.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  W_max           2   42[BANK0 ] int 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5535 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;Total ram usage:        3 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    7
  5542 ;; This function calls:
  5543 ;;		_I2C_sendData
  5544 ;;		_initLCD
  5545 ;;		_lcdInst
  5546 ;;		_printf
  5547 ;; This function is called by:
  5548 ;;		_main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text6
  5553  003A58                     __ptext6:
  5554                           	opt stack 0
  5555  003A58                     _Washer_dispense:
  5556                           	opt stack 23
  5557                           
  5558                           ;main.c: 1298: if (W_max == 0){
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;incstack = 0
  5562  003A58  0100               	movlb	0	; () banked
  5563  003A5A  51F0               	movf	Washer_dispense@W_max& (0+255),w,b
  5564  003A5C  11F1               	iorwf	(Washer_dispense@W_max+1)& (0+255),w,b
  5565  003A5E  B4D8               	btfsc	status,2,c
  5566  003A60  0012               	return	
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;main.c: 1300: }
  5570                           ;main.c: 1301: I2C_sendData(11);
  5571                           
  5572                           ; BSR set to: 0
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;main.c: 1299: return;
  5576  003A62  0E0B               	movlw	11
  5577  003A64  EC61  F022         	call	_I2C_sendData
  5578                           
  5579                           ;main.c: 1302: W_counter = 0;
  5580  003A68  0E00               	movlw	0
  5581  003A6A  0100               	movlb	0	; () banked
  5582  003A6C  6FA8               	movwf	(_W_counter+1)& (0+255),b
  5583  003A6E  0E00               	movlw	0
  5584  003A70  6FA7               	movwf	_W_counter& (0+255),b
  5585                           
  5586                           ;main.c: 1303: while(NeedToCloseLid != 1 && W_counter < W_max){
  5587  003A72  D025               	goto	l586
  5588  003A74                     
  5589                           ; BSR set to: 0
  5590                           ;main.c: 1304: initLCD();
  5591                           
  5592                           ; BSR set to: 0
  5593  003A74  EC29  F021         	call	_initLCD	;wreg free
  5594                           
  5595                           ;main.c: 1305: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5596  003A78  0E80               	movlw	128
  5597  003A7A  ECC6  F022         	call	_lcdInst
  5598  003A7E  0E34               	movlw	52
  5599  003A80  0100               	movlb	0	; () banked
  5600  003A82  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5601  003A84  0EF1               	movlw	241
  5602  003A86                     u6487:
  5603  003A86  2EE8               	decfsz	wreg,f,c
  5604  003A88  D7FE               	bra	u6487
  5605  003A8A  2FF2               	decfsz	??_Washer_dispense& (0+255),f,b
  5606  003A8C  D7FC               	bra	u6487
  5607  003A8E  D000               	nop2	
  5608                           
  5609                           ;main.c: 1306: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  5610  003A90  0E64               	movlw	low STR_18
  5611  003A92  0100               	movlb	0	; () banked
  5612  003A94  6FD4               	movwf	printf@f& (0+255),b
  5613  003A96  0EFD               	movlw	high STR_18
  5614  003A98  6FD5               	movwf	(printf@f+1)& (0+255),b
  5615  003A9A  C0AD  F0D6         	movff	_B_counter,?_printf+2
  5616  003A9E  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  5617  003AA2  C0A9  F0D8         	movff	_N_counter,?_printf+4
  5618  003AA6  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  5619  003AAA  C0AB  F0DA         	movff	_S_counter,?_printf+6
  5620  003AAE  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  5621  003AB2  C0A7  F0DC         	movff	_W_counter,?_printf+8
  5622  003AB6  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  5623  003ABA  ECC3  F014         	call	_printf	;wreg free
  5624  003ABE                     l586:
  5625  003ABE  0100               	movlb	0	; () banked
  5626  003AC0  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  5627  003AC2  B4D8               	btfsc	status,2,c
  5628  003AC4  D00A               	goto	u3920
  5629                           
  5630                           ; BSR set to: 0
  5631  003AC6  51F0               	movf	Washer_dispense@W_max& (0+255),w,b
  5632  003AC8  5DA7               	subwf	_W_counter& (0+255),w,b
  5633  003ACA  51A8               	movf	(_W_counter+1)& (0+255),w,b
  5634  003ACC  0A80               	xorlw	128
  5635  003ACE  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5636  003AD0  51F1               	movf	(Washer_dispense@W_max+1)& (0+255),w,b
  5637  003AD2  0A80               	xorlw	128
  5638  003AD4  59F2               	subwfb	??_Washer_dispense& (0+255),w,b
  5639  003AD6  A0D8               	btfss	status,0,c
  5640  003AD8  D7CD               	goto	l587
  5641  003ADA                     u3920:
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;main.c: 1307: }
  5645                           ;main.c: 1308: I2C_sendData(12);
  5646                           
  5647                           ; BSR set to: 0
  5648                           
  5649                           ; BSR set to: 0
  5650  003ADA  0E0C               	movlw	12
  5651  003ADC  EC61  F022         	call	_I2C_sendData
  5652  003AE0  0012               	return	
  5653  003AE2                     __end_of_Washer_dispense:
  5654                           	opt stack 0
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           intcon	equ	0xFF2
  5660                           intcon3	equ	0xFF0
  5661                           postinc0	equ	0xFEE
  5662                           wreg	equ	0xFE8
  5663                           postdec1	equ	0xFE5
  5664                           fsr1l	equ	0xFE1
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _Spacer_dispense *****************
  5673 ;; Defined at:
  5674 ;;		line 1283 in file "main.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  S_max           2   42[BANK0 ] int 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;Total ram usage:        3 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    7
  5695 ;; This function calls:
  5696 ;;		_I2C_sendData
  5697 ;;		_initLCD
  5698 ;;		_lcdInst
  5699 ;;		_printf
  5700 ;; This function is called by:
  5701 ;;		_main
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text7
  5706  003AE2                     __ptext7:
  5707                           	opt stack 0
  5708  003AE2                     _Spacer_dispense:
  5709                           	opt stack 23
  5710                           
  5711                           ;main.c: 1284: if (S_max == 0){
  5712                           
  5713                           ;incstack = 0
  5714  003AE2  0100               	movlb	0	; () banked
  5715  003AE4  51F0               	movf	Spacer_dispense@S_max& (0+255),w,b
  5716  003AE6  11F1               	iorwf	(Spacer_dispense@S_max+1)& (0+255),w,b
  5717  003AE8  B4D8               	btfsc	status,2,c
  5718  003AEA  0012               	return	
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 1286: }
  5722                           ;main.c: 1287: I2C_sendData('9');
  5723                           
  5724                           ; BSR set to: 0
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;main.c: 1285: return;
  5728  003AEC  0E39               	movlw	57
  5729  003AEE  EC61  F022         	call	_I2C_sendData
  5730                           
  5731                           ;main.c: 1288: S_counter = 0;
  5732  003AF2  0E00               	movlw	0
  5733  003AF4  0100               	movlb	0	; () banked
  5734  003AF6  6FAC               	movwf	(_S_counter+1)& (0+255),b
  5735  003AF8  0E00               	movlw	0
  5736  003AFA  6FAB               	movwf	_S_counter& (0+255),b
  5737                           
  5738                           ;main.c: 1289: while(NeedToCloseLid != 1 && S_counter < S_max){
  5739  003AFC  D025               	goto	l577
  5740  003AFE                     
  5741                           ; BSR set to: 0
  5742                           ;main.c: 1290: initLCD();
  5743                           
  5744                           ; BSR set to: 0
  5745  003AFE  EC29  F021         	call	_initLCD	;wreg free
  5746                           
  5747                           ;main.c: 1291: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5748  003B02  0E80               	movlw	128
  5749  003B04  ECC6  F022         	call	_lcdInst
  5750  003B08  0E34               	movlw	52
  5751  003B0A  0100               	movlb	0	; () banked
  5752  003B0C  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  5753  003B0E  0EF1               	movlw	241
  5754  003B10                     u6497:
  5755  003B10  2EE8               	decfsz	wreg,f,c
  5756  003B12  D7FE               	bra	u6497
  5757  003B14  2FF2               	decfsz	??_Spacer_dispense& (0+255),f,b
  5758  003B16  D7FC               	bra	u6497
  5759  003B18  D000               	nop2	
  5760                           
  5761                           ;main.c: 1292: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  5762  003B1A  0E64               	movlw	low STR_18
  5763  003B1C  0100               	movlb	0	; () banked
  5764  003B1E  6FD4               	movwf	printf@f& (0+255),b
  5765  003B20  0EFD               	movlw	high STR_18
  5766  003B22  6FD5               	movwf	(printf@f+1)& (0+255),b
  5767  003B24  C0AD  F0D6         	movff	_B_counter,?_printf+2
  5768  003B28  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  5769  003B2C  C0A9  F0D8         	movff	_N_counter,?_printf+4
  5770  003B30  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  5771  003B34  C0AB  F0DA         	movff	_S_counter,?_printf+6
  5772  003B38  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  5773  003B3C  C0A7  F0DC         	movff	_W_counter,?_printf+8
  5774  003B40  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  5775  003B44  ECC3  F014         	call	_printf	;wreg free
  5776  003B48                     l577:
  5777  003B48  0100               	movlb	0	; () banked
  5778  003B4A  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  5779  003B4C  B4D8               	btfsc	status,2,c
  5780  003B4E  D00A               	goto	u3890
  5781                           
  5782                           ; BSR set to: 0
  5783  003B50  51F0               	movf	Spacer_dispense@S_max& (0+255),w,b
  5784  003B52  5DAB               	subwf	_S_counter& (0+255),w,b
  5785  003B54  51AC               	movf	(_S_counter+1)& (0+255),w,b
  5786  003B56  0A80               	xorlw	128
  5787  003B58  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  5788  003B5A  51F1               	movf	(Spacer_dispense@S_max+1)& (0+255),w,b
  5789  003B5C  0A80               	xorlw	128
  5790  003B5E  59F2               	subwfb	??_Spacer_dispense& (0+255),w,b
  5791  003B60  A0D8               	btfss	status,0,c
  5792  003B62  D7CD               	goto	l578
  5793  003B64                     u3890:
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;main.c: 1293: }
  5797                           ;main.c: 1294: I2C_sendData(10);
  5798                           
  5799                           ; BSR set to: 0
  5800                           
  5801                           ; BSR set to: 0
  5802  003B64  0E0A               	movlw	10
  5803  003B66  EC61  F022         	call	_I2C_sendData
  5804  003B6A  0012               	return		;funcret
  5805  003B6C                     __end_of_Spacer_dispense:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           intcon	equ	0xFF2
  5812                           intcon3	equ	0xFF0
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           postdec1	equ	0xFE5
  5816                           fsr1l	equ	0xFE1
  5817                           indf2	equ	0xFDF
  5818                           postinc2	equ	0xFDE
  5819                           postdec2	equ	0xFDD
  5820                           fsr2h	equ	0xFDA
  5821                           fsr2l	equ	0xFD9
  5822                           status	equ	0xFD8
  5823                           
  5824 ;; *************** function _Nut_dispense *****************
  5825 ;; Defined at:
  5826 ;;		line 1268 in file "main.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  N_max           2   42[BANK0 ] int 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;		None
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;Total ram usage:        3 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    7
  5847 ;; This function calls:
  5848 ;;		_I2C_sendData
  5849 ;;		_initLCD
  5850 ;;		_lcdInst
  5851 ;;		_printf
  5852 ;; This function is called by:
  5853 ;;		_main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text8
  5858  003B6C                     __ptext8:
  5859                           	opt stack 0
  5860  003B6C                     _Nut_dispense:
  5861                           	opt stack 23
  5862                           
  5863                           ;main.c: 1269: if (N_max == 0){
  5864                           
  5865                           ;incstack = 0
  5866  003B6C  0100               	movlb	0	; () banked
  5867  003B6E  51F0               	movf	Nut_dispense@N_max& (0+255),w,b
  5868  003B70  11F1               	iorwf	(Nut_dispense@N_max+1)& (0+255),w,b
  5869  003B72  B4D8               	btfsc	status,2,c
  5870  003B74  0012               	return	
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;main.c: 1271: }
  5874                           ;main.c: 1272: I2C_sendData('7');
  5875                           
  5876                           ; BSR set to: 0
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;main.c: 1270: return;
  5880  003B76  0E37               	movlw	55
  5881  003B78  EC61  F022         	call	_I2C_sendData
  5882                           
  5883                           ;main.c: 1273: N_counter = 0;
  5884  003B7C  0E00               	movlw	0
  5885  003B7E  0100               	movlb	0	; () banked
  5886  003B80  6FAA               	movwf	(_N_counter+1)& (0+255),b
  5887  003B82  0E00               	movlw	0
  5888  003B84  6FA9               	movwf	_N_counter& (0+255),b
  5889                           
  5890                           ;main.c: 1274: while(NeedToCloseLid != 1 && N_counter < N_max){
  5891  003B86  D025               	goto	l568
  5892  003B88                     
  5893                           ; BSR set to: 0
  5894                           ;main.c: 1275: initLCD();
  5895                           
  5896                           ; BSR set to: 0
  5897  003B88  EC29  F021         	call	_initLCD	;wreg free
  5898                           
  5899                           ;main.c: 1276: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5900  003B8C  0E80               	movlw	128
  5901  003B8E  ECC6  F022         	call	_lcdInst
  5902  003B92  0E34               	movlw	52
  5903  003B94  0100               	movlb	0	; () banked
  5904  003B96  6FF2               	movwf	??_Nut_dispense& (0+255),b
  5905  003B98  0EF1               	movlw	241
  5906  003B9A                     u6507:
  5907  003B9A  2EE8               	decfsz	wreg,f,c
  5908  003B9C  D7FE               	bra	u6507
  5909  003B9E  2FF2               	decfsz	??_Nut_dispense& (0+255),f,b
  5910  003BA0  D7FC               	bra	u6507
  5911  003BA2  D000               	nop2	
  5912                           
  5913                           ;main.c: 1277: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  5914  003BA4  0E64               	movlw	low STR_18
  5915  003BA6  0100               	movlb	0	; () banked
  5916  003BA8  6FD4               	movwf	printf@f& (0+255),b
  5917  003BAA  0EFD               	movlw	high STR_18
  5918  003BAC  6FD5               	movwf	(printf@f+1)& (0+255),b
  5919  003BAE  C0AD  F0D6         	movff	_B_counter,?_printf+2
  5920  003BB2  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  5921  003BB6  C0A9  F0D8         	movff	_N_counter,?_printf+4
  5922  003BBA  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  5923  003BBE  C0AB  F0DA         	movff	_S_counter,?_printf+6
  5924  003BC2  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  5925  003BC6  C0A7  F0DC         	movff	_W_counter,?_printf+8
  5926  003BCA  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  5927  003BCE  ECC3  F014         	call	_printf	;wreg free
  5928  003BD2                     l568:
  5929  003BD2  0100               	movlb	0	; () banked
  5930  003BD4  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  5931  003BD6  B4D8               	btfsc	status,2,c
  5932  003BD8  D00A               	goto	u3860
  5933                           
  5934                           ; BSR set to: 0
  5935  003BDA  51F0               	movf	Nut_dispense@N_max& (0+255),w,b
  5936  003BDC  5DA9               	subwf	_N_counter& (0+255),w,b
  5937  003BDE  51AA               	movf	(_N_counter+1)& (0+255),w,b
  5938  003BE0  0A80               	xorlw	128
  5939  003BE2  6FF2               	movwf	??_Nut_dispense& (0+255),b
  5940  003BE4  51F1               	movf	(Nut_dispense@N_max+1)& (0+255),w,b
  5941  003BE6  0A80               	xorlw	128
  5942  003BE8  59F2               	subwfb	??_Nut_dispense& (0+255),w,b
  5943  003BEA  A0D8               	btfss	status,0,c
  5944  003BEC  D7CD               	goto	l569
  5945  003BEE                     u3860:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;main.c: 1278: }
  5949                           ;main.c: 1279: I2C_sendData('8');
  5950                           
  5951                           ; BSR set to: 0
  5952                           
  5953                           ; BSR set to: 0
  5954  003BEE  0E38               	movlw	56
  5955  003BF0  EC61  F022         	call	_I2C_sendData
  5956  003BF4  0012               	return		;funcret
  5957  003BF6                     __end_of_Nut_dispense:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           intcon	equ	0xFF2
  5964                           intcon3	equ	0xFF0
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           postdec1	equ	0xFE5
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _I2C_init *****************
  5977 ;; Defined at:
  5978 ;;		line 1236 in file "main.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    6
  5999 ;; This function calls:
  6000 ;;		_I2C_Master_Init
  6001 ;;		_I2C_Master_Start
  6002 ;;		_I2C_Master_Stop
  6003 ;;		_I2C_Master_Write
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           	psect	text9
  6010  004442                     __ptext9:
  6011                           	opt stack 0
  6012  004442                     _I2C_init:
  6013                           	opt stack 24
  6014                           
  6015                           ;main.c: 1237: I2C_Master_Init(100000);
  6016                           
  6017                           ;incstack = 0
  6018  004442  0EA0               	movlw	160
  6019  004444  0100               	movlb	0	; () banked
  6020  004446  6FD3               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  6021  004448  0E86               	movlw	134
  6022  00444A  6FD4               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  6023  00444C  0E01               	movlw	1
  6024  00444E  6FD5               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  6025  004450  0E00               	movlw	0
  6026  004452  6FD6               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  6027  004454  EC78  F020         	call	_I2C_Master_Init	;wreg free
  6028                           
  6029                           ;main.c: 1238: I2C_Master_Start();
  6030  004458  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  6031                           
  6032                           ;main.c: 1239: I2C_Master_Write(0b00010000);
  6033  00445C  0E00               	movlw	0
  6034  00445E  0100               	movlb	0	; () banked
  6035  004460  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6036  004462  0E10               	movlw	16
  6037  004464  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6038  004466  EC09  F023         	call	_I2C_Master_Write	;wreg free
  6039                           
  6040                           ;main.c: 1240: I2C_Master_Stop();
  6041  00446A  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  6042  00446E  0012               	return	
  6043  004470                     __end_of_I2C_init:
  6044                           	opt stack 0
  6045                           tblptru	equ	0xFF8
  6046                           tblptrh	equ	0xFF7
  6047                           tblptrl	equ	0xFF6
  6048                           tablat	equ	0xFF5
  6049                           intcon	equ	0xFF2
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           postdec1	equ	0xFE5
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function _I2C_Master_Init *****************
  6063 ;; Defined at:
  6064 ;;		line 14 in file "I2C.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;		None
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      void 
  6071 ;; Registers used:
  6072 ;;		wreg, status,2, status,0, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;Total ram usage:        8 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    5
  6085 ;; This function calls:
  6086 ;;		___lldiv
  6087 ;; This function is called by:
  6088 ;;		_I2C_init
  6089 ;;		_initRamp
  6090 ;;		_ramp_Rotate
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text10
  6095  0040F0                     __ptext10:
  6096                           	opt stack 0
  6097  0040F0                     _I2C_Master_Init:
  6098                           	opt stack 24
  6099                           
  6100                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  6101                           
  6102                           ;incstack = 0
  6103  0040F0  9AC6               	bcf	4038,5,c	;volatile
  6104                           
  6105                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  6106  0040F2  8694               	bsf	3988,3,c	;volatile
  6107                           
  6108                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  6109  0040F4  8894               	bsf	3988,4,c	;volatile
  6110                           
  6111                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  6112  0040F6  0E80               	movlw	128
  6113  0040F8  6EC7               	movwf	4039,c	;volatile
  6114                           
  6115                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  6116  0040FA  0E28               	movlw	40
  6117  0040FC  6EC6               	movwf	4038,c	;volatile
  6118                           
  6119                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  6120  0040FE  0E00               	movlw	0
  6121  004100  6EC5               	movwf	4037,c	;volatile
  6122                           
  6123                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
  6124  004102  0E00               	movlw	0
  6125  004104  0100               	movlb	0	; () banked
  6126  004106  6FC6               	movwf	___lldiv@dividend& (0+255),b
  6127  004108  0E48               	movlw	72
  6128  00410A  6FC7               	movwf	(___lldiv@dividend+1)& (0+255),b
  6129  00410C  0EE8               	movlw	232
  6130  00410E  6FC8               	movwf	(___lldiv@dividend+2)& (0+255),b
  6131  004110  0E01               	movlw	1
  6132  004112  6FC9               	movwf	(___lldiv@dividend+3)& (0+255),b
  6133  004114  C0D3  F0D7         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  6134  004118  C0D4  F0D8         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  6135  00411C  C0D5  F0D9         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  6136  004120  C0D6  F0DA         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  6137  004124  0E02               	movlw	2
  6138  004126                     u3645:
  6139  004126  90D8               	bcf	status,0,c
  6140  004128  37D7               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6141  00412A  37D8               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6142  00412C  37D9               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6143  00412E  37DA               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6144  004130  2EE8               	decfsz	wreg,f,c
  6145  004132  D7F9               	goto	u3645
  6146  004134  C0D7  F0CA         	movff	??_I2C_Master_Init,___lldiv@divisor
  6147  004138  C0D8  F0CB         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6148  00413C  C0D9  F0CC         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6149  004140  C0DA  F0CD         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6150  004144  EC08  F01F         	call	___lldiv	;wreg free
  6151  004148  0100               	movlb	0	; () banked
  6152  00414A  05C6               	decf	?___lldiv& (0+255),w,b
  6153  00414C  6EC8               	movwf	4040,c	;volatile
  6154                           
  6155                           ; BSR set to: 0
  6156  00414E  0012               	return		;funcret
  6157  004150                     __end_of_I2C_Master_Init:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           intcon	equ	0xFF2
  6164                           intcon3	equ	0xFF0
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           postdec1	equ	0xFE5
  6168                           fsr1l	equ	0xFE1
  6169                           indf2	equ	0xFDF
  6170                           postinc2	equ	0xFDE
  6171                           postdec2	equ	0xFDD
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function ___lldiv *****************
  6177 ;; Defined at:
  6178 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  dividend        4    0[BANK0 ] unsigned long 
  6181 ;;  divisor         4    4[BANK0 ] unsigned long 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  quotient        4    8[BANK0 ] unsigned long 
  6184 ;;  counter         1   12[BANK0 ] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  4    0[BANK0 ] unsigned long 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6194 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;Total ram usage:       13 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    4
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_I2C_Master_Init
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text11
  6209  003E10                     __ptext11:
  6210                           	opt stack 0
  6211  003E10                     ___lldiv:
  6212                           	opt stack 24
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;incstack = 0
  6216  003E10  0E00               	movlw	0
  6217  003E12  0100               	movlb	0	; () banked
  6218  003E14  6FCE               	movwf	___lldiv@quotient& (0+255),b
  6219  003E16  0E00               	movlw	0
  6220  003E18  6FCF               	movwf	(___lldiv@quotient+1)& (0+255),b
  6221  003E1A  0E00               	movlw	0
  6222  003E1C  6FD0               	movwf	(___lldiv@quotient+2)& (0+255),b
  6223  003E1E  0E00               	movlw	0
  6224  003E20  6FD1               	movwf	(___lldiv@quotient+3)& (0+255),b
  6225                           
  6226                           ; BSR set to: 0
  6227  003E22  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6228  003E24  11CB               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6229  003E26  11CC               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6230  003E28  11CD               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6231  003E2A  B4D8               	btfsc	status,2,c
  6232  003E2C  D02A               	goto	l1487
  6233                           
  6234                           ; BSR set to: 0
  6235  003E2E  0E01               	movlw	1
  6236  003E30  6FD2               	movwf	___lldiv@counter& (0+255),b
  6237  003E32  D006               	goto	l1482
  6238  003E34                     
  6239                           ; BSR set to: 0
  6240                           
  6241                           ; BSR set to: 0
  6242  003E34  90D8               	bcf	status,0,c
  6243  003E36  37CA               	rlcf	___lldiv@divisor& (0+255),f,b
  6244  003E38  37CB               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6245  003E3A  37CC               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6246  003E3C  37CD               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6247  003E3E  2BD2               	incf	___lldiv@counter& (0+255),f,b
  6248  003E40                     l1482:
  6249                           
  6250                           ; BSR set to: 0
  6251                           
  6252                           ; BSR set to: 0
  6253  003E40  AFCD               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6254  003E42  D7F8               	goto	l1483
  6255  003E44                     u3240:
  6256                           
  6257                           ; BSR set to: 0
  6258                           
  6259                           ; BSR set to: 0
  6260                           
  6261                           ; BSR set to: 0
  6262  003E44  90D8               	bcf	status,0,c
  6263  003E46  37CE               	rlcf	___lldiv@quotient& (0+255),f,b
  6264  003E48  37CF               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6265  003E4A  37D0               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6266  003E4C  37D1               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6267                           
  6268                           ; BSR set to: 0
  6269  003E4E  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6270  003E50  5DC6               	subwf	___lldiv@dividend& (0+255),w,b
  6271  003E52  51CB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6272  003E54  59C7               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6273  003E56  51CC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6274  003E58  59C8               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6275  003E5A  51CD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6276  003E5C  59C9               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6277  003E5E  A0D8               	btfss	status,0,c
  6278  003E60  D009               	goto	l1486
  6279                           
  6280                           ; BSR set to: 0
  6281  003E62  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6282  003E64  5FC6               	subwf	___lldiv@dividend& (0+255),f,b
  6283  003E66  51CB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6284  003E68  5BC7               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6285  003E6A  51CC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6286  003E6C  5BC8               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6287  003E6E  51CD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6288  003E70  5BC9               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6289                           
  6290                           ; BSR set to: 0
  6291  003E72  81CE               	bsf	___lldiv@quotient& (0+255),0,b
  6292  003E74                     l1486:
  6293                           
  6294                           ; BSR set to: 0
  6295                           
  6296                           ; BSR set to: 0
  6297  003E74  90D8               	bcf	status,0,c
  6298  003E76  33CD               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6299  003E78  33CC               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6300  003E7A  33CB               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6301  003E7C  33CA               	rrcf	___lldiv@divisor& (0+255),f,b
  6302                           
  6303                           ; BSR set to: 0
  6304  003E7E  2FD2               	decfsz	___lldiv@counter& (0+255),f,b
  6305  003E80  D7E1               	goto	u3240
  6306  003E82                     l1487:
  6307                           
  6308                           ; BSR set to: 0
  6309                           
  6310                           ; BSR set to: 0
  6311  003E82  C0CE  F0C6         	movff	___lldiv@quotient,?___lldiv
  6312  003E86  C0CF  F0C7         	movff	___lldiv@quotient+1,?___lldiv+1
  6313  003E8A  C0D0  F0C8         	movff	___lldiv@quotient+2,?___lldiv+2
  6314  003E8E  C0D1  F0C9         	movff	___lldiv@quotient+3,?___lldiv+3
  6315                           
  6316                           ; BSR set to: 0
  6317  003E92  0012               	return		;funcret
  6318  003E94                     __end_of___lldiv:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           intcon	equ	0xFF2
  6325                           intcon3	equ	0xFF0
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           postdec1	equ	0xFE5
  6329                           fsr1l	equ	0xFE1
  6330                           indf2	equ	0xFDF
  6331                           postinc2	equ	0xFDE
  6332                           postdec2	equ	0xFDD
  6333                           fsr2h	equ	0xFDA
  6334                           fsr2l	equ	0xFD9
  6335                           status	equ	0xFD8
  6336                           
  6337 ;; *************** function _I2C_Master_Read *****************
  6338 ;; Defined at:
  6339 ;;		line 120 in file "I2C.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  ackBit          1    wreg     unsigned char 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  ackBit          1    1[BANK0 ] unsigned char 
  6344 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      unsigned char 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;Total ram usage:        2 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    5
  6361 ;; This function calls:
  6362 ;;		_I2C_Master_Wait
  6363 ;; This function is called by:
  6364 ;;		_main
  6365 ;;		_get_RTC_initial
  6366 ;;		_get_RTC_final
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text12
  6371  004470                     __ptext12:
  6372                           	opt stack 0
  6373  004470                     _I2C_Master_Read:
  6374                           	opt stack 25
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;incstack = 0
  6378                           ;I2C_Master_Read@ackBit stored from wreg
  6379  004470  0100               	movlb	0	; () banked
  6380  004472  6FC7               	movwf	I2C_Master_Read@ackBit& (0+255),b
  6381                           
  6382                           ;I2C.c: 130: unsigned char receivedByte;
  6383                           ;I2C.c: 132: I2C_Master_Wait();
  6384  004474  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  6385                           
  6386                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6387  004478  86C5               	bsf	4037,3,c	;volatile
  6388                           
  6389                           ;I2C.c: 135: I2C_Master_Wait();
  6390  00447A  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  6391                           
  6392                           ;I2C.c: 136: receivedByte = SSPBUF;
  6393  00447E  CFC9 F0C8          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6394                           
  6395                           ;I2C.c: 138: I2C_Master_Wait();
  6396  004482  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  6397                           
  6398                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6399  004486  0100               	movlb	0	; () banked
  6400  004488  B1C7               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  6401  00448A  D002               	bra	u3805
  6402  00448C  9AC5               	bcf	4037,5,c	;volatile
  6403  00448E  D001               	bra	u3806
  6404  004490                     u3805:
  6405  004490  8AC5               	bsf	4037,5,c	;volatile
  6406  004492                     u3806:
  6407                           
  6408                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  6409  004492  88C5               	bsf	4037,4,c	;volatile
  6410                           
  6411                           ;I2C.c: 142: return receivedByte;
  6412  004494  0100               	movlb	0	; () banked
  6413  004496  51C8               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  6414  004498  0012               	return	
  6415  00449A                     __end_of_I2C_Master_Read:
  6416                           	opt stack 0
  6417                           tblptru	equ	0xFF8
  6418                           tblptrh	equ	0xFF7
  6419                           tblptrl	equ	0xFF6
  6420                           tablat	equ	0xFF5
  6421                           intcon	equ	0xFF2
  6422                           intcon3	equ	0xFF0
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           postdec1	equ	0xFE5
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _Bolt_dispense *****************
  6435 ;; Defined at:
  6436 ;;		line 1254 in file "main.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  B_max           2   42[BANK0 ] int 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;Total ram usage:        3 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    7
  6457 ;; This function calls:
  6458 ;;		_I2C_sendData
  6459 ;;		_initLCD
  6460 ;;		_lcdInst
  6461 ;;		_printf
  6462 ;; This function is called by:
  6463 ;;		_main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text13
  6468  003F9A                     __ptext13:
  6469                           	opt stack 0
  6470  003F9A                     _Bolt_dispense:
  6471                           	opt stack 23
  6472                           
  6473                           ;main.c: 1255: if (B_max == 0){
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;incstack = 0
  6477  003F9A  0100               	movlb	0	; () banked
  6478  003F9C  51F0               	movf	Bolt_dispense@B_max& (0+255),w,b
  6479  003F9E  11F1               	iorwf	(Bolt_dispense@B_max+1)& (0+255),w,b
  6480  003FA0  B4D8               	btfsc	status,2,c
  6481  003FA2  0012               	return	
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;main.c: 1257: }
  6485                           ;main.c: 1259: I2C_sendData('5');
  6486                           
  6487                           ; BSR set to: 0
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;main.c: 1256: return;
  6491  003FA4  0E35               	movlw	53
  6492  003FA6  EC61  F022         	call	_I2C_sendData
  6493                           
  6494                           ;main.c: 1260: while(NeedToCloseLid != 1 && B_counter < B_max){
  6495  003FAA  D025               	goto	l559
  6496  003FAC                     
  6497                           ;main.c: 1261: initLCD();
  6498  003FAC  EC29  F021         	call	_initLCD	;wreg free
  6499                           
  6500                           ;main.c: 1262: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  6501  003FB0  0E80               	movlw	128
  6502  003FB2  ECC6  F022         	call	_lcdInst
  6503  003FB6  0E34               	movlw	52
  6504  003FB8  0100               	movlb	0	; () banked
  6505  003FBA  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  6506  003FBC  0EF1               	movlw	241
  6507  003FBE                     u6517:
  6508  003FBE  2EE8               	decfsz	wreg,f,c
  6509  003FC0  D7FE               	bra	u6517
  6510  003FC2  2FF2               	decfsz	??_Bolt_dispense& (0+255),f,b
  6511  003FC4  D7FC               	bra	u6517
  6512  003FC6  D000               	nop2	
  6513                           
  6514                           ;main.c: 1263: printf("B:%d,N:%d,S:%d,W:%d",B_counter,N_counter,S_counter,W_counter);
  6515  003FC8  0E64               	movlw	low STR_18
  6516  003FCA  0100               	movlb	0	; () banked
  6517  003FCC  6FD4               	movwf	printf@f& (0+255),b
  6518  003FCE  0EFD               	movlw	high STR_18
  6519  003FD0  6FD5               	movwf	(printf@f+1)& (0+255),b
  6520  003FD2  C0AD  F0D6         	movff	_B_counter,?_printf+2
  6521  003FD6  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  6522  003FDA  C0A9  F0D8         	movff	_N_counter,?_printf+4
  6523  003FDE  C0AA  F0D9         	movff	_N_counter+1,?_printf+5
  6524  003FE2  C0AB  F0DA         	movff	_S_counter,?_printf+6
  6525  003FE6  C0AC  F0DB         	movff	_S_counter+1,?_printf+7
  6526  003FEA  C0A7  F0DC         	movff	_W_counter,?_printf+8
  6527  003FEE  C0A8  F0DD         	movff	_W_counter+1,?_printf+9
  6528  003FF2  ECC3  F014         	call	_printf	;wreg free
  6529  003FF6                     l559:
  6530  003FF6  0100               	movlb	0	; () banked
  6531  003FF8  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  6532  003FFA  B4D8               	btfsc	status,2,c
  6533  003FFC  D00A               	goto	u3830
  6534                           
  6535                           ; BSR set to: 0
  6536  003FFE  51F0               	movf	Bolt_dispense@B_max& (0+255),w,b
  6537  004000  5DAD               	subwf	_B_counter& (0+255),w,b
  6538  004002  51AE               	movf	(_B_counter+1)& (0+255),w,b
  6539  004004  0A80               	xorlw	128
  6540  004006  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  6541  004008  51F1               	movf	(Bolt_dispense@B_max+1)& (0+255),w,b
  6542  00400A  0A80               	xorlw	128
  6543  00400C  59F2               	subwfb	??_Bolt_dispense& (0+255),w,b
  6544  00400E  A0D8               	btfss	status,0,c
  6545  004010  D7CD               	goto	l560
  6546  004012                     u3830:
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;main.c: 1264: }
  6550                           ;main.c: 1265: I2C_sendData('6');
  6551                           
  6552                           ; BSR set to: 0
  6553                           
  6554                           ; BSR set to: 0
  6555  004012  0E36               	movlw	54
  6556  004014  EC61  F022         	call	_I2C_sendData
  6557  004018  0012               	return		;funcret
  6558  00401A                     __end_of_Bolt_dispense:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           intcon	equ	0xFF2
  6565                           intcon3	equ	0xFF0
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           postdec1	equ	0xFE5
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _printf *****************
  6578 ;; Defined at:
  6579 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6582 ;;		 -> STR_77(20), STR_76(20), STR_75(20), STR_74(20), 
  6583 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
  6584 ;;		 -> STR_69(20), STR_68(20), STR_67(20), STR_66(3), 
  6585 ;;		 -> STR_65(12), STR_64(19), STR_63(19), STR_62(14), 
  6586 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(16), 
  6587 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
  6588 ;;		 -> STR_50(9), STR_45(15), STR_44(12), STR_43(17), 
  6589 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(20), 
  6590 ;;		 -> STR_38(17), STR_37(13), STR_36(16), STR_35(15), 
  6591 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(9), 
  6592 ;;		 -> STR_30(10), STR_29(19), STR_28(17), STR_27(17), 
  6593 ;;		 -> STR_26(17), STR_25(14), STR_24(15), STR_23(11), 
  6594 ;;		 -> STR_22(11), STR_21(9), STR_20(15), STR_19(12), 
  6595 ;;		 -> STR_18(20), STR_17(7), STR_16(16), STR_15(14), 
  6596 ;;		 -> STR_14(3), STR_13(2), STR_12(3), STR_11(2), 
  6597 ;;		 -> STR_10(3), STR_9(5), STR_8(17), STR_7(18), 
  6598 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
  6599 ;;		 -> STR_2(20), STR_1(16), 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  idx             1   28[BANK0 ] unsigned char 
  6602 ;;  tmpval          4    0        struct .
  6603 ;;  width           2   39[BANK0 ] int 
  6604 ;;  val             2   36[BANK0 ] unsigned int 
  6605 ;;  len             2   34[BANK0 ] unsigned int 
  6606 ;;  ap              2   32[BANK0 ] PTR void [1]
  6607 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6608 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
  6609 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
  6610 ;;  c               1   41[BANK0 ] char 
  6611 ;;  flag            1   38[BANK0 ] unsigned char 
  6612 ;;  prec            1   29[BANK0 ] char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  2   14[BANK0 ] int 
  6615 ;; Registers used:
  6616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:       28 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    6
  6629 ;; This function calls:
  6630 ;;		___lwdiv
  6631 ;;		___lwmod
  6632 ;;		___wmul
  6633 ;;		_isdigit
  6634 ;;		_putch
  6635 ;; This function is called by:
  6636 ;;		_main
  6637 ;;		_Bolt_dispense
  6638 ;;		_Nut_dispense
  6639 ;;		_Spacer_dispense
  6640 ;;		_Washer_dispense
  6641 ;;		_all_remain
  6642 ;;		_count_gear
  6643 ;;		_nut_washer_remain
  6644 ;;		_Bolt_remain
  6645 ;;		_Nut_remain
  6646 ;;		_Spacer_remain
  6647 ;;		_Washer_remain
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text14
  6652  002986                     __ptext14:
  6653                           	opt stack 0
  6654  002986                     _printf:
  6655                           	opt stack 24
  6656                           
  6657                           ;doprnt.c: 466: va_list ap;
  6658                           ;doprnt.c: 499: signed char c;
  6659                           ;doprnt.c: 501: int width;
  6660                           ;doprnt.c: 506: signed char prec;
  6661                           ;doprnt.c: 508: unsigned char flag;
  6662                           ;doprnt.c: 523: union {
  6663                           ;doprnt.c: 524: unsigned long vd;
  6664                           ;doprnt.c: 525: double integ;
  6665                           ;doprnt.c: 526: } tmpval;
  6666                           ;doprnt.c: 528: unsigned int val;
  6667                           ;doprnt.c: 529: unsigned len;
  6668                           ;doprnt.c: 530: const char * cp;
  6669                           ;doprnt.c: 533: *ap = __va_start();
  6670                           
  6671                           ;incstack = 0
  6672  002986  0ED6               	movlw	low (?_printf+2)
  6673  002988  0100               	movlb	0	; () banked
  6674  00298A  6FE6               	movwf	printf@ap& (0+255),b
  6675  00298C  0E00               	movlw	high (?_printf+2)
  6676  00298E  6FE7               	movwf	(printf@ap+1)& (0+255),b
  6677                           
  6678                           ;doprnt.c: 536: while(c = *f++) {
  6679  002990  D20F               	goto	u3620
  6680  002992                     
  6681                           ; BSR set to: 0
  6682                           ;doprnt.c: 538: if(c != '%')
  6683                           
  6684                           ; BSR set to: 0
  6685  002992  0E25               	movlw	37
  6686  002994  19EF               	xorwf	printf@c& (0+255),w,b
  6687  002996  B4D8               	btfsc	status,2,c
  6688  002998  D004               	goto	l1061
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;doprnt.c: 540: {
  6692                           ;doprnt.c: 541: (putch(c) );
  6693  00299A  51EF               	movf	printf@c& (0+255),w,b
  6694  00299C  ECBA  F022         	call	_putch
  6695                           
  6696                           ;doprnt.c: 542: continue;
  6697  0029A0  D207               	goto	u3620
  6698  0029A2                     l1061:
  6699                           
  6700                           ;doprnt.c: 543: }
  6701                           ;doprnt.c: 546: width = 0;
  6702  0029A2  0E00               	movlw	0
  6703  0029A4  0100               	movlb	0	; () banked
  6704  0029A6  6FEE               	movwf	(printf@width+1)& (0+255),b
  6705  0029A8  0E00               	movlw	0
  6706  0029AA  6FED               	movwf	printf@width& (0+255),b
  6707                           
  6708                           ;doprnt.c: 548: flag = 0;
  6709  0029AC  0E00               	movlw	0
  6710  0029AE  6FEC               	movwf	printf@flag& (0+255),b
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;doprnt.c: 551: switch(*f) {
  6714                           
  6715                           ;doprnt.c: 550: for(;;) {
  6716  0029B0  D004               	goto	l1063
  6717  0029B2                     
  6718                           ;doprnt.c: 580: flag |= 0x04;
  6719                           
  6720                           ; BSR set to: 0
  6721  0029B2  0100               	movlb	0	; () banked
  6722  0029B4  85EC               	bsf	printf@flag& (0+255),2,b
  6723                           
  6724                           ;doprnt.c: 581: f++;
  6725  0029B6  4BD4               	infsnz	printf@f& (0+255),f,b
  6726  0029B8  2BD5               	incf	(printf@f+1)& (0+255),f,b
  6727  0029BA                     l1063:
  6728                           
  6729                           ; BSR set to: 0
  6730  0029BA  C0D4  FFF6         	movff	printf@f,tblptrl
  6731  0029BE  C0D5  FFF7         	movff	printf@f+1,tblptrh
  6732  0029C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6733  0029C2  6AF8               	clrf	tblptru,c
  6734  0029C4                     	endif
  6735  0029C4                     	if	0	;tblptru may be non-zero
  6736  0029C4                     	endif
  6737  0029C4  0008               	tblrd		*
  6738  0029C6  50F5               	movf	tablat,w,c
  6739                           
  6740                           ; Switch size 1, requested type "space"
  6741                           ; Number of cases is 1, Range of values is 48 to 48
  6742                           ; switch strategies available:
  6743                           ; Name         Instructions Cycles
  6744                           ; simple_byte            4     3 (average)
  6745                           ;	Chosen strategy is simple_byte
  6746  0029C8  0A30               	xorlw	48	; case 48
  6747  0029CA  B4D8               	btfsc	status,2,c
  6748  0029CC  D7F2               	goto	l1064
  6749                           
  6750                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6751                           
  6752                           ;doprnt.c: 586: }
  6753                           
  6754                           ;doprnt.c: 585: break;
  6755  0029CE  C0D4  FFF6         	movff	printf@f,tblptrl
  6756  0029D2  C0D5  FFF7         	movff	printf@f+1,tblptrh
  6757  0029D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6758  0029D6  6AF8               	clrf	tblptru,c
  6759  0029D8                     	endif
  6760  0029D8                     	if	0	;tblptru may be non-zero
  6761  0029D8                     	endif
  6762  0029D8  0008               	tblrd		*
  6763  0029DA  50F5               	movf	tablat,w,c
  6764  0029DC  EC9A  F022         	call	_isdigit
  6765  0029E0  A0D8               	btfss	status,0,c
  6766  0029E2  D0AE               	goto	l1071
  6767                           
  6768                           ;doprnt.c: 598: width = 0;
  6769  0029E4  0E00               	movlw	0
  6770  0029E6  0100               	movlb	0	; () banked
  6771  0029E8  6FEE               	movwf	(printf@width+1)& (0+255),b
  6772  0029EA  0E00               	movlw	0
  6773  0029EC  6FED               	movwf	printf@width& (0+255),b
  6774  0029EE                     
  6775                           ;doprnt.c: 600: width *= 10;
  6776                           
  6777                           ; BSR set to: 0
  6778  0029EE  C0ED  F0CE         	movff	printf@width,___wmul@multiplier
  6779  0029F2  C0EE  F0CF         	movff	printf@width+1,___wmul@multiplier+1
  6780  0029F6  0E00               	movlw	0
  6781  0029F8  0100               	movlb	0	; () banked
  6782  0029FA  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6783  0029FC  0E0A               	movlw	10
  6784  0029FE  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  6785  002A00  EC4D  F022         	call	___wmul	;wreg free
  6786  002A04  C0CE  F0ED         	movff	?___wmul,printf@width
  6787  002A08  C0CF  F0EE         	movff	?___wmul+1,printf@width+1
  6788                           
  6789                           ;doprnt.c: 601: width += *f++ - '0';
  6790  002A0C  0ED0               	movlw	208
  6791  002A0E  0100               	movlb	0	; () banked
  6792  002A10  6FDE               	movwf	??_printf& (0+255),b
  6793  002A12  0EFF               	movlw	255
  6794  002A14  6FDF               	movwf	(??_printf+1)& (0+255),b
  6795  002A16  C0D4  FFF6         	movff	printf@f,tblptrl
  6796  002A1A  C0D5  FFF7         	movff	printf@f+1,tblptrh
  6797  002A1E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6798  002A1E  6AF8               	clrf	tblptru,c
  6799  002A20                     	endif
  6800  002A20                     	if	0	;tblptru may be non-zero
  6801  002A20                     	endif
  6802  002A20  0008               	tblrd		*
  6803  002A22  50F5               	movf	tablat,w,c
  6804  002A24  6FE0               	movwf	(??_printf+2)& (0+255),b
  6805  002A26  6BE1               	clrf	(??_printf+3)& (0+255),b
  6806  002A28  51DE               	movf	??_printf& (0+255),w,b
  6807  002A2A  27E0               	addwf	(??_printf+2)& (0+255),f,b
  6808  002A2C  51DF               	movf	(??_printf+1)& (0+255),w,b
  6809  002A2E  23E1               	addwfc	(??_printf+3)& (0+255),f,b
  6810  002A30  51E0               	movf	(??_printf+2)& (0+255),w,b
  6811  002A32  27ED               	addwf	printf@width& (0+255),f,b
  6812  002A34  51E1               	movf	(??_printf+3)& (0+255),w,b
  6813  002A36  23EE               	addwfc	(printf@width+1)& (0+255),f,b
  6814                           
  6815                           ; BSR set to: 0
  6816  002A38  4BD4               	infsnz	printf@f& (0+255),f,b
  6817  002A3A  2BD5               	incf	(printf@f+1)& (0+255),f,b
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6821  002A3C  C0D4  FFF6         	movff	printf@f,tblptrl
  6822  002A40  C0D5  FFF7         	movff	printf@f+1,tblptrh
  6823  002A44                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6824  002A44  6AF8               	clrf	tblptru,c
  6825  002A46                     	endif
  6826  002A46                     	if	0	;tblptru may be non-zero
  6827  002A46                     	endif
  6828  002A46  0008               	tblrd		*
  6829  002A48  50F5               	movf	tablat,w,c
  6830  002A4A  EC9A  F022         	call	_isdigit
  6831  002A4E  A0D8               	btfss	status,0,c
  6832  002A50  D077               	goto	l1071
  6833  002A52  D7CD               	goto	l1069
  6834  002A54                     
  6835                           ;doprnt.c: 721: flag |= 0x80;
  6836  002A54  0100               	movlb	0	; () banked
  6837  002A56  8FEC               	bsf	printf@flag& (0+255),7,b
  6838                           
  6839                           ;doprnt.c: 723: break;
  6840  002A58  D08F               	goto	l1076
  6841  002A5A                     
  6842                           ; BSR set to: 0
  6843                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6844                           
  6845                           ; BSR set to: 0
  6846  002A5A  C0E6  FFD9         	movff	printf@ap,fsr2l
  6847  002A5E  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  6848  002A62  CFDE F0E4          	movff	postinc2,printf@cp
  6849  002A66  CFDD F0E5          	movff	postdec2,printf@cp+1
  6850                           
  6851                           ; BSR set to: 0
  6852  002A6A  0E02               	movlw	2
  6853  002A6C  27E6               	addwf	printf@ap& (0+255),f,b
  6854  002A6E  0E00               	movlw	0
  6855  002A70  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;doprnt.c: 740: if(!cp)
  6859  002A72  51E4               	movf	printf@cp& (0+255),w,b
  6860  002A74  11E5               	iorwf	(printf@cp+1)& (0+255),w,b
  6861  002A76  A4D8               	btfss	status,2,c
  6862  002A78  D004               	goto	l1079
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;doprnt.c: 741: cp = "(null)";
  6866  002A7A  0EB1               	movlw	low STR_98
  6867  002A7C  6FE4               	movwf	printf@cp& (0+255),b
  6868  002A7E  0EFF               	movlw	high STR_98
  6869  002A80  6FE5               	movwf	(printf@cp+1)& (0+255),b
  6870  002A82                     l1079:
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;doprnt.c: 745: len = 0;
  6874                           
  6875                           ; BSR set to: 0
  6876  002A82  0E00               	movlw	0
  6877  002A84  6FE9               	movwf	(printf@len+1)& (0+255),b
  6878  002A86  0E00               	movlw	0
  6879  002A88  6FE8               	movwf	printf@len& (0+255),b
  6880                           
  6881                           ;doprnt.c: 746: while(cp[len])
  6882  002A8A  D003               	goto	l1080
  6883  002A8C                     
  6884                           ;doprnt.c: 747: len++;
  6885                           
  6886                           ; BSR set to: 0
  6887  002A8C  0100               	movlb	0	; () banked
  6888  002A8E  4BE8               	infsnz	printf@len& (0+255),f,b
  6889  002A90  2BE9               	incf	(printf@len+1)& (0+255),f,b
  6890  002A92                     l1080:
  6891                           
  6892                           ; BSR set to: 0
  6893                           
  6894                           ; BSR set to: 0
  6895  002A92  51E8               	movf	printf@len& (0+255),w,b
  6896  002A94  25E4               	addwf	printf@cp& (0+255),w,b
  6897  002A96  6FDE               	movwf	??_printf& (0+255),b
  6898  002A98  51E9               	movf	(printf@len+1)& (0+255),w,b
  6899  002A9A  21E5               	addwfc	(printf@cp+1)& (0+255),w,b
  6900  002A9C  6FDF               	movwf	(??_printf+1)& (0+255),b
  6901  002A9E  C0DE  FFF6         	movff	??_printf,tblptrl
  6902  002AA2  C0DF  FFF7         	movff	??_printf+1,tblptrh
  6903  002AA6  0E00               	movlw	low (__mediumconst shr (0+16))
  6904  002AA8  6EF8               	movwf	tblptru,c
  6905  002AAA  0E0F               	movlw	(high __ramtop+-1)
  6906  002AAC  64F7               	cpfsgt	tblptrh,c
  6907  002AAE  D003               	bra	u3387
  6908  002AB0  0008               	tblrd		*
  6909  002AB2  50F5               	movf	tablat,w,c
  6910  002AB4  D005               	bra	u3380
  6911  002AB6                     u3387:
  6912  002AB6  CFF6 FFE9          	movff	tblptrl,fsr0l
  6913  002ABA  CFF7 FFEA          	movff	tblptrh,fsr0h
  6914  002ABE  50EF               	movf	indf0,w,c
  6915  002AC0                     u3380:
  6916  002AC0  0900               	iorlw	0
  6917  002AC2  A4D8               	btfss	status,2,c
  6918  002AC4  D7E3               	goto	l1081
  6919                           
  6920                           ;doprnt.c: 757: if(width > len)
  6921  002AC6  0100               	movlb	0	; () banked
  6922  002AC8  51ED               	movf	printf@width& (0+255),w,b
  6923  002ACA  5DE8               	subwf	printf@len& (0+255),w,b
  6924  002ACC  51EE               	movf	(printf@width+1)& (0+255),w,b
  6925  002ACE  59E9               	subwfb	(printf@len+1)& (0+255),w,b
  6926  002AD0  B0D8               	btfsc	status,0,c
  6927  002AD2  D005               	goto	l1083
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;doprnt.c: 758: width -= len;
  6931  002AD4  51E8               	movf	printf@len& (0+255),w,b
  6932  002AD6  5FED               	subwf	printf@width& (0+255),f,b
  6933  002AD8  51E9               	movf	(printf@len+1)& (0+255),w,b
  6934  002ADA  5BEE               	subwfb	(printf@width+1)& (0+255),f,b
  6935  002ADC  D008               	goto	l1085
  6936  002ADE                     l1083:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;doprnt.c: 759: else
  6940                           ;doprnt.c: 760: width = 0;
  6941                           
  6942                           ; BSR set to: 0
  6943  002ADE  0E00               	movlw	0
  6944  002AE0  6FEE               	movwf	(printf@width+1)& (0+255),b
  6945  002AE2  0E00               	movlw	0
  6946  002AE4  6FED               	movwf	printf@width& (0+255),b
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;doprnt.c: 764: while(width--)
  6950  002AE6  D003               	goto	l1085
  6951  002AE8                     l4819:
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;doprnt.c: 765: (putch(' ') );
  6955  002AE8  0E20               	movlw	32
  6956  002AEA  ECBA  F022         	call	_putch
  6957  002AEE                     l1085:
  6958  002AEE  0100               	movlb	0	; () banked
  6959  002AF0  07ED               	decf	printf@width& (0+255),f,b
  6960  002AF2  A0D8               	btfss	status,0,c
  6961  002AF4  07EE               	decf	(printf@width+1)& (0+255),f,b
  6962  002AF6  29ED               	incf	printf@width& (0+255),w,b
  6963  002AF8  E1F7               	bnz	l4819
  6964  002AFA  29EE               	incf	(printf@width+1)& (0+255),w,b
  6965  002AFC  B4D8               	btfsc	status,2,c
  6966  002AFE  D017               	goto	l1088
  6967  002B00  D7F3               	goto	l1086
  6968  002B02                     l4823:
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;doprnt.c: 768: (putch(*cp++) );
  6972  002B02  C0E4  FFF6         	movff	printf@cp,tblptrl
  6973  002B06  C0E5  FFF7         	movff	printf@cp+1,tblptrh
  6974  002B0A  0E00               	movlw	low (__mediumconst shr (0+16))
  6975  002B0C  6EF8               	movwf	tblptru,c
  6976  002B0E  0E0F               	movlw	(high __ramtop+-1)
  6977  002B10  64F7               	cpfsgt	tblptrh,c
  6978  002B12  D003               	bra	u3427
  6979  002B14  0008               	tblrd		*
  6980  002B16  50F5               	movf	tablat,w,c
  6981  002B18  D005               	bra	u3420
  6982  002B1A                     u3427:
  6983  002B1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6984  002B1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6985  002B22  50EF               	movf	indf0,w,c
  6986  002B24                     u3420:
  6987  002B24  ECBA  F022         	call	_putch
  6988  002B28  0100               	movlb	0	; () banked
  6989  002B2A  4BE4               	infsnz	printf@cp& (0+255),f,b
  6990  002B2C  2BE5               	incf	(printf@cp+1)& (0+255),f,b
  6991  002B2E                     l1088:
  6992                           
  6993                           ; BSR set to: 0
  6994                           
  6995                           ; BSR set to: 0
  6996  002B2E  07E8               	decf	printf@len& (0+255),f,b
  6997  002B30  A0D8               	btfss	status,0,c
  6998  002B32  07E9               	decf	(printf@len+1)& (0+255),f,b
  6999  002B34  29E8               	incf	printf@len& (0+255),w,b
  7000  002B36  E1E5               	bnz	l4823
  7001  002B38  29E9               	incf	(printf@len+1)& (0+255),w,b
  7002  002B3A  B4D8               	btfsc	status,2,c
  7003  002B3C  D139               	goto	u3620
  7004  002B3E  D7E1               	goto	l1089
  7005  002B40                     l1071:
  7006                           
  7007                           ; BSR set to: 0
  7008  002B40  C0D4  FFF6         	movff	printf@f,tblptrl
  7009  002B44  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7010  002B48  0100               	movlb	0	; () banked
  7011  002B4A  4BD4               	infsnz	printf@f& (0+255),f,b
  7012  002B4C  2BD5               	incf	(printf@f+1)& (0+255),f,b
  7013  002B4E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7014  002B4E  6AF8               	clrf	tblptru,c
  7015  002B50                     	endif
  7016  002B50                     	if	0	;tblptru may be non-zero
  7017  002B50                     	endif
  7018  002B50  0008               	tblrd		*
  7019  002B52  CFF5 F0EF          	movff	tablat,printf@c
  7020  002B56  51EF               	movf	printf@c& (0+255),w,b
  7021                           
  7022                           ; Switch size 1, requested type "space"
  7023                           ; Number of cases is 5, Range of values is 0 to 120
  7024                           ; switch strategies available:
  7025                           ; Name         Instructions Cycles
  7026                           ; simple_byte           16     9 (average)
  7027                           ;	Chosen strategy is simple_byte
  7028  002B58  0A00               	xorlw	0	; case 0
  7029  002B5A  B4D8               	btfsc	status,2,c
  7030  002B5C  0012               	return	
  7031  002B5E  0A64               	xorlw	100	; case 100
  7032  002B60  B4D8               	btfsc	status,2,c
  7033  002B62  D00A               	goto	l1076
  7034  002B64  0A0D               	xorlw	13	; case 105
  7035  002B66  B4D8               	btfsc	status,2,c
  7036  002B68  D007               	goto	l1076
  7037  002B6A  0A1A               	xorlw	26	; case 115
  7038  002B6C  B4D8               	btfsc	status,2,c
  7039  002B6E  D775               	goto	l1078
  7040  002B70  0A0B               	xorlw	11	; case 120
  7041  002B72  B4D8               	btfsc	status,2,c
  7042  002B74  D76F               	goto	l1077
  7043  002B76  D11C               	goto	u3620
  7044  002B78                     l1076:
  7045                           
  7046                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7047  002B78  0100               	movlb	0	; () banked
  7048  002B7A  BFEC               	btfsc	printf@flag& (0+255),7,b
  7049  002B7C  D015               	goto	l1092
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;doprnt.c: 1253: {
  7053                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7054  002B7E  C0E6  FFD9         	movff	printf@ap,fsr2l
  7055  002B82  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  7056  002B86  CFDE F0EA          	movff	postinc2,printf@val
  7057  002B8A  CFDD F0EB          	movff	postdec2,printf@val+1
  7058                           
  7059                           ; BSR set to: 0
  7060  002B8E  0E02               	movlw	2
  7061  002B90  27E6               	addwf	printf@ap& (0+255),f,b
  7062  002B92  0E00               	movlw	0
  7063  002B94  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;doprnt.c: 1261: if((int)val < 0) {
  7067  002B96  AFEB               	btfss	(printf@val+1)& (0+255),7,b
  7068  002B98  D04A               	goto	l1095
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;doprnt.c: 1262: flag |= 0x03;
  7072  002B9A  0E03               	movlw	3
  7073  002B9C  13EC               	iorwf	printf@flag& (0+255),f,b
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;doprnt.c: 1263: val = -val;
  7077  002B9E  6DEA               	negf	printf@val& (0+255),b
  7078  002BA0  1FEB               	comf	(printf@val+1)& (0+255),f,b
  7079  002BA2  B0D8               	btfsc	status,0,c
  7080  002BA4  2BEB               	incf	(printf@val+1)& (0+255),f,b
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;doprnt.c: 1264: }
  7084                           ;doprnt.c: 1266: }
  7085  002BA6  D043               	goto	l1095
  7086  002BA8                     l1092:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;doprnt.c: 1268: else
  7090                           ;doprnt.c: 1273: {
  7091                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7092                           
  7093                           ; BSR set to: 0
  7094  002BA8  C0E6  FFD9         	movff	printf@ap,fsr2l
  7095  002BAC  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  7096  002BB0  CFDE F0EA          	movff	postinc2,printf@val
  7097  002BB4  CFDD F0EB          	movff	postdec2,printf@val+1
  7098                           
  7099                           ; BSR set to: 0
  7100  002BB8  0E02               	movlw	2
  7101  002BBA  27E6               	addwf	printf@ap& (0+255),f,b
  7102  002BBC  0E00               	movlw	0
  7103  002BBE  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;doprnt.c: 1287: }
  7107                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7108  002BC0  D036               	goto	l1095
  7109  002BC2                     
  7110                           ; BSR set to: 0
  7111                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7112                           
  7113                           ; BSR set to: 0
  7114  002BC2  0E01               	movlw	1
  7115  002BC4  6FEF               	movwf	printf@c& (0+255),b
  7116  002BC6                     l4849:
  7117                           
  7118                           ; BSR set to: 0
  7119  002BC6  0E05               	movlw	5
  7120  002BC8  19EF               	xorwf	printf@c& (0+255),w,b
  7121  002BCA  B4D8               	btfsc	status,2,c
  7122  002BCC  D038               	goto	l1100
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;doprnt.c: 1306: if(val < dpowers[c])
  7126                           
  7127                           ; BSR set to: 0
  7128                           
  7129                           ; BSR set to: 0
  7130  002BCE  51EF               	movf	printf@c& (0+255),w,b
  7131  002BD0  0D02               	mullw	2
  7132  002BD2  0EDE               	movlw	low _dpowers
  7133  002BD4  24F3               	addwf	prodl,w,c
  7134  002BD6  6EF6               	movwf	tblptrl,c
  7135  002BD8  0EFC               	movlw	high _dpowers
  7136  002BDA  20F4               	addwfc	prodh,w,c
  7137  002BDC  6EF7               	movwf	tblptrh,c
  7138  002BDE                     	if	1	;There are 3 active tblptr bytes
  7139  002BDE  6AF8               	clrf	tblptru,c
  7140  002BE0  0E00               	movlw	low (__mediumconst shr (0+16))
  7141  002BE2  22F8               	addwfc	tblptru,f,c
  7142  002BE4                     	endif
  7143  002BE4  0009               	tblrd		*+
  7144  002BE6  50F5               	movf	tablat,w,c
  7145  002BE8  5DEA               	subwf	printf@val& (0+255),w,b
  7146  002BEA  0009               	tblrd		*+
  7147  002BEC  50F5               	movf	tablat,w,c
  7148  002BEE  59EB               	subwfb	(printf@val+1)& (0+255),w,b
  7149  002BF0  A0D8               	btfss	status,0,c
  7150  002BF2  D025               	goto	l1100
  7151                           
  7152                           ; BSR set to: 0
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;doprnt.c: 1307: break;
  7158  002BF4  2BEF               	incf	printf@c& (0+255),f,b
  7159  002BF6  D7E7               	goto	l4849
  7160  002BF8                     
  7161                           ; BSR set to: 0
  7162                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7163                           
  7164                           ; BSR set to: 0
  7165  002BF8  0E01               	movlw	1
  7166  002BFA  6FEF               	movwf	printf@c& (0+255),b
  7167  002BFC                     l4863:
  7168                           
  7169                           ; BSR set to: 0
  7170  002BFC  0E04               	movlw	4
  7171  002BFE  19EF               	xorwf	printf@c& (0+255),w,b
  7172  002C00  B4D8               	btfsc	status,2,c
  7173  002C02  D01D               	goto	l1100
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7177                           
  7178                           ; BSR set to: 0
  7179                           
  7180                           ; BSR set to: 0
  7181  002C04  51EF               	movf	printf@c& (0+255),w,b
  7182  002C06  0D02               	mullw	2
  7183  002C08  0EE8               	movlw	low _hexpowers
  7184  002C0A  24F3               	addwf	prodl,w,c
  7185  002C0C  6EF6               	movwf	tblptrl,c
  7186  002C0E  0EFC               	movlw	high _hexpowers
  7187  002C10  20F4               	addwfc	prodh,w,c
  7188  002C12  6EF7               	movwf	tblptrh,c
  7189  002C14                     	if	1	;There are 3 active tblptr bytes
  7190  002C14  6AF8               	clrf	tblptru,c
  7191  002C16  0E00               	movlw	low (__mediumconst shr (0+16))
  7192  002C18  22F8               	addwfc	tblptru,f,c
  7193  002C1A                     	endif
  7194  002C1A  0009               	tblrd		*+
  7195  002C1C  50F5               	movf	tablat,w,c
  7196  002C1E  5DEA               	subwf	printf@val& (0+255),w,b
  7197  002C20  0009               	tblrd		*+
  7198  002C22  50F5               	movf	tablat,w,c
  7199  002C24  59EB               	subwfb	(printf@val+1)& (0+255),w,b
  7200  002C26  A0D8               	btfss	status,0,c
  7201  002C28  D00A               	goto	l1100
  7202                           
  7203                           ; BSR set to: 0
  7204                           
  7205                           ; BSR set to: 0
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;doprnt.c: 1318: break;
  7209  002C2A  2BEF               	incf	printf@c& (0+255),f,b
  7210  002C2C  D7E7               	goto	l4863
  7211  002C2E                     l1095:
  7212                           
  7213                           ; BSR set to: 0
  7214                           
  7215                           ; BSR set to: 0
  7216  002C2E  51EC               	movf	printf@flag& (0+255),w,b
  7217  002C30  0B80               	andlw	128
  7218                           
  7219                           ; Switch size 1, requested type "space"
  7220                           ; Number of cases is 2, Range of values is 0 to 128
  7221                           ; switch strategies available:
  7222                           ; Name         Instructions Cycles
  7223                           ; simple_byte            7     4 (average)
  7224                           ;	Chosen strategy is simple_byte
  7225  002C32  0A00               	xorlw	0	; case 0
  7226  002C34  B4D8               	btfsc	status,2,c
  7227  002C36  D7C5               	goto	l1096
  7228  002C38  0A80               	xorlw	128	; case 128
  7229  002C3A  B4D8               	btfsc	status,2,c
  7230  002C3C  D7DD               	goto	l1101
  7231  002C3E                     l1100:
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7235                           
  7236                           ; BSR set to: 0
  7237  002C3E  51ED               	movf	printf@width& (0+255),w,b
  7238  002C40  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  7239  002C42  B4D8               	btfsc	status,2,c
  7240  002C44  D009               	goto	l1105
  7241                           
  7242                           ; BSR set to: 0
  7243  002C46  C0EC  F0DE         	movff	printf@flag,??_printf
  7244  002C4A  0E03               	movlw	3
  7245  002C4C  17DE               	andwf	??_printf& (0+255),f,b
  7246  002C4E  B4D8               	btfsc	status,2,c
  7247  002C50  D003               	goto	l1105
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;doprnt.c: 1346: width--;
  7251  002C52  07ED               	decf	printf@width& (0+255),f,b
  7252  002C54  A0D8               	btfss	status,0,c
  7253  002C56  07EE               	decf	(printf@width+1)& (0+255),f,b
  7254  002C58                     l1105:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;doprnt.c: 1381: if(width > c)
  7258                           
  7259                           ; BSR set to: 0
  7260  002C58  0E80               	movlw	128
  7261  002C5A  BFEF               	btfsc	printf@c& (0+255),7,b
  7262  002C5C  0E7F               	movlw	127
  7263  002C5E  6FDE               	movwf	??_printf& (0+255),b
  7264  002C60  51ED               	movf	printf@width& (0+255),w,b
  7265  002C62  5DEF               	subwf	printf@c& (0+255),w,b
  7266  002C64  51EE               	movf	(printf@width+1)& (0+255),w,b
  7267  002C66  0A80               	xorlw	128
  7268  002C68  59DE               	subwfb	??_printf& (0+255),w,b
  7269  002C6A  B0D8               	btfsc	status,0,c
  7270  002C6C  D007               	goto	l1106
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;doprnt.c: 1382: width -= c;
  7274  002C6E  51EF               	movf	printf@c& (0+255),w,b
  7275  002C70  5FED               	subwf	printf@width& (0+255),f,b
  7276  002C72  0E00               	movlw	0
  7277  002C74  BFEF               	btfsc	printf@c& (0+255),7,b
  7278  002C76  0EFF               	movlw	255
  7279  002C78  5BEE               	subwfb	(printf@width+1)& (0+255),f,b
  7280  002C7A  D004               	goto	l1107
  7281  002C7C                     l1106:
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;doprnt.c: 1383: else
  7285                           ;doprnt.c: 1384: width = 0;
  7286                           
  7287                           ; BSR set to: 0
  7288  002C7C  0E00               	movlw	0
  7289  002C7E  6FEE               	movwf	(printf@width+1)& (0+255),b
  7290  002C80  0E00               	movlw	0
  7291  002C82  6FED               	movwf	printf@width& (0+255),b
  7292  002C84                     l1107:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;doprnt.c: 1387: if(flag & 0x04) {
  7296                           
  7297                           ; BSR set to: 0
  7298  002C84  A5EC               	btfss	printf@flag& (0+255),2,b
  7299  002C86  D016               	goto	l1108
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;doprnt.c: 1392: if(flag & 0x03)
  7303  002C88  C0EC  F0DE         	movff	printf@flag,??_printf
  7304  002C8C  0E03               	movlw	3
  7305  002C8E  17DE               	andwf	??_printf& (0+255),f,b
  7306  002C90  B4D8               	btfsc	status,2,c
  7307  002C92  D003               	goto	l1109
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;doprnt.c: 1393: (putch('-') );
  7311  002C94  0E2D               	movlw	45
  7312  002C96  ECBA  F022         	call	_putch
  7313  002C9A                     l1109:
  7314                           
  7315                           ;doprnt.c: 1415: if(width)
  7316  002C9A  0100               	movlb	0	; () banked
  7317  002C9C  51ED               	movf	printf@width& (0+255),w,b
  7318  002C9E  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  7319  002CA0  B4D8               	btfsc	status,2,c
  7320  002CA2  D020               	goto	l1117
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;doprnt.c: 1417: (putch('0') );
  7324                           
  7325                           ; BSR set to: 0
  7326                           
  7327                           ;doprnt.c: 1416: do
  7328  002CA4  0E30               	movlw	48
  7329  002CA6  ECBA  F022         	call	_putch
  7330                           
  7331                           ;doprnt.c: 1418: while(--width);
  7332  002CAA  0100               	movlb	0	; () banked
  7333  002CAC  07ED               	decf	printf@width& (0+255),f,b
  7334  002CAE  A0D8               	btfss	status,0,c
  7335  002CB0  07EE               	decf	(printf@width+1)& (0+255),f,b
  7336  002CB2  D7F4               	goto	L9
  7337  002CB4                     l1108:
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;doprnt.c: 1422: {
  7341                           ;doprnt.c: 1424: if(width
  7342                           ;doprnt.c: 1428: )
  7343                           
  7344                           ; BSR set to: 0
  7345  002CB4  51ED               	movf	printf@width& (0+255),w,b
  7346  002CB6  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  7347  002CB8  B4D8               	btfsc	status,2,c
  7348  002CBA  D00B               	goto	u3600
  7349  002CBC                     u3590:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;doprnt.c: 1430: (putch(' ') );
  7353                           
  7354                           ; BSR set to: 0
  7355                           
  7356                           ;doprnt.c: 1429: do
  7357  002CBC  0E20               	movlw	32
  7358  002CBE  ECBA  F022         	call	_putch
  7359                           
  7360                           ;doprnt.c: 1431: while(--width);
  7361  002CC2  0100               	movlb	0	; () banked
  7362  002CC4  07ED               	decf	printf@width& (0+255),f,b
  7363  002CC6  A0D8               	btfss	status,0,c
  7364  002CC8  07EE               	decf	(printf@width+1)& (0+255),f,b
  7365  002CCA  51ED               	movf	printf@width& (0+255),w,b
  7366  002CCC  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  7367  002CCE  A4D8               	btfss	status,2,c
  7368  002CD0  D7F5               	goto	u3590
  7369  002CD2                     u3600:
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;doprnt.c: 1438: if(flag & 0x03)
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ; BSR set to: 0
  7377  002CD2  C0EC  F0DE         	movff	printf@flag,??_printf
  7378  002CD6  0E03               	movlw	3
  7379  002CD8  17DE               	andwf	??_printf& (0+255),f,b
  7380  002CDA  B4D8               	btfsc	status,2,c
  7381  002CDC  D003               	goto	l1117
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;doprnt.c: 1439: (putch('-') );
  7385  002CDE  0E2D               	movlw	45
  7386  002CE0  ECBA  F022         	call	_putch
  7387  002CE4                     l1117:
  7388                           
  7389                           ;doprnt.c: 1469: }
  7390                           ;doprnt.c: 1472: prec = c;
  7391  002CE4  C0EF  F0E3         	movff	printf@c,printf@prec
  7392                           
  7393                           ;doprnt.c: 1474: while(prec--) {
  7394  002CE8  D05E               	goto	l1118
  7395  002CEA                     
  7396                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7397  002CEA  0100               	movlb	0	; () banked
  7398  002CEC  51E3               	movf	printf@prec& (0+255),w,b
  7399  002CEE  0D02               	mullw	2
  7400  002CF0  0EDE               	movlw	low _dpowers
  7401  002CF2  24F3               	addwf	prodl,w,c
  7402  002CF4  6EF6               	movwf	tblptrl,c
  7403  002CF6  0EFC               	movlw	high _dpowers
  7404  002CF8  20F4               	addwfc	prodh,w,c
  7405  002CFA  6EF7               	movwf	tblptrh,c
  7406  002CFC                     	if	1	;There are 3 active tblptr bytes
  7407  002CFC  6AF8               	clrf	tblptru,c
  7408  002CFE  0E00               	movlw	low (__mediumconst shr (0+16))
  7409  002D00  22F8               	addwfc	tblptru,f,c
  7410  002D02                     	endif
  7411  002D02  0009               	tblrd		*+
  7412  002D04  CFF5 F0C8          	movff	tablat,___lwdiv@divisor
  7413  002D08  000A               	tblrd		*-
  7414  002D0A  CFF5 F0C9          	movff	tablat,___lwdiv@divisor+1
  7415  002D0E  C0EA  F0C6         	movff	printf@val,___lwdiv@dividend
  7416  002D12  C0EB  F0C7         	movff	printf@val+1,___lwdiv@dividend+1
  7417  002D16  ECD6  F020         	call	___lwdiv	;wreg free
  7418  002D1A  C0C6  F0CD         	movff	?___lwdiv,___lwmod@dividend
  7419  002D1E  C0C7  F0CE         	movff	?___lwdiv+1,___lwmod@dividend+1
  7420  002D22  0E00               	movlw	0
  7421  002D24  0100               	movlb	0	; () banked
  7422  002D26  6FD0               	movwf	(___lwmod@divisor+1)& (0+255),b
  7423  002D28  0E0A               	movlw	10
  7424  002D2A  6FCF               	movwf	___lwmod@divisor& (0+255),b
  7425  002D2C  ECBD  F021         	call	___lwmod	;wreg free
  7426  002D30  0100               	movlb	0	; () banked
  7427  002D32  51CD               	movf	?___lwmod& (0+255),w,b
  7428  002D34  0F30               	addlw	48
  7429  002D36  6FEF               	movwf	printf@c& (0+255),b
  7430                           
  7431                           ;doprnt.c: 1491: break;
  7432  002D38  D033               	goto	l1122
  7433  002D3A                     
  7434                           ; BSR set to: 0
  7435                           ;doprnt.c: 1499: {
  7436                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7437                           
  7438                           ; BSR set to: 0
  7439  002D3A  C0EA  F0C6         	movff	printf@val,___lwdiv@dividend
  7440  002D3E  C0EB  F0C7         	movff	printf@val+1,___lwdiv@dividend+1
  7441  002D42  51E3               	movf	printf@prec& (0+255),w,b
  7442  002D44  0D02               	mullw	2
  7443  002D46  0EE8               	movlw	low _hexpowers
  7444  002D48  24F3               	addwf	prodl,w,c
  7445  002D4A  6EF6               	movwf	tblptrl,c
  7446  002D4C  0EFC               	movlw	high _hexpowers
  7447  002D4E  20F4               	addwfc	prodh,w,c
  7448  002D50  6EF7               	movwf	tblptrh,c
  7449  002D52                     	if	1	;There are 3 active tblptr bytes
  7450  002D52  6AF8               	clrf	tblptru,c
  7451  002D54  0E00               	movlw	low (__mediumconst shr (0+16))
  7452  002D56  22F8               	addwfc	tblptru,f,c
  7453  002D58                     	endif
  7454  002D58  0009               	tblrd		*+
  7455  002D5A  CFF5 F0C8          	movff	tablat,___lwdiv@divisor
  7456  002D5E  000A               	tblrd		*-
  7457  002D60  CFF5 F0C9          	movff	tablat,___lwdiv@divisor+1
  7458  002D64  ECD6  F020         	call	___lwdiv	;wreg free
  7459  002D68  0100               	movlb	0	; () banked
  7460  002D6A  51C6               	movf	?___lwdiv& (0+255),w,b
  7461  002D6C  0B0F               	andlw	15
  7462  002D6E  6FE2               	movwf	printf@idx& (0+255),b
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7466  002D70  51E2               	movf	printf@idx& (0+255),w,b
  7467  002D72  0D01               	mullw	1
  7468  002D74  0EFE               	movlw	low STR_99
  7469  002D76  24F3               	addwf	prodl,w,c
  7470  002D78  6EF6               	movwf	tblptrl,c
  7471  002D7A  0EFD               	movlw	high STR_99
  7472  002D7C  20F4               	addwfc	prodh,w,c
  7473  002D7E  6EF7               	movwf	tblptrh,c
  7474  002D80                     	if	1	;There are 3 active tblptr bytes
  7475  002D80  6AF8               	clrf	tblptru,c
  7476  002D82  0E00               	movlw	low (__mediumconst shr (0+16))
  7477  002D84  22F8               	addwfc	tblptru,f,c
  7478  002D86                     	endif
  7479  002D86  0008               	tblrd		*
  7480  002D88  CFF5 F0EF          	movff	tablat,printf@c
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;doprnt.c: 1523: }
  7484                           
  7485                           ;doprnt.c: 1508: }
  7486                           ;doprnt.c: 1510: break;
  7487  002D8C  D009               	goto	l1122
  7488  002D8E                     
  7489                           ; BSR set to: 0
  7490  002D8E  0100               	movlb	0	; () banked
  7491  002D90  51EC               	movf	printf@flag& (0+255),w,b
  7492  002D92  0B80               	andlw	128
  7493                           
  7494                           ; Switch size 1, requested type "space"
  7495                           ; Number of cases is 2, Range of values is 0 to 128
  7496                           ; switch strategies available:
  7497                           ; Name         Instructions Cycles
  7498                           ; simple_byte            7     4 (average)
  7499                           ;	Chosen strategy is simple_byte
  7500  002D94  0A00               	xorlw	0	; case 0
  7501  002D96  B4D8               	btfsc	status,2,c
  7502  002D98  D7A8               	goto	l1121
  7503  002D9A  0A80               	xorlw	128	; case 128
  7504  002D9C  B4D8               	btfsc	status,2,c
  7505  002D9E  D7CD               	goto	l1123
  7506  002DA0                     l1122:
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;doprnt.c: 1524: (putch(c) );
  7510                           
  7511                           ; BSR set to: 0
  7512  002DA0  51EF               	movf	printf@c& (0+255),w,b
  7513  002DA2  ECBA  F022         	call	_putch
  7514  002DA6                     l1118:
  7515  002DA6  0100               	movlb	0	; () banked
  7516  002DA8  07E3               	decf	printf@prec& (0+255),f,b
  7517  002DAA  29E3               	incf	printf@prec& (0+255),w,b
  7518  002DAC  A4D8               	btfss	status,2,c
  7519  002DAE  D7EF               	goto	l1120
  7520  002DB0                     u3620:
  7521                           
  7522                           ; BSR set to: 0
  7523                           
  7524                           ; BSR set to: 0
  7525  002DB0  C0D4  FFF6         	movff	printf@f,tblptrl
  7526  002DB4  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7527  002DB8  0100               	movlb	0	; () banked
  7528  002DBA  4BD4               	infsnz	printf@f& (0+255),f,b
  7529  002DBC  2BD5               	incf	(printf@f+1)& (0+255),f,b
  7530  002DBE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7531  002DBE  6AF8               	clrf	tblptru,c
  7532  002DC0                     	endif
  7533  002DC0                     	if	0	;tblptru may be non-zero
  7534  002DC0                     	endif
  7535  002DC0  0008               	tblrd		*
  7536  002DC2  CFF5 F0EF          	movff	tablat,printf@c
  7537  002DC6  51EF               	movf	printf@c& (0+255),w,b
  7538  002DC8  B4D8               	btfsc	status,2,c
  7539  002DCA  0012               	return	
  7540  002DCC  D5E2               	goto	l1060
  7541  002DCE                     __end_of_printf:
  7542                           	opt stack 0
  7543                           tblptru	equ	0xFF8
  7544                           tblptrh	equ	0xFF7
  7545                           tblptrl	equ	0xFF6
  7546                           tablat	equ	0xFF5
  7547                           prodh	equ	0xFF4
  7548                           prodl	equ	0xFF3
  7549                           intcon	equ	0xFF2
  7550                           intcon3	equ	0xFF0
  7551                           indf0	equ	0xFEF
  7552                           postinc0	equ	0xFEE
  7553                           fsr0h	equ	0xFEA
  7554                           fsr0l	equ	0xFE9
  7555                           wreg	equ	0xFE8
  7556                           postdec1	equ	0xFE5
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _putch *****************
  7566 ;; Defined at:
  7567 ;;		line 24 in file "lcd.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  data            1    wreg     unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  data            1    2[BANK0 ] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;Total ram usage:        1 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    5
  7588 ;; This function calls:
  7589 ;;		_lcdNibble
  7590 ;; This function is called by:
  7591 ;;		_printf
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text15
  7596  004574                     __ptext15:
  7597                           	opt stack 0
  7598  004574                     _putch:
  7599                           	opt stack 24
  7600                           
  7601                           ;incstack = 0
  7602                           ;putch@data stored from wreg
  7603  004574  0100               	movlb	0	; () banked
  7604  004576  6FC8               	movwf	putch@data& (0+255),b
  7605                           
  7606                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7607  004578  848C               	bsf	3980,2,c	;volatile
  7608                           
  7609                           ;lcd.c: 33: lcdNibble(data);
  7610  00457A  0100               	movlb	0	; () banked
  7611  00457C  51C8               	movf	putch@data& (0+255),w,b
  7612  00457E  ECFB  F01D         	call	_lcdNibble
  7613                           
  7614                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7615  004582  0EA0               	movlw	160
  7616  004584                     u6527:
  7617  004584  D000               	nop2	
  7618  004586  2EE8               	decfsz	wreg,f,c
  7619  004588  D7FD               	bra	u6527
  7620  00458A  0012               	return		;funcret
  7621  00458C                     __end_of_putch:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon	equ	0xFF2
  7630                           intcon3	equ	0xFF0
  7631                           indf0	equ	0xFEF
  7632                           postinc0	equ	0xFEE
  7633                           fsr0h	equ	0xFEA
  7634                           fsr0l	equ	0xFE9
  7635                           wreg	equ	0xFE8
  7636                           postdec1	equ	0xFE5
  7637                           fsr1l	equ	0xFE1
  7638                           indf2	equ	0xFDF
  7639                           postinc2	equ	0xFDE
  7640                           postdec2	equ	0xFDD
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _isdigit *****************
  7646 ;; Defined at:
  7647 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  c               1    wreg     unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  c               1    2[BANK0 ] unsigned char 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;Total ram usage:        3 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    4
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_printf
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text16
  7676  004534                     __ptext16:
  7677                           	opt stack 0
  7678  004534                     _isdigit:
  7679                           	opt stack 25
  7680                           
  7681                           ;incstack = 0
  7682                           ;isdigit@c stored from wreg
  7683  004534  0100               	movlb	0	; () banked
  7684  004536  6FC8               	movwf	isdigit@c& (0+255),b
  7685  004538  0E00               	movlw	0
  7686  00453A  0100               	movlb	0	; () banked
  7687  00453C  6FC7               	movwf	_isdigit$1805& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690  00453E  0E3A               	movlw	58
  7691  004540  61C8               	cpfslt	isdigit@c& (0+255),b
  7692  004542  D005               	goto	l1456
  7693                           
  7694                           ; BSR set to: 0
  7695  004544  0E2F               	movlw	47
  7696  004546  65C8               	cpfsgt	isdigit@c& (0+255),b
  7697  004548  D002               	goto	l1456
  7698                           
  7699                           ; BSR set to: 0
  7700  00454A  0E01               	movlw	1
  7701  00454C  6FC7               	movwf	_isdigit$1805& (0+255),b
  7702  00454E                     l1456:
  7703                           
  7704                           ; BSR set to: 0
  7705                           
  7706                           ; BSR set to: 0
  7707  00454E  C0C7  F0C6         	movff	_isdigit$1805,??_isdigit
  7708  004552  31C6               	rrcf	??_isdigit& (0+255),w,b
  7709  004554  0012               	return	
  7710  004556                     __end_of_isdigit:
  7711                           	opt stack 0
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           intcon	equ	0xFF2
  7719                           intcon3	equ	0xFF0
  7720                           indf0	equ	0xFEF
  7721                           postinc0	equ	0xFEE
  7722                           fsr0h	equ	0xFEA
  7723                           fsr0l	equ	0xFE9
  7724                           wreg	equ	0xFE8
  7725                           postdec1	equ	0xFE5
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function ___wmul *****************
  7735 ;; Defined at:
  7736 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7739 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  product         2   12[BANK0 ] unsigned int 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  2    8[BANK0 ] unsigned int 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0, prodl, prodh
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7751 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;Total ram usage:        6 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    4
  7758 ;; This function calls:
  7759 ;;		Nothing
  7760 ;; This function is called by:
  7761 ;;		_main
  7762 ;;		_printf
  7763 ;;		_get_RTC_initial
  7764 ;;		_get_RTC_final
  7765 ;;		_store_prev
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text17
  7770  00449A                     __ptext17:
  7771                           	opt stack 0
  7772  00449A                     ___wmul:
  7773                           	opt stack 25
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;incstack = 0
  7777  00449A  0100               	movlb	0	; () banked
  7778  00449C  51CE               	movf	___wmul@multiplier& (0+255),w,b
  7779  00449E  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  7780  0044A0  CFF3 F0D2          	movff	prodl,___wmul@product
  7781  0044A4  CFF4 F0D3          	movff	prodh,___wmul@product+1
  7782  0044A8  51CE               	movf	___wmul@multiplier& (0+255),w,b
  7783  0044AA  03D1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7784  0044AC  50F3               	movf	prodl,w,c
  7785  0044AE  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  7786  0044B0  51CF               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7787  0044B2  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  7788  0044B4  50F3               	movf	prodl,w,c
  7789  0044B6  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  7790                           
  7791                           ; BSR set to: 0
  7792  0044B8  C0D2  F0CE         	movff	___wmul@product,?___wmul
  7793  0044BC  C0D3  F0CF         	movff	___wmul@product+1,?___wmul+1
  7794  0044C0  0012               	return	
  7795  0044C2                     __end_of___wmul:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon3	equ	0xFF0
  7805                           indf0	equ	0xFEF
  7806                           postinc0	equ	0xFEE
  7807                           fsr0h	equ	0xFEA
  7808                           fsr0l	equ	0xFE9
  7809                           wreg	equ	0xFE8
  7810                           postdec1	equ	0xFE5
  7811                           fsr1l	equ	0xFE1
  7812                           indf2	equ	0xFDF
  7813                           postinc2	equ	0xFDE
  7814                           postdec2	equ	0xFDD
  7815                           fsr2h	equ	0xFDA
  7816                           fsr2l	equ	0xFD9
  7817                           status	equ	0xFD8
  7818                           
  7819 ;; *************** function ___lwmod *****************
  7820 ;; Defined at:
  7821 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  dividend        2    7[BANK0 ] unsigned int 
  7824 ;;  divisor         2    9[BANK0 ] unsigned int 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  counter         1   11[BANK0 ] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  2    7[BANK0 ] unsigned int 
  7829 ;; Registers used:
  7830 ;;		wreg, status,2, status,0
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7836 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;Total ram usage:        5 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    4
  7843 ;; This function calls:
  7844 ;;		Nothing
  7845 ;; This function is called by:
  7846 ;;		_printf
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text18
  7851  00437A                     __ptext18:
  7852                           	opt stack 0
  7853  00437A                     ___lwmod:
  7854                           	opt stack 25
  7855                           
  7856                           ; BSR set to: 0
  7857                           ;incstack = 0
  7858  00437A  0100               	movlb	0	; () banked
  7859  00437C  51CF               	movf	___lwmod@divisor& (0+255),w,b
  7860  00437E  11D0               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7861  004380  B4D8               	btfsc	status,2,c
  7862  004382  D018               	goto	l1550
  7863                           
  7864                           ; BSR set to: 0
  7865  004384  0E01               	movlw	1
  7866  004386  6FD1               	movwf	___lwmod@counter& (0+255),b
  7867  004388  D004               	goto	l1545
  7868  00438A                     
  7869                           ; BSR set to: 0
  7870                           
  7871                           ; BSR set to: 0
  7872  00438A  90D8               	bcf	status,0,c
  7873  00438C  37CF               	rlcf	___lwmod@divisor& (0+255),f,b
  7874  00438E  37D0               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7875  004390  2BD1               	incf	___lwmod@counter& (0+255),f,b
  7876  004392                     l1545:
  7877                           
  7878                           ; BSR set to: 0
  7879                           
  7880                           ; BSR set to: 0
  7881  004392  AFD0               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7882  004394  D7FA               	goto	l1546
  7883  004396                     u3300:
  7884                           
  7885                           ; BSR set to: 0
  7886                           
  7887                           ; BSR set to: 0
  7888                           
  7889                           ; BSR set to: 0
  7890  004396  51CF               	movf	___lwmod@divisor& (0+255),w,b
  7891  004398  5DCD               	subwf	___lwmod@dividend& (0+255),w,b
  7892  00439A  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7893  00439C  59CE               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7894  00439E  A0D8               	btfss	status,0,c
  7895  0043A0  D004               	goto	l1549
  7896                           
  7897                           ; BSR set to: 0
  7898  0043A2  51CF               	movf	___lwmod@divisor& (0+255),w,b
  7899  0043A4  5FCD               	subwf	___lwmod@dividend& (0+255),f,b
  7900  0043A6  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7901  0043A8  5BCE               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7902  0043AA                     l1549:
  7903                           
  7904                           ; BSR set to: 0
  7905                           
  7906                           ; BSR set to: 0
  7907  0043AA  90D8               	bcf	status,0,c
  7908  0043AC  33D0               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7909  0043AE  33CF               	rrcf	___lwmod@divisor& (0+255),f,b
  7910                           
  7911                           ; BSR set to: 0
  7912  0043B0  2FD1               	decfsz	___lwmod@counter& (0+255),f,b
  7913  0043B2  D7F1               	goto	u3300
  7914  0043B4                     l1550:
  7915                           
  7916                           ; BSR set to: 0
  7917                           
  7918                           ; BSR set to: 0
  7919  0043B4  C0CD  F0CD         	movff	___lwmod@dividend,?___lwmod
  7920  0043B8  C0CE  F0CE         	movff	___lwmod@dividend+1,?___lwmod+1
  7921                           
  7922                           ; BSR set to: 0
  7923  0043BC  0012               	return		;funcret
  7924  0043BE                     __end_of___lwmod:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           intcon3	equ	0xFF0
  7934                           indf0	equ	0xFEF
  7935                           postinc0	equ	0xFEE
  7936                           fsr0h	equ	0xFEA
  7937                           fsr0l	equ	0xFE9
  7938                           wreg	equ	0xFE8
  7939                           postdec1	equ	0xFE5
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           fsr2h	equ	0xFDA
  7945                           fsr2l	equ	0xFD9
  7946                           status	equ	0xFD8
  7947                           
  7948 ;; *************** function ___lwdiv *****************
  7949 ;; Defined at:
  7950 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  dividend        2    0[BANK0 ] unsigned int 
  7953 ;;  divisor         2    2[BANK0 ] unsigned int 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  quotient        2    4[BANK0 ] unsigned int 
  7956 ;;  counter         1    6[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  2    0[BANK0 ] unsigned int 
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;Total ram usage:        7 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    4
  7973 ;; This function calls:
  7974 ;;		Nothing
  7975 ;; This function is called by:
  7976 ;;		_printf
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text19
  7981  0041AC                     __ptext19:
  7982                           	opt stack 0
  7983  0041AC                     ___lwdiv:
  7984                           	opt stack 25
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;incstack = 0
  7988  0041AC  0E00               	movlw	0
  7989  0041AE  0100               	movlb	0	; () banked
  7990  0041B0  6FCB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7991  0041B2  0E00               	movlw	0
  7992  0041B4  6FCA               	movwf	___lwdiv@quotient& (0+255),b
  7993                           
  7994                           ; BSR set to: 0
  7995  0041B6  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  7996  0041B8  11C9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7997  0041BA  B4D8               	btfsc	status,2,c
  7998  0041BC  D01C               	goto	l1540
  7999                           
  8000                           ; BSR set to: 0
  8001  0041BE  0E01               	movlw	1
  8002  0041C0  6FCC               	movwf	___lwdiv@counter& (0+255),b
  8003  0041C2  D004               	goto	l1535
  8004  0041C4                     
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  0041C4  90D8               	bcf	status,0,c
  8009  0041C6  37C8               	rlcf	___lwdiv@divisor& (0+255),f,b
  8010  0041C8  37C9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8011  0041CA  2BCC               	incf	___lwdiv@counter& (0+255),f,b
  8012  0041CC                     l1535:
  8013                           
  8014                           ; BSR set to: 0
  8015                           
  8016                           ; BSR set to: 0
  8017  0041CC  AFC9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8018  0041CE  D7FA               	goto	l1536
  8019  0041D0                     u3270:
  8020                           
  8021                           ; BSR set to: 0
  8022                           
  8023                           ; BSR set to: 0
  8024                           
  8025                           ; BSR set to: 0
  8026  0041D0  90D8               	bcf	status,0,c
  8027  0041D2  37CA               	rlcf	___lwdiv@quotient& (0+255),f,b
  8028  0041D4  37CB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8029                           
  8030                           ; BSR set to: 0
  8031  0041D6  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  8032  0041D8  5DC6               	subwf	___lwdiv@dividend& (0+255),w,b
  8033  0041DA  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8034  0041DC  59C7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8035  0041DE  A0D8               	btfss	status,0,c
  8036  0041E0  D005               	goto	l1539
  8037                           
  8038                           ; BSR set to: 0
  8039  0041E2  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  8040  0041E4  5FC6               	subwf	___lwdiv@dividend& (0+255),f,b
  8041  0041E6  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8042  0041E8  5BC7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8043                           
  8044                           ; BSR set to: 0
  8045  0041EA  81CA               	bsf	___lwdiv@quotient& (0+255),0,b
  8046  0041EC                     l1539:
  8047                           
  8048                           ; BSR set to: 0
  8049                           
  8050                           ; BSR set to: 0
  8051  0041EC  90D8               	bcf	status,0,c
  8052  0041EE  33C9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8053  0041F0  33C8               	rrcf	___lwdiv@divisor& (0+255),f,b
  8054                           
  8055                           ; BSR set to: 0
  8056  0041F2  2FCC               	decfsz	___lwdiv@counter& (0+255),f,b
  8057  0041F4  D7ED               	goto	u3270
  8058  0041F6                     l1540:
  8059                           
  8060                           ; BSR set to: 0
  8061                           
  8062                           ; BSR set to: 0
  8063  0041F6  C0CA  F0C6         	movff	___lwdiv@quotient,?___lwdiv
  8064  0041FA  C0CB  F0C7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8065                           
  8066                           ; BSR set to: 0
  8067  0041FE  0012               	return		;funcret
  8068  004200                     __end_of___lwdiv:
  8069                           	opt stack 0
  8070                           tblptru	equ	0xFF8
  8071                           tblptrh	equ	0xFF7
  8072                           tblptrl	equ	0xFF6
  8073                           tablat	equ	0xFF5
  8074                           prodh	equ	0xFF4
  8075                           prodl	equ	0xFF3
  8076                           intcon	equ	0xFF2
  8077                           intcon3	equ	0xFF0
  8078                           indf0	equ	0xFEF
  8079                           postinc0	equ	0xFEE
  8080                           fsr0h	equ	0xFEA
  8081                           fsr0l	equ	0xFE9
  8082                           wreg	equ	0xFE8
  8083                           postdec1	equ	0xFE5
  8084                           fsr1l	equ	0xFE1
  8085                           indf2	equ	0xFDF
  8086                           postinc2	equ	0xFDE
  8087                           postdec2	equ	0xFDD
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function _initLCD *****************
  8093 ;; Defined at:
  8094 ;;		line 60 in file "lcd.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        1 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    6
  8115 ;; This function calls:
  8116 ;;		_lcdInst
  8117 ;; This function is called by:
  8118 ;;		_main
  8119 ;;		_Bolt_dispense
  8120 ;;		_Nut_dispense
  8121 ;;		_Spacer_dispense
  8122 ;;		_Washer_dispense
  8123 ;;		_all_remain
  8124 ;;		_count_gear
  8125 ;;		_nut_washer_remain
  8126 ;;		_Bolt_remain
  8127 ;;		_Nut_remain
  8128 ;;		_Spacer_remain
  8129 ;;		_Washer_remain
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text20
  8134  004252                     __ptext20:
  8135                           	opt stack 0
  8136  004252                     _initLCD:
  8137                           	opt stack 24
  8138                           
  8139                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;incstack = 0
  8143  004252  0E9C               	movlw	156
  8144  004254  0100               	movlb	0	; () banked
  8145  004256  6FC9               	movwf	??_initLCD& (0+255),b
  8146  004258  0ED7               	movlw	215
  8147  00425A                     u6537:
  8148  00425A  2EE8               	decfsz	wreg,f,c
  8149  00425C  D7FE               	bra	u6537
  8150  00425E  2FC9               	decfsz	??_initLCD& (0+255),f,b
  8151  004260  D7FC               	bra	u6537
  8152                           
  8153                           ;lcd.c: 69: lcdInst(0b00110011);
  8154  004262  0E33               	movlw	51
  8155  004264  ECC6  F022         	call	_lcdInst
  8156                           
  8157                           ;lcd.c: 70: lcdInst(0b00110010);
  8158  004268  0E32               	movlw	50
  8159  00426A  ECC6  F022         	call	_lcdInst
  8160                           
  8161                           ;lcd.c: 71: lcdInst(0b00101000);
  8162  00426E  0E28               	movlw	40
  8163  004270  ECC6  F022         	call	_lcdInst
  8164                           
  8165                           ;lcd.c: 72: lcdInst(0b00001111);
  8166  004274  0E0F               	movlw	15
  8167  004276  ECC6  F022         	call	_lcdInst
  8168                           
  8169                           ;lcd.c: 73: lcdInst(0b00000110);
  8170  00427A  0E06               	movlw	6
  8171  00427C  ECC6  F022         	call	_lcdInst
  8172                           
  8173                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  8174  004280  0E01               	movlw	1
  8175  004282  ECC6  F022         	call	_lcdInst
  8176  004286  0E9C               	movlw	156
  8177  004288  0100               	movlb	0	; () banked
  8178  00428A  6FC9               	movwf	??_initLCD& (0+255),b
  8179  00428C  0ED7               	movlw	215
  8180  00428E                     u6547:
  8181  00428E  2EE8               	decfsz	wreg,f,c
  8182  004290  D7FE               	bra	u6547
  8183  004292  2FC9               	decfsz	??_initLCD& (0+255),f,b
  8184  004294  D7FC               	bra	u6547
  8185                           
  8186                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8187  004296  0E0F               	movlw	15
  8188  004298  ECC6  F022         	call	_lcdInst
  8189  00429C  0012               	return		;funcret
  8190  00429E                     __end_of_initLCD:
  8191                           	opt stack 0
  8192                           tblptru	equ	0xFF8
  8193                           tblptrh	equ	0xFF7
  8194                           tblptrl	equ	0xFF6
  8195                           tablat	equ	0xFF5
  8196                           prodh	equ	0xFF4
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon3	equ	0xFF0
  8200                           indf0	equ	0xFEF
  8201                           postinc0	equ	0xFEE
  8202                           fsr0h	equ	0xFEA
  8203                           fsr0l	equ	0xFE9
  8204                           wreg	equ	0xFE8
  8205                           postdec1	equ	0xFE5
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           fsr2h	equ	0xFDA
  8211                           fsr2l	equ	0xFD9
  8212                           status	equ	0xFD8
  8213                           
  8214 ;; *************** function _lcdInst *****************
  8215 ;; Defined at:
  8216 ;;		line 11 in file "lcd.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;  data            1    wreg     unsigned char 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  data            1    2[BANK0 ] unsigned char 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, status,2, status,0, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;Total ram usage:        1 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    5
  8237 ;; This function calls:
  8238 ;;		_lcdNibble
  8239 ;; This function is called by:
  8240 ;;		_initLCD
  8241 ;;		_main
  8242 ;;		_Bolt_dispense
  8243 ;;		_Nut_dispense
  8244 ;;		_Spacer_dispense
  8245 ;;		_Washer_dispense
  8246 ;;		_all_remain
  8247 ;;		_lcd_set_cursor
  8248 ;;		_lcd_shift_cursor
  8249 ;;		_lcd_shift_display
  8250 ;;		_count_gear
  8251 ;;		_nut_washer_remain
  8252 ;;		_Bolt_remain
  8253 ;;		_Nut_remain
  8254 ;;		_Spacer_remain
  8255 ;;		_Washer_remain
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text21
  8260  00458C                     __ptext21:
  8261                           	opt stack 0
  8262  00458C                     _lcdInst:
  8263                           	opt stack 25
  8264                           
  8265                           ;incstack = 0
  8266                           ;lcdInst@data stored from wreg
  8267  00458C  0100               	movlb	0	; () banked
  8268  00458E  6FC8               	movwf	lcdInst@data& (0+255),b
  8269                           
  8270                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8271  004590  948C               	bcf	3980,2,c	;volatile
  8272                           
  8273                           ;lcd.c: 20: lcdNibble(data);
  8274  004592  0100               	movlb	0	; () banked
  8275  004594  51C8               	movf	lcdInst@data& (0+255),w,b
  8276  004596  ECFB  F01D         	call	_lcdNibble
  8277                           
  8278                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8279  00459A  0EA0               	movlw	160
  8280  00459C                     u6557:
  8281  00459C  D000               	nop2	
  8282  00459E  2EE8               	decfsz	wreg,f,c
  8283  0045A0  D7FD               	bra	u6557
  8284  0045A2  0012               	return		;funcret
  8285  0045A4                     __end_of_lcdInst:
  8286                           	opt stack 0
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodh	equ	0xFF4
  8292                           prodl	equ	0xFF3
  8293                           intcon	equ	0xFF2
  8294                           intcon3	equ	0xFF0
  8295                           indf0	equ	0xFEF
  8296                           postinc0	equ	0xFEE
  8297                           fsr0h	equ	0xFEA
  8298                           fsr0l	equ	0xFE9
  8299                           wreg	equ	0xFE8
  8300                           postdec1	equ	0xFE5
  8301                           fsr1l	equ	0xFE1
  8302                           indf2	equ	0xFDF
  8303                           postinc2	equ	0xFDE
  8304                           postdec2	equ	0xFDD
  8305                           fsr2h	equ	0xFDA
  8306                           fsr2l	equ	0xFD9
  8307                           status	equ	0xFD8
  8308                           
  8309 ;; *************** function _lcdNibble *****************
  8310 ;; Defined at:
  8311 ;;		line 37 in file "lcd.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  data            1    wreg     unsigned char 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;  data            1    1[BANK0 ] unsigned char 
  8316 ;;  temp            1    0[BANK0 ] unsigned char 
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      void 
  8319 ;; Registers used:
  8320 ;;		wreg, status,2, status,0
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;Total ram usage:        2 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    4
  8333 ;; This function calls:
  8334 ;;		Nothing
  8335 ;; This function is called by:
  8336 ;;		_lcdInst
  8337 ;;		_putch
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text22
  8342  003BF6                     __ptext22:
  8343                           	opt stack 0
  8344  003BF6                     _lcdNibble:
  8345                           	opt stack 24
  8346                           
  8347                           ;incstack = 0
  8348                           ;lcdNibble@data stored from wreg
  8349  003BF6  0100               	movlb	0	; () banked
  8350  003BF8  6FC7               	movwf	lcdNibble@data& (0+255),b
  8351                           
  8352                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  8353  003BFA  0100               	movlb	0	; () banked
  8354  003BFC  51C7               	movf	lcdNibble@data& (0+255),w,b
  8355  003BFE  0BF0               	andlw	240
  8356  003C00  6FC6               	movwf	lcdNibble@temp& (0+255),b
  8357                           
  8358                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  8359  003C02  508C               	movf	3980,w,c	;volatile
  8360  003C04  0B0F               	andlw	15
  8361  003C06  6E8C               	movwf	3980,c	;volatile
  8362                           
  8363                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  8364  003C08  51C6               	movf	lcdNibble@temp& (0+255),w,b
  8365  003C0A  108C               	iorwf	3980,w,c	;volatile
  8366  003C0C  6E8C               	movwf	3980,c	;volatile
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8370  003C0E  0E00               	movlw	0
  8371  003C10  BEF2               	btfsc	intcon,7,c	;volatile
  8372  003C12  0E01               	movlw	1
  8373  003C14  6FC0               	movwf	_LCDinterruptState& (0+255),b
  8374                           
  8375                           ; BSR set to: 0
  8376  003C16  9EF2               	bcf	intcon,7,c	;volatile
  8377                           
  8378                           ; BSR set to: 0
  8379  003C18  868C               	bsf	3980,3,c	;volatile
  8380                           
  8381                           ; BSR set to: 0
  8382  003C1A  0E42               	movlw	66
  8383  003C1C                     u6567:
  8384  003C1C  2EE8               	decfsz	wreg,f,c
  8385  003C1E  D7FE               	bra	u6567
  8386  003C20  D000               	nop2	
  8387  003C22  968C               	bcf	3980,3,c	;volatile
  8388  003C24  0EA0               	movlw	160
  8389  003C26                     u6577:
  8390  003C26  D000               	nop2	
  8391  003C28  2EE8               	decfsz	wreg,f,c
  8392  003C2A  D7FD               	bra	u6577
  8393  003C2C  0100               	movlb	0	; () banked
  8394  003C2E  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
  8395  003C30  D002               	bra	u3175
  8396  003C32  9EF2               	bcf	intcon,7,c	;volatile
  8397  003C34  D001               	bra	u3176
  8398  003C36                     u3175:
  8399  003C36  8EF2               	bsf	intcon,7,c	;volatile
  8400  003C38                     u3176:
  8401                           
  8402                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  8403  003C38  0100               	movlb	0	; () banked
  8404  003C3A  39C7               	swapf	lcdNibble@data& (0+255),w,b
  8405  003C3C  0BF0               	andlw	240
  8406  003C3E  6FC7               	movwf	lcdNibble@data& (0+255),b
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  8410  003C40  51C7               	movf	lcdNibble@data& (0+255),w,b
  8411  003C42  0BF0               	andlw	240
  8412  003C44  6FC6               	movwf	lcdNibble@temp& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  8416  003C46  508C               	movf	3980,w,c	;volatile
  8417  003C48  0B0F               	andlw	15
  8418  003C4A  6E8C               	movwf	3980,c	;volatile
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  8422  003C4C  51C6               	movf	lcdNibble@temp& (0+255),w,b
  8423  003C4E  108C               	iorwf	3980,w,c	;volatile
  8424  003C50  6E8C               	movwf	3980,c	;volatile
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8428  003C52  0E00               	movlw	0
  8429  003C54  BEF2               	btfsc	intcon,7,c	;volatile
  8430  003C56  0E01               	movlw	1
  8431  003C58  6FC0               	movwf	_LCDinterruptState& (0+255),b
  8432                           
  8433                           ; BSR set to: 0
  8434  003C5A  9EF2               	bcf	intcon,7,c	;volatile
  8435                           
  8436                           ; BSR set to: 0
  8437  003C5C  868C               	bsf	3980,3,c	;volatile
  8438                           
  8439                           ; BSR set to: 0
  8440  003C5E  0E42               	movlw	66
  8441  003C60                     u6587:
  8442  003C60  2EE8               	decfsz	wreg,f,c
  8443  003C62  D7FE               	bra	u6587
  8444  003C64  D000               	nop2	
  8445  003C66  968C               	bcf	3980,3,c	;volatile
  8446  003C68  0EA0               	movlw	160
  8447  003C6A                     u6597:
  8448  003C6A  D000               	nop2	
  8449  003C6C  2EE8               	decfsz	wreg,f,c
  8450  003C6E  D7FD               	bra	u6597
  8451  003C70  0100               	movlb	0	; () banked
  8452  003C72  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
  8453  003C74  D002               	bra	u3185
  8454  003C76  9EF2               	bcf	intcon,7,c	;volatile
  8455  003C78  D001               	bra	u3186
  8456  003C7A                     u3185:
  8457  003C7A  8EF2               	bsf	intcon,7,c	;volatile
  8458  003C7C                     u3186:
  8459  003C7C  0012               	return		;funcret
  8460  003C7E                     __end_of_lcdNibble:
  8461                           	opt stack 0
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           intcon	equ	0xFF2
  8469                           intcon3	equ	0xFF0
  8470                           indf0	equ	0xFEF
  8471                           postinc0	equ	0xFEE
  8472                           fsr0h	equ	0xFEA
  8473                           fsr0l	equ	0xFE9
  8474                           wreg	equ	0xFE8
  8475                           postdec1	equ	0xFE5
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _I2C_sendData *****************
  8485 ;; Defined at:
  8486 ;;		line 1244 in file "main.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  char_data       1    wreg     unsigned char 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;  char_data       1    3[BANK0 ] unsigned char 
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;Total ram usage:        1 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    6
  8507 ;; This function calls:
  8508 ;;		_I2C_Master_Start
  8509 ;;		_I2C_Master_Stop
  8510 ;;		_I2C_Master_Write
  8511 ;; This function is called by:
  8512 ;;		_main
  8513 ;;		_Bolt_dispense
  8514 ;;		_Nut_dispense
  8515 ;;		_Spacer_dispense
  8516 ;;		_Washer_dispense
  8517 ;;		_all_remain
  8518 ;;		_nut_washer_remain
  8519 ;;		_Bolt_remain
  8520 ;;		_Nut_remain
  8521 ;;		_Spacer_remain
  8522 ;;		_Washer_remain
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text23
  8527  0044C2                     __ptext23:
  8528                           	opt stack 0
  8529  0044C2                     _I2C_sendData:
  8530                           	opt stack 23
  8531                           
  8532                           ;incstack = 0
  8533                           ;I2C_sendData@char_data stored from wreg
  8534  0044C2  0100               	movlb	0	; () banked
  8535  0044C4  6FC9               	movwf	I2C_sendData@char_data& (0+255),b
  8536                           
  8537                           ;main.c: 1245: I2C_Master_Start();
  8538  0044C6  EC1B  F023         	call	_I2C_Master_Start	;wreg free
  8539                           
  8540                           ;main.c: 1246: I2C_Master_Write(0b00010000);
  8541  0044CA  0E00               	movlw	0
  8542  0044CC  0100               	movlb	0	; () banked
  8543  0044CE  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8544  0044D0  0E10               	movlw	16
  8545  0044D2  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  8546  0044D4  EC09  F023         	call	_I2C_Master_Write	;wreg free
  8547                           
  8548                           ;main.c: 1247: I2C_Master_Write(char_data);
  8549  0044D8  C0C9  F0C7         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  8550  0044DC  0100               	movlb	0	; () banked
  8551  0044DE  6BC8               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8552  0044E0  EC09  F023         	call	_I2C_Master_Write	;wreg free
  8553                           
  8554                           ;main.c: 1248: I2C_Master_Stop();
  8555  0044E4  EC17  F023         	call	_I2C_Master_Stop	;wreg free
  8556  0044E8  0012               	return	
  8557  0044EA                     __end_of_I2C_sendData:
  8558                           	opt stack 0
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           intcon	equ	0xFF2
  8566                           intcon3	equ	0xFF0
  8567                           indf0	equ	0xFEF
  8568                           postinc0	equ	0xFEE
  8569                           fsr0h	equ	0xFEA
  8570                           fsr0l	equ	0xFE9
  8571                           wreg	equ	0xFE8
  8572                           postdec1	equ	0xFE5
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function _I2C_Master_Write *****************
  8582 ;; Defined at:
  8583 ;;		line 108 in file "I2C.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;		None
  8588 ;; Return value:  Size  Location     Type
  8589 ;;                  1    wreg      void 
  8590 ;; Registers used:
  8591 ;;		wreg, status,2, status,0, cstack
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8597 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;Total ram usage:        2 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    5
  8604 ;; This function calls:
  8605 ;;		_I2C_Master_Wait
  8606 ;; This function is called by:
  8607 ;;		_main
  8608 ;;		_I2C_init
  8609 ;;		_I2C_sendData
  8610 ;;		_initRamp
  8611 ;;		_ramp_Rotate
  8612 ;;		_RTC_setTime
  8613 ;;		_get_RTC_initial
  8614 ;;		_get_RTC_final
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text24
  8619  004612                     __ptext24:
  8620                           	opt stack 0
  8621  004612                     _I2C_Master_Write:
  8622                           	opt stack 23
  8623                           
  8624                           ;I2C.c: 116: I2C_Master_Wait();
  8625                           
  8626                           ;incstack = 0
  8627  004612  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  8628                           
  8629                           ;I2C.c: 117: SSPBUF = byteToWrite;
  8630  004616  C0C7  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  8631  00461A  0012               	return		;funcret
  8632  00461C                     __end_of_I2C_Master_Write:
  8633                           	opt stack 0
  8634                           tblptru	equ	0xFF8
  8635                           tblptrh	equ	0xFF7
  8636                           tblptrl	equ	0xFF6
  8637                           tablat	equ	0xFF5
  8638                           prodh	equ	0xFF4
  8639                           prodl	equ	0xFF3
  8640                           intcon	equ	0xFF2
  8641                           intcon3	equ	0xFF0
  8642                           indf0	equ	0xFEF
  8643                           postinc0	equ	0xFEE
  8644                           fsr0h	equ	0xFEA
  8645                           fsr0l	equ	0xFE9
  8646                           wreg	equ	0xFE8
  8647                           postdec1	equ	0xFE5
  8648                           fsr1l	equ	0xFE1
  8649                           indf2	equ	0xFDF
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           fsr2h	equ	0xFDA
  8653                           fsr2l	equ	0xFD9
  8654                           status	equ	0xFD8
  8655                           
  8656 ;; *************** function _I2C_Master_Stop *****************
  8657 ;; Defined at:
  8658 ;;		line 95 in file "I2C.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;		None
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;		None
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  1    wreg      void 
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0, cstack
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;Total ram usage:        0 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    5
  8679 ;; This function calls:
  8680 ;;		_I2C_Master_Wait
  8681 ;; This function is called by:
  8682 ;;		_main
  8683 ;;		_I2C_init
  8684 ;;		_I2C_sendData
  8685 ;;		_initRamp
  8686 ;;		_ramp_Rotate
  8687 ;;		_RTC_setTime
  8688 ;;		_get_RTC_initial
  8689 ;;		_get_RTC_final
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text25
  8694  00462E                     __ptext25:
  8695                           	opt stack 0
  8696  00462E                     _I2C_Master_Stop:
  8697                           	opt stack 23
  8698                           
  8699                           ;I2C.c: 104: I2C_Master_Wait();
  8700                           
  8701                           ;incstack = 0
  8702  00462E  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  8703                           
  8704                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  8705  004632  84C5               	bsf	4037,2,c	;volatile
  8706  004634  0012               	return		;funcret
  8707  004636                     __end_of_I2C_Master_Stop:
  8708                           	opt stack 0
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon3	equ	0xFF0
  8717                           indf0	equ	0xFEF
  8718                           postinc0	equ	0xFEE
  8719                           fsr0h	equ	0xFEA
  8720                           fsr0l	equ	0xFE9
  8721                           wreg	equ	0xFE8
  8722                           postdec1	equ	0xFE5
  8723                           fsr1l	equ	0xFE1
  8724                           indf2	equ	0xFDF
  8725                           postinc2	equ	0xFDE
  8726                           postdec2	equ	0xFDD
  8727                           fsr2h	equ	0xFDA
  8728                           fsr2l	equ	0xFD9
  8729                           status	equ	0xFD8
  8730                           
  8731 ;; *************** function _I2C_Master_Start *****************
  8732 ;; Defined at:
  8733 ;;		line 69 in file "I2C.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;		None
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;		None
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  1    wreg      void 
  8740 ;; Registers used:
  8741 ;;		wreg, status,2, status,0, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;Total ram usage:        0 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    5
  8754 ;; This function calls:
  8755 ;;		_I2C_Master_Wait
  8756 ;; This function is called by:
  8757 ;;		_main
  8758 ;;		_I2C_init
  8759 ;;		_I2C_sendData
  8760 ;;		_initRamp
  8761 ;;		_ramp_Rotate
  8762 ;;		_RTC_setTime
  8763 ;;		_get_RTC_initial
  8764 ;;		_get_RTC_final
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text26
  8769  004636                     __ptext26:
  8770                           	opt stack 0
  8771  004636                     _I2C_Master_Start:
  8772                           	opt stack 23
  8773                           
  8774                           ;I2C.c: 78: I2C_Master_Wait();
  8775                           
  8776                           ;incstack = 0
  8777  004636  ECDC  F022         	call	_I2C_Master_Wait	;wreg free
  8778                           
  8779                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  8780  00463A  80C5               	bsf	4037,0,c	;volatile
  8781  00463C  0012               	return		;funcret
  8782  00463E                     __end_of_I2C_Master_Start:
  8783                           	opt stack 0
  8784                           tblptru	equ	0xFF8
  8785                           tblptrh	equ	0xFF7
  8786                           tblptrl	equ	0xFF6
  8787                           tablat	equ	0xFF5
  8788                           prodh	equ	0xFF4
  8789                           prodl	equ	0xFF3
  8790                           intcon	equ	0xFF2
  8791                           intcon3	equ	0xFF0
  8792                           indf0	equ	0xFEF
  8793                           postinc0	equ	0xFEE
  8794                           fsr0h	equ	0xFEA
  8795                           fsr0l	equ	0xFE9
  8796                           wreg	equ	0xFE8
  8797                           postdec1	equ	0xFE5
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function _I2C_Master_Wait *****************
  8807 ;; Defined at:
  8808 ;;		line 51 in file "I2C.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;		None
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;		None
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      void 
  8815 ;; Registers used:
  8816 ;;		wreg, status,2, status,0
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:        1 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    4
  8829 ;; This function calls:
  8830 ;;		Nothing
  8831 ;; This function is called by:
  8832 ;;		_I2C_Master_Start
  8833 ;;		_I2C_Master_Stop
  8834 ;;		_I2C_Master_Write
  8835 ;;		_I2C_Master_Read
  8836 ;;		_I2C_Master_RepeatedStart
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text27
  8841  0045B8                     __ptext27:
  8842                           	opt stack 0
  8843  0045B8                     _I2C_Master_Wait:
  8844                           	opt stack 23
  8845                           
  8846                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  8847                           
  8848                           ;incstack = 0
  8849  0045B8  B4C7               	btfsc	4039,2,c	;volatile
  8850  0045BA  D7FE               	goto	_I2C_Master_Wait
  8851  0045BC  CFC5 F0C6          	movff	4037,??_I2C_Master_Wait	;volatile
  8852  0045C0  0E1F               	movlw	31
  8853  0045C2  0100               	movlb	0	; () banked
  8854  0045C4  17C6               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8855  0045C6  B4D8               	btfsc	status,2,c
  8856  0045C8  0012               	return	
  8857  0045CA  D7F6               	goto	_I2C_Master_Wait
  8858  0045CC                     __end_of_I2C_Master_Wait:
  8859                           	opt stack 0
  8860                           tblptru	equ	0xFF8
  8861                           tblptrh	equ	0xFF7
  8862                           tblptrl	equ	0xFF6
  8863                           tablat	equ	0xFF5
  8864                           prodh	equ	0xFF4
  8865                           prodl	equ	0xFF3
  8866                           intcon	equ	0xFF2
  8867                           intcon3	equ	0xFF0
  8868                           indf0	equ	0xFEF
  8869                           postinc0	equ	0xFEE
  8870                           fsr0h	equ	0xFEA
  8871                           fsr0l	equ	0xFE9
  8872                           wreg	equ	0xFE8
  8873                           postdec1	equ	0xFE5
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           fsr2h	equ	0xFDA
  8879                           fsr2l	equ	0xFD9
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function _interruptHandler *****************
  8883 ;; Defined at:
  8884 ;;		line 509 in file "main.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;		None
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  i               2   65[COMRAM] int 
  8889 ;;  temp            1   68[COMRAM] unsigned char 
  8890 ;;  keypress        1   67[COMRAM] unsigned char 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8902 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8903 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8904 ;;Total ram usage:       27 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    3
  8907 ;; This function calls:
  8908 ;;		___awmod
  8909 ;;		_check
  8910 ;;		_is_valid
  8911 ;;		_strcat
  8912 ;;		_strcpy
  8913 ;;		_strncmp
  8914 ;;		i2_I2C_Master_Init
  8915 ;;		i2_I2C_Master_Read
  8916 ;;		i2_I2C_Master_Start
  8917 ;;		i2_I2C_Master_Stop
  8918 ;;		i2_I2C_Master_Write
  8919 ;;		i2___awdiv
  8920 ;;		i2___wmul
  8921 ;;		i2_generate_compartment_array
  8922 ;;		i2_initLCD
  8923 ;;		i2_lcdInst
  8924 ;;		i2_printf
  8925 ;;		i2_putch
  8926 ;; This function is called by:
  8927 ;;		Interrupt level 2
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	intcode
  8932  000008                     __pintcode:
  8933                           	opt stack 0
  8934  000008                     _interruptHandler:
  8935                           	opt stack 23
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;incstack = 0
  8939  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8940  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon3	equ	0xFF0
  8949                           indf0	equ	0xFEF
  8950                           postinc0	equ	0xFEE
  8951                           fsr0h	equ	0xFEA
  8952                           fsr0l	equ	0xFE9
  8953                           wreg	equ	0xFE8
  8954                           postdec1	equ	0xFE5
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963                           	psect	intcode_body
  8964  000012                     __pintcode_body:
  8965                           	opt stack 23
  8966  000012                     int_func:
  8967                           	opt stack 23
  8968  000012  0006               	pop		; remove dummy address from shadow register refresh
  8969  000014  CFFA F030          	movff	pclath,??_interruptHandler+5
  8970  000018  CFFB F031          	movff	pclatu,??_interruptHandler+6
  8971  00001C  CFE9 F032          	movff	fsr0l,??_interruptHandler+7
  8972  000020  CFEA F033          	movff	fsr0h,??_interruptHandler+8
  8973  000024  CFE1 F034          	movff	fsr1l,??_interruptHandler+9
  8974  000028  CFE2 F035          	movff	fsr1h,??_interruptHandler+10
  8975  00002C  CFD9 F036          	movff	fsr2l,??_interruptHandler+11
  8976  000030  CFDA F037          	movff	fsr2h,??_interruptHandler+12
  8977  000034  CFF3 F038          	movff	prodl,??_interruptHandler+13
  8978  000038  CFF4 F039          	movff	prodh,??_interruptHandler+14
  8979  00003C  CFF6 F03A          	movff	tblptrl,??_interruptHandler+15
  8980  000040  CFF7 F03B          	movff	tblptrh,??_interruptHandler+16
  8981  000044  CFF8 F03C          	movff	tblptru,??_interruptHandler+17
  8982  000048  CFF5 F03D          	movff	tablat,??_interruptHandler+18
  8983  00004C  C07F  F03E         	movff	btemp,??_interruptHandler+19
  8984  000050  C080  F03F         	movff	btemp+1,??_interruptHandler+20
  8985  000054  C081  F040         	movff	btemp+2,??_interruptHandler+21
  8986  000058  C082  F041         	movff	btemp+3,??_interruptHandler+22
  8987                           
  8988                           ;main.c: 520: if(INT1IF){
  8989  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  8990  00005E  EF03  F007         	goto	i2l441
  8991                           
  8992                           ;main.c: 526: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8993  000062  3881               	swapf	3969,w,c	;volatile
  8994  000064  0B0F               	andlw	15
  8995  000066  0B0F               	andlw	15
  8996  000068  6E44               	movwf	interruptHandler@keypress,c
  8997                           
  8998                           ;main.c: 528: char temp = keys[keypress];
  8999  00006A  5044               	movf	interruptHandler@keypress,w,c
  9000  00006C  0D01               	mullw	1
  9001  00006E  0ECD               	movlw	low _keys
  9002  000070  24F3               	addwf	prodl,w,c
  9003  000072  6EF6               	movwf	tblptrl,c
  9004  000074  0EFC               	movlw	high _keys
  9005  000076  20F4               	addwfc	prodh,w,c
  9006  000078  6EF7               	movwf	tblptrh,c
  9007  00007A                     	if	1	;There are 3 active tblptr bytes
  9008  00007A  6AF8               	clrf	tblptru,c
  9009  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
  9010  00007E  22F8               	addwfc	tblptru,f,c
  9011  000080                     	endif
  9012  000080  0008               	tblrd		*
  9013  000082  CFF5 F045          	movff	tablat,interruptHandler@temp
  9014                           
  9015                           ;main.c: 538: if (change_mode == 0){
  9016  000086  0100               	movlb	0	; () banked
  9017  000088  51B5               	movf	_change_mode& (0+255),w,b
  9018  00008A  11B6               	iorwf	(_change_mode+1)& (0+255),w,b
  9019  00008C  A4D8               	btfss	status,2,c
  9020  00008E  D09D               	goto	i2l449
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;main.c: 542: if (temp == '1'){
  9024  000090  0E31               	movlw	49
  9025  000092  1845               	xorwf	interruptHandler@temp,w,c
  9026  000094  A4D8               	btfss	status,2,c
  9027  000096  D08B               	goto	i2l443
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 544: initLCD();
  9031  000098  EC4F  F021         	call	i2_initLCD	;wreg free
  9032                           
  9033                           ;main.c: 545: for (i = 0; i <3; i++){
  9034  00009C  0E00               	movlw	0
  9035  00009E  0100               	movlb	0	; () banked
  9036  0000A0  6FBC               	movwf	(_i+1)& (0+255),b
  9037  0000A2  0E00               	movlw	0
  9038  0000A4  6FBB               	movwf	_i& (0+255),b
  9039                           
  9040                           ; BSR set to: 0
  9041  0000A6  51BC               	movf	(_i+1)& (0+255),w,b
  9042  0000A8  E101               	bnz	i2u521_40
  9043  0000AA  D07B               	goto	L1
  9044  0000AC                     i2u521_40:
  9045                           
  9046                           ; BSR set to: 0
  9047  0000AC  EF01  F007         	goto	i2l6773
  9048  0000B0                     
  9049                           ; BSR set to: 0
  9050                           ;main.c: 546: I2C_Master_Init(100000);
  9051                           
  9052                           ; BSR set to: 0
  9053  0000B0  0EA0               	movlw	160
  9054  0000B2  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9055  0000B4  0E86               	movlw	134
  9056  0000B6  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9057  0000B8  0E01               	movlw	1
  9058  0000BA  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9059  0000BC  0E00               	movlw	0
  9060  0000BE  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9061  0000C0  ECA8  F020         	call	i2_I2C_Master_Init	;wreg free
  9062                           
  9063                           ;main.c: 547: I2C_Master_Start();
  9064  0000C4  EC23  F023         	call	i2_I2C_Master_Start	;wreg free
  9065                           
  9066                           ;main.c: 548: I2C_Master_Write(0b11010000);
  9067  0000C8  0E00               	movlw	0
  9068  0000CA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9069  0000CC  0ED0               	movlw	208
  9070  0000CE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9071  0000D0  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9072                           
  9073                           ;main.c: 549: I2C_Master_Write(0x00);
  9074  0000D4  0E00               	movlw	0
  9075  0000D6  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9076  0000D8  0E00               	movlw	0
  9077  0000DA  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9078  0000DC  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9079                           
  9080                           ;main.c: 550: I2C_Master_Stop();
  9081  0000E0  EC1F  F023         	call	i2_I2C_Master_Stop	;wreg free
  9082                           
  9083                           ;main.c: 553: I2C_Master_Start();
  9084  0000E4  EC23  F023         	call	i2_I2C_Master_Start	;wreg free
  9085                           
  9086                           ;main.c: 554: I2C_Master_Write(0b11010001);
  9087  0000E8  0E00               	movlw	0
  9088  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9089  0000EC  0ED1               	movlw	209
  9090  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9091  0000F0  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9092                           
  9093                           ;main.c: 555: for(j = 0; j < 6; j++){
  9094  0000F4  0E00               	movlw	0
  9095  0000F6  6E6B               	movwf	_j,c
  9096  0000F8                     i2l6353:
  9097  0000F8  0E05               	movlw	5
  9098  0000FA  646B               	cpfsgt	_j,c
  9099  0000FC  D001               	goto	i2l446
  9100  0000FE  D00E               	goto	i2u523_40
  9101  000100                     i2l446:
  9102                           
  9103                           ;main.c: 556: time[j] = I2C_Master_Read(0);
  9104  000100  506B               	movf	_j,w,c
  9105  000102  0D01               	mullw	1
  9106  000104  0E90               	movlw	low _time
  9107  000106  24F3               	addwf	prodl,w,c
  9108  000108  6ED9               	movwf	fsr2l,c
  9109  00010A  0E00               	movlw	high _time
  9110  00010C  20F4               	addwfc	prodh,w,c
  9111  00010E  6EDA               	movwf	fsr2h,c
  9112  000110  0E00               	movlw	0
  9113  000112  EC88  F022         	call	i2_I2C_Master_Read
  9114  000116  6EDF               	movwf	indf2,c
  9115  000118  2A6B               	incf	_j,f,c
  9116  00011A  D7EE               	goto	i2l6353
  9117  00011C                     i2u523_40:
  9118                           
  9119                           ;main.c: 557: }
  9120                           ;main.c: 558: time[6] = I2C_Master_Read(1);
  9121  00011C  0E01               	movlw	1
  9122  00011E  EC88  F022         	call	i2_I2C_Master_Read
  9123  000122  0100               	movlb	0	; () banked
  9124  000124  6F96               	movwf	(_time+6)& (0+255),b
  9125                           
  9126                           ;main.c: 559: I2C_Master_Stop();
  9127  000126  EC1F  F023         	call	i2_I2C_Master_Stop	;wreg free
  9128                           
  9129                           ;main.c: 561: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9130  00012A  0E80               	movlw	128
  9131  00012C  ECF0  F022         	call	i2_lcdInst
  9132  000130  0E34               	movlw	52
  9133  000132  6E2B               	movwf	??_interruptHandler& (0+255),c
  9134  000134  0EF2               	movlw	242
  9135  000136                     i2u660_47:
  9136  000136  2EE8               	decfsz	wreg,f,c
  9137  000138  D7FE               	bra	i2u660_47
  9138  00013A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9139  00013C  D7FC               	bra	i2u660_47
  9140                           
  9141                           ;main.c: 562: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9142  00013E  0EDE               	movlw	low STR_32
  9143  000140  6E0D               	movwf	i2printf@f,c
  9144  000142  0EFE               	movlw	high STR_32
  9145  000144  6E0E               	movwf	i2printf@f+1,c
  9146  000146  C096  F00F         	movff	_time+6,?i2_printf+2
  9147  00014A  6A10               	clrf	?i2_printf+3,c
  9148  00014C  C095  F011         	movff	_time+5,?i2_printf+4
  9149  000150  6A12               	clrf	?i2_printf+5,c
  9150  000152  C094  F013         	movff	_time+4,?i2_printf+6
  9151  000156  6A14               	clrf	?i2_printf+7,c
  9152  000158  ECE7  F016         	call	i2_printf	;wreg free
  9153                           
  9154                           ;main.c: 563: lcdInst(0xC0);;
  9155  00015C  0EC0               	movlw	192
  9156  00015E  ECF0  F022         	call	i2_lcdInst
  9157                           
  9158                           ;main.c: 564: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9159  000162  0EED               	movlw	low STR_33
  9160  000164  6E0D               	movwf	i2printf@f,c
  9161  000166  0EFE               	movlw	high STR_33
  9162  000168  6E0E               	movwf	i2printf@f+1,c
  9163  00016A  C092  F00F         	movff	_time+2,?i2_printf+2
  9164  00016E  6A10               	clrf	?i2_printf+3,c
  9165  000170  C091  F011         	movff	_time+1,?i2_printf+4
  9166  000174  6A12               	clrf	?i2_printf+5,c
  9167  000176  C090  F013         	movff	_time,?i2_printf+6
  9168  00017A  6A14               	clrf	?i2_printf+7,c
  9169  00017C  ECE7  F016         	call	i2_printf	;wreg free
  9170                           
  9171                           ;main.c: 565: _delay((unsigned long)((200)*(32000000/4000.0)));
  9172  000180  0E09               	movlw	9
  9173  000182  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9174  000184  0E1E               	movlw	30
  9175  000186  6E2B               	movwf	??_interruptHandler& (0+255),c
  9176  000188  0EE4               	movlw	228
  9177  00018A                     i2u661_47:
  9178  00018A  2EE8               	decfsz	wreg,f,c
  9179  00018C  D7FE               	bra	i2u661_47
  9180  00018E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9181  000190  D7FC               	bra	i2u661_47
  9182  000192  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9183  000194  D7FA               	bra	i2u661_47
  9184  000196  D000               	nop2	
  9185  000198  0100               	movlb	0	; () banked
  9186  00019A  4BBB               	infsnz	_i& (0+255),f,b
  9187  00019C  2BBC               	incf	(_i+1)& (0+255),f,b
  9188  00019E  51BC               	movf	(_i+1)& (0+255),w,b
  9189  0001A0  E112               	bnz	i2l6379
  9190  0001A2                     L1:
  9191  0001A2  0E03               	movlw	3
  9192  0001A4  5DBB               	subwf	_i& (0+255),w,b
  9193  0001A6  A0D8               	btfss	status,0,c
  9194  0001A8  D783               	goto	i2l444
  9195  0001AA  EF01  F007         	goto	i2l6773
  9196  0001AE                     i2l443:
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;main.c: 569: }
  9200                           ;main.c: 570: if (temp == '2'){
  9201                           
  9202                           ; BSR set to: 0
  9203  0001AE  0E32               	movlw	50
  9204  0001B0  1845               	xorwf	interruptHandler@temp,w,c
  9205  0001B2  A4D8               	btfss	status,2,c
  9206  0001B4  D00A               	goto	i2l449
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;main.c: 571: change_mode = 1;
  9210  0001B6  0E00               	movlw	0
  9211  0001B8  6FB6               	movwf	(_change_mode+1)& (0+255),b
  9212  0001BA  0E01               	movlw	1
  9213  0001BC  6FB5               	movwf	_change_mode& (0+255),b
  9214                           
  9215                           ;main.c: 572: mode = 1;
  9216  0001BE  0E00               	movlw	0
  9217  0001C0  6FB8               	movwf	(_mode+1)& (0+255),b
  9218  0001C2  0E01               	movlw	1
  9219  0001C4  D251               	goto	L8
  9220  0001C6                     i2l6379:
  9221  0001C6  EF01  F007         	goto	i2l6773
  9222  0001CA                     i2l449:
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;main.c: 577: }
  9226                           ;main.c: 580: }
  9227                           ;main.c: 585: if(operation == 1){
  9228                           
  9229                           ; BSR set to: 0
  9230                           
  9231                           ; BSR set to: 0
  9232  0001CA  0468               	decf	_operation,w,c
  9233  0001CC  1069               	iorwf	_operation+1,w,c
  9234  0001CE  A4D8               	btfss	status,2,c
  9235  0001D0  D24D               	goto	i2l460
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;main.c: 586: if (temp == '1'){
  9239  0001D2  0E31               	movlw	49
  9240  0001D4  1845               	xorwf	interruptHandler@temp,w,c
  9241  0001D6  A4D8               	btfss	status,2,c
  9242  0001D8  D08A               	goto	i2l451
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;main.c: 587: initLCD();
  9246  0001DA  EC4F  F021         	call	i2_initLCD	;wreg free
  9247                           
  9248                           ;main.c: 588: for (i = 0; i <3; i++){
  9249  0001DE  0E00               	movlw	0
  9250  0001E0  0100               	movlb	0	; () banked
  9251  0001E2  6FBC               	movwf	(_i+1)& (0+255),b
  9252  0001E4  0E00               	movlw	0
  9253  0001E6  6FBB               	movwf	_i& (0+255),b
  9254                           
  9255                           ; BSR set to: 0
  9256  0001E8  51BC               	movf	(_i+1)& (0+255),w,b
  9257  0001EA  E101               	bnz	i2u528_40
  9258  0001EC  D07A               	goto	L2
  9259  0001EE                     i2u528_40:
  9260                           
  9261                           ; BSR set to: 0
  9262  0001EE  EF01  F007         	goto	i2l6773
  9263  0001F2                     
  9264                           ; BSR set to: 0
  9265                           ;main.c: 589: I2C_Master_Init(100000);
  9266                           
  9267                           ; BSR set to: 0
  9268  0001F2  0EA0               	movlw	160
  9269  0001F4  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9270  0001F6  0E86               	movlw	134
  9271  0001F8  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9272  0001FA  0E01               	movlw	1
  9273  0001FC  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9274  0001FE  0E00               	movlw	0
  9275  000200  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9276  000202  ECA8  F020         	call	i2_I2C_Master_Init	;wreg free
  9277                           
  9278                           ;main.c: 590: I2C_Master_Start();
  9279  000206  EC23  F023         	call	i2_I2C_Master_Start	;wreg free
  9280                           
  9281                           ;main.c: 591: I2C_Master_Write(0b11010000);
  9282  00020A  0E00               	movlw	0
  9283  00020C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9284  00020E  0ED0               	movlw	208
  9285  000210  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9286  000212  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9287                           
  9288                           ;main.c: 592: I2C_Master_Write(0x00);
  9289  000216  0E00               	movlw	0
  9290  000218  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9291  00021A  0E00               	movlw	0
  9292  00021C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9293  00021E  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9294                           
  9295                           ;main.c: 593: I2C_Master_Stop();
  9296  000222  EC1F  F023         	call	i2_I2C_Master_Stop	;wreg free
  9297                           
  9298                           ;main.c: 596: I2C_Master_Start();
  9299  000226  EC23  F023         	call	i2_I2C_Master_Start	;wreg free
  9300                           
  9301                           ;main.c: 597: I2C_Master_Write(0b11010001);
  9302  00022A  0E00               	movlw	0
  9303  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9304  00022E  0ED1               	movlw	209
  9305  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9306  000232  EC0E  F023         	call	i2_I2C_Master_Write	;wreg free
  9307                           
  9308                           ;main.c: 598: for(j = 0; j < 6; j++){
  9309  000236  0E00               	movlw	0
  9310  000238  6E6B               	movwf	_j,c
  9311  00023A                     i2l6399:
  9312  00023A  0E05               	movlw	5
  9313  00023C  646B               	cpfsgt	_j,c
  9314  00023E  D001               	goto	i2l454
  9315  000240  D00E               	goto	i2u530_40
  9316  000242                     i2l454:
  9317                           
  9318                           ;main.c: 599: time[j] = I2C_Master_Read(0);
  9319  000242  506B               	movf	_j,w,c
  9320  000244  0D01               	mullw	1
  9321  000246  0E90               	movlw	low _time
  9322  000248  24F3               	addwf	prodl,w,c
  9323  00024A  6ED9               	movwf	fsr2l,c
  9324  00024C  0E00               	movlw	high _time
  9325  00024E  20F4               	addwfc	prodh,w,c
  9326  000250  6EDA               	movwf	fsr2h,c
  9327  000252  0E00               	movlw	0
  9328  000254  EC88  F022         	call	i2_I2C_Master_Read
  9329  000258  6EDF               	movwf	indf2,c
  9330  00025A  2A6B               	incf	_j,f,c
  9331  00025C  D7EE               	goto	i2l6399
  9332  00025E                     i2u530_40:
  9333                           
  9334                           ;main.c: 600: }
  9335                           ;main.c: 601: time[6] = I2C_Master_Read(1);
  9336  00025E  0E01               	movlw	1
  9337  000260  EC88  F022         	call	i2_I2C_Master_Read
  9338  000264  0100               	movlb	0	; () banked
  9339  000266  6F96               	movwf	(_time+6)& (0+255),b
  9340                           
  9341                           ;main.c: 602: I2C_Master_Stop();
  9342  000268  EC1F  F023         	call	i2_I2C_Master_Stop	;wreg free
  9343                           
  9344                           ;main.c: 604: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9345  00026C  0E80               	movlw	128
  9346  00026E  ECF0  F022         	call	i2_lcdInst
  9347  000272  0E34               	movlw	52
  9348  000274  6E2B               	movwf	??_interruptHandler& (0+255),c
  9349  000276  0EF2               	movlw	242
  9350  000278                     i2u662_47:
  9351  000278  2EE8               	decfsz	wreg,f,c
  9352  00027A  D7FE               	bra	i2u662_47
  9353  00027C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9354  00027E  D7FC               	bra	i2u662_47
  9355                           
  9356                           ;main.c: 605: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9357  000280  0EDE               	movlw	low STR_32
  9358  000282  6E0D               	movwf	i2printf@f,c
  9359  000284  0EFE               	movlw	high STR_32
  9360  000286  6E0E               	movwf	i2printf@f+1,c
  9361  000288  C096  F00F         	movff	_time+6,?i2_printf+2
  9362  00028C  6A10               	clrf	?i2_printf+3,c
  9363  00028E  C095  F011         	movff	_time+5,?i2_printf+4
  9364  000292  6A12               	clrf	?i2_printf+5,c
  9365  000294  C094  F013         	movff	_time+4,?i2_printf+6
  9366  000298  6A14               	clrf	?i2_printf+7,c
  9367  00029A  ECE7  F016         	call	i2_printf	;wreg free
  9368                           
  9369                           ;main.c: 606: lcdInst(0xC0);;
  9370  00029E  0EC0               	movlw	192
  9371  0002A0  ECF0  F022         	call	i2_lcdInst
  9372                           
  9373                           ;main.c: 607: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9374  0002A4  0EED               	movlw	low STR_33
  9375  0002A6  6E0D               	movwf	i2printf@f,c
  9376  0002A8  0EFE               	movlw	high STR_33
  9377  0002AA  6E0E               	movwf	i2printf@f+1,c
  9378  0002AC  C092  F00F         	movff	_time+2,?i2_printf+2
  9379  0002B0  6A10               	clrf	?i2_printf+3,c
  9380  0002B2  C091  F011         	movff	_time+1,?i2_printf+4
  9381  0002B6  6A12               	clrf	?i2_printf+5,c
  9382  0002B8  C090  F013         	movff	_time,?i2_printf+6
  9383  0002BC  6A14               	clrf	?i2_printf+7,c
  9384  0002BE  ECE7  F016         	call	i2_printf	;wreg free
  9385                           
  9386                           ;main.c: 608: _delay((unsigned long)((600)*(32000000/4000.0)));
  9387  0002C2  0E19               	movlw	25
  9388  0002C4  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9389  0002C6  0E5A               	movlw	90
  9390  0002C8  6E2B               	movwf	??_interruptHandler& (0+255),c
  9391  0002CA  0EB2               	movlw	178
  9392  0002CC                     i2u663_47:
  9393  0002CC  2EE8               	decfsz	wreg,f,c
  9394  0002CE  D7FE               	bra	i2u663_47
  9395  0002D0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9396  0002D2  D7FC               	bra	i2u663_47
  9397  0002D4  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9398  0002D6  D7FA               	bra	i2u663_47
  9399  0002D8  0100               	movlb	0	; () banked
  9400  0002DA  4BBB               	infsnz	_i& (0+255),f,b
  9401  0002DC  2BBC               	incf	(_i+1)& (0+255),f,b
  9402  0002DE  51BC               	movf	(_i+1)& (0+255),w,b
  9403  0002E0  E104               	bnz	i2u531_40
  9404  0002E2                     L2:
  9405  0002E2  0E03               	movlw	3
  9406  0002E4  5DBB               	subwf	_i& (0+255),w,b
  9407  0002E6  A0D8               	btfss	status,0,c
  9408  0002E8  D784               	goto	i2l452
  9409  0002EA                     i2u531_40:
  9410  0002EA  EF01  F007         	goto	i2l6773
  9411  0002EE                     i2l451:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;main.c: 614: }
  9415                           ;main.c: 615: if (temp == '2'){
  9416                           
  9417                           ; BSR set to: 0
  9418  0002EE  0E32               	movlw	50
  9419  0002F0  1845               	xorwf	interruptHandler@temp,w,c
  9420  0002F2  A4D8               	btfss	status,2,c
  9421  0002F4  D099               	goto	i2l456
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;main.c: 624: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  9425  0002F6  C16E  F001         	movff	_hr_initial,i2___wmul@multiplier
  9426  0002FA  C16F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  9427  0002FE  0E0E               	movlw	14
  9428  000300  6E04               	movwf	i2___wmul@multiplicand+1,c
  9429  000302  0E10               	movlw	16
  9430  000304  6E03               	movwf	i2___wmul@multiplicand,c
  9431  000306  EC75  F022         	call	i2___wmul	;wreg free
  9432  00030A  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9433  00030E  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9434  000312  C16C  F001         	movff	_min_initial,i2___wmul@multiplier
  9435  000316  C16D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  9436  00031A  0E00               	movlw	0
  9437  00031C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9438  00031E  0E3C               	movlw	60
  9439  000320  6E03               	movwf	i2___wmul@multiplicand,c
  9440  000322  EC75  F022         	call	i2___wmul	;wreg free
  9441  000326  5001               	movf	?i2___wmul,w,c
  9442  000328  262B               	addwf	??_interruptHandler,f,c
  9443  00032A  5002               	movf	?i2___wmul+1,w,c
  9444  00032C  222C               	addwfc	??_interruptHandler+1,f,c
  9445  00032E  0101               	movlb	1	; () banked
  9446  000330  516A               	movf	_sec_initial& (0+255),w,b
  9447  000332  242B               	addwf	??_interruptHandler,w,c
  9448  000334  6F68               	movwf	_initial_time& (0+255),b
  9449  000336  516B               	movf	(_sec_initial+1)& (0+255),w,b
  9450  000338  202C               	addwfc	??_interruptHandler+1,w,c
  9451  00033A  6F69               	movwf	(_initial_time+1)& (0+255),b
  9452                           
  9453                           ;main.c: 625: final_time = hr_final*3600 + min_final*60 + sec_final;
  9454  00033C  C166  F001         	movff	_hr_final,i2___wmul@multiplier
  9455  000340  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  9456  000344  0E0E               	movlw	14
  9457  000346  6E04               	movwf	i2___wmul@multiplicand+1,c
  9458  000348  0E10               	movlw	16
  9459  00034A  6E03               	movwf	i2___wmul@multiplicand,c
  9460  00034C  EC75  F022         	call	i2___wmul	;wreg free
  9461  000350  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9462  000354  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9463  000358  C164  F001         	movff	_min_final,i2___wmul@multiplier
  9464  00035C  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  9465  000360  0E00               	movlw	0
  9466  000362  6E04               	movwf	i2___wmul@multiplicand+1,c
  9467  000364  0E3C               	movlw	60
  9468  000366  6E03               	movwf	i2___wmul@multiplicand,c
  9469  000368  EC75  F022         	call	i2___wmul	;wreg free
  9470  00036C  5001               	movf	?i2___wmul,w,c
  9471  00036E  262B               	addwf	??_interruptHandler,f,c
  9472  000370  5002               	movf	?i2___wmul+1,w,c
  9473  000372  222C               	addwfc	??_interruptHandler+1,f,c
  9474  000374  0101               	movlb	1	; () banked
  9475  000376  5162               	movf	_sec_final& (0+255),w,b
  9476  000378  242B               	addwf	??_interruptHandler,w,c
  9477  00037A  6F60               	movwf	_final_time& (0+255),b
  9478  00037C  5163               	movf	(_sec_final+1)& (0+255),w,b
  9479  00037E  202C               	addwfc	??_interruptHandler+1,w,c
  9480  000380  6F61               	movwf	(_final_time+1)& (0+255),b
  9481                           
  9482                           ; BSR set to: 1
  9483                           ;main.c: 626: operationTime = final_time - initial_time;
  9484  000382  C168  F02B         	movff	_initial_time,??_interruptHandler
  9485  000386  C169  F02C         	movff	_initial_time+1,??_interruptHandler+1
  9486  00038A  1E2B               	comf	??_interruptHandler,f,c
  9487  00038C  1E2C               	comf	??_interruptHandler+1,f,c
  9488  00038E  4A2B               	infsnz	??_interruptHandler,f,c
  9489  000390  2A2C               	incf	??_interruptHandler+1,f,c
  9490  000392  5160               	movf	_final_time& (0+255),w,b
  9491  000394  242B               	addwf	??_interruptHandler,w,c
  9492  000396  6E62               	movwf	_operationTime,c
  9493  000398  5161               	movf	(_final_time+1)& (0+255),w,b
  9494  00039A  202C               	addwfc	??_interruptHandler+1,w,c
  9495  00039C  6E63               	movwf	_operationTime+1,c
  9496                           
  9497                           ; BSR set to: 1
  9498                           ;main.c: 627: initLCD();
  9499  00039E  EC4F  F021         	call	i2_initLCD	;wreg free
  9500                           
  9501                           ;main.c: 630: printf("operation time:");
  9502  0003A2  0E63               	movlw	low STR_36
  9503  0003A4  6E0D               	movwf	i2printf@f,c
  9504  0003A6  0EFE               	movlw	high STR_36
  9505  0003A8  6E0E               	movwf	i2printf@f+1,c
  9506  0003AA  ECE7  F016         	call	i2_printf	;wreg free
  9507                           
  9508                           ;main.c: 631: lcdInst(0xC0);;
  9509  0003AE  0EC0               	movlw	192
  9510  0003B0  ECF0  F022         	call	i2_lcdInst
  9511                           
  9512                           ;main.c: 632: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  9513  0003B4  0E34               	movlw	low STR_37
  9514  0003B6  6E0D               	movwf	i2printf@f,c
  9515  0003B8  0EFF               	movlw	high STR_37
  9516  0003BA  6E0E               	movwf	i2printf@f+1,c
  9517  0003BC  C062  F001         	movff	_operationTime,i2___awdiv@dividend
  9518  0003C0  C063  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  9519  0003C4  0E00               	movlw	0
  9520  0003C6  6E04               	movwf	i2___awdiv@divisor+1,c
  9521  0003C8  0E3C               	movlw	60
  9522  0003CA  6E03               	movwf	i2___awdiv@divisor,c
  9523  0003CC  EC4A  F01F         	call	i2___awdiv	;wreg free
  9524  0003D0  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9525  0003D4  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9526  0003D8  C062  F001         	movff	_operationTime,___awmod@dividend
  9527  0003DC  C063  F002         	movff	_operationTime+1,___awmod@dividend+1
  9528  0003E0  0E00               	movlw	0
  9529  0003E2  6E04               	movwf	___awmod@divisor+1,c
  9530  0003E4  0E3C               	movlw	60
  9531  0003E6  6E03               	movwf	___awmod@divisor,c
  9532  0003E8  EC0D  F020         	call	___awmod	;wreg free
  9533  0003EC  C001  F011         	movff	?___awmod,?i2_printf+4
  9534  0003F0  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9535  0003F4  ECE7  F016         	call	i2_printf	;wreg free
  9536                           
  9537                           ;main.c: 633: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9538  0003F8  0E80               	movlw	128
  9539  0003FA  ECF0  F022         	call	i2_lcdInst
  9540  0003FE  0E34               	movlw	52
  9541  000400  6E2B               	movwf	??_interruptHandler& (0+255),c
  9542  000402  0EF2               	movlw	242
  9543  000404                     i2u664_47:
  9544  000404  2EE8               	decfsz	wreg,f,c
  9545  000406  D7FE               	bra	i2u664_47
  9546  000408  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9547  00040A  D7FC               	bra	i2u664_47
  9548                           
  9549                           ;main.c: 634: _delay((unsigned long)((200)*(32000000/4000.0)));
  9550  00040C  0E09               	movlw	9
  9551  00040E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9552  000410  0E1E               	movlw	30
  9553  000412  6E2B               	movwf	??_interruptHandler& (0+255),c
  9554  000414  0EE4               	movlw	228
  9555  000416                     i2u665_47:
  9556  000416  2EE8               	decfsz	wreg,f,c
  9557  000418  D7FE               	bra	i2u665_47
  9558  00041A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9559  00041C  D7FC               	bra	i2u665_47
  9560  00041E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9561  000420  D7FA               	bra	i2u665_47
  9562  000422  D000               	nop2	
  9563  000424  EF01  F007         	goto	i2l6773
  9564  000428                     i2l456:
  9565                           
  9566                           ;main.c: 640: }
  9567                           ;main.c: 642: if (temp == '3'){
  9568  000428  0E33               	movlw	51
  9569  00042A  1845               	xorwf	interruptHandler@temp,w,c
  9570  00042C  A4D8               	btfss	status,2,c
  9571  00042E  D110               	goto	i2l457
  9572                           
  9573                           ;main.c: 647: initLCD();
  9574  000430  EC4F  F021         	call	i2_initLCD	;wreg free
  9575                           
  9576                           ;main.c: 648: printf("assembly step:%d",assembly_step);
  9577  000434  0E31               	movlw	low STR_8
  9578  000436  6E0D               	movwf	i2printf@f,c
  9579  000438  0EFE               	movlw	high STR_8
  9580  00043A  6E0E               	movwf	i2printf@f+1,c
  9581  00043C  C0AF  F00F         	movff	_assembly_step,?i2_printf+2
  9582  000440  C0B0  F010         	movff	_assembly_step+1,?i2_printf+3
  9583  000444  ECE7  F016         	call	i2_printf	;wreg free
  9584                           
  9585                           ;main.c: 649: for (i = 0; i<8; i++){
  9586  000448  0E00               	movlw	0
  9587  00044A  0100               	movlb	0	; () banked
  9588  00044C  6FBC               	movwf	(_i+1)& (0+255),b
  9589  00044E  0E00               	movlw	0
  9590  000450  6FBB               	movwf	_i& (0+255),b
  9591  000452                     i2l6453:
  9592                           
  9593                           ; BSR set to: 0
  9594  000452  51BC               	movf	(_i+1)& (0+255),w,b
  9595  000454  E169               	bnz	i2l6471
  9596  000456  0E08               	movlw	8
  9597  000458  5DBB               	subwf	_i& (0+255),w,b
  9598  00045A  B0D8               	btfsc	status,0,c
  9599  00045C  D065               	goto	i2u535_40
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;main.c: 650: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9603                           
  9604                           ; BSR set to: 0
  9605                           
  9606                           ; BSR set to: 0
  9607  00045E  0E80               	movlw	128
  9608  000460  ECF0  F022         	call	i2_lcdInst
  9609  000464  0E34               	movlw	52
  9610  000466  6E2B               	movwf	??_interruptHandler& (0+255),c
  9611  000468  0EF2               	movlw	242
  9612  00046A                     i2u666_47:
  9613  00046A  2EE8               	decfsz	wreg,f,c
  9614  00046C  D7FE               	bra	i2u666_47
  9615  00046E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9616  000470  D7FC               	bra	i2u666_47
  9617                           
  9618                           ;main.c: 651: _delay((unsigned long)((100)*(32000000/4000.0)));
  9619  000472  0E05               	movlw	5
  9620  000474  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9621  000476  0E0F               	movlw	15
  9622  000478  6E2B               	movwf	??_interruptHandler& (0+255),c
  9623  00047A  0EF1               	movlw	241
  9624  00047C                     i2u667_47:
  9625  00047C  2EE8               	decfsz	wreg,f,c
  9626  00047E  D7FE               	bra	i2u667_47
  9627  000480  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9628  000482  D7FC               	bra	i2u667_47
  9629  000484  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9630  000486  D7FA               	bra	i2u667_47
  9631  000488  F000               	nop	
  9632                           
  9633                           ;main.c: 652: printf("C%d:B%d,N%d,S%d,W%d",i,B_array[i],N_array[i],S_array[i],W_array[i]
      +                          );
  9634  00048A  0E78               	movlw	low STR_39
  9635  00048C  6E0D               	movwf	i2printf@f,c
  9636  00048E  0EFD               	movlw	high STR_39
  9637  000490  6E0E               	movwf	i2printf@f+1,c
  9638  000492  C0BB  F00F         	movff	_i,?i2_printf+2
  9639  000496  C0BC  F010         	movff	_i+1,?i2_printf+3
  9640  00049A  90D8               	bcf	status,0,c
  9641  00049C  0100               	movlb	0	; () banked
  9642  00049E  35BB               	rlcf	_i& (0+255),w,b
  9643  0004A0  6ED9               	movwf	fsr2l,c
  9644  0004A2  35BC               	rlcf	(_i+1)& (0+255),w,b
  9645  0004A4  6EDA               	movwf	fsr2h,c
  9646  0004A6  0E30               	movlw	low _B_array
  9647  0004A8  26D9               	addwf	fsr2l,f,c
  9648  0004AA  0E01               	movlw	high _B_array
  9649  0004AC  22DA               	addwfc	fsr2h,f,c
  9650  0004AE  CFDE F011          	movff	postinc2,?i2_printf+4
  9651  0004B2  CFDD F012          	movff	postdec2,?i2_printf+5
  9652  0004B6  90D8               	bcf	status,0,c
  9653  0004B8  35BB               	rlcf	_i& (0+255),w,b
  9654  0004BA  6ED9               	movwf	fsr2l,c
  9655  0004BC  35BC               	rlcf	(_i+1)& (0+255),w,b
  9656  0004BE  6EDA               	movwf	fsr2h,c
  9657  0004C0  0E10               	movlw	low _N_array
  9658  0004C2  26D9               	addwf	fsr2l,f,c
  9659  0004C4  0E01               	movlw	high _N_array
  9660  0004C6  22DA               	addwfc	fsr2h,f,c
  9661  0004C8  CFDE F013          	movff	postinc2,?i2_printf+6
  9662  0004CC  CFDD F014          	movff	postdec2,?i2_printf+7
  9663  0004D0  90D8               	bcf	status,0,c
  9664  0004D2  35BB               	rlcf	_i& (0+255),w,b
  9665  0004D4  6ED9               	movwf	fsr2l,c
  9666  0004D6  35BC               	rlcf	(_i+1)& (0+255),w,b
  9667  0004D8  6EDA               	movwf	fsr2h,c
  9668  0004DA  0E20               	movlw	low _S_array
  9669  0004DC  26D9               	addwf	fsr2l,f,c
  9670  0004DE  0E01               	movlw	high _S_array
  9671  0004E0  22DA               	addwfc	fsr2h,f,c
  9672  0004E2  CFDE F015          	movff	postinc2,?i2_printf+8
  9673  0004E6  CFDD F016          	movff	postdec2,?i2_printf+9
  9674  0004EA  90D8               	bcf	status,0,c
  9675  0004EC  35BB               	rlcf	_i& (0+255),w,b
  9676  0004EE  6ED9               	movwf	fsr2l,c
  9677  0004F0  35BC               	rlcf	(_i+1)& (0+255),w,b
  9678  0004F2  6EDA               	movwf	fsr2h,c
  9679  0004F4  0E00               	movlw	low _W_array
  9680  0004F6  26D9               	addwf	fsr2l,f,c
  9681  0004F8  0E01               	movlw	high _W_array
  9682  0004FA  22DA               	addwfc	fsr2h,f,c
  9683  0004FC  CFDE F017          	movff	postinc2,?i2_printf+10
  9684  000500  CFDD F018          	movff	postdec2,?i2_printf+11
  9685  000504  ECE7  F016         	call	i2_printf	;wreg free
  9686                           
  9687                           ;main.c: 653: _delay((unsigned long)((100)*(32000000/4000.0)));
  9688  000508  0E05               	movlw	5
  9689  00050A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9690  00050C  0E0F               	movlw	15
  9691  00050E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9692  000510  0EF1               	movlw	241
  9693  000512                     i2u668_47:
  9694  000512  2EE8               	decfsz	wreg,f,c
  9695  000514  D7FE               	bra	i2u668_47
  9696  000516  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9697  000518  D7FC               	bra	i2u668_47
  9698  00051A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9699  00051C  D7FA               	bra	i2u668_47
  9700  00051E  F000               	nop	
  9701  000520  0100               	movlb	0	; () banked
  9702  000522  4BBB               	infsnz	_i& (0+255),f,b
  9703  000524  2BBC               	incf	(_i+1)& (0+255),f,b
  9704  000526  D795               	goto	i2l6453
  9705  000528                     i2u535_40:
  9706  000528                     i2l6471:
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;main.c: 659: }
  9710                           ;main.c: 662: _delay((unsigned long)((800)*(32000000/4000.0)));
  9711  000528  0E21               	movlw	33
  9712  00052A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9713  00052C  0E78               	movlw	120
  9714  00052E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9715  000530  0E98               	movlw	152
  9716  000532                     i2u669_47:
  9717  000532  2EE8               	decfsz	wreg,f,c
  9718  000534  D7FE               	bra	i2u669_47
  9719  000536  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9720  000538  D7FC               	bra	i2u669_47
  9721  00053A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9722  00053C  D7FA               	bra	i2u669_47
  9723  00053E  D000               	nop2	
  9724                           
  9725                           ;main.c: 663: initLCD();
  9726  000540  EC4F  F021         	call	i2_initLCD	;wreg free
  9727                           
  9728                           ;main.c: 665: printf("Bolt_remain:%d",B_remain);
  9729  000544  0EB1               	movlw	low STR_24
  9730  000546  6E0D               	movwf	i2printf@f,c
  9731  000548  0EFE               	movlw	high STR_24
  9732  00054A  6E0E               	movwf	i2printf@f+1,c
  9733  00054C  C0A5  F00F         	movff	_B_remain,?i2_printf+2
  9734  000550  C0A6  F010         	movff	_B_remain+1,?i2_printf+3
  9735  000554  ECE7  F016         	call	i2_printf	;wreg free
  9736                           
  9737                           ;main.c: 666: _delay((unsigned long)((100)*(32000000/4000.0)));
  9738  000558  0E05               	movlw	5
  9739  00055A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9740  00055C  0E0F               	movlw	15
  9741  00055E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9742  000560  0EF1               	movlw	241
  9743  000562                     i2u670_47:
  9744  000562  2EE8               	decfsz	wreg,f,c
  9745  000564  D7FE               	bra	i2u670_47
  9746  000566  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9747  000568  D7FC               	bra	i2u670_47
  9748  00056A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9749  00056C  D7FA               	bra	i2u670_47
  9750  00056E  F000               	nop	
  9751                           
  9752                           ;main.c: 667: initLCD();
  9753  000570  EC4F  F021         	call	i2_initLCD	;wreg free
  9754                           
  9755                           ;main.c: 669: printf("Nut_remain:%d",N_remain);
  9756  000574  0E18               	movlw	low STR_25
  9757  000576  6E0D               	movwf	i2printf@f,c
  9758  000578  0EFF               	movlw	high STR_25
  9759  00057A  6E0E               	movwf	i2printf@f+1,c
  9760  00057C  C0A3  F00F         	movff	_N_remain,?i2_printf+2
  9761  000580  C0A4  F010         	movff	_N_remain+1,?i2_printf+3
  9762  000584  ECE7  F016         	call	i2_printf	;wreg free
  9763                           
  9764                           ;main.c: 670: _delay((unsigned long)((100)*(32000000/4000.0)));
  9765  000588  0E05               	movlw	5
  9766  00058A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9767  00058C  0E0F               	movlw	15
  9768  00058E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9769  000590  0EF1               	movlw	241
  9770  000592                     i2u671_47:
  9771  000592  2EE8               	decfsz	wreg,f,c
  9772  000594  D7FE               	bra	i2u671_47
  9773  000596  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9774  000598  D7FC               	bra	i2u671_47
  9775  00059A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9776  00059C  D7FA               	bra	i2u671_47
  9777  00059E  F000               	nop	
  9778                           
  9779                           ;main.c: 672: initLCD();
  9780  0005A0  EC4F  F021         	call	i2_initLCD	;wreg free
  9781                           
  9782                           ;main.c: 673: printf("Spacer_remain:%d",S_remain);
  9783  0005A4  0E0F               	movlw	low STR_26
  9784  0005A6  6E0D               	movwf	i2printf@f,c
  9785  0005A8  0EFE               	movlw	high STR_26
  9786  0005AA  6E0E               	movwf	i2printf@f+1,c
  9787  0005AC  C0A1  F00F         	movff	_S_remain,?i2_printf+2
  9788  0005B0  C0A2  F010         	movff	_S_remain+1,?i2_printf+3
  9789  0005B4  ECE7  F016         	call	i2_printf	;wreg free
  9790                           
  9791                           ;main.c: 674: _delay((unsigned long)((300)*(32000000/4000.0)));
  9792  0005B8  0E0D               	movlw	13
  9793  0005BA  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9794  0005BC  0E2D               	movlw	45
  9795  0005BE  6E2B               	movwf	??_interruptHandler& (0+255),c
  9796  0005C0  0ED8               	movlw	216
  9797  0005C2                     i2u672_47:
  9798  0005C2  2EE8               	decfsz	wreg,f,c
  9799  0005C4  D7FE               	bra	i2u672_47
  9800  0005C6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9801  0005C8  D7FC               	bra	i2u672_47
  9802  0005CA  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9803  0005CC  D7FA               	bra	i2u672_47
  9804                           
  9805                           ;main.c: 676: initLCD();
  9806  0005CE  EC4F  F021         	call	i2_initLCD	;wreg free
  9807                           
  9808                           ;main.c: 677: printf("Washer_remain:%d",W_remain);
  9809  0005D2  0E20               	movlw	low STR_27
  9810  0005D4  6E0D               	movwf	i2printf@f,c
  9811  0005D6  0EFE               	movlw	high STR_27
  9812  0005D8  6E0E               	movwf	i2printf@f+1,c
  9813  0005DA  C09F  F00F         	movff	_W_remain,?i2_printf+2
  9814  0005DE  C0A0  F010         	movff	_W_remain+1,?i2_printf+3
  9815  0005E2  ECE7  F016         	call	i2_printf	;wreg free
  9816                           
  9817                           ;main.c: 678: _delay((unsigned long)((300)*(32000000/4000.0)));
  9818  0005E6  0E0D               	movlw	13
  9819  0005E8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9820  0005EA  0E2D               	movlw	45
  9821  0005EC  6E2B               	movwf	??_interruptHandler& (0+255),c
  9822  0005EE  0ED8               	movlw	216
  9823  0005F0                     i2u673_47:
  9824  0005F0  2EE8               	decfsz	wreg,f,c
  9825  0005F2  D7FE               	bra	i2u673_47
  9826  0005F4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9827  0005F6  D7FC               	bra	i2u673_47
  9828  0005F8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9829  0005FA  D7FA               	bra	i2u673_47
  9830                           
  9831                           ;main.c: 680: initLCD();
  9832  0005FC  EC4F  F021         	call	i2_initLCD	;wreg free
  9833                           
  9834                           ;main.c: 682: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9835  000600  0E01               	movlw	1
  9836  000602  ECF0  F022         	call	i2_lcdInst
  9837  000606  0E9C               	movlw	156
  9838  000608  6E2B               	movwf	??_interruptHandler& (0+255),c
  9839  00060A  0ED7               	movlw	215
  9840  00060C                     i2u674_47:
  9841  00060C  2EE8               	decfsz	wreg,f,c
  9842  00060E  D7FE               	bra	i2u674_47
  9843  000610  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9844  000612  D7FC               	bra	i2u674_47
  9845  000614  F000               	nop	
  9846                           
  9847                           ;main.c: 683: printf("you're done");
  9848  000616  0E4D               	movlw	low STR_44
  9849  000618  6E0D               	movwf	i2printf@f,c
  9850  00061A  0EFF               	movlw	high STR_44
  9851  00061C  6E0E               	movwf	i2printf@f+1,c
  9852  00061E  ECE7  F016         	call	i2_printf	;wreg free
  9853                           
  9854                           ;main.c: 684: _delay((unsigned long)((100)*(32000000/4000.0)));
  9855  000622  0E05               	movlw	5
  9856  000624  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9857  000626  0E0F               	movlw	15
  9858  000628  6E2B               	movwf	??_interruptHandler& (0+255),c
  9859  00062A  0EF1               	movlw	241
  9860  00062C                     i2u675_47:
  9861  00062C  2EE8               	decfsz	wreg,f,c
  9862  00062E  D7FE               	bra	i2u675_47
  9863  000630  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9864  000632  D7FC               	bra	i2u675_47
  9865  000634  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9866  000636  D7FA               	bra	i2u675_47
  9867  000638  F000               	nop	
  9868                           
  9869                           ;main.c: 685: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9870  00063A  0E80               	movlw	128
  9871  00063C  ECF0  F022         	call	i2_lcdInst
  9872  000640  0E34               	movlw	52
  9873  000642  6E2B               	movwf	??_interruptHandler& (0+255),c
  9874  000644  0EF2               	movlw	242
  9875  000646                     i2u676_47:
  9876  000646  2EE8               	decfsz	wreg,f,c
  9877  000648  D7FE               	bra	i2u676_47
  9878  00064A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9879  00064C  D7FC               	bra	i2u676_47
  9880  00064E  D3D9               	goto	i2l6773
  9881  000650                     i2l457:
  9882                           
  9883                           ;main.c: 690: }
  9884                           ;main.c: 692: if (temp == '4'){
  9885  000650  0E34               	movlw	52
  9886  000652  1845               	xorwf	interruptHandler@temp,w,c
  9887  000654  A4D8               	btfss	status,2,c
  9888  000656  D00A               	goto	i2l460
  9889                           
  9890                           ;main.c: 693: operation_done = 1;
  9891  000658  0E00               	movlw	0
  9892  00065A  0100               	movlb	0	; () banked
  9893  00065C  6FB4               	movwf	(_operation_done+1)& (0+255),b
  9894  00065E  0E01               	movlw	1
  9895  000660  6FB3               	movwf	_operation_done& (0+255),b
  9896                           
  9897                           ;main.c: 694: mode = 0;
  9898  000662  0E00               	movlw	0
  9899  000664  6FB8               	movwf	(_mode+1)& (0+255),b
  9900  000666  0E00               	movlw	0
  9901  000668                     L8:
  9902  000668  6FB7               	movwf	_mode& (0+255),b
  9903  00066A  D3CB               	goto	i2l6773
  9904  00066C                     i2l460:
  9905                           
  9906                           ;main.c: 697: }
  9907                           ;main.c: 699: }
  9908                           ;main.c: 724: if (state == 0){
  9909                           
  9910                           ; BSR set to: 0
  9911                           
  9912                           ; BSR set to: 0
  9913  00066C  0100               	movlb	0	; () banked
  9914  00066E  51B1               	movf	_state& (0+255),w,b
  9915  000670  11B2               	iorwf	(_state+1)& (0+255),w,b
  9916  000672  A4D8               	btfss	status,2,c
  9917  000674  D0CE               	goto	i2l461
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;main.c: 726: if(temp == '4'){
  9921  000676  0E34               	movlw	52
  9922  000678  1845               	xorwf	interruptHandler@temp,w,c
  9923  00067A  A4D8               	btfss	status,2,c
  9924  00067C  D01F               	goto	i2l462
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;main.c: 727: assembly_step = 4;
  9928  00067E  0E00               	movlw	0
  9929  000680  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  9930  000682  0E04               	movlw	4
  9931  000684  6FAF               	movwf	_assembly_step& (0+255),b
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;main.c: 728: prev_state = state;
  9935  000686  C0B1  F188         	movff	_state,_prev_state
  9936  00068A  C0B2  F189         	movff	_state+1,_prev_state+1
  9937                           
  9938                           ;main.c: 729: state = 1;
  9939  00068E  0E00               	movlw	0
  9940  000690  6FB2               	movwf	(_state+1)& (0+255),b
  9941  000692  0E01               	movlw	1
  9942  000694  6FB1               	movwf	_state& (0+255),b
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;main.c: 730: lcdInst(0xC0);;
  9946  000696  0EC0               	movlw	192
  9947  000698  ECF0  F022         	call	i2_lcdInst
  9948                           
  9949                           ;main.c: 731: putch(keys[keypress]);
  9950  00069C  5044               	movf	interruptHandler@keypress,w,c
  9951  00069E  0D01               	mullw	1
  9952  0006A0  0ECD               	movlw	low _keys
  9953  0006A2  24F3               	addwf	prodl,w,c
  9954  0006A4  6EF6               	movwf	tblptrl,c
  9955  0006A6  0EFC               	movlw	high _keys
  9956  0006A8  20F4               	addwfc	prodh,w,c
  9957  0006AA  6EF7               	movwf	tblptrh,c
  9958  0006AC                     	if	1	;There are 3 active tblptr bytes
  9959  0006AC  6AF8               	clrf	tblptru,c
  9960  0006AE  0E00               	movlw	low (__mediumconst shr (0+16))
  9961  0006B0  22F8               	addwfc	tblptru,f,c
  9962  0006B2                     	endif
  9963  0006B2  0008               	tblrd		*
  9964  0006B4  50F5               	movf	tablat,w,c
  9965  0006B6  ECE6  F022         	call	i2_putch
  9966                           
  9967                           ;main.c: 733: }
  9968  0006BA  D0A4               	goto	i2l471
  9969  0006BC                     i2l462:
  9970                           
  9971                           ;main.c: 734: else if(temp == '5'){
  9972  0006BC  0E35               	movlw	53
  9973  0006BE  1845               	xorwf	interruptHandler@temp,w,c
  9974  0006C0  A4D8               	btfss	status,2,c
  9975  0006C2  D020               	goto	i2l464
  9976                           
  9977                           ;main.c: 735: assembly_step = 5;
  9978  0006C4  0E00               	movlw	0
  9979  0006C6  0100               	movlb	0	; () banked
  9980  0006C8  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  9981  0006CA  0E05               	movlw	5
  9982  0006CC  6FAF               	movwf	_assembly_step& (0+255),b
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;main.c: 736: prev_state = state;
  9986  0006CE  C0B1  F188         	movff	_state,_prev_state
  9987  0006D2  C0B2  F189         	movff	_state+1,_prev_state+1
  9988                           
  9989                           ;main.c: 737: state = 1;
  9990  0006D6  0E00               	movlw	0
  9991  0006D8  6FB2               	movwf	(_state+1)& (0+255),b
  9992  0006DA  0E01               	movlw	1
  9993  0006DC  6FB1               	movwf	_state& (0+255),b
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;main.c: 738: lcdInst(0xC0);;
  9997  0006DE  0EC0               	movlw	192
  9998  0006E0  ECF0  F022         	call	i2_lcdInst
  9999                           
 10000                           ;main.c: 739: putch(keys[keypress]);
 10001  0006E4  5044               	movf	interruptHandler@keypress,w,c
 10002  0006E6  0D01               	mullw	1
 10003  0006E8  0ECD               	movlw	low _keys
 10004  0006EA  24F3               	addwf	prodl,w,c
 10005  0006EC  6EF6               	movwf	tblptrl,c
 10006  0006EE  0EFC               	movlw	high _keys
 10007  0006F0  20F4               	addwfc	prodh,w,c
 10008  0006F2  6EF7               	movwf	tblptrh,c
 10009  0006F4                     	if	1	;There are 3 active tblptr bytes
 10010  0006F4  6AF8               	clrf	tblptru,c
 10011  0006F6  0E00               	movlw	low (__mediumconst shr (0+16))
 10012  0006F8  22F8               	addwfc	tblptru,f,c
 10013  0006FA                     	endif
 10014  0006FA  0008               	tblrd		*
 10015  0006FC  50F5               	movf	tablat,w,c
 10016  0006FE  ECE6  F022         	call	i2_putch
 10017                           
 10018                           ;main.c: 741: }
 10019  000702  D080               	goto	i2l471
 10020  000704                     i2l464:
 10021                           
 10022                           ;main.c: 742: else if (temp == '6') {
 10023  000704  0E36               	movlw	54
 10024  000706  1845               	xorwf	interruptHandler@temp,w,c
 10025  000708  A4D8               	btfss	status,2,c
 10026  00070A  D020               	goto	i2l466
 10027                           
 10028                           ;main.c: 743: assembly_step = 6;
 10029  00070C  0E00               	movlw	0
 10030  00070E  0100               	movlb	0	; () banked
 10031  000710  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10032  000712  0E06               	movlw	6
 10033  000714  6FAF               	movwf	_assembly_step& (0+255),b
 10034                           
 10035                           ; BSR set to: 0
 10036                           ;main.c: 744: prev_state = state;
 10037  000716  C0B1  F188         	movff	_state,_prev_state
 10038  00071A  C0B2  F189         	movff	_state+1,_prev_state+1
 10039                           
 10040                           ;main.c: 745: state = 1;
 10041  00071E  0E00               	movlw	0
 10042  000720  6FB2               	movwf	(_state+1)& (0+255),b
 10043  000722  0E01               	movlw	1
 10044  000724  6FB1               	movwf	_state& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;main.c: 746: lcdInst(0xC0);;
 10048  000726  0EC0               	movlw	192
 10049  000728  ECF0  F022         	call	i2_lcdInst
 10050                           
 10051                           ;main.c: 747: putch(keys[keypress]);
 10052  00072C  5044               	movf	interruptHandler@keypress,w,c
 10053  00072E  0D01               	mullw	1
 10054  000730  0ECD               	movlw	low _keys
 10055  000732  24F3               	addwf	prodl,w,c
 10056  000734  6EF6               	movwf	tblptrl,c
 10057  000736  0EFC               	movlw	high _keys
 10058  000738  20F4               	addwfc	prodh,w,c
 10059  00073A  6EF7               	movwf	tblptrh,c
 10060  00073C                     	if	1	;There are 3 active tblptr bytes
 10061  00073C  6AF8               	clrf	tblptru,c
 10062  00073E  0E00               	movlw	low (__mediumconst shr (0+16))
 10063  000740  22F8               	addwfc	tblptru,f,c
 10064  000742                     	endif
 10065  000742  0008               	tblrd		*
 10066  000744  50F5               	movf	tablat,w,c
 10067  000746  ECE6  F022         	call	i2_putch
 10068                           
 10069                           ;main.c: 748: }
 10070  00074A  D05C               	goto	i2l471
 10071  00074C                     i2l466:
 10072                           
 10073                           ;main.c: 749: else if (temp == '7'){
 10074  00074C  0E37               	movlw	55
 10075  00074E  1845               	xorwf	interruptHandler@temp,w,c
 10076  000750  A4D8               	btfss	status,2,c
 10077  000752  D020               	goto	i2l468
 10078                           
 10079                           ;main.c: 750: assembly_step = 7;
 10080  000754  0E00               	movlw	0
 10081  000756  0100               	movlb	0	; () banked
 10082  000758  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10083  00075A  0E07               	movlw	7
 10084  00075C  6FAF               	movwf	_assembly_step& (0+255),b
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;main.c: 751: prev_state = state;
 10088  00075E  C0B1  F188         	movff	_state,_prev_state
 10089  000762  C0B2  F189         	movff	_state+1,_prev_state+1
 10090                           
 10091                           ;main.c: 752: state = 1;
 10092  000766  0E00               	movlw	0
 10093  000768  6FB2               	movwf	(_state+1)& (0+255),b
 10094  00076A  0E01               	movlw	1
 10095  00076C  6FB1               	movwf	_state& (0+255),b
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;main.c: 753: lcdInst(0xC0);;
 10099  00076E  0EC0               	movlw	192
 10100  000770  ECF0  F022         	call	i2_lcdInst
 10101                           
 10102                           ;main.c: 754: putch(keys[keypress]);
 10103  000774  5044               	movf	interruptHandler@keypress,w,c
 10104  000776  0D01               	mullw	1
 10105  000778  0ECD               	movlw	low _keys
 10106  00077A  24F3               	addwf	prodl,w,c
 10107  00077C  6EF6               	movwf	tblptrl,c
 10108  00077E  0EFC               	movlw	high _keys
 10109  000780  20F4               	addwfc	prodh,w,c
 10110  000782  6EF7               	movwf	tblptrh,c
 10111  000784                     	if	1	;There are 3 active tblptr bytes
 10112  000784  6AF8               	clrf	tblptru,c
 10113  000786  0E00               	movlw	low (__mediumconst shr (0+16))
 10114  000788  22F8               	addwfc	tblptru,f,c
 10115  00078A                     	endif
 10116  00078A  0008               	tblrd		*
 10117  00078C  50F5               	movf	tablat,w,c
 10118  00078E  ECE6  F022         	call	i2_putch
 10119                           
 10120                           ;main.c: 756: }
 10121  000792  D038               	goto	i2l471
 10122  000794                     i2l468:
 10123                           
 10124                           ;main.c: 757: else if (temp == '8'){
 10125  000794  0E38               	movlw	56
 10126  000796  1845               	xorwf	interruptHandler@temp,w,c
 10127  000798  A4D8               	btfss	status,2,c
 10128  00079A  D020               	goto	i2l470
 10129                           
 10130                           ;main.c: 758: assembly_step = 8;
 10131  00079C  0E00               	movlw	0
 10132  00079E  0100               	movlb	0	; () banked
 10133  0007A0  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10134  0007A2  0E08               	movlw	8
 10135  0007A4  6FAF               	movwf	_assembly_step& (0+255),b
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;main.c: 759: prev_state = state;
 10139  0007A6  C0B1  F188         	movff	_state,_prev_state
 10140  0007AA  C0B2  F189         	movff	_state+1,_prev_state+1
 10141                           
 10142                           ;main.c: 760: state = 1;
 10143  0007AE  0E00               	movlw	0
 10144  0007B0  6FB2               	movwf	(_state+1)& (0+255),b
 10145  0007B2  0E01               	movlw	1
 10146  0007B4  6FB1               	movwf	_state& (0+255),b
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;main.c: 761: lcdInst(0xC0);;
 10150  0007B6  0EC0               	movlw	192
 10151  0007B8  ECF0  F022         	call	i2_lcdInst
 10152                           
 10153                           ;main.c: 762: putch(keys[keypress]);
 10154  0007BC  5044               	movf	interruptHandler@keypress,w,c
 10155  0007BE  0D01               	mullw	1
 10156  0007C0  0ECD               	movlw	low _keys
 10157  0007C2  24F3               	addwf	prodl,w,c
 10158  0007C4  6EF6               	movwf	tblptrl,c
 10159  0007C6  0EFC               	movlw	high _keys
 10160  0007C8  20F4               	addwfc	prodh,w,c
 10161  0007CA  6EF7               	movwf	tblptrh,c
 10162  0007CC                     	if	1	;There are 3 active tblptr bytes
 10163  0007CC  6AF8               	clrf	tblptru,c
 10164  0007CE  0E00               	movlw	low (__mediumconst shr (0+16))
 10165  0007D0  22F8               	addwfc	tblptru,f,c
 10166  0007D2                     	endif
 10167  0007D2  0008               	tblrd		*
 10168  0007D4  50F5               	movf	tablat,w,c
 10169  0007D6  ECE6  F022         	call	i2_putch
 10170                           
 10171                           ;main.c: 764: }
 10172  0007DA  D014               	goto	i2l471
 10173  0007DC                     i2l470:
 10174                           
 10175                           ;main.c: 765: else{
 10176                           ;main.c: 771: initLCD();
 10177  0007DC  EC4F  F021         	call	i2_initLCD	;wreg free
 10178                           
 10179                           ;main.c: 772: printf("Wrong number! ");
 10180  0007E0  0E93               	movlw	low STR_45
 10181  0007E2  6E0D               	movwf	i2printf@f,c
 10182  0007E4  0EFE               	movlw	high STR_45
 10183  0007E6  6E0E               	movwf	i2printf@f+1,c
 10184  0007E8  ECE7  F016         	call	i2_printf	;wreg free
 10185                           
 10186                           ;main.c: 773: _delay((unsigned long)((1000)*(32000000/4000.0)));
 10187  0007EC  0E29               	movlw	41
 10188  0007EE  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10189  0007F0  0E96               	movlw	150
 10190  0007F2  6E2B               	movwf	??_interruptHandler& (0+255),c
 10191  0007F4  0E7F               	movlw	127
 10192  0007F6                     i2u677_47:
 10193  0007F6  2EE8               	decfsz	wreg,f,c
 10194  0007F8  D7FE               	bra	i2u677_47
 10195  0007FA  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10196  0007FC  D7FC               	bra	i2u677_47
 10197  0007FE  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10198  000800  D7FA               	bra	i2u677_47
 10199  000802  F000               	nop	
 10200  000804                     i2l471:
 10201                           
 10202                           ;main.c: 775: }
 10203                           ;main.c: 781: generate_compartment_array(assembly_step);
 10204  000804  C0AF  F001         	movff	_assembly_step,i2generate_compartment_array@step
 10205  000808  C0B0  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 10206  00080C  ECF4  F018         	call	i2_generate_compartment_array	;wreg free
 10207  000810  D2F8               	goto	i2l6773
 10208  000812                     i2l461:
 10209                           
 10210                           ;main.c: 788: }
 10211                           ;main.c: 796: if(state == 1){
 10212  000812  0100               	movlb	0	; () banked
 10213  000814  05B1               	decf	_state& (0+255),w,b
 10214  000816  11B2               	iorwf	(_state+1)& (0+255),w,b
 10215  000818  A4D8               	btfss	status,2,c
 10216  00081A  D199               	goto	i2l472
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;main.c: 801: if (temp == 'A'){
 10220  00081C  0E41               	movlw	65
 10221  00081E  1845               	xorwf	interruptHandler@temp,w,c
 10222  000820  A4D8               	btfss	status,2,c
 10223  000822  D01C               	goto	i2l473
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;main.c: 802: lcdInst(0xC0);;
 10227  000824  0EC0               	movlw	192
 10228  000826  ECF0  F022         	call	i2_lcdInst
 10229                           
 10230                           ;main.c: 803: putch('B');
 10231  00082A  0E42               	movlw	66
 10232  00082C  ECE6  F022         	call	i2_putch
 10233                           
 10234                           ;main.c: 804: strcpy(temp_set,"B");
 10235  000830  0EE4               	movlw	low _temp_set
 10236  000832  6E07               	movwf	strcpy@to,c
 10237  000834  0E01               	movlw	high _temp_set
 10238  000836  6E08               	movwf	strcpy@to+1,c
 10239  000838  0EFC               	movlw	low STR_46
 10240  00083A  6E09               	movwf	strcpy@from,c
 10241  00083C  0EFF               	movlw	high STR_46
 10242  00083E  6E0A               	movwf	strcpy@from+1,c
 10243  000840  EC9A  F021         	call	_strcpy	;wreg free
 10244                           
 10245                           ;main.c: 805: strcat(current_set,temp_set);
 10246  000844  0EC1               	movlw	low _current_set
 10247  000846  6E01               	movwf	strcat@to,c
 10248  000848  0E00               	movlw	high _current_set
 10249  00084A  6E02               	movwf	strcat@to+1,c
 10250  00084C  0EE4               	movlw	low _temp_set
 10251  00084E  6E03               	movwf	strcat@from,c
 10252  000850  0E01               	movlw	high _temp_set
 10253  000852  6E04               	movwf	strcat@from+1,c
 10254  000854  EC00  F022         	call	_strcat	;wreg free
 10255                           
 10256                           ;main.c: 806: counter++;
 10257  000858  4A60               	infsnz	_counter,f,c
 10258  00085A  2A61               	incf	_counter+1,f,c
 10259  00085C                     i2l473:
 10260                           
 10261                           ;main.c: 807: }
 10262                           ;main.c: 809: if(temp == 'B'){
 10263  00085C  0E42               	movlw	66
 10264  00085E  1845               	xorwf	interruptHandler@temp,w,c
 10265  000860  A4D8               	btfss	status,2,c
 10266  000862  D01C               	goto	i2l474
 10267                           
 10268                           ;main.c: 810: lcdInst(0xC0);;
 10269  000864  0EC0               	movlw	192
 10270  000866  ECF0  F022         	call	i2_lcdInst
 10271                           
 10272                           ;main.c: 811: putch('N');
 10273  00086A  0E4E               	movlw	78
 10274  00086C  ECE6  F022         	call	i2_putch
 10275                           
 10276                           ;main.c: 812: strcpy(temp_set,"N");
 10277  000870  0EE4               	movlw	low _temp_set
 10278  000872  6E07               	movwf	strcpy@to,c
 10279  000874  0E01               	movlw	high _temp_set
 10280  000876  6E08               	movwf	strcpy@to+1,c
 10281  000878  0EE9               	movlw	low (STR_85+2)
 10282  00087A  6E09               	movwf	strcpy@from,c
 10283  00087C  0EFF               	movlw	high (STR_85+2)
 10284  00087E  6E0A               	movwf	strcpy@from+1,c
 10285  000880  EC9A  F021         	call	_strcpy	;wreg free
 10286                           
 10287                           ;main.c: 813: strcat(current_set,temp_set);
 10288  000884  0EC1               	movlw	low _current_set
 10289  000886  6E01               	movwf	strcat@to,c
 10290  000888  0E00               	movlw	high _current_set
 10291  00088A  6E02               	movwf	strcat@to+1,c
 10292  00088C  0EE4               	movlw	low _temp_set
 10293  00088E  6E03               	movwf	strcat@from,c
 10294  000890  0E01               	movlw	high _temp_set
 10295  000892  6E04               	movwf	strcat@from+1,c
 10296  000894  EC00  F022         	call	_strcat	;wreg free
 10297                           
 10298                           ;main.c: 814: counter++;
 10299  000898  4A60               	infsnz	_counter,f,c
 10300  00089A  2A61               	incf	_counter+1,f,c
 10301  00089C                     i2l474:
 10302                           
 10303                           ;main.c: 815: }
 10304                           ;main.c: 817: if(temp == 'C'){
 10305  00089C  0E43               	movlw	67
 10306  00089E  1845               	xorwf	interruptHandler@temp,w,c
 10307  0008A0  A4D8               	btfss	status,2,c
 10308  0008A2  D01C               	goto	i2l475
 10309                           
 10310                           ;main.c: 818: lcdInst(0xC0);;
 10311  0008A4  0EC0               	movlw	192
 10312  0008A6  ECF0  F022         	call	i2_lcdInst
 10313                           
 10314                           ;main.c: 819: putch('S');
 10315  0008AA  0E53               	movlw	83
 10316  0008AC  ECE6  F022         	call	i2_putch
 10317                           
 10318                           ;main.c: 821: strcpy(temp_set,"S");
 10319  0008B0  0EE4               	movlw	low _temp_set
 10320  0008B2  6E07               	movwf	strcpy@to,c
 10321  0008B4  0E01               	movlw	high _temp_set
 10322  0008B6  6E08               	movwf	strcpy@to+1,c
 10323  0008B8  0EED               	movlw	low (STR_86+2)
 10324  0008BA  6E09               	movwf	strcpy@from,c
 10325  0008BC  0EFF               	movlw	high (STR_86+2)
 10326  0008BE  6E0A               	movwf	strcpy@from+1,c
 10327  0008C0  EC9A  F021         	call	_strcpy	;wreg free
 10328                           
 10329                           ;main.c: 822: strcat(current_set,temp_set);
 10330  0008C4  0EC1               	movlw	low _current_set
 10331  0008C6  6E01               	movwf	strcat@to,c
 10332  0008C8  0E00               	movlw	high _current_set
 10333  0008CA  6E02               	movwf	strcat@to+1,c
 10334  0008CC  0EE4               	movlw	low _temp_set
 10335  0008CE  6E03               	movwf	strcat@from,c
 10336  0008D0  0E01               	movlw	high _temp_set
 10337  0008D2  6E04               	movwf	strcat@from+1,c
 10338  0008D4  EC00  F022         	call	_strcat	;wreg free
 10339                           
 10340                           ;main.c: 823: counter++;
 10341  0008D8  4A60               	infsnz	_counter,f,c
 10342  0008DA  2A61               	incf	_counter+1,f,c
 10343  0008DC                     i2l475:
 10344                           
 10345                           ;main.c: 824: }
 10346                           ;main.c: 825: if (temp == 'D'){
 10347  0008DC  0E44               	movlw	68
 10348  0008DE  1845               	xorwf	interruptHandler@temp,w,c
 10349  0008E0  A4D8               	btfss	status,2,c
 10350  0008E2  D01C               	goto	i2l476
 10351                           
 10352                           ;main.c: 826: lcdInst(0xC0);;
 10353  0008E4  0EC0               	movlw	192
 10354  0008E6  ECF0  F022         	call	i2_lcdInst
 10355                           
 10356                           ;main.c: 827: putch('W');
 10357  0008EA  0E57               	movlw	87
 10358  0008EC  ECE6  F022         	call	i2_putch
 10359                           
 10360                           ;main.c: 829: strcpy(temp_set,"W");
 10361  0008F0  0EE4               	movlw	low _temp_set
 10362  0008F2  6E07               	movwf	strcpy@to,c
 10363  0008F4  0E01               	movlw	high _temp_set
 10364  0008F6  6E08               	movwf	strcpy@to+1,c
 10365  0008F8  0EF1               	movlw	low (STR_87+2)
 10366  0008FA  6E09               	movwf	strcpy@from,c
 10367  0008FC  0EFF               	movlw	high (STR_87+2)
 10368  0008FE  6E0A               	movwf	strcpy@from+1,c
 10369  000900  EC9A  F021         	call	_strcpy	;wreg free
 10370                           
 10371                           ;main.c: 830: strcat(current_set,temp_set);
 10372  000904  0EC1               	movlw	low _current_set
 10373  000906  6E01               	movwf	strcat@to,c
 10374  000908  0E00               	movlw	high _current_set
 10375  00090A  6E02               	movwf	strcat@to+1,c
 10376  00090C  0EE4               	movlw	low _temp_set
 10377  00090E  6E03               	movwf	strcat@from,c
 10378  000910  0E01               	movlw	high _temp_set
 10379  000912  6E04               	movwf	strcat@from+1,c
 10380  000914  EC00  F022         	call	_strcat	;wreg free
 10381                           
 10382                           ;main.c: 832: counter++;
 10383  000918  4A60               	infsnz	_counter,f,c
 10384  00091A  2A61               	incf	_counter+1,f,c
 10385  00091C                     i2l476:
 10386                           
 10387                           ;main.c: 833: }
 10388                           ;main.c: 835: if (keys[keypress] == '*'){
 10389  00091C  5044               	movf	interruptHandler@keypress,w,c
 10390  00091E  0D01               	mullw	1
 10391  000920  0ECD               	movlw	low _keys
 10392  000922  24F3               	addwf	prodl,w,c
 10393  000924  6EF6               	movwf	tblptrl,c
 10394  000926  0EFC               	movlw	high _keys
 10395  000928  20F4               	addwfc	prodh,w,c
 10396  00092A  6EF7               	movwf	tblptrh,c
 10397  00092C                     	if	1	;There are 3 active tblptr bytes
 10398  00092C  6AF8               	clrf	tblptru,c
 10399  00092E  0E00               	movlw	low (__mediumconst shr (0+16))
 10400  000930  22F8               	addwfc	tblptru,f,c
 10401  000932                     	endif
 10402  000932  0008               	tblrd		*
 10403  000934  50F5               	movf	tablat,w,c
 10404  000936  0A2A               	xorlw	42
 10405  000938  A4D8               	btfss	status,2,c
 10406  00093A  D0DE               	goto	i2l477
 10407                           
 10408                           ;main.c: 838: _delay((unsigned long)((80)*(32000000/4000.0)));
 10409  00093C  0E04               	movlw	4
 10410  00093E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10411  000940  0E40               	movlw	64
 10412  000942  6E2B               	movwf	??_interruptHandler& (0+255),c
 10413  000944  0E26               	movlw	38
 10414  000946                     i2u678_47:
 10415  000946  2EE8               	decfsz	wreg,f,c
 10416  000948  D7FE               	bra	i2u678_47
 10417  00094A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10418  00094C  D7FC               	bra	i2u678_47
 10419  00094E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10420  000950  D7FA               	bra	i2u678_47
 10421  000952  D000               	nop2	
 10422                           
 10423                           ;main.c: 839: counter ++;
 10424  000954  4A60               	infsnz	_counter,f,c
 10425  000956  2A61               	incf	_counter+1,f,c
 10426                           
 10427                           ;main.c: 840: for (int i=0;i<20;i++){
 10428  000958  0E00               	movlw	0
 10429  00095A  6E43               	movwf	interruptHandler@i+1,c
 10430  00095C  0E00               	movlw	0
 10431  00095E  6E42               	movwf	interruptHandler@i,c
 10432  000960  BE43               	btfsc	interruptHandler@i+1,7,c
 10433  000962  D008               	goto	i2l478
 10434  000964  5043               	movf	interruptHandler@i+1,w,c
 10435  000966  E105               	bnz	i2u549_40
 10436  000968  0E14               	movlw	20
 10437  00096A  5C42               	subwf	interruptHandler@i,w,c
 10438  00096C  B0D8               	btfsc	status,0,c
 10439  00096E  D08A               	goto	i2u551_40
 10440  000970  D001               	goto	i2l478
 10441  000972                     i2u549_40:
 10442  000972  D088               	goto	i2u551_40
 10443  000974                     i2l478:
 10444                           
 10445                           ;main.c: 841: if (strncmp(current_set,strs[i],4) == 0){
 10446  000974  0EC1               	movlw	low _current_set
 10447  000976  6E07               	movwf	strncmp@s1,c
 10448  000978  0E00               	movlw	high _current_set
 10449  00097A  6E08               	movwf	strncmp@s1+1,c
 10450  00097C  C042  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 10451  000980  C043  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 10452  000984  0E00               	movlw	0
 10453  000986  6E04               	movwf	i2___wmul@multiplicand+1,c
 10454  000988  0E05               	movlw	5
 10455  00098A  6E03               	movwf	i2___wmul@multiplicand,c
 10456  00098C  EC75  F022         	call	i2___wmul	;wreg free
 10457  000990  0E00               	movlw	low _strs
 10458  000992  2401               	addwf	?i2___wmul,w,c
 10459  000994  6E09               	movwf	strncmp@s2,c
 10460  000996  0EFD               	movlw	high _strs
 10461  000998  2002               	addwfc	?i2___wmul+1,w,c
 10462  00099A  6E0A               	movwf	strncmp@s2+1,c
 10463  00099C  0E00               	movlw	0
 10464  00099E  6E0C               	movwf	strncmp@len+1,c
 10465  0009A0  0E04               	movlw	4
 10466  0009A2  6E0B               	movwf	strncmp@len,c
 10467  0009A4  ECC5  F01E         	call	_strncmp	;wreg free
 10468  0009A8  5007               	movf	?_strncmp,w,c
 10469  0009AA  1008               	iorwf	?_strncmp+1,w,c
 10470  0009AC  A4D8               	btfss	status,2,c
 10471  0009AE  D063               	goto	i2l480
 10472                           
 10473                           ;main.c: 842: strcpy(final_set[counter_step],current_set);
 10474  0009B0  C05E  F001         	movff	_counter_step,i2___wmul@multiplier
 10475  0009B4  C05F  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 10476  0009B8  0E00               	movlw	0
 10477  0009BA  6E04               	movwf	i2___wmul@multiplicand+1,c
 10478  0009BC  0E05               	movlw	5
 10479  0009BE  6E03               	movwf	i2___wmul@multiplicand,c
 10480  0009C0  EC75  F022         	call	i2___wmul	;wreg free
 10481  0009C4  0EBC               	movlw	low _final_set
 10482  0009C6  2401               	addwf	?i2___wmul,w,c
 10483  0009C8  6E07               	movwf	strcpy@to,c
 10484  0009CA  0E01               	movlw	high _final_set
 10485  0009CC  2002               	addwfc	?i2___wmul+1,w,c
 10486  0009CE  6E08               	movwf	strcpy@to+1,c
 10487  0009D0  0EC1               	movlw	low _current_set
 10488  0009D2  6E09               	movwf	strcpy@from,c
 10489  0009D4  0E00               	movlw	high _current_set
 10490  0009D6  6E0A               	movwf	strcpy@from+1,c
 10491  0009D8  EC9A  F021         	call	_strcpy	;wreg free
 10492                           
 10493                           ;main.c: 843: strcpy(current_set2,current_set);
 10494  0009DC  0E70               	movlw	low _current_set2
 10495  0009DE  6E07               	movwf	strcpy@to,c
 10496  0009E0  0E00               	movlw	high _current_set2
 10497  0009E2  6E08               	movwf	strcpy@to+1,c
 10498  0009E4  0EC1               	movlw	low _current_set
 10499  0009E6  6E09               	movwf	strcpy@from,c
 10500  0009E8  0E00               	movlw	high _current_set
 10501  0009EA  6E0A               	movwf	strcpy@from+1,c
 10502  0009EC  EC9A  F021         	call	_strcpy	;wreg free
 10503                           
 10504                           ;main.c: 846: valid = 1;
 10505  0009F0  0E00               	movlw	0
 10506  0009F2  0101               	movlb	1	; () banked
 10507  0009F4  6F8D               	movwf	(_valid+1)& (0+255),b
 10508  0009F6  0E01               	movlw	1
 10509  0009F8  6F8C               	movwf	_valid& (0+255),b
 10510                           
 10511                           ; BSR set to: 1
 10512                           ;main.c: 847: state = 2;
 10513  0009FA  0E00               	movlw	0
 10514  0009FC  0100               	movlb	0	; () banked
 10515  0009FE  6FB2               	movwf	(_state+1)& (0+255),b
 10516  000A00  0E02               	movlw	2
 10517  000A02  6FB1               	movwf	_state& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;main.c: 849: initLCD();
 10521  000A04  EC4F  F021         	call	i2_initLCD	;wreg free
 10522                           
 10523                           ;main.c: 850: printf("correct!");
 10524  000A08  0E85               	movlw	low STR_50
 10525  000A0A  6E0D               	movwf	i2printf@f,c
 10526  000A0C  0EFF               	movlw	high STR_50
 10527  000A0E  6E0E               	movwf	i2printf@f+1,c
 10528  000A10  ECE7  F016         	call	i2_printf	;wreg free
 10529                           
 10530                           ;main.c: 851: _delay((unsigned long)((80)*(32000000/4000.0)));
 10531  000A14  0E04               	movlw	4
 10532  000A16  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10533  000A18  0E40               	movlw	64
 10534  000A1A  6E2B               	movwf	??_interruptHandler& (0+255),c
 10535  000A1C  0E26               	movlw	38
 10536  000A1E                     i2u679_47:
 10537  000A1E  2EE8               	decfsz	wreg,f,c
 10538  000A20  D7FE               	bra	i2u679_47
 10539  000A22  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10540  000A24  D7FC               	bra	i2u679_47
 10541  000A26  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10542  000A28  D7FA               	bra	i2u679_47
 10543  000A2A  D000               	nop2	
 10544                           
 10545                           ;main.c: 853: printf("%s",current_set);
 10546  000A2C  0EF7               	movlw	low STR_5
 10547  000A2E  6E0D               	movwf	i2printf@f,c
 10548  000A30  0EFF               	movlw	high STR_5
 10549  000A32  6E0E               	movwf	i2printf@f+1,c
 10550  000A34  0EC1               	movlw	low _current_set
 10551  000A36  6E0F               	movwf	?i2_printf+2,c
 10552  000A38  0E00               	movlw	high _current_set
 10553  000A3A  6E10               	movwf	?i2_printf+3,c
 10554  000A3C  ECE7  F016         	call	i2_printf	;wreg free
 10555                           
 10556                           ;main.c: 855: strcpy(current_set,"");
 10557  000A40  0EC1               	movlw	low _current_set
 10558  000A42  6E07               	movwf	strcpy@to,c
 10559  000A44  0E00               	movlw	high _current_set
 10560  000A46  6E08               	movwf	strcpy@to+1,c
 10561  000A48  0EA1               	movlw	low (STR_45+14)
 10562  000A4A  6E09               	movwf	strcpy@from,c
 10563  000A4C  0EFE               	movlw	high (STR_45+14)
 10564  000A4E  6E0A               	movwf	strcpy@from+1,c
 10565  000A50  EC9A  F021         	call	_strcpy	;wreg free
 10566                           
 10567                           ;main.c: 856: _delay((unsigned long)((100)*(32000000/4000.0)));
 10568  000A54  0E05               	movlw	5
 10569  000A56  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10570  000A58  0E0F               	movlw	15
 10571  000A5A  6E2B               	movwf	??_interruptHandler& (0+255),c
 10572  000A5C  0EF1               	movlw	241
 10573  000A5E                     i2u680_47:
 10574  000A5E  2EE8               	decfsz	wreg,f,c
 10575  000A60  D7FE               	bra	i2u680_47
 10576  000A62  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10577  000A64  D7FC               	bra	i2u680_47
 10578  000A66  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10579  000A68  D7FA               	bra	i2u680_47
 10580  000A6A  F000               	nop	
 10581                           
 10582                           ;main.c: 857: counter = 0;
 10583  000A6C  0E00               	movlw	0
 10584  000A6E  6E61               	movwf	_counter+1,c
 10585  000A70  0E00               	movlw	0
 10586  000A72  6E60               	movwf	_counter,c
 10587                           
 10588                           ;main.c: 858: break;
 10589  000A74  D007               	goto	i2u551_40
 10590  000A76                     i2l480:
 10591  000A76  4A42               	infsnz	interruptHandler@i,f,c
 10592  000A78  2A43               	incf	interruptHandler@i+1,f,c
 10593  000A7A  BE43               	btfsc	interruptHandler@i+1,7,c
 10594  000A7C  D77B               	goto	i2l478
 10595  000A7E  5043               	movf	interruptHandler@i+1,w,c
 10596  000A80  E101               	bnz	i2l6663
 10597  000A82  D772               	goto	L3
 10598  000A84                     i2u551_40:
 10599  000A84                     i2l6663:
 10600                           
 10601                           ;main.c: 860: }
 10602                           ;main.c: 861: }
 10603                           ;main.c: 862: if (valid != 1){
 10604  000A84  0101               	movlb	1	; () banked
 10605  000A86  058C               	decf	_valid& (0+255),w,b
 10606  000A88  118D               	iorwf	(_valid+1)& (0+255),w,b
 10607  000A8A  B4D8               	btfsc	status,2,c
 10608  000A8C  D031               	goto	i2l481
 10609                           
 10610                           ; BSR set to: 1
 10611                           ;main.c: 864: initLCD();
 10612  000A8E  EC4F  F021         	call	i2_initLCD	;wreg free
 10613                           
 10614                           ;main.c: 865: printf("wrong set!");
 10615  000A92  0E70               	movlw	low STR_53
 10616  000A94  6E0D               	movwf	i2printf@f,c
 10617  000A96  0EFF               	movlw	high STR_53
 10618  000A98  6E0E               	movwf	i2printf@f+1,c
 10619  000A9A  ECE7  F016         	call	i2_printf	;wreg free
 10620                           
 10621                           ;main.c: 866: printf("%s",current_set);
 10622  000A9E  0EF7               	movlw	low STR_5
 10623  000AA0  6E0D               	movwf	i2printf@f,c
 10624  000AA2  0EFF               	movlw	high STR_5
 10625  000AA4  6E0E               	movwf	i2printf@f+1,c
 10626  000AA6  0EC1               	movlw	low _current_set
 10627  000AA8  6E0F               	movwf	?i2_printf+2,c
 10628  000AAA  0E00               	movlw	high _current_set
 10629  000AAC  6E10               	movwf	?i2_printf+3,c
 10630  000AAE  ECE7  F016         	call	i2_printf	;wreg free
 10631                           
 10632                           ;main.c: 867: strcpy(current_set,"");
 10633  000AB2  0EC1               	movlw	low _current_set
 10634  000AB4  6E07               	movwf	strcpy@to,c
 10635  000AB6  0E00               	movlw	high _current_set
 10636  000AB8  6E08               	movwf	strcpy@to+1,c
 10637  000ABA  0EA1               	movlw	low (STR_45+14)
 10638  000ABC  6E09               	movwf	strcpy@from,c
 10639  000ABE  0EFE               	movlw	high (STR_45+14)
 10640  000AC0  6E0A               	movwf	strcpy@from+1,c
 10641  000AC2  EC9A  F021         	call	_strcpy	;wreg free
 10642                           
 10643                           ;main.c: 868: _delay((unsigned long)((100)*(32000000/4000.0)));
 10644  000AC6  0E05               	movlw	5
 10645  000AC8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10646  000ACA  0E0F               	movlw	15
 10647  000ACC  6E2B               	movwf	??_interruptHandler& (0+255),c
 10648  000ACE  0EF1               	movlw	241
 10649  000AD0                     i2u681_47:
 10650  000AD0  2EE8               	decfsz	wreg,f,c
 10651  000AD2  D7FE               	bra	i2u681_47
 10652  000AD4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10653  000AD6  D7FC               	bra	i2u681_47
 10654  000AD8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10655  000ADA  D7FA               	bra	i2u681_47
 10656  000ADC  F000               	nop	
 10657                           
 10658                           ;main.c: 869: counter = 0;
 10659  000ADE  0E00               	movlw	0
 10660  000AE0  6E61               	movwf	_counter+1,c
 10661  000AE2  0E00               	movlw	0
 10662  000AE4  6E60               	movwf	_counter,c
 10663                           
 10664                           ;main.c: 870: valid = 0;
 10665  000AE6  0E00               	movlw	0
 10666  000AE8  0101               	movlb	1	; () banked
 10667  000AEA  6F8D               	movwf	(_valid+1)& (0+255),b
 10668  000AEC  0E00               	movlw	0
 10669  000AEE  6F8C               	movwf	_valid& (0+255),b
 10670  000AF0                     i2l481:
 10671                           
 10672                           ; BSR set to: 1
 10673                           ;main.c: 871: }
 10674                           ;main.c: 872: valid = 0;
 10675                           
 10676                           ; BSR set to: 1
 10677  000AF0  0E00               	movlw	0
 10678  000AF2  6F8D               	movwf	(_valid+1)& (0+255),b
 10679  000AF4  0E00               	movlw	0
 10680  000AF6  6F8C               	movwf	_valid& (0+255),b
 10681  000AF8                     i2l477:
 10682                           
 10683                           ;main.c: 874: }
 10684                           ;main.c: 877: if (counter >= 5){
 10685                           
 10686                           ; BSR set to: 1
 10687  000AF8  BE61               	btfsc	_counter+1,7,c
 10688  000AFA  D183               	goto	i2l6773
 10689  000AFC  5061               	movf	_counter+1,w,c
 10690  000AFE  E104               	bnz	i2u553_40
 10691  000B00  0E05               	movlw	5
 10692  000B02  5C60               	subwf	_counter,w,c
 10693  000B04  A0D8               	btfss	status,0,c
 10694  000B06  D17D               	goto	i2l6773
 10695  000B08                     i2u553_40:
 10696                           
 10697                           ;main.c: 879: initLCD();
 10698  000B08  EC4F  F021         	call	i2_initLCD	;wreg free
 10699                           
 10700                           ;main.c: 880: printf("wrong!");
 10701  000B0C  0EB8               	movlw	low STR_56
 10702  000B0E  6E0D               	movwf	i2printf@f,c
 10703  000B10  0EFF               	movlw	high STR_56
 10704  000B12  6E0E               	movwf	i2printf@f+1,c
 10705  000B14  ECE7  F016         	call	i2_printf	;wreg free
 10706                           
 10707                           ;main.c: 882: _delay((unsigned long)((100)*(32000000/4000.0)));
 10708  000B18  0E05               	movlw	5
 10709  000B1A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10710  000B1C  0E0F               	movlw	15
 10711  000B1E  6E2B               	movwf	??_interruptHandler& (0+255),c
 10712  000B20  0EF1               	movlw	241
 10713  000B22                     i2u682_47:
 10714  000B22  2EE8               	decfsz	wreg,f,c
 10715  000B24  D7FE               	bra	i2u682_47
 10716  000B26  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10717  000B28  D7FC               	bra	i2u682_47
 10718  000B2A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10719  000B2C  D7FA               	bra	i2u682_47
 10720  000B2E  F000               	nop	
 10721                           
 10722                           ;main.c: 884: strcpy(current_set,"");
 10723  000B30  0EC1               	movlw	low _current_set
 10724  000B32  6E07               	movwf	strcpy@to,c
 10725  000B34  0E00               	movlw	high _current_set
 10726  000B36  6E08               	movwf	strcpy@to+1,c
 10727  000B38  0EA1               	movlw	low (STR_45+14)
 10728  000B3A  6E09               	movwf	strcpy@from,c
 10729  000B3C  0EFE               	movlw	high (STR_45+14)
 10730  000B3E  6E0A               	movwf	strcpy@from+1,c
 10731  000B40  EC9A  F021         	call	_strcpy	;wreg free
 10732                           
 10733                           ;main.c: 887: counter = 0;
 10734  000B44  0E00               	movlw	0
 10735  000B46  6E61               	movwf	_counter+1,c
 10736  000B48  0E00               	movlw	0
 10737  000B4A  6E60               	movwf	_counter,c
 10738  000B4C  D15A               	goto	i2l6773
 10739  000B4E                     i2l472:
 10740                           
 10741                           ;main.c: 892: }
 10742                           ;main.c: 897: if (state ==2){
 10743  000B4E  0E02               	movlw	2
 10744  000B50  0100               	movlb	0	; () banked
 10745  000B52  19B1               	xorwf	_state& (0+255),w,b
 10746  000B54  11B2               	iorwf	(_state+1)& (0+255),w,b
 10747  000B56  A4D8               	btfss	status,2,c
 10748  000B58  D125               	goto	i2l499
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;main.c: 898: counter = 0;
 10752  000B5A  0E00               	movlw	0
 10753  000B5C  6E61               	movwf	_counter+1,c
 10754  000B5E  0E00               	movlw	0
 10755  000B60  6E60               	movwf	_counter,c
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;main.c: 900: lcdInst(0xC0);;
 10759  000B62  0EC0               	movlw	192
 10760  000B64  ECF0  F022         	call	i2_lcdInst
 10761                           
 10762                           ;main.c: 901: putch(keys[keypress]);
 10763  000B68  5044               	movf	interruptHandler@keypress,w,c
 10764  000B6A  0D01               	mullw	1
 10765  000B6C  0ECD               	movlw	low _keys
 10766  000B6E  24F3               	addwf	prodl,w,c
 10767  000B70  6EF6               	movwf	tblptrl,c
 10768  000B72  0EFC               	movlw	high _keys
 10769  000B74  20F4               	addwfc	prodh,w,c
 10770  000B76  6EF7               	movwf	tblptrh,c
 10771  000B78                     	if	1	;There are 3 active tblptr bytes
 10772  000B78  6AF8               	clrf	tblptru,c
 10773  000B7A  0E00               	movlw	low (__mediumconst shr (0+16))
 10774  000B7C  22F8               	addwfc	tblptru,f,c
 10775  000B7E                     	endif
 10776  000B7E  0008               	tblrd		*
 10777  000B80  50F5               	movf	tablat,w,c
 10778  000B82  ECE6  F022         	call	i2_putch
 10779                           
 10780                           ;main.c: 902: printf("\n Processing...");
 10781  000B86  0E53               	movlw	low STR_58
 10782  000B88  6E0D               	movwf	i2printf@f,c
 10783  000B8A  0EFE               	movlw	high STR_58
 10784  000B8C  6E0E               	movwf	i2printf@f+1,c
 10785  000B8E  ECE7  F016         	call	i2_printf	;wreg free
 10786                           
 10787                           ;main.c: 903: _delay((unsigned long)((500)*(32000000/4000.0)));
 10788  000B92  0E15               	movlw	21
 10789  000B94  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10790  000B96  0E4B               	movlw	75
 10791  000B98  6E2B               	movwf	??_interruptHandler& (0+255),c
 10792  000B9A  0EBE               	movlw	190
 10793  000B9C                     i2u683_47:
 10794  000B9C  2EE8               	decfsz	wreg,f,c
 10795  000B9E  D7FE               	bra	i2u683_47
 10796  000BA0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10797  000BA2  D7FC               	bra	i2u683_47
 10798  000BA4  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10799  000BA6  D7FA               	bra	i2u683_47
 10800  000BA8  D000               	nop2	
 10801                           
 10802                           ;main.c: 905: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
 10803  000BAA  5044               	movf	interruptHandler@keypress,w,c
 10804  000BAC  0D01               	mullw	1
 10805  000BAE  0ECD               	movlw	low _keys
 10806  000BB0  24F3               	addwf	prodl,w,c
 10807  000BB2  6EF6               	movwf	tblptrl,c
 10808  000BB4  0EFC               	movlw	high _keys
 10809  000BB6  20F4               	addwfc	prodh,w,c
 10810  000BB8  6EF7               	movwf	tblptrh,c
 10811  000BBA                     	if	1	;There are 3 active tblptr bytes
 10812  000BBA  6AF8               	clrf	tblptru,c
 10813  000BBC  0E00               	movlw	low (__mediumconst shr (0+16))
 10814  000BBE  22F8               	addwfc	tblptru,f,c
 10815  000BC0                     	endif
 10816  000BC0  0008               	tblrd		*
 10817  000BC2  50F5               	movf	tablat,w,c
 10818  000BC4  0A31               	xorlw	49
 10819  000BC6  B4D8               	btfsc	status,2,c
 10820  000BC8  D05B               	goto	i2l487
 10821  000BCA  5044               	movf	interruptHandler@keypress,w,c
 10822  000BCC  0D01               	mullw	1
 10823  000BCE  0ECD               	movlw	low _keys
 10824  000BD0  24F3               	addwf	prodl,w,c
 10825  000BD2  6EF6               	movwf	tblptrl,c
 10826  000BD4  0EFC               	movlw	high _keys
 10827  000BD6  20F4               	addwfc	prodh,w,c
 10828  000BD8  6EF7               	movwf	tblptrh,c
 10829  000BDA                     	if	1	;There are 3 active tblptr bytes
 10830  000BDA  6AF8               	clrf	tblptru,c
 10831  000BDC  0E00               	movlw	low (__mediumconst shr (0+16))
 10832  000BDE  22F8               	addwfc	tblptru,f,c
 10833  000BE0                     	endif
 10834  000BE0  0008               	tblrd		*
 10835  000BE2  50F5               	movf	tablat,w,c
 10836  000BE4  0A32               	xorlw	50
 10837  000BE6  B4D8               	btfsc	status,2,c
 10838  000BE8  D04B               	goto	i2l487
 10839  000BEA  5044               	movf	interruptHandler@keypress,w,c
 10840  000BEC  0D01               	mullw	1
 10841  000BEE  0ECD               	movlw	low _keys
 10842  000BF0  24F3               	addwf	prodl,w,c
 10843  000BF2  6EF6               	movwf	tblptrl,c
 10844  000BF4  0EFC               	movlw	high _keys
 10845  000BF6  20F4               	addwfc	prodh,w,c
 10846  000BF8  6EF7               	movwf	tblptrh,c
 10847  000BFA                     	if	1	;There are 3 active tblptr bytes
 10848  000BFA  6AF8               	clrf	tblptru,c
 10849  000BFC  0E00               	movlw	low (__mediumconst shr (0+16))
 10850  000BFE  22F8               	addwfc	tblptru,f,c
 10851  000C00                     	endif
 10852  000C00  0008               	tblrd		*
 10853  000C02  50F5               	movf	tablat,w,c
 10854  000C04  0A33               	xorlw	51
 10855  000C06  B4D8               	btfsc	status,2,c
 10856  000C08  D03B               	goto	i2l487
 10857  000C0A  5044               	movf	interruptHandler@keypress,w,c
 10858  000C0C  0D01               	mullw	1
 10859  000C0E  0ECD               	movlw	low _keys
 10860  000C10  24F3               	addwf	prodl,w,c
 10861  000C12  6EF6               	movwf	tblptrl,c
 10862  000C14  0EFC               	movlw	high _keys
 10863  000C16  20F4               	addwfc	prodh,w,c
 10864  000C18  6EF7               	movwf	tblptrh,c
 10865  000C1A                     	if	1	;There are 3 active tblptr bytes
 10866  000C1A  6AF8               	clrf	tblptru,c
 10867  000C1C  0E00               	movlw	low (__mediumconst shr (0+16))
 10868  000C1E  22F8               	addwfc	tblptru,f,c
 10869  000C20                     	endif
 10870  000C20  0008               	tblrd		*
 10871  000C22  50F5               	movf	tablat,w,c
 10872  000C24  0A34               	xorlw	52
 10873  000C26  B4D8               	btfsc	status,2,c
 10874  000C28  D02B               	goto	i2l487
 10875  000C2A  D0BC               	goto	i2l499
 10876  000C2C                     
 10877                           ;main.c: 909: number = 1;
 10878  000C2C  0E00               	movlw	0
 10879  000C2E  6E76               	movwf	_number+1,c
 10880  000C30  0E01               	movlw	1
 10881  000C32  D00F               	goto	L7
 10882  000C34                     
 10883                           ;main.c: 912: number = 2;
 10884  000C34  0E00               	movlw	0
 10885  000C36  6E76               	movwf	_number+1,c
 10886  000C38  0E02               	movlw	2
 10887  000C3A  D00B               	goto	L7
 10888  000C3C                     
 10889                           ;main.c: 915: number = 3;
 10890  000C3C  0E00               	movlw	0
 10891  000C3E  6E76               	movwf	_number+1,c
 10892  000C40  0E03               	movlw	3
 10893  000C42  D007               	goto	L7
 10894  000C44                     
 10895                           ;main.c: 918: number = 4;
 10896  000C44  0E00               	movlw	0
 10897  000C46  6E76               	movwf	_number+1,c
 10898  000C48  0E04               	movlw	4
 10899  000C4A  D003               	goto	L7
 10900  000C4C                     
 10901                           ;main.c: 921: number = 5;
 10902  000C4C  0E00               	movlw	0
 10903  000C4E  6E76               	movwf	_number+1,c
 10904  000C50  0E05               	movlw	5
 10905  000C52                     L7:
 10906  000C52  6E75               	movwf	_number,c
 10907                           
 10908                           ;main.c: 922: break;
 10909  000C54  D032               	goto	i2l489
 10910  000C56                     
 10911                           ;main.c: 924: initLCD();
 10912  000C56  EC4F  F021         	call	i2_initLCD	;wreg free
 10913                           
 10914                           ;main.c: 925: printf("Wrong input");
 10915  000C5A  0E59               	movlw	low STR_59
 10916  000C5C  6E0D               	movwf	i2printf@f,c
 10917  000C5E  0EFF               	movlw	high STR_59
 10918  000C60  6E0E               	movwf	i2printf@f+1,c
 10919  000C62  ECE7  F016         	call	i2_printf	;wreg free
 10920                           
 10921                           ;main.c: 926: _delay((unsigned long)((1000)*(32000000/4000.0)));
 10922  000C66  0E29               	movlw	41
 10923  000C68  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10924  000C6A  0E96               	movlw	150
 10925  000C6C  6E2B               	movwf	??_interruptHandler& (0+255),c
 10926  000C6E  0E7F               	movlw	127
 10927  000C70                     i2u684_47:
 10928  000C70  2EE8               	decfsz	wreg,f,c
 10929  000C72  D7FE               	bra	i2u684_47
 10930  000C74  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10931  000C76  D7FC               	bra	i2u684_47
 10932  000C78  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10933  000C7A  D7FA               	bra	i2u684_47
 10934  000C7C  F000               	nop	
 10935                           
 10936                           ;main.c: 927: }
 10937  000C7E  D01D               	goto	i2l489
 10938  000C80                     i2l487:
 10939  000C80  5044               	movf	interruptHandler@keypress,w,c
 10940  000C82  0D01               	mullw	1
 10941  000C84  0ECD               	movlw	low _keys
 10942  000C86  24F3               	addwf	prodl,w,c
 10943  000C88  6EF6               	movwf	tblptrl,c
 10944  000C8A  0EFC               	movlw	high _keys
 10945  000C8C  20F4               	addwfc	prodh,w,c
 10946  000C8E  6EF7               	movwf	tblptrh,c
 10947  000C90                     	if	1	;There are 3 active tblptr bytes
 10948  000C90  6AF8               	clrf	tblptru,c
 10949  000C92  0E00               	movlw	low (__mediumconst shr (0+16))
 10950  000C94  22F8               	addwfc	tblptru,f,c
 10951  000C96                     	endif
 10952  000C96  0008               	tblrd		*
 10953  000C98  50F5               	movf	tablat,w,c
 10954                           
 10955                           ; Switch size 1, requested type "space"
 10956                           ; Number of cases is 5, Range of values is 49 to 53
 10957                           ; switch strategies available:
 10958                           ; Name         Instructions Cycles
 10959                           ; simple_byte           16     9 (average)
 10960                           ;	Chosen strategy is simple_byte
 10961  000C9A  0A31               	xorlw	49	; case 49
 10962  000C9C  B4D8               	btfsc	status,2,c
 10963  000C9E  D7C6               	goto	i2l488
 10964  000CA0  0A03               	xorlw	3	; case 50
 10965  000CA2  B4D8               	btfsc	status,2,c
 10966  000CA4  D7C7               	goto	i2l490
 10967  000CA6  0A01               	xorlw	1	; case 51
 10968  000CA8  B4D8               	btfsc	status,2,c
 10969  000CAA  D7C8               	goto	i2l491
 10970  000CAC  0A07               	xorlw	7	; case 52
 10971  000CAE  B4D8               	btfsc	status,2,c
 10972  000CB0  D7C9               	goto	i2l492
 10973  000CB2  0A01               	xorlw	1	; case 53
 10974  000CB4  B4D8               	btfsc	status,2,c
 10975  000CB6  D7CA               	goto	i2l493
 10976  000CB8  D7CE               	goto	i2l494
 10977  000CBA                     i2l489:
 10978                           
 10979                           ;main.c: 930: is_valid();
 10980  000CBA  ECF4  F007         	call	_is_valid	;wreg free
 10981                           
 10982                           ;main.c: 932: if ( check() == 0){
 10983  000CBE  EC45  F020         	call	_check	;wreg free
 10984  000CC2  5001               	movf	?_check,w,c
 10985  000CC4  1002               	iorwf	?_check+1,w,c
 10986  000CC6  A4D8               	btfss	status,2,c
 10987  000CC8  D028               	goto	i2l495
 10988                           
 10989                           ;main.c: 933: initLCD();
 10990  000CCA  EC4F  F021         	call	i2_initLCD	;wreg free
 10991                           
 10992                           ;main.c: 934: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10993  000CCE  0E80               	movlw	128
 10994  000CD0  ECF0  F022         	call	i2_lcdInst
 10995  000CD4  0E34               	movlw	52
 10996  000CD6  6E2B               	movwf	??_interruptHandler& (0+255),c
 10997  000CD8  0EF2               	movlw	242
 10998  000CDA                     i2u685_47:
 10999  000CDA  2EE8               	decfsz	wreg,f,c
 11000  000CDC  D7FE               	bra	i2u685_47
 11001  000CDE  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11002  000CE0  D7FC               	bra	i2u685_47
 11003                           
 11004                           ;main.c: 935: printf("TOO MANY");
 11005  000CE2  0E8E               	movlw	low STR_60
 11006  000CE4  6E0D               	movwf	i2printf@f,c
 11007  000CE6  0EFF               	movlw	high STR_60
 11008  000CE8  6E0E               	movwf	i2printf@f+1,c
 11009  000CEA  ECE7  F016         	call	i2_printf	;wreg free
 11010                           
 11011                           ;main.c: 937: _delay((unsigned long)((500)*(32000000/4000.0)));
 11012  000CEE  0E15               	movlw	21
 11013  000CF0  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11014  000CF2  0E4B               	movlw	75
 11015  000CF4  6E2B               	movwf	??_interruptHandler& (0+255),c
 11016  000CF6  0EBE               	movlw	190
 11017  000CF8                     i2u686_47:
 11018  000CF8  2EE8               	decfsz	wreg,f,c
 11019  000CFA  D7FE               	bra	i2u686_47
 11020  000CFC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11021  000CFE  D7FC               	bra	i2u686_47
 11022  000D00  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11023  000D02  D7FA               	bra	i2u686_47
 11024  000D04  D000               	nop2	
 11025                           
 11026                           ;main.c: 938: state = 2;
 11027  000D06  0E00               	movlw	0
 11028  000D08  0100               	movlb	0	; () banked
 11029  000D0A  6FB2               	movwf	(_state+1)& (0+255),b
 11030  000D0C  0E02               	movlw	2
 11031  000D0E  6FB1               	movwf	_state& (0+255),b
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;main.c: 939: number = 0;
 11035  000D10  0E00               	movlw	0
 11036  000D12  6E76               	movwf	_number+1,c
 11037  000D14  0E00               	movlw	0
 11038  000D16  6E75               	movwf	_number,c
 11039                           
 11040                           ;main.c: 940: }
 11041  000D18  D045               	goto	i2l499
 11042  000D1A                     i2l495:
 11043                           
 11044                           ;main.c: 943: else if (counter_step >= assembly_step-1){
 11045                           
 11046                           ; BSR set to: 0
 11047  000D1A  0EFF               	movlw	255
 11048  000D1C  6E2B               	movwf	??_interruptHandler& (0+255),c
 11049  000D1E  0EFF               	movlw	255
 11050  000D20  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11051  000D22  C0AF  F02D         	movff	_assembly_step,??_interruptHandler+2
 11052  000D26  C0B0  F02E         	movff	_assembly_step+1,??_interruptHandler+3
 11053  000D2A  502B               	movf	??_interruptHandler,w,c
 11054  000D2C  262D               	addwf	??_interruptHandler+2,f,c
 11055  000D2E  502C               	movf	??_interruptHandler+1,w,c
 11056  000D30  222E               	addwfc	??_interruptHandler+3,f,c
 11057  000D32  502D               	movf	??_interruptHandler+2,w,c
 11058  000D34  5C5E               	subwf	_counter_step,w,c
 11059  000D36  505F               	movf	_counter_step+1,w,c
 11060  000D38  0A80               	xorlw	128
 11061  000D3A  6E2F               	movwf	(??_interruptHandler+4)& (0+255),c
 11062  000D3C  502E               	movf	??_interruptHandler+3,w,c
 11063  000D3E  0A80               	xorlw	128
 11064  000D40  582F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11065  000D42  A0D8               	btfss	status,0,c
 11066  000D44  D013               	goto	i2l497
 11067                           
 11068                           ;main.c: 944: final_number[counter_step] = number;
 11069  000D46  90D8               	bcf	status,0,c
 11070  000D48  345E               	rlcf	_counter_step,w,c
 11071  000D4A  6ED9               	movwf	fsr2l,c
 11072  000D4C  345F               	rlcf	_counter_step+1,w,c
 11073  000D4E  6EDA               	movwf	fsr2h,c
 11074  000D50  0E50               	movlw	low _final_number
 11075  000D52  26D9               	addwf	fsr2l,f,c
 11076  000D54  0E01               	movlw	high _final_number
 11077  000D56  22DA               	addwfc	fsr2h,f,c
 11078  000D58  C075  FFDE         	movff	_number,postinc2
 11079  000D5C  C076  FFDD         	movff	_number+1,postdec2
 11080                           
 11081                           ;main.c: 945: state = 3;
 11082  000D60  0E00               	movlw	0
 11083  000D62  0100               	movlb	0	; () banked
 11084  000D64  6FB2               	movwf	(_state+1)& (0+255),b
 11085  000D66  0E03               	movlw	3
 11086  000D68  6FB1               	movwf	_state& (0+255),b
 11087                           
 11088                           ;main.c: 946: }
 11089  000D6A  D01C               	goto	i2l499
 11090  000D6C                     i2l497:
 11091                           
 11092                           ;main.c: 947: else if ( check() == 1){
 11093                           
 11094                           ; BSR set to: 0
 11095  000D6C  EC45  F020         	call	_check	;wreg free
 11096  000D70  0401               	decf	?_check,w,c
 11097  000D72  1002               	iorwf	?_check+1,w,c
 11098  000D74  A4D8               	btfss	status,2,c
 11099  000D76  D016               	goto	i2l499
 11100                           
 11101                           ;main.c: 948: state = 1;
 11102  000D78  0E00               	movlw	0
 11103  000D7A  0100               	movlb	0	; () banked
 11104  000D7C  6FB2               	movwf	(_state+1)& (0+255),b
 11105  000D7E  0E01               	movlw	1
 11106  000D80  6FB1               	movwf	_state& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 949: initLCD();
 11110  000D82  EC4F  F021         	call	i2_initLCD	;wreg free
 11111                           
 11112                           ;main.c: 952: final_number[counter_step] = number;
 11113  000D86  90D8               	bcf	status,0,c
 11114  000D88  345E               	rlcf	_counter_step,w,c
 11115  000D8A  6ED9               	movwf	fsr2l,c
 11116  000D8C  345F               	rlcf	_counter_step+1,w,c
 11117  000D8E  6EDA               	movwf	fsr2h,c
 11118  000D90  0E50               	movlw	low _final_number
 11119  000D92  26D9               	addwf	fsr2l,f,c
 11120  000D94  0E01               	movlw	high _final_number
 11121  000D96  22DA               	addwfc	fsr2h,f,c
 11122  000D98  C075  FFDE         	movff	_number,postinc2
 11123  000D9C  C076  FFDD         	movff	_number+1,postdec2
 11124                           
 11125                           ;main.c: 953: counter_step++;
 11126  000DA0  4A5E               	infsnz	_counter_step,f,c
 11127  000DA2  2A5F               	incf	_counter_step+1,f,c
 11128  000DA4                     i2l499:
 11129                           
 11130                           ;main.c: 954: }
 11131                           ;main.c: 957: }
 11132                           ;main.c: 959: }
 11133                           ;main.c: 962: if(state == 3){
 11134  000DA4  0E03               	movlw	3
 11135  000DA6  0100               	movlb	0	; () banked
 11136  000DA8  19B1               	xorwf	_state& (0+255),w,b
 11137  000DAA  11B2               	iorwf	(_state+1)& (0+255),w,b
 11138  000DAC  A4D8               	btfss	status,2,c
 11139  000DAE  D014               	goto	i2l501
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;main.c: 963: if(keys[keypress] == '#')
 11143  000DB0  5044               	movf	interruptHandler@keypress,w,c
 11144  000DB2  0D01               	mullw	1
 11145  000DB4  0ECD               	movlw	low _keys
 11146  000DB6  24F3               	addwf	prodl,w,c
 11147  000DB8  6EF6               	movwf	tblptrl,c
 11148  000DBA  0EFC               	movlw	high _keys
 11149  000DBC  20F4               	addwfc	prodh,w,c
 11150  000DBE  6EF7               	movwf	tblptrh,c
 11151  000DC0                     	if	1	;There are 3 active tblptr bytes
 11152  000DC0  6AF8               	clrf	tblptru,c
 11153  000DC2  0E00               	movlw	low (__mediumconst shr (0+16))
 11154  000DC4  22F8               	addwfc	tblptru,f,c
 11155  000DC6                     	endif
 11156  000DC6  0008               	tblrd		*
 11157  000DC8  50F5               	movf	tablat,w,c
 11158  000DCA  0A23               	xorlw	35
 11159  000DCC  A4D8               	btfss	status,2,c
 11160  000DCE  D004               	goto	i2l501
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;main.c: 964: state = 4;
 11164  000DD0  0E00               	movlw	0
 11165  000DD2  6FB2               	movwf	(_state+1)& (0+255),b
 11166  000DD4  0E04               	movlw	4
 11167  000DD6  6FB1               	movwf	_state& (0+255),b
 11168  000DD8                     i2l501:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;main.c: 965: }
 11172                           ;main.c: 967: B=0;N=0;S=0;W=0;
 11173                           
 11174                           ; BSR set to: 0
 11175  000DD8  0E00               	movlw	0
 11176  000DDA  6E5D               	movwf	_B+1,c
 11177  000DDC  0E00               	movlw	0
 11178  000DDE  6E5C               	movwf	_B,c
 11179  000DE0  0E00               	movlw	0
 11180  000DE2  6E5B               	movwf	_N+1,c
 11181  000DE4  0E00               	movlw	0
 11182  000DE6  6E5A               	movwf	_N,c
 11183  000DE8  0E00               	movlw	0
 11184  000DEA  6E59               	movwf	_S+1,c
 11185  000DEC  0E00               	movlw	0
 11186  000DEE  6E58               	movwf	_S,c
 11187  000DF0  0E00               	movlw	0
 11188  000DF2  6E57               	movwf	_W+1,c
 11189  000DF4  0E00               	movlw	0
 11190  000DF6  6E56               	movwf	_W,c
 11191                           
 11192                           ;main.c: 968: total_number = 0;
 11193  000DF8  0E00               	movlw	0
 11194  000DFA  0101               	movlb	1	; () banked
 11195  000DFC  6F8B               	movwf	(_total_number+1)& (0+255),b
 11196  000DFE  0E00               	movlw	0
 11197  000E00  6F8A               	movwf	_total_number& (0+255),b
 11198  000E02                     i2l6773:
 11199                           
 11200                           ; BSR set to: 1
 11201                           ;main.c: 970: INT1IF = 0;
 11202  000E02  90F0               	bcf	intcon3,0,c	;volatile
 11203                           
 11204                           ; BSR set to: 1
 11205                           ;main.c: 971: return;
 11206  000E04  D0CB               	goto	i2l507
 11207  000E06                     i2l441:
 11208                           
 11209                           ;main.c: 972: }
 11210                           ;main.c: 982: if (RBIF){
 11211  000E06  A0F2               	btfss	intcon,0,c	;volatile
 11212  000E08  D0B6               	goto	i2l502
 11213                           
 11214                           ;main.c: 984: B_input = PORTBbits.RB5;
 11215  000E0A  AA81               	btfss	3969,5,c	;volatile
 11216  000E0C  D003               	goto	i2u565_40
 11217  000E0E  6A2B               	clrf	??_interruptHandler& (0+255),c
 11218  000E10  2A2B               	incf	??_interruptHandler& (0+255),f,c
 11219  000E12  D001               	goto	i2u565_48
 11220  000E14                     i2u565_40:
 11221  000E14  6A2B               	clrf	??_interruptHandler& (0+255),c
 11222  000E16                     i2u565_48:
 11223  000E16  502B               	movf	??_interruptHandler,w,c
 11224  000E18  0101               	movlb	1	; () banked
 11225  000E1A  6F86               	movwf	_B_input& (0+255),b
 11226  000E1C  6B87               	clrf	(_B_input+1)& (0+255),b
 11227                           
 11228                           ;main.c: 985: N_input = PORTBbits.RB6;
 11229  000E1E  AC81               	btfss	3969,6,c	;volatile
 11230  000E20  D003               	goto	i2u566_40
 11231  000E22  6A2B               	clrf	??_interruptHandler& (0+255),c
 11232  000E24  2A2B               	incf	??_interruptHandler& (0+255),f,c
 11233  000E26  D001               	goto	i2u566_48
 11234  000E28                     i2u566_40:
 11235  000E28  6A2B               	clrf	??_interruptHandler& (0+255),c
 11236  000E2A                     i2u566_48:
 11237  000E2A  502B               	movf	??_interruptHandler,w,c
 11238  000E2C  0101               	movlb	1	; () banked
 11239  000E2E  6F84               	movwf	_N_input& (0+255),b
 11240  000E30  6B85               	clrf	(_N_input+1)& (0+255),b
 11241                           
 11242                           ;main.c: 986: S_input = PORTBbits.RB4;
 11243  000E32  A881               	btfss	3969,4,c	;volatile
 11244  000E34  D003               	goto	i2u567_40
 11245  000E36  6A2B               	clrf	??_interruptHandler& (0+255),c
 11246  000E38  2A2B               	incf	??_interruptHandler& (0+255),f,c
 11247  000E3A  D001               	goto	i2u567_48
 11248  000E3C                     i2u567_40:
 11249  000E3C  6A2B               	clrf	??_interruptHandler& (0+255),c
 11250  000E3E                     i2u567_48:
 11251  000E3E  502B               	movf	??_interruptHandler,w,c
 11252  000E40  0101               	movlb	1	; () banked
 11253  000E42  6F82               	movwf	_S_input& (0+255),b
 11254  000E44  6B83               	clrf	(_S_input+1)& (0+255),b
 11255                           
 11256                           ;main.c: 987: W_input = PORTBbits.RB7;
 11257  000E46  AE81               	btfss	3969,7,c	;volatile
 11258  000E48  D003               	goto	i2u568_40
 11259  000E4A  6A2B               	clrf	??_interruptHandler& (0+255),c
 11260  000E4C  2A2B               	incf	??_interruptHandler& (0+255),f,c
 11261  000E4E  D001               	goto	i2u568_48
 11262  000E50                     i2u568_40:
 11263  000E50  6A2B               	clrf	??_interruptHandler& (0+255),c
 11264  000E52                     i2u568_48:
 11265  000E52  502B               	movf	??_interruptHandler,w,c
 11266  000E54  0101               	movlb	1	; () banked
 11267  000E56  6F80               	movwf	_W_input& (0+255),b
 11268  000E58  6B81               	clrf	(_W_input+1)& (0+255),b
 11269                           
 11270                           ; BSR set to: 1
 11271                           ;main.c: 991: if (B_input == 1){
 11272  000E5A  0586               	decf	_B_input& (0+255),w,b
 11273  000E5C  1187               	iorwf	(_B_input+1)& (0+255),w,b
 11274  000E5E  A4D8               	btfss	status,2,c
 11275  000E60  D01A               	goto	i2l503
 11276                           
 11277                           ; BSR set to: 1
 11278                           ;main.c: 992: B_spacingTime = 0;
 11279  000E62  0E00               	movlw	0
 11280  000E64  0100               	movlb	0	; () banked
 11281  000E66  6F9E               	movwf	(_B_spacingTime+1)& (0+255),b
 11282  000E68  0E00               	movlw	0
 11283  000E6A  6F9D               	movwf	_B_spacingTime& (0+255),b
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;main.c: 993: initLCD();
 11287  000E6C  EC4F  F021         	call	i2_initLCD	;wreg free
 11288                           
 11289                           ;main.c: 994: printf("bolt_interrupt");
 11290  000E70  0ECF               	movlw	low STR_61
 11291  000E72  6E0D               	movwf	i2printf@f,c
 11292  000E74  0EFE               	movlw	high STR_61
 11293  000E76  6E0E               	movwf	i2printf@f+1,c
 11294  000E78  ECE7  F016         	call	i2_printf	;wreg free
 11295                           
 11296                           ;main.c: 995: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11297  000E7C  0E80               	movlw	128
 11298  000E7E  ECF0  F022         	call	i2_lcdInst
 11299  000E82  0E34               	movlw	52
 11300  000E84  6E2B               	movwf	??_interruptHandler& (0+255),c
 11301  000E86  0EF2               	movlw	242
 11302  000E88                     i2u687_47:
 11303  000E88  2EE8               	decfsz	wreg,f,c
 11304  000E8A  D7FE               	bra	i2u687_47
 11305  000E8C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11306  000E8E  D7FC               	bra	i2u687_47
 11307                           
 11308                           ;main.c: 996: B_counter++;
 11309  000E90  0100               	movlb	0	; () banked
 11310  000E92  4BAD               	infsnz	_B_counter& (0+255),f,b
 11311  000E94  2BAE               	incf	(_B_counter+1)& (0+255),f,b
 11312  000E96                     i2l503:
 11313                           
 11314                           ;main.c: 998: }
 11315                           ;main.c: 1001: if (N_input == 1){
 11316                           
 11317                           ; BSR set to: 0
 11318  000E96  0101               	movlb	1	; () banked
 11319  000E98  0584               	decf	_N_input& (0+255),w,b
 11320  000E9A  1185               	iorwf	(_N_input+1)& (0+255),w,b
 11321  000E9C  A4D8               	btfss	status,2,c
 11322  000E9E  D01A               	goto	i2l504
 11323                           
 11324                           ; BSR set to: 1
 11325                           ;main.c: 1002: N_spacingTime = 0;
 11326  000EA0  0E00               	movlw	0
 11327  000EA2  0100               	movlb	0	; () banked
 11328  000EA4  6F9C               	movwf	(_N_spacingTime+1)& (0+255),b
 11329  000EA6  0E00               	movlw	0
 11330  000EA8  6F9B               	movwf	_N_spacingTime& (0+255),b
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;main.c: 1003: initLCD();
 11334  000EAA  EC4F  F021         	call	i2_initLCD	;wreg free
 11335                           
 11336                           ;main.c: 1004: printf("nut_interrupt");
 11337  000EAE  0E26               	movlw	low STR_62
 11338  000EB0  6E0D               	movwf	i2printf@f,c
 11339  000EB2  0EFF               	movlw	high STR_62
 11340  000EB4  6E0E               	movwf	i2printf@f+1,c
 11341  000EB6  ECE7  F016         	call	i2_printf	;wreg free
 11342                           
 11343                           ;main.c: 1005: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11344  000EBA  0E80               	movlw	128
 11345  000EBC  ECF0  F022         	call	i2_lcdInst
 11346  000EC0  0E34               	movlw	52
 11347  000EC2  6E2B               	movwf	??_interruptHandler& (0+255),c
 11348  000EC4  0EF2               	movlw	242
 11349  000EC6                     i2u688_47:
 11350  000EC6  2EE8               	decfsz	wreg,f,c
 11351  000EC8  D7FE               	bra	i2u688_47
 11352  000ECA  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11353  000ECC  D7FC               	bra	i2u688_47
 11354                           
 11355                           ;main.c: 1006: N_counter++;
 11356  000ECE  0100               	movlb	0	; () banked
 11357  000ED0  4BA9               	infsnz	_N_counter& (0+255),f,b
 11358  000ED2  2BAA               	incf	(_N_counter+1)& (0+255),f,b
 11359  000ED4                     i2l504:
 11360                           
 11361                           ;main.c: 1007: }
 11362                           ;main.c: 1009: if (S_input == 1){
 11363                           
 11364                           ; BSR set to: 0
 11365  000ED4  0101               	movlb	1	; () banked
 11366  000ED6  0582               	decf	_S_input& (0+255),w,b
 11367  000ED8  1183               	iorwf	(_S_input+1)& (0+255),w,b
 11368  000EDA  A4D8               	btfss	status,2,c
 11369  000EDC  D019               	goto	i2l505
 11370                           
 11371                           ; BSR set to: 1
 11372                           ;main.c: 1010: S_spacingTime = 0;
 11373  000EDE  0E00               	movlw	0
 11374  000EE0  0100               	movlb	0	; () banked
 11375  000EE2  6F9A               	movwf	(_S_spacingTime+1)& (0+255),b
 11376  000EE4  0E00               	movlw	0
 11377  000EE6  6F99               	movwf	_S_spacingTime& (0+255),b
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;main.c: 1011: S_counter++;
 11381  000EE8  4BAB               	infsnz	_S_counter& (0+255),f,b
 11382  000EEA  2BAC               	incf	(_S_counter+1)& (0+255),f,b
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;main.c: 1012: initLCD();
 11386  000EEC  EC4F  F021         	call	i2_initLCD	;wreg free
 11387                           
 11388                           ;main.c: 1014: printf("spacer_interrupted");
 11389  000EF0  0EA0               	movlw	low STR_63
 11390  000EF2  6E0D               	movwf	i2printf@f,c
 11391  000EF4  0EFD               	movlw	high STR_63
 11392  000EF6  6E0E               	movwf	i2printf@f+1,c
 11393  000EF8  ECE7  F016         	call	i2_printf	;wreg free
 11394                           
 11395                           ;main.c: 1015: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11396  000EFC  0E80               	movlw	128
 11397  000EFE  ECF0  F022         	call	i2_lcdInst
 11398  000F02  0E34               	movlw	52
 11399  000F04  6E2B               	movwf	??_interruptHandler& (0+255),c
 11400  000F06  0EF2               	movlw	242
 11401  000F08                     i2u689_47:
 11402  000F08  2EE8               	decfsz	wreg,f,c
 11403  000F0A  D7FE               	bra	i2u689_47
 11404  000F0C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11405  000F0E  D7FC               	bra	i2u689_47
 11406  000F10                     i2l505:
 11407                           
 11408                           ;main.c: 1016: }
 11409                           ;main.c: 1018: if (W_input == 1){
 11410  000F10  0101               	movlb	1	; () banked
 11411  000F12  0580               	decf	_W_input& (0+255),w,b
 11412  000F14  1181               	iorwf	(_W_input+1)& (0+255),w,b
 11413  000F16  A4D8               	btfss	status,2,c
 11414  000F18  D01A               	goto	i2l506
 11415                           
 11416                           ; BSR set to: 1
 11417                           ;main.c: 1019: W_spacingTime = 0;
 11418  000F1A  0E00               	movlw	0
 11419  000F1C  0100               	movlb	0	; () banked
 11420  000F1E  6F98               	movwf	(_W_spacingTime+1)& (0+255),b
 11421  000F20  0E00               	movlw	0
 11422  000F22  6F97               	movwf	_W_spacingTime& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;main.c: 1020: initLCD();
 11426  000F24  EC4F  F021         	call	i2_initLCD	;wreg free
 11427                           
 11428                           ;main.c: 1021: printf("washer_interrupted");
 11429  000F28  0EB3               	movlw	low STR_64
 11430  000F2A  6E0D               	movwf	i2printf@f,c
 11431  000F2C  0EFD               	movlw	high STR_64
 11432  000F2E  6E0E               	movwf	i2printf@f+1,c
 11433  000F30  ECE7  F016         	call	i2_printf	;wreg free
 11434                           
 11435                           ;main.c: 1022: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11436  000F34  0E80               	movlw	128
 11437  000F36  ECF0  F022         	call	i2_lcdInst
 11438  000F3A  0E34               	movlw	52
 11439  000F3C  6E2B               	movwf	??_interruptHandler& (0+255),c
 11440  000F3E  0EF2               	movlw	242
 11441  000F40                     i2u690_47:
 11442  000F40  2EE8               	decfsz	wreg,f,c
 11443  000F42  D7FE               	bra	i2u690_47
 11444  000F44  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11445  000F46  D7FC               	bra	i2u690_47
 11446                           
 11447                           ;main.c: 1023: W_counter++;
 11448  000F48  0100               	movlb	0	; () banked
 11449  000F4A  4BA7               	infsnz	_W_counter& (0+255),f,b
 11450  000F4C  2BA8               	incf	(_W_counter+1)& (0+255),f,b
 11451  000F4E                     i2l506:
 11452                           
 11453                           ;main.c: 1026: }
 11454                           ;main.c: 1027: initLCD();
 11455                           
 11456                           ; BSR set to: 0
 11457  000F4E  EC4F  F021         	call	i2_initLCD	;wreg free
 11458                           
 11459                           ;main.c: 1028: printf("interrupted");
 11460  000F52  0EA7               	movlw	low (STR_63+7)
 11461  000F54  6E0D               	movwf	i2printf@f,c
 11462  000F56  0EFD               	movlw	high (STR_63+7)
 11463  000F58  6E0E               	movwf	i2printf@f+1,c
 11464  000F5A  ECE7  F016         	call	i2_printf	;wreg free
 11465                           
 11466                           ;main.c: 1029: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11467  000F5E  0E80               	movlw	128
 11468  000F60  ECF0  F022         	call	i2_lcdInst
 11469  000F64  0E34               	movlw	52
 11470  000F66  6E2B               	movwf	??_interruptHandler& (0+255),c
 11471  000F68  0EF2               	movlw	242
 11472  000F6A                     i2u691_47:
 11473  000F6A  2EE8               	decfsz	wreg,f,c
 11474  000F6C  D7FE               	bra	i2u691_47
 11475  000F6E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11476  000F70  D7FC               	bra	i2u691_47
 11477                           
 11478                           ;main.c: 1035: RBIF = 0;
 11479  000F72  90F2               	bcf	intcon,0,c	;volatile
 11480                           
 11481                           ;main.c: 1036: return;
 11482  000F74  D013               	goto	i2l507
 11483  000F76                     i2l502:
 11484                           
 11485                           ;main.c: 1037: }
 11486                           ;main.c: 1038: if(TMR0IE && TMR0IF){
 11487  000F76  BAF2               	btfsc	intcon,5,c	;volatile
 11488  000F78  A4F2               	btfss	intcon,2,c	;volatile
 11489  000F7A  D010               	goto	i2l507
 11490                           
 11491                           ;main.c: 1039: timerCounter ++;
 11492  000F7C  2A6A               	incf	_timerCounter,f,c	;volatile
 11493                           
 11494                           ;main.c: 1040: if (timerCounter >= 19){
 11495  000F7E  0E12               	movlw	18
 11496  000F80  646A               	cpfsgt	_timerCounter,c	;volatile
 11497  000F82  D003               	goto	i2l508
 11498                           
 11499                           ;main.c: 1041: NeedToCloseLid = 1;
 11500  000F84  0E01               	movlw	1
 11501  000F86  0100               	movlb	0	; () banked
 11502  000F88  6FBD               	movwf	_NeedToCloseLid& (0+255),b
 11503  000F8A                     i2l508:
 11504                           
 11505                           ;main.c: 1042: }
 11506                           ;main.c: 1043: if(timerCounter >= 21){
 11507                           
 11508                           ; BSR set to: 0
 11509  000F8A  0E14               	movlw	20
 11510  000F8C  646A               	cpfsgt	_timerCounter,c	;volatile
 11511  000F8E  D005               	goto	i2l509
 11512                           
 11513                           ;main.c: 1044: timerCounter = 0;
 11514  000F90  0E00               	movlw	0
 11515  000F92  6E6A               	movwf	_timerCounter,c	;volatile
 11516                           
 11517                           ;main.c: 1045: EndOfProgram = 1;
 11518  000F94  0E01               	movlw	1
 11519  000F96  0100               	movlb	0	; () banked
 11520  000F98  6FBE               	movwf	_EndOfProgram& (0+255),b
 11521  000F9A                     i2l509:
 11522                           
 11523                           ;main.c: 1046: }
 11524                           ;main.c: 1048: TMR0IF = 0;
 11525                           
 11526                           ; BSR set to: 0
 11527  000F9A  94F2               	bcf	intcon,2,c	;volatile
 11528  000F9C                     i2l507:
 11529  000F9C  C041  F082         	movff	??_interruptHandler+22,btemp+3
 11530  000FA0  C040  F081         	movff	??_interruptHandler+21,btemp+2
 11531  000FA4  C03F  F080         	movff	??_interruptHandler+20,btemp+1
 11532  000FA8  C03E  F07F         	movff	??_interruptHandler+19,btemp
 11533  000FAC  C03D  FFF5         	movff	??_interruptHandler+18,tablat
 11534  000FB0  C03C  FFF8         	movff	??_interruptHandler+17,tblptru
 11535  000FB4  C03B  FFF7         	movff	??_interruptHandler+16,tblptrh
 11536  000FB8  C03A  FFF6         	movff	??_interruptHandler+15,tblptrl
 11537  000FBC  C039  FFF4         	movff	??_interruptHandler+14,prodh
 11538  000FC0  C038  FFF3         	movff	??_interruptHandler+13,prodl
 11539  000FC4  C037  FFDA         	movff	??_interruptHandler+12,fsr2h
 11540  000FC8  C036  FFD9         	movff	??_interruptHandler+11,fsr2l
 11541  000FCC  C035  FFE2         	movff	??_interruptHandler+10,fsr1h
 11542  000FD0  C034  FFE1         	movff	??_interruptHandler+9,fsr1l
 11543  000FD4  C033  FFEA         	movff	??_interruptHandler+8,fsr0h
 11544  000FD8  C032  FFE9         	movff	??_interruptHandler+7,fsr0l
 11545  000FDC  C031  FFFB         	movff	??_interruptHandler+6,pclatu
 11546  000FE0  C030  FFFA         	movff	??_interruptHandler+5,pclath
 11547  000FE4  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11548  000FE6  0011               	retfie		f
 11549  000FE8                     __end_of_interruptHandler:
 11550                           	opt stack 0
 11551                           pclatu	equ	0xFFB
 11552                           pclath	equ	0xFFA
 11553                           tblptru	equ	0xFF8
 11554                           tblptrh	equ	0xFF7
 11555                           tblptrl	equ	0xFF6
 11556                           tablat	equ	0xFF5
 11557                           prodh	equ	0xFF4
 11558                           prodl	equ	0xFF3
 11559                           intcon	equ	0xFF2
 11560                           intcon3	equ	0xFF0
 11561                           indf0	equ	0xFEF
 11562                           postinc0	equ	0xFEE
 11563                           fsr0h	equ	0xFEA
 11564                           fsr0l	equ	0xFE9
 11565                           wreg	equ	0xFE8
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           
 11576 ;; *************** function i2_printf *****************
 11577 ;; Defined at:
 11578 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11581 ;;		 -> STR_77(20), STR_76(20), STR_75(20), STR_74(20), 
 11582 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 11583 ;;		 -> STR_69(20), STR_68(20), STR_67(20), STR_66(3), 
 11584 ;;		 -> STR_65(12), STR_64(19), STR_63(19), STR_62(14), 
 11585 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(16), 
 11586 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 11587 ;;		 -> STR_50(9), STR_45(15), STR_44(12), STR_43(17), 
 11588 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(20), 
 11589 ;;		 -> STR_38(17), STR_37(13), STR_36(16), STR_35(15), 
 11590 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(9), 
 11591 ;;		 -> STR_30(10), STR_29(19), STR_28(17), STR_27(17), 
 11592 ;;		 -> STR_26(17), STR_25(14), STR_24(15), STR_23(11), 
 11593 ;;		 -> STR_22(11), STR_21(9), STR_20(15), STR_19(12), 
 11594 ;;		 -> STR_18(20), STR_17(7), STR_16(16), STR_15(14), 
 11595 ;;		 -> STR_14(3), STR_13(2), STR_12(3), STR_11(2), 
 11596 ;;		 -> STR_10(3), STR_9(5), STR_8(17), STR_7(18), 
 11597 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 11598 ;;		 -> STR_2(20), STR_1(16), 
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;  printf          4    0        struct .
 11601 ;;  printf          2   39[COMRAM] int 
 11602 ;;  printf          2   36[COMRAM] unsigned int 
 11603 ;;  printf          2   34[COMRAM] unsigned int 
 11604 ;;  printf          2   32[COMRAM] PTR void [1]
 11605 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11606 ;;  printf          2   30[COMRAM] PTR const unsigned char 
 11607 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 11608 ;;  printf          1   41[COMRAM] char 
 11609 ;;  printf          1   38[COMRAM] unsigned char 
 11610 ;;  printf          1   29[COMRAM] char 
 11611 ;;  printf          1   28[COMRAM] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  2   12[COMRAM] int 
 11614 ;; Registers used:
 11615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11621 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11622 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;Total ram usage:       30 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:    2
 11628 ;; This function calls:
 11629 ;;		i2___lwdiv
 11630 ;;		i2___lwmod
 11631 ;;		i2___wmul
 11632 ;;		i2_isdigit
 11633 ;;		i2_putch
 11634 ;; This function is called by:
 11635 ;;		_interruptHandler
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639                           	psect	text29
 11640  002DCE                     __ptext29:
 11641                           	opt stack 0
 11642  002DCE                     i2_printf:
 11643                           	opt stack 23
 11644                           
 11645                           ;doprnt.c: 466: va_list ap;
 11646                           ;doprnt.c: 499: signed char c;
 11647                           ;doprnt.c: 501: int width;
 11648                           ;doprnt.c: 506: signed char prec;
 11649                           ;doprnt.c: 508: unsigned char flag;
 11650                           ;doprnt.c: 523: union {
 11651                           ;doprnt.c: 524: unsigned long vd;
 11652                           ;doprnt.c: 525: double integ;
 11653                           ;doprnt.c: 526: } tmpval;
 11654                           ;doprnt.c: 528: unsigned int val;
 11655                           ;doprnt.c: 529: unsigned len;
 11656                           ;doprnt.c: 530: const char * cp;
 11657                           ;doprnt.c: 533: *ap = __va_start();
 11658                           
 11659                           ;incstack = 0
 11660  002DCE  0E0F               	movlw	low (?i2_printf+2)
 11661  002DD0  6E21               	movwf	i2printf@ap,c
 11662  002DD2  0E00               	movlw	high (?i2_printf+2)
 11663  002DD4  6E22               	movwf	i2printf@ap+1,c
 11664                           
 11665                           ;doprnt.c: 536: while(c = *f++) {
 11666  002DD6  D1FA               	goto	i2u476_40
 11667  002DD8                     
 11668                           ;doprnt.c: 538: if(c != '%')
 11669  002DD8  0E25               	movlw	37
 11670  002DDA  182A               	xorwf	i2printf@c,w,c
 11671  002DDC  B4D8               	btfsc	status,2,c
 11672  002DDE  D004               	goto	i2l1061
 11673                           
 11674                           ;doprnt.c: 540: {
 11675                           ;doprnt.c: 541: (putch(c) );
 11676  002DE0  502A               	movf	i2printf@c,w,c
 11677  002DE2  ECE6  F022         	call	i2_putch
 11678                           
 11679                           ;doprnt.c: 542: continue;
 11680  002DE6  D1F2               	goto	i2u476_40
 11681  002DE8                     i2l1061:
 11682                           
 11683                           ;doprnt.c: 543: }
 11684                           ;doprnt.c: 546: width = 0;
 11685  002DE8  0E00               	movlw	0
 11686  002DEA  6E29               	movwf	i2printf@width+1,c
 11687  002DEC  0E00               	movlw	0
 11688  002DEE  6E28               	movwf	i2printf@width,c
 11689                           
 11690                           ;doprnt.c: 548: flag = 0;
 11691  002DF0  0E00               	movlw	0
 11692  002DF2  6E27               	movwf	i2printf@flag,c
 11693                           
 11694                           ;doprnt.c: 551: switch(*f) {
 11695                           
 11696                           ;doprnt.c: 550: for(;;) {
 11697  002DF4  D003               	goto	i2l1063
 11698  002DF6                     
 11699                           ;doprnt.c: 580: flag |= 0x04;
 11700  002DF6  8427               	bsf	i2printf@flag,2,c
 11701                           
 11702                           ;doprnt.c: 581: f++;
 11703  002DF8  4A0D               	infsnz	i2printf@f,f,c
 11704  002DFA  2A0E               	incf	i2printf@f+1,f,c
 11705  002DFC                     i2l1063:
 11706  002DFC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11707  002E00  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11708  002E04                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11709  002E04  6AF8               	clrf	tblptru,c
 11710  002E06                     	endif
 11711  002E06                     	if	0	;tblptru may be non-zero
 11712  002E06                     	endif
 11713  002E06  0008               	tblrd		*
 11714  002E08  50F5               	movf	tablat,w,c
 11715                           
 11716                           ; Switch size 1, requested type "space"
 11717                           ; Number of cases is 1, Range of values is 48 to 48
 11718                           ; switch strategies available:
 11719                           ; Name         Instructions Cycles
 11720                           ; simple_byte            4     3 (average)
 11721                           ;	Chosen strategy is simple_byte
 11722  002E0A  0A30               	xorlw	48	; case 48
 11723  002E0C  B4D8               	btfsc	status,2,c
 11724  002E0E  D7F3               	goto	i2l1064
 11725                           
 11726                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11727                           
 11728                           ;doprnt.c: 586: }
 11729                           
 11730                           ;doprnt.c: 585: break;
 11731  002E10  C00D  FFF6         	movff	i2printf@f,tblptrl
 11732  002E14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11733  002E18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11734  002E18  6AF8               	clrf	tblptru,c
 11735  002E1A                     	endif
 11736  002E1A                     	if	0	;tblptru may be non-zero
 11737  002E1A                     	endif
 11738  002E1A  0008               	tblrd		*
 11739  002E1C  50F5               	movf	tablat,w,c
 11740  002E1E  ECAB  F022         	call	i2_isdigit
 11741  002E22  A0D8               	btfss	status,0,c
 11742  002E24  D0A6               	goto	i2l1071
 11743                           
 11744                           ;doprnt.c: 598: width = 0;
 11745  002E26  0E00               	movlw	0
 11746  002E28  6E29               	movwf	i2printf@width+1,c
 11747  002E2A  0E00               	movlw	0
 11748  002E2C  6E28               	movwf	i2printf@width,c
 11749  002E2E                     
 11750                           ;doprnt.c: 600: width *= 10;
 11751  002E2E  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11752  002E32  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11753  002E36  0E00               	movlw	0
 11754  002E38  6E04               	movwf	i2___wmul@multiplicand+1,c
 11755  002E3A  0E0A               	movlw	10
 11756  002E3C  6E03               	movwf	i2___wmul@multiplicand,c
 11757  002E3E  EC75  F022         	call	i2___wmul	;wreg free
 11758  002E42  C001  F028         	movff	?i2___wmul,i2printf@width
 11759  002E46  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11760                           
 11761                           ;doprnt.c: 601: width += *f++ - '0';
 11762  002E4A  0ED0               	movlw	208
 11763  002E4C  6E19               	movwf	??i2_printf& (0+255),c
 11764  002E4E  0EFF               	movlw	255
 11765  002E50  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11766  002E52  C00D  FFF6         	movff	i2printf@f,tblptrl
 11767  002E56  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11768  002E5A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11769  002E5A  6AF8               	clrf	tblptru,c
 11770  002E5C                     	endif
 11771  002E5C                     	if	0	;tblptru may be non-zero
 11772  002E5C                     	endif
 11773  002E5C  0008               	tblrd		*
 11774  002E5E  50F5               	movf	tablat,w,c
 11775  002E60  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11776  002E62  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11777  002E64  5019               	movf	??i2_printf,w,c
 11778  002E66  261B               	addwf	??i2_printf+2,f,c
 11779  002E68  501A               	movf	??i2_printf+1,w,c
 11780  002E6A  221C               	addwfc	??i2_printf+3,f,c
 11781  002E6C  501B               	movf	??i2_printf+2,w,c
 11782  002E6E  2628               	addwf	i2printf@width,f,c
 11783  002E70  501C               	movf	??i2_printf+3,w,c
 11784  002E72  2229               	addwfc	i2printf@width+1,f,c
 11785  002E74  4A0D               	infsnz	i2printf@f,f,c
 11786  002E76  2A0E               	incf	i2printf@f+1,f,c
 11787                           
 11788                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11789  002E78  C00D  FFF6         	movff	i2printf@f,tblptrl
 11790  002E7C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11791  002E80                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11792  002E80  6AF8               	clrf	tblptru,c
 11793  002E82                     	endif
 11794  002E82                     	if	0	;tblptru may be non-zero
 11795  002E82                     	endif
 11796  002E82  0008               	tblrd		*
 11797  002E84  50F5               	movf	tablat,w,c
 11798  002E86  ECAB  F022         	call	i2_isdigit
 11799  002E8A  A0D8               	btfss	status,0,c
 11800  002E8C  D072               	goto	i2l1071
 11801  002E8E  D7CF               	goto	i2l1069
 11802  002E90                     
 11803                           ;doprnt.c: 721: flag |= 0x80;
 11804  002E90  8E27               	bsf	i2printf@flag,7,c
 11805                           
 11806                           ;doprnt.c: 723: break;
 11807  002E92  D08A               	goto	i2l1076
 11808  002E94                     
 11809                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11810  002E94  C021  FFD9         	movff	i2printf@ap,fsr2l
 11811  002E98  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11812  002E9C  CFDE F01F          	movff	postinc2,i2printf@cp
 11813  002EA0  CFDD F020          	movff	postdec2,i2printf@cp+1
 11814  002EA4  0E02               	movlw	2
 11815  002EA6  2621               	addwf	i2printf@ap,f,c
 11816  002EA8  0E00               	movlw	0
 11817  002EAA  2222               	addwfc	i2printf@ap+1,f,c
 11818                           
 11819                           ;doprnt.c: 740: if(!cp)
 11820  002EAC  501F               	movf	i2printf@cp,w,c
 11821  002EAE  1020               	iorwf	i2printf@cp+1,w,c
 11822  002EB0  A4D8               	btfss	status,2,c
 11823  002EB2  D004               	goto	i2l1079
 11824                           
 11825                           ;doprnt.c: 741: cp = "(null)";
 11826  002EB4  0EB1               	movlw	low STR_98
 11827  002EB6  6E1F               	movwf	i2printf@cp,c
 11828  002EB8  0EFF               	movlw	high STR_98
 11829  002EBA  6E20               	movwf	i2printf@cp+1,c
 11830  002EBC                     i2l1079:
 11831                           
 11832                           ;doprnt.c: 745: len = 0;
 11833  002EBC  0E00               	movlw	0
 11834  002EBE  6E24               	movwf	i2printf@len+1,c
 11835  002EC0  0E00               	movlw	0
 11836  002EC2  6E23               	movwf	i2printf@len,c
 11837                           
 11838                           ;doprnt.c: 746: while(cp[len])
 11839  002EC4  D002               	goto	i2l1080
 11840  002EC6                     
 11841                           ;doprnt.c: 747: len++;
 11842  002EC6  4A23               	infsnz	i2printf@len,f,c
 11843  002EC8  2A24               	incf	i2printf@len+1,f,c
 11844  002ECA                     i2l1080:
 11845  002ECA  5023               	movf	i2printf@len,w,c
 11846  002ECC  241F               	addwf	i2printf@cp,w,c
 11847  002ECE  6E19               	movwf	??i2_printf& (0+255),c
 11848  002ED0  5024               	movf	i2printf@len+1,w,c
 11849  002ED2  2020               	addwfc	i2printf@cp+1,w,c
 11850  002ED4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11851  002ED6  C019  FFF6         	movff	??i2_printf,tblptrl
 11852  002EDA  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11853  002EDE  0E00               	movlw	low (__mediumconst shr (0+16))
 11854  002EE0  6EF8               	movwf	tblptru,c
 11855  002EE2  0E0F               	movlw	(high __ramtop+-1)
 11856  002EE4  64F7               	cpfsgt	tblptrh,c
 11857  002EE6  D003               	bra	i2u452_47
 11858  002EE8  0008               	tblrd		*
 11859  002EEA  50F5               	movf	tablat,w,c
 11860  002EEC  D005               	bra	i2u452_40
 11861  002EEE                     i2u452_47:
 11862  002EEE  CFF6 FFE9          	movff	tblptrl,fsr0l
 11863  002EF2  CFF7 FFEA          	movff	tblptrh,fsr0h
 11864  002EF6  50EF               	movf	indf0,w,c
 11865  002EF8                     i2u452_40:
 11866  002EF8  0900               	iorlw	0
 11867  002EFA  A4D8               	btfss	status,2,c
 11868  002EFC  D7E4               	goto	i2l1081
 11869                           
 11870                           ;doprnt.c: 757: if(width > len)
 11871  002EFE  5028               	movf	i2printf@width,w,c
 11872  002F00  5C23               	subwf	i2printf@len,w,c
 11873  002F02  5029               	movf	i2printf@width+1,w,c
 11874  002F04  5824               	subwfb	i2printf@len+1,w,c
 11875  002F06  B0D8               	btfsc	status,0,c
 11876  002F08  D005               	goto	i2l1083
 11877                           
 11878                           ;doprnt.c: 758: width -= len;
 11879  002F0A  5023               	movf	i2printf@len,w,c
 11880  002F0C  5E28               	subwf	i2printf@width,f,c
 11881  002F0E  5024               	movf	i2printf@len+1,w,c
 11882  002F10  5A29               	subwfb	i2printf@width+1,f,c
 11883  002F12  D008               	goto	i2l1085
 11884  002F14                     i2l1083:
 11885                           
 11886                           ;doprnt.c: 759: else
 11887                           ;doprnt.c: 760: width = 0;
 11888  002F14  0E00               	movlw	0
 11889  002F16  6E29               	movwf	i2printf@width+1,c
 11890  002F18  0E00               	movlw	0
 11891  002F1A  6E28               	movwf	i2printf@width,c
 11892                           
 11893                           ;doprnt.c: 764: while(width--)
 11894  002F1C  D003               	goto	i2l1085
 11895  002F1E                     i2l5729:
 11896                           
 11897                           ;doprnt.c: 765: (putch(' ') );
 11898  002F1E  0E20               	movlw	32
 11899  002F20  ECE6  F022         	call	i2_putch
 11900  002F24                     i2l1085:
 11901  002F24  0628               	decf	i2printf@width,f,c
 11902  002F26  A0D8               	btfss	status,0,c
 11903  002F28  0629               	decf	i2printf@width+1,f,c
 11904  002F2A  2828               	incf	i2printf@width,w,c
 11905  002F2C  E1F8               	bnz	i2l5729
 11906  002F2E  2829               	incf	i2printf@width+1,w,c
 11907  002F30  B4D8               	btfsc	status,2,c
 11908  002F32  D016               	goto	i2l1088
 11909  002F34  D7F4               	goto	i2l1086
 11910  002F36                     i2l5733:
 11911                           
 11912                           ;doprnt.c: 768: (putch(*cp++) );
 11913  002F36  C01F  FFF6         	movff	i2printf@cp,tblptrl
 11914  002F3A  C020  FFF7         	movff	i2printf@cp+1,tblptrh
 11915  002F3E  0E00               	movlw	low (__mediumconst shr (0+16))
 11916  002F40  6EF8               	movwf	tblptru,c
 11917  002F42  0E0F               	movlw	(high __ramtop+-1)
 11918  002F44  64F7               	cpfsgt	tblptrh,c
 11919  002F46  D003               	bra	i2u456_47
 11920  002F48  0008               	tblrd		*
 11921  002F4A  50F5               	movf	tablat,w,c
 11922  002F4C  D005               	bra	i2u456_40
 11923  002F4E                     i2u456_47:
 11924  002F4E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11925  002F52  CFF7 FFEA          	movff	tblptrh,fsr0h
 11926  002F56  50EF               	movf	indf0,w,c
 11927  002F58                     i2u456_40:
 11928  002F58  ECE6  F022         	call	i2_putch
 11929  002F5C  4A1F               	infsnz	i2printf@cp,f,c
 11930  002F5E  2A20               	incf	i2printf@cp+1,f,c
 11931  002F60                     i2l1088:
 11932  002F60  0623               	decf	i2printf@len,f,c
 11933  002F62  A0D8               	btfss	status,0,c
 11934  002F64  0624               	decf	i2printf@len+1,f,c
 11935  002F66  2823               	incf	i2printf@len,w,c
 11936  002F68  E1E6               	bnz	i2l5733
 11937  002F6A  2824               	incf	i2printf@len+1,w,c
 11938  002F6C  B4D8               	btfsc	status,2,c
 11939  002F6E  D12E               	goto	i2u476_40
 11940  002F70  D7E2               	goto	i2l1089
 11941  002F72                     i2l1071:
 11942  002F72  C00D  FFF6         	movff	i2printf@f,tblptrl
 11943  002F76  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11944  002F7A  4A0D               	infsnz	i2printf@f,f,c
 11945  002F7C  2A0E               	incf	i2printf@f+1,f,c
 11946  002F7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11947  002F7E  6AF8               	clrf	tblptru,c
 11948  002F80                     	endif
 11949  002F80                     	if	0	;tblptru may be non-zero
 11950  002F80                     	endif
 11951  002F80  0008               	tblrd		*
 11952  002F82  CFF5 F02A          	movff	tablat,i2printf@c
 11953  002F86  502A               	movf	i2printf@c,w,c
 11954                           
 11955                           ; Switch size 1, requested type "space"
 11956                           ; Number of cases is 5, Range of values is 0 to 120
 11957                           ; switch strategies available:
 11958                           ; Name         Instructions Cycles
 11959                           ; simple_byte           16     9 (average)
 11960                           ;	Chosen strategy is simple_byte
 11961  002F88  0A00               	xorlw	0	; case 0
 11962  002F8A  B4D8               	btfsc	status,2,c
 11963  002F8C  0012               	return	
 11964  002F8E  0A64               	xorlw	100	; case 100
 11965  002F90  B4D8               	btfsc	status,2,c
 11966  002F92  D00A               	goto	i2l1076
 11967  002F94  0A0D               	xorlw	13	; case 105
 11968  002F96  B4D8               	btfsc	status,2,c
 11969  002F98  D007               	goto	i2l1076
 11970  002F9A  0A1A               	xorlw	26	; case 115
 11971  002F9C  B4D8               	btfsc	status,2,c
 11972  002F9E  D77A               	goto	i2l1078
 11973  002FA0  0A0B               	xorlw	11	; case 120
 11974  002FA2  B4D8               	btfsc	status,2,c
 11975  002FA4  D775               	goto	i2l1077
 11976  002FA6  D112               	goto	i2u476_40
 11977  002FA8                     i2l1076:
 11978                           
 11979                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11980  002FA8  BE27               	btfsc	i2printf@flag,7,c
 11981  002FAA  D015               	goto	i2l1092
 11982                           
 11983                           ;doprnt.c: 1253: {
 11984                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11985  002FAC  C021  FFD9         	movff	i2printf@ap,fsr2l
 11986  002FB0  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11987  002FB4  CFDE F025          	movff	postinc2,i2printf@val
 11988  002FB8  CFDD F026          	movff	postdec2,i2printf@val+1
 11989  002FBC  0E02               	movlw	2
 11990  002FBE  2621               	addwf	i2printf@ap,f,c
 11991  002FC0  0E00               	movlw	0
 11992  002FC2  2222               	addwfc	i2printf@ap+1,f,c
 11993                           
 11994                           ;doprnt.c: 1261: if((int)val < 0) {
 11995  002FC4  AE26               	btfss	i2printf@val+1,7,c
 11996  002FC6  D04A               	goto	i2l1095
 11997                           
 11998                           ;doprnt.c: 1262: flag |= 0x03;
 11999  002FC8  0E03               	movlw	3
 12000  002FCA  1227               	iorwf	i2printf@flag,f,c
 12001                           
 12002                           ;doprnt.c: 1263: val = -val;
 12003  002FCC  6C25               	negf	i2printf@val,c
 12004  002FCE  1E26               	comf	i2printf@val+1,f,c
 12005  002FD0  B0D8               	btfsc	status,0,c
 12006  002FD2  2A26               	incf	i2printf@val+1,f,c
 12007                           
 12008                           ;doprnt.c: 1264: }
 12009                           ;doprnt.c: 1266: }
 12010  002FD4  D043               	goto	i2l1095
 12011  002FD6                     i2l1092:
 12012                           
 12013                           ;doprnt.c: 1268: else
 12014                           ;doprnt.c: 1273: {
 12015                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12016  002FD6  C021  FFD9         	movff	i2printf@ap,fsr2l
 12017  002FDA  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 12018  002FDE  CFDE F025          	movff	postinc2,i2printf@val
 12019  002FE2  CFDD F026          	movff	postdec2,i2printf@val+1
 12020  002FE6  0E02               	movlw	2
 12021  002FE8  2621               	addwf	i2printf@ap,f,c
 12022  002FEA  0E00               	movlw	0
 12023  002FEC  2222               	addwfc	i2printf@ap+1,f,c
 12024                           
 12025                           ;doprnt.c: 1287: }
 12026                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12027  002FEE  D036               	goto	i2l1095
 12028  002FF0                     
 12029                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12030  002FF0  0E01               	movlw	1
 12031  002FF2  6E2A               	movwf	i2printf@c,c
 12032  002FF4                     i2l5759:
 12033  002FF4  0E05               	movlw	5
 12034  002FF6  182A               	xorwf	i2printf@c,w,c
 12035  002FF8  B4D8               	btfsc	status,2,c
 12036  002FFA  D038               	goto	i2l1100
 12037                           
 12038                           ;doprnt.c: 1306: if(val < dpowers[c])
 12039  002FFC  502A               	movf	i2printf@c,w,c
 12040  002FFE  0D02               	mullw	2
 12041  003000  0EDE               	movlw	low _dpowers
 12042  003002  24F3               	addwf	prodl,w,c
 12043  003004  6EF6               	movwf	tblptrl,c
 12044  003006  0EFC               	movlw	high _dpowers
 12045  003008  20F4               	addwfc	prodh,w,c
 12046  00300A  6EF7               	movwf	tblptrh,c
 12047  00300C                     	if	1	;There are 3 active tblptr bytes
 12048  00300C  6AF8               	clrf	tblptru,c
 12049  00300E  0E00               	movlw	low (__mediumconst shr (0+16))
 12050  003010  22F8               	addwfc	tblptru,f,c
 12051  003012                     	endif
 12052  003012  0009               	tblrd		*+
 12053  003014  50F5               	movf	tablat,w,c
 12054  003016  5C25               	subwf	i2printf@val,w,c
 12055  003018  0009               	tblrd		*+
 12056  00301A  50F5               	movf	tablat,w,c
 12057  00301C  5826               	subwfb	i2printf@val+1,w,c
 12058  00301E  A0D8               	btfss	status,0,c
 12059  003020  D025               	goto	i2l1100
 12060                           
 12061                           ;doprnt.c: 1307: break;
 12062  003022  2A2A               	incf	i2printf@c,f,c
 12063  003024  D7E7               	goto	i2l5759
 12064  003026                     
 12065                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12066  003026  0E01               	movlw	1
 12067  003028  6E2A               	movwf	i2printf@c,c
 12068  00302A                     i2l5773:
 12069  00302A  0E04               	movlw	4
 12070  00302C  182A               	xorwf	i2printf@c,w,c
 12071  00302E  B4D8               	btfsc	status,2,c
 12072  003030  D01D               	goto	i2l1100
 12073                           
 12074                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12075  003032  502A               	movf	i2printf@c,w,c
 12076  003034  0D02               	mullw	2
 12077  003036  0EE8               	movlw	low _hexpowers
 12078  003038  24F3               	addwf	prodl,w,c
 12079  00303A  6EF6               	movwf	tblptrl,c
 12080  00303C  0EFC               	movlw	high _hexpowers
 12081  00303E  20F4               	addwfc	prodh,w,c
 12082  003040  6EF7               	movwf	tblptrh,c
 12083  003042                     	if	1	;There are 3 active tblptr bytes
 12084  003042  6AF8               	clrf	tblptru,c
 12085  003044  0E00               	movlw	low (__mediumconst shr (0+16))
 12086  003046  22F8               	addwfc	tblptru,f,c
 12087  003048                     	endif
 12088  003048  0009               	tblrd		*+
 12089  00304A  50F5               	movf	tablat,w,c
 12090  00304C  5C25               	subwf	i2printf@val,w,c
 12091  00304E  0009               	tblrd		*+
 12092  003050  50F5               	movf	tablat,w,c
 12093  003052  5826               	subwfb	i2printf@val+1,w,c
 12094  003054  A0D8               	btfss	status,0,c
 12095  003056  D00A               	goto	i2l1100
 12096                           
 12097                           ;doprnt.c: 1318: break;
 12098  003058  2A2A               	incf	i2printf@c,f,c
 12099  00305A  D7E7               	goto	i2l5773
 12100  00305C                     i2l1095:
 12101  00305C  5027               	movf	i2printf@flag,w,c
 12102  00305E  0B80               	andlw	128
 12103                           
 12104                           ; Switch size 1, requested type "space"
 12105                           ; Number of cases is 2, Range of values is 0 to 128
 12106                           ; switch strategies available:
 12107                           ; Name         Instructions Cycles
 12108                           ; simple_byte            7     4 (average)
 12109                           ;	Chosen strategy is simple_byte
 12110  003060  0A00               	xorlw	0	; case 0
 12111  003062  B4D8               	btfsc	status,2,c
 12112  003064  D7C5               	goto	i2l1096
 12113  003066  0A80               	xorlw	128	; case 128
 12114  003068  B4D8               	btfsc	status,2,c
 12115  00306A  D7DD               	goto	i2l1101
 12116  00306C                     i2l1100:
 12117                           
 12118                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12119  00306C  5028               	movf	i2printf@width,w,c
 12120  00306E  1029               	iorwf	i2printf@width+1,w,c
 12121  003070  B4D8               	btfsc	status,2,c
 12122  003072  D009               	goto	i2l1105
 12123  003074  C027  F019         	movff	i2printf@flag,??i2_printf
 12124  003078  0E03               	movlw	3
 12125  00307A  1619               	andwf	??i2_printf,f,c
 12126  00307C  B4D8               	btfsc	status,2,c
 12127  00307E  D003               	goto	i2l1105
 12128                           
 12129                           ;doprnt.c: 1346: width--;
 12130  003080  0628               	decf	i2printf@width,f,c
 12131  003082  A0D8               	btfss	status,0,c
 12132  003084  0629               	decf	i2printf@width+1,f,c
 12133  003086                     i2l1105:
 12134                           
 12135                           ;doprnt.c: 1381: if(width > c)
 12136  003086  0E80               	movlw	128
 12137  003088  BE2A               	btfsc	i2printf@c,7,c
 12138  00308A  0E7F               	movlw	127
 12139  00308C  6E19               	movwf	??i2_printf& (0+255),c
 12140  00308E  5028               	movf	i2printf@width,w,c
 12141  003090  5C2A               	subwf	i2printf@c,w,c
 12142  003092  5029               	movf	i2printf@width+1,w,c
 12143  003094  0A80               	xorlw	128
 12144  003096  5819               	subwfb	??i2_printf& (0+255),w,c
 12145  003098  B0D8               	btfsc	status,0,c
 12146  00309A  D007               	goto	i2l1106
 12147                           
 12148                           ;doprnt.c: 1382: width -= c;
 12149  00309C  502A               	movf	i2printf@c,w,c
 12150  00309E  5E28               	subwf	i2printf@width,f,c
 12151  0030A0  0E00               	movlw	0
 12152  0030A2  BE2A               	btfsc	i2printf@c,7,c
 12153  0030A4  0EFF               	movlw	255
 12154  0030A6  5A29               	subwfb	i2printf@width+1,f,c
 12155  0030A8  D004               	goto	i2l1107
 12156  0030AA                     i2l1106:
 12157                           
 12158                           ;doprnt.c: 1383: else
 12159                           ;doprnt.c: 1384: width = 0;
 12160  0030AA  0E00               	movlw	0
 12161  0030AC  6E29               	movwf	i2printf@width+1,c
 12162  0030AE  0E00               	movlw	0
 12163  0030B0  6E28               	movwf	i2printf@width,c
 12164  0030B2                     i2l1107:
 12165                           
 12166                           ;doprnt.c: 1387: if(flag & 0x04) {
 12167  0030B2  A427               	btfss	i2printf@flag,2,c
 12168  0030B4  D014               	goto	i2l1108
 12169                           
 12170                           ;doprnt.c: 1392: if(flag & 0x03)
 12171  0030B6  C027  F019         	movff	i2printf@flag,??i2_printf
 12172  0030BA  0E03               	movlw	3
 12173  0030BC  1619               	andwf	??i2_printf,f,c
 12174  0030BE  B4D8               	btfsc	status,2,c
 12175  0030C0  D003               	goto	i2l1109
 12176                           
 12177                           ;doprnt.c: 1393: (putch('-') );
 12178  0030C2  0E2D               	movlw	45
 12179  0030C4  ECE6  F022         	call	i2_putch
 12180  0030C8                     i2l1109:
 12181                           
 12182                           ;doprnt.c: 1415: if(width)
 12183  0030C8  5028               	movf	i2printf@width,w,c
 12184  0030CA  1029               	iorwf	i2printf@width+1,w,c
 12185  0030CC  B4D8               	btfsc	status,2,c
 12186  0030CE  D01E               	goto	i2l1117
 12187                           
 12188                           ;doprnt.c: 1417: (putch('0') );
 12189                           
 12190                           ;doprnt.c: 1416: do
 12191  0030D0  0E30               	movlw	48
 12192  0030D2  ECE6  F022         	call	i2_putch
 12193                           
 12194                           ;doprnt.c: 1418: while(--width);
 12195  0030D6  0628               	decf	i2printf@width,f,c
 12196  0030D8  A0D8               	btfss	status,0,c
 12197  0030DA  0629               	decf	i2printf@width+1,f,c
 12198  0030DC  D7F5               	goto	i2l1109
 12199  0030DE                     i2l1108:
 12200                           
 12201                           ;doprnt.c: 1422: {
 12202                           ;doprnt.c: 1424: if(width
 12203                           ;doprnt.c: 1428: )
 12204  0030DE  5028               	movf	i2printf@width,w,c
 12205  0030E0  1029               	iorwf	i2printf@width+1,w,c
 12206  0030E2  B4D8               	btfsc	status,2,c
 12207  0030E4  D00A               	goto	i2u474_40
 12208  0030E6                     i2u473_40:
 12209                           
 12210                           ;doprnt.c: 1430: (putch(' ') );
 12211                           
 12212                           ;doprnt.c: 1429: do
 12213  0030E6  0E20               	movlw	32
 12214  0030E8  ECE6  F022         	call	i2_putch
 12215                           
 12216                           ;doprnt.c: 1431: while(--width);
 12217  0030EC  0628               	decf	i2printf@width,f,c
 12218  0030EE  A0D8               	btfss	status,0,c
 12219  0030F0  0629               	decf	i2printf@width+1,f,c
 12220  0030F2  5028               	movf	i2printf@width,w,c
 12221  0030F4  1029               	iorwf	i2printf@width+1,w,c
 12222  0030F6  A4D8               	btfss	status,2,c
 12223  0030F8  D7F6               	goto	i2u473_40
 12224  0030FA                     i2u474_40:
 12225                           
 12226                           ;doprnt.c: 1438: if(flag & 0x03)
 12227  0030FA  C027  F019         	movff	i2printf@flag,??i2_printf
 12228  0030FE  0E03               	movlw	3
 12229  003100  1619               	andwf	??i2_printf,f,c
 12230  003102  B4D8               	btfsc	status,2,c
 12231  003104  D003               	goto	i2l1117
 12232                           
 12233                           ;doprnt.c: 1439: (putch('-') );
 12234  003106  0E2D               	movlw	45
 12235  003108  ECE6  F022         	call	i2_putch
 12236  00310C                     i2l1117:
 12237                           
 12238                           ;doprnt.c: 1469: }
 12239                           ;doprnt.c: 1472: prec = c;
 12240  00310C  C02A  F01E         	movff	i2printf@c,i2printf@prec
 12241                           
 12242                           ;doprnt.c: 1474: while(prec--) {
 12243  003110  D059               	goto	i2l1118
 12244  003112                     
 12245                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12246  003112  501E               	movf	i2printf@prec,w,c
 12247  003114  0D02               	mullw	2
 12248  003116  0EDE               	movlw	low _dpowers
 12249  003118  24F3               	addwf	prodl,w,c
 12250  00311A  6EF6               	movwf	tblptrl,c
 12251  00311C  0EFC               	movlw	high _dpowers
 12252  00311E  20F4               	addwfc	prodh,w,c
 12253  003120  6EF7               	movwf	tblptrh,c
 12254  003122                     	if	1	;There are 3 active tblptr bytes
 12255  003122  6AF8               	clrf	tblptru,c
 12256  003124  0E00               	movlw	low (__mediumconst shr (0+16))
 12257  003126  22F8               	addwfc	tblptru,f,c
 12258  003128                     	endif
 12259  003128  0009               	tblrd		*+
 12260  00312A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12261  00312E  000A               	tblrd		*-
 12262  003130  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12263  003134  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12264  003138  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12265  00313C  EC00  F021         	call	i2___lwdiv	;wreg free
 12266  003140  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12267  003144  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12268  003148  0E00               	movlw	0
 12269  00314A  6E0B               	movwf	i2___lwmod@divisor+1,c
 12270  00314C  0E0A               	movlw	10
 12271  00314E  6E0A               	movwf	i2___lwmod@divisor,c
 12272  003150  ECDF  F021         	call	i2___lwmod	;wreg free
 12273  003154  5008               	movf	?i2___lwmod,w,c
 12274  003156  0F30               	addlw	48
 12275  003158  6E2A               	movwf	i2printf@c,c
 12276                           
 12277                           ;doprnt.c: 1491: break;
 12278  00315A  D031               	goto	i2l1122
 12279  00315C                     
 12280                           ;doprnt.c: 1499: {
 12281                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12282  00315C  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12283  003160  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12284  003164  501E               	movf	i2printf@prec,w,c
 12285  003166  0D02               	mullw	2
 12286  003168  0EE8               	movlw	low _hexpowers
 12287  00316A  24F3               	addwf	prodl,w,c
 12288  00316C  6EF6               	movwf	tblptrl,c
 12289  00316E  0EFC               	movlw	high _hexpowers
 12290  003170  20F4               	addwfc	prodh,w,c
 12291  003172  6EF7               	movwf	tblptrh,c
 12292  003174                     	if	1	;There are 3 active tblptr bytes
 12293  003174  6AF8               	clrf	tblptru,c
 12294  003176  0E00               	movlw	low (__mediumconst shr (0+16))
 12295  003178  22F8               	addwfc	tblptru,f,c
 12296  00317A                     	endif
 12297  00317A  0009               	tblrd		*+
 12298  00317C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12299  003180  000A               	tblrd		*-
 12300  003182  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12301  003186  EC00  F021         	call	i2___lwdiv	;wreg free
 12302  00318A  5001               	movf	?i2___lwdiv,w,c
 12303  00318C  0B0F               	andlw	15
 12304  00318E  6E1D               	movwf	i2printf@idx,c
 12305                           
 12306                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12307  003190  501D               	movf	i2printf@idx,w,c
 12308  003192  0D01               	mullw	1
 12309  003194  0EFE               	movlw	low STR_99
 12310  003196  24F3               	addwf	prodl,w,c
 12311  003198  6EF6               	movwf	tblptrl,c
 12312  00319A  0EFD               	movlw	high STR_99
 12313  00319C  20F4               	addwfc	prodh,w,c
 12314  00319E  6EF7               	movwf	tblptrh,c
 12315  0031A0                     	if	1	;There are 3 active tblptr bytes
 12316  0031A0  6AF8               	clrf	tblptru,c
 12317  0031A2  0E00               	movlw	low (__mediumconst shr (0+16))
 12318  0031A4  22F8               	addwfc	tblptru,f,c
 12319  0031A6                     	endif
 12320  0031A6  0008               	tblrd		*
 12321  0031A8  CFF5 F02A          	movff	tablat,i2printf@c
 12322                           
 12323                           ;doprnt.c: 1523: }
 12324                           
 12325                           ;doprnt.c: 1508: }
 12326                           ;doprnt.c: 1510: break;
 12327  0031AC  D008               	goto	i2l1122
 12328  0031AE  5027               	movf	i2printf@flag,w,c
 12329  0031B0  0B80               	andlw	128
 12330                           
 12331                           ; Switch size 1, requested type "space"
 12332                           ; Number of cases is 2, Range of values is 0 to 128
 12333                           ; switch strategies available:
 12334                           ; Name         Instructions Cycles
 12335                           ; simple_byte            7     4 (average)
 12336                           ;	Chosen strategy is simple_byte
 12337  0031B2  0A00               	xorlw	0	; case 0
 12338  0031B4  B4D8               	btfsc	status,2,c
 12339  0031B6  D7AD               	goto	i2l1121
 12340  0031B8  0A80               	xorlw	128	; case 128
 12341  0031BA  B4D8               	btfsc	status,2,c
 12342  0031BC  D7CF               	goto	i2l1123
 12343  0031BE                     i2l1122:
 12344                           
 12345                           ;doprnt.c: 1524: (putch(c) );
 12346  0031BE  502A               	movf	i2printf@c,w,c
 12347  0031C0  ECE6  F022         	call	i2_putch
 12348  0031C4                     i2l1118:
 12349  0031C4  061E               	decf	i2printf@prec,f,c
 12350  0031C6  281E               	incf	i2printf@prec,w,c
 12351  0031C8  A4D8               	btfss	status,2,c
 12352  0031CA  D7F1               	goto	i2l1120
 12353  0031CC                     i2u476_40:
 12354  0031CC  C00D  FFF6         	movff	i2printf@f,tblptrl
 12355  0031D0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12356  0031D4  4A0D               	infsnz	i2printf@f,f,c
 12357  0031D6  2A0E               	incf	i2printf@f+1,f,c
 12358  0031D8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12359  0031D8  6AF8               	clrf	tblptru,c
 12360  0031DA                     	endif
 12361  0031DA                     	if	0	;tblptru may be non-zero
 12362  0031DA                     	endif
 12363  0031DA  0008               	tblrd		*
 12364  0031DC  CFF5 F02A          	movff	tablat,i2printf@c
 12365  0031E0  502A               	movf	i2printf@c,w,c
 12366  0031E2  B4D8               	btfsc	status,2,c
 12367  0031E4  0012               	return	
 12368  0031E6  D5F8               	goto	i2l1060
 12369  0031E8                     __end_ofi2_printf:
 12370                           	opt stack 0
 12371                           pclatu	equ	0xFFB
 12372                           pclath	equ	0xFFA
 12373                           tblptru	equ	0xFF8
 12374                           tblptrh	equ	0xFF7
 12375                           tblptrl	equ	0xFF6
 12376                           tablat	equ	0xFF5
 12377                           prodh	equ	0xFF4
 12378                           prodl	equ	0xFF3
 12379                           intcon	equ	0xFF2
 12380                           intcon3	equ	0xFF0
 12381                           indf0	equ	0xFEF
 12382                           postinc0	equ	0xFEE
 12383                           fsr0h	equ	0xFEA
 12384                           fsr0l	equ	0xFE9
 12385                           wreg	equ	0xFE8
 12386                           postdec1	equ	0xFE5
 12387                           fsr1h	equ	0xFE2
 12388                           fsr1l	equ	0xFE1
 12389                           indf2	equ	0xFDF
 12390                           postinc2	equ	0xFDE
 12391                           postdec2	equ	0xFDD
 12392                           fsr2h	equ	0xFDA
 12393                           fsr2l	equ	0xFD9
 12394                           status	equ	0xFD8
 12395                           
 12396 ;; *************** function i2_putch *****************
 12397 ;; Defined at:
 12398 ;;		line 24 in file "lcd.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;  data            1    wreg     unsigned char 
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;  data            1    2[COMRAM] unsigned char 
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  1    wreg      void 
 12405 ;; Registers used:
 12406 ;;		wreg, status,2, status,0, cstack
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;Total ram usage:        1 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; Hardware stack levels required when called:    1
 12419 ;; This function calls:
 12420 ;;		i2_lcdNibble
 12421 ;; This function is called by:
 12422 ;;		_interruptHandler
 12423 ;;		i2_printf
 12424 ;; This function uses a non-reentrant model
 12425 ;;
 12426                           
 12427                           	psect	text30
 12428  0045CC                     __ptext30:
 12429                           	opt stack 0
 12430  0045CC                     i2_putch:
 12431                           	opt stack 24
 12432                           
 12433                           ;incstack = 0
 12434                           ;i2putch@data stored from wreg
 12435  0045CC  6E03               	movwf	i2putch@data,c
 12436                           
 12437                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 12438  0045CE  848C               	bsf	3980,2,c	;volatile
 12439                           
 12440                           ;lcd.c: 33: lcdNibble(data);
 12441  0045D0  5003               	movf	i2putch@data,w,c
 12442  0045D2  EC82  F01E         	call	i2_lcdNibble
 12443                           
 12444                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12445  0045D6  0EA0               	movlw	160
 12446  0045D8                     i2u692_47:
 12447  0045D8  D000               	nop2	
 12448  0045DA  2EE8               	decfsz	wreg,f,c
 12449  0045DC  D7FD               	bra	i2u692_47
 12450  0045DE  0012               	return		;funcret
 12451  0045E0                     __end_ofi2_putch:
 12452                           	opt stack 0
 12453                           pclatu	equ	0xFFB
 12454                           pclath	equ	0xFFA
 12455                           tblptru	equ	0xFF8
 12456                           tblptrh	equ	0xFF7
 12457                           tblptrl	equ	0xFF6
 12458                           tablat	equ	0xFF5
 12459                           prodh	equ	0xFF4
 12460                           prodl	equ	0xFF3
 12461                           intcon	equ	0xFF2
 12462                           intcon3	equ	0xFF0
 12463                           indf0	equ	0xFEF
 12464                           postinc0	equ	0xFEE
 12465                           fsr0h	equ	0xFEA
 12466                           fsr0l	equ	0xFE9
 12467                           wreg	equ	0xFE8
 12468                           postdec1	equ	0xFE5
 12469                           fsr1h	equ	0xFE2
 12470                           fsr1l	equ	0xFE1
 12471                           indf2	equ	0xFDF
 12472                           postinc2	equ	0xFDE
 12473                           postdec2	equ	0xFDD
 12474                           fsr2h	equ	0xFDA
 12475                           fsr2l	equ	0xFD9
 12476                           status	equ	0xFD8
 12477                           
 12478 ;; *************** function i2_isdigit *****************
 12479 ;; Defined at:
 12480 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12481 ;; Parameters:    Size  Location     Type
 12482 ;;  c               1    wreg     unsigned char 
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;  c               1    2[COMRAM] unsigned char 
 12485 ;; Return value:  Size  Location     Type
 12486 ;;		None               void
 12487 ;; Registers used:
 12488 ;;		wreg, status,2, status,0
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;Total ram usage:        3 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; This function calls:
 12501 ;;		Nothing
 12502 ;; This function is called by:
 12503 ;;		i2_printf
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           	psect	text31
 12508  004556                     __ptext31:
 12509                           	opt stack 0
 12510  004556                     i2_isdigit:
 12511                           	opt stack 24
 12512                           
 12513                           ;incstack = 0
 12514                           ;i2isdigit@c stored from wreg
 12515  004556  6E03               	movwf	i2isdigit@c,c
 12516  004558  0E00               	movlw	0
 12517  00455A  6E02               	movwf	i2_isdigit$1805,c
 12518  00455C  0E3A               	movlw	58
 12519  00455E  6003               	cpfslt	i2isdigit@c,c
 12520  004560  D005               	goto	i2l1456
 12521  004562  0E2F               	movlw	47
 12522  004564  6403               	cpfsgt	i2isdigit@c,c
 12523  004566  D002               	goto	i2l1456
 12524  004568  0E01               	movlw	1
 12525  00456A  6E02               	movwf	i2_isdigit$1805,c
 12526  00456C                     i2l1456:
 12527  00456C  C002  F001         	movff	i2_isdigit$1805,??i2_isdigit
 12528  004570  3001               	rrcf	??i2_isdigit,w,c
 12529  004572  0012               	return	
 12530  004574                     __end_ofi2_isdigit:
 12531                           	opt stack 0
 12532                           pclatu	equ	0xFFB
 12533                           pclath	equ	0xFFA
 12534                           tblptru	equ	0xFF8
 12535                           tblptrh	equ	0xFF7
 12536                           tblptrl	equ	0xFF6
 12537                           tablat	equ	0xFF5
 12538                           prodh	equ	0xFF4
 12539                           prodl	equ	0xFF3
 12540                           intcon	equ	0xFF2
 12541                           intcon3	equ	0xFF0
 12542                           indf0	equ	0xFEF
 12543                           postinc0	equ	0xFEE
 12544                           fsr0h	equ	0xFEA
 12545                           fsr0l	equ	0xFE9
 12546                           wreg	equ	0xFE8
 12547                           postdec1	equ	0xFE5
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function i2___lwmod *****************
 12558 ;; Defined at:
 12559 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;  dividend        2    7[COMRAM] unsigned int 
 12562 ;;  divisor         2    9[COMRAM] unsigned int 
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  2    7[COMRAM] unsigned int 
 12567 ;; Registers used:
 12568 ;;		wreg, status,2, status,0
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;Total ram usage:        5 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; This function calls:
 12581 ;;		Nothing
 12582 ;; This function is called by:
 12583 ;;		i2_printf
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           	psect	text32
 12588  0043BE                     __ptext32:
 12589                           	opt stack 0
 12590  0043BE                     i2___lwmod:
 12591                           	opt stack 24
 12592                           
 12593                           ;incstack = 0
 12594  0043BE  500A               	movf	i2___lwmod@divisor,w,c
 12595  0043C0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12596  0043C2  B4D8               	btfsc	status,2,c
 12597  0043C4  D018               	goto	i2l1550
 12598  0043C6  0E01               	movlw	1
 12599  0043C8  6E0C               	movwf	i2___lwmod@counter,c
 12600  0043CA  D004               	goto	i2l1545
 12601  0043CC  90D8               	bcf	status,0,c
 12602  0043CE  360A               	rlcf	i2___lwmod@divisor,f,c
 12603  0043D0  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12604  0043D2  2A0C               	incf	i2___lwmod@counter,f,c
 12605  0043D4                     i2l1545:
 12606  0043D4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12607  0043D6  D7FA               	goto	i2l1546
 12608  0043D8                     i2u378_40:
 12609  0043D8  500A               	movf	i2___lwmod@divisor,w,c
 12610  0043DA  5C08               	subwf	i2___lwmod@dividend,w,c
 12611  0043DC  500B               	movf	i2___lwmod@divisor+1,w,c
 12612  0043DE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12613  0043E0  A0D8               	btfss	status,0,c
 12614  0043E2  D004               	goto	i2l1549
 12615  0043E4  500A               	movf	i2___lwmod@divisor,w,c
 12616  0043E6  5E08               	subwf	i2___lwmod@dividend,f,c
 12617  0043E8  500B               	movf	i2___lwmod@divisor+1,w,c
 12618  0043EA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12619  0043EC                     i2l1549:
 12620  0043EC  90D8               	bcf	status,0,c
 12621  0043EE  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12622  0043F0  320A               	rrcf	i2___lwmod@divisor,f,c
 12623  0043F2  2E0C               	decfsz	i2___lwmod@counter,f,c
 12624  0043F4  D7F1               	goto	i2u378_40
 12625  0043F6                     i2l1550:
 12626  0043F6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12627  0043FA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12628  0043FE  0012               	return		;funcret
 12629  004400                     __end_ofi2___lwmod:
 12630                           	opt stack 0
 12631                           pclatu	equ	0xFFB
 12632                           pclath	equ	0xFFA
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon3	equ	0xFF0
 12641                           indf0	equ	0xFEF
 12642                           postinc0	equ	0xFEE
 12643                           fsr0h	equ	0xFEA
 12644                           fsr0l	equ	0xFE9
 12645                           wreg	equ	0xFE8
 12646                           postdec1	equ	0xFE5
 12647                           fsr1h	equ	0xFE2
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           postdec2	equ	0xFDD
 12652                           fsr2h	equ	0xFDA
 12653                           fsr2l	equ	0xFD9
 12654                           status	equ	0xFD8
 12655                           
 12656 ;; *************** function i2___lwdiv *****************
 12657 ;; Defined at:
 12658 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;  dividend        2    0[COMRAM] unsigned int 
 12661 ;;  divisor         2    2[COMRAM] unsigned int 
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12664 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12665 ;; Return value:  Size  Location     Type
 12666 ;;                  2    0[COMRAM] unsigned int 
 12667 ;; Registers used:
 12668 ;;		wreg, status,2, status,0
 12669 ;; Tracked objects:
 12670 ;;		On entry : 0/0
 12671 ;;		On exit  : 0/0
 12672 ;;		Unchanged: 0/0
 12673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12677 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12678 ;;Total ram usage:        7 bytes
 12679 ;; Hardware stack levels used:    1
 12680 ;; This function calls:
 12681 ;;		Nothing
 12682 ;; This function is called by:
 12683 ;;		i2_printf
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           	psect	text33
 12688  004200                     __ptext33:
 12689                           	opt stack 0
 12690  004200                     i2___lwdiv:
 12691                           	opt stack 24
 12692                           
 12693                           ;incstack = 0
 12694  004200  0E00               	movlw	0
 12695  004202  6E06               	movwf	i2___lwdiv@quotient+1,c
 12696  004204  0E00               	movlw	0
 12697  004206  6E05               	movwf	i2___lwdiv@quotient,c
 12698  004208  5003               	movf	i2___lwdiv@divisor,w,c
 12699  00420A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12700  00420C  B4D8               	btfsc	status,2,c
 12701  00420E  D01C               	goto	i2l1540
 12702  004210  0E01               	movlw	1
 12703  004212  6E07               	movwf	i2___lwdiv@counter,c
 12704  004214  D004               	goto	i2l1535
 12705  004216  90D8               	bcf	status,0,c
 12706  004218  3603               	rlcf	i2___lwdiv@divisor,f,c
 12707  00421A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12708  00421C  2A07               	incf	i2___lwdiv@counter,f,c
 12709  00421E                     i2l1535:
 12710  00421E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12711  004220  D7FA               	goto	i2l1536
 12712  004222                     i2u375_40:
 12713  004222  90D8               	bcf	status,0,c
 12714  004224  3605               	rlcf	i2___lwdiv@quotient,f,c
 12715  004226  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12716  004228  5003               	movf	i2___lwdiv@divisor,w,c
 12717  00422A  5C01               	subwf	i2___lwdiv@dividend,w,c
 12718  00422C  5004               	movf	i2___lwdiv@divisor+1,w,c
 12719  00422E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12720  004230  A0D8               	btfss	status,0,c
 12721  004232  D005               	goto	i2l1539
 12722  004234  5003               	movf	i2___lwdiv@divisor,w,c
 12723  004236  5E01               	subwf	i2___lwdiv@dividend,f,c
 12724  004238  5004               	movf	i2___lwdiv@divisor+1,w,c
 12725  00423A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12726  00423C  8005               	bsf	i2___lwdiv@quotient,0,c
 12727  00423E                     i2l1539:
 12728  00423E  90D8               	bcf	status,0,c
 12729  004240  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12730  004242  3203               	rrcf	i2___lwdiv@divisor,f,c
 12731  004244  2E07               	decfsz	i2___lwdiv@counter,f,c
 12732  004246  D7ED               	goto	i2u375_40
 12733  004248                     i2l1540:
 12734  004248  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12735  00424C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12736  004250  0012               	return		;funcret
 12737  004252                     __end_ofi2___lwdiv:
 12738                           	opt stack 0
 12739                           pclatu	equ	0xFFB
 12740                           pclath	equ	0xFFA
 12741                           tblptru	equ	0xFF8
 12742                           tblptrh	equ	0xFF7
 12743                           tblptrl	equ	0xFF6
 12744                           tablat	equ	0xFF5
 12745                           prodh	equ	0xFF4
 12746                           prodl	equ	0xFF3
 12747                           intcon	equ	0xFF2
 12748                           intcon3	equ	0xFF0
 12749                           indf0	equ	0xFEF
 12750                           postinc0	equ	0xFEE
 12751                           fsr0h	equ	0xFEA
 12752                           fsr0l	equ	0xFE9
 12753                           wreg	equ	0xFE8
 12754                           postdec1	equ	0xFE5
 12755                           fsr1h	equ	0xFE2
 12756                           fsr1l	equ	0xFE1
 12757                           indf2	equ	0xFDF
 12758                           postinc2	equ	0xFDE
 12759                           postdec2	equ	0xFDD
 12760                           fsr2h	equ	0xFDA
 12761                           fsr2l	equ	0xFD9
 12762                           status	equ	0xFD8
 12763                           
 12764 ;; *************** function i2_initLCD *****************
 12765 ;; Defined at:
 12766 ;;		line 60 in file "lcd.c"
 12767 ;; Parameters:    Size  Location     Type
 12768 ;;		None
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;		None
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      void 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;Total ram usage:        1 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    2
 12787 ;; This function calls:
 12788 ;;		i2_lcdInst
 12789 ;; This function is called by:
 12790 ;;		_interruptHandler
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           	psect	text34
 12795  00429E                     __ptext34:
 12796                           	opt stack 0
 12797  00429E                     i2_initLCD:
 12798                           	opt stack 23
 12799                           
 12800                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
 12801                           
 12802                           ;incstack = 0
 12803  00429E  0E9C               	movlw	156
 12804  0042A0  6E04               	movwf	??i2_initLCD& (0+255),c
 12805  0042A2  0ED7               	movlw	215
 12806  0042A4                     i2u693_47:
 12807  0042A4  2EE8               	decfsz	wreg,f,c
 12808  0042A6  D7FE               	bra	i2u693_47
 12809  0042A8  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12810  0042AA  D7FC               	bra	i2u693_47
 12811  0042AC  F000               	nop	
 12812                           
 12813                           ;lcd.c: 69: lcdInst(0b00110011);
 12814  0042AE  0E33               	movlw	51
 12815  0042B0  ECF0  F022         	call	i2_lcdInst
 12816                           
 12817                           ;lcd.c: 70: lcdInst(0b00110010);
 12818  0042B4  0E32               	movlw	50
 12819  0042B6  ECF0  F022         	call	i2_lcdInst
 12820                           
 12821                           ;lcd.c: 71: lcdInst(0b00101000);
 12822  0042BA  0E28               	movlw	40
 12823  0042BC  ECF0  F022         	call	i2_lcdInst
 12824                           
 12825                           ;lcd.c: 72: lcdInst(0b00001111);
 12826  0042C0  0E0F               	movlw	15
 12827  0042C2  ECF0  F022         	call	i2_lcdInst
 12828                           
 12829                           ;lcd.c: 73: lcdInst(0b00000110);
 12830  0042C6  0E06               	movlw	6
 12831  0042C8  ECF0  F022         	call	i2_lcdInst
 12832                           
 12833                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 12834  0042CC  0E01               	movlw	1
 12835  0042CE  ECF0  F022         	call	i2_lcdInst
 12836  0042D2  0E9C               	movlw	156
 12837  0042D4  6E04               	movwf	??i2_initLCD& (0+255),c
 12838  0042D6  0ED7               	movlw	215
 12839  0042D8                     i2u694_47:
 12840  0042D8  2EE8               	decfsz	wreg,f,c
 12841  0042DA  D7FE               	bra	i2u694_47
 12842  0042DC  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12843  0042DE  D7FC               	bra	i2u694_47
 12844  0042E0  F000               	nop	
 12845                           
 12846                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12847  0042E2  0E0F               	movlw	15
 12848  0042E4  ECF0  F022         	call	i2_lcdInst
 12849  0042E8  0012               	return		;funcret
 12850  0042EA                     __end_ofi2_initLCD:
 12851                           	opt stack 0
 12852                           pclatu	equ	0xFFB
 12853                           pclath	equ	0xFFA
 12854                           tblptru	equ	0xFF8
 12855                           tblptrh	equ	0xFF7
 12856                           tblptrl	equ	0xFF6
 12857                           tablat	equ	0xFF5
 12858                           prodh	equ	0xFF4
 12859                           prodl	equ	0xFF3
 12860                           intcon	equ	0xFF2
 12861                           intcon3	equ	0xFF0
 12862                           indf0	equ	0xFEF
 12863                           postinc0	equ	0xFEE
 12864                           fsr0h	equ	0xFEA
 12865                           fsr0l	equ	0xFE9
 12866                           wreg	equ	0xFE8
 12867                           postdec1	equ	0xFE5
 12868                           fsr1h	equ	0xFE2
 12869                           fsr1l	equ	0xFE1
 12870                           indf2	equ	0xFDF
 12871                           postinc2	equ	0xFDE
 12872                           postdec2	equ	0xFDD
 12873                           fsr2h	equ	0xFDA
 12874                           fsr2l	equ	0xFD9
 12875                           status	equ	0xFD8
 12876                           
 12877 ;; *************** function i2_lcdInst *****************
 12878 ;; Defined at:
 12879 ;;		line 11 in file "lcd.c"
 12880 ;; Parameters:    Size  Location     Type
 12881 ;;  data            1    wreg     unsigned char 
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;  data            1    2[COMRAM] unsigned char 
 12884 ;; Return value:  Size  Location     Type
 12885 ;;                  1    wreg      void 
 12886 ;; Registers used:
 12887 ;;		wreg, status,2, status,0, cstack
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12897 ;;Total ram usage:        1 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:    1
 12900 ;; This function calls:
 12901 ;;		i2_lcdNibble
 12902 ;; This function is called by:
 12903 ;;		_interruptHandler
 12904 ;;		i2_initLCD
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           	psect	text35
 12909  0045E0                     __ptext35:
 12910                           	opt stack 0
 12911  0045E0                     i2_lcdInst:
 12912                           	opt stack 24
 12913                           
 12914                           ;incstack = 0
 12915                           ;i2lcdInst@data stored from wreg
 12916  0045E0  6E03               	movwf	i2lcdInst@data,c
 12917                           
 12918                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12919  0045E2  948C               	bcf	3980,2,c	;volatile
 12920                           
 12921                           ;lcd.c: 20: lcdNibble(data);
 12922  0045E4  5003               	movf	i2lcdInst@data,w,c
 12923  0045E6  EC82  F01E         	call	i2_lcdNibble
 12924                           
 12925                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12926  0045EA  0EA0               	movlw	160
 12927  0045EC                     i2u695_47:
 12928  0045EC  D000               	nop2	
 12929  0045EE  2EE8               	decfsz	wreg,f,c
 12930  0045F0  D7FD               	bra	i2u695_47
 12931  0045F2  0012               	return		;funcret
 12932  0045F4                     __end_ofi2_lcdInst:
 12933                           	opt stack 0
 12934                           pclatu	equ	0xFFB
 12935                           pclath	equ	0xFFA
 12936                           tblptru	equ	0xFF8
 12937                           tblptrh	equ	0xFF7
 12938                           tblptrl	equ	0xFF6
 12939                           tablat	equ	0xFF5
 12940                           prodh	equ	0xFF4
 12941                           prodl	equ	0xFF3
 12942                           intcon	equ	0xFF2
 12943                           intcon3	equ	0xFF0
 12944                           indf0	equ	0xFEF
 12945                           postinc0	equ	0xFEE
 12946                           fsr0h	equ	0xFEA
 12947                           fsr0l	equ	0xFE9
 12948                           wreg	equ	0xFE8
 12949                           postdec1	equ	0xFE5
 12950                           fsr1h	equ	0xFE2
 12951                           fsr1l	equ	0xFE1
 12952                           indf2	equ	0xFDF
 12953                           postinc2	equ	0xFDE
 12954                           postdec2	equ	0xFDD
 12955                           fsr2h	equ	0xFDA
 12956                           fsr2l	equ	0xFD9
 12957                           status	equ	0xFD8
 12958                           
 12959 ;; *************** function i2_lcdNibble *****************
 12960 ;; Defined at:
 12961 ;;		line 37 in file "lcd.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;  data            1    wreg     unsigned char 
 12964 ;; Auto vars:     Size  Location     Type
 12965 ;;  data            1    1[COMRAM] unsigned char 
 12966 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, status,2, status,0
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;Total ram usage:        2 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; This function calls:
 12983 ;;		Nothing
 12984 ;; This function is called by:
 12985 ;;		i2_lcdInst
 12986 ;;		i2_putch
 12987 ;; This function uses a non-reentrant model
 12988 ;;
 12989                           
 12990                           	psect	text36
 12991  003D04                     __ptext36:
 12992                           	opt stack 0
 12993  003D04                     i2_lcdNibble:
 12994                           	opt stack 24
 12995                           
 12996                           ;incstack = 0
 12997                           ;i2lcdNibble@data stored from wreg
 12998  003D04  6E02               	movwf	i2lcdNibble@data,c
 12999                           
 13000                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 13001  003D06  5002               	movf	i2lcdNibble@data,w,c
 13002  003D08  0BF0               	andlw	240
 13003  003D0A  6E01               	movwf	i2lcdNibble@temp,c
 13004                           
 13005                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 13006  003D0C  508C               	movf	3980,w,c	;volatile
 13007  003D0E  0B0F               	andlw	15
 13008  003D10  6E8C               	movwf	3980,c	;volatile
 13009                           
 13010                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 13011  003D12  5001               	movf	i2lcdNibble@temp,w,c
 13012  003D14  108C               	iorwf	3980,w,c	;volatile
 13013  003D16  6E8C               	movwf	3980,c	;volatile
 13014                           
 13015                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13016  003D18  0E00               	movlw	0
 13017  003D1A  BEF2               	btfsc	intcon,7,c	;volatile
 13018  003D1C  0E01               	movlw	1
 13019  003D1E  0100               	movlb	0	; () banked
 13020  003D20  6FC0               	movwf	_LCDinterruptState& (0+255),b
 13021                           
 13022                           ; BSR set to: 0
 13023  003D22  9EF2               	bcf	intcon,7,c	;volatile
 13024                           
 13025                           ; BSR set to: 0
 13026  003D24  868C               	bsf	3980,3,c	;volatile
 13027                           
 13028                           ; BSR set to: 0
 13029  003D26  0E42               	movlw	66
 13030  003D28                     i2u696_47:
 13031  003D28  2EE8               	decfsz	wreg,f,c
 13032  003D2A  D7FE               	bra	i2u696_47
 13033  003D2C  D000               	nop2	
 13034  003D2E  968C               	bcf	3980,3,c	;volatile
 13035  003D30  0EA0               	movlw	160
 13036  003D32                     i2u697_47:
 13037  003D32  D000               	nop2	
 13038  003D34  2EE8               	decfsz	wreg,f,c
 13039  003D36  D7FD               	bra	i2u697_47
 13040  003D38  0100               	movlb	0	; () banked
 13041  003D3A  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
 13042  003D3C  D002               	bra	i2u332_45
 13043  003D3E  9EF2               	bcf	intcon,7,c	;volatile
 13044  003D40  D001               	bra	i2u332_46
 13045  003D42                     i2u332_45:
 13046  003D42  8EF2               	bsf	intcon,7,c	;volatile
 13047  003D44                     i2u332_46:
 13048                           
 13049                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 13050  003D44  3802               	swapf	i2lcdNibble@data,w,c
 13051  003D46  0BF0               	andlw	240
 13052  003D48  6E02               	movwf	i2lcdNibble@data,c
 13053                           
 13054                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 13055  003D4A  5002               	movf	i2lcdNibble@data,w,c
 13056  003D4C  0BF0               	andlw	240
 13057  003D4E  6E01               	movwf	i2lcdNibble@temp,c
 13058                           
 13059                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 13060  003D50  508C               	movf	3980,w,c	;volatile
 13061  003D52  0B0F               	andlw	15
 13062  003D54  6E8C               	movwf	3980,c	;volatile
 13063                           
 13064                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 13065  003D56  5001               	movf	i2lcdNibble@temp,w,c
 13066  003D58  108C               	iorwf	3980,w,c	;volatile
 13067  003D5A  6E8C               	movwf	3980,c	;volatile
 13068                           
 13069                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13070  003D5C  0E00               	movlw	0
 13071  003D5E  BEF2               	btfsc	intcon,7,c	;volatile
 13072  003D60  0E01               	movlw	1
 13073  003D62  0100               	movlb	0	; () banked
 13074  003D64  6FC0               	movwf	_LCDinterruptState& (0+255),b
 13075                           
 13076                           ; BSR set to: 0
 13077  003D66  9EF2               	bcf	intcon,7,c	;volatile
 13078                           
 13079                           ; BSR set to: 0
 13080  003D68  868C               	bsf	3980,3,c	;volatile
 13081                           
 13082                           ; BSR set to: 0
 13083  003D6A  0E42               	movlw	66
 13084  003D6C                     i2u698_47:
 13085  003D6C  2EE8               	decfsz	wreg,f,c
 13086  003D6E  D7FE               	bra	i2u698_47
 13087  003D70  D000               	nop2	
 13088  003D72  968C               	bcf	3980,3,c	;volatile
 13089  003D74  0EA0               	movlw	160
 13090  003D76                     i2u699_47:
 13091  003D76  D000               	nop2	
 13092  003D78  2EE8               	decfsz	wreg,f,c
 13093  003D7A  D7FD               	bra	i2u699_47
 13094  003D7C  0100               	movlb	0	; () banked
 13095  003D7E  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
 13096  003D80  D002               	bra	i2u333_45
 13097  003D82  9EF2               	bcf	intcon,7,c	;volatile
 13098  003D84  D001               	bra	i2u333_46
 13099  003D86                     i2u333_45:
 13100  003D86  8EF2               	bsf	intcon,7,c	;volatile
 13101  003D88                     i2u333_46:
 13102  003D88  0012               	return		;funcret
 13103  003D8A                     __end_ofi2_lcdNibble:
 13104                           	opt stack 0
 13105                           pclatu	equ	0xFFB
 13106                           pclath	equ	0xFFA
 13107                           tblptru	equ	0xFF8
 13108                           tblptrh	equ	0xFF7
 13109                           tblptrl	equ	0xFF6
 13110                           tablat	equ	0xFF5
 13111                           prodh	equ	0xFF4
 13112                           prodl	equ	0xFF3
 13113                           intcon	equ	0xFF2
 13114                           intcon3	equ	0xFF0
 13115                           indf0	equ	0xFEF
 13116                           postinc0	equ	0xFEE
 13117                           fsr0h	equ	0xFEA
 13118                           fsr0l	equ	0xFE9
 13119                           wreg	equ	0xFE8
 13120                           postdec1	equ	0xFE5
 13121                           fsr1h	equ	0xFE2
 13122                           fsr1l	equ	0xFE1
 13123                           indf2	equ	0xFDF
 13124                           postinc2	equ	0xFDE
 13125                           postdec2	equ	0xFDD
 13126                           fsr2h	equ	0xFDA
 13127                           fsr2l	equ	0xFD9
 13128                           status	equ	0xFD8
 13129                           
 13130 ;; *************** function i2_generate_compartment_array *****************
 13131 ;; Defined at:
 13132 ;;		line 220 in file "keypad.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  step            2    0[COMRAM] int 
 13135 ;; Auto vars:     Size  Location     Type
 13136 ;;		None
 13137 ;; Return value:  Size  Location     Type
 13138 ;;                  1    wreg      void 
 13139 ;; Registers used:
 13140 ;;		wreg, status,2, status,0
 13141 ;; Tracked objects:
 13142 ;;		On entry : 0/0
 13143 ;;		On exit  : 0/0
 13144 ;;		Unchanged: 0/0
 13145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;Total ram usage:        4 bytes
 13151 ;; Hardware stack levels used:    1
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		_interruptHandler
 13156 ;; This function uses a non-reentrant model
 13157 ;;
 13158                           
 13159                           	psect	text37
 13160  0031E8                     __ptext37:
 13161                           	opt stack 0
 13162  0031E8                     i2_generate_compartment_array:
 13163                           	opt stack 25
 13164                           
 13165                           ;keypad.c: 222: switch(step){
 13166                           
 13167                           ;incstack = 0
 13168  0031E8  D11C               	goto	i2l915
 13169  0031EA                     
 13170                           ;keypad.c: 224: compartment_array[0] = 1;
 13171  0031EA  0E00               	movlw	0
 13172  0031EC  0100               	movlb	0	; () banked
 13173  0031EE  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13174  0031F0  0E01               	movlw	1
 13175  0031F2  6F80               	movwf	_compartment_array& (0+255),b
 13176                           
 13177                           ;keypad.c: 225: compartment_array[2] = 1;
 13178  0031F4  0E00               	movlw	0
 13179  0031F6  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13180  0031F8  0E01               	movlw	1
 13181  0031FA  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13182                           
 13183                           ;keypad.c: 226: compartment_array[4] = 1;
 13184  0031FC  0E00               	movlw	0
 13185  0031FE  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13186  003200  0E01               	movlw	1
 13187  003202  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13188                           
 13189                           ;keypad.c: 227: compartment_array[6] = 1;
 13190  003204  0E00               	movlw	0
 13191  003206  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13192  003208  0E01               	movlw	1
 13193  00320A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13194                           
 13195                           ;keypad.c: 230: compartment_number[0] = 0;
 13196  00320C  0E00               	movlw	0
 13197  00320E  6E47               	movwf	_compartment_number+1,c
 13198  003210  0E00               	movlw	0
 13199  003212  6E46               	movwf	_compartment_number,c
 13200                           
 13201                           ;keypad.c: 231: compartment_number[1] = 2;
 13202  003214  0E00               	movlw	0
 13203  003216  6E49               	movwf	_compartment_number+3,c
 13204  003218  0E02               	movlw	2
 13205  00321A  6E48               	movwf	_compartment_number+2,c
 13206                           
 13207                           ;keypad.c: 232: compartment_number[2] = 4;
 13208  00321C  0E00               	movlw	0
 13209  00321E  6E4B               	movwf	_compartment_number+5,c
 13210  003220  0E04               	movlw	4
 13211  003222  6E4A               	movwf	_compartment_number+4,c
 13212                           
 13213                           ;keypad.c: 233: compartment_number[3] = 6;
 13214  003224  0E00               	movlw	0
 13215  003226  6E4D               	movwf	_compartment_number+7,c
 13216  003228  0E06               	movlw	6
 13217  00322A  6E4C               	movwf	_compartment_number+6,c
 13218                           
 13219                           ;keypad.c: 235: break;
 13220  00322C  0012               	return	
 13221  00322E                     
 13222                           ;keypad.c: 237: compartment_array[0] = 1;
 13223                           
 13224                           ; BSR set to: 0
 13225  00322E  0E00               	movlw	0
 13226  003230  0100               	movlb	0	; () banked
 13227  003232  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13228  003234  0E01               	movlw	1
 13229  003236  6F80               	movwf	_compartment_array& (0+255),b
 13230                           
 13231                           ;keypad.c: 238: compartment_array[1] = 1;
 13232  003238  0E00               	movlw	0
 13233  00323A  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13234  00323C  0E01               	movlw	1
 13235  00323E  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13236                           
 13237                           ;keypad.c: 239: compartment_array[3] = 1;
 13238  003240  0E00               	movlw	0
 13239  003242  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13240  003244  0E01               	movlw	1
 13241  003246  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13242                           
 13243                           ;keypad.c: 240: compartment_array[4] = 1;
 13244  003248  0E00               	movlw	0
 13245  00324A  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13246  00324C  0E01               	movlw	1
 13247  00324E  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13248                           
 13249                           ;keypad.c: 241: compartment_array[6] = 1;
 13250  003250  0E00               	movlw	0
 13251  003252  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13252  003254  0E01               	movlw	1
 13253  003256  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13254                           
 13255                           ;keypad.c: 245: compartment_number[0] = 0;
 13256  003258  0E00               	movlw	0
 13257  00325A  6E47               	movwf	_compartment_number+1,c
 13258  00325C  0E00               	movlw	0
 13259  00325E  6E46               	movwf	_compartment_number,c
 13260                           
 13261                           ;keypad.c: 246: compartment_number[1] = 1;
 13262  003260  0E00               	movlw	0
 13263  003262  6E49               	movwf	_compartment_number+3,c
 13264  003264  0E01               	movlw	1
 13265  003266  6E48               	movwf	_compartment_number+2,c
 13266                           
 13267                           ;keypad.c: 247: compartment_number[2] = 3;
 13268  003268  0E00               	movlw	0
 13269  00326A  6E4B               	movwf	_compartment_number+5,c
 13270  00326C  0E03               	movlw	3
 13271  00326E  6E4A               	movwf	_compartment_number+4,c
 13272                           
 13273                           ;keypad.c: 248: compartment_number[3] = 4;
 13274  003270  0E00               	movlw	0
 13275  003272  6E4D               	movwf	_compartment_number+7,c
 13276  003274  0E04               	movlw	4
 13277  003276  6E4C               	movwf	_compartment_number+6,c
 13278                           
 13279                           ;keypad.c: 249: compartment_number[4] = 6;
 13280  003278  0E00               	movlw	0
 13281  00327A  6E4F               	movwf	_compartment_number+9,c
 13282  00327C  0E06               	movlw	6
 13283  00327E  6E4E               	movwf	_compartment_number+8,c
 13284                           
 13285                           ;keypad.c: 251: break;
 13286  003280  0012               	return	
 13287  003282                     
 13288                           ;keypad.c: 254: compartment_array[0] = 1;
 13289                           
 13290                           ; BSR set to: 0
 13291  003282  0E00               	movlw	0
 13292  003284  0100               	movlb	0	; () banked
 13293  003286  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13294  003288  0E01               	movlw	1
 13295  00328A  6F80               	movwf	_compartment_array& (0+255),b
 13296                           
 13297                           ;keypad.c: 255: compartment_array[1] = 1;
 13298  00328C  0E00               	movlw	0
 13299  00328E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13300  003290  0E01               	movlw	1
 13301  003292  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13302                           
 13303                           ;keypad.c: 256: compartment_array[2] = 1;
 13304  003294  0E00               	movlw	0
 13305  003296  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13306  003298  0E01               	movlw	1
 13307  00329A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13308                           
 13309                           ;keypad.c: 257: compartment_array[4] = 1;
 13310  00329C  0E00               	movlw	0
 13311  00329E  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13312  0032A0  0E01               	movlw	1
 13313  0032A2  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13314                           
 13315                           ;keypad.c: 258: compartment_array[5] = 1;
 13316  0032A4  0E00               	movlw	0
 13317  0032A6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13318  0032A8  0E01               	movlw	1
 13319  0032AA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13320                           
 13321                           ;keypad.c: 259: compartment_array[6] = 1;
 13322  0032AC  0E00               	movlw	0
 13323  0032AE  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13324  0032B0  0E01               	movlw	1
 13325  0032B2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13326                           
 13327                           ;keypad.c: 262: compartment_number[0] = 0;
 13328  0032B4  0E00               	movlw	0
 13329  0032B6  6E47               	movwf	_compartment_number+1,c
 13330  0032B8  0E00               	movlw	0
 13331  0032BA  6E46               	movwf	_compartment_number,c
 13332                           
 13333                           ;keypad.c: 263: compartment_number[1] = 1;
 13334  0032BC  0E00               	movlw	0
 13335  0032BE  6E49               	movwf	_compartment_number+3,c
 13336  0032C0  0E01               	movlw	1
 13337  0032C2  6E48               	movwf	_compartment_number+2,c
 13338                           
 13339                           ;keypad.c: 264: compartment_number[2] = 2;
 13340  0032C4  0E00               	movlw	0
 13341  0032C6  6E4B               	movwf	_compartment_number+5,c
 13342  0032C8  0E02               	movlw	2
 13343  0032CA  6E4A               	movwf	_compartment_number+4,c
 13344                           
 13345                           ;keypad.c: 265: compartment_number[3] = 4;
 13346  0032CC  0E00               	movlw	0
 13347  0032CE  6E4D               	movwf	_compartment_number+7,c
 13348  0032D0  0E04               	movlw	4
 13349  0032D2  6E4C               	movwf	_compartment_number+6,c
 13350                           
 13351                           ;keypad.c: 266: compartment_number[4] = 5;
 13352  0032D4  0E00               	movlw	0
 13353  0032D6  6E4F               	movwf	_compartment_number+9,c
 13354  0032D8  0E05               	movlw	5
 13355  0032DA  6E4E               	movwf	_compartment_number+8,c
 13356                           
 13357                           ;keypad.c: 267: compartment_number[5] = 6;
 13358  0032DC  0E00               	movlw	0
 13359  0032DE  6E51               	movwf	_compartment_number+11,c
 13360  0032E0  0E06               	movlw	6
 13361  0032E2  6E50               	movwf	_compartment_number+10,c
 13362                           
 13363                           ;keypad.c: 269: break;
 13364  0032E4  0012               	return	
 13365  0032E6                     
 13366                           ;keypad.c: 271: compartment_array[0] = 1;
 13367                           
 13368                           ; BSR set to: 0
 13369  0032E6  0E00               	movlw	0
 13370  0032E8  0100               	movlb	0	; () banked
 13371  0032EA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13372  0032EC  0E01               	movlw	1
 13373  0032EE  6F80               	movwf	_compartment_array& (0+255),b
 13374                           
 13375                           ;keypad.c: 272: compartment_array[1] = 1;
 13376  0032F0  0E00               	movlw	0
 13377  0032F2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13378  0032F4  0E01               	movlw	1
 13379  0032F6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13380                           
 13381                           ;keypad.c: 273: compartment_array[2] = 1;
 13382  0032F8  0E00               	movlw	0
 13383  0032FA  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13384  0032FC  0E01               	movlw	1
 13385  0032FE  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13386                           
 13387                           ;keypad.c: 274: compartment_array[3] = 1;
 13388  003300  0E00               	movlw	0
 13389  003302  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13390  003304  0E01               	movlw	1
 13391  003306  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13392                           
 13393                           ;keypad.c: 275: compartment_array[4] = 1;
 13394  003308  0E00               	movlw	0
 13395  00330A  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13396  00330C  0E01               	movlw	1
 13397  00330E  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13398                           
 13399                           ;keypad.c: 276: compartment_array[5] = 1;
 13400  003310  0E00               	movlw	0
 13401  003312  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13402  003314  0E01               	movlw	1
 13403  003316  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13404                           
 13405                           ;keypad.c: 277: compartment_array[6] = 1;
 13406  003318  0E00               	movlw	0
 13407  00331A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13408  00331C  0E01               	movlw	1
 13409  00331E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13410                           
 13411                           ;keypad.c: 280: compartment_number[0] = 0;
 13412  003320  0E00               	movlw	0
 13413  003322  6E47               	movwf	_compartment_number+1,c
 13414  003324  0E00               	movlw	0
 13415  003326  6E46               	movwf	_compartment_number,c
 13416                           
 13417                           ;keypad.c: 281: compartment_number[1] = 1;
 13418  003328  0E00               	movlw	0
 13419  00332A  6E49               	movwf	_compartment_number+3,c
 13420  00332C  0E01               	movlw	1
 13421  00332E  6E48               	movwf	_compartment_number+2,c
 13422                           
 13423                           ;keypad.c: 282: compartment_number[2] = 2;
 13424  003330  0E00               	movlw	0
 13425  003332  6E4B               	movwf	_compartment_number+5,c
 13426  003334  0E02               	movlw	2
 13427  003336  6E4A               	movwf	_compartment_number+4,c
 13428                           
 13429                           ;keypad.c: 283: compartment_number[3] = 3;
 13430  003338  0E00               	movlw	0
 13431  00333A  6E4D               	movwf	_compartment_number+7,c
 13432  00333C  0E03               	movlw	3
 13433  00333E  6E4C               	movwf	_compartment_number+6,c
 13434                           
 13435                           ;keypad.c: 284: compartment_number[4] = 4;
 13436  003340  0E00               	movlw	0
 13437  003342  6E4F               	movwf	_compartment_number+9,c
 13438  003344  0E04               	movlw	4
 13439  003346  6E4E               	movwf	_compartment_number+8,c
 13440                           
 13441                           ;keypad.c: 285: compartment_number[5] = 5;
 13442  003348  0E00               	movlw	0
 13443  00334A  6E51               	movwf	_compartment_number+11,c
 13444  00334C  0E05               	movlw	5
 13445  00334E  6E50               	movwf	_compartment_number+10,c
 13446                           
 13447                           ;keypad.c: 286: compartment_number[6] = 6;
 13448  003350  0E00               	movlw	0
 13449  003352  6E53               	movwf	_compartment_number+13,c
 13450  003354  0E06               	movlw	6
 13451  003356  6E52               	movwf	_compartment_number+12,c
 13452                           
 13453                           ;keypad.c: 288: break;
 13454  003358  0012               	return	
 13455  00335A                     
 13456                           ;keypad.c: 290: compartment_array[0] = 1;
 13457                           
 13458                           ; BSR set to: 0
 13459  00335A  0E00               	movlw	0
 13460  00335C  0100               	movlb	0	; () banked
 13461  00335E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13462  003360  0E01               	movlw	1
 13463  003362  6F80               	movwf	_compartment_array& (0+255),b
 13464                           
 13465                           ;keypad.c: 291: compartment_array[1] = 1;
 13466  003364  0E00               	movlw	0
 13467  003366  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13468  003368  0E01               	movlw	1
 13469  00336A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13470                           
 13471                           ;keypad.c: 292: compartment_array[2] = 1;
 13472  00336C  0E00               	movlw	0
 13473  00336E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13474  003370  0E01               	movlw	1
 13475  003372  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13476                           
 13477                           ;keypad.c: 293: compartment_array[3] = 1;
 13478  003374  0E00               	movlw	0
 13479  003376  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13480  003378  0E01               	movlw	1
 13481  00337A  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13482                           
 13483                           ;keypad.c: 294: compartment_array[4] = 1;
 13484  00337C  0E00               	movlw	0
 13485  00337E  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13486  003380  0E01               	movlw	1
 13487  003382  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13488                           
 13489                           ;keypad.c: 295: compartment_array[5] = 1;
 13490  003384  0E00               	movlw	0
 13491  003386  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13492  003388  0E01               	movlw	1
 13493  00338A  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13494                           
 13495                           ;keypad.c: 296: compartment_array[6] = 1;
 13496  00338C  0E00               	movlw	0
 13497  00338E  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13498  003390  0E01               	movlw	1
 13499  003392  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13500                           
 13501                           ;keypad.c: 297: compartment_array[7] = 1;
 13502  003394  0E00               	movlw	0
 13503  003396  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13504  003398  0E01               	movlw	1
 13505  00339A  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13506                           
 13507                           ;keypad.c: 300: compartment_number[0] = 0;
 13508  00339C  0E00               	movlw	0
 13509  00339E  6E47               	movwf	_compartment_number+1,c
 13510  0033A0  0E00               	movlw	0
 13511  0033A2  6E46               	movwf	_compartment_number,c
 13512                           
 13513                           ;keypad.c: 301: compartment_number[1] = 1;
 13514  0033A4  0E00               	movlw	0
 13515  0033A6  6E49               	movwf	_compartment_number+3,c
 13516  0033A8  0E01               	movlw	1
 13517  0033AA  6E48               	movwf	_compartment_number+2,c
 13518                           
 13519                           ;keypad.c: 302: compartment_number[2] = 2;
 13520  0033AC  0E00               	movlw	0
 13521  0033AE  6E4B               	movwf	_compartment_number+5,c
 13522  0033B0  0E02               	movlw	2
 13523  0033B2  6E4A               	movwf	_compartment_number+4,c
 13524                           
 13525                           ;keypad.c: 303: compartment_number[3] = 3;
 13526  0033B4  0E00               	movlw	0
 13527  0033B6  6E4D               	movwf	_compartment_number+7,c
 13528  0033B8  0E03               	movlw	3
 13529  0033BA  6E4C               	movwf	_compartment_number+6,c
 13530                           
 13531                           ;keypad.c: 304: compartment_number[4] = 4;
 13532  0033BC  0E00               	movlw	0
 13533  0033BE  6E4F               	movwf	_compartment_number+9,c
 13534  0033C0  0E04               	movlw	4
 13535  0033C2  6E4E               	movwf	_compartment_number+8,c
 13536                           
 13537                           ;keypad.c: 305: compartment_number[5] = 5;
 13538  0033C4  0E00               	movlw	0
 13539  0033C6  6E51               	movwf	_compartment_number+11,c
 13540  0033C8  0E05               	movlw	5
 13541  0033CA  6E50               	movwf	_compartment_number+10,c
 13542                           
 13543                           ;keypad.c: 306: compartment_number[6] = 6;
 13544  0033CC  0E00               	movlw	0
 13545  0033CE  6E53               	movwf	_compartment_number+13,c
 13546  0033D0  0E06               	movlw	6
 13547  0033D2  6E52               	movwf	_compartment_number+12,c
 13548                           
 13549                           ;keypad.c: 307: compartment_number[7] = 7;
 13550  0033D4  0E00               	movlw	0
 13551  0033D6  6E55               	movwf	_compartment_number+15,c
 13552  0033D8  0E07               	movlw	7
 13553  0033DA  6E54               	movwf	_compartment_number+14,c
 13554                           
 13555                           ;keypad.c: 309: break;
 13556  0033DC  0012               	return	
 13557  0033DE                     
 13558                           ;keypad.c: 311: compartment_array[0] = 0;
 13559                           
 13560                           ; BSR set to: 0
 13561  0033DE  0E00               	movlw	0
 13562  0033E0  0100               	movlb	0	; () banked
 13563  0033E2  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13564  0033E4  0E00               	movlw	0
 13565  0033E6  6F80               	movwf	_compartment_array& (0+255),b
 13566                           
 13567                           ;keypad.c: 312: compartment_array[1] = 0;
 13568  0033E8  0E00               	movlw	0
 13569  0033EA  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13570  0033EC  0E00               	movlw	0
 13571  0033EE  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13572                           
 13573                           ;keypad.c: 313: compartment_array[2] = 0;
 13574  0033F0  0E00               	movlw	0
 13575  0033F2  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13576  0033F4  0E00               	movlw	0
 13577  0033F6  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13578                           
 13579                           ;keypad.c: 314: compartment_array[3] = 0;
 13580  0033F8  0E00               	movlw	0
 13581  0033FA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13582  0033FC  0E00               	movlw	0
 13583  0033FE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13584                           
 13585                           ;keypad.c: 315: compartment_array[4] = 0;
 13586  003400  0E00               	movlw	0
 13587  003402  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13588  003404  0E00               	movlw	0
 13589  003406  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13590                           
 13591                           ;keypad.c: 316: compartment_array[5] = 0;
 13592  003408  0E00               	movlw	0
 13593  00340A  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13594  00340C  0E00               	movlw	0
 13595  00340E  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13596                           
 13597                           ;keypad.c: 317: compartment_array[6] = 0;
 13598  003410  0E00               	movlw	0
 13599  003412  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13600  003414  0E00               	movlw	0
 13601  003416  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13602                           
 13603                           ;keypad.c: 318: compartment_array[7] = 0;
 13604  003418  0E00               	movlw	0
 13605  00341A  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13606  00341C  0E00               	movlw	0
 13607  00341E  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13608                           
 13609                           ;keypad.c: 320: }
 13610  003420  0012               	return	
 13611  003422                     i2l915:
 13612                           
 13613                           ; BSR set to: 0
 13614  003422  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 13615  003426  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 13616                           
 13617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13618                           ; Switch size 1, requested type "space"
 13619                           ; Number of cases is 1, Range of values is 0 to 0
 13620                           ; switch strategies available:
 13621                           ; Name         Instructions Cycles
 13622                           ; simple_byte            4     3 (average)
 13623                           ;	Chosen strategy is simple_byte
 13624  00342A  5004               	movf	??i2_generate_compartment_array+1,w,c
 13625  00342C  0A00               	xorlw	0	; case 0
 13626  00342E  A4D8               	btfss	status,2,c
 13627  003430  D7D6               	goto	i2l922
 13628                           
 13629                           ; Switch size 1, requested type "space"
 13630                           ; Number of cases is 5, Range of values is 4 to 8
 13631                           ; switch strategies available:
 13632                           ; Name         Instructions Cycles
 13633                           ; simple_byte           16     9 (average)
 13634                           ;	Chosen strategy is simple_byte
 13635  003432  5003               	movf	??i2_generate_compartment_array,w,c
 13636  003434  0A04               	xorlw	4	; case 4
 13637  003436  B4D8               	btfsc	status,2,c
 13638  003438  D6D8               	goto	i2l916
 13639  00343A  0A01               	xorlw	1	; case 5
 13640  00343C  B4D8               	btfsc	status,2,c
 13641  00343E  D6F7               	goto	i2l918
 13642  003440  0A03               	xorlw	3	; case 6
 13643  003442  B4D8               	btfsc	status,2,c
 13644  003444  D71E               	goto	i2l919
 13645  003446  0A01               	xorlw	1	; case 7
 13646  003448  B4D8               	btfsc	status,2,c
 13647  00344A  D74D               	goto	i2l920
 13648  00344C  0A0F               	xorlw	15	; case 8
 13649  00344E  B4D8               	btfsc	status,2,c
 13650  003450  D784               	goto	i2l921
 13651  003452  D7C5               	goto	i2l922
 13652  003454                     __end_ofi2_generate_compartment_array:
 13653                           	opt stack 0
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon3	equ	0xFF0
 13664                           indf0	equ	0xFEF
 13665                           postinc0	equ	0xFEE
 13666                           fsr0h	equ	0xFEA
 13667                           fsr0l	equ	0xFE9
 13668                           wreg	equ	0xFE8
 13669                           postdec1	equ	0xFE5
 13670                           fsr1h	equ	0xFE2
 13671                           fsr1l	equ	0xFE1
 13672                           indf2	equ	0xFDF
 13673                           postinc2	equ	0xFDE
 13674                           postdec2	equ	0xFDD
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679 ;; *************** function i2___awdiv *****************
 13680 ;; Defined at:
 13681 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;  dividend        2    0[COMRAM] int 
 13684 ;;  divisor         2    2[COMRAM] int 
 13685 ;; Auto vars:     Size  Location     Type
 13686 ;;  __awdiv         2    6[COMRAM] int 
 13687 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13688 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  2    0[COMRAM] int 
 13691 ;; Registers used:
 13692 ;;		wreg, status,2, status,0
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;Total ram usage:        8 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; This function calls:
 13705 ;;		Nothing
 13706 ;; This function is called by:
 13707 ;;		_interruptHandler
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           	psect	text38
 13712  003E94                     __ptext38:
 13713                           	opt stack 0
 13714  003E94                     i2___awdiv:
 13715                           	opt stack 25
 13716                           
 13717                           ;incstack = 0
 13718  003E94  0E00               	movlw	0
 13719  003E96  6E06               	movwf	i2___awdiv@sign,c
 13720  003E98  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13721  003E9A  D006               	goto	i2l1294
 13722  003E9C  6C03               	negf	i2___awdiv@divisor,c
 13723  003E9E  1E04               	comf	i2___awdiv@divisor+1,f,c
 13724  003EA0  B0D8               	btfsc	status,0,c
 13725  003EA2  2A04               	incf	i2___awdiv@divisor+1,f,c
 13726  003EA4  0E01               	movlw	1
 13727  003EA6  6E06               	movwf	i2___awdiv@sign,c
 13728  003EA8                     i2l1294:
 13729  003EA8  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13730  003EAA  D006               	goto	i2l1295
 13731  003EAC  6C01               	negf	i2___awdiv@dividend,c
 13732  003EAE  1E02               	comf	i2___awdiv@dividend+1,f,c
 13733  003EB0  B0D8               	btfsc	status,0,c
 13734  003EB2  2A02               	incf	i2___awdiv@dividend+1,f,c
 13735  003EB4  0E01               	movlw	1
 13736  003EB6  1A06               	xorwf	i2___awdiv@sign,f,c
 13737  003EB8                     i2l1295:
 13738  003EB8  0E00               	movlw	0
 13739  003EBA  6E08               	movwf	i2___awdiv@quotient+1,c
 13740  003EBC  0E00               	movlw	0
 13741  003EBE  6E07               	movwf	i2___awdiv@quotient,c
 13742  003EC0  5003               	movf	i2___awdiv@divisor,w,c
 13743  003EC2  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13744  003EC4  B4D8               	btfsc	status,2,c
 13745  003EC6  D01C               	goto	i2l1302
 13746  003EC8  0E01               	movlw	1
 13747  003ECA  6E05               	movwf	i2___awdiv@counter,c
 13748  003ECC  D004               	goto	i2l1297
 13749  003ECE  90D8               	bcf	status,0,c
 13750  003ED0  3603               	rlcf	i2___awdiv@divisor,f,c
 13751  003ED2  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13752  003ED4  2A05               	incf	i2___awdiv@counter,f,c
 13753  003ED6                     i2l1297:
 13754  003ED6  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13755  003ED8  D7FA               	goto	i2l1298
 13756  003EDA                     i2u481_40:
 13757  003EDA  90D8               	bcf	status,0,c
 13758  003EDC  3607               	rlcf	i2___awdiv@quotient,f,c
 13759  003EDE  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13760  003EE0  5003               	movf	i2___awdiv@divisor,w,c
 13761  003EE2  5C01               	subwf	i2___awdiv@dividend,w,c
 13762  003EE4  5004               	movf	i2___awdiv@divisor+1,w,c
 13763  003EE6  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13764  003EE8  A0D8               	btfss	status,0,c
 13765  003EEA  D005               	goto	i2l1301
 13766  003EEC  5003               	movf	i2___awdiv@divisor,w,c
 13767  003EEE  5E01               	subwf	i2___awdiv@dividend,f,c
 13768  003EF0  5004               	movf	i2___awdiv@divisor+1,w,c
 13769  003EF2  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13770  003EF4  8007               	bsf	i2___awdiv@quotient,0,c
 13771  003EF6                     i2l1301:
 13772  003EF6  90D8               	bcf	status,0,c
 13773  003EF8  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13774  003EFA  3203               	rrcf	i2___awdiv@divisor,f,c
 13775  003EFC  2E05               	decfsz	i2___awdiv@counter,f,c
 13776  003EFE  D7ED               	goto	i2u481_40
 13777  003F00                     i2l1302:
 13778  003F00  5006               	movf	i2___awdiv@sign,w,c
 13779  003F02  B4D8               	btfsc	status,2,c
 13780  003F04  D004               	goto	i2l1303
 13781  003F06  6C07               	negf	i2___awdiv@quotient,c
 13782  003F08  1E08               	comf	i2___awdiv@quotient+1,f,c
 13783  003F0A  B0D8               	btfsc	status,0,c
 13784  003F0C  2A08               	incf	i2___awdiv@quotient+1,f,c
 13785  003F0E                     i2l1303:
 13786  003F0E  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13787  003F12  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13788  003F16  0012               	return	
 13789  003F18                     __end_ofi2___awdiv:
 13790                           	opt stack 0
 13791                           pclatu	equ	0xFFB
 13792                           pclath	equ	0xFFA
 13793                           tblptru	equ	0xFF8
 13794                           tblptrh	equ	0xFF7
 13795                           tblptrl	equ	0xFF6
 13796                           tablat	equ	0xFF5
 13797                           prodh	equ	0xFF4
 13798                           prodl	equ	0xFF3
 13799                           intcon	equ	0xFF2
 13800                           intcon3	equ	0xFF0
 13801                           indf0	equ	0xFEF
 13802                           postinc0	equ	0xFEE
 13803                           fsr0h	equ	0xFEA
 13804                           fsr0l	equ	0xFE9
 13805                           wreg	equ	0xFE8
 13806                           postdec1	equ	0xFE5
 13807                           fsr1h	equ	0xFE2
 13808                           fsr1l	equ	0xFE1
 13809                           indf2	equ	0xFDF
 13810                           postinc2	equ	0xFDE
 13811                           postdec2	equ	0xFDD
 13812                           fsr2h	equ	0xFDA
 13813                           fsr2l	equ	0xFD9
 13814                           status	equ	0xFD8
 13815                           
 13816 ;; *************** function i2_I2C_Master_Write *****************
 13817 ;; Defined at:
 13818 ;;		line 108 in file "I2C.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;		None
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      void 
 13825 ;; Registers used:
 13826 ;;		wreg, status,2, status,0, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;Total ram usage:        2 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:    1
 13839 ;; This function calls:
 13840 ;;		i2_I2C_Master_Wait
 13841 ;; This function is called by:
 13842 ;;		_interruptHandler
 13843 ;; This function uses a non-reentrant model
 13844 ;;
 13845                           
 13846                           	psect	text39
 13847  00461C                     __ptext39:
 13848                           	opt stack 0
 13849  00461C                     i2_I2C_Master_Write:
 13850                           	opt stack 24
 13851                           
 13852                           ;I2C.c: 116: I2C_Master_Wait();
 13853                           
 13854                           ;incstack = 0
 13855  00461C  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 13856                           
 13857                           ;I2C.c: 117: SSPBUF = byteToWrite;
 13858  004620  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 13859  004624  0012               	return		;funcret
 13860  004626                     __end_ofi2_I2C_Master_Write:
 13861                           	opt stack 0
 13862                           pclatu	equ	0xFFB
 13863                           pclath	equ	0xFFA
 13864                           tblptru	equ	0xFF8
 13865                           tblptrh	equ	0xFF7
 13866                           tblptrl	equ	0xFF6
 13867                           tablat	equ	0xFF5
 13868                           prodh	equ	0xFF4
 13869                           prodl	equ	0xFF3
 13870                           intcon	equ	0xFF2
 13871                           intcon3	equ	0xFF0
 13872                           indf0	equ	0xFEF
 13873                           postinc0	equ	0xFEE
 13874                           fsr0h	equ	0xFEA
 13875                           fsr0l	equ	0xFE9
 13876                           wreg	equ	0xFE8
 13877                           postdec1	equ	0xFE5
 13878                           fsr1h	equ	0xFE2
 13879                           fsr1l	equ	0xFE1
 13880                           indf2	equ	0xFDF
 13881                           postinc2	equ	0xFDE
 13882                           postdec2	equ	0xFDD
 13883                           fsr2h	equ	0xFDA
 13884                           fsr2l	equ	0xFD9
 13885                           status	equ	0xFD8
 13886                           
 13887 ;; *************** function i2_I2C_Master_Stop *****************
 13888 ;; Defined at:
 13889 ;;		line 95 in file "I2C.c"
 13890 ;; Parameters:    Size  Location     Type
 13891 ;;		None
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;		None
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  1    wreg      void 
 13896 ;; Registers used:
 13897 ;;		wreg, status,2, status,0, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13907 ;;Total ram usage:        0 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    1
 13910 ;; This function calls:
 13911 ;;		i2_I2C_Master_Wait
 13912 ;; This function is called by:
 13913 ;;		_interruptHandler
 13914 ;; This function uses a non-reentrant model
 13915 ;;
 13916                           
 13917                           	psect	text40
 13918  00463E                     __ptext40:
 13919                           	opt stack 0
 13920  00463E                     i2_I2C_Master_Stop:
 13921                           	opt stack 24
 13922                           
 13923                           ;I2C.c: 104: I2C_Master_Wait();
 13924                           
 13925                           ;incstack = 0
 13926  00463E  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 13927                           
 13928                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13929  004642  84C5               	bsf	4037,2,c	;volatile
 13930  004644  0012               	return		;funcret
 13931  004646                     __end_ofi2_I2C_Master_Stop:
 13932                           	opt stack 0
 13933                           pclatu	equ	0xFFB
 13934                           pclath	equ	0xFFA
 13935                           tblptru	equ	0xFF8
 13936                           tblptrh	equ	0xFF7
 13937                           tblptrl	equ	0xFF6
 13938                           tablat	equ	0xFF5
 13939                           prodh	equ	0xFF4
 13940                           prodl	equ	0xFF3
 13941                           intcon	equ	0xFF2
 13942                           intcon3	equ	0xFF0
 13943                           indf0	equ	0xFEF
 13944                           postinc0	equ	0xFEE
 13945                           fsr0h	equ	0xFEA
 13946                           fsr0l	equ	0xFE9
 13947                           wreg	equ	0xFE8
 13948                           postdec1	equ	0xFE5
 13949                           fsr1h	equ	0xFE2
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           fsr2h	equ	0xFDA
 13955                           fsr2l	equ	0xFD9
 13956                           status	equ	0xFD8
 13957                           
 13958 ;; *************** function i2_I2C_Master_Start *****************
 13959 ;; Defined at:
 13960 ;;		line 69 in file "I2C.c"
 13961 ;; Parameters:    Size  Location     Type
 13962 ;;		None
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;		None
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  1    wreg      void 
 13967 ;; Registers used:
 13968 ;;		wreg, status,2, status,0, cstack
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;Total ram usage:        0 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; Hardware stack levels required when called:    1
 13981 ;; This function calls:
 13982 ;;		i2_I2C_Master_Wait
 13983 ;; This function is called by:
 13984 ;;		_interruptHandler
 13985 ;; This function uses a non-reentrant model
 13986 ;;
 13987                           
 13988                           	psect	text41
 13989  004646                     __ptext41:
 13990                           	opt stack 0
 13991  004646                     i2_I2C_Master_Start:
 13992                           	opt stack 24
 13993                           
 13994                           ;I2C.c: 78: I2C_Master_Wait();
 13995                           
 13996                           ;incstack = 0
 13997  004646  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 13998                           
 13999                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 14000  00464A  80C5               	bsf	4037,0,c	;volatile
 14001  00464C  0012               	return		;funcret
 14002  00464E                     __end_ofi2_I2C_Master_Start:
 14003                           	opt stack 0
 14004                           pclatu	equ	0xFFB
 14005                           pclath	equ	0xFFA
 14006                           tblptru	equ	0xFF8
 14007                           tblptrh	equ	0xFF7
 14008                           tblptrl	equ	0xFF6
 14009                           tablat	equ	0xFF5
 14010                           prodh	equ	0xFF4
 14011                           prodl	equ	0xFF3
 14012                           intcon	equ	0xFF2
 14013                           intcon3	equ	0xFF0
 14014                           indf0	equ	0xFEF
 14015                           postinc0	equ	0xFEE
 14016                           fsr0h	equ	0xFEA
 14017                           fsr0l	equ	0xFE9
 14018                           wreg	equ	0xFE8
 14019                           postdec1	equ	0xFE5
 14020                           fsr1h	equ	0xFE2
 14021                           fsr1l	equ	0xFE1
 14022                           indf2	equ	0xFDF
 14023                           postinc2	equ	0xFDE
 14024                           postdec2	equ	0xFDD
 14025                           fsr2h	equ	0xFDA
 14026                           fsr2l	equ	0xFD9
 14027                           status	equ	0xFD8
 14028                           
 14029 ;; *************** function i2_I2C_Master_Read *****************
 14030 ;; Defined at:
 14031 ;;		line 120 in file "I2C.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;  ackBit          1    wreg     unsigned char 
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;  ackBit          1    1[COMRAM] unsigned char 
 14036 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14037 ;; Return value:  Size  Location     Type
 14038 ;;                  1    wreg      unsigned char 
 14039 ;; Registers used:
 14040 ;;		wreg, status,2, status,0, cstack
 14041 ;; Tracked objects:
 14042 ;;		On entry : 0/0
 14043 ;;		On exit  : 0/0
 14044 ;;		Unchanged: 0/0
 14045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14050 ;;Total ram usage:        2 bytes
 14051 ;; Hardware stack levels used:    1
 14052 ;; Hardware stack levels required when called:    1
 14053 ;; This function calls:
 14054 ;;		i2_I2C_Master_Wait
 14055 ;; This function is called by:
 14056 ;;		_interruptHandler
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           	psect	text42
 14061  004510                     __ptext42:
 14062                           	opt stack 0
 14063  004510                     i2_I2C_Master_Read:
 14064                           	opt stack 24
 14065                           
 14066                           ;incstack = 0
 14067                           ;i2I2C_Master_Read@ackBit stored from wreg
 14068  004510  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 14069                           
 14070                           ;I2C.c: 130: unsigned char receivedByte;
 14071                           ;I2C.c: 132: I2C_Master_Wait();
 14072  004512  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 14073                           
 14074                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 14075  004516  86C5               	bsf	4037,3,c	;volatile
 14076                           
 14077                           ;I2C.c: 135: I2C_Master_Wait();
 14078  004518  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 14079                           
 14080                           ;I2C.c: 136: receivedByte = SSPBUF;
 14081  00451C  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 14082                           
 14083                           ;I2C.c: 138: I2C_Master_Wait();
 14084  004520  ECFA  F022         	call	i2_I2C_Master_Wait	;wreg free
 14085                           
 14086                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 14087  004524  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 14088  004526  D002               	bra	i2u447_45
 14089  004528  9AC5               	bcf	4037,5,c	;volatile
 14090  00452A  D001               	bra	i2u447_46
 14091  00452C                     i2u447_45:
 14092  00452C  8AC5               	bsf	4037,5,c	;volatile
 14093  00452E                     i2u447_46:
 14094                           
 14095                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 14096  00452E  88C5               	bsf	4037,4,c	;volatile
 14097                           
 14098                           ;I2C.c: 142: return receivedByte;
 14099  004530  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 14100  004532  0012               	return	
 14101  004534                     __end_ofi2_I2C_Master_Read:
 14102                           	opt stack 0
 14103                           pclatu	equ	0xFFB
 14104                           pclath	equ	0xFFA
 14105                           tblptru	equ	0xFF8
 14106                           tblptrh	equ	0xFF7
 14107                           tblptrl	equ	0xFF6
 14108                           tablat	equ	0xFF5
 14109                           prodh	equ	0xFF4
 14110                           prodl	equ	0xFF3
 14111                           intcon	equ	0xFF2
 14112                           intcon3	equ	0xFF0
 14113                           indf0	equ	0xFEF
 14114                           postinc0	equ	0xFEE
 14115                           fsr0h	equ	0xFEA
 14116                           fsr0l	equ	0xFE9
 14117                           wreg	equ	0xFE8
 14118                           postdec1	equ	0xFE5
 14119                           fsr1h	equ	0xFE2
 14120                           fsr1l	equ	0xFE1
 14121                           indf2	equ	0xFDF
 14122                           postinc2	equ	0xFDE
 14123                           postdec2	equ	0xFDD
 14124                           fsr2h	equ	0xFDA
 14125                           fsr2l	equ	0xFD9
 14126                           status	equ	0xFD8
 14127                           
 14128 ;; *************** function i2_I2C_Master_Wait *****************
 14129 ;; Defined at:
 14130 ;;		line 51 in file "I2C.c"
 14131 ;; Parameters:    Size  Location     Type
 14132 ;;		None
 14133 ;; Auto vars:     Size  Location     Type
 14134 ;;		None
 14135 ;; Return value:  Size  Location     Type
 14136 ;;                  1    wreg      void 
 14137 ;; Registers used:
 14138 ;;		wreg, status,2, status,0
 14139 ;; Tracked objects:
 14140 ;;		On entry : 0/0
 14141 ;;		On exit  : 0/0
 14142 ;;		Unchanged: 0/0
 14143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14148 ;;Total ram usage:        1 bytes
 14149 ;; Hardware stack levels used:    1
 14150 ;; This function calls:
 14151 ;;		Nothing
 14152 ;; This function is called by:
 14153 ;;		i2_I2C_Master_Start
 14154 ;;		i2_I2C_Master_Stop
 14155 ;;		i2_I2C_Master_Write
 14156 ;;		i2_I2C_Master_Read
 14157 ;; This function uses a non-reentrant model
 14158 ;;
 14159                           
 14160                           	psect	text43
 14161  0045F4                     __ptext43:
 14162                           	opt stack 0
 14163  0045F4                     i2_I2C_Master_Wait:
 14164                           	opt stack 24
 14165                           
 14166                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14167                           
 14168                           ;incstack = 0
 14169  0045F4  B4C7               	btfsc	4039,2,c	;volatile
 14170  0045F6  D7FE               	goto	i2_I2C_Master_Wait
 14171  0045F8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14172  0045FC  0E1F               	movlw	31
 14173  0045FE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14174  004600  B4D8               	btfsc	status,2,c
 14175  004602  0012               	return	
 14176  004604  D7F7               	goto	i2_I2C_Master_Wait
 14177  004606                     __end_ofi2_I2C_Master_Wait:
 14178                           	opt stack 0
 14179                           pclatu	equ	0xFFB
 14180                           pclath	equ	0xFFA
 14181                           tblptru	equ	0xFF8
 14182                           tblptrh	equ	0xFF7
 14183                           tblptrl	equ	0xFF6
 14184                           tablat	equ	0xFF5
 14185                           prodh	equ	0xFF4
 14186                           prodl	equ	0xFF3
 14187                           intcon	equ	0xFF2
 14188                           intcon3	equ	0xFF0
 14189                           indf0	equ	0xFEF
 14190                           postinc0	equ	0xFEE
 14191                           fsr0h	equ	0xFEA
 14192                           fsr0l	equ	0xFE9
 14193                           wreg	equ	0xFE8
 14194                           postdec1	equ	0xFE5
 14195                           fsr1h	equ	0xFE2
 14196                           fsr1l	equ	0xFE1
 14197                           indf2	equ	0xFDF
 14198                           postinc2	equ	0xFDE
 14199                           postdec2	equ	0xFDD
 14200                           fsr2h	equ	0xFDA
 14201                           fsr2l	equ	0xFD9
 14202                           status	equ	0xFD8
 14203                           
 14204 ;; *************** function i2_I2C_Master_Init *****************
 14205 ;; Defined at:
 14206 ;;		line 14 in file "I2C.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;		None
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      void 
 14213 ;; Registers used:
 14214 ;;		wreg, status,2, status,0, cstack
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14224 ;;Total ram usage:        8 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; Hardware stack levels required when called:    1
 14227 ;; This function calls:
 14228 ;;		i2___lldiv
 14229 ;; This function is called by:
 14230 ;;		_interruptHandler
 14231 ;; This function uses a non-reentrant model
 14232 ;;
 14233                           
 14234                           	psect	text44
 14235  004150                     __ptext44:
 14236                           	opt stack 0
 14237  004150                     i2_I2C_Master_Init:
 14238                           	opt stack 24
 14239                           
 14240                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 14241                           
 14242                           ;incstack = 0
 14243  004150  9AC6               	bcf	4038,5,c	;volatile
 14244                           
 14245                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 14246  004152  8694               	bsf	3988,3,c	;volatile
 14247                           
 14248                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 14249  004154  8894               	bsf	3988,4,c	;volatile
 14250                           
 14251                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 14252  004156  0E80               	movlw	128
 14253  004158  6EC7               	movwf	4039,c	;volatile
 14254                           
 14255                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 14256  00415A  0E28               	movlw	40
 14257  00415C  6EC6               	movwf	4038,c	;volatile
 14258                           
 14259                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 14260  00415E  0E00               	movlw	0
 14261  004160  6EC5               	movwf	4037,c	;volatile
 14262                           
 14263                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 14264  004162  0E00               	movlw	0
 14265  004164  6E01               	movwf	i2___lldiv@dividend,c
 14266  004166  0E48               	movlw	72
 14267  004168  6E02               	movwf	i2___lldiv@dividend+1,c
 14268  00416A  0EE8               	movlw	232
 14269  00416C  6E03               	movwf	i2___lldiv@dividend+2,c
 14270  00416E  0E01               	movlw	1
 14271  004170  6E04               	movwf	i2___lldiv@dividend+3,c
 14272  004172  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 14273  004176  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 14274  00417A  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 14275  00417E  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 14276  004182  0E02               	movlw	2
 14277  004184                     i2u446_45:
 14278  004184  90D8               	bcf	status,0,c
 14279  004186  3612               	rlcf	??i2_I2C_Master_Init,f,c
 14280  004188  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 14281  00418A  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 14282  00418C  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 14283  00418E  2EE8               	decfsz	wreg,f,c
 14284  004190  D7F9               	goto	i2u446_45
 14285  004192  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 14286  004196  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 14287  00419A  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 14288  00419E  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 14289  0041A2  EC8C  F01F         	call	i2___lldiv	;wreg free
 14290  0041A6  0401               	decf	?i2___lldiv,w,c
 14291  0041A8  6EC8               	movwf	4040,c	;volatile
 14292  0041AA  0012               	return		;funcret
 14293  0041AC                     __end_ofi2_I2C_Master_Init:
 14294                           	opt stack 0
 14295                           pclatu	equ	0xFFB
 14296                           pclath	equ	0xFFA
 14297                           tblptru	equ	0xFF8
 14298                           tblptrh	equ	0xFF7
 14299                           tblptrl	equ	0xFF6
 14300                           tablat	equ	0xFF5
 14301                           prodh	equ	0xFF4
 14302                           prodl	equ	0xFF3
 14303                           intcon	equ	0xFF2
 14304                           intcon3	equ	0xFF0
 14305                           indf0	equ	0xFEF
 14306                           postinc0	equ	0xFEE
 14307                           fsr0h	equ	0xFEA
 14308                           fsr0l	equ	0xFE9
 14309                           wreg	equ	0xFE8
 14310                           postdec1	equ	0xFE5
 14311                           fsr1h	equ	0xFE2
 14312                           fsr1l	equ	0xFE1
 14313                           indf2	equ	0xFDF
 14314                           postinc2	equ	0xFDE
 14315                           postdec2	equ	0xFDD
 14316                           fsr2h	equ	0xFDA
 14317                           fsr2l	equ	0xFD9
 14318                           status	equ	0xFD8
 14319                           
 14320 ;; *************** function i2___lldiv *****************
 14321 ;; Defined at:
 14322 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;  dividend        4    0[COMRAM] unsigned long 
 14325 ;;  divisor         4    4[COMRAM] unsigned long 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14328 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14329 ;; Return value:  Size  Location     Type
 14330 ;;                  4    0[COMRAM] unsigned long 
 14331 ;; Registers used:
 14332 ;;		wreg, status,2, status,0
 14333 ;; Tracked objects:
 14334 ;;		On entry : 0/0
 14335 ;;		On exit  : 0/0
 14336 ;;		Unchanged: 0/0
 14337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14338 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14339 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14341 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;Total ram usage:       13 bytes
 14343 ;; Hardware stack levels used:    1
 14344 ;; This function calls:
 14345 ;;		Nothing
 14346 ;; This function is called by:
 14347 ;;		i2_I2C_Master_Init
 14348 ;; This function uses a non-reentrant model
 14349 ;;
 14350                           
 14351                           	psect	text45
 14352  003F18                     __ptext45:
 14353                           	opt stack 0
 14354  003F18                     i2___lldiv:
 14355                           	opt stack 24
 14356                           
 14357                           ;incstack = 0
 14358  003F18  0E00               	movlw	0
 14359  003F1A  6E09               	movwf	i2___lldiv@quotient,c
 14360  003F1C  0E00               	movlw	0
 14361  003F1E  6E0A               	movwf	i2___lldiv@quotient+1,c
 14362  003F20  0E00               	movlw	0
 14363  003F22  6E0B               	movwf	i2___lldiv@quotient+2,c
 14364  003F24  0E00               	movlw	0
 14365  003F26  6E0C               	movwf	i2___lldiv@quotient+3,c
 14366  003F28  5005               	movf	i2___lldiv@divisor,w,c
 14367  003F2A  1006               	iorwf	i2___lldiv@divisor+1,w,c
 14368  003F2C  1007               	iorwf	i2___lldiv@divisor+2,w,c
 14369  003F2E  1008               	iorwf	i2___lldiv@divisor+3,w,c
 14370  003F30  B4D8               	btfsc	status,2,c
 14371  003F32  D02A               	goto	i2l1487
 14372  003F34  0E01               	movlw	1
 14373  003F36  6E0D               	movwf	i2___lldiv@counter,c
 14374  003F38  D006               	goto	i2l1482
 14375  003F3A  90D8               	bcf	status,0,c
 14376  003F3C  3605               	rlcf	i2___lldiv@divisor,f,c
 14377  003F3E  3606               	rlcf	i2___lldiv@divisor+1,f,c
 14378  003F40  3607               	rlcf	i2___lldiv@divisor+2,f,c
 14379  003F42  3608               	rlcf	i2___lldiv@divisor+3,f,c
 14380  003F44  2A0D               	incf	i2___lldiv@counter,f,c
 14381  003F46                     i2l1482:
 14382  003F46  AE08               	btfss	i2___lldiv@divisor+3,7,c
 14383  003F48  D7F8               	goto	i2l1483
 14384  003F4A                     i2u372_40:
 14385  003F4A  90D8               	bcf	status,0,c
 14386  003F4C  3609               	rlcf	i2___lldiv@quotient,f,c
 14387  003F4E  360A               	rlcf	i2___lldiv@quotient+1,f,c
 14388  003F50  360B               	rlcf	i2___lldiv@quotient+2,f,c
 14389  003F52  360C               	rlcf	i2___lldiv@quotient+3,f,c
 14390  003F54  5005               	movf	i2___lldiv@divisor,w,c
 14391  003F56  5C01               	subwf	i2___lldiv@dividend,w,c
 14392  003F58  5006               	movf	i2___lldiv@divisor+1,w,c
 14393  003F5A  5802               	subwfb	i2___lldiv@dividend+1,w,c
 14394  003F5C  5007               	movf	i2___lldiv@divisor+2,w,c
 14395  003F5E  5803               	subwfb	i2___lldiv@dividend+2,w,c
 14396  003F60  5008               	movf	i2___lldiv@divisor+3,w,c
 14397  003F62  5804               	subwfb	i2___lldiv@dividend+3,w,c
 14398  003F64  A0D8               	btfss	status,0,c
 14399  003F66  D009               	goto	i2l1486
 14400  003F68  5005               	movf	i2___lldiv@divisor,w,c
 14401  003F6A  5E01               	subwf	i2___lldiv@dividend,f,c
 14402  003F6C  5006               	movf	i2___lldiv@divisor+1,w,c
 14403  003F6E  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 14404  003F70  5007               	movf	i2___lldiv@divisor+2,w,c
 14405  003F72  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 14406  003F74  5008               	movf	i2___lldiv@divisor+3,w,c
 14407  003F76  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 14408  003F78  8009               	bsf	i2___lldiv@quotient,0,c
 14409  003F7A                     i2l1486:
 14410  003F7A  90D8               	bcf	status,0,c
 14411  003F7C  3208               	rrcf	i2___lldiv@divisor+3,f,c
 14412  003F7E  3207               	rrcf	i2___lldiv@divisor+2,f,c
 14413  003F80  3206               	rrcf	i2___lldiv@divisor+1,f,c
 14414  003F82  3205               	rrcf	i2___lldiv@divisor,f,c
 14415  003F84  2E0D               	decfsz	i2___lldiv@counter,f,c
 14416  003F86  D7E1               	goto	i2u372_40
 14417  003F88                     i2l1487:
 14418  003F88  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 14419  003F8C  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 14420  003F90  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 14421  003F94  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 14422  003F98  0012               	return		;funcret
 14423  003F9A                     __end_ofi2___lldiv:
 14424                           	opt stack 0
 14425                           pclatu	equ	0xFFB
 14426                           pclath	equ	0xFFA
 14427                           tblptru	equ	0xFF8
 14428                           tblptrh	equ	0xFF7
 14429                           tblptrl	equ	0xFF6
 14430                           tablat	equ	0xFF5
 14431                           prodh	equ	0xFF4
 14432                           prodl	equ	0xFF3
 14433                           intcon	equ	0xFF2
 14434                           intcon3	equ	0xFF0
 14435                           indf0	equ	0xFEF
 14436                           postinc0	equ	0xFEE
 14437                           fsr0h	equ	0xFEA
 14438                           fsr0l	equ	0xFE9
 14439                           wreg	equ	0xFE8
 14440                           postdec1	equ	0xFE5
 14441                           fsr1h	equ	0xFE2
 14442                           fsr1l	equ	0xFE1
 14443                           indf2	equ	0xFDF
 14444                           postinc2	equ	0xFDE
 14445                           postdec2	equ	0xFDD
 14446                           fsr2h	equ	0xFDA
 14447                           fsr2l	equ	0xFD9
 14448                           status	equ	0xFD8
 14449                           
 14450 ;; *************** function _strncmp *****************
 14451 ;; Defined at:
 14452 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 14453 ;; Parameters:    Size  Location     Type
 14454 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 14455 ;;		 -> current_set(5), 
 14456 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 14457 ;;		 -> strs(100), 
 14458 ;;  len             2   10[COMRAM] unsigned int 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;		None
 14461 ;; Return value:  Size  Location     Type
 14462 ;;                  2    6[COMRAM] int 
 14463 ;; Registers used:
 14464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14465 ;; Tracked objects:
 14466 ;;		On entry : 0/0
 14467 ;;		On exit  : 0/0
 14468 ;;		Unchanged: 0/0
 14469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14470 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14474 ;;Total ram usage:        9 bytes
 14475 ;; Hardware stack levels used:    1
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		_interruptHandler
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text46
 14484  003D8A                     __ptext46:
 14485                           	opt stack 0
 14486  003D8A                     _strncmp:
 14487                           	opt stack 25
 14488                           
 14489                           ;incstack = 0
 14490  003D8A  D035               	goto	i2l1702
 14491  003D8C                     i2l5261:
 14492  003D8C  C007  FFD9         	movff	strncmp@s1,fsr2l
 14493  003D90  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14494  003D94  50DF               	movf	indf2,w,c
 14495  003D96  B4D8               	btfsc	status,2,c
 14496  003D98  D010               	goto	i2u406_40
 14497  003D9A  C007  FFD9         	movff	strncmp@s1,fsr2l
 14498  003D9E  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14499  003DA2  50DF               	movf	indf2,w,c
 14500  003DA4  6E0D               	movwf	??_strncmp& (0+255),c
 14501  003DA6  C009  FFF6         	movff	strncmp@s2,tblptrl
 14502  003DAA  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14503  003DAE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14504  003DAE  6AF8               	clrf	tblptru,c
 14505  003DB0                     	endif
 14506  003DB0                     	if	0	;tblptru may be non-zero
 14507  003DB0                     	endif
 14508  003DB0  0008               	tblrd		*
 14509  003DB2  50F5               	movf	tablat,w,c
 14510  003DB4  180D               	xorwf	??_strncmp,w,c
 14511  003DB6  B4D8               	btfsc	status,2,c
 14512  003DB8  D01A               	goto	i2l1704
 14513  003DBA                     i2u406_40:
 14514  003DBA  C009  FFF6         	movff	strncmp@s2,tblptrl
 14515  003DBE  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14516  003DC2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14517  003DC2  6AF8               	clrf	tblptru,c
 14518  003DC4                     	endif
 14519  003DC4                     	if	0	;tblptru may be non-zero
 14520  003DC4                     	endif
 14521  003DC4  0008               	tblrd		*
 14522  003DC6  50F5               	movf	tablat,w,c
 14523  003DC8  6E0D               	movwf	??_strncmp& (0+255),c
 14524  003DCA  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 14525  003DCC  1E0D               	comf	??_strncmp,f,c
 14526  003DCE  1E0E               	comf	??_strncmp+1,f,c
 14527  003DD0  4A0D               	infsnz	??_strncmp,f,c
 14528  003DD2  2A0E               	incf	??_strncmp+1,f,c
 14529  003DD4  C007  FFD9         	movff	strncmp@s1,fsr2l
 14530  003DD8  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14531  003DDC  50DF               	movf	indf2,w,c
 14532  003DDE  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 14533  003DE0  500F               	movf	??_strncmp+2,w,c
 14534  003DE2  240D               	addwf	??_strncmp,w,c
 14535  003DE4  6E07               	movwf	?_strncmp,c
 14536  003DE6  0E00               	movlw	0
 14537  003DE8  200E               	addwfc	??_strncmp+1,w,c
 14538  003DEA  6E08               	movwf	?_strncmp+1,c
 14539  003DEC  0012               	return	
 14540  003DEE                     i2l1704:
 14541  003DEE  4A07               	infsnz	strncmp@s1,f,c
 14542  003DF0  2A08               	incf	strncmp@s1+1,f,c
 14543  003DF2  4A09               	infsnz	strncmp@s2,f,c
 14544  003DF4  2A0A               	incf	strncmp@s2+1,f,c
 14545  003DF6                     i2l1702:
 14546  003DF6  060B               	decf	strncmp@len,f,c
 14547  003DF8  A0D8               	btfss	status,0,c
 14548  003DFA  060C               	decf	strncmp@len+1,f,c
 14549  003DFC  280B               	incf	strncmp@len,w,c
 14550  003DFE  E1C6               	bnz	i2l5261
 14551  003E00  280C               	incf	strncmp@len+1,w,c
 14552  003E02  A4D8               	btfss	status,2,c
 14553  003E04  D7C3               	goto	i2l1703
 14554  003E06  0E00               	movlw	0
 14555  003E08  6E08               	movwf	?_strncmp+1,c
 14556  003E0A  0E00               	movlw	0
 14557  003E0C  6E07               	movwf	?_strncmp,c
 14558  003E0E  0012               	return	
 14559  003E10                     __end_of_strncmp:
 14560                           	opt stack 0
 14561                           pclatu	equ	0xFFB
 14562                           pclath	equ	0xFFA
 14563                           tblptru	equ	0xFF8
 14564                           tblptrh	equ	0xFF7
 14565                           tblptrl	equ	0xFF6
 14566                           tablat	equ	0xFF5
 14567                           prodh	equ	0xFF4
 14568                           prodl	equ	0xFF3
 14569                           intcon	equ	0xFF2
 14570                           intcon3	equ	0xFF0
 14571                           indf0	equ	0xFEF
 14572                           postinc0	equ	0xFEE
 14573                           fsr0h	equ	0xFEA
 14574                           fsr0l	equ	0xFE9
 14575                           wreg	equ	0xFE8
 14576                           postdec1	equ	0xFE5
 14577                           fsr1h	equ	0xFE2
 14578                           fsr1l	equ	0xFE1
 14579                           indf2	equ	0xFDF
 14580                           postinc2	equ	0xFDE
 14581                           postdec2	equ	0xFDD
 14582                           fsr2h	equ	0xFDA
 14583                           fsr2l	equ	0xFD9
 14584                           status	equ	0xFD8
 14585                           
 14586 ;; *************** function _strcpy *****************
 14587 ;; Defined at:
 14588 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  to              2    6[COMRAM] PTR unsigned char 
 14591 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14592 ;;  from            2    8[COMRAM] PTR const unsigned char 
 14593 ;;		 -> STR_57(1), STR_55(1), STR_52(1), STR_49(2), 
 14594 ;;		 -> STR_48(2), STR_47(2), STR_46(2), current_set(5), 
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;  cp              2   10[COMRAM] PTR unsigned char 
 14597 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14598 ;; Return value:  Size  Location     Type
 14599 ;;                  2    6[COMRAM] PTR unsigned char 
 14600 ;; Registers used:
 14601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14602 ;; Tracked objects:
 14603 ;;		On entry : 0/0
 14604 ;;		On exit  : 0/0
 14605 ;;		Unchanged: 0/0
 14606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;Total ram usage:        6 bytes
 14612 ;; Hardware stack levels used:    1
 14613 ;; This function calls:
 14614 ;;		Nothing
 14615 ;; This function is called by:
 14616 ;;		_interruptHandler
 14617 ;; This function uses a non-reentrant model
 14618 ;;
 14619                           
 14620                           	psect	text47
 14621  004334                     __ptext47:
 14622                           	opt stack 0
 14623  004334                     _strcpy:
 14624                           	opt stack 25
 14625                           
 14626                           ;incstack = 0
 14627  004334  C007  F00B         	movff	strcpy@to,strcpy@cp
 14628  004338  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 14629  00433C  D004               	goto	i2l1696
 14630  00433E  4A0B               	infsnz	strcpy@cp,f,c
 14631  004340  2A0C               	incf	strcpy@cp+1,f,c
 14632  004342  4A09               	infsnz	strcpy@from,f,c
 14633  004344  2A0A               	incf	strcpy@from+1,f,c
 14634  004346                     i2l1696:
 14635  004346  C009  FFF6         	movff	strcpy@from,tblptrl
 14636  00434A  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 14637  00434E  0E00               	movlw	low (__mediumconst shr (0+16))
 14638  004350  6EF8               	movwf	tblptru,c
 14639  004352  C00B  FFD9         	movff	strcpy@cp,fsr2l
 14640  004356  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 14641  00435A  0E0F               	movlw	(high __ramtop+-1)
 14642  00435C  64F7               	cpfsgt	tblptrh,c
 14643  00435E  D003               	bra	i2u401_47
 14644  004360  0008               	tblrd		*
 14645  004362  50F5               	movf	tablat,w,c
 14646  004364  D005               	bra	i2u401_40
 14647  004366                     i2u401_47:
 14648  004366  CFF6 FFE9          	movff	tblptrl,fsr0l
 14649  00436A  CFF7 FFEA          	movff	tblptrh,fsr0h
 14650  00436E  50EF               	movf	indf0,w,c
 14651  004370                     i2u401_40:
 14652  004370  6EDF               	movwf	indf2,c
 14653  004372  50DF               	movf	indf2,w,c
 14654  004374  B4D8               	btfsc	status,2,c
 14655  004376  0012               	return	
 14656  004378  D7E2               	goto	i2l1697
 14657  00437A                     __end_of_strcpy:
 14658                           	opt stack 0
 14659                           pclatu	equ	0xFFB
 14660                           pclath	equ	0xFFA
 14661                           tblptru	equ	0xFF8
 14662                           tblptrh	equ	0xFF7
 14663                           tblptrl	equ	0xFF6
 14664                           tablat	equ	0xFF5
 14665                           prodh	equ	0xFF4
 14666                           prodl	equ	0xFF3
 14667                           intcon	equ	0xFF2
 14668                           intcon3	equ	0xFF0
 14669                           indf0	equ	0xFEF
 14670                           postinc0	equ	0xFEE
 14671                           fsr0h	equ	0xFEA
 14672                           fsr0l	equ	0xFE9
 14673                           wreg	equ	0xFE8
 14674                           postdec1	equ	0xFE5
 14675                           fsr1h	equ	0xFE2
 14676                           fsr1l	equ	0xFE1
 14677                           indf2	equ	0xFDF
 14678                           postinc2	equ	0xFDE
 14679                           postdec2	equ	0xFDD
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _strcat *****************
 14685 ;; Defined at:
 14686 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  to              2    0[COMRAM] PTR unsigned char 
 14689 ;;		 -> current_set(5), 
 14690 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14691 ;;		 -> temp_set(5), 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  cp              2    4[COMRAM] PTR unsigned char 
 14694 ;;		 -> current_set(5), 
 14695 ;; Return value:  Size  Location     Type
 14696 ;;                  2    0[COMRAM] PTR unsigned char 
 14697 ;; Registers used:
 14698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;Total ram usage:        6 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; This function calls:
 14711 ;;		Nothing
 14712 ;; This function is called by:
 14713 ;;		_interruptHandler
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           	psect	text48
 14718  004400                     __ptext48:
 14719                           	opt stack 0
 14720  004400                     _strcat:
 14721                           	opt stack 25
 14722                           
 14723                           ;incstack = 0
 14724  004400  C001  F005         	movff	strcat@to,strcat@cp
 14725  004404  C002  F006         	movff	strcat@to+1,strcat@cp+1
 14726  004408  D002               	goto	i2l1679
 14727  00440A  4A05               	infsnz	strcat@cp,f,c
 14728  00440C  2A06               	incf	strcat@cp+1,f,c
 14729  00440E                     i2l1679:
 14730  00440E  C005  FFD9         	movff	strcat@cp,fsr2l
 14731  004412  C006  FFDA         	movff	strcat@cp+1,fsr2h
 14732  004416  50DF               	movf	indf2,w,c
 14733  004418  B4D8               	btfsc	status,2,c
 14734  00441A  D005               	goto	i2l1682
 14735  00441C  D7F6               	goto	i2l1680
 14736  00441E  4A05               	infsnz	strcat@cp,f,c
 14737  004420  2A06               	incf	strcat@cp+1,f,c
 14738  004422  4A03               	infsnz	strcat@from,f,c
 14739  004424  2A04               	incf	strcat@from+1,f,c
 14740  004426                     i2l1682:
 14741  004426  C003  FFD9         	movff	strcat@from,fsr2l
 14742  00442A  C004  FFDA         	movff	strcat@from+1,fsr2h
 14743  00442E  C005  FFE1         	movff	strcat@cp,fsr1l
 14744  004432  C006  FFE2         	movff	strcat@cp+1,fsr1h
 14745  004436  CFDF FFE7          	movff	indf2,indf1
 14746  00443A  50E7               	movf	indf1,w,c
 14747  00443C  B4D8               	btfsc	status,2,c
 14748  00443E  0012               	return	
 14749  004440  D7EE               	goto	i2l1683
 14750  004442                     __end_of_strcat:
 14751                           	opt stack 0
 14752                           pclatu	equ	0xFFB
 14753                           pclath	equ	0xFFA
 14754                           tblptru	equ	0xFF8
 14755                           tblptrh	equ	0xFF7
 14756                           tblptrl	equ	0xFF6
 14757                           tablat	equ	0xFF5
 14758                           prodh	equ	0xFF4
 14759                           prodl	equ	0xFF3
 14760                           intcon	equ	0xFF2
 14761                           intcon3	equ	0xFF0
 14762                           indf0	equ	0xFEF
 14763                           postinc0	equ	0xFEE
 14764                           fsr0h	equ	0xFEA
 14765                           fsr0l	equ	0xFE9
 14766                           wreg	equ	0xFE8
 14767                           indf1	equ	0xFE7
 14768                           postdec1	equ	0xFE5
 14769                           fsr1h	equ	0xFE2
 14770                           fsr1l	equ	0xFE1
 14771                           indf2	equ	0xFDF
 14772                           postinc2	equ	0xFDE
 14773                           postdec2	equ	0xFDD
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function _is_valid *****************
 14779 ;; Defined at:
 14780 ;;		line 12 in file "keypad.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;		None
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;		None
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  2  147[None  ] int 
 14787 ;; Registers used:
 14788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;Total ram usage:        2 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    1
 14801 ;; This function calls:
 14802 ;;		_strcmp
 14803 ;;		i2___wmul
 14804 ;; This function is called by:
 14805 ;;		_interruptHandler
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           	psect	text49
 14810  000FE8                     __ptext49:
 14811                           	opt stack 0
 14812  000FE8                     _is_valid:
 14813                           	opt stack 24
 14814                           
 14815                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 14816                           
 14817                           ;incstack = 0
 14818  000FE8  0E70               	movlw	low _current_set2
 14819  000FEA  6E01               	movwf	strcmp@s1,c
 14820  000FEC  0E00               	movlw	high _current_set2
 14821  000FEE  6E02               	movwf	strcmp@s1+1,c
 14822  000FF0  0EFC               	movlw	low STR_46
 14823  000FF2  6E03               	movwf	strcmp@s2,c
 14824  000FF4  0EFF               	movlw	high STR_46
 14825  000FF6  6E04               	movwf	strcmp@s2+1,c
 14826  000FF8  EC75  F021         	call	_strcmp	;wreg free
 14827  000FFC  5001               	movf	?_strcmp,w,c
 14828  000FFE  1002               	iorwf	?_strcmp+1,w,c
 14829  001000  A4D8               	btfss	status,2,c
 14830  001002  D023               	goto	i2l867
 14831                           
 14832                           ;keypad.c: 17: B=1*number;
 14833  001004  C075  F05C         	movff	_number,_B
 14834  001008  C076  F05D         	movff	_number+1,_B+1
 14835                           
 14836                           ;keypad.c: 18: total_number = 1*number;
 14837  00100C  C075  F18A         	movff	_number,_total_number
 14838  001010  C076  F18B         	movff	_number+1,_total_number+1
 14839                           
 14840                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 14841  001014  90D8               	bcf	status,0,c
 14842  001016  345E               	rlcf	_counter_step,w,c
 14843  001018  6ED9               	movwf	fsr2l,c
 14844  00101A  345F               	rlcf	_counter_step+1,w,c
 14845  00101C  6EDA               	movwf	fsr2h,c
 14846  00101E  0E46               	movlw	low _compartment_number
 14847  001020  26D9               	addwf	fsr2l,f,c
 14848  001022  0E00               	movlw	high _compartment_number
 14849  001024  22DA               	addwfc	fsr2h,f,c
 14850  001026  CFDE F007          	movff	postinc2,??_is_valid
 14851  00102A  CFDD F008          	movff	postdec2,??_is_valid+1
 14852  00102E  90D8               	bcf	status,0,c
 14853  001030  3607               	rlcf	??_is_valid,f,c
 14854  001032  3608               	rlcf	??_is_valid+1,f,c
 14855  001034  0E30               	movlw	low _B_array
 14856  001036  2407               	addwf	??_is_valid,w,c
 14857  001038  6ED9               	movwf	fsr2l,c
 14858  00103A  0E01               	movlw	high _B_array
 14859  00103C  2008               	addwfc	??_is_valid+1,w,c
 14860  00103E  6EDA               	movwf	fsr2h,c
 14861  001040  C05C  FFDE         	movff	_B,postinc2
 14862  001044  C05D  FFDD         	movff	_B+1,postdec2
 14863                           
 14864                           ;keypad.c: 22: }
 14865  001048  0012               	return	
 14866  00104A                     i2l867:
 14867                           
 14868                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 14869  00104A  0E70               	movlw	low _current_set2
 14870  00104C  6E01               	movwf	strcmp@s1,c
 14871  00104E  0E00               	movlw	high _current_set2
 14872  001050  6E02               	movwf	strcmp@s1+1,c
 14873  001052  0EE9               	movlw	low (STR_85+2)
 14874  001054  6E03               	movwf	strcmp@s2,c
 14875  001056  0EFF               	movlw	high (STR_85+2)
 14876  001058  6E04               	movwf	strcmp@s2+1,c
 14877  00105A  EC75  F021         	call	_strcmp	;wreg free
 14878  00105E  5001               	movf	?_strcmp,w,c
 14879  001060  1002               	iorwf	?_strcmp+1,w,c
 14880  001062  A4D8               	btfss	status,2,c
 14881  001064  D023               	goto	i2l869
 14882                           
 14883                           ;keypad.c: 25: N=1*number;
 14884  001066  C075  F05A         	movff	_number,_N
 14885  00106A  C076  F05B         	movff	_number+1,_N+1
 14886                           
 14887                           ;keypad.c: 26: total_number = 1*number;
 14888  00106E  C075  F18A         	movff	_number,_total_number
 14889  001072  C076  F18B         	movff	_number+1,_total_number+1
 14890                           
 14891                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 14892  001076  90D8               	bcf	status,0,c
 14893  001078  345E               	rlcf	_counter_step,w,c
 14894  00107A  6ED9               	movwf	fsr2l,c
 14895  00107C  345F               	rlcf	_counter_step+1,w,c
 14896  00107E  6EDA               	movwf	fsr2h,c
 14897  001080  0E46               	movlw	low _compartment_number
 14898  001082  26D9               	addwf	fsr2l,f,c
 14899  001084  0E00               	movlw	high _compartment_number
 14900  001086  22DA               	addwfc	fsr2h,f,c
 14901  001088  CFDE F007          	movff	postinc2,??_is_valid
 14902  00108C  CFDD F008          	movff	postdec2,??_is_valid+1
 14903  001090  90D8               	bcf	status,0,c
 14904  001092  3607               	rlcf	??_is_valid,f,c
 14905  001094  3608               	rlcf	??_is_valid+1,f,c
 14906  001096  0E10               	movlw	low _N_array
 14907  001098  2407               	addwf	??_is_valid,w,c
 14908  00109A  6ED9               	movwf	fsr2l,c
 14909  00109C  0E01               	movlw	high _N_array
 14910  00109E  2008               	addwfc	??_is_valid+1,w,c
 14911  0010A0  6EDA               	movwf	fsr2h,c
 14912  0010A2  C05A  FFDE         	movff	_N,postinc2
 14913  0010A6  C05B  FFDD         	movff	_N+1,postdec2
 14914                           
 14915                           ;keypad.c: 28: }
 14916  0010AA  0012               	return	
 14917  0010AC                     i2l869:
 14918                           
 14919                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 14920  0010AC  0E70               	movlw	low _current_set2
 14921  0010AE  6E01               	movwf	strcmp@s1,c
 14922  0010B0  0E00               	movlw	high _current_set2
 14923  0010B2  6E02               	movwf	strcmp@s1+1,c
 14924  0010B4  0EED               	movlw	low (STR_86+2)
 14925  0010B6  6E03               	movwf	strcmp@s2,c
 14926  0010B8  0EFF               	movlw	high (STR_86+2)
 14927  0010BA  6E04               	movwf	strcmp@s2+1,c
 14928  0010BC  EC75  F021         	call	_strcmp	;wreg free
 14929  0010C0  5001               	movf	?_strcmp,w,c
 14930  0010C2  1002               	iorwf	?_strcmp+1,w,c
 14931  0010C4  A4D8               	btfss	status,2,c
 14932  0010C6  D023               	goto	i2l871
 14933                           
 14934                           ;keypad.c: 30: S=1*number;
 14935  0010C8  C075  F058         	movff	_number,_S
 14936  0010CC  C076  F059         	movff	_number+1,_S+1
 14937                           
 14938                           ;keypad.c: 31: total_number = 1*number;
 14939  0010D0  C075  F18A         	movff	_number,_total_number
 14940  0010D4  C076  F18B         	movff	_number+1,_total_number+1
 14941                           
 14942                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 14943  0010D8  90D8               	bcf	status,0,c
 14944  0010DA  345E               	rlcf	_counter_step,w,c
 14945  0010DC  6ED9               	movwf	fsr2l,c
 14946  0010DE  345F               	rlcf	_counter_step+1,w,c
 14947  0010E0  6EDA               	movwf	fsr2h,c
 14948  0010E2  0E46               	movlw	low _compartment_number
 14949  0010E4  26D9               	addwf	fsr2l,f,c
 14950  0010E6  0E00               	movlw	high _compartment_number
 14951  0010E8  22DA               	addwfc	fsr2h,f,c
 14952  0010EA  CFDE F007          	movff	postinc2,??_is_valid
 14953  0010EE  CFDD F008          	movff	postdec2,??_is_valid+1
 14954  0010F2  90D8               	bcf	status,0,c
 14955  0010F4  3607               	rlcf	??_is_valid,f,c
 14956  0010F6  3608               	rlcf	??_is_valid+1,f,c
 14957  0010F8  0E20               	movlw	low _S_array
 14958  0010FA  2407               	addwf	??_is_valid,w,c
 14959  0010FC  6ED9               	movwf	fsr2l,c
 14960  0010FE  0E01               	movlw	high _S_array
 14961  001100  2008               	addwfc	??_is_valid+1,w,c
 14962  001102  6EDA               	movwf	fsr2h,c
 14963  001104  C058  FFDE         	movff	_S,postinc2
 14964  001108  C059  FFDD         	movff	_S+1,postdec2
 14965                           
 14966                           ;keypad.c: 33: }
 14967  00110C  0012               	return	
 14968  00110E                     i2l871:
 14969                           
 14970                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 14971  00110E  0E70               	movlw	low _current_set2
 14972  001110  6E01               	movwf	strcmp@s1,c
 14973  001112  0E00               	movlw	high _current_set2
 14974  001114  6E02               	movwf	strcmp@s1+1,c
 14975  001116  0EF1               	movlw	low (STR_87+2)
 14976  001118  6E03               	movwf	strcmp@s2,c
 14977  00111A  0EFF               	movlw	high (STR_87+2)
 14978  00111C  6E04               	movwf	strcmp@s2+1,c
 14979  00111E  EC75  F021         	call	_strcmp	;wreg free
 14980  001122  5001               	movf	?_strcmp,w,c
 14981  001124  1002               	iorwf	?_strcmp+1,w,c
 14982  001126  A4D8               	btfss	status,2,c
 14983  001128  D023               	goto	i2l873
 14984                           
 14985                           ;keypad.c: 35: W=1*number;
 14986  00112A  C075  F056         	movff	_number,_W
 14987  00112E  C076  F057         	movff	_number+1,_W+1
 14988                           
 14989                           ;keypad.c: 36: total_number = 1*number;
 14990  001132  C075  F18A         	movff	_number,_total_number
 14991  001136  C076  F18B         	movff	_number+1,_total_number+1
 14992                           
 14993                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 14994  00113A  90D8               	bcf	status,0,c
 14995  00113C  345E               	rlcf	_counter_step,w,c
 14996  00113E  6ED9               	movwf	fsr2l,c
 14997  001140  345F               	rlcf	_counter_step+1,w,c
 14998  001142  6EDA               	movwf	fsr2h,c
 14999  001144  0E46               	movlw	low _compartment_number
 15000  001146  26D9               	addwf	fsr2l,f,c
 15001  001148  0E00               	movlw	high _compartment_number
 15002  00114A  22DA               	addwfc	fsr2h,f,c
 15003  00114C  CFDE F007          	movff	postinc2,??_is_valid
 15004  001150  CFDD F008          	movff	postdec2,??_is_valid+1
 15005  001154  90D8               	bcf	status,0,c
 15006  001156  3607               	rlcf	??_is_valid,f,c
 15007  001158  3608               	rlcf	??_is_valid+1,f,c
 15008  00115A  0E00               	movlw	low _W_array
 15009  00115C  2407               	addwf	??_is_valid,w,c
 15010  00115E  6ED9               	movwf	fsr2l,c
 15011  001160  0E01               	movlw	high _W_array
 15012  001162  2008               	addwfc	??_is_valid+1,w,c
 15013  001164  6EDA               	movwf	fsr2h,c
 15014  001166  C056  FFDE         	movff	_W,postinc2
 15015  00116A  C057  FFDD         	movff	_W+1,postdec2
 15016                           
 15017                           ;keypad.c: 38: }
 15018  00116E  0012               	return	
 15019  001170                     i2l873:
 15020                           
 15021                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 15022  001170  0E70               	movlw	low _current_set2
 15023  001172  6E01               	movwf	strcmp@s1,c
 15024  001174  0E00               	movlw	high _current_set2
 15025  001176  6E02               	movwf	strcmp@s1+1,c
 15026  001178  0EE8               	movlw	low (STR_85+1)
 15027  00117A  6E03               	movwf	strcmp@s2,c
 15028  00117C  0EFF               	movlw	high (STR_85+1)
 15029  00117E  6E04               	movwf	strcmp@s2+1,c
 15030  001180  EC75  F021         	call	_strcmp	;wreg free
 15031  001184  5001               	movf	?_strcmp,w,c
 15032  001186  1002               	iorwf	?_strcmp+1,w,c
 15033  001188  A4D8               	btfss	status,2,c
 15034  00118A  D043               	goto	i2l875
 15035                           
 15036                           ;keypad.c: 40: B = 1*number;
 15037  00118C  C075  F05C         	movff	_number,_B
 15038  001190  C076  F05D         	movff	_number+1,_B+1
 15039                           
 15040                           ;keypad.c: 42: N = 1*number;
 15041  001194  C075  F05A         	movff	_number,_N
 15042  001198  C076  F05B         	movff	_number+1,_N+1
 15043                           
 15044                           ;keypad.c: 43: total_number = 2*number;
 15045  00119C  90D8               	bcf	status,0,c
 15046  00119E  3475               	rlcf	_number,w,c
 15047  0011A0  0101               	movlb	1	; () banked
 15048  0011A2  6F8A               	movwf	_total_number& (0+255),b
 15049  0011A4  3476               	rlcf	_number+1,w,c
 15050  0011A6  6F8B               	movwf	(_total_number+1)& (0+255),b
 15051                           
 15052                           ; BSR set to: 1
 15053                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 15054  0011A8  90D8               	bcf	status,0,c
 15055  0011AA  345E               	rlcf	_counter_step,w,c
 15056  0011AC  6ED9               	movwf	fsr2l,c
 15057  0011AE  345F               	rlcf	_counter_step+1,w,c
 15058  0011B0  6EDA               	movwf	fsr2h,c
 15059  0011B2  0E46               	movlw	low _compartment_number
 15060  0011B4  26D9               	addwf	fsr2l,f,c
 15061  0011B6  0E00               	movlw	high _compartment_number
 15062  0011B8  22DA               	addwfc	fsr2h,f,c
 15063  0011BA  CFDE F007          	movff	postinc2,??_is_valid
 15064  0011BE  CFDD F008          	movff	postdec2,??_is_valid+1
 15065  0011C2  90D8               	bcf	status,0,c
 15066  0011C4  3607               	rlcf	??_is_valid,f,c
 15067  0011C6  3608               	rlcf	??_is_valid+1,f,c
 15068  0011C8  0E30               	movlw	low _B_array
 15069  0011CA  2407               	addwf	??_is_valid,w,c
 15070  0011CC  6ED9               	movwf	fsr2l,c
 15071  0011CE  0E01               	movlw	high _B_array
 15072  0011D0  2008               	addwfc	??_is_valid+1,w,c
 15073  0011D2  6EDA               	movwf	fsr2h,c
 15074  0011D4  C05C  FFDE         	movff	_B,postinc2
 15075  0011D8  C05D  FFDD         	movff	_B+1,postdec2
 15076                           
 15077                           ; BSR set to: 1
 15078                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 15079  0011DC  90D8               	bcf	status,0,c
 15080  0011DE  345E               	rlcf	_counter_step,w,c
 15081  0011E0  6ED9               	movwf	fsr2l,c
 15082  0011E2  345F               	rlcf	_counter_step+1,w,c
 15083  0011E4  6EDA               	movwf	fsr2h,c
 15084  0011E6  0E46               	movlw	low _compartment_number
 15085  0011E8  26D9               	addwf	fsr2l,f,c
 15086  0011EA  0E00               	movlw	high _compartment_number
 15087  0011EC  22DA               	addwfc	fsr2h,f,c
 15088  0011EE  CFDE F007          	movff	postinc2,??_is_valid
 15089  0011F2  CFDD F008          	movff	postdec2,??_is_valid+1
 15090  0011F6  90D8               	bcf	status,0,c
 15091  0011F8  3607               	rlcf	??_is_valid,f,c
 15092  0011FA  3608               	rlcf	??_is_valid+1,f,c
 15093  0011FC  0E10               	movlw	low _N_array
 15094  0011FE  2407               	addwf	??_is_valid,w,c
 15095  001200  6ED9               	movwf	fsr2l,c
 15096  001202  0E01               	movlw	high _N_array
 15097  001204  2008               	addwfc	??_is_valid+1,w,c
 15098  001206  6EDA               	movwf	fsr2h,c
 15099  001208  C05A  FFDE         	movff	_N,postinc2
 15100  00120C  C05B  FFDD         	movff	_N+1,postdec2
 15101                           
 15102                           ;keypad.c: 47: }
 15103  001210  0012               	return	
 15104  001212                     i2l875:
 15105                           
 15106                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 15107                           
 15108                           ; BSR set to: 1
 15109  001212  0E70               	movlw	low _current_set2
 15110  001214  6E01               	movwf	strcmp@s1,c
 15111  001216  0E00               	movlw	high _current_set2
 15112  001218  6E02               	movwf	strcmp@s1+1,c
 15113  00121A  0EEC               	movlw	low (STR_86+1)
 15114  00121C  6E03               	movwf	strcmp@s2,c
 15115  00121E  0EFF               	movlw	high (STR_86+1)
 15116  001220  6E04               	movwf	strcmp@s2+1,c
 15117  001222  EC75  F021         	call	_strcmp	;wreg free
 15118  001226  5001               	movf	?_strcmp,w,c
 15119  001228  1002               	iorwf	?_strcmp+1,w,c
 15120  00122A  A4D8               	btfss	status,2,c
 15121  00122C  D043               	goto	i2l877
 15122                           
 15123                           ;keypad.c: 49: B = 1*number;
 15124  00122E  C075  F05C         	movff	_number,_B
 15125  001232  C076  F05D         	movff	_number+1,_B+1
 15126                           
 15127                           ;keypad.c: 51: S = 1*number;
 15128  001236  C075  F058         	movff	_number,_S
 15129  00123A  C076  F059         	movff	_number+1,_S+1
 15130                           
 15131                           ;keypad.c: 52: total_number = 2*number;
 15132  00123E  90D8               	bcf	status,0,c
 15133  001240  3475               	rlcf	_number,w,c
 15134  001242  0101               	movlb	1	; () banked
 15135  001244  6F8A               	movwf	_total_number& (0+255),b
 15136  001246  3476               	rlcf	_number+1,w,c
 15137  001248  6F8B               	movwf	(_total_number+1)& (0+255),b
 15138                           
 15139                           ; BSR set to: 1
 15140                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 15141  00124A  90D8               	bcf	status,0,c
 15142  00124C  345E               	rlcf	_counter_step,w,c
 15143  00124E  6ED9               	movwf	fsr2l,c
 15144  001250  345F               	rlcf	_counter_step+1,w,c
 15145  001252  6EDA               	movwf	fsr2h,c
 15146  001254  0E46               	movlw	low _compartment_number
 15147  001256  26D9               	addwf	fsr2l,f,c
 15148  001258  0E00               	movlw	high _compartment_number
 15149  00125A  22DA               	addwfc	fsr2h,f,c
 15150  00125C  CFDE F007          	movff	postinc2,??_is_valid
 15151  001260  CFDD F008          	movff	postdec2,??_is_valid+1
 15152  001264  90D8               	bcf	status,0,c
 15153  001266  3607               	rlcf	??_is_valid,f,c
 15154  001268  3608               	rlcf	??_is_valid+1,f,c
 15155  00126A  0E30               	movlw	low _B_array
 15156  00126C  2407               	addwf	??_is_valid,w,c
 15157  00126E  6ED9               	movwf	fsr2l,c
 15158  001270  0E01               	movlw	high _B_array
 15159  001272  2008               	addwfc	??_is_valid+1,w,c
 15160  001274  6EDA               	movwf	fsr2h,c
 15161  001276  C05C  FFDE         	movff	_B,postinc2
 15162  00127A  C05D  FFDD         	movff	_B+1,postdec2
 15163                           
 15164                           ; BSR set to: 1
 15165                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 15166  00127E  90D8               	bcf	status,0,c
 15167  001280  345E               	rlcf	_counter_step,w,c
 15168  001282  6ED9               	movwf	fsr2l,c
 15169  001284  345F               	rlcf	_counter_step+1,w,c
 15170  001286  6EDA               	movwf	fsr2h,c
 15171  001288  0E46               	movlw	low _compartment_number
 15172  00128A  26D9               	addwf	fsr2l,f,c
 15173  00128C  0E00               	movlw	high _compartment_number
 15174  00128E  22DA               	addwfc	fsr2h,f,c
 15175  001290  CFDE F007          	movff	postinc2,??_is_valid
 15176  001294  CFDD F008          	movff	postdec2,??_is_valid+1
 15177  001298  90D8               	bcf	status,0,c
 15178  00129A  3607               	rlcf	??_is_valid,f,c
 15179  00129C  3608               	rlcf	??_is_valid+1,f,c
 15180  00129E  0E20               	movlw	low _S_array
 15181  0012A0  2407               	addwf	??_is_valid,w,c
 15182  0012A2  6ED9               	movwf	fsr2l,c
 15183  0012A4  0E01               	movlw	high _S_array
 15184  0012A6  2008               	addwfc	??_is_valid+1,w,c
 15185  0012A8  6EDA               	movwf	fsr2h,c
 15186  0012AA  C058  FFDE         	movff	_S,postinc2
 15187  0012AE  C059  FFDD         	movff	_S+1,postdec2
 15188                           
 15189                           ;keypad.c: 57: }
 15190  0012B2  0012               	return	
 15191  0012B4                     i2l877:
 15192                           
 15193                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 15194                           
 15195                           ; BSR set to: 1
 15196  0012B4  0E70               	movlw	low _current_set2
 15197  0012B6  6E01               	movwf	strcmp@s1,c
 15198  0012B8  0E00               	movlw	high _current_set2
 15199  0012BA  6E02               	movwf	strcmp@s1+1,c
 15200  0012BC  0EF0               	movlw	low (STR_87+1)
 15201  0012BE  6E03               	movwf	strcmp@s2,c
 15202  0012C0  0EFF               	movlw	high (STR_87+1)
 15203  0012C2  6E04               	movwf	strcmp@s2+1,c
 15204  0012C4  EC75  F021         	call	_strcmp	;wreg free
 15205  0012C8  5001               	movf	?_strcmp,w,c
 15206  0012CA  1002               	iorwf	?_strcmp+1,w,c
 15207  0012CC  A4D8               	btfss	status,2,c
 15208  0012CE  D043               	goto	i2l879
 15209                           
 15210                           ;keypad.c: 60: B = 1*number;
 15211  0012D0  C075  F05C         	movff	_number,_B
 15212  0012D4  C076  F05D         	movff	_number+1,_B+1
 15213                           
 15214                           ;keypad.c: 62: W = 1*number;
 15215  0012D8  C075  F056         	movff	_number,_W
 15216  0012DC  C076  F057         	movff	_number+1,_W+1
 15217                           
 15218                           ;keypad.c: 63: total_number = 2*number;
 15219  0012E0  90D8               	bcf	status,0,c
 15220  0012E2  3475               	rlcf	_number,w,c
 15221  0012E4  0101               	movlb	1	; () banked
 15222  0012E6  6F8A               	movwf	_total_number& (0+255),b
 15223  0012E8  3476               	rlcf	_number+1,w,c
 15224  0012EA  6F8B               	movwf	(_total_number+1)& (0+255),b
 15225                           
 15226                           ; BSR set to: 1
 15227                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 15228  0012EC  90D8               	bcf	status,0,c
 15229  0012EE  345E               	rlcf	_counter_step,w,c
 15230  0012F0  6ED9               	movwf	fsr2l,c
 15231  0012F2  345F               	rlcf	_counter_step+1,w,c
 15232  0012F4  6EDA               	movwf	fsr2h,c
 15233  0012F6  0E46               	movlw	low _compartment_number
 15234  0012F8  26D9               	addwf	fsr2l,f,c
 15235  0012FA  0E00               	movlw	high _compartment_number
 15236  0012FC  22DA               	addwfc	fsr2h,f,c
 15237  0012FE  CFDE F007          	movff	postinc2,??_is_valid
 15238  001302  CFDD F008          	movff	postdec2,??_is_valid+1
 15239  001306  90D8               	bcf	status,0,c
 15240  001308  3607               	rlcf	??_is_valid,f,c
 15241  00130A  3608               	rlcf	??_is_valid+1,f,c
 15242  00130C  0E30               	movlw	low _B_array
 15243  00130E  2407               	addwf	??_is_valid,w,c
 15244  001310  6ED9               	movwf	fsr2l,c
 15245  001312  0E01               	movlw	high _B_array
 15246  001314  2008               	addwfc	??_is_valid+1,w,c
 15247  001316  6EDA               	movwf	fsr2h,c
 15248  001318  C05C  FFDE         	movff	_B,postinc2
 15249  00131C  C05D  FFDD         	movff	_B+1,postdec2
 15250                           
 15251                           ; BSR set to: 1
 15252                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 15253  001320  90D8               	bcf	status,0,c
 15254  001322  345E               	rlcf	_counter_step,w,c
 15255  001324  6ED9               	movwf	fsr2l,c
 15256  001326  345F               	rlcf	_counter_step+1,w,c
 15257  001328  6EDA               	movwf	fsr2h,c
 15258  00132A  0E46               	movlw	low _compartment_number
 15259  00132C  26D9               	addwf	fsr2l,f,c
 15260  00132E  0E00               	movlw	high _compartment_number
 15261  001330  22DA               	addwfc	fsr2h,f,c
 15262  001332  CFDE F007          	movff	postinc2,??_is_valid
 15263  001336  CFDD F008          	movff	postdec2,??_is_valid+1
 15264  00133A  90D8               	bcf	status,0,c
 15265  00133C  3607               	rlcf	??_is_valid,f,c
 15266  00133E  3608               	rlcf	??_is_valid+1,f,c
 15267  001340  0E00               	movlw	low _W_array
 15268  001342  2407               	addwf	??_is_valid,w,c
 15269  001344  6ED9               	movwf	fsr2l,c
 15270  001346  0E01               	movlw	high _W_array
 15271  001348  2008               	addwfc	??_is_valid+1,w,c
 15272  00134A  6EDA               	movwf	fsr2h,c
 15273  00134C  C056  FFDE         	movff	_W,postinc2
 15274  001350  C057  FFDD         	movff	_W+1,postdec2
 15275                           
 15276                           ;keypad.c: 67: }
 15277  001354  0012               	return	
 15278  001356                     i2l879:
 15279                           
 15280                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 15281                           
 15282                           ; BSR set to: 1
 15283  001356  0E70               	movlw	low _current_set2
 15284  001358  6E01               	movwf	strcmp@s1,c
 15285  00135A  0E00               	movlw	high _current_set2
 15286  00135C  6E02               	movwf	strcmp@s1+1,c
 15287  00135E  0EE7               	movlw	low STR_85
 15288  001360  6E03               	movwf	strcmp@s2,c
 15289  001362  0EFF               	movlw	high STR_85
 15290  001364  6E04               	movwf	strcmp@s2+1,c
 15291  001366  EC75  F021         	call	_strcmp	;wreg free
 15292  00136A  5001               	movf	?_strcmp,w,c
 15293  00136C  1002               	iorwf	?_strcmp+1,w,c
 15294  00136E  A4D8               	btfss	status,2,c
 15295  001370  D04C               	goto	i2l881
 15296                           
 15297                           ;keypad.c: 69: B = 2*number;
 15298  001372  90D8               	bcf	status,0,c
 15299  001374  3475               	rlcf	_number,w,c
 15300  001376  6E5C               	movwf	_B,c
 15301  001378  3476               	rlcf	_number+1,w,c
 15302  00137A  6E5D               	movwf	_B+1,c
 15303                           
 15304                           ;keypad.c: 71: N = 1*number;
 15305  00137C  C075  F05A         	movff	_number,_N
 15306  001380  C076  F05B         	movff	_number+1,_N+1
 15307                           
 15308                           ;keypad.c: 72: total_number = 3*number;
 15309  001384  C075  F001         	movff	_number,i2___wmul@multiplier
 15310  001388  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15311  00138C  0E00               	movlw	0
 15312  00138E  6E04               	movwf	i2___wmul@multiplicand+1,c
 15313  001390  0E03               	movlw	3
 15314  001392  6E03               	movwf	i2___wmul@multiplicand,c
 15315  001394  EC75  F022         	call	i2___wmul	;wreg free
 15316  001398  C001  F18A         	movff	?i2___wmul,_total_number
 15317  00139C  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15318                           
 15319                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 15320  0013A0  90D8               	bcf	status,0,c
 15321  0013A2  345E               	rlcf	_counter_step,w,c
 15322  0013A4  6ED9               	movwf	fsr2l,c
 15323  0013A6  345F               	rlcf	_counter_step+1,w,c
 15324  0013A8  6EDA               	movwf	fsr2h,c
 15325  0013AA  0E46               	movlw	low _compartment_number
 15326  0013AC  26D9               	addwf	fsr2l,f,c
 15327  0013AE  0E00               	movlw	high _compartment_number
 15328  0013B0  22DA               	addwfc	fsr2h,f,c
 15329  0013B2  CFDE F007          	movff	postinc2,??_is_valid
 15330  0013B6  CFDD F008          	movff	postdec2,??_is_valid+1
 15331  0013BA  90D8               	bcf	status,0,c
 15332  0013BC  3607               	rlcf	??_is_valid,f,c
 15333  0013BE  3608               	rlcf	??_is_valid+1,f,c
 15334  0013C0  0E30               	movlw	low _B_array
 15335  0013C2  2407               	addwf	??_is_valid,w,c
 15336  0013C4  6ED9               	movwf	fsr2l,c
 15337  0013C6  0E01               	movlw	high _B_array
 15338  0013C8  2008               	addwfc	??_is_valid+1,w,c
 15339  0013CA  6EDA               	movwf	fsr2h,c
 15340  0013CC  C05C  FFDE         	movff	_B,postinc2
 15341  0013D0  C05D  FFDD         	movff	_B+1,postdec2
 15342                           
 15343                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 15344  0013D4  90D8               	bcf	status,0,c
 15345  0013D6  345E               	rlcf	_counter_step,w,c
 15346  0013D8  6ED9               	movwf	fsr2l,c
 15347  0013DA  345F               	rlcf	_counter_step+1,w,c
 15348  0013DC  6EDA               	movwf	fsr2h,c
 15349  0013DE  0E46               	movlw	low _compartment_number
 15350  0013E0  26D9               	addwf	fsr2l,f,c
 15351  0013E2  0E00               	movlw	high _compartment_number
 15352  0013E4  22DA               	addwfc	fsr2h,f,c
 15353  0013E6  CFDE F007          	movff	postinc2,??_is_valid
 15354  0013EA  CFDD F008          	movff	postdec2,??_is_valid+1
 15355  0013EE  90D8               	bcf	status,0,c
 15356  0013F0  3607               	rlcf	??_is_valid,f,c
 15357  0013F2  3608               	rlcf	??_is_valid+1,f,c
 15358  0013F4  0E10               	movlw	low _N_array
 15359  0013F6  2407               	addwf	??_is_valid,w,c
 15360  0013F8  6ED9               	movwf	fsr2l,c
 15361  0013FA  0E01               	movlw	high _N_array
 15362  0013FC  2008               	addwfc	??_is_valid+1,w,c
 15363  0013FE  6EDA               	movwf	fsr2h,c
 15364  001400  C05A  FFDE         	movff	_N,postinc2
 15365  001404  C05B  FFDD         	movff	_N+1,postdec2
 15366                           
 15367                           ;keypad.c: 76: }
 15368  001408  0012               	return	
 15369  00140A                     i2l881:
 15370                           
 15371                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 15372  00140A  0E70               	movlw	low _current_set2
 15373  00140C  6E01               	movwf	strcmp@s1,c
 15374  00140E  0E00               	movlw	high _current_set2
 15375  001410  6E02               	movwf	strcmp@s1+1,c
 15376  001412  0EEB               	movlw	low STR_86
 15377  001414  6E03               	movwf	strcmp@s2,c
 15378  001416  0EFF               	movlw	high STR_86
 15379  001418  6E04               	movwf	strcmp@s2+1,c
 15380  00141A  EC75  F021         	call	_strcmp	;wreg free
 15381  00141E  5001               	movf	?_strcmp,w,c
 15382  001420  1002               	iorwf	?_strcmp+1,w,c
 15383  001422  A4D8               	btfss	status,2,c
 15384  001424  D04C               	goto	i2l883
 15385                           
 15386                           ;keypad.c: 78: B = 2*number;
 15387  001426  90D8               	bcf	status,0,c
 15388  001428  3475               	rlcf	_number,w,c
 15389  00142A  6E5C               	movwf	_B,c
 15390  00142C  3476               	rlcf	_number+1,w,c
 15391  00142E  6E5D               	movwf	_B+1,c
 15392                           
 15393                           ;keypad.c: 80: S = 1*number;
 15394  001430  C075  F058         	movff	_number,_S
 15395  001434  C076  F059         	movff	_number+1,_S+1
 15396                           
 15397                           ;keypad.c: 81: total_number = 3*number;
 15398  001438  C075  F001         	movff	_number,i2___wmul@multiplier
 15399  00143C  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15400  001440  0E00               	movlw	0
 15401  001442  6E04               	movwf	i2___wmul@multiplicand+1,c
 15402  001444  0E03               	movlw	3
 15403  001446  6E03               	movwf	i2___wmul@multiplicand,c
 15404  001448  EC75  F022         	call	i2___wmul	;wreg free
 15405  00144C  C001  F18A         	movff	?i2___wmul,_total_number
 15406  001450  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15407                           
 15408                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 15409  001454  90D8               	bcf	status,0,c
 15410  001456  345E               	rlcf	_counter_step,w,c
 15411  001458  6ED9               	movwf	fsr2l,c
 15412  00145A  345F               	rlcf	_counter_step+1,w,c
 15413  00145C  6EDA               	movwf	fsr2h,c
 15414  00145E  0E46               	movlw	low _compartment_number
 15415  001460  26D9               	addwf	fsr2l,f,c
 15416  001462  0E00               	movlw	high _compartment_number
 15417  001464  22DA               	addwfc	fsr2h,f,c
 15418  001466  CFDE F007          	movff	postinc2,??_is_valid
 15419  00146A  CFDD F008          	movff	postdec2,??_is_valid+1
 15420  00146E  90D8               	bcf	status,0,c
 15421  001470  3607               	rlcf	??_is_valid,f,c
 15422  001472  3608               	rlcf	??_is_valid+1,f,c
 15423  001474  0E30               	movlw	low _B_array
 15424  001476  2407               	addwf	??_is_valid,w,c
 15425  001478  6ED9               	movwf	fsr2l,c
 15426  00147A  0E01               	movlw	high _B_array
 15427  00147C  2008               	addwfc	??_is_valid+1,w,c
 15428  00147E  6EDA               	movwf	fsr2h,c
 15429  001480  C05C  FFDE         	movff	_B,postinc2
 15430  001484  C05D  FFDD         	movff	_B+1,postdec2
 15431                           
 15432                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 15433  001488  90D8               	bcf	status,0,c
 15434  00148A  345E               	rlcf	_counter_step,w,c
 15435  00148C  6ED9               	movwf	fsr2l,c
 15436  00148E  345F               	rlcf	_counter_step+1,w,c
 15437  001490  6EDA               	movwf	fsr2h,c
 15438  001492  0E46               	movlw	low _compartment_number
 15439  001494  26D9               	addwf	fsr2l,f,c
 15440  001496  0E00               	movlw	high _compartment_number
 15441  001498  22DA               	addwfc	fsr2h,f,c
 15442  00149A  CFDE F007          	movff	postinc2,??_is_valid
 15443  00149E  CFDD F008          	movff	postdec2,??_is_valid+1
 15444  0014A2  90D8               	bcf	status,0,c
 15445  0014A4  3607               	rlcf	??_is_valid,f,c
 15446  0014A6  3608               	rlcf	??_is_valid+1,f,c
 15447  0014A8  0E20               	movlw	low _S_array
 15448  0014AA  2407               	addwf	??_is_valid,w,c
 15449  0014AC  6ED9               	movwf	fsr2l,c
 15450  0014AE  0E01               	movlw	high _S_array
 15451  0014B0  2008               	addwfc	??_is_valid+1,w,c
 15452  0014B2  6EDA               	movwf	fsr2h,c
 15453  0014B4  C058  FFDE         	movff	_S,postinc2
 15454  0014B8  C059  FFDD         	movff	_S+1,postdec2
 15455                           
 15456                           ;keypad.c: 85: }
 15457  0014BC  0012               	return	
 15458  0014BE                     i2l883:
 15459                           
 15460                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 15461  0014BE  0E70               	movlw	low _current_set2
 15462  0014C0  6E01               	movwf	strcmp@s1,c
 15463  0014C2  0E00               	movlw	high _current_set2
 15464  0014C4  6E02               	movwf	strcmp@s1+1,c
 15465  0014C6  0EEF               	movlw	low STR_87
 15466  0014C8  6E03               	movwf	strcmp@s2,c
 15467  0014CA  0EFF               	movlw	high STR_87
 15468  0014CC  6E04               	movwf	strcmp@s2+1,c
 15469  0014CE  EC75  F021         	call	_strcmp	;wreg free
 15470  0014D2  5001               	movf	?_strcmp,w,c
 15471  0014D4  1002               	iorwf	?_strcmp+1,w,c
 15472  0014D6  A4D8               	btfss	status,2,c
 15473  0014D8  D04C               	goto	i2l885
 15474                           
 15475                           ;keypad.c: 87: B = 2*number;
 15476  0014DA  90D8               	bcf	status,0,c
 15477  0014DC  3475               	rlcf	_number,w,c
 15478  0014DE  6E5C               	movwf	_B,c
 15479  0014E0  3476               	rlcf	_number+1,w,c
 15480  0014E2  6E5D               	movwf	_B+1,c
 15481                           
 15482                           ;keypad.c: 89: W = 1*number;
 15483  0014E4  C075  F056         	movff	_number,_W
 15484  0014E8  C076  F057         	movff	_number+1,_W+1
 15485                           
 15486                           ;keypad.c: 90: total_number = 3*number;
 15487  0014EC  C075  F001         	movff	_number,i2___wmul@multiplier
 15488  0014F0  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15489  0014F4  0E00               	movlw	0
 15490  0014F6  6E04               	movwf	i2___wmul@multiplicand+1,c
 15491  0014F8  0E03               	movlw	3
 15492  0014FA  6E03               	movwf	i2___wmul@multiplicand,c
 15493  0014FC  EC75  F022         	call	i2___wmul	;wreg free
 15494  001500  C001  F18A         	movff	?i2___wmul,_total_number
 15495  001504  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15496                           
 15497                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 15498  001508  90D8               	bcf	status,0,c
 15499  00150A  345E               	rlcf	_counter_step,w,c
 15500  00150C  6ED9               	movwf	fsr2l,c
 15501  00150E  345F               	rlcf	_counter_step+1,w,c
 15502  001510  6EDA               	movwf	fsr2h,c
 15503  001512  0E46               	movlw	low _compartment_number
 15504  001514  26D9               	addwf	fsr2l,f,c
 15505  001516  0E00               	movlw	high _compartment_number
 15506  001518  22DA               	addwfc	fsr2h,f,c
 15507  00151A  CFDE F007          	movff	postinc2,??_is_valid
 15508  00151E  CFDD F008          	movff	postdec2,??_is_valid+1
 15509  001522  90D8               	bcf	status,0,c
 15510  001524  3607               	rlcf	??_is_valid,f,c
 15511  001526  3608               	rlcf	??_is_valid+1,f,c
 15512  001528  0E30               	movlw	low _B_array
 15513  00152A  2407               	addwf	??_is_valid,w,c
 15514  00152C  6ED9               	movwf	fsr2l,c
 15515  00152E  0E01               	movlw	high _B_array
 15516  001530  2008               	addwfc	??_is_valid+1,w,c
 15517  001532  6EDA               	movwf	fsr2h,c
 15518  001534  C05C  FFDE         	movff	_B,postinc2
 15519  001538  C05D  FFDD         	movff	_B+1,postdec2
 15520                           
 15521                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 15522  00153C  90D8               	bcf	status,0,c
 15523  00153E  345E               	rlcf	_counter_step,w,c
 15524  001540  6ED9               	movwf	fsr2l,c
 15525  001542  345F               	rlcf	_counter_step+1,w,c
 15526  001544  6EDA               	movwf	fsr2h,c
 15527  001546  0E46               	movlw	low _compartment_number
 15528  001548  26D9               	addwf	fsr2l,f,c
 15529  00154A  0E00               	movlw	high _compartment_number
 15530  00154C  22DA               	addwfc	fsr2h,f,c
 15531  00154E  CFDE F007          	movff	postinc2,??_is_valid
 15532  001552  CFDD F008          	movff	postdec2,??_is_valid+1
 15533  001556  90D8               	bcf	status,0,c
 15534  001558  3607               	rlcf	??_is_valid,f,c
 15535  00155A  3608               	rlcf	??_is_valid+1,f,c
 15536  00155C  0E00               	movlw	low _W_array
 15537  00155E  2407               	addwf	??_is_valid,w,c
 15538  001560  6ED9               	movwf	fsr2l,c
 15539  001562  0E01               	movlw	high _W_array
 15540  001564  2008               	addwfc	??_is_valid+1,w,c
 15541  001566  6EDA               	movwf	fsr2h,c
 15542  001568  C056  FFDE         	movff	_W,postinc2
 15543  00156C  C057  FFDD         	movff	_W+1,postdec2
 15544                           
 15545                           ;keypad.c: 94: }
 15546  001570  0012               	return	
 15547  001572                     i2l885:
 15548                           
 15549                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 15550  001572  0E70               	movlw	low _current_set2
 15551  001574  6E01               	movwf	strcmp@s1,c
 15552  001576  0E00               	movlw	high _current_set2
 15553  001578  6E02               	movwf	strcmp@s1+1,c
 15554  00157A  0EC5               	movlw	low (STR_94+1)
 15555  00157C  6E03               	movwf	strcmp@s2,c
 15556  00157E  0EFF               	movlw	high (STR_94+1)
 15557  001580  6E04               	movwf	strcmp@s2+1,c
 15558  001582  EC75  F021         	call	_strcmp	;wreg free
 15559  001586  5001               	movf	?_strcmp,w,c
 15560  001588  1002               	iorwf	?_strcmp+1,w,c
 15561  00158A  A4D8               	btfss	status,2,c
 15562  00158C  D069               	goto	i2l887
 15563                           
 15564                           ;keypad.c: 96: B = 1*number;
 15565  00158E  C075  F05C         	movff	_number,_B
 15566  001592  C076  F05D         	movff	_number+1,_B+1
 15567                           
 15568                           ;keypad.c: 97: W = 1*number;
 15569  001596  C075  F056         	movff	_number,_W
 15570  00159A  C076  F057         	movff	_number+1,_W+1
 15571                           
 15572                           ;keypad.c: 98: N = 1*number;
 15573  00159E  C075  F05A         	movff	_number,_N
 15574  0015A2  C076  F05B         	movff	_number+1,_N+1
 15575                           
 15576                           ;keypad.c: 99: total_number = 3*number;
 15577  0015A6  C075  F001         	movff	_number,i2___wmul@multiplier
 15578  0015AA  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15579  0015AE  0E00               	movlw	0
 15580  0015B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 15581  0015B2  0E03               	movlw	3
 15582  0015B4  6E03               	movwf	i2___wmul@multiplicand,c
 15583  0015B6  EC75  F022         	call	i2___wmul	;wreg free
 15584  0015BA  C001  F18A         	movff	?i2___wmul,_total_number
 15585  0015BE  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15586                           
 15587                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 15588  0015C2  90D8               	bcf	status,0,c
 15589  0015C4  345E               	rlcf	_counter_step,w,c
 15590  0015C6  6ED9               	movwf	fsr2l,c
 15591  0015C8  345F               	rlcf	_counter_step+1,w,c
 15592  0015CA  6EDA               	movwf	fsr2h,c
 15593  0015CC  0E46               	movlw	low _compartment_number
 15594  0015CE  26D9               	addwf	fsr2l,f,c
 15595  0015D0  0E00               	movlw	high _compartment_number
 15596  0015D2  22DA               	addwfc	fsr2h,f,c
 15597  0015D4  CFDE F007          	movff	postinc2,??_is_valid
 15598  0015D8  CFDD F008          	movff	postdec2,??_is_valid+1
 15599  0015DC  90D8               	bcf	status,0,c
 15600  0015DE  3607               	rlcf	??_is_valid,f,c
 15601  0015E0  3608               	rlcf	??_is_valid+1,f,c
 15602  0015E2  0E30               	movlw	low _B_array
 15603  0015E4  2407               	addwf	??_is_valid,w,c
 15604  0015E6  6ED9               	movwf	fsr2l,c
 15605  0015E8  0E01               	movlw	high _B_array
 15606  0015EA  2008               	addwfc	??_is_valid+1,w,c
 15607  0015EC  6EDA               	movwf	fsr2h,c
 15608  0015EE  C05C  FFDE         	movff	_B,postinc2
 15609  0015F2  C05D  FFDD         	movff	_B+1,postdec2
 15610                           
 15611                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 15612  0015F6  90D8               	bcf	status,0,c
 15613  0015F8  345E               	rlcf	_counter_step,w,c
 15614  0015FA  6ED9               	movwf	fsr2l,c
 15615  0015FC  345F               	rlcf	_counter_step+1,w,c
 15616  0015FE  6EDA               	movwf	fsr2h,c
 15617  001600  0E46               	movlw	low _compartment_number
 15618  001602  26D9               	addwf	fsr2l,f,c
 15619  001604  0E00               	movlw	high _compartment_number
 15620  001606  22DA               	addwfc	fsr2h,f,c
 15621  001608  CFDE F007          	movff	postinc2,??_is_valid
 15622  00160C  CFDD F008          	movff	postdec2,??_is_valid+1
 15623  001610  90D8               	bcf	status,0,c
 15624  001612  3607               	rlcf	??_is_valid,f,c
 15625  001614  3608               	rlcf	??_is_valid+1,f,c
 15626  001616  0E00               	movlw	low _W_array
 15627  001618  2407               	addwf	??_is_valid,w,c
 15628  00161A  6ED9               	movwf	fsr2l,c
 15629  00161C  0E01               	movlw	high _W_array
 15630  00161E  2008               	addwfc	??_is_valid+1,w,c
 15631  001620  6EDA               	movwf	fsr2h,c
 15632  001622  C056  FFDE         	movff	_W,postinc2
 15633  001626  C057  FFDD         	movff	_W+1,postdec2
 15634                           
 15635                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 15636  00162A  90D8               	bcf	status,0,c
 15637  00162C  345E               	rlcf	_counter_step,w,c
 15638  00162E  6ED9               	movwf	fsr2l,c
 15639  001630  345F               	rlcf	_counter_step+1,w,c
 15640  001632  6EDA               	movwf	fsr2h,c
 15641  001634  0E46               	movlw	low _compartment_number
 15642  001636  26D9               	addwf	fsr2l,f,c
 15643  001638  0E00               	movlw	high _compartment_number
 15644  00163A  22DA               	addwfc	fsr2h,f,c
 15645  00163C  CFDE F007          	movff	postinc2,??_is_valid
 15646  001640  CFDD F008          	movff	postdec2,??_is_valid+1
 15647  001644  90D8               	bcf	status,0,c
 15648  001646  3607               	rlcf	??_is_valid,f,c
 15649  001648  3608               	rlcf	??_is_valid+1,f,c
 15650  00164A  0E10               	movlw	low _N_array
 15651  00164C  2407               	addwf	??_is_valid,w,c
 15652  00164E  6ED9               	movwf	fsr2l,c
 15653  001650  0E01               	movlw	high _N_array
 15654  001652  2008               	addwfc	??_is_valid+1,w,c
 15655  001654  6EDA               	movwf	fsr2h,c
 15656  001656  C05A  FFDE         	movff	_N,postinc2
 15657  00165A  C05B  FFDD         	movff	_N+1,postdec2
 15658                           
 15659                           ;keypad.c: 105: }
 15660  00165E  0012               	return	
 15661  001660                     i2l887:
 15662                           
 15663                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 15664  001660  0E70               	movlw	low _current_set2
 15665  001662  6E01               	movwf	strcmp@s1,c
 15666  001664  0E00               	movlw	high _current_set2
 15667  001666  6E02               	movwf	strcmp@s1+1,c
 15668  001668  0ECF               	movlw	low (STR_93+1)
 15669  00166A  6E03               	movwf	strcmp@s2,c
 15670  00166C  0EFF               	movlw	high (STR_93+1)
 15671  00166E  6E04               	movwf	strcmp@s2+1,c
 15672  001670  EC75  F021         	call	_strcmp	;wreg free
 15673  001674  5001               	movf	?_strcmp,w,c
 15674  001676  1002               	iorwf	?_strcmp+1,w,c
 15675  001678  A4D8               	btfss	status,2,c
 15676  00167A  D069               	goto	i2l889
 15677                           
 15678                           ;keypad.c: 107: B = 1*number;
 15679  00167C  C075  F05C         	movff	_number,_B
 15680  001680  C076  F05D         	movff	_number+1,_B+1
 15681                           
 15682                           ;keypad.c: 108: S = 1*number;
 15683  001684  C075  F058         	movff	_number,_S
 15684  001688  C076  F059         	movff	_number+1,_S+1
 15685                           
 15686                           ;keypad.c: 109: W = 1*number;
 15687  00168C  C075  F056         	movff	_number,_W
 15688  001690  C076  F057         	movff	_number+1,_W+1
 15689                           
 15690                           ;keypad.c: 110: total_number = 3*number;
 15691  001694  C075  F001         	movff	_number,i2___wmul@multiplier
 15692  001698  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15693  00169C  0E00               	movlw	0
 15694  00169E  6E04               	movwf	i2___wmul@multiplicand+1,c
 15695  0016A0  0E03               	movlw	3
 15696  0016A2  6E03               	movwf	i2___wmul@multiplicand,c
 15697  0016A4  EC75  F022         	call	i2___wmul	;wreg free
 15698  0016A8  C001  F18A         	movff	?i2___wmul,_total_number
 15699  0016AC  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15700                           
 15701                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 15702  0016B0  90D8               	bcf	status,0,c
 15703  0016B2  345E               	rlcf	_counter_step,w,c
 15704  0016B4  6ED9               	movwf	fsr2l,c
 15705  0016B6  345F               	rlcf	_counter_step+1,w,c
 15706  0016B8  6EDA               	movwf	fsr2h,c
 15707  0016BA  0E46               	movlw	low _compartment_number
 15708  0016BC  26D9               	addwf	fsr2l,f,c
 15709  0016BE  0E00               	movlw	high _compartment_number
 15710  0016C0  22DA               	addwfc	fsr2h,f,c
 15711  0016C2  CFDE F007          	movff	postinc2,??_is_valid
 15712  0016C6  CFDD F008          	movff	postdec2,??_is_valid+1
 15713  0016CA  90D8               	bcf	status,0,c
 15714  0016CC  3607               	rlcf	??_is_valid,f,c
 15715  0016CE  3608               	rlcf	??_is_valid+1,f,c
 15716  0016D0  0E30               	movlw	low _B_array
 15717  0016D2  2407               	addwf	??_is_valid,w,c
 15718  0016D4  6ED9               	movwf	fsr2l,c
 15719  0016D6  0E01               	movlw	high _B_array
 15720  0016D8  2008               	addwfc	??_is_valid+1,w,c
 15721  0016DA  6EDA               	movwf	fsr2h,c
 15722  0016DC  C05C  FFDE         	movff	_B,postinc2
 15723  0016E0  C05D  FFDD         	movff	_B+1,postdec2
 15724                           
 15725                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 15726  0016E4  90D8               	bcf	status,0,c
 15727  0016E6  345E               	rlcf	_counter_step,w,c
 15728  0016E8  6ED9               	movwf	fsr2l,c
 15729  0016EA  345F               	rlcf	_counter_step+1,w,c
 15730  0016EC  6EDA               	movwf	fsr2h,c
 15731  0016EE  0E46               	movlw	low _compartment_number
 15732  0016F0  26D9               	addwf	fsr2l,f,c
 15733  0016F2  0E00               	movlw	high _compartment_number
 15734  0016F4  22DA               	addwfc	fsr2h,f,c
 15735  0016F6  CFDE F007          	movff	postinc2,??_is_valid
 15736  0016FA  CFDD F008          	movff	postdec2,??_is_valid+1
 15737  0016FE  90D8               	bcf	status,0,c
 15738  001700  3607               	rlcf	??_is_valid,f,c
 15739  001702  3608               	rlcf	??_is_valid+1,f,c
 15740  001704  0E20               	movlw	low _S_array
 15741  001706  2407               	addwf	??_is_valid,w,c
 15742  001708  6ED9               	movwf	fsr2l,c
 15743  00170A  0E01               	movlw	high _S_array
 15744  00170C  2008               	addwfc	??_is_valid+1,w,c
 15745  00170E  6EDA               	movwf	fsr2h,c
 15746  001710  C058  FFDE         	movff	_S,postinc2
 15747  001714  C059  FFDD         	movff	_S+1,postdec2
 15748                           
 15749                           ;keypad.c: 114: W_array[compartment_number[counter_step]] = W;
 15750  001718  90D8               	bcf	status,0,c
 15751  00171A  345E               	rlcf	_counter_step,w,c
 15752  00171C  6ED9               	movwf	fsr2l,c
 15753  00171E  345F               	rlcf	_counter_step+1,w,c
 15754  001720  6EDA               	movwf	fsr2h,c
 15755  001722  0E46               	movlw	low _compartment_number
 15756  001724  26D9               	addwf	fsr2l,f,c
 15757  001726  0E00               	movlw	high _compartment_number
 15758  001728  22DA               	addwfc	fsr2h,f,c
 15759  00172A  CFDE F007          	movff	postinc2,??_is_valid
 15760  00172E  CFDD F008          	movff	postdec2,??_is_valid+1
 15761  001732  90D8               	bcf	status,0,c
 15762  001734  3607               	rlcf	??_is_valid,f,c
 15763  001736  3608               	rlcf	??_is_valid+1,f,c
 15764  001738  0E00               	movlw	low _W_array
 15765  00173A  2407               	addwf	??_is_valid,w,c
 15766  00173C  6ED9               	movwf	fsr2l,c
 15767  00173E  0E01               	movlw	high _W_array
 15768  001740  2008               	addwfc	??_is_valid+1,w,c
 15769  001742  6EDA               	movwf	fsr2h,c
 15770  001744  C056  FFDE         	movff	_W,postinc2
 15771  001748  C057  FFDD         	movff	_W+1,postdec2
 15772                           
 15773                           ;keypad.c: 116: }
 15774  00174C  0012               	return	
 15775  00174E                     i2l889:
 15776                           
 15777                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 15778  00174E  0E70               	movlw	low _current_set2
 15779  001750  6E01               	movwf	strcmp@s1,c
 15780  001752  0E00               	movlw	high _current_set2
 15781  001754  6E02               	movwf	strcmp@s1+1,c
 15782  001756  0EF3               	movlw	low STR_90
 15783  001758  6E03               	movwf	strcmp@s2,c
 15784  00175A  0EFF               	movlw	high STR_90
 15785  00175C  6E04               	movwf	strcmp@s2+1,c
 15786  00175E  EC75  F021         	call	_strcmp	;wreg free
 15787  001762  5001               	movf	?_strcmp,w,c
 15788  001764  1002               	iorwf	?_strcmp+1,w,c
 15789  001766  A4D8               	btfss	status,2,c
 15790  001768  D04C               	goto	i2l891
 15791                           
 15792                           ;keypad.c: 118: B = 1*number;
 15793  00176A  C075  F05C         	movff	_number,_B
 15794  00176E  C076  F05D         	movff	_number+1,_B+1
 15795                           
 15796                           ;keypad.c: 119: W = 2*number;
 15797  001772  90D8               	bcf	status,0,c
 15798  001774  3475               	rlcf	_number,w,c
 15799  001776  6E56               	movwf	_W,c
 15800  001778  3476               	rlcf	_number+1,w,c
 15801  00177A  6E57               	movwf	_W+1,c
 15802                           
 15803                           ;keypad.c: 120: total_number = 3*number;
 15804  00177C  C075  F001         	movff	_number,i2___wmul@multiplier
 15805  001780  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15806  001784  0E00               	movlw	0
 15807  001786  6E04               	movwf	i2___wmul@multiplicand+1,c
 15808  001788  0E03               	movlw	3
 15809  00178A  6E03               	movwf	i2___wmul@multiplicand,c
 15810  00178C  EC75  F022         	call	i2___wmul	;wreg free
 15811  001790  C001  F18A         	movff	?i2___wmul,_total_number
 15812  001794  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 15813                           
 15814                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 15815  001798  90D8               	bcf	status,0,c
 15816  00179A  345E               	rlcf	_counter_step,w,c
 15817  00179C  6ED9               	movwf	fsr2l,c
 15818  00179E  345F               	rlcf	_counter_step+1,w,c
 15819  0017A0  6EDA               	movwf	fsr2h,c
 15820  0017A2  0E46               	movlw	low _compartment_number
 15821  0017A4  26D9               	addwf	fsr2l,f,c
 15822  0017A6  0E00               	movlw	high _compartment_number
 15823  0017A8  22DA               	addwfc	fsr2h,f,c
 15824  0017AA  CFDE F007          	movff	postinc2,??_is_valid
 15825  0017AE  CFDD F008          	movff	postdec2,??_is_valid+1
 15826  0017B2  90D8               	bcf	status,0,c
 15827  0017B4  3607               	rlcf	??_is_valid,f,c
 15828  0017B6  3608               	rlcf	??_is_valid+1,f,c
 15829  0017B8  0E30               	movlw	low _B_array
 15830  0017BA  2407               	addwf	??_is_valid,w,c
 15831  0017BC  6ED9               	movwf	fsr2l,c
 15832  0017BE  0E01               	movlw	high _B_array
 15833  0017C0  2008               	addwfc	??_is_valid+1,w,c
 15834  0017C2  6EDA               	movwf	fsr2h,c
 15835  0017C4  C05C  FFDE         	movff	_B,postinc2
 15836  0017C8  C05D  FFDD         	movff	_B+1,postdec2
 15837                           
 15838                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 15839  0017CC  90D8               	bcf	status,0,c
 15840  0017CE  345E               	rlcf	_counter_step,w,c
 15841  0017D0  6ED9               	movwf	fsr2l,c
 15842  0017D2  345F               	rlcf	_counter_step+1,w,c
 15843  0017D4  6EDA               	movwf	fsr2h,c
 15844  0017D6  0E46               	movlw	low _compartment_number
 15845  0017D8  26D9               	addwf	fsr2l,f,c
 15846  0017DA  0E00               	movlw	high _compartment_number
 15847  0017DC  22DA               	addwfc	fsr2h,f,c
 15848  0017DE  CFDE F007          	movff	postinc2,??_is_valid
 15849  0017E2  CFDD F008          	movff	postdec2,??_is_valid+1
 15850  0017E6  90D8               	bcf	status,0,c
 15851  0017E8  3607               	rlcf	??_is_valid,f,c
 15852  0017EA  3608               	rlcf	??_is_valid+1,f,c
 15853  0017EC  0E00               	movlw	low _W_array
 15854  0017EE  2407               	addwf	??_is_valid,w,c
 15855  0017F0  6ED9               	movwf	fsr2l,c
 15856  0017F2  0E01               	movlw	high _W_array
 15857  0017F4  2008               	addwfc	??_is_valid+1,w,c
 15858  0017F6  6EDA               	movwf	fsr2h,c
 15859  0017F8  C056  FFDE         	movff	_W,postinc2
 15860  0017FC  C057  FFDD         	movff	_W+1,postdec2
 15861                           
 15862                           ;keypad.c: 124: }
 15863  001800  0012               	return	
 15864  001802                     i2l891:
 15865                           
 15866                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 15867  001802  0E70               	movlw	low _current_set2
 15868  001804  6E01               	movwf	strcmp@s1,c
 15869  001806  0E00               	movlw	high _current_set2
 15870  001808  6E02               	movwf	strcmp@s1+1,c
 15871  00180A  0ED3               	movlw	low STR_91
 15872  00180C  6E03               	movwf	strcmp@s2,c
 15873  00180E  0EFF               	movlw	high STR_91
 15874  001810  6E04               	movwf	strcmp@s2+1,c
 15875  001812  EC75  F021         	call	_strcmp	;wreg free
 15876  001816  5001               	movf	?_strcmp,w,c
 15877  001818  1002               	iorwf	?_strcmp+1,w,c
 15878  00181A  A4D8               	btfss	status,2,c
 15879  00181C  D06A               	goto	i2l893
 15880                           
 15881                           ;keypad.c: 126: B = 1*number;
 15882  00181E  C075  F05C         	movff	_number,_B
 15883  001822  C076  F05D         	movff	_number+1,_B+1
 15884                           
 15885                           ;keypad.c: 127: N = 1*number;
 15886  001826  C075  F05A         	movff	_number,_N
 15887  00182A  C076  F05B         	movff	_number+1,_N+1
 15888                           
 15889                           ;keypad.c: 128: W = 2*number;
 15890  00182E  90D8               	bcf	status,0,c
 15891  001830  3475               	rlcf	_number,w,c
 15892  001832  6E56               	movwf	_W,c
 15893  001834  3476               	rlcf	_number+1,w,c
 15894  001836  6E57               	movwf	_W+1,c
 15895                           
 15896                           ;keypad.c: 129: total_number = 4*number;
 15897  001838  C075  F007         	movff	_number,??_is_valid
 15898  00183C  C076  F008         	movff	_number+1,??_is_valid+1
 15899  001840  90D8               	bcf	status,0,c
 15900  001842  3607               	rlcf	??_is_valid,f,c
 15901  001844  3608               	rlcf	??_is_valid+1,f,c
 15902  001846  90D8               	bcf	status,0,c
 15903  001848  3607               	rlcf	??_is_valid,f,c
 15904  00184A  3608               	rlcf	??_is_valid+1,f,c
 15905  00184C  C007  F18A         	movff	??_is_valid,_total_number
 15906  001850  C008  F18B         	movff	??_is_valid+1,_total_number+1
 15907                           
 15908                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 15909  001854  90D8               	bcf	status,0,c
 15910  001856  345E               	rlcf	_counter_step,w,c
 15911  001858  6ED9               	movwf	fsr2l,c
 15912  00185A  345F               	rlcf	_counter_step+1,w,c
 15913  00185C  6EDA               	movwf	fsr2h,c
 15914  00185E  0E46               	movlw	low _compartment_number
 15915  001860  26D9               	addwf	fsr2l,f,c
 15916  001862  0E00               	movlw	high _compartment_number
 15917  001864  22DA               	addwfc	fsr2h,f,c
 15918  001866  CFDE F007          	movff	postinc2,??_is_valid
 15919  00186A  CFDD F008          	movff	postdec2,??_is_valid+1
 15920  00186E  90D8               	bcf	status,0,c
 15921  001870  3607               	rlcf	??_is_valid,f,c
 15922  001872  3608               	rlcf	??_is_valid+1,f,c
 15923  001874  0E30               	movlw	low _B_array
 15924  001876  2407               	addwf	??_is_valid,w,c
 15925  001878  6ED9               	movwf	fsr2l,c
 15926  00187A  0E01               	movlw	high _B_array
 15927  00187C  2008               	addwfc	??_is_valid+1,w,c
 15928  00187E  6EDA               	movwf	fsr2h,c
 15929  001880  C05C  FFDE         	movff	_B,postinc2
 15930  001884  C05D  FFDD         	movff	_B+1,postdec2
 15931                           
 15932                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 15933  001888  90D8               	bcf	status,0,c
 15934  00188A  345E               	rlcf	_counter_step,w,c
 15935  00188C  6ED9               	movwf	fsr2l,c
 15936  00188E  345F               	rlcf	_counter_step+1,w,c
 15937  001890  6EDA               	movwf	fsr2h,c
 15938  001892  0E46               	movlw	low _compartment_number
 15939  001894  26D9               	addwf	fsr2l,f,c
 15940  001896  0E00               	movlw	high _compartment_number
 15941  001898  22DA               	addwfc	fsr2h,f,c
 15942  00189A  CFDE F007          	movff	postinc2,??_is_valid
 15943  00189E  CFDD F008          	movff	postdec2,??_is_valid+1
 15944  0018A2  90D8               	bcf	status,0,c
 15945  0018A4  3607               	rlcf	??_is_valid,f,c
 15946  0018A6  3608               	rlcf	??_is_valid+1,f,c
 15947  0018A8  0E10               	movlw	low _N_array
 15948  0018AA  2407               	addwf	??_is_valid,w,c
 15949  0018AC  6ED9               	movwf	fsr2l,c
 15950  0018AE  0E01               	movlw	high _N_array
 15951  0018B0  2008               	addwfc	??_is_valid+1,w,c
 15952  0018B2  6EDA               	movwf	fsr2h,c
 15953  0018B4  C05A  FFDE         	movff	_N,postinc2
 15954  0018B8  C05B  FFDD         	movff	_N+1,postdec2
 15955                           
 15956                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 15957  0018BC  90D8               	bcf	status,0,c
 15958  0018BE  345E               	rlcf	_counter_step,w,c
 15959  0018C0  6ED9               	movwf	fsr2l,c
 15960  0018C2  345F               	rlcf	_counter_step+1,w,c
 15961  0018C4  6EDA               	movwf	fsr2h,c
 15962  0018C6  0E46               	movlw	low _compartment_number
 15963  0018C8  26D9               	addwf	fsr2l,f,c
 15964  0018CA  0E00               	movlw	high _compartment_number
 15965  0018CC  22DA               	addwfc	fsr2h,f,c
 15966  0018CE  CFDE F007          	movff	postinc2,??_is_valid
 15967  0018D2  CFDD F008          	movff	postdec2,??_is_valid+1
 15968  0018D6  90D8               	bcf	status,0,c
 15969  0018D8  3607               	rlcf	??_is_valid,f,c
 15970  0018DA  3608               	rlcf	??_is_valid+1,f,c
 15971  0018DC  0E00               	movlw	low _W_array
 15972  0018DE  2407               	addwf	??_is_valid,w,c
 15973  0018E0  6ED9               	movwf	fsr2l,c
 15974  0018E2  0E01               	movlw	high _W_array
 15975  0018E4  2008               	addwfc	??_is_valid+1,w,c
 15976  0018E6  6EDA               	movwf	fsr2h,c
 15977  0018E8  C056  FFDE         	movff	_W,postinc2
 15978  0018EC  C057  FFDD         	movff	_W+1,postdec2
 15979                           
 15980                           ;keypad.c: 134: }
 15981  0018F0  0012               	return	
 15982  0018F2                     i2l893:
 15983                           
 15984                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 15985  0018F2  0E70               	movlw	low _current_set2
 15986  0018F4  6E01               	movwf	strcmp@s1,c
 15987  0018F6  0E00               	movlw	high _current_set2
 15988  0018F8  6E02               	movwf	strcmp@s1+1,c
 15989  0018FA  0ED8               	movlw	low STR_92
 15990  0018FC  6E03               	movwf	strcmp@s2,c
 15991  0018FE  0EFF               	movlw	high STR_92
 15992  001900  6E04               	movwf	strcmp@s2+1,c
 15993  001902  EC75  F021         	call	_strcmp	;wreg free
 15994  001906  5001               	movf	?_strcmp,w,c
 15995  001908  1002               	iorwf	?_strcmp+1,w,c
 15996  00190A  A4D8               	btfss	status,2,c
 15997  00190C  D06A               	goto	i2l895
 15998                           
 15999                           ;keypad.c: 136: B = 1*number;
 16000  00190E  C075  F05C         	movff	_number,_B
 16001  001912  C076  F05D         	movff	_number+1,_B+1
 16002                           
 16003                           ;keypad.c: 137: S = 1*number;
 16004  001916  C075  F058         	movff	_number,_S
 16005  00191A  C076  F059         	movff	_number+1,_S+1
 16006                           
 16007                           ;keypad.c: 138: W = 2*number;
 16008  00191E  90D8               	bcf	status,0,c
 16009  001920  3475               	rlcf	_number,w,c
 16010  001922  6E56               	movwf	_W,c
 16011  001924  3476               	rlcf	_number+1,w,c
 16012  001926  6E57               	movwf	_W+1,c
 16013                           
 16014                           ;keypad.c: 139: total_number = 4*number;
 16015  001928  C075  F007         	movff	_number,??_is_valid
 16016  00192C  C076  F008         	movff	_number+1,??_is_valid+1
 16017  001930  90D8               	bcf	status,0,c
 16018  001932  3607               	rlcf	??_is_valid,f,c
 16019  001934  3608               	rlcf	??_is_valid+1,f,c
 16020  001936  90D8               	bcf	status,0,c
 16021  001938  3607               	rlcf	??_is_valid,f,c
 16022  00193A  3608               	rlcf	??_is_valid+1,f,c
 16023  00193C  C007  F18A         	movff	??_is_valid,_total_number
 16024  001940  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16025                           
 16026                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 16027  001944  90D8               	bcf	status,0,c
 16028  001946  345E               	rlcf	_counter_step,w,c
 16029  001948  6ED9               	movwf	fsr2l,c
 16030  00194A  345F               	rlcf	_counter_step+1,w,c
 16031  00194C  6EDA               	movwf	fsr2h,c
 16032  00194E  0E46               	movlw	low _compartment_number
 16033  001950  26D9               	addwf	fsr2l,f,c
 16034  001952  0E00               	movlw	high _compartment_number
 16035  001954  22DA               	addwfc	fsr2h,f,c
 16036  001956  CFDE F007          	movff	postinc2,??_is_valid
 16037  00195A  CFDD F008          	movff	postdec2,??_is_valid+1
 16038  00195E  90D8               	bcf	status,0,c
 16039  001960  3607               	rlcf	??_is_valid,f,c
 16040  001962  3608               	rlcf	??_is_valid+1,f,c
 16041  001964  0E30               	movlw	low _B_array
 16042  001966  2407               	addwf	??_is_valid,w,c
 16043  001968  6ED9               	movwf	fsr2l,c
 16044  00196A  0E01               	movlw	high _B_array
 16045  00196C  2008               	addwfc	??_is_valid+1,w,c
 16046  00196E  6EDA               	movwf	fsr2h,c
 16047  001970  C05C  FFDE         	movff	_B,postinc2
 16048  001974  C05D  FFDD         	movff	_B+1,postdec2
 16049                           
 16050                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 16051  001978  90D8               	bcf	status,0,c
 16052  00197A  345E               	rlcf	_counter_step,w,c
 16053  00197C  6ED9               	movwf	fsr2l,c
 16054  00197E  345F               	rlcf	_counter_step+1,w,c
 16055  001980  6EDA               	movwf	fsr2h,c
 16056  001982  0E46               	movlw	low _compartment_number
 16057  001984  26D9               	addwf	fsr2l,f,c
 16058  001986  0E00               	movlw	high _compartment_number
 16059  001988  22DA               	addwfc	fsr2h,f,c
 16060  00198A  CFDE F007          	movff	postinc2,??_is_valid
 16061  00198E  CFDD F008          	movff	postdec2,??_is_valid+1
 16062  001992  90D8               	bcf	status,0,c
 16063  001994  3607               	rlcf	??_is_valid,f,c
 16064  001996  3608               	rlcf	??_is_valid+1,f,c
 16065  001998  0E20               	movlw	low _S_array
 16066  00199A  2407               	addwf	??_is_valid,w,c
 16067  00199C  6ED9               	movwf	fsr2l,c
 16068  00199E  0E01               	movlw	high _S_array
 16069  0019A0  2008               	addwfc	??_is_valid+1,w,c
 16070  0019A2  6EDA               	movwf	fsr2h,c
 16071  0019A4  C058  FFDE         	movff	_S,postinc2
 16072  0019A8  C059  FFDD         	movff	_S+1,postdec2
 16073                           
 16074                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 16075  0019AC  90D8               	bcf	status,0,c
 16076  0019AE  345E               	rlcf	_counter_step,w,c
 16077  0019B0  6ED9               	movwf	fsr2l,c
 16078  0019B2  345F               	rlcf	_counter_step+1,w,c
 16079  0019B4  6EDA               	movwf	fsr2h,c
 16080  0019B6  0E46               	movlw	low _compartment_number
 16081  0019B8  26D9               	addwf	fsr2l,f,c
 16082  0019BA  0E00               	movlw	high _compartment_number
 16083  0019BC  22DA               	addwfc	fsr2h,f,c
 16084  0019BE  CFDE F007          	movff	postinc2,??_is_valid
 16085  0019C2  CFDD F008          	movff	postdec2,??_is_valid+1
 16086  0019C6  90D8               	bcf	status,0,c
 16087  0019C8  3607               	rlcf	??_is_valid,f,c
 16088  0019CA  3608               	rlcf	??_is_valid+1,f,c
 16089  0019CC  0E00               	movlw	low _W_array
 16090  0019CE  2407               	addwf	??_is_valid,w,c
 16091  0019D0  6ED9               	movwf	fsr2l,c
 16092  0019D2  0E01               	movlw	high _W_array
 16093  0019D4  2008               	addwfc	??_is_valid+1,w,c
 16094  0019D6  6EDA               	movwf	fsr2h,c
 16095  0019D8  C056  FFDE         	movff	_W,postinc2
 16096  0019DC  C057  FFDD         	movff	_W+1,postdec2
 16097                           
 16098                           ;keypad.c: 145: }
 16099  0019E0  0012               	return	
 16100  0019E2                     i2l895:
 16101                           
 16102                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 16103  0019E2  0E70               	movlw	low _current_set2
 16104  0019E4  6E01               	movwf	strcmp@s1,c
 16105  0019E6  0E00               	movlw	high _current_set2
 16106  0019E8  6E02               	movwf	strcmp@s1+1,c
 16107  0019EA  0ECE               	movlw	low STR_93
 16108  0019EC  6E03               	movwf	strcmp@s2,c
 16109  0019EE  0EFF               	movlw	high STR_93
 16110  0019F0  6E04               	movwf	strcmp@s2+1,c
 16111  0019F2  EC75  F021         	call	_strcmp	;wreg free
 16112  0019F6  5001               	movf	?_strcmp,w,c
 16113  0019F8  1002               	iorwf	?_strcmp+1,w,c
 16114  0019FA  A4D8               	btfss	status,2,c
 16115  0019FC  D06A               	goto	i2l897
 16116                           
 16117                           ;keypad.c: 147: B = 2*number;
 16118  0019FE  90D8               	bcf	status,0,c
 16119  001A00  3475               	rlcf	_number,w,c
 16120  001A02  6E5C               	movwf	_B,c
 16121  001A04  3476               	rlcf	_number+1,w,c
 16122  001A06  6E5D               	movwf	_B+1,c
 16123                           
 16124                           ;keypad.c: 148: S = 1*number;
 16125  001A08  C075  F058         	movff	_number,_S
 16126  001A0C  C076  F059         	movff	_number+1,_S+1
 16127                           
 16128                           ;keypad.c: 149: W = number;
 16129  001A10  C075  F056         	movff	_number,_W
 16130  001A14  C076  F057         	movff	_number+1,_W+1
 16131                           
 16132                           ;keypad.c: 150: total_number = 4*number;
 16133  001A18  C075  F007         	movff	_number,??_is_valid
 16134  001A1C  C076  F008         	movff	_number+1,??_is_valid+1
 16135  001A20  90D8               	bcf	status,0,c
 16136  001A22  3607               	rlcf	??_is_valid,f,c
 16137  001A24  3608               	rlcf	??_is_valid+1,f,c
 16138  001A26  90D8               	bcf	status,0,c
 16139  001A28  3607               	rlcf	??_is_valid,f,c
 16140  001A2A  3608               	rlcf	??_is_valid+1,f,c
 16141  001A2C  C007  F18A         	movff	??_is_valid,_total_number
 16142  001A30  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16143                           
 16144                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 16145  001A34  90D8               	bcf	status,0,c
 16146  001A36  345E               	rlcf	_counter_step,w,c
 16147  001A38  6ED9               	movwf	fsr2l,c
 16148  001A3A  345F               	rlcf	_counter_step+1,w,c
 16149  001A3C  6EDA               	movwf	fsr2h,c
 16150  001A3E  0E46               	movlw	low _compartment_number
 16151  001A40  26D9               	addwf	fsr2l,f,c
 16152  001A42  0E00               	movlw	high _compartment_number
 16153  001A44  22DA               	addwfc	fsr2h,f,c
 16154  001A46  CFDE F007          	movff	postinc2,??_is_valid
 16155  001A4A  CFDD F008          	movff	postdec2,??_is_valid+1
 16156  001A4E  90D8               	bcf	status,0,c
 16157  001A50  3607               	rlcf	??_is_valid,f,c
 16158  001A52  3608               	rlcf	??_is_valid+1,f,c
 16159  001A54  0E30               	movlw	low _B_array
 16160  001A56  2407               	addwf	??_is_valid,w,c
 16161  001A58  6ED9               	movwf	fsr2l,c
 16162  001A5A  0E01               	movlw	high _B_array
 16163  001A5C  2008               	addwfc	??_is_valid+1,w,c
 16164  001A5E  6EDA               	movwf	fsr2h,c
 16165  001A60  C05C  FFDE         	movff	_B,postinc2
 16166  001A64  C05D  FFDD         	movff	_B+1,postdec2
 16167                           
 16168                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 16169  001A68  90D8               	bcf	status,0,c
 16170  001A6A  345E               	rlcf	_counter_step,w,c
 16171  001A6C  6ED9               	movwf	fsr2l,c
 16172  001A6E  345F               	rlcf	_counter_step+1,w,c
 16173  001A70  6EDA               	movwf	fsr2h,c
 16174  001A72  0E46               	movlw	low _compartment_number
 16175  001A74  26D9               	addwf	fsr2l,f,c
 16176  001A76  0E00               	movlw	high _compartment_number
 16177  001A78  22DA               	addwfc	fsr2h,f,c
 16178  001A7A  CFDE F007          	movff	postinc2,??_is_valid
 16179  001A7E  CFDD F008          	movff	postdec2,??_is_valid+1
 16180  001A82  90D8               	bcf	status,0,c
 16181  001A84  3607               	rlcf	??_is_valid,f,c
 16182  001A86  3608               	rlcf	??_is_valid+1,f,c
 16183  001A88  0E20               	movlw	low _S_array
 16184  001A8A  2407               	addwf	??_is_valid,w,c
 16185  001A8C  6ED9               	movwf	fsr2l,c
 16186  001A8E  0E01               	movlw	high _S_array
 16187  001A90  2008               	addwfc	??_is_valid+1,w,c
 16188  001A92  6EDA               	movwf	fsr2h,c
 16189  001A94  C058  FFDE         	movff	_S,postinc2
 16190  001A98  C059  FFDD         	movff	_S+1,postdec2
 16191                           
 16192                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 16193  001A9C  90D8               	bcf	status,0,c
 16194  001A9E  345E               	rlcf	_counter_step,w,c
 16195  001AA0  6ED9               	movwf	fsr2l,c
 16196  001AA2  345F               	rlcf	_counter_step+1,w,c
 16197  001AA4  6EDA               	movwf	fsr2h,c
 16198  001AA6  0E46               	movlw	low _compartment_number
 16199  001AA8  26D9               	addwf	fsr2l,f,c
 16200  001AAA  0E00               	movlw	high _compartment_number
 16201  001AAC  22DA               	addwfc	fsr2h,f,c
 16202  001AAE  CFDE F007          	movff	postinc2,??_is_valid
 16203  001AB2  CFDD F008          	movff	postdec2,??_is_valid+1
 16204  001AB6  90D8               	bcf	status,0,c
 16205  001AB8  3607               	rlcf	??_is_valid,f,c
 16206  001ABA  3608               	rlcf	??_is_valid+1,f,c
 16207  001ABC  0E00               	movlw	low _W_array
 16208  001ABE  2407               	addwf	??_is_valid,w,c
 16209  001AC0  6ED9               	movwf	fsr2l,c
 16210  001AC2  0E01               	movlw	high _W_array
 16211  001AC4  2008               	addwfc	??_is_valid+1,w,c
 16212  001AC6  6EDA               	movwf	fsr2h,c
 16213  001AC8  C056  FFDE         	movff	_W,postinc2
 16214  001ACC  C057  FFDD         	movff	_W+1,postdec2
 16215                           
 16216                           ;keypad.c: 155: }
 16217  001AD0  0012               	return	
 16218  001AD2                     i2l897:
 16219                           
 16220                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 16221  001AD2  0E70               	movlw	low _current_set2
 16222  001AD4  6E01               	movwf	strcmp@s1,c
 16223  001AD6  0E00               	movlw	high _current_set2
 16224  001AD8  6E02               	movwf	strcmp@s1+1,c
 16225  001ADA  0EC4               	movlw	low STR_94
 16226  001ADC  6E03               	movwf	strcmp@s2,c
 16227  001ADE  0EFF               	movlw	high STR_94
 16228  001AE0  6E04               	movwf	strcmp@s2+1,c
 16229  001AE2  EC75  F021         	call	_strcmp	;wreg free
 16230  001AE6  5001               	movf	?_strcmp,w,c
 16231  001AE8  1002               	iorwf	?_strcmp+1,w,c
 16232  001AEA  A4D8               	btfss	status,2,c
 16233  001AEC  D06A               	goto	i2l899
 16234                           
 16235                           ;keypad.c: 157: B = 2*number;
 16236  001AEE  90D8               	bcf	status,0,c
 16237  001AF0  3475               	rlcf	_number,w,c
 16238  001AF2  6E5C               	movwf	_B,c
 16239  001AF4  3476               	rlcf	_number+1,w,c
 16240  001AF6  6E5D               	movwf	_B+1,c
 16241                           
 16242                           ;keypad.c: 158: N = 1*number;
 16243  001AF8  C075  F05A         	movff	_number,_N
 16244  001AFC  C076  F05B         	movff	_number+1,_N+1
 16245                           
 16246                           ;keypad.c: 159: W = 1*number;
 16247  001B00  C075  F056         	movff	_number,_W
 16248  001B04  C076  F057         	movff	_number+1,_W+1
 16249                           
 16250                           ;keypad.c: 160: total_number = 4*number;
 16251  001B08  C075  F007         	movff	_number,??_is_valid
 16252  001B0C  C076  F008         	movff	_number+1,??_is_valid+1
 16253  001B10  90D8               	bcf	status,0,c
 16254  001B12  3607               	rlcf	??_is_valid,f,c
 16255  001B14  3608               	rlcf	??_is_valid+1,f,c
 16256  001B16  90D8               	bcf	status,0,c
 16257  001B18  3607               	rlcf	??_is_valid,f,c
 16258  001B1A  3608               	rlcf	??_is_valid+1,f,c
 16259  001B1C  C007  F18A         	movff	??_is_valid,_total_number
 16260  001B20  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16261                           
 16262                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 16263  001B24  90D8               	bcf	status,0,c
 16264  001B26  345E               	rlcf	_counter_step,w,c
 16265  001B28  6ED9               	movwf	fsr2l,c
 16266  001B2A  345F               	rlcf	_counter_step+1,w,c
 16267  001B2C  6EDA               	movwf	fsr2h,c
 16268  001B2E  0E46               	movlw	low _compartment_number
 16269  001B30  26D9               	addwf	fsr2l,f,c
 16270  001B32  0E00               	movlw	high _compartment_number
 16271  001B34  22DA               	addwfc	fsr2h,f,c
 16272  001B36  CFDE F007          	movff	postinc2,??_is_valid
 16273  001B3A  CFDD F008          	movff	postdec2,??_is_valid+1
 16274  001B3E  90D8               	bcf	status,0,c
 16275  001B40  3607               	rlcf	??_is_valid,f,c
 16276  001B42  3608               	rlcf	??_is_valid+1,f,c
 16277  001B44  0E30               	movlw	low _B_array
 16278  001B46  2407               	addwf	??_is_valid,w,c
 16279  001B48  6ED9               	movwf	fsr2l,c
 16280  001B4A  0E01               	movlw	high _B_array
 16281  001B4C  2008               	addwfc	??_is_valid+1,w,c
 16282  001B4E  6EDA               	movwf	fsr2h,c
 16283  001B50  C05C  FFDE         	movff	_B,postinc2
 16284  001B54  C05D  FFDD         	movff	_B+1,postdec2
 16285                           
 16286                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 16287  001B58  90D8               	bcf	status,0,c
 16288  001B5A  345E               	rlcf	_counter_step,w,c
 16289  001B5C  6ED9               	movwf	fsr2l,c
 16290  001B5E  345F               	rlcf	_counter_step+1,w,c
 16291  001B60  6EDA               	movwf	fsr2h,c
 16292  001B62  0E46               	movlw	low _compartment_number
 16293  001B64  26D9               	addwf	fsr2l,f,c
 16294  001B66  0E00               	movlw	high _compartment_number
 16295  001B68  22DA               	addwfc	fsr2h,f,c
 16296  001B6A  CFDE F007          	movff	postinc2,??_is_valid
 16297  001B6E  CFDD F008          	movff	postdec2,??_is_valid+1
 16298  001B72  90D8               	bcf	status,0,c
 16299  001B74  3607               	rlcf	??_is_valid,f,c
 16300  001B76  3608               	rlcf	??_is_valid+1,f,c
 16301  001B78  0E10               	movlw	low _N_array
 16302  001B7A  2407               	addwf	??_is_valid,w,c
 16303  001B7C  6ED9               	movwf	fsr2l,c
 16304  001B7E  0E01               	movlw	high _N_array
 16305  001B80  2008               	addwfc	??_is_valid+1,w,c
 16306  001B82  6EDA               	movwf	fsr2h,c
 16307  001B84  C05A  FFDE         	movff	_N,postinc2
 16308  001B88  C05B  FFDD         	movff	_N+1,postdec2
 16309                           
 16310                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 16311  001B8C  90D8               	bcf	status,0,c
 16312  001B8E  345E               	rlcf	_counter_step,w,c
 16313  001B90  6ED9               	movwf	fsr2l,c
 16314  001B92  345F               	rlcf	_counter_step+1,w,c
 16315  001B94  6EDA               	movwf	fsr2h,c
 16316  001B96  0E46               	movlw	low _compartment_number
 16317  001B98  26D9               	addwf	fsr2l,f,c
 16318  001B9A  0E00               	movlw	high _compartment_number
 16319  001B9C  22DA               	addwfc	fsr2h,f,c
 16320  001B9E  CFDE F007          	movff	postinc2,??_is_valid
 16321  001BA2  CFDD F008          	movff	postdec2,??_is_valid+1
 16322  001BA6  90D8               	bcf	status,0,c
 16323  001BA8  3607               	rlcf	??_is_valid,f,c
 16324  001BAA  3608               	rlcf	??_is_valid+1,f,c
 16325  001BAC  0E00               	movlw	low _W_array
 16326  001BAE  2407               	addwf	??_is_valid,w,c
 16327  001BB0  6ED9               	movwf	fsr2l,c
 16328  001BB2  0E01               	movlw	high _W_array
 16329  001BB4  2008               	addwfc	??_is_valid+1,w,c
 16330  001BB6  6EDA               	movwf	fsr2h,c
 16331  001BB8  C056  FFDE         	movff	_W,postinc2
 16332  001BBC  C057  FFDD         	movff	_W+1,postdec2
 16333                           
 16334                           ;keypad.c: 165: }
 16335  001BC0  0012               	return	
 16336  001BC2                     i2l899:
 16337                           
 16338                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 16339  001BC2  0E70               	movlw	low _current_set2
 16340  001BC4  6E01               	movwf	strcmp@s1,c
 16341  001BC6  0E00               	movlw	high _current_set2
 16342  001BC8  6E02               	movwf	strcmp@s1+1,c
 16343  001BCA  0EC9               	movlw	low STR_95
 16344  001BCC  6E03               	movwf	strcmp@s2,c
 16345  001BCE  0EFF               	movlw	high STR_95
 16346  001BD0  6E04               	movwf	strcmp@s2+1,c
 16347  001BD2  EC75  F021         	call	_strcmp	;wreg free
 16348  001BD6  5001               	movf	?_strcmp,w,c
 16349  001BD8  1002               	iorwf	?_strcmp+1,w,c
 16350  001BDA  A4D8               	btfss	status,2,c
 16351  001BDC  D06A               	goto	i2l901
 16352                           
 16353                           ;keypad.c: 167: B = 1*number;
 16354  001BDE  C075  F05C         	movff	_number,_B
 16355  001BE2  C076  F05D         	movff	_number+1,_B+1
 16356                           
 16357                           ;keypad.c: 168: N = 2*number;
 16358  001BE6  90D8               	bcf	status,0,c
 16359  001BE8  3475               	rlcf	_number,w,c
 16360  001BEA  6E5A               	movwf	_N,c
 16361  001BEC  3476               	rlcf	_number+1,w,c
 16362  001BEE  6E5B               	movwf	_N+1,c
 16363                           
 16364                           ;keypad.c: 169: W = 1*number;
 16365  001BF0  C075  F056         	movff	_number,_W
 16366  001BF4  C076  F057         	movff	_number+1,_W+1
 16367                           
 16368                           ;keypad.c: 170: total_number = 4*number;
 16369  001BF8  C075  F007         	movff	_number,??_is_valid
 16370  001BFC  C076  F008         	movff	_number+1,??_is_valid+1
 16371  001C00  90D8               	bcf	status,0,c
 16372  001C02  3607               	rlcf	??_is_valid,f,c
 16373  001C04  3608               	rlcf	??_is_valid+1,f,c
 16374  001C06  90D8               	bcf	status,0,c
 16375  001C08  3607               	rlcf	??_is_valid,f,c
 16376  001C0A  3608               	rlcf	??_is_valid+1,f,c
 16377  001C0C  C007  F18A         	movff	??_is_valid,_total_number
 16378  001C10  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16379                           
 16380                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 16381  001C14  90D8               	bcf	status,0,c
 16382  001C16  345E               	rlcf	_counter_step,w,c
 16383  001C18  6ED9               	movwf	fsr2l,c
 16384  001C1A  345F               	rlcf	_counter_step+1,w,c
 16385  001C1C  6EDA               	movwf	fsr2h,c
 16386  001C1E  0E46               	movlw	low _compartment_number
 16387  001C20  26D9               	addwf	fsr2l,f,c
 16388  001C22  0E00               	movlw	high _compartment_number
 16389  001C24  22DA               	addwfc	fsr2h,f,c
 16390  001C26  CFDE F007          	movff	postinc2,??_is_valid
 16391  001C2A  CFDD F008          	movff	postdec2,??_is_valid+1
 16392  001C2E  90D8               	bcf	status,0,c
 16393  001C30  3607               	rlcf	??_is_valid,f,c
 16394  001C32  3608               	rlcf	??_is_valid+1,f,c
 16395  001C34  0E30               	movlw	low _B_array
 16396  001C36  2407               	addwf	??_is_valid,w,c
 16397  001C38  6ED9               	movwf	fsr2l,c
 16398  001C3A  0E01               	movlw	high _B_array
 16399  001C3C  2008               	addwfc	??_is_valid+1,w,c
 16400  001C3E  6EDA               	movwf	fsr2h,c
 16401  001C40  C05C  FFDE         	movff	_B,postinc2
 16402  001C44  C05D  FFDD         	movff	_B+1,postdec2
 16403                           
 16404                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 16405  001C48  90D8               	bcf	status,0,c
 16406  001C4A  345E               	rlcf	_counter_step,w,c
 16407  001C4C  6ED9               	movwf	fsr2l,c
 16408  001C4E  345F               	rlcf	_counter_step+1,w,c
 16409  001C50  6EDA               	movwf	fsr2h,c
 16410  001C52  0E46               	movlw	low _compartment_number
 16411  001C54  26D9               	addwf	fsr2l,f,c
 16412  001C56  0E00               	movlw	high _compartment_number
 16413  001C58  22DA               	addwfc	fsr2h,f,c
 16414  001C5A  CFDE F007          	movff	postinc2,??_is_valid
 16415  001C5E  CFDD F008          	movff	postdec2,??_is_valid+1
 16416  001C62  90D8               	bcf	status,0,c
 16417  001C64  3607               	rlcf	??_is_valid,f,c
 16418  001C66  3608               	rlcf	??_is_valid+1,f,c
 16419  001C68  0E10               	movlw	low _N_array
 16420  001C6A  2407               	addwf	??_is_valid,w,c
 16421  001C6C  6ED9               	movwf	fsr2l,c
 16422  001C6E  0E01               	movlw	high _N_array
 16423  001C70  2008               	addwfc	??_is_valid+1,w,c
 16424  001C72  6EDA               	movwf	fsr2h,c
 16425  001C74  C05A  FFDE         	movff	_N,postinc2
 16426  001C78  C05B  FFDD         	movff	_N+1,postdec2
 16427                           
 16428                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 16429  001C7C  90D8               	bcf	status,0,c
 16430  001C7E  345E               	rlcf	_counter_step,w,c
 16431  001C80  6ED9               	movwf	fsr2l,c
 16432  001C82  345F               	rlcf	_counter_step+1,w,c
 16433  001C84  6EDA               	movwf	fsr2h,c
 16434  001C86  0E46               	movlw	low _compartment_number
 16435  001C88  26D9               	addwf	fsr2l,f,c
 16436  001C8A  0E00               	movlw	high _compartment_number
 16437  001C8C  22DA               	addwfc	fsr2h,f,c
 16438  001C8E  CFDE F007          	movff	postinc2,??_is_valid
 16439  001C92  CFDD F008          	movff	postdec2,??_is_valid+1
 16440  001C96  90D8               	bcf	status,0,c
 16441  001C98  3607               	rlcf	??_is_valid,f,c
 16442  001C9A  3608               	rlcf	??_is_valid+1,f,c
 16443  001C9C  0E00               	movlw	low _W_array
 16444  001C9E  2407               	addwf	??_is_valid,w,c
 16445  001CA0  6ED9               	movwf	fsr2l,c
 16446  001CA2  0E01               	movlw	high _W_array
 16447  001CA4  2008               	addwfc	??_is_valid+1,w,c
 16448  001CA6  6EDA               	movwf	fsr2h,c
 16449  001CA8  C056  FFDE         	movff	_W,postinc2
 16450  001CAC  C057  FFDD         	movff	_W+1,postdec2
 16451                           
 16452                           ;keypad.c: 175: }
 16453  001CB0  0012               	return	
 16454  001CB2                     i2l901:
 16455                           
 16456                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 16457  001CB2  0E70               	movlw	low _current_set2
 16458  001CB4  6E01               	movwf	strcmp@s1,c
 16459  001CB6  0E00               	movlw	high _current_set2
 16460  001CB8  6E02               	movwf	strcmp@s1+1,c
 16461  001CBA  0EBF               	movlw	low STR_96
 16462  001CBC  6E03               	movwf	strcmp@s2,c
 16463  001CBE  0EFF               	movlw	high STR_96
 16464  001CC0  6E04               	movwf	strcmp@s2+1,c
 16465  001CC2  EC75  F021         	call	_strcmp	;wreg free
 16466  001CC6  5001               	movf	?_strcmp,w,c
 16467  001CC8  1002               	iorwf	?_strcmp+1,w,c
 16468  001CCA  A4D8               	btfss	status,2,c
 16469  001CCC  D055               	goto	i2l903
 16470                           
 16471                           ;keypad.c: 177: B = 1*number;
 16472  001CCE  C075  F05C         	movff	_number,_B
 16473  001CD2  C076  F05D         	movff	_number+1,_B+1
 16474                           
 16475                           ;keypad.c: 178: N = 3*number;
 16476  001CD6  C075  F001         	movff	_number,i2___wmul@multiplier
 16477  001CDA  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16478  001CDE  0E00               	movlw	0
 16479  001CE0  6E04               	movwf	i2___wmul@multiplicand+1,c
 16480  001CE2  0E03               	movlw	3
 16481  001CE4  6E03               	movwf	i2___wmul@multiplicand,c
 16482  001CE6  EC75  F022         	call	i2___wmul	;wreg free
 16483  001CEA  C001  F05A         	movff	?i2___wmul,_N
 16484  001CEE  C002  F05B         	movff	?i2___wmul+1,_N+1
 16485                           
 16486                           ;keypad.c: 179: total_number = 4*number;
 16487  001CF2  C075  F007         	movff	_number,??_is_valid
 16488  001CF6  C076  F008         	movff	_number+1,??_is_valid+1
 16489  001CFA  90D8               	bcf	status,0,c
 16490  001CFC  3607               	rlcf	??_is_valid,f,c
 16491  001CFE  3608               	rlcf	??_is_valid+1,f,c
 16492  001D00  90D8               	bcf	status,0,c
 16493  001D02  3607               	rlcf	??_is_valid,f,c
 16494  001D04  3608               	rlcf	??_is_valid+1,f,c
 16495  001D06  C007  F18A         	movff	??_is_valid,_total_number
 16496  001D0A  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16497                           
 16498                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 16499  001D0E  90D8               	bcf	status,0,c
 16500  001D10  345E               	rlcf	_counter_step,w,c
 16501  001D12  6ED9               	movwf	fsr2l,c
 16502  001D14  345F               	rlcf	_counter_step+1,w,c
 16503  001D16  6EDA               	movwf	fsr2h,c
 16504  001D18  0E46               	movlw	low _compartment_number
 16505  001D1A  26D9               	addwf	fsr2l,f,c
 16506  001D1C  0E00               	movlw	high _compartment_number
 16507  001D1E  22DA               	addwfc	fsr2h,f,c
 16508  001D20  CFDE F007          	movff	postinc2,??_is_valid
 16509  001D24  CFDD F008          	movff	postdec2,??_is_valid+1
 16510  001D28  90D8               	bcf	status,0,c
 16511  001D2A  3607               	rlcf	??_is_valid,f,c
 16512  001D2C  3608               	rlcf	??_is_valid+1,f,c
 16513  001D2E  0E30               	movlw	low _B_array
 16514  001D30  2407               	addwf	??_is_valid,w,c
 16515  001D32  6ED9               	movwf	fsr2l,c
 16516  001D34  0E01               	movlw	high _B_array
 16517  001D36  2008               	addwfc	??_is_valid+1,w,c
 16518  001D38  6EDA               	movwf	fsr2h,c
 16519  001D3A  C05C  FFDE         	movff	_B,postinc2
 16520  001D3E  C05D  FFDD         	movff	_B+1,postdec2
 16521                           
 16522                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 16523  001D42  90D8               	bcf	status,0,c
 16524  001D44  345E               	rlcf	_counter_step,w,c
 16525  001D46  6ED9               	movwf	fsr2l,c
 16526  001D48  345F               	rlcf	_counter_step+1,w,c
 16527  001D4A  6EDA               	movwf	fsr2h,c
 16528  001D4C  0E46               	movlw	low _compartment_number
 16529  001D4E  26D9               	addwf	fsr2l,f,c
 16530  001D50  0E00               	movlw	high _compartment_number
 16531  001D52  22DA               	addwfc	fsr2h,f,c
 16532  001D54  CFDE F007          	movff	postinc2,??_is_valid
 16533  001D58  CFDD F008          	movff	postdec2,??_is_valid+1
 16534  001D5C  90D8               	bcf	status,0,c
 16535  001D5E  3607               	rlcf	??_is_valid,f,c
 16536  001D60  3608               	rlcf	??_is_valid+1,f,c
 16537  001D62  0E10               	movlw	low _N_array
 16538  001D64  2407               	addwf	??_is_valid,w,c
 16539  001D66  6ED9               	movwf	fsr2l,c
 16540  001D68  0E01               	movlw	high _N_array
 16541  001D6A  2008               	addwfc	??_is_valid+1,w,c
 16542  001D6C  6EDA               	movwf	fsr2h,c
 16543  001D6E  C05A  FFDE         	movff	_N,postinc2
 16544  001D72  C05B  FFDD         	movff	_N+1,postdec2
 16545                           
 16546                           ;keypad.c: 184: }
 16547  001D76  0012               	return	
 16548  001D78                     i2l903:
 16549                           
 16550                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 16551  001D78  0E70               	movlw	low _current_set2
 16552  001D7A  6E01               	movwf	strcmp@s1,c
 16553  001D7C  0E00               	movlw	high _current_set2
 16554  001D7E  6E02               	movwf	strcmp@s1+1,c
 16555  001D80  0EDD               	movlw	low STR_97
 16556  001D82  6E03               	movwf	strcmp@s2,c
 16557  001D84  0EFF               	movlw	high STR_97
 16558  001D86  6E04               	movwf	strcmp@s2+1,c
 16559  001D88  EC75  F021         	call	_strcmp	;wreg free
 16560  001D8C  5001               	movf	?_strcmp,w,c
 16561  001D8E  1002               	iorwf	?_strcmp+1,w,c
 16562  001D90  A4D8               	btfss	status,2,c
 16563  001D92  0012               	return	
 16564                           
 16565                           ;keypad.c: 186: B = 1*number;
 16566  001D94  C075  F05C         	movff	_number,_B
 16567  001D98  C076  F05D         	movff	_number+1,_B+1
 16568                           
 16569                           ;keypad.c: 187: W = 3*number;
 16570  001D9C  C075  F001         	movff	_number,i2___wmul@multiplier
 16571  001DA0  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16572  001DA4  0E00               	movlw	0
 16573  001DA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 16574  001DA8  0E03               	movlw	3
 16575  001DAA  6E03               	movwf	i2___wmul@multiplicand,c
 16576  001DAC  EC75  F022         	call	i2___wmul	;wreg free
 16577  001DB0  C001  F056         	movff	?i2___wmul,_W
 16578  001DB4  C002  F057         	movff	?i2___wmul+1,_W+1
 16579                           
 16580                           ;keypad.c: 188: total_number = 4*number;
 16581  001DB8  C075  F007         	movff	_number,??_is_valid
 16582  001DBC  C076  F008         	movff	_number+1,??_is_valid+1
 16583  001DC0  90D8               	bcf	status,0,c
 16584  001DC2  3607               	rlcf	??_is_valid,f,c
 16585  001DC4  3608               	rlcf	??_is_valid+1,f,c
 16586  001DC6  90D8               	bcf	status,0,c
 16587  001DC8  3607               	rlcf	??_is_valid,f,c
 16588  001DCA  3608               	rlcf	??_is_valid+1,f,c
 16589  001DCC  C007  F18A         	movff	??_is_valid,_total_number
 16590  001DD0  C008  F18B         	movff	??_is_valid+1,_total_number+1
 16591                           
 16592                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 16593  001DD4  90D8               	bcf	status,0,c
 16594  001DD6  345E               	rlcf	_counter_step,w,c
 16595  001DD8  6ED9               	movwf	fsr2l,c
 16596  001DDA  345F               	rlcf	_counter_step+1,w,c
 16597  001DDC  6EDA               	movwf	fsr2h,c
 16598  001DDE  0E46               	movlw	low _compartment_number
 16599  001DE0  26D9               	addwf	fsr2l,f,c
 16600  001DE2  0E00               	movlw	high _compartment_number
 16601  001DE4  22DA               	addwfc	fsr2h,f,c
 16602  001DE6  CFDE F007          	movff	postinc2,??_is_valid
 16603  001DEA  CFDD F008          	movff	postdec2,??_is_valid+1
 16604  001DEE  90D8               	bcf	status,0,c
 16605  001DF0  3607               	rlcf	??_is_valid,f,c
 16606  001DF2  3608               	rlcf	??_is_valid+1,f,c
 16607  001DF4  0E30               	movlw	low _B_array
 16608  001DF6  2407               	addwf	??_is_valid,w,c
 16609  001DF8  6ED9               	movwf	fsr2l,c
 16610  001DFA  0E01               	movlw	high _B_array
 16611  001DFC  2008               	addwfc	??_is_valid+1,w,c
 16612  001DFE  6EDA               	movwf	fsr2h,c
 16613  001E00  C05C  FFDE         	movff	_B,postinc2
 16614  001E04  C05D  FFDD         	movff	_B+1,postdec2
 16615                           
 16616                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 16617  001E08  90D8               	bcf	status,0,c
 16618  001E0A  345E               	rlcf	_counter_step,w,c
 16619  001E0C  6ED9               	movwf	fsr2l,c
 16620  001E0E  345F               	rlcf	_counter_step+1,w,c
 16621  001E10  6EDA               	movwf	fsr2h,c
 16622  001E12  0E46               	movlw	low _compartment_number
 16623  001E14  26D9               	addwf	fsr2l,f,c
 16624  001E16  0E00               	movlw	high _compartment_number
 16625  001E18  22DA               	addwfc	fsr2h,f,c
 16626  001E1A  CFDE F007          	movff	postinc2,??_is_valid
 16627  001E1E  CFDD F008          	movff	postdec2,??_is_valid+1
 16628  001E22  90D8               	bcf	status,0,c
 16629  001E24  3607               	rlcf	??_is_valid,f,c
 16630  001E26  3608               	rlcf	??_is_valid+1,f,c
 16631  001E28  0E00               	movlw	low _W_array
 16632  001E2A  2407               	addwf	??_is_valid,w,c
 16633  001E2C  6ED9               	movwf	fsr2l,c
 16634  001E2E  0E01               	movlw	high _W_array
 16635  001E30  2008               	addwfc	??_is_valid+1,w,c
 16636  001E32  6EDA               	movwf	fsr2h,c
 16637  001E34  C056  FFDE         	movff	_W,postinc2
 16638  001E38  C057  FFDD         	movff	_W+1,postdec2
 16639  001E3C  0012               	return	
 16640  001E3E                     __end_of_is_valid:
 16641                           	opt stack 0
 16642                           pclatu	equ	0xFFB
 16643                           pclath	equ	0xFFA
 16644                           tblptru	equ	0xFF8
 16645                           tblptrh	equ	0xFF7
 16646                           tblptrl	equ	0xFF6
 16647                           tablat	equ	0xFF5
 16648                           prodh	equ	0xFF4
 16649                           prodl	equ	0xFF3
 16650                           intcon	equ	0xFF2
 16651                           intcon3	equ	0xFF0
 16652                           indf0	equ	0xFEF
 16653                           postinc0	equ	0xFEE
 16654                           fsr0h	equ	0xFEA
 16655                           fsr0l	equ	0xFE9
 16656                           wreg	equ	0xFE8
 16657                           indf1	equ	0xFE7
 16658                           postdec1	equ	0xFE5
 16659                           fsr1h	equ	0xFE2
 16660                           fsr1l	equ	0xFE1
 16661                           indf2	equ	0xFDF
 16662                           postinc2	equ	0xFDE
 16663                           postdec2	equ	0xFDD
 16664                           fsr2h	equ	0xFDA
 16665                           fsr2l	equ	0xFD9
 16666                           status	equ	0xFD8
 16667                           
 16668 ;; *************** function i2___wmul *****************
 16669 ;; Defined at:
 16670 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16671 ;; Parameters:    Size  Location     Type
 16672 ;;  multiplier      2    0[COMRAM] unsigned int 
 16673 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16674 ;; Auto vars:     Size  Location     Type
 16675 ;;  __wmul          2    4[COMRAM] unsigned int 
 16676 ;; Return value:  Size  Location     Type
 16677 ;;                  2    0[COMRAM] unsigned int 
 16678 ;; Registers used:
 16679 ;;		wreg, status,2, status,0, prodl, prodh
 16680 ;; Tracked objects:
 16681 ;;		On entry : 0/0
 16682 ;;		On exit  : 0/0
 16683 ;;		Unchanged: 0/0
 16684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16688 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16689 ;;Total ram usage:        6 bytes
 16690 ;; Hardware stack levels used:    1
 16691 ;; This function calls:
 16692 ;;		Nothing
 16693 ;; This function is called by:
 16694 ;;		_interruptHandler
 16695 ;;		_is_valid
 16696 ;;		i2_printf
 16697 ;; This function uses a non-reentrant model
 16698 ;;
 16699                           
 16700                           	psect	text50
 16701  0044EA                     __ptext50:
 16702                           	opt stack 0
 16703  0044EA                     i2___wmul:
 16704                           	opt stack 24
 16705                           
 16706                           ;incstack = 0
 16707  0044EA  5001               	movf	i2___wmul@multiplier,w,c
 16708  0044EC  0203               	mulwf	i2___wmul@multiplicand,c
 16709  0044EE  CFF3 F005          	movff	prodl,i2___wmul@product
 16710  0044F2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16711  0044F6  5001               	movf	i2___wmul@multiplier,w,c
 16712  0044F8  0204               	mulwf	i2___wmul@multiplicand+1,c
 16713  0044FA  50F3               	movf	prodl,w,c
 16714  0044FC  2606               	addwf	i2___wmul@product+1,f,c
 16715  0044FE  5002               	movf	i2___wmul@multiplier+1,w,c
 16716  004500  0203               	mulwf	i2___wmul@multiplicand,c
 16717  004502  50F3               	movf	prodl,w,c
 16718  004504  2606               	addwf	i2___wmul@product+1,f,c
 16719  004506  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16720  00450A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16721  00450E  0012               	return	
 16722  004510                     __end_ofi2___wmul:
 16723                           	opt stack 0
 16724                           pclatu	equ	0xFFB
 16725                           pclath	equ	0xFFA
 16726                           tblptru	equ	0xFF8
 16727                           tblptrh	equ	0xFF7
 16728                           tblptrl	equ	0xFF6
 16729                           tablat	equ	0xFF5
 16730                           prodh	equ	0xFF4
 16731                           prodl	equ	0xFF3
 16732                           intcon	equ	0xFF2
 16733                           intcon3	equ	0xFF0
 16734                           indf0	equ	0xFEF
 16735                           postinc0	equ	0xFEE
 16736                           fsr0h	equ	0xFEA
 16737                           fsr0l	equ	0xFE9
 16738                           wreg	equ	0xFE8
 16739                           indf1	equ	0xFE7
 16740                           postdec1	equ	0xFE5
 16741                           fsr1h	equ	0xFE2
 16742                           fsr1l	equ	0xFE1
 16743                           indf2	equ	0xFDF
 16744                           postinc2	equ	0xFDE
 16745                           postdec2	equ	0xFDD
 16746                           fsr2h	equ	0xFDA
 16747                           fsr2l	equ	0xFD9
 16748                           status	equ	0xFD8
 16749                           
 16750 ;; *************** function _strcmp *****************
 16751 ;; Defined at:
 16752 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 16755 ;;		 -> current_set2(5), 
 16756 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 16757 ;;		 -> STR_97(5), STR_96(5), STR_95(5), STR_94(5), 
 16758 ;;		 -> STR_93(5), STR_92(5), STR_91(5), STR_90(4), 
 16759 ;;		 -> STR_89(4), STR_88(4), STR_87(4), STR_86(4), 
 16760 ;;		 -> STR_85(4), STR_84(3), STR_83(3), STR_82(3), 
 16761 ;;		 -> STR_81(2), STR_80(2), STR_79(2), STR_78(2), 
 16762 ;; Auto vars:     Size  Location     Type
 16763 ;;  r               1    5[COMRAM] char 
 16764 ;; Return value:  Size  Location     Type
 16765 ;;                  2    0[COMRAM] int 
 16766 ;; Registers used:
 16767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16768 ;; Tracked objects:
 16769 ;;		On entry : 0/0
 16770 ;;		On exit  : 0/0
 16771 ;;		Unchanged: 0/0
 16772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16776 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16777 ;;Total ram usage:        6 bytes
 16778 ;; Hardware stack levels used:    1
 16779 ;; This function calls:
 16780 ;;		Nothing
 16781 ;; This function is called by:
 16782 ;;		_is_valid
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           	psect	text51
 16787  0042EA                     __ptext51:
 16788                           	opt stack 0
 16789  0042EA                     _strcmp:
 16790                           	opt stack 24
 16791                           
 16792                           ;incstack = 0
 16793  0042EA  D004               	goto	i2l1688
 16794  0042EC  4A01               	infsnz	strcmp@s1,f,c
 16795  0042EE  2A02               	incf	strcmp@s1+1,f,c
 16796  0042F0  4A03               	infsnz	strcmp@s2,f,c
 16797  0042F2  2A04               	incf	strcmp@s2+1,f,c
 16798  0042F4                     i2l1688:
 16799  0042F4  C001  FFD9         	movff	strcmp@s1,fsr2l
 16800  0042F8  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16801  0042FC  50DF               	movf	indf2,w,c
 16802  0042FE  6E05               	movwf	??_strcmp& (0+255),c
 16803  004300  C003  FFF6         	movff	strcmp@s2,tblptrl
 16804  004304  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 16805  004308                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16806  004308  6AF8               	clrf	tblptru,c
 16807  00430A                     	endif
 16808  00430A                     	if	0	;tblptru may be non-zero
 16809  00430A                     	endif
 16810  00430A  0008               	tblrd		*
 16811  00430C  50F5               	movf	tablat,w,c
 16812  00430E  0800               	sublw	0
 16813  004310  2405               	addwf	??_strcmp,w,c
 16814  004312  6E06               	movwf	strcmp@r,c
 16815  004314  5006               	movf	strcmp@r,w,c
 16816  004316  A4D8               	btfss	status,2,c
 16817  004318  D007               	goto	i2u366_40
 16818  00431A  C001  FFD9         	movff	strcmp@s1,fsr2l
 16819  00431E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16820  004322  50DF               	movf	indf2,w,c
 16821  004324  A4D8               	btfss	status,2,c
 16822  004326  D7E2               	goto	i2l1689
 16823  004328                     i2u366_40:
 16824  004328  5006               	movf	strcmp@r,w,c
 16825  00432A  6E01               	movwf	?_strcmp,c
 16826  00432C  6A02               	clrf	?_strcmp+1,c
 16827  00432E  BE01               	btfsc	?_strcmp,7,c
 16828  004330  0602               	decf	?_strcmp+1,f,c
 16829  004332  0012               	return	
 16830  004334                     __end_of_strcmp:
 16831                           	opt stack 0
 16832                           pclatu	equ	0xFFB
 16833                           pclath	equ	0xFFA
 16834                           tblptru	equ	0xFF8
 16835                           tblptrh	equ	0xFF7
 16836                           tblptrl	equ	0xFF6
 16837                           tablat	equ	0xFF5
 16838                           prodh	equ	0xFF4
 16839                           prodl	equ	0xFF3
 16840                           intcon	equ	0xFF2
 16841                           intcon3	equ	0xFF0
 16842                           indf0	equ	0xFEF
 16843                           postinc0	equ	0xFEE
 16844                           fsr0h	equ	0xFEA
 16845                           fsr0l	equ	0xFE9
 16846                           wreg	equ	0xFE8
 16847                           indf1	equ	0xFE7
 16848                           postdec1	equ	0xFE5
 16849                           fsr1h	equ	0xFE2
 16850                           fsr1l	equ	0xFE1
 16851                           indf2	equ	0xFDF
 16852                           postinc2	equ	0xFDE
 16853                           postdec2	equ	0xFDD
 16854                           fsr2h	equ	0xFDA
 16855                           fsr2l	equ	0xFD9
 16856                           status	equ	0xFD8
 16857                           
 16858 ;; *************** function _check *****************
 16859 ;; Defined at:
 16860 ;;		line 208 in file "keypad.c"
 16861 ;; Parameters:    Size  Location     Type
 16862 ;;		None
 16863 ;; Auto vars:     Size  Location     Type
 16864 ;;		None
 16865 ;; Return value:  Size  Location     Type
 16866 ;;                  2    0[COMRAM] int 
 16867 ;; Registers used:
 16868 ;;		wreg, status,2, status,0
 16869 ;; Tracked objects:
 16870 ;;		On entry : 0/0
 16871 ;;		On exit  : 0/0
 16872 ;;		Unchanged: 0/0
 16873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16874 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16878 ;;Total ram usage:        2 bytes
 16879 ;; Hardware stack levels used:    1
 16880 ;; This function calls:
 16881 ;;		Nothing
 16882 ;; This function is called by:
 16883 ;;		_interruptHandler
 16884 ;; This function uses a non-reentrant model
 16885 ;;
 16886                           
 16887                           	psect	text52
 16888  00408A                     __ptext52:
 16889                           	opt stack 0
 16890  00408A                     _check:
 16891                           	opt stack 25
 16892                           
 16893                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 16894                           
 16895                           ;incstack = 0
 16896  00408A  BE5D               	btfsc	_B+1,7,c
 16897  00408C  D006               	goto	i2u428_40
 16898  00408E  505D               	movf	_B+1,w,c
 16899  004090  E125               	bnz	i2l5515
 16900  004092  0E03               	movlw	3
 16901  004094  5C5C               	subwf	_B,w,c
 16902  004096  B0D8               	btfsc	status,0,c
 16903  004098  D021               	goto	i2u432_40
 16904  00409A                     i2u428_40:
 16905  00409A  BE5B               	btfsc	_N+1,7,c
 16906  00409C  D006               	goto	i2u429_40
 16907  00409E  505B               	movf	_N+1,w,c
 16908  0040A0  E11D               	bnz	i2l5515
 16909  0040A2  0E04               	movlw	4
 16910  0040A4  5C5A               	subwf	_N,w,c
 16911  0040A6  B0D8               	btfsc	status,0,c
 16912  0040A8  D019               	goto	i2u432_40
 16913  0040AA                     i2u429_40:
 16914  0040AA  BE59               	btfsc	_S+1,7,c
 16915  0040AC  D006               	goto	i2u430_40
 16916  0040AE  5059               	movf	_S+1,w,c
 16917  0040B0  E115               	bnz	i2l5515
 16918  0040B2  0E03               	movlw	3
 16919  0040B4  5C58               	subwf	_S,w,c
 16920  0040B6  B0D8               	btfsc	status,0,c
 16921  0040B8  D011               	goto	i2u432_40
 16922  0040BA                     i2u430_40:
 16923  0040BA  BE57               	btfsc	_W+1,7,c
 16924  0040BC  D006               	goto	i2u431_40
 16925  0040BE  5057               	movf	_W+1,w,c
 16926  0040C0  E10D               	bnz	i2l5515
 16927  0040C2  0E05               	movlw	5
 16928  0040C4  5C56               	subwf	_W,w,c
 16929  0040C6  B0D8               	btfsc	status,0,c
 16930  0040C8  D009               	goto	i2u432_40
 16931  0040CA                     i2u431_40:
 16932  0040CA  0101               	movlb	1	; () banked
 16933  0040CC  BF8B               	btfsc	(_total_number+1)& (0+255),7,b
 16934  0040CE  D00B               	goto	i2l909
 16935  0040D0  518B               	movf	(_total_number+1)& (0+255),w,b
 16936  0040D2  E104               	bnz	i2l5515
 16937  0040D4  0E05               	movlw	5
 16938  0040D6  5D8A               	subwf	_total_number& (0+255),w,b
 16939  0040D8  A0D8               	btfss	status,0,c
 16940  0040DA  D005               	goto	i2l909
 16941  0040DC                     i2u432_40:
 16942  0040DC                     i2l5515:
 16943                           
 16944                           ;keypad.c: 213: return 0;
 16945  0040DC  0E00               	movlw	0
 16946  0040DE  6E02               	movwf	?_check+1,c
 16947  0040E0  0E00               	movlw	0
 16948  0040E2  6E01               	movwf	?_check,c
 16949  0040E4  0012               	return	
 16950  0040E6                     i2l909:
 16951                           
 16952                           ;keypad.c: 214: }
 16953                           ;keypad.c: 215: return 1;
 16954  0040E6  0E00               	movlw	0
 16955  0040E8  6E02               	movwf	?_check+1,c
 16956  0040EA  0E01               	movlw	1
 16957  0040EC  6E01               	movwf	?_check,c
 16958  0040EE  0012               	return	
 16959  0040F0                     __end_of_check:
 16960                           	opt stack 0
 16961                           pclatu	equ	0xFFB
 16962                           pclath	equ	0xFFA
 16963                           tblptru	equ	0xFF8
 16964                           tblptrh	equ	0xFF7
 16965                           tblptrl	equ	0xFF6
 16966                           tablat	equ	0xFF5
 16967                           prodh	equ	0xFF4
 16968                           prodl	equ	0xFF3
 16969                           intcon	equ	0xFF2
 16970                           intcon3	equ	0xFF0
 16971                           indf0	equ	0xFEF
 16972                           postinc0	equ	0xFEE
 16973                           fsr0h	equ	0xFEA
 16974                           fsr0l	equ	0xFE9
 16975                           wreg	equ	0xFE8
 16976                           indf1	equ	0xFE7
 16977                           postdec1	equ	0xFE5
 16978                           fsr1h	equ	0xFE2
 16979                           fsr1l	equ	0xFE1
 16980                           indf2	equ	0xFDF
 16981                           postinc2	equ	0xFDE
 16982                           postdec2	equ	0xFDD
 16983                           fsr2h	equ	0xFDA
 16984                           fsr2l	equ	0xFD9
 16985                           status	equ	0xFD8
 16986                           
 16987 ;; *************** function ___awmod *****************
 16988 ;; Defined at:
 16989 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 16990 ;; Parameters:    Size  Location     Type
 16991 ;;  dividend        2    0[COMRAM] int 
 16992 ;;  divisor         2    2[COMRAM] int 
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;  sign            1    5[COMRAM] unsigned char 
 16995 ;;  counter         1    4[COMRAM] unsigned char 
 16996 ;; Return value:  Size  Location     Type
 16997 ;;                  2    0[COMRAM] int 
 16998 ;; Registers used:
 16999 ;;		wreg, status,2, status,0
 17000 ;; Tracked objects:
 17001 ;;		On entry : 0/0
 17002 ;;		On exit  : 0/0
 17003 ;;		Unchanged: 0/0
 17004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17009 ;;Total ram usage:        6 bytes
 17010 ;; Hardware stack levels used:    1
 17011 ;; This function calls:
 17012 ;;		Nothing
 17013 ;; This function is called by:
 17014 ;;		_interruptHandler
 17015 ;; This function uses a non-reentrant model
 17016 ;;
 17017                           
 17018                           	psect	text53
 17019  00401A                     __ptext53:
 17020                           	opt stack 0
 17021  00401A                     ___awmod:
 17022                           	opt stack 25
 17023                           
 17024                           ;incstack = 0
 17025  00401A  0E00               	movlw	0
 17026  00401C  6E06               	movwf	___awmod@sign,c
 17027  00401E  AE02               	btfss	___awmod@dividend+1,7,c
 17028  004020  D006               	goto	i2l1307
 17029  004022  6C01               	negf	___awmod@dividend,c
 17030  004024  1E02               	comf	___awmod@dividend+1,f,c
 17031  004026  B0D8               	btfsc	status,0,c
 17032  004028  2A02               	incf	___awmod@dividend+1,f,c
 17033  00402A  0E01               	movlw	1
 17034  00402C  6E06               	movwf	___awmod@sign,c
 17035  00402E                     i2l1307:
 17036  00402E  AE04               	btfss	___awmod@divisor+1,7,c
 17037  004030  D004               	goto	i2l1308
 17038  004032  6C03               	negf	___awmod@divisor,c
 17039  004034  1E04               	comf	___awmod@divisor+1,f,c
 17040  004036  B0D8               	btfsc	status,0,c
 17041  004038  2A04               	incf	___awmod@divisor+1,f,c
 17042  00403A                     i2l1308:
 17043  00403A  5003               	movf	___awmod@divisor,w,c
 17044  00403C  1004               	iorwf	___awmod@divisor+1,w,c
 17045  00403E  B4D8               	btfsc	status,2,c
 17046  004040  D018               	goto	i2l1315
 17047  004042  0E01               	movlw	1
 17048  004044  6E05               	movwf	___awmod@counter,c
 17049  004046  D004               	goto	i2l1310
 17050  004048  90D8               	bcf	status,0,c
 17051  00404A  3603               	rlcf	___awmod@divisor,f,c
 17052  00404C  3604               	rlcf	___awmod@divisor+1,f,c
 17053  00404E  2A05               	incf	___awmod@counter,f,c
 17054  004050                     i2l1310:
 17055  004050  AE04               	btfss	___awmod@divisor+1,7,c
 17056  004052  D7FA               	goto	i2l1311
 17057  004054                     i2u443_40:
 17058  004054  5003               	movf	___awmod@divisor,w,c
 17059  004056  5C01               	subwf	___awmod@dividend,w,c
 17060  004058  5004               	movf	___awmod@divisor+1,w,c
 17061  00405A  5802               	subwfb	___awmod@dividend+1,w,c
 17062  00405C  A0D8               	btfss	status,0,c
 17063  00405E  D004               	goto	i2l1314
 17064  004060  5003               	movf	___awmod@divisor,w,c
 17065  004062  5E01               	subwf	___awmod@dividend,f,c
 17066  004064  5004               	movf	___awmod@divisor+1,w,c
 17067  004066  5A02               	subwfb	___awmod@dividend+1,f,c
 17068  004068                     i2l1314:
 17069  004068  90D8               	bcf	status,0,c
 17070  00406A  3204               	rrcf	___awmod@divisor+1,f,c
 17071  00406C  3203               	rrcf	___awmod@divisor,f,c
 17072  00406E  2E05               	decfsz	___awmod@counter,f,c
 17073  004070  D7F1               	goto	i2u443_40
 17074  004072                     i2l1315:
 17075  004072  5006               	movf	___awmod@sign,w,c
 17076  004074  B4D8               	btfsc	status,2,c
 17077  004076  D004               	goto	i2l1316
 17078  004078  6C01               	negf	___awmod@dividend,c
 17079  00407A  1E02               	comf	___awmod@dividend+1,f,c
 17080  00407C  B0D8               	btfsc	status,0,c
 17081  00407E  2A02               	incf	___awmod@dividend+1,f,c
 17082  004080                     i2l1316:
 17083  004080  C001  F001         	movff	___awmod@dividend,?___awmod
 17084  004084  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 17085  004088  0012               	return	
 17086  00408A                     __end_of___awmod:
 17087                           	opt stack 0
 17088                           pclatu	equ	0xFFB
 17089                           pclath	equ	0xFFA
 17090                           tblptru	equ	0xFF8
 17091                           tblptrh	equ	0xFF7
 17092                           tblptrl	equ	0xFF6
 17093                           tablat	equ	0xFF5
 17094                           prodh	equ	0xFF4
 17095                           prodl	equ	0xFF3
 17096                           intcon	equ	0xFF2
 17097                           intcon3	equ	0xFF0
 17098                           indf0	equ	0xFEF
 17099                           postinc0	equ	0xFEE
 17100                           fsr0h	equ	0xFEA
 17101                           fsr0l	equ	0xFE9
 17102                           wreg	equ	0xFE8
 17103                           indf1	equ	0xFE7
 17104                           postdec1	equ	0xFE5
 17105                           fsr1h	equ	0xFE2
 17106                           fsr1l	equ	0xFE1
 17107                           indf2	equ	0xFDF
 17108                           postinc2	equ	0xFDE
 17109                           postdec2	equ	0xFDD
 17110                           fsr2h	equ	0xFDA
 17111                           fsr2l	equ	0xFD9
 17112                           status	equ	0xFD8
 17113                           pclatu	equ	0xFFB
 17114                           pclath	equ	0xFFA
 17115                           tblptru	equ	0xFF8
 17116                           tblptrh	equ	0xFF7
 17117                           tblptrl	equ	0xFF6
 17118                           tablat	equ	0xFF5
 17119                           prodh	equ	0xFF4
 17120                           prodl	equ	0xFF3
 17121                           intcon	equ	0xFF2
 17122                           intcon3	equ	0xFF0
 17123                           indf0	equ	0xFEF
 17124                           postinc0	equ	0xFEE
 17125                           fsr0h	equ	0xFEA
 17126                           fsr0l	equ	0xFE9
 17127                           wreg	equ	0xFE8
 17128                           indf1	equ	0xFE7
 17129                           postdec1	equ	0xFE5
 17130                           fsr1h	equ	0xFE2
 17131                           fsr1l	equ	0xFE1
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           fsr2h	equ	0xFDA
 17136                           fsr2l	equ	0xFD9
 17137                           status	equ	0xFD8
 17138                           
 17139                           	psect	rparam
 17140  0000                     pclatu	equ	0xFFB
 17141                           pclath	equ	0xFFA
 17142                           tblptru	equ	0xFF8
 17143                           tblptrh	equ	0xFF7
 17144                           tblptrl	equ	0xFF6
 17145                           tablat	equ	0xFF5
 17146                           prodh	equ	0xFF4
 17147                           prodl	equ	0xFF3
 17148                           intcon	equ	0xFF2
 17149                           intcon3	equ	0xFF0
 17150                           indf0	equ	0xFEF
 17151                           postinc0	equ	0xFEE
 17152                           fsr0h	equ	0xFEA
 17153                           fsr0l	equ	0xFE9
 17154                           wreg	equ	0xFE8
 17155                           indf1	equ	0xFE7
 17156                           postdec1	equ	0xFE5
 17157                           fsr1h	equ	0xFE2
 17158                           fsr1l	equ	0xFE1
 17159                           indf2	equ	0xFDF
 17160                           postinc2	equ	0xFDE
 17161                           postdec2	equ	0xFDD
 17162                           fsr2h	equ	0xFDA
 17163                           fsr2l	equ	0xFD9
 17164                           status	equ	0xFD8
 17165                           
 17166                           	psect	temp
 17167  00007F                     btemp:
 17168                           	opt stack 0
 17169  00007F                     	ds	1
 17170  0000                     int$flags	set	btemp
 17171  0000                     wtemp6	set	btemp+1
 17172                           pclatu	equ	0xFFB
 17173                           pclath	equ	0xFFA
 17174                           tblptru	equ	0xFF8
 17175                           tblptrh	equ	0xFF7
 17176                           tblptrl	equ	0xFF6
 17177                           tablat	equ	0xFF5
 17178                           prodh	equ	0xFF4
 17179                           prodl	equ	0xFF3
 17180                           intcon	equ	0xFF2
 17181                           intcon3	equ	0xFF0
 17182                           indf0	equ	0xFEF
 17183                           postinc0	equ	0xFEE
 17184                           fsr0h	equ	0xFEA
 17185                           fsr0l	equ	0xFE9
 17186                           wreg	equ	0xFE8
 17187                           indf1	equ	0xFE7
 17188                           postdec1	equ	0xFE5
 17189                           fsr1h	equ	0xFE2
 17190                           fsr1l	equ	0xFE1
 17191                           indf2	equ	0xFDF
 17192                           postinc2	equ	0xFDE
 17193                           postdec2	equ	0xFDD
 17194                           fsr2h	equ	0xFDA
 17195                           fsr2l	equ	0xFD9
 17196                           status	equ	0xFD8


Data Sizes:
    Strings     666
    Constant    151
    Data        24
    BSS         552
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69     126
    BANK0           128     53     127
    BANK1           256      0     245
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$2230	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_57(CODE[1]), STR_55(CODE[1]), STR_52(CODE[1]), STR_49(CODE[2]), 
		 -> STR_48(CODE[2]), STR_47(CODE[2]), STR_46(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_97(CODE[5]), STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), 
		 -> STR_93(CODE[5]), STR_92(CODE[5]), STR_91(CODE[5]), STR_90(CODE[4]), 
		 -> STR_89(CODE[4]), STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), 
		 -> STR_85(CODE[4]), STR_84(CODE[3]), STR_83(CODE[3]), STR_82(CODE[3]), 
		 -> STR_81(CODE[2]), STR_80(CODE[2]), STR_79(CODE[2]), STR_78(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_98(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_77(CODE[20]), STR_76(CODE[20]), STR_75(CODE[20]), STR_74(CODE[20]), 
		 -> STR_73(CODE[19]), STR_72(CODE[20]), STR_71(CODE[20]), STR_70(CODE[20]), 
		 -> STR_69(CODE[20]), STR_68(CODE[20]), STR_67(CODE[20]), STR_66(CODE[3]), 
		 -> STR_65(CODE[12]), STR_64(CODE[19]), STR_63(CODE[19]), STR_62(CODE[14]), 
		 -> STR_61(CODE[15]), STR_60(CODE[9]), STR_59(CODE[12]), STR_58(CODE[16]), 
		 -> STR_56(CODE[7]), STR_54(CODE[3]), STR_53(CODE[11]), STR_51(CODE[3]), 
		 -> STR_50(CODE[9]), STR_45(CODE[15]), STR_44(CODE[12]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[14]), STR_40(CODE[15]), STR_39(CODE[20]), 
		 -> STR_38(CODE[17]), STR_37(CODE[13]), STR_36(CODE[16]), STR_35(CODE[15]), 
		 -> STR_34(CODE[15]), STR_33(CODE[15]), STR_32(CODE[15]), STR_31(CODE[9]), 
		 -> STR_30(CODE[10]), STR_29(CODE[19]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[11]), 
		 -> STR_22(CODE[11]), STR_21(CODE[9]), STR_20(CODE[15]), STR_19(CODE[12]), 
		 -> STR_18(CODE[20]), STR_17(CODE[7]), STR_16(CODE[16]), STR_15(CODE[14]), 
		 -> STR_14(CODE[3]), STR_13(CODE[2]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), 
		 -> STR_2(CODE[20]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_all_remain
    _all_remain->_printf
    _Washer_dispense->_printf
    _Spacer_dispense->_printf
    _Nut_dispense->_printf
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _I2C_Master_Read->_I2C_Master_Wait
    _Bolt_dispense->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   93077
                                             47 BANK0      6     6      0
                      _Bolt_dispense
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_init
                       _I2C_sendData
                       _Nut_dispense
                    _Spacer_dispense
                    _Washer_dispense
                            ___awdiv
                             ___wmul
                         _all_remain
         _generate_compartment_array
                            _initLCD
                       _initVibTimer
                         _initialize
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initVibTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     224
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _all_remain                                           5     3      2   13598
                                             42 BANK0      5     3      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2224
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Washer_dispense                                      3     1      2   13526
                                             42 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_dispense                                      3     1      2   13526
                                             42 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_dispense                                         3     1      2   13526
                                             42 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0    2962
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     664
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _Bolt_dispense                                        3     1      2   13526
                                             42 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    22     10   10816
                                             14 BANK0     28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3993
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_sendData                                         1     1      0    2320
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2298
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interruptHandler                                    27    27      0   13532
                                             42 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            34    22     12    3544
                                             12 COMRAM    30    18     12
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bolt_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_init
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Nut_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   ___awdiv
   ___wmul
     ___awdiv (ARG)
   _all_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _generate_compartment_array
   _initLCD
     _lcdInst
       _lcdNibble
   _initVibTimer
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F5       7       95.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BA      34        0.0%
DATA                 0      0     2BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  9 23:22:22 2018

                                    _B 005C                                      _N 005A  
                                    _S 0058                                      _W 0056  
                                    _i 00BB                                      _j 006B  
                   i2_I2C_Master_Start 4646                     i2_I2C_Master_Write 461C  
                          _rotate_gear 00FE                            __CFG_CPD$ON 000000  
                         ___awdiv@sign 00CB                    ___wmul@multiplicand 00D0  
                   i2___lwdiv@dividend 0001                            __CFG_BORV$3 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  l400 210A                                    l401 203E  
                                  l410 2336                                    l412 24FE  
                                  l421 24C8                                    l413 23A6  
                                  l430 28B6                                    l422 24F2  
                                  l415 2420                                    l416 2446  
                                  l417 246C                                    l409 2356  
                                  l610 37D6                                    l514 39BC  
                                  l418 2492                                    l611 37F4  
                                  l427 2560                                    l612 37FA  
                                  l613 3818                                    l614 381E  
                                  l606 3720                                    l607 37AC  
                                  l560 3FAC                                    l608 37B2  
                                  l392 1EE8                                    l609 37D0  
                                  l394 22A8                                    l395 1EF4  
                                  l396 1F42                                    l388 1E7C  
                                  l397 1F92                                    l398 1FC8  
                                  l559 3FF6                                    l568 3BD2  
                                  l920 354E                                    l569 3B88  
                                  l577 3B48                                    l921 35C0  
                                  l578 3AFE                                    l586 3ABE  
                                  l922 3642                                    l587 3A74  
                                  l915 3684                                    l916 3456  
                                  l918 349A                                    l919 34EC  
                         __CFG_CPB$OFF 000000                    ?i2_I2C_Master_Start 0001  
                  ?i2_I2C_Master_Write 0002                        _compartment_pos 0190  
                         ___awmod@sign 0006                                    prod 000FF3  
                        _assembly_step 00AF                                    wreg 000FE8  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1100 2C3E                                   l1101 2BF8  
                                 l1120 2D8E                                   l1121 2CEA  
                                 l1105 2C58                                   l1122 2DA0  
                                 l1106 2C7C                                   l1123 2D3A  
                                 l1107 2C84                                   l1108 2CB4  
                                 l1060 2992                                   l1117 2CE4  
                                 l1109 2C9A                                   l1061 29A2  
                                 l1301 3CE2                                   l1118 2DA6  
                                 l1302 3CEC                                   l1071 2B40  
                                 l1063 29BA                                   l1303 3CFA  
                                 l1080 2A92                                   l1064 29B2  
                                 l1081 2A8C                                   l1083 2ADE  
                                 l1092 2BA8                                   l1076 2B78  
                                 l1085 2AEE                                   l1077 2A54  
                                 l1069 29EE                                   l1086 2AE8  
                                 l1078 2A5A                                   l1095 2C2E  
                                 l1079 2A82                                   l1096 2BC2  
                                 l1088 2B2E                                   l1089 2B02  
                                 l1540 41F6                                   l1550 43B4  
                                 l1294 3C94                                   l1535 41CC  
                                 l1295 3CA4                                   l1536 41C4  
                                 l1456 454E                                   l1545 4392  
                                 l1297 3CC2                                   l1546 438A  
                                 l1482 3E40                                   l1298 3CBA  
                                 l1539 41EC                                   l1483 3E34  
                                 l1549 43AA                                   l1486 3E74  
                                 l1487 3E82                                   l5233 390E  
                                 l6207 25E8                                   l6217 2610  
                                 l6049 217A                                   l6059 21A2  
                                 l6173 2514                                   l4823 2B02  
                                 l6167 24FA                                   l4819 2AE8  
                                 l4863 2BFC                                   l4849 2BC6  
                                 _ADON 007E10                                   STR_1 FE73  
                                 STR_2 FD8C                                   STR_3 FEA2  
                                 STR_4 FF0A                                   STR_5 FFF7  
                                 STR_6 FFA9                                   STR_7 FDEC  
                                 STR_8 FE31                                   STR_9 FFE2  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3300 4396  
                                 u3240 3E44                                   u5000 21A2  
                                 u3420 2B24                                   u3270 41D0  
                                 u5110 24FA                                   u3175 3C36  
                                 u3176 3C38                                   u3600 2CD2  
                                 u3185 3C7A                                   u3186 3C7C  
                                 u5130 2514                                   u3427 2B1A  
                                 u3620 2DB0                                   u3380 2AC0  
                                 u5160 2610                                   u4370 3CC6  
                                 u5090 24C0                                   u3387 2AB6  
                                 u6107 1EB2                                   u3805 4490  
                                 u3645 4126                                   u6117 1ECC  
                                 u3590 2CBC                                   u3830 4012  
                                 u3806 4492                                   u6207 2380  
                                 u6127 1F0C                                   _RBIE 007F93  
                                 u3920 3ADA                                   _RBIF 007F90  
                                 u6217 2526                                   u6137 1F30  
                                 u6307 27B4                                   u6227 2542  
                                 u6147 1F86                                   u3860 3BEE  
                                 u4900 1E86                                   u6317 27D0  
                                 u6237 2572                                   u6157 1FBC  
                                 u6407 290E                                   u6327 27E6  
                                 u6247 2596                                   u6167 1FF2  
                                 u6417 2946                                   u6337 2812  
                                 u6257 270E                                   u6177 2024  
                                 u3890 3B64                                   u6507 3B9A  
                                 u6427 2960                                   u6347 282E  
                                 u6267 272A                                   u6187 20F2  
                                 u3980 382C                                   u6517 3FBE  
                                 u6437 36CA                                   u6357 2844  
                                 u6277 2756                                   u6197 22D4  
                                 u6527 4584                                   u6447 36EA  
                                 u6367 2870                                   u6287 2772  
                                 u6537 425A                                   u6457 370A  
                                 u6377 288C                                   u6297 2788  
                                 u4970 2116                                   u6547 428E  
                                 u6467 3756                                   u6387 28A2  
                                 u6557 459C                                   u6477 3852  
                                 u6397 28EE                                   u6567 3C1C  
                                 u6487 3A86                                   u6577 3C26  
                                 u6497 3B10                                   u6587 3C60  
                                 u6597 3C6A                                   _main 1E3E  
             __end_of_interruptHandler 0FE8                                   _mode 00B7  
                                 _keys FCCD                                   _temp 006E  
                                 _time 0090                                   _prev 0064  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 007F                                   _strs FD00  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                     __end_of_I2C_init 4470                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 45E0  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                          i2_lcdNibble 3D04                       __end_of_LCD_LEFT FCFB  
                         _total_number 018A                  I2C_Master_Read@ackBit 00C7  
                     ?_I2C_Master_Init 00D3                       ?_I2C_Master_Read 0001  
     i2generate_compartment_array@step 0001         generate_compartment_array@step 00C6  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                        __end_of___awdiv 3D04  
                                _EEADR 000FA9                                  STR_10 FD75  
                                STR_11 FE71                                  STR_12 FFF7  
                                STR_20 FEC0                                  STR_13 FFFA  
                                STR_21 FF97                                  STR_14 FD75  
                                STR_30 FF7B                                  STR_22 FF65  
                                STR_23 FF65                                  STR_31 FFA0  
                                STR_15 FEFC                                  STR_40 FEB1  
                                STR_32 FEDE                                  STR_24 FEB1  
                                STR_16 FE83                                  STR_17 FF03  
                                STR_41 FF18                                  STR_25 FF18  
                                STR_33 FEED                                  STR_42 FE0F  
                                STR_34 FEDE                                  STR_50 FF85  
                                STR_26 FE0F                                  STR_18 FD64  
                                STR_43 FE20                                  STR_51 FFF7  
                                STR_35 FEED                                  STR_19 FF41  
                                STR_27 FE20                                  STR_52 FEA1  
                                STR_60 FF8E                                  STR_44 FF4D  
                                STR_36 FE63                                  STR_28 FE42  
                      __end_of___awmod 408A                                  STR_53 FF70  
                                STR_37 FF34                                  STR_61 FECF  
                                STR_45 FE93                                  STR_29 FDC6  
                                STR_70 FD64                                  STR_38 FE31  
                                STR_54 FFF7                                  STR_46 FFFC  
                                STR_62 FF26                                  STR_55 FEA1  
                                STR_47 FFE9                                  STR_63 FDA0  
                                STR_39 FD78                                  STR_80 FFED  
                                STR_48 FFED                                  STR_72 FD64  
                                STR_56 FFB8                                  STR_64 FDB3  
                                STR_57 FEA1                                  STR_81 FFF1  
                                STR_49 FFF1                                  STR_65 FDA7  
                                STR_73 FDD9                                  STR_82 FFE8  
                                STR_90 FFF3                                  STR_58 FE53  
                                STR_83 FFEC                                  STR_67 FD64  
                                STR_91 FFD3                                  STR_59 FF59  
                                STR_84 FFF0                                  STR_68 FD64  
                                STR_92 FFD8                                  STR_69 FD64  
                                STR_85 FFE7                                  STR_93 FFCE  
                                STR_78 FFFC                                  STR_86 FFEB  
                                STR_94 FFC4                                  STR_79 FFE9  
                                STR_87 FFEF                                  STR_95 FFC9  
                                STR_88 FFC5                                  STR_96 FFBF  
                                STR_89 FFCF                                  STR_97 FFDD  
                                STR_98 FFB1                                  STR_99 FDFE  
                      __end_of___lldiv 3E94                        ___awdiv@divisor 00C8  
                      __end_of___lwdiv 4200                        __end_of___lwmod 43BE  
                                i2l501 0DD8                                  i2l502 0F76  
                                i2l503 0E96                                  i2l504 0ED4  
                                i2l505 0F10                                  i2l441 0E06  
                                i2l506 0F4E                                  i2l507 0F9C  
                                i2l451 02EE                                  i2l443 01AE  
                                i2l508 0F8A                                  i2l460 066C  
                                i2l452 01F2                                  i2l444 00B0  
                                i2l509 0F9A                                  i2l461 0812  
                                i2l470 07DC                                  i2l462 06BC  
                                i2l454 0242                                  i2l446 0100  
                                i2l471 0804                                  i2l472 0B4E  
                                i2l480 0A76                                  i2l464 0704  
                                i2l456 0428                                  i2l481 0AF0  
                                i2l473 085C                                  i2l457 0650  
                                i2l449 01CA                                  i2l490 0C34  
                                i2l474 089C                                  i2l466 074C  
                                i2l491 0C3C                                  i2l475 08DC  
                                i2l492 0C44                                  i2l476 091C  
                                i2l468 0794                                  i2l901 1CB2  
                                i2l493 0C4C                                  i2l477 0AF8  
                                i2l494 0C56                                  i2l478 0974  
                                i2l903 1D78                                  i2l495 0D1A  
                                i2l487 0C80                                  i2l920 32E6  
                                i2l488 0C2C                                  i2l921 335A  
                                i2l497 0D6C                                  i2l489 0CBA  
                                i2l922 33DE                                  i2l915 3422  
                                i2l499 0DA4                                  i2l916 31EA  
                                i2l909 40E6                                  i2l918 322E  
                                i2l871 110E                                  i2l919 3282  
                                i2l881 140A                                  i2l873 1170  
                                i2l891 1802                                  i2l883 14BE  
                                i2l875 1212                                  i2l867 104A  
                      ___awdiv@counter 00CA                                  i2l893 18F2  
                                i2l885 1572                                  i2l877 12B4  
                                i2l869 10AC                                  i2l895 19E2  
                                i2l887 1660                                  i2l879 1356  
                                i2l897 1AD2                                  i2l889 174E  
                                i2l899 1BC2                         all_remain@time 00F0  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _B_max 01EF                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                                  _N_max 01ED  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 45A4  
                        _N_spacingTime 009B                                  _S_max 01EB  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _W_max 01E9  
              __end_of_Washer_dispense 3AE2                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_initLCD 429E                                  _check 408A  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _angle 0192                        __end_of_dpowers FCE8  
                                _array FCF7                                  _error 018E  
                      __end_of_isdigit 4556                                  _valid 018C  
                                _state 00B1                                  _putch 4574  
                    _compartment_array 0080                                  pclath 000FFA  
                                tablat 000FF5                      _LCDinterruptState 00C0  
                     __end_ofi2___wmul 4510                                  status 000FD8  
          I2C_Master_Read@receivedByte 00C8                                  wtemp6 0080  
                      __end_of_strncmp 3E10                     __size_ofi2___awdiv 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                __size_of_I2C_sendData 0028                     __size_ofi2___lldiv 0082  
                     __end_ofi2_printf 31E8                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                        __initialization 39BE  
                    i2___lldiv@divisor 0005                     __size_ofi2_lcdInst 0014  
                         __end_of_main 2986                      i2___lldiv@counter 000D  
                         __end_of_keys FCDE                             i2printf@ap 0021  
                           i2printf@cp 001F                           __end_of_strs FD64  
                   __size_ofi2_initLCD 004C                     __size_ofi2_isdigit 001E  
             __size_of_Spacer_dispense 008A                      __end_of_LCD_RIGHT FCFC  
                               ??_main 00F5                          ?_initVibTimer 0001  
                        __activetblptr 000003                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 00C7                                 ?_check 0001  
                   ??_I2C_Master_Start 00C7                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 00C9  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 00C6                        i2lcdNibble@data 0002  
                               ?_putch 0001                           _I2C_sendData 44C2  
                      i2lcdNibble@temp 0001                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 i2l1100 306C  
                               i2l1101 3026                                 i2l1120 31AE  
                               i2l1121 3112                                 i2l1105 3086  
                               i2l1122 31BE                                 i2l1106 30AA  
                               i2l1123 315C                                 i2l1107 30B2  
                               i2l1108 30DE                                 i2l1060 2DD8  
                               i2l1301 3EF6                                 i2l1117 310C  
                               i2l1109 30C8                                 i2l1061 2DE8  
                               i2l1310 4050                                 i2l1302 3F00  
                               i2l1118 31C4                                 i2l1311 4048  
                               i2l1303 3F0E                                 i2l1071 2F72  
                               i2l1063 2DFC                                 i2l1080 2ECA  
                               i2l1064 2DF6                                 i2l1081 2EC6  
                               i2l1314 4068                                 i2l1315 4072  
                               i2l1307 402E                                 i2l1083 2F14  
                               i2l1316 4080                                 i2l1308 403A  
                               i2l1092 2FD6                                 i2l1076 2FA8  
                               i2l1085 2F24                                 i2l1077 2E90  
                               i2l1069 2E2E                                 i2l1086 2F1E  
                               i2l1078 2E94                                 i2l1095 305C  
                               i2l1079 2EBC                                 i2l1096 2FF0  
                               i2l1088 2F60                                 i2l1089 2F36  
                               i2l1540 4248                                 i2l1702 3DF6  
                               i2l1294 3EA8                                 i2l1550 43F6  
                               i2l1703 3D8C                                 i2l1295 3EB8  
                               i2l1535 421E                                 i2l1704 3DEE  
                               i2l1536 4216                                 i2l1456 456C  
                               i2l1297 3ED6                                 i2l1545 43D4  
                               i2l1482 3F46                                 i2l1298 3ECE  
                               i2l1546 43CC                                 i2l1483 3F3A  
                               i2l1539 423E                                 i2l1549 43EC  
                               i2l1486 3F7A                                 i2l1487 3F88  
                               i2l1680 440A                                 i2l1682 4426  
                               i2l1683 441E                                 i2l1679 440E  
                               i2l1688 42F4                                 i2l1696 4346  
                               i2l1689 42EC                                 i2l1697 433E  
                               i2l5261 3D8C                                 i2l5515 40DC  
                               i2l6353 00F8                                 i2l5733 2F36  
                               i2l6453 0452                                 i2l6471 0528  
                               i2l5729 2F1E                                 i2l6379 01C6  
                               i2l5773 302A                                 i2l5759 2FF4  
                               i2l6663 0A84                                 i2l6399 023A  
                               i2l6773 0E02                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                               _B_done 017E                        _openHandle_data 00BF  
                               _N_done 017C                                 _S_done 017A  
                       __CFG_XINST$OFF 000000                                 _W_done 0178  
       ??i2_generate_compartment_array 0003                                 ___wmul 449A  
                            ??___awdiv 00CA                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___lldiv 00CE  
                            ??___lwdiv 00CA                              ??___lwmod 00D1  
                     __end_of_is_valid 1E3E                                 clear_0 3A24  
                               clear_1 3A30                                 clear_2 3A3C  
                               clear_3 3A48                       ___awdiv@quotient 00CC  
                      ___awmod@divisor 0003                                 _number 0075  
                      ___awmod@counter 0005                              ??_lcdInst 00C8  
                               _printf 2986                         ??_initVibTimer 00C6  
                               _strcat 4400                                 _strcmp 42EA  
                               _strcpy 4334                         i2___awdiv@sign 0006  
                            ??_initLCD 00C9                     _compartment_number 0046  
                         __pdataCOMRAM 0077                              ??_isdigit 00C6  
                    __end_ofi2___awdiv 3F18                           _EndOfProgram 00BE  
                    __end_ofi2___lldiv 3F9A                      __end_ofi2___lwdiv 4252  
                         __mediumconst FCCC                      __end_ofi2___lwmod 4400  
                            ?_I2C_init 0001                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                     ?_Washer_dispense 00F0                      __end_ofi2_lcdInst 45F4  
                            ??_strncmp 000D                      __end_ofi2_initLCD 42EA  
                    __end_ofi2_isdigit 4574                             __accesstop 0080  
              __end_of__initialization 3A4E                          ___rparam_used 000001  
                   i2___lwmod@dividend 0008                   __end_of_happynewyear FCF7  
                       __pcstackCOMRAM 0001                     i2___lldiv@dividend 0001  
                         __pidataBANK0 464E                           __pidataBANK1 4606  
              i2I2C_Master_Read@ackBit 0002                     Bolt_dispense@B_max 00F0  
                        __end_of_check 40F0                  __end_of_Bolt_dispense 401A  
                        __end_of_array FCFA                          __end_of_putch 458C  
                          i2printf@idx 001D                            i2printf@len 0023  
                          i2printf@val 0025                          _B_spacingTime 009D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0088  
                          i2putch@data 0003                             ??_I2C_init 00DB  
                    ??_Spacer_dispense 00F2                              ?i2_printf 000D  
                              ??_check 0003                                ??_putch 00C8  
                   i2___lldiv@quotient 0009                             __pbssBANK0 0080  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
                    _S_total_dispensed 0172                      ?_interruptHandler 0001  
                           _all_remain 36B8                     ??_interruptHandler 002B  
                        _init_position 01F3                           ?i2_lcdNibble 0001  
                              ?___wmul 00CE                         main@compart_id 00F9  
           i2I2C_Master_Init@clockFreq 000E                   Spacer_dispense@S_max 00F0  
                              ?_printf 00D4                                ?_strcat 0001  
                              ?_strcmp 0001                                ?_strcpy 0007  
                           ??i2___wmul 0005                           _gear_counter 0066  
                           _final_time 0160                             ??i2_printf 0019  
                 lcd@LCDinterruptState 006F                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _B_array 0130                                _B_input 0186  
                              i2_putch 45CC                              ?_is_valid 0001  
                 __end_of_initVibTimer 45B8                                _N_array 0110  
                              _N_input 0184            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3C7E            __size_ofi2_I2C_Master_Write 000A  
                              _S_array 0120                                _S_input 0182  
                              __Hparam 0000                             _hr_initial 016E  
                              __Lparam 0000                                _W_array 0100  
                              _W_input 0180                                ___awdiv 3C7E  
                              ___awmod 401A                                ___lldiv 3E10  
                      __size_of___wmul 0028                                ___lwdiv 41AC  
                        ?_Nut_dispense 00F0                                ___lwmod 437A  
             interruptHandler@keypress 0044                                __pcinit 39BE  
                              __ramtop 1000                             _initialize 386C  
                              _lcdInst 458C                                __ptext0 1E3E  
                              __ptext1 386C                                __ptext2 45A4  
                              __ptext3 3454                                __ptext4 36B8  
                              __ptext5 3C7E                                __ptext6 3A58  
                              __ptext7 3AE2                                __ptext8 3B6C  
                              __ptext9 4442                        __size_of_printf 0448  
                            _T0CONbits 000FD5                        __size_of_strcat 0042  
                      __size_of_strcmp 004A                        __size_of_strcpy 0046  
                              _initLCD 4252                      __end_of_hexpowers FCF0  
                              _counter 0060                                _dpowers FCDE  
                              _isdigit 4534                       ___awmod@dividend 0001  
                            _LCD_RIGHT FCFB               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002A               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                          _S_spacingTime 0099  
                              _strncmp 3D8A                         __pintcode_body 0012  
                 end_of_initialization 3A4E                  __end_of_LCD_SIZE_HORZ FCFE  
                __end_of_LCD_SIZE_VERT FCFD           ??_generate_compartment_array 00C8  
                         _final_number 0150                                int_func 0012  
                  i2___wmul@multiplier 0001                             ??_is_valid 0007  
                       _operation_done 00B3              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 00CA  
                         _close_handle 00FB                            ?_all_remain 00F0  
                      ___lldiv@counter 00D2                                printf@c 00EF  
                              printf@f 00D4                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                         ??_Nut_dispense 00F2  
                              strcmp@r 0006                              _PORTAbits 000F80  
                            _PORTBbits 000F81                             _prev_state 0188  
                           _servo_ramp 00FC    __size_of_generate_compartment_array 0264  
                            _TRISAbits 000F92                              _TRISBbits 000F93  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                    i2_I2C_Master_Init 4150                      i2_I2C_Master_Read 4510  
                    i2_I2C_Master_Wait 45F4                           _happynewyear FCF0  
                    i2_I2C_Master_Stop 463E                              i2___awdiv 3E94  
                    __size_of_I2C_init 002E                             _white_tape 00B9  
                            _B_counter 00AD                      i2___lwdiv@divisor 0003  
                            i2___lldiv 3F18                              i2___lwdiv 4200  
                            i2___lwmod 43BE                     ?i2_I2C_Master_Init 000E  
                    i2___lwdiv@counter 0007                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     ?i2_I2C_Master_Stop 0001  
                    Nut_dispense@N_max 00F0                              i2_lcdInst 45E0  
                 Washer_dispense@W_max 00F0                            printf@width 00ED  
                            i2_initLCD 429E                     i2___awdiv@dividend 0001  
                  ??i2_I2C_Master_Init 0012                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4556                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                        _Spacer_dispense 3AE2  
                       __end_of___wmul 44C2                   __size_ofi2_lcdNibble 0086  
                        __pidataCOMRAM 4626                            ?_initialize 0001  
                        i2lcdInst@data 0003                       i2___wmul@product 0005  
                       __end_of_printf 2DCE                              _N_counter 00A9  
                       __end_of_strcat 4442                         __end_of_strcmp 4334  
                         i2printf@flag 0027                         __end_of_strcpy 437A  
            __end_ofi2_I2C_Master_Init 41AC              __end_ofi2_I2C_Master_Read 4534  
            __end_ofi2_I2C_Master_Wait 4606                           i2printf@prec 001E  
                  start_initialization 39BE              __end_ofi2_I2C_Master_Stop 4646  
                   i2___awdiv@quotient 0007                      __size_ofi2___wmul 0026  
                  __size_of_all_remain 01B4                              i2printf@c 002A  
                            i2printf@f 000D   __end_ofi2_generate_compartment_array 3454  
__size_ofi2_generate_compartment_array 026C           i2_generate_compartment_array 31E8  
                           ?i2___awdiv 0001                  __size_of_initVibTimer 0014  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00AB                      ??_I2C_Master_Init 00D7  
                    ??_I2C_Master_Read 00C7                      ??_I2C_Master_Wait 00C6  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C7  
                         _counter_step 005E                       __CFG_OSC$INTIO67 000000  
             __size_of_Washer_dispense 008A                             ?i2_initLCD 0001  
                           ?i2_isdigit 0001                              _W_counter 00A7  
                    interruptHandler@i 0042                               ??___wmul 00D2  
             I2C_Master_Init@clockFreq 00D3                            __pdataBANK0 00FB  
                          __pdataBANK1 01E9                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 00DE              __size_of_interruptHandler 0FE0  
                             ??_strcat 0005                               ??_strcmp 0005  
                             ??_strcpy 000B                           _initVibTimer 45A4  
                          __pbssCOMRAM 0046                            _change_mode 00B5  
                        __pcstackBANK0 00C6                      i2___lwmod@divisor 000A  
                    i2___lwmod@counter 000C                           _isdigit$1805 00C7  
                 __end_of_Nut_dispense 3BF6     __end_of_generate_compartment_array 36B8  
        ?i2_generate_compartment_array 0001             _generate_compartment_array 3454  
               __size_of_Bolt_dispense 0080                               ?i2_putch 0001  
                    _W_total_dispensed 0170                    __size_of_initialize 0152  
                         _current_set2 0070                       _I2C_Master_Start 4636  
                     _I2C_Master_Write 4612                __end_of_Spacer_dispense 3B6C  
                            _main$2230 00F7                      __size_of_is_valid 0E56  
                     ___lwdiv@dividend 00C6                           _initial_time 0168  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FCCC                              _lcdNibble 3BF6  
                             ?___awdiv 00C6                               ?___awmod 0001  
                             ?___lldiv 00C6                               ?___lwdiv 00C6  
                             ?___lwmod 00CD                              _final_set 01BC  
                             ?_lcdInst 0001                               ?_initLCD 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Init 005C  
           __size_ofi2_I2C_Master_Read 0024             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                               _I2C_init 4442  
                            _hexpowers FCE8                         __size_of_check 0066  
                     ___lwdiv@quotient 00CA                            ??i2___awdiv 0005  
                          ??i2___lldiv 0009                          _W_spacingTime 0097  
                        ?_I2C_sendData 0001                              _min_final 0164  
                             ?_strncmp 0007                            ??i2___lwdiv 0005  
                          ??i2___lwmod 000C                         __size_of_putch 0018  
                            _sec_final 0162                               _LCD_LEFT FCFA  
           __end_ofi2_I2C_Master_Start 464E             __end_ofi2_I2C_Master_Write 4626  
                          ??i2_lcdInst 0003                         ___wmul@product 00D2  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                          ??i2_initLCD 0004                            ??i2_isdigit 0001  
                        _operationTime 0062                           ??_all_remain 00F2  
                             i2u401_40 4370                               i2u401_47 4366  
                             i2u332_45 3D42                               i2u332_46 3D44  
                             i2u333_45 3D86                               i2u333_46 3D88  
                             i2u430_40 40BA                               i2u406_40 3DBA  
                             i2u431_40 40CA                               i2u432_40 40DC  
                             i2u521_40 00AC                               i2u530_40 025E  
                             i2u443_40 4054                               i2u531_40 02EA  
                             i2u523_40 011C                               i2u428_40 409A  
                             i2u372_40 3F4A                               i2u452_40 2EF8  
                             i2u452_47 2EEE                               i2u429_40 40AA  
                             i2u366_40 4328                               i2u446_45 4184  
                             i2u375_40 4222                               i2u551_40 0A84  
                             i2u535_40 0528                               i2u447_45 452C  
                             i2u447_46 452E                              _operation 0068  
                             i2u456_40 2F58                               i2u528_40 01EE  
                             i2u456_47 2F4E                               i2u481_40 3EDA  
                             i2u473_40 30E6                               i2u553_40 0B08  
                             i2u378_40 43D8                               i2u474_40 30FA  
                             i2u476_40 31CC                               i2u660_47 0136  
                             i2u565_40 0E14                               i2u549_40 0972  
                             i2u661_47 018A                               i2u566_40 0E28  
                             i2u565_48 0E16                               i2u670_47 0562  
                             i2u662_47 0278                               i2u567_40 0E3C  
                             i2u566_48 0E2A                               i2u671_47 0592  
                             i2u663_47 02CC                               i2u568_40 0E50  
                             i2u567_48 0E3E                               i2u680_47 0A5E  
                             i2u672_47 05C2                               i2u664_47 0404  
                             i2u568_48 0E52                               i2u681_47 0AD0  
                             i2u673_47 05F0                               i2u665_47 0416  
                             i2u690_47 0F40                               i2u682_47 0B22  
                             i2u674_47 060C                               i2u666_47 046A  
                             i2u691_47 0F6A                               i2u683_47 0B9C  
                             i2u675_47 062C                               i2u667_47 047C  
                             i2u692_47 45D8                               i2u684_47 0C70  
                             i2u676_47 0646                               i2u668_47 0512  
                             i2u693_47 42A4                               i2u685_47 0CDA  
                             i2u677_47 07F6                               i2u669_47 0532  
                             i2u694_47 42D8                               i2u686_47 0CF8  
                             i2u678_47 0946                               i2u695_47 45EC  
                             i2u687_47 0E88                               i2u679_47 0A1E  
                             i2u696_47 3D28                               i2u688_47 0EC6  
                             i2u697_47 3D32                               i2u689_47 0F08  
                             i2u698_47 3D6C                               i2u699_47 3D76  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
        i2I2C_Master_Write@byteToWrite 0002                      ??_Washer_dispense 00F2  
                    all_remain@timeout 00F4                          _Bolt_dispense 3F9A  
                            _nuts_data 006D                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 00CE                               i2___wmul 44EA  
                        lcdNibble@data 00C7                               _B_remain 00A5  
                           printf@flag 00EC                          lcdNibble@temp 00C6  
                           printf@prec 00E3                      i2___awdiv@divisor 0003  
                    i2___awdiv@counter 0005                               i2_printf 2DCE  
                   __end_of_all_remain 386C                         ??_I2C_sendData 00C9  
                       _LCD_HORZ_LIMIT FCFF                              copy_data0 39D2  
                            copy_data1 39F2                              copy_data2 3A12  
                 interruptHandler@temp 0045                               _N_remain 00A3  
                     __size_ofi2_putch 0014                             _EECON1bits 000FA6  
                             _S_remain 00A1                         _NeedToCloseLid 00BD  
                     ?_Spacer_dispense 00F0                               __Hrparam 0000  
                I2C_sendData@char_data 00C9                               __Lrparam 0000  
                             _W_remain 009F                     __CFG_BOREN$SBORDIS 000000  
                       ?_Bolt_dispense 00F0                       __size_of___awdiv 0086  
                     __size_of___awmod 0070                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 0084                    _rotate_1compartment 00FD  
                     __size_of___lwdiv 0054                       __size_of___lwmod 0044  
                         ??_initialize 00C6                       _interruptHandler 0008  
                     __size_of_lcdInst 0018                        _I2C_Master_Init 40F0  
                      _I2C_Master_Read 4470                       __size_of_initLCD 004C  
                          _current_set 00C1                        _I2C_Master_Wait 45B8  
                __size_of_Nut_dispense 008A                             strcat@from 0003  
                      _I2C_Master_Stop 462E                 __end_of_LCD_HORZ_LIMIT FD00  
                     __size_of_isdigit 0022                        ___lwdiv@divisor 00C8  
                      ___lwdiv@counter 00CC                               __ptext10 40F0  
                             __ptext11 3E10                               __ptext20 4252  
                             __ptext12 4470                               __ptext21 458C  
                             __ptext13 3F9A                               __ptext30 45CC  
                             __ptext22 3BF6                               __ptext14 2986  
                             __ptext31 4556                               __ptext23 44C2  
                             __ptext15 4574                               __ptext40 463E  
                             __ptext32 43BE                               __ptext24 4612  
                             __ptext16 4534                               __ptext41 4646  
                             __ptext33 4200                               __ptext25 462E  
                             __ptext17 449A                               __ptext50 44EA  
                             __ptext42 4510                               __ptext34 429E  
                             __ptext26 4636                               __ptext18 437A  
                             __ptext51 42EA                               __ptext43 45F4  
                             __ptext35 45E0                               __ptext27 45B8  
                             __ptext19 41AC                               __ptext52 408A  
                             __ptext44 4150                               __ptext36 3D04  
                             __ptext53 401A                               __ptext45 3F18  
                             __ptext37 31E8                               __ptext29 2DCE  
                             __ptext46 3D8A                               __ptext38 3E94  
                             __ptext47 4334                               __ptext39 461C  
                             __ptext48 4400                               __ptext49 0FE8  
                             _fastener 0200                         _LCD_VERT_LIMIT FCFE  
                          _min_initial 016C                       __size_of_strncmp 0086  
                             _hr_final 0166                             strcpy@from 0009  
                       i2_isdigit$1805 0002                          __size_of_main 0B48  
                             _is_valid 0FE8                             strncmp@len 000B  
                   __end_of_initialize 39BE                               _input_ch 006C  
                          _sec_initial 016A                               _temp_set 01E4  
                        ??i2_lcdNibble 0001                            ??_lcdNibble 00C6  
                             _prev_set 0194                               int$flags 007F  
                         _Nut_dispense 3B6C                              printf@idx 00E2  
                            printf@len 00E8                              printf@val 00EA  
          I2C_Master_Write@byteToWrite 00C7                              putch@data 00C8  
             __end_of_I2C_Master_Start 463E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 461C                             _INTCONbits 000FF2  
                         _motorStart_0 007E                           _motorStart_1 007C  
                         _motorStart_2 007A                           _motorStart_3 0078  
               __end_of_LCD_VERT_LIMIT FCFF                      _B_total_dispensed 0176  
                             isdigit@c 00C8                      _N_total_dispensed 0174  
                             intlevel2 0000            ?_generate_compartment_array 00C6  
                        _LCD_SIZE_HORZ FCFD                           _timerCounter 006A  
                     ___lwmod@dividend 00CD                          _LCD_SIZE_VERT FCFC  
                     ___lldiv@dividend 00C6                              strncmp@s1 0007  
                            strncmp@s2 0009                             _OSCCONbits 000FD3  
                      ??_Bolt_dispense 00F2                               printf@ap 00E6  
                             printf@cp 00E4                   __end_of_I2C_sendData 44EA  
              __end_of_I2C_Master_Init 4150                __end_of_I2C_Master_Read 449A  
              __end_of_I2C_Master_Wait 45CC                __end_of_I2C_Master_Stop 4636  
                          lcdInst@data 00C8                            _motorStop_0 007D  
                          _motorStop_1 007B                            _motorStop_2 0079  
                          _motorStop_3 0077                            _spacingTime 01F1  
                  __end_ofi2_lcdNibble 3D8A                               strcat@cp 0005  
                             strcat@to 0001                               strcmp@s1 0001  
                             strcmp@s2 0003                       ___lldiv@quotient 00CE  
                      ___lwmod@divisor 00CF                               strcpy@cp 000B  
                             strcpy@to 0007                        ___lwmod@counter 00D1  
                          _SSPCON1bits 000FC6                            _SSPCON2bits 000FC5  
                          _prev_number 0140          i2I2C_Master_Read@receivedByte 0003  
                      _Washer_dispense 3A58  
