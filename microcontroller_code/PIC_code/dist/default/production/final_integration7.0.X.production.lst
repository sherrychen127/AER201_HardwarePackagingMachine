

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 12:00:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F4620 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataCOMRAM
   117  0047D6                     __pidataCOMRAM:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _motorStop_3
   121  0047D6  0C                 	db	12
   122                           
   123                           ;initializer for _motorStart_3
   124  0047D7  0B                 	db	11
   125                           
   126                           ;initializer for _motorStop_2
   127  0047D8  0A                 	db	10
   128                           
   129                           ;initializer for _motorStart_2
   130  0047D9  39                 	db	57
   131                           
   132                           ;initializer for _motorStop_1
   133  0047DA  38                 	db	56
   134                           
   135                           ;initializer for _motorStart_1
   136  0047DB  37                 	db	55
   137                           
   138                           ;initializer for _motorStop_0
   139  0047DC  36                 	db	54
   140                           
   141                           ;initializer for _motorStart_0
   142  0047DD  35                 	db	53
   143                           
   144                           	psect	idataBANK0
   145  0047FE                     __pidataBANK0:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _spacingTime
   149  0047FE  0BB8               	dw	3000
   150                           
   151                           ;initializer for _close_handle
   152  004800  0E                 	db	14
   153                           
   154                           ;initializer for _servo_ramp
   155  004801  0D                 	db	13
   156                           
   157                           ;initializer for _rotate_1compartment
   158  004802  31                 	db	49
   159                           
   160                           ;initializer for _rotate_gear
   161  004803  30                 	db	48
   162                           
   163                           	psect	idataBANK1
   164  0047B8                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _W_max
   168  0047B8  0004               	dw	4
   169                           
   170                           ;initializer for _S_max
   171  0047BA  0004               	dw	4
   172                           
   173                           ;initializer for _N_max
   174  0047BC  0004               	dw	4
   175                           
   176                           ;initializer for _B_max
   177  0047BE  0004               	dw	4
   178                           
   179                           ;initializer for _init_position
   180  0047C0  0005               	dw	5
   181                           
   182                           	psect	mediumconst
   183  00FC72                     __pmediumconst:
   184                           	opt stack 0
   185  00FC72  00                 	db	0
   186  00FC73                     _keys:
   187                           	opt stack 0
   188  00FC73  31                 	db	49
   189  00FC74  32                 	db	50
   190  00FC75  33                 	db	51
   191  00FC76  41                 	db	65
   192  00FC77  34                 	db	52
   193  00FC78  35                 	db	53
   194  00FC79  36                 	db	54
   195  00FC7A  42                 	db	66
   196  00FC7B  37                 	db	55
   197  00FC7C  38                 	db	56
   198  00FC7D  39                 	db	57
   199  00FC7E  43                 	db	67
   200  00FC7F  2A                 	db	42
   201  00FC80  30                 	db	48
   202  00FC81  23                 	db	35
   203  00FC82  44                 	db	68
   204  00FC83  00                 	db	0
   205  00FC84                     __end_of_keys:
   206                           	opt stack 0
   207  00FC84                     _dpowers:
   208                           	opt stack 0
   209  00FC84  0001               	dw	1
   210  00FC86  000A               	dw	10
   211  00FC88  0064               	dw	100
   212  00FC8A  03E8               	dw	1000
   213  00FC8C  2710               	dw	10000
   214  00FC8E                     __end_of_dpowers:
   215                           	opt stack 0
   216  00FC8E                     _hexpowers:
   217                           	opt stack 0
   218  00FC8E  0001               	dw	1
   219  00FC90  0010               	dw	16
   220  00FC92  0100               	dw	256
   221  00FC94  1000               	dw	4096
   222  00FC96                     __end_of_hexpowers:
   223                           	opt stack 0
   224  00FC96                     _happynewyear:
   225                           	opt stack 0
   226  00FC96  45                 	db	69
   227  00FC97  14                 	db	20
   228  00FC98  14                 	db	20
   229  00FC99  00                 	db	0
   230  00FC9A  11                 	db	17
   231  00FC9B  03                 	db	3
   232  00FC9C  18                 	db	24
   233  00FC9D                     __end_of_happynewyear:
   234                           	opt stack 0
   235  00FC9D                     _VIOLET:
   236                           	opt stack 0
   237  00FC9D  00D3               	dw	211
   238  00FC9F  0094               	dw	148
   239  00FCA1                     __end_of_VIOLET:
   240                           	opt stack 0
   241  00FCA1                     _INDIGO:
   242                           	opt stack 0
   243  00FCA1  0082               	dw	130
   244  00FCA3  004B               	dw	75
   245  00FCA5                     __end_of_INDIGO:
   246                           	opt stack 0
   247  00FCA5                     _BLUE:
   248                           	opt stack 0
   249  00FCA5  00FF               	dw	255
   250  00FCA7  0000               	dw	0
   251  00FCA9                     __end_of_BLUE:
   252                           	opt stack 0
   253  00FCA9                     _GREEN:
   254                           	opt stack 0
   255  00FCA9  FF00               	dw	65280
   256  00FCAB  0000               	dw	0
   257  00FCAD                     __end_of_GREEN:
   258                           	opt stack 0
   259  00FCAD                     _YELLOW:
   260                           	opt stack 0
   261  00FCAD  FF00               	dw	65280
   262  00FCAF  00FF               	dw	255
   263  00FCB1                     __end_of_YELLOW:
   264                           	opt stack 0
   265  00FCB1                     _ORANGE:
   266                           	opt stack 0
   267  00FCB1  8C00               	dw	35840
   268  00FCB3  00FF               	dw	255
   269  00FCB5                     __end_of_ORANGE:
   270                           	opt stack 0
   271  00FCB5                     _RED:
   272                           	opt stack 0
   273  00FCB5  0000               	dw	0
   274  00FCB7  00FF               	dw	255
   275  00FCB9                     __end_of_RED:
   276                           	opt stack 0
   277  00FCB9                     _WHITE:
   278                           	opt stack 0
   279  00FCB9  FFFF               	dw	65535
   280  00FCBB  00FF               	dw	255
   281  00FCBD                     __end_of_WHITE:
   282                           	opt stack 0
   283  00FCBD                     _GREY:
   284                           	opt stack 0
   285  00FCBD  8080               	dw	32896
   286  00FCBF  0080               	dw	128
   287  00FCC1                     __end_of_GREY:
   288                           	opt stack 0
   289  00FCC1                     _BLACK:
   290                           	opt stack 0
   291  00FCC1  0000               	dw	0
   292  00FCC3  0000               	dw	0
   293  00FCC5                     __end_of_BLACK:
   294                           	opt stack 0
   295  00FCC5                     _array:
   296                           	opt stack 0
   297  00FCC5  30                 	db	48
   298  00FCC6  31                 	db	49
   299  00FCC7  00                 	db	0
   300  00FCC8                     __end_of_array:
   301                           	opt stack 0
   302  00FCC8  C7                 	db	199
   303  00FCC9                     __end_of_INST_VMOFCTR2:
   304                           	opt stack 0
   305  00FCC9  C5                 	db	197
   306  00FCCA                     __end_of_INST_VMCTR1:
   307                           	opt stack 0
   308  00FCCA  C4                 	db	196
   309  00FCCB                     __end_of_INST_PWCTR5:
   310                           	opt stack 0
   311  00FCCB  C3                 	db	195
   312  00FCCC                     __end_of_INST_PWCTR4:
   313                           	opt stack 0
   314  00FCCC  C2                 	db	194
   315  00FCCD                     __end_of_INST_PWCTR3:
   316                           	opt stack 0
   317  00FCCD  C1                 	db	193
   318  00FCCE                     __end_of_INST_PWCTR2:
   319                           	opt stack 0
   320  00FCCE  C0                 	db	192
   321  00FCCF                     __end_of_INST_PWCTR1:
   322                           	opt stack 0
   323  00FCCF  B4                 	db	180
   324  00FCD0                     __end_of_INST_INVCTR:
   325                           	opt stack 0
   326  00FCD0  B3                 	db	179
   327  00FCD1                     __end_of_INST_FRMCTR3:
   328                           	opt stack 0
   329  00FCD1  B2                 	db	178
   330  00FCD2                     __end_of_INST_FRMCTR2:
   331                           	opt stack 0
   332  00FCD2  B1                 	db	177
   333  00FCD3                     __end_of_INST_FRMCTR1:
   334                           	opt stack 0
   335  00FCD3  3A                 	db	58
   336  00FCD4                     __end_of_INST_COLMOD:
   337                           	opt stack 0
   338  00FCD4  39                 	db	57
   339  00FCD5                     __end_of_INST_IDMON:
   340                           	opt stack 0
   341  00FCD5  38                 	db	56
   342  00FCD6                     __end_of_INST_IDMOFF:
   343                           	opt stack 0
   344  00FCD6  36                 	db	54
   345  00FCD7                     __end_of_INST_MADCTL:
   346                           	opt stack 0
   347  00FCD7  35                 	db	53
   348  00FCD8                     __end_of_INST_TEON:
   349                           	opt stack 0
   350  00FCD8  34                 	db	52
   351  00FCD9                     __end_of_INST_TEOFF:
   352                           	opt stack 0
   353  00FCD9  30                 	db	48
   354  00FCDA                     __end_of_INST_PTLAR:
   355                           	opt stack 0
   356  00FCDA  2C                 	db	44
   357  00FCDB                     __end_of_INST_RAMWR:
   358                           	opt stack 0
   359  00FCDB  2B                 	db	43
   360  00FCDC                     __end_of_INST_RASET:
   361                           	opt stack 0
   362  00FCDC  2A                 	db	42
   363  00FCDD                     __end_of_INST_CASET:
   364                           	opt stack 0
   365  00FCDD  29                 	db	41
   366  00FCDE                     __end_of_INST_DISPON:
   367                           	opt stack 0
   368  00FCDE  28                 	db	40
   369  00FCDF                     __end_of_INST_DISPOFF:
   370                           	opt stack 0
   371  00FCDF  26                 	db	38
   372  00FCE0                     __end_of_INST_GAMSET:
   373                           	opt stack 0
   374  00FCE0  21                 	db	33
   375  00FCE1                     __end_of_INST_INVON:
   376                           	opt stack 0
   377  00FCE1  20                 	db	32
   378  00FCE2                     __end_of_INST_INVOFF:
   379                           	opt stack 0
   380  00FCE2  13                 	db	19
   381  00FCE3                     __end_of_INST_NORON:
   382                           	opt stack 0
   383  00FCE3  12                 	db	18
   384  00FCE4                     __end_of_INST_PTLON:
   385                           	opt stack 0
   386  00FCE4  11                 	db	17
   387  00FCE5                     __end_of_INST_SLPOUT:
   388                           	opt stack 0
   389  00FCE5  10                 	db	16
   390  00FCE6                     __end_of_INST_SLPIN:
   391                           	opt stack 0
   392  00FCE6  01                 	db	1
   393  00FCE7                     __end_of_INST_SWRESET:
   394                           	opt stack 0
   395  00FCE7  00                 	db	0
   396  00FCE8                     __end_of_INST_NOP:
   397                           	opt stack 0
   398  00FCE8                     _GLCD_SIZE_VERT:
   399                           	opt stack 0
   400  00FCE8  80                 	db	128
   401  00FCE9                     __end_of_GLCD_SIZE_VERT:
   402                           	opt stack 0
   403  00FCE9                     _GLCD_SIZE_HORZ:
   404                           	opt stack 0
   405  00FCE9  80                 	db	128
   406  00FCEA                     __end_of_GLCD_SIZE_HORZ:
   407                           	opt stack 0
   408  00FCEA                     _GLCD_ADDRESSABLE_SIZE_VERT:
   409                           	opt stack 0
   410  00FCEA  A0                 	db	160
   411  00FCEB                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   412                           	opt stack 0
   413  00FCEB                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   414                           	opt stack 0
   415  00FCEB  80                 	db	128
   416  00FCEC                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   417                           	opt stack 0
   418  00FCEC                     _LCD_LEFT:
   419                           	opt stack 0
   420  00FCEC  00                 	db	0
   421  00FCED                     __end_of_LCD_LEFT:
   422                           	opt stack 0
   423  00FCED                     _LCD_RIGHT:
   424                           	opt stack 0
   425  00FCED  01                 	db	1
   426  00FCEE                     __end_of_LCD_RIGHT:
   427                           	opt stack 0
   428  00FCEE                     _LCD_SIZE_VERT:
   429                           	opt stack 0
   430  00FCEE  02                 	db	2
   431  00FCEF                     __end_of_LCD_SIZE_VERT:
   432                           	opt stack 0
   433  00FCEF                     _LCD_SIZE_HORZ:
   434                           	opt stack 0
   435  00FCEF  10                 	db	16
   436  00FCF0                     __end_of_LCD_SIZE_HORZ:
   437                           	opt stack 0
   438  00FCF0                     _LCD_VERT_LIMIT:
   439                           	opt stack 0
   440  00FCF0  02                 	db	2
   441  00FCF1                     __end_of_LCD_VERT_LIMIT:
   442                           	opt stack 0
   443  00FCF1                     _LCD_HORZ_LIMIT:
   444                           	opt stack 0
   445  00FCF1  28                 	db	40
   446  00FCF2                     __end_of_LCD_HORZ_LIMIT:
   447                           	opt stack 0
   448  00FCF2                     _strs:
   449                           	opt stack 0
   450  00FCF2  42                 	db	66
   451  00FCF3  00                 	db	0
   452  00FCF4  00                 	db	0
   453  00FCF5  00                 	db	0
   454  00FCF6  00                 	db	0
   455  00FCF7  4E                 	db	78
   456  00FCF8  00                 	db	0
   457  00FCF9  00                 	db	0
   458  00FCFA  00                 	db	0
   459  00FCFB  00                 	db	0
   460  00FCFC  53                 	db	83
   461  00FCFD  00                 	db	0
   462  00FCFE  00                 	db	0
   463  00FCFF  00                 	db	0
   464  00FD00  00                 	db	0
   465  00FD01  57                 	db	87
   466  00FD02  00                 	db	0
   467  00FD03  00                 	db	0
   468  00FD04  00                 	db	0
   469  00FD05  00                 	db	0
   470  00FD06  42                 	db	66
   471  00FD07  4E                 	db	78
   472  00FD08  00                 	db	0
   473  00FD09  00                 	db	0
   474  00FD0A  00                 	db	0
   475  00FD0B  42                 	db	66
   476  00FD0C  53                 	db	83
   477  00FD0D  00                 	db	0
   478  00FD0E  00                 	db	0
   479  00FD0F  00                 	db	0
   480  00FD10  42                 	db	66
   481  00FD11  57                 	db	87
   482  00FD12  00                 	db	0
   483  00FD13  00                 	db	0
   484  00FD14  00                 	db	0
   485  00FD15  42                 	db	66
   486  00FD16  42                 	db	66
   487  00FD17  4E                 	db	78
   488  00FD18  00                 	db	0
   489  00FD19  00                 	db	0
   490  00FD1A  42                 	db	66
   491  00FD1B  42                 	db	66
   492  00FD1C  53                 	db	83
   493  00FD1D  00                 	db	0
   494  00FD1E  00                 	db	0
   495  00FD1F  42                 	db	66
   496  00FD20  42                 	db	66
   497  00FD21  57                 	db	87
   498  00FD22  00                 	db	0
   499  00FD23  00                 	db	0
   500  00FD24  42                 	db	66
   501  00FD25  4E                 	db	78
   502  00FD26  57                 	db	87
   503  00FD27  00                 	db	0
   504  00FD28  00                 	db	0
   505  00FD29  42                 	db	66
   506  00FD2A  53                 	db	83
   507  00FD2B  57                 	db	87
   508  00FD2C  00                 	db	0
   509  00FD2D  00                 	db	0
   510  00FD2E  42                 	db	66
   511  00FD2F  57                 	db	87
   512  00FD30  57                 	db	87
   513  00FD31  00                 	db	0
   514  00FD32  00                 	db	0
   515  00FD33  42                 	db	66
   516  00FD34  4E                 	db	78
   517  00FD35  57                 	db	87
   518  00FD36  57                 	db	87
   519  00FD37  00                 	db	0
   520  00FD38  42                 	db	66
   521  00FD39  53                 	db	83
   522  00FD3A  57                 	db	87
   523  00FD3B  57                 	db	87
   524  00FD3C  00                 	db	0
   525  00FD3D  42                 	db	66
   526  00FD3E  42                 	db	66
   527  00FD3F  53                 	db	83
   528  00FD40  57                 	db	87
   529  00FD41  00                 	db	0
   530  00FD42  42                 	db	66
   531  00FD43  42                 	db	66
   532  00FD44  4E                 	db	78
   533  00FD45  57                 	db	87
   534  00FD46  00                 	db	0
   535  00FD47  42                 	db	66
   536  00FD48  4E                 	db	78
   537  00FD49  4E                 	db	78
   538  00FD4A  57                 	db	87
   539  00FD4B  00                 	db	0
   540  00FD4C  42                 	db	66
   541  00FD4D  4E                 	db	78
   542  00FD4E  4E                 	db	78
   543  00FD4F  4E                 	db	78
   544  00FD50  00                 	db	0
   545  00FD51  42                 	db	66
   546  00FD52  57                 	db	87
   547  00FD53  57                 	db	87
   548  00FD54  57                 	db	87
   549  00FD55  00                 	db	0
   550  00FD56                     __end_of_strs:
   551                           	opt stack 0
   552  0000                     _EECON2	set	4007
   553  0000                     _EEDATA	set	4008
   554  0000                     _EEADR	set	4009
   555  0000                     _EECON1bits	set	4006
   556  0000                     _SSPBUF	set	4041
   557  0000                     _SSPCON2bits	set	4037
   558  0000                     _SSPADD	set	4040
   559  0000                     _SSPCON2	set	4037
   560  0000                     _SSPCON1	set	4038
   561  0000                     _SSPSTAT	set	4039
   562  0000                     _SSPCON1bits	set	4038
   563  0000                     _PORTAbits	set	3968
   564  0000                     _TRISAbits	set	3986
   565  0000                     _TRISDbits	set	3989
   566  0000                     _T0CONbits	set	4053
   567  0000                     _ADRESL	set	4035
   568  0000                     _ADRESH	set	4036
   569  0000                     _ADCON0bits	set	4034
   570  0000                     _PORTBbits	set	3969
   571  0000                     _PORTB	set	3969
   572  0000                     _TRISBbits	set	3987
   573  0000                     _TRISCbits	set	3988
   574  0000                     _LATCbits	set	3979
   575  0000                     _ADCON1	set	4033
   576  0000                     _ADCON0	set	4034
   577  0000                     _TRISE	set	3990
   578  0000                     _TRISD	set	3989
   579  0000                     _TRISC	set	3988
   580  0000                     _TRISB	set	3987
   581  0000                     _TRISA	set	3986
   582  0000                     _LATE	set	3981
   583  0000                     _LATC	set	3979
   584  0000                     _LATB	set	3978
   585  0000                     _LATA	set	3977
   586  0000                     _OSCTUNEbits	set	3995
   587  0000                     _OSCCONbits	set	4051
   588  0000                     _INTCONbits	set	4082
   589  0000                     _LATD	set	3980
   590  0000                     _LATDbits	set	3980
   591  0000                     _ADON	set	32272
   592  0000                     _TMR0IF	set	32658
   593  0000                     _TMR0IE	set	32661
   594  0000                     _RBIF	set	32656
   595  0000                     _INT1IF	set	32640
   596  0000                     _RBIE	set	32659
   597  0000                     _INT1IE	set	32643
   598  00FD56                     STR_70:
   599  00FD56  42                 	db	66	;'B'
   600  00FD57  3A                 	db	58	;':'
   601  00FD58  25                 	db	37
   602  00FD59  64                 	db	100	;'d'
   603  00FD5A  2C                 	db	44
   604  00FD5B  4E                 	db	78	;'N'
   605  00FD5C  3A                 	db	58	;':'
   606  00FD5D  25                 	db	37
   607  00FD5E  64                 	db	100	;'d'
   608  00FD5F  2C                 	db	44
   609  00FD60  53                 	db	83	;'S'
   610  00FD61  3A                 	db	58	;':'
   611  00FD62  25                 	db	37
   612  00FD63  64                 	db	100	;'d'
   613  00FD64  2C                 	db	44
   614  00FD65  57                 	db	87	;'W'
   615  00FD66  3A                 	db	58	;':'
   616  00FD67  25                 	db	37
   617  00FD68  64                 	db	100	;'d'
   618  00FD69  00                 	db	0
   619  00FD6A                     STR_2:
   620  00FD6A  32                 	db	50	;'2'
   621  00FD6B  3A                 	db	58	;':'
   622  00FD6C  45                 	db	69	;'E'
   623  00FD6D  6E                 	db	110	;'n'
   624  00FD6E  74                 	db	116	;'t'
   625  00FD6F  65                 	db	101	;'e'
   626  00FD70  72                 	db	114	;'r'
   627  00FD71  20                 	db	32
   628  00FD72  49                 	db	73	;'I'
   629  00FD73  6E                 	db	110	;'n'
   630  00FD74  73                 	db	115	;'s'
   631  00FD75  74                 	db	116	;'t'
   632  00FD76  72                 	db	114	;'r'
   633  00FD77  75                 	db	117	;'u'
   634  00FD78  63                 	db	99	;'c'
   635  00FD79  74                 	db	116	;'t'
   636  00FD7A  69                 	db	105	;'i'
   637  00FD7B  6F                 	db	111	;'o'
   638  00FD7C  6E                 	db	110	;'n'
   639  00FD7D  00                 	db	0
   640  00FD7E                     STR_63:
   641  00FD7E  73                 	db	115	;'s'
   642  00FD7F  70                 	db	112	;'p'
   643  00FD80  61                 	db	97	;'a'
   644  00FD81  63                 	db	99	;'c'
   645  00FD82  65                 	db	101	;'e'
   646  00FD83  72                 	db	114	;'r'
   647  00FD84  5F                 	db	95	;'_'
   648  00FD85  69                 	db	105	;'i'
   649  00FD86  6E                 	db	110	;'n'
   650  00FD87  74                 	db	116	;'t'
   651  00FD88  65                 	db	101	;'e'
   652  00FD89  72                 	db	114	;'r'
   653  00FD8A  72                 	db	114	;'r'
   654  00FD8B  75                 	db	117	;'u'
   655  00FD8C  70                 	db	112	;'p'
   656  00FD8D  74                 	db	116	;'t'
   657  00FD8E  65                 	db	101	;'e'
   658  00FD8F  64                 	db	100	;'d'
   659  00FD90  00                 	db	0
   660  00FD91                     STR_64:
   661  00FD91  77                 	db	119	;'w'
   662  00FD92  61                 	db	97	;'a'
   663  00FD93  73                 	db	115	;'s'
   664  00FD94  68                 	db	104	;'h'
   665  00FD95  65                 	db	101	;'e'
   666  00FD96  72                 	db	114	;'r'
   667  00FD97  5F                 	db	95	;'_'
   668  00FD98  69                 	db	105	;'i'
   669  00FD99  6E                 	db	110	;'n'
   670  00FD9A  74                 	db	116	;'t'
   671  00FD9B  65                 	db	101	;'e'
   672  00FD9C  72                 	db	114	;'r'
   673  00FD9D  72                 	db	114	;'r'
   674  00FD9E  75                 	db	117	;'u'
   675  00FD9F  70                 	db	112	;'p'
   676  00FDA0  74                 	db	116	;'t'
   677  00FDA1  65                 	db	101	;'e'
   678  00FDA2  64                 	db	100	;'d'
   679  00FDA3  00                 	db	0
   680  00FDA4                     STR_28:
   681  00FDA4  20                 	db	32
   682  00FDA5  32                 	db	50	;'2'
   683  00FDA6  3A                 	db	58	;':'
   684  00FDA7  20                 	db	32
   685  00FDA8  4F                 	db	79	;'O'
   686  00FDA9  70                 	db	112	;'p'
   687  00FDAA  65                 	db	101	;'e'
   688  00FDAB  72                 	db	114	;'r'
   689  00FDAC  61                 	db	97	;'a'
   690  00FDAD  74                 	db	116	;'t'
   691  00FDAE  69                 	db	105	;'i'
   692  00FDAF  6F                 	db	111	;'o'
   693  00FDB0  6E                 	db	110	;'n'
   694  00FDB1  20                 	db	32
   695  00FDB2  54                 	db	84	;'T'
   696  00FDB3  69                 	db	105	;'i'
   697  00FDB4  6D                 	db	109	;'m'
   698  00FDB5  65                 	db	101	;'e'
   699  00FDB6  00                 	db	0
   700  00FDB7  50                 	db	80	;'P'
   701  00FDB8  72                 	db	114	;'r'
   702  00FDB9  6F                 	db	111	;'o'
   703  00FDBA  67                 	db	103	;'g'
   704  00FDBB  72                 	db	114	;'r'
   705  00FDBC  61                 	db	97	;'a'
   706  00FDBD  6D                 	db	109	;'m'
   707  00FDBE  20                 	db	32
   708  00FDBF  54                 	db	84	;'T'
   709  00FDC0  65                 	db	101	;'e'
   710  00FDC1  72                 	db	114	;'r'
   711  00FDC2  6D                 	db	109	;'m'
   712  00FDC3  69                 	db	105	;'i'
   713  00FDC4  6E                 	db	110	;'n'
   714  00FDC5  61                 	db	97	;'a'
   715  00FDC6  74                 	db	116	;'t'
   716  00FDC7  65                 	db	101	;'e'
   717  00FDC8  73                 	db	115	;'s'
   718  00FDC9  00                 	db	0
   719  00FDCA                     STR_14:
   720  00FDCA  50                 	db	80	;'P'
   721  00FDCB  72                 	db	114	;'r'
   722  00FDCC  65                 	db	101	;'e'
   723  00FDCD  73                 	db	115	;'s'
   724  00FDCE  73                 	db	115	;'s'
   725  00FDCF  20                 	db	32
   726  00FDD0  23                 	db	35
   727  00FDD1  20                 	db	32
   728  00FDD2  74                 	db	116	;'t'
   729  00FDD3  6F                 	db	111	;'o'
   730  00FDD4  20                 	db	32
   731  00FDD5  73                 	db	115	;'s'
   732  00FDD6  74                 	db	116	;'t'
   733  00FDD7  61                 	db	97	;'a'
   734  00FDD8  72                 	db	114	;'r'
   735  00FDD9  74                 	db	116	;'t'
   736  00FDDA  21                 	db	33
   737  00FDDB  00                 	db	0
   738  00FDDC                     STR_99:
   739  00FDDC  30                 	db	48	;'0'
   740  00FDDD  31                 	db	49	;'1'
   741  00FDDE  32                 	db	50	;'2'
   742  00FDDF  33                 	db	51	;'3'
   743  00FDE0  34                 	db	52	;'4'
   744  00FDE1  35                 	db	53	;'5'
   745  00FDE2  36                 	db	54	;'6'
   746  00FDE3  37                 	db	55	;'7'
   747  00FDE4  38                 	db	56	;'8'
   748  00FDE5  39                 	db	57	;'9'
   749  00FDE6  61                 	db	97	;'a'
   750  00FDE7  62                 	db	98	;'b'
   751  00FDE8  63                 	db	99	;'c'
   752  00FDE9  64                 	db	100	;'d'
   753  00FDEA  65                 	db	101	;'e'
   754  00FDEB  66                 	db	102	;'f'
   755  00FDEC  00                 	db	0
   756  00FDED                     STR_25:
   757  00FDED  53                 	db	83	;'S'
   758  00FDEE  70                 	db	112	;'p'
   759  00FDEF  61                 	db	97	;'a'
   760  00FDF0  63                 	db	99	;'c'
   761  00FDF1  65                 	db	101	;'e'
   762  00FDF2  72                 	db	114	;'r'
   763  00FDF3  5F                 	db	95	;'_'
   764  00FDF4  72                 	db	114	;'r'
   765  00FDF5  65                 	db	101	;'e'
   766  00FDF6  6D                 	db	109	;'m'
   767  00FDF7  61                 	db	97	;'a'
   768  00FDF8  69                 	db	105	;'i'
   769  00FDF9  6E                 	db	110	;'n'
   770  00FDFA  3A                 	db	58	;':'
   771  00FDFB  25                 	db	37
   772  00FDFC  64                 	db	100	;'d'
   773  00FDFD  00                 	db	0
   774  00FDFE                     STR_26:
   775  00FDFE  57                 	db	87	;'W'
   776  00FDFF  61                 	db	97	;'a'
   777  00FE00  73                 	db	115	;'s'
   778  00FE01  68                 	db	104	;'h'
   779  00FE02  65                 	db	101	;'e'
   780  00FE03  72                 	db	114	;'r'
   781  00FE04  5F                 	db	95	;'_'
   782  00FE05  72                 	db	114	;'r'
   783  00FE06  65                 	db	101	;'e'
   784  00FE07  6D                 	db	109	;'m'
   785  00FE08  61                 	db	97	;'a'
   786  00FE09  69                 	db	105	;'i'
   787  00FE0A  6E                 	db	110	;'n'
   788  00FE0B  3A                 	db	58	;':'
   789  00FE0C  25                 	db	37
   790  00FE0D  64                 	db	100	;'d'
   791  00FE0E  00                 	db	0
   792  00FE0F                     STR_7:
   793  00FE0F  61                 	db	97	;'a'
   794  00FE10  73                 	db	115	;'s'
   795  00FE11  73                 	db	115	;'s'
   796  00FE12  65                 	db	101	;'e'
   797  00FE13  6D                 	db	109	;'m'
   798  00FE14  62                 	db	98	;'b'
   799  00FE15  6C                 	db	108	;'l'
   800  00FE16  79                 	db	121	;'y'
   801  00FE17  20                 	db	32
   802  00FE18  73                 	db	115	;'s'
   803  00FE19  74                 	db	116	;'t'
   804  00FE1A  65                 	db	101	;'e'
   805  00FE1B  70                 	db	112	;'p'
   806  00FE1C  3A                 	db	58	;':'
   807  00FE1D  25                 	db	37
   808  00FE1E  64                 	db	100	;'d'
   809  00FE1F  00                 	db	0
   810  00FE20                     STR_27:
   811  00FE20  31                 	db	49	;'1'
   812  00FE21  3A                 	db	58	;':'
   813  00FE22  20                 	db	32
   814  00FE23  44                 	db	68	;'D'
   815  00FE24  61                 	db	97	;'a'
   816  00FE25  74                 	db	116	;'t'
   817  00FE26  65                 	db	101	;'e'
   818  00FE27  20                 	db	32
   819  00FE28  61                 	db	97	;'a'
   820  00FE29  6E                 	db	110	;'n'
   821  00FE2A  64                 	db	100	;'d'
   822  00FE2B  20                 	db	32
   823  00FE2C  54                 	db	84	;'T'
   824  00FE2D  69                 	db	105	;'i'
   825  00FE2E  6D                 	db	109	;'m'
   826  00FE2F  65                 	db	101	;'e'
   827  00FE30  00                 	db	0
   828  00FE31                     STR_35:
   829  00FE31  6F                 	db	111	;'o'
   830  00FE32  70                 	db	112	;'p'
   831  00FE33  65                 	db	101	;'e'
   832  00FE34  72                 	db	114	;'r'
   833  00FE35  61                 	db	97	;'a'
   834  00FE36  74                 	db	116	;'t'
   835  00FE37  69                 	db	105	;'i'
   836  00FE38  6F                 	db	111	;'o'
   837  00FE39  6E                 	db	110	;'n'
   838  00FE3A  20                 	db	32
   839  00FE3B  74                 	db	116	;'t'
   840  00FE3C  69                 	db	105	;'i'
   841  00FE3D  6D                 	db	109	;'m'
   842  00FE3E  65                 	db	101	;'e'
   843  00FE3F  3A                 	db	58	;':'
   844  00FE40  00                 	db	0
   845  00FE41                     STR_1:
   846  00FE41  31                 	db	49	;'1'
   847  00FE42  3A                 	db	58	;':'
   848  00FE43  64                 	db	100	;'d'
   849  00FE44  61                 	db	97	;'a'
   850  00FE45  74                 	db	116	;'t'
   851  00FE46  65                 	db	101	;'e'
   852  00FE47  20                 	db	32
   853  00FE48  61                 	db	97	;'a'
   854  00FE49  6E                 	db	110	;'n'
   855  00FE4A  64                 	db	100	;'d'
   856  00FE4B  20                 	db	32
   857  00FE4C  74                 	db	116	;'t'
   858  00FE4D  69                 	db	105	;'i'
   859  00FE4E  6D                 	db	109	;'m'
   860  00FE4F  65                 	db	101	;'e'
   861  00FE50  00                 	db	0
   862  00FE51                     STR_15:
   863  00FE51  73                 	db	115	;'s'
   864  00FE52  74                 	db	116	;'t'
   865  00FE53  61                 	db	97	;'a'
   866  00FE54  72                 	db	114	;'r'
   867  00FE55  74                 	db	116	;'t'
   868  00FE56  20                 	db	32
   869  00FE57  6F                 	db	111	;'o'
   870  00FE58  70                 	db	112	;'p'
   871  00FE59  65                 	db	101	;'e'
   872  00FE5A  72                 	db	114	;'r'
   873  00FE5B  61                 	db	97	;'a'
   874  00FE5C  74                 	db	116	;'t'
   875  00FE5D  69                 	db	105	;'i'
   876  00FE5E  6F                 	db	111	;'o'
   877  00FE5F  6E                 	db	110	;'n'
   878  00FE60  00                 	db	0
   879  00FE61                     STR_45:
   880  00FE61  57                 	db	87	;'W'
   881  00FE62  72                 	db	114	;'r'
   882  00FE63  6F                 	db	111	;'o'
   883  00FE64  6E                 	db	110	;'n'
   884  00FE65  67                 	db	103	;'g'
   885  00FE66  20                 	db	32
   886  00FE67  6E                 	db	110	;'n'
   887  00FE68  75                 	db	117	;'u'
   888  00FE69  6D                 	db	109	;'m'
   889  00FE6A  62                 	db	98	;'b'
   890  00FE6B  65                 	db	101	;'e'
   891  00FE6C  72                 	db	114	;'r'
   892  00FE6D  21                 	db	33
   893  00FE6E  20                 	db	32
   894  00FE6F  00                 	db	0
   895  00FE70                     STR_3:
   896  00FE70  61                 	db	97	;'a'
   897  00FE71  73                 	db	115	;'s'
   898  00FE72  73                 	db	115	;'s'
   899  00FE73  65                 	db	101	;'e'
   900  00FE74  6D                 	db	109	;'m'
   901  00FE75  62                 	db	98	;'b'
   902  00FE76  6C                 	db	108	;'l'
   903  00FE77  79                 	db	121	;'y'
   904  00FE78  20                 	db	32
   905  00FE79  73                 	db	115	;'s'
   906  00FE7A  74                 	db	116	;'t'
   907  00FE7B  65                 	db	101	;'e'
   908  00FE7C  70                 	db	112	;'p'
   909  00FE7D  3A                 	db	58	;':'
   910  00FE7E  00                 	db	0
   911  00FE7F                     STR_23:
   912  00FE7F  42                 	db	66	;'B'
   913  00FE80  6F                 	db	111	;'o'
   914  00FE81  6C                 	db	108	;'l'
   915  00FE82  74                 	db	116	;'t'
   916  00FE83  5F                 	db	95	;'_'
   917  00FE84  72                 	db	114	;'r'
   918  00FE85  65                 	db	101	;'e'
   919  00FE86  6D                 	db	109	;'m'
   920  00FE87  61                 	db	97	;'a'
   921  00FE88  69                 	db	105	;'i'
   922  00FE89  6E                 	db	110	;'n'
   923  00FE8A  3A                 	db	58	;':'
   924  00FE8B  25                 	db	37
   925  00FE8C  64                 	db	100	;'d'
   926  00FE8D  00                 	db	0
   927  00FE8E                     STR_19:
   928  00FE8E  70                 	db	112	;'p'
   929  00FE8F  72                 	db	114	;'r'
   930  00FE90  6F                 	db	111	;'o'
   931  00FE91  63                 	db	99	;'c'
   932  00FE92  65                 	db	101	;'e'
   933  00FE93  73                 	db	115	;'s'
   934  00FE94  73                 	db	115	;'s'
   935  00FE95  69                 	db	105	;'i'
   936  00FE96  6E                 	db	110	;'n'
   937  00FE97  67                 	db	103	;'g'
   938  00FE98  20                 	db	32
   939  00FE99  43                 	db	67	;'C'
   940  00FE9A  25                 	db	37
   941  00FE9B  64                 	db	100	;'d'
   942  00FE9C  00                 	db	0
   943  00FE9D                     STR_61:
   944  00FE9D  62                 	db	98	;'b'
   945  00FE9E  6F                 	db	111	;'o'
   946  00FE9F  6C                 	db	108	;'l'
   947  00FEA0  74                 	db	116	;'t'
   948  00FEA1  5F                 	db	95	;'_'
   949  00FEA2  69                 	db	105	;'i'
   950  00FEA3  6E                 	db	110	;'n'
   951  00FEA4  74                 	db	116	;'t'
   952  00FEA5  65                 	db	101	;'e'
   953  00FEA6  72                 	db	114	;'r'
   954  00FEA7  72                 	db	114	;'r'
   955  00FEA8  75                 	db	117	;'u'
   956  00FEA9  70                 	db	112	;'p'
   957  00FEAA  74                 	db	116	;'t'
   958  00FEAB  00                 	db	0
   959  00FEAC                     STR_31:
   960  00FEAC  25                 	db	37
   961  00FEAD  30                 	db	48	;'0'
   962  00FEAE  32                 	db	50	;'2'
   963  00FEAF  78                 	db	120	;'x'
   964  00FEB0  2F                 	db	47
   965  00FEB1  25                 	db	37
   966  00FEB2  30                 	db	48	;'0'
   967  00FEB3  32                 	db	50	;'2'
   968  00FEB4  78                 	db	120	;'x'
   969  00FEB5  2F                 	db	47
   970  00FEB6  25                 	db	37
   971  00FEB7  30                 	db	48	;'0'
   972  00FEB8  32                 	db	50	;'2'
   973  00FEB9  78                 	db	120	;'x'
   974  00FEBA  00                 	db	0
   975  00FEBB                     STR_32:
   976  00FEBB  25                 	db	37
   977  00FEBC  30                 	db	48	;'0'
   978  00FEBD  32                 	db	50	;'2'
   979  00FEBE  78                 	db	120	;'x'
   980  00FEBF  3A                 	db	58	;':'
   981  00FEC0  25                 	db	37
   982  00FEC1  30                 	db	48	;'0'
   983  00FEC2  32                 	db	50	;'2'
   984  00FEC3  78                 	db	120	;'x'
   985  00FEC4  3A                 	db	58	;':'
   986  00FEC5  25                 	db	37
   987  00FEC6  30                 	db	48	;'0'
   988  00FEC7  32                 	db	50	;'2'
   989  00FEC8  78                 	db	120	;'x'
   990  00FEC9  00                 	db	0
   991  00FECA                     STR_58:
   992  00FECA  50                 	db	80	;'P'
   993  00FECB  72                 	db	114	;'r'
   994  00FECC  6F                 	db	111	;'o'
   995  00FECD  63                 	db	99	;'c'
   996  00FECE  65                 	db	101	;'e'
   997  00FECF  73                 	db	115	;'s'
   998  00FED0  73                 	db	115	;'s'
   999  00FED1  69                 	db	105	;'i'
  1000  00FED2  6E                 	db	110	;'n'
  1001  00FED3  67                 	db	103	;'g'
  1002  00FED4  2E                 	db	46
  1003  00FED5  2E                 	db	46
  1004  00FED6  2E                 	db	46
  1005  00FED7  00                 	db	0
  1006  00FED8                     STR_4:
  1007  00FED8  66                 	db	102	;'f'
  1008  00FED9  61                 	db	97	;'a'
  1009  00FEDA  73                 	db	115	;'s'
  1010  00FEDB  74                 	db	116	;'t'
  1011  00FEDC  65                 	db	101	;'e'
  1012  00FEDD  6E                 	db	110	;'n'
  1013  00FEDE  65                 	db	101	;'e'
  1014  00FEDF  72                 	db	114	;'r'
  1015  00FEE0  20                 	db	32
  1016  00FEE1  73                 	db	115	;'s'
  1017  00FEE2  65                 	db	101	;'e'
  1018  00FEE3  74                 	db	116	;'t'
  1019  00FEE4  3A                 	db	58	;':'
  1020  00FEE5  00                 	db	0
  1021  00FEE6                     STR_24:
  1022  00FEE6  4E                 	db	78	;'N'
  1023  00FEE7  75                 	db	117	;'u'
  1024  00FEE8  74                 	db	116	;'t'
  1025  00FEE9  5F                 	db	95	;'_'
  1026  00FEEA  72                 	db	114	;'r'
  1027  00FEEB  65                 	db	101	;'e'
  1028  00FEEC  6D                 	db	109	;'m'
  1029  00FEED  61                 	db	97	;'a'
  1030  00FEEE  69                 	db	105	;'i'
  1031  00FEEF  6E                 	db	110	;'n'
  1032  00FEF0  3A                 	db	58	;':'
  1033  00FEF1  25                 	db	37
  1034  00FEF2  64                 	db	100	;'d'
  1035  00FEF3  00                 	db	0
  1036  00FEF4                     STR_62:
  1037  00FEF4  6E                 	db	110	;'n'
  1038  00FEF5  75                 	db	117	;'u'
  1039  00FEF6  74                 	db	116	;'t'
  1040  00FEF7  5F                 	db	95	;'_'
  1041  00FEF8  69                 	db	105	;'i'
  1042  00FEF9  6E                 	db	110	;'n'
  1043  00FEFA  74                 	db	116	;'t'
  1044  00FEFB  65                 	db	101	;'e'
  1045  00FEFC  72                 	db	114	;'r'
  1046  00FEFD  72                 	db	114	;'r'
  1047  00FEFE  75                 	db	117	;'u'
  1048  00FEFF  70                 	db	112	;'p'
  1049  00FF00  74                 	db	116	;'t'
  1050  00FF01  00                 	db	0
  1051  00FF02                     STR_36:
  1052  00FF02  25                 	db	37
  1053  00FF03  64                 	db	100	;'d'
  1054  00FF04  6D                 	db	109	;'m'
  1055  00FF05  69                 	db	105	;'i'
  1056  00FF06  6E                 	db	110	;'n'
  1057  00FF07  20                 	db	32
  1058  00FF08  25                 	db	37
  1059  00FF09  64                 	db	100	;'d'
  1060  00FF0A  73                 	db	115	;'s'
  1061  00FF0B  65                 	db	101	;'e'
  1062  00FF0C  63                 	db	99	;'c'
  1063  00FF0D  73                 	db	115	;'s'
  1064  00FF0E  00                 	db	0
  1065  00FF0F                     STR_17:
  1066  00FF0F  4C                 	db	76	;'L'
  1067  00FF10  6F                 	db	111	;'o'
  1068  00FF11  63                 	db	99	;'c'
  1069  00FF12  61                 	db	97	;'a'
  1070  00FF13  74                 	db	116	;'t'
  1071  00FF14  69                 	db	105	;'i'
  1072  00FF15  6E                 	db	110	;'n'
  1073  00FF16  67                 	db	103	;'g'
  1074  00FF17  20                 	db	32
  1075  00FF18  43                 	db	67	;'C'
  1076  00FF19  31                 	db	49	;'1'
  1077  00FF1A  00                 	db	0
  1078  00FF1B                     STR_38:
  1079  00FF1B  43                 	db	67	;'C'
  1080  00FF1C  25                 	db	37
  1081  00FF1D  64                 	db	100	;'d'
  1082  00FF1E  3A                 	db	58	;':'
  1083  00FF1F  42                 	db	66	;'B'
  1084  00FF20  25                 	db	37
  1085  00FF21  64                 	db	100	;'d'
  1086  00FF22  2C                 	db	44
  1087  00FF23  4E                 	db	78	;'N'
  1088  00FF24  25                 	db	37
  1089  00FF25  64                 	db	100	;'d'
  1090  00FF26  00                 	db	0
  1091  00FF27                     STR_39:
  1092  00FF27  20                 	db	32
  1093  00FF28  20                 	db	32
  1094  00FF29  20                 	db	32
  1095  00FF2A  20                 	db	32
  1096  00FF2B  53                 	db	83	;'S'
  1097  00FF2C  25                 	db	37
  1098  00FF2D  64                 	db	100	;'d'
  1099  00FF2E  2C                 	db	44
  1100  00FF2F  57                 	db	87	;'W'
  1101  00FF30  25                 	db	37
  1102  00FF31  64                 	db	100	;'d'
  1103  00FF32  00                 	db	0
  1104  00FF33                     STR_18:
  1105  00FF33  43                 	db	67	;'C'
  1106  00FF34  31                 	db	49	;'1'
  1107  00FF35  20                 	db	32
  1108  00FF36  69                 	db	105	;'i'
  1109  00FF37  73                 	db	115	;'s'
  1110  00FF38  20                 	db	32
  1111  00FF39  66                 	db	102	;'f'
  1112  00FF3A  6F                 	db	111	;'o'
  1113  00FF3B  75                 	db	117	;'u'
  1114  00FF3C  6E                 	db	110	;'n'
  1115  00FF3D  64                 	db	100	;'d'
  1116  00FF3E  00                 	db	0
  1117  00FF3F                     STR_59:
  1118  00FF3F  57                 	db	87	;'W'
  1119  00FF40  72                 	db	114	;'r'
  1120  00FF41  6F                 	db	111	;'o'
  1121  00FF42  6E                 	db	110	;'n'
  1122  00FF43  67                 	db	103	;'g'
  1123  00FF44  20                 	db	32
  1124  00FF45  69                 	db	105	;'i'
  1125  00FF46  6E                 	db	110	;'n'
  1126  00FF47  70                 	db	112	;'p'
  1127  00FF48  75                 	db	117	;'u'
  1128  00FF49  74                 	db	116	;'t'
  1129  00FF4A  00                 	db	0
  1130  00FF4B                     STR_21:
  1131  00FF4B  54                 	db	84	;'T'
  1132  00FF4C  65                 	db	101	;'e'
  1133  00FF4D  72                 	db	114	;'r'
  1134  00FF4E  6D                 	db	109	;'m'
  1135  00FF4F  69                 	db	105	;'i'
  1136  00FF50  6E                 	db	110	;'n'
  1137  00FF51  61                 	db	97	;'a'
  1138  00FF52  74                 	db	116	;'t'
  1139  00FF53  65                 	db	101	;'e'
  1140  00FF54  21                 	db	33
  1141  00FF55  00                 	db	0
  1142  00FF56                     STR_53:
  1143  00FF56  77                 	db	119	;'w'
  1144  00FF57  72                 	db	114	;'r'
  1145  00FF58  6F                 	db	111	;'o'
  1146  00FF59  6E                 	db	110	;'n'
  1147  00FF5A  67                 	db	103	;'g'
  1148  00FF5B  20                 	db	32
  1149  00FF5C  73                 	db	115	;'s'
  1150  00FF5D  65                 	db	101	;'e'
  1151  00FF5E  74                 	db	116	;'t'
  1152  00FF5F  21                 	db	33
  1153  00FF60  00                 	db	0
  1154  00FF61                     STR_29:
  1155  00FF61  33                 	db	51	;'3'
  1156  00FF62  3A                 	db	58	;':'
  1157  00FF63  73                 	db	115	;'s'
  1158  00FF64  75                 	db	117	;'u'
  1159  00FF65  6D                 	db	109	;'m'
  1160  00FF66  6D                 	db	109	;'m'
  1161  00FF67  61                 	db	97	;'a'
  1162  00FF68  72                 	db	114	;'r'
  1163  00FF69  79                 	db	121	;'y'
  1164  00FF6A  00                 	db	0
  1165  00FF6B                     STR_50:
  1166  00FF6B  63                 	db	99	;'c'
  1167  00FF6C  6F                 	db	111	;'o'
  1168  00FF6D  72                 	db	114	;'r'
  1169  00FF6E  72                 	db	114	;'r'
  1170  00FF6F  65                 	db	101	;'e'
  1171  00FF70  63                 	db	99	;'c'
  1172  00FF71  74                 	db	116	;'t'
  1173  00FF72  21                 	db	33
  1174  00FF73  00                 	db	0
  1175  00FF74                     STR_60:
  1176  00FF74  54                 	db	84	;'T'
  1177  00FF75  4F                 	db	79	;'O'
  1178  00FF76  4F                 	db	79	;'O'
  1179  00FF77  20                 	db	32
  1180  00FF78  4D                 	db	77	;'M'
  1181  00FF79  41                 	db	65	;'A'
  1182  00FF7A  4E                 	db	78	;'N'
  1183  00FF7B  59                 	db	89	;'Y'
  1184  00FF7C  00                 	db	0
  1185  00FF7D                     STR_20:
  1186  00FF7D  64                 	db	100	;'d'
  1187  00FF7E  6F                 	db	111	;'o'
  1188  00FF7F  6E                 	db	110	;'n'
  1189  00FF80  65                 	db	101	;'e'
  1190  00FF81  20                 	db	32
  1191  00FF82  43                 	db	67	;'C'
  1192  00FF83  25                 	db	37
  1193  00FF84  64                 	db	100	;'d'
  1194  00FF85  00                 	db	0
  1195  00FF86                     STR_30:
  1196  00FF86  34                 	db	52	;'4'
  1197  00FF87  3A                 	db	58	;':'
  1198  00FF88  72                 	db	114	;'r'
  1199  00FF89  65                 	db	101	;'e'
  1200  00FF8A  74                 	db	116	;'t'
  1201  00FF8B  75                 	db	117	;'u'
  1202  00FF8C  72                 	db	114	;'r'
  1203  00FF8D  6E                 	db	110	;'n'
  1204  00FF8E  00                 	db	0
  1205  00FF8F                     STR_6:
  1206  00FF8F  6E                 	db	110	;'n'
  1207  00FF90  75                 	db	117	;'u'
  1208  00FF91  6D                 	db	109	;'m'
  1209  00FF92  62                 	db	98	;'b'
  1210  00FF93  65                 	db	101	;'e'
  1211  00FF94  72                 	db	114	;'r'
  1212  00FF95  3A                 	db	58	;':'
  1213  00FF96  00                 	db	0
  1214  00FF97                     STR_98:
  1215  00FF97  28                 	db	40
  1216  00FF98  6E                 	db	110	;'n'
  1217  00FF99  75                 	db	117	;'u'
  1218  00FF9A  6C                 	db	108	;'l'
  1219  00FF9B  6C                 	db	108	;'l'
  1220  00FF9C  29                 	db	41
  1221  00FF9D  00                 	db	0
  1222  00FF9E                     STR_56:
  1223  00FF9E  77                 	db	119	;'w'
  1224  00FF9F  72                 	db	114	;'r'
  1225  00FFA0  6F                 	db	111	;'o'
  1226  00FFA1  6E                 	db	110	;'n'
  1227  00FFA2  67                 	db	103	;'g'
  1228  00FFA3  21                 	db	33
  1229  00FFA4  00                 	db	0
  1230  00FFA5                     STR_16:
  1231  00FFA5  6D                 	db	109	;'m'
  1232  00FFA6  6F                 	db	111	;'o'
  1233  00FFA7  64                 	db	100	;'d'
  1234  00FFA8  65                 	db	101	;'e'
  1235  00FFA9  20                 	db	32
  1236  00FFAA  32                 	db	50	;'2'
  1237  00FFAB  00                 	db	0
  1238  00FFAC                     STR_96:
  1239  00FFAC  42                 	db	66	;'B'
  1240  00FFAD  4E                 	db	78	;'N'
  1241  00FFAE  4E                 	db	78	;'N'
  1242  00FFAF  4E                 	db	78	;'N'
  1243  00FFB0  00                 	db	0
  1244  00FFB1                     STR_94:
  1245  00FFB1  42                 	db	66	;'B'
  1246  00FFB2  42                 	db	66	;'B'
  1247  00FFB3  4E                 	db	78	;'N'
  1248  00FFB4  57                 	db	87	;'W'
  1249  00FFB5  00                 	db	0
  1250  00FFB6                     STR_95:
  1251  00FFB6  42                 	db	66	;'B'
  1252  00FFB7  4E                 	db	78	;'N'
  1253  00FFB8  4E                 	db	78	;'N'
  1254  00FFB9  57                 	db	87	;'W'
  1255  00FFBA  00                 	db	0
  1256  00FFBB                     STR_93:
  1257  00FFBB  42                 	db	66	;'B'
  1258  00FFBC  42                 	db	66	;'B'
  1259  00FFBD  53                 	db	83	;'S'
  1260  00FFBE  57                 	db	87	;'W'
  1261  00FFBF  00                 	db	0
  1262  00FFC0                     STR_91:
  1263  00FFC0  42                 	db	66	;'B'
  1264  00FFC1  4E                 	db	78	;'N'
  1265  00FFC2  57                 	db	87	;'W'
  1266  00FFC3  57                 	db	87	;'W'
  1267  00FFC4  00                 	db	0
  1268  00FFC5                     STR_92:
  1269  00FFC5  42                 	db	66	;'B'
  1270  00FFC6  53                 	db	83	;'S'
  1271  00FFC7  57                 	db	87	;'W'
  1272  00FFC8  57                 	db	87	;'W'
  1273  00FFC9  00                 	db	0
  1274  00FFCA                     STR_97:
  1275  00FFCA  42                 	db	66	;'B'
  1276  00FFCB  57                 	db	87	;'W'
  1277  00FFCC  57                 	db	87	;'W'
  1278  00FFCD  57                 	db	87	;'W'
  1279  00FFCE  00                 	db	0
  1280  00FFCF                     STR_66:
  1281  00FFCF  42                 	db	66	;'B'
  1282  00FFD0  3A                 	db	58	;':'
  1283  00FFD1  25                 	db	37
  1284  00FFD2  64                 	db	100	;'d'
  1285  00FFD3  00                 	db	0
  1286  00FFD4                     STR_67:
  1287  00FFD4  4E                 	db	78	;'N'
  1288  00FFD5  3A                 	db	58	;':'
  1289  00FFD6  25                 	db	37
  1290  00FFD7  64                 	db	100	;'d'
  1291  00FFD8  00                 	db	0
  1292  00FFD9                     STR_68:
  1293  00FFD9  53                 	db	83	;'S'
  1294  00FFDA  3A                 	db	58	;':'
  1295  00FFDB  25                 	db	37
  1296  00FFDC  64                 	db	100	;'d'
  1297  00FFDD  00                 	db	0
  1298  00FFDE                     STR_44:
  1299  00FFDE  44                 	db	68	;'D'
  1300  00FFDF  6F                 	db	111	;'o'
  1301  00FFE0  6E                 	db	110	;'n'
  1302  00FFE1  65                 	db	101	;'e'
  1303  00FFE2  00                 	db	0
  1304  00FFE3                     STR_8:
  1305  00FFE3  73                 	db	115	;'s'
  1306  00FFE4  74                 	db	116	;'t'
  1307  00FFE5  65                 	db	101	;'e'
  1308  00FFE6  70                 	db	112	;'p'
  1309  00FFE7  00                 	db	0
  1310  00FFE8                     STR_85:
  1311  00FFE8  42                 	db	66	;'B'
  1312  00FFE9  42                 	db	66	;'B'
  1313  00FFEA  4E                 	db	78	;'N'
  1314  00FFEB  00                 	db	0
  1315  00FFEC                     STR_86:
  1316  00FFEC  42                 	db	66	;'B'
  1317  00FFED  42                 	db	66	;'B'
  1318  00FFEE  53                 	db	83	;'S'
  1319  00FFEF  00                 	db	0
  1320  00FFF0                     STR_87:
  1321  00FFF0  42                 	db	66	;'B'
  1322  00FFF1  42                 	db	66	;'B'
  1323  00FFF2  57                 	db	87	;'W'
  1324  00FFF3  00                 	db	0
  1325  00FFF4                     STR_90:
  1326  00FFF4  42                 	db	66	;'B'
  1327  00FFF5  57                 	db	87	;'W'
  1328  00FFF6  57                 	db	87	;'W'
  1329  00FFF7  00                 	db	0
  1330  00FFF8                     STR_5:
  1331  00FFF8  25                 	db	37
  1332  00FFF9  73                 	db	115	;'s'
  1333  00FFFA  00                 	db	0
  1334  00FFFB                     STR_12:
  1335  00FFFB  2C                 	db	44
  1336  00FFFC  00                 	db	0
  1337  00FFFD                     STR_46:
  1338  00FFFD  42                 	db	66	;'B'
  1339  00FFFE  00                 	db	0
  1340  0000                     
  1341                           ; #config settings
  1342  00FFFF  00                 	db	0	; dummy byte at the end
  1343  0000                     
  1344                           	psect	cinit
  1345  003CFE                     __pcinit:
  1346                           	opt stack 0
  1347  003CFE                     start_initialization:
  1348                           	opt stack 0
  1349  003CFE                     __initialization:
  1350                           	opt stack 0
  1351                           
  1352                           ; Initialize objects allocated to BANK1 (10 bytes)
  1353                           ; load TBLPTR registers with __pidataBANK1
  1354  003CFE  0EB8               	movlw	low __pidataBANK1
  1355  003D00  6EF6               	movwf	tblptrl,c
  1356  003D02  0E47               	movlw	high __pidataBANK1
  1357  003D04  6EF7               	movwf	tblptrh,c
  1358  003D06  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1359  003D08  6EF8               	movwf	tblptru,c
  1360  003D0A  EE01  F0E5         	lfsr	0,__pdataBANK1
  1361  003D0E  EE10 F00A          	lfsr	1,10
  1362  003D12                     copy_data0:
  1363  003D12  0009               	tblrd		*+
  1364  003D14  CFF5 FFEE          	movff	tablat,postinc0
  1365  003D18  50E5               	movf	postdec1,w,c
  1366  003D1A  50E1               	movf	fsr1l,w,c
  1367  003D1C  E1FA               	bnz	copy_data0
  1368                           
  1369                           ; Initialize objects allocated to BANK0 (6 bytes)
  1370                           ; load TBLPTR registers with __pidataBANK0
  1371  003D1E  0EFE               	movlw	low __pidataBANK0
  1372  003D20  6EF6               	movwf	tblptrl,c
  1373  003D22  0E47               	movlw	high __pidataBANK0
  1374  003D24  6EF7               	movwf	tblptrh,c
  1375  003D26  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1376  003D28  6EF8               	movwf	tblptru,c
  1377  003D2A  EE00  F0FA         	lfsr	0,__pdataBANK0
  1378  003D2E  EE10 F006          	lfsr	1,6
  1379  003D32                     copy_data1:
  1380  003D32  0009               	tblrd		*+
  1381  003D34  CFF5 FFEE          	movff	tablat,postinc0
  1382  003D38  50E5               	movf	postdec1,w,c
  1383  003D3A  50E1               	movf	fsr1l,w,c
  1384  003D3C  E1FA               	bnz	copy_data1
  1385                           
  1386                           ; Initialize objects allocated to COMRAM (8 bytes)
  1387                           ; load TBLPTR registers with __pidataCOMRAM
  1388  003D3E  0ED6               	movlw	low __pidataCOMRAM
  1389  003D40  6EF6               	movwf	tblptrl,c
  1390  003D42  0E47               	movlw	high __pidataCOMRAM
  1391  003D44  6EF7               	movwf	tblptrh,c
  1392  003D46  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1393  003D48  6EF8               	movwf	tblptru,c
  1394  003D4A  EE00  F077         	lfsr	0,__pdataCOMRAM
  1395  003D4E  EE10 F008          	lfsr	1,8
  1396  003D52                     copy_data2:
  1397  003D52  0009               	tblrd		*+
  1398  003D54  CFF5 FFEE          	movff	tablat,postinc0
  1399  003D58  50E5               	movf	postdec1,w,c
  1400  003D5A  50E1               	movf	fsr1l,w,c
  1401  003D5C  E1FA               	bnz	copy_data2
  1402                           
  1403                           ; Clear objects allocated to BANK2 (200 bytes)
  1404  003D5E  EE02  F000         	lfsr	0,__pbssBANK2
  1405  003D62  0EC8               	movlw	200
  1406  003D64                     clear_0:
  1407  003D64  6AEE               	clrf	postinc0,c
  1408  003D66  06E8               	decf	wreg,f,c
  1409  003D68  E1FD               	bnz	clear_0
  1410                           
  1411                           ; Clear objects allocated to BANK1 (229 bytes)
  1412  003D6A  EE01  F000         	lfsr	0,__pbssBANK1
  1413  003D6E  0EE5               	movlw	229
  1414  003D70                     clear_1:
  1415  003D70  6AEE               	clrf	postinc0,c
  1416  003D72  06E8               	decf	wreg,f,c
  1417  003D74  E1FD               	bnz	clear_1
  1418                           
  1419                           ; Clear objects allocated to BANK0 (70 bytes)
  1420  003D76  EE00  F080         	lfsr	0,__pbssBANK0
  1421  003D7A  0E46               	movlw	70
  1422  003D7C                     clear_2:
  1423  003D7C  6AEE               	clrf	postinc0,c
  1424  003D7E  06E8               	decf	wreg,f,c
  1425  003D80  E1FD               	bnz	clear_2
  1426                           
  1427                           ; Clear objects allocated to COMRAM (53 bytes)
  1428  003D82  EE00  F042         	lfsr	0,__pbssCOMRAM
  1429  003D86  0E35               	movlw	53
  1430  003D88                     clear_3:
  1431  003D88  6AEE               	clrf	postinc0,c
  1432  003D8A  06E8               	decf	wreg,f,c
  1433  003D8C  E1FD               	bnz	clear_3
  1434  003D8E                     end_of_initialization:
  1435                           	opt stack 0
  1436  003D8E                     __end_of__initialization:
  1437                           	opt stack 0
  1438  003D8E  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1439  003D90  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1440  003D92  0100               	movlb	0
  1441  003D94  EF19  F00F         	goto	_main	;jump to C main() function
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           
  1451                           	psect	bssCOMRAM
  1452  000042                     __pbssCOMRAM:
  1453                           	opt stack 0
  1454  000042                     _compartment_number:
  1455                           	opt stack 0
  1456  000042                     	ds	16
  1457  000052                     _W:
  1458                           	opt stack 0
  1459  000052                     	ds	2
  1460  000054                     _S:
  1461                           	opt stack 0
  1462  000054                     	ds	2
  1463  000056                     _N:
  1464                           	opt stack 0
  1465  000056                     	ds	2
  1466  000058                     _B:
  1467                           	opt stack 0
  1468  000058                     	ds	2
  1469  00005A                     _total_number:
  1470                           	opt stack 0
  1471  00005A                     	ds	2
  1472  00005C                     _valid:
  1473                           	opt stack 0
  1474  00005C                     	ds	2
  1475  00005E                     _counter_step:
  1476                           	opt stack 0
  1477  00005E                     	ds	2
  1478  000060                     _counter:
  1479                           	opt stack 0
  1480  000060                     	ds	2
  1481  000062                     _operationTime:
  1482                           	opt stack 0
  1483  000062                     	ds	2
  1484  000064                     _prev:
  1485                           	opt stack 0
  1486  000064                     	ds	2
  1487  000066                     _gear_counter:
  1488                           	opt stack 0
  1489  000066                     	ds	2
  1490  000068                     _operation:
  1491                           	opt stack 0
  1492  000068                     	ds	2
  1493  00006A                     _timerCounter:
  1494                           	opt stack 0
  1495  00006A                     	ds	1
  1496  00006B                     _j:
  1497                           	opt stack 0
  1498  00006B                     	ds	1
  1499  00006C                     _input_ch:
  1500                           	opt stack 0
  1501  00006C                     	ds	1
  1502  00006D                     _nuts_data:
  1503                           	opt stack 0
  1504  00006D                     	ds	1
  1505  00006E                     _temp:
  1506                           	opt stack 0
  1507  00006E                     	ds	1
  1508  00006F                     	ds	1
  1509  000070                     _current_set2:
  1510                           	opt stack 0
  1511  000070                     	ds	5
  1512  000075                     _number:
  1513                           	opt stack 0
  1514  000075                     	ds	2
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1l	equ	0xFE1
  1523                           
  1524                           	psect	dataCOMRAM
  1525  000077                     __pdataCOMRAM:
  1526                           	opt stack 0
  1527  000077                     _motorStop_3:
  1528                           	opt stack 0
  1529  000077                     	ds	1
  1530  000078                     _motorStart_3:
  1531                           	opt stack 0
  1532  000078                     	ds	1
  1533  000079                     _motorStop_2:
  1534                           	opt stack 0
  1535  000079                     	ds	1
  1536  00007A                     _motorStart_2:
  1537                           	opt stack 0
  1538  00007A                     	ds	1
  1539  00007B                     _motorStop_1:
  1540                           	opt stack 0
  1541  00007B                     	ds	1
  1542  00007C                     _motorStart_1:
  1543                           	opt stack 0
  1544  00007C                     	ds	1
  1545  00007D                     _motorStop_0:
  1546                           	opt stack 0
  1547  00007D                     	ds	1
  1548  00007E                     _motorStart_0:
  1549                           	opt stack 0
  1550  00007E                     	ds	1
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           	psect	bssBANK0
  1561  000080                     __pbssBANK0:
  1562                           	opt stack 0
  1563  000080                     _compartment_array:
  1564                           	opt stack 0
  1565  000080                     	ds	16
  1566  000090                     _time:
  1567                           	opt stack 0
  1568  000090                     	ds	7
  1569  000097                     _W_spacingTime:
  1570                           	opt stack 0
  1571  000097                     	ds	2
  1572  000099                     _S_spacingTime:
  1573                           	opt stack 0
  1574  000099                     	ds	2
  1575  00009B                     _N_spacingTime:
  1576                           	opt stack 0
  1577  00009B                     	ds	2
  1578  00009D                     _B_spacingTime:
  1579                           	opt stack 0
  1580  00009D                     	ds	2
  1581  00009F                     _W_remain:
  1582                           	opt stack 0
  1583  00009F                     	ds	2
  1584  0000A1                     _S_remain:
  1585                           	opt stack 0
  1586  0000A1                     	ds	2
  1587  0000A3                     _N_remain:
  1588                           	opt stack 0
  1589  0000A3                     	ds	2
  1590  0000A5                     _B_remain:
  1591                           	opt stack 0
  1592  0000A5                     	ds	2
  1593  0000A7                     _W_counter:
  1594                           	opt stack 0
  1595  0000A7                     	ds	2
  1596  0000A9                     _N_counter:
  1597                           	opt stack 0
  1598  0000A9                     	ds	2
  1599  0000AB                     _S_counter:
  1600                           	opt stack 0
  1601  0000AB                     	ds	2
  1602  0000AD                     _B_counter:
  1603                           	opt stack 0
  1604  0000AD                     	ds	2
  1605  0000AF                     _assembly_step:
  1606                           	opt stack 0
  1607  0000AF                     	ds	2
  1608  0000B1                     _state:
  1609                           	opt stack 0
  1610  0000B1                     	ds	2
  1611  0000B3                     _operation_done:
  1612                           	opt stack 0
  1613  0000B3                     	ds	2
  1614  0000B5                     _change_mode:
  1615                           	opt stack 0
  1616  0000B5                     	ds	2
  1617  0000B7                     _mode:
  1618                           	opt stack 0
  1619  0000B7                     	ds	2
  1620  0000B9                     _white_tape:
  1621                           	opt stack 0
  1622  0000B9                     	ds	2
  1623  0000BB                     _i:
  1624                           	opt stack 0
  1625  0000BB                     	ds	2
  1626  0000BD                     _NeedToCloseLid:
  1627                           	opt stack 0
  1628  0000BD                     	ds	1
  1629  0000BE                     _EndOfProgram:
  1630                           	opt stack 0
  1631  0000BE                     	ds	1
  1632  0000BF                     _openHandle_data:
  1633                           	opt stack 0
  1634  0000BF                     	ds	1
  1635  0000C0                     _LCDinterruptState:
  1636                           	opt stack 0
  1637  0000C0                     	ds	1
  1638  0000C1                     _current_set:
  1639                           	opt stack 0
  1640  0000C1                     	ds	5
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1l	equ	0xFE1
  1649                           
  1650                           	psect	dataBANK0
  1651  0000FA                     __pdataBANK0:
  1652                           	opt stack 0
  1653  0000FA                     _spacingTime:
  1654                           	opt stack 0
  1655  0000FA                     	ds	2
  1656  0000FC                     _close_handle:
  1657                           	opt stack 0
  1658  0000FC                     	ds	1
  1659  0000FD                     _servo_ramp:
  1660                           	opt stack 0
  1661  0000FD                     	ds	1
  1662  0000FE                     _rotate_1compartment:
  1663                           	opt stack 0
  1664  0000FE                     	ds	1
  1665  0000FF                     _rotate_gear:
  1666                           	opt stack 0
  1667  0000FF                     	ds	1
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssBANK1
  1678  000100                     __pbssBANK1:
  1679                           	opt stack 0
  1680  000100                     _W_array:
  1681                           	opt stack 0
  1682  000100                     	ds	16
  1683  000110                     _N_array:
  1684                           	opt stack 0
  1685  000110                     	ds	16
  1686  000120                     _S_array:
  1687                           	opt stack 0
  1688  000120                     	ds	16
  1689  000130                     _B_array:
  1690                           	opt stack 0
  1691  000130                     	ds	16
  1692  000140                     _prev_number:
  1693                           	opt stack 0
  1694  000140                     	ds	16
  1695  000150                     _final_number:
  1696                           	opt stack 0
  1697  000150                     	ds	16
  1698  000160                     _final_time:
  1699                           	opt stack 0
  1700  000160                     	ds	2
  1701  000162                     _sec_final:
  1702                           	opt stack 0
  1703  000162                     	ds	2
  1704  000164                     _min_final:
  1705                           	opt stack 0
  1706  000164                     	ds	2
  1707  000166                     _hr_final:
  1708                           	opt stack 0
  1709  000166                     	ds	2
  1710  000168                     _initial_time:
  1711                           	opt stack 0
  1712  000168                     	ds	2
  1713  00016A                     _sec_initial:
  1714                           	opt stack 0
  1715  00016A                     	ds	2
  1716  00016C                     _min_initial:
  1717                           	opt stack 0
  1718  00016C                     	ds	2
  1719  00016E                     _hr_initial:
  1720                           	opt stack 0
  1721  00016E                     	ds	2
  1722  000170                     _W_total_dispensed:
  1723                           	opt stack 0
  1724  000170                     	ds	2
  1725  000172                     _S_total_dispensed:
  1726                           	opt stack 0
  1727  000172                     	ds	2
  1728  000174                     _N_total_dispensed:
  1729                           	opt stack 0
  1730  000174                     	ds	2
  1731  000176                     _B_total_dispensed:
  1732                           	opt stack 0
  1733  000176                     	ds	2
  1734  000178                     _W_done:
  1735                           	opt stack 0
  1736  000178                     	ds	2
  1737  00017A                     _S_done:
  1738                           	opt stack 0
  1739  00017A                     	ds	2
  1740  00017C                     _N_done:
  1741                           	opt stack 0
  1742  00017C                     	ds	2
  1743  00017E                     _B_done:
  1744                           	opt stack 0
  1745  00017E                     	ds	2
  1746  000180                     _W_input:
  1747                           	opt stack 0
  1748  000180                     	ds	2
  1749  000182                     _S_input:
  1750                           	opt stack 0
  1751  000182                     	ds	2
  1752  000184                     _N_input:
  1753                           	opt stack 0
  1754  000184                     	ds	2
  1755  000186                     _B_input:
  1756                           	opt stack 0
  1757  000186                     	ds	2
  1758  000188                     _prev_state:
  1759                           	opt stack 0
  1760  000188                     	ds	2
  1761  00018A                     _error:
  1762                           	opt stack 0
  1763  00018A                     	ds	2
  1764  00018C                     _compartment_pos:
  1765                           	opt stack 0
  1766  00018C                     	ds	2
  1767  00018E                     _angle:
  1768                           	opt stack 0
  1769  00018E                     	ds	2
  1770  000190                     _prev_set:
  1771                           	opt stack 0
  1772  000190                     	ds	40
  1773  0001B8                     _final_set:
  1774                           	opt stack 0
  1775  0001B8                     	ds	40
  1776  0001E0                     _temp_set:
  1777                           	opt stack 0
  1778  0001E0                     	ds	5
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           postdec1	equ	0xFE5
  1786                           fsr1l	equ	0xFE1
  1787                           
  1788                           	psect	dataBANK1
  1789  0001E5                     __pdataBANK1:
  1790                           	opt stack 0
  1791  0001E5                     _W_max:
  1792                           	opt stack 0
  1793  0001E5                     	ds	2
  1794  0001E7                     _S_max:
  1795                           	opt stack 0
  1796  0001E7                     	ds	2
  1797  0001E9                     _N_max:
  1798                           	opt stack 0
  1799  0001E9                     	ds	2
  1800  0001EB                     _B_max:
  1801                           	opt stack 0
  1802  0001EB                     	ds	2
  1803  0001ED                     _init_position:
  1804                           	opt stack 0
  1805  0001ED                     	ds	2
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssBANK2
  1816  000200                     __pbssBANK2:
  1817                           	opt stack 0
  1818  000200                     _fastener:
  1819                           	opt stack 0
  1820  000200                     	ds	200
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postdec1	equ	0xFE5
  1828                           fsr1l	equ	0xFE1
  1829                           
  1830                           	psect	cstackBANK0
  1831  0000C6                     __pcstackBANK0:
  1832                           	opt stack 0
  1833  0000C6                     ??_isdigit:
  1834  0000C6                     ??_I2C_Master_Wait:
  1835  0000C6                     ?___awdiv:
  1836                           	opt stack 0
  1837  0000C6                     ?___lwdiv:
  1838                           	opt stack 0
  1839  0000C6                     ?___lldiv:
  1840                           	opt stack 0
  1841  0000C6                     lcdNibble@temp:
  1842                           	opt stack 0
  1843  0000C6                     generate_compartment_array@step:
  1844                           	opt stack 0
  1845  0000C6                     ___awdiv@dividend:
  1846                           	opt stack 0
  1847  0000C6                     ___lwdiv@dividend:
  1848                           	opt stack 0
  1849  0000C6                     ___lldiv@dividend:
  1850                           	opt stack 0
  1851                           
  1852                           ; 4 bytes @ 0x0
  1853  0000C6                     	ds	1
  1854  0000C7                     lcdNibble@data:
  1855                           	opt stack 0
  1856  0000C7                     I2C_Master_Read@ackBit:
  1857                           	opt stack 0
  1858  0000C7                     _isdigit$1869:
  1859                           	opt stack 0
  1860  0000C7                     I2C_Master_Write@byteToWrite:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x1
  1864  0000C7                     	ds	1
  1865  0000C8                     ??_generate_compartment_array:
  1866  0000C8                     lcdInst@data:
  1867                           	opt stack 0
  1868  0000C8                     putch@data:
  1869                           	opt stack 0
  1870  0000C8                     I2C_Master_Read@receivedByte:
  1871                           	opt stack 0
  1872  0000C8                     isdigit@c:
  1873                           	opt stack 0
  1874  0000C8                     ___awdiv@divisor:
  1875                           	opt stack 0
  1876  0000C8                     ___lwdiv@divisor:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x2
  1880  0000C8                     	ds	1
  1881  0000C9                     ??_initLCD:
  1882  0000C9                     I2C_sendData@char_data:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x3
  1886  0000C9                     	ds	1
  1887  0000CA                     ___awdiv@counter:
  1888                           	opt stack 0
  1889  0000CA                     ___lwdiv@quotient:
  1890                           	opt stack 0
  1891  0000CA                     ___lldiv@divisor:
  1892                           	opt stack 0
  1893                           
  1894                           ; 4 bytes @ 0x4
  1895  0000CA                     	ds	1
  1896  0000CB                     ___awdiv@sign:
  1897                           	opt stack 0
  1898                           
  1899                           ; 1 bytes @ 0x5
  1900  0000CB                     	ds	1
  1901  0000CC                     ___lwdiv@counter:
  1902                           	opt stack 0
  1903  0000CC                     ___awdiv@quotient:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x6
  1907  0000CC                     	ds	1
  1908  0000CD                     ?___lwmod:
  1909                           	opt stack 0
  1910  0000CD                     ___lwmod@dividend:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x7
  1914  0000CD                     	ds	1
  1915  0000CE                     ?___wmul:
  1916                           	opt stack 0
  1917  0000CE                     ___wmul@multiplier:
  1918                           	opt stack 0
  1919  0000CE                     ___lldiv@quotient:
  1920                           	opt stack 0
  1921                           
  1922                           ; 4 bytes @ 0x8
  1923  0000CE                     	ds	1
  1924  0000CF                     ___lwmod@divisor:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x9
  1928  0000CF                     	ds	1
  1929  0000D0                     ___wmul@multiplicand:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0xA
  1933  0000D0                     	ds	1
  1934  0000D1                     ___lwmod@counter:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0xB
  1938  0000D1                     	ds	1
  1939  0000D2                     ___lldiv@counter:
  1940                           	opt stack 0
  1941  0000D2                     ___wmul@product:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0xC
  1945  0000D2                     	ds	1
  1946  0000D3                     I2C_Master_Init@clockFreq:
  1947                           	opt stack 0
  1948                           
  1949                           ; 4 bytes @ 0xD
  1950  0000D3                     	ds	1
  1951  0000D4                     ?_printf:
  1952                           	opt stack 0
  1953  0000D4                     printf@f:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0xE
  1957  0000D4                     	ds	3
  1958  0000D7                     ??_I2C_Master_Init:
  1959                           
  1960                           ; 1 bytes @ 0x11
  1961  0000D7                     	ds	4
  1962  0000DB                     
  1963                           ; 1 bytes @ 0x15
  1964  0000DB                     	ds	3
  1965  0000DE                     ??_printf:
  1966                           
  1967                           ; 1 bytes @ 0x18
  1968  0000DE                     	ds	4
  1969  0000E2                     printf@idx:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x1C
  1973  0000E2                     	ds	1
  1974  0000E3                     printf@prec:
  1975                           	opt stack 0
  1976                           
  1977                           ; 1 bytes @ 0x1D
  1978  0000E3                     	ds	1
  1979  0000E4                     printf@cp:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x1E
  1983  0000E4                     	ds	2
  1984  0000E6                     printf@ap:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0x20
  1988  0000E6                     	ds	2
  1989  0000E8                     printf@len:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x22
  1993  0000E8                     	ds	2
  1994  0000EA                     printf@val:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x24
  1998  0000EA                     	ds	2
  1999  0000EC                     printf@flag:
  2000                           	opt stack 0
  2001                           
  2002                           ; 1 bytes @ 0x26
  2003  0000EC                     	ds	1
  2004  0000ED                     printf@width:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x27
  2008  0000ED                     	ds	2
  2009  0000EF                     printf@c:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x29
  2013  0000EF                     	ds	1
  2014  0000F0                     Bolt_dispense@B_max:
  2015                           	opt stack 0
  2016  0000F0                     Nut_dispense@N_max:
  2017                           	opt stack 0
  2018  0000F0                     Spacer_dispense@S_max:
  2019                           	opt stack 0
  2020  0000F0                     Washer_dispense@W_max:
  2021                           	opt stack 0
  2022  0000F0                     Bolt_remain@time:
  2023                           	opt stack 0
  2024  0000F0                     Nut_remain@time:
  2025                           	opt stack 0
  2026  0000F0                     Spacer_remain@time:
  2027                           	opt stack 0
  2028  0000F0                     Washer_remain@time:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0x2A
  2032  0000F0                     	ds	2
  2033  0000F2                     ??_Bolt_dispense:
  2034  0000F2                     ??_Nut_dispense:
  2035  0000F2                     ??_Spacer_dispense:
  2036  0000F2                     ??_Washer_dispense:
  2037  0000F2                     ??_Nut_remain:
  2038  0000F2                     ??_Washer_remain:
  2039  0000F2                     ??_Spacer_remain:
  2040  0000F2                     ??_Bolt_remain:
  2041                           
  2042                           ; 1 bytes @ 0x2C
  2043  0000F2                     	ds	2
  2044  0000F4                     ??_main:
  2045                           
  2046                           ; 1 bytes @ 0x2E
  2047  0000F4                     	ds	2
  2048  0000F6                     _main$2288:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x30
  2052  0000F6                     	ds	2
  2053  0000F8                     main@compart_id:
  2054                           	opt stack 0
  2055                           
  2056                           ; 2 bytes @ 0x32
  2057  0000F8                     	ds	2
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1l	equ	0xFE1
  2066                           
  2067                           	psect	cstackCOMRAM
  2068  000001                     __pcstackCOMRAM:
  2069                           	opt stack 0
  2070  000001                     ??i2_I2C_Master_Wait:
  2071  000001                     ??i2_isdigit:
  2072  000001                     ?_check:
  2073                           	opt stack 0
  2074  000001                     ?_strcmp:
  2075                           	opt stack 0
  2076  000001                     ?___awmod:
  2077                           	opt stack 0
  2078  000001                     ?i2___wmul:
  2079                           	opt stack 0
  2080  000001                     ?i2___awdiv:
  2081                           	opt stack 0
  2082  000001                     ?i2___lwdiv:
  2083                           	opt stack 0
  2084  000001                     ?i2___lldiv:
  2085                           	opt stack 0
  2086  000001                     i2lcdNibble@temp:
  2087                           	opt stack 0
  2088  000001                     ___awmod@dividend:
  2089                           	opt stack 0
  2090  000001                     strcat@to:
  2091                           	opt stack 0
  2092  000001                     strcmp@s1:
  2093                           	opt stack 0
  2094  000001                     i2generate_compartment_array@step:
  2095                           	opt stack 0
  2096  000001                     i2___wmul@multiplier:
  2097                           	opt stack 0
  2098  000001                     i2___awdiv@dividend:
  2099                           	opt stack 0
  2100  000001                     i2___lwdiv@dividend:
  2101                           	opt stack 0
  2102  000001                     i2___lldiv@dividend:
  2103                           	opt stack 0
  2104                           
  2105                           ; 4 bytes @ 0x0
  2106  000001                     	ds	1
  2107  000002                     i2lcdNibble@data:
  2108                           	opt stack 0
  2109  000002                     i2I2C_Master_Read@ackBit:
  2110                           	opt stack 0
  2111  000002                     i2_isdigit$1869:
  2112                           	opt stack 0
  2113  000002                     i2I2C_Master_Write@byteToWrite:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x1
  2117  000002                     	ds	1
  2118  000003                     ??i2_generate_compartment_array:
  2119  000003                     i2lcdInst@data:
  2120                           	opt stack 0
  2121  000003                     i2putch@data:
  2122                           	opt stack 0
  2123  000003                     i2I2C_Master_Read@receivedByte:
  2124                           	opt stack 0
  2125  000003                     i2isdigit@c:
  2126                           	opt stack 0
  2127  000003                     ___awmod@divisor:
  2128                           	opt stack 0
  2129  000003                     strcat@from:
  2130                           	opt stack 0
  2131  000003                     strcmp@s2:
  2132                           	opt stack 0
  2133  000003                     i2___wmul@multiplicand:
  2134                           	opt stack 0
  2135  000003                     i2___awdiv@divisor:
  2136                           	opt stack 0
  2137  000003                     i2___lwdiv@divisor:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x2
  2141  000003                     	ds	1
  2142  000004                     ??i2_initLCD:
  2143  000004                     
  2144                           ; 1 bytes @ 0x3
  2145  000004                     	ds	1
  2146  000005                     ??_strcmp:
  2147  000005                     ___awmod@counter:
  2148                           	opt stack 0
  2149  000005                     i2___awdiv@counter:
  2150                           	opt stack 0
  2151  000005                     strcat@cp:
  2152                           	opt stack 0
  2153  000005                     i2___wmul@product:
  2154                           	opt stack 0
  2155  000005                     i2___lwdiv@quotient:
  2156                           	opt stack 0
  2157  000005                     i2___lldiv@divisor:
  2158                           	opt stack 0
  2159                           
  2160                           ; 4 bytes @ 0x4
  2161  000005                     	ds	1
  2162  000006                     ___awmod@sign:
  2163                           	opt stack 0
  2164  000006                     strcmp@r:
  2165                           	opt stack 0
  2166  000006                     i2___awdiv@sign:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x5
  2170  000006                     	ds	1
  2171  000007                     ??_is_valid:
  2172  000007                     ?_strncmp:
  2173                           	opt stack 0
  2174  000007                     i2___lwdiv@counter:
  2175                           	opt stack 0
  2176  000007                     strcpy@to:
  2177                           	opt stack 0
  2178  000007                     strncmp@s1:
  2179                           	opt stack 0
  2180  000007                     i2___awdiv@quotient:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x6
  2184  000007                     	ds	1
  2185  000008                     ?i2___lwmod:
  2186                           	opt stack 0
  2187  000008                     i2___lwmod@dividend:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x7
  2191  000008                     	ds	1
  2192  000009                     strcpy@from:
  2193                           	opt stack 0
  2194  000009                     strncmp@s2:
  2195                           	opt stack 0
  2196  000009                     i2___lldiv@quotient:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0x8
  2200  000009                     	ds	1
  2201  00000A                     i2___lwmod@divisor:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x9
  2205  00000A                     	ds	1
  2206  00000B                     strcpy@cp:
  2207                           	opt stack 0
  2208  00000B                     strncmp@len:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0xA
  2212  00000B                     	ds	1
  2213  00000C                     i2___lwmod@counter:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0xB
  2217  00000C                     	ds	1
  2218  00000D                     ??_strncmp:
  2219  00000D                     ?i2_printf:
  2220                           	opt stack 0
  2221  00000D                     i2___lldiv@counter:
  2222                           	opt stack 0
  2223  00000D                     i2printf@f:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0xC
  2227  00000D                     	ds	1
  2228  00000E                     i2I2C_Master_Init@clockFreq:
  2229                           	opt stack 0
  2230                           
  2231                           ; 4 bytes @ 0xD
  2232  00000E                     	ds	4
  2233  000012                     ??i2_I2C_Master_Init:
  2234                           
  2235                           ; 1 bytes @ 0x11
  2236  000012                     	ds	3
  2237  000015                     ??i2_printf:
  2238                           
  2239                           ; 1 bytes @ 0x14
  2240  000015                     	ds	4
  2241  000019                     i2printf@idx:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x18
  2245  000019                     	ds	1
  2246  00001A                     i2printf@prec:
  2247                           	opt stack 0
  2248                           
  2249                           ; 1 bytes @ 0x19
  2250  00001A                     	ds	1
  2251  00001B                     i2printf@cp:
  2252                           	opt stack 0
  2253                           
  2254                           ; 2 bytes @ 0x1A
  2255  00001B                     	ds	2
  2256  00001D                     i2printf@ap:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x1C
  2260  00001D                     	ds	2
  2261  00001F                     i2printf@len:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x1E
  2265  00001F                     	ds	2
  2266  000021                     i2printf@val:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x20
  2270  000021                     	ds	2
  2271  000023                     i2printf@flag:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x22
  2275  000023                     	ds	1
  2276  000024                     i2printf@width:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x23
  2280  000024                     	ds	2
  2281  000026                     i2printf@c:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x25
  2285  000026                     	ds	1
  2286  000027                     ??_interruptHandler:
  2287                           
  2288                           ; 1 bytes @ 0x26
  2289  000027                     	ds	23
  2290  00003E                     interruptHandler@i:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x3D
  2294  00003E                     	ds	2
  2295  000040                     interruptHandler@keypress:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x3F
  2299  000040                     	ds	1
  2300  000041                     interruptHandler@temp:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x40
  2304  000041                     	ds	1
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           
  2314 ;;
  2315 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2316 ;;
  2317 ;; *************** function _main *****************
  2318 ;; Defined at:
  2319 ;;		line 106 in file "main.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  compart_id      2   50[BANK0 ] int 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:        6 bytes
  2338 ;; Hardware stack levels required when called:    8
  2339 ;; This function calls:
  2340 ;;		_Bolt_dispense
  2341 ;;		_Bolt_remain
  2342 ;;		_I2C_Master_Read
  2343 ;;		_I2C_Master_Start
  2344 ;;		_I2C_Master_Stop
  2345 ;;		_I2C_Master_Write
  2346 ;;		_I2C_init
  2347 ;;		_I2C_sendData
  2348 ;;		_Nut_dispense
  2349 ;;		_Nut_remain
  2350 ;;		_Spacer_dispense
  2351 ;;		_Spacer_remain
  2352 ;;		_Washer_dispense
  2353 ;;		_Washer_remain
  2354 ;;		___awdiv
  2355 ;;		___wmul
  2356 ;;		_generate_compartment_array
  2357 ;;		_initLCD
  2358 ;;		_initVibTimer
  2359 ;;		_initialize
  2360 ;;		_lcdInst
  2361 ;;		_printf
  2362 ;; This function is called by:
  2363 ;;		Startup code after reset
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text0
  2368  001E32                     __ptext0:
  2369                           	opt stack 0
  2370  001E32                     _main:
  2371                           	opt stack 23
  2372                           
  2373                           ;main.c: 112: OSCCONbits.IRCF2 = 1;
  2374                           
  2375                           ;incstack = 0
  2376  001E32  8CD3               	bsf	4051,6,c	;volatile
  2377                           
  2378                           ;main.c: 113: OSCCONbits.IRCF1 = 1;
  2379  001E34  8AD3               	bsf	4051,5,c	;volatile
  2380                           
  2381                           ;main.c: 114: OSCCONbits.IRCF0 = 1;
  2382  001E36  88D3               	bsf	4051,4,c	;volatile
  2383                           
  2384                           ;main.c: 115: OSCCONbits.SCS1 = 1;
  2385  001E38  82D3               	bsf	4051,1,c	;volatile
  2386                           
  2387                           ;main.c: 116: OSCTUNEbits.PLLEN = 1;
  2388  001E3A  8C9B               	bsf	3995,6,c	;volatile
  2389                           
  2390                           ;main.c: 119: LATA = 0x00;
  2391  001E3C  0E00               	movlw	0
  2392  001E3E  6E89               	movwf	3977,c	;volatile
  2393                           
  2394                           ;main.c: 120: LATB = 0x00;
  2395  001E40  0E00               	movlw	0
  2396  001E42  6E8A               	movwf	3978,c	;volatile
  2397                           
  2398                           ;main.c: 121: LATC = 0x00;
  2399  001E44  0E00               	movlw	0
  2400  001E46  6E8B               	movwf	3979,c	;volatile
  2401                           
  2402                           ;main.c: 122: LATD = 0x00;
  2403  001E48  0E00               	movlw	0
  2404  001E4A  6E8C               	movwf	3980,c	;volatile
  2405                           
  2406                           ;main.c: 123: LATE = 0x00;
  2407  001E4C  0E00               	movlw	0
  2408  001E4E  6E8D               	movwf	3981,c	;volatile
  2409                           
  2410                           ;main.c: 127: TRISA = 0xFF;
  2411  001E50  6892               	setf	3986,c	;volatile
  2412                           
  2413                           ;main.c: 128: TRISB = 0xFF;
  2414  001E52  6893               	setf	3987,c	;volatile
  2415                           
  2416                           ;main.c: 129: TRISC = 0x00;
  2417  001E54  0E00               	movlw	0
  2418  001E56  6E94               	movwf	3988,c	;volatile
  2419                           
  2420                           ;main.c: 130: TRISD = 0x00;
  2421  001E58  0E00               	movlw	0
  2422  001E5A  6E95               	movwf	3989,c	;volatile
  2423                           
  2424                           ;main.c: 131: TRISE = 0x00;
  2425  001E5C  0E00               	movlw	0
  2426  001E5E  6E96               	movwf	3990,c	;volatile
  2427                           
  2428                           ;main.c: 134: ADCON0 = 0x00;
  2429  001E60  0E00               	movlw	0
  2430  001E62  6EC2               	movwf	4034,c	;volatile
  2431                           
  2432                           ;main.c: 135: ADCON1 = 0b00001111;
  2433  001E64  0E0F               	movlw	15
  2434  001E66  6EC1               	movwf	4033,c	;volatile
  2435                           
  2436                           ;main.c: 138: INT1IE = 1;
  2437  001E68  86F0               	bsf	intcon3,3,c	;volatile
  2438                           
  2439                           ;main.c: 139: (INTCONbits.GIE = 1);
  2440  001E6A  8EF2               	bsf	intcon,7,c	;volatile
  2441                           
  2442                           ;main.c: 144: initLCD();
  2443  001E6C  EC02  F022         	call	_initLCD	;wreg free
  2444  001E70                     
  2445                           ;main.c: 151: if (mode == 0){
  2446  001E70  0100               	movlb	0	; () banked
  2447  001E72  51B7               	movf	_mode& (0+255),w,b
  2448  001E74  11B8               	iorwf	(_mode+1)& (0+255),w,b
  2449  001E76  A4D8               	btfss	status,2,c
  2450  001E78  D031               	goto	l490
  2451  001E7A                     u5080:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 153: printf("1:date and time");
  2455                           
  2456                           ; BSR set to: 0
  2457                           
  2458                           ;main.c: 152: while(1){
  2459  001E7A  0E41               	movlw	low STR_1
  2460  001E7C  6FD4               	movwf	printf@f& (0+255),b
  2461  001E7E  0EFE               	movlw	high STR_1
  2462  001E80  6FD5               	movwf	(printf@f+1)& (0+255),b
  2463  001E82  ECE5  F014         	call	_printf	;wreg free
  2464                           
  2465                           ;main.c: 154: lcdInst(0xC0);;
  2466  001E86  0EC0               	movlw	192
  2467  001E88  EC9F  F023         	call	_lcdInst
  2468                           
  2469                           ;main.c: 155: printf("2:Enter Instruction");
  2470  001E8C  0E6A               	movlw	low STR_2
  2471  001E8E  0100               	movlb	0	; () banked
  2472  001E90  6FD4               	movwf	printf@f& (0+255),b
  2473  001E92  0EFD               	movlw	high STR_2
  2474  001E94  6FD5               	movwf	(printf@f+1)& (0+255),b
  2475  001E96  ECE5  F014         	call	_printf	;wreg free
  2476                           
  2477                           ;main.c: 156: _delay((unsigned long)((100)*(32000000/4000.0)));
  2478  001E9A  0E05               	movlw	5
  2479  001E9C  0100               	movlb	0	; () banked
  2480  001E9E  6FF5               	movwf	(??_main+1)& (0+255),b
  2481  001EA0  0E0F               	movlw	15
  2482  001EA2  6FF4               	movwf	??_main& (0+255),b
  2483  001EA4  0EF1               	movlw	241
  2484  001EA6                     u6347:
  2485  001EA6  2EE8               	decfsz	wreg,f,c
  2486  001EA8  D7FE               	bra	u6347
  2487  001EAA  2FF4               	decfsz	??_main& (0+255),f,b
  2488  001EAC  D7FC               	bra	u6347
  2489  001EAE  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2490  001EB0  D7FA               	bra	u6347
  2491                           
  2492                           ;main.c: 157: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2493  001EB2  0E80               	movlw	128
  2494  001EB4  EC9F  F023         	call	_lcdInst
  2495  001EB8  0E34               	movlw	52
  2496  001EBA  0100               	movlb	0	; () banked
  2497  001EBC  6FF4               	movwf	??_main& (0+255),b
  2498  001EBE  0EF1               	movlw	241
  2499  001EC0                     u6357:
  2500  001EC0  2EE8               	decfsz	wreg,f,c
  2501  001EC2  D7FE               	bra	u6357
  2502  001EC4  2FF4               	decfsz	??_main& (0+255),f,b
  2503  001EC6  D7FC               	bra	u6357
  2504  001EC8  D000               	nop2	
  2505                           
  2506                           ;main.c: 158: if (change_mode == 1){
  2507  001ECA  0100               	movlb	0	; () banked
  2508  001ECC  05B5               	decf	_change_mode& (0+255),w,b
  2509  001ECE  11B6               	iorwf	(_change_mode+1)& (0+255),w,b
  2510  001ED0  A4D8               	btfss	status,2,c
  2511  001ED2  D7D3               	goto	u5080
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 159: mode = 1;
  2515  001ED4  0E00               	movlw	0
  2516  001ED6  6FB8               	movwf	(_mode+1)& (0+255),b
  2517  001ED8  0E01               	movlw	1
  2518  001EDA  6FB7               	movwf	_mode& (0+255),b
  2519  001EDC                     l490:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;main.c: 161: }
  2523                           ;main.c: 162: }
  2524                           ;main.c: 164: }
  2525                           ;main.c: 167: if (mode == 1){
  2526                           
  2527                           ; BSR set to: 0
  2528                           
  2529                           ; BSR set to: 0
  2530  001EDC  05B7               	decf	_mode& (0+255),w,b
  2531  001EDE  11B8               	iorwf	(_mode+1)& (0+255),w,b
  2532  001EE0  A4D8               	btfss	status,2,c
  2533  001EE2  D1E5               	goto	l492
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 169: initLCD();
  2537  001EE4  EC02  F022         	call	_initLCD	;wreg free
  2538  001EE8                     
  2539                           ;main.c: 172: if (state == 0){
  2540  001EE8  0100               	movlb	0	; () banked
  2541  001EEA  51B1               	movf	_state& (0+255),w,b
  2542  001EEC  11B2               	iorwf	(_state+1)& (0+255),w,b
  2543  001EEE  A4D8               	btfss	status,2,c
  2544  001EF0  D022               	goto	l494
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;main.c: 174: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2548  001EF2  0E80               	movlw	128
  2549  001EF4  EC9F  F023         	call	_lcdInst
  2550  001EF8  0E34               	movlw	52
  2551  001EFA  0100               	movlb	0	; () banked
  2552  001EFC  6FF4               	movwf	??_main& (0+255),b
  2553  001EFE  0EF1               	movlw	241
  2554  001F00                     u6367:
  2555  001F00  2EE8               	decfsz	wreg,f,c
  2556  001F02  D7FE               	bra	u6367
  2557  001F04  2FF4               	decfsz	??_main& (0+255),f,b
  2558  001F06  D7FC               	bra	u6367
  2559  001F08  D000               	nop2	
  2560                           
  2561                           ;main.c: 175: printf("assembly step:");
  2562  001F0A  0E70               	movlw	low STR_3
  2563  001F0C  0100               	movlb	0	; () banked
  2564  001F0E  6FD4               	movwf	printf@f& (0+255),b
  2565  001F10  0EFE               	movlw	high STR_3
  2566  001F12  6FD5               	movwf	(printf@f+1)& (0+255),b
  2567  001F14  ECE5  F014         	call	_printf	;wreg free
  2568                           
  2569                           ;main.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
  2570  001F18  0E05               	movlw	5
  2571  001F1A  0100               	movlb	0	; () banked
  2572  001F1C  6FF5               	movwf	(??_main+1)& (0+255),b
  2573  001F1E  0E0F               	movlw	15
  2574  001F20  6FF4               	movwf	??_main& (0+255),b
  2575  001F22  0EF1               	movlw	241
  2576  001F24                     u6377:
  2577  001F24  2EE8               	decfsz	wreg,f,c
  2578  001F26  D7FE               	bra	u6377
  2579  001F28  2FF4               	decfsz	??_main& (0+255),f,b
  2580  001F2A  D7FC               	bra	u6377
  2581  001F2C  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2582  001F2E  D7FA               	bra	u6377
  2583                           
  2584                           ;main.c: 177: lcdInst(0xC0);;
  2585  001F30  0EC0               	movlw	192
  2586  001F32  EC9F  F023         	call	_lcdInst
  2587  001F36                     l494:
  2588                           
  2589                           ;main.c: 178: }
  2590                           ;main.c: 179: if (state ==1){
  2591  001F36  0100               	movlb	0	; () banked
  2592  001F38  05B1               	decf	_state& (0+255),w,b
  2593  001F3A  11B2               	iorwf	(_state+1)& (0+255),w,b
  2594  001F3C  A4D8               	btfss	status,2,c
  2595  001F3E  D023               	goto	l495
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;main.c: 180: initLCD();
  2599  001F40  EC02  F022         	call	_initLCD	;wreg free
  2600                           
  2601                           ;main.c: 181: printf("fastener set:");
  2602  001F44  0ED8               	movlw	low STR_4
  2603  001F46  0100               	movlb	0	; () banked
  2604  001F48  6FD4               	movwf	printf@f& (0+255),b
  2605  001F4A  0EFE               	movlw	high STR_4
  2606  001F4C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2607  001F4E  ECE5  F014         	call	_printf	;wreg free
  2608                           
  2609                           ;main.c: 182: lcdInst(0xC0);;
  2610  001F52  0EC0               	movlw	192
  2611  001F54  EC9F  F023         	call	_lcdInst
  2612                           
  2613                           ;main.c: 183: printf("%s",current_set);
  2614  001F58  0EF8               	movlw	low STR_5
  2615  001F5A  0100               	movlb	0	; () banked
  2616  001F5C  6FD4               	movwf	printf@f& (0+255),b
  2617  001F5E  0EFF               	movlw	high STR_5
  2618  001F60  6FD5               	movwf	(printf@f+1)& (0+255),b
  2619  001F62  0EC1               	movlw	low _current_set
  2620  001F64  6FD6               	movwf	(?_printf+2)& (0+255),b
  2621  001F66  0E00               	movlw	high _current_set
  2622  001F68  6FD7               	movwf	(?_printf+3)& (0+255),b
  2623  001F6A  ECE5  F014         	call	_printf	;wreg free
  2624                           
  2625                           ;main.c: 184: _delay((unsigned long)((100)*(32000000/4000.0)));
  2626  001F6E  0E05               	movlw	5
  2627  001F70  0100               	movlb	0	; () banked
  2628  001F72  6FF5               	movwf	(??_main+1)& (0+255),b
  2629  001F74  0E0F               	movlw	15
  2630  001F76  6FF4               	movwf	??_main& (0+255),b
  2631  001F78  0EF1               	movlw	241
  2632  001F7A                     u6387:
  2633  001F7A  2EE8               	decfsz	wreg,f,c
  2634  001F7C  D7FE               	bra	u6387
  2635  001F7E  2FF4               	decfsz	??_main& (0+255),f,b
  2636  001F80  D7FC               	bra	u6387
  2637  001F82  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2638  001F84  D7FA               	bra	u6387
  2639  001F86                     l495:
  2640                           
  2641                           ;main.c: 185: }
  2642                           ;main.c: 187: if (state == 2){
  2643  001F86  0E02               	movlw	2
  2644  001F88  0100               	movlb	0	; () banked
  2645  001F8A  19B1               	xorwf	_state& (0+255),w,b
  2646  001F8C  11B2               	iorwf	(_state+1)& (0+255),w,b
  2647  001F8E  A4D8               	btfss	status,2,c
  2648  001F90  D015               	goto	l496
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 188: initLCD();
  2652  001F92  EC02  F022         	call	_initLCD	;wreg free
  2653                           
  2654                           ;main.c: 189: printf("number:");
  2655  001F96  0E8F               	movlw	low STR_6
  2656  001F98  0100               	movlb	0	; () banked
  2657  001F9A  6FD4               	movwf	printf@f& (0+255),b
  2658  001F9C  0EFF               	movlw	high STR_6
  2659  001F9E  6FD5               	movwf	(printf@f+1)& (0+255),b
  2660  001FA0  ECE5  F014         	call	_printf	;wreg free
  2661                           
  2662                           ;main.c: 190: _delay((unsigned long)((100)*(32000000/4000.0)));
  2663  001FA4  0E05               	movlw	5
  2664  001FA6  0100               	movlb	0	; () banked
  2665  001FA8  6FF5               	movwf	(??_main+1)& (0+255),b
  2666  001FAA  0E0F               	movlw	15
  2667  001FAC  6FF4               	movwf	??_main& (0+255),b
  2668  001FAE  0EF1               	movlw	241
  2669  001FB0                     u6397:
  2670  001FB0  2EE8               	decfsz	wreg,f,c
  2671  001FB2  D7FE               	bra	u6397
  2672  001FB4  2FF4               	decfsz	??_main& (0+255),f,b
  2673  001FB6  D7FC               	bra	u6397
  2674  001FB8  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2675  001FBA  D7FA               	bra	u6397
  2676  001FBC                     l496:
  2677                           
  2678                           ;main.c: 191: }
  2679                           ;main.c: 193: if (state == 3){
  2680  001FBC  0E03               	movlw	3
  2681  001FBE  0100               	movlb	0	; () banked
  2682  001FC0  19B1               	xorwf	_state& (0+255),w,b
  2683  001FC2  11B2               	iorwf	(_state+1)& (0+255),w,b
  2684  001FC4  A4D8               	btfss	status,2,c
  2685  001FC6  D090               	goto	l497
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 194: initLCD();
  2689  001FC8  EC02  F022         	call	_initLCD	;wreg free
  2690                           
  2691                           ;main.c: 195: printf("assembly step:%d",assembly_step);
  2692  001FCC  0E0F               	movlw	low STR_7
  2693  001FCE  0100               	movlb	0	; () banked
  2694  001FD0  6FD4               	movwf	printf@f& (0+255),b
  2695  001FD2  0EFE               	movlw	high STR_7
  2696  001FD4  6FD5               	movwf	(printf@f+1)& (0+255),b
  2697  001FD6  C0AF  F0D6         	movff	_assembly_step,?_printf+2
  2698  001FDA  C0B0  F0D7         	movff	_assembly_step+1,?_printf+3
  2699  001FDE  ECE5  F014         	call	_printf	;wreg free
  2700                           
  2701                           ;main.c: 196: _delay((unsigned long)((200)*(32000000/4000.0)));
  2702  001FE2  0E09               	movlw	9
  2703  001FE4  0100               	movlb	0	; () banked
  2704  001FE6  6FF5               	movwf	(??_main+1)& (0+255),b
  2705  001FE8  0E1E               	movlw	30
  2706  001FEA  6FF4               	movwf	??_main& (0+255),b
  2707  001FEC  0EE4               	movlw	228
  2708  001FEE                     u6407:
  2709  001FEE  2EE8               	decfsz	wreg,f,c
  2710  001FF0  D7FE               	bra	u6407
  2711  001FF2  2FF4               	decfsz	??_main& (0+255),f,b
  2712  001FF4  D7FC               	bra	u6407
  2713  001FF6  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2714  001FF8  D7FA               	bra	u6407
  2715  001FFA  F000               	nop	
  2716                           
  2717                           ;main.c: 197: for ( i=0; i<assembly_step; i++){
  2718  001FFC  0E00               	movlw	0
  2719  001FFE  0100               	movlb	0	; () banked
  2720  002000  6FBC               	movwf	(_i+1)& (0+255),b
  2721  002002  0E00               	movlw	0
  2722  002004  6FBB               	movwf	_i& (0+255),b
  2723  002006  D066               	goto	l498
  2724  002008                     
  2725                           ; BSR set to: 0
  2726                           ;main.c: 199: initLCD();
  2727                           
  2728                           ; BSR set to: 0
  2729  002008  EC02  F022         	call	_initLCD	;wreg free
  2730                           
  2731                           ;main.c: 201: printf("step");
  2732  00200C  0EE3               	movlw	low STR_8
  2733  00200E  0100               	movlb	0	; () banked
  2734  002010  6FD4               	movwf	printf@f& (0+255),b
  2735  002012  0EFF               	movlw	high STR_8
  2736  002014  6FD5               	movwf	(printf@f+1)& (0+255),b
  2737  002016  ECE5  F014         	call	_printf	;wreg free
  2738                           
  2739                           ;main.c: 202: printf("%d", i+1);
  2740  00201A  0ED1               	movlw	low (STR_66+2)
  2741  00201C  0100               	movlb	0	; () banked
  2742  00201E  6FD4               	movwf	printf@f& (0+255),b
  2743  002020  0EFF               	movlw	high (STR_66+2)
  2744  002022  6FD5               	movwf	(printf@f+1)& (0+255),b
  2745  002024  0E01               	movlw	1
  2746  002026  25BB               	addwf	_i& (0+255),w,b
  2747  002028  6FD6               	movwf	(?_printf+2)& (0+255),b
  2748  00202A  0E00               	movlw	0
  2749  00202C  21BC               	addwfc	(_i+1)& (0+255),w,b
  2750  00202E  6FD7               	movwf	(?_printf+3)& (0+255),b
  2751  002030  ECE5  F014         	call	_printf	;wreg free
  2752                           
  2753                           ;main.c: 203: printf(":");
  2754  002034  0E3F               	movlw	low (STR_35+14)
  2755  002036  0100               	movlb	0	; () banked
  2756  002038  6FD4               	movwf	printf@f& (0+255),b
  2757  00203A  0EFE               	movlw	high (STR_35+14)
  2758  00203C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2759  00203E  ECE5  F014         	call	_printf	;wreg free
  2760                           
  2761                           ;main.c: 204: printf("%s", final_set[i]);
  2762  002042  C0BB  F0CE         	movff	_i,___wmul@multiplier
  2763  002046  C0BC  F0CF         	movff	_i+1,___wmul@multiplier+1
  2764  00204A  0E00               	movlw	0
  2765  00204C  0100               	movlb	0	; () banked
  2766  00204E  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2767  002050  0E05               	movlw	5
  2768  002052  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  2769  002054  EC26  F023         	call	___wmul	;wreg free
  2770  002058  0EB8               	movlw	low _final_set
  2771  00205A  0100               	movlb	0	; () banked
  2772  00205C  25CE               	addwf	?___wmul& (0+255),w,b
  2773  00205E  6FF6               	movwf	_main$2288& (0+255),b
  2774  002060  0E01               	movlw	high _final_set
  2775  002062  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  2776  002064  6FF7               	movwf	(_main$2288+1)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 204: printf("%s", final_set[i]);
  2780  002066  0EF8               	movlw	low STR_5
  2781  002068  6FD4               	movwf	printf@f& (0+255),b
  2782  00206A  0EFF               	movlw	high STR_5
  2783  00206C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2784  00206E  C0F6  F0D6         	movff	_main$2288,?_printf+2
  2785  002072  C0F7  F0D7         	movff	_main$2288+1,?_printf+3
  2786  002076  ECE5  F014         	call	_printf	;wreg free
  2787                           
  2788                           ;main.c: 205: printf(",");
  2789  00207A  0EFB               	movlw	low STR_12
  2790  00207C  0100               	movlb	0	; () banked
  2791  00207E  6FD4               	movwf	printf@f& (0+255),b
  2792  002080  0EFF               	movlw	high STR_12
  2793  002082  6FD5               	movwf	(printf@f+1)& (0+255),b
  2794  002084  ECE5  F014         	call	_printf	;wreg free
  2795                           
  2796                           ;main.c: 206: printf("%d",final_number[i]);
  2797  002088  0ED1               	movlw	low (STR_66+2)
  2798  00208A  0100               	movlb	0	; () banked
  2799  00208C  6FD4               	movwf	printf@f& (0+255),b
  2800  00208E  0EFF               	movlw	high (STR_66+2)
  2801  002090  6FD5               	movwf	(printf@f+1)& (0+255),b
  2802  002092  90D8               	bcf	status,0,c
  2803  002094  35BB               	rlcf	_i& (0+255),w,b
  2804  002096  6ED9               	movwf	fsr2l,c
  2805  002098  35BC               	rlcf	(_i+1)& (0+255),w,b
  2806  00209A  6EDA               	movwf	fsr2h,c
  2807  00209C  0E50               	movlw	low _final_number
  2808  00209E  26D9               	addwf	fsr2l,f,c
  2809  0020A0  0E01               	movlw	high _final_number
  2810  0020A2  22DA               	addwfc	fsr2h,f,c
  2811  0020A4  CFDE F0D6          	movff	postinc2,?_printf+2
  2812  0020A8  CFDD F0D7          	movff	postdec2,?_printf+3
  2813  0020AC  ECE5  F014         	call	_printf	;wreg free
  2814                           
  2815                           ;main.c: 207: _delay((unsigned long)((100)*(32000000/4000.0)));
  2816  0020B0  0E05               	movlw	5
  2817  0020B2  0100               	movlb	0	; () banked
  2818  0020B4  6FF5               	movwf	(??_main+1)& (0+255),b
  2819  0020B6  0E0F               	movlw	15
  2820  0020B8  6FF4               	movwf	??_main& (0+255),b
  2821  0020BA  0EF1               	movlw	241
  2822  0020BC                     u6417:
  2823  0020BC  2EE8               	decfsz	wreg,f,c
  2824  0020BE  D7FE               	bra	u6417
  2825  0020C0  2FF4               	decfsz	??_main& (0+255),f,b
  2826  0020C2  D7FC               	bra	u6417
  2827  0020C4  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2828  0020C6  D7FA               	bra	u6417
  2829                           
  2830                           ;main.c: 208: lcdInst(0xC0);;
  2831  0020C8  0EC0               	movlw	192
  2832  0020CA  EC9F  F023         	call	_lcdInst
  2833  0020CE  0100               	movlb	0	; () banked
  2834  0020D0  4BBB               	infsnz	_i& (0+255),f,b
  2835  0020D2  2BBC               	incf	(_i+1)& (0+255),f,b
  2836  0020D4                     l498:
  2837                           
  2838                           ; BSR set to: 0
  2839                           
  2840                           ; BSR set to: 0
  2841  0020D4  51AF               	movf	_assembly_step& (0+255),w,b
  2842  0020D6  5DBB               	subwf	_i& (0+255),w,b
  2843  0020D8  51B0               	movf	(_assembly_step+1)& (0+255),w,b
  2844  0020DA  59BC               	subwfb	(_i+1)& (0+255),w,b
  2845  0020DC  A0D8               	btfss	status,0,c
  2846  0020DE  D794               	goto	l499
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 209: }
  2850                           ;main.c: 210: state = 4;
  2851                           
  2852                           ; BSR set to: 0
  2853  0020E0  0E00               	movlw	0
  2854  0020E2  6FB2               	movwf	(_state+1)& (0+255),b
  2855  0020E4  0E04               	movlw	4
  2856  0020E6  6FB1               	movwf	_state& (0+255),b
  2857  0020E8                     l497:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 211: }
  2861                           ;main.c: 212: if (state == 4){
  2862                           
  2863                           ; BSR set to: 0
  2864  0020E8  0E04               	movlw	4
  2865  0020EA  19B1               	xorwf	_state& (0+255),w,b
  2866  0020EC  11B2               	iorwf	(_state+1)& (0+255),w,b
  2867  0020EE  A4D8               	btfss	status,2,c
  2868  0020F0  D01F               	goto	l501
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 213: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2872  0020F2  0E80               	movlw	128
  2873  0020F4  EC9F  F023         	call	_lcdInst
  2874  0020F8  0E34               	movlw	52
  2875  0020FA  0100               	movlb	0	; () banked
  2876  0020FC  6FF4               	movwf	??_main& (0+255),b
  2877  0020FE  0EF1               	movlw	241
  2878  002100                     u6427:
  2879  002100  2EE8               	decfsz	wreg,f,c
  2880  002102  D7FE               	bra	u6427
  2881  002104  2FF4               	decfsz	??_main& (0+255),f,b
  2882  002106  D7FC               	bra	u6427
  2883  002108  D000               	nop2	
  2884                           
  2885                           ;main.c: 214: printf("Press # to start!");
  2886  00210A  0ECA               	movlw	low STR_14
  2887  00210C  0100               	movlb	0	; () banked
  2888  00210E  6FD4               	movwf	printf@f& (0+255),b
  2889  002110  0EFD               	movlw	high STR_14
  2890  002112  6FD5               	movwf	(printf@f+1)& (0+255),b
  2891  002114  ECE5  F014         	call	_printf	;wreg free
  2892                           
  2893                           ;main.c: 215: _delay((unsigned long)((100)*(32000000/4000.0)));
  2894  002118  0E05               	movlw	5
  2895  00211A  0100               	movlb	0	; () banked
  2896  00211C  6FF5               	movwf	(??_main+1)& (0+255),b
  2897  00211E  0E0F               	movlw	15
  2898  002120  6FF4               	movwf	??_main& (0+255),b
  2899  002122  0EF1               	movlw	241
  2900  002124                     u6437:
  2901  002124  2EE8               	decfsz	wreg,f,c
  2902  002126  D7FE               	bra	u6437
  2903  002128  2FF4               	decfsz	??_main& (0+255),f,b
  2904  00212A  D7FC               	bra	u6437
  2905  00212C  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2906  00212E  D7FA               	bra	u6437
  2907  002130                     l501:
  2908                           
  2909                           ;main.c: 216: }
  2910                           ;main.c: 217: if (state == 5){
  2911  002130  0E05               	movlw	5
  2912  002132  0100               	movlb	0	; () banked
  2913  002134  19B1               	xorwf	_state& (0+255),w,b
  2914  002136  11B2               	iorwf	(_state+1)& (0+255),w,b
  2915  002138  A4D8               	btfss	status,2,c
  2916  00213A  D6D6               	goto	l493
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 223: I2C_init();
  2920  00213C  ECFA  F022         	call	_I2C_init	;wreg free
  2921                           
  2922                           ;main.c: 225: I2C_Master_Start();
  2923  002140  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  2924                           
  2925                           ;main.c: 226: I2C_Master_Write(0b11010000);
  2926  002144  0E00               	movlw	0
  2927  002146  0100               	movlb	0	; () banked
  2928  002148  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2929  00214A  0ED0               	movlw	208
  2930  00214C  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2931  00214E  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  2932                           
  2933                           ;main.c: 227: I2C_Master_Write(0x00);
  2934  002152  0E00               	movlw	0
  2935  002154  0100               	movlb	0	; () banked
  2936  002156  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2937  002158  0E00               	movlw	0
  2938  00215A  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2939  00215C  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  2940                           
  2941                           ;main.c: 228: I2C_Master_Stop();
  2942  002160  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  2943                           
  2944                           ;main.c: 231: I2C_Master_Start();
  2945  002164  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  2946                           
  2947                           ;main.c: 232: I2C_Master_Write(0b11010001);
  2948  002168  0E00               	movlw	0
  2949  00216A  0100               	movlb	0	; () banked
  2950  00216C  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2951  00216E  0ED1               	movlw	209
  2952  002170  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2953  002172  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  2954                           
  2955                           ;main.c: 233: for(i = 0; i < 6; i++){
  2956  002176  0E00               	movlw	0
  2957  002178  0100               	movlb	0	; () banked
  2958  00217A  6FBC               	movwf	(_i+1)& (0+255),b
  2959  00217C  0E00               	movlw	0
  2960  00217E  6FBB               	movwf	_i& (0+255),b
  2961  002180                     l6299:
  2962                           
  2963                           ; BSR set to: 0
  2964  002180  51BC               	movf	(_i+1)& (0+255),w,b
  2965  002182  E112               	bnz	l6309
  2966  002184  0E06               	movlw	6
  2967  002186  5DBB               	subwf	_i& (0+255),w,b
  2968  002188  B0D8               	btfsc	status,0,c
  2969  00218A  D00E               	goto	u5190
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 234: time[i] = I2C_Master_Read(0);
  2973                           
  2974                           ; BSR set to: 0
  2975                           
  2976                           ; BSR set to: 0
  2977  00218C  0E90               	movlw	low _time
  2978  00218E  25BB               	addwf	_i& (0+255),w,b
  2979  002190  6ED9               	movwf	fsr2l,c
  2980  002192  0E00               	movlw	high _time
  2981  002194  21BC               	addwfc	(_i+1)& (0+255),w,b
  2982  002196  6EDA               	movwf	fsr2h,c
  2983  002198  0E00               	movlw	0
  2984  00219A  EC11  F023         	call	_I2C_Master_Read
  2985  00219E  6EDF               	movwf	indf2,c
  2986  0021A0  0100               	movlb	0	; () banked
  2987  0021A2  4BBB               	infsnz	_i& (0+255),f,b
  2988  0021A4  2BBC               	incf	(_i+1)& (0+255),f,b
  2989  0021A6  D7EC               	goto	l6299
  2990  0021A8                     u5190:
  2991  0021A8                     l6309:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 235: }
  2995                           ;main.c: 236: time[6] = I2C_Master_Read(1);
  2996  0021A8  0E01               	movlw	1
  2997  0021AA  EC11  F023         	call	_I2C_Master_Read
  2998  0021AE  0100               	movlb	0	; () banked
  2999  0021B0  6F96               	movwf	(_time+6)& (0+255),b
  3000                           
  3001                           ;main.c: 237: I2C_Master_Stop();
  3002  0021B2  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  3003                           
  3004                           ;main.c: 239: hr_initial = time[2]/16*10+time[2]%16;
  3005  0021B6  C092  F0F4         	movff	_time+2,??_main
  3006  0021BA  0E0F               	movlw	15
  3007  0021BC  0100               	movlb	0	; () banked
  3008  0021BE  17F4               	andwf	??_main& (0+255),f,b
  3009  0021C0  0E00               	movlw	0
  3010  0021C2  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3011  0021C4  0E10               	movlw	16
  3012  0021C6  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3013  0021C8  C092  F0C6         	movff	_time+2,___awdiv@dividend
  3014  0021CC  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3015  0021CE  EC59  F01F         	call	___awdiv	;wreg free
  3016  0021D2  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3017  0021D6  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3018  0021DA  0E00               	movlw	0
  3019  0021DC  0100               	movlb	0	; () banked
  3020  0021DE  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3021  0021E0  0E0A               	movlw	10
  3022  0021E2  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3023  0021E4  EC26  F023         	call	___wmul	;wreg free
  3024  0021E8  0100               	movlb	0	; () banked
  3025  0021EA  51F4               	movf	??_main& (0+255),w,b
  3026  0021EC  25CE               	addwf	?___wmul& (0+255),w,b
  3027  0021EE  0101               	movlb	1	; () banked
  3028  0021F0  6F6E               	movwf	_hr_initial& (0+255),b
  3029  0021F2  0100               	movlb	0	; () banked
  3030  0021F4  0E00               	movlw	0
  3031  0021F6  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3032  0021F8  0101               	movlb	1	; () banked
  3033  0021FA  6F6F               	movwf	(_hr_initial+1)& (0+255),b
  3034                           
  3035                           ; BSR set to: 1
  3036                           ;main.c: 240: min_initial = time[1]/16*10 + time[1]%16;
  3037  0021FC  C091  F0F4         	movff	_time+1,??_main
  3038  002200  0E0F               	movlw	15
  3039  002202  0100               	movlb	0	; () banked
  3040  002204  17F4               	andwf	??_main& (0+255),f,b
  3041  002206  0E00               	movlw	0
  3042  002208  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3043  00220A  0E10               	movlw	16
  3044  00220C  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3045  00220E  C091  F0C6         	movff	_time+1,___awdiv@dividend
  3046  002212  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3047  002214  EC59  F01F         	call	___awdiv	;wreg free
  3048  002218  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3049  00221C  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3050  002220  0E00               	movlw	0
  3051  002222  0100               	movlb	0	; () banked
  3052  002224  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3053  002226  0E0A               	movlw	10
  3054  002228  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3055  00222A  EC26  F023         	call	___wmul	;wreg free
  3056  00222E  0100               	movlb	0	; () banked
  3057  002230  51F4               	movf	??_main& (0+255),w,b
  3058  002232  25CE               	addwf	?___wmul& (0+255),w,b
  3059  002234  0101               	movlb	1	; () banked
  3060  002236  6F6C               	movwf	_min_initial& (0+255),b
  3061  002238  0100               	movlb	0	; () banked
  3062  00223A  0E00               	movlw	0
  3063  00223C  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3064  00223E  0101               	movlb	1	; () banked
  3065  002240  6F6D               	movwf	(_min_initial+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;main.c: 241: sec_initial = time[0]/16*10 +time[0]%16;
  3069  002242  C090  F0F4         	movff	_time,??_main
  3070  002246  0E0F               	movlw	15
  3071  002248  0100               	movlb	0	; () banked
  3072  00224A  17F4               	andwf	??_main& (0+255),f,b
  3073  00224C  0E00               	movlw	0
  3074  00224E  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3075  002250  0E10               	movlw	16
  3076  002252  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3077  002254  C090  F0C6         	movff	_time,___awdiv@dividend
  3078  002258  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3079  00225A  EC59  F01F         	call	___awdiv	;wreg free
  3080  00225E  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3081  002262  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3082  002266  0E00               	movlw	0
  3083  002268  0100               	movlb	0	; () banked
  3084  00226A  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3085  00226C  0E0A               	movlw	10
  3086  00226E  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3087  002270  EC26  F023         	call	___wmul	;wreg free
  3088  002274  0100               	movlb	0	; () banked
  3089  002276  51F4               	movf	??_main& (0+255),w,b
  3090  002278  25CE               	addwf	?___wmul& (0+255),w,b
  3091  00227A  0101               	movlb	1	; () banked
  3092  00227C  6F6A               	movwf	_sec_initial& (0+255),b
  3093  00227E  0100               	movlb	0	; () banked
  3094  002280  0E00               	movlw	0
  3095  002282  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3096  002284  0101               	movlb	1	; () banked
  3097  002286  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  3098                           
  3099                           ; BSR set to: 1
  3100                           ;main.c: 245: initVibTimer();
  3101  002288  ECAB  F023         	call	_initVibTimer	;wreg free
  3102                           
  3103                           ;main.c: 246: mode = 2;
  3104  00228C  0E00               	movlw	0
  3105  00228E  0100               	movlb	0	; () banked
  3106  002290  6FB8               	movwf	(_mode+1)& (0+255),b
  3107  002292  0E02               	movlw	2
  3108  002294  6FB7               	movwf	_mode& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 247: printf("start operation");
  3112  002296  0E51               	movlw	low STR_15
  3113  002298  6FD4               	movwf	printf@f& (0+255),b
  3114  00229A  0EFE               	movlw	high STR_15
  3115  00229C  6FD5               	movwf	(printf@f+1)& (0+255),b
  3116  00229E  ECE5  F014         	call	_printf	;wreg free
  3117                           
  3118                           ;main.c: 251: }
  3119                           ;main.c: 253: }
  3120                           ;main.c: 254: generate_compartment_array(assembly_step);
  3121                           
  3122                           ;main.c: 249: break;
  3123  0022A2  C0AF  F0C6         	movff	_assembly_step,generate_compartment_array@step
  3124  0022A6  C0B0  F0C7         	movff	_assembly_step+1,generate_compartment_array@step+1
  3125  0022AA  EC4C  F01A         	call	_generate_compartment_array	;wreg free
  3126  0022AE                     l492:
  3127                           
  3128                           ;main.c: 255: }
  3129                           ;main.c: 268: if (mode == 2){
  3130  0022AE  0E02               	movlw	2
  3131  0022B0  0100               	movlb	0	; () banked
  3132  0022B2  19B7               	xorwf	_mode& (0+255),w,b
  3133  0022B4  11B8               	iorwf	(_mode+1)& (0+255),w,b
  3134  0022B6  A4D8               	btfss	status,2,c
  3135  0022B8  D5DB               	goto	l486
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 270: (INTCONbits.GIE = 1);
  3139  0022BA  8EF2               	bsf	intcon,7,c	;volatile
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 271: initLCD();
  3143  0022BC  EC02  F022         	call	_initLCD	;wreg free
  3144                           
  3145                           ;main.c: 272: printf("mode 2");
  3146  0022C0  0EA5               	movlw	low STR_16
  3147  0022C2  0100               	movlb	0	; () banked
  3148  0022C4  6FD4               	movwf	printf@f& (0+255),b
  3149  0022C6  0EFF               	movlw	high STR_16
  3150  0022C8  6FD5               	movwf	(printf@f+1)& (0+255),b
  3151  0022CA  ECE5  F014         	call	_printf	;wreg free
  3152                           
  3153                           ;main.c: 273: _delay((unsigned long)((100)*(32000000/4000.0)));
  3154  0022CE  0E05               	movlw	5
  3155  0022D0  0100               	movlb	0	; () banked
  3156  0022D2  6FF5               	movwf	(??_main+1)& (0+255),b
  3157  0022D4  0E0F               	movlw	15
  3158  0022D6  6FF4               	movwf	??_main& (0+255),b
  3159  0022D8  0EF1               	movlw	241
  3160  0022DA                     u6447:
  3161  0022DA  2EE8               	decfsz	wreg,f,c
  3162  0022DC  D7FE               	bra	u6447
  3163  0022DE  2FF4               	decfsz	??_main& (0+255),f,b
  3164  0022E0  D7FC               	bra	u6447
  3165  0022E2  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3166  0022E4  D7FA               	bra	u6447
  3167                           
  3168                           ;main.c: 277: I2C_init();
  3169  0022E6  ECFA  F022         	call	_I2C_init	;wreg free
  3170                           
  3171                           ;main.c: 279: LATCbits.LATC0 = 1;
  3172  0022EA  808B               	bsf	3979,0,c	;volatile
  3173                           
  3174                           ;main.c: 280: TRISCbits.RC0 = 0;
  3175  0022EC  9094               	bcf	3988,0,c	;volatile
  3176                           
  3177                           ;main.c: 282: INT1IE = 0;
  3178  0022EE  96F0               	bcf	intcon3,3,c	;volatile
  3179                           
  3180                           ;main.c: 283: RBIE = 1;
  3181  0022F0  86F2               	bsf	intcon,3,c	;volatile
  3182                           
  3183                           ;main.c: 286: initLCD();
  3184  0022F2  EC02  F022         	call	_initLCD	;wreg free
  3185                           
  3186                           ;main.c: 287: printf("Locating C1");
  3187  0022F6  0E0F               	movlw	low STR_17
  3188  0022F8  0100               	movlb	0	; () banked
  3189  0022FA  6FD4               	movwf	printf@f& (0+255),b
  3190  0022FC  0EFF               	movlw	high STR_17
  3191  0022FE  6FD5               	movwf	(printf@f+1)& (0+255),b
  3192  002300  ECE5  F014         	call	_printf	;wreg free
  3193                           
  3194                           ;main.c: 291: TRISBbits.RB5 = 1;
  3195  002304  8A93               	bsf	3987,5,c	;volatile
  3196                           
  3197                           ;main.c: 292: TRISBbits.RB7 = 1;
  3198  002306  8E93               	bsf	3987,7,c	;volatile
  3199                           
  3200                           ;main.c: 293: TRISBbits.RB6 = 1;
  3201  002308  8C93               	bsf	3987,6,c	;volatile
  3202                           
  3203                           ;main.c: 294: TRISBbits.RB4 = 1;
  3204  00230A  8893               	bsf	3987,4,c	;volatile
  3205                           
  3206                           ;main.c: 297: I2C_sendData(rotate_gear);
  3207  00230C  0100               	movlb	0	; () banked
  3208  00230E  51FF               	movf	_rotate_gear& (0+255),w,b
  3209  002310  EC3A  F023         	call	_I2C_sendData
  3210                           
  3211                           ;main.c: 302: openHandle_data = '1';
  3212  002314  0E31               	movlw	49
  3213  002316  0100               	movlb	0	; () banked
  3214  002318  6FBF               	movwf	_openHandle_data& (0+255),b
  3215                           
  3216                           ;main.c: 303: while(openHandle_data != '0'){
  3217  00231A  D010               	goto	l508
  3218  00231C                     
  3219                           ; BSR set to: 0
  3220                           ;main.c: 304: I2C_Master_Start();
  3221                           
  3222                           ; BSR set to: 0
  3223  00231C  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  3224                           
  3225                           ;main.c: 305: I2C_Master_Write(0b00010001);
  3226  002320  0E00               	movlw	0
  3227  002322  0100               	movlb	0	; () banked
  3228  002324  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3229  002326  0E11               	movlw	17
  3230  002328  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3231  00232A  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  3232                           
  3233                           ;main.c: 306: openHandle_data = I2C_Master_Read(1);
  3234  00232E  0E01               	movlw	1
  3235  002330  EC11  F023         	call	_I2C_Master_Read
  3236  002334  0100               	movlb	0	; () banked
  3237  002336  6FBF               	movwf	_openHandle_data& (0+255),b
  3238                           
  3239                           ;main.c: 307: I2C_Master_Stop();
  3240  002338  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  3241  00233C                     l508:
  3242  00233C  0E30               	movlw	48
  3243  00233E  0100               	movlb	0	; () banked
  3244  002340  19BF               	xorwf	_openHandle_data& (0+255),w,b
  3245  002342  A4D8               	btfss	status,2,c
  3246  002344  D7EB               	goto	l509
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 310: }
  3250                           ;main.c: 311: initLCD();
  3251                           
  3252                           ; BSR set to: 0
  3253  002346  EC02  F022         	call	_initLCD	;wreg free
  3254                           
  3255                           ;main.c: 312: printf("C1 is found");
  3256  00234A  0E33               	movlw	low STR_18
  3257  00234C  0100               	movlb	0	; () banked
  3258  00234E  6FD4               	movwf	printf@f& (0+255),b
  3259  002350  0EFF               	movlw	high STR_18
  3260  002352  6FD5               	movwf	(printf@f+1)& (0+255),b
  3261  002354  ECE5  F014         	call	_printf	;wreg free
  3262                           
  3263                           ;main.c: 313: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3264  002358  0E80               	movlw	128
  3265  00235A  EC9F  F023         	call	_lcdInst
  3266  00235E  0E34               	movlw	52
  3267  002360  0100               	movlb	0	; () banked
  3268  002362  6FF4               	movwf	??_main& (0+255),b
  3269  002364  0EF1               	movlw	241
  3270  002366                     u6457:
  3271  002366  2EE8               	decfsz	wreg,f,c
  3272  002368  D7FE               	bra	u6457
  3273  00236A  2FF4               	decfsz	??_main& (0+255),f,b
  3274  00236C  D7FC               	bra	u6457
  3275  00236E  D000               	nop2	
  3276                           
  3277                           ;main.c: 319: I2C_init();
  3278  002370  ECFA  F022         	call	_I2C_init	;wreg free
  3279                           
  3280                           ;main.c: 320: generate_compartment_array(assembly_step);
  3281  002374  C0AF  F0C6         	movff	_assembly_step,generate_compartment_array@step
  3282  002378  C0B0  F0C7         	movff	_assembly_step+1,generate_compartment_array@step+1
  3283  00237C  EC4C  F01A         	call	_generate_compartment_array	;wreg free
  3284                           
  3285                           ;main.c: 321: int compart_id = 0;
  3286  002380  0E00               	movlw	0
  3287  002382  0100               	movlb	0	; () banked
  3288  002384  6FF9               	movwf	(main@compart_id+1)& (0+255),b
  3289  002386  0E00               	movlw	0
  3290  002388  6FF8               	movwf	main@compart_id& (0+255),b
  3291                           
  3292                           ;main.c: 322: while(NeedToCloseLid != 1 && compart_id < 8){
  3293  00238A  D0BA               	goto	l511
  3294  00238C                     
  3295                           ; BSR set to: 0
  3296                           ;main.c: 323: initLCD();
  3297                           
  3298                           ; BSR set to: 0
  3299  00238C  EC02  F022         	call	_initLCD	;wreg free
  3300                           
  3301                           ;main.c: 324: printf("processing C%d",(compart_id+1));
  3302  002390  0E8E               	movlw	low STR_19
  3303  002392  0100               	movlb	0	; () banked
  3304  002394  6FD4               	movwf	printf@f& (0+255),b
  3305  002396  0EFE               	movlw	high STR_19
  3306  002398  6FD5               	movwf	(printf@f+1)& (0+255),b
  3307  00239A  0E01               	movlw	1
  3308  00239C  25F8               	addwf	main@compart_id& (0+255),w,b
  3309  00239E  6FD6               	movwf	(?_printf+2)& (0+255),b
  3310  0023A0  0E00               	movlw	0
  3311  0023A2  21F9               	addwfc	(main@compart_id+1)& (0+255),w,b
  3312  0023A4  6FD7               	movwf	(?_printf+3)& (0+255),b
  3313  0023A6  ECE5  F014         	call	_printf	;wreg free
  3314                           
  3315                           ;main.c: 325: _delay((unsigned long)((100)*(32000000/4000.0)));
  3316  0023AA  0E05               	movlw	5
  3317  0023AC  0100               	movlb	0	; () banked
  3318  0023AE  6FF5               	movwf	(??_main+1)& (0+255),b
  3319  0023B0  0E0F               	movlw	15
  3320  0023B2  6FF4               	movwf	??_main& (0+255),b
  3321  0023B4  0EF1               	movlw	241
  3322  0023B6                     u6467:
  3323  0023B6  2EE8               	decfsz	wreg,f,c
  3324  0023B8  D7FE               	bra	u6467
  3325  0023BA  2FF4               	decfsz	??_main& (0+255),f,b
  3326  0023BC  D7FC               	bra	u6467
  3327  0023BE  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3328  0023C0  D7FA               	bra	u6467
  3329                           
  3330                           ;main.c: 327: if (compartment_array[compart_id] == 1){
  3331  0023C2  90D8               	bcf	status,0,c
  3332  0023C4  0100               	movlb	0	; () banked
  3333  0023C6  35F8               	rlcf	main@compart_id& (0+255),w,b
  3334  0023C8  6ED9               	movwf	fsr2l,c
  3335  0023CA  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3336  0023CC  6EDA               	movwf	fsr2h,c
  3337  0023CE  0E80               	movlw	low _compartment_array
  3338  0023D0  26D9               	addwf	fsr2l,f,c
  3339  0023D2  0E00               	movlw	high _compartment_array
  3340  0023D4  22DA               	addwfc	fsr2h,f,c
  3341  0023D6  04DE               	decf	postinc2,w,c
  3342  0023D8  10DE               	iorwf	postinc2,w,c
  3343  0023DA  A4D8               	btfss	status,2,c
  3344  0023DC  D05B               	goto	l517
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 328: B_counter = 0;
  3348  0023DE  0E00               	movlw	0
  3349  0023E0  6FAE               	movwf	(_B_counter+1)& (0+255),b
  3350  0023E2  0E00               	movlw	0
  3351  0023E4  6FAD               	movwf	_B_counter& (0+255),b
  3352                           
  3353                           ;main.c: 329: N_counter = 0;
  3354  0023E6  0E00               	movlw	0
  3355  0023E8  6FAA               	movwf	(_N_counter+1)& (0+255),b
  3356  0023EA  0E00               	movlw	0
  3357  0023EC  6FA9               	movwf	_N_counter& (0+255),b
  3358                           
  3359                           ;main.c: 330: S_counter = 0;
  3360  0023EE  0E00               	movlw	0
  3361  0023F0  6FAC               	movwf	(_S_counter+1)& (0+255),b
  3362  0023F2  0E00               	movlw	0
  3363  0023F4  6FAB               	movwf	_S_counter& (0+255),b
  3364                           
  3365                           ;main.c: 331: W_counter = 0;
  3366  0023F6  0E00               	movlw	0
  3367  0023F8  6FA8               	movwf	(_W_counter+1)& (0+255),b
  3368  0023FA  0E00               	movlw	0
  3369  0023FC  6FA7               	movwf	_W_counter& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 333: if (NeedToCloseLid != 1)
  3373  0023FE  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3374  002400  B4D8               	btfsc	status,2,c
  3375  002402  D00F               	goto	l514
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;main.c: 334: Bolt_dispense(B_array[compart_id]);
  3379  002404  90D8               	bcf	status,0,c
  3380  002406  35F8               	rlcf	main@compart_id& (0+255),w,b
  3381  002408  6ED9               	movwf	fsr2l,c
  3382  00240A  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3383  00240C  6EDA               	movwf	fsr2h,c
  3384  00240E  0E30               	movlw	low _B_array
  3385  002410  26D9               	addwf	fsr2l,f,c
  3386  002412  0E01               	movlw	high _B_array
  3387  002414  22DA               	addwfc	fsr2h,f,c
  3388  002416  CFDE F0F0          	movff	postinc2,Bolt_dispense@B_max
  3389  00241A  CFDD F0F1          	movff	postdec2,Bolt_dispense@B_max+1
  3390  00241E  ECCC  F01E         	call	_Bolt_dispense	;wreg free
  3391  002422                     l514:
  3392                           
  3393                           ;main.c: 337: if (NeedToCloseLid != 1)
  3394  002422  0100               	movlb	0	; () banked
  3395  002424  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3396  002426  B4D8               	btfsc	status,2,c
  3397  002428  D00F               	goto	l515
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 338: Nut_dispense(N_array[compart_id]);
  3401  00242A  90D8               	bcf	status,0,c
  3402  00242C  35F8               	rlcf	main@compart_id& (0+255),w,b
  3403  00242E  6ED9               	movwf	fsr2l,c
  3404  002430  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3405  002432  6EDA               	movwf	fsr2h,c
  3406  002434  0E10               	movlw	low _N_array
  3407  002436  26D9               	addwf	fsr2l,f,c
  3408  002438  0E01               	movlw	high _N_array
  3409  00243A  22DA               	addwfc	fsr2h,f,c
  3410  00243C  CFDE F0F0          	movff	postinc2,Nut_dispense@N_max
  3411  002440  CFDD F0F1          	movff	postdec2,Nut_dispense@N_max+1
  3412  002444  EC31  F01E         	call	_Nut_dispense	;wreg free
  3413  002448                     l515:
  3414                           
  3415                           ;main.c: 341: if (NeedToCloseLid != 1)
  3416  002448  0100               	movlb	0	; () banked
  3417  00244A  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3418  00244C  B4D8               	btfsc	status,2,c
  3419  00244E  D00F               	goto	l516
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;main.c: 342: Spacer_dispense(S_array[compart_id]);
  3423  002450  90D8               	bcf	status,0,c
  3424  002452  35F8               	rlcf	main@compart_id& (0+255),w,b
  3425  002454  6ED9               	movwf	fsr2l,c
  3426  002456  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3427  002458  6EDA               	movwf	fsr2h,c
  3428  00245A  0E20               	movlw	low _S_array
  3429  00245C  26D9               	addwf	fsr2l,f,c
  3430  00245E  0E01               	movlw	high _S_array
  3431  002460  22DA               	addwfc	fsr2h,f,c
  3432  002462  CFDE F0F0          	movff	postinc2,Spacer_dispense@S_max
  3433  002466  CFDD F0F1          	movff	postdec2,Spacer_dispense@S_max+1
  3434  00246A  ECE3  F01D         	call	_Spacer_dispense	;wreg free
  3435  00246E                     l516:
  3436                           
  3437                           ;main.c: 344: if (NeedToCloseLid != 1)
  3438  00246E  0100               	movlb	0	; () banked
  3439  002470  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3440  002472  B4D8               	btfsc	status,2,c
  3441  002474  D00F               	goto	l517
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;main.c: 345: Washer_dispense(W_array[compart_id]);
  3445  002476  90D8               	bcf	status,0,c
  3446  002478  35F8               	rlcf	main@compart_id& (0+255),w,b
  3447  00247A  6ED9               	movwf	fsr2l,c
  3448  00247C  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3449  00247E  6EDA               	movwf	fsr2h,c
  3450  002480  0E00               	movlw	low _W_array
  3451  002482  26D9               	addwf	fsr2l,f,c
  3452  002484  0E01               	movlw	high _W_array
  3453  002486  22DA               	addwfc	fsr2h,f,c
  3454  002488  CFDE F0F0          	movff	postinc2,Washer_dispense@W_max
  3455  00248C  CFDD F0F1          	movff	postdec2,Washer_dispense@W_max+1
  3456  002490  EC95  F01D         	call	_Washer_dispense	;wreg free
  3457  002494                     l517:
  3458                           
  3459                           ;main.c: 347: }
  3460                           ;main.c: 349: printf("done C%d",compart_id);
  3461  002494  0E7D               	movlw	low STR_20
  3462  002496  0100               	movlb	0	; () banked
  3463  002498  6FD4               	movwf	printf@f& (0+255),b
  3464  00249A  0EFF               	movlw	high STR_20
  3465  00249C  6FD5               	movwf	(printf@f+1)& (0+255),b
  3466  00249E  C0F8  F0D6         	movff	main@compart_id,?_printf+2
  3467  0024A2  C0F9  F0D7         	movff	main@compart_id+1,?_printf+3
  3468  0024A6  ECE5  F014         	call	_printf	;wreg free
  3469                           
  3470                           ;main.c: 350: if (NeedToCloseLid != 1 && compart_id < 7){
  3471  0024AA  0100               	movlb	0	; () banked
  3472  0024AC  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3473  0024AE  B4D8               	btfsc	status,2,c
  3474  0024B0  D025               	goto	u5300
  3475                           
  3476                           ; BSR set to: 0
  3477  0024B2  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3478  0024B4  D006               	goto	u5280
  3479  0024B6  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3480  0024B8  E121               	bnz	l6419
  3481  0024BA  0E07               	movlw	7
  3482  0024BC  5DF8               	subwf	main@compart_id& (0+255),w,b
  3483  0024BE  B0D8               	btfsc	status,0,c
  3484  0024C0  D01D               	goto	u5300
  3485  0024C2                     u5280:
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;main.c: 351: I2C_sendData(rotate_1compartment);
  3489  0024C2  51FE               	movf	_rotate_1compartment& (0+255),w,b
  3490  0024C4  EC3A  F023         	call	_I2C_sendData
  3491                           
  3492                           ;main.c: 352: while(NeedToCloseLid != 1){
  3493  0024C8  D015               	goto	l521
  3494  0024CA                     
  3495                           ;main.c: 353: I2C_Master_Start();
  3496  0024CA  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  3497                           
  3498                           ;main.c: 354: I2C_Master_Write(0b00010001);
  3499  0024CE  0E00               	movlw	0
  3500  0024D0  0100               	movlb	0	; () banked
  3501  0024D2  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3502  0024D4  0E11               	movlw	17
  3503  0024D6  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3504  0024D8  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  3505                           
  3506                           ;main.c: 355: openHandle_data = I2C_Master_Read(1);
  3507  0024DC  0E01               	movlw	1
  3508  0024DE  EC11  F023         	call	_I2C_Master_Read
  3509  0024E2  0100               	movlb	0	; () banked
  3510  0024E4  6FBF               	movwf	_openHandle_data& (0+255),b
  3511                           
  3512                           ;main.c: 356: I2C_Master_Stop();
  3513  0024E6  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  3514                           
  3515                           ;main.c: 357: if (openHandle_data == '1'){
  3516  0024EA  0E31               	movlw	49
  3517  0024EC  0100               	movlb	0	; () banked
  3518  0024EE  19BF               	xorwf	_openHandle_data& (0+255),w,b
  3519  0024F0  B4D8               	btfsc	status,2,c
  3520  0024F2  D004               	goto	u5300
  3521  0024F4                     l521:
  3522                           
  3523                           ; BSR set to: 0
  3524                           
  3525                           ; BSR set to: 0
  3526  0024F4  0100               	movlb	0	; () banked
  3527  0024F6  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3528  0024F8  A4D8               	btfss	status,2,c
  3529  0024FA  D7E7               	goto	l520
  3530  0024FC                     u5300:
  3531  0024FC                     l6419:
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;main.c: 360: }
  3535                           ;main.c: 361: }
  3536                           ;main.c: 362: }
  3537                           ;main.c: 363: compart_id ++;
  3538  0024FC  4BF8               	infsnz	main@compart_id& (0+255),f,b
  3539  0024FE  2BF9               	incf	(main@compart_id+1)& (0+255),f,b
  3540  002500                     l511:
  3541                           
  3542                           ; BSR set to: 0
  3543                           
  3544                           ; BSR set to: 0
  3545  002500  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  3546  002502  B4D8               	btfsc	status,2,c
  3547  002504  D008               	goto	u5320
  3548                           
  3549                           ; BSR set to: 0
  3550  002506  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3551  002508  D741               	goto	l512
  3552  00250A  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3553  00250C  E104               	bnz	l6425
  3554  00250E  0E08               	movlw	8
  3555  002510  5DF8               	subwf	main@compart_id& (0+255),w,b
  3556  002512  A0D8               	btfss	status,0,c
  3557  002514  D73B               	goto	l512
  3558  002516                     u5320:
  3559  002516                     l6425:
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;main.c: 364: }
  3563                           ;main.c: 370: I2C_sendData(close_handle);
  3564  002516  51FC               	movf	_close_handle& (0+255),w,b
  3565  002518  EC3A  F023         	call	_I2C_sendData
  3566                           
  3567                           ;main.c: 373: _delay((unsigned long)((2500)*(32000000/4000.0)));
  3568  00251C  0E66               	movlw	102
  3569  00251E  0100               	movlb	0	; () banked
  3570  002520  6FF5               	movwf	(??_main+1)& (0+255),b
  3571  002522  0E76               	movlw	118
  3572  002524  6FF4               	movwf	??_main& (0+255),b
  3573  002526  0EC1               	movlw	193
  3574  002528                     u6477:
  3575  002528  2EE8               	decfsz	wreg,f,c
  3576  00252A  D7FE               	bra	u6477
  3577  00252C  2FF4               	decfsz	??_main& (0+255),f,b
  3578  00252E  D7FC               	bra	u6477
  3579  002530  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3580  002532  D7FA               	bra	u6477
  3581                           
  3582                           ;main.c: 377: I2C_sendData(servo_ramp);
  3583  002534  0100               	movlb	0	; () banked
  3584  002536  51FD               	movf	_servo_ramp& (0+255),w,b
  3585  002538  EC3A  F023         	call	_I2C_sendData
  3586                           
  3587                           ;main.c: 380: _delay((unsigned long)((100)*(32000000/4000.0)));
  3588  00253C  0E05               	movlw	5
  3589  00253E  0100               	movlb	0	; () banked
  3590  002540  6FF5               	movwf	(??_main+1)& (0+255),b
  3591  002542  0E0F               	movlw	15
  3592  002544  6FF4               	movwf	??_main& (0+255),b
  3593  002546  0EF1               	movlw	241
  3594  002548                     u6487:
  3595  002548  2EE8               	decfsz	wreg,f,c
  3596  00254A  D7FE               	bra	u6487
  3597  00254C  2FF4               	decfsz	??_main& (0+255),f,b
  3598  00254E  D7FC               	bra	u6487
  3599  002550  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3600  002552  D7FA               	bra	u6487
  3601                           
  3602                           ;main.c: 394: if (EndOfProgram != 1){
  3603  002554  0100               	movlb	0	; () banked
  3604  002556  05BE               	decf	_EndOfProgram& (0+255),w,b
  3605  002558  B4D8               	btfsc	status,2,c
  3606  00255A  D006               	goto	l526
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 395: Nut_remain(spacingTime);
  3610  00255C  C0FA  F0F0         	movff	_spacingTime,Nut_remain@time
  3611  002560  C0FB  F0F1         	movff	_spacingTime+1,Nut_remain@time+1
  3612  002564  ECDD  F01C         	call	_Nut_remain	;wreg free
  3613  002568                     l526:
  3614                           
  3615                           ;main.c: 397: }
  3616                           ;main.c: 398: if (EndOfProgram != 1){
  3617  002568  0100               	movlb	0	; () banked
  3618  00256A  05BE               	decf	_EndOfProgram& (0+255),w,b
  3619  00256C  B4D8               	btfsc	status,2,c
  3620  00256E  D006               	goto	l527
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 399: Washer_remain(spacingTime);
  3624  002570  C0FA  F0F0         	movff	_spacingTime,Washer_remain@time
  3625  002574  C0FB  F0F1         	movff	_spacingTime+1,Washer_remain@time+1
  3626  002578  EC25  F01C         	call	_Washer_remain	;wreg free
  3627  00257C                     l527:
  3628                           
  3629                           ;main.c: 400: }
  3630                           ;main.c: 401: if (EndOfProgram != 1){
  3631  00257C  0100               	movlb	0	; () banked
  3632  00257E  05BE               	decf	_EndOfProgram& (0+255),w,b
  3633  002580  B4D8               	btfsc	status,2,c
  3634  002582  D006               	goto	l528
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;main.c: 402: Spacer_remain(spacingTime);
  3638  002584  C0FA  F0F0         	movff	_spacingTime,Spacer_remain@time
  3639  002588  C0FB  F0F1         	movff	_spacingTime+1,Spacer_remain@time+1
  3640  00258C  EC81  F01C         	call	_Spacer_remain	;wreg free
  3641  002590                     l528:
  3642                           
  3643                           ;main.c: 403: }
  3644                           ;main.c: 404: if (EndOfProgram != 1){
  3645  002590  0100               	movlb	0	; () banked
  3646  002592  05BE               	decf	_EndOfProgram& (0+255),w,b
  3647  002594  B4D8               	btfsc	status,2,c
  3648  002596  D006               	goto	l529
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 405: Bolt_remain(spacingTime);
  3652  002598  C0FA  F0F0         	movff	_spacingTime,Bolt_remain@time
  3653  00259C  C0FB  F0F1         	movff	_spacingTime+1,Bolt_remain@time+1
  3654  0025A0  EC39  F01D         	call	_Bolt_remain	;wreg free
  3655  0025A4                     l529:
  3656                           
  3657                           ;main.c: 406: }
  3658                           ;main.c: 419: initLCD();
  3659  0025A4  EC02  F022         	call	_initLCD	;wreg free
  3660                           
  3661                           ;main.c: 420: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3662  0025A8  0E80               	movlw	128
  3663  0025AA  EC9F  F023         	call	_lcdInst
  3664  0025AE  0E34               	movlw	52
  3665  0025B0  0100               	movlb	0	; () banked
  3666  0025B2  6FF4               	movwf	??_main& (0+255),b
  3667  0025B4  0EF1               	movlw	241
  3668  0025B6                     u6497:
  3669  0025B6  2EE8               	decfsz	wreg,f,c
  3670  0025B8  D7FE               	bra	u6497
  3671  0025BA  2FF4               	decfsz	??_main& (0+255),f,b
  3672  0025BC  D7FC               	bra	u6497
  3673  0025BE  D000               	nop2	
  3674                           
  3675                           ;main.c: 421: printf("Terminate!");
  3676  0025C0  0E4B               	movlw	low STR_21
  3677  0025C2  0100               	movlb	0	; () banked
  3678  0025C4  6FD4               	movwf	printf@f& (0+255),b
  3679  0025C6  0EFF               	movlw	high STR_21
  3680  0025C8  6FD5               	movwf	(printf@f+1)& (0+255),b
  3681  0025CA  ECE5  F014         	call	_printf	;wreg free
  3682                           
  3683                           ;main.c: 422: _delay((unsigned long)((500)*(32000000/4000.0)));
  3684  0025CE  0E15               	movlw	21
  3685  0025D0  0100               	movlb	0	; () banked
  3686  0025D2  6FF5               	movwf	(??_main+1)& (0+255),b
  3687  0025D4  0E4B               	movlw	75
  3688  0025D6  6FF4               	movwf	??_main& (0+255),b
  3689  0025D8  0EBE               	movlw	190
  3690  0025DA                     u6507:
  3691  0025DA  2EE8               	decfsz	wreg,f,c
  3692  0025DC  D7FE               	bra	u6507
  3693  0025DE  2FF4               	decfsz	??_main& (0+255),f,b
  3694  0025E0  D7FC               	bra	u6507
  3695  0025E2  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3696  0025E4  D7FA               	bra	u6507
  3697  0025E6  F000               	nop	
  3698                           
  3699                           ;main.c: 425: I2C_init();
  3700  0025E8  ECFA  F022         	call	_I2C_init	;wreg free
  3701                           
  3702                           ;main.c: 427: I2C_Master_Start();
  3703  0025EC  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  3704                           
  3705                           ;main.c: 428: I2C_Master_Write(0b11010000);
  3706  0025F0  0E00               	movlw	0
  3707  0025F2  0100               	movlb	0	; () banked
  3708  0025F4  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3709  0025F6  0ED0               	movlw	208
  3710  0025F8  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3711  0025FA  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  3712                           
  3713                           ;main.c: 429: I2C_Master_Write(0x00);
  3714  0025FE  0E00               	movlw	0
  3715  002600  0100               	movlb	0	; () banked
  3716  002602  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3717  002604  0E00               	movlw	0
  3718  002606  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3719  002608  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  3720                           
  3721                           ;main.c: 430: I2C_Master_Stop();
  3722  00260C  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  3723                           
  3724                           ;main.c: 433: I2C_Master_Start();
  3725  002610  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  3726                           
  3727                           ;main.c: 434: I2C_Master_Write(0b11010001);
  3728  002614  0E00               	movlw	0
  3729  002616  0100               	movlb	0	; () banked
  3730  002618  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3731  00261A  0ED1               	movlw	209
  3732  00261C  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3733  00261E  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  3734                           
  3735                           ;main.c: 435: for(i = 0; i < 6; i++){
  3736  002622  0E00               	movlw	0
  3737  002624  0100               	movlb	0	; () banked
  3738  002626  6FBC               	movwf	(_i+1)& (0+255),b
  3739  002628  0E00               	movlw	0
  3740  00262A  6FBB               	movwf	_i& (0+255),b
  3741  00262C                     l6471:
  3742                           
  3743                           ; BSR set to: 0
  3744  00262C  51BC               	movf	(_i+1)& (0+255),w,b
  3745  00262E  E112               	bnz	l6481
  3746  002630  0E06               	movlw	6
  3747  002632  5DBB               	subwf	_i& (0+255),w,b
  3748  002634  B0D8               	btfsc	status,0,c
  3749  002636  D00E               	goto	u5380
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;main.c: 436: time[i] = I2C_Master_Read(0);
  3753                           
  3754                           ; BSR set to: 0
  3755                           
  3756                           ; BSR set to: 0
  3757  002638  0E90               	movlw	low _time
  3758  00263A  25BB               	addwf	_i& (0+255),w,b
  3759  00263C  6ED9               	movwf	fsr2l,c
  3760  00263E  0E00               	movlw	high _time
  3761  002640  21BC               	addwfc	(_i+1)& (0+255),w,b
  3762  002642  6EDA               	movwf	fsr2h,c
  3763  002644  0E00               	movlw	0
  3764  002646  EC11  F023         	call	_I2C_Master_Read
  3765  00264A  6EDF               	movwf	indf2,c
  3766  00264C  0100               	movlb	0	; () banked
  3767  00264E  4BBB               	infsnz	_i& (0+255),f,b
  3768  002650  2BBC               	incf	(_i+1)& (0+255),f,b
  3769  002652  D7EC               	goto	l6471
  3770  002654                     u5380:
  3771  002654                     l6481:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 437: }
  3775                           ;main.c: 438: time[6] = I2C_Master_Read(1);
  3776  002654  0E01               	movlw	1
  3777  002656  EC11  F023         	call	_I2C_Master_Read
  3778  00265A  0100               	movlb	0	; () banked
  3779  00265C  6F96               	movwf	(_time+6)& (0+255),b
  3780                           
  3781                           ;main.c: 439: I2C_Master_Stop();
  3782  00265E  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  3783                           
  3784                           ;main.c: 441: hr_final = time[2]/16*10+time[2]%16;
  3785  002662  C092  F0F4         	movff	_time+2,??_main
  3786  002666  0E0F               	movlw	15
  3787  002668  0100               	movlb	0	; () banked
  3788  00266A  17F4               	andwf	??_main& (0+255),f,b
  3789  00266C  0E00               	movlw	0
  3790  00266E  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3791  002670  0E10               	movlw	16
  3792  002672  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3793  002674  C092  F0C6         	movff	_time+2,___awdiv@dividend
  3794  002678  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3795  00267A  EC59  F01F         	call	___awdiv	;wreg free
  3796  00267E  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3797  002682  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3798  002686  0E00               	movlw	0
  3799  002688  0100               	movlb	0	; () banked
  3800  00268A  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3801  00268C  0E0A               	movlw	10
  3802  00268E  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3803  002690  EC26  F023         	call	___wmul	;wreg free
  3804  002694  0100               	movlb	0	; () banked
  3805  002696  51F4               	movf	??_main& (0+255),w,b
  3806  002698  25CE               	addwf	?___wmul& (0+255),w,b
  3807  00269A  0101               	movlb	1	; () banked
  3808  00269C  6F66               	movwf	_hr_final& (0+255),b
  3809  00269E  0100               	movlb	0	; () banked
  3810  0026A0  0E00               	movlw	0
  3811  0026A2  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3812  0026A4  0101               	movlb	1	; () banked
  3813  0026A6  6F67               	movwf	(_hr_final+1)& (0+255),b
  3814                           
  3815                           ; BSR set to: 1
  3816                           ;main.c: 442: min_final = time[1]/16*10 + time[1]%16;
  3817  0026A8  C091  F0F4         	movff	_time+1,??_main
  3818  0026AC  0E0F               	movlw	15
  3819  0026AE  0100               	movlb	0	; () banked
  3820  0026B0  17F4               	andwf	??_main& (0+255),f,b
  3821  0026B2  0E00               	movlw	0
  3822  0026B4  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3823  0026B6  0E10               	movlw	16
  3824  0026B8  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3825  0026BA  C091  F0C6         	movff	_time+1,___awdiv@dividend
  3826  0026BE  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3827  0026C0  EC59  F01F         	call	___awdiv	;wreg free
  3828  0026C4  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3829  0026C8  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3830  0026CC  0E00               	movlw	0
  3831  0026CE  0100               	movlb	0	; () banked
  3832  0026D0  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3833  0026D2  0E0A               	movlw	10
  3834  0026D4  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3835  0026D6  EC26  F023         	call	___wmul	;wreg free
  3836  0026DA  0100               	movlb	0	; () banked
  3837  0026DC  51F4               	movf	??_main& (0+255),w,b
  3838  0026DE  25CE               	addwf	?___wmul& (0+255),w,b
  3839  0026E0  0101               	movlb	1	; () banked
  3840  0026E2  6F64               	movwf	_min_final& (0+255),b
  3841  0026E4  0100               	movlb	0	; () banked
  3842  0026E6  0E00               	movlw	0
  3843  0026E8  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3844  0026EA  0101               	movlb	1	; () banked
  3845  0026EC  6F65               	movwf	(_min_final+1)& (0+255),b
  3846                           
  3847                           ; BSR set to: 1
  3848                           ;main.c: 443: sec_final = time[0]/16*10 + time[0]%16;
  3849  0026EE  C090  F0F4         	movff	_time,??_main
  3850  0026F2  0E0F               	movlw	15
  3851  0026F4  0100               	movlb	0	; () banked
  3852  0026F6  17F4               	andwf	??_main& (0+255),f,b
  3853  0026F8  0E00               	movlw	0
  3854  0026FA  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  3855  0026FC  0E10               	movlw	16
  3856  0026FE  6FC8               	movwf	___awdiv@divisor& (0+255),b
  3857  002700  C090  F0C6         	movff	_time,___awdiv@dividend
  3858  002704  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  3859  002706  EC59  F01F         	call	___awdiv	;wreg free
  3860  00270A  C0C6  F0CE         	movff	?___awdiv,___wmul@multiplier
  3861  00270E  C0C7  F0CF         	movff	?___awdiv+1,___wmul@multiplier+1
  3862  002712  0E00               	movlw	0
  3863  002714  0100               	movlb	0	; () banked
  3864  002716  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3865  002718  0E0A               	movlw	10
  3866  00271A  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  3867  00271C  EC26  F023         	call	___wmul	;wreg free
  3868  002720  0100               	movlb	0	; () banked
  3869  002722  51F4               	movf	??_main& (0+255),w,b
  3870  002724  25CE               	addwf	?___wmul& (0+255),w,b
  3871  002726  0101               	movlb	1	; () banked
  3872  002728  6F62               	movwf	_sec_final& (0+255),b
  3873  00272A  0100               	movlb	0	; () banked
  3874  00272C  0E00               	movlw	0
  3875  00272E  21CF               	addwfc	(?___wmul+1)& (0+255),w,b
  3876  002730  0101               	movlb	1	; () banked
  3877  002732  6F63               	movwf	(_sec_final+1)& (0+255),b
  3878                           
  3879                           ; BSR set to: 1
  3880                           ;main.c: 448: initLCD();
  3881  002734  EC02  F022         	call	_initLCD	;wreg free
  3882                           
  3883                           ;main.c: 449: printf("Terminate!");
  3884  002738  0E4B               	movlw	low STR_21
  3885  00273A  0100               	movlb	0	; () banked
  3886  00273C  6FD4               	movwf	printf@f& (0+255),b
  3887  00273E  0EFF               	movlw	high STR_21
  3888  002740  6FD5               	movwf	(printf@f+1)& (0+255),b
  3889  002742  ECE5  F014         	call	_printf	;wreg free
  3890                           
  3891                           ;main.c: 450: _delay((unsigned long)((500)*(32000000/4000.0)));
  3892  002746  0E15               	movlw	21
  3893  002748  0100               	movlb	0	; () banked
  3894  00274A  6FF5               	movwf	(??_main+1)& (0+255),b
  3895  00274C  0E4B               	movlw	75
  3896  00274E  6FF4               	movwf	??_main& (0+255),b
  3897  002750  0EBE               	movlw	190
  3898  002752                     u6517:
  3899  002752  2EE8               	decfsz	wreg,f,c
  3900  002754  D7FE               	bra	u6517
  3901  002756  2FF4               	decfsz	??_main& (0+255),f,b
  3902  002758  D7FC               	bra	u6517
  3903  00275A  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3904  00275C  D7FA               	bra	u6517
  3905  00275E  F000               	nop	
  3906                           
  3907                           ;main.c: 451: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3908  002760  0E80               	movlw	128
  3909  002762  EC9F  F023         	call	_lcdInst
  3910  002766  0E34               	movlw	52
  3911  002768  0100               	movlb	0	; () banked
  3912  00276A  6FF4               	movwf	??_main& (0+255),b
  3913  00276C  0EF1               	movlw	241
  3914  00276E                     u6527:
  3915  00276E  2EE8               	decfsz	wreg,f,c
  3916  002770  D7FE               	bra	u6527
  3917  002772  2FF4               	decfsz	??_main& (0+255),f,b
  3918  002774  D7FC               	bra	u6527
  3919  002776  D000               	nop2	
  3920                           
  3921                           ;main.c: 458: printf("Bolt_remain:%d",B_remain);
  3922  002778  0E7F               	movlw	low STR_23
  3923  00277A  0100               	movlb	0	; () banked
  3924  00277C  6FD4               	movwf	printf@f& (0+255),b
  3925  00277E  0EFE               	movlw	high STR_23
  3926  002780  6FD5               	movwf	(printf@f+1)& (0+255),b
  3927  002782  C0A5  F0D6         	movff	_B_remain,?_printf+2
  3928  002786  C0A6  F0D7         	movff	_B_remain+1,?_printf+3
  3929  00278A  ECE5  F014         	call	_printf	;wreg free
  3930                           
  3931                           ;main.c: 459: _delay((unsigned long)((300)*(32000000/4000.0)));
  3932  00278E  0E0D               	movlw	13
  3933  002790  0100               	movlb	0	; () banked
  3934  002792  6FF5               	movwf	(??_main+1)& (0+255),b
  3935  002794  0E2D               	movlw	45
  3936  002796  6FF4               	movwf	??_main& (0+255),b
  3937  002798  0ED7               	movlw	215
  3938  00279A                     u6537:
  3939  00279A  2EE8               	decfsz	wreg,f,c
  3940  00279C  D7FE               	bra	u6537
  3941  00279E  2FF4               	decfsz	??_main& (0+255),f,b
  3942  0027A0  D7FC               	bra	u6537
  3943  0027A2  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3944  0027A4  D7FA               	bra	u6537
  3945  0027A6  D000               	nop2	
  3946                           
  3947                           ;main.c: 460: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3948  0027A8  0E01               	movlw	1
  3949  0027AA  EC9F  F023         	call	_lcdInst
  3950  0027AE  0E9C               	movlw	156
  3951  0027B0  0100               	movlb	0	; () banked
  3952  0027B2  6FF4               	movwf	??_main& (0+255),b
  3953  0027B4  0ED7               	movlw	215
  3954  0027B6                     u6547:
  3955  0027B6  2EE8               	decfsz	wreg,f,c
  3956  0027B8  D7FE               	bra	u6547
  3957  0027BA  2FF4               	decfsz	??_main& (0+255),f,b
  3958  0027BC  D7FC               	bra	u6547
  3959                           
  3960                           ;main.c: 461: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3961  0027BE  0E80               	movlw	128
  3962  0027C0  EC9F  F023         	call	_lcdInst
  3963  0027C4  0E34               	movlw	52
  3964  0027C6  0100               	movlb	0	; () banked
  3965  0027C8  6FF4               	movwf	??_main& (0+255),b
  3966  0027CA  0EF1               	movlw	241
  3967  0027CC                     u6557:
  3968  0027CC  2EE8               	decfsz	wreg,f,c
  3969  0027CE  D7FE               	bra	u6557
  3970  0027D0  2FF4               	decfsz	??_main& (0+255),f,b
  3971  0027D2  D7FC               	bra	u6557
  3972  0027D4  D000               	nop2	
  3973                           
  3974                           ;main.c: 462: printf("Nut_remain:%d",N_remain);
  3975  0027D6  0EE6               	movlw	low STR_24
  3976  0027D8  0100               	movlb	0	; () banked
  3977  0027DA  6FD4               	movwf	printf@f& (0+255),b
  3978  0027DC  0EFE               	movlw	high STR_24
  3979  0027DE  6FD5               	movwf	(printf@f+1)& (0+255),b
  3980  0027E0  C0A3  F0D6         	movff	_N_remain,?_printf+2
  3981  0027E4  C0A4  F0D7         	movff	_N_remain+1,?_printf+3
  3982  0027E8  ECE5  F014         	call	_printf	;wreg free
  3983                           
  3984                           ;main.c: 463: _delay((unsigned long)((300)*(32000000/4000.0)));
  3985  0027EC  0E0D               	movlw	13
  3986  0027EE  0100               	movlb	0	; () banked
  3987  0027F0  6FF5               	movwf	(??_main+1)& (0+255),b
  3988  0027F2  0E2D               	movlw	45
  3989  0027F4  6FF4               	movwf	??_main& (0+255),b
  3990  0027F6  0ED7               	movlw	215
  3991  0027F8                     u6567:
  3992  0027F8  2EE8               	decfsz	wreg,f,c
  3993  0027FA  D7FE               	bra	u6567
  3994  0027FC  2FF4               	decfsz	??_main& (0+255),f,b
  3995  0027FE  D7FC               	bra	u6567
  3996  002800  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  3997  002802  D7FA               	bra	u6567
  3998  002804  D000               	nop2	
  3999                           
  4000                           ;main.c: 464: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4001  002806  0E01               	movlw	1
  4002  002808  EC9F  F023         	call	_lcdInst
  4003  00280C  0E9C               	movlw	156
  4004  00280E  0100               	movlb	0	; () banked
  4005  002810  6FF4               	movwf	??_main& (0+255),b
  4006  002812  0ED7               	movlw	215
  4007  002814                     u6577:
  4008  002814  2EE8               	decfsz	wreg,f,c
  4009  002816  D7FE               	bra	u6577
  4010  002818  2FF4               	decfsz	??_main& (0+255),f,b
  4011  00281A  D7FC               	bra	u6577
  4012                           
  4013                           ;main.c: 465: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4014  00281C  0E80               	movlw	128
  4015  00281E  EC9F  F023         	call	_lcdInst
  4016  002822  0E34               	movlw	52
  4017  002824  0100               	movlb	0	; () banked
  4018  002826  6FF4               	movwf	??_main& (0+255),b
  4019  002828  0EF1               	movlw	241
  4020  00282A                     u6587:
  4021  00282A  2EE8               	decfsz	wreg,f,c
  4022  00282C  D7FE               	bra	u6587
  4023  00282E  2FF4               	decfsz	??_main& (0+255),f,b
  4024  002830  D7FC               	bra	u6587
  4025  002832  D000               	nop2	
  4026                           
  4027                           ;main.c: 466: printf("Spacer_remain:%d",S_remain);
  4028  002834  0EED               	movlw	low STR_25
  4029  002836  0100               	movlb	0	; () banked
  4030  002838  6FD4               	movwf	printf@f& (0+255),b
  4031  00283A  0EFD               	movlw	high STR_25
  4032  00283C  6FD5               	movwf	(printf@f+1)& (0+255),b
  4033  00283E  C0A1  F0D6         	movff	_S_remain,?_printf+2
  4034  002842  C0A2  F0D7         	movff	_S_remain+1,?_printf+3
  4035  002846  ECE5  F014         	call	_printf	;wreg free
  4036                           
  4037                           ;main.c: 467: _delay((unsigned long)((300)*(32000000/4000.0)));
  4038  00284A  0E0D               	movlw	13
  4039  00284C  0100               	movlb	0	; () banked
  4040  00284E  6FF5               	movwf	(??_main+1)& (0+255),b
  4041  002850  0E2D               	movlw	45
  4042  002852  6FF4               	movwf	??_main& (0+255),b
  4043  002854  0ED7               	movlw	215
  4044  002856                     u6597:
  4045  002856  2EE8               	decfsz	wreg,f,c
  4046  002858  D7FE               	bra	u6597
  4047  00285A  2FF4               	decfsz	??_main& (0+255),f,b
  4048  00285C  D7FC               	bra	u6597
  4049  00285E  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  4050  002860  D7FA               	bra	u6597
  4051  002862  D000               	nop2	
  4052                           
  4053                           ;main.c: 468: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4054  002864  0E01               	movlw	1
  4055  002866  EC9F  F023         	call	_lcdInst
  4056  00286A  0E9C               	movlw	156
  4057  00286C  0100               	movlb	0	; () banked
  4058  00286E  6FF4               	movwf	??_main& (0+255),b
  4059  002870  0ED7               	movlw	215
  4060  002872                     u6607:
  4061  002872  2EE8               	decfsz	wreg,f,c
  4062  002874  D7FE               	bra	u6607
  4063  002876  2FF4               	decfsz	??_main& (0+255),f,b
  4064  002878  D7FC               	bra	u6607
  4065                           
  4066                           ;main.c: 469: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4067  00287A  0E80               	movlw	128
  4068  00287C  EC9F  F023         	call	_lcdInst
  4069  002880  0E34               	movlw	52
  4070  002882  0100               	movlb	0	; () banked
  4071  002884  6FF4               	movwf	??_main& (0+255),b
  4072  002886  0EF1               	movlw	241
  4073  002888                     u6617:
  4074  002888  2EE8               	decfsz	wreg,f,c
  4075  00288A  D7FE               	bra	u6617
  4076  00288C  2FF4               	decfsz	??_main& (0+255),f,b
  4077  00288E  D7FC               	bra	u6617
  4078  002890  D000               	nop2	
  4079                           
  4080                           ;main.c: 470: printf("Washer_remain:%d",W_remain);
  4081  002892  0EFE               	movlw	low STR_26
  4082  002894  0100               	movlb	0	; () banked
  4083  002896  6FD4               	movwf	printf@f& (0+255),b
  4084  002898  0EFD               	movlw	high STR_26
  4085  00289A  6FD5               	movwf	(printf@f+1)& (0+255),b
  4086  00289C  C09F  F0D6         	movff	_W_remain,?_printf+2
  4087  0028A0  C0A0  F0D7         	movff	_W_remain+1,?_printf+3
  4088  0028A4  ECE5  F014         	call	_printf	;wreg free
  4089                           
  4090                           ;main.c: 471: _delay((unsigned long)((300)*(32000000/4000.0)));
  4091  0028A8  0E0D               	movlw	13
  4092  0028AA  0100               	movlb	0	; () banked
  4093  0028AC  6FF5               	movwf	(??_main+1)& (0+255),b
  4094  0028AE  0E2D               	movlw	45
  4095  0028B0  6FF4               	movwf	??_main& (0+255),b
  4096  0028B2  0ED7               	movlw	215
  4097  0028B4                     u6627:
  4098  0028B4  2EE8               	decfsz	wreg,f,c
  4099  0028B6  D7FE               	bra	u6627
  4100  0028B8  2FF4               	decfsz	??_main& (0+255),f,b
  4101  0028BA  D7FC               	bra	u6627
  4102  0028BC  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  4103  0028BE  D7FA               	bra	u6627
  4104  0028C0  D000               	nop2	
  4105                           
  4106                           ;main.c: 472: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4107  0028C2  0E01               	movlw	1
  4108  0028C4  EC9F  F023         	call	_lcdInst
  4109  0028C8  0E9C               	movlw	156
  4110  0028CA  0100               	movlb	0	; () banked
  4111  0028CC  6FF4               	movwf	??_main& (0+255),b
  4112  0028CE  0ED7               	movlw	215
  4113  0028D0                     u6637:
  4114  0028D0  2EE8               	decfsz	wreg,f,c
  4115  0028D2  D7FE               	bra	u6637
  4116  0028D4  2FF4               	decfsz	??_main& (0+255),f,b
  4117  0028D6  D7FC               	bra	u6637
  4118                           
  4119                           ;main.c: 473: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4120  0028D8  0E80               	movlw	128
  4121  0028DA  EC9F  F023         	call	_lcdInst
  4122  0028DE  0E34               	movlw	52
  4123  0028E0  0100               	movlb	0	; () banked
  4124  0028E2  6FF4               	movwf	??_main& (0+255),b
  4125  0028E4  0EF1               	movlw	241
  4126  0028E6                     u6647:
  4127  0028E6  2EE8               	decfsz	wreg,f,c
  4128  0028E8  D7FE               	bra	u6647
  4129  0028EA  2FF4               	decfsz	??_main& (0+255),f,b
  4130  0028EC  D7FC               	bra	u6647
  4131  0028EE  D000               	nop2	
  4132                           
  4133                           ;main.c: 496: (INTCONbits.GIE = 1);
  4134  0028F0  8EF2               	bsf	intcon,7,c	;volatile
  4135                           
  4136                           ;main.c: 497: LATCbits.LATC0 = 0;
  4137  0028F2  908B               	bcf	3979,0,c	;volatile
  4138                           
  4139                           ;main.c: 498: TRISCbits.RC0 = 0;
  4140  0028F4  9094               	bcf	3988,0,c	;volatile
  4141                           
  4142                           ;main.c: 500: RBIE = 0;
  4143  0028F6  96F2               	bcf	intcon,3,c	;volatile
  4144                           
  4145                           ;main.c: 501: INT1IE = 1;
  4146  0028F8  86F0               	bsf	intcon3,3,c	;volatile
  4147  0028FA                     
  4148                           ;main.c: 504: (INTCONbits.GIE = 1);
  4149  0028FA  8EF2               	bsf	intcon,7,c	;volatile
  4150                           
  4151                           ;main.c: 506: operation = 1;
  4152  0028FC  0E00               	movlw	0
  4153  0028FE  6E69               	movwf	_operation+1,c
  4154  002900  0E01               	movlw	1
  4155  002902  6E68               	movwf	_operation,c
  4156                           
  4157                           ;main.c: 507: printf("1: Date and Time");
  4158  002904  0E20               	movlw	low STR_27
  4159  002906  0100               	movlb	0	; () banked
  4160  002908  6FD4               	movwf	printf@f& (0+255),b
  4161  00290A  0EFE               	movlw	high STR_27
  4162  00290C  6FD5               	movwf	(printf@f+1)& (0+255),b
  4163  00290E  ECE5  F014         	call	_printf	;wreg free
  4164                           
  4165                           ;main.c: 508: lcdInst(0xC0);;
  4166  002912  0EC0               	movlw	192
  4167  002914  EC9F  F023         	call	_lcdInst
  4168                           
  4169                           ;main.c: 509: printf(" 2: Operation Time");
  4170  002918  0EA4               	movlw	low STR_28
  4171  00291A  0100               	movlb	0	; () banked
  4172  00291C  6FD4               	movwf	printf@f& (0+255),b
  4173  00291E  0EFD               	movlw	high STR_28
  4174  002920  6FD5               	movwf	(printf@f+1)& (0+255),b
  4175  002922  ECE5  F014         	call	_printf	;wreg free
  4176                           
  4177                           ;main.c: 510: _delay((unsigned long)((600)*(32000000/4000.0)));
  4178  002926  0E19               	movlw	25
  4179  002928  0100               	movlb	0	; () banked
  4180  00292A  6FF5               	movwf	(??_main+1)& (0+255),b
  4181  00292C  0E5A               	movlw	90
  4182  00292E  6FF4               	movwf	??_main& (0+255),b
  4183  002930  0EB1               	movlw	177
  4184  002932                     u6657:
  4185  002932  2EE8               	decfsz	wreg,f,c
  4186  002934  D7FE               	bra	u6657
  4187  002936  2FF4               	decfsz	??_main& (0+255),f,b
  4188  002938  D7FC               	bra	u6657
  4189  00293A  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  4190  00293C  D7FA               	bra	u6657
  4191  00293E  D000               	nop2	
  4192                           
  4193                           ;main.c: 511: initLCD();
  4194  002940  EC02  F022         	call	_initLCD	;wreg free
  4195                           
  4196                           ;main.c: 512: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4197  002944  0E80               	movlw	128
  4198  002946  EC9F  F023         	call	_lcdInst
  4199  00294A  0E34               	movlw	52
  4200  00294C  0100               	movlb	0	; () banked
  4201  00294E  6FF4               	movwf	??_main& (0+255),b
  4202  002950  0EF1               	movlw	241
  4203  002952                     u6667:
  4204  002952  2EE8               	decfsz	wreg,f,c
  4205  002954  D7FE               	bra	u6667
  4206  002956  2FF4               	decfsz	??_main& (0+255),f,b
  4207  002958  D7FC               	bra	u6667
  4208  00295A  D000               	nop2	
  4209                           
  4210                           ;main.c: 513: printf("3:summary");
  4211  00295C  0E61               	movlw	low STR_29
  4212  00295E  0100               	movlb	0	; () banked
  4213  002960  6FD4               	movwf	printf@f& (0+255),b
  4214  002962  0EFF               	movlw	high STR_29
  4215  002964  6FD5               	movwf	(printf@f+1)& (0+255),b
  4216  002966  ECE5  F014         	call	_printf	;wreg free
  4217                           
  4218                           ;main.c: 514: lcdInst(0xC0);;
  4219  00296A  0EC0               	movlw	192
  4220  00296C  EC9F  F023         	call	_lcdInst
  4221                           
  4222                           ;main.c: 515: printf("4:return");
  4223  002970  0E86               	movlw	low STR_30
  4224  002972  0100               	movlb	0	; () banked
  4225  002974  6FD4               	movwf	printf@f& (0+255),b
  4226  002976  0EFF               	movlw	high STR_30
  4227  002978  6FD5               	movwf	(printf@f+1)& (0+255),b
  4228  00297A  ECE5  F014         	call	_printf	;wreg free
  4229                           
  4230                           ;main.c: 517: _delay((unsigned long)((100)*(32000000/4000.0)));
  4231  00297E  0E05               	movlw	5
  4232  002980  0100               	movlb	0	; () banked
  4233  002982  6FF5               	movwf	(??_main+1)& (0+255),b
  4234  002984  0E0F               	movlw	15
  4235  002986  6FF4               	movwf	??_main& (0+255),b
  4236  002988  0EF1               	movlw	241
  4237  00298A                     u6677:
  4238  00298A  2EE8               	decfsz	wreg,f,c
  4239  00298C  D7FE               	bra	u6677
  4240  00298E  2FF4               	decfsz	??_main& (0+255),f,b
  4241  002990  D7FC               	bra	u6677
  4242  002992  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  4243  002994  D7FA               	bra	u6677
  4244                           
  4245                           ;main.c: 518: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4246  002996  0E80               	movlw	128
  4247  002998  EC9F  F023         	call	_lcdInst
  4248  00299C  0E34               	movlw	52
  4249  00299E  0100               	movlb	0	; () banked
  4250  0029A0  6FF4               	movwf	??_main& (0+255),b
  4251  0029A2  0EF1               	movlw	241
  4252  0029A4                     u6687:
  4253  0029A4  2EE8               	decfsz	wreg,f,c
  4254  0029A6  D7FE               	bra	u6687
  4255  0029A8  2FF4               	decfsz	??_main& (0+255),f,b
  4256  0029AA  D7FC               	bra	u6687
  4257  0029AC  D000               	nop2	
  4258                           
  4259                           ;main.c: 520: if(operation_done == 1){
  4260  0029AE  0100               	movlb	0	; () banked
  4261  0029B0  05B3               	decf	_operation_done& (0+255),w,b
  4262  0029B2  11B4               	iorwf	(_operation_done+1)& (0+255),w,b
  4263  0029B4  A4D8               	btfss	status,2,c
  4264  0029B6  D7A1               	goto	l532
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;main.c: 522: }
  4268                           ;main.c: 523: }
  4269                           ;main.c: 524: initialize();
  4270                           
  4271                           ; BSR set to: 0
  4272                           
  4273                           ; BSR set to: 0
  4274                           
  4275                           ; BSR set to: 0
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;main.c: 521: break;
  4279  0029B8  EC7E  F01B         	call	_initialize	;wreg free
  4280                           
  4281                           ;main.c: 525: mode = 0;
  4282  0029BC  0E00               	movlw	0
  4283  0029BE  0100               	movlb	0	; () banked
  4284  0029C0  6FB8               	movwf	(_mode+1)& (0+255),b
  4285  0029C2  0E00               	movlw	0
  4286  0029C4  6FB7               	movwf	_mode& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289                           
  4290                           ; BSR set to: 0
  4291  0029C6  EF38  F00F         	goto	l486
  4292  0029CA                     __end_of_main:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           intcon	equ	0xFF2
  4299                           intcon3	equ	0xFF0
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _initialize *****************
  4312 ;; Defined at:
  4313 ;;		line 1085 in file "main.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    4
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_main
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text1
  4342  0036FC                     __ptext1:
  4343                           	opt stack 0
  4344  0036FC                     _initialize:
  4345                           	opt stack 26
  4346                           
  4347                           ;main.c: 1086: white_tape = 0;
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;incstack = 0
  4351  0036FC  0E00               	movlw	0
  4352  0036FE  0100               	movlb	0	; () banked
  4353  003700  6FBA               	movwf	(_white_tape+1)& (0+255),b
  4354  003702  0E00               	movlw	0
  4355  003704  6FB9               	movwf	_white_tape& (0+255),b
  4356                           
  4357                           ;main.c: 1087: mode = 0;
  4358  003706  0E00               	movlw	0
  4359  003708  6FB8               	movwf	(_mode+1)& (0+255),b
  4360  00370A  0E00               	movlw	0
  4361  00370C  6FB7               	movwf	_mode& (0+255),b
  4362                           
  4363                           ;main.c: 1088: state = 0;
  4364  00370E  0E00               	movlw	0
  4365  003710  6FB2               	movwf	(_state+1)& (0+255),b
  4366  003712  0E00               	movlw	0
  4367  003714  6FB1               	movwf	_state& (0+255),b
  4368                           
  4369                           ;main.c: 1089: assembly_step = 0;
  4370  003716  0E00               	movlw	0
  4371  003718  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  4372  00371A  0E00               	movlw	0
  4373  00371C  6FAF               	movwf	_assembly_step& (0+255),b
  4374                           
  4375                           ;main.c: 1090: counter_step = 0;
  4376  00371E  0E00               	movlw	0
  4377  003720  6E5F               	movwf	_counter_step+1,c
  4378  003722  0E00               	movlw	0
  4379  003724  6E5E               	movwf	_counter_step,c
  4380                           
  4381                           ;main.c: 1092: valid = 0;
  4382  003726  0E00               	movlw	0
  4383  003728  6E5D               	movwf	_valid+1,c
  4384  00372A  0E00               	movlw	0
  4385  00372C  6E5C               	movwf	_valid,c
  4386                           
  4387                           ;main.c: 1093: number = 0;
  4388  00372E  0E00               	movlw	0
  4389  003730  6E76               	movwf	_number+1,c
  4390  003732  0E00               	movlw	0
  4391  003734  6E75               	movwf	_number,c
  4392                           
  4393                           ;main.c: 1094: total_number=0;
  4394  003736  0E00               	movlw	0
  4395  003738  6E5B               	movwf	_total_number+1,c
  4396  00373A  0E00               	movlw	0
  4397  00373C  6E5A               	movwf	_total_number,c
  4398                           
  4399                           ;main.c: 1096: B=0,N=0,S=0,W=0;
  4400  00373E  0E00               	movlw	0
  4401  003740  6E59               	movwf	_B+1,c
  4402  003742  0E00               	movlw	0
  4403  003744  6E58               	movwf	_B,c
  4404  003746  0E00               	movlw	0
  4405  003748  6E57               	movwf	_N+1,c
  4406  00374A  0E00               	movlw	0
  4407  00374C  6E56               	movwf	_N,c
  4408  00374E  0E00               	movlw	0
  4409  003750  6E55               	movwf	_S+1,c
  4410  003752  0E00               	movlw	0
  4411  003754  6E54               	movwf	_S,c
  4412  003756  0E00               	movlw	0
  4413  003758  6E53               	movwf	_W+1,c
  4414  00375A  0E00               	movlw	0
  4415  00375C  6E52               	movwf	_W,c
  4416                           
  4417                           ;main.c: 1098: B_counter= 0;
  4418  00375E  0E00               	movlw	0
  4419  003760  6FAE               	movwf	(_B_counter+1)& (0+255),b
  4420  003762  0E00               	movlw	0
  4421  003764  6FAD               	movwf	_B_counter& (0+255),b
  4422                           
  4423                           ;main.c: 1099: S_counter= 0;
  4424  003766  0E00               	movlw	0
  4425  003768  6FAC               	movwf	(_S_counter+1)& (0+255),b
  4426  00376A  0E00               	movlw	0
  4427  00376C  6FAB               	movwf	_S_counter& (0+255),b
  4428                           
  4429                           ;main.c: 1100: N_counter= 0;
  4430  00376E  0E00               	movlw	0
  4431  003770  6FAA               	movwf	(_N_counter+1)& (0+255),b
  4432  003772  0E00               	movlw	0
  4433  003774  6FA9               	movwf	_N_counter& (0+255),b
  4434                           
  4435                           ;main.c: 1101: W_counter= 0;
  4436  003776  0E00               	movlw	0
  4437  003778  6FA8               	movwf	(_W_counter+1)& (0+255),b
  4438  00377A  0E00               	movlw	0
  4439  00377C  6FA7               	movwf	_W_counter& (0+255),b
  4440                           
  4441                           ;main.c: 1104: initial_time = 0;
  4442  00377E  0E00               	movlw	0
  4443  003780  0101               	movlb	1	; () banked
  4444  003782  6F69               	movwf	(_initial_time+1)& (0+255),b
  4445  003784  0E00               	movlw	0
  4446  003786  6F68               	movwf	_initial_time& (0+255),b
  4447                           
  4448                           ;main.c: 1105: final_time = 0;
  4449  003788  0E00               	movlw	0
  4450  00378A  6F61               	movwf	(_final_time+1)& (0+255),b
  4451  00378C  0E00               	movlw	0
  4452  00378E  6F60               	movwf	_final_time& (0+255),b
  4453                           
  4454                           ;main.c: 1107: for (i=0;i<8;i++){
  4455  003790  0E00               	movlw	0
  4456  003792  0100               	movlb	0	; () banked
  4457  003794  6FBC               	movwf	(_i+1)& (0+255),b
  4458  003796  0E00               	movlw	0
  4459  003798  6FBB               	movwf	_i& (0+255),b
  4460  00379A                     l5491:
  4461                           
  4462                           ; BSR set to: 0
  4463  00379A  51BC               	movf	(_i+1)& (0+255),w,b
  4464  00379C  E155               	bnz	l616
  4465  00379E  0E08               	movlw	8
  4466  0037A0  5DBB               	subwf	_i& (0+255),w,b
  4467  0037A2  B0D8               	btfsc	status,0,c
  4468  0037A4  0012               	return	
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;main.c: 1108: compartment_array[i] = 0;
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ; BSR set to: 0
  4476  0037A6  90D8               	bcf	status,0,c
  4477  0037A8  35BB               	rlcf	_i& (0+255),w,b
  4478  0037AA  6ED9               	movwf	fsr2l,c
  4479  0037AC  35BC               	rlcf	(_i+1)& (0+255),w,b
  4480  0037AE  6EDA               	movwf	fsr2h,c
  4481  0037B0  0E80               	movlw	low _compartment_array
  4482  0037B2  26D9               	addwf	fsr2l,f,c
  4483  0037B4  0E00               	movlw	high _compartment_array
  4484  0037B6  22DA               	addwfc	fsr2h,f,c
  4485  0037B8  0E00               	movlw	0
  4486  0037BA  6EDE               	movwf	postinc2,c
  4487  0037BC  0E00               	movlw	0
  4488  0037BE  6EDD               	movwf	postdec2,c
  4489                           
  4490                           ;main.c: 1109: compartment_number[i] = 0;
  4491  0037C0  90D8               	bcf	status,0,c
  4492  0037C2  35BB               	rlcf	_i& (0+255),w,b
  4493  0037C4  6ED9               	movwf	fsr2l,c
  4494  0037C6  35BC               	rlcf	(_i+1)& (0+255),w,b
  4495  0037C8  6EDA               	movwf	fsr2h,c
  4496  0037CA  0E42               	movlw	low _compartment_number
  4497  0037CC  26D9               	addwf	fsr2l,f,c
  4498  0037CE  0E00               	movlw	high _compartment_number
  4499  0037D0  22DA               	addwfc	fsr2h,f,c
  4500  0037D2  0E00               	movlw	0
  4501  0037D4  6EDE               	movwf	postinc2,c
  4502  0037D6  0E00               	movlw	0
  4503  0037D8  6EDD               	movwf	postdec2,c
  4504                           
  4505                           ;main.c: 1110: B_array[i] = 0;
  4506  0037DA  90D8               	bcf	status,0,c
  4507  0037DC  35BB               	rlcf	_i& (0+255),w,b
  4508  0037DE  6ED9               	movwf	fsr2l,c
  4509  0037E0  35BC               	rlcf	(_i+1)& (0+255),w,b
  4510  0037E2  6EDA               	movwf	fsr2h,c
  4511  0037E4  0E30               	movlw	low _B_array
  4512  0037E6  26D9               	addwf	fsr2l,f,c
  4513  0037E8  0E01               	movlw	high _B_array
  4514  0037EA  22DA               	addwfc	fsr2h,f,c
  4515  0037EC  0E00               	movlw	0
  4516  0037EE  6EDE               	movwf	postinc2,c
  4517  0037F0  0E00               	movlw	0
  4518  0037F2  6EDD               	movwf	postdec2,c
  4519                           
  4520                           ;main.c: 1111: N_array[i] = 0;
  4521  0037F4  90D8               	bcf	status,0,c
  4522  0037F6  35BB               	rlcf	_i& (0+255),w,b
  4523  0037F8  6ED9               	movwf	fsr2l,c
  4524  0037FA  35BC               	rlcf	(_i+1)& (0+255),w,b
  4525  0037FC  6EDA               	movwf	fsr2h,c
  4526  0037FE  0E10               	movlw	low _N_array
  4527  003800  26D9               	addwf	fsr2l,f,c
  4528  003802  0E01               	movlw	high _N_array
  4529  003804  22DA               	addwfc	fsr2h,f,c
  4530  003806  0E00               	movlw	0
  4531  003808  6EDE               	movwf	postinc2,c
  4532  00380A  0E00               	movlw	0
  4533  00380C  6EDD               	movwf	postdec2,c
  4534                           
  4535                           ;main.c: 1112: S_array[i] = 0;
  4536  00380E  90D8               	bcf	status,0,c
  4537  003810  35BB               	rlcf	_i& (0+255),w,b
  4538  003812  6ED9               	movwf	fsr2l,c
  4539  003814  35BC               	rlcf	(_i+1)& (0+255),w,b
  4540  003816  6EDA               	movwf	fsr2h,c
  4541  003818  0E20               	movlw	low _S_array
  4542  00381A  26D9               	addwf	fsr2l,f,c
  4543  00381C  0E01               	movlw	high _S_array
  4544  00381E  22DA               	addwfc	fsr2h,f,c
  4545  003820  0E00               	movlw	0
  4546  003822  6EDE               	movwf	postinc2,c
  4547  003824  0E00               	movlw	0
  4548  003826  6EDD               	movwf	postdec2,c
  4549                           
  4550                           ;main.c: 1113: W_array[i] = 0;
  4551  003828  90D8               	bcf	status,0,c
  4552  00382A  35BB               	rlcf	_i& (0+255),w,b
  4553  00382C  6ED9               	movwf	fsr2l,c
  4554  00382E  35BC               	rlcf	(_i+1)& (0+255),w,b
  4555  003830  6EDA               	movwf	fsr2h,c
  4556  003832  0E00               	movlw	low _W_array
  4557  003834  26D9               	addwf	fsr2l,f,c
  4558  003836  0E01               	movlw	high _W_array
  4559  003838  22DA               	addwfc	fsr2h,f,c
  4560  00383A  0E00               	movlw	0
  4561  00383C  6EDE               	movwf	postinc2,c
  4562  00383E  0E00               	movlw	0
  4563  003840  6EDD               	movwf	postdec2,c
  4564                           
  4565                           ; BSR set to: 0
  4566  003842  4BBB               	infsnz	_i& (0+255),f,b
  4567  003844  2BBC               	incf	(_i+1)& (0+255),f,b
  4568  003846  D7A9               	goto	l5491
  4569  003848                     l616:
  4570                           
  4571                           ; BSR set to: 0
  4572  003848  0012               	return		;funcret
  4573  00384A                     __end_of_initialize:
  4574                           	opt stack 0
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           intcon	equ	0xFF2
  4580                           intcon3	equ	0xFF0
  4581                           postinc0	equ	0xFEE
  4582                           wreg	equ	0xFE8
  4583                           postdec1	equ	0xFE5
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _initVibTimer *****************
  4593 ;; Defined at:
  4594 ;;		line 1562 in file "main.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		None
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;Total ram usage:        0 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    4
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_main
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text2
  4623  004756                     __ptext2:
  4624                           	opt stack 0
  4625  004756                     _initVibTimer:
  4626                           	opt stack 26
  4627                           
  4628                           ;main.c: 1564: INTCONbits.TMR0IE = 1;
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;incstack = 0
  4632  004756  8AF2               	bsf	intcon,5,c	;volatile
  4633                           
  4634                           ;main.c: 1565: (INTCONbits.GIE = 1);
  4635  004758  8EF2               	bsf	intcon,7,c	;volatile
  4636                           
  4637                           ;main.c: 1567: T0CONbits.T08BIT = 0;
  4638  00475A  9CD5               	bcf	4053,6,c	;volatile
  4639                           
  4640                           ;main.c: 1568: T0CONbits.T0CS = 0;
  4641  00475C  9AD5               	bcf	4053,5,c	;volatile
  4642                           
  4643                           ;main.c: 1569: T0CONbits.PSA = 0;
  4644  00475E  96D5               	bcf	4053,3,c	;volatile
  4645                           
  4646                           ;main.c: 1570: T0CONbits.T0PS0 = 1;
  4647  004760  80D5               	bsf	4053,0,c	;volatile
  4648                           
  4649                           ;main.c: 1571: T0CONbits.T0PS1 = 1 ;
  4650  004762  82D5               	bsf	4053,1,c	;volatile
  4651                           
  4652                           ;main.c: 1572: T0CONbits.T0PS2 = 1;
  4653  004764  84D5               	bsf	4053,2,c	;volatile
  4654                           
  4655                           ;main.c: 1574: T0CONbits.TMR0ON = 1;
  4656  004766  8ED5               	bsf	4053,7,c	;volatile
  4657  004768  0012               	return		;funcret
  4658  00476A                     __end_of_initVibTimer:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           intcon	equ	0xFF2
  4665                           intcon3	equ	0xFF0
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           postdec1	equ	0xFE5
  4669                           fsr1l	equ	0xFE1
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function _initLCD *****************
  4678 ;; Defined at:
  4679 ;;		line 60 in file "lcd.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		wreg, status,2, status,0, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;Total ram usage:        1 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    6
  4700 ;; This function calls:
  4701 ;;		_lcdInst
  4702 ;; This function is called by:
  4703 ;;		_main
  4704 ;;		_count_gear
  4705 ;;		_nut_washer_remain
  4706 ;;		_bolt_spacer_remain
  4707 ;;		_all_remain
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text3
  4712  004404                     __ptext3:
  4713                           	opt stack 0
  4714  004404                     _initLCD:
  4715                           	opt stack 24
  4716                           
  4717                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  4718                           
  4719                           ;incstack = 0
  4720  004404  0E9C               	movlw	156
  4721  004406  0100               	movlb	0	; () banked
  4722  004408  6FC9               	movwf	??_initLCD& (0+255),b
  4723  00440A  0ED7               	movlw	215
  4724  00440C                     u6697:
  4725  00440C  2EE8               	decfsz	wreg,f,c
  4726  00440E  D7FE               	bra	u6697
  4727  004410  2FC9               	decfsz	??_initLCD& (0+255),f,b
  4728  004412  D7FC               	bra	u6697
  4729                           
  4730                           ;lcd.c: 69: lcdInst(0b00110011);
  4731  004414  0E33               	movlw	51
  4732  004416  EC9F  F023         	call	_lcdInst
  4733                           
  4734                           ;lcd.c: 70: lcdInst(0b00110010);
  4735  00441A  0E32               	movlw	50
  4736  00441C  EC9F  F023         	call	_lcdInst
  4737                           
  4738                           ;lcd.c: 71: lcdInst(0b00101000);
  4739  004420  0E28               	movlw	40
  4740  004422  EC9F  F023         	call	_lcdInst
  4741                           
  4742                           ;lcd.c: 72: lcdInst(0b00001111);
  4743  004426  0E0F               	movlw	15
  4744  004428  EC9F  F023         	call	_lcdInst
  4745                           
  4746                           ;lcd.c: 73: lcdInst(0b00000110);
  4747  00442C  0E06               	movlw	6
  4748  00442E  EC9F  F023         	call	_lcdInst
  4749                           
  4750                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4751  004432  0E01               	movlw	1
  4752  004434  EC9F  F023         	call	_lcdInst
  4753  004438  0E9C               	movlw	156
  4754  00443A  0100               	movlb	0	; () banked
  4755  00443C  6FC9               	movwf	??_initLCD& (0+255),b
  4756  00443E  0ED7               	movlw	215
  4757  004440                     u6707:
  4758  004440  2EE8               	decfsz	wreg,f,c
  4759  004442  D7FE               	bra	u6707
  4760  004444  2FC9               	decfsz	??_initLCD& (0+255),f,b
  4761  004446  D7FC               	bra	u6707
  4762                           
  4763                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4764  004448  0E0F               	movlw	15
  4765  00444A  EC9F  F023         	call	_lcdInst
  4766  00444E  0012               	return		;funcret
  4767  004450                     __end_of_initLCD:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           intcon	equ	0xFF2
  4774                           intcon3	equ	0xFF0
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           postdec1	equ	0xFE5
  4778                           fsr1l	equ	0xFE1
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           postdec2	equ	0xFDD
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _generate_compartment_array *****************
  4787 ;; Defined at:
  4788 ;;		line 220 in file "keypad.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  step            2    0[BANK0 ] int 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4802 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;Total ram usage:        4 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    4
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text4
  4817  003498                     __ptext4:
  4818                           	opt stack 0
  4819  003498                     _generate_compartment_array:
  4820                           	opt stack 26
  4821                           
  4822                           ;keypad.c: 222: switch(step){
  4823                           
  4824                           ;incstack = 0
  4825  003498  D117               	goto	l1033
  4826  00349A                     
  4827                           ;keypad.c: 224: compartment_array[0] = 1;
  4828  00349A  0E00               	movlw	0
  4829  00349C  0100               	movlb	0	; () banked
  4830  00349E  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4831  0034A0  0E01               	movlw	1
  4832  0034A2  6F80               	movwf	_compartment_array& (0+255),b
  4833                           
  4834                           ;keypad.c: 225: compartment_array[2] = 1;
  4835  0034A4  0E00               	movlw	0
  4836  0034A6  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4837  0034A8  0E01               	movlw	1
  4838  0034AA  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4839                           
  4840                           ;keypad.c: 226: compartment_array[4] = 1;
  4841  0034AC  0E00               	movlw	0
  4842  0034AE  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4843  0034B0  0E01               	movlw	1
  4844  0034B2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4845                           
  4846                           ;keypad.c: 227: compartment_array[6] = 1;
  4847  0034B4  0E00               	movlw	0
  4848  0034B6  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4849  0034B8  0E01               	movlw	1
  4850  0034BA  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4851                           
  4852                           ;keypad.c: 230: compartment_number[0] = 0;
  4853  0034BC  0E00               	movlw	0
  4854  0034BE  6E43               	movwf	_compartment_number+1,c
  4855  0034C0  0E00               	movlw	0
  4856  0034C2  6E42               	movwf	_compartment_number,c
  4857                           
  4858                           ;keypad.c: 231: compartment_number[1] = 2;
  4859  0034C4  0E00               	movlw	0
  4860  0034C6  6E45               	movwf	_compartment_number+3,c
  4861  0034C8  0E02               	movlw	2
  4862  0034CA  6E44               	movwf	_compartment_number+2,c
  4863                           
  4864                           ;keypad.c: 232: compartment_number[2] = 4;
  4865  0034CC  0E00               	movlw	0
  4866  0034CE  6E47               	movwf	_compartment_number+5,c
  4867  0034D0  0E04               	movlw	4
  4868  0034D2  6E46               	movwf	_compartment_number+4,c
  4869                           
  4870                           ;keypad.c: 233: compartment_number[3] = 6;
  4871  0034D4  0E00               	movlw	0
  4872  0034D6  6E49               	movwf	_compartment_number+7,c
  4873  0034D8  0E06               	movlw	6
  4874  0034DA  6E48               	movwf	_compartment_number+6,c
  4875                           
  4876                           ;keypad.c: 235: break;
  4877  0034DC  0012               	return	
  4878  0034DE                     
  4879                           ; BSR set to: 0
  4880                           ;keypad.c: 237: compartment_array[0] = 1;
  4881                           
  4882                           ; BSR set to: 0
  4883  0034DE  0E00               	movlw	0
  4884  0034E0  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4885  0034E2  0E01               	movlw	1
  4886  0034E4  6F80               	movwf	_compartment_array& (0+255),b
  4887                           
  4888                           ;keypad.c: 238: compartment_array[1] = 1;
  4889  0034E6  0E00               	movlw	0
  4890  0034E8  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4891  0034EA  0E01               	movlw	1
  4892  0034EC  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4893                           
  4894                           ;keypad.c: 239: compartment_array[3] = 1;
  4895  0034EE  0E00               	movlw	0
  4896  0034F0  6F87               	movwf	(_compartment_array+7)& (0+255),b
  4897  0034F2  0E01               	movlw	1
  4898  0034F4  6F86               	movwf	(_compartment_array+6)& (0+255),b
  4899                           
  4900                           ;keypad.c: 240: compartment_array[4] = 1;
  4901  0034F6  0E00               	movlw	0
  4902  0034F8  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4903  0034FA  0E01               	movlw	1
  4904  0034FC  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4905                           
  4906                           ;keypad.c: 241: compartment_array[6] = 1;
  4907  0034FE  0E00               	movlw	0
  4908  003500  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4909  003502  0E01               	movlw	1
  4910  003504  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4911                           
  4912                           ;keypad.c: 245: compartment_number[0] = 0;
  4913  003506  0E00               	movlw	0
  4914  003508  6E43               	movwf	_compartment_number+1,c
  4915  00350A  0E00               	movlw	0
  4916  00350C  6E42               	movwf	_compartment_number,c
  4917                           
  4918                           ;keypad.c: 246: compartment_number[1] = 1;
  4919  00350E  0E00               	movlw	0
  4920  003510  6E45               	movwf	_compartment_number+3,c
  4921  003512  0E01               	movlw	1
  4922  003514  6E44               	movwf	_compartment_number+2,c
  4923                           
  4924                           ;keypad.c: 247: compartment_number[2] = 3;
  4925  003516  0E00               	movlw	0
  4926  003518  6E47               	movwf	_compartment_number+5,c
  4927  00351A  0E03               	movlw	3
  4928  00351C  6E46               	movwf	_compartment_number+4,c
  4929                           
  4930                           ;keypad.c: 248: compartment_number[3] = 4;
  4931  00351E  0E00               	movlw	0
  4932  003520  6E49               	movwf	_compartment_number+7,c
  4933  003522  0E04               	movlw	4
  4934  003524  6E48               	movwf	_compartment_number+6,c
  4935                           
  4936                           ;keypad.c: 249: compartment_number[4] = 6;
  4937  003526  0E00               	movlw	0
  4938  003528  6E4B               	movwf	_compartment_number+9,c
  4939  00352A  0E06               	movlw	6
  4940  00352C  6E4A               	movwf	_compartment_number+8,c
  4941                           
  4942                           ;keypad.c: 251: break;
  4943  00352E  0012               	return	
  4944  003530                     
  4945                           ; BSR set to: 0
  4946                           ;keypad.c: 254: compartment_array[0] = 1;
  4947                           
  4948                           ; BSR set to: 0
  4949  003530  0E00               	movlw	0
  4950  003532  6F81               	movwf	(_compartment_array+1)& (0+255),b
  4951  003534  0E01               	movlw	1
  4952  003536  6F80               	movwf	_compartment_array& (0+255),b
  4953                           
  4954                           ;keypad.c: 255: compartment_array[1] = 1;
  4955  003538  0E00               	movlw	0
  4956  00353A  6F83               	movwf	(_compartment_array+3)& (0+255),b
  4957  00353C  0E01               	movlw	1
  4958  00353E  6F82               	movwf	(_compartment_array+2)& (0+255),b
  4959                           
  4960                           ;keypad.c: 256: compartment_array[2] = 1;
  4961  003540  0E00               	movlw	0
  4962  003542  6F85               	movwf	(_compartment_array+5)& (0+255),b
  4963  003544  0E01               	movlw	1
  4964  003546  6F84               	movwf	(_compartment_array+4)& (0+255),b
  4965                           
  4966                           ;keypad.c: 257: compartment_array[4] = 1;
  4967  003548  0E00               	movlw	0
  4968  00354A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  4969  00354C  0E01               	movlw	1
  4970  00354E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  4971                           
  4972                           ;keypad.c: 258: compartment_array[5] = 1;
  4973  003550  0E00               	movlw	0
  4974  003552  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  4975  003554  0E01               	movlw	1
  4976  003556  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  4977                           
  4978                           ;keypad.c: 259: compartment_array[6] = 1;
  4979  003558  0E00               	movlw	0
  4980  00355A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  4981  00355C  0E01               	movlw	1
  4982  00355E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  4983                           
  4984                           ;keypad.c: 262: compartment_number[0] = 0;
  4985  003560  0E00               	movlw	0
  4986  003562  6E43               	movwf	_compartment_number+1,c
  4987  003564  0E00               	movlw	0
  4988  003566  6E42               	movwf	_compartment_number,c
  4989                           
  4990                           ;keypad.c: 263: compartment_number[1] = 1;
  4991  003568  0E00               	movlw	0
  4992  00356A  6E45               	movwf	_compartment_number+3,c
  4993  00356C  0E01               	movlw	1
  4994  00356E  6E44               	movwf	_compartment_number+2,c
  4995                           
  4996                           ;keypad.c: 264: compartment_number[2] = 2;
  4997  003570  0E00               	movlw	0
  4998  003572  6E47               	movwf	_compartment_number+5,c
  4999  003574  0E02               	movlw	2
  5000  003576  6E46               	movwf	_compartment_number+4,c
  5001                           
  5002                           ;keypad.c: 265: compartment_number[3] = 4;
  5003  003578  0E00               	movlw	0
  5004  00357A  6E49               	movwf	_compartment_number+7,c
  5005  00357C  0E04               	movlw	4
  5006  00357E  6E48               	movwf	_compartment_number+6,c
  5007                           
  5008                           ;keypad.c: 266: compartment_number[4] = 5;
  5009  003580  0E00               	movlw	0
  5010  003582  6E4B               	movwf	_compartment_number+9,c
  5011  003584  0E05               	movlw	5
  5012  003586  6E4A               	movwf	_compartment_number+8,c
  5013                           
  5014                           ;keypad.c: 267: compartment_number[5] = 6;
  5015  003588  0E00               	movlw	0
  5016  00358A  6E4D               	movwf	_compartment_number+11,c
  5017  00358C  0E06               	movlw	6
  5018  00358E  6E4C               	movwf	_compartment_number+10,c
  5019                           
  5020                           ;keypad.c: 269: break;
  5021  003590  0012               	return	
  5022  003592                     
  5023                           ; BSR set to: 0
  5024                           ;keypad.c: 271: compartment_array[0] = 1;
  5025                           
  5026                           ; BSR set to: 0
  5027  003592  0E00               	movlw	0
  5028  003594  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5029  003596  0E01               	movlw	1
  5030  003598  6F80               	movwf	_compartment_array& (0+255),b
  5031                           
  5032                           ;keypad.c: 272: compartment_array[1] = 1;
  5033  00359A  0E00               	movlw	0
  5034  00359C  6F83               	movwf	(_compartment_array+3)& (0+255),b
  5035  00359E  0E01               	movlw	1
  5036  0035A0  6F82               	movwf	(_compartment_array+2)& (0+255),b
  5037                           
  5038                           ;keypad.c: 273: compartment_array[2] = 1;
  5039  0035A2  0E00               	movlw	0
  5040  0035A4  6F85               	movwf	(_compartment_array+5)& (0+255),b
  5041  0035A6  0E01               	movlw	1
  5042  0035A8  6F84               	movwf	(_compartment_array+4)& (0+255),b
  5043                           
  5044                           ;keypad.c: 274: compartment_array[3] = 1;
  5045  0035AA  0E00               	movlw	0
  5046  0035AC  6F87               	movwf	(_compartment_array+7)& (0+255),b
  5047  0035AE  0E01               	movlw	1
  5048  0035B0  6F86               	movwf	(_compartment_array+6)& (0+255),b
  5049                           
  5050                           ;keypad.c: 275: compartment_array[4] = 1;
  5051  0035B2  0E00               	movlw	0
  5052  0035B4  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5053  0035B6  0E01               	movlw	1
  5054  0035B8  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5055                           
  5056                           ;keypad.c: 276: compartment_array[5] = 1;
  5057  0035BA  0E00               	movlw	0
  5058  0035BC  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  5059  0035BE  0E01               	movlw	1
  5060  0035C0  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  5061                           
  5062                           ;keypad.c: 277: compartment_array[6] = 1;
  5063  0035C2  0E00               	movlw	0
  5064  0035C4  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5065  0035C6  0E01               	movlw	1
  5066  0035C8  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5067                           
  5068                           ;keypad.c: 280: compartment_number[0] = 0;
  5069  0035CA  0E00               	movlw	0
  5070  0035CC  6E43               	movwf	_compartment_number+1,c
  5071  0035CE  0E00               	movlw	0
  5072  0035D0  6E42               	movwf	_compartment_number,c
  5073                           
  5074                           ;keypad.c: 281: compartment_number[1] = 1;
  5075  0035D2  0E00               	movlw	0
  5076  0035D4  6E45               	movwf	_compartment_number+3,c
  5077  0035D6  0E01               	movlw	1
  5078  0035D8  6E44               	movwf	_compartment_number+2,c
  5079                           
  5080                           ;keypad.c: 282: compartment_number[2] = 2;
  5081  0035DA  0E00               	movlw	0
  5082  0035DC  6E47               	movwf	_compartment_number+5,c
  5083  0035DE  0E02               	movlw	2
  5084  0035E0  6E46               	movwf	_compartment_number+4,c
  5085                           
  5086                           ;keypad.c: 283: compartment_number[3] = 3;
  5087  0035E2  0E00               	movlw	0
  5088  0035E4  6E49               	movwf	_compartment_number+7,c
  5089  0035E6  0E03               	movlw	3
  5090  0035E8  6E48               	movwf	_compartment_number+6,c
  5091                           
  5092                           ;keypad.c: 284: compartment_number[4] = 4;
  5093  0035EA  0E00               	movlw	0
  5094  0035EC  6E4B               	movwf	_compartment_number+9,c
  5095  0035EE  0E04               	movlw	4
  5096  0035F0  6E4A               	movwf	_compartment_number+8,c
  5097                           
  5098                           ;keypad.c: 285: compartment_number[5] = 5;
  5099  0035F2  0E00               	movlw	0
  5100  0035F4  6E4D               	movwf	_compartment_number+11,c
  5101  0035F6  0E05               	movlw	5
  5102  0035F8  6E4C               	movwf	_compartment_number+10,c
  5103                           
  5104                           ;keypad.c: 286: compartment_number[6] = 6;
  5105  0035FA  0E00               	movlw	0
  5106  0035FC  6E4F               	movwf	_compartment_number+13,c
  5107  0035FE  0E06               	movlw	6
  5108  003600  6E4E               	movwf	_compartment_number+12,c
  5109                           
  5110                           ;keypad.c: 288: break;
  5111  003602  0012               	return	
  5112  003604                     
  5113                           ; BSR set to: 0
  5114                           ;keypad.c: 290: compartment_array[0] = 1;
  5115                           
  5116                           ; BSR set to: 0
  5117  003604  0E00               	movlw	0
  5118  003606  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5119  003608  0E01               	movlw	1
  5120  00360A  6F80               	movwf	_compartment_array& (0+255),b
  5121                           
  5122                           ;keypad.c: 291: compartment_array[1] = 1;
  5123  00360C  0E00               	movlw	0
  5124  00360E  6F83               	movwf	(_compartment_array+3)& (0+255),b
  5125  003610  0E01               	movlw	1
  5126  003612  6F82               	movwf	(_compartment_array+2)& (0+255),b
  5127                           
  5128                           ;keypad.c: 292: compartment_array[2] = 1;
  5129  003614  0E00               	movlw	0
  5130  003616  6F85               	movwf	(_compartment_array+5)& (0+255),b
  5131  003618  0E01               	movlw	1
  5132  00361A  6F84               	movwf	(_compartment_array+4)& (0+255),b
  5133                           
  5134                           ;keypad.c: 293: compartment_array[3] = 1;
  5135  00361C  0E00               	movlw	0
  5136  00361E  6F87               	movwf	(_compartment_array+7)& (0+255),b
  5137  003620  0E01               	movlw	1
  5138  003622  6F86               	movwf	(_compartment_array+6)& (0+255),b
  5139                           
  5140                           ;keypad.c: 294: compartment_array[4] = 1;
  5141  003624  0E00               	movlw	0
  5142  003626  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5143  003628  0E01               	movlw	1
  5144  00362A  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5145                           
  5146                           ;keypad.c: 295: compartment_array[5] = 1;
  5147  00362C  0E00               	movlw	0
  5148  00362E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  5149  003630  0E01               	movlw	1
  5150  003632  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  5151                           
  5152                           ;keypad.c: 296: compartment_array[6] = 1;
  5153  003634  0E00               	movlw	0
  5154  003636  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5155  003638  0E01               	movlw	1
  5156  00363A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5157                           
  5158                           ;keypad.c: 297: compartment_array[7] = 1;
  5159  00363C  0E00               	movlw	0
  5160  00363E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  5161  003640  0E01               	movlw	1
  5162  003642  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  5163                           
  5164                           ;keypad.c: 300: compartment_number[0] = 0;
  5165  003644  0E00               	movlw	0
  5166  003646  6E43               	movwf	_compartment_number+1,c
  5167  003648  0E00               	movlw	0
  5168  00364A  6E42               	movwf	_compartment_number,c
  5169                           
  5170                           ;keypad.c: 301: compartment_number[1] = 1;
  5171  00364C  0E00               	movlw	0
  5172  00364E  6E45               	movwf	_compartment_number+3,c
  5173  003650  0E01               	movlw	1
  5174  003652  6E44               	movwf	_compartment_number+2,c
  5175                           
  5176                           ;keypad.c: 302: compartment_number[2] = 2;
  5177  003654  0E00               	movlw	0
  5178  003656  6E47               	movwf	_compartment_number+5,c
  5179  003658  0E02               	movlw	2
  5180  00365A  6E46               	movwf	_compartment_number+4,c
  5181                           
  5182                           ;keypad.c: 303: compartment_number[3] = 3;
  5183  00365C  0E00               	movlw	0
  5184  00365E  6E49               	movwf	_compartment_number+7,c
  5185  003660  0E03               	movlw	3
  5186  003662  6E48               	movwf	_compartment_number+6,c
  5187                           
  5188                           ;keypad.c: 304: compartment_number[4] = 4;
  5189  003664  0E00               	movlw	0
  5190  003666  6E4B               	movwf	_compartment_number+9,c
  5191  003668  0E04               	movlw	4
  5192  00366A  6E4A               	movwf	_compartment_number+8,c
  5193                           
  5194                           ;keypad.c: 305: compartment_number[5] = 5;
  5195  00366C  0E00               	movlw	0
  5196  00366E  6E4D               	movwf	_compartment_number+11,c
  5197  003670  0E05               	movlw	5
  5198  003672  6E4C               	movwf	_compartment_number+10,c
  5199                           
  5200                           ;keypad.c: 306: compartment_number[6] = 6;
  5201  003674  0E00               	movlw	0
  5202  003676  6E4F               	movwf	_compartment_number+13,c
  5203  003678  0E06               	movlw	6
  5204  00367A  6E4E               	movwf	_compartment_number+12,c
  5205                           
  5206                           ;keypad.c: 307: compartment_number[7] = 7;
  5207  00367C  0E00               	movlw	0
  5208  00367E  6E51               	movwf	_compartment_number+15,c
  5209  003680  0E07               	movlw	7
  5210  003682  6E50               	movwf	_compartment_number+14,c
  5211                           
  5212                           ;keypad.c: 309: break;
  5213  003684  0012               	return	
  5214  003686                     
  5215                           ; BSR set to: 0
  5216                           ;keypad.c: 311: compartment_array[0] = 0;
  5217                           
  5218                           ; BSR set to: 0
  5219  003686  0E00               	movlw	0
  5220  003688  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5221  00368A  0E00               	movlw	0
  5222  00368C  6F80               	movwf	_compartment_array& (0+255),b
  5223                           
  5224                           ;keypad.c: 312: compartment_array[1] = 0;
  5225  00368E  0E00               	movlw	0
  5226  003690  6F83               	movwf	(_compartment_array+3)& (0+255),b
  5227  003692  0E00               	movlw	0
  5228  003694  6F82               	movwf	(_compartment_array+2)& (0+255),b
  5229                           
  5230                           ;keypad.c: 313: compartment_array[2] = 0;
  5231  003696  0E00               	movlw	0
  5232  003698  6F85               	movwf	(_compartment_array+5)& (0+255),b
  5233  00369A  0E00               	movlw	0
  5234  00369C  6F84               	movwf	(_compartment_array+4)& (0+255),b
  5235                           
  5236                           ;keypad.c: 314: compartment_array[3] = 0;
  5237  00369E  0E00               	movlw	0
  5238  0036A0  6F87               	movwf	(_compartment_array+7)& (0+255),b
  5239  0036A2  0E00               	movlw	0
  5240  0036A4  6F86               	movwf	(_compartment_array+6)& (0+255),b
  5241                           
  5242                           ;keypad.c: 315: compartment_array[4] = 0;
  5243  0036A6  0E00               	movlw	0
  5244  0036A8  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5245  0036AA  0E00               	movlw	0
  5246  0036AC  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5247                           
  5248                           ;keypad.c: 316: compartment_array[5] = 0;
  5249  0036AE  0E00               	movlw	0
  5250  0036B0  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  5251  0036B2  0E00               	movlw	0
  5252  0036B4  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  5253                           
  5254                           ;keypad.c: 317: compartment_array[6] = 0;
  5255  0036B6  0E00               	movlw	0
  5256  0036B8  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5257  0036BA  0E00               	movlw	0
  5258  0036BC  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5259                           
  5260                           ;keypad.c: 318: compartment_array[7] = 0;
  5261  0036BE  0E00               	movlw	0
  5262  0036C0  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  5263  0036C2  0E00               	movlw	0
  5264  0036C4  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  5265                           
  5266                           ;keypad.c: 320: }
  5267  0036C6  0012               	return	
  5268  0036C8                     l1033:
  5269                           
  5270                           ; BSR set to: 0
  5271  0036C8  C0C6  F0C8         	movff	generate_compartment_array@step,??_generate_compartment_array
  5272  0036CC  C0C7  F0C9         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  5273                           
  5274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5275                           ; Switch size 1, requested type "space"
  5276                           ; Number of cases is 1, Range of values is 0 to 0
  5277                           ; switch strategies available:
  5278                           ; Name         Instructions Cycles
  5279                           ; simple_byte            4     3 (average)
  5280                           ;	Chosen strategy is simple_byte
  5281  0036D0  0100               	movlb	0	; () banked
  5282  0036D2  51C9               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  5283  0036D4  0A00               	xorlw	0	; case 0
  5284  0036D6  A4D8               	btfss	status,2,c
  5285  0036D8  D7D6               	goto	l1040
  5286                           
  5287                           ; BSR set to: 0
  5288                           ; Switch size 1, requested type "space"
  5289                           ; Number of cases is 5, Range of values is 4 to 8
  5290                           ; switch strategies available:
  5291                           ; Name         Instructions Cycles
  5292                           ; simple_byte           16     9 (average)
  5293                           ;	Chosen strategy is simple_byte
  5294  0036DA  51C8               	movf	??_generate_compartment_array& (0+255),w,b
  5295  0036DC  0A04               	xorlw	4	; case 4
  5296  0036DE  B4D8               	btfsc	status,2,c
  5297  0036E0  D6DC               	goto	l1034
  5298  0036E2  0A01               	xorlw	1	; case 5
  5299  0036E4  B4D8               	btfsc	status,2,c
  5300  0036E6  D6FB               	goto	l1036
  5301  0036E8  0A03               	xorlw	3	; case 6
  5302  0036EA  B4D8               	btfsc	status,2,c
  5303  0036EC  D721               	goto	l1037
  5304  0036EE  0A01               	xorlw	1	; case 7
  5305  0036F0  B4D8               	btfsc	status,2,c
  5306  0036F2  D74F               	goto	l1038
  5307  0036F4  0A0F               	xorlw	15	; case 8
  5308  0036F6  B4D8               	btfsc	status,2,c
  5309  0036F8  D785               	goto	l1039
  5310  0036FA  D7C5               	goto	l1040
  5311  0036FC                     __end_of_generate_compartment_array:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           intcon	equ	0xFF2
  5318                           intcon3	equ	0xFF0
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           postdec1	equ	0xFE5
  5322                           fsr1l	equ	0xFE1
  5323                           indf2	equ	0xFDF
  5324                           postinc2	equ	0xFDE
  5325                           postdec2	equ	0xFDD
  5326                           fsr2h	equ	0xFDA
  5327                           fsr2l	equ	0xFD9
  5328                           status	equ	0xFD8
  5329                           
  5330 ;; *************** function ___awdiv *****************
  5331 ;; Defined at:
  5332 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  dividend        2    0[BANK0 ] int 
  5335 ;;  divisor         2    2[BANK0 ] int 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  quotient        2    6[BANK0 ] int 
  5338 ;;  sign            1    5[BANK0 ] unsigned char 
  5339 ;;  counter         1    4[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  2    0[BANK0 ] int 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;Total ram usage:        8 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    4
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_main
  5360 ;;		_get_RTC_initial
  5361 ;;		_get_RTC_final
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text5
  5366  003EB2                     __ptext5:
  5367                           	opt stack 0
  5368  003EB2                     ___awdiv:
  5369                           	opt stack 26
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;incstack = 0
  5373  003EB2  0E00               	movlw	0
  5374  003EB4  0100               	movlb	0	; () banked
  5375  003EB6  6FCB               	movwf	___awdiv@sign& (0+255),b
  5376                           
  5377                           ; BSR set to: 0
  5378  003EB8  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5379  003EBA  D006               	goto	l1412
  5380                           
  5381                           ; BSR set to: 0
  5382  003EBC  6DC8               	negf	___awdiv@divisor& (0+255),b
  5383  003EBE  1FC9               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5384  003EC0  B0D8               	btfsc	status,0,c
  5385  003EC2  2BC9               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5386                           
  5387                           ; BSR set to: 0
  5388  003EC4  0E01               	movlw	1
  5389  003EC6  6FCB               	movwf	___awdiv@sign& (0+255),b
  5390  003EC8                     l1412:
  5391                           
  5392                           ; BSR set to: 0
  5393                           
  5394                           ; BSR set to: 0
  5395  003EC8  AFC7               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5396  003ECA  D006               	goto	l1413
  5397                           
  5398                           ; BSR set to: 0
  5399  003ECC  6DC6               	negf	___awdiv@dividend& (0+255),b
  5400  003ECE  1FC7               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5401  003ED0  B0D8               	btfsc	status,0,c
  5402  003ED2  2BC7               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5403                           
  5404                           ; BSR set to: 0
  5405  003ED4  0E01               	movlw	1
  5406  003ED6  1BCB               	xorwf	___awdiv@sign& (0+255),f,b
  5407  003ED8                     l1413:
  5408                           
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  003ED8  0E00               	movlw	0
  5413  003EDA  6FCD               	movwf	(___awdiv@quotient+1)& (0+255),b
  5414  003EDC  0E00               	movlw	0
  5415  003EDE  6FCC               	movwf	___awdiv@quotient& (0+255),b
  5416                           
  5417                           ; BSR set to: 0
  5418  003EE0  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5419  003EE2  11C9               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5420  003EE4  B4D8               	btfsc	status,2,c
  5421  003EE6  D01C               	goto	l1420
  5422                           
  5423                           ; BSR set to: 0
  5424  003EE8  0E01               	movlw	1
  5425  003EEA  6FCA               	movwf	___awdiv@counter& (0+255),b
  5426  003EEC  D004               	goto	l1415
  5427  003EEE                     
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431  003EEE  90D8               	bcf	status,0,c
  5432  003EF0  37C8               	rlcf	___awdiv@divisor& (0+255),f,b
  5433  003EF2  37C9               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5434  003EF4  2BCA               	incf	___awdiv@counter& (0+255),f,b
  5435  003EF6                     l1415:
  5436                           
  5437                           ; BSR set to: 0
  5438                           
  5439                           ; BSR set to: 0
  5440  003EF6  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5441  003EF8  D7FA               	goto	l1416
  5442  003EFA                     u4550:
  5443                           
  5444                           ; BSR set to: 0
  5445                           
  5446                           ; BSR set to: 0
  5447                           
  5448                           ; BSR set to: 0
  5449  003EFA  90D8               	bcf	status,0,c
  5450  003EFC  37CC               	rlcf	___awdiv@quotient& (0+255),f,b
  5451  003EFE  37CD               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5452                           
  5453                           ; BSR set to: 0
  5454  003F00  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5455  003F02  5DC6               	subwf	___awdiv@dividend& (0+255),w,b
  5456  003F04  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5457  003F06  59C7               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5458  003F08  A0D8               	btfss	status,0,c
  5459  003F0A  D005               	goto	l1419
  5460                           
  5461                           ; BSR set to: 0
  5462  003F0C  51C8               	movf	___awdiv@divisor& (0+255),w,b
  5463  003F0E  5FC6               	subwf	___awdiv@dividend& (0+255),f,b
  5464  003F10  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5465  003F12  5BC7               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5466                           
  5467                           ; BSR set to: 0
  5468  003F14  81CC               	bsf	___awdiv@quotient& (0+255),0,b
  5469  003F16                     l1419:
  5470                           
  5471                           ; BSR set to: 0
  5472                           
  5473                           ; BSR set to: 0
  5474  003F16  90D8               	bcf	status,0,c
  5475  003F18  33C9               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5476  003F1A  33C8               	rrcf	___awdiv@divisor& (0+255),f,b
  5477                           
  5478                           ; BSR set to: 0
  5479  003F1C  2FCA               	decfsz	___awdiv@counter& (0+255),f,b
  5480  003F1E  D7ED               	goto	u4550
  5481  003F20                     l1420:
  5482                           
  5483                           ; BSR set to: 0
  5484                           
  5485                           ; BSR set to: 0
  5486                           
  5487                           ; BSR set to: 0
  5488  003F20  51CB               	movf	___awdiv@sign& (0+255),w,b
  5489  003F22  B4D8               	btfsc	status,2,c
  5490  003F24  D004               	goto	l1421
  5491                           
  5492                           ; BSR set to: 0
  5493  003F26  6DCC               	negf	___awdiv@quotient& (0+255),b
  5494  003F28  1FCD               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5495  003F2A  B0D8               	btfsc	status,0,c
  5496  003F2C  2BCD               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5497  003F2E                     l1421:
  5498                           
  5499                           ; BSR set to: 0
  5500                           
  5501                           ; BSR set to: 0
  5502  003F2E  C0CC  F0C6         	movff	___awdiv@quotient,?___awdiv
  5503  003F32  C0CD  F0C7         	movff	___awdiv@quotient+1,?___awdiv+1
  5504  003F36  0012               	return	
  5505  003F38                     __end_of___awdiv:
  5506                           	opt stack 0
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           intcon	equ	0xFF2
  5512                           intcon3	equ	0xFF0
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           postdec1	equ	0xFE5
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _Washer_remain *****************
  5525 ;; Defined at:
  5526 ;;		line 1535 in file "main.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  time            2   42[BANK0 ] int 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;Total ram usage:        4 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    7
  5547 ;; This function calls:
  5548 ;;		_I2C_sendData
  5549 ;;		_lcdInst
  5550 ;;		_printf
  5551 ;; This function is called by:
  5552 ;;		_main
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text6
  5557  00384A                     __ptext6:
  5558                           	opt stack 0
  5559  00384A                     _Washer_remain:
  5560                           	opt stack 23
  5561                           
  5562                           ;main.c: 1537: _delay((unsigned long)((100)*(32000000/4000.0)));
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;incstack = 0
  5566  00384A  0E05               	movlw	5
  5567  00384C  0100               	movlb	0	; () banked
  5568  00384E  6FF3               	movwf	(??_Washer_remain+1)& (0+255),b
  5569  003850  0E0F               	movlw	15
  5570  003852  6FF2               	movwf	??_Washer_remain& (0+255),b
  5571  003854  0EF1               	movlw	241
  5572  003856                     u6717:
  5573  003856  2EE8               	decfsz	wreg,f,c
  5574  003858  D7FE               	bra	u6717
  5575  00385A  2FF2               	decfsz	??_Washer_remain& (0+255),f,b
  5576  00385C  D7FC               	bra	u6717
  5577  00385E  2FF3               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  5578  003860  D7FA               	bra	u6717
  5579                           
  5580                           ;main.c: 1538: I2C_sendData(11);
  5581  003862  0E0B               	movlw	11
  5582  003864  EC3A  F023         	call	_I2C_sendData
  5583                           
  5584                           ;main.c: 1539: while(EndOfProgram != 1 && W_spacingTime < time){
  5585  003868  D026               	goto	l762
  5586  00386A                     
  5587                           ;main.c: 1540: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  5588  00386A  0E01               	movlw	1
  5589  00386C  EC9F  F023         	call	_lcdInst
  5590  003870  0E9C               	movlw	156
  5591  003872  0100               	movlb	0	; () banked
  5592  003874  6FF2               	movwf	??_Washer_remain& (0+255),b
  5593  003876  0ED7               	movlw	215
  5594  003878                     u6727:
  5595  003878  2EE8               	decfsz	wreg,f,c
  5596  00387A  D7FE               	bra	u6727
  5597  00387C  2FF2               	decfsz	??_Washer_remain& (0+255),f,b
  5598  00387E  D7FC               	bra	u6727
  5599                           
  5600                           ;main.c: 1541: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5601  003880  0E80               	movlw	128
  5602  003882  EC9F  F023         	call	_lcdInst
  5603  003886  0E34               	movlw	52
  5604  003888  0100               	movlb	0	; () banked
  5605  00388A  6FF2               	movwf	??_Washer_remain& (0+255),b
  5606  00388C  0EF1               	movlw	241
  5607  00388E                     u6737:
  5608  00388E  2EE8               	decfsz	wreg,f,c
  5609  003890  D7FE               	bra	u6737
  5610  003892  2FF2               	decfsz	??_Washer_remain& (0+255),f,b
  5611  003894  D7FC               	bra	u6737
  5612  003896  D000               	nop2	
  5613                           
  5614                           ;main.c: 1542: W_spacingTime +=30;
  5615  003898  0E1E               	movlw	30
  5616  00389A  0100               	movlb	0	; () banked
  5617  00389C  2797               	addwf	_W_spacingTime& (0+255),f,b
  5618  00389E  0E00               	movlw	0
  5619  0038A0  2398               	addwfc	(_W_spacingTime+1)& (0+255),f,b
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;main.c: 1543: printf("W:%d",W_counter);
  5623  0038A2  0E65               	movlw	low (STR_70+15)
  5624  0038A4  6FD4               	movwf	printf@f& (0+255),b
  5625  0038A6  0EFD               	movlw	high (STR_70+15)
  5626  0038A8  6FD5               	movwf	(printf@f+1)& (0+255),b
  5627  0038AA  C0A7  F0D6         	movff	_W_counter,?_printf+2
  5628  0038AE  C0A8  F0D7         	movff	_W_counter+1,?_printf+3
  5629  0038B2  ECE5  F014         	call	_printf	;wreg free
  5630  0038B6                     l762:
  5631  0038B6  0100               	movlb	0	; () banked
  5632  0038B8  05BE               	decf	_EndOfProgram& (0+255),w,b
  5633  0038BA  B4D8               	btfsc	status,2,c
  5634  0038BC  D00A               	goto	u4090
  5635                           
  5636                           ; BSR set to: 0
  5637  0038BE  51F0               	movf	Washer_remain@time& (0+255),w,b
  5638  0038C0  5D97               	subwf	_W_spacingTime& (0+255),w,b
  5639  0038C2  5198               	movf	(_W_spacingTime+1)& (0+255),w,b
  5640  0038C4  0A80               	xorlw	128
  5641  0038C6  6FF2               	movwf	??_Washer_remain& (0+255),b
  5642  0038C8  51F1               	movf	(Washer_remain@time+1)& (0+255),w,b
  5643  0038CA  0A80               	xorlw	128
  5644  0038CC  59F2               	subwfb	??_Washer_remain& (0+255),w,b
  5645  0038CE  A0D8               	btfss	status,0,c
  5646  0038D0  D7CC               	goto	l763
  5647  0038D2                     u4090:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;main.c: 1544: }
  5651                           ;main.c: 1545: W_remain = W_counter;
  5652                           
  5653                           ; BSR set to: 0
  5654  0038D2  C0A7  F09F         	movff	_W_counter,_W_remain
  5655  0038D6  C0A8  F0A0         	movff	_W_counter+1,_W_remain+1
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;main.c: 1546: I2C_sendData(12);
  5659  0038DA  0E0C               	movlw	12
  5660  0038DC  EC3A  F023         	call	_I2C_sendData
  5661                           
  5662                           ;main.c: 1547: if(EndOfProgram != 1){
  5663  0038E0  0100               	movlb	0	; () banked
  5664  0038E2  05BE               	decf	_EndOfProgram& (0+255),w,b
  5665  0038E4  B4D8               	btfsc	status,2,c
  5666  0038E6  0012               	return	
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;main.c: 1548: _delay((unsigned long)((100)*(32000000/4000.0)));
  5670  0038E8  0E05               	movlw	5
  5671  0038EA  0100               	movlb	0	; () banked
  5672  0038EC  6FF3               	movwf	(??_Washer_remain+1)& (0+255),b
  5673  0038EE  0E0F               	movlw	15
  5674  0038F0  6FF2               	movwf	??_Washer_remain& (0+255),b
  5675  0038F2  0EF1               	movlw	241
  5676  0038F4                     u6747:
  5677  0038F4  2EE8               	decfsz	wreg,f,c
  5678  0038F6  D7FE               	bra	u6747
  5679  0038F8  2FF2               	decfsz	??_Washer_remain& (0+255),f,b
  5680  0038FA  D7FC               	bra	u6747
  5681  0038FC  2FF3               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  5682  0038FE  D7FA               	bra	u6747
  5683  003900  0012               	return	
  5684  003902                     __end_of_Washer_remain:
  5685                           	opt stack 0
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           intcon	equ	0xFF2
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1l	equ	0xFE1
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           fsr2h	equ	0xFDA
  5700                           fsr2l	equ	0xFD9
  5701                           status	equ	0xFD8
  5702                           
  5703 ;; *************** function _Washer_dispense *****************
  5704 ;; Defined at:
  5705 ;;		line 1334 in file "main.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  W_max           2   42[BANK0 ] int 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5719 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;Total ram usage:        4 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    7
  5726 ;; This function calls:
  5727 ;;		_I2C_sendData
  5728 ;;		_lcdInst
  5729 ;;		_printf
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text7
  5736  003B2A                     __ptext7:
  5737                           	opt stack 0
  5738  003B2A                     _Washer_dispense:
  5739                           	opt stack 23
  5740                           
  5741                           ;main.c: 1335: if (W_max == 0){
  5742                           
  5743                           ;incstack = 0
  5744  003B2A  0100               	movlb	0	; () banked
  5745  003B2C  51F0               	movf	Washer_dispense@W_max& (0+255),w,b
  5746  003B2E  11F1               	iorwf	(Washer_dispense@W_max+1)& (0+255),w,b
  5747  003B30  B4D8               	btfsc	status,2,c
  5748  003B32  0012               	return	
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;main.c: 1337: }
  5752                           ;main.c: 1339: _delay((unsigned long)((100)*(32000000/4000.0)));
  5753                           
  5754                           ; BSR set to: 0
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;main.c: 1336: return;
  5758  003B34  0E05               	movlw	5
  5759  003B36  0100               	movlb	0	; () banked
  5760  003B38  6FF3               	movwf	(??_Washer_dispense+1)& (0+255),b
  5761  003B3A  0E0F               	movlw	15
  5762  003B3C  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5763  003B3E  0EF1               	movlw	241
  5764  003B40                     u6757:
  5765  003B40  2EE8               	decfsz	wreg,f,c
  5766  003B42  D7FE               	bra	u6757
  5767  003B44  2FF2               	decfsz	??_Washer_dispense& (0+255),f,b
  5768  003B46  D7FC               	bra	u6757
  5769  003B48  2FF3               	decfsz	(??_Washer_dispense+1)& (0+255),f,b
  5770  003B4A  D7FA               	bra	u6757
  5771                           
  5772                           ;main.c: 1340: I2C_sendData(11);
  5773  003B4C  0E0B               	movlw	11
  5774  003B4E  EC3A  F023         	call	_I2C_sendData
  5775                           
  5776                           ;main.c: 1341: W_counter = 0;
  5777  003B52  0E00               	movlw	0
  5778  003B54  0100               	movlb	0	; () banked
  5779  003B56  6FA8               	movwf	(_W_counter+1)& (0+255),b
  5780  003B58  0E00               	movlw	0
  5781  003B5A  6FA7               	movwf	_W_counter& (0+255),b
  5782                           
  5783                           ;main.c: 1342: while(NeedToCloseLid != 1 && W_counter < W_max){
  5784  003B5C  D022               	goto	l688
  5785  003B5E                     
  5786                           ; BSR set to: 0
  5787                           ;main.c: 1343: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  5788                           
  5789                           ; BSR set to: 0
  5790  003B5E  0E01               	movlw	1
  5791  003B60  EC9F  F023         	call	_lcdInst
  5792  003B64  0E9C               	movlw	156
  5793  003B66  0100               	movlb	0	; () banked
  5794  003B68  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5795  003B6A  0ED7               	movlw	215
  5796  003B6C                     u6767:
  5797  003B6C  2EE8               	decfsz	wreg,f,c
  5798  003B6E  D7FE               	bra	u6767
  5799  003B70  2FF2               	decfsz	??_Washer_dispense& (0+255),f,b
  5800  003B72  D7FC               	bra	u6767
  5801                           
  5802                           ;main.c: 1344: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5803  003B74  0E80               	movlw	128
  5804  003B76  EC9F  F023         	call	_lcdInst
  5805  003B7A  0E34               	movlw	52
  5806  003B7C  0100               	movlb	0	; () banked
  5807  003B7E  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5808  003B80  0EF1               	movlw	241
  5809  003B82                     u6777:
  5810  003B82  2EE8               	decfsz	wreg,f,c
  5811  003B84  D7FE               	bra	u6777
  5812  003B86  2FF2               	decfsz	??_Washer_dispense& (0+255),f,b
  5813  003B88  D7FC               	bra	u6777
  5814  003B8A  D000               	nop2	
  5815                           
  5816                           ;main.c: 1345: printf("W:%d",W_counter);
  5817  003B8C  0E65               	movlw	low (STR_70+15)
  5818  003B8E  0100               	movlb	0	; () banked
  5819  003B90  6FD4               	movwf	printf@f& (0+255),b
  5820  003B92  0EFD               	movlw	high (STR_70+15)
  5821  003B94  6FD5               	movwf	(printf@f+1)& (0+255),b
  5822  003B96  C0A7  F0D6         	movff	_W_counter,?_printf+2
  5823  003B9A  C0A8  F0D7         	movff	_W_counter+1,?_printf+3
  5824  003B9E  ECE5  F014         	call	_printf	;wreg free
  5825  003BA2                     l688:
  5826  003BA2  0100               	movlb	0	; () banked
  5827  003BA4  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  5828  003BA6  B4D8               	btfsc	status,2,c
  5829  003BA8  D00A               	goto	u4040
  5830                           
  5831                           ; BSR set to: 0
  5832  003BAA  51F0               	movf	Washer_dispense@W_max& (0+255),w,b
  5833  003BAC  5DA7               	subwf	_W_counter& (0+255),w,b
  5834  003BAE  51A8               	movf	(_W_counter+1)& (0+255),w,b
  5835  003BB0  0A80               	xorlw	128
  5836  003BB2  6FF2               	movwf	??_Washer_dispense& (0+255),b
  5837  003BB4  51F1               	movf	(Washer_dispense@W_max+1)& (0+255),w,b
  5838  003BB6  0A80               	xorlw	128
  5839  003BB8  59F2               	subwfb	??_Washer_dispense& (0+255),w,b
  5840  003BBA  A0D8               	btfss	status,0,c
  5841  003BBC  D7D0               	goto	l689
  5842  003BBE                     u4040:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;main.c: 1346: }
  5846                           ;main.c: 1347: I2C_sendData(12);
  5847                           
  5848                           ; BSR set to: 0
  5849                           
  5850                           ; BSR set to: 0
  5851  003BBE  0E0C               	movlw	12
  5852  003BC0  EC3A  F023         	call	_I2C_sendData
  5853  003BC4  0012               	return	
  5854  003BC6                     __end_of_Washer_dispense:
  5855                           	opt stack 0
  5856                           tblptru	equ	0xFF8
  5857                           tblptrh	equ	0xFF7
  5858                           tblptrl	equ	0xFF6
  5859                           tablat	equ	0xFF5
  5860                           intcon	equ	0xFF2
  5861                           intcon3	equ	0xFF0
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           postdec1	equ	0xFE5
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function _Spacer_remain *****************
  5874 ;; Defined at:
  5875 ;;		line 1517 in file "main.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  time            2   42[BANK0 ] int 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5889 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;Total ram usage:        4 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    7
  5896 ;; This function calls:
  5897 ;;		_I2C_sendData
  5898 ;;		_lcdInst
  5899 ;;		_printf
  5900 ;; This function is called by:
  5901 ;;		_main
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text8
  5906  003902                     __ptext8:
  5907                           	opt stack 0
  5908  003902                     _Spacer_remain:
  5909                           	opt stack 23
  5910                           
  5911                           ;main.c: 1519: _delay((unsigned long)((100)*(32000000/4000.0)));
  5912                           
  5913                           ;incstack = 0
  5914  003902  0E05               	movlw	5
  5915  003904  0100               	movlb	0	; () banked
  5916  003906  6FF3               	movwf	(??_Spacer_remain+1)& (0+255),b
  5917  003908  0E0F               	movlw	15
  5918  00390A  6FF2               	movwf	??_Spacer_remain& (0+255),b
  5919  00390C  0EF1               	movlw	241
  5920  00390E                     u6787:
  5921  00390E  2EE8               	decfsz	wreg,f,c
  5922  003910  D7FE               	bra	u6787
  5923  003912  2FF2               	decfsz	??_Spacer_remain& (0+255),f,b
  5924  003914  D7FC               	bra	u6787
  5925  003916  2FF3               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  5926  003918  D7FA               	bra	u6787
  5927                           
  5928                           ;main.c: 1520: I2C_sendData('9');
  5929  00391A  0E39               	movlw	57
  5930  00391C  EC3A  F023         	call	_I2C_sendData
  5931                           
  5932                           ;main.c: 1521: while(EndOfProgram != 1 && S_spacingTime < time){
  5933  003920  D026               	goto	l753
  5934  003922                     
  5935                           ;main.c: 1522: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  5936  003922  0E01               	movlw	1
  5937  003924  EC9F  F023         	call	_lcdInst
  5938  003928  0E9C               	movlw	156
  5939  00392A  0100               	movlb	0	; () banked
  5940  00392C  6FF2               	movwf	??_Spacer_remain& (0+255),b
  5941  00392E  0ED7               	movlw	215
  5942  003930                     u6797:
  5943  003930  2EE8               	decfsz	wreg,f,c
  5944  003932  D7FE               	bra	u6797
  5945  003934  2FF2               	decfsz	??_Spacer_remain& (0+255),f,b
  5946  003936  D7FC               	bra	u6797
  5947                           
  5948                           ;main.c: 1523: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  5949  003938  0E80               	movlw	128
  5950  00393A  EC9F  F023         	call	_lcdInst
  5951  00393E  0E34               	movlw	52
  5952  003940  0100               	movlb	0	; () banked
  5953  003942  6FF2               	movwf	??_Spacer_remain& (0+255),b
  5954  003944  0EF1               	movlw	241
  5955  003946                     u6807:
  5956  003946  2EE8               	decfsz	wreg,f,c
  5957  003948  D7FE               	bra	u6807
  5958  00394A  2FF2               	decfsz	??_Spacer_remain& (0+255),f,b
  5959  00394C  D7FC               	bra	u6807
  5960  00394E  D000               	nop2	
  5961                           
  5962                           ;main.c: 1524: S_spacingTime +=30;
  5963  003950  0E1E               	movlw	30
  5964  003952  0100               	movlb	0	; () banked
  5965  003954  2799               	addwf	_S_spacingTime& (0+255),f,b
  5966  003956  0E00               	movlw	0
  5967  003958  239A               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;main.c: 1525: printf("S:%d",S_counter);
  5971  00395A  0ED9               	movlw	low STR_68
  5972  00395C  6FD4               	movwf	printf@f& (0+255),b
  5973  00395E  0EFF               	movlw	high STR_68
  5974  003960  6FD5               	movwf	(printf@f+1)& (0+255),b
  5975  003962  C0AB  F0D6         	movff	_S_counter,?_printf+2
  5976  003966  C0AC  F0D7         	movff	_S_counter+1,?_printf+3
  5977  00396A  ECE5  F014         	call	_printf	;wreg free
  5978  00396E                     l753:
  5979  00396E  0100               	movlb	0	; () banked
  5980  003970  05BE               	decf	_EndOfProgram& (0+255),w,b
  5981  003972  B4D8               	btfsc	status,2,c
  5982  003974  D00A               	goto	u4120
  5983                           
  5984                           ; BSR set to: 0
  5985  003976  51F0               	movf	Spacer_remain@time& (0+255),w,b
  5986  003978  5D99               	subwf	_S_spacingTime& (0+255),w,b
  5987  00397A  519A               	movf	(_S_spacingTime+1)& (0+255),w,b
  5988  00397C  0A80               	xorlw	128
  5989  00397E  6FF2               	movwf	??_Spacer_remain& (0+255),b
  5990  003980  51F1               	movf	(Spacer_remain@time+1)& (0+255),w,b
  5991  003982  0A80               	xorlw	128
  5992  003984  59F2               	subwfb	??_Spacer_remain& (0+255),w,b
  5993  003986  A0D8               	btfss	status,0,c
  5994  003988  D7CC               	goto	l754
  5995  00398A                     u4120:
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;main.c: 1526: }
  5999                           ;main.c: 1527: S_remain = S_counter;
  6000                           
  6001                           ; BSR set to: 0
  6002  00398A  C0AB  F0A1         	movff	_S_counter,_S_remain
  6003  00398E  C0AC  F0A2         	movff	_S_counter+1,_S_remain+1
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;main.c: 1528: I2C_sendData(10);
  6007  003992  0E0A               	movlw	10
  6008  003994  EC3A  F023         	call	_I2C_sendData
  6009                           
  6010                           ;main.c: 1529: if(EndOfProgram != 1){
  6011  003998  0100               	movlb	0	; () banked
  6012  00399A  05BE               	decf	_EndOfProgram& (0+255),w,b
  6013  00399C  B4D8               	btfsc	status,2,c
  6014  00399E  0012               	return	
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;main.c: 1530: _delay((unsigned long)((100)*(32000000/4000.0)));
  6018  0039A0  0E05               	movlw	5
  6019  0039A2  0100               	movlb	0	; () banked
  6020  0039A4  6FF3               	movwf	(??_Spacer_remain+1)& (0+255),b
  6021  0039A6  0E0F               	movlw	15
  6022  0039A8  6FF2               	movwf	??_Spacer_remain& (0+255),b
  6023  0039AA  0EF1               	movlw	241
  6024  0039AC                     u6817:
  6025  0039AC  2EE8               	decfsz	wreg,f,c
  6026  0039AE  D7FE               	bra	u6817
  6027  0039B0  2FF2               	decfsz	??_Spacer_remain& (0+255),f,b
  6028  0039B2  D7FC               	bra	u6817
  6029  0039B4  2FF3               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  6030  0039B6  D7FA               	bra	u6817
  6031  0039B8  0012               	return	
  6032  0039BA                     __end_of_Spacer_remain:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           intcon	equ	0xFF2
  6039                           intcon3	equ	0xFF0
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           postdec1	equ	0xFE5
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _Spacer_dispense *****************
  6052 ;; Defined at:
  6053 ;;		line 1317 in file "main.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;  S_max           2   42[BANK0 ] int 
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;Total ram usage:        4 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    7
  6074 ;; This function calls:
  6075 ;;		_I2C_sendData
  6076 ;;		_lcdInst
  6077 ;;		_printf
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text9
  6084  003BC6                     __ptext9:
  6085                           	opt stack 0
  6086  003BC6                     _Spacer_dispense:
  6087                           	opt stack 23
  6088                           
  6089                           ;main.c: 1318: if (S_max == 0){
  6090                           
  6091                           ;incstack = 0
  6092  003BC6  0100               	movlb	0	; () banked
  6093  003BC8  51F0               	movf	Spacer_dispense@S_max& (0+255),w,b
  6094  003BCA  11F1               	iorwf	(Spacer_dispense@S_max+1)& (0+255),w,b
  6095  003BCC  B4D8               	btfsc	status,2,c
  6096  003BCE  0012               	return	
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;main.c: 1320: }
  6100                           ;main.c: 1322: _delay((unsigned long)((100)*(32000000/4000.0)));
  6101                           
  6102                           ; BSR set to: 0
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;main.c: 1319: return;
  6106  003BD0  0E05               	movlw	5
  6107  003BD2  0100               	movlb	0	; () banked
  6108  003BD4  6FF3               	movwf	(??_Spacer_dispense+1)& (0+255),b
  6109  003BD6  0E0F               	movlw	15
  6110  003BD8  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  6111  003BDA  0EF1               	movlw	241
  6112  003BDC                     u6827:
  6113  003BDC  2EE8               	decfsz	wreg,f,c
  6114  003BDE  D7FE               	bra	u6827
  6115  003BE0  2FF2               	decfsz	??_Spacer_dispense& (0+255),f,b
  6116  003BE2  D7FC               	bra	u6827
  6117  003BE4  2FF3               	decfsz	(??_Spacer_dispense+1)& (0+255),f,b
  6118  003BE6  D7FA               	bra	u6827
  6119                           
  6120                           ;main.c: 1323: I2C_sendData('9');
  6121  003BE8  0E39               	movlw	57
  6122  003BEA  EC3A  F023         	call	_I2C_sendData
  6123                           
  6124                           ;main.c: 1324: S_counter = 0;
  6125  003BEE  0E00               	movlw	0
  6126  003BF0  0100               	movlb	0	; () banked
  6127  003BF2  6FAC               	movwf	(_S_counter+1)& (0+255),b
  6128  003BF4  0E00               	movlw	0
  6129  003BF6  6FAB               	movwf	_S_counter& (0+255),b
  6130                           
  6131                           ;main.c: 1325: while(NeedToCloseLid != 1 && S_counter < S_max){
  6132  003BF8  D022               	goto	l679
  6133  003BFA                     
  6134                           ; BSR set to: 0
  6135                           ;main.c: 1327: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  6136                           
  6137                           ; BSR set to: 0
  6138  003BFA  0E80               	movlw	128
  6139  003BFC  EC9F  F023         	call	_lcdInst
  6140  003C00  0E34               	movlw	52
  6141  003C02  0100               	movlb	0	; () banked
  6142  003C04  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  6143  003C06  0EF1               	movlw	241
  6144  003C08                     u6837:
  6145  003C08  2EE8               	decfsz	wreg,f,c
  6146  003C0A  D7FE               	bra	u6837
  6147  003C0C  2FF2               	decfsz	??_Spacer_dispense& (0+255),f,b
  6148  003C0E  D7FC               	bra	u6837
  6149  003C10  D000               	nop2	
  6150                           
  6151                           ;main.c: 1328: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  6152  003C12  0E01               	movlw	1
  6153  003C14  EC9F  F023         	call	_lcdInst
  6154  003C18  0E9C               	movlw	156
  6155  003C1A  0100               	movlb	0	; () banked
  6156  003C1C  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  6157  003C1E  0ED7               	movlw	215
  6158  003C20                     u6847:
  6159  003C20  2EE8               	decfsz	wreg,f,c
  6160  003C22  D7FE               	bra	u6847
  6161  003C24  2FF2               	decfsz	??_Spacer_dispense& (0+255),f,b
  6162  003C26  D7FC               	bra	u6847
  6163                           
  6164                           ;main.c: 1329: printf("S:%d", S_counter);
  6165  003C28  0ED9               	movlw	low STR_68
  6166  003C2A  0100               	movlb	0	; () banked
  6167  003C2C  6FD4               	movwf	printf@f& (0+255),b
  6168  003C2E  0EFF               	movlw	high STR_68
  6169  003C30  6FD5               	movwf	(printf@f+1)& (0+255),b
  6170  003C32  C0AB  F0D6         	movff	_S_counter,?_printf+2
  6171  003C36  C0AC  F0D7         	movff	_S_counter+1,?_printf+3
  6172  003C3A  ECE5  F014         	call	_printf	;wreg free
  6173  003C3E                     l679:
  6174  003C3E  0100               	movlb	0	; () banked
  6175  003C40  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  6176  003C42  B4D8               	btfsc	status,2,c
  6177  003C44  D00A               	goto	u4010
  6178                           
  6179                           ; BSR set to: 0
  6180  003C46  51F0               	movf	Spacer_dispense@S_max& (0+255),w,b
  6181  003C48  5DAB               	subwf	_S_counter& (0+255),w,b
  6182  003C4A  51AC               	movf	(_S_counter+1)& (0+255),w,b
  6183  003C4C  0A80               	xorlw	128
  6184  003C4E  6FF2               	movwf	??_Spacer_dispense& (0+255),b
  6185  003C50  51F1               	movf	(Spacer_dispense@S_max+1)& (0+255),w,b
  6186  003C52  0A80               	xorlw	128
  6187  003C54  59F2               	subwfb	??_Spacer_dispense& (0+255),w,b
  6188  003C56  A0D8               	btfss	status,0,c
  6189  003C58  D7D0               	goto	l680
  6190  003C5A                     u4010:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;main.c: 1330: }
  6194                           ;main.c: 1331: I2C_sendData(10);
  6195                           
  6196                           ; BSR set to: 0
  6197                           
  6198                           ; BSR set to: 0
  6199  003C5A  0E0A               	movlw	10
  6200  003C5C  EC3A  F023         	call	_I2C_sendData
  6201  003C60  0012               	return		;funcret
  6202  003C62                     __end_of_Spacer_dispense:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           intcon	equ	0xFF2
  6209                           intcon3	equ	0xFF0
  6210                           postinc0	equ	0xFEE
  6211                           wreg	equ	0xFE8
  6212                           postdec1	equ	0xFE5
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function _Nut_remain *****************
  6222 ;; Defined at:
  6223 ;;		line 1499 in file "main.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  time            2   42[BANK0 ] int 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6237 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;Total ram usage:        4 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    7
  6244 ;; This function calls:
  6245 ;;		_I2C_sendData
  6246 ;;		_lcdInst
  6247 ;;		_printf
  6248 ;; This function is called by:
  6249 ;;		_main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text10
  6254  0039BA                     __ptext10:
  6255                           	opt stack 0
  6256  0039BA                     _Nut_remain:
  6257                           	opt stack 23
  6258                           
  6259                           ;main.c: 1501: _delay((unsigned long)((100)*(32000000/4000.0)));
  6260                           
  6261                           ;incstack = 0
  6262  0039BA  0E05               	movlw	5
  6263  0039BC  0100               	movlb	0	; () banked
  6264  0039BE  6FF3               	movwf	(??_Nut_remain+1)& (0+255),b
  6265  0039C0  0E0F               	movlw	15
  6266  0039C2  6FF2               	movwf	??_Nut_remain& (0+255),b
  6267  0039C4  0EF1               	movlw	241
  6268  0039C6                     u6857:
  6269  0039C6  2EE8               	decfsz	wreg,f,c
  6270  0039C8  D7FE               	bra	u6857
  6271  0039CA  2FF2               	decfsz	??_Nut_remain& (0+255),f,b
  6272  0039CC  D7FC               	bra	u6857
  6273  0039CE  2FF3               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  6274  0039D0  D7FA               	bra	u6857
  6275                           
  6276                           ;main.c: 1502: I2C_sendData('7');
  6277  0039D2  0E37               	movlw	55
  6278  0039D4  EC3A  F023         	call	_I2C_sendData
  6279                           
  6280                           ;main.c: 1503: while(EndOfProgram!= 1 && N_spacingTime < time){
  6281  0039D8  D026               	goto	l744
  6282  0039DA                     
  6283                           ;main.c: 1504: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  6284  0039DA  0E01               	movlw	1
  6285  0039DC  EC9F  F023         	call	_lcdInst
  6286  0039E0  0E9C               	movlw	156
  6287  0039E2  0100               	movlb	0	; () banked
  6288  0039E4  6FF2               	movwf	??_Nut_remain& (0+255),b
  6289  0039E6  0ED7               	movlw	215
  6290  0039E8                     u6867:
  6291  0039E8  2EE8               	decfsz	wreg,f,c
  6292  0039EA  D7FE               	bra	u6867
  6293  0039EC  2FF2               	decfsz	??_Nut_remain& (0+255),f,b
  6294  0039EE  D7FC               	bra	u6867
  6295                           
  6296                           ;main.c: 1505: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  6297  0039F0  0E80               	movlw	128
  6298  0039F2  EC9F  F023         	call	_lcdInst
  6299  0039F6  0E34               	movlw	52
  6300  0039F8  0100               	movlb	0	; () banked
  6301  0039FA  6FF2               	movwf	??_Nut_remain& (0+255),b
  6302  0039FC  0EF1               	movlw	241
  6303  0039FE                     u6877:
  6304  0039FE  2EE8               	decfsz	wreg,f,c
  6305  003A00  D7FE               	bra	u6877
  6306  003A02  2FF2               	decfsz	??_Nut_remain& (0+255),f,b
  6307  003A04  D7FC               	bra	u6877
  6308  003A06  D000               	nop2	
  6309                           
  6310                           ;main.c: 1506: N_spacingTime +=30;
  6311  003A08  0E1E               	movlw	30
  6312  003A0A  0100               	movlb	0	; () banked
  6313  003A0C  279B               	addwf	_N_spacingTime& (0+255),f,b
  6314  003A0E  0E00               	movlw	0
  6315  003A10  239C               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;main.c: 1507: printf("N:%d",N_counter);
  6319  003A12  0ED4               	movlw	low STR_67
  6320  003A14  6FD4               	movwf	printf@f& (0+255),b
  6321  003A16  0EFF               	movlw	high STR_67
  6322  003A18  6FD5               	movwf	(printf@f+1)& (0+255),b
  6323  003A1A  C0A9  F0D6         	movff	_N_counter,?_printf+2
  6324  003A1E  C0AA  F0D7         	movff	_N_counter+1,?_printf+3
  6325  003A22  ECE5  F014         	call	_printf	;wreg free
  6326  003A26                     l744:
  6327  003A26  0100               	movlb	0	; () banked
  6328  003A28  05BE               	decf	_EndOfProgram& (0+255),w,b
  6329  003A2A  B4D8               	btfsc	status,2,c
  6330  003A2C  D00A               	goto	u4060
  6331                           
  6332                           ; BSR set to: 0
  6333  003A2E  51F0               	movf	Nut_remain@time& (0+255),w,b
  6334  003A30  5D9B               	subwf	_N_spacingTime& (0+255),w,b
  6335  003A32  519C               	movf	(_N_spacingTime+1)& (0+255),w,b
  6336  003A34  0A80               	xorlw	128
  6337  003A36  6FF2               	movwf	??_Nut_remain& (0+255),b
  6338  003A38  51F1               	movf	(Nut_remain@time+1)& (0+255),w,b
  6339  003A3A  0A80               	xorlw	128
  6340  003A3C  59F2               	subwfb	??_Nut_remain& (0+255),w,b
  6341  003A3E  A0D8               	btfss	status,0,c
  6342  003A40  D7CC               	goto	l745
  6343  003A42                     u4060:
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;main.c: 1508: }
  6347                           ;main.c: 1509: N_remain = N_counter;
  6348                           
  6349                           ; BSR set to: 0
  6350  003A42  C0A9  F0A3         	movff	_N_counter,_N_remain
  6351  003A46  C0AA  F0A4         	movff	_N_counter+1,_N_remain+1
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;main.c: 1510: I2C_sendData('8');
  6355  003A4A  0E38               	movlw	56
  6356  003A4C  EC3A  F023         	call	_I2C_sendData
  6357                           
  6358                           ;main.c: 1511: if(EndOfProgram != 1){
  6359  003A50  0100               	movlb	0	; () banked
  6360  003A52  05BE               	decf	_EndOfProgram& (0+255),w,b
  6361  003A54  B4D8               	btfsc	status,2,c
  6362  003A56  0012               	return	
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;main.c: 1512: _delay((unsigned long)((100)*(32000000/4000.0)));
  6366  003A58  0E05               	movlw	5
  6367  003A5A  0100               	movlb	0	; () banked
  6368  003A5C  6FF3               	movwf	(??_Nut_remain+1)& (0+255),b
  6369  003A5E  0E0F               	movlw	15
  6370  003A60  6FF2               	movwf	??_Nut_remain& (0+255),b
  6371  003A62  0EF1               	movlw	241
  6372  003A64                     u6887:
  6373  003A64  2EE8               	decfsz	wreg,f,c
  6374  003A66  D7FE               	bra	u6887
  6375  003A68  2FF2               	decfsz	??_Nut_remain& (0+255),f,b
  6376  003A6A  D7FC               	bra	u6887
  6377  003A6C  2FF3               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  6378  003A6E  D7FA               	bra	u6887
  6379  003A70  0012               	return	
  6380  003A72                     __end_of_Nut_remain:
  6381                           	opt stack 0
  6382                           tblptru	equ	0xFF8
  6383                           tblptrh	equ	0xFF7
  6384                           tblptrl	equ	0xFF6
  6385                           tablat	equ	0xFF5
  6386                           intcon	equ	0xFF2
  6387                           intcon3	equ	0xFF0
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _Nut_dispense *****************
  6400 ;; Defined at:
  6401 ;;		line 1299 in file "main.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  N_max           2   42[BANK0 ] int 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  1    wreg      void 
  6408 ;; Registers used:
  6409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;Total ram usage:        4 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    7
  6422 ;; This function calls:
  6423 ;;		_I2C_sendData
  6424 ;;		_lcdInst
  6425 ;;		_printf
  6426 ;; This function is called by:
  6427 ;;		_main
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text11
  6432  003C62                     __ptext11:
  6433                           	opt stack 0
  6434  003C62                     _Nut_dispense:
  6435                           	opt stack 23
  6436                           
  6437                           ;main.c: 1300: if (N_max == 0){
  6438                           
  6439                           ;incstack = 0
  6440  003C62  0100               	movlb	0	; () banked
  6441  003C64  51F0               	movf	Nut_dispense@N_max& (0+255),w,b
  6442  003C66  11F1               	iorwf	(Nut_dispense@N_max+1)& (0+255),w,b
  6443  003C68  B4D8               	btfsc	status,2,c
  6444  003C6A  0012               	return	
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;main.c: 1302: }
  6448                           ;main.c: 1304: _delay((unsigned long)((100)*(32000000/4000.0)));
  6449                           
  6450                           ; BSR set to: 0
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;main.c: 1301: return;
  6454  003C6C  0E05               	movlw	5
  6455  003C6E  0100               	movlb	0	; () banked
  6456  003C70  6FF3               	movwf	(??_Nut_dispense+1)& (0+255),b
  6457  003C72  0E0F               	movlw	15
  6458  003C74  6FF2               	movwf	??_Nut_dispense& (0+255),b
  6459  003C76  0EF1               	movlw	241
  6460  003C78                     u6897:
  6461  003C78  2EE8               	decfsz	wreg,f,c
  6462  003C7A  D7FE               	bra	u6897
  6463  003C7C  2FF2               	decfsz	??_Nut_dispense& (0+255),f,b
  6464  003C7E  D7FC               	bra	u6897
  6465  003C80  2FF3               	decfsz	(??_Nut_dispense+1)& (0+255),f,b
  6466  003C82  D7FA               	bra	u6897
  6467                           
  6468                           ;main.c: 1305: I2C_sendData('7');
  6469  003C84  0E37               	movlw	55
  6470  003C86  EC3A  F023         	call	_I2C_sendData
  6471                           
  6472                           ;main.c: 1306: N_counter = 0;
  6473  003C8A  0E00               	movlw	0
  6474  003C8C  0100               	movlb	0	; () banked
  6475  003C8E  6FAA               	movwf	(_N_counter+1)& (0+255),b
  6476  003C90  0E00               	movlw	0
  6477  003C92  6FA9               	movwf	_N_counter& (0+255),b
  6478                           
  6479                           ;main.c: 1307: while(NeedToCloseLid != 1 && N_counter < N_max){
  6480  003C94  D022               	goto	l670
  6481  003C96                     
  6482                           ; BSR set to: 0
  6483                           ;main.c: 1309: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  6484                           
  6485                           ; BSR set to: 0
  6486  003C96  0E80               	movlw	128
  6487  003C98  EC9F  F023         	call	_lcdInst
  6488  003C9C  0E34               	movlw	52
  6489  003C9E  0100               	movlb	0	; () banked
  6490  003CA0  6FF2               	movwf	??_Nut_dispense& (0+255),b
  6491  003CA2  0EF1               	movlw	241
  6492  003CA4                     u6907:
  6493  003CA4  2EE8               	decfsz	wreg,f,c
  6494  003CA6  D7FE               	bra	u6907
  6495  003CA8  2FF2               	decfsz	??_Nut_dispense& (0+255),f,b
  6496  003CAA  D7FC               	bra	u6907
  6497  003CAC  D000               	nop2	
  6498                           
  6499                           ;main.c: 1310: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  6500  003CAE  0E01               	movlw	1
  6501  003CB0  EC9F  F023         	call	_lcdInst
  6502  003CB4  0E9C               	movlw	156
  6503  003CB6  0100               	movlb	0	; () banked
  6504  003CB8  6FF2               	movwf	??_Nut_dispense& (0+255),b
  6505  003CBA  0ED7               	movlw	215
  6506  003CBC                     u6917:
  6507  003CBC  2EE8               	decfsz	wreg,f,c
  6508  003CBE  D7FE               	bra	u6917
  6509  003CC0  2FF2               	decfsz	??_Nut_dispense& (0+255),f,b
  6510  003CC2  D7FC               	bra	u6917
  6511                           
  6512                           ;main.c: 1311: printf("N:%d",N_counter);
  6513  003CC4  0ED4               	movlw	low STR_67
  6514  003CC6  0100               	movlb	0	; () banked
  6515  003CC8  6FD4               	movwf	printf@f& (0+255),b
  6516  003CCA  0EFF               	movlw	high STR_67
  6517  003CCC  6FD5               	movwf	(printf@f+1)& (0+255),b
  6518  003CCE  C0A9  F0D6         	movff	_N_counter,?_printf+2
  6519  003CD2  C0AA  F0D7         	movff	_N_counter+1,?_printf+3
  6520  003CD6  ECE5  F014         	call	_printf	;wreg free
  6521  003CDA                     l670:
  6522  003CDA  0100               	movlb	0	; () banked
  6523  003CDC  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  6524  003CDE  B4D8               	btfsc	status,2,c
  6525  003CE0  D00A               	goto	u3980
  6526                           
  6527                           ; BSR set to: 0
  6528  003CE2  51F0               	movf	Nut_dispense@N_max& (0+255),w,b
  6529  003CE4  5DA9               	subwf	_N_counter& (0+255),w,b
  6530  003CE6  51AA               	movf	(_N_counter+1)& (0+255),w,b
  6531  003CE8  0A80               	xorlw	128
  6532  003CEA  6FF2               	movwf	??_Nut_dispense& (0+255),b
  6533  003CEC  51F1               	movf	(Nut_dispense@N_max+1)& (0+255),w,b
  6534  003CEE  0A80               	xorlw	128
  6535  003CF0  59F2               	subwfb	??_Nut_dispense& (0+255),w,b
  6536  003CF2  A0D8               	btfss	status,0,c
  6537  003CF4  D7D0               	goto	l671
  6538  003CF6                     u3980:
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;main.c: 1312: }
  6542                           ;main.c: 1313: I2C_sendData('8');
  6543                           
  6544                           ; BSR set to: 0
  6545                           
  6546                           ; BSR set to: 0
  6547  003CF6  0E38               	movlw	56
  6548  003CF8  EC3A  F023         	call	_I2C_sendData
  6549  003CFC  0012               	return		;funcret
  6550  003CFE                     __end_of_Nut_dispense:
  6551                           	opt stack 0
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           intcon	equ	0xFF2
  6557                           intcon3	equ	0xFF0
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           postdec1	equ	0xFE5
  6561                           fsr1l	equ	0xFE1
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function _I2C_init *****************
  6570 ;; Defined at:
  6571 ;;		line 1265 in file "main.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      void 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;Total ram usage:        0 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    6
  6592 ;; This function calls:
  6593 ;;		_I2C_Master_Init
  6594 ;;		_I2C_Master_Start
  6595 ;;		_I2C_Master_Stop
  6596 ;;		_I2C_Master_Write
  6597 ;; This function is called by:
  6598 ;;		_main
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text12
  6603  0045F4                     __ptext12:
  6604                           	opt stack 0
  6605  0045F4                     _I2C_init:
  6606                           	opt stack 24
  6607                           
  6608                           ;main.c: 1266: I2C_Master_Init(100000);
  6609                           
  6610                           ;incstack = 0
  6611  0045F4  0EA0               	movlw	160
  6612  0045F6  0100               	movlb	0	; () banked
  6613  0045F8  6FD3               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  6614  0045FA  0E86               	movlw	134
  6615  0045FC  6FD4               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  6616  0045FE  0E01               	movlw	1
  6617  004600  6FD5               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  6618  004602  0E00               	movlw	0
  6619  004604  6FD6               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  6620  004606  EC51  F021         	call	_I2C_Master_Init	;wreg free
  6621                           
  6622                           ;main.c: 1267: I2C_Master_Start();
  6623  00460A  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  6624                           
  6625                           ;main.c: 1268: I2C_Master_Write(0b00010000);
  6626  00460E  0E00               	movlw	0
  6627  004610  0100               	movlb	0	; () banked
  6628  004612  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6629  004614  0E10               	movlw	16
  6630  004616  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6631  004618  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  6632                           
  6633                           ;main.c: 1269: I2C_Master_Stop();
  6634  00461C  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  6635  004620  0012               	return	
  6636  004622                     __end_of_I2C_init:
  6637                           	opt stack 0
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           intcon	equ	0xFF2
  6643                           intcon3	equ	0xFF0
  6644                           postinc0	equ	0xFEE
  6645                           wreg	equ	0xFE8
  6646                           postdec1	equ	0xFE5
  6647                           fsr1l	equ	0xFE1
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function _I2C_Master_Init *****************
  6656 ;; Defined at:
  6657 ;;		line 14 in file "I2C.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, status,2, status,0, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;Total ram usage:        8 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    5
  6678 ;; This function calls:
  6679 ;;		___lldiv
  6680 ;; This function is called by:
  6681 ;;		_I2C_init
  6682 ;;		_initRamp
  6683 ;;		_ramp_Rotate
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text13
  6688  0042A2                     __ptext13:
  6689                           	opt stack 0
  6690  0042A2                     _I2C_Master_Init:
  6691                           	opt stack 24
  6692                           
  6693                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  6694                           
  6695                           ;incstack = 0
  6696  0042A2  9AC6               	bcf	4038,5,c	;volatile
  6697                           
  6698                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  6699  0042A4  8694               	bsf	3988,3,c	;volatile
  6700                           
  6701                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  6702  0042A6  8894               	bsf	3988,4,c	;volatile
  6703                           
  6704                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  6705  0042A8  0E80               	movlw	128
  6706  0042AA  6EC7               	movwf	4039,c	;volatile
  6707                           
  6708                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  6709  0042AC  0E28               	movlw	40
  6710  0042AE  6EC6               	movwf	4038,c	;volatile
  6711                           
  6712                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  6713  0042B0  0E00               	movlw	0
  6714  0042B2  6EC5               	movwf	4037,c	;volatile
  6715                           
  6716                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
  6717  0042B4  0E00               	movlw	0
  6718  0042B6  0100               	movlb	0	; () banked
  6719  0042B8  6FC6               	movwf	___lldiv@dividend& (0+255),b
  6720  0042BA  0E48               	movlw	72
  6721  0042BC  6FC7               	movwf	(___lldiv@dividend+1)& (0+255),b
  6722  0042BE  0EE8               	movlw	232
  6723  0042C0  6FC8               	movwf	(___lldiv@dividend+2)& (0+255),b
  6724  0042C2  0E01               	movlw	1
  6725  0042C4  6FC9               	movwf	(___lldiv@dividend+3)& (0+255),b
  6726  0042C6  C0D3  F0D7         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  6727  0042CA  C0D4  F0D8         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  6728  0042CE  C0D5  F0D9         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  6729  0042D2  C0D6  F0DA         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  6730  0042D6  0E02               	movlw	2
  6731  0042D8                     u3765:
  6732  0042D8  90D8               	bcf	status,0,c
  6733  0042DA  37D7               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6734  0042DC  37D8               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6735  0042DE  37D9               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6736  0042E0  37DA               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6737  0042E2  2EE8               	decfsz	wreg,f,c
  6738  0042E4  D7F9               	goto	u3765
  6739  0042E6  C0D7  F0CA         	movff	??_I2C_Master_Init,___lldiv@divisor
  6740  0042EA  C0D8  F0CB         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6741  0042EE  C0D9  F0CC         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6742  0042F2  C0DA  F0CD         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6743  0042F6  EC22  F020         	call	___lldiv	;wreg free
  6744  0042FA  0100               	movlb	0	; () banked
  6745  0042FC  05C6               	decf	?___lldiv& (0+255),w,b
  6746  0042FE  6EC8               	movwf	4040,c	;volatile
  6747                           
  6748                           ; BSR set to: 0
  6749  004300  0012               	return		;funcret
  6750  004302                     __end_of_I2C_Master_Init:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           intcon	equ	0xFF2
  6757                           intcon3	equ	0xFF0
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postdec1	equ	0xFE5
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function ___lldiv *****************
  6770 ;; Defined at:
  6771 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  dividend        4    0[BANK0 ] unsigned long 
  6774 ;;  divisor         4    4[BANK0 ] unsigned long 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  quotient        4    8[BANK0 ] unsigned long 
  6777 ;;  counter         1   12[BANK0 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  4    0[BANK0 ] unsigned long 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6787 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;Total ram usage:       13 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_I2C_Master_Init
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text14
  6802  004044                     __ptext14:
  6803                           	opt stack 0
  6804  004044                     ___lldiv:
  6805                           	opt stack 24
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;incstack = 0
  6809  004044  0E00               	movlw	0
  6810  004046  0100               	movlb	0	; () banked
  6811  004048  6FCE               	movwf	___lldiv@quotient& (0+255),b
  6812  00404A  0E00               	movlw	0
  6813  00404C  6FCF               	movwf	(___lldiv@quotient+1)& (0+255),b
  6814  00404E  0E00               	movlw	0
  6815  004050  6FD0               	movwf	(___lldiv@quotient+2)& (0+255),b
  6816  004052  0E00               	movlw	0
  6817  004054  6FD1               	movwf	(___lldiv@quotient+3)& (0+255),b
  6818                           
  6819                           ; BSR set to: 0
  6820  004056  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6821  004058  11CB               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6822  00405A  11CC               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6823  00405C  11CD               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6824  00405E  B4D8               	btfsc	status,2,c
  6825  004060  D02A               	goto	l1605
  6826                           
  6827                           ; BSR set to: 0
  6828  004062  0E01               	movlw	1
  6829  004064  6FD2               	movwf	___lldiv@counter& (0+255),b
  6830  004066  D006               	goto	l1600
  6831  004068                     
  6832                           ; BSR set to: 0
  6833                           
  6834                           ; BSR set to: 0
  6835  004068  90D8               	bcf	status,0,c
  6836  00406A  37CA               	rlcf	___lldiv@divisor& (0+255),f,b
  6837  00406C  37CB               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6838  00406E  37CC               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6839  004070  37CD               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6840  004072  2BD2               	incf	___lldiv@counter& (0+255),f,b
  6841  004074                     l1600:
  6842                           
  6843                           ; BSR set to: 0
  6844                           
  6845                           ; BSR set to: 0
  6846  004074  AFCD               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6847  004076  D7F8               	goto	l1601
  6848  004078                     u3360:
  6849                           
  6850                           ; BSR set to: 0
  6851                           
  6852                           ; BSR set to: 0
  6853                           
  6854                           ; BSR set to: 0
  6855  004078  90D8               	bcf	status,0,c
  6856  00407A  37CE               	rlcf	___lldiv@quotient& (0+255),f,b
  6857  00407C  37CF               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6858  00407E  37D0               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6859  004080  37D1               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6860                           
  6861                           ; BSR set to: 0
  6862  004082  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6863  004084  5DC6               	subwf	___lldiv@dividend& (0+255),w,b
  6864  004086  51CB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6865  004088  59C7               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6866  00408A  51CC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6867  00408C  59C8               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6868  00408E  51CD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6869  004090  59C9               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6870  004092  A0D8               	btfss	status,0,c
  6871  004094  D009               	goto	l1604
  6872                           
  6873                           ; BSR set to: 0
  6874  004096  51CA               	movf	___lldiv@divisor& (0+255),w,b
  6875  004098  5FC6               	subwf	___lldiv@dividend& (0+255),f,b
  6876  00409A  51CB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6877  00409C  5BC7               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6878  00409E  51CC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6879  0040A0  5BC8               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6880  0040A2  51CD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6881  0040A4  5BC9               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6882                           
  6883                           ; BSR set to: 0
  6884  0040A6  81CE               	bsf	___lldiv@quotient& (0+255),0,b
  6885  0040A8                     l1604:
  6886                           
  6887                           ; BSR set to: 0
  6888                           
  6889                           ; BSR set to: 0
  6890  0040A8  90D8               	bcf	status,0,c
  6891  0040AA  33CD               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6892  0040AC  33CC               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6893  0040AE  33CB               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6894  0040B0  33CA               	rrcf	___lldiv@divisor& (0+255),f,b
  6895                           
  6896                           ; BSR set to: 0
  6897  0040B2  2FD2               	decfsz	___lldiv@counter& (0+255),f,b
  6898  0040B4  D7E1               	goto	u3360
  6899  0040B6                     l1605:
  6900                           
  6901                           ; BSR set to: 0
  6902                           
  6903                           ; BSR set to: 0
  6904  0040B6  C0CE  F0C6         	movff	___lldiv@quotient,?___lldiv
  6905  0040BA  C0CF  F0C7         	movff	___lldiv@quotient+1,?___lldiv+1
  6906  0040BE  C0D0  F0C8         	movff	___lldiv@quotient+2,?___lldiv+2
  6907  0040C2  C0D1  F0C9         	movff	___lldiv@quotient+3,?___lldiv+3
  6908                           
  6909                           ; BSR set to: 0
  6910  0040C6  0012               	return		;funcret
  6911  0040C8                     __end_of___lldiv:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           intcon	equ	0xFF2
  6918                           intcon3	equ	0xFF0
  6919                           postinc0	equ	0xFEE
  6920                           wreg	equ	0xFE8
  6921                           postdec1	equ	0xFE5
  6922                           fsr1l	equ	0xFE1
  6923                           indf2	equ	0xFDF
  6924                           postinc2	equ	0xFDE
  6925                           postdec2	equ	0xFDD
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _I2C_Master_Read *****************
  6931 ;; Defined at:
  6932 ;;		line 120 in file "I2C.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  ackBit          1    wreg     unsigned char 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  ackBit          1    1[BANK0 ] unsigned char 
  6937 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      unsigned char 
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;Total ram usage:        2 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    5
  6954 ;; This function calls:
  6955 ;;		_I2C_Master_Wait
  6956 ;; This function is called by:
  6957 ;;		_main
  6958 ;;		_get_RTC_initial
  6959 ;;		_get_RTC_final
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text15
  6964  004622                     __ptext15:
  6965                           	opt stack 0
  6966  004622                     _I2C_Master_Read:
  6967                           	opt stack 25
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;incstack = 0
  6971                           ;I2C_Master_Read@ackBit stored from wreg
  6972  004622  0100               	movlb	0	; () banked
  6973  004624  6FC7               	movwf	I2C_Master_Read@ackBit& (0+255),b
  6974                           
  6975                           ;I2C.c: 130: unsigned char receivedByte;
  6976                           ;I2C.c: 132: I2C_Master_Wait();
  6977  004626  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  6978                           
  6979                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6980  00462A  86C5               	bsf	4037,3,c	;volatile
  6981                           
  6982                           ;I2C.c: 135: I2C_Master_Wait();
  6983  00462C  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  6984                           
  6985                           ;I2C.c: 136: receivedByte = SSPBUF;
  6986  004630  CFC9 F0C8          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6987                           
  6988                           ;I2C.c: 138: I2C_Master_Wait();
  6989  004634  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  6990                           
  6991                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6992  004638  0100               	movlb	0	; () banked
  6993  00463A  B1C7               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  6994  00463C  D002               	bra	u3925
  6995  00463E  9AC5               	bcf	4037,5,c	;volatile
  6996  004640  D001               	bra	u3926
  6997  004642                     u3925:
  6998  004642  8AC5               	bsf	4037,5,c	;volatile
  6999  004644                     u3926:
  7000                           
  7001                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  7002  004644  88C5               	bsf	4037,4,c	;volatile
  7003                           
  7004                           ;I2C.c: 142: return receivedByte;
  7005  004646  0100               	movlb	0	; () banked
  7006  004648  51C8               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  7007  00464A  0012               	return	
  7008  00464C                     __end_of_I2C_Master_Read:
  7009                           	opt stack 0
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           intcon	equ	0xFF2
  7015                           intcon3	equ	0xFF0
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           postdec1	equ	0xFE5
  7019                           fsr1l	equ	0xFE1
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           fsr2h	equ	0xFDA
  7024                           fsr2l	equ	0xFD9
  7025                           status	equ	0xFD8
  7026                           
  7027 ;; *************** function _Bolt_remain *****************
  7028 ;; Defined at:
  7029 ;;		line 1481 in file "main.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  time            2   42[BANK0 ] int 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;Total ram usage:        4 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		_I2C_sendData
  7052 ;;		_lcdInst
  7053 ;;		_printf
  7054 ;; This function is called by:
  7055 ;;		_main
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text16
  7060  003A72                     __ptext16:
  7061                           	opt stack 0
  7062  003A72                     _Bolt_remain:
  7063                           	opt stack 23
  7064                           
  7065                           ;main.c: 1483: _delay((unsigned long)((100)*(32000000/4000.0)));
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;incstack = 0
  7069  003A72  0E05               	movlw	5
  7070  003A74  0100               	movlb	0	; () banked
  7071  003A76  6FF3               	movwf	(??_Bolt_remain+1)& (0+255),b
  7072  003A78  0E0F               	movlw	15
  7073  003A7A  6FF2               	movwf	??_Bolt_remain& (0+255),b
  7074  003A7C  0EF1               	movlw	241
  7075  003A7E                     u6927:
  7076  003A7E  2EE8               	decfsz	wreg,f,c
  7077  003A80  D7FE               	bra	u6927
  7078  003A82  2FF2               	decfsz	??_Bolt_remain& (0+255),f,b
  7079  003A84  D7FC               	bra	u6927
  7080  003A86  2FF3               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
  7081  003A88  D7FA               	bra	u6927
  7082                           
  7083                           ;main.c: 1484: I2C_sendData('5');
  7084  003A8A  0E35               	movlw	53
  7085  003A8C  EC3A  F023         	call	_I2C_sendData
  7086                           
  7087                           ;main.c: 1485: while(EndOfProgram!= 1 && B_spacingTime < time){
  7088  003A90  D026               	goto	l735
  7089  003A92                     
  7090                           ;main.c: 1486: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7091  003A92  0E80               	movlw	128
  7092  003A94  EC9F  F023         	call	_lcdInst
  7093  003A98  0E34               	movlw	52
  7094  003A9A  0100               	movlb	0	; () banked
  7095  003A9C  6FF2               	movwf	??_Bolt_remain& (0+255),b
  7096  003A9E  0EF1               	movlw	241
  7097  003AA0                     u6937:
  7098  003AA0  2EE8               	decfsz	wreg,f,c
  7099  003AA2  D7FE               	bra	u6937
  7100  003AA4  2FF2               	decfsz	??_Bolt_remain& (0+255),f,b
  7101  003AA6  D7FC               	bra	u6937
  7102  003AA8  D000               	nop2	
  7103                           
  7104                           ;main.c: 1487: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7105  003AAA  0E01               	movlw	1
  7106  003AAC  EC9F  F023         	call	_lcdInst
  7107  003AB0  0E9C               	movlw	156
  7108  003AB2  0100               	movlb	0	; () banked
  7109  003AB4  6FF2               	movwf	??_Bolt_remain& (0+255),b
  7110  003AB6  0ED7               	movlw	215
  7111  003AB8                     u6947:
  7112  003AB8  2EE8               	decfsz	wreg,f,c
  7113  003ABA  D7FE               	bra	u6947
  7114  003ABC  2FF2               	decfsz	??_Bolt_remain& (0+255),f,b
  7115  003ABE  D7FC               	bra	u6947
  7116                           
  7117                           ;main.c: 1488: B_spacingTime +=30;
  7118  003AC0  0E1E               	movlw	30
  7119  003AC2  0100               	movlb	0	; () banked
  7120  003AC4  279D               	addwf	_B_spacingTime& (0+255),f,b
  7121  003AC6  0E00               	movlw	0
  7122  003AC8  239E               	addwfc	(_B_spacingTime+1)& (0+255),f,b
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 1489: printf("B:%d",B_counter);
  7126  003ACA  0ECF               	movlw	low STR_66
  7127  003ACC  6FD4               	movwf	printf@f& (0+255),b
  7128  003ACE  0EFF               	movlw	high STR_66
  7129  003AD0  6FD5               	movwf	(printf@f+1)& (0+255),b
  7130  003AD2  C0AD  F0D6         	movff	_B_counter,?_printf+2
  7131  003AD6  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  7132  003ADA  ECE5  F014         	call	_printf	;wreg free
  7133  003ADE                     l735:
  7134  003ADE  0100               	movlb	0	; () banked
  7135  003AE0  05BE               	decf	_EndOfProgram& (0+255),w,b
  7136  003AE2  B4D8               	btfsc	status,2,c
  7137  003AE4  D00A               	goto	u4150
  7138                           
  7139                           ; BSR set to: 0
  7140  003AE6  51F0               	movf	Bolt_remain@time& (0+255),w,b
  7141  003AE8  5D9D               	subwf	_B_spacingTime& (0+255),w,b
  7142  003AEA  519E               	movf	(_B_spacingTime+1)& (0+255),w,b
  7143  003AEC  0A80               	xorlw	128
  7144  003AEE  6FF2               	movwf	??_Bolt_remain& (0+255),b
  7145  003AF0  51F1               	movf	(Bolt_remain@time+1)& (0+255),w,b
  7146  003AF2  0A80               	xorlw	128
  7147  003AF4  59F2               	subwfb	??_Bolt_remain& (0+255),w,b
  7148  003AF6  A0D8               	btfss	status,0,c
  7149  003AF8  D7CC               	goto	l736
  7150  003AFA                     u4150:
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;main.c: 1490: }
  7154                           ;main.c: 1491: B_remain = B_counter;
  7155                           
  7156                           ; BSR set to: 0
  7157  003AFA  C0AD  F0A5         	movff	_B_counter,_B_remain
  7158  003AFE  C0AE  F0A6         	movff	_B_counter+1,_B_remain+1
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;main.c: 1492: I2C_sendData('6');
  7162  003B02  0E36               	movlw	54
  7163  003B04  EC3A  F023         	call	_I2C_sendData
  7164                           
  7165                           ;main.c: 1493: if(EndOfProgram != 1){
  7166  003B08  0100               	movlb	0	; () banked
  7167  003B0A  05BE               	decf	_EndOfProgram& (0+255),w,b
  7168  003B0C  B4D8               	btfsc	status,2,c
  7169  003B0E  0012               	return	
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;main.c: 1494: _delay((unsigned long)((100)*(32000000/4000.0)));
  7173  003B10  0E05               	movlw	5
  7174  003B12  0100               	movlb	0	; () banked
  7175  003B14  6FF3               	movwf	(??_Bolt_remain+1)& (0+255),b
  7176  003B16  0E0F               	movlw	15
  7177  003B18  6FF2               	movwf	??_Bolt_remain& (0+255),b
  7178  003B1A  0EF1               	movlw	241
  7179  003B1C                     u6957:
  7180  003B1C  2EE8               	decfsz	wreg,f,c
  7181  003B1E  D7FE               	bra	u6957
  7182  003B20  2FF2               	decfsz	??_Bolt_remain& (0+255),f,b
  7183  003B22  D7FC               	bra	u6957
  7184  003B24  2FF3               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
  7185  003B26  D7FA               	bra	u6957
  7186  003B28  0012               	return	
  7187  003B2A                     __end_of_Bolt_remain:
  7188                           	opt stack 0
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           intcon	equ	0xFF2
  7194                           intcon3	equ	0xFF0
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           postdec1	equ	0xFE5
  7198                           fsr1l	equ	0xFE1
  7199                           indf2	equ	0xFDF
  7200                           postinc2	equ	0xFDE
  7201                           postdec2	equ	0xFDD
  7202                           fsr2h	equ	0xFDA
  7203                           fsr2l	equ	0xFD9
  7204                           status	equ	0xFD8
  7205                           
  7206 ;; *************** function _Bolt_dispense *****************
  7207 ;; Defined at:
  7208 ;;		line 1283 in file "main.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  B_max           2   42[BANK0 ] int 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      void 
  7215 ;; Registers used:
  7216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7222 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;Total ram usage:        4 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    7
  7229 ;; This function calls:
  7230 ;;		_I2C_sendData
  7231 ;;		_lcdInst
  7232 ;;		_printf
  7233 ;; This function is called by:
  7234 ;;		_main
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text17
  7239  003D98                     __ptext17:
  7240                           	opt stack 0
  7241  003D98                     _Bolt_dispense:
  7242                           	opt stack 23
  7243                           
  7244                           ;main.c: 1284: if (B_max == 0){
  7245                           
  7246                           ;incstack = 0
  7247  003D98  0100               	movlb	0	; () banked
  7248  003D9A  51F0               	movf	Bolt_dispense@B_max& (0+255),w,b
  7249  003D9C  11F1               	iorwf	(Bolt_dispense@B_max+1)& (0+255),w,b
  7250  003D9E  B4D8               	btfsc	status,2,c
  7251  003DA0  0012               	return	
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 1286: }
  7255                           ;main.c: 1289: _delay((unsigned long)((100)*(32000000/4000.0)));
  7256                           
  7257                           ; BSR set to: 0
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;main.c: 1285: return;
  7261  003DA2  0E05               	movlw	5
  7262  003DA4  0100               	movlb	0	; () banked
  7263  003DA6  6FF3               	movwf	(??_Bolt_dispense+1)& (0+255),b
  7264  003DA8  0E0F               	movlw	15
  7265  003DAA  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  7266  003DAC  0EF1               	movlw	241
  7267  003DAE                     u6967:
  7268  003DAE  2EE8               	decfsz	wreg,f,c
  7269  003DB0  D7FE               	bra	u6967
  7270  003DB2  2FF2               	decfsz	??_Bolt_dispense& (0+255),f,b
  7271  003DB4  D7FC               	bra	u6967
  7272  003DB6  2FF3               	decfsz	(??_Bolt_dispense+1)& (0+255),f,b
  7273  003DB8  D7FA               	bra	u6967
  7274                           
  7275                           ;main.c: 1290: I2C_sendData('5');
  7276  003DBA  0E35               	movlw	53
  7277  003DBC  EC3A  F023         	call	_I2C_sendData
  7278                           
  7279                           ;main.c: 1291: while(NeedToCloseLid != 1 && B_counter < B_max){
  7280  003DC0  D022               	goto	l661
  7281  003DC2                     
  7282                           ;main.c: 1292: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7283  003DC2  0E01               	movlw	1
  7284  003DC4  EC9F  F023         	call	_lcdInst
  7285  003DC8  0E9C               	movlw	156
  7286  003DCA  0100               	movlb	0	; () banked
  7287  003DCC  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  7288  003DCE  0ED7               	movlw	215
  7289  003DD0                     u6977:
  7290  003DD0  2EE8               	decfsz	wreg,f,c
  7291  003DD2  D7FE               	bra	u6977
  7292  003DD4  2FF2               	decfsz	??_Bolt_dispense& (0+255),f,b
  7293  003DD6  D7FC               	bra	u6977
  7294                           
  7295                           ;main.c: 1293: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7296  003DD8  0E80               	movlw	128
  7297  003DDA  EC9F  F023         	call	_lcdInst
  7298  003DDE  0E34               	movlw	52
  7299  003DE0  0100               	movlb	0	; () banked
  7300  003DE2  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  7301  003DE4  0EF1               	movlw	241
  7302  003DE6                     u6987:
  7303  003DE6  2EE8               	decfsz	wreg,f,c
  7304  003DE8  D7FE               	bra	u6987
  7305  003DEA  2FF2               	decfsz	??_Bolt_dispense& (0+255),f,b
  7306  003DEC  D7FC               	bra	u6987
  7307  003DEE  D000               	nop2	
  7308                           
  7309                           ;main.c: 1294: printf("B:%d",B_counter);
  7310  003DF0  0ECF               	movlw	low STR_66
  7311  003DF2  0100               	movlb	0	; () banked
  7312  003DF4  6FD4               	movwf	printf@f& (0+255),b
  7313  003DF6  0EFF               	movlw	high STR_66
  7314  003DF8  6FD5               	movwf	(printf@f+1)& (0+255),b
  7315  003DFA  C0AD  F0D6         	movff	_B_counter,?_printf+2
  7316  003DFE  C0AE  F0D7         	movff	_B_counter+1,?_printf+3
  7317  003E02  ECE5  F014         	call	_printf	;wreg free
  7318  003E06                     l661:
  7319  003E06  0100               	movlb	0	; () banked
  7320  003E08  05BD               	decf	_NeedToCloseLid& (0+255),w,b
  7321  003E0A  B4D8               	btfsc	status,2,c
  7322  003E0C  D00A               	goto	u3950
  7323                           
  7324                           ; BSR set to: 0
  7325  003E0E  51F0               	movf	Bolt_dispense@B_max& (0+255),w,b
  7326  003E10  5DAD               	subwf	_B_counter& (0+255),w,b
  7327  003E12  51AE               	movf	(_B_counter+1)& (0+255),w,b
  7328  003E14  0A80               	xorlw	128
  7329  003E16  6FF2               	movwf	??_Bolt_dispense& (0+255),b
  7330  003E18  51F1               	movf	(Bolt_dispense@B_max+1)& (0+255),w,b
  7331  003E1A  0A80               	xorlw	128
  7332  003E1C  59F2               	subwfb	??_Bolt_dispense& (0+255),w,b
  7333  003E1E  A0D8               	btfss	status,0,c
  7334  003E20  D7D0               	goto	l662
  7335  003E22                     u3950:
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;main.c: 1295: }
  7339                           ;main.c: 1296: I2C_sendData('6');
  7340                           
  7341                           ; BSR set to: 0
  7342                           
  7343                           ; BSR set to: 0
  7344  003E22  0E36               	movlw	54
  7345  003E24  EC3A  F023         	call	_I2C_sendData
  7346  003E28  0012               	return		;funcret
  7347  003E2A                     __end_of_Bolt_dispense:
  7348                           	opt stack 0
  7349                           tblptru	equ	0xFF8
  7350                           tblptrh	equ	0xFF7
  7351                           tblptrl	equ	0xFF6
  7352                           tablat	equ	0xFF5
  7353                           intcon	equ	0xFF2
  7354                           intcon3	equ	0xFF0
  7355                           postinc0	equ	0xFEE
  7356                           wreg	equ	0xFE8
  7357                           postdec1	equ	0xFE5
  7358                           fsr1l	equ	0xFE1
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           fsr2h	equ	0xFDA
  7363                           fsr2l	equ	0xFD9
  7364                           status	equ	0xFD8
  7365                           
  7366 ;; *************** function _printf *****************
  7367 ;; Defined at:
  7368 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  7371 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
  7372 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
  7373 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
  7374 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
  7375 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
  7376 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
  7377 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
  7378 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
  7379 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
  7380 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
  7381 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
  7382 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
  7383 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
  7384 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
  7385 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
  7386 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
  7387 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
  7388 ;;		 -> STR_2(20), STR_1(16), 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  idx             1   28[BANK0 ] unsigned char 
  7391 ;;  tmpval          4    0        struct .
  7392 ;;  width           2   39[BANK0 ] int 
  7393 ;;  val             2   36[BANK0 ] unsigned int 
  7394 ;;  len             2   34[BANK0 ] unsigned int 
  7395 ;;  ap              2   32[BANK0 ] PTR void [1]
  7396 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7397 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
  7398 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
  7399 ;;  c               1   41[BANK0 ] char 
  7400 ;;  flag            1   38[BANK0 ] unsigned char 
  7401 ;;  prec            1   29[BANK0 ] char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  2   14[BANK0 ] int 
  7404 ;; Registers used:
  7405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7411 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;Total ram usage:       28 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    6
  7418 ;; This function calls:
  7419 ;;		___lwdiv
  7420 ;;		___lwmod
  7421 ;;		___wmul
  7422 ;;		_isdigit
  7423 ;;		_putch
  7424 ;; This function is called by:
  7425 ;;		_main
  7426 ;;		_Bolt_dispense
  7427 ;;		_Nut_dispense
  7428 ;;		_Spacer_dispense
  7429 ;;		_Washer_dispense
  7430 ;;		_Bolt_remain
  7431 ;;		_Nut_remain
  7432 ;;		_Spacer_remain
  7433 ;;		_Washer_remain
  7434 ;;		_count_gear
  7435 ;;		_nut_washer_remain
  7436 ;;		_bolt_spacer_remain
  7437 ;;		_all_remain
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text18
  7442  0029CA                     __ptext18:
  7443                           	opt stack 0
  7444  0029CA                     _printf:
  7445                           	opt stack 24
  7446                           
  7447                           ;doprnt.c: 466: va_list ap;
  7448                           ;doprnt.c: 499: signed char c;
  7449                           ;doprnt.c: 501: int width;
  7450                           ;doprnt.c: 506: signed char prec;
  7451                           ;doprnt.c: 508: unsigned char flag;
  7452                           ;doprnt.c: 523: union {
  7453                           ;doprnt.c: 524: unsigned long vd;
  7454                           ;doprnt.c: 525: double integ;
  7455                           ;doprnt.c: 526: } tmpval;
  7456                           ;doprnt.c: 528: unsigned int val;
  7457                           ;doprnt.c: 529: unsigned len;
  7458                           ;doprnt.c: 530: const char * cp;
  7459                           ;doprnt.c: 533: *ap = __va_start();
  7460                           
  7461                           ;incstack = 0
  7462  0029CA  0ED6               	movlw	low (?_printf+2)
  7463  0029CC  0100               	movlb	0	; () banked
  7464  0029CE  6FE6               	movwf	printf@ap& (0+255),b
  7465  0029D0  0E00               	movlw	high (?_printf+2)
  7466  0029D2  6FE7               	movwf	(printf@ap+1)& (0+255),b
  7467                           
  7468                           ;doprnt.c: 536: while(c = *f++) {
  7469  0029D4  D20F               	goto	u3740
  7470  0029D6                     
  7471                           ; BSR set to: 0
  7472                           ;doprnt.c: 538: if(c != '%')
  7473                           
  7474                           ; BSR set to: 0
  7475  0029D6  0E25               	movlw	37
  7476  0029D8  19EF               	xorwf	printf@c& (0+255),w,b
  7477  0029DA  B4D8               	btfsc	status,2,c
  7478  0029DC  D004               	goto	l1179
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 540: {
  7482                           ;doprnt.c: 541: (putch(c) );
  7483  0029DE  51EF               	movf	printf@c& (0+255),w,b
  7484  0029E0  EC93  F023         	call	_putch
  7485                           
  7486                           ;doprnt.c: 542: continue;
  7487  0029E4  D207               	goto	u3740
  7488  0029E6                     l1179:
  7489                           
  7490                           ;doprnt.c: 543: }
  7491                           ;doprnt.c: 546: width = 0;
  7492  0029E6  0E00               	movlw	0
  7493  0029E8  0100               	movlb	0	; () banked
  7494  0029EA  6FEE               	movwf	(printf@width+1)& (0+255),b
  7495  0029EC  0E00               	movlw	0
  7496  0029EE  6FED               	movwf	printf@width& (0+255),b
  7497                           
  7498                           ;doprnt.c: 548: flag = 0;
  7499  0029F0  0E00               	movlw	0
  7500  0029F2  6FEC               	movwf	printf@flag& (0+255),b
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;doprnt.c: 551: switch(*f) {
  7504                           
  7505                           ;doprnt.c: 550: for(;;) {
  7506  0029F4  D004               	goto	l1181
  7507  0029F6                     
  7508                           ;doprnt.c: 580: flag |= 0x04;
  7509                           
  7510                           ; BSR set to: 0
  7511  0029F6  0100               	movlb	0	; () banked
  7512  0029F8  85EC               	bsf	printf@flag& (0+255),2,b
  7513                           
  7514                           ;doprnt.c: 581: f++;
  7515  0029FA  4BD4               	infsnz	printf@f& (0+255),f,b
  7516  0029FC  2BD5               	incf	(printf@f+1)& (0+255),f,b
  7517  0029FE                     l1181:
  7518                           
  7519                           ; BSR set to: 0
  7520  0029FE  C0D4  FFF6         	movff	printf@f,tblptrl
  7521  002A02  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7522  002A06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7523  002A06  6AF8               	clrf	tblptru,c
  7524  002A08                     	endif
  7525  002A08                     	if	0	;tblptru may be non-zero
  7526  002A08                     	endif
  7527  002A08  0008               	tblrd		*
  7528  002A0A  50F5               	movf	tablat,w,c
  7529                           
  7530                           ; Switch size 1, requested type "space"
  7531                           ; Number of cases is 1, Range of values is 48 to 48
  7532                           ; switch strategies available:
  7533                           ; Name         Instructions Cycles
  7534                           ; simple_byte            4     3 (average)
  7535                           ;	Chosen strategy is simple_byte
  7536  002A0C  0A30               	xorlw	48	; case 48
  7537  002A0E  B4D8               	btfsc	status,2,c
  7538  002A10  D7F2               	goto	l1182
  7539                           
  7540                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7541                           
  7542                           ;doprnt.c: 586: }
  7543                           
  7544                           ;doprnt.c: 585: break;
  7545  002A12  C0D4  FFF6         	movff	printf@f,tblptrl
  7546  002A16  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7547  002A1A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7548  002A1A  6AF8               	clrf	tblptru,c
  7549  002A1C                     	endif
  7550  002A1C                     	if	0	;tblptru may be non-zero
  7551  002A1C                     	endif
  7552  002A1C  0008               	tblrd		*
  7553  002A1E  50F5               	movf	tablat,w,c
  7554  002A20  EC73  F023         	call	_isdigit
  7555  002A24  A0D8               	btfss	status,0,c
  7556  002A26  D0AE               	goto	l1189
  7557                           
  7558                           ;doprnt.c: 598: width = 0;
  7559  002A28  0E00               	movlw	0
  7560  002A2A  0100               	movlb	0	; () banked
  7561  002A2C  6FEE               	movwf	(printf@width+1)& (0+255),b
  7562  002A2E  0E00               	movlw	0
  7563  002A30  6FED               	movwf	printf@width& (0+255),b
  7564  002A32                     
  7565                           ;doprnt.c: 600: width *= 10;
  7566                           
  7567                           ; BSR set to: 0
  7568  002A32  C0ED  F0CE         	movff	printf@width,___wmul@multiplier
  7569  002A36  C0EE  F0CF         	movff	printf@width+1,___wmul@multiplier+1
  7570  002A3A  0E00               	movlw	0
  7571  002A3C  0100               	movlb	0	; () banked
  7572  002A3E  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7573  002A40  0E0A               	movlw	10
  7574  002A42  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  7575  002A44  EC26  F023         	call	___wmul	;wreg free
  7576  002A48  C0CE  F0ED         	movff	?___wmul,printf@width
  7577  002A4C  C0CF  F0EE         	movff	?___wmul+1,printf@width+1
  7578                           
  7579                           ;doprnt.c: 601: width += *f++ - '0';
  7580  002A50  0ED0               	movlw	208
  7581  002A52  0100               	movlb	0	; () banked
  7582  002A54  6FDE               	movwf	??_printf& (0+255),b
  7583  002A56  0EFF               	movlw	255
  7584  002A58  6FDF               	movwf	(??_printf+1)& (0+255),b
  7585  002A5A  C0D4  FFF6         	movff	printf@f,tblptrl
  7586  002A5E  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7587  002A62                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7588  002A62  6AF8               	clrf	tblptru,c
  7589  002A64                     	endif
  7590  002A64                     	if	0	;tblptru may be non-zero
  7591  002A64                     	endif
  7592  002A64  0008               	tblrd		*
  7593  002A66  50F5               	movf	tablat,w,c
  7594  002A68  6FE0               	movwf	(??_printf+2)& (0+255),b
  7595  002A6A  6BE1               	clrf	(??_printf+3)& (0+255),b
  7596  002A6C  51DE               	movf	??_printf& (0+255),w,b
  7597  002A6E  27E0               	addwf	(??_printf+2)& (0+255),f,b
  7598  002A70  51DF               	movf	(??_printf+1)& (0+255),w,b
  7599  002A72  23E1               	addwfc	(??_printf+3)& (0+255),f,b
  7600  002A74  51E0               	movf	(??_printf+2)& (0+255),w,b
  7601  002A76  27ED               	addwf	printf@width& (0+255),f,b
  7602  002A78  51E1               	movf	(??_printf+3)& (0+255),w,b
  7603  002A7A  23EE               	addwfc	(printf@width+1)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606  002A7C  4BD4               	infsnz	printf@f& (0+255),f,b
  7607  002A7E  2BD5               	incf	(printf@f+1)& (0+255),f,b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7611  002A80  C0D4  FFF6         	movff	printf@f,tblptrl
  7612  002A84  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7613  002A88                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7614  002A88  6AF8               	clrf	tblptru,c
  7615  002A8A                     	endif
  7616  002A8A                     	if	0	;tblptru may be non-zero
  7617  002A8A                     	endif
  7618  002A8A  0008               	tblrd		*
  7619  002A8C  50F5               	movf	tablat,w,c
  7620  002A8E  EC73  F023         	call	_isdigit
  7621  002A92  A0D8               	btfss	status,0,c
  7622  002A94  D077               	goto	l1189
  7623  002A96  D7CD               	goto	l1187
  7624  002A98                     
  7625                           ;doprnt.c: 721: flag |= 0x80;
  7626  002A98  0100               	movlb	0	; () banked
  7627  002A9A  8FEC               	bsf	printf@flag& (0+255),7,b
  7628                           
  7629                           ;doprnt.c: 723: break;
  7630  002A9C  D08F               	goto	l1194
  7631  002A9E                     
  7632                           ; BSR set to: 0
  7633                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7634                           
  7635                           ; BSR set to: 0
  7636  002A9E  C0E6  FFD9         	movff	printf@ap,fsr2l
  7637  002AA2  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  7638  002AA6  CFDE F0E4          	movff	postinc2,printf@cp
  7639  002AAA  CFDD F0E5          	movff	postdec2,printf@cp+1
  7640                           
  7641                           ; BSR set to: 0
  7642  002AAE  0E02               	movlw	2
  7643  002AB0  27E6               	addwf	printf@ap& (0+255),f,b
  7644  002AB2  0E00               	movlw	0
  7645  002AB4  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;doprnt.c: 740: if(!cp)
  7649  002AB6  51E4               	movf	printf@cp& (0+255),w,b
  7650  002AB8  11E5               	iorwf	(printf@cp+1)& (0+255),w,b
  7651  002ABA  A4D8               	btfss	status,2,c
  7652  002ABC  D004               	goto	l1197
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;doprnt.c: 741: cp = "(null)";
  7656  002ABE  0E97               	movlw	low STR_98
  7657  002AC0  6FE4               	movwf	printf@cp& (0+255),b
  7658  002AC2  0EFF               	movlw	high STR_98
  7659  002AC4  6FE5               	movwf	(printf@cp+1)& (0+255),b
  7660  002AC6                     l1197:
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;doprnt.c: 745: len = 0;
  7664                           
  7665                           ; BSR set to: 0
  7666  002AC6  0E00               	movlw	0
  7667  002AC8  6FE9               	movwf	(printf@len+1)& (0+255),b
  7668  002ACA  0E00               	movlw	0
  7669  002ACC  6FE8               	movwf	printf@len& (0+255),b
  7670                           
  7671                           ;doprnt.c: 746: while(cp[len])
  7672  002ACE  D003               	goto	l1198
  7673  002AD0                     
  7674                           ;doprnt.c: 747: len++;
  7675                           
  7676                           ; BSR set to: 0
  7677  002AD0  0100               	movlb	0	; () banked
  7678  002AD2  4BE8               	infsnz	printf@len& (0+255),f,b
  7679  002AD4  2BE9               	incf	(printf@len+1)& (0+255),f,b
  7680  002AD6                     l1198:
  7681                           
  7682                           ; BSR set to: 0
  7683                           
  7684                           ; BSR set to: 0
  7685  002AD6  51E8               	movf	printf@len& (0+255),w,b
  7686  002AD8  25E4               	addwf	printf@cp& (0+255),w,b
  7687  002ADA  6FDE               	movwf	??_printf& (0+255),b
  7688  002ADC  51E9               	movf	(printf@len+1)& (0+255),w,b
  7689  002ADE  21E5               	addwfc	(printf@cp+1)& (0+255),w,b
  7690  002AE0  6FDF               	movwf	(??_printf+1)& (0+255),b
  7691  002AE2  C0DE  FFF6         	movff	??_printf,tblptrl
  7692  002AE6  C0DF  FFF7         	movff	??_printf+1,tblptrh
  7693  002AEA  0E00               	movlw	low (__mediumconst shr (0+16))
  7694  002AEC  6EF8               	movwf	tblptru,c
  7695  002AEE  0E0F               	movlw	(high __ramtop+-1)
  7696  002AF0  64F7               	cpfsgt	tblptrh,c
  7697  002AF2  D003               	bra	u3507
  7698  002AF4  0008               	tblrd		*
  7699  002AF6  50F5               	movf	tablat,w,c
  7700  002AF8  D005               	bra	u3500
  7701  002AFA                     u3507:
  7702  002AFA  CFF6 FFE9          	movff	tblptrl,fsr0l
  7703  002AFE  CFF7 FFEA          	movff	tblptrh,fsr0h
  7704  002B02  50EF               	movf	indf0,w,c
  7705  002B04                     u3500:
  7706  002B04  0900               	iorlw	0
  7707  002B06  A4D8               	btfss	status,2,c
  7708  002B08  D7E3               	goto	l1199
  7709                           
  7710                           ;doprnt.c: 757: if(width > len)
  7711  002B0A  0100               	movlb	0	; () banked
  7712  002B0C  51ED               	movf	printf@width& (0+255),w,b
  7713  002B0E  5DE8               	subwf	printf@len& (0+255),w,b
  7714  002B10  51EE               	movf	(printf@width+1)& (0+255),w,b
  7715  002B12  59E9               	subwfb	(printf@len+1)& (0+255),w,b
  7716  002B14  B0D8               	btfsc	status,0,c
  7717  002B16  D005               	goto	l1201
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;doprnt.c: 758: width -= len;
  7721  002B18  51E8               	movf	printf@len& (0+255),w,b
  7722  002B1A  5FED               	subwf	printf@width& (0+255),f,b
  7723  002B1C  51E9               	movf	(printf@len+1)& (0+255),w,b
  7724  002B1E  5BEE               	subwfb	(printf@width+1)& (0+255),f,b
  7725  002B20  D008               	goto	l1203
  7726  002B22                     l1201:
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;doprnt.c: 759: else
  7730                           ;doprnt.c: 760: width = 0;
  7731                           
  7732                           ; BSR set to: 0
  7733  002B22  0E00               	movlw	0
  7734  002B24  6FEE               	movwf	(printf@width+1)& (0+255),b
  7735  002B26  0E00               	movlw	0
  7736  002B28  6FED               	movwf	printf@width& (0+255),b
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;doprnt.c: 764: while(width--)
  7740  002B2A  D003               	goto	l1203
  7741  002B2C                     l5013:
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;doprnt.c: 765: (putch(' ') );
  7745  002B2C  0E20               	movlw	32
  7746  002B2E  EC93  F023         	call	_putch
  7747  002B32                     l1203:
  7748  002B32  0100               	movlb	0	; () banked
  7749  002B34  07ED               	decf	printf@width& (0+255),f,b
  7750  002B36  A0D8               	btfss	status,0,c
  7751  002B38  07EE               	decf	(printf@width+1)& (0+255),f,b
  7752  002B3A  29ED               	incf	printf@width& (0+255),w,b
  7753  002B3C  E1F7               	bnz	l5013
  7754  002B3E  29EE               	incf	(printf@width+1)& (0+255),w,b
  7755  002B40  B4D8               	btfsc	status,2,c
  7756  002B42  D017               	goto	l1206
  7757  002B44  D7F3               	goto	l1204
  7758  002B46                     l5017:
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;doprnt.c: 768: (putch(*cp++) );
  7762  002B46  C0E4  FFF6         	movff	printf@cp,tblptrl
  7763  002B4A  C0E5  FFF7         	movff	printf@cp+1,tblptrh
  7764  002B4E  0E00               	movlw	low (__mediumconst shr (0+16))
  7765  002B50  6EF8               	movwf	tblptru,c
  7766  002B52  0E0F               	movlw	(high __ramtop+-1)
  7767  002B54  64F7               	cpfsgt	tblptrh,c
  7768  002B56  D003               	bra	u3547
  7769  002B58  0008               	tblrd		*
  7770  002B5A  50F5               	movf	tablat,w,c
  7771  002B5C  D005               	bra	u3540
  7772  002B5E                     u3547:
  7773  002B5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7774  002B62  CFF7 FFEA          	movff	tblptrh,fsr0h
  7775  002B66  50EF               	movf	indf0,w,c
  7776  002B68                     u3540:
  7777  002B68  EC93  F023         	call	_putch
  7778  002B6C  0100               	movlb	0	; () banked
  7779  002B6E  4BE4               	infsnz	printf@cp& (0+255),f,b
  7780  002B70  2BE5               	incf	(printf@cp+1)& (0+255),f,b
  7781  002B72                     l1206:
  7782                           
  7783                           ; BSR set to: 0
  7784                           
  7785                           ; BSR set to: 0
  7786  002B72  07E8               	decf	printf@len& (0+255),f,b
  7787  002B74  A0D8               	btfss	status,0,c
  7788  002B76  07E9               	decf	(printf@len+1)& (0+255),f,b
  7789  002B78  29E8               	incf	printf@len& (0+255),w,b
  7790  002B7A  E1E5               	bnz	l5017
  7791  002B7C  29E9               	incf	(printf@len+1)& (0+255),w,b
  7792  002B7E  B4D8               	btfsc	status,2,c
  7793  002B80  D139               	goto	u3740
  7794  002B82  D7E1               	goto	l1207
  7795  002B84                     l1189:
  7796                           
  7797                           ; BSR set to: 0
  7798  002B84  C0D4  FFF6         	movff	printf@f,tblptrl
  7799  002B88  C0D5  FFF7         	movff	printf@f+1,tblptrh
  7800  002B8C  0100               	movlb	0	; () banked
  7801  002B8E  4BD4               	infsnz	printf@f& (0+255),f,b
  7802  002B90  2BD5               	incf	(printf@f+1)& (0+255),f,b
  7803  002B92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7804  002B92  6AF8               	clrf	tblptru,c
  7805  002B94                     	endif
  7806  002B94                     	if	0	;tblptru may be non-zero
  7807  002B94                     	endif
  7808  002B94  0008               	tblrd		*
  7809  002B96  CFF5 F0EF          	movff	tablat,printf@c
  7810  002B9A  51EF               	movf	printf@c& (0+255),w,b
  7811                           
  7812                           ; Switch size 1, requested type "space"
  7813                           ; Number of cases is 5, Range of values is 0 to 120
  7814                           ; switch strategies available:
  7815                           ; Name         Instructions Cycles
  7816                           ; simple_byte           16     9 (average)
  7817                           ;	Chosen strategy is simple_byte
  7818  002B9C  0A00               	xorlw	0	; case 0
  7819  002B9E  B4D8               	btfsc	status,2,c
  7820  002BA0  0012               	return	
  7821  002BA2  0A64               	xorlw	100	; case 100
  7822  002BA4  B4D8               	btfsc	status,2,c
  7823  002BA6  D00A               	goto	l1194
  7824  002BA8  0A0D               	xorlw	13	; case 105
  7825  002BAA  B4D8               	btfsc	status,2,c
  7826  002BAC  D007               	goto	l1194
  7827  002BAE  0A1A               	xorlw	26	; case 115
  7828  002BB0  B4D8               	btfsc	status,2,c
  7829  002BB2  D775               	goto	l1196
  7830  002BB4  0A0B               	xorlw	11	; case 120
  7831  002BB6  B4D8               	btfsc	status,2,c
  7832  002BB8  D76F               	goto	l1195
  7833  002BBA  D11C               	goto	u3740
  7834  002BBC                     l1194:
  7835                           
  7836                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7837  002BBC  0100               	movlb	0	; () banked
  7838  002BBE  BFEC               	btfsc	printf@flag& (0+255),7,b
  7839  002BC0  D015               	goto	l1210
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;doprnt.c: 1253: {
  7843                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7844  002BC2  C0E6  FFD9         	movff	printf@ap,fsr2l
  7845  002BC6  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  7846  002BCA  CFDE F0EA          	movff	postinc2,printf@val
  7847  002BCE  CFDD F0EB          	movff	postdec2,printf@val+1
  7848                           
  7849                           ; BSR set to: 0
  7850  002BD2  0E02               	movlw	2
  7851  002BD4  27E6               	addwf	printf@ap& (0+255),f,b
  7852  002BD6  0E00               	movlw	0
  7853  002BD8  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;doprnt.c: 1261: if((int)val < 0) {
  7857  002BDA  AFEB               	btfss	(printf@val+1)& (0+255),7,b
  7858  002BDC  D04A               	goto	l1213
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;doprnt.c: 1262: flag |= 0x03;
  7862  002BDE  0E03               	movlw	3
  7863  002BE0  13EC               	iorwf	printf@flag& (0+255),f,b
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;doprnt.c: 1263: val = -val;
  7867  002BE2  6DEA               	negf	printf@val& (0+255),b
  7868  002BE4  1FEB               	comf	(printf@val+1)& (0+255),f,b
  7869  002BE6  B0D8               	btfsc	status,0,c
  7870  002BE8  2BEB               	incf	(printf@val+1)& (0+255),f,b
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;doprnt.c: 1264: }
  7874                           ;doprnt.c: 1266: }
  7875  002BEA  D043               	goto	l1213
  7876  002BEC                     l1210:
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;doprnt.c: 1268: else
  7880                           ;doprnt.c: 1273: {
  7881                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7882                           
  7883                           ; BSR set to: 0
  7884  002BEC  C0E6  FFD9         	movff	printf@ap,fsr2l
  7885  002BF0  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  7886  002BF4  CFDE F0EA          	movff	postinc2,printf@val
  7887  002BF8  CFDD F0EB          	movff	postdec2,printf@val+1
  7888                           
  7889                           ; BSR set to: 0
  7890  002BFC  0E02               	movlw	2
  7891  002BFE  27E6               	addwf	printf@ap& (0+255),f,b
  7892  002C00  0E00               	movlw	0
  7893  002C02  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;doprnt.c: 1287: }
  7897                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7898  002C04  D036               	goto	l1213
  7899  002C06                     
  7900                           ; BSR set to: 0
  7901                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7902                           
  7903                           ; BSR set to: 0
  7904  002C06  0E01               	movlw	1
  7905  002C08  6FEF               	movwf	printf@c& (0+255),b
  7906  002C0A                     l5043:
  7907                           
  7908                           ; BSR set to: 0
  7909  002C0A  0E05               	movlw	5
  7910  002C0C  19EF               	xorwf	printf@c& (0+255),w,b
  7911  002C0E  B4D8               	btfsc	status,2,c
  7912  002C10  D038               	goto	l1218
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;doprnt.c: 1306: if(val < dpowers[c])
  7916                           
  7917                           ; BSR set to: 0
  7918                           
  7919                           ; BSR set to: 0
  7920  002C12  51EF               	movf	printf@c& (0+255),w,b
  7921  002C14  0D02               	mullw	2
  7922  002C16  0E84               	movlw	low _dpowers
  7923  002C18  24F3               	addwf	prodl,w,c
  7924  002C1A  6EF6               	movwf	tblptrl,c
  7925  002C1C  0EFC               	movlw	high _dpowers
  7926  002C1E  20F4               	addwfc	prodh,w,c
  7927  002C20  6EF7               	movwf	tblptrh,c
  7928  002C22                     	if	1	;There are 3 active tblptr bytes
  7929  002C22  6AF8               	clrf	tblptru,c
  7930  002C24  0E00               	movlw	low (__mediumconst shr (0+16))
  7931  002C26  22F8               	addwfc	tblptru,f,c
  7932  002C28                     	endif
  7933  002C28  0009               	tblrd		*+
  7934  002C2A  50F5               	movf	tablat,w,c
  7935  002C2C  5DEA               	subwf	printf@val& (0+255),w,b
  7936  002C2E  0009               	tblrd		*+
  7937  002C30  50F5               	movf	tablat,w,c
  7938  002C32  59EB               	subwfb	(printf@val+1)& (0+255),w,b
  7939  002C34  A0D8               	btfss	status,0,c
  7940  002C36  D025               	goto	l1218
  7941                           
  7942                           ; BSR set to: 0
  7943                           
  7944                           ; BSR set to: 0
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;doprnt.c: 1307: break;
  7948  002C38  2BEF               	incf	printf@c& (0+255),f,b
  7949  002C3A  D7E7               	goto	l5043
  7950  002C3C                     
  7951                           ; BSR set to: 0
  7952                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7953                           
  7954                           ; BSR set to: 0
  7955  002C3C  0E01               	movlw	1
  7956  002C3E  6FEF               	movwf	printf@c& (0+255),b
  7957  002C40                     l5057:
  7958                           
  7959                           ; BSR set to: 0
  7960  002C40  0E04               	movlw	4
  7961  002C42  19EF               	xorwf	printf@c& (0+255),w,b
  7962  002C44  B4D8               	btfsc	status,2,c
  7963  002C46  D01D               	goto	l1218
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7967                           
  7968                           ; BSR set to: 0
  7969                           
  7970                           ; BSR set to: 0
  7971  002C48  51EF               	movf	printf@c& (0+255),w,b
  7972  002C4A  0D02               	mullw	2
  7973  002C4C  0E8E               	movlw	low _hexpowers
  7974  002C4E  24F3               	addwf	prodl,w,c
  7975  002C50  6EF6               	movwf	tblptrl,c
  7976  002C52  0EFC               	movlw	high _hexpowers
  7977  002C54  20F4               	addwfc	prodh,w,c
  7978  002C56  6EF7               	movwf	tblptrh,c
  7979  002C58                     	if	1	;There are 3 active tblptr bytes
  7980  002C58  6AF8               	clrf	tblptru,c
  7981  002C5A  0E00               	movlw	low (__mediumconst shr (0+16))
  7982  002C5C  22F8               	addwfc	tblptru,f,c
  7983  002C5E                     	endif
  7984  002C5E  0009               	tblrd		*+
  7985  002C60  50F5               	movf	tablat,w,c
  7986  002C62  5DEA               	subwf	printf@val& (0+255),w,b
  7987  002C64  0009               	tblrd		*+
  7988  002C66  50F5               	movf	tablat,w,c
  7989  002C68  59EB               	subwfb	(printf@val+1)& (0+255),w,b
  7990  002C6A  A0D8               	btfss	status,0,c
  7991  002C6C  D00A               	goto	l1218
  7992                           
  7993                           ; BSR set to: 0
  7994                           
  7995                           ; BSR set to: 0
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;doprnt.c: 1318: break;
  7999  002C6E  2BEF               	incf	printf@c& (0+255),f,b
  8000  002C70  D7E7               	goto	l5057
  8001  002C72                     l1213:
  8002                           
  8003                           ; BSR set to: 0
  8004                           
  8005                           ; BSR set to: 0
  8006  002C72  51EC               	movf	printf@flag& (0+255),w,b
  8007  002C74  0B80               	andlw	128
  8008                           
  8009                           ; Switch size 1, requested type "space"
  8010                           ; Number of cases is 2, Range of values is 0 to 128
  8011                           ; switch strategies available:
  8012                           ; Name         Instructions Cycles
  8013                           ; simple_byte            7     4 (average)
  8014                           ;	Chosen strategy is simple_byte
  8015  002C76  0A00               	xorlw	0	; case 0
  8016  002C78  B4D8               	btfsc	status,2,c
  8017  002C7A  D7C5               	goto	l1214
  8018  002C7C  0A80               	xorlw	128	; case 128
  8019  002C7E  B4D8               	btfsc	status,2,c
  8020  002C80  D7DD               	goto	l1219
  8021  002C82                     l1218:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8025                           
  8026                           ; BSR set to: 0
  8027  002C82  51ED               	movf	printf@width& (0+255),w,b
  8028  002C84  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  8029  002C86  B4D8               	btfsc	status,2,c
  8030  002C88  D009               	goto	l1223
  8031                           
  8032                           ; BSR set to: 0
  8033  002C8A  C0EC  F0DE         	movff	printf@flag,??_printf
  8034  002C8E  0E03               	movlw	3
  8035  002C90  17DE               	andwf	??_printf& (0+255),f,b
  8036  002C92  B4D8               	btfsc	status,2,c
  8037  002C94  D003               	goto	l1223
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;doprnt.c: 1346: width--;
  8041  002C96  07ED               	decf	printf@width& (0+255),f,b
  8042  002C98  A0D8               	btfss	status,0,c
  8043  002C9A  07EE               	decf	(printf@width+1)& (0+255),f,b
  8044  002C9C                     l1223:
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;doprnt.c: 1381: if(width > c)
  8048                           
  8049                           ; BSR set to: 0
  8050  002C9C  0E80               	movlw	128
  8051  002C9E  BFEF               	btfsc	printf@c& (0+255),7,b
  8052  002CA0  0E7F               	movlw	127
  8053  002CA2  6FDE               	movwf	??_printf& (0+255),b
  8054  002CA4  51ED               	movf	printf@width& (0+255),w,b
  8055  002CA6  5DEF               	subwf	printf@c& (0+255),w,b
  8056  002CA8  51EE               	movf	(printf@width+1)& (0+255),w,b
  8057  002CAA  0A80               	xorlw	128
  8058  002CAC  59DE               	subwfb	??_printf& (0+255),w,b
  8059  002CAE  B0D8               	btfsc	status,0,c
  8060  002CB0  D007               	goto	l1224
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;doprnt.c: 1382: width -= c;
  8064  002CB2  51EF               	movf	printf@c& (0+255),w,b
  8065  002CB4  5FED               	subwf	printf@width& (0+255),f,b
  8066  002CB6  0E00               	movlw	0
  8067  002CB8  BFEF               	btfsc	printf@c& (0+255),7,b
  8068  002CBA  0EFF               	movlw	255
  8069  002CBC  5BEE               	subwfb	(printf@width+1)& (0+255),f,b
  8070  002CBE  D004               	goto	l1225
  8071  002CC0                     l1224:
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;doprnt.c: 1383: else
  8075                           ;doprnt.c: 1384: width = 0;
  8076                           
  8077                           ; BSR set to: 0
  8078  002CC0  0E00               	movlw	0
  8079  002CC2  6FEE               	movwf	(printf@width+1)& (0+255),b
  8080  002CC4  0E00               	movlw	0
  8081  002CC6  6FED               	movwf	printf@width& (0+255),b
  8082  002CC8                     l1225:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;doprnt.c: 1387: if(flag & 0x04) {
  8086                           
  8087                           ; BSR set to: 0
  8088  002CC8  A5EC               	btfss	printf@flag& (0+255),2,b
  8089  002CCA  D016               	goto	l1226
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;doprnt.c: 1392: if(flag & 0x03)
  8093  002CCC  C0EC  F0DE         	movff	printf@flag,??_printf
  8094  002CD0  0E03               	movlw	3
  8095  002CD2  17DE               	andwf	??_printf& (0+255),f,b
  8096  002CD4  B4D8               	btfsc	status,2,c
  8097  002CD6  D003               	goto	l1227
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;doprnt.c: 1393: (putch('-') );
  8101  002CD8  0E2D               	movlw	45
  8102  002CDA  EC93  F023         	call	_putch
  8103  002CDE                     l1227:
  8104                           
  8105                           ;doprnt.c: 1415: if(width)
  8106  002CDE  0100               	movlb	0	; () banked
  8107  002CE0  51ED               	movf	printf@width& (0+255),w,b
  8108  002CE2  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  8109  002CE4  B4D8               	btfsc	status,2,c
  8110  002CE6  D020               	goto	l1235
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;doprnt.c: 1417: (putch('0') );
  8114                           
  8115                           ; BSR set to: 0
  8116                           
  8117                           ;doprnt.c: 1416: do
  8118  002CE8  0E30               	movlw	48
  8119  002CEA  EC93  F023         	call	_putch
  8120                           
  8121                           ;doprnt.c: 1418: while(--width);
  8122  002CEE  0100               	movlb	0	; () banked
  8123  002CF0  07ED               	decf	printf@width& (0+255),f,b
  8124  002CF2  A0D8               	btfss	status,0,c
  8125  002CF4  07EE               	decf	(printf@width+1)& (0+255),f,b
  8126  002CF6  D7F4               	goto	L9
  8127  002CF8                     l1226:
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;doprnt.c: 1422: {
  8131                           ;doprnt.c: 1424: if(width
  8132                           ;doprnt.c: 1428: )
  8133                           
  8134                           ; BSR set to: 0
  8135  002CF8  51ED               	movf	printf@width& (0+255),w,b
  8136  002CFA  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  8137  002CFC  B4D8               	btfsc	status,2,c
  8138  002CFE  D00B               	goto	u3720
  8139  002D00                     u3710:
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;doprnt.c: 1430: (putch(' ') );
  8143                           
  8144                           ; BSR set to: 0
  8145                           
  8146                           ;doprnt.c: 1429: do
  8147  002D00  0E20               	movlw	32
  8148  002D02  EC93  F023         	call	_putch
  8149                           
  8150                           ;doprnt.c: 1431: while(--width);
  8151  002D06  0100               	movlb	0	; () banked
  8152  002D08  07ED               	decf	printf@width& (0+255),f,b
  8153  002D0A  A0D8               	btfss	status,0,c
  8154  002D0C  07EE               	decf	(printf@width+1)& (0+255),f,b
  8155  002D0E  51ED               	movf	printf@width& (0+255),w,b
  8156  002D10  11EE               	iorwf	(printf@width+1)& (0+255),w,b
  8157  002D12  A4D8               	btfss	status,2,c
  8158  002D14  D7F5               	goto	u3710
  8159  002D16                     u3720:
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;doprnt.c: 1438: if(flag & 0x03)
  8163                           
  8164                           ; BSR set to: 0
  8165                           
  8166                           ; BSR set to: 0
  8167  002D16  C0EC  F0DE         	movff	printf@flag,??_printf
  8168  002D1A  0E03               	movlw	3
  8169  002D1C  17DE               	andwf	??_printf& (0+255),f,b
  8170  002D1E  B4D8               	btfsc	status,2,c
  8171  002D20  D003               	goto	l1235
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;doprnt.c: 1439: (putch('-') );
  8175  002D22  0E2D               	movlw	45
  8176  002D24  EC93  F023         	call	_putch
  8177  002D28                     l1235:
  8178                           
  8179                           ;doprnt.c: 1469: }
  8180                           ;doprnt.c: 1472: prec = c;
  8181  002D28  C0EF  F0E3         	movff	printf@c,printf@prec
  8182                           
  8183                           ;doprnt.c: 1474: while(prec--) {
  8184  002D2C  D05E               	goto	l1236
  8185  002D2E                     
  8186                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8187  002D2E  0100               	movlb	0	; () banked
  8188  002D30  51E3               	movf	printf@prec& (0+255),w,b
  8189  002D32  0D02               	mullw	2
  8190  002D34  0E84               	movlw	low _dpowers
  8191  002D36  24F3               	addwf	prodl,w,c
  8192  002D38  6EF6               	movwf	tblptrl,c
  8193  002D3A  0EFC               	movlw	high _dpowers
  8194  002D3C  20F4               	addwfc	prodh,w,c
  8195  002D3E  6EF7               	movwf	tblptrh,c
  8196  002D40                     	if	1	;There are 3 active tblptr bytes
  8197  002D40  6AF8               	clrf	tblptru,c
  8198  002D42  0E00               	movlw	low (__mediumconst shr (0+16))
  8199  002D44  22F8               	addwfc	tblptru,f,c
  8200  002D46                     	endif
  8201  002D46  0009               	tblrd		*+
  8202  002D48  CFF5 F0C8          	movff	tablat,___lwdiv@divisor
  8203  002D4C  000A               	tblrd		*-
  8204  002D4E  CFF5 F0C9          	movff	tablat,___lwdiv@divisor+1
  8205  002D52  C0EA  F0C6         	movff	printf@val,___lwdiv@dividend
  8206  002D56  C0EB  F0C7         	movff	printf@val+1,___lwdiv@dividend+1
  8207  002D5A  ECAF  F021         	call	___lwdiv	;wreg free
  8208  002D5E  C0C6  F0CD         	movff	?___lwdiv,___lwmod@dividend
  8209  002D62  C0C7  F0CE         	movff	?___lwdiv+1,___lwmod@dividend+1
  8210  002D66  0E00               	movlw	0
  8211  002D68  0100               	movlb	0	; () banked
  8212  002D6A  6FD0               	movwf	(___lwmod@divisor+1)& (0+255),b
  8213  002D6C  0E0A               	movlw	10
  8214  002D6E  6FCF               	movwf	___lwmod@divisor& (0+255),b
  8215  002D70  EC96  F022         	call	___lwmod	;wreg free
  8216  002D74  0100               	movlb	0	; () banked
  8217  002D76  51CD               	movf	?___lwmod& (0+255),w,b
  8218  002D78  0F30               	addlw	48
  8219  002D7A  6FEF               	movwf	printf@c& (0+255),b
  8220                           
  8221                           ;doprnt.c: 1491: break;
  8222  002D7C  D033               	goto	l1240
  8223  002D7E                     
  8224                           ; BSR set to: 0
  8225                           ;doprnt.c: 1499: {
  8226                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8227                           
  8228                           ; BSR set to: 0
  8229  002D7E  C0EA  F0C6         	movff	printf@val,___lwdiv@dividend
  8230  002D82  C0EB  F0C7         	movff	printf@val+1,___lwdiv@dividend+1
  8231  002D86  51E3               	movf	printf@prec& (0+255),w,b
  8232  002D88  0D02               	mullw	2
  8233  002D8A  0E8E               	movlw	low _hexpowers
  8234  002D8C  24F3               	addwf	prodl,w,c
  8235  002D8E  6EF6               	movwf	tblptrl,c
  8236  002D90  0EFC               	movlw	high _hexpowers
  8237  002D92  20F4               	addwfc	prodh,w,c
  8238  002D94  6EF7               	movwf	tblptrh,c
  8239  002D96                     	if	1	;There are 3 active tblptr bytes
  8240  002D96  6AF8               	clrf	tblptru,c
  8241  002D98  0E00               	movlw	low (__mediumconst shr (0+16))
  8242  002D9A  22F8               	addwfc	tblptru,f,c
  8243  002D9C                     	endif
  8244  002D9C  0009               	tblrd		*+
  8245  002D9E  CFF5 F0C8          	movff	tablat,___lwdiv@divisor
  8246  002DA2  000A               	tblrd		*-
  8247  002DA4  CFF5 F0C9          	movff	tablat,___lwdiv@divisor+1
  8248  002DA8  ECAF  F021         	call	___lwdiv	;wreg free
  8249  002DAC  0100               	movlb	0	; () banked
  8250  002DAE  51C6               	movf	?___lwdiv& (0+255),w,b
  8251  002DB0  0B0F               	andlw	15
  8252  002DB2  6FE2               	movwf	printf@idx& (0+255),b
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8256  002DB4  51E2               	movf	printf@idx& (0+255),w,b
  8257  002DB6  0D01               	mullw	1
  8258  002DB8  0EDC               	movlw	low STR_99
  8259  002DBA  24F3               	addwf	prodl,w,c
  8260  002DBC  6EF6               	movwf	tblptrl,c
  8261  002DBE  0EFD               	movlw	high STR_99
  8262  002DC0  20F4               	addwfc	prodh,w,c
  8263  002DC2  6EF7               	movwf	tblptrh,c
  8264  002DC4                     	if	1	;There are 3 active tblptr bytes
  8265  002DC4  6AF8               	clrf	tblptru,c
  8266  002DC6  0E00               	movlw	low (__mediumconst shr (0+16))
  8267  002DC8  22F8               	addwfc	tblptru,f,c
  8268  002DCA                     	endif
  8269  002DCA  0008               	tblrd		*
  8270  002DCC  CFF5 F0EF          	movff	tablat,printf@c
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;doprnt.c: 1523: }
  8274                           
  8275                           ;doprnt.c: 1508: }
  8276                           ;doprnt.c: 1510: break;
  8277  002DD0  D009               	goto	l1240
  8278  002DD2                     
  8279                           ; BSR set to: 0
  8280  002DD2  0100               	movlb	0	; () banked
  8281  002DD4  51EC               	movf	printf@flag& (0+255),w,b
  8282  002DD6  0B80               	andlw	128
  8283                           
  8284                           ; Switch size 1, requested type "space"
  8285                           ; Number of cases is 2, Range of values is 0 to 128
  8286                           ; switch strategies available:
  8287                           ; Name         Instructions Cycles
  8288                           ; simple_byte            7     4 (average)
  8289                           ;	Chosen strategy is simple_byte
  8290  002DD8  0A00               	xorlw	0	; case 0
  8291  002DDA  B4D8               	btfsc	status,2,c
  8292  002DDC  D7A8               	goto	l1239
  8293  002DDE  0A80               	xorlw	128	; case 128
  8294  002DE0  B4D8               	btfsc	status,2,c
  8295  002DE2  D7CD               	goto	l1241
  8296  002DE4                     l1240:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;doprnt.c: 1524: (putch(c) );
  8300                           
  8301                           ; BSR set to: 0
  8302  002DE4  51EF               	movf	printf@c& (0+255),w,b
  8303  002DE6  EC93  F023         	call	_putch
  8304  002DEA                     l1236:
  8305  002DEA  0100               	movlb	0	; () banked
  8306  002DEC  07E3               	decf	printf@prec& (0+255),f,b
  8307  002DEE  29E3               	incf	printf@prec& (0+255),w,b
  8308  002DF0  A4D8               	btfss	status,2,c
  8309  002DF2  D7EF               	goto	l1238
  8310  002DF4                     u3740:
  8311                           
  8312                           ; BSR set to: 0
  8313                           
  8314                           ; BSR set to: 0
  8315  002DF4  C0D4  FFF6         	movff	printf@f,tblptrl
  8316  002DF8  C0D5  FFF7         	movff	printf@f+1,tblptrh
  8317  002DFC  0100               	movlb	0	; () banked
  8318  002DFE  4BD4               	infsnz	printf@f& (0+255),f,b
  8319  002E00  2BD5               	incf	(printf@f+1)& (0+255),f,b
  8320  002E02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8321  002E02  6AF8               	clrf	tblptru,c
  8322  002E04                     	endif
  8323  002E04                     	if	0	;tblptru may be non-zero
  8324  002E04                     	endif
  8325  002E04  0008               	tblrd		*
  8326  002E06  CFF5 F0EF          	movff	tablat,printf@c
  8327  002E0A  51EF               	movf	printf@c& (0+255),w,b
  8328  002E0C  B4D8               	btfsc	status,2,c
  8329  002E0E  0012               	return	
  8330  002E10  D5E2               	goto	l1178
  8331  002E12                     __end_of_printf:
  8332                           	opt stack 0
  8333                           tblptru	equ	0xFF8
  8334                           tblptrh	equ	0xFF7
  8335                           tblptrl	equ	0xFF6
  8336                           tablat	equ	0xFF5
  8337                           prodh	equ	0xFF4
  8338                           prodl	equ	0xFF3
  8339                           intcon	equ	0xFF2
  8340                           intcon3	equ	0xFF0
  8341                           indf0	equ	0xFEF
  8342                           postinc0	equ	0xFEE
  8343                           fsr0h	equ	0xFEA
  8344                           fsr0l	equ	0xFE9
  8345                           wreg	equ	0xFE8
  8346                           postdec1	equ	0xFE5
  8347                           fsr1l	equ	0xFE1
  8348                           indf2	equ	0xFDF
  8349                           postinc2	equ	0xFDE
  8350                           postdec2	equ	0xFDD
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8
  8354                           
  8355 ;; *************** function _putch *****************
  8356 ;; Defined at:
  8357 ;;		line 24 in file "lcd.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  data            1    wreg     unsigned char 
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;  data            1    2[BANK0 ] unsigned char 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0, cstack
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;Total ram usage:        1 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    5
  8378 ;; This function calls:
  8379 ;;		_lcdNibble
  8380 ;; This function is called by:
  8381 ;;		_printf
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text19
  8386  004726                     __ptext19:
  8387                           	opt stack 0
  8388  004726                     _putch:
  8389                           	opt stack 24
  8390                           
  8391                           ;incstack = 0
  8392                           ;putch@data stored from wreg
  8393  004726  0100               	movlb	0	; () banked
  8394  004728  6FC8               	movwf	putch@data& (0+255),b
  8395                           
  8396                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8397  00472A  848C               	bsf	3980,2,c	;volatile
  8398                           
  8399                           ;lcd.c: 33: lcdNibble(data);
  8400  00472C  0100               	movlb	0	; () banked
  8401  00472E  51C8               	movf	putch@data& (0+255),w,b
  8402  004730  EC15  F01F         	call	_lcdNibble
  8403                           
  8404                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8405  004734  0EA0               	movlw	160
  8406  004736                     u6997:
  8407  004736  D000               	nop2	
  8408  004738  2EE8               	decfsz	wreg,f,c
  8409  00473A  D7FD               	bra	u6997
  8410  00473C  0012               	return		;funcret
  8411  00473E                     __end_of_putch:
  8412                           	opt stack 0
  8413                           tblptru	equ	0xFF8
  8414                           tblptrh	equ	0xFF7
  8415                           tblptrl	equ	0xFF6
  8416                           tablat	equ	0xFF5
  8417                           prodh	equ	0xFF4
  8418                           prodl	equ	0xFF3
  8419                           intcon	equ	0xFF2
  8420                           intcon3	equ	0xFF0
  8421                           indf0	equ	0xFEF
  8422                           postinc0	equ	0xFEE
  8423                           fsr0h	equ	0xFEA
  8424                           fsr0l	equ	0xFE9
  8425                           wreg	equ	0xFE8
  8426                           postdec1	equ	0xFE5
  8427                           fsr1l	equ	0xFE1
  8428                           indf2	equ	0xFDF
  8429                           postinc2	equ	0xFDE
  8430                           postdec2	equ	0xFDD
  8431                           fsr2h	equ	0xFDA
  8432                           fsr2l	equ	0xFD9
  8433                           status	equ	0xFD8
  8434                           
  8435 ;; *************** function _isdigit *****************
  8436 ;; Defined at:
  8437 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  c               1    wreg     unsigned char 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  c               1    2[BANK0 ] unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;		None               void
  8444 ;; Registers used:
  8445 ;;		wreg, status,2, status,0
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;Total ram usage:        3 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    4
  8458 ;; This function calls:
  8459 ;;		Nothing
  8460 ;; This function is called by:
  8461 ;;		_printf
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text20
  8466  0046E6                     __ptext20:
  8467                           	opt stack 0
  8468  0046E6                     _isdigit:
  8469                           	opt stack 25
  8470                           
  8471                           ;incstack = 0
  8472                           ;isdigit@c stored from wreg
  8473  0046E6  0100               	movlb	0	; () banked
  8474  0046E8  6FC8               	movwf	isdigit@c& (0+255),b
  8475  0046EA  0E00               	movlw	0
  8476  0046EC  0100               	movlb	0	; () banked
  8477  0046EE  6FC7               	movwf	_isdigit$1869& (0+255),b
  8478                           
  8479                           ; BSR set to: 0
  8480  0046F0  0E3A               	movlw	58
  8481  0046F2  61C8               	cpfslt	isdigit@c& (0+255),b
  8482  0046F4  D005               	goto	l1574
  8483                           
  8484                           ; BSR set to: 0
  8485  0046F6  0E2F               	movlw	47
  8486  0046F8  65C8               	cpfsgt	isdigit@c& (0+255),b
  8487  0046FA  D002               	goto	l1574
  8488                           
  8489                           ; BSR set to: 0
  8490  0046FC  0E01               	movlw	1
  8491  0046FE  6FC7               	movwf	_isdigit$1869& (0+255),b
  8492  004700                     l1574:
  8493                           
  8494                           ; BSR set to: 0
  8495                           
  8496                           ; BSR set to: 0
  8497  004700  C0C7  F0C6         	movff	_isdigit$1869,??_isdigit
  8498  004704  31C6               	rrcf	??_isdigit& (0+255),w,b
  8499  004706  0012               	return	
  8500  004708                     __end_of_isdigit:
  8501                           	opt stack 0
  8502                           tblptru	equ	0xFF8
  8503                           tblptrh	equ	0xFF7
  8504                           tblptrl	equ	0xFF6
  8505                           tablat	equ	0xFF5
  8506                           prodh	equ	0xFF4
  8507                           prodl	equ	0xFF3
  8508                           intcon	equ	0xFF2
  8509                           intcon3	equ	0xFF0
  8510                           indf0	equ	0xFEF
  8511                           postinc0	equ	0xFEE
  8512                           fsr0h	equ	0xFEA
  8513                           fsr0l	equ	0xFE9
  8514                           wreg	equ	0xFE8
  8515                           postdec1	equ	0xFE5
  8516                           fsr1l	equ	0xFE1
  8517                           indf2	equ	0xFDF
  8518                           postinc2	equ	0xFDE
  8519                           postdec2	equ	0xFDD
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function ___wmul *****************
  8525 ;; Defined at:
  8526 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  multiplier      2    8[BANK0 ] unsigned int 
  8529 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  product         2   12[BANK0 ] unsigned int 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  2    8[BANK0 ] unsigned int 
  8534 ;; Registers used:
  8535 ;;		wreg, status,2, status,0, prodl, prodh
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;Total ram usage:        6 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    4
  8548 ;; This function calls:
  8549 ;;		Nothing
  8550 ;; This function is called by:
  8551 ;;		_main
  8552 ;;		_printf
  8553 ;;		_get_RTC_initial
  8554 ;;		_get_RTC_final
  8555 ;;		_store_prev
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text21
  8560  00464C                     __ptext21:
  8561                           	opt stack 0
  8562  00464C                     ___wmul:
  8563                           	opt stack 25
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;incstack = 0
  8567  00464C  0100               	movlb	0	; () banked
  8568  00464E  51CE               	movf	___wmul@multiplier& (0+255),w,b
  8569  004650  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  8570  004652  CFF3 F0D2          	movff	prodl,___wmul@product
  8571  004656  CFF4 F0D3          	movff	prodh,___wmul@product+1
  8572  00465A  51CE               	movf	___wmul@multiplier& (0+255),w,b
  8573  00465C  03D1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8574  00465E  50F3               	movf	prodl,w,c
  8575  004660  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  8576  004662  51CF               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8577  004664  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  8578  004666  50F3               	movf	prodl,w,c
  8579  004668  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  8580                           
  8581                           ; BSR set to: 0
  8582  00466A  C0D2  F0CE         	movff	___wmul@product,?___wmul
  8583  00466E  C0D3  F0CF         	movff	___wmul@product+1,?___wmul+1
  8584  004672  0012               	return	
  8585  004674                     __end_of___wmul:
  8586                           	opt stack 0
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           intcon	equ	0xFF2
  8594                           intcon3	equ	0xFF0
  8595                           indf0	equ	0xFEF
  8596                           postinc0	equ	0xFEE
  8597                           fsr0h	equ	0xFEA
  8598                           fsr0l	equ	0xFE9
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function ___lwmod *****************
  8610 ;; Defined at:
  8611 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  dividend        2    7[BANK0 ] unsigned int 
  8614 ;;  divisor         2    9[BANK0 ] unsigned int 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  counter         1   11[BANK0 ] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  2    7[BANK0 ] unsigned int 
  8619 ;; Registers used:
  8620 ;;		wreg, status,2, status,0
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;Total ram usage:        5 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    4
  8633 ;; This function calls:
  8634 ;;		Nothing
  8635 ;; This function is called by:
  8636 ;;		_printf
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text22
  8641  00452C                     __ptext22:
  8642                           	opt stack 0
  8643  00452C                     ___lwmod:
  8644                           	opt stack 25
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;incstack = 0
  8648  00452C  0100               	movlb	0	; () banked
  8649  00452E  51CF               	movf	___lwmod@divisor& (0+255),w,b
  8650  004530  11D0               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8651  004532  B4D8               	btfsc	status,2,c
  8652  004534  D018               	goto	l1668
  8653                           
  8654                           ; BSR set to: 0
  8655  004536  0E01               	movlw	1
  8656  004538  6FD1               	movwf	___lwmod@counter& (0+255),b
  8657  00453A  D004               	goto	l1663
  8658  00453C                     
  8659                           ; BSR set to: 0
  8660                           
  8661                           ; BSR set to: 0
  8662  00453C  90D8               	bcf	status,0,c
  8663  00453E  37CF               	rlcf	___lwmod@divisor& (0+255),f,b
  8664  004540  37D0               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8665  004542  2BD1               	incf	___lwmod@counter& (0+255),f,b
  8666  004544                     l1663:
  8667                           
  8668                           ; BSR set to: 0
  8669                           
  8670                           ; BSR set to: 0
  8671  004544  AFD0               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8672  004546  D7FA               	goto	l1664
  8673  004548                     u3420:
  8674                           
  8675                           ; BSR set to: 0
  8676                           
  8677                           ; BSR set to: 0
  8678                           
  8679                           ; BSR set to: 0
  8680  004548  51CF               	movf	___lwmod@divisor& (0+255),w,b
  8681  00454A  5DCD               	subwf	___lwmod@dividend& (0+255),w,b
  8682  00454C  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8683  00454E  59CE               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8684  004550  A0D8               	btfss	status,0,c
  8685  004552  D004               	goto	l1667
  8686                           
  8687                           ; BSR set to: 0
  8688  004554  51CF               	movf	___lwmod@divisor& (0+255),w,b
  8689  004556  5FCD               	subwf	___lwmod@dividend& (0+255),f,b
  8690  004558  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8691  00455A  5BCE               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8692  00455C                     l1667:
  8693                           
  8694                           ; BSR set to: 0
  8695                           
  8696                           ; BSR set to: 0
  8697  00455C  90D8               	bcf	status,0,c
  8698  00455E  33D0               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8699  004560  33CF               	rrcf	___lwmod@divisor& (0+255),f,b
  8700                           
  8701                           ; BSR set to: 0
  8702  004562  2FD1               	decfsz	___lwmod@counter& (0+255),f,b
  8703  004564  D7F1               	goto	u3420
  8704  004566                     l1668:
  8705                           
  8706                           ; BSR set to: 0
  8707                           
  8708                           ; BSR set to: 0
  8709  004566  C0CD  F0CD         	movff	___lwmod@dividend,?___lwmod
  8710  00456A  C0CE  F0CE         	movff	___lwmod@dividend+1,?___lwmod+1
  8711                           
  8712                           ; BSR set to: 0
  8713  00456E  0012               	return		;funcret
  8714  004570                     __end_of___lwmod:
  8715                           	opt stack 0
  8716                           tblptru	equ	0xFF8
  8717                           tblptrh	equ	0xFF7
  8718                           tblptrl	equ	0xFF6
  8719                           tablat	equ	0xFF5
  8720                           prodh	equ	0xFF4
  8721                           prodl	equ	0xFF3
  8722                           intcon	equ	0xFF2
  8723                           intcon3	equ	0xFF0
  8724                           indf0	equ	0xFEF
  8725                           postinc0	equ	0xFEE
  8726                           fsr0h	equ	0xFEA
  8727                           fsr0l	equ	0xFE9
  8728                           wreg	equ	0xFE8
  8729                           postdec1	equ	0xFE5
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function ___lwdiv *****************
  8739 ;; Defined at:
  8740 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  dividend        2    0[BANK0 ] unsigned int 
  8743 ;;  divisor         2    2[BANK0 ] unsigned int 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  quotient        2    4[BANK0 ] unsigned int 
  8746 ;;  counter         1    6[BANK0 ] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  2    0[BANK0 ] unsigned int 
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;Total ram usage:        7 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    4
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_printf
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text23
  8771  00435E                     __ptext23:
  8772                           	opt stack 0
  8773  00435E                     ___lwdiv:
  8774                           	opt stack 25
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;incstack = 0
  8778  00435E  0E00               	movlw	0
  8779  004360  0100               	movlb	0	; () banked
  8780  004362  6FCB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8781  004364  0E00               	movlw	0
  8782  004366  6FCA               	movwf	___lwdiv@quotient& (0+255),b
  8783                           
  8784                           ; BSR set to: 0
  8785  004368  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  8786  00436A  11C9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8787  00436C  B4D8               	btfsc	status,2,c
  8788  00436E  D01C               	goto	l1658
  8789                           
  8790                           ; BSR set to: 0
  8791  004370  0E01               	movlw	1
  8792  004372  6FCC               	movwf	___lwdiv@counter& (0+255),b
  8793  004374  D004               	goto	l1653
  8794  004376                     
  8795                           ; BSR set to: 0
  8796                           
  8797                           ; BSR set to: 0
  8798  004376  90D8               	bcf	status,0,c
  8799  004378  37C8               	rlcf	___lwdiv@divisor& (0+255),f,b
  8800  00437A  37C9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8801  00437C  2BCC               	incf	___lwdiv@counter& (0+255),f,b
  8802  00437E                     l1653:
  8803                           
  8804                           ; BSR set to: 0
  8805                           
  8806                           ; BSR set to: 0
  8807  00437E  AFC9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8808  004380  D7FA               	goto	l1654
  8809  004382                     u3390:
  8810                           
  8811                           ; BSR set to: 0
  8812                           
  8813                           ; BSR set to: 0
  8814                           
  8815                           ; BSR set to: 0
  8816  004382  90D8               	bcf	status,0,c
  8817  004384  37CA               	rlcf	___lwdiv@quotient& (0+255),f,b
  8818  004386  37CB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8819                           
  8820                           ; BSR set to: 0
  8821  004388  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  8822  00438A  5DC6               	subwf	___lwdiv@dividend& (0+255),w,b
  8823  00438C  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8824  00438E  59C7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8825  004390  A0D8               	btfss	status,0,c
  8826  004392  D005               	goto	l1657
  8827                           
  8828                           ; BSR set to: 0
  8829  004394  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  8830  004396  5FC6               	subwf	___lwdiv@dividend& (0+255),f,b
  8831  004398  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8832  00439A  5BC7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835  00439C  81CA               	bsf	___lwdiv@quotient& (0+255),0,b
  8836  00439E                     l1657:
  8837                           
  8838                           ; BSR set to: 0
  8839                           
  8840                           ; BSR set to: 0
  8841  00439E  90D8               	bcf	status,0,c
  8842  0043A0  33C9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8843  0043A2  33C8               	rrcf	___lwdiv@divisor& (0+255),f,b
  8844                           
  8845                           ; BSR set to: 0
  8846  0043A4  2FCC               	decfsz	___lwdiv@counter& (0+255),f,b
  8847  0043A6  D7ED               	goto	u3390
  8848  0043A8                     l1658:
  8849                           
  8850                           ; BSR set to: 0
  8851                           
  8852                           ; BSR set to: 0
  8853  0043A8  C0CA  F0C6         	movff	___lwdiv@quotient,?___lwdiv
  8854  0043AC  C0CB  F0C7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8855                           
  8856                           ; BSR set to: 0
  8857  0043B0  0012               	return		;funcret
  8858  0043B2                     __end_of___lwdiv:
  8859                           	opt stack 0
  8860                           tblptru	equ	0xFF8
  8861                           tblptrh	equ	0xFF7
  8862                           tblptrl	equ	0xFF6
  8863                           tablat	equ	0xFF5
  8864                           prodh	equ	0xFF4
  8865                           prodl	equ	0xFF3
  8866                           intcon	equ	0xFF2
  8867                           intcon3	equ	0xFF0
  8868                           indf0	equ	0xFEF
  8869                           postinc0	equ	0xFEE
  8870                           fsr0h	equ	0xFEA
  8871                           fsr0l	equ	0xFE9
  8872                           wreg	equ	0xFE8
  8873                           postdec1	equ	0xFE5
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           fsr2h	equ	0xFDA
  8879                           fsr2l	equ	0xFD9
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function _lcdInst *****************
  8883 ;; Defined at:
  8884 ;;		line 11 in file "lcd.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;  data            1    wreg     unsigned char 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  data            1    2[BANK0 ] unsigned char 
  8889 ;; Return value:  Size  Location     Type
  8890 ;;                  1    wreg      void 
  8891 ;; Registers used:
  8892 ;;		wreg, status,2, status,0, cstack
  8893 ;; Tracked objects:
  8894 ;;		On entry : 0/0
  8895 ;;		On exit  : 0/0
  8896 ;;		Unchanged: 0/0
  8897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8902 ;;Total ram usage:        1 bytes
  8903 ;; Hardware stack levels used:    1
  8904 ;; Hardware stack levels required when called:    5
  8905 ;; This function calls:
  8906 ;;		_lcdNibble
  8907 ;; This function is called by:
  8908 ;;		_initLCD
  8909 ;;		_main
  8910 ;;		_Bolt_dispense
  8911 ;;		_Nut_dispense
  8912 ;;		_Spacer_dispense
  8913 ;;		_Washer_dispense
  8914 ;;		_Bolt_remain
  8915 ;;		_Nut_remain
  8916 ;;		_Spacer_remain
  8917 ;;		_Washer_remain
  8918 ;;		_lcd_set_cursor
  8919 ;;		_lcd_shift_cursor
  8920 ;;		_lcd_shift_display
  8921 ;;		_count_gear
  8922 ;;		_nut_washer_remain
  8923 ;;		_bolt_spacer_remain
  8924 ;;		_all_remain
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text24
  8929  00473E                     __ptext24:
  8930                           	opt stack 0
  8931  00473E                     _lcdInst:
  8932                           	opt stack 25
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;incstack = 0
  8936                           ;lcdInst@data stored from wreg
  8937  00473E  0100               	movlb	0	; () banked
  8938  004740  6FC8               	movwf	lcdInst@data& (0+255),b
  8939                           
  8940                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8941  004742  948C               	bcf	3980,2,c	;volatile
  8942                           
  8943                           ;lcd.c: 20: lcdNibble(data);
  8944  004744  0100               	movlb	0	; () banked
  8945  004746  51C8               	movf	lcdInst@data& (0+255),w,b
  8946  004748  EC15  F01F         	call	_lcdNibble
  8947                           
  8948                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8949  00474C  0EA0               	movlw	160
  8950  00474E                     u7007:
  8951  00474E  D000               	nop2	
  8952  004750  2EE8               	decfsz	wreg,f,c
  8953  004752  D7FD               	bra	u7007
  8954  004754  0012               	return		;funcret
  8955  004756                     __end_of_lcdInst:
  8956                           	opt stack 0
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           prodh	equ	0xFF4
  8962                           prodl	equ	0xFF3
  8963                           intcon	equ	0xFF2
  8964                           intcon3	equ	0xFF0
  8965                           indf0	equ	0xFEF
  8966                           postinc0	equ	0xFEE
  8967                           fsr0h	equ	0xFEA
  8968                           fsr0l	equ	0xFE9
  8969                           wreg	equ	0xFE8
  8970                           postdec1	equ	0xFE5
  8971                           fsr1l	equ	0xFE1
  8972                           indf2	equ	0xFDF
  8973                           postinc2	equ	0xFDE
  8974                           postdec2	equ	0xFDD
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function _lcdNibble *****************
  8980 ;; Defined at:
  8981 ;;		line 37 in file "lcd.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  data            1    wreg     unsigned char 
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;  data            1    1[BANK0 ] unsigned char 
  8986 ;;  temp            1    0[BANK0 ] unsigned char 
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      void 
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        2 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    4
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_lcdInst
  9007 ;;		_putch
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text25
  9012  003E2A                     __ptext25:
  9013                           	opt stack 0
  9014  003E2A                     _lcdNibble:
  9015                           	opt stack 24
  9016                           
  9017                           ;incstack = 0
  9018                           ;lcdNibble@data stored from wreg
  9019  003E2A  0100               	movlb	0	; () banked
  9020  003E2C  6FC7               	movwf	lcdNibble@data& (0+255),b
  9021                           
  9022                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  9023  003E2E  0100               	movlb	0	; () banked
  9024  003E30  51C7               	movf	lcdNibble@data& (0+255),w,b
  9025  003E32  0BF0               	andlw	240
  9026  003E34  6FC6               	movwf	lcdNibble@temp& (0+255),b
  9027                           
  9028                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  9029  003E36  508C               	movf	3980,w,c	;volatile
  9030  003E38  0B0F               	andlw	15
  9031  003E3A  6E8C               	movwf	3980,c	;volatile
  9032                           
  9033                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  9034  003E3C  51C6               	movf	lcdNibble@temp& (0+255),w,b
  9035  003E3E  108C               	iorwf	3980,w,c	;volatile
  9036  003E40  6E8C               	movwf	3980,c	;volatile
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9040  003E42  0E00               	movlw	0
  9041  003E44  BEF2               	btfsc	intcon,7,c	;volatile
  9042  003E46  0E01               	movlw	1
  9043  003E48  6FC0               	movwf	_LCDinterruptState& (0+255),b
  9044                           
  9045                           ; BSR set to: 0
  9046  003E4A  9EF2               	bcf	intcon,7,c	;volatile
  9047                           
  9048                           ; BSR set to: 0
  9049  003E4C  868C               	bsf	3980,3,c	;volatile
  9050                           
  9051                           ; BSR set to: 0
  9052  003E4E  0E42               	movlw	66
  9053  003E50                     u7017:
  9054  003E50  2EE8               	decfsz	wreg,f,c
  9055  003E52  D7FE               	bra	u7017
  9056  003E54  D000               	nop2	
  9057  003E56  968C               	bcf	3980,3,c	;volatile
  9058  003E58  0EA0               	movlw	160
  9059  003E5A                     u7027:
  9060  003E5A  D000               	nop2	
  9061  003E5C  2EE8               	decfsz	wreg,f,c
  9062  003E5E  D7FD               	bra	u7027
  9063  003E60  0100               	movlb	0	; () banked
  9064  003E62  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
  9065  003E64  D002               	bra	u3295
  9066  003E66  9EF2               	bcf	intcon,7,c	;volatile
  9067  003E68  D001               	bra	u3296
  9068  003E6A                     u3295:
  9069  003E6A  8EF2               	bsf	intcon,7,c	;volatile
  9070  003E6C                     u3296:
  9071                           
  9072                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  9073  003E6C  0100               	movlb	0	; () banked
  9074  003E6E  39C7               	swapf	lcdNibble@data& (0+255),w,b
  9075  003E70  0BF0               	andlw	240
  9076  003E72  6FC7               	movwf	lcdNibble@data& (0+255),b
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  9080  003E74  51C7               	movf	lcdNibble@data& (0+255),w,b
  9081  003E76  0BF0               	andlw	240
  9082  003E78  6FC6               	movwf	lcdNibble@temp& (0+255),b
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  9086  003E7A  508C               	movf	3980,w,c	;volatile
  9087  003E7C  0B0F               	andlw	15
  9088  003E7E  6E8C               	movwf	3980,c	;volatile
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  9092  003E80  51C6               	movf	lcdNibble@temp& (0+255),w,b
  9093  003E82  108C               	iorwf	3980,w,c	;volatile
  9094  003E84  6E8C               	movwf	3980,c	;volatile
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9098  003E86  0E00               	movlw	0
  9099  003E88  BEF2               	btfsc	intcon,7,c	;volatile
  9100  003E8A  0E01               	movlw	1
  9101  003E8C  6FC0               	movwf	_LCDinterruptState& (0+255),b
  9102                           
  9103                           ; BSR set to: 0
  9104  003E8E  9EF2               	bcf	intcon,7,c	;volatile
  9105                           
  9106                           ; BSR set to: 0
  9107  003E90  868C               	bsf	3980,3,c	;volatile
  9108                           
  9109                           ; BSR set to: 0
  9110  003E92  0E42               	movlw	66
  9111  003E94                     u7037:
  9112  003E94  2EE8               	decfsz	wreg,f,c
  9113  003E96  D7FE               	bra	u7037
  9114  003E98  D000               	nop2	
  9115  003E9A  968C               	bcf	3980,3,c	;volatile
  9116  003E9C  0EA0               	movlw	160
  9117  003E9E                     u7047:
  9118  003E9E  D000               	nop2	
  9119  003EA0  2EE8               	decfsz	wreg,f,c
  9120  003EA2  D7FD               	bra	u7047
  9121  003EA4  0100               	movlb	0	; () banked
  9122  003EA6  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
  9123  003EA8  D002               	bra	u3305
  9124  003EAA  9EF2               	bcf	intcon,7,c	;volatile
  9125  003EAC  D001               	bra	u3306
  9126  003EAE                     u3305:
  9127  003EAE  8EF2               	bsf	intcon,7,c	;volatile
  9128  003EB0                     u3306:
  9129  003EB0  0012               	return		;funcret
  9130  003EB2                     __end_of_lcdNibble:
  9131                           	opt stack 0
  9132                           tblptru	equ	0xFF8
  9133                           tblptrh	equ	0xFF7
  9134                           tblptrl	equ	0xFF6
  9135                           tablat	equ	0xFF5
  9136                           prodh	equ	0xFF4
  9137                           prodl	equ	0xFF3
  9138                           intcon	equ	0xFF2
  9139                           intcon3	equ	0xFF0
  9140                           indf0	equ	0xFEF
  9141                           postinc0	equ	0xFEE
  9142                           fsr0h	equ	0xFEA
  9143                           fsr0l	equ	0xFE9
  9144                           wreg	equ	0xFE8
  9145                           postdec1	equ	0xFE5
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           postdec2	equ	0xFDD
  9150                           fsr2h	equ	0xFDA
  9151                           fsr2l	equ	0xFD9
  9152                           status	equ	0xFD8
  9153                           
  9154 ;; *************** function _I2C_sendData *****************
  9155 ;; Defined at:
  9156 ;;		line 1273 in file "main.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  char_data       1    wreg     unsigned char 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  char_data       1    3[BANK0 ] unsigned char 
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  1    wreg      void 
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0, cstack
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;Total ram usage:        1 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    6
  9177 ;; This function calls:
  9178 ;;		_I2C_Master_Start
  9179 ;;		_I2C_Master_Stop
  9180 ;;		_I2C_Master_Write
  9181 ;; This function is called by:
  9182 ;;		_main
  9183 ;;		_Bolt_dispense
  9184 ;;		_Nut_dispense
  9185 ;;		_Spacer_dispense
  9186 ;;		_Washer_dispense
  9187 ;;		_Bolt_remain
  9188 ;;		_Nut_remain
  9189 ;;		_Spacer_remain
  9190 ;;		_Washer_remain
  9191 ;;		_nut_washer_remain
  9192 ;;		_bolt_spacer_remain
  9193 ;;		_all_remain
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           	psect	text26
  9198  004674                     __ptext26:
  9199                           	opt stack 0
  9200  004674                     _I2C_sendData:
  9201                           	opt stack 23
  9202                           
  9203                           ;incstack = 0
  9204                           ;I2C_sendData@char_data stored from wreg
  9205  004674  0100               	movlb	0	; () banked
  9206  004676  6FC9               	movwf	I2C_sendData@char_data& (0+255),b
  9207                           
  9208                           ;main.c: 1274: I2C_Master_Start();
  9209  004678  ECF3  F023         	call	_I2C_Master_Start	;wreg free
  9210                           
  9211                           ;main.c: 1275: I2C_Master_Write(0b00010000);
  9212  00467C  0E00               	movlw	0
  9213  00467E  0100               	movlb	0	; () banked
  9214  004680  6FC8               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  9215  004682  0E10               	movlw	16
  9216  004684  6FC7               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  9217  004686  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  9218                           
  9219                           ;main.c: 1276: I2C_Master_Write(char_data);
  9220  00468A  C0C9  F0C7         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  9221  00468E  0100               	movlb	0	; () banked
  9222  004690  6BC8               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  9223  004692  ECE1  F023         	call	_I2C_Master_Write	;wreg free
  9224                           
  9225                           ;main.c: 1277: I2C_Master_Stop();
  9226  004696  ECEF  F023         	call	_I2C_Master_Stop	;wreg free
  9227  00469A  0012               	return	
  9228  00469C                     __end_of_I2C_sendData:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon3	equ	0xFF0
  9238                           indf0	equ	0xFEF
  9239                           postinc0	equ	0xFEE
  9240                           fsr0h	equ	0xFEA
  9241                           fsr0l	equ	0xFE9
  9242                           wreg	equ	0xFE8
  9243                           postdec1	equ	0xFE5
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function _I2C_Master_Write *****************
  9253 ;; Defined at:
  9254 ;;		line 108 in file "I2C.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;		None
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  1    wreg      void 
  9261 ;; Registers used:
  9262 ;;		wreg, status,2, status,0, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;Total ram usage:        2 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    5
  9275 ;; This function calls:
  9276 ;;		_I2C_Master_Wait
  9277 ;; This function is called by:
  9278 ;;		_main
  9279 ;;		_I2C_init
  9280 ;;		_I2C_sendData
  9281 ;;		_initRamp
  9282 ;;		_ramp_Rotate
  9283 ;;		_RTC_setTime
  9284 ;;		_get_RTC_initial
  9285 ;;		_get_RTC_final
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text27
  9290  0047C2                     __ptext27:
  9291                           	opt stack 0
  9292  0047C2                     _I2C_Master_Write:
  9293                           	opt stack 23
  9294                           
  9295                           ;I2C.c: 116: I2C_Master_Wait();
  9296                           
  9297                           ;incstack = 0
  9298  0047C2  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  9299                           
  9300                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9301  0047C6  C0C7  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  9302  0047CA  0012               	return		;funcret
  9303  0047CC                     __end_of_I2C_Master_Write:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           intcon	equ	0xFF2
  9312                           intcon3	equ	0xFF0
  9313                           indf0	equ	0xFEF
  9314                           postinc0	equ	0xFEE
  9315                           fsr0h	equ	0xFEA
  9316                           fsr0l	equ	0xFE9
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _I2C_Master_Stop *****************
  9328 ;; Defined at:
  9329 ;;		line 95 in file "I2C.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, status,2, status,0, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    5
  9350 ;; This function calls:
  9351 ;;		_I2C_Master_Wait
  9352 ;; This function is called by:
  9353 ;;		_main
  9354 ;;		_I2C_init
  9355 ;;		_I2C_sendData
  9356 ;;		_initRamp
  9357 ;;		_ramp_Rotate
  9358 ;;		_RTC_setTime
  9359 ;;		_get_RTC_initial
  9360 ;;		_get_RTC_final
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text28
  9365  0047DE                     __ptext28:
  9366                           	opt stack 0
  9367  0047DE                     _I2C_Master_Stop:
  9368                           	opt stack 23
  9369                           
  9370                           ;I2C.c: 104: I2C_Master_Wait();
  9371                           
  9372                           ;incstack = 0
  9373  0047DE  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  9374                           
  9375                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9376  0047E2  84C5               	bsf	4037,2,c	;volatile
  9377  0047E4  0012               	return		;funcret
  9378  0047E6                     __end_of_I2C_Master_Stop:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           intcon3	equ	0xFF0
  9388                           indf0	equ	0xFEF
  9389                           postinc0	equ	0xFEE
  9390                           fsr0h	equ	0xFEA
  9391                           fsr0l	equ	0xFE9
  9392                           wreg	equ	0xFE8
  9393                           postdec1	equ	0xFE5
  9394                           fsr1l	equ	0xFE1
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           fsr2h	equ	0xFDA
  9399                           fsr2l	equ	0xFD9
  9400                           status	equ	0xFD8
  9401                           
  9402 ;; *************** function _I2C_Master_Start *****************
  9403 ;; Defined at:
  9404 ;;		line 69 in file "I2C.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		wreg, status,2, status,0, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9422 ;;Total ram usage:        0 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    5
  9425 ;; This function calls:
  9426 ;;		_I2C_Master_Wait
  9427 ;; This function is called by:
  9428 ;;		_main
  9429 ;;		_I2C_init
  9430 ;;		_I2C_sendData
  9431 ;;		_initRamp
  9432 ;;		_ramp_Rotate
  9433 ;;		_RTC_setTime
  9434 ;;		_get_RTC_initial
  9435 ;;		_get_RTC_final
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           	psect	text29
  9440  0047E6                     __ptext29:
  9441                           	opt stack 0
  9442  0047E6                     _I2C_Master_Start:
  9443                           	opt stack 23
  9444                           
  9445                           ;I2C.c: 78: I2C_Master_Wait();
  9446                           
  9447                           ;incstack = 0
  9448  0047E6  ECB5  F023         	call	_I2C_Master_Wait	;wreg free
  9449                           
  9450                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  9451  0047EA  80C5               	bsf	4037,0,c	;volatile
  9452  0047EC  0012               	return		;funcret
  9453  0047EE                     __end_of_I2C_Master_Start:
  9454                           	opt stack 0
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon	equ	0xFF2
  9462                           intcon3	equ	0xFF0
  9463                           indf0	equ	0xFEF
  9464                           postinc0	equ	0xFEE
  9465                           fsr0h	equ	0xFEA
  9466                           fsr0l	equ	0xFE9
  9467                           wreg	equ	0xFE8
  9468                           postdec1	equ	0xFE5
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _I2C_Master_Wait *****************
  9478 ;; Defined at:
  9479 ;;		line 51 in file "I2C.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      void 
  9486 ;; Registers used:
  9487 ;;		wreg, status,2, status,0
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;Total ram usage:        1 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    4
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_I2C_Master_Start
  9504 ;;		_I2C_Master_Stop
  9505 ;;		_I2C_Master_Write
  9506 ;;		_I2C_Master_Read
  9507 ;;		_I2C_Master_RepeatedStart
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text30
  9512  00476A                     __ptext30:
  9513                           	opt stack 0
  9514  00476A                     _I2C_Master_Wait:
  9515                           	opt stack 23
  9516                           
  9517                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9518                           
  9519                           ;incstack = 0
  9520  00476A  B4C7               	btfsc	4039,2,c	;volatile
  9521  00476C  D7FE               	goto	_I2C_Master_Wait
  9522  00476E  CFC5 F0C6          	movff	4037,??_I2C_Master_Wait	;volatile
  9523  004772  0E1F               	movlw	31
  9524  004774  0100               	movlb	0	; () banked
  9525  004776  17C6               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9526  004778  B4D8               	btfsc	status,2,c
  9527  00477A  0012               	return	
  9528  00477C  D7F6               	goto	_I2C_Master_Wait
  9529  00477E                     __end_of_I2C_Master_Wait:
  9530                           	opt stack 0
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodh	equ	0xFF4
  9536                           prodl	equ	0xFF3
  9537                           intcon	equ	0xFF2
  9538                           intcon3	equ	0xFF0
  9539                           indf0	equ	0xFEF
  9540                           postinc0	equ	0xFEE
  9541                           fsr0h	equ	0xFEA
  9542                           fsr0l	equ	0xFE9
  9543                           wreg	equ	0xFE8
  9544                           postdec1	equ	0xFE5
  9545                           fsr1l	equ	0xFE1
  9546                           indf2	equ	0xFDF
  9547                           postinc2	equ	0xFDE
  9548                           postdec2	equ	0xFDD
  9549                           fsr2h	equ	0xFDA
  9550                           fsr2l	equ	0xFD9
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _interruptHandler *****************
  9554 ;; Defined at:
  9555 ;;		line 535 in file "main.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;		None
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  i               2   61[COMRAM] int 
  9560 ;;  temp            1   64[COMRAM] unsigned char 
  9561 ;;  keypress        1   63[COMRAM] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      void 
  9564 ;; Registers used:
  9565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;Total ram usage:       27 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    3
  9578 ;; This function calls:
  9579 ;;		___awmod
  9580 ;;		_check
  9581 ;;		_is_valid
  9582 ;;		_strcat
  9583 ;;		_strcpy
  9584 ;;		_strncmp
  9585 ;;		i2_I2C_Master_Init
  9586 ;;		i2_I2C_Master_Read
  9587 ;;		i2_I2C_Master_Start
  9588 ;;		i2_I2C_Master_Stop
  9589 ;;		i2_I2C_Master_Write
  9590 ;;		i2___awdiv
  9591 ;;		i2___wmul
  9592 ;;		i2_generate_compartment_array
  9593 ;;		i2_initLCD
  9594 ;;		i2_lcdInst
  9595 ;;		i2_printf
  9596 ;;		i2_putch
  9597 ;; This function is called by:
  9598 ;;		Interrupt level 2
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           	psect	intcode
  9603  000008                     __pintcode:
  9604                           	opt stack 0
  9605  000008                     _interruptHandler:
  9606                           	opt stack 23
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;incstack = 0
  9610  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9611  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           prodh	equ	0xFF4
  9617                           prodl	equ	0xFF3
  9618                           intcon	equ	0xFF2
  9619                           intcon3	equ	0xFF0
  9620                           indf0	equ	0xFEF
  9621                           postinc0	equ	0xFEE
  9622                           fsr0h	equ	0xFEA
  9623                           fsr0l	equ	0xFE9
  9624                           wreg	equ	0xFE8
  9625                           postdec1	equ	0xFE5
  9626                           fsr1l	equ	0xFE1
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           fsr2h	equ	0xFDA
  9631                           fsr2l	equ	0xFD9
  9632                           status	equ	0xFD8
  9633                           
  9634                           	psect	intcode_body
  9635  000012                     __pintcode_body:
  9636                           	opt stack 23
  9637  000012                     int_func:
  9638                           	opt stack 23
  9639  000012  0006               	pop		; remove dummy address from shadow register refresh
  9640  000014  CFFA F02C          	movff	pclath,??_interruptHandler+5
  9641  000018  CFFB F02D          	movff	pclatu,??_interruptHandler+6
  9642  00001C  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
  9643  000020  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
  9644  000024  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
  9645  000028  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
  9646  00002C  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
  9647  000030  CFDA F033          	movff	fsr2h,??_interruptHandler+12
  9648  000034  CFF3 F034          	movff	prodl,??_interruptHandler+13
  9649  000038  CFF4 F035          	movff	prodh,??_interruptHandler+14
  9650  00003C  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
  9651  000040  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
  9652  000044  CFF8 F038          	movff	tblptru,??_interruptHandler+17
  9653  000048  CFF5 F039          	movff	tablat,??_interruptHandler+18
  9654  00004C  C07F  F03A         	movff	btemp,??_interruptHandler+19
  9655  000050  C080  F03B         	movff	btemp+1,??_interruptHandler+20
  9656  000054  C081  F03C         	movff	btemp+2,??_interruptHandler+21
  9657  000058  C082  F03D         	movff	btemp+3,??_interruptHandler+22
  9658                           
  9659                           ;main.c: 546: if(INT1IF){
  9660  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  9661  00005E  EF06  F007         	goto	i2l543
  9662                           
  9663                           ;main.c: 552: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9664  000062  3881               	swapf	3969,w,c	;volatile
  9665  000064  0B0F               	andlw	15
  9666  000066  0B0F               	andlw	15
  9667  000068  6E40               	movwf	interruptHandler@keypress,c
  9668                           
  9669                           ;main.c: 554: char temp = keys[keypress];
  9670  00006A  5040               	movf	interruptHandler@keypress,w,c
  9671  00006C  0D01               	mullw	1
  9672  00006E  0E73               	movlw	low _keys
  9673  000070  24F3               	addwf	prodl,w,c
  9674  000072  6EF6               	movwf	tblptrl,c
  9675  000074  0EFC               	movlw	high _keys
  9676  000076  20F4               	addwfc	prodh,w,c
  9677  000078  6EF7               	movwf	tblptrh,c
  9678  00007A                     	if	1	;There are 3 active tblptr bytes
  9679  00007A  6AF8               	clrf	tblptru,c
  9680  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
  9681  00007E  22F8               	addwfc	tblptru,f,c
  9682  000080                     	endif
  9683  000080  0008               	tblrd		*
  9684  000082  CFF5 F041          	movff	tablat,interruptHandler@temp
  9685                           
  9686                           ;main.c: 564: if (change_mode == 0){
  9687  000086  0100               	movlb	0	; () banked
  9688  000088  51B5               	movf	_change_mode& (0+255),w,b
  9689  00008A  11B6               	iorwf	(_change_mode+1)& (0+255),w,b
  9690  00008C  A4D8               	btfss	status,2,c
  9691  00008E  D09D               	goto	i2l551
  9692                           
  9693                           ; BSR set to: 0
  9694                           ;main.c: 568: if (temp == '1'){
  9695  000090  0E31               	movlw	49
  9696  000092  1841               	xorwf	interruptHandler@temp,w,c
  9697  000094  A4D8               	btfss	status,2,c
  9698  000096  D08B               	goto	i2l545
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;main.c: 570: initLCD();
  9702  000098  EC28  F022         	call	i2_initLCD	;wreg free
  9703                           
  9704                           ;main.c: 571: for (i = 0; i <3; i++){
  9705  00009C  0E00               	movlw	0
  9706  00009E  0100               	movlb	0	; () banked
  9707  0000A0  6FBC               	movwf	(_i+1)& (0+255),b
  9708  0000A2  0E00               	movlw	0
  9709  0000A4  6FBB               	movwf	_i& (0+255),b
  9710                           
  9711                           ; BSR set to: 0
  9712  0000A6  51BC               	movf	(_i+1)& (0+255),w,b
  9713  0000A8  E101               	bnz	i2u543_40
  9714  0000AA  D07B               	goto	L1
  9715  0000AC                     i2u543_40:
  9716                           
  9717                           ; BSR set to: 0
  9718  0000AC  EF04  F007         	goto	i2l7045
  9719  0000B0                     
  9720                           ; BSR set to: 0
  9721                           ;main.c: 572: I2C_Master_Init(100000);
  9722                           
  9723                           ; BSR set to: 0
  9724  0000B0  0EA0               	movlw	160
  9725  0000B2  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9726  0000B4  0E86               	movlw	134
  9727  0000B6  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9728  0000B8  0E01               	movlw	1
  9729  0000BA  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9730  0000BC  0E00               	movlw	0
  9731  0000BE  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9732  0000C0  EC81  F021         	call	i2_I2C_Master_Init	;wreg free
  9733                           
  9734                           ;main.c: 573: I2C_Master_Start();
  9735  0000C4  ECFB  F023         	call	i2_I2C_Master_Start	;wreg free
  9736                           
  9737                           ;main.c: 574: I2C_Master_Write(0b11010000);
  9738  0000C8  0E00               	movlw	0
  9739  0000CA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9740  0000CC  0ED0               	movlw	208
  9741  0000CE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9742  0000D0  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9743                           
  9744                           ;main.c: 575: I2C_Master_Write(0x00);
  9745  0000D4  0E00               	movlw	0
  9746  0000D6  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9747  0000D8  0E00               	movlw	0
  9748  0000DA  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9749  0000DC  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9750                           
  9751                           ;main.c: 576: I2C_Master_Stop();
  9752  0000E0  ECF7  F023         	call	i2_I2C_Master_Stop	;wreg free
  9753                           
  9754                           ;main.c: 579: I2C_Master_Start();
  9755  0000E4  ECFB  F023         	call	i2_I2C_Master_Start	;wreg free
  9756                           
  9757                           ;main.c: 580: I2C_Master_Write(0b11010001);
  9758  0000E8  0E00               	movlw	0
  9759  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9760  0000EC  0ED1               	movlw	209
  9761  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9762  0000F0  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9763                           
  9764                           ;main.c: 581: for(j = 0; j < 6; j++){
  9765  0000F4  0E00               	movlw	0
  9766  0000F6  6E6B               	movwf	_j,c
  9767  0000F8                     i2l6617:
  9768  0000F8  0E05               	movlw	5
  9769  0000FA  646B               	cpfsgt	_j,c
  9770  0000FC  D001               	goto	i2l548
  9771  0000FE  D00E               	goto	i2u545_40
  9772  000100                     i2l548:
  9773                           
  9774                           ;main.c: 582: time[j] = I2C_Master_Read(0);
  9775  000100  506B               	movf	_j,w,c
  9776  000102  0D01               	mullw	1
  9777  000104  0E90               	movlw	low _time
  9778  000106  24F3               	addwf	prodl,w,c
  9779  000108  6ED9               	movwf	fsr2l,c
  9780  00010A  0E00               	movlw	high _time
  9781  00010C  20F4               	addwfc	prodh,w,c
  9782  00010E  6EDA               	movwf	fsr2h,c
  9783  000110  0E00               	movlw	0
  9784  000112  EC61  F023         	call	i2_I2C_Master_Read
  9785  000116  6EDF               	movwf	indf2,c
  9786  000118  2A6B               	incf	_j,f,c
  9787  00011A  D7EE               	goto	i2l6617
  9788  00011C                     i2u545_40:
  9789                           
  9790                           ;main.c: 583: }
  9791                           ;main.c: 584: time[6] = I2C_Master_Read(1);
  9792  00011C  0E01               	movlw	1
  9793  00011E  EC61  F023         	call	i2_I2C_Master_Read
  9794  000122  0100               	movlb	0	; () banked
  9795  000124  6F96               	movwf	(_time+6)& (0+255),b
  9796                           
  9797                           ;main.c: 585: I2C_Master_Stop();
  9798  000126  ECF7  F023         	call	i2_I2C_Master_Stop	;wreg free
  9799                           
  9800                           ;main.c: 587: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9801  00012A  0E80               	movlw	128
  9802  00012C  ECC9  F023         	call	i2_lcdInst
  9803  000130  0E34               	movlw	52
  9804  000132  6E27               	movwf	??_interruptHandler& (0+255),c
  9805  000134  0EF2               	movlw	242
  9806  000136                     i2u705_47:
  9807  000136  2EE8               	decfsz	wreg,f,c
  9808  000138  D7FE               	bra	i2u705_47
  9809  00013A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9810  00013C  D7FC               	bra	i2u705_47
  9811                           
  9812                           ;main.c: 588: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9813  00013E  0EAC               	movlw	low STR_31
  9814  000140  6E0D               	movwf	i2printf@f,c
  9815  000142  0EFE               	movlw	high STR_31
  9816  000144  6E0E               	movwf	i2printf@f+1,c
  9817  000146  C096  F00F         	movff	_time+6,?i2_printf+2
  9818  00014A  6A10               	clrf	?i2_printf+3,c
  9819  00014C  C095  F011         	movff	_time+5,?i2_printf+4
  9820  000150  6A12               	clrf	?i2_printf+5,c
  9821  000152  C094  F013         	movff	_time+4,?i2_printf+6
  9822  000156  6A14               	clrf	?i2_printf+7,c
  9823  000158  EC09  F017         	call	i2_printf	;wreg free
  9824                           
  9825                           ;main.c: 589: lcdInst(0xC0);;
  9826  00015C  0EC0               	movlw	192
  9827  00015E  ECC9  F023         	call	i2_lcdInst
  9828                           
  9829                           ;main.c: 590: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9830  000162  0EBB               	movlw	low STR_32
  9831  000164  6E0D               	movwf	i2printf@f,c
  9832  000166  0EFE               	movlw	high STR_32
  9833  000168  6E0E               	movwf	i2printf@f+1,c
  9834  00016A  C092  F00F         	movff	_time+2,?i2_printf+2
  9835  00016E  6A10               	clrf	?i2_printf+3,c
  9836  000170  C091  F011         	movff	_time+1,?i2_printf+4
  9837  000174  6A12               	clrf	?i2_printf+5,c
  9838  000176  C090  F013         	movff	_time,?i2_printf+6
  9839  00017A  6A14               	clrf	?i2_printf+7,c
  9840  00017C  EC09  F017         	call	i2_printf	;wreg free
  9841                           
  9842                           ;main.c: 591: _delay((unsigned long)((200)*(32000000/4000.0)));
  9843  000180  0E09               	movlw	9
  9844  000182  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9845  000184  0E1E               	movlw	30
  9846  000186  6E27               	movwf	??_interruptHandler& (0+255),c
  9847  000188  0EE4               	movlw	228
  9848  00018A                     i2u706_47:
  9849  00018A  2EE8               	decfsz	wreg,f,c
  9850  00018C  D7FE               	bra	i2u706_47
  9851  00018E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9852  000190  D7FC               	bra	i2u706_47
  9853  000192  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9854  000194  D7FA               	bra	i2u706_47
  9855  000196  D000               	nop2	
  9856  000198  0100               	movlb	0	; () banked
  9857  00019A  4BBB               	infsnz	_i& (0+255),f,b
  9858  00019C  2BBC               	incf	(_i+1)& (0+255),f,b
  9859  00019E  51BC               	movf	(_i+1)& (0+255),w,b
  9860  0001A0  E112               	bnz	i2l6643
  9861  0001A2                     L1:
  9862  0001A2  0E03               	movlw	3
  9863  0001A4  5DBB               	subwf	_i& (0+255),w,b
  9864  0001A6  A0D8               	btfss	status,0,c
  9865  0001A8  D783               	goto	i2l546
  9866  0001AA  EF04  F007         	goto	i2l7045
  9867  0001AE                     i2l545:
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;main.c: 595: }
  9871                           ;main.c: 596: if (temp == '2'){
  9872                           
  9873                           ; BSR set to: 0
  9874  0001AE  0E32               	movlw	50
  9875  0001B0  1841               	xorwf	interruptHandler@temp,w,c
  9876  0001B2  A4D8               	btfss	status,2,c
  9877  0001B4  D00A               	goto	i2l551
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;main.c: 597: change_mode = 1;
  9881  0001B6  0E00               	movlw	0
  9882  0001B8  6FB6               	movwf	(_change_mode+1)& (0+255),b
  9883  0001BA  0E01               	movlw	1
  9884  0001BC  6FB5               	movwf	_change_mode& (0+255),b
  9885                           
  9886                           ;main.c: 598: mode = 1;
  9887  0001BE  0E00               	movlw	0
  9888  0001C0  6FB8               	movwf	(_mode+1)& (0+255),b
  9889  0001C2  0E01               	movlw	1
  9890  0001C4  D264               	goto	L8
  9891  0001C6                     i2l6643:
  9892  0001C6  EF04  F007         	goto	i2l7045
  9893  0001CA                     i2l551:
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;main.c: 603: }
  9897                           ;main.c: 606: }
  9898                           ;main.c: 611: if(operation == 1){
  9899                           
  9900                           ; BSR set to: 0
  9901                           
  9902                           ; BSR set to: 0
  9903  0001CA  0468               	decf	_operation,w,c
  9904  0001CC  1069               	iorwf	_operation+1,w,c
  9905  0001CE  A4D8               	btfss	status,2,c
  9906  0001D0  D260               	goto	i2l562
  9907                           
  9908                           ; BSR set to: 0
  9909                           ;main.c: 612: if (temp == '1'){
  9910  0001D2  0E31               	movlw	49
  9911  0001D4  1841               	xorwf	interruptHandler@temp,w,c
  9912  0001D6  A4D8               	btfss	status,2,c
  9913  0001D8  D08A               	goto	i2l553
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;main.c: 613: initLCD();
  9917  0001DA  EC28  F022         	call	i2_initLCD	;wreg free
  9918                           
  9919                           ;main.c: 614: for (i = 0; i <3; i++){
  9920  0001DE  0E00               	movlw	0
  9921  0001E0  0100               	movlb	0	; () banked
  9922  0001E2  6FBC               	movwf	(_i+1)& (0+255),b
  9923  0001E4  0E00               	movlw	0
  9924  0001E6  6FBB               	movwf	_i& (0+255),b
  9925                           
  9926                           ; BSR set to: 0
  9927  0001E8  51BC               	movf	(_i+1)& (0+255),w,b
  9928  0001EA  E101               	bnz	i2u550_40
  9929  0001EC  D07A               	goto	L2
  9930  0001EE                     i2u550_40:
  9931                           
  9932                           ; BSR set to: 0
  9933  0001EE  EF04  F007         	goto	i2l7045
  9934  0001F2                     
  9935                           ; BSR set to: 0
  9936                           ;main.c: 615: I2C_Master_Init(100000);
  9937                           
  9938                           ; BSR set to: 0
  9939  0001F2  0EA0               	movlw	160
  9940  0001F4  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9941  0001F6  0E86               	movlw	134
  9942  0001F8  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9943  0001FA  0E01               	movlw	1
  9944  0001FC  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9945  0001FE  0E00               	movlw	0
  9946  000200  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9947  000202  EC81  F021         	call	i2_I2C_Master_Init	;wreg free
  9948                           
  9949                           ;main.c: 616: I2C_Master_Start();
  9950  000206  ECFB  F023         	call	i2_I2C_Master_Start	;wreg free
  9951                           
  9952                           ;main.c: 617: I2C_Master_Write(0b11010000);
  9953  00020A  0E00               	movlw	0
  9954  00020C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9955  00020E  0ED0               	movlw	208
  9956  000210  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9957  000212  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9958                           
  9959                           ;main.c: 618: I2C_Master_Write(0x00);
  9960  000216  0E00               	movlw	0
  9961  000218  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9962  00021A  0E00               	movlw	0
  9963  00021C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9964  00021E  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9965                           
  9966                           ;main.c: 619: I2C_Master_Stop();
  9967  000222  ECF7  F023         	call	i2_I2C_Master_Stop	;wreg free
  9968                           
  9969                           ;main.c: 622: I2C_Master_Start();
  9970  000226  ECFB  F023         	call	i2_I2C_Master_Start	;wreg free
  9971                           
  9972                           ;main.c: 623: I2C_Master_Write(0b11010001);
  9973  00022A  0E00               	movlw	0
  9974  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9975  00022E  0ED1               	movlw	209
  9976  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9977  000232  ECE6  F023         	call	i2_I2C_Master_Write	;wreg free
  9978                           
  9979                           ;main.c: 624: for(j = 0; j < 6; j++){
  9980  000236  0E00               	movlw	0
  9981  000238  6E6B               	movwf	_j,c
  9982  00023A                     i2l6663:
  9983  00023A  0E05               	movlw	5
  9984  00023C  646B               	cpfsgt	_j,c
  9985  00023E  D001               	goto	i2l556
  9986  000240  D00E               	goto	i2u552_40
  9987  000242                     i2l556:
  9988                           
  9989                           ;main.c: 625: time[j] = I2C_Master_Read(0);
  9990  000242  506B               	movf	_j,w,c
  9991  000244  0D01               	mullw	1
  9992  000246  0E90               	movlw	low _time
  9993  000248  24F3               	addwf	prodl,w,c
  9994  00024A  6ED9               	movwf	fsr2l,c
  9995  00024C  0E00               	movlw	high _time
  9996  00024E  20F4               	addwfc	prodh,w,c
  9997  000250  6EDA               	movwf	fsr2h,c
  9998  000252  0E00               	movlw	0
  9999  000254  EC61  F023         	call	i2_I2C_Master_Read
 10000  000258  6EDF               	movwf	indf2,c
 10001  00025A  2A6B               	incf	_j,f,c
 10002  00025C  D7EE               	goto	i2l6663
 10003  00025E                     i2u552_40:
 10004                           
 10005                           ;main.c: 626: }
 10006                           ;main.c: 627: time[6] = I2C_Master_Read(1);
 10007  00025E  0E01               	movlw	1
 10008  000260  EC61  F023         	call	i2_I2C_Master_Read
 10009  000264  0100               	movlb	0	; () banked
 10010  000266  6F96               	movwf	(_time+6)& (0+255),b
 10011                           
 10012                           ;main.c: 628: I2C_Master_Stop();
 10013  000268  ECF7  F023         	call	i2_I2C_Master_Stop	;wreg free
 10014                           
 10015                           ;main.c: 630: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10016  00026C  0E80               	movlw	128
 10017  00026E  ECC9  F023         	call	i2_lcdInst
 10018  000272  0E34               	movlw	52
 10019  000274  6E27               	movwf	??_interruptHandler& (0+255),c
 10020  000276  0EF2               	movlw	242
 10021  000278                     i2u707_47:
 10022  000278  2EE8               	decfsz	wreg,f,c
 10023  00027A  D7FE               	bra	i2u707_47
 10024  00027C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10025  00027E  D7FC               	bra	i2u707_47
 10026                           
 10027                           ;main.c: 631: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
 10028  000280  0EAC               	movlw	low STR_31
 10029  000282  6E0D               	movwf	i2printf@f,c
 10030  000284  0EFE               	movlw	high STR_31
 10031  000286  6E0E               	movwf	i2printf@f+1,c
 10032  000288  C096  F00F         	movff	_time+6,?i2_printf+2
 10033  00028C  6A10               	clrf	?i2_printf+3,c
 10034  00028E  C095  F011         	movff	_time+5,?i2_printf+4
 10035  000292  6A12               	clrf	?i2_printf+5,c
 10036  000294  C094  F013         	movff	_time+4,?i2_printf+6
 10037  000298  6A14               	clrf	?i2_printf+7,c
 10038  00029A  EC09  F017         	call	i2_printf	;wreg free
 10039                           
 10040                           ;main.c: 632: lcdInst(0xC0);;
 10041  00029E  0EC0               	movlw	192
 10042  0002A0  ECC9  F023         	call	i2_lcdInst
 10043                           
 10044                           ;main.c: 633: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 10045  0002A4  0EBB               	movlw	low STR_32
 10046  0002A6  6E0D               	movwf	i2printf@f,c
 10047  0002A8  0EFE               	movlw	high STR_32
 10048  0002AA  6E0E               	movwf	i2printf@f+1,c
 10049  0002AC  C092  F00F         	movff	_time+2,?i2_printf+2
 10050  0002B0  6A10               	clrf	?i2_printf+3,c
 10051  0002B2  C091  F011         	movff	_time+1,?i2_printf+4
 10052  0002B6  6A12               	clrf	?i2_printf+5,c
 10053  0002B8  C090  F013         	movff	_time,?i2_printf+6
 10054  0002BC  6A14               	clrf	?i2_printf+7,c
 10055  0002BE  EC09  F017         	call	i2_printf	;wreg free
 10056                           
 10057                           ;main.c: 634: _delay((unsigned long)((600)*(32000000/4000.0)));
 10058  0002C2  0E19               	movlw	25
 10059  0002C4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10060  0002C6  0E5A               	movlw	90
 10061  0002C8  6E27               	movwf	??_interruptHandler& (0+255),c
 10062  0002CA  0EB2               	movlw	178
 10063  0002CC                     i2u708_47:
 10064  0002CC  2EE8               	decfsz	wreg,f,c
 10065  0002CE  D7FE               	bra	i2u708_47
 10066  0002D0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10067  0002D2  D7FC               	bra	i2u708_47
 10068  0002D4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10069  0002D6  D7FA               	bra	i2u708_47
 10070  0002D8  0100               	movlb	0	; () banked
 10071  0002DA  4BBB               	infsnz	_i& (0+255),f,b
 10072  0002DC  2BBC               	incf	(_i+1)& (0+255),f,b
 10073  0002DE  51BC               	movf	(_i+1)& (0+255),w,b
 10074  0002E0  E104               	bnz	i2u553_40
 10075  0002E2                     L2:
 10076  0002E2  0E03               	movlw	3
 10077  0002E4  5DBB               	subwf	_i& (0+255),w,b
 10078  0002E6  A0D8               	btfss	status,0,c
 10079  0002E8  D784               	goto	i2l554
 10080  0002EA                     i2u553_40:
 10081  0002EA  EF04  F007         	goto	i2l7045
 10082  0002EE                     i2l553:
 10083                           
 10084                           ; BSR set to: 0
 10085                           ;main.c: 640: }
 10086                           ;main.c: 641: if (temp == '2'){
 10087                           
 10088                           ; BSR set to: 0
 10089  0002EE  0E32               	movlw	50
 10090  0002F0  1841               	xorwf	interruptHandler@temp,w,c
 10091  0002F2  A4D8               	btfss	status,2,c
 10092  0002F4  D099               	goto	i2l558
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;main.c: 650: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
 10096  0002F6  C16E  F001         	movff	_hr_initial,i2___wmul@multiplier
 10097  0002FA  C16F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
 10098  0002FE  0E0E               	movlw	14
 10099  000300  6E04               	movwf	i2___wmul@multiplicand+1,c
 10100  000302  0E10               	movlw	16
 10101  000304  6E03               	movwf	i2___wmul@multiplicand,c
 10102  000306  EC4E  F023         	call	i2___wmul	;wreg free
 10103  00030A  C001  F027         	movff	?i2___wmul,??_interruptHandler
 10104  00030E  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 10105  000312  C16C  F001         	movff	_min_initial,i2___wmul@multiplier
 10106  000316  C16D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
 10107  00031A  0E00               	movlw	0
 10108  00031C  6E04               	movwf	i2___wmul@multiplicand+1,c
 10109  00031E  0E3C               	movlw	60
 10110  000320  6E03               	movwf	i2___wmul@multiplicand,c
 10111  000322  EC4E  F023         	call	i2___wmul	;wreg free
 10112  000326  5001               	movf	?i2___wmul,w,c
 10113  000328  2627               	addwf	??_interruptHandler,f,c
 10114  00032A  5002               	movf	?i2___wmul+1,w,c
 10115  00032C  2228               	addwfc	??_interruptHandler+1,f,c
 10116  00032E  0101               	movlb	1	; () banked
 10117  000330  516A               	movf	_sec_initial& (0+255),w,b
 10118  000332  2427               	addwf	??_interruptHandler,w,c
 10119  000334  6F68               	movwf	_initial_time& (0+255),b
 10120  000336  516B               	movf	(_sec_initial+1)& (0+255),w,b
 10121  000338  2028               	addwfc	??_interruptHandler+1,w,c
 10122  00033A  6F69               	movwf	(_initial_time+1)& (0+255),b
 10123                           
 10124                           ;main.c: 651: final_time = hr_final*3600 + min_final*60 + sec_final;
 10125  00033C  C166  F001         	movff	_hr_final,i2___wmul@multiplier
 10126  000340  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
 10127  000344  0E0E               	movlw	14
 10128  000346  6E04               	movwf	i2___wmul@multiplicand+1,c
 10129  000348  0E10               	movlw	16
 10130  00034A  6E03               	movwf	i2___wmul@multiplicand,c
 10131  00034C  EC4E  F023         	call	i2___wmul	;wreg free
 10132  000350  C001  F027         	movff	?i2___wmul,??_interruptHandler
 10133  000354  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 10134  000358  C164  F001         	movff	_min_final,i2___wmul@multiplier
 10135  00035C  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
 10136  000360  0E00               	movlw	0
 10137  000362  6E04               	movwf	i2___wmul@multiplicand+1,c
 10138  000364  0E3C               	movlw	60
 10139  000366  6E03               	movwf	i2___wmul@multiplicand,c
 10140  000368  EC4E  F023         	call	i2___wmul	;wreg free
 10141  00036C  5001               	movf	?i2___wmul,w,c
 10142  00036E  2627               	addwf	??_interruptHandler,f,c
 10143  000370  5002               	movf	?i2___wmul+1,w,c
 10144  000372  2228               	addwfc	??_interruptHandler+1,f,c
 10145  000374  0101               	movlb	1	; () banked
 10146  000376  5162               	movf	_sec_final& (0+255),w,b
 10147  000378  2427               	addwf	??_interruptHandler,w,c
 10148  00037A  6F60               	movwf	_final_time& (0+255),b
 10149  00037C  5163               	movf	(_sec_final+1)& (0+255),w,b
 10150  00037E  2028               	addwfc	??_interruptHandler+1,w,c
 10151  000380  6F61               	movwf	(_final_time+1)& (0+255),b
 10152                           
 10153                           ; BSR set to: 1
 10154                           ;main.c: 652: operationTime = final_time - initial_time;
 10155  000382  C168  F027         	movff	_initial_time,??_interruptHandler
 10156  000386  C169  F028         	movff	_initial_time+1,??_interruptHandler+1
 10157  00038A  1E27               	comf	??_interruptHandler,f,c
 10158  00038C  1E28               	comf	??_interruptHandler+1,f,c
 10159  00038E  4A27               	infsnz	??_interruptHandler,f,c
 10160  000390  2A28               	incf	??_interruptHandler+1,f,c
 10161  000392  5160               	movf	_final_time& (0+255),w,b
 10162  000394  2427               	addwf	??_interruptHandler,w,c
 10163  000396  6E62               	movwf	_operationTime,c
 10164  000398  5161               	movf	(_final_time+1)& (0+255),w,b
 10165  00039A  2028               	addwfc	??_interruptHandler+1,w,c
 10166  00039C  6E63               	movwf	_operationTime+1,c
 10167                           
 10168                           ; BSR set to: 1
 10169                           ;main.c: 653: initLCD();
 10170  00039E  EC28  F022         	call	i2_initLCD	;wreg free
 10171                           
 10172                           ;main.c: 656: printf("operation time:");
 10173  0003A2  0E31               	movlw	low STR_35
 10174  0003A4  6E0D               	movwf	i2printf@f,c
 10175  0003A6  0EFE               	movlw	high STR_35
 10176  0003A8  6E0E               	movwf	i2printf@f+1,c
 10177  0003AA  EC09  F017         	call	i2_printf	;wreg free
 10178                           
 10179                           ;main.c: 657: lcdInst(0xC0);;
 10180  0003AE  0EC0               	movlw	192
 10181  0003B0  ECC9  F023         	call	i2_lcdInst
 10182                           
 10183                           ;main.c: 658: printf("%dmin %dsecs",operationTime/60,operationTime%60);
 10184  0003B4  0E02               	movlw	low STR_36
 10185  0003B6  6E0D               	movwf	i2printf@f,c
 10186  0003B8  0EFF               	movlw	high STR_36
 10187  0003BA  6E0E               	movwf	i2printf@f+1,c
 10188  0003BC  C062  F001         	movff	_operationTime,i2___awdiv@dividend
 10189  0003C0  C063  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
 10190  0003C4  0E00               	movlw	0
 10191  0003C6  6E04               	movwf	i2___awdiv@divisor+1,c
 10192  0003C8  0E3C               	movlw	60
 10193  0003CA  6E03               	movwf	i2___awdiv@divisor,c
 10194  0003CC  EC64  F020         	call	i2___awdiv	;wreg free
 10195  0003D0  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
 10196  0003D4  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
 10197  0003D8  C062  F001         	movff	_operationTime,___awmod@dividend
 10198  0003DC  C063  F002         	movff	_operationTime+1,___awmod@dividend+1
 10199  0003E0  0E00               	movlw	0
 10200  0003E2  6E04               	movwf	___awmod@divisor+1,c
 10201  0003E4  0E3C               	movlw	60
 10202  0003E6  6E03               	movwf	___awmod@divisor,c
 10203  0003E8  ECE7  F020         	call	___awmod	;wreg free
 10204  0003EC  C001  F011         	movff	?___awmod,?i2_printf+4
 10205  0003F0  C002  F012         	movff	?___awmod+1,?i2_printf+5
 10206  0003F4  EC09  F017         	call	i2_printf	;wreg free
 10207                           
 10208                           ;main.c: 659: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10209  0003F8  0E80               	movlw	128
 10210  0003FA  ECC9  F023         	call	i2_lcdInst
 10211  0003FE  0E34               	movlw	52
 10212  000400  6E27               	movwf	??_interruptHandler& (0+255),c
 10213  000402  0EF2               	movlw	242
 10214  000404                     i2u709_47:
 10215  000404  2EE8               	decfsz	wreg,f,c
 10216  000406  D7FE               	bra	i2u709_47
 10217  000408  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10218  00040A  D7FC               	bra	i2u709_47
 10219                           
 10220                           ;main.c: 660: _delay((unsigned long)((200)*(32000000/4000.0)));
 10221  00040C  0E09               	movlw	9
 10222  00040E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10223  000410  0E1E               	movlw	30
 10224  000412  6E27               	movwf	??_interruptHandler& (0+255),c
 10225  000414  0EE4               	movlw	228
 10226  000416                     i2u710_47:
 10227  000416  2EE8               	decfsz	wreg,f,c
 10228  000418  D7FE               	bra	i2u710_47
 10229  00041A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10230  00041C  D7FC               	bra	i2u710_47
 10231  00041E  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10232  000420  D7FA               	bra	i2u710_47
 10233  000422  D000               	nop2	
 10234  000424  EF04  F007         	goto	i2l7045
 10235  000428                     i2l558:
 10236                           
 10237                           ;main.c: 666: }
 10238                           ;main.c: 668: if (temp == '3'){
 10239  000428  0E33               	movlw	51
 10240  00042A  1841               	xorwf	interruptHandler@temp,w,c
 10241  00042C  A4D8               	btfss	status,2,c
 10242  00042E  D123               	goto	i2l559
 10243                           
 10244                           ;main.c: 673: initLCD();
 10245  000430  EC28  F022         	call	i2_initLCD	;wreg free
 10246                           
 10247                           ;main.c: 674: printf("assembly step:%d",assembly_step);
 10248  000434  0E0F               	movlw	low STR_7
 10249  000436  6E0D               	movwf	i2printf@f,c
 10250  000438  0EFE               	movlw	high STR_7
 10251  00043A  6E0E               	movwf	i2printf@f+1,c
 10252  00043C  C0AF  F00F         	movff	_assembly_step,?i2_printf+2
 10253  000440  C0B0  F010         	movff	_assembly_step+1,?i2_printf+3
 10254  000444  EC09  F017         	call	i2_printf	;wreg free
 10255                           
 10256                           ;main.c: 675: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10257  000448  0E80               	movlw	128
 10258  00044A  ECC9  F023         	call	i2_lcdInst
 10259  00044E  0E34               	movlw	52
 10260  000450  6E27               	movwf	??_interruptHandler& (0+255),c
 10261  000452  0EF2               	movlw	242
 10262  000454                     i2u711_47:
 10263  000454  2EE8               	decfsz	wreg,f,c
 10264  000456  D7FE               	bra	i2u711_47
 10265  000458  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10266  00045A  D7FC               	bra	i2u711_47
 10267                           
 10268                           ;main.c: 676: initLCD();
 10269  00045C  EC28  F022         	call	i2_initLCD	;wreg free
 10270                           
 10271                           ;main.c: 677: for (i = 0; i<8; i++){
 10272  000460  0E00               	movlw	0
 10273  000462  0100               	movlb	0	; () banked
 10274  000464  6FBC               	movwf	(_i+1)& (0+255),b
 10275  000466  0E00               	movlw	0
 10276  000468  6FBB               	movwf	_i& (0+255),b
 10277  00046A                     i2l6723:
 10278                           
 10279                           ; BSR set to: 0
 10280  00046A  51BC               	movf	(_i+1)& (0+255),w,b
 10281  00046C  E16E               	bnz	i2l6745
 10282  00046E  0E08               	movlw	8
 10283  000470  5DBB               	subwf	_i& (0+255),w,b
 10284  000472  B0D8               	btfsc	status,0,c
 10285  000474  D06A               	goto	i2u557_40
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;main.c: 678: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10289                           
 10290                           ; BSR set to: 0
 10291                           
 10292                           ; BSR set to: 0
 10293  000476  0E01               	movlw	1
 10294  000478  ECC9  F023         	call	i2_lcdInst
 10295  00047C  0E9C               	movlw	156
 10296  00047E  6E27               	movwf	??_interruptHandler& (0+255),c
 10297  000480  0ED7               	movlw	215
 10298  000482                     i2u712_47:
 10299  000482  2EE8               	decfsz	wreg,f,c
 10300  000484  D7FE               	bra	i2u712_47
 10301  000486  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10302  000488  D7FC               	bra	i2u712_47
 10303  00048A  F000               	nop	
 10304                           
 10305                           ;main.c: 679: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10306  00048C  0E80               	movlw	128
 10307  00048E  ECC9  F023         	call	i2_lcdInst
 10308  000492  0E34               	movlw	52
 10309  000494  6E27               	movwf	??_interruptHandler& (0+255),c
 10310  000496  0EF2               	movlw	242
 10311  000498                     i2u713_47:
 10312  000498  2EE8               	decfsz	wreg,f,c
 10313  00049A  D7FE               	bra	i2u713_47
 10314  00049C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10315  00049E  D7FC               	bra	i2u713_47
 10316                           
 10317                           ;main.c: 680: printf("C%d:B%d,N%d", B_array[i],N_array[i]);
 10318  0004A0  0E1B               	movlw	low STR_38
 10319  0004A2  6E0D               	movwf	i2printf@f,c
 10320  0004A4  0EFF               	movlw	high STR_38
 10321  0004A6  6E0E               	movwf	i2printf@f+1,c
 10322  0004A8  90D8               	bcf	status,0,c
 10323  0004AA  0100               	movlb	0	; () banked
 10324  0004AC  35BB               	rlcf	_i& (0+255),w,b
 10325  0004AE  6ED9               	movwf	fsr2l,c
 10326  0004B0  35BC               	rlcf	(_i+1)& (0+255),w,b
 10327  0004B2  6EDA               	movwf	fsr2h,c
 10328  0004B4  0E30               	movlw	low _B_array
 10329  0004B6  26D9               	addwf	fsr2l,f,c
 10330  0004B8  0E01               	movlw	high _B_array
 10331  0004BA  22DA               	addwfc	fsr2h,f,c
 10332  0004BC  CFDE F00F          	movff	postinc2,?i2_printf+2
 10333  0004C0  CFDD F010          	movff	postdec2,?i2_printf+3
 10334  0004C4  90D8               	bcf	status,0,c
 10335  0004C6  35BB               	rlcf	_i& (0+255),w,b
 10336  0004C8  6ED9               	movwf	fsr2l,c
 10337  0004CA  35BC               	rlcf	(_i+1)& (0+255),w,b
 10338  0004CC  6EDA               	movwf	fsr2h,c
 10339  0004CE  0E10               	movlw	low _N_array
 10340  0004D0  26D9               	addwf	fsr2l,f,c
 10341  0004D2  0E01               	movlw	high _N_array
 10342  0004D4  22DA               	addwfc	fsr2h,f,c
 10343  0004D6  CFDE F011          	movff	postinc2,?i2_printf+4
 10344  0004DA  CFDD F012          	movff	postdec2,?i2_printf+5
 10345  0004DE  EC09  F017         	call	i2_printf	;wreg free
 10346                           
 10347                           ;main.c: 681: lcdInst(0xC0);;
 10348  0004E2  0EC0               	movlw	192
 10349  0004E4  ECC9  F023         	call	i2_lcdInst
 10350                           
 10351                           ;main.c: 682: printf("    S%d,W%d", S_array[i], W_array[i]);
 10352  0004E8  0E27               	movlw	low STR_39
 10353  0004EA  6E0D               	movwf	i2printf@f,c
 10354  0004EC  0EFF               	movlw	high STR_39
 10355  0004EE  6E0E               	movwf	i2printf@f+1,c
 10356  0004F0  90D8               	bcf	status,0,c
 10357  0004F2  0100               	movlb	0	; () banked
 10358  0004F4  35BB               	rlcf	_i& (0+255),w,b
 10359  0004F6  6ED9               	movwf	fsr2l,c
 10360  0004F8  35BC               	rlcf	(_i+1)& (0+255),w,b
 10361  0004FA  6EDA               	movwf	fsr2h,c
 10362  0004FC  0E20               	movlw	low _S_array
 10363  0004FE  26D9               	addwf	fsr2l,f,c
 10364  000500  0E01               	movlw	high _S_array
 10365  000502  22DA               	addwfc	fsr2h,f,c
 10366  000504  CFDE F00F          	movff	postinc2,?i2_printf+2
 10367  000508  CFDD F010          	movff	postdec2,?i2_printf+3
 10368  00050C  90D8               	bcf	status,0,c
 10369  00050E  35BB               	rlcf	_i& (0+255),w,b
 10370  000510  6ED9               	movwf	fsr2l,c
 10371  000512  35BC               	rlcf	(_i+1)& (0+255),w,b
 10372  000514  6EDA               	movwf	fsr2h,c
 10373  000516  0E00               	movlw	low _W_array
 10374  000518  26D9               	addwf	fsr2l,f,c
 10375  00051A  0E01               	movlw	high _W_array
 10376  00051C  22DA               	addwfc	fsr2h,f,c
 10377  00051E  CFDE F011          	movff	postinc2,?i2_printf+4
 10378  000522  CFDD F012          	movff	postdec2,?i2_printf+5
 10379  000526  EC09  F017         	call	i2_printf	;wreg free
 10380                           
 10381                           ;main.c: 683: _delay((unsigned long)((500)*(32000000/4000.0)));
 10382  00052A  0E15               	movlw	21
 10383  00052C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10384  00052E  0E4B               	movlw	75
 10385  000530  6E27               	movwf	??_interruptHandler& (0+255),c
 10386  000532  0EBE               	movlw	190
 10387  000534                     i2u714_47:
 10388  000534  2EE8               	decfsz	wreg,f,c
 10389  000536  D7FE               	bra	i2u714_47
 10390  000538  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10391  00053A  D7FC               	bra	i2u714_47
 10392  00053C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10393  00053E  D7FA               	bra	i2u714_47
 10394  000540  D000               	nop2	
 10395  000542  0100               	movlb	0	; () banked
 10396  000544  4BBB               	infsnz	_i& (0+255),f,b
 10397  000546  2BBC               	incf	(_i+1)& (0+255),f,b
 10398  000548  D790               	goto	i2l6723
 10399  00054A                     i2u557_40:
 10400  00054A                     i2l6745:
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;main.c: 689: }
 10404                           ;main.c: 692: _delay((unsigned long)((400)*(32000000/4000.0)));
 10405  00054A  0E11               	movlw	17
 10406  00054C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10407  00054E  0E3C               	movlw	60
 10408  000550  6E27               	movwf	??_interruptHandler& (0+255),c
 10409  000552  0ECB               	movlw	203
 10410  000554                     i2u715_47:
 10411  000554  2EE8               	decfsz	wreg,f,c
 10412  000556  D7FE               	bra	i2u715_47
 10413  000558  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10414  00055A  D7FC               	bra	i2u715_47
 10415  00055C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10416  00055E  D7FA               	bra	i2u715_47
 10417  000560  F000               	nop	
 10418                           
 10419                           ;main.c: 693: initLCD();
 10420  000562  EC28  F022         	call	i2_initLCD	;wreg free
 10421                           
 10422                           ;main.c: 695: printf("Bolt_remain:%d",B_remain);
 10423  000566  0E7F               	movlw	low STR_23
 10424  000568  6E0D               	movwf	i2printf@f,c
 10425  00056A  0EFE               	movlw	high STR_23
 10426  00056C  6E0E               	movwf	i2printf@f+1,c
 10427  00056E  C0A5  F00F         	movff	_B_remain,?i2_printf+2
 10428  000572  C0A6  F010         	movff	_B_remain+1,?i2_printf+3
 10429  000576  EC09  F017         	call	i2_printf	;wreg free
 10430                           
 10431                           ;main.c: 696: _delay((unsigned long)((500)*(32000000/4000.0)));
 10432  00057A  0E15               	movlw	21
 10433  00057C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10434  00057E  0E4B               	movlw	75
 10435  000580  6E27               	movwf	??_interruptHandler& (0+255),c
 10436  000582  0EBE               	movlw	190
 10437  000584                     i2u716_47:
 10438  000584  2EE8               	decfsz	wreg,f,c
 10439  000586  D7FE               	bra	i2u716_47
 10440  000588  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10441  00058A  D7FC               	bra	i2u716_47
 10442  00058C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10443  00058E  D7FA               	bra	i2u716_47
 10444  000590  D000               	nop2	
 10445                           
 10446                           ;main.c: 697: initLCD();
 10447  000592  EC28  F022         	call	i2_initLCD	;wreg free
 10448                           
 10449                           ;main.c: 699: printf("Nut_remain:%d",N_remain);
 10450  000596  0EE6               	movlw	low STR_24
 10451  000598  6E0D               	movwf	i2printf@f,c
 10452  00059A  0EFE               	movlw	high STR_24
 10453  00059C  6E0E               	movwf	i2printf@f+1,c
 10454  00059E  C0A3  F00F         	movff	_N_remain,?i2_printf+2
 10455  0005A2  C0A4  F010         	movff	_N_remain+1,?i2_printf+3
 10456  0005A6  EC09  F017         	call	i2_printf	;wreg free
 10457                           
 10458                           ;main.c: 700: _delay((unsigned long)((500)*(32000000/4000.0)));
 10459  0005AA  0E15               	movlw	21
 10460  0005AC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10461  0005AE  0E4B               	movlw	75
 10462  0005B0  6E27               	movwf	??_interruptHandler& (0+255),c
 10463  0005B2  0EBE               	movlw	190
 10464  0005B4                     i2u717_47:
 10465  0005B4  2EE8               	decfsz	wreg,f,c
 10466  0005B6  D7FE               	bra	i2u717_47
 10467  0005B8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10468  0005BA  D7FC               	bra	i2u717_47
 10469  0005BC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10470  0005BE  D7FA               	bra	i2u717_47
 10471  0005C0  D000               	nop2	
 10472                           
 10473                           ;main.c: 702: initLCD();
 10474  0005C2  EC28  F022         	call	i2_initLCD	;wreg free
 10475                           
 10476                           ;main.c: 703: printf("Spacer_remain:%d",S_remain);
 10477  0005C6  0EED               	movlw	low STR_25
 10478  0005C8  6E0D               	movwf	i2printf@f,c
 10479  0005CA  0EFD               	movlw	high STR_25
 10480  0005CC  6E0E               	movwf	i2printf@f+1,c
 10481  0005CE  C0A1  F00F         	movff	_S_remain,?i2_printf+2
 10482  0005D2  C0A2  F010         	movff	_S_remain+1,?i2_printf+3
 10483  0005D6  EC09  F017         	call	i2_printf	;wreg free
 10484                           
 10485                           ;main.c: 704: _delay((unsigned long)((500)*(32000000/4000.0)));
 10486  0005DA  0E15               	movlw	21
 10487  0005DC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10488  0005DE  0E4B               	movlw	75
 10489  0005E0  6E27               	movwf	??_interruptHandler& (0+255),c
 10490  0005E2  0EBE               	movlw	190
 10491  0005E4                     i2u718_47:
 10492  0005E4  2EE8               	decfsz	wreg,f,c
 10493  0005E6  D7FE               	bra	i2u718_47
 10494  0005E8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10495  0005EA  D7FC               	bra	i2u718_47
 10496  0005EC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10497  0005EE  D7FA               	bra	i2u718_47
 10498  0005F0  D000               	nop2	
 10499                           
 10500                           ;main.c: 706: initLCD();
 10501  0005F2  EC28  F022         	call	i2_initLCD	;wreg free
 10502                           
 10503                           ;main.c: 707: printf("Washer_remain:%d",W_remain);
 10504  0005F6  0EFE               	movlw	low STR_26
 10505  0005F8  6E0D               	movwf	i2printf@f,c
 10506  0005FA  0EFD               	movlw	high STR_26
 10507  0005FC  6E0E               	movwf	i2printf@f+1,c
 10508  0005FE  C09F  F00F         	movff	_W_remain,?i2_printf+2
 10509  000602  C0A0  F010         	movff	_W_remain+1,?i2_printf+3
 10510  000606  EC09  F017         	call	i2_printf	;wreg free
 10511                           
 10512                           ;main.c: 708: _delay((unsigned long)((500)*(32000000/4000.0)));
 10513  00060A  0E15               	movlw	21
 10514  00060C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10515  00060E  0E4B               	movlw	75
 10516  000610  6E27               	movwf	??_interruptHandler& (0+255),c
 10517  000612  0EBE               	movlw	190
 10518  000614                     i2u719_47:
 10519  000614  2EE8               	decfsz	wreg,f,c
 10520  000616  D7FE               	bra	i2u719_47
 10521  000618  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10522  00061A  D7FC               	bra	i2u719_47
 10523  00061C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10524  00061E  D7FA               	bra	i2u719_47
 10525  000620  D000               	nop2	
 10526                           
 10527                           ;main.c: 710: initLCD();
 10528  000622  EC28  F022         	call	i2_initLCD	;wreg free
 10529                           
 10530                           ;main.c: 712: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10531  000626  0E01               	movlw	1
 10532  000628  ECC9  F023         	call	i2_lcdInst
 10533  00062C  0E9C               	movlw	156
 10534  00062E  6E27               	movwf	??_interruptHandler& (0+255),c
 10535  000630  0ED7               	movlw	215
 10536  000632                     i2u720_47:
 10537  000632  2EE8               	decfsz	wreg,f,c
 10538  000634  D7FE               	bra	i2u720_47
 10539  000636  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10540  000638  D7FC               	bra	i2u720_47
 10541  00063A  F000               	nop	
 10542                           
 10543                           ;main.c: 713: printf("Done");
 10544  00063C  0EDE               	movlw	low STR_44
 10545  00063E  6E0D               	movwf	i2printf@f,c
 10546  000640  0EFF               	movlw	high STR_44
 10547  000642  6E0E               	movwf	i2printf@f+1,c
 10548  000644  EC09  F017         	call	i2_printf	;wreg free
 10549                           
 10550                           ;main.c: 714: _delay((unsigned long)((100)*(32000000/4000.0)));
 10551  000648  0E05               	movlw	5
 10552  00064A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10553  00064C  0E0F               	movlw	15
 10554  00064E  6E27               	movwf	??_interruptHandler& (0+255),c
 10555  000650  0EF1               	movlw	241
 10556  000652                     i2u721_47:
 10557  000652  2EE8               	decfsz	wreg,f,c
 10558  000654  D7FE               	bra	i2u721_47
 10559  000656  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10560  000658  D7FC               	bra	i2u721_47
 10561  00065A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10562  00065C  D7FA               	bra	i2u721_47
 10563  00065E  F000               	nop	
 10564                           
 10565                           ;main.c: 715: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10566  000660  0E80               	movlw	128
 10567  000662  ECC9  F023         	call	i2_lcdInst
 10568  000666  0E34               	movlw	52
 10569  000668  6E27               	movwf	??_interruptHandler& (0+255),c
 10570  00066A  0EF2               	movlw	242
 10571  00066C                     i2u722_47:
 10572  00066C  2EE8               	decfsz	wreg,f,c
 10573  00066E  D7FE               	bra	i2u722_47
 10574  000670  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10575  000672  D7FC               	bra	i2u722_47
 10576  000674  D3C9               	goto	i2l7045
 10577  000676                     i2l559:
 10578                           
 10579                           ;main.c: 720: }
 10580                           ;main.c: 722: if (temp == '4'){
 10581  000676  0E34               	movlw	52
 10582  000678  1841               	xorwf	interruptHandler@temp,w,c
 10583  00067A  A4D8               	btfss	status,2,c
 10584  00067C  D00A               	goto	i2l562
 10585                           
 10586                           ;main.c: 723: operation_done = 1;
 10587  00067E  0E00               	movlw	0
 10588  000680  0100               	movlb	0	; () banked
 10589  000682  6FB4               	movwf	(_operation_done+1)& (0+255),b
 10590  000684  0E01               	movlw	1
 10591  000686  6FB3               	movwf	_operation_done& (0+255),b
 10592                           
 10593                           ;main.c: 724: mode = 0;
 10594  000688  0E00               	movlw	0
 10595  00068A  6FB8               	movwf	(_mode+1)& (0+255),b
 10596  00068C  0E00               	movlw	0
 10597  00068E                     L8:
 10598  00068E  6FB7               	movwf	_mode& (0+255),b
 10599  000690  D3BB               	goto	i2l7045
 10600  000692                     i2l562:
 10601                           
 10602                           ;main.c: 727: }
 10603                           ;main.c: 729: }
 10604                           ;main.c: 754: if (state == 0){
 10605                           
 10606                           ; BSR set to: 0
 10607                           
 10608                           ; BSR set to: 0
 10609  000692  0100               	movlb	0	; () banked
 10610  000694  51B1               	movf	_state& (0+255),w,b
 10611  000696  11B2               	iorwf	(_state+1)& (0+255),w,b
 10612  000698  A4D8               	btfss	status,2,c
 10613  00069A  D0CE               	goto	i2l563
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;main.c: 756: if(temp == '4'){
 10617  00069C  0E34               	movlw	52
 10618  00069E  1841               	xorwf	interruptHandler@temp,w,c
 10619  0006A0  A4D8               	btfss	status,2,c
 10620  0006A2  D01F               	goto	i2l564
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;main.c: 757: assembly_step = 4;
 10624  0006A4  0E00               	movlw	0
 10625  0006A6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10626  0006A8  0E04               	movlw	4
 10627  0006AA  6FAF               	movwf	_assembly_step& (0+255),b
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;main.c: 758: prev_state = state;
 10631  0006AC  C0B1  F188         	movff	_state,_prev_state
 10632  0006B0  C0B2  F189         	movff	_state+1,_prev_state+1
 10633                           
 10634                           ;main.c: 759: state = 1;
 10635  0006B4  0E00               	movlw	0
 10636  0006B6  6FB2               	movwf	(_state+1)& (0+255),b
 10637  0006B8  0E01               	movlw	1
 10638  0006BA  6FB1               	movwf	_state& (0+255),b
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;main.c: 760: lcdInst(0xC0);;
 10642  0006BC  0EC0               	movlw	192
 10643  0006BE  ECC9  F023         	call	i2_lcdInst
 10644                           
 10645                           ;main.c: 761: putch(keys[keypress]);
 10646  0006C2  5040               	movf	interruptHandler@keypress,w,c
 10647  0006C4  0D01               	mullw	1
 10648  0006C6  0E73               	movlw	low _keys
 10649  0006C8  24F3               	addwf	prodl,w,c
 10650  0006CA  6EF6               	movwf	tblptrl,c
 10651  0006CC  0EFC               	movlw	high _keys
 10652  0006CE  20F4               	addwfc	prodh,w,c
 10653  0006D0  6EF7               	movwf	tblptrh,c
 10654  0006D2                     	if	1	;There are 3 active tblptr bytes
 10655  0006D2  6AF8               	clrf	tblptru,c
 10656  0006D4  0E00               	movlw	low (__mediumconst shr (0+16))
 10657  0006D6  22F8               	addwfc	tblptru,f,c
 10658  0006D8                     	endif
 10659  0006D8  0008               	tblrd		*
 10660  0006DA  50F5               	movf	tablat,w,c
 10661  0006DC  ECBF  F023         	call	i2_putch
 10662                           
 10663                           ;main.c: 763: }
 10664  0006E0  D0A4               	goto	i2l573
 10665  0006E2                     i2l564:
 10666                           
 10667                           ;main.c: 764: else if(temp == '5'){
 10668  0006E2  0E35               	movlw	53
 10669  0006E4  1841               	xorwf	interruptHandler@temp,w,c
 10670  0006E6  A4D8               	btfss	status,2,c
 10671  0006E8  D020               	goto	i2l566
 10672                           
 10673                           ;main.c: 765: assembly_step = 5;
 10674  0006EA  0E00               	movlw	0
 10675  0006EC  0100               	movlb	0	; () banked
 10676  0006EE  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10677  0006F0  0E05               	movlw	5
 10678  0006F2  6FAF               	movwf	_assembly_step& (0+255),b
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 766: prev_state = state;
 10682  0006F4  C0B1  F188         	movff	_state,_prev_state
 10683  0006F8  C0B2  F189         	movff	_state+1,_prev_state+1
 10684                           
 10685                           ;main.c: 767: state = 1;
 10686  0006FC  0E00               	movlw	0
 10687  0006FE  6FB2               	movwf	(_state+1)& (0+255),b
 10688  000700  0E01               	movlw	1
 10689  000702  6FB1               	movwf	_state& (0+255),b
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;main.c: 768: lcdInst(0xC0);;
 10693  000704  0EC0               	movlw	192
 10694  000706  ECC9  F023         	call	i2_lcdInst
 10695                           
 10696                           ;main.c: 769: putch(keys[keypress]);
 10697  00070A  5040               	movf	interruptHandler@keypress,w,c
 10698  00070C  0D01               	mullw	1
 10699  00070E  0E73               	movlw	low _keys
 10700  000710  24F3               	addwf	prodl,w,c
 10701  000712  6EF6               	movwf	tblptrl,c
 10702  000714  0EFC               	movlw	high _keys
 10703  000716  20F4               	addwfc	prodh,w,c
 10704  000718  6EF7               	movwf	tblptrh,c
 10705  00071A                     	if	1	;There are 3 active tblptr bytes
 10706  00071A  6AF8               	clrf	tblptru,c
 10707  00071C  0E00               	movlw	low (__mediumconst shr (0+16))
 10708  00071E  22F8               	addwfc	tblptru,f,c
 10709  000720                     	endif
 10710  000720  0008               	tblrd		*
 10711  000722  50F5               	movf	tablat,w,c
 10712  000724  ECBF  F023         	call	i2_putch
 10713                           
 10714                           ;main.c: 771: }
 10715  000728  D080               	goto	i2l573
 10716  00072A                     i2l566:
 10717                           
 10718                           ;main.c: 772: else if (temp == '6') {
 10719  00072A  0E36               	movlw	54
 10720  00072C  1841               	xorwf	interruptHandler@temp,w,c
 10721  00072E  A4D8               	btfss	status,2,c
 10722  000730  D020               	goto	i2l568
 10723                           
 10724                           ;main.c: 773: assembly_step = 6;
 10725  000732  0E00               	movlw	0
 10726  000734  0100               	movlb	0	; () banked
 10727  000736  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10728  000738  0E06               	movlw	6
 10729  00073A  6FAF               	movwf	_assembly_step& (0+255),b
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;main.c: 774: prev_state = state;
 10733  00073C  C0B1  F188         	movff	_state,_prev_state
 10734  000740  C0B2  F189         	movff	_state+1,_prev_state+1
 10735                           
 10736                           ;main.c: 775: state = 1;
 10737  000744  0E00               	movlw	0
 10738  000746  6FB2               	movwf	(_state+1)& (0+255),b
 10739  000748  0E01               	movlw	1
 10740  00074A  6FB1               	movwf	_state& (0+255),b
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;main.c: 776: lcdInst(0xC0);;
 10744  00074C  0EC0               	movlw	192
 10745  00074E  ECC9  F023         	call	i2_lcdInst
 10746                           
 10747                           ;main.c: 777: putch(keys[keypress]);
 10748  000752  5040               	movf	interruptHandler@keypress,w,c
 10749  000754  0D01               	mullw	1
 10750  000756  0E73               	movlw	low _keys
 10751  000758  24F3               	addwf	prodl,w,c
 10752  00075A  6EF6               	movwf	tblptrl,c
 10753  00075C  0EFC               	movlw	high _keys
 10754  00075E  20F4               	addwfc	prodh,w,c
 10755  000760  6EF7               	movwf	tblptrh,c
 10756  000762                     	if	1	;There are 3 active tblptr bytes
 10757  000762  6AF8               	clrf	tblptru,c
 10758  000764  0E00               	movlw	low (__mediumconst shr (0+16))
 10759  000766  22F8               	addwfc	tblptru,f,c
 10760  000768                     	endif
 10761  000768  0008               	tblrd		*
 10762  00076A  50F5               	movf	tablat,w,c
 10763  00076C  ECBF  F023         	call	i2_putch
 10764                           
 10765                           ;main.c: 778: }
 10766  000770  D05C               	goto	i2l573
 10767  000772                     i2l568:
 10768                           
 10769                           ;main.c: 779: else if (temp == '7'){
 10770  000772  0E37               	movlw	55
 10771  000774  1841               	xorwf	interruptHandler@temp,w,c
 10772  000776  A4D8               	btfss	status,2,c
 10773  000778  D020               	goto	i2l570
 10774                           
 10775                           ;main.c: 780: assembly_step = 7;
 10776  00077A  0E00               	movlw	0
 10777  00077C  0100               	movlb	0	; () banked
 10778  00077E  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10779  000780  0E07               	movlw	7
 10780  000782  6FAF               	movwf	_assembly_step& (0+255),b
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;main.c: 781: prev_state = state;
 10784  000784  C0B1  F188         	movff	_state,_prev_state
 10785  000788  C0B2  F189         	movff	_state+1,_prev_state+1
 10786                           
 10787                           ;main.c: 782: state = 1;
 10788  00078C  0E00               	movlw	0
 10789  00078E  6FB2               	movwf	(_state+1)& (0+255),b
 10790  000790  0E01               	movlw	1
 10791  000792  6FB1               	movwf	_state& (0+255),b
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;main.c: 783: lcdInst(0xC0);;
 10795  000794  0EC0               	movlw	192
 10796  000796  ECC9  F023         	call	i2_lcdInst
 10797                           
 10798                           ;main.c: 784: putch(keys[keypress]);
 10799  00079A  5040               	movf	interruptHandler@keypress,w,c
 10800  00079C  0D01               	mullw	1
 10801  00079E  0E73               	movlw	low _keys
 10802  0007A0  24F3               	addwf	prodl,w,c
 10803  0007A2  6EF6               	movwf	tblptrl,c
 10804  0007A4  0EFC               	movlw	high _keys
 10805  0007A6  20F4               	addwfc	prodh,w,c
 10806  0007A8  6EF7               	movwf	tblptrh,c
 10807  0007AA                     	if	1	;There are 3 active tblptr bytes
 10808  0007AA  6AF8               	clrf	tblptru,c
 10809  0007AC  0E00               	movlw	low (__mediumconst shr (0+16))
 10810  0007AE  22F8               	addwfc	tblptru,f,c
 10811  0007B0                     	endif
 10812  0007B0  0008               	tblrd		*
 10813  0007B2  50F5               	movf	tablat,w,c
 10814  0007B4  ECBF  F023         	call	i2_putch
 10815                           
 10816                           ;main.c: 786: }
 10817  0007B8  D038               	goto	i2l573
 10818  0007BA                     i2l570:
 10819                           
 10820                           ;main.c: 787: else if (temp == '8'){
 10821  0007BA  0E38               	movlw	56
 10822  0007BC  1841               	xorwf	interruptHandler@temp,w,c
 10823  0007BE  A4D8               	btfss	status,2,c
 10824  0007C0  D020               	goto	i2l572
 10825                           
 10826                           ;main.c: 788: assembly_step = 8;
 10827  0007C2  0E00               	movlw	0
 10828  0007C4  0100               	movlb	0	; () banked
 10829  0007C6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 10830  0007C8  0E08               	movlw	8
 10831  0007CA  6FAF               	movwf	_assembly_step& (0+255),b
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;main.c: 789: prev_state = state;
 10835  0007CC  C0B1  F188         	movff	_state,_prev_state
 10836  0007D0  C0B2  F189         	movff	_state+1,_prev_state+1
 10837                           
 10838                           ;main.c: 790: state = 1;
 10839  0007D4  0E00               	movlw	0
 10840  0007D6  6FB2               	movwf	(_state+1)& (0+255),b
 10841  0007D8  0E01               	movlw	1
 10842  0007DA  6FB1               	movwf	_state& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 791: lcdInst(0xC0);;
 10846  0007DC  0EC0               	movlw	192
 10847  0007DE  ECC9  F023         	call	i2_lcdInst
 10848                           
 10849                           ;main.c: 792: putch(keys[keypress]);
 10850  0007E2  5040               	movf	interruptHandler@keypress,w,c
 10851  0007E4  0D01               	mullw	1
 10852  0007E6  0E73               	movlw	low _keys
 10853  0007E8  24F3               	addwf	prodl,w,c
 10854  0007EA  6EF6               	movwf	tblptrl,c
 10855  0007EC  0EFC               	movlw	high _keys
 10856  0007EE  20F4               	addwfc	prodh,w,c
 10857  0007F0  6EF7               	movwf	tblptrh,c
 10858  0007F2                     	if	1	;There are 3 active tblptr bytes
 10859  0007F2  6AF8               	clrf	tblptru,c
 10860  0007F4  0E00               	movlw	low (__mediumconst shr (0+16))
 10861  0007F6  22F8               	addwfc	tblptru,f,c
 10862  0007F8                     	endif
 10863  0007F8  0008               	tblrd		*
 10864  0007FA  50F5               	movf	tablat,w,c
 10865  0007FC  ECBF  F023         	call	i2_putch
 10866                           
 10867                           ;main.c: 794: }
 10868  000800  D014               	goto	i2l573
 10869  000802                     i2l572:
 10870                           
 10871                           ;main.c: 795: else{
 10872                           ;main.c: 801: initLCD();
 10873  000802  EC28  F022         	call	i2_initLCD	;wreg free
 10874                           
 10875                           ;main.c: 802: printf("Wrong number! ");
 10876  000806  0E61               	movlw	low STR_45
 10877  000808  6E0D               	movwf	i2printf@f,c
 10878  00080A  0EFE               	movlw	high STR_45
 10879  00080C  6E0E               	movwf	i2printf@f+1,c
 10880  00080E  EC09  F017         	call	i2_printf	;wreg free
 10881                           
 10882                           ;main.c: 803: _delay((unsigned long)((500)*(32000000/4000.0)));
 10883  000812  0E15               	movlw	21
 10884  000814  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10885  000816  0E4B               	movlw	75
 10886  000818  6E27               	movwf	??_interruptHandler& (0+255),c
 10887  00081A  0EBE               	movlw	190
 10888  00081C                     i2u723_47:
 10889  00081C  2EE8               	decfsz	wreg,f,c
 10890  00081E  D7FE               	bra	i2u723_47
 10891  000820  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10892  000822  D7FC               	bra	i2u723_47
 10893  000824  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10894  000826  D7FA               	bra	i2u723_47
 10895  000828  D000               	nop2	
 10896  00082A                     i2l573:
 10897                           
 10898                           ;main.c: 805: }
 10899                           ;main.c: 811: generate_compartment_array(assembly_step);
 10900  00082A  C0AF  F001         	movff	_assembly_step,i2generate_compartment_array@step
 10901  00082E  C0B0  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 10902  000832  EC16  F019         	call	i2_generate_compartment_array	;wreg free
 10903  000836  D2E8               	goto	i2l7045
 10904  000838                     i2l563:
 10905                           
 10906                           ;main.c: 818: }
 10907                           ;main.c: 826: if(state == 1){
 10908  000838  0100               	movlb	0	; () banked
 10909  00083A  05B1               	decf	_state& (0+255),w,b
 10910  00083C  11B2               	iorwf	(_state+1)& (0+255),w,b
 10911  00083E  A4D8               	btfss	status,2,c
 10912  000840  D18A               	goto	i2l574
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;main.c: 831: if (temp == 'A'){
 10916  000842  0E41               	movlw	65
 10917  000844  1841               	xorwf	interruptHandler@temp,w,c
 10918  000846  A4D8               	btfss	status,2,c
 10919  000848  D01C               	goto	i2l575
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;main.c: 832: lcdInst(0xC0);;
 10923  00084A  0EC0               	movlw	192
 10924  00084C  ECC9  F023         	call	i2_lcdInst
 10925                           
 10926                           ;main.c: 833: putch('B');
 10927  000850  0E42               	movlw	66
 10928  000852  ECBF  F023         	call	i2_putch
 10929                           
 10930                           ;main.c: 834: strcpy(temp_set,"B");
 10931  000856  0EE0               	movlw	low _temp_set
 10932  000858  6E07               	movwf	strcpy@to,c
 10933  00085A  0E01               	movlw	high _temp_set
 10934  00085C  6E08               	movwf	strcpy@to+1,c
 10935  00085E  0EFD               	movlw	low STR_46
 10936  000860  6E09               	movwf	strcpy@from,c
 10937  000862  0EFF               	movlw	high STR_46
 10938  000864  6E0A               	movwf	strcpy@from+1,c
 10939  000866  EC73  F022         	call	_strcpy	;wreg free
 10940                           
 10941                           ;main.c: 835: strcat(current_set,temp_set);
 10942  00086A  0EC1               	movlw	low _current_set
 10943  00086C  6E01               	movwf	strcat@to,c
 10944  00086E  0E00               	movlw	high _current_set
 10945  000870  6E02               	movwf	strcat@to+1,c
 10946  000872  0EE0               	movlw	low _temp_set
 10947  000874  6E03               	movwf	strcat@from,c
 10948  000876  0E01               	movlw	high _temp_set
 10949  000878  6E04               	movwf	strcat@from+1,c
 10950  00087A  ECD9  F022         	call	_strcat	;wreg free
 10951                           
 10952                           ;main.c: 836: counter++;
 10953  00087E  4A60               	infsnz	_counter,f,c
 10954  000880  2A61               	incf	_counter+1,f,c
 10955  000882                     i2l575:
 10956                           
 10957                           ;main.c: 837: }
 10958                           ;main.c: 839: if(temp == 'B'){
 10959  000882  0E42               	movlw	66
 10960  000884  1841               	xorwf	interruptHandler@temp,w,c
 10961  000886  A4D8               	btfss	status,2,c
 10962  000888  D01C               	goto	i2l576
 10963                           
 10964                           ;main.c: 840: lcdInst(0xC0);;
 10965  00088A  0EC0               	movlw	192
 10966  00088C  ECC9  F023         	call	i2_lcdInst
 10967                           
 10968                           ;main.c: 841: putch('N');
 10969  000890  0E4E               	movlw	78
 10970  000892  ECBF  F023         	call	i2_putch
 10971                           
 10972                           ;main.c: 842: strcpy(temp_set,"N");
 10973  000896  0EE0               	movlw	low _temp_set
 10974  000898  6E07               	movwf	strcpy@to,c
 10975  00089A  0E01               	movlw	high _temp_set
 10976  00089C  6E08               	movwf	strcpy@to+1,c
 10977  00089E  0EEA               	movlw	low (STR_85+2)
 10978  0008A0  6E09               	movwf	strcpy@from,c
 10979  0008A2  0EFF               	movlw	high (STR_85+2)
 10980  0008A4  6E0A               	movwf	strcpy@from+1,c
 10981  0008A6  EC73  F022         	call	_strcpy	;wreg free
 10982                           
 10983                           ;main.c: 843: strcat(current_set,temp_set);
 10984  0008AA  0EC1               	movlw	low _current_set
 10985  0008AC  6E01               	movwf	strcat@to,c
 10986  0008AE  0E00               	movlw	high _current_set
 10987  0008B0  6E02               	movwf	strcat@to+1,c
 10988  0008B2  0EE0               	movlw	low _temp_set
 10989  0008B4  6E03               	movwf	strcat@from,c
 10990  0008B6  0E01               	movlw	high _temp_set
 10991  0008B8  6E04               	movwf	strcat@from+1,c
 10992  0008BA  ECD9  F022         	call	_strcat	;wreg free
 10993                           
 10994                           ;main.c: 844: counter++;
 10995  0008BE  4A60               	infsnz	_counter,f,c
 10996  0008C0  2A61               	incf	_counter+1,f,c
 10997  0008C2                     i2l576:
 10998                           
 10999                           ;main.c: 845: }
 11000                           ;main.c: 847: if(temp == 'C'){
 11001  0008C2  0E43               	movlw	67
 11002  0008C4  1841               	xorwf	interruptHandler@temp,w,c
 11003  0008C6  A4D8               	btfss	status,2,c
 11004  0008C8  D01C               	goto	i2l577
 11005                           
 11006                           ;main.c: 848: lcdInst(0xC0);;
 11007  0008CA  0EC0               	movlw	192
 11008  0008CC  ECC9  F023         	call	i2_lcdInst
 11009                           
 11010                           ;main.c: 849: putch('S');
 11011  0008D0  0E53               	movlw	83
 11012  0008D2  ECBF  F023         	call	i2_putch
 11013                           
 11014                           ;main.c: 851: strcpy(temp_set,"S");
 11015  0008D6  0EE0               	movlw	low _temp_set
 11016  0008D8  6E07               	movwf	strcpy@to,c
 11017  0008DA  0E01               	movlw	high _temp_set
 11018  0008DC  6E08               	movwf	strcpy@to+1,c
 11019  0008DE  0EEE               	movlw	low (STR_86+2)
 11020  0008E0  6E09               	movwf	strcpy@from,c
 11021  0008E2  0EFF               	movlw	high (STR_86+2)
 11022  0008E4  6E0A               	movwf	strcpy@from+1,c
 11023  0008E6  EC73  F022         	call	_strcpy	;wreg free
 11024                           
 11025                           ;main.c: 852: strcat(current_set,temp_set);
 11026  0008EA  0EC1               	movlw	low _current_set
 11027  0008EC  6E01               	movwf	strcat@to,c
 11028  0008EE  0E00               	movlw	high _current_set
 11029  0008F0  6E02               	movwf	strcat@to+1,c
 11030  0008F2  0EE0               	movlw	low _temp_set
 11031  0008F4  6E03               	movwf	strcat@from,c
 11032  0008F6  0E01               	movlw	high _temp_set
 11033  0008F8  6E04               	movwf	strcat@from+1,c
 11034  0008FA  ECD9  F022         	call	_strcat	;wreg free
 11035                           
 11036                           ;main.c: 853: counter++;
 11037  0008FE  4A60               	infsnz	_counter,f,c
 11038  000900  2A61               	incf	_counter+1,f,c
 11039  000902                     i2l577:
 11040                           
 11041                           ;main.c: 854: }
 11042                           ;main.c: 855: if (temp == 'D'){
 11043  000902  0E44               	movlw	68
 11044  000904  1841               	xorwf	interruptHandler@temp,w,c
 11045  000906  A4D8               	btfss	status,2,c
 11046  000908  D01C               	goto	i2l578
 11047                           
 11048                           ;main.c: 856: lcdInst(0xC0);;
 11049  00090A  0EC0               	movlw	192
 11050  00090C  ECC9  F023         	call	i2_lcdInst
 11051                           
 11052                           ;main.c: 857: putch('W');
 11053  000910  0E57               	movlw	87
 11054  000912  ECBF  F023         	call	i2_putch
 11055                           
 11056                           ;main.c: 859: strcpy(temp_set,"W");
 11057  000916  0EE0               	movlw	low _temp_set
 11058  000918  6E07               	movwf	strcpy@to,c
 11059  00091A  0E01               	movlw	high _temp_set
 11060  00091C  6E08               	movwf	strcpy@to+1,c
 11061  00091E  0EF2               	movlw	low (STR_87+2)
 11062  000920  6E09               	movwf	strcpy@from,c
 11063  000922  0EFF               	movlw	high (STR_87+2)
 11064  000924  6E0A               	movwf	strcpy@from+1,c
 11065  000926  EC73  F022         	call	_strcpy	;wreg free
 11066                           
 11067                           ;main.c: 860: strcat(current_set,temp_set);
 11068  00092A  0EC1               	movlw	low _current_set
 11069  00092C  6E01               	movwf	strcat@to,c
 11070  00092E  0E00               	movlw	high _current_set
 11071  000930  6E02               	movwf	strcat@to+1,c
 11072  000932  0EE0               	movlw	low _temp_set
 11073  000934  6E03               	movwf	strcat@from,c
 11074  000936  0E01               	movlw	high _temp_set
 11075  000938  6E04               	movwf	strcat@from+1,c
 11076  00093A  ECD9  F022         	call	_strcat	;wreg free
 11077                           
 11078                           ;main.c: 862: counter++;
 11079  00093E  4A60               	infsnz	_counter,f,c
 11080  000940  2A61               	incf	_counter+1,f,c
 11081  000942                     i2l578:
 11082                           
 11083                           ;main.c: 863: }
 11084                           ;main.c: 865: if (keys[keypress] == '*'){
 11085  000942  5040               	movf	interruptHandler@keypress,w,c
 11086  000944  0D01               	mullw	1
 11087  000946  0E73               	movlw	low _keys
 11088  000948  24F3               	addwf	prodl,w,c
 11089  00094A  6EF6               	movwf	tblptrl,c
 11090  00094C  0EFC               	movlw	high _keys
 11091  00094E  20F4               	addwfc	prodh,w,c
 11092  000950  6EF7               	movwf	tblptrh,c
 11093  000952                     	if	1	;There are 3 active tblptr bytes
 11094  000952  6AF8               	clrf	tblptru,c
 11095  000954  0E00               	movlw	low (__mediumconst shr (0+16))
 11096  000956  22F8               	addwfc	tblptru,f,c
 11097  000958                     	endif
 11098  000958  0008               	tblrd		*
 11099  00095A  50F5               	movf	tablat,w,c
 11100  00095C  0A2A               	xorlw	42
 11101  00095E  A4D8               	btfss	status,2,c
 11102  000960  D0CF               	goto	i2l579
 11103                           
 11104                           ;main.c: 868: _delay((unsigned long)((80)*(32000000/4000.0)));
 11105  000962  0E04               	movlw	4
 11106  000964  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11107  000966  0E40               	movlw	64
 11108  000968  6E27               	movwf	??_interruptHandler& (0+255),c
 11109  00096A  0E26               	movlw	38
 11110  00096C                     i2u724_47:
 11111  00096C  2EE8               	decfsz	wreg,f,c
 11112  00096E  D7FE               	bra	i2u724_47
 11113  000970  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11114  000972  D7FC               	bra	i2u724_47
 11115  000974  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11116  000976  D7FA               	bra	i2u724_47
 11117  000978  D000               	nop2	
 11118                           
 11119                           ;main.c: 869: counter ++;
 11120  00097A  4A60               	infsnz	_counter,f,c
 11121  00097C  2A61               	incf	_counter+1,f,c
 11122                           
 11123                           ;main.c: 870: for (int i=0;i<20;i++){
 11124  00097E  0E00               	movlw	0
 11125  000980  6E3F               	movwf	interruptHandler@i+1,c
 11126  000982  0E00               	movlw	0
 11127  000984  6E3E               	movwf	interruptHandler@i,c
 11128  000986  BE3F               	btfsc	interruptHandler@i+1,7,c
 11129  000988  D008               	goto	i2l580
 11130  00098A  503F               	movf	interruptHandler@i+1,w,c
 11131  00098C  E105               	bnz	i2u571_40
 11132  00098E  0E14               	movlw	20
 11133  000990  5C3E               	subwf	interruptHandler@i,w,c
 11134  000992  B0D8               	btfsc	status,0,c
 11135  000994  D07D               	goto	i2u573_40
 11136  000996  D001               	goto	i2l580
 11137  000998                     i2u571_40:
 11138  000998  D07B               	goto	i2u573_40
 11139  00099A                     i2l580:
 11140                           
 11141                           ;main.c: 871: if (strncmp(current_set,strs[i],4) == 0){
 11142  00099A  0EC1               	movlw	low _current_set
 11143  00099C  6E07               	movwf	strncmp@s1,c
 11144  00099E  0E00               	movlw	high _current_set
 11145  0009A0  6E08               	movwf	strncmp@s1+1,c
 11146  0009A2  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 11147  0009A6  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 11148  0009AA  0E00               	movlw	0
 11149  0009AC  6E04               	movwf	i2___wmul@multiplicand+1,c
 11150  0009AE  0E05               	movlw	5
 11151  0009B0  6E03               	movwf	i2___wmul@multiplicand,c
 11152  0009B2  EC4E  F023         	call	i2___wmul	;wreg free
 11153  0009B6  0EF2               	movlw	low _strs
 11154  0009B8  2401               	addwf	?i2___wmul,w,c
 11155  0009BA  6E09               	movwf	strncmp@s2,c
 11156  0009BC  0EFC               	movlw	high _strs
 11157  0009BE  2002               	addwfc	?i2___wmul+1,w,c
 11158  0009C0  6E0A               	movwf	strncmp@s2+1,c
 11159  0009C2  0E00               	movlw	0
 11160  0009C4  6E0C               	movwf	strncmp@len+1,c
 11161  0009C6  0E04               	movlw	4
 11162  0009C8  6E0B               	movwf	strncmp@len,c
 11163  0009CA  ECDF  F01F         	call	_strncmp	;wreg free
 11164  0009CE  5007               	movf	?_strncmp,w,c
 11165  0009D0  1008               	iorwf	?_strncmp+1,w,c
 11166  0009D2  A4D8               	btfss	status,2,c
 11167  0009D4  D056               	goto	i2l582
 11168                           
 11169                           ;main.c: 872: strcpy(final_set[counter_step],current_set);
 11170  0009D6  C05E  F001         	movff	_counter_step,i2___wmul@multiplier
 11171  0009DA  C05F  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 11172  0009DE  0E00               	movlw	0
 11173  0009E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11174  0009E2  0E05               	movlw	5
 11175  0009E4  6E03               	movwf	i2___wmul@multiplicand,c
 11176  0009E6  EC4E  F023         	call	i2___wmul	;wreg free
 11177  0009EA  0EB8               	movlw	low _final_set
 11178  0009EC  2401               	addwf	?i2___wmul,w,c
 11179  0009EE  6E07               	movwf	strcpy@to,c
 11180  0009F0  0E01               	movlw	high _final_set
 11181  0009F2  2002               	addwfc	?i2___wmul+1,w,c
 11182  0009F4  6E08               	movwf	strcpy@to+1,c
 11183  0009F6  0EC1               	movlw	low _current_set
 11184  0009F8  6E09               	movwf	strcpy@from,c
 11185  0009FA  0E00               	movlw	high _current_set
 11186  0009FC  6E0A               	movwf	strcpy@from+1,c
 11187  0009FE  EC73  F022         	call	_strcpy	;wreg free
 11188                           
 11189                           ;main.c: 873: strcpy(current_set2,current_set);
 11190  000A02  0E70               	movlw	low _current_set2
 11191  000A04  6E07               	movwf	strcpy@to,c
 11192  000A06  0E00               	movlw	high _current_set2
 11193  000A08  6E08               	movwf	strcpy@to+1,c
 11194  000A0A  0EC1               	movlw	low _current_set
 11195  000A0C  6E09               	movwf	strcpy@from,c
 11196  000A0E  0E00               	movlw	high _current_set
 11197  000A10  6E0A               	movwf	strcpy@from+1,c
 11198  000A12  EC73  F022         	call	_strcpy	;wreg free
 11199                           
 11200                           ;main.c: 876: valid = 1;
 11201  000A16  0E00               	movlw	0
 11202  000A18  6E5D               	movwf	_valid+1,c
 11203  000A1A  0E01               	movlw	1
 11204  000A1C  6E5C               	movwf	_valid,c
 11205                           
 11206                           ;main.c: 877: state = 2;
 11207  000A1E  0E00               	movlw	0
 11208  000A20  0100               	movlb	0	; () banked
 11209  000A22  6FB2               	movwf	(_state+1)& (0+255),b
 11210  000A24  0E02               	movlw	2
 11211  000A26  6FB1               	movwf	_state& (0+255),b
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;main.c: 879: initLCD();
 11215  000A28  EC28  F022         	call	i2_initLCD	;wreg free
 11216                           
 11217                           ;main.c: 880: printf("correct!");
 11218  000A2C  0E6B               	movlw	low STR_50
 11219  000A2E  6E0D               	movwf	i2printf@f,c
 11220  000A30  0EFF               	movlw	high STR_50
 11221  000A32  6E0E               	movwf	i2printf@f+1,c
 11222  000A34  EC09  F017         	call	i2_printf	;wreg free
 11223                           
 11224                           ;main.c: 881: _delay((unsigned long)((100)*(32000000/4000.0)));
 11225  000A38  0E05               	movlw	5
 11226  000A3A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11227  000A3C  0E0F               	movlw	15
 11228  000A3E  6E27               	movwf	??_interruptHandler& (0+255),c
 11229  000A40  0EF1               	movlw	241
 11230  000A42                     i2u725_47:
 11231  000A42  2EE8               	decfsz	wreg,f,c
 11232  000A44  D7FE               	bra	i2u725_47
 11233  000A46  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11234  000A48  D7FC               	bra	i2u725_47
 11235  000A4A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11236  000A4C  D7FA               	bra	i2u725_47
 11237  000A4E  F000               	nop	
 11238                           
 11239                           ;main.c: 883: printf("%s",current_set);
 11240  000A50  0EF8               	movlw	low STR_5
 11241  000A52  6E0D               	movwf	i2printf@f,c
 11242  000A54  0EFF               	movlw	high STR_5
 11243  000A56  6E0E               	movwf	i2printf@f+1,c
 11244  000A58  0EC1               	movlw	low _current_set
 11245  000A5A  6E0F               	movwf	?i2_printf+2,c
 11246  000A5C  0E00               	movlw	high _current_set
 11247  000A5E  6E10               	movwf	?i2_printf+3,c
 11248  000A60  EC09  F017         	call	i2_printf	;wreg free
 11249                           
 11250                           ;main.c: 885: strcpy(current_set,"");
 11251  000A64  0EC1               	movlw	low _current_set
 11252  000A66  6E07               	movwf	strcpy@to,c
 11253  000A68  0E00               	movlw	high _current_set
 11254  000A6A  6E08               	movwf	strcpy@to+1,c
 11255  000A6C  0E6F               	movlw	low (STR_45+14)
 11256  000A6E  6E09               	movwf	strcpy@from,c
 11257  000A70  0EFE               	movlw	high (STR_45+14)
 11258  000A72  6E0A               	movwf	strcpy@from+1,c
 11259  000A74  EC73  F022         	call	_strcpy	;wreg free
 11260                           
 11261                           ;main.c: 886: counter = 0;
 11262  000A78  0E00               	movlw	0
 11263  000A7A  6E61               	movwf	_counter+1,c
 11264  000A7C  0E00               	movlw	0
 11265  000A7E  6E60               	movwf	_counter,c
 11266                           
 11267                           ;main.c: 887: break;
 11268  000A80  D007               	goto	i2u573_40
 11269  000A82                     i2l582:
 11270  000A82  4A3E               	infsnz	interruptHandler@i,f,c
 11271  000A84  2A3F               	incf	interruptHandler@i+1,f,c
 11272  000A86  BE3F               	btfsc	interruptHandler@i+1,7,c
 11273  000A88  D788               	goto	i2l580
 11274  000A8A  503F               	movf	interruptHandler@i+1,w,c
 11275  000A8C  E101               	bnz	i2l6935
 11276  000A8E  D77F               	goto	L3
 11277  000A90                     i2u573_40:
 11278  000A90                     i2l6935:
 11279                           
 11280                           ;main.c: 889: }
 11281                           ;main.c: 890: }
 11282                           ;main.c: 891: if (valid != 1){
 11283  000A90  045C               	decf	_valid,w,c
 11284  000A92  105D               	iorwf	_valid+1,w,c
 11285  000A94  B4D8               	btfsc	status,2,c
 11286  000A96  D030               	goto	i2l583
 11287                           
 11288                           ;main.c: 893: initLCD();
 11289  000A98  EC28  F022         	call	i2_initLCD	;wreg free
 11290                           
 11291                           ;main.c: 894: printf("wrong set!");
 11292  000A9C  0E56               	movlw	low STR_53
 11293  000A9E  6E0D               	movwf	i2printf@f,c
 11294  000AA0  0EFF               	movlw	high STR_53
 11295  000AA2  6E0E               	movwf	i2printf@f+1,c
 11296  000AA4  EC09  F017         	call	i2_printf	;wreg free
 11297                           
 11298                           ;main.c: 895: printf("%s",current_set);
 11299  000AA8  0EF8               	movlw	low STR_5
 11300  000AAA  6E0D               	movwf	i2printf@f,c
 11301  000AAC  0EFF               	movlw	high STR_5
 11302  000AAE  6E0E               	movwf	i2printf@f+1,c
 11303  000AB0  0EC1               	movlw	low _current_set
 11304  000AB2  6E0F               	movwf	?i2_printf+2,c
 11305  000AB4  0E00               	movlw	high _current_set
 11306  000AB6  6E10               	movwf	?i2_printf+3,c
 11307  000AB8  EC09  F017         	call	i2_printf	;wreg free
 11308                           
 11309                           ;main.c: 896: strcpy(current_set,"");
 11310  000ABC  0EC1               	movlw	low _current_set
 11311  000ABE  6E07               	movwf	strcpy@to,c
 11312  000AC0  0E00               	movlw	high _current_set
 11313  000AC2  6E08               	movwf	strcpy@to+1,c
 11314  000AC4  0E6F               	movlw	low (STR_45+14)
 11315  000AC6  6E09               	movwf	strcpy@from,c
 11316  000AC8  0EFE               	movlw	high (STR_45+14)
 11317  000ACA  6E0A               	movwf	strcpy@from+1,c
 11318  000ACC  EC73  F022         	call	_strcpy	;wreg free
 11319                           
 11320                           ;main.c: 897: _delay((unsigned long)((100)*(32000000/4000.0)));
 11321  000AD0  0E05               	movlw	5
 11322  000AD2  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11323  000AD4  0E0F               	movlw	15
 11324  000AD6  6E27               	movwf	??_interruptHandler& (0+255),c
 11325  000AD8  0EF1               	movlw	241
 11326  000ADA                     i2u726_47:
 11327  000ADA  2EE8               	decfsz	wreg,f,c
 11328  000ADC  D7FE               	bra	i2u726_47
 11329  000ADE  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11330  000AE0  D7FC               	bra	i2u726_47
 11331  000AE2  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11332  000AE4  D7FA               	bra	i2u726_47
 11333  000AE6  F000               	nop	
 11334                           
 11335                           ;main.c: 898: counter = 0;
 11336  000AE8  0E00               	movlw	0
 11337  000AEA  6E61               	movwf	_counter+1,c
 11338  000AEC  0E00               	movlw	0
 11339  000AEE  6E60               	movwf	_counter,c
 11340                           
 11341                           ;main.c: 899: valid = 0;
 11342  000AF0  0E00               	movlw	0
 11343  000AF2  6E5D               	movwf	_valid+1,c
 11344  000AF4  0E00               	movlw	0
 11345  000AF6  6E5C               	movwf	_valid,c
 11346  000AF8                     i2l583:
 11347                           
 11348                           ;main.c: 900: }
 11349                           ;main.c: 901: valid = 0;
 11350  000AF8  0E00               	movlw	0
 11351  000AFA  6E5D               	movwf	_valid+1,c
 11352  000AFC  0E00               	movlw	0
 11353  000AFE  6E5C               	movwf	_valid,c
 11354  000B00                     i2l579:
 11355                           
 11356                           ;main.c: 903: }
 11357                           ;main.c: 906: if (counter >= 5){
 11358  000B00  BE61               	btfsc	_counter+1,7,c
 11359  000B02  D182               	goto	i2l7045
 11360  000B04  5061               	movf	_counter+1,w,c
 11361  000B06  E104               	bnz	i2u575_40
 11362  000B08  0E05               	movlw	5
 11363  000B0A  5C60               	subwf	_counter,w,c
 11364  000B0C  A0D8               	btfss	status,0,c
 11365  000B0E  D17C               	goto	i2l7045
 11366  000B10                     i2u575_40:
 11367                           
 11368                           ;main.c: 908: initLCD();
 11369  000B10  EC28  F022         	call	i2_initLCD	;wreg free
 11370                           
 11371                           ;main.c: 909: printf("wrong!");
 11372  000B14  0E9E               	movlw	low STR_56
 11373  000B16  6E0D               	movwf	i2printf@f,c
 11374  000B18  0EFF               	movlw	high STR_56
 11375  000B1A  6E0E               	movwf	i2printf@f+1,c
 11376  000B1C  EC09  F017         	call	i2_printf	;wreg free
 11377                           
 11378                           ;main.c: 911: _delay((unsigned long)((100)*(32000000/4000.0)));
 11379  000B20  0E05               	movlw	5
 11380  000B22  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11381  000B24  0E0F               	movlw	15
 11382  000B26  6E27               	movwf	??_interruptHandler& (0+255),c
 11383  000B28  0EF1               	movlw	241
 11384  000B2A                     i2u727_47:
 11385  000B2A  2EE8               	decfsz	wreg,f,c
 11386  000B2C  D7FE               	bra	i2u727_47
 11387  000B2E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11388  000B30  D7FC               	bra	i2u727_47
 11389  000B32  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11390  000B34  D7FA               	bra	i2u727_47
 11391  000B36  F000               	nop	
 11392                           
 11393                           ;main.c: 913: strcpy(current_set,"");
 11394  000B38  0EC1               	movlw	low _current_set
 11395  000B3A  6E07               	movwf	strcpy@to,c
 11396  000B3C  0E00               	movlw	high _current_set
 11397  000B3E  6E08               	movwf	strcpy@to+1,c
 11398  000B40  0E6F               	movlw	low (STR_45+14)
 11399  000B42  6E09               	movwf	strcpy@from,c
 11400  000B44  0EFE               	movlw	high (STR_45+14)
 11401  000B46  6E0A               	movwf	strcpy@from+1,c
 11402  000B48  EC73  F022         	call	_strcpy	;wreg free
 11403                           
 11404                           ;main.c: 916: counter = 0;
 11405  000B4C  0E00               	movlw	0
 11406  000B4E  6E61               	movwf	_counter+1,c
 11407  000B50  0E00               	movlw	0
 11408  000B52  6E60               	movwf	_counter,c
 11409  000B54  D159               	goto	i2l7045
 11410  000B56                     i2l574:
 11411                           
 11412                           ;main.c: 921: }
 11413                           ;main.c: 926: if (state ==2){
 11414  000B56  0E02               	movlw	2
 11415  000B58  0100               	movlb	0	; () banked
 11416  000B5A  19B1               	xorwf	_state& (0+255),w,b
 11417  000B5C  11B2               	iorwf	(_state+1)& (0+255),w,b
 11418  000B5E  A4D8               	btfss	status,2,c
 11419  000B60  D125               	goto	i2l601
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;main.c: 927: counter = 0;
 11423  000B62  0E00               	movlw	0
 11424  000B64  6E61               	movwf	_counter+1,c
 11425  000B66  0E00               	movlw	0
 11426  000B68  6E60               	movwf	_counter,c
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 929: lcdInst(0xC0);;
 11430  000B6A  0EC0               	movlw	192
 11431  000B6C  ECC9  F023         	call	i2_lcdInst
 11432                           
 11433                           ;main.c: 930: putch(keys[keypress]);
 11434  000B70  5040               	movf	interruptHandler@keypress,w,c
 11435  000B72  0D01               	mullw	1
 11436  000B74  0E73               	movlw	low _keys
 11437  000B76  24F3               	addwf	prodl,w,c
 11438  000B78  6EF6               	movwf	tblptrl,c
 11439  000B7A  0EFC               	movlw	high _keys
 11440  000B7C  20F4               	addwfc	prodh,w,c
 11441  000B7E  6EF7               	movwf	tblptrh,c
 11442  000B80                     	if	1	;There are 3 active tblptr bytes
 11443  000B80  6AF8               	clrf	tblptru,c
 11444  000B82  0E00               	movlw	low (__mediumconst shr (0+16))
 11445  000B84  22F8               	addwfc	tblptru,f,c
 11446  000B86                     	endif
 11447  000B86  0008               	tblrd		*
 11448  000B88  50F5               	movf	tablat,w,c
 11449  000B8A  ECBF  F023         	call	i2_putch
 11450                           
 11451                           ;main.c: 931: _delay((unsigned long)((100)*(32000000/4000.0)));
 11452  000B8E  0E05               	movlw	5
 11453  000B90  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11454  000B92  0E0F               	movlw	15
 11455  000B94  6E27               	movwf	??_interruptHandler& (0+255),c
 11456  000B96  0EF1               	movlw	241
 11457  000B98                     i2u728_47:
 11458  000B98  2EE8               	decfsz	wreg,f,c
 11459  000B9A  D7FE               	bra	i2u728_47
 11460  000B9C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11461  000B9E  D7FC               	bra	i2u728_47
 11462  000BA0  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11463  000BA2  D7FA               	bra	i2u728_47
 11464  000BA4  F000               	nop	
 11465                           
 11466                           ;main.c: 932: printf("Processing...");
 11467  000BA6  0ECA               	movlw	low STR_58
 11468  000BA8  6E0D               	movwf	i2printf@f,c
 11469  000BAA  0EFE               	movlw	high STR_58
 11470  000BAC  6E0E               	movwf	i2printf@f+1,c
 11471  000BAE  EC09  F017         	call	i2_printf	;wreg free
 11472                           
 11473                           ;main.c: 934: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
 11474  000BB2  5040               	movf	interruptHandler@keypress,w,c
 11475  000BB4  0D01               	mullw	1
 11476  000BB6  0E73               	movlw	low _keys
 11477  000BB8  24F3               	addwf	prodl,w,c
 11478  000BBA  6EF6               	movwf	tblptrl,c
 11479  000BBC  0EFC               	movlw	high _keys
 11480  000BBE  20F4               	addwfc	prodh,w,c
 11481  000BC0  6EF7               	movwf	tblptrh,c
 11482  000BC2                     	if	1	;There are 3 active tblptr bytes
 11483  000BC2  6AF8               	clrf	tblptru,c
 11484  000BC4  0E00               	movlw	low (__mediumconst shr (0+16))
 11485  000BC6  22F8               	addwfc	tblptru,f,c
 11486  000BC8                     	endif
 11487  000BC8  0008               	tblrd		*
 11488  000BCA  50F5               	movf	tablat,w,c
 11489  000BCC  0A31               	xorlw	49
 11490  000BCE  B4D8               	btfsc	status,2,c
 11491  000BD0  D05B               	goto	i2l589
 11492  000BD2  5040               	movf	interruptHandler@keypress,w,c
 11493  000BD4  0D01               	mullw	1
 11494  000BD6  0E73               	movlw	low _keys
 11495  000BD8  24F3               	addwf	prodl,w,c
 11496  000BDA  6EF6               	movwf	tblptrl,c
 11497  000BDC  0EFC               	movlw	high _keys
 11498  000BDE  20F4               	addwfc	prodh,w,c
 11499  000BE0  6EF7               	movwf	tblptrh,c
 11500  000BE2                     	if	1	;There are 3 active tblptr bytes
 11501  000BE2  6AF8               	clrf	tblptru,c
 11502  000BE4  0E00               	movlw	low (__mediumconst shr (0+16))
 11503  000BE6  22F8               	addwfc	tblptru,f,c
 11504  000BE8                     	endif
 11505  000BE8  0008               	tblrd		*
 11506  000BEA  50F5               	movf	tablat,w,c
 11507  000BEC  0A32               	xorlw	50
 11508  000BEE  B4D8               	btfsc	status,2,c
 11509  000BF0  D04B               	goto	i2l589
 11510  000BF2  5040               	movf	interruptHandler@keypress,w,c
 11511  000BF4  0D01               	mullw	1
 11512  000BF6  0E73               	movlw	low _keys
 11513  000BF8  24F3               	addwf	prodl,w,c
 11514  000BFA  6EF6               	movwf	tblptrl,c
 11515  000BFC  0EFC               	movlw	high _keys
 11516  000BFE  20F4               	addwfc	prodh,w,c
 11517  000C00  6EF7               	movwf	tblptrh,c
 11518  000C02                     	if	1	;There are 3 active tblptr bytes
 11519  000C02  6AF8               	clrf	tblptru,c
 11520  000C04  0E00               	movlw	low (__mediumconst shr (0+16))
 11521  000C06  22F8               	addwfc	tblptru,f,c
 11522  000C08                     	endif
 11523  000C08  0008               	tblrd		*
 11524  000C0A  50F5               	movf	tablat,w,c
 11525  000C0C  0A33               	xorlw	51
 11526  000C0E  B4D8               	btfsc	status,2,c
 11527  000C10  D03B               	goto	i2l589
 11528  000C12  5040               	movf	interruptHandler@keypress,w,c
 11529  000C14  0D01               	mullw	1
 11530  000C16  0E73               	movlw	low _keys
 11531  000C18  24F3               	addwf	prodl,w,c
 11532  000C1A  6EF6               	movwf	tblptrl,c
 11533  000C1C  0EFC               	movlw	high _keys
 11534  000C1E  20F4               	addwfc	prodh,w,c
 11535  000C20  6EF7               	movwf	tblptrh,c
 11536  000C22                     	if	1	;There are 3 active tblptr bytes
 11537  000C22  6AF8               	clrf	tblptru,c
 11538  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
 11539  000C26  22F8               	addwfc	tblptru,f,c
 11540  000C28                     	endif
 11541  000C28  0008               	tblrd		*
 11542  000C2A  50F5               	movf	tablat,w,c
 11543  000C2C  0A34               	xorlw	52
 11544  000C2E  B4D8               	btfsc	status,2,c
 11545  000C30  D02B               	goto	i2l589
 11546  000C32  D0BC               	goto	i2l601
 11547  000C34                     
 11548                           ;main.c: 938: number = 1;
 11549  000C34  0E00               	movlw	0
 11550  000C36  6E76               	movwf	_number+1,c
 11551  000C38  0E01               	movlw	1
 11552  000C3A  D00F               	goto	L7
 11553  000C3C                     
 11554                           ;main.c: 941: number = 2;
 11555  000C3C  0E00               	movlw	0
 11556  000C3E  6E76               	movwf	_number+1,c
 11557  000C40  0E02               	movlw	2
 11558  000C42  D00B               	goto	L7
 11559  000C44                     
 11560                           ;main.c: 944: number = 3;
 11561  000C44  0E00               	movlw	0
 11562  000C46  6E76               	movwf	_number+1,c
 11563  000C48  0E03               	movlw	3
 11564  000C4A  D007               	goto	L7
 11565  000C4C                     
 11566                           ;main.c: 947: number = 4;
 11567  000C4C  0E00               	movlw	0
 11568  000C4E  6E76               	movwf	_number+1,c
 11569  000C50  0E04               	movlw	4
 11570  000C52  D003               	goto	L7
 11571  000C54                     
 11572                           ;main.c: 950: number = 5;
 11573  000C54  0E00               	movlw	0
 11574  000C56  6E76               	movwf	_number+1,c
 11575  000C58  0E05               	movlw	5
 11576  000C5A                     L7:
 11577  000C5A  6E75               	movwf	_number,c
 11578                           
 11579                           ;main.c: 951: break;
 11580  000C5C  D032               	goto	i2l591
 11581  000C5E                     
 11582                           ;main.c: 953: initLCD();
 11583  000C5E  EC28  F022         	call	i2_initLCD	;wreg free
 11584                           
 11585                           ;main.c: 954: printf("Wrong input");
 11586  000C62  0E3F               	movlw	low STR_59
 11587  000C64  6E0D               	movwf	i2printf@f,c
 11588  000C66  0EFF               	movlw	high STR_59
 11589  000C68  6E0E               	movwf	i2printf@f+1,c
 11590  000C6A  EC09  F017         	call	i2_printf	;wreg free
 11591                           
 11592                           ;main.c: 955: _delay((unsigned long)((100)*(32000000/4000.0)));
 11593  000C6E  0E05               	movlw	5
 11594  000C70  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11595  000C72  0E0F               	movlw	15
 11596  000C74  6E27               	movwf	??_interruptHandler& (0+255),c
 11597  000C76  0EF1               	movlw	241
 11598  000C78                     i2u729_47:
 11599  000C78  2EE8               	decfsz	wreg,f,c
 11600  000C7A  D7FE               	bra	i2u729_47
 11601  000C7C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11602  000C7E  D7FC               	bra	i2u729_47
 11603  000C80  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11604  000C82  D7FA               	bra	i2u729_47
 11605  000C84  F000               	nop	
 11606                           
 11607                           ;main.c: 956: }
 11608  000C86  D01D               	goto	i2l591
 11609  000C88                     i2l589:
 11610  000C88  5040               	movf	interruptHandler@keypress,w,c
 11611  000C8A  0D01               	mullw	1
 11612  000C8C  0E73               	movlw	low _keys
 11613  000C8E  24F3               	addwf	prodl,w,c
 11614  000C90  6EF6               	movwf	tblptrl,c
 11615  000C92  0EFC               	movlw	high _keys
 11616  000C94  20F4               	addwfc	prodh,w,c
 11617  000C96  6EF7               	movwf	tblptrh,c
 11618  000C98                     	if	1	;There are 3 active tblptr bytes
 11619  000C98  6AF8               	clrf	tblptru,c
 11620  000C9A  0E00               	movlw	low (__mediumconst shr (0+16))
 11621  000C9C  22F8               	addwfc	tblptru,f,c
 11622  000C9E                     	endif
 11623  000C9E  0008               	tblrd		*
 11624  000CA0  50F5               	movf	tablat,w,c
 11625                           
 11626                           ; Switch size 1, requested type "space"
 11627                           ; Number of cases is 5, Range of values is 49 to 53
 11628                           ; switch strategies available:
 11629                           ; Name         Instructions Cycles
 11630                           ; simple_byte           16     9 (average)
 11631                           ;	Chosen strategy is simple_byte
 11632  000CA2  0A31               	xorlw	49	; case 49
 11633  000CA4  B4D8               	btfsc	status,2,c
 11634  000CA6  D7C6               	goto	i2l590
 11635  000CA8  0A03               	xorlw	3	; case 50
 11636  000CAA  B4D8               	btfsc	status,2,c
 11637  000CAC  D7C7               	goto	i2l592
 11638  000CAE  0A01               	xorlw	1	; case 51
 11639  000CB0  B4D8               	btfsc	status,2,c
 11640  000CB2  D7C8               	goto	i2l593
 11641  000CB4  0A07               	xorlw	7	; case 52
 11642  000CB6  B4D8               	btfsc	status,2,c
 11643  000CB8  D7C9               	goto	i2l594
 11644  000CBA  0A01               	xorlw	1	; case 53
 11645  000CBC  B4D8               	btfsc	status,2,c
 11646  000CBE  D7CA               	goto	i2l595
 11647  000CC0  D7CE               	goto	i2l596
 11648  000CC2                     i2l591:
 11649                           
 11650                           ;main.c: 959: is_valid();
 11651  000CC2  ECF1  F007         	call	_is_valid	;wreg free
 11652                           
 11653                           ;main.c: 961: if ( check() == 0){
 11654  000CC6  EC1F  F021         	call	_check	;wreg free
 11655  000CCA  5001               	movf	?_check,w,c
 11656  000CCC  1002               	iorwf	?_check+1,w,c
 11657  000CCE  A4D8               	btfss	status,2,c
 11658  000CD0  D028               	goto	i2l597
 11659                           
 11660                           ;main.c: 962: initLCD();
 11661  000CD2  EC28  F022         	call	i2_initLCD	;wreg free
 11662                           
 11663                           ;main.c: 963: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11664  000CD6  0E80               	movlw	128
 11665  000CD8  ECC9  F023         	call	i2_lcdInst
 11666  000CDC  0E34               	movlw	52
 11667  000CDE  6E27               	movwf	??_interruptHandler& (0+255),c
 11668  000CE0  0EF2               	movlw	242
 11669  000CE2                     i2u730_47:
 11670  000CE2  2EE8               	decfsz	wreg,f,c
 11671  000CE4  D7FE               	bra	i2u730_47
 11672  000CE6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11673  000CE8  D7FC               	bra	i2u730_47
 11674                           
 11675                           ;main.c: 964: printf("TOO MANY");
 11676  000CEA  0E74               	movlw	low STR_60
 11677  000CEC  6E0D               	movwf	i2printf@f,c
 11678  000CEE  0EFF               	movlw	high STR_60
 11679  000CF0  6E0E               	movwf	i2printf@f+1,c
 11680  000CF2  EC09  F017         	call	i2_printf	;wreg free
 11681                           
 11682                           ;main.c: 966: _delay((unsigned long)((100)*(32000000/4000.0)));
 11683  000CF6  0E05               	movlw	5
 11684  000CF8  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11685  000CFA  0E0F               	movlw	15
 11686  000CFC  6E27               	movwf	??_interruptHandler& (0+255),c
 11687  000CFE  0EF1               	movlw	241
 11688  000D00                     i2u731_47:
 11689  000D00  2EE8               	decfsz	wreg,f,c
 11690  000D02  D7FE               	bra	i2u731_47
 11691  000D04  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11692  000D06  D7FC               	bra	i2u731_47
 11693  000D08  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11694  000D0A  D7FA               	bra	i2u731_47
 11695  000D0C  F000               	nop	
 11696                           
 11697                           ;main.c: 967: state = 2;
 11698  000D0E  0E00               	movlw	0
 11699  000D10  0100               	movlb	0	; () banked
 11700  000D12  6FB2               	movwf	(_state+1)& (0+255),b
 11701  000D14  0E02               	movlw	2
 11702  000D16  6FB1               	movwf	_state& (0+255),b
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;main.c: 968: number = 0;
 11706  000D18  0E00               	movlw	0
 11707  000D1A  6E76               	movwf	_number+1,c
 11708  000D1C  0E00               	movlw	0
 11709  000D1E  6E75               	movwf	_number,c
 11710                           
 11711                           ;main.c: 969: }
 11712  000D20  D045               	goto	i2l601
 11713  000D22                     i2l597:
 11714                           
 11715                           ;main.c: 972: else if (counter_step >= assembly_step-1){
 11716                           
 11717                           ; BSR set to: 0
 11718  000D22  0EFF               	movlw	255
 11719  000D24  6E27               	movwf	??_interruptHandler& (0+255),c
 11720  000D26  0EFF               	movlw	255
 11721  000D28  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11722  000D2A  C0AF  F029         	movff	_assembly_step,??_interruptHandler+2
 11723  000D2E  C0B0  F02A         	movff	_assembly_step+1,??_interruptHandler+3
 11724  000D32  5027               	movf	??_interruptHandler,w,c
 11725  000D34  2629               	addwf	??_interruptHandler+2,f,c
 11726  000D36  5028               	movf	??_interruptHandler+1,w,c
 11727  000D38  222A               	addwfc	??_interruptHandler+3,f,c
 11728  000D3A  5029               	movf	??_interruptHandler+2,w,c
 11729  000D3C  5C5E               	subwf	_counter_step,w,c
 11730  000D3E  505F               	movf	_counter_step+1,w,c
 11731  000D40  0A80               	xorlw	128
 11732  000D42  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
 11733  000D44  502A               	movf	??_interruptHandler+3,w,c
 11734  000D46  0A80               	xorlw	128
 11735  000D48  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11736  000D4A  A0D8               	btfss	status,0,c
 11737  000D4C  D013               	goto	i2l599
 11738                           
 11739                           ;main.c: 973: final_number[counter_step] = number;
 11740  000D4E  90D8               	bcf	status,0,c
 11741  000D50  345E               	rlcf	_counter_step,w,c
 11742  000D52  6ED9               	movwf	fsr2l,c
 11743  000D54  345F               	rlcf	_counter_step+1,w,c
 11744  000D56  6EDA               	movwf	fsr2h,c
 11745  000D58  0E50               	movlw	low _final_number
 11746  000D5A  26D9               	addwf	fsr2l,f,c
 11747  000D5C  0E01               	movlw	high _final_number
 11748  000D5E  22DA               	addwfc	fsr2h,f,c
 11749  000D60  C075  FFDE         	movff	_number,postinc2
 11750  000D64  C076  FFDD         	movff	_number+1,postdec2
 11751                           
 11752                           ;main.c: 974: state = 3;
 11753  000D68  0E00               	movlw	0
 11754  000D6A  0100               	movlb	0	; () banked
 11755  000D6C  6FB2               	movwf	(_state+1)& (0+255),b
 11756  000D6E  0E03               	movlw	3
 11757  000D70  6FB1               	movwf	_state& (0+255),b
 11758                           
 11759                           ;main.c: 975: }
 11760  000D72  D01C               	goto	i2l601
 11761  000D74                     i2l599:
 11762                           
 11763                           ;main.c: 976: else if ( check() == 1){
 11764                           
 11765                           ; BSR set to: 0
 11766  000D74  EC1F  F021         	call	_check	;wreg free
 11767  000D78  0401               	decf	?_check,w,c
 11768  000D7A  1002               	iorwf	?_check+1,w,c
 11769  000D7C  A4D8               	btfss	status,2,c
 11770  000D7E  D016               	goto	i2l601
 11771                           
 11772                           ;main.c: 977: state = 1;
 11773  000D80  0E00               	movlw	0
 11774  000D82  0100               	movlb	0	; () banked
 11775  000D84  6FB2               	movwf	(_state+1)& (0+255),b
 11776  000D86  0E01               	movlw	1
 11777  000D88  6FB1               	movwf	_state& (0+255),b
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;main.c: 978: initLCD();
 11781  000D8A  EC28  F022         	call	i2_initLCD	;wreg free
 11782                           
 11783                           ;main.c: 981: final_number[counter_step] = number;
 11784  000D8E  90D8               	bcf	status,0,c
 11785  000D90  345E               	rlcf	_counter_step,w,c
 11786  000D92  6ED9               	movwf	fsr2l,c
 11787  000D94  345F               	rlcf	_counter_step+1,w,c
 11788  000D96  6EDA               	movwf	fsr2h,c
 11789  000D98  0E50               	movlw	low _final_number
 11790  000D9A  26D9               	addwf	fsr2l,f,c
 11791  000D9C  0E01               	movlw	high _final_number
 11792  000D9E  22DA               	addwfc	fsr2h,f,c
 11793  000DA0  C075  FFDE         	movff	_number,postinc2
 11794  000DA4  C076  FFDD         	movff	_number+1,postdec2
 11795                           
 11796                           ;main.c: 982: counter_step++;
 11797  000DA8  4A5E               	infsnz	_counter_step,f,c
 11798  000DAA  2A5F               	incf	_counter_step+1,f,c
 11799  000DAC                     i2l601:
 11800                           
 11801                           ;main.c: 983: }
 11802                           ;main.c: 986: }
 11803                           ;main.c: 988: }
 11804                           ;main.c: 991: if(state == 4){
 11805  000DAC  0E04               	movlw	4
 11806  000DAE  0100               	movlb	0	; () banked
 11807  000DB0  19B1               	xorwf	_state& (0+255),w,b
 11808  000DB2  11B2               	iorwf	(_state+1)& (0+255),w,b
 11809  000DB4  A4D8               	btfss	status,2,c
 11810  000DB6  D014               	goto	i2l603
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;main.c: 992: if(keys[keypress] == '#')
 11814  000DB8  5040               	movf	interruptHandler@keypress,w,c
 11815  000DBA  0D01               	mullw	1
 11816  000DBC  0E73               	movlw	low _keys
 11817  000DBE  24F3               	addwf	prodl,w,c
 11818  000DC0  6EF6               	movwf	tblptrl,c
 11819  000DC2  0EFC               	movlw	high _keys
 11820  000DC4  20F4               	addwfc	prodh,w,c
 11821  000DC6  6EF7               	movwf	tblptrh,c
 11822  000DC8                     	if	1	;There are 3 active tblptr bytes
 11823  000DC8  6AF8               	clrf	tblptru,c
 11824  000DCA  0E00               	movlw	low (__mediumconst shr (0+16))
 11825  000DCC  22F8               	addwfc	tblptru,f,c
 11826  000DCE                     	endif
 11827  000DCE  0008               	tblrd		*
 11828  000DD0  50F5               	movf	tablat,w,c
 11829  000DD2  0A23               	xorlw	35
 11830  000DD4  A4D8               	btfss	status,2,c
 11831  000DD6  D004               	goto	i2l603
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 993: state = 5;
 11835  000DD8  0E00               	movlw	0
 11836  000DDA  6FB2               	movwf	(_state+1)& (0+255),b
 11837  000DDC  0E05               	movlw	5
 11838  000DDE  6FB1               	movwf	_state& (0+255),b
 11839  000DE0                     i2l603:
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;main.c: 994: }
 11843                           ;main.c: 996: B=0;N=0;S=0;W=0;
 11844                           
 11845                           ; BSR set to: 0
 11846  000DE0  0E00               	movlw	0
 11847  000DE2  6E59               	movwf	_B+1,c
 11848  000DE4  0E00               	movlw	0
 11849  000DE6  6E58               	movwf	_B,c
 11850  000DE8  0E00               	movlw	0
 11851  000DEA  6E57               	movwf	_N+1,c
 11852  000DEC  0E00               	movlw	0
 11853  000DEE  6E56               	movwf	_N,c
 11854  000DF0  0E00               	movlw	0
 11855  000DF2  6E55               	movwf	_S+1,c
 11856  000DF4  0E00               	movlw	0
 11857  000DF6  6E54               	movwf	_S,c
 11858  000DF8  0E00               	movlw	0
 11859  000DFA  6E53               	movwf	_W+1,c
 11860  000DFC  0E00               	movlw	0
 11861  000DFE  6E52               	movwf	_W,c
 11862                           
 11863                           ;main.c: 997: total_number = 0;
 11864  000E00  0E00               	movlw	0
 11865  000E02  6E5B               	movwf	_total_number+1,c
 11866  000E04  0E00               	movlw	0
 11867  000E06  6E5A               	movwf	_total_number,c
 11868  000E08                     i2l7045:
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;main.c: 999: INT1IF = 0;
 11872  000E08  90F0               	bcf	intcon3,0,c	;volatile
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;main.c: 1000: return;
 11876  000E0A  D0C5               	goto	i2l609
 11877  000E0C                     i2l543:
 11878                           
 11879                           ;main.c: 1001: }
 11880                           ;main.c: 1011: if (RBIF){
 11881  000E0C  A0F2               	btfss	intcon,0,c	;volatile
 11882  000E0E  D0B0               	goto	i2l604
 11883                           
 11884                           ;main.c: 1013: B_input = PORTBbits.RB5;
 11885  000E10  AA81               	btfss	3969,5,c	;volatile
 11886  000E12  D003               	goto	i2u587_40
 11887  000E14  6A27               	clrf	??_interruptHandler& (0+255),c
 11888  000E16  2A27               	incf	??_interruptHandler& (0+255),f,c
 11889  000E18  D001               	goto	i2u587_48
 11890  000E1A                     i2u587_40:
 11891  000E1A  6A27               	clrf	??_interruptHandler& (0+255),c
 11892  000E1C                     i2u587_48:
 11893  000E1C  5027               	movf	??_interruptHandler,w,c
 11894  000E1E  0101               	movlb	1	; () banked
 11895  000E20  6F86               	movwf	_B_input& (0+255),b
 11896  000E22  6B87               	clrf	(_B_input+1)& (0+255),b
 11897                           
 11898                           ;main.c: 1014: N_input = PORTBbits.RB6;
 11899  000E24  AC81               	btfss	3969,6,c	;volatile
 11900  000E26  D003               	goto	i2u588_40
 11901  000E28  6A27               	clrf	??_interruptHandler& (0+255),c
 11902  000E2A  2A27               	incf	??_interruptHandler& (0+255),f,c
 11903  000E2C  D001               	goto	i2u588_48
 11904  000E2E                     i2u588_40:
 11905  000E2E  6A27               	clrf	??_interruptHandler& (0+255),c
 11906  000E30                     i2u588_48:
 11907  000E30  5027               	movf	??_interruptHandler,w,c
 11908  000E32  0101               	movlb	1	; () banked
 11909  000E34  6F84               	movwf	_N_input& (0+255),b
 11910  000E36  6B85               	clrf	(_N_input+1)& (0+255),b
 11911                           
 11912                           ;main.c: 1015: S_input = PORTBbits.RB4;
 11913  000E38  A881               	btfss	3969,4,c	;volatile
 11914  000E3A  D003               	goto	i2u589_40
 11915  000E3C  6A27               	clrf	??_interruptHandler& (0+255),c
 11916  000E3E  2A27               	incf	??_interruptHandler& (0+255),f,c
 11917  000E40  D001               	goto	i2u589_48
 11918  000E42                     i2u589_40:
 11919  000E42  6A27               	clrf	??_interruptHandler& (0+255),c
 11920  000E44                     i2u589_48:
 11921  000E44  5027               	movf	??_interruptHandler,w,c
 11922  000E46  0101               	movlb	1	; () banked
 11923  000E48  6F82               	movwf	_S_input& (0+255),b
 11924  000E4A  6B83               	clrf	(_S_input+1)& (0+255),b
 11925                           
 11926                           ;main.c: 1016: W_input = PORTBbits.RB7;
 11927  000E4C  AE81               	btfss	3969,7,c	;volatile
 11928  000E4E  D003               	goto	i2u590_40
 11929  000E50  6A27               	clrf	??_interruptHandler& (0+255),c
 11930  000E52  2A27               	incf	??_interruptHandler& (0+255),f,c
 11931  000E54  D001               	goto	i2u590_48
 11932  000E56                     i2u590_40:
 11933  000E56  6A27               	clrf	??_interruptHandler& (0+255),c
 11934  000E58                     i2u590_48:
 11935  000E58  5027               	movf	??_interruptHandler,w,c
 11936  000E5A  0101               	movlb	1	; () banked
 11937  000E5C  6F80               	movwf	_W_input& (0+255),b
 11938  000E5E  6B81               	clrf	(_W_input+1)& (0+255),b
 11939                           
 11940                           ; BSR set to: 1
 11941                           ;main.c: 1020: if (B_input == 1){
 11942  000E60  0586               	decf	_B_input& (0+255),w,b
 11943  000E62  1187               	iorwf	(_B_input+1)& (0+255),w,b
 11944  000E64  A4D8               	btfss	status,2,c
 11945  000E66  D01A               	goto	i2l605
 11946                           
 11947                           ; BSR set to: 1
 11948                           ;main.c: 1021: B_spacingTime = 0;
 11949  000E68  0E00               	movlw	0
 11950  000E6A  0100               	movlb	0	; () banked
 11951  000E6C  6F9E               	movwf	(_B_spacingTime+1)& (0+255),b
 11952  000E6E  0E00               	movlw	0
 11953  000E70  6F9D               	movwf	_B_spacingTime& (0+255),b
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;main.c: 1022: initLCD();
 11957  000E72  EC28  F022         	call	i2_initLCD	;wreg free
 11958                           
 11959                           ;main.c: 1023: printf("bolt_interrupt");
 11960  000E76  0E9D               	movlw	low STR_61
 11961  000E78  6E0D               	movwf	i2printf@f,c
 11962  000E7A  0EFE               	movlw	high STR_61
 11963  000E7C  6E0E               	movwf	i2printf@f+1,c
 11964  000E7E  EC09  F017         	call	i2_printf	;wreg free
 11965                           
 11966                           ;main.c: 1024: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11967  000E82  0E80               	movlw	128
 11968  000E84  ECC9  F023         	call	i2_lcdInst
 11969  000E88  0E34               	movlw	52
 11970  000E8A  6E27               	movwf	??_interruptHandler& (0+255),c
 11971  000E8C  0EF2               	movlw	242
 11972  000E8E                     i2u732_47:
 11973  000E8E  2EE8               	decfsz	wreg,f,c
 11974  000E90  D7FE               	bra	i2u732_47
 11975  000E92  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11976  000E94  D7FC               	bra	i2u732_47
 11977                           
 11978                           ;main.c: 1025: B_counter++;
 11979  000E96  0100               	movlb	0	; () banked
 11980  000E98  4BAD               	infsnz	_B_counter& (0+255),f,b
 11981  000E9A  2BAE               	incf	(_B_counter+1)& (0+255),f,b
 11982  000E9C                     i2l605:
 11983                           
 11984                           ;main.c: 1027: }
 11985                           ;main.c: 1030: if (N_input == 1){
 11986                           
 11987                           ; BSR set to: 0
 11988  000E9C  0101               	movlb	1	; () banked
 11989  000E9E  0584               	decf	_N_input& (0+255),w,b
 11990  000EA0  1185               	iorwf	(_N_input+1)& (0+255),w,b
 11991  000EA2  A4D8               	btfss	status,2,c
 11992  000EA4  D01A               	goto	i2l606
 11993                           
 11994                           ; BSR set to: 1
 11995                           ;main.c: 1031: N_spacingTime = 0;
 11996  000EA6  0E00               	movlw	0
 11997  000EA8  0100               	movlb	0	; () banked
 11998  000EAA  6F9C               	movwf	(_N_spacingTime+1)& (0+255),b
 11999  000EAC  0E00               	movlw	0
 12000  000EAE  6F9B               	movwf	_N_spacingTime& (0+255),b
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;main.c: 1032: initLCD();
 12004  000EB0  EC28  F022         	call	i2_initLCD	;wreg free
 12005                           
 12006                           ;main.c: 1033: printf("nut_interrupt");
 12007  000EB4  0EF4               	movlw	low STR_62
 12008  000EB6  6E0D               	movwf	i2printf@f,c
 12009  000EB8  0EFE               	movlw	high STR_62
 12010  000EBA  6E0E               	movwf	i2printf@f+1,c
 12011  000EBC  EC09  F017         	call	i2_printf	;wreg free
 12012                           
 12013                           ;main.c: 1034: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 12014  000EC0  0E80               	movlw	128
 12015  000EC2  ECC9  F023         	call	i2_lcdInst
 12016  000EC6  0E34               	movlw	52
 12017  000EC8  6E27               	movwf	??_interruptHandler& (0+255),c
 12018  000ECA  0EF2               	movlw	242
 12019  000ECC                     i2u733_47:
 12020  000ECC  2EE8               	decfsz	wreg,f,c
 12021  000ECE  D7FE               	bra	i2u733_47
 12022  000ED0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 12023  000ED2  D7FC               	bra	i2u733_47
 12024                           
 12025                           ;main.c: 1035: N_counter++;
 12026  000ED4  0100               	movlb	0	; () banked
 12027  000ED6  4BA9               	infsnz	_N_counter& (0+255),f,b
 12028  000ED8  2BAA               	incf	(_N_counter+1)& (0+255),f,b
 12029  000EDA                     i2l606:
 12030                           
 12031                           ;main.c: 1036: }
 12032                           ;main.c: 1038: if (S_input == 1){
 12033                           
 12034                           ; BSR set to: 0
 12035  000EDA  0101               	movlb	1	; () banked
 12036  000EDC  0582               	decf	_S_input& (0+255),w,b
 12037  000EDE  1183               	iorwf	(_S_input+1)& (0+255),w,b
 12038  000EE0  A4D8               	btfss	status,2,c
 12039  000EE2  D019               	goto	i2l607
 12040                           
 12041                           ; BSR set to: 1
 12042                           ;main.c: 1039: S_spacingTime = 0;
 12043  000EE4  0E00               	movlw	0
 12044  000EE6  0100               	movlb	0	; () banked
 12045  000EE8  6F9A               	movwf	(_S_spacingTime+1)& (0+255),b
 12046  000EEA  0E00               	movlw	0
 12047  000EEC  6F99               	movwf	_S_spacingTime& (0+255),b
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;main.c: 1040: S_counter++;
 12051  000EEE  4BAB               	infsnz	_S_counter& (0+255),f,b
 12052  000EF0  2BAC               	incf	(_S_counter+1)& (0+255),f,b
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;main.c: 1041: initLCD();
 12056  000EF2  EC28  F022         	call	i2_initLCD	;wreg free
 12057                           
 12058                           ;main.c: 1043: printf("spacer_interrupted");
 12059  000EF6  0E7E               	movlw	low STR_63
 12060  000EF8  6E0D               	movwf	i2printf@f,c
 12061  000EFA  0EFD               	movlw	high STR_63
 12062  000EFC  6E0E               	movwf	i2printf@f+1,c
 12063  000EFE  EC09  F017         	call	i2_printf	;wreg free
 12064                           
 12065                           ;main.c: 1044: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 12066  000F02  0E80               	movlw	128
 12067  000F04  ECC9  F023         	call	i2_lcdInst
 12068  000F08  0E34               	movlw	52
 12069  000F0A  6E27               	movwf	??_interruptHandler& (0+255),c
 12070  000F0C  0EF2               	movlw	242
 12071  000F0E                     i2u734_47:
 12072  000F0E  2EE8               	decfsz	wreg,f,c
 12073  000F10  D7FE               	bra	i2u734_47
 12074  000F12  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 12075  000F14  D7FC               	bra	i2u734_47
 12076  000F16                     i2l607:
 12077                           
 12078                           ;main.c: 1045: }
 12079                           ;main.c: 1047: if (W_input == 1){
 12080  000F16  0101               	movlb	1	; () banked
 12081  000F18  0580               	decf	_W_input& (0+255),w,b
 12082  000F1A  1181               	iorwf	(_W_input+1)& (0+255),w,b
 12083  000F1C  A4D8               	btfss	status,2,c
 12084  000F1E  D01A               	goto	i2l608
 12085                           
 12086                           ; BSR set to: 1
 12087                           ;main.c: 1048: W_spacingTime = 0;
 12088  000F20  0E00               	movlw	0
 12089  000F22  0100               	movlb	0	; () banked
 12090  000F24  6F98               	movwf	(_W_spacingTime+1)& (0+255),b
 12091  000F26  0E00               	movlw	0
 12092  000F28  6F97               	movwf	_W_spacingTime& (0+255),b
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;main.c: 1049: initLCD();
 12096  000F2A  EC28  F022         	call	i2_initLCD	;wreg free
 12097                           
 12098                           ;main.c: 1050: printf("washer_interrupted");
 12099  000F2E  0E91               	movlw	low STR_64
 12100  000F30  6E0D               	movwf	i2printf@f,c
 12101  000F32  0EFD               	movlw	high STR_64
 12102  000F34  6E0E               	movwf	i2printf@f+1,c
 12103  000F36  EC09  F017         	call	i2_printf	;wreg free
 12104                           
 12105                           ;main.c: 1051: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 12106  000F3A  0E80               	movlw	128
 12107  000F3C  ECC9  F023         	call	i2_lcdInst
 12108  000F40  0E34               	movlw	52
 12109  000F42  6E27               	movwf	??_interruptHandler& (0+255),c
 12110  000F44  0EF2               	movlw	242
 12111  000F46                     i2u735_47:
 12112  000F46  2EE8               	decfsz	wreg,f,c
 12113  000F48  D7FE               	bra	i2u735_47
 12114  000F4A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 12115  000F4C  D7FC               	bra	i2u735_47
 12116                           
 12117                           ;main.c: 1052: W_counter++;
 12118  000F4E  0100               	movlb	0	; () banked
 12119  000F50  4BA7               	infsnz	_W_counter& (0+255),f,b
 12120  000F52  2BA8               	incf	(_W_counter+1)& (0+255),f,b
 12121  000F54                     i2l608:
 12122                           
 12123                           ;main.c: 1055: }
 12124                           ;main.c: 1056: initLCD();
 12125                           
 12126                           ; BSR set to: 0
 12127  000F54  EC28  F022         	call	i2_initLCD	;wreg free
 12128                           
 12129                           ;main.c: 1058: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 12130  000F58  0E80               	movlw	128
 12131  000F5A  ECC9  F023         	call	i2_lcdInst
 12132  000F5E  0E34               	movlw	52
 12133  000F60  6E27               	movwf	??_interruptHandler& (0+255),c
 12134  000F62  0EF2               	movlw	242
 12135  000F64                     i2u736_47:
 12136  000F64  2EE8               	decfsz	wreg,f,c
 12137  000F66  D7FE               	bra	i2u736_47
 12138  000F68  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 12139  000F6A  D7FC               	bra	i2u736_47
 12140                           
 12141                           ;main.c: 1064: RBIF = 0;
 12142  000F6C  90F2               	bcf	intcon,0,c	;volatile
 12143                           
 12144                           ;main.c: 1065: return;
 12145  000F6E  D013               	goto	i2l609
 12146  000F70                     i2l604:
 12147                           
 12148                           ;main.c: 1066: }
 12149                           ;main.c: 1067: if(TMR0IE && TMR0IF){
 12150  000F70  BAF2               	btfsc	intcon,5,c	;volatile
 12151  000F72  A4F2               	btfss	intcon,2,c	;volatile
 12152  000F74  D010               	goto	i2l609
 12153                           
 12154                           ;main.c: 1068: timerCounter ++;
 12155  000F76  2A6A               	incf	_timerCounter,f,c	;volatile
 12156                           
 12157                           ;main.c: 1069: if (timerCounter >= 19){
 12158  000F78  0E12               	movlw	18
 12159  000F7A  646A               	cpfsgt	_timerCounter,c	;volatile
 12160  000F7C  D003               	goto	i2l610
 12161                           
 12162                           ;main.c: 1070: NeedToCloseLid = 1;
 12163  000F7E  0E01               	movlw	1
 12164  000F80  0100               	movlb	0	; () banked
 12165  000F82  6FBD               	movwf	_NeedToCloseLid& (0+255),b
 12166  000F84                     i2l610:
 12167                           
 12168                           ;main.c: 1071: }
 12169                           ;main.c: 1072: if(timerCounter >= 21){
 12170                           
 12171                           ; BSR set to: 0
 12172  000F84  0E14               	movlw	20
 12173  000F86  646A               	cpfsgt	_timerCounter,c	;volatile
 12174  000F88  D005               	goto	i2l611
 12175                           
 12176                           ;main.c: 1073: timerCounter = 0;
 12177  000F8A  0E00               	movlw	0
 12178  000F8C  6E6A               	movwf	_timerCounter,c	;volatile
 12179                           
 12180                           ;main.c: 1074: EndOfProgram = 1;
 12181  000F8E  0E01               	movlw	1
 12182  000F90  0100               	movlb	0	; () banked
 12183  000F92  6FBE               	movwf	_EndOfProgram& (0+255),b
 12184  000F94                     i2l611:
 12185                           
 12186                           ;main.c: 1075: }
 12187                           ;main.c: 1077: TMR0IF = 0;
 12188                           
 12189                           ; BSR set to: 0
 12190  000F94  94F2               	bcf	intcon,2,c	;volatile
 12191  000F96                     i2l609:
 12192  000F96  C03D  F082         	movff	??_interruptHandler+22,btemp+3
 12193  000F9A  C03C  F081         	movff	??_interruptHandler+21,btemp+2
 12194  000F9E  C03B  F080         	movff	??_interruptHandler+20,btemp+1
 12195  000FA2  C03A  F07F         	movff	??_interruptHandler+19,btemp
 12196  000FA6  C039  FFF5         	movff	??_interruptHandler+18,tablat
 12197  000FAA  C038  FFF8         	movff	??_interruptHandler+17,tblptru
 12198  000FAE  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
 12199  000FB2  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
 12200  000FB6  C035  FFF4         	movff	??_interruptHandler+14,prodh
 12201  000FBA  C034  FFF3         	movff	??_interruptHandler+13,prodl
 12202  000FBE  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
 12203  000FC2  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
 12204  000FC6  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
 12205  000FCA  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
 12206  000FCE  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
 12207  000FD2  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
 12208  000FD6  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
 12209  000FDA  C02C  FFFA         	movff	??_interruptHandler+5,pclath
 12210  000FDE  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12211  000FE0  0011               	retfie		f
 12212  000FE2                     __end_of_interruptHandler:
 12213                           	opt stack 0
 12214                           pclatu	equ	0xFFB
 12215                           pclath	equ	0xFFA
 12216                           tblptru	equ	0xFF8
 12217                           tblptrh	equ	0xFF7
 12218                           tblptrl	equ	0xFF6
 12219                           tablat	equ	0xFF5
 12220                           prodh	equ	0xFF4
 12221                           prodl	equ	0xFF3
 12222                           intcon	equ	0xFF2
 12223                           intcon3	equ	0xFF0
 12224                           indf0	equ	0xFEF
 12225                           postinc0	equ	0xFEE
 12226                           fsr0h	equ	0xFEA
 12227                           fsr0l	equ	0xFE9
 12228                           wreg	equ	0xFE8
 12229                           postdec1	equ	0xFE5
 12230                           fsr1h	equ	0xFE2
 12231                           fsr1l	equ	0xFE1
 12232                           indf2	equ	0xFDF
 12233                           postinc2	equ	0xFDE
 12234                           postdec2	equ	0xFDD
 12235                           fsr2h	equ	0xFDA
 12236                           fsr2l	equ	0xFD9
 12237                           status	equ	0xFD8
 12238                           
 12239 ;; *************** function i2_printf *****************
 12240 ;; Defined at:
 12241 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12244 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
 12245 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 12246 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
 12247 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
 12248 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
 12249 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 12250 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
 12251 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
 12252 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
 12253 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
 12254 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
 12255 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
 12256 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
 12257 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
 12258 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
 12259 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
 12260 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 12261 ;;		 -> STR_2(20), STR_1(16), 
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  printf          4    0        struct .
 12264 ;;  printf          2   35[COMRAM] int 
 12265 ;;  printf          2   32[COMRAM] unsigned int 
 12266 ;;  printf          2   30[COMRAM] unsigned int 
 12267 ;;  printf          2   28[COMRAM] PTR void [1]
 12268 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12269 ;;  printf          2   26[COMRAM] PTR const unsigned char 
 12270 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 12271 ;;  printf          1   37[COMRAM] char 
 12272 ;;  printf          1   34[COMRAM] unsigned char 
 12273 ;;  printf          1   25[COMRAM] char 
 12274 ;;  printf          1   24[COMRAM] unsigned char 
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  2   12[COMRAM] int 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12284 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12285 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;Total ram usage:       26 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    2
 12291 ;; This function calls:
 12292 ;;		i2___lwdiv
 12293 ;;		i2___lwmod
 12294 ;;		i2___wmul
 12295 ;;		i2_isdigit
 12296 ;;		i2_putch
 12297 ;; This function is called by:
 12298 ;;		_interruptHandler
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           	psect	text32
 12303  002E12                     __ptext32:
 12304                           	opt stack 0
 12305  002E12                     i2_printf:
 12306                           	opt stack 23
 12307                           
 12308                           ;doprnt.c: 466: va_list ap;
 12309                           ;doprnt.c: 499: signed char c;
 12310                           ;doprnt.c: 501: int width;
 12311                           ;doprnt.c: 506: signed char prec;
 12312                           ;doprnt.c: 508: unsigned char flag;
 12313                           ;doprnt.c: 523: union {
 12314                           ;doprnt.c: 524: unsigned long vd;
 12315                           ;doprnt.c: 525: double integ;
 12316                           ;doprnt.c: 526: } tmpval;
 12317                           ;doprnt.c: 528: unsigned int val;
 12318                           ;doprnt.c: 529: unsigned len;
 12319                           ;doprnt.c: 530: const char * cp;
 12320                           ;doprnt.c: 533: *ap = __va_start();
 12321                           
 12322                           ;incstack = 0
 12323  002E12  0E0F               	movlw	low (?i2_printf+2)
 12324  002E14  6E1D               	movwf	i2printf@ap,c
 12325  002E16  0E00               	movlw	high (?i2_printf+2)
 12326  002E18  6E1E               	movwf	i2printf@ap+1,c
 12327                           
 12328                           ;doprnt.c: 536: while(c = *f++) {
 12329  002E1A  D1FA               	goto	i2u494_40
 12330  002E1C                     
 12331                           ;doprnt.c: 538: if(c != '%')
 12332  002E1C  0E25               	movlw	37
 12333  002E1E  1826               	xorwf	i2printf@c,w,c
 12334  002E20  B4D8               	btfsc	status,2,c
 12335  002E22  D004               	goto	i2l1179
 12336                           
 12337                           ;doprnt.c: 540: {
 12338                           ;doprnt.c: 541: (putch(c) );
 12339  002E24  5026               	movf	i2printf@c,w,c
 12340  002E26  ECBF  F023         	call	i2_putch
 12341                           
 12342                           ;doprnt.c: 542: continue;
 12343  002E2A  D1F2               	goto	i2u494_40
 12344  002E2C                     i2l1179:
 12345                           
 12346                           ;doprnt.c: 543: }
 12347                           ;doprnt.c: 546: width = 0;
 12348  002E2C  0E00               	movlw	0
 12349  002E2E  6E25               	movwf	i2printf@width+1,c
 12350  002E30  0E00               	movlw	0
 12351  002E32  6E24               	movwf	i2printf@width,c
 12352                           
 12353                           ;doprnt.c: 548: flag = 0;
 12354  002E34  0E00               	movlw	0
 12355  002E36  6E23               	movwf	i2printf@flag,c
 12356                           
 12357                           ;doprnt.c: 551: switch(*f) {
 12358                           
 12359                           ;doprnt.c: 550: for(;;) {
 12360  002E38  D003               	goto	i2l1181
 12361  002E3A                     
 12362                           ;doprnt.c: 580: flag |= 0x04;
 12363  002E3A  8423               	bsf	i2printf@flag,2,c
 12364                           
 12365                           ;doprnt.c: 581: f++;
 12366  002E3C  4A0D               	infsnz	i2printf@f,f,c
 12367  002E3E  2A0E               	incf	i2printf@f+1,f,c
 12368  002E40                     i2l1181:
 12369  002E40  C00D  FFF6         	movff	i2printf@f,tblptrl
 12370  002E44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12371  002E48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12372  002E48  6AF8               	clrf	tblptru,c
 12373  002E4A                     	endif
 12374  002E4A                     	if	0	;tblptru may be non-zero
 12375  002E4A                     	endif
 12376  002E4A  0008               	tblrd		*
 12377  002E4C  50F5               	movf	tablat,w,c
 12378                           
 12379                           ; Switch size 1, requested type "space"
 12380                           ; Number of cases is 1, Range of values is 48 to 48
 12381                           ; switch strategies available:
 12382                           ; Name         Instructions Cycles
 12383                           ; simple_byte            4     3 (average)
 12384                           ;	Chosen strategy is simple_byte
 12385  002E4E  0A30               	xorlw	48	; case 48
 12386  002E50  B4D8               	btfsc	status,2,c
 12387  002E52  D7F3               	goto	i2l1182
 12388                           
 12389                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12390                           
 12391                           ;doprnt.c: 586: }
 12392                           
 12393                           ;doprnt.c: 585: break;
 12394  002E54  C00D  FFF6         	movff	i2printf@f,tblptrl
 12395  002E58  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12396  002E5C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12397  002E5C  6AF8               	clrf	tblptru,c
 12398  002E5E                     	endif
 12399  002E5E                     	if	0	;tblptru may be non-zero
 12400  002E5E                     	endif
 12401  002E5E  0008               	tblrd		*
 12402  002E60  50F5               	movf	tablat,w,c
 12403  002E62  EC84  F023         	call	i2_isdigit
 12404  002E66  A0D8               	btfss	status,0,c
 12405  002E68  D0A6               	goto	i2l1189
 12406                           
 12407                           ;doprnt.c: 598: width = 0;
 12408  002E6A  0E00               	movlw	0
 12409  002E6C  6E25               	movwf	i2printf@width+1,c
 12410  002E6E  0E00               	movlw	0
 12411  002E70  6E24               	movwf	i2printf@width,c
 12412  002E72                     
 12413                           ;doprnt.c: 600: width *= 10;
 12414  002E72  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
 12415  002E76  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12416  002E7A  0E00               	movlw	0
 12417  002E7C  6E04               	movwf	i2___wmul@multiplicand+1,c
 12418  002E7E  0E0A               	movlw	10
 12419  002E80  6E03               	movwf	i2___wmul@multiplicand,c
 12420  002E82  EC4E  F023         	call	i2___wmul	;wreg free
 12421  002E86  C001  F024         	movff	?i2___wmul,i2printf@width
 12422  002E8A  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
 12423                           
 12424                           ;doprnt.c: 601: width += *f++ - '0';
 12425  002E8E  0ED0               	movlw	208
 12426  002E90  6E15               	movwf	??i2_printf& (0+255),c
 12427  002E92  0EFF               	movlw	255
 12428  002E94  6E16               	movwf	(??i2_printf+1)& (0+255),c
 12429  002E96  C00D  FFF6         	movff	i2printf@f,tblptrl
 12430  002E9A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12431  002E9E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12432  002E9E  6AF8               	clrf	tblptru,c
 12433  002EA0                     	endif
 12434  002EA0                     	if	0	;tblptru may be non-zero
 12435  002EA0                     	endif
 12436  002EA0  0008               	tblrd		*
 12437  002EA2  50F5               	movf	tablat,w,c
 12438  002EA4  6E17               	movwf	(??i2_printf+2)& (0+255),c
 12439  002EA6  6A18               	clrf	(??i2_printf+3)& (0+255),c
 12440  002EA8  5015               	movf	??i2_printf,w,c
 12441  002EAA  2617               	addwf	??i2_printf+2,f,c
 12442  002EAC  5016               	movf	??i2_printf+1,w,c
 12443  002EAE  2218               	addwfc	??i2_printf+3,f,c
 12444  002EB0  5017               	movf	??i2_printf+2,w,c
 12445  002EB2  2624               	addwf	i2printf@width,f,c
 12446  002EB4  5018               	movf	??i2_printf+3,w,c
 12447  002EB6  2225               	addwfc	i2printf@width+1,f,c
 12448  002EB8  4A0D               	infsnz	i2printf@f,f,c
 12449  002EBA  2A0E               	incf	i2printf@f+1,f,c
 12450                           
 12451                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12452  002EBC  C00D  FFF6         	movff	i2printf@f,tblptrl
 12453  002EC0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12454  002EC4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12455  002EC4  6AF8               	clrf	tblptru,c
 12456  002EC6                     	endif
 12457  002EC6                     	if	0	;tblptru may be non-zero
 12458  002EC6                     	endif
 12459  002EC6  0008               	tblrd		*
 12460  002EC8  50F5               	movf	tablat,w,c
 12461  002ECA  EC84  F023         	call	i2_isdigit
 12462  002ECE  A0D8               	btfss	status,0,c
 12463  002ED0  D072               	goto	i2l1189
 12464  002ED2  D7CF               	goto	i2l1187
 12465  002ED4                     
 12466                           ;doprnt.c: 721: flag |= 0x80;
 12467  002ED4  8E23               	bsf	i2printf@flag,7,c
 12468                           
 12469                           ;doprnt.c: 723: break;
 12470  002ED6  D08A               	goto	i2l1194
 12471  002ED8                     
 12472                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12473  002ED8  C01D  FFD9         	movff	i2printf@ap,fsr2l
 12474  002EDC  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 12475  002EE0  CFDE F01B          	movff	postinc2,i2printf@cp
 12476  002EE4  CFDD F01C          	movff	postdec2,i2printf@cp+1
 12477  002EE8  0E02               	movlw	2
 12478  002EEA  261D               	addwf	i2printf@ap,f,c
 12479  002EEC  0E00               	movlw	0
 12480  002EEE  221E               	addwfc	i2printf@ap+1,f,c
 12481                           
 12482                           ;doprnt.c: 740: if(!cp)
 12483  002EF0  501B               	movf	i2printf@cp,w,c
 12484  002EF2  101C               	iorwf	i2printf@cp+1,w,c
 12485  002EF4  A4D8               	btfss	status,2,c
 12486  002EF6  D004               	goto	i2l1197
 12487                           
 12488                           ;doprnt.c: 741: cp = "(null)";
 12489  002EF8  0E97               	movlw	low STR_98
 12490  002EFA  6E1B               	movwf	i2printf@cp,c
 12491  002EFC  0EFF               	movlw	high STR_98
 12492  002EFE  6E1C               	movwf	i2printf@cp+1,c
 12493  002F00                     i2l1197:
 12494                           
 12495                           ;doprnt.c: 745: len = 0;
 12496  002F00  0E00               	movlw	0
 12497  002F02  6E20               	movwf	i2printf@len+1,c
 12498  002F04  0E00               	movlw	0
 12499  002F06  6E1F               	movwf	i2printf@len,c
 12500                           
 12501                           ;doprnt.c: 746: while(cp[len])
 12502  002F08  D002               	goto	i2l1198
 12503  002F0A                     
 12504                           ;doprnt.c: 747: len++;
 12505  002F0A  4A1F               	infsnz	i2printf@len,f,c
 12506  002F0C  2A20               	incf	i2printf@len+1,f,c
 12507  002F0E                     i2l1198:
 12508  002F0E  501F               	movf	i2printf@len,w,c
 12509  002F10  241B               	addwf	i2printf@cp,w,c
 12510  002F12  6E15               	movwf	??i2_printf& (0+255),c
 12511  002F14  5020               	movf	i2printf@len+1,w,c
 12512  002F16  201C               	addwfc	i2printf@cp+1,w,c
 12513  002F18  6E16               	movwf	(??i2_printf+1)& (0+255),c
 12514  002F1A  C015  FFF6         	movff	??i2_printf,tblptrl
 12515  002F1E  C016  FFF7         	movff	??i2_printf+1,tblptrh
 12516  002F22  0E00               	movlw	low (__mediumconst shr (0+16))
 12517  002F24  6EF8               	movwf	tblptru,c
 12518  002F26  0E0F               	movlw	(high __ramtop+-1)
 12519  002F28  64F7               	cpfsgt	tblptrh,c
 12520  002F2A  D003               	bra	i2u470_47
 12521  002F2C  0008               	tblrd		*
 12522  002F2E  50F5               	movf	tablat,w,c
 12523  002F30  D005               	bra	i2u470_40
 12524  002F32                     i2u470_47:
 12525  002F32  CFF6 FFE9          	movff	tblptrl,fsr0l
 12526  002F36  CFF7 FFEA          	movff	tblptrh,fsr0h
 12527  002F3A  50EF               	movf	indf0,w,c
 12528  002F3C                     i2u470_40:
 12529  002F3C  0900               	iorlw	0
 12530  002F3E  A4D8               	btfss	status,2,c
 12531  002F40  D7E4               	goto	i2l1199
 12532                           
 12533                           ;doprnt.c: 757: if(width > len)
 12534  002F42  5024               	movf	i2printf@width,w,c
 12535  002F44  5C1F               	subwf	i2printf@len,w,c
 12536  002F46  5025               	movf	i2printf@width+1,w,c
 12537  002F48  5820               	subwfb	i2printf@len+1,w,c
 12538  002F4A  B0D8               	btfsc	status,0,c
 12539  002F4C  D005               	goto	i2l1201
 12540                           
 12541                           ;doprnt.c: 758: width -= len;
 12542  002F4E  501F               	movf	i2printf@len,w,c
 12543  002F50  5E24               	subwf	i2printf@width,f,c
 12544  002F52  5020               	movf	i2printf@len+1,w,c
 12545  002F54  5A25               	subwfb	i2printf@width+1,f,c
 12546  002F56  D008               	goto	i2l1203
 12547  002F58                     i2l1201:
 12548                           
 12549                           ;doprnt.c: 759: else
 12550                           ;doprnt.c: 760: width = 0;
 12551  002F58  0E00               	movlw	0
 12552  002F5A  6E25               	movwf	i2printf@width+1,c
 12553  002F5C  0E00               	movlw	0
 12554  002F5E  6E24               	movwf	i2printf@width,c
 12555                           
 12556                           ;doprnt.c: 764: while(width--)
 12557  002F60  D003               	goto	i2l1203
 12558  002F62                     i2l5987:
 12559                           
 12560                           ;doprnt.c: 765: (putch(' ') );
 12561  002F62  0E20               	movlw	32
 12562  002F64  ECBF  F023         	call	i2_putch
 12563  002F68                     i2l1203:
 12564  002F68  0624               	decf	i2printf@width,f,c
 12565  002F6A  A0D8               	btfss	status,0,c
 12566  002F6C  0625               	decf	i2printf@width+1,f,c
 12567  002F6E  2824               	incf	i2printf@width,w,c
 12568  002F70  E1F8               	bnz	i2l5987
 12569  002F72  2825               	incf	i2printf@width+1,w,c
 12570  002F74  B4D8               	btfsc	status,2,c
 12571  002F76  D016               	goto	i2l1206
 12572  002F78  D7F4               	goto	i2l1204
 12573  002F7A                     i2l5991:
 12574                           
 12575                           ;doprnt.c: 768: (putch(*cp++) );
 12576  002F7A  C01B  FFF6         	movff	i2printf@cp,tblptrl
 12577  002F7E  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
 12578  002F82  0E00               	movlw	low (__mediumconst shr (0+16))
 12579  002F84  6EF8               	movwf	tblptru,c
 12580  002F86  0E0F               	movlw	(high __ramtop+-1)
 12581  002F88  64F7               	cpfsgt	tblptrh,c
 12582  002F8A  D003               	bra	i2u474_47
 12583  002F8C  0008               	tblrd		*
 12584  002F8E  50F5               	movf	tablat,w,c
 12585  002F90  D005               	bra	i2u474_40
 12586  002F92                     i2u474_47:
 12587  002F92  CFF6 FFE9          	movff	tblptrl,fsr0l
 12588  002F96  CFF7 FFEA          	movff	tblptrh,fsr0h
 12589  002F9A  50EF               	movf	indf0,w,c
 12590  002F9C                     i2u474_40:
 12591  002F9C  ECBF  F023         	call	i2_putch
 12592  002FA0  4A1B               	infsnz	i2printf@cp,f,c
 12593  002FA2  2A1C               	incf	i2printf@cp+1,f,c
 12594  002FA4                     i2l1206:
 12595  002FA4  061F               	decf	i2printf@len,f,c
 12596  002FA6  A0D8               	btfss	status,0,c
 12597  002FA8  0620               	decf	i2printf@len+1,f,c
 12598  002FAA  281F               	incf	i2printf@len,w,c
 12599  002FAC  E1E6               	bnz	i2l5991
 12600  002FAE  2820               	incf	i2printf@len+1,w,c
 12601  002FB0  B4D8               	btfsc	status,2,c
 12602  002FB2  D12E               	goto	i2u494_40
 12603  002FB4  D7E2               	goto	i2l1207
 12604  002FB6                     i2l1189:
 12605  002FB6  C00D  FFF6         	movff	i2printf@f,tblptrl
 12606  002FBA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12607  002FBE  4A0D               	infsnz	i2printf@f,f,c
 12608  002FC0  2A0E               	incf	i2printf@f+1,f,c
 12609  002FC2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12610  002FC2  6AF8               	clrf	tblptru,c
 12611  002FC4                     	endif
 12612  002FC4                     	if	0	;tblptru may be non-zero
 12613  002FC4                     	endif
 12614  002FC4  0008               	tblrd		*
 12615  002FC6  CFF5 F026          	movff	tablat,i2printf@c
 12616  002FCA  5026               	movf	i2printf@c,w,c
 12617                           
 12618                           ; Switch size 1, requested type "space"
 12619                           ; Number of cases is 5, Range of values is 0 to 120
 12620                           ; switch strategies available:
 12621                           ; Name         Instructions Cycles
 12622                           ; simple_byte           16     9 (average)
 12623                           ;	Chosen strategy is simple_byte
 12624  002FCC  0A00               	xorlw	0	; case 0
 12625  002FCE  B4D8               	btfsc	status,2,c
 12626  002FD0  0012               	return	
 12627  002FD2  0A64               	xorlw	100	; case 100
 12628  002FD4  B4D8               	btfsc	status,2,c
 12629  002FD6  D00A               	goto	i2l1194
 12630  002FD8  0A0D               	xorlw	13	; case 105
 12631  002FDA  B4D8               	btfsc	status,2,c
 12632  002FDC  D007               	goto	i2l1194
 12633  002FDE  0A1A               	xorlw	26	; case 115
 12634  002FE0  B4D8               	btfsc	status,2,c
 12635  002FE2  D77A               	goto	i2l1196
 12636  002FE4  0A0B               	xorlw	11	; case 120
 12637  002FE6  B4D8               	btfsc	status,2,c
 12638  002FE8  D775               	goto	i2l1195
 12639  002FEA  D112               	goto	i2u494_40
 12640  002FEC                     i2l1194:
 12641                           
 12642                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12643  002FEC  BE23               	btfsc	i2printf@flag,7,c
 12644  002FEE  D015               	goto	i2l1210
 12645                           
 12646                           ;doprnt.c: 1253: {
 12647                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12648  002FF0  C01D  FFD9         	movff	i2printf@ap,fsr2l
 12649  002FF4  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 12650  002FF8  CFDE F021          	movff	postinc2,i2printf@val
 12651  002FFC  CFDD F022          	movff	postdec2,i2printf@val+1
 12652  003000  0E02               	movlw	2
 12653  003002  261D               	addwf	i2printf@ap,f,c
 12654  003004  0E00               	movlw	0
 12655  003006  221E               	addwfc	i2printf@ap+1,f,c
 12656                           
 12657                           ;doprnt.c: 1261: if((int)val < 0) {
 12658  003008  AE22               	btfss	i2printf@val+1,7,c
 12659  00300A  D04A               	goto	i2l1213
 12660                           
 12661                           ;doprnt.c: 1262: flag |= 0x03;
 12662  00300C  0E03               	movlw	3
 12663  00300E  1223               	iorwf	i2printf@flag,f,c
 12664                           
 12665                           ;doprnt.c: 1263: val = -val;
 12666  003010  6C21               	negf	i2printf@val,c
 12667  003012  1E22               	comf	i2printf@val+1,f,c
 12668  003014  B0D8               	btfsc	status,0,c
 12669  003016  2A22               	incf	i2printf@val+1,f,c
 12670                           
 12671                           ;doprnt.c: 1264: }
 12672                           ;doprnt.c: 1266: }
 12673  003018  D043               	goto	i2l1213
 12674  00301A                     i2l1210:
 12675                           
 12676                           ;doprnt.c: 1268: else
 12677                           ;doprnt.c: 1273: {
 12678                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12679  00301A  C01D  FFD9         	movff	i2printf@ap,fsr2l
 12680  00301E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 12681  003022  CFDE F021          	movff	postinc2,i2printf@val
 12682  003026  CFDD F022          	movff	postdec2,i2printf@val+1
 12683  00302A  0E02               	movlw	2
 12684  00302C  261D               	addwf	i2printf@ap,f,c
 12685  00302E  0E00               	movlw	0
 12686  003030  221E               	addwfc	i2printf@ap+1,f,c
 12687                           
 12688                           ;doprnt.c: 1287: }
 12689                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12690  003032  D036               	goto	i2l1213
 12691  003034                     
 12692                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12693  003034  0E01               	movlw	1
 12694  003036  6E26               	movwf	i2printf@c,c
 12695  003038                     i2l6017:
 12696  003038  0E05               	movlw	5
 12697  00303A  1826               	xorwf	i2printf@c,w,c
 12698  00303C  B4D8               	btfsc	status,2,c
 12699  00303E  D038               	goto	i2l1218
 12700                           
 12701                           ;doprnt.c: 1306: if(val < dpowers[c])
 12702  003040  5026               	movf	i2printf@c,w,c
 12703  003042  0D02               	mullw	2
 12704  003044  0E84               	movlw	low _dpowers
 12705  003046  24F3               	addwf	prodl,w,c
 12706  003048  6EF6               	movwf	tblptrl,c
 12707  00304A  0EFC               	movlw	high _dpowers
 12708  00304C  20F4               	addwfc	prodh,w,c
 12709  00304E  6EF7               	movwf	tblptrh,c
 12710  003050                     	if	1	;There are 3 active tblptr bytes
 12711  003050  6AF8               	clrf	tblptru,c
 12712  003052  0E00               	movlw	low (__mediumconst shr (0+16))
 12713  003054  22F8               	addwfc	tblptru,f,c
 12714  003056                     	endif
 12715  003056  0009               	tblrd		*+
 12716  003058  50F5               	movf	tablat,w,c
 12717  00305A  5C21               	subwf	i2printf@val,w,c
 12718  00305C  0009               	tblrd		*+
 12719  00305E  50F5               	movf	tablat,w,c
 12720  003060  5822               	subwfb	i2printf@val+1,w,c
 12721  003062  A0D8               	btfss	status,0,c
 12722  003064  D025               	goto	i2l1218
 12723                           
 12724                           ;doprnt.c: 1307: break;
 12725  003066  2A26               	incf	i2printf@c,f,c
 12726  003068  D7E7               	goto	i2l6017
 12727  00306A                     
 12728                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12729  00306A  0E01               	movlw	1
 12730  00306C  6E26               	movwf	i2printf@c,c
 12731  00306E                     i2l6031:
 12732  00306E  0E04               	movlw	4
 12733  003070  1826               	xorwf	i2printf@c,w,c
 12734  003072  B4D8               	btfsc	status,2,c
 12735  003074  D01D               	goto	i2l1218
 12736                           
 12737                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12738  003076  5026               	movf	i2printf@c,w,c
 12739  003078  0D02               	mullw	2
 12740  00307A  0E8E               	movlw	low _hexpowers
 12741  00307C  24F3               	addwf	prodl,w,c
 12742  00307E  6EF6               	movwf	tblptrl,c
 12743  003080  0EFC               	movlw	high _hexpowers
 12744  003082  20F4               	addwfc	prodh,w,c
 12745  003084  6EF7               	movwf	tblptrh,c
 12746  003086                     	if	1	;There are 3 active tblptr bytes
 12747  003086  6AF8               	clrf	tblptru,c
 12748  003088  0E00               	movlw	low (__mediumconst shr (0+16))
 12749  00308A  22F8               	addwfc	tblptru,f,c
 12750  00308C                     	endif
 12751  00308C  0009               	tblrd		*+
 12752  00308E  50F5               	movf	tablat,w,c
 12753  003090  5C21               	subwf	i2printf@val,w,c
 12754  003092  0009               	tblrd		*+
 12755  003094  50F5               	movf	tablat,w,c
 12756  003096  5822               	subwfb	i2printf@val+1,w,c
 12757  003098  A0D8               	btfss	status,0,c
 12758  00309A  D00A               	goto	i2l1218
 12759                           
 12760                           ;doprnt.c: 1318: break;
 12761  00309C  2A26               	incf	i2printf@c,f,c
 12762  00309E  D7E7               	goto	i2l6031
 12763  0030A0                     i2l1213:
 12764  0030A0  5023               	movf	i2printf@flag,w,c
 12765  0030A2  0B80               	andlw	128
 12766                           
 12767                           ; Switch size 1, requested type "space"
 12768                           ; Number of cases is 2, Range of values is 0 to 128
 12769                           ; switch strategies available:
 12770                           ; Name         Instructions Cycles
 12771                           ; simple_byte            7     4 (average)
 12772                           ;	Chosen strategy is simple_byte
 12773  0030A4  0A00               	xorlw	0	; case 0
 12774  0030A6  B4D8               	btfsc	status,2,c
 12775  0030A8  D7C5               	goto	i2l1214
 12776  0030AA  0A80               	xorlw	128	; case 128
 12777  0030AC  B4D8               	btfsc	status,2,c
 12778  0030AE  D7DD               	goto	i2l1219
 12779  0030B0                     i2l1218:
 12780                           
 12781                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12782  0030B0  5024               	movf	i2printf@width,w,c
 12783  0030B2  1025               	iorwf	i2printf@width+1,w,c
 12784  0030B4  B4D8               	btfsc	status,2,c
 12785  0030B6  D009               	goto	i2l1223
 12786  0030B8  C023  F015         	movff	i2printf@flag,??i2_printf
 12787  0030BC  0E03               	movlw	3
 12788  0030BE  1615               	andwf	??i2_printf,f,c
 12789  0030C0  B4D8               	btfsc	status,2,c
 12790  0030C2  D003               	goto	i2l1223
 12791                           
 12792                           ;doprnt.c: 1346: width--;
 12793  0030C4  0624               	decf	i2printf@width,f,c
 12794  0030C6  A0D8               	btfss	status,0,c
 12795  0030C8  0625               	decf	i2printf@width+1,f,c
 12796  0030CA                     i2l1223:
 12797                           
 12798                           ;doprnt.c: 1381: if(width > c)
 12799  0030CA  0E80               	movlw	128
 12800  0030CC  BE26               	btfsc	i2printf@c,7,c
 12801  0030CE  0E7F               	movlw	127
 12802  0030D0  6E15               	movwf	??i2_printf& (0+255),c
 12803  0030D2  5024               	movf	i2printf@width,w,c
 12804  0030D4  5C26               	subwf	i2printf@c,w,c
 12805  0030D6  5025               	movf	i2printf@width+1,w,c
 12806  0030D8  0A80               	xorlw	128
 12807  0030DA  5815               	subwfb	??i2_printf& (0+255),w,c
 12808  0030DC  B0D8               	btfsc	status,0,c
 12809  0030DE  D007               	goto	i2l1224
 12810                           
 12811                           ;doprnt.c: 1382: width -= c;
 12812  0030E0  5026               	movf	i2printf@c,w,c
 12813  0030E2  5E24               	subwf	i2printf@width,f,c
 12814  0030E4  0E00               	movlw	0
 12815  0030E6  BE26               	btfsc	i2printf@c,7,c
 12816  0030E8  0EFF               	movlw	255
 12817  0030EA  5A25               	subwfb	i2printf@width+1,f,c
 12818  0030EC  D004               	goto	i2l1225
 12819  0030EE                     i2l1224:
 12820                           
 12821                           ;doprnt.c: 1383: else
 12822                           ;doprnt.c: 1384: width = 0;
 12823  0030EE  0E00               	movlw	0
 12824  0030F0  6E25               	movwf	i2printf@width+1,c
 12825  0030F2  0E00               	movlw	0
 12826  0030F4  6E24               	movwf	i2printf@width,c
 12827  0030F6                     i2l1225:
 12828                           
 12829                           ;doprnt.c: 1387: if(flag & 0x04) {
 12830  0030F6  A423               	btfss	i2printf@flag,2,c
 12831  0030F8  D014               	goto	i2l1226
 12832                           
 12833                           ;doprnt.c: 1392: if(flag & 0x03)
 12834  0030FA  C023  F015         	movff	i2printf@flag,??i2_printf
 12835  0030FE  0E03               	movlw	3
 12836  003100  1615               	andwf	??i2_printf,f,c
 12837  003102  B4D8               	btfsc	status,2,c
 12838  003104  D003               	goto	i2l1227
 12839                           
 12840                           ;doprnt.c: 1393: (putch('-') );
 12841  003106  0E2D               	movlw	45
 12842  003108  ECBF  F023         	call	i2_putch
 12843  00310C                     i2l1227:
 12844                           
 12845                           ;doprnt.c: 1415: if(width)
 12846  00310C  5024               	movf	i2printf@width,w,c
 12847  00310E  1025               	iorwf	i2printf@width+1,w,c
 12848  003110  B4D8               	btfsc	status,2,c
 12849  003112  D01E               	goto	i2l1235
 12850                           
 12851                           ;doprnt.c: 1417: (putch('0') );
 12852                           
 12853                           ;doprnt.c: 1416: do
 12854  003114  0E30               	movlw	48
 12855  003116  ECBF  F023         	call	i2_putch
 12856                           
 12857                           ;doprnt.c: 1418: while(--width);
 12858  00311A  0624               	decf	i2printf@width,f,c
 12859  00311C  A0D8               	btfss	status,0,c
 12860  00311E  0625               	decf	i2printf@width+1,f,c
 12861  003120  D7F5               	goto	i2l1227
 12862  003122                     i2l1226:
 12863                           
 12864                           ;doprnt.c: 1422: {
 12865                           ;doprnt.c: 1424: if(width
 12866                           ;doprnt.c: 1428: )
 12867  003122  5024               	movf	i2printf@width,w,c
 12868  003124  1025               	iorwf	i2printf@width+1,w,c
 12869  003126  B4D8               	btfsc	status,2,c
 12870  003128  D00A               	goto	i2u492_40
 12871  00312A                     i2u491_40:
 12872                           
 12873                           ;doprnt.c: 1430: (putch(' ') );
 12874                           
 12875                           ;doprnt.c: 1429: do
 12876  00312A  0E20               	movlw	32
 12877  00312C  ECBF  F023         	call	i2_putch
 12878                           
 12879                           ;doprnt.c: 1431: while(--width);
 12880  003130  0624               	decf	i2printf@width,f,c
 12881  003132  A0D8               	btfss	status,0,c
 12882  003134  0625               	decf	i2printf@width+1,f,c
 12883  003136  5024               	movf	i2printf@width,w,c
 12884  003138  1025               	iorwf	i2printf@width+1,w,c
 12885  00313A  A4D8               	btfss	status,2,c
 12886  00313C  D7F6               	goto	i2u491_40
 12887  00313E                     i2u492_40:
 12888                           
 12889                           ;doprnt.c: 1438: if(flag & 0x03)
 12890  00313E  C023  F015         	movff	i2printf@flag,??i2_printf
 12891  003142  0E03               	movlw	3
 12892  003144  1615               	andwf	??i2_printf,f,c
 12893  003146  B4D8               	btfsc	status,2,c
 12894  003148  D003               	goto	i2l1235
 12895                           
 12896                           ;doprnt.c: 1439: (putch('-') );
 12897  00314A  0E2D               	movlw	45
 12898  00314C  ECBF  F023         	call	i2_putch
 12899  003150                     i2l1235:
 12900                           
 12901                           ;doprnt.c: 1469: }
 12902                           ;doprnt.c: 1472: prec = c;
 12903  003150  C026  F01A         	movff	i2printf@c,i2printf@prec
 12904                           
 12905                           ;doprnt.c: 1474: while(prec--) {
 12906  003154  D059               	goto	i2l1236
 12907  003156                     
 12908                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12909  003156  501A               	movf	i2printf@prec,w,c
 12910  003158  0D02               	mullw	2
 12911  00315A  0E84               	movlw	low _dpowers
 12912  00315C  24F3               	addwf	prodl,w,c
 12913  00315E  6EF6               	movwf	tblptrl,c
 12914  003160  0EFC               	movlw	high _dpowers
 12915  003162  20F4               	addwfc	prodh,w,c
 12916  003164  6EF7               	movwf	tblptrh,c
 12917  003166                     	if	1	;There are 3 active tblptr bytes
 12918  003166  6AF8               	clrf	tblptru,c
 12919  003168  0E00               	movlw	low (__mediumconst shr (0+16))
 12920  00316A  22F8               	addwfc	tblptru,f,c
 12921  00316C                     	endif
 12922  00316C  0009               	tblrd		*+
 12923  00316E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12924  003172  000A               	tblrd		*-
 12925  003174  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12926  003178  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12927  00317C  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12928  003180  ECD9  F021         	call	i2___lwdiv	;wreg free
 12929  003184  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12930  003188  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12931  00318C  0E00               	movlw	0
 12932  00318E  6E0B               	movwf	i2___lwmod@divisor+1,c
 12933  003190  0E0A               	movlw	10
 12934  003192  6E0A               	movwf	i2___lwmod@divisor,c
 12935  003194  ECB8  F022         	call	i2___lwmod	;wreg free
 12936  003198  5008               	movf	?i2___lwmod,w,c
 12937  00319A  0F30               	addlw	48
 12938  00319C  6E26               	movwf	i2printf@c,c
 12939                           
 12940                           ;doprnt.c: 1491: break;
 12941  00319E  D031               	goto	i2l1240
 12942  0031A0                     
 12943                           ;doprnt.c: 1499: {
 12944                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12945  0031A0  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12946  0031A4  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12947  0031A8  501A               	movf	i2printf@prec,w,c
 12948  0031AA  0D02               	mullw	2
 12949  0031AC  0E8E               	movlw	low _hexpowers
 12950  0031AE  24F3               	addwf	prodl,w,c
 12951  0031B0  6EF6               	movwf	tblptrl,c
 12952  0031B2  0EFC               	movlw	high _hexpowers
 12953  0031B4  20F4               	addwfc	prodh,w,c
 12954  0031B6  6EF7               	movwf	tblptrh,c
 12955  0031B8                     	if	1	;There are 3 active tblptr bytes
 12956  0031B8  6AF8               	clrf	tblptru,c
 12957  0031BA  0E00               	movlw	low (__mediumconst shr (0+16))
 12958  0031BC  22F8               	addwfc	tblptru,f,c
 12959  0031BE                     	endif
 12960  0031BE  0009               	tblrd		*+
 12961  0031C0  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12962  0031C4  000A               	tblrd		*-
 12963  0031C6  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12964  0031CA  ECD9  F021         	call	i2___lwdiv	;wreg free
 12965  0031CE  5001               	movf	?i2___lwdiv,w,c
 12966  0031D0  0B0F               	andlw	15
 12967  0031D2  6E19               	movwf	i2printf@idx,c
 12968                           
 12969                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12970  0031D4  5019               	movf	i2printf@idx,w,c
 12971  0031D6  0D01               	mullw	1
 12972  0031D8  0EDC               	movlw	low STR_99
 12973  0031DA  24F3               	addwf	prodl,w,c
 12974  0031DC  6EF6               	movwf	tblptrl,c
 12975  0031DE  0EFD               	movlw	high STR_99
 12976  0031E0  20F4               	addwfc	prodh,w,c
 12977  0031E2  6EF7               	movwf	tblptrh,c
 12978  0031E4                     	if	1	;There are 3 active tblptr bytes
 12979  0031E4  6AF8               	clrf	tblptru,c
 12980  0031E6  0E00               	movlw	low (__mediumconst shr (0+16))
 12981  0031E8  22F8               	addwfc	tblptru,f,c
 12982  0031EA                     	endif
 12983  0031EA  0008               	tblrd		*
 12984  0031EC  CFF5 F026          	movff	tablat,i2printf@c
 12985                           
 12986                           ;doprnt.c: 1523: }
 12987                           
 12988                           ;doprnt.c: 1508: }
 12989                           ;doprnt.c: 1510: break;
 12990  0031F0  D008               	goto	i2l1240
 12991  0031F2  5023               	movf	i2printf@flag,w,c
 12992  0031F4  0B80               	andlw	128
 12993                           
 12994                           ; Switch size 1, requested type "space"
 12995                           ; Number of cases is 2, Range of values is 0 to 128
 12996                           ; switch strategies available:
 12997                           ; Name         Instructions Cycles
 12998                           ; simple_byte            7     4 (average)
 12999                           ;	Chosen strategy is simple_byte
 13000  0031F6  0A00               	xorlw	0	; case 0
 13001  0031F8  B4D8               	btfsc	status,2,c
 13002  0031FA  D7AD               	goto	i2l1239
 13003  0031FC  0A80               	xorlw	128	; case 128
 13004  0031FE  B4D8               	btfsc	status,2,c
 13005  003200  D7CF               	goto	i2l1241
 13006  003202                     i2l1240:
 13007                           
 13008                           ;doprnt.c: 1524: (putch(c) );
 13009  003202  5026               	movf	i2printf@c,w,c
 13010  003204  ECBF  F023         	call	i2_putch
 13011  003208                     i2l1236:
 13012  003208  061A               	decf	i2printf@prec,f,c
 13013  00320A  281A               	incf	i2printf@prec,w,c
 13014  00320C  A4D8               	btfss	status,2,c
 13015  00320E  D7F1               	goto	i2l1238
 13016  003210                     i2u494_40:
 13017  003210  C00D  FFF6         	movff	i2printf@f,tblptrl
 13018  003214  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13019  003218  4A0D               	infsnz	i2printf@f,f,c
 13020  00321A  2A0E               	incf	i2printf@f+1,f,c
 13021  00321C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13022  00321C  6AF8               	clrf	tblptru,c
 13023  00321E                     	endif
 13024  00321E                     	if	0	;tblptru may be non-zero
 13025  00321E                     	endif
 13026  00321E  0008               	tblrd		*
 13027  003220  CFF5 F026          	movff	tablat,i2printf@c
 13028  003224  5026               	movf	i2printf@c,w,c
 13029  003226  B4D8               	btfsc	status,2,c
 13030  003228  0012               	return	
 13031  00322A  D5F8               	goto	i2l1178
 13032  00322C                     __end_ofi2_printf:
 13033                           	opt stack 0
 13034                           pclatu	equ	0xFFB
 13035                           pclath	equ	0xFFA
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           intcon3	equ	0xFF0
 13044                           indf0	equ	0xFEF
 13045                           postinc0	equ	0xFEE
 13046                           fsr0h	equ	0xFEA
 13047                           fsr0l	equ	0xFE9
 13048                           wreg	equ	0xFE8
 13049                           postdec1	equ	0xFE5
 13050                           fsr1h	equ	0xFE2
 13051                           fsr1l	equ	0xFE1
 13052                           indf2	equ	0xFDF
 13053                           postinc2	equ	0xFDE
 13054                           postdec2	equ	0xFDD
 13055                           fsr2h	equ	0xFDA
 13056                           fsr2l	equ	0xFD9
 13057                           status	equ	0xFD8
 13058                           
 13059 ;; *************** function i2_putch *****************
 13060 ;; Defined at:
 13061 ;;		line 24 in file "lcd.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  data            1    wreg     unsigned char 
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;  data            1    2[COMRAM] unsigned char 
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  1    wreg      void 
 13068 ;; Registers used:
 13069 ;;		wreg, status,2, status,0, cstack
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;Total ram usage:        1 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    1
 13082 ;; This function calls:
 13083 ;;		i2_lcdNibble
 13084 ;; This function is called by:
 13085 ;;		_interruptHandler
 13086 ;;		i2_printf
 13087 ;; This function uses a non-reentrant model
 13088 ;;
 13089                           
 13090                           	psect	text33
 13091  00477E                     __ptext33:
 13092                           	opt stack 0
 13093  00477E                     i2_putch:
 13094                           	opt stack 24
 13095                           
 13096                           ;incstack = 0
 13097                           ;i2putch@data stored from wreg
 13098  00477E  6E03               	movwf	i2putch@data,c
 13099                           
 13100                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 13101  004780  848C               	bsf	3980,2,c	;volatile
 13102                           
 13103                           ;lcd.c: 33: lcdNibble(data);
 13104  004782  5003               	movf	i2putch@data,w,c
 13105  004784  EC9C  F01F         	call	i2_lcdNibble
 13106                           
 13107                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 13108  004788  0EA0               	movlw	160
 13109  00478A                     i2u737_47:
 13110  00478A  D000               	nop2	
 13111  00478C  2EE8               	decfsz	wreg,f,c
 13112  00478E  D7FD               	bra	i2u737_47
 13113  004790  0012               	return		;funcret
 13114  004792                     __end_ofi2_putch:
 13115                           	opt stack 0
 13116                           pclatu	equ	0xFFB
 13117                           pclath	equ	0xFFA
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           intcon	equ	0xFF2
 13125                           intcon3	equ	0xFF0
 13126                           indf0	equ	0xFEF
 13127                           postinc0	equ	0xFEE
 13128                           fsr0h	equ	0xFEA
 13129                           fsr0l	equ	0xFE9
 13130                           wreg	equ	0xFE8
 13131                           postdec1	equ	0xFE5
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           indf2	equ	0xFDF
 13135                           postinc2	equ	0xFDE
 13136                           postdec2	equ	0xFDD
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function i2_isdigit *****************
 13142 ;; Defined at:
 13143 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  c               1    wreg     unsigned char 
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  c               1    2[COMRAM] unsigned char 
 13148 ;; Return value:  Size  Location     Type
 13149 ;;		None               void
 13150 ;; Registers used:
 13151 ;;		wreg, status,2, status,0
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13160 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13161 ;;Total ram usage:        3 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; This function calls:
 13164 ;;		Nothing
 13165 ;; This function is called by:
 13166 ;;		i2_printf
 13167 ;; This function uses a non-reentrant model
 13168 ;;
 13169                           
 13170                           	psect	text34
 13171  004708                     __ptext34:
 13172                           	opt stack 0
 13173  004708                     i2_isdigit:
 13174                           	opt stack 24
 13175                           
 13176                           ;incstack = 0
 13177                           ;i2isdigit@c stored from wreg
 13178  004708  6E03               	movwf	i2isdigit@c,c
 13179  00470A  0E00               	movlw	0
 13180  00470C  6E02               	movwf	i2_isdigit$1869,c
 13181  00470E  0E3A               	movlw	58
 13182  004710  6003               	cpfslt	i2isdigit@c,c
 13183  004712  D005               	goto	i2l1574
 13184  004714  0E2F               	movlw	47
 13185  004716  6403               	cpfsgt	i2isdigit@c,c
 13186  004718  D002               	goto	i2l1574
 13187  00471A  0E01               	movlw	1
 13188  00471C  6E02               	movwf	i2_isdigit$1869,c
 13189  00471E                     i2l1574:
 13190  00471E  C002  F001         	movff	i2_isdigit$1869,??i2_isdigit
 13191  004722  3001               	rrcf	??i2_isdigit,w,c
 13192  004724  0012               	return	
 13193  004726                     __end_ofi2_isdigit:
 13194                           	opt stack 0
 13195                           pclatu	equ	0xFFB
 13196                           pclath	equ	0xFFA
 13197                           tblptru	equ	0xFF8
 13198                           tblptrh	equ	0xFF7
 13199                           tblptrl	equ	0xFF6
 13200                           tablat	equ	0xFF5
 13201                           prodh	equ	0xFF4
 13202                           prodl	equ	0xFF3
 13203                           intcon	equ	0xFF2
 13204                           intcon3	equ	0xFF0
 13205                           indf0	equ	0xFEF
 13206                           postinc0	equ	0xFEE
 13207                           fsr0h	equ	0xFEA
 13208                           fsr0l	equ	0xFE9
 13209                           wreg	equ	0xFE8
 13210                           postdec1	equ	0xFE5
 13211                           fsr1h	equ	0xFE2
 13212                           fsr1l	equ	0xFE1
 13213                           indf2	equ	0xFDF
 13214                           postinc2	equ	0xFDE
 13215                           postdec2	equ	0xFDD
 13216                           fsr2h	equ	0xFDA
 13217                           fsr2l	equ	0xFD9
 13218                           status	equ	0xFD8
 13219                           
 13220 ;; *************** function i2___lwmod *****************
 13221 ;; Defined at:
 13222 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 13223 ;; Parameters:    Size  Location     Type
 13224 ;;  dividend        2    7[COMRAM] unsigned int 
 13225 ;;  divisor         2    9[COMRAM] unsigned int 
 13226 ;; Auto vars:     Size  Location     Type
 13227 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13228 ;; Return value:  Size  Location     Type
 13229 ;;                  2    7[COMRAM] unsigned int 
 13230 ;; Registers used:
 13231 ;;		wreg, status,2, status,0
 13232 ;; Tracked objects:
 13233 ;;		On entry : 0/0
 13234 ;;		On exit  : 0/0
 13235 ;;		Unchanged: 0/0
 13236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13237 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13238 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;Total ram usage:        5 bytes
 13242 ;; Hardware stack levels used:    1
 13243 ;; This function calls:
 13244 ;;		Nothing
 13245 ;; This function is called by:
 13246 ;;		i2_printf
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           	psect	text35
 13251  004570                     __ptext35:
 13252                           	opt stack 0
 13253  004570                     i2___lwmod:
 13254                           	opt stack 24
 13255                           
 13256                           ;incstack = 0
 13257  004570  500A               	movf	i2___lwmod@divisor,w,c
 13258  004572  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13259  004574  B4D8               	btfsc	status,2,c
 13260  004576  D018               	goto	i2l1668
 13261  004578  0E01               	movlw	1
 13262  00457A  6E0C               	movwf	i2___lwmod@counter,c
 13263  00457C  D004               	goto	i2l1663
 13264  00457E  90D8               	bcf	status,0,c
 13265  004580  360A               	rlcf	i2___lwmod@divisor,f,c
 13266  004582  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13267  004584  2A0C               	incf	i2___lwmod@counter,f,c
 13268  004586                     i2l1663:
 13269  004586  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13270  004588  D7FA               	goto	i2l1664
 13271  00458A                     i2u390_40:
 13272  00458A  500A               	movf	i2___lwmod@divisor,w,c
 13273  00458C  5C08               	subwf	i2___lwmod@dividend,w,c
 13274  00458E  500B               	movf	i2___lwmod@divisor+1,w,c
 13275  004590  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13276  004592  A0D8               	btfss	status,0,c
 13277  004594  D004               	goto	i2l1667
 13278  004596  500A               	movf	i2___lwmod@divisor,w,c
 13279  004598  5E08               	subwf	i2___lwmod@dividend,f,c
 13280  00459A  500B               	movf	i2___lwmod@divisor+1,w,c
 13281  00459C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13282  00459E                     i2l1667:
 13283  00459E  90D8               	bcf	status,0,c
 13284  0045A0  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13285  0045A2  320A               	rrcf	i2___lwmod@divisor,f,c
 13286  0045A4  2E0C               	decfsz	i2___lwmod@counter,f,c
 13287  0045A6  D7F1               	goto	i2u390_40
 13288  0045A8                     i2l1668:
 13289  0045A8  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 13290  0045AC  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13291  0045B0  0012               	return		;funcret
 13292  0045B2                     __end_ofi2___lwmod:
 13293                           	opt stack 0
 13294                           pclatu	equ	0xFFB
 13295                           pclath	equ	0xFFA
 13296                           tblptru	equ	0xFF8
 13297                           tblptrh	equ	0xFF7
 13298                           tblptrl	equ	0xFF6
 13299                           tablat	equ	0xFF5
 13300                           prodh	equ	0xFF4
 13301                           prodl	equ	0xFF3
 13302                           intcon	equ	0xFF2
 13303                           intcon3	equ	0xFF0
 13304                           indf0	equ	0xFEF
 13305                           postinc0	equ	0xFEE
 13306                           fsr0h	equ	0xFEA
 13307                           fsr0l	equ	0xFE9
 13308                           wreg	equ	0xFE8
 13309                           postdec1	equ	0xFE5
 13310                           fsr1h	equ	0xFE2
 13311                           fsr1l	equ	0xFE1
 13312                           indf2	equ	0xFDF
 13313                           postinc2	equ	0xFDE
 13314                           postdec2	equ	0xFDD
 13315                           fsr2h	equ	0xFDA
 13316                           fsr2l	equ	0xFD9
 13317                           status	equ	0xFD8
 13318                           
 13319 ;; *************** function i2___lwdiv *****************
 13320 ;; Defined at:
 13321 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;  dividend        2    0[COMRAM] unsigned int 
 13324 ;;  divisor         2    2[COMRAM] unsigned int 
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13327 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  2    0[COMRAM] unsigned int 
 13330 ;; Registers used:
 13331 ;;		wreg, status,2, status,0
 13332 ;; Tracked objects:
 13333 ;;		On entry : 0/0
 13334 ;;		On exit  : 0/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;Total ram usage:        7 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; This function calls:
 13344 ;;		Nothing
 13345 ;; This function is called by:
 13346 ;;		i2_printf
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           	psect	text36
 13351  0043B2                     __ptext36:
 13352                           	opt stack 0
 13353  0043B2                     i2___lwdiv:
 13354                           	opt stack 24
 13355                           
 13356                           ;incstack = 0
 13357  0043B2  0E00               	movlw	0
 13358  0043B4  6E06               	movwf	i2___lwdiv@quotient+1,c
 13359  0043B6  0E00               	movlw	0
 13360  0043B8  6E05               	movwf	i2___lwdiv@quotient,c
 13361  0043BA  5003               	movf	i2___lwdiv@divisor,w,c
 13362  0043BC  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13363  0043BE  B4D8               	btfsc	status,2,c
 13364  0043C0  D01C               	goto	i2l1658
 13365  0043C2  0E01               	movlw	1
 13366  0043C4  6E07               	movwf	i2___lwdiv@counter,c
 13367  0043C6  D004               	goto	i2l1653
 13368  0043C8  90D8               	bcf	status,0,c
 13369  0043CA  3603               	rlcf	i2___lwdiv@divisor,f,c
 13370  0043CC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13371  0043CE  2A07               	incf	i2___lwdiv@counter,f,c
 13372  0043D0                     i2l1653:
 13373  0043D0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13374  0043D2  D7FA               	goto	i2l1654
 13375  0043D4                     i2u387_40:
 13376  0043D4  90D8               	bcf	status,0,c
 13377  0043D6  3605               	rlcf	i2___lwdiv@quotient,f,c
 13378  0043D8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13379  0043DA  5003               	movf	i2___lwdiv@divisor,w,c
 13380  0043DC  5C01               	subwf	i2___lwdiv@dividend,w,c
 13381  0043DE  5004               	movf	i2___lwdiv@divisor+1,w,c
 13382  0043E0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13383  0043E2  A0D8               	btfss	status,0,c
 13384  0043E4  D005               	goto	i2l1657
 13385  0043E6  5003               	movf	i2___lwdiv@divisor,w,c
 13386  0043E8  5E01               	subwf	i2___lwdiv@dividend,f,c
 13387  0043EA  5004               	movf	i2___lwdiv@divisor+1,w,c
 13388  0043EC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13389  0043EE  8005               	bsf	i2___lwdiv@quotient,0,c
 13390  0043F0                     i2l1657:
 13391  0043F0  90D8               	bcf	status,0,c
 13392  0043F2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13393  0043F4  3203               	rrcf	i2___lwdiv@divisor,f,c
 13394  0043F6  2E07               	decfsz	i2___lwdiv@counter,f,c
 13395  0043F8  D7ED               	goto	i2u387_40
 13396  0043FA                     i2l1658:
 13397  0043FA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13398  0043FE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13399  004402  0012               	return		;funcret
 13400  004404                     __end_ofi2___lwdiv:
 13401                           	opt stack 0
 13402                           pclatu	equ	0xFFB
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           intcon3	equ	0xFF0
 13412                           indf0	equ	0xFEF
 13413                           postinc0	equ	0xFEE
 13414                           fsr0h	equ	0xFEA
 13415                           fsr0l	equ	0xFE9
 13416                           wreg	equ	0xFE8
 13417                           postdec1	equ	0xFE5
 13418                           fsr1h	equ	0xFE2
 13419                           fsr1l	equ	0xFE1
 13420                           indf2	equ	0xFDF
 13421                           postinc2	equ	0xFDE
 13422                           postdec2	equ	0xFDD
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function i2_initLCD *****************
 13428 ;; Defined at:
 13429 ;;		line 60 in file "lcd.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;		None
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;		None
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  1    wreg      void 
 13436 ;; Registers used:
 13437 ;;		wreg, status,2, status,0, cstack
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;Total ram usage:        1 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; Hardware stack levels required when called:    2
 13450 ;; This function calls:
 13451 ;;		i2_lcdInst
 13452 ;; This function is called by:
 13453 ;;		_interruptHandler
 13454 ;; This function uses a non-reentrant model
 13455 ;;
 13456                           
 13457                           	psect	text37
 13458  004450                     __ptext37:
 13459                           	opt stack 0
 13460  004450                     i2_initLCD:
 13461                           	opt stack 23
 13462                           
 13463                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
 13464                           
 13465                           ;incstack = 0
 13466  004450  0E9C               	movlw	156
 13467  004452  6E04               	movwf	??i2_initLCD& (0+255),c
 13468  004454  0ED7               	movlw	215
 13469  004456                     i2u738_47:
 13470  004456  2EE8               	decfsz	wreg,f,c
 13471  004458  D7FE               	bra	i2u738_47
 13472  00445A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 13473  00445C  D7FC               	bra	i2u738_47
 13474  00445E  F000               	nop	
 13475                           
 13476                           ;lcd.c: 69: lcdInst(0b00110011);
 13477  004460  0E33               	movlw	51
 13478  004462  ECC9  F023         	call	i2_lcdInst
 13479                           
 13480                           ;lcd.c: 70: lcdInst(0b00110010);
 13481  004466  0E32               	movlw	50
 13482  004468  ECC9  F023         	call	i2_lcdInst
 13483                           
 13484                           ;lcd.c: 71: lcdInst(0b00101000);
 13485  00446C  0E28               	movlw	40
 13486  00446E  ECC9  F023         	call	i2_lcdInst
 13487                           
 13488                           ;lcd.c: 72: lcdInst(0b00001111);
 13489  004472  0E0F               	movlw	15
 13490  004474  ECC9  F023         	call	i2_lcdInst
 13491                           
 13492                           ;lcd.c: 73: lcdInst(0b00000110);
 13493  004478  0E06               	movlw	6
 13494  00447A  ECC9  F023         	call	i2_lcdInst
 13495                           
 13496                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 13497  00447E  0E01               	movlw	1
 13498  004480  ECC9  F023         	call	i2_lcdInst
 13499  004484  0E9C               	movlw	156
 13500  004486  6E04               	movwf	??i2_initLCD& (0+255),c
 13501  004488  0ED7               	movlw	215
 13502  00448A                     i2u739_47:
 13503  00448A  2EE8               	decfsz	wreg,f,c
 13504  00448C  D7FE               	bra	i2u739_47
 13505  00448E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 13506  004490  D7FC               	bra	i2u739_47
 13507  004492  F000               	nop	
 13508                           
 13509                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 13510  004494  0E0F               	movlw	15
 13511  004496  ECC9  F023         	call	i2_lcdInst
 13512  00449A  0012               	return		;funcret
 13513  00449C                     __end_ofi2_initLCD:
 13514                           	opt stack 0
 13515                           pclatu	equ	0xFFB
 13516                           pclath	equ	0xFFA
 13517                           tblptru	equ	0xFF8
 13518                           tblptrh	equ	0xFF7
 13519                           tblptrl	equ	0xFF6
 13520                           tablat	equ	0xFF5
 13521                           prodh	equ	0xFF4
 13522                           prodl	equ	0xFF3
 13523                           intcon	equ	0xFF2
 13524                           intcon3	equ	0xFF0
 13525                           indf0	equ	0xFEF
 13526                           postinc0	equ	0xFEE
 13527                           fsr0h	equ	0xFEA
 13528                           fsr0l	equ	0xFE9
 13529                           wreg	equ	0xFE8
 13530                           postdec1	equ	0xFE5
 13531                           fsr1h	equ	0xFE2
 13532                           fsr1l	equ	0xFE1
 13533                           indf2	equ	0xFDF
 13534                           postinc2	equ	0xFDE
 13535                           postdec2	equ	0xFDD
 13536                           fsr2h	equ	0xFDA
 13537                           fsr2l	equ	0xFD9
 13538                           status	equ	0xFD8
 13539                           
 13540 ;; *************** function i2_lcdInst *****************
 13541 ;; Defined at:
 13542 ;;		line 11 in file "lcd.c"
 13543 ;; Parameters:    Size  Location     Type
 13544 ;;  data            1    wreg     unsigned char 
 13545 ;; Auto vars:     Size  Location     Type
 13546 ;;  data            1    2[COMRAM] unsigned char 
 13547 ;; Return value:  Size  Location     Type
 13548 ;;                  1    wreg      void 
 13549 ;; Registers used:
 13550 ;;		wreg, status,2, status,0, cstack
 13551 ;; Tracked objects:
 13552 ;;		On entry : 0/0
 13553 ;;		On exit  : 0/0
 13554 ;;		Unchanged: 0/0
 13555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13560 ;;Total ram usage:        1 bytes
 13561 ;; Hardware stack levels used:    1
 13562 ;; Hardware stack levels required when called:    1
 13563 ;; This function calls:
 13564 ;;		i2_lcdNibble
 13565 ;; This function is called by:
 13566 ;;		_interruptHandler
 13567 ;;		i2_initLCD
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           	psect	text38
 13572  004792                     __ptext38:
 13573                           	opt stack 0
 13574  004792                     i2_lcdInst:
 13575                           	opt stack 24
 13576                           
 13577                           ;incstack = 0
 13578                           ;i2lcdInst@data stored from wreg
 13579  004792  6E03               	movwf	i2lcdInst@data,c
 13580                           
 13581                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 13582  004794  948C               	bcf	3980,2,c	;volatile
 13583                           
 13584                           ;lcd.c: 20: lcdNibble(data);
 13585  004796  5003               	movf	i2lcdInst@data,w,c
 13586  004798  EC9C  F01F         	call	i2_lcdNibble
 13587                           
 13588                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 13589  00479C  0EA0               	movlw	160
 13590  00479E                     i2u740_47:
 13591  00479E  D000               	nop2	
 13592  0047A0  2EE8               	decfsz	wreg,f,c
 13593  0047A2  D7FD               	bra	i2u740_47
 13594  0047A4  0012               	return		;funcret
 13595  0047A6                     __end_ofi2_lcdInst:
 13596                           	opt stack 0
 13597                           pclatu	equ	0xFFB
 13598                           pclath	equ	0xFFA
 13599                           tblptru	equ	0xFF8
 13600                           tblptrh	equ	0xFF7
 13601                           tblptrl	equ	0xFF6
 13602                           tablat	equ	0xFF5
 13603                           prodh	equ	0xFF4
 13604                           prodl	equ	0xFF3
 13605                           intcon	equ	0xFF2
 13606                           intcon3	equ	0xFF0
 13607                           indf0	equ	0xFEF
 13608                           postinc0	equ	0xFEE
 13609                           fsr0h	equ	0xFEA
 13610                           fsr0l	equ	0xFE9
 13611                           wreg	equ	0xFE8
 13612                           postdec1	equ	0xFE5
 13613                           fsr1h	equ	0xFE2
 13614                           fsr1l	equ	0xFE1
 13615                           indf2	equ	0xFDF
 13616                           postinc2	equ	0xFDE
 13617                           postdec2	equ	0xFDD
 13618                           fsr2h	equ	0xFDA
 13619                           fsr2l	equ	0xFD9
 13620                           status	equ	0xFD8
 13621                           
 13622 ;; *************** function i2_lcdNibble *****************
 13623 ;; Defined at:
 13624 ;;		line 37 in file "lcd.c"
 13625 ;; Parameters:    Size  Location     Type
 13626 ;;  data            1    wreg     unsigned char 
 13627 ;; Auto vars:     Size  Location     Type
 13628 ;;  data            1    1[COMRAM] unsigned char 
 13629 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13630 ;; Return value:  Size  Location     Type
 13631 ;;                  1    wreg      void 
 13632 ;; Registers used:
 13633 ;;		wreg, status,2, status,0
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13643 ;;Total ram usage:        2 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; This function calls:
 13646 ;;		Nothing
 13647 ;; This function is called by:
 13648 ;;		i2_lcdInst
 13649 ;;		i2_putch
 13650 ;; This function uses a non-reentrant model
 13651 ;;
 13652                           
 13653                           	psect	text39
 13654  003F38                     __ptext39:
 13655                           	opt stack 0
 13656  003F38                     i2_lcdNibble:
 13657                           	opt stack 24
 13658                           
 13659                           ;incstack = 0
 13660                           ;i2lcdNibble@data stored from wreg
 13661  003F38  6E02               	movwf	i2lcdNibble@data,c
 13662                           
 13663                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 13664  003F3A  5002               	movf	i2lcdNibble@data,w,c
 13665  003F3C  0BF0               	andlw	240
 13666  003F3E  6E01               	movwf	i2lcdNibble@temp,c
 13667                           
 13668                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 13669  003F40  508C               	movf	3980,w,c	;volatile
 13670  003F42  0B0F               	andlw	15
 13671  003F44  6E8C               	movwf	3980,c	;volatile
 13672                           
 13673                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 13674  003F46  5001               	movf	i2lcdNibble@temp,w,c
 13675  003F48  108C               	iorwf	3980,w,c	;volatile
 13676  003F4A  6E8C               	movwf	3980,c	;volatile
 13677                           
 13678                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13679  003F4C  0E00               	movlw	0
 13680  003F4E  BEF2               	btfsc	intcon,7,c	;volatile
 13681  003F50  0E01               	movlw	1
 13682  003F52  0100               	movlb	0	; () banked
 13683  003F54  6FC0               	movwf	_LCDinterruptState& (0+255),b
 13684                           
 13685                           ; BSR set to: 0
 13686  003F56  9EF2               	bcf	intcon,7,c	;volatile
 13687                           
 13688                           ; BSR set to: 0
 13689  003F58  868C               	bsf	3980,3,c	;volatile
 13690                           
 13691                           ; BSR set to: 0
 13692  003F5A  0E42               	movlw	66
 13693  003F5C                     i2u741_47:
 13694  003F5C  2EE8               	decfsz	wreg,f,c
 13695  003F5E  D7FE               	bra	i2u741_47
 13696  003F60  D000               	nop2	
 13697  003F62  968C               	bcf	3980,3,c	;volatile
 13698  003F64  0EA0               	movlw	160
 13699  003F66                     i2u742_47:
 13700  003F66  D000               	nop2	
 13701  003F68  2EE8               	decfsz	wreg,f,c
 13702  003F6A  D7FD               	bra	i2u742_47
 13703  003F6C  0100               	movlb	0	; () banked
 13704  003F6E  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
 13705  003F70  D002               	bra	i2u344_45
 13706  003F72  9EF2               	bcf	intcon,7,c	;volatile
 13707  003F74  D001               	bra	i2u344_46
 13708  003F76                     i2u344_45:
 13709  003F76  8EF2               	bsf	intcon,7,c	;volatile
 13710  003F78                     i2u344_46:
 13711                           
 13712                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 13713  003F78  3802               	swapf	i2lcdNibble@data,w,c
 13714  003F7A  0BF0               	andlw	240
 13715  003F7C  6E02               	movwf	i2lcdNibble@data,c
 13716                           
 13717                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 13718  003F7E  5002               	movf	i2lcdNibble@data,w,c
 13719  003F80  0BF0               	andlw	240
 13720  003F82  6E01               	movwf	i2lcdNibble@temp,c
 13721                           
 13722                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 13723  003F84  508C               	movf	3980,w,c	;volatile
 13724  003F86  0B0F               	andlw	15
 13725  003F88  6E8C               	movwf	3980,c	;volatile
 13726                           
 13727                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 13728  003F8A  5001               	movf	i2lcdNibble@temp,w,c
 13729  003F8C  108C               	iorwf	3980,w,c	;volatile
 13730  003F8E  6E8C               	movwf	3980,c	;volatile
 13731                           
 13732                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13733  003F90  0E00               	movlw	0
 13734  003F92  BEF2               	btfsc	intcon,7,c	;volatile
 13735  003F94  0E01               	movlw	1
 13736  003F96  0100               	movlb	0	; () banked
 13737  003F98  6FC0               	movwf	_LCDinterruptState& (0+255),b
 13738                           
 13739                           ; BSR set to: 0
 13740  003F9A  9EF2               	bcf	intcon,7,c	;volatile
 13741                           
 13742                           ; BSR set to: 0
 13743  003F9C  868C               	bsf	3980,3,c	;volatile
 13744                           
 13745                           ; BSR set to: 0
 13746  003F9E  0E42               	movlw	66
 13747  003FA0                     i2u743_47:
 13748  003FA0  2EE8               	decfsz	wreg,f,c
 13749  003FA2  D7FE               	bra	i2u743_47
 13750  003FA4  D000               	nop2	
 13751  003FA6  968C               	bcf	3980,3,c	;volatile
 13752  003FA8  0EA0               	movlw	160
 13753  003FAA                     i2u744_47:
 13754  003FAA  D000               	nop2	
 13755  003FAC  2EE8               	decfsz	wreg,f,c
 13756  003FAE  D7FD               	bra	i2u744_47
 13757  003FB0  0100               	movlb	0	; () banked
 13758  003FB2  B1C0               	btfsc	_LCDinterruptState& (0+255),0,b
 13759  003FB4  D002               	bra	i2u345_45
 13760  003FB6  9EF2               	bcf	intcon,7,c	;volatile
 13761  003FB8  D001               	bra	i2u345_46
 13762  003FBA                     i2u345_45:
 13763  003FBA  8EF2               	bsf	intcon,7,c	;volatile
 13764  003FBC                     i2u345_46:
 13765  003FBC  0012               	return		;funcret
 13766  003FBE                     __end_ofi2_lcdNibble:
 13767                           	opt stack 0
 13768                           pclatu	equ	0xFFB
 13769                           pclath	equ	0xFFA
 13770                           tblptru	equ	0xFF8
 13771                           tblptrh	equ	0xFF7
 13772                           tblptrl	equ	0xFF6
 13773                           tablat	equ	0xFF5
 13774                           prodh	equ	0xFF4
 13775                           prodl	equ	0xFF3
 13776                           intcon	equ	0xFF2
 13777                           intcon3	equ	0xFF0
 13778                           indf0	equ	0xFEF
 13779                           postinc0	equ	0xFEE
 13780                           fsr0h	equ	0xFEA
 13781                           fsr0l	equ	0xFE9
 13782                           wreg	equ	0xFE8
 13783                           postdec1	equ	0xFE5
 13784                           fsr1h	equ	0xFE2
 13785                           fsr1l	equ	0xFE1
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           fsr2h	equ	0xFDA
 13790                           fsr2l	equ	0xFD9
 13791                           status	equ	0xFD8
 13792                           
 13793 ;; *************** function i2_generate_compartment_array *****************
 13794 ;; Defined at:
 13795 ;;		line 220 in file "keypad.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  step            2    0[COMRAM] int 
 13798 ;; Auto vars:     Size  Location     Type
 13799 ;;		None
 13800 ;; Return value:  Size  Location     Type
 13801 ;;                  1    wreg      void 
 13802 ;; Registers used:
 13803 ;;		wreg, status,2, status,0
 13804 ;; Tracked objects:
 13805 ;;		On entry : 0/0
 13806 ;;		On exit  : 0/0
 13807 ;;		Unchanged: 0/0
 13808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;Total ram usage:        4 bytes
 13814 ;; Hardware stack levels used:    1
 13815 ;; This function calls:
 13816 ;;		Nothing
 13817 ;; This function is called by:
 13818 ;;		_interruptHandler
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           	psect	text40
 13823  00322C                     __ptext40:
 13824                           	opt stack 0
 13825  00322C                     i2_generate_compartment_array:
 13826                           	opt stack 25
 13827                           
 13828                           ;keypad.c: 222: switch(step){
 13829                           
 13830                           ;incstack = 0
 13831  00322C  D11C               	goto	i2l1033
 13832  00322E                     
 13833                           ;keypad.c: 224: compartment_array[0] = 1;
 13834  00322E  0E00               	movlw	0
 13835  003230  0100               	movlb	0	; () banked
 13836  003232  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13837  003234  0E01               	movlw	1
 13838  003236  6F80               	movwf	_compartment_array& (0+255),b
 13839                           
 13840                           ;keypad.c: 225: compartment_array[2] = 1;
 13841  003238  0E00               	movlw	0
 13842  00323A  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13843  00323C  0E01               	movlw	1
 13844  00323E  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13845                           
 13846                           ;keypad.c: 226: compartment_array[4] = 1;
 13847  003240  0E00               	movlw	0
 13848  003242  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13849  003244  0E01               	movlw	1
 13850  003246  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13851                           
 13852                           ;keypad.c: 227: compartment_array[6] = 1;
 13853  003248  0E00               	movlw	0
 13854  00324A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13855  00324C  0E01               	movlw	1
 13856  00324E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13857                           
 13858                           ;keypad.c: 230: compartment_number[0] = 0;
 13859  003250  0E00               	movlw	0
 13860  003252  6E43               	movwf	_compartment_number+1,c
 13861  003254  0E00               	movlw	0
 13862  003256  6E42               	movwf	_compartment_number,c
 13863                           
 13864                           ;keypad.c: 231: compartment_number[1] = 2;
 13865  003258  0E00               	movlw	0
 13866  00325A  6E45               	movwf	_compartment_number+3,c
 13867  00325C  0E02               	movlw	2
 13868  00325E  6E44               	movwf	_compartment_number+2,c
 13869                           
 13870                           ;keypad.c: 232: compartment_number[2] = 4;
 13871  003260  0E00               	movlw	0
 13872  003262  6E47               	movwf	_compartment_number+5,c
 13873  003264  0E04               	movlw	4
 13874  003266  6E46               	movwf	_compartment_number+4,c
 13875                           
 13876                           ;keypad.c: 233: compartment_number[3] = 6;
 13877  003268  0E00               	movlw	0
 13878  00326A  6E49               	movwf	_compartment_number+7,c
 13879  00326C  0E06               	movlw	6
 13880  00326E  6E48               	movwf	_compartment_number+6,c
 13881                           
 13882                           ;keypad.c: 235: break;
 13883  003270  0012               	return	
 13884  003272                     
 13885                           ;keypad.c: 237: compartment_array[0] = 1;
 13886                           
 13887                           ; BSR set to: 0
 13888  003272  0E00               	movlw	0
 13889  003274  0100               	movlb	0	; () banked
 13890  003276  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13891  003278  0E01               	movlw	1
 13892  00327A  6F80               	movwf	_compartment_array& (0+255),b
 13893                           
 13894                           ;keypad.c: 238: compartment_array[1] = 1;
 13895  00327C  0E00               	movlw	0
 13896  00327E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13897  003280  0E01               	movlw	1
 13898  003282  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13899                           
 13900                           ;keypad.c: 239: compartment_array[3] = 1;
 13901  003284  0E00               	movlw	0
 13902  003286  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13903  003288  0E01               	movlw	1
 13904  00328A  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13905                           
 13906                           ;keypad.c: 240: compartment_array[4] = 1;
 13907  00328C  0E00               	movlw	0
 13908  00328E  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13909  003290  0E01               	movlw	1
 13910  003292  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13911                           
 13912                           ;keypad.c: 241: compartment_array[6] = 1;
 13913  003294  0E00               	movlw	0
 13914  003296  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13915  003298  0E01               	movlw	1
 13916  00329A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13917                           
 13918                           ;keypad.c: 245: compartment_number[0] = 0;
 13919  00329C  0E00               	movlw	0
 13920  00329E  6E43               	movwf	_compartment_number+1,c
 13921  0032A0  0E00               	movlw	0
 13922  0032A2  6E42               	movwf	_compartment_number,c
 13923                           
 13924                           ;keypad.c: 246: compartment_number[1] = 1;
 13925  0032A4  0E00               	movlw	0
 13926  0032A6  6E45               	movwf	_compartment_number+3,c
 13927  0032A8  0E01               	movlw	1
 13928  0032AA  6E44               	movwf	_compartment_number+2,c
 13929                           
 13930                           ;keypad.c: 247: compartment_number[2] = 3;
 13931  0032AC  0E00               	movlw	0
 13932  0032AE  6E47               	movwf	_compartment_number+5,c
 13933  0032B0  0E03               	movlw	3
 13934  0032B2  6E46               	movwf	_compartment_number+4,c
 13935                           
 13936                           ;keypad.c: 248: compartment_number[3] = 4;
 13937  0032B4  0E00               	movlw	0
 13938  0032B6  6E49               	movwf	_compartment_number+7,c
 13939  0032B8  0E04               	movlw	4
 13940  0032BA  6E48               	movwf	_compartment_number+6,c
 13941                           
 13942                           ;keypad.c: 249: compartment_number[4] = 6;
 13943  0032BC  0E00               	movlw	0
 13944  0032BE  6E4B               	movwf	_compartment_number+9,c
 13945  0032C0  0E06               	movlw	6
 13946  0032C2  6E4A               	movwf	_compartment_number+8,c
 13947                           
 13948                           ;keypad.c: 251: break;
 13949  0032C4  0012               	return	
 13950  0032C6                     
 13951                           ;keypad.c: 254: compartment_array[0] = 1;
 13952                           
 13953                           ; BSR set to: 0
 13954  0032C6  0E00               	movlw	0
 13955  0032C8  0100               	movlb	0	; () banked
 13956  0032CA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13957  0032CC  0E01               	movlw	1
 13958  0032CE  6F80               	movwf	_compartment_array& (0+255),b
 13959                           
 13960                           ;keypad.c: 255: compartment_array[1] = 1;
 13961  0032D0  0E00               	movlw	0
 13962  0032D2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13963  0032D4  0E01               	movlw	1
 13964  0032D6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13965                           
 13966                           ;keypad.c: 256: compartment_array[2] = 1;
 13967  0032D8  0E00               	movlw	0
 13968  0032DA  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13969  0032DC  0E01               	movlw	1
 13970  0032DE  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13971                           
 13972                           ;keypad.c: 257: compartment_array[4] = 1;
 13973  0032E0  0E00               	movlw	0
 13974  0032E2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13975  0032E4  0E01               	movlw	1
 13976  0032E6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13977                           
 13978                           ;keypad.c: 258: compartment_array[5] = 1;
 13979  0032E8  0E00               	movlw	0
 13980  0032EA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13981  0032EC  0E01               	movlw	1
 13982  0032EE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13983                           
 13984                           ;keypad.c: 259: compartment_array[6] = 1;
 13985  0032F0  0E00               	movlw	0
 13986  0032F2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13987  0032F4  0E01               	movlw	1
 13988  0032F6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13989                           
 13990                           ;keypad.c: 262: compartment_number[0] = 0;
 13991  0032F8  0E00               	movlw	0
 13992  0032FA  6E43               	movwf	_compartment_number+1,c
 13993  0032FC  0E00               	movlw	0
 13994  0032FE  6E42               	movwf	_compartment_number,c
 13995                           
 13996                           ;keypad.c: 263: compartment_number[1] = 1;
 13997  003300  0E00               	movlw	0
 13998  003302  6E45               	movwf	_compartment_number+3,c
 13999  003304  0E01               	movlw	1
 14000  003306  6E44               	movwf	_compartment_number+2,c
 14001                           
 14002                           ;keypad.c: 264: compartment_number[2] = 2;
 14003  003308  0E00               	movlw	0
 14004  00330A  6E47               	movwf	_compartment_number+5,c
 14005  00330C  0E02               	movlw	2
 14006  00330E  6E46               	movwf	_compartment_number+4,c
 14007                           
 14008                           ;keypad.c: 265: compartment_number[3] = 4;
 14009  003310  0E00               	movlw	0
 14010  003312  6E49               	movwf	_compartment_number+7,c
 14011  003314  0E04               	movlw	4
 14012  003316  6E48               	movwf	_compartment_number+6,c
 14013                           
 14014                           ;keypad.c: 266: compartment_number[4] = 5;
 14015  003318  0E00               	movlw	0
 14016  00331A  6E4B               	movwf	_compartment_number+9,c
 14017  00331C  0E05               	movlw	5
 14018  00331E  6E4A               	movwf	_compartment_number+8,c
 14019                           
 14020                           ;keypad.c: 267: compartment_number[5] = 6;
 14021  003320  0E00               	movlw	0
 14022  003322  6E4D               	movwf	_compartment_number+11,c
 14023  003324  0E06               	movlw	6
 14024  003326  6E4C               	movwf	_compartment_number+10,c
 14025                           
 14026                           ;keypad.c: 269: break;
 14027  003328  0012               	return	
 14028  00332A                     
 14029                           ;keypad.c: 271: compartment_array[0] = 1;
 14030                           
 14031                           ; BSR set to: 0
 14032  00332A  0E00               	movlw	0
 14033  00332C  0100               	movlb	0	; () banked
 14034  00332E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14035  003330  0E01               	movlw	1
 14036  003332  6F80               	movwf	_compartment_array& (0+255),b
 14037                           
 14038                           ;keypad.c: 272: compartment_array[1] = 1;
 14039  003334  0E00               	movlw	0
 14040  003336  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14041  003338  0E01               	movlw	1
 14042  00333A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14043                           
 14044                           ;keypad.c: 273: compartment_array[2] = 1;
 14045  00333C  0E00               	movlw	0
 14046  00333E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14047  003340  0E01               	movlw	1
 14048  003342  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14049                           
 14050                           ;keypad.c: 274: compartment_array[3] = 1;
 14051  003344  0E00               	movlw	0
 14052  003346  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14053  003348  0E01               	movlw	1
 14054  00334A  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14055                           
 14056                           ;keypad.c: 275: compartment_array[4] = 1;
 14057  00334C  0E00               	movlw	0
 14058  00334E  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14059  003350  0E01               	movlw	1
 14060  003352  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14061                           
 14062                           ;keypad.c: 276: compartment_array[5] = 1;
 14063  003354  0E00               	movlw	0
 14064  003356  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14065  003358  0E01               	movlw	1
 14066  00335A  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14067                           
 14068                           ;keypad.c: 277: compartment_array[6] = 1;
 14069  00335C  0E00               	movlw	0
 14070  00335E  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14071  003360  0E01               	movlw	1
 14072  003362  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14073                           
 14074                           ;keypad.c: 280: compartment_number[0] = 0;
 14075  003364  0E00               	movlw	0
 14076  003366  6E43               	movwf	_compartment_number+1,c
 14077  003368  0E00               	movlw	0
 14078  00336A  6E42               	movwf	_compartment_number,c
 14079                           
 14080                           ;keypad.c: 281: compartment_number[1] = 1;
 14081  00336C  0E00               	movlw	0
 14082  00336E  6E45               	movwf	_compartment_number+3,c
 14083  003370  0E01               	movlw	1
 14084  003372  6E44               	movwf	_compartment_number+2,c
 14085                           
 14086                           ;keypad.c: 282: compartment_number[2] = 2;
 14087  003374  0E00               	movlw	0
 14088  003376  6E47               	movwf	_compartment_number+5,c
 14089  003378  0E02               	movlw	2
 14090  00337A  6E46               	movwf	_compartment_number+4,c
 14091                           
 14092                           ;keypad.c: 283: compartment_number[3] = 3;
 14093  00337C  0E00               	movlw	0
 14094  00337E  6E49               	movwf	_compartment_number+7,c
 14095  003380  0E03               	movlw	3
 14096  003382  6E48               	movwf	_compartment_number+6,c
 14097                           
 14098                           ;keypad.c: 284: compartment_number[4] = 4;
 14099  003384  0E00               	movlw	0
 14100  003386  6E4B               	movwf	_compartment_number+9,c
 14101  003388  0E04               	movlw	4
 14102  00338A  6E4A               	movwf	_compartment_number+8,c
 14103                           
 14104                           ;keypad.c: 285: compartment_number[5] = 5;
 14105  00338C  0E00               	movlw	0
 14106  00338E  6E4D               	movwf	_compartment_number+11,c
 14107  003390  0E05               	movlw	5
 14108  003392  6E4C               	movwf	_compartment_number+10,c
 14109                           
 14110                           ;keypad.c: 286: compartment_number[6] = 6;
 14111  003394  0E00               	movlw	0
 14112  003396  6E4F               	movwf	_compartment_number+13,c
 14113  003398  0E06               	movlw	6
 14114  00339A  6E4E               	movwf	_compartment_number+12,c
 14115                           
 14116                           ;keypad.c: 288: break;
 14117  00339C  0012               	return	
 14118  00339E                     
 14119                           ;keypad.c: 290: compartment_array[0] = 1;
 14120                           
 14121                           ; BSR set to: 0
 14122  00339E  0E00               	movlw	0
 14123  0033A0  0100               	movlb	0	; () banked
 14124  0033A2  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14125  0033A4  0E01               	movlw	1
 14126  0033A6  6F80               	movwf	_compartment_array& (0+255),b
 14127                           
 14128                           ;keypad.c: 291: compartment_array[1] = 1;
 14129  0033A8  0E00               	movlw	0
 14130  0033AA  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14131  0033AC  0E01               	movlw	1
 14132  0033AE  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14133                           
 14134                           ;keypad.c: 292: compartment_array[2] = 1;
 14135  0033B0  0E00               	movlw	0
 14136  0033B2  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14137  0033B4  0E01               	movlw	1
 14138  0033B6  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14139                           
 14140                           ;keypad.c: 293: compartment_array[3] = 1;
 14141  0033B8  0E00               	movlw	0
 14142  0033BA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14143  0033BC  0E01               	movlw	1
 14144  0033BE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14145                           
 14146                           ;keypad.c: 294: compartment_array[4] = 1;
 14147  0033C0  0E00               	movlw	0
 14148  0033C2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14149  0033C4  0E01               	movlw	1
 14150  0033C6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14151                           
 14152                           ;keypad.c: 295: compartment_array[5] = 1;
 14153  0033C8  0E00               	movlw	0
 14154  0033CA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14155  0033CC  0E01               	movlw	1
 14156  0033CE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14157                           
 14158                           ;keypad.c: 296: compartment_array[6] = 1;
 14159  0033D0  0E00               	movlw	0
 14160  0033D2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14161  0033D4  0E01               	movlw	1
 14162  0033D6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14163                           
 14164                           ;keypad.c: 297: compartment_array[7] = 1;
 14165  0033D8  0E00               	movlw	0
 14166  0033DA  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 14167  0033DC  0E01               	movlw	1
 14168  0033DE  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 14169                           
 14170                           ;keypad.c: 300: compartment_number[0] = 0;
 14171  0033E0  0E00               	movlw	0
 14172  0033E2  6E43               	movwf	_compartment_number+1,c
 14173  0033E4  0E00               	movlw	0
 14174  0033E6  6E42               	movwf	_compartment_number,c
 14175                           
 14176                           ;keypad.c: 301: compartment_number[1] = 1;
 14177  0033E8  0E00               	movlw	0
 14178  0033EA  6E45               	movwf	_compartment_number+3,c
 14179  0033EC  0E01               	movlw	1
 14180  0033EE  6E44               	movwf	_compartment_number+2,c
 14181                           
 14182                           ;keypad.c: 302: compartment_number[2] = 2;
 14183  0033F0  0E00               	movlw	0
 14184  0033F2  6E47               	movwf	_compartment_number+5,c
 14185  0033F4  0E02               	movlw	2
 14186  0033F6  6E46               	movwf	_compartment_number+4,c
 14187                           
 14188                           ;keypad.c: 303: compartment_number[3] = 3;
 14189  0033F8  0E00               	movlw	0
 14190  0033FA  6E49               	movwf	_compartment_number+7,c
 14191  0033FC  0E03               	movlw	3
 14192  0033FE  6E48               	movwf	_compartment_number+6,c
 14193                           
 14194                           ;keypad.c: 304: compartment_number[4] = 4;
 14195  003400  0E00               	movlw	0
 14196  003402  6E4B               	movwf	_compartment_number+9,c
 14197  003404  0E04               	movlw	4
 14198  003406  6E4A               	movwf	_compartment_number+8,c
 14199                           
 14200                           ;keypad.c: 305: compartment_number[5] = 5;
 14201  003408  0E00               	movlw	0
 14202  00340A  6E4D               	movwf	_compartment_number+11,c
 14203  00340C  0E05               	movlw	5
 14204  00340E  6E4C               	movwf	_compartment_number+10,c
 14205                           
 14206                           ;keypad.c: 306: compartment_number[6] = 6;
 14207  003410  0E00               	movlw	0
 14208  003412  6E4F               	movwf	_compartment_number+13,c
 14209  003414  0E06               	movlw	6
 14210  003416  6E4E               	movwf	_compartment_number+12,c
 14211                           
 14212                           ;keypad.c: 307: compartment_number[7] = 7;
 14213  003418  0E00               	movlw	0
 14214  00341A  6E51               	movwf	_compartment_number+15,c
 14215  00341C  0E07               	movlw	7
 14216  00341E  6E50               	movwf	_compartment_number+14,c
 14217                           
 14218                           ;keypad.c: 309: break;
 14219  003420  0012               	return	
 14220  003422                     
 14221                           ;keypad.c: 311: compartment_array[0] = 0;
 14222                           
 14223                           ; BSR set to: 0
 14224  003422  0E00               	movlw	0
 14225  003424  0100               	movlb	0	; () banked
 14226  003426  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14227  003428  0E00               	movlw	0
 14228  00342A  6F80               	movwf	_compartment_array& (0+255),b
 14229                           
 14230                           ;keypad.c: 312: compartment_array[1] = 0;
 14231  00342C  0E00               	movlw	0
 14232  00342E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14233  003430  0E00               	movlw	0
 14234  003432  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14235                           
 14236                           ;keypad.c: 313: compartment_array[2] = 0;
 14237  003434  0E00               	movlw	0
 14238  003436  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14239  003438  0E00               	movlw	0
 14240  00343A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14241                           
 14242                           ;keypad.c: 314: compartment_array[3] = 0;
 14243  00343C  0E00               	movlw	0
 14244  00343E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14245  003440  0E00               	movlw	0
 14246  003442  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14247                           
 14248                           ;keypad.c: 315: compartment_array[4] = 0;
 14249  003444  0E00               	movlw	0
 14250  003446  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14251  003448  0E00               	movlw	0
 14252  00344A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14253                           
 14254                           ;keypad.c: 316: compartment_array[5] = 0;
 14255  00344C  0E00               	movlw	0
 14256  00344E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14257  003450  0E00               	movlw	0
 14258  003452  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14259                           
 14260                           ;keypad.c: 317: compartment_array[6] = 0;
 14261  003454  0E00               	movlw	0
 14262  003456  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14263  003458  0E00               	movlw	0
 14264  00345A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14265                           
 14266                           ;keypad.c: 318: compartment_array[7] = 0;
 14267  00345C  0E00               	movlw	0
 14268  00345E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 14269  003460  0E00               	movlw	0
 14270  003462  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 14271                           
 14272                           ;keypad.c: 320: }
 14273  003464  0012               	return	
 14274  003466                     i2l1033:
 14275                           
 14276                           ; BSR set to: 0
 14277  003466  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 14278  00346A  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 14279                           
 14280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14281                           ; Switch size 1, requested type "space"
 14282                           ; Number of cases is 1, Range of values is 0 to 0
 14283                           ; switch strategies available:
 14284                           ; Name         Instructions Cycles
 14285                           ; simple_byte            4     3 (average)
 14286                           ;	Chosen strategy is simple_byte
 14287  00346E  5004               	movf	??i2_generate_compartment_array+1,w,c
 14288  003470  0A00               	xorlw	0	; case 0
 14289  003472  A4D8               	btfss	status,2,c
 14290  003474  D7D6               	goto	i2l1040
 14291                           
 14292                           ; Switch size 1, requested type "space"
 14293                           ; Number of cases is 5, Range of values is 4 to 8
 14294                           ; switch strategies available:
 14295                           ; Name         Instructions Cycles
 14296                           ; simple_byte           16     9 (average)
 14297                           ;	Chosen strategy is simple_byte
 14298  003476  5003               	movf	??i2_generate_compartment_array,w,c
 14299  003478  0A04               	xorlw	4	; case 4
 14300  00347A  B4D8               	btfsc	status,2,c
 14301  00347C  D6D8               	goto	i2l1034
 14302  00347E  0A01               	xorlw	1	; case 5
 14303  003480  B4D8               	btfsc	status,2,c
 14304  003482  D6F7               	goto	i2l1036
 14305  003484  0A03               	xorlw	3	; case 6
 14306  003486  B4D8               	btfsc	status,2,c
 14307  003488  D71E               	goto	i2l1037
 14308  00348A  0A01               	xorlw	1	; case 7
 14309  00348C  B4D8               	btfsc	status,2,c
 14310  00348E  D74D               	goto	i2l1038
 14311  003490  0A0F               	xorlw	15	; case 8
 14312  003492  B4D8               	btfsc	status,2,c
 14313  003494  D784               	goto	i2l1039
 14314  003496  D7C5               	goto	i2l1040
 14315  003498                     __end_ofi2_generate_compartment_array:
 14316                           	opt stack 0
 14317                           pclatu	equ	0xFFB
 14318                           pclath	equ	0xFFA
 14319                           tblptru	equ	0xFF8
 14320                           tblptrh	equ	0xFF7
 14321                           tblptrl	equ	0xFF6
 14322                           tablat	equ	0xFF5
 14323                           prodh	equ	0xFF4
 14324                           prodl	equ	0xFF3
 14325                           intcon	equ	0xFF2
 14326                           intcon3	equ	0xFF0
 14327                           indf0	equ	0xFEF
 14328                           postinc0	equ	0xFEE
 14329                           fsr0h	equ	0xFEA
 14330                           fsr0l	equ	0xFE9
 14331                           wreg	equ	0xFE8
 14332                           postdec1	equ	0xFE5
 14333                           fsr1h	equ	0xFE2
 14334                           fsr1l	equ	0xFE1
 14335                           indf2	equ	0xFDF
 14336                           postinc2	equ	0xFDE
 14337                           postdec2	equ	0xFDD
 14338                           fsr2h	equ	0xFDA
 14339                           fsr2l	equ	0xFD9
 14340                           status	equ	0xFD8
 14341                           
 14342 ;; *************** function i2___awdiv *****************
 14343 ;; Defined at:
 14344 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 14345 ;; Parameters:    Size  Location     Type
 14346 ;;  dividend        2    0[COMRAM] int 
 14347 ;;  divisor         2    2[COMRAM] int 
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;  __awdiv         2    6[COMRAM] int 
 14350 ;;  __awdiv         1    5[COMRAM] unsigned char 
 14351 ;;  __awdiv         1    4[COMRAM] unsigned char 
 14352 ;; Return value:  Size  Location     Type
 14353 ;;                  2    0[COMRAM] int 
 14354 ;; Registers used:
 14355 ;;		wreg, status,2, status,0
 14356 ;; Tracked objects:
 14357 ;;		On entry : 0/0
 14358 ;;		On exit  : 0/0
 14359 ;;		Unchanged: 0/0
 14360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14364 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14365 ;;Total ram usage:        8 bytes
 14366 ;; Hardware stack levels used:    1
 14367 ;; This function calls:
 14368 ;;		Nothing
 14369 ;; This function is called by:
 14370 ;;		_interruptHandler
 14371 ;; This function uses a non-reentrant model
 14372 ;;
 14373                           
 14374                           	psect	text41
 14375  0040C8                     __ptext41:
 14376                           	opt stack 0
 14377  0040C8                     i2___awdiv:
 14378                           	opt stack 25
 14379                           
 14380                           ;incstack = 0
 14381  0040C8  0E00               	movlw	0
 14382  0040CA  6E06               	movwf	i2___awdiv@sign,c
 14383  0040CC  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14384  0040CE  D006               	goto	i2l1412
 14385  0040D0  6C03               	negf	i2___awdiv@divisor,c
 14386  0040D2  1E04               	comf	i2___awdiv@divisor+1,f,c
 14387  0040D4  B0D8               	btfsc	status,0,c
 14388  0040D6  2A04               	incf	i2___awdiv@divisor+1,f,c
 14389  0040D8  0E01               	movlw	1
 14390  0040DA  6E06               	movwf	i2___awdiv@sign,c
 14391  0040DC                     i2l1412:
 14392  0040DC  AE02               	btfss	i2___awdiv@dividend+1,7,c
 14393  0040DE  D006               	goto	i2l1413
 14394  0040E0  6C01               	negf	i2___awdiv@dividend,c
 14395  0040E2  1E02               	comf	i2___awdiv@dividend+1,f,c
 14396  0040E4  B0D8               	btfsc	status,0,c
 14397  0040E6  2A02               	incf	i2___awdiv@dividend+1,f,c
 14398  0040E8  0E01               	movlw	1
 14399  0040EA  1A06               	xorwf	i2___awdiv@sign,f,c
 14400  0040EC                     i2l1413:
 14401  0040EC  0E00               	movlw	0
 14402  0040EE  6E08               	movwf	i2___awdiv@quotient+1,c
 14403  0040F0  0E00               	movlw	0
 14404  0040F2  6E07               	movwf	i2___awdiv@quotient,c
 14405  0040F4  5003               	movf	i2___awdiv@divisor,w,c
 14406  0040F6  1004               	iorwf	i2___awdiv@divisor+1,w,c
 14407  0040F8  B4D8               	btfsc	status,2,c
 14408  0040FA  D01C               	goto	i2l1420
 14409  0040FC  0E01               	movlw	1
 14410  0040FE  6E05               	movwf	i2___awdiv@counter,c
 14411  004100  D004               	goto	i2l1415
 14412  004102  90D8               	bcf	status,0,c
 14413  004104  3603               	rlcf	i2___awdiv@divisor,f,c
 14414  004106  3604               	rlcf	i2___awdiv@divisor+1,f,c
 14415  004108  2A05               	incf	i2___awdiv@counter,f,c
 14416  00410A                     i2l1415:
 14417  00410A  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14418  00410C  D7FA               	goto	i2l1416
 14419  00410E                     i2u499_40:
 14420  00410E  90D8               	bcf	status,0,c
 14421  004110  3607               	rlcf	i2___awdiv@quotient,f,c
 14422  004112  3608               	rlcf	i2___awdiv@quotient+1,f,c
 14423  004114  5003               	movf	i2___awdiv@divisor,w,c
 14424  004116  5C01               	subwf	i2___awdiv@dividend,w,c
 14425  004118  5004               	movf	i2___awdiv@divisor+1,w,c
 14426  00411A  5802               	subwfb	i2___awdiv@dividend+1,w,c
 14427  00411C  A0D8               	btfss	status,0,c
 14428  00411E  D005               	goto	i2l1419
 14429  004120  5003               	movf	i2___awdiv@divisor,w,c
 14430  004122  5E01               	subwf	i2___awdiv@dividend,f,c
 14431  004124  5004               	movf	i2___awdiv@divisor+1,w,c
 14432  004126  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 14433  004128  8007               	bsf	i2___awdiv@quotient,0,c
 14434  00412A                     i2l1419:
 14435  00412A  90D8               	bcf	status,0,c
 14436  00412C  3204               	rrcf	i2___awdiv@divisor+1,f,c
 14437  00412E  3203               	rrcf	i2___awdiv@divisor,f,c
 14438  004130  2E05               	decfsz	i2___awdiv@counter,f,c
 14439  004132  D7ED               	goto	i2u499_40
 14440  004134                     i2l1420:
 14441  004134  5006               	movf	i2___awdiv@sign,w,c
 14442  004136  B4D8               	btfsc	status,2,c
 14443  004138  D004               	goto	i2l1421
 14444  00413A  6C07               	negf	i2___awdiv@quotient,c
 14445  00413C  1E08               	comf	i2___awdiv@quotient+1,f,c
 14446  00413E  B0D8               	btfsc	status,0,c
 14447  004140  2A08               	incf	i2___awdiv@quotient+1,f,c
 14448  004142                     i2l1421:
 14449  004142  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 14450  004146  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14451  00414A  0012               	return	
 14452  00414C                     __end_ofi2___awdiv:
 14453                           	opt stack 0
 14454                           pclatu	equ	0xFFB
 14455                           pclath	equ	0xFFA
 14456                           tblptru	equ	0xFF8
 14457                           tblptrh	equ	0xFF7
 14458                           tblptrl	equ	0xFF6
 14459                           tablat	equ	0xFF5
 14460                           prodh	equ	0xFF4
 14461                           prodl	equ	0xFF3
 14462                           intcon	equ	0xFF2
 14463                           intcon3	equ	0xFF0
 14464                           indf0	equ	0xFEF
 14465                           postinc0	equ	0xFEE
 14466                           fsr0h	equ	0xFEA
 14467                           fsr0l	equ	0xFE9
 14468                           wreg	equ	0xFE8
 14469                           postdec1	equ	0xFE5
 14470                           fsr1h	equ	0xFE2
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function i2_I2C_Master_Write *****************
 14480 ;; Defined at:
 14481 ;;		line 108 in file "I2C.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;		None
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  1    wreg      void 
 14488 ;; Registers used:
 14489 ;;		wreg, status,2, status,0, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;Total ram usage:        2 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    1
 14502 ;; This function calls:
 14503 ;;		i2_I2C_Master_Wait
 14504 ;; This function is called by:
 14505 ;;		_interruptHandler
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           	psect	text42
 14510  0047CC                     __ptext42:
 14511                           	opt stack 0
 14512  0047CC                     i2_I2C_Master_Write:
 14513                           	opt stack 24
 14514                           
 14515                           ;I2C.c: 116: I2C_Master_Wait();
 14516                           
 14517                           ;incstack = 0
 14518  0047CC  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14519                           
 14520                           ;I2C.c: 117: SSPBUF = byteToWrite;
 14521  0047D0  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 14522  0047D4  0012               	return		;funcret
 14523  0047D6                     __end_ofi2_I2C_Master_Write:
 14524                           	opt stack 0
 14525                           pclatu	equ	0xFFB
 14526                           pclath	equ	0xFFA
 14527                           tblptru	equ	0xFF8
 14528                           tblptrh	equ	0xFF7
 14529                           tblptrl	equ	0xFF6
 14530                           tablat	equ	0xFF5
 14531                           prodh	equ	0xFF4
 14532                           prodl	equ	0xFF3
 14533                           intcon	equ	0xFF2
 14534                           intcon3	equ	0xFF0
 14535                           indf0	equ	0xFEF
 14536                           postinc0	equ	0xFEE
 14537                           fsr0h	equ	0xFEA
 14538                           fsr0l	equ	0xFE9
 14539                           wreg	equ	0xFE8
 14540                           postdec1	equ	0xFE5
 14541                           fsr1h	equ	0xFE2
 14542                           fsr1l	equ	0xFE1
 14543                           indf2	equ	0xFDF
 14544                           postinc2	equ	0xFDE
 14545                           postdec2	equ	0xFDD
 14546                           fsr2h	equ	0xFDA
 14547                           fsr2l	equ	0xFD9
 14548                           status	equ	0xFD8
 14549                           
 14550 ;; *************** function i2_I2C_Master_Stop *****************
 14551 ;; Defined at:
 14552 ;;		line 95 in file "I2C.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;		None
 14555 ;; Auto vars:     Size  Location     Type
 14556 ;;		None
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  1    wreg      void 
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0, cstack
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14570 ;;Total ram usage:        0 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    1
 14573 ;; This function calls:
 14574 ;;		i2_I2C_Master_Wait
 14575 ;; This function is called by:
 14576 ;;		_interruptHandler
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           	psect	text43
 14581  0047EE                     __ptext43:
 14582                           	opt stack 0
 14583  0047EE                     i2_I2C_Master_Stop:
 14584                           	opt stack 24
 14585                           
 14586                           ;I2C.c: 104: I2C_Master_Wait();
 14587                           
 14588                           ;incstack = 0
 14589  0047EE  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14590                           
 14591                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 14592  0047F2  84C5               	bsf	4037,2,c	;volatile
 14593  0047F4  0012               	return		;funcret
 14594  0047F6                     __end_ofi2_I2C_Master_Stop:
 14595                           	opt stack 0
 14596                           pclatu	equ	0xFFB
 14597                           pclath	equ	0xFFA
 14598                           tblptru	equ	0xFF8
 14599                           tblptrh	equ	0xFF7
 14600                           tblptrl	equ	0xFF6
 14601                           tablat	equ	0xFF5
 14602                           prodh	equ	0xFF4
 14603                           prodl	equ	0xFF3
 14604                           intcon	equ	0xFF2
 14605                           intcon3	equ	0xFF0
 14606                           indf0	equ	0xFEF
 14607                           postinc0	equ	0xFEE
 14608                           fsr0h	equ	0xFEA
 14609                           fsr0l	equ	0xFE9
 14610                           wreg	equ	0xFE8
 14611                           postdec1	equ	0xFE5
 14612                           fsr1h	equ	0xFE2
 14613                           fsr1l	equ	0xFE1
 14614                           indf2	equ	0xFDF
 14615                           postinc2	equ	0xFDE
 14616                           postdec2	equ	0xFDD
 14617                           fsr2h	equ	0xFDA
 14618                           fsr2l	equ	0xFD9
 14619                           status	equ	0xFD8
 14620                           
 14621 ;; *************** function i2_I2C_Master_Start *****************
 14622 ;; Defined at:
 14623 ;;		line 69 in file "I2C.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;		None
 14626 ;; Auto vars:     Size  Location     Type
 14627 ;;		None
 14628 ;; Return value:  Size  Location     Type
 14629 ;;                  1    wreg      void 
 14630 ;; Registers used:
 14631 ;;		wreg, status,2, status,0, cstack
 14632 ;; Tracked objects:
 14633 ;;		On entry : 0/0
 14634 ;;		On exit  : 0/0
 14635 ;;		Unchanged: 0/0
 14636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14641 ;;Total ram usage:        0 bytes
 14642 ;; Hardware stack levels used:    1
 14643 ;; Hardware stack levels required when called:    1
 14644 ;; This function calls:
 14645 ;;		i2_I2C_Master_Wait
 14646 ;; This function is called by:
 14647 ;;		_interruptHandler
 14648 ;; This function uses a non-reentrant model
 14649 ;;
 14650                           
 14651                           	psect	text44
 14652  0047F6                     __ptext44:
 14653                           	opt stack 0
 14654  0047F6                     i2_I2C_Master_Start:
 14655                           	opt stack 24
 14656                           
 14657                           ;I2C.c: 78: I2C_Master_Wait();
 14658                           
 14659                           ;incstack = 0
 14660  0047F6  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14661                           
 14662                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 14663  0047FA  80C5               	bsf	4037,0,c	;volatile
 14664  0047FC  0012               	return		;funcret
 14665  0047FE                     __end_ofi2_I2C_Master_Start:
 14666                           	opt stack 0
 14667                           pclatu	equ	0xFFB
 14668                           pclath	equ	0xFFA
 14669                           tblptru	equ	0xFF8
 14670                           tblptrh	equ	0xFF7
 14671                           tblptrl	equ	0xFF6
 14672                           tablat	equ	0xFF5
 14673                           prodh	equ	0xFF4
 14674                           prodl	equ	0xFF3
 14675                           intcon	equ	0xFF2
 14676                           intcon3	equ	0xFF0
 14677                           indf0	equ	0xFEF
 14678                           postinc0	equ	0xFEE
 14679                           fsr0h	equ	0xFEA
 14680                           fsr0l	equ	0xFE9
 14681                           wreg	equ	0xFE8
 14682                           postdec1	equ	0xFE5
 14683                           fsr1h	equ	0xFE2
 14684                           fsr1l	equ	0xFE1
 14685                           indf2	equ	0xFDF
 14686                           postinc2	equ	0xFDE
 14687                           postdec2	equ	0xFDD
 14688                           fsr2h	equ	0xFDA
 14689                           fsr2l	equ	0xFD9
 14690                           status	equ	0xFD8
 14691                           
 14692 ;; *************** function i2_I2C_Master_Read *****************
 14693 ;; Defined at:
 14694 ;;		line 120 in file "I2C.c"
 14695 ;; Parameters:    Size  Location     Type
 14696 ;;  ackBit          1    wreg     unsigned char 
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;  ackBit          1    1[COMRAM] unsigned char 
 14699 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14700 ;; Return value:  Size  Location     Type
 14701 ;;                  1    wreg      unsigned char 
 14702 ;; Registers used:
 14703 ;;		wreg, status,2, status,0, cstack
 14704 ;; Tracked objects:
 14705 ;;		On entry : 0/0
 14706 ;;		On exit  : 0/0
 14707 ;;		Unchanged: 0/0
 14708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14712 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14713 ;;Total ram usage:        2 bytes
 14714 ;; Hardware stack levels used:    1
 14715 ;; Hardware stack levels required when called:    1
 14716 ;; This function calls:
 14717 ;;		i2_I2C_Master_Wait
 14718 ;; This function is called by:
 14719 ;;		_interruptHandler
 14720 ;; This function uses a non-reentrant model
 14721 ;;
 14722                           
 14723                           	psect	text45
 14724  0046C2                     __ptext45:
 14725                           	opt stack 0
 14726  0046C2                     i2_I2C_Master_Read:
 14727                           	opt stack 24
 14728                           
 14729                           ;incstack = 0
 14730                           ;i2I2C_Master_Read@ackBit stored from wreg
 14731  0046C2  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 14732                           
 14733                           ;I2C.c: 130: unsigned char receivedByte;
 14734                           ;I2C.c: 132: I2C_Master_Wait();
 14735  0046C4  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14736                           
 14737                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 14738  0046C8  86C5               	bsf	4037,3,c	;volatile
 14739                           
 14740                           ;I2C.c: 135: I2C_Master_Wait();
 14741  0046CA  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14742                           
 14743                           ;I2C.c: 136: receivedByte = SSPBUF;
 14744  0046CE  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 14745                           
 14746                           ;I2C.c: 138: I2C_Master_Wait();
 14747  0046D2  ECD3  F023         	call	i2_I2C_Master_Wait	;wreg free
 14748                           
 14749                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 14750  0046D6  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 14751  0046D8  D002               	bra	i2u465_45
 14752  0046DA  9AC5               	bcf	4037,5,c	;volatile
 14753  0046DC  D001               	bra	i2u465_46
 14754  0046DE                     i2u465_45:
 14755  0046DE  8AC5               	bsf	4037,5,c	;volatile
 14756  0046E0                     i2u465_46:
 14757                           
 14758                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 14759  0046E0  88C5               	bsf	4037,4,c	;volatile
 14760                           
 14761                           ;I2C.c: 142: return receivedByte;
 14762  0046E2  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 14763  0046E4  0012               	return	
 14764  0046E6                     __end_ofi2_I2C_Master_Read:
 14765                           	opt stack 0
 14766                           pclatu	equ	0xFFB
 14767                           pclath	equ	0xFFA
 14768                           tblptru	equ	0xFF8
 14769                           tblptrh	equ	0xFF7
 14770                           tblptrl	equ	0xFF6
 14771                           tablat	equ	0xFF5
 14772                           prodh	equ	0xFF4
 14773                           prodl	equ	0xFF3
 14774                           intcon	equ	0xFF2
 14775                           intcon3	equ	0xFF0
 14776                           indf0	equ	0xFEF
 14777                           postinc0	equ	0xFEE
 14778                           fsr0h	equ	0xFEA
 14779                           fsr0l	equ	0xFE9
 14780                           wreg	equ	0xFE8
 14781                           postdec1	equ	0xFE5
 14782                           fsr1h	equ	0xFE2
 14783                           fsr1l	equ	0xFE1
 14784                           indf2	equ	0xFDF
 14785                           postinc2	equ	0xFDE
 14786                           postdec2	equ	0xFDD
 14787                           fsr2h	equ	0xFDA
 14788                           fsr2l	equ	0xFD9
 14789                           status	equ	0xFD8
 14790                           
 14791 ;; *************** function i2_I2C_Master_Wait *****************
 14792 ;; Defined at:
 14793 ;;		line 51 in file "I2C.c"
 14794 ;; Parameters:    Size  Location     Type
 14795 ;;		None
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;		None
 14798 ;; Return value:  Size  Location     Type
 14799 ;;                  1    wreg      void 
 14800 ;; Registers used:
 14801 ;;		wreg, status,2, status,0
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;Total ram usage:        1 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; This function calls:
 14814 ;;		Nothing
 14815 ;; This function is called by:
 14816 ;;		i2_I2C_Master_Start
 14817 ;;		i2_I2C_Master_Stop
 14818 ;;		i2_I2C_Master_Write
 14819 ;;		i2_I2C_Master_Read
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text46
 14824  0047A6                     __ptext46:
 14825                           	opt stack 0
 14826  0047A6                     i2_I2C_Master_Wait:
 14827                           	opt stack 24
 14828                           
 14829                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14830                           
 14831                           ;incstack = 0
 14832  0047A6  B4C7               	btfsc	4039,2,c	;volatile
 14833  0047A8  D7FE               	goto	i2_I2C_Master_Wait
 14834  0047AA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14835  0047AE  0E1F               	movlw	31
 14836  0047B0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14837  0047B2  B4D8               	btfsc	status,2,c
 14838  0047B4  0012               	return	
 14839  0047B6  D7F7               	goto	i2_I2C_Master_Wait
 14840  0047B8                     __end_ofi2_I2C_Master_Wait:
 14841                           	opt stack 0
 14842                           pclatu	equ	0xFFB
 14843                           pclath	equ	0xFFA
 14844                           tblptru	equ	0xFF8
 14845                           tblptrh	equ	0xFF7
 14846                           tblptrl	equ	0xFF6
 14847                           tablat	equ	0xFF5
 14848                           prodh	equ	0xFF4
 14849                           prodl	equ	0xFF3
 14850                           intcon	equ	0xFF2
 14851                           intcon3	equ	0xFF0
 14852                           indf0	equ	0xFEF
 14853                           postinc0	equ	0xFEE
 14854                           fsr0h	equ	0xFEA
 14855                           fsr0l	equ	0xFE9
 14856                           wreg	equ	0xFE8
 14857                           postdec1	equ	0xFE5
 14858                           fsr1h	equ	0xFE2
 14859                           fsr1l	equ	0xFE1
 14860                           indf2	equ	0xFDF
 14861                           postinc2	equ	0xFDE
 14862                           postdec2	equ	0xFDD
 14863                           fsr2h	equ	0xFDA
 14864                           fsr2l	equ	0xFD9
 14865                           status	equ	0xFD8
 14866                           
 14867 ;; *************** function i2_I2C_Master_Init *****************
 14868 ;; Defined at:
 14869 ;;		line 14 in file "I2C.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;		None
 14874 ;; Return value:  Size  Location     Type
 14875 ;;                  1    wreg      void 
 14876 ;; Registers used:
 14877 ;;		wreg, status,2, status,0, cstack
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14886 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14887 ;;Total ram usage:        8 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; Hardware stack levels required when called:    1
 14890 ;; This function calls:
 14891 ;;		i2___lldiv
 14892 ;; This function is called by:
 14893 ;;		_interruptHandler
 14894 ;; This function uses a non-reentrant model
 14895 ;;
 14896                           
 14897                           	psect	text47
 14898  004302                     __ptext47:
 14899                           	opt stack 0
 14900  004302                     i2_I2C_Master_Init:
 14901                           	opt stack 24
 14902                           
 14903                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 14904                           
 14905                           ;incstack = 0
 14906  004302  9AC6               	bcf	4038,5,c	;volatile
 14907                           
 14908                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 14909  004304  8694               	bsf	3988,3,c	;volatile
 14910                           
 14911                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 14912  004306  8894               	bsf	3988,4,c	;volatile
 14913                           
 14914                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 14915  004308  0E80               	movlw	128
 14916  00430A  6EC7               	movwf	4039,c	;volatile
 14917                           
 14918                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 14919  00430C  0E28               	movlw	40
 14920  00430E  6EC6               	movwf	4038,c	;volatile
 14921                           
 14922                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 14923  004310  0E00               	movlw	0
 14924  004312  6EC5               	movwf	4037,c	;volatile
 14925                           
 14926                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 14927  004314  0E00               	movlw	0
 14928  004316  6E01               	movwf	i2___lldiv@dividend,c
 14929  004318  0E48               	movlw	72
 14930  00431A  6E02               	movwf	i2___lldiv@dividend+1,c
 14931  00431C  0EE8               	movlw	232
 14932  00431E  6E03               	movwf	i2___lldiv@dividend+2,c
 14933  004320  0E01               	movlw	1
 14934  004322  6E04               	movwf	i2___lldiv@dividend+3,c
 14935  004324  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 14936  004328  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 14937  00432C  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 14938  004330  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 14939  004334  0E02               	movlw	2
 14940  004336                     i2u464_45:
 14941  004336  90D8               	bcf	status,0,c
 14942  004338  3612               	rlcf	??i2_I2C_Master_Init,f,c
 14943  00433A  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 14944  00433C  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 14945  00433E  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 14946  004340  2EE8               	decfsz	wreg,f,c
 14947  004342  D7F9               	goto	i2u464_45
 14948  004344  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 14949  004348  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 14950  00434C  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 14951  004350  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 14952  004354  ECA6  F020         	call	i2___lldiv	;wreg free
 14953  004358  0401               	decf	?i2___lldiv,w,c
 14954  00435A  6EC8               	movwf	4040,c	;volatile
 14955  00435C  0012               	return		;funcret
 14956  00435E                     __end_ofi2_I2C_Master_Init:
 14957                           	opt stack 0
 14958                           pclatu	equ	0xFFB
 14959                           pclath	equ	0xFFA
 14960                           tblptru	equ	0xFF8
 14961                           tblptrh	equ	0xFF7
 14962                           tblptrl	equ	0xFF6
 14963                           tablat	equ	0xFF5
 14964                           prodh	equ	0xFF4
 14965                           prodl	equ	0xFF3
 14966                           intcon	equ	0xFF2
 14967                           intcon3	equ	0xFF0
 14968                           indf0	equ	0xFEF
 14969                           postinc0	equ	0xFEE
 14970                           fsr0h	equ	0xFEA
 14971                           fsr0l	equ	0xFE9
 14972                           wreg	equ	0xFE8
 14973                           postdec1	equ	0xFE5
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           indf2	equ	0xFDF
 14977                           postinc2	equ	0xFDE
 14978                           postdec2	equ	0xFDD
 14979                           fsr2h	equ	0xFDA
 14980                           fsr2l	equ	0xFD9
 14981                           status	equ	0xFD8
 14982                           
 14983 ;; *************** function i2___lldiv *****************
 14984 ;; Defined at:
 14985 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14986 ;; Parameters:    Size  Location     Type
 14987 ;;  dividend        4    0[COMRAM] unsigned long 
 14988 ;;  divisor         4    4[COMRAM] unsigned long 
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14991 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  4    0[COMRAM] unsigned long 
 14994 ;; Registers used:
 14995 ;;		wreg, status,2, status,0
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15001 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;Total ram usage:       13 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		i2_I2C_Master_Init
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           	psect	text48
 15015  00414C                     __ptext48:
 15016                           	opt stack 0
 15017  00414C                     i2___lldiv:
 15018                           	opt stack 24
 15019                           
 15020                           ;incstack = 0
 15021  00414C  0E00               	movlw	0
 15022  00414E  6E09               	movwf	i2___lldiv@quotient,c
 15023  004150  0E00               	movlw	0
 15024  004152  6E0A               	movwf	i2___lldiv@quotient+1,c
 15025  004154  0E00               	movlw	0
 15026  004156  6E0B               	movwf	i2___lldiv@quotient+2,c
 15027  004158  0E00               	movlw	0
 15028  00415A  6E0C               	movwf	i2___lldiv@quotient+3,c
 15029  00415C  5005               	movf	i2___lldiv@divisor,w,c
 15030  00415E  1006               	iorwf	i2___lldiv@divisor+1,w,c
 15031  004160  1007               	iorwf	i2___lldiv@divisor+2,w,c
 15032  004162  1008               	iorwf	i2___lldiv@divisor+3,w,c
 15033  004164  B4D8               	btfsc	status,2,c
 15034  004166  D02A               	goto	i2l1605
 15035  004168  0E01               	movlw	1
 15036  00416A  6E0D               	movwf	i2___lldiv@counter,c
 15037  00416C  D006               	goto	i2l1600
 15038  00416E  90D8               	bcf	status,0,c
 15039  004170  3605               	rlcf	i2___lldiv@divisor,f,c
 15040  004172  3606               	rlcf	i2___lldiv@divisor+1,f,c
 15041  004174  3607               	rlcf	i2___lldiv@divisor+2,f,c
 15042  004176  3608               	rlcf	i2___lldiv@divisor+3,f,c
 15043  004178  2A0D               	incf	i2___lldiv@counter,f,c
 15044  00417A                     i2l1600:
 15045  00417A  AE08               	btfss	i2___lldiv@divisor+3,7,c
 15046  00417C  D7F8               	goto	i2l1601
 15047  00417E                     i2u384_40:
 15048  00417E  90D8               	bcf	status,0,c
 15049  004180  3609               	rlcf	i2___lldiv@quotient,f,c
 15050  004182  360A               	rlcf	i2___lldiv@quotient+1,f,c
 15051  004184  360B               	rlcf	i2___lldiv@quotient+2,f,c
 15052  004186  360C               	rlcf	i2___lldiv@quotient+3,f,c
 15053  004188  5005               	movf	i2___lldiv@divisor,w,c
 15054  00418A  5C01               	subwf	i2___lldiv@dividend,w,c
 15055  00418C  5006               	movf	i2___lldiv@divisor+1,w,c
 15056  00418E  5802               	subwfb	i2___lldiv@dividend+1,w,c
 15057  004190  5007               	movf	i2___lldiv@divisor+2,w,c
 15058  004192  5803               	subwfb	i2___lldiv@dividend+2,w,c
 15059  004194  5008               	movf	i2___lldiv@divisor+3,w,c
 15060  004196  5804               	subwfb	i2___lldiv@dividend+3,w,c
 15061  004198  A0D8               	btfss	status,0,c
 15062  00419A  D009               	goto	i2l1604
 15063  00419C  5005               	movf	i2___lldiv@divisor,w,c
 15064  00419E  5E01               	subwf	i2___lldiv@dividend,f,c
 15065  0041A0  5006               	movf	i2___lldiv@divisor+1,w,c
 15066  0041A2  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 15067  0041A4  5007               	movf	i2___lldiv@divisor+2,w,c
 15068  0041A6  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 15069  0041A8  5008               	movf	i2___lldiv@divisor+3,w,c
 15070  0041AA  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 15071  0041AC  8009               	bsf	i2___lldiv@quotient,0,c
 15072  0041AE                     i2l1604:
 15073  0041AE  90D8               	bcf	status,0,c
 15074  0041B0  3208               	rrcf	i2___lldiv@divisor+3,f,c
 15075  0041B2  3207               	rrcf	i2___lldiv@divisor+2,f,c
 15076  0041B4  3206               	rrcf	i2___lldiv@divisor+1,f,c
 15077  0041B6  3205               	rrcf	i2___lldiv@divisor,f,c
 15078  0041B8  2E0D               	decfsz	i2___lldiv@counter,f,c
 15079  0041BA  D7E1               	goto	i2u384_40
 15080  0041BC                     i2l1605:
 15081  0041BC  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 15082  0041C0  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 15083  0041C4  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 15084  0041C8  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 15085  0041CC  0012               	return		;funcret
 15086  0041CE                     __end_ofi2___lldiv:
 15087                           	opt stack 0
 15088                           pclatu	equ	0xFFB
 15089                           pclath	equ	0xFFA
 15090                           tblptru	equ	0xFF8
 15091                           tblptrh	equ	0xFF7
 15092                           tblptrl	equ	0xFF6
 15093                           tablat	equ	0xFF5
 15094                           prodh	equ	0xFF4
 15095                           prodl	equ	0xFF3
 15096                           intcon	equ	0xFF2
 15097                           intcon3	equ	0xFF0
 15098                           indf0	equ	0xFEF
 15099                           postinc0	equ	0xFEE
 15100                           fsr0h	equ	0xFEA
 15101                           fsr0l	equ	0xFE9
 15102                           wreg	equ	0xFE8
 15103                           postdec1	equ	0xFE5
 15104                           fsr1h	equ	0xFE2
 15105                           fsr1l	equ	0xFE1
 15106                           indf2	equ	0xFDF
 15107                           postinc2	equ	0xFDE
 15108                           postdec2	equ	0xFDD
 15109                           fsr2h	equ	0xFDA
 15110                           fsr2l	equ	0xFD9
 15111                           status	equ	0xFD8
 15112                           
 15113 ;; *************** function _strncmp *****************
 15114 ;; Defined at:
 15115 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 15116 ;; Parameters:    Size  Location     Type
 15117 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 15118 ;;		 -> current_set(5), 
 15119 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 15120 ;;		 -> strs(100), 
 15121 ;;  len             2   10[COMRAM] unsigned int 
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;		None
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  2    6[COMRAM] int 
 15126 ;; Registers used:
 15127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15133 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15135 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15136 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;Total ram usage:        9 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; This function calls:
 15140 ;;		Nothing
 15141 ;; This function is called by:
 15142 ;;		_interruptHandler
 15143 ;; This function uses a non-reentrant model
 15144 ;;
 15145                           
 15146                           	psect	text49
 15147  003FBE                     __ptext49:
 15148                           	opt stack 0
 15149  003FBE                     _strncmp:
 15150                           	opt stack 25
 15151                           
 15152                           ;incstack = 0
 15153  003FBE  D035               	goto	i2l1820
 15154  003FC0                     i2l5519:
 15155  003FC0  C007  FFD9         	movff	strncmp@s1,fsr2l
 15156  003FC4  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 15157  003FC8  50DF               	movf	indf2,w,c
 15158  003FCA  B4D8               	btfsc	status,2,c
 15159  003FCC  D010               	goto	i2u424_40
 15160  003FCE  C007  FFD9         	movff	strncmp@s1,fsr2l
 15161  003FD2  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 15162  003FD6  50DF               	movf	indf2,w,c
 15163  003FD8  6E0D               	movwf	??_strncmp& (0+255),c
 15164  003FDA  C009  FFF6         	movff	strncmp@s2,tblptrl
 15165  003FDE  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 15166  003FE2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15167  003FE2  6AF8               	clrf	tblptru,c
 15168  003FE4                     	endif
 15169  003FE4                     	if	0	;tblptru may be non-zero
 15170  003FE4                     	endif
 15171  003FE4  0008               	tblrd		*
 15172  003FE6  50F5               	movf	tablat,w,c
 15173  003FE8  180D               	xorwf	??_strncmp,w,c
 15174  003FEA  B4D8               	btfsc	status,2,c
 15175  003FEC  D01A               	goto	i2l1822
 15176  003FEE                     i2u424_40:
 15177  003FEE  C009  FFF6         	movff	strncmp@s2,tblptrl
 15178  003FF2  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 15179  003FF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15180  003FF6  6AF8               	clrf	tblptru,c
 15181  003FF8                     	endif
 15182  003FF8                     	if	0	;tblptru may be non-zero
 15183  003FF8                     	endif
 15184  003FF8  0008               	tblrd		*
 15185  003FFA  50F5               	movf	tablat,w,c
 15186  003FFC  6E0D               	movwf	??_strncmp& (0+255),c
 15187  003FFE  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 15188  004000  1E0D               	comf	??_strncmp,f,c
 15189  004002  1E0E               	comf	??_strncmp+1,f,c
 15190  004004  4A0D               	infsnz	??_strncmp,f,c
 15191  004006  2A0E               	incf	??_strncmp+1,f,c
 15192  004008  C007  FFD9         	movff	strncmp@s1,fsr2l
 15193  00400C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 15194  004010  50DF               	movf	indf2,w,c
 15195  004012  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 15196  004014  500F               	movf	??_strncmp+2,w,c
 15197  004016  240D               	addwf	??_strncmp,w,c
 15198  004018  6E07               	movwf	?_strncmp,c
 15199  00401A  0E00               	movlw	0
 15200  00401C  200E               	addwfc	??_strncmp+1,w,c
 15201  00401E  6E08               	movwf	?_strncmp+1,c
 15202  004020  0012               	return	
 15203  004022                     i2l1822:
 15204  004022  4A07               	infsnz	strncmp@s1,f,c
 15205  004024  2A08               	incf	strncmp@s1+1,f,c
 15206  004026  4A09               	infsnz	strncmp@s2,f,c
 15207  004028  2A0A               	incf	strncmp@s2+1,f,c
 15208  00402A                     i2l1820:
 15209  00402A  060B               	decf	strncmp@len,f,c
 15210  00402C  A0D8               	btfss	status,0,c
 15211  00402E  060C               	decf	strncmp@len+1,f,c
 15212  004030  280B               	incf	strncmp@len,w,c
 15213  004032  E1C6               	bnz	i2l5519
 15214  004034  280C               	incf	strncmp@len+1,w,c
 15215  004036  A4D8               	btfss	status,2,c
 15216  004038  D7C3               	goto	i2l1821
 15217  00403A  0E00               	movlw	0
 15218  00403C  6E08               	movwf	?_strncmp+1,c
 15219  00403E  0E00               	movlw	0
 15220  004040  6E07               	movwf	?_strncmp,c
 15221  004042  0012               	return	
 15222  004044                     __end_of_strncmp:
 15223                           	opt stack 0
 15224                           pclatu	equ	0xFFB
 15225                           pclath	equ	0xFFA
 15226                           tblptru	equ	0xFF8
 15227                           tblptrh	equ	0xFF7
 15228                           tblptrl	equ	0xFF6
 15229                           tablat	equ	0xFF5
 15230                           prodh	equ	0xFF4
 15231                           prodl	equ	0xFF3
 15232                           intcon	equ	0xFF2
 15233                           intcon3	equ	0xFF0
 15234                           indf0	equ	0xFEF
 15235                           postinc0	equ	0xFEE
 15236                           fsr0h	equ	0xFEA
 15237                           fsr0l	equ	0xFE9
 15238                           wreg	equ	0xFE8
 15239                           postdec1	equ	0xFE5
 15240                           fsr1h	equ	0xFE2
 15241                           fsr1l	equ	0xFE1
 15242                           indf2	equ	0xFDF
 15243                           postinc2	equ	0xFDE
 15244                           postdec2	equ	0xFDD
 15245                           fsr2h	equ	0xFDA
 15246                           fsr2l	equ	0xFD9
 15247                           status	equ	0xFD8
 15248                           
 15249 ;; *************** function _strcpy *****************
 15250 ;; Defined at:
 15251 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  to              2    6[COMRAM] PTR unsigned char 
 15254 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 15255 ;;  from            2    8[COMRAM] PTR const unsigned char 
 15256 ;;		 -> STR_57(1), STR_55(1), STR_52(1), STR_49(2), 
 15257 ;;		 -> STR_48(2), STR_47(2), STR_46(2), current_set(5), 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;  cp              2   10[COMRAM] PTR unsigned char 
 15260 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  2    6[COMRAM] PTR unsigned char 
 15263 ;; Registers used:
 15264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;Total ram usage:        6 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_interruptHandler
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           	psect	text50
 15284  0044E6                     __ptext50:
 15285                           	opt stack 0
 15286  0044E6                     _strcpy:
 15287                           	opt stack 25
 15288                           
 15289                           ;incstack = 0
 15290  0044E6  C007  F00B         	movff	strcpy@to,strcpy@cp
 15291  0044EA  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 15292  0044EE  D004               	goto	i2l1814
 15293  0044F0  4A0B               	infsnz	strcpy@cp,f,c
 15294  0044F2  2A0C               	incf	strcpy@cp+1,f,c
 15295  0044F4  4A09               	infsnz	strcpy@from,f,c
 15296  0044F6  2A0A               	incf	strcpy@from+1,f,c
 15297  0044F8                     i2l1814:
 15298  0044F8  C009  FFF6         	movff	strcpy@from,tblptrl
 15299  0044FC  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 15300  004500  0E00               	movlw	low (__mediumconst shr (0+16))
 15301  004502  6EF8               	movwf	tblptru,c
 15302  004504  C00B  FFD9         	movff	strcpy@cp,fsr2l
 15303  004508  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 15304  00450C  0E0F               	movlw	(high __ramtop+-1)
 15305  00450E  64F7               	cpfsgt	tblptrh,c
 15306  004510  D003               	bra	i2u419_47
 15307  004512  0008               	tblrd		*
 15308  004514  50F5               	movf	tablat,w,c
 15309  004516  D005               	bra	i2u419_40
 15310  004518                     i2u419_47:
 15311  004518  CFF6 FFE9          	movff	tblptrl,fsr0l
 15312  00451C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15313  004520  50EF               	movf	indf0,w,c
 15314  004522                     i2u419_40:
 15315  004522  6EDF               	movwf	indf2,c
 15316  004524  50DF               	movf	indf2,w,c
 15317  004526  B4D8               	btfsc	status,2,c
 15318  004528  0012               	return	
 15319  00452A  D7E2               	goto	i2l1815
 15320  00452C                     __end_of_strcpy:
 15321                           	opt stack 0
 15322                           pclatu	equ	0xFFB
 15323                           pclath	equ	0xFFA
 15324                           tblptru	equ	0xFF8
 15325                           tblptrh	equ	0xFF7
 15326                           tblptrl	equ	0xFF6
 15327                           tablat	equ	0xFF5
 15328                           prodh	equ	0xFF4
 15329                           prodl	equ	0xFF3
 15330                           intcon	equ	0xFF2
 15331                           intcon3	equ	0xFF0
 15332                           indf0	equ	0xFEF
 15333                           postinc0	equ	0xFEE
 15334                           fsr0h	equ	0xFEA
 15335                           fsr0l	equ	0xFE9
 15336                           wreg	equ	0xFE8
 15337                           postdec1	equ	0xFE5
 15338                           fsr1h	equ	0xFE2
 15339                           fsr1l	equ	0xFE1
 15340                           indf2	equ	0xFDF
 15341                           postinc2	equ	0xFDE
 15342                           postdec2	equ	0xFDD
 15343                           fsr2h	equ	0xFDA
 15344                           fsr2l	equ	0xFD9
 15345                           status	equ	0xFD8
 15346                           
 15347 ;; *************** function _strcat *****************
 15348 ;; Defined at:
 15349 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 15350 ;; Parameters:    Size  Location     Type
 15351 ;;  to              2    0[COMRAM] PTR unsigned char 
 15352 ;;		 -> current_set(5), 
 15353 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15354 ;;		 -> temp_set(5), 
 15355 ;; Auto vars:     Size  Location     Type
 15356 ;;  cp              2    4[COMRAM] PTR unsigned char 
 15357 ;;		 -> current_set(5), 
 15358 ;; Return value:  Size  Location     Type
 15359 ;;                  2    0[COMRAM] PTR unsigned char 
 15360 ;; Registers used:
 15361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15362 ;; Tracked objects:
 15363 ;;		On entry : 0/0
 15364 ;;		On exit  : 0/0
 15365 ;;		Unchanged: 0/0
 15366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15370 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15371 ;;Total ram usage:        6 bytes
 15372 ;; Hardware stack levels used:    1
 15373 ;; This function calls:
 15374 ;;		Nothing
 15375 ;; This function is called by:
 15376 ;;		_interruptHandler
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           	psect	text51
 15381  0045B2                     __ptext51:
 15382                           	opt stack 0
 15383  0045B2                     _strcat:
 15384                           	opt stack 25
 15385                           
 15386                           ;incstack = 0
 15387  0045B2  C001  F005         	movff	strcat@to,strcat@cp
 15388  0045B6  C002  F006         	movff	strcat@to+1,strcat@cp+1
 15389  0045BA  D002               	goto	i2l1797
 15390  0045BC  4A05               	infsnz	strcat@cp,f,c
 15391  0045BE  2A06               	incf	strcat@cp+1,f,c
 15392  0045C0                     i2l1797:
 15393  0045C0  C005  FFD9         	movff	strcat@cp,fsr2l
 15394  0045C4  C006  FFDA         	movff	strcat@cp+1,fsr2h
 15395  0045C8  50DF               	movf	indf2,w,c
 15396  0045CA  B4D8               	btfsc	status,2,c
 15397  0045CC  D005               	goto	i2l1800
 15398  0045CE  D7F6               	goto	i2l1798
 15399  0045D0  4A05               	infsnz	strcat@cp,f,c
 15400  0045D2  2A06               	incf	strcat@cp+1,f,c
 15401  0045D4  4A03               	infsnz	strcat@from,f,c
 15402  0045D6  2A04               	incf	strcat@from+1,f,c
 15403  0045D8                     i2l1800:
 15404  0045D8  C003  FFD9         	movff	strcat@from,fsr2l
 15405  0045DC  C004  FFDA         	movff	strcat@from+1,fsr2h
 15406  0045E0  C005  FFE1         	movff	strcat@cp,fsr1l
 15407  0045E4  C006  FFE2         	movff	strcat@cp+1,fsr1h
 15408  0045E8  CFDF FFE7          	movff	indf2,indf1
 15409  0045EC  50E7               	movf	indf1,w,c
 15410  0045EE  B4D8               	btfsc	status,2,c
 15411  0045F0  0012               	return	
 15412  0045F2  D7EE               	goto	i2l1801
 15413  0045F4                     __end_of_strcat:
 15414                           	opt stack 0
 15415                           pclatu	equ	0xFFB
 15416                           pclath	equ	0xFFA
 15417                           tblptru	equ	0xFF8
 15418                           tblptrh	equ	0xFF7
 15419                           tblptrl	equ	0xFF6
 15420                           tablat	equ	0xFF5
 15421                           prodh	equ	0xFF4
 15422                           prodl	equ	0xFF3
 15423                           intcon	equ	0xFF2
 15424                           intcon3	equ	0xFF0
 15425                           indf0	equ	0xFEF
 15426                           postinc0	equ	0xFEE
 15427                           fsr0h	equ	0xFEA
 15428                           fsr0l	equ	0xFE9
 15429                           wreg	equ	0xFE8
 15430                           indf1	equ	0xFE7
 15431                           postdec1	equ	0xFE5
 15432                           fsr1h	equ	0xFE2
 15433                           fsr1l	equ	0xFE1
 15434                           indf2	equ	0xFDF
 15435                           postinc2	equ	0xFDE
 15436                           postdec2	equ	0xFDD
 15437                           fsr2h	equ	0xFDA
 15438                           fsr2l	equ	0xFD9
 15439                           status	equ	0xFD8
 15440                           
 15441 ;; *************** function _is_valid *****************
 15442 ;; Defined at:
 15443 ;;		line 12 in file "keypad.c"
 15444 ;; Parameters:    Size  Location     Type
 15445 ;;		None
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;		None
 15448 ;; Return value:  Size  Location     Type
 15449 ;;                  2  153[None  ] int 
 15450 ;; Registers used:
 15451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15461 ;;Total ram usage:        2 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    1
 15464 ;; This function calls:
 15465 ;;		_strcmp
 15466 ;;		i2___wmul
 15467 ;; This function is called by:
 15468 ;;		_interruptHandler
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           	psect	text52
 15473  000FE2                     __ptext52:
 15474                           	opt stack 0
 15475  000FE2                     _is_valid:
 15476                           	opt stack 24
 15477                           
 15478                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 15479                           
 15480                           ;incstack = 0
 15481  000FE2  0E70               	movlw	low _current_set2
 15482  000FE4  6E01               	movwf	strcmp@s1,c
 15483  000FE6  0E00               	movlw	high _current_set2
 15484  000FE8  6E02               	movwf	strcmp@s1+1,c
 15485  000FEA  0EFD               	movlw	low STR_46
 15486  000FEC  6E03               	movwf	strcmp@s2,c
 15487  000FEE  0EFF               	movlw	high STR_46
 15488  000FF0  6E04               	movwf	strcmp@s2+1,c
 15489  000FF2  EC4E  F022         	call	_strcmp	;wreg free
 15490  000FF6  5001               	movf	?_strcmp,w,c
 15491  000FF8  1002               	iorwf	?_strcmp+1,w,c
 15492  000FFA  A4D8               	btfss	status,2,c
 15493  000FFC  D023               	goto	i2l985
 15494                           
 15495                           ;keypad.c: 17: B=1*number;
 15496  000FFE  C075  F058         	movff	_number,_B
 15497  001002  C076  F059         	movff	_number+1,_B+1
 15498                           
 15499                           ;keypad.c: 18: total_number = 1*number;
 15500  001006  C075  F05A         	movff	_number,_total_number
 15501  00100A  C076  F05B         	movff	_number+1,_total_number+1
 15502                           
 15503                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 15504  00100E  90D8               	bcf	status,0,c
 15505  001010  345E               	rlcf	_counter_step,w,c
 15506  001012  6ED9               	movwf	fsr2l,c
 15507  001014  345F               	rlcf	_counter_step+1,w,c
 15508  001016  6EDA               	movwf	fsr2h,c
 15509  001018  0E42               	movlw	low _compartment_number
 15510  00101A  26D9               	addwf	fsr2l,f,c
 15511  00101C  0E00               	movlw	high _compartment_number
 15512  00101E  22DA               	addwfc	fsr2h,f,c
 15513  001020  CFDE F007          	movff	postinc2,??_is_valid
 15514  001024  CFDD F008          	movff	postdec2,??_is_valid+1
 15515  001028  90D8               	bcf	status,0,c
 15516  00102A  3607               	rlcf	??_is_valid,f,c
 15517  00102C  3608               	rlcf	??_is_valid+1,f,c
 15518  00102E  0E30               	movlw	low _B_array
 15519  001030  2407               	addwf	??_is_valid,w,c
 15520  001032  6ED9               	movwf	fsr2l,c
 15521  001034  0E01               	movlw	high _B_array
 15522  001036  2008               	addwfc	??_is_valid+1,w,c
 15523  001038  6EDA               	movwf	fsr2h,c
 15524  00103A  C058  FFDE         	movff	_B,postinc2
 15525  00103E  C059  FFDD         	movff	_B+1,postdec2
 15526                           
 15527                           ;keypad.c: 22: }
 15528  001042  0012               	return	
 15529  001044                     i2l985:
 15530                           
 15531                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 15532  001044  0E70               	movlw	low _current_set2
 15533  001046  6E01               	movwf	strcmp@s1,c
 15534  001048  0E00               	movlw	high _current_set2
 15535  00104A  6E02               	movwf	strcmp@s1+1,c
 15536  00104C  0EEA               	movlw	low (STR_85+2)
 15537  00104E  6E03               	movwf	strcmp@s2,c
 15538  001050  0EFF               	movlw	high (STR_85+2)
 15539  001052  6E04               	movwf	strcmp@s2+1,c
 15540  001054  EC4E  F022         	call	_strcmp	;wreg free
 15541  001058  5001               	movf	?_strcmp,w,c
 15542  00105A  1002               	iorwf	?_strcmp+1,w,c
 15543  00105C  A4D8               	btfss	status,2,c
 15544  00105E  D023               	goto	i2l987
 15545                           
 15546                           ;keypad.c: 25: N=1*number;
 15547  001060  C075  F056         	movff	_number,_N
 15548  001064  C076  F057         	movff	_number+1,_N+1
 15549                           
 15550                           ;keypad.c: 26: total_number = 1*number;
 15551  001068  C075  F05A         	movff	_number,_total_number
 15552  00106C  C076  F05B         	movff	_number+1,_total_number+1
 15553                           
 15554                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 15555  001070  90D8               	bcf	status,0,c
 15556  001072  345E               	rlcf	_counter_step,w,c
 15557  001074  6ED9               	movwf	fsr2l,c
 15558  001076  345F               	rlcf	_counter_step+1,w,c
 15559  001078  6EDA               	movwf	fsr2h,c
 15560  00107A  0E42               	movlw	low _compartment_number
 15561  00107C  26D9               	addwf	fsr2l,f,c
 15562  00107E  0E00               	movlw	high _compartment_number
 15563  001080  22DA               	addwfc	fsr2h,f,c
 15564  001082  CFDE F007          	movff	postinc2,??_is_valid
 15565  001086  CFDD F008          	movff	postdec2,??_is_valid+1
 15566  00108A  90D8               	bcf	status,0,c
 15567  00108C  3607               	rlcf	??_is_valid,f,c
 15568  00108E  3608               	rlcf	??_is_valid+1,f,c
 15569  001090  0E10               	movlw	low _N_array
 15570  001092  2407               	addwf	??_is_valid,w,c
 15571  001094  6ED9               	movwf	fsr2l,c
 15572  001096  0E01               	movlw	high _N_array
 15573  001098  2008               	addwfc	??_is_valid+1,w,c
 15574  00109A  6EDA               	movwf	fsr2h,c
 15575  00109C  C056  FFDE         	movff	_N,postinc2
 15576  0010A0  C057  FFDD         	movff	_N+1,postdec2
 15577                           
 15578                           ;keypad.c: 28: }
 15579  0010A4  0012               	return	
 15580  0010A6                     i2l987:
 15581                           
 15582                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 15583  0010A6  0E70               	movlw	low _current_set2
 15584  0010A8  6E01               	movwf	strcmp@s1,c
 15585  0010AA  0E00               	movlw	high _current_set2
 15586  0010AC  6E02               	movwf	strcmp@s1+1,c
 15587  0010AE  0EEE               	movlw	low (STR_86+2)
 15588  0010B0  6E03               	movwf	strcmp@s2,c
 15589  0010B2  0EFF               	movlw	high (STR_86+2)
 15590  0010B4  6E04               	movwf	strcmp@s2+1,c
 15591  0010B6  EC4E  F022         	call	_strcmp	;wreg free
 15592  0010BA  5001               	movf	?_strcmp,w,c
 15593  0010BC  1002               	iorwf	?_strcmp+1,w,c
 15594  0010BE  A4D8               	btfss	status,2,c
 15595  0010C0  D023               	goto	i2l989
 15596                           
 15597                           ;keypad.c: 30: S=1*number;
 15598  0010C2  C075  F054         	movff	_number,_S
 15599  0010C6  C076  F055         	movff	_number+1,_S+1
 15600                           
 15601                           ;keypad.c: 31: total_number = 1*number;
 15602  0010CA  C075  F05A         	movff	_number,_total_number
 15603  0010CE  C076  F05B         	movff	_number+1,_total_number+1
 15604                           
 15605                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 15606  0010D2  90D8               	bcf	status,0,c
 15607  0010D4  345E               	rlcf	_counter_step,w,c
 15608  0010D6  6ED9               	movwf	fsr2l,c
 15609  0010D8  345F               	rlcf	_counter_step+1,w,c
 15610  0010DA  6EDA               	movwf	fsr2h,c
 15611  0010DC  0E42               	movlw	low _compartment_number
 15612  0010DE  26D9               	addwf	fsr2l,f,c
 15613  0010E0  0E00               	movlw	high _compartment_number
 15614  0010E2  22DA               	addwfc	fsr2h,f,c
 15615  0010E4  CFDE F007          	movff	postinc2,??_is_valid
 15616  0010E8  CFDD F008          	movff	postdec2,??_is_valid+1
 15617  0010EC  90D8               	bcf	status,0,c
 15618  0010EE  3607               	rlcf	??_is_valid,f,c
 15619  0010F0  3608               	rlcf	??_is_valid+1,f,c
 15620  0010F2  0E20               	movlw	low _S_array
 15621  0010F4  2407               	addwf	??_is_valid,w,c
 15622  0010F6  6ED9               	movwf	fsr2l,c
 15623  0010F8  0E01               	movlw	high _S_array
 15624  0010FA  2008               	addwfc	??_is_valid+1,w,c
 15625  0010FC  6EDA               	movwf	fsr2h,c
 15626  0010FE  C054  FFDE         	movff	_S,postinc2
 15627  001102  C055  FFDD         	movff	_S+1,postdec2
 15628                           
 15629                           ;keypad.c: 33: }
 15630  001106  0012               	return	
 15631  001108                     i2l989:
 15632                           
 15633                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 15634  001108  0E70               	movlw	low _current_set2
 15635  00110A  6E01               	movwf	strcmp@s1,c
 15636  00110C  0E00               	movlw	high _current_set2
 15637  00110E  6E02               	movwf	strcmp@s1+1,c
 15638  001110  0EF2               	movlw	low (STR_87+2)
 15639  001112  6E03               	movwf	strcmp@s2,c
 15640  001114  0EFF               	movlw	high (STR_87+2)
 15641  001116  6E04               	movwf	strcmp@s2+1,c
 15642  001118  EC4E  F022         	call	_strcmp	;wreg free
 15643  00111C  5001               	movf	?_strcmp,w,c
 15644  00111E  1002               	iorwf	?_strcmp+1,w,c
 15645  001120  A4D8               	btfss	status,2,c
 15646  001122  D023               	goto	i2l991
 15647                           
 15648                           ;keypad.c: 35: W=1*number;
 15649  001124  C075  F052         	movff	_number,_W
 15650  001128  C076  F053         	movff	_number+1,_W+1
 15651                           
 15652                           ;keypad.c: 36: total_number = 1*number;
 15653  00112C  C075  F05A         	movff	_number,_total_number
 15654  001130  C076  F05B         	movff	_number+1,_total_number+1
 15655                           
 15656                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 15657  001134  90D8               	bcf	status,0,c
 15658  001136  345E               	rlcf	_counter_step,w,c
 15659  001138  6ED9               	movwf	fsr2l,c
 15660  00113A  345F               	rlcf	_counter_step+1,w,c
 15661  00113C  6EDA               	movwf	fsr2h,c
 15662  00113E  0E42               	movlw	low _compartment_number
 15663  001140  26D9               	addwf	fsr2l,f,c
 15664  001142  0E00               	movlw	high _compartment_number
 15665  001144  22DA               	addwfc	fsr2h,f,c
 15666  001146  CFDE F007          	movff	postinc2,??_is_valid
 15667  00114A  CFDD F008          	movff	postdec2,??_is_valid+1
 15668  00114E  90D8               	bcf	status,0,c
 15669  001150  3607               	rlcf	??_is_valid,f,c
 15670  001152  3608               	rlcf	??_is_valid+1,f,c
 15671  001154  0E00               	movlw	low _W_array
 15672  001156  2407               	addwf	??_is_valid,w,c
 15673  001158  6ED9               	movwf	fsr2l,c
 15674  00115A  0E01               	movlw	high _W_array
 15675  00115C  2008               	addwfc	??_is_valid+1,w,c
 15676  00115E  6EDA               	movwf	fsr2h,c
 15677  001160  C052  FFDE         	movff	_W,postinc2
 15678  001164  C053  FFDD         	movff	_W+1,postdec2
 15679                           
 15680                           ;keypad.c: 38: }
 15681  001168  0012               	return	
 15682  00116A                     i2l991:
 15683                           
 15684                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 15685  00116A  0E70               	movlw	low _current_set2
 15686  00116C  6E01               	movwf	strcmp@s1,c
 15687  00116E  0E00               	movlw	high _current_set2
 15688  001170  6E02               	movwf	strcmp@s1+1,c
 15689  001172  0EE9               	movlw	low (STR_85+1)
 15690  001174  6E03               	movwf	strcmp@s2,c
 15691  001176  0EFF               	movlw	high (STR_85+1)
 15692  001178  6E04               	movwf	strcmp@s2+1,c
 15693  00117A  EC4E  F022         	call	_strcmp	;wreg free
 15694  00117E  5001               	movf	?_strcmp,w,c
 15695  001180  1002               	iorwf	?_strcmp+1,w,c
 15696  001182  A4D8               	btfss	status,2,c
 15697  001184  D042               	goto	i2l993
 15698                           
 15699                           ;keypad.c: 40: B = 1*number;
 15700  001186  C075  F058         	movff	_number,_B
 15701  00118A  C076  F059         	movff	_number+1,_B+1
 15702                           
 15703                           ;keypad.c: 42: N = 1*number;
 15704  00118E  C075  F056         	movff	_number,_N
 15705  001192  C076  F057         	movff	_number+1,_N+1
 15706                           
 15707                           ;keypad.c: 43: total_number = 2*number;
 15708  001196  90D8               	bcf	status,0,c
 15709  001198  3475               	rlcf	_number,w,c
 15710  00119A  6E5A               	movwf	_total_number,c
 15711  00119C  3476               	rlcf	_number+1,w,c
 15712  00119E  6E5B               	movwf	_total_number+1,c
 15713                           
 15714                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 15715  0011A0  90D8               	bcf	status,0,c
 15716  0011A2  345E               	rlcf	_counter_step,w,c
 15717  0011A4  6ED9               	movwf	fsr2l,c
 15718  0011A6  345F               	rlcf	_counter_step+1,w,c
 15719  0011A8  6EDA               	movwf	fsr2h,c
 15720  0011AA  0E42               	movlw	low _compartment_number
 15721  0011AC  26D9               	addwf	fsr2l,f,c
 15722  0011AE  0E00               	movlw	high _compartment_number
 15723  0011B0  22DA               	addwfc	fsr2h,f,c
 15724  0011B2  CFDE F007          	movff	postinc2,??_is_valid
 15725  0011B6  CFDD F008          	movff	postdec2,??_is_valid+1
 15726  0011BA  90D8               	bcf	status,0,c
 15727  0011BC  3607               	rlcf	??_is_valid,f,c
 15728  0011BE  3608               	rlcf	??_is_valid+1,f,c
 15729  0011C0  0E30               	movlw	low _B_array
 15730  0011C2  2407               	addwf	??_is_valid,w,c
 15731  0011C4  6ED9               	movwf	fsr2l,c
 15732  0011C6  0E01               	movlw	high _B_array
 15733  0011C8  2008               	addwfc	??_is_valid+1,w,c
 15734  0011CA  6EDA               	movwf	fsr2h,c
 15735  0011CC  C058  FFDE         	movff	_B,postinc2
 15736  0011D0  C059  FFDD         	movff	_B+1,postdec2
 15737                           
 15738                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 15739  0011D4  90D8               	bcf	status,0,c
 15740  0011D6  345E               	rlcf	_counter_step,w,c
 15741  0011D8  6ED9               	movwf	fsr2l,c
 15742  0011DA  345F               	rlcf	_counter_step+1,w,c
 15743  0011DC  6EDA               	movwf	fsr2h,c
 15744  0011DE  0E42               	movlw	low _compartment_number
 15745  0011E0  26D9               	addwf	fsr2l,f,c
 15746  0011E2  0E00               	movlw	high _compartment_number
 15747  0011E4  22DA               	addwfc	fsr2h,f,c
 15748  0011E6  CFDE F007          	movff	postinc2,??_is_valid
 15749  0011EA  CFDD F008          	movff	postdec2,??_is_valid+1
 15750  0011EE  90D8               	bcf	status,0,c
 15751  0011F0  3607               	rlcf	??_is_valid,f,c
 15752  0011F2  3608               	rlcf	??_is_valid+1,f,c
 15753  0011F4  0E10               	movlw	low _N_array
 15754  0011F6  2407               	addwf	??_is_valid,w,c
 15755  0011F8  6ED9               	movwf	fsr2l,c
 15756  0011FA  0E01               	movlw	high _N_array
 15757  0011FC  2008               	addwfc	??_is_valid+1,w,c
 15758  0011FE  6EDA               	movwf	fsr2h,c
 15759  001200  C056  FFDE         	movff	_N,postinc2
 15760  001204  C057  FFDD         	movff	_N+1,postdec2
 15761                           
 15762                           ;keypad.c: 47: }
 15763  001208  0012               	return	
 15764  00120A                     i2l993:
 15765                           
 15766                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 15767  00120A  0E70               	movlw	low _current_set2
 15768  00120C  6E01               	movwf	strcmp@s1,c
 15769  00120E  0E00               	movlw	high _current_set2
 15770  001210  6E02               	movwf	strcmp@s1+1,c
 15771  001212  0EED               	movlw	low (STR_86+1)
 15772  001214  6E03               	movwf	strcmp@s2,c
 15773  001216  0EFF               	movlw	high (STR_86+1)
 15774  001218  6E04               	movwf	strcmp@s2+1,c
 15775  00121A  EC4E  F022         	call	_strcmp	;wreg free
 15776  00121E  5001               	movf	?_strcmp,w,c
 15777  001220  1002               	iorwf	?_strcmp+1,w,c
 15778  001222  A4D8               	btfss	status,2,c
 15779  001224  D042               	goto	i2l995
 15780                           
 15781                           ;keypad.c: 49: B = 1*number;
 15782  001226  C075  F058         	movff	_number,_B
 15783  00122A  C076  F059         	movff	_number+1,_B+1
 15784                           
 15785                           ;keypad.c: 51: S = 1*number;
 15786  00122E  C075  F054         	movff	_number,_S
 15787  001232  C076  F055         	movff	_number+1,_S+1
 15788                           
 15789                           ;keypad.c: 52: total_number = 2*number;
 15790  001236  90D8               	bcf	status,0,c
 15791  001238  3475               	rlcf	_number,w,c
 15792  00123A  6E5A               	movwf	_total_number,c
 15793  00123C  3476               	rlcf	_number+1,w,c
 15794  00123E  6E5B               	movwf	_total_number+1,c
 15795                           
 15796                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 15797  001240  90D8               	bcf	status,0,c
 15798  001242  345E               	rlcf	_counter_step,w,c
 15799  001244  6ED9               	movwf	fsr2l,c
 15800  001246  345F               	rlcf	_counter_step+1,w,c
 15801  001248  6EDA               	movwf	fsr2h,c
 15802  00124A  0E42               	movlw	low _compartment_number
 15803  00124C  26D9               	addwf	fsr2l,f,c
 15804  00124E  0E00               	movlw	high _compartment_number
 15805  001250  22DA               	addwfc	fsr2h,f,c
 15806  001252  CFDE F007          	movff	postinc2,??_is_valid
 15807  001256  CFDD F008          	movff	postdec2,??_is_valid+1
 15808  00125A  90D8               	bcf	status,0,c
 15809  00125C  3607               	rlcf	??_is_valid,f,c
 15810  00125E  3608               	rlcf	??_is_valid+1,f,c
 15811  001260  0E30               	movlw	low _B_array
 15812  001262  2407               	addwf	??_is_valid,w,c
 15813  001264  6ED9               	movwf	fsr2l,c
 15814  001266  0E01               	movlw	high _B_array
 15815  001268  2008               	addwfc	??_is_valid+1,w,c
 15816  00126A  6EDA               	movwf	fsr2h,c
 15817  00126C  C058  FFDE         	movff	_B,postinc2
 15818  001270  C059  FFDD         	movff	_B+1,postdec2
 15819                           
 15820                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 15821  001274  90D8               	bcf	status,0,c
 15822  001276  345E               	rlcf	_counter_step,w,c
 15823  001278  6ED9               	movwf	fsr2l,c
 15824  00127A  345F               	rlcf	_counter_step+1,w,c
 15825  00127C  6EDA               	movwf	fsr2h,c
 15826  00127E  0E42               	movlw	low _compartment_number
 15827  001280  26D9               	addwf	fsr2l,f,c
 15828  001282  0E00               	movlw	high _compartment_number
 15829  001284  22DA               	addwfc	fsr2h,f,c
 15830  001286  CFDE F007          	movff	postinc2,??_is_valid
 15831  00128A  CFDD F008          	movff	postdec2,??_is_valid+1
 15832  00128E  90D8               	bcf	status,0,c
 15833  001290  3607               	rlcf	??_is_valid,f,c
 15834  001292  3608               	rlcf	??_is_valid+1,f,c
 15835  001294  0E20               	movlw	low _S_array
 15836  001296  2407               	addwf	??_is_valid,w,c
 15837  001298  6ED9               	movwf	fsr2l,c
 15838  00129A  0E01               	movlw	high _S_array
 15839  00129C  2008               	addwfc	??_is_valid+1,w,c
 15840  00129E  6EDA               	movwf	fsr2h,c
 15841  0012A0  C054  FFDE         	movff	_S,postinc2
 15842  0012A4  C055  FFDD         	movff	_S+1,postdec2
 15843                           
 15844                           ;keypad.c: 57: }
 15845  0012A8  0012               	return	
 15846  0012AA                     i2l995:
 15847                           
 15848                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 15849  0012AA  0E70               	movlw	low _current_set2
 15850  0012AC  6E01               	movwf	strcmp@s1,c
 15851  0012AE  0E00               	movlw	high _current_set2
 15852  0012B0  6E02               	movwf	strcmp@s1+1,c
 15853  0012B2  0EF1               	movlw	low (STR_87+1)
 15854  0012B4  6E03               	movwf	strcmp@s2,c
 15855  0012B6  0EFF               	movlw	high (STR_87+1)
 15856  0012B8  6E04               	movwf	strcmp@s2+1,c
 15857  0012BA  EC4E  F022         	call	_strcmp	;wreg free
 15858  0012BE  5001               	movf	?_strcmp,w,c
 15859  0012C0  1002               	iorwf	?_strcmp+1,w,c
 15860  0012C2  A4D8               	btfss	status,2,c
 15861  0012C4  D042               	goto	i2l997
 15862                           
 15863                           ;keypad.c: 60: B = 1*number;
 15864  0012C6  C075  F058         	movff	_number,_B
 15865  0012CA  C076  F059         	movff	_number+1,_B+1
 15866                           
 15867                           ;keypad.c: 62: W = 1*number;
 15868  0012CE  C075  F052         	movff	_number,_W
 15869  0012D2  C076  F053         	movff	_number+1,_W+1
 15870                           
 15871                           ;keypad.c: 63: total_number = 2*number;
 15872  0012D6  90D8               	bcf	status,0,c
 15873  0012D8  3475               	rlcf	_number,w,c
 15874  0012DA  6E5A               	movwf	_total_number,c
 15875  0012DC  3476               	rlcf	_number+1,w,c
 15876  0012DE  6E5B               	movwf	_total_number+1,c
 15877                           
 15878                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 15879  0012E0  90D8               	bcf	status,0,c
 15880  0012E2  345E               	rlcf	_counter_step,w,c
 15881  0012E4  6ED9               	movwf	fsr2l,c
 15882  0012E6  345F               	rlcf	_counter_step+1,w,c
 15883  0012E8  6EDA               	movwf	fsr2h,c
 15884  0012EA  0E42               	movlw	low _compartment_number
 15885  0012EC  26D9               	addwf	fsr2l,f,c
 15886  0012EE  0E00               	movlw	high _compartment_number
 15887  0012F0  22DA               	addwfc	fsr2h,f,c
 15888  0012F2  CFDE F007          	movff	postinc2,??_is_valid
 15889  0012F6  CFDD F008          	movff	postdec2,??_is_valid+1
 15890  0012FA  90D8               	bcf	status,0,c
 15891  0012FC  3607               	rlcf	??_is_valid,f,c
 15892  0012FE  3608               	rlcf	??_is_valid+1,f,c
 15893  001300  0E30               	movlw	low _B_array
 15894  001302  2407               	addwf	??_is_valid,w,c
 15895  001304  6ED9               	movwf	fsr2l,c
 15896  001306  0E01               	movlw	high _B_array
 15897  001308  2008               	addwfc	??_is_valid+1,w,c
 15898  00130A  6EDA               	movwf	fsr2h,c
 15899  00130C  C058  FFDE         	movff	_B,postinc2
 15900  001310  C059  FFDD         	movff	_B+1,postdec2
 15901                           
 15902                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 15903  001314  90D8               	bcf	status,0,c
 15904  001316  345E               	rlcf	_counter_step,w,c
 15905  001318  6ED9               	movwf	fsr2l,c
 15906  00131A  345F               	rlcf	_counter_step+1,w,c
 15907  00131C  6EDA               	movwf	fsr2h,c
 15908  00131E  0E42               	movlw	low _compartment_number
 15909  001320  26D9               	addwf	fsr2l,f,c
 15910  001322  0E00               	movlw	high _compartment_number
 15911  001324  22DA               	addwfc	fsr2h,f,c
 15912  001326  CFDE F007          	movff	postinc2,??_is_valid
 15913  00132A  CFDD F008          	movff	postdec2,??_is_valid+1
 15914  00132E  90D8               	bcf	status,0,c
 15915  001330  3607               	rlcf	??_is_valid,f,c
 15916  001332  3608               	rlcf	??_is_valid+1,f,c
 15917  001334  0E00               	movlw	low _W_array
 15918  001336  2407               	addwf	??_is_valid,w,c
 15919  001338  6ED9               	movwf	fsr2l,c
 15920  00133A  0E01               	movlw	high _W_array
 15921  00133C  2008               	addwfc	??_is_valid+1,w,c
 15922  00133E  6EDA               	movwf	fsr2h,c
 15923  001340  C052  FFDE         	movff	_W,postinc2
 15924  001344  C053  FFDD         	movff	_W+1,postdec2
 15925                           
 15926                           ;keypad.c: 67: }
 15927  001348  0012               	return	
 15928  00134A                     i2l997:
 15929                           
 15930                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 15931  00134A  0E70               	movlw	low _current_set2
 15932  00134C  6E01               	movwf	strcmp@s1,c
 15933  00134E  0E00               	movlw	high _current_set2
 15934  001350  6E02               	movwf	strcmp@s1+1,c
 15935  001352  0EE8               	movlw	low STR_85
 15936  001354  6E03               	movwf	strcmp@s2,c
 15937  001356  0EFF               	movlw	high STR_85
 15938  001358  6E04               	movwf	strcmp@s2+1,c
 15939  00135A  EC4E  F022         	call	_strcmp	;wreg free
 15940  00135E  5001               	movf	?_strcmp,w,c
 15941  001360  1002               	iorwf	?_strcmp+1,w,c
 15942  001362  A4D8               	btfss	status,2,c
 15943  001364  D04C               	goto	i2l999
 15944                           
 15945                           ;keypad.c: 69: B = 2*number;
 15946  001366  90D8               	bcf	status,0,c
 15947  001368  3475               	rlcf	_number,w,c
 15948  00136A  6E58               	movwf	_B,c
 15949  00136C  3476               	rlcf	_number+1,w,c
 15950  00136E  6E59               	movwf	_B+1,c
 15951                           
 15952                           ;keypad.c: 71: N = 1*number;
 15953  001370  C075  F056         	movff	_number,_N
 15954  001374  C076  F057         	movff	_number+1,_N+1
 15955                           
 15956                           ;keypad.c: 72: total_number = 3*number;
 15957  001378  C075  F001         	movff	_number,i2___wmul@multiplier
 15958  00137C  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 15959  001380  0E00               	movlw	0
 15960  001382  6E04               	movwf	i2___wmul@multiplicand+1,c
 15961  001384  0E03               	movlw	3
 15962  001386  6E03               	movwf	i2___wmul@multiplicand,c
 15963  001388  EC4E  F023         	call	i2___wmul	;wreg free
 15964  00138C  C001  F05A         	movff	?i2___wmul,_total_number
 15965  001390  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 15966                           
 15967                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 15968  001394  90D8               	bcf	status,0,c
 15969  001396  345E               	rlcf	_counter_step,w,c
 15970  001398  6ED9               	movwf	fsr2l,c
 15971  00139A  345F               	rlcf	_counter_step+1,w,c
 15972  00139C  6EDA               	movwf	fsr2h,c
 15973  00139E  0E42               	movlw	low _compartment_number
 15974  0013A0  26D9               	addwf	fsr2l,f,c
 15975  0013A2  0E00               	movlw	high _compartment_number
 15976  0013A4  22DA               	addwfc	fsr2h,f,c
 15977  0013A6  CFDE F007          	movff	postinc2,??_is_valid
 15978  0013AA  CFDD F008          	movff	postdec2,??_is_valid+1
 15979  0013AE  90D8               	bcf	status,0,c
 15980  0013B0  3607               	rlcf	??_is_valid,f,c
 15981  0013B2  3608               	rlcf	??_is_valid+1,f,c
 15982  0013B4  0E30               	movlw	low _B_array
 15983  0013B6  2407               	addwf	??_is_valid,w,c
 15984  0013B8  6ED9               	movwf	fsr2l,c
 15985  0013BA  0E01               	movlw	high _B_array
 15986  0013BC  2008               	addwfc	??_is_valid+1,w,c
 15987  0013BE  6EDA               	movwf	fsr2h,c
 15988  0013C0  C058  FFDE         	movff	_B,postinc2
 15989  0013C4  C059  FFDD         	movff	_B+1,postdec2
 15990                           
 15991                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 15992  0013C8  90D8               	bcf	status,0,c
 15993  0013CA  345E               	rlcf	_counter_step,w,c
 15994  0013CC  6ED9               	movwf	fsr2l,c
 15995  0013CE  345F               	rlcf	_counter_step+1,w,c
 15996  0013D0  6EDA               	movwf	fsr2h,c
 15997  0013D2  0E42               	movlw	low _compartment_number
 15998  0013D4  26D9               	addwf	fsr2l,f,c
 15999  0013D6  0E00               	movlw	high _compartment_number
 16000  0013D8  22DA               	addwfc	fsr2h,f,c
 16001  0013DA  CFDE F007          	movff	postinc2,??_is_valid
 16002  0013DE  CFDD F008          	movff	postdec2,??_is_valid+1
 16003  0013E2  90D8               	bcf	status,0,c
 16004  0013E4  3607               	rlcf	??_is_valid,f,c
 16005  0013E6  3608               	rlcf	??_is_valid+1,f,c
 16006  0013E8  0E10               	movlw	low _N_array
 16007  0013EA  2407               	addwf	??_is_valid,w,c
 16008  0013EC  6ED9               	movwf	fsr2l,c
 16009  0013EE  0E01               	movlw	high _N_array
 16010  0013F0  2008               	addwfc	??_is_valid+1,w,c
 16011  0013F2  6EDA               	movwf	fsr2h,c
 16012  0013F4  C056  FFDE         	movff	_N,postinc2
 16013  0013F8  C057  FFDD         	movff	_N+1,postdec2
 16014                           
 16015                           ;keypad.c: 76: }
 16016  0013FC  0012               	return	
 16017  0013FE                     i2l999:
 16018                           
 16019                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 16020  0013FE  0E70               	movlw	low _current_set2
 16021  001400  6E01               	movwf	strcmp@s1,c
 16022  001402  0E00               	movlw	high _current_set2
 16023  001404  6E02               	movwf	strcmp@s1+1,c
 16024  001406  0EEC               	movlw	low STR_86
 16025  001408  6E03               	movwf	strcmp@s2,c
 16026  00140A  0EFF               	movlw	high STR_86
 16027  00140C  6E04               	movwf	strcmp@s2+1,c
 16028  00140E  EC4E  F022         	call	_strcmp	;wreg free
 16029  001412  5001               	movf	?_strcmp,w,c
 16030  001414  1002               	iorwf	?_strcmp+1,w,c
 16031  001416  A4D8               	btfss	status,2,c
 16032  001418  D04C               	goto	i2l1001
 16033                           
 16034                           ;keypad.c: 78: B = 2*number;
 16035  00141A  90D8               	bcf	status,0,c
 16036  00141C  3475               	rlcf	_number,w,c
 16037  00141E  6E58               	movwf	_B,c
 16038  001420  3476               	rlcf	_number+1,w,c
 16039  001422  6E59               	movwf	_B+1,c
 16040                           
 16041                           ;keypad.c: 80: S = 1*number;
 16042  001424  C075  F054         	movff	_number,_S
 16043  001428  C076  F055         	movff	_number+1,_S+1
 16044                           
 16045                           ;keypad.c: 81: total_number = 3*number;
 16046  00142C  C075  F001         	movff	_number,i2___wmul@multiplier
 16047  001430  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16048  001434  0E00               	movlw	0
 16049  001436  6E04               	movwf	i2___wmul@multiplicand+1,c
 16050  001438  0E03               	movlw	3
 16051  00143A  6E03               	movwf	i2___wmul@multiplicand,c
 16052  00143C  EC4E  F023         	call	i2___wmul	;wreg free
 16053  001440  C001  F05A         	movff	?i2___wmul,_total_number
 16054  001444  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 16055                           
 16056                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 16057  001448  90D8               	bcf	status,0,c
 16058  00144A  345E               	rlcf	_counter_step,w,c
 16059  00144C  6ED9               	movwf	fsr2l,c
 16060  00144E  345F               	rlcf	_counter_step+1,w,c
 16061  001450  6EDA               	movwf	fsr2h,c
 16062  001452  0E42               	movlw	low _compartment_number
 16063  001454  26D9               	addwf	fsr2l,f,c
 16064  001456  0E00               	movlw	high _compartment_number
 16065  001458  22DA               	addwfc	fsr2h,f,c
 16066  00145A  CFDE F007          	movff	postinc2,??_is_valid
 16067  00145E  CFDD F008          	movff	postdec2,??_is_valid+1
 16068  001462  90D8               	bcf	status,0,c
 16069  001464  3607               	rlcf	??_is_valid,f,c
 16070  001466  3608               	rlcf	??_is_valid+1,f,c
 16071  001468  0E30               	movlw	low _B_array
 16072  00146A  2407               	addwf	??_is_valid,w,c
 16073  00146C  6ED9               	movwf	fsr2l,c
 16074  00146E  0E01               	movlw	high _B_array
 16075  001470  2008               	addwfc	??_is_valid+1,w,c
 16076  001472  6EDA               	movwf	fsr2h,c
 16077  001474  C058  FFDE         	movff	_B,postinc2
 16078  001478  C059  FFDD         	movff	_B+1,postdec2
 16079                           
 16080                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 16081  00147C  90D8               	bcf	status,0,c
 16082  00147E  345E               	rlcf	_counter_step,w,c
 16083  001480  6ED9               	movwf	fsr2l,c
 16084  001482  345F               	rlcf	_counter_step+1,w,c
 16085  001484  6EDA               	movwf	fsr2h,c
 16086  001486  0E42               	movlw	low _compartment_number
 16087  001488  26D9               	addwf	fsr2l,f,c
 16088  00148A  0E00               	movlw	high _compartment_number
 16089  00148C  22DA               	addwfc	fsr2h,f,c
 16090  00148E  CFDE F007          	movff	postinc2,??_is_valid
 16091  001492  CFDD F008          	movff	postdec2,??_is_valid+1
 16092  001496  90D8               	bcf	status,0,c
 16093  001498  3607               	rlcf	??_is_valid,f,c
 16094  00149A  3608               	rlcf	??_is_valid+1,f,c
 16095  00149C  0E20               	movlw	low _S_array
 16096  00149E  2407               	addwf	??_is_valid,w,c
 16097  0014A0  6ED9               	movwf	fsr2l,c
 16098  0014A2  0E01               	movlw	high _S_array
 16099  0014A4  2008               	addwfc	??_is_valid+1,w,c
 16100  0014A6  6EDA               	movwf	fsr2h,c
 16101  0014A8  C054  FFDE         	movff	_S,postinc2
 16102  0014AC  C055  FFDD         	movff	_S+1,postdec2
 16103                           
 16104                           ;keypad.c: 85: }
 16105  0014B0  0012               	return	
 16106  0014B2                     i2l1001:
 16107                           
 16108                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 16109  0014B2  0E70               	movlw	low _current_set2
 16110  0014B4  6E01               	movwf	strcmp@s1,c
 16111  0014B6  0E00               	movlw	high _current_set2
 16112  0014B8  6E02               	movwf	strcmp@s1+1,c
 16113  0014BA  0EF0               	movlw	low STR_87
 16114  0014BC  6E03               	movwf	strcmp@s2,c
 16115  0014BE  0EFF               	movlw	high STR_87
 16116  0014C0  6E04               	movwf	strcmp@s2+1,c
 16117  0014C2  EC4E  F022         	call	_strcmp	;wreg free
 16118  0014C6  5001               	movf	?_strcmp,w,c
 16119  0014C8  1002               	iorwf	?_strcmp+1,w,c
 16120  0014CA  A4D8               	btfss	status,2,c
 16121  0014CC  D04C               	goto	i2l1003
 16122                           
 16123                           ;keypad.c: 87: B = 2*number;
 16124  0014CE  90D8               	bcf	status,0,c
 16125  0014D0  3475               	rlcf	_number,w,c
 16126  0014D2  6E58               	movwf	_B,c
 16127  0014D4  3476               	rlcf	_number+1,w,c
 16128  0014D6  6E59               	movwf	_B+1,c
 16129                           
 16130                           ;keypad.c: 89: W = 1*number;
 16131  0014D8  C075  F052         	movff	_number,_W
 16132  0014DC  C076  F053         	movff	_number+1,_W+1
 16133                           
 16134                           ;keypad.c: 90: total_number = 3*number;
 16135  0014E0  C075  F001         	movff	_number,i2___wmul@multiplier
 16136  0014E4  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16137  0014E8  0E00               	movlw	0
 16138  0014EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 16139  0014EC  0E03               	movlw	3
 16140  0014EE  6E03               	movwf	i2___wmul@multiplicand,c
 16141  0014F0  EC4E  F023         	call	i2___wmul	;wreg free
 16142  0014F4  C001  F05A         	movff	?i2___wmul,_total_number
 16143  0014F8  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 16144                           
 16145                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 16146  0014FC  90D8               	bcf	status,0,c
 16147  0014FE  345E               	rlcf	_counter_step,w,c
 16148  001500  6ED9               	movwf	fsr2l,c
 16149  001502  345F               	rlcf	_counter_step+1,w,c
 16150  001504  6EDA               	movwf	fsr2h,c
 16151  001506  0E42               	movlw	low _compartment_number
 16152  001508  26D9               	addwf	fsr2l,f,c
 16153  00150A  0E00               	movlw	high _compartment_number
 16154  00150C  22DA               	addwfc	fsr2h,f,c
 16155  00150E  CFDE F007          	movff	postinc2,??_is_valid
 16156  001512  CFDD F008          	movff	postdec2,??_is_valid+1
 16157  001516  90D8               	bcf	status,0,c
 16158  001518  3607               	rlcf	??_is_valid,f,c
 16159  00151A  3608               	rlcf	??_is_valid+1,f,c
 16160  00151C  0E30               	movlw	low _B_array
 16161  00151E  2407               	addwf	??_is_valid,w,c
 16162  001520  6ED9               	movwf	fsr2l,c
 16163  001522  0E01               	movlw	high _B_array
 16164  001524  2008               	addwfc	??_is_valid+1,w,c
 16165  001526  6EDA               	movwf	fsr2h,c
 16166  001528  C058  FFDE         	movff	_B,postinc2
 16167  00152C  C059  FFDD         	movff	_B+1,postdec2
 16168                           
 16169                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 16170  001530  90D8               	bcf	status,0,c
 16171  001532  345E               	rlcf	_counter_step,w,c
 16172  001534  6ED9               	movwf	fsr2l,c
 16173  001536  345F               	rlcf	_counter_step+1,w,c
 16174  001538  6EDA               	movwf	fsr2h,c
 16175  00153A  0E42               	movlw	low _compartment_number
 16176  00153C  26D9               	addwf	fsr2l,f,c
 16177  00153E  0E00               	movlw	high _compartment_number
 16178  001540  22DA               	addwfc	fsr2h,f,c
 16179  001542  CFDE F007          	movff	postinc2,??_is_valid
 16180  001546  CFDD F008          	movff	postdec2,??_is_valid+1
 16181  00154A  90D8               	bcf	status,0,c
 16182  00154C  3607               	rlcf	??_is_valid,f,c
 16183  00154E  3608               	rlcf	??_is_valid+1,f,c
 16184  001550  0E00               	movlw	low _W_array
 16185  001552  2407               	addwf	??_is_valid,w,c
 16186  001554  6ED9               	movwf	fsr2l,c
 16187  001556  0E01               	movlw	high _W_array
 16188  001558  2008               	addwfc	??_is_valid+1,w,c
 16189  00155A  6EDA               	movwf	fsr2h,c
 16190  00155C  C052  FFDE         	movff	_W,postinc2
 16191  001560  C053  FFDD         	movff	_W+1,postdec2
 16192                           
 16193                           ;keypad.c: 94: }
 16194  001564  0012               	return	
 16195  001566                     i2l1003:
 16196                           
 16197                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 16198  001566  0E70               	movlw	low _current_set2
 16199  001568  6E01               	movwf	strcmp@s1,c
 16200  00156A  0E00               	movlw	high _current_set2
 16201  00156C  6E02               	movwf	strcmp@s1+1,c
 16202  00156E  0EB2               	movlw	low (STR_94+1)
 16203  001570  6E03               	movwf	strcmp@s2,c
 16204  001572  0EFF               	movlw	high (STR_94+1)
 16205  001574  6E04               	movwf	strcmp@s2+1,c
 16206  001576  EC4E  F022         	call	_strcmp	;wreg free
 16207  00157A  5001               	movf	?_strcmp,w,c
 16208  00157C  1002               	iorwf	?_strcmp+1,w,c
 16209  00157E  A4D8               	btfss	status,2,c
 16210  001580  D069               	goto	i2l1005
 16211                           
 16212                           ;keypad.c: 96: B = 1*number;
 16213  001582  C075  F058         	movff	_number,_B
 16214  001586  C076  F059         	movff	_number+1,_B+1
 16215                           
 16216                           ;keypad.c: 97: W = 1*number;
 16217  00158A  C075  F052         	movff	_number,_W
 16218  00158E  C076  F053         	movff	_number+1,_W+1
 16219                           
 16220                           ;keypad.c: 98: N = 1*number;
 16221  001592  C075  F056         	movff	_number,_N
 16222  001596  C076  F057         	movff	_number+1,_N+1
 16223                           
 16224                           ;keypad.c: 99: total_number = 3*number;
 16225  00159A  C075  F001         	movff	_number,i2___wmul@multiplier
 16226  00159E  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16227  0015A2  0E00               	movlw	0
 16228  0015A4  6E04               	movwf	i2___wmul@multiplicand+1,c
 16229  0015A6  0E03               	movlw	3
 16230  0015A8  6E03               	movwf	i2___wmul@multiplicand,c
 16231  0015AA  EC4E  F023         	call	i2___wmul	;wreg free
 16232  0015AE  C001  F05A         	movff	?i2___wmul,_total_number
 16233  0015B2  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 16234                           
 16235                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 16236  0015B6  90D8               	bcf	status,0,c
 16237  0015B8  345E               	rlcf	_counter_step,w,c
 16238  0015BA  6ED9               	movwf	fsr2l,c
 16239  0015BC  345F               	rlcf	_counter_step+1,w,c
 16240  0015BE  6EDA               	movwf	fsr2h,c
 16241  0015C0  0E42               	movlw	low _compartment_number
 16242  0015C2  26D9               	addwf	fsr2l,f,c
 16243  0015C4  0E00               	movlw	high _compartment_number
 16244  0015C6  22DA               	addwfc	fsr2h,f,c
 16245  0015C8  CFDE F007          	movff	postinc2,??_is_valid
 16246  0015CC  CFDD F008          	movff	postdec2,??_is_valid+1
 16247  0015D0  90D8               	bcf	status,0,c
 16248  0015D2  3607               	rlcf	??_is_valid,f,c
 16249  0015D4  3608               	rlcf	??_is_valid+1,f,c
 16250  0015D6  0E30               	movlw	low _B_array
 16251  0015D8  2407               	addwf	??_is_valid,w,c
 16252  0015DA  6ED9               	movwf	fsr2l,c
 16253  0015DC  0E01               	movlw	high _B_array
 16254  0015DE  2008               	addwfc	??_is_valid+1,w,c
 16255  0015E0  6EDA               	movwf	fsr2h,c
 16256  0015E2  C058  FFDE         	movff	_B,postinc2
 16257  0015E6  C059  FFDD         	movff	_B+1,postdec2
 16258                           
 16259                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 16260  0015EA  90D8               	bcf	status,0,c
 16261  0015EC  345E               	rlcf	_counter_step,w,c
 16262  0015EE  6ED9               	movwf	fsr2l,c
 16263  0015F0  345F               	rlcf	_counter_step+1,w,c
 16264  0015F2  6EDA               	movwf	fsr2h,c
 16265  0015F4  0E42               	movlw	low _compartment_number
 16266  0015F6  26D9               	addwf	fsr2l,f,c
 16267  0015F8  0E00               	movlw	high _compartment_number
 16268  0015FA  22DA               	addwfc	fsr2h,f,c
 16269  0015FC  CFDE F007          	movff	postinc2,??_is_valid
 16270  001600  CFDD F008          	movff	postdec2,??_is_valid+1
 16271  001604  90D8               	bcf	status,0,c
 16272  001606  3607               	rlcf	??_is_valid,f,c
 16273  001608  3608               	rlcf	??_is_valid+1,f,c
 16274  00160A  0E00               	movlw	low _W_array
 16275  00160C  2407               	addwf	??_is_valid,w,c
 16276  00160E  6ED9               	movwf	fsr2l,c
 16277  001610  0E01               	movlw	high _W_array
 16278  001612  2008               	addwfc	??_is_valid+1,w,c
 16279  001614  6EDA               	movwf	fsr2h,c
 16280  001616  C052  FFDE         	movff	_W,postinc2
 16281  00161A  C053  FFDD         	movff	_W+1,postdec2
 16282                           
 16283                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 16284  00161E  90D8               	bcf	status,0,c
 16285  001620  345E               	rlcf	_counter_step,w,c
 16286  001622  6ED9               	movwf	fsr2l,c
 16287  001624  345F               	rlcf	_counter_step+1,w,c
 16288  001626  6EDA               	movwf	fsr2h,c
 16289  001628  0E42               	movlw	low _compartment_number
 16290  00162A  26D9               	addwf	fsr2l,f,c
 16291  00162C  0E00               	movlw	high _compartment_number
 16292  00162E  22DA               	addwfc	fsr2h,f,c
 16293  001630  CFDE F007          	movff	postinc2,??_is_valid
 16294  001634  CFDD F008          	movff	postdec2,??_is_valid+1
 16295  001638  90D8               	bcf	status,0,c
 16296  00163A  3607               	rlcf	??_is_valid,f,c
 16297  00163C  3608               	rlcf	??_is_valid+1,f,c
 16298  00163E  0E10               	movlw	low _N_array
 16299  001640  2407               	addwf	??_is_valid,w,c
 16300  001642  6ED9               	movwf	fsr2l,c
 16301  001644  0E01               	movlw	high _N_array
 16302  001646  2008               	addwfc	??_is_valid+1,w,c
 16303  001648  6EDA               	movwf	fsr2h,c
 16304  00164A  C056  FFDE         	movff	_N,postinc2
 16305  00164E  C057  FFDD         	movff	_N+1,postdec2
 16306                           
 16307                           ;keypad.c: 105: }
 16308  001652  0012               	return	
 16309  001654                     i2l1005:
 16310                           
 16311                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 16312  001654  0E70               	movlw	low _current_set2
 16313  001656  6E01               	movwf	strcmp@s1,c
 16314  001658  0E00               	movlw	high _current_set2
 16315  00165A  6E02               	movwf	strcmp@s1+1,c
 16316  00165C  0EBC               	movlw	low (STR_93+1)
 16317  00165E  6E03               	movwf	strcmp@s2,c
 16318  001660  0EFF               	movlw	high (STR_93+1)
 16319  001662  6E04               	movwf	strcmp@s2+1,c
 16320  001664  EC4E  F022         	call	_strcmp	;wreg free
 16321  001668  5001               	movf	?_strcmp,w,c
 16322  00166A  1002               	iorwf	?_strcmp+1,w,c
 16323  00166C  A4D8               	btfss	status,2,c
 16324  00166E  D069               	goto	i2l1007
 16325                           
 16326                           ;keypad.c: 107: B = 1*number;
 16327  001670  C075  F058         	movff	_number,_B
 16328  001674  C076  F059         	movff	_number+1,_B+1
 16329                           
 16330                           ;keypad.c: 108: S = 1*number;
 16331  001678  C075  F054         	movff	_number,_S
 16332  00167C  C076  F055         	movff	_number+1,_S+1
 16333                           
 16334                           ;keypad.c: 109: W = 1*number;
 16335  001680  C075  F052         	movff	_number,_W
 16336  001684  C076  F053         	movff	_number+1,_W+1
 16337                           
 16338                           ;keypad.c: 110: total_number = 3*number;
 16339  001688  C075  F001         	movff	_number,i2___wmul@multiplier
 16340  00168C  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16341  001690  0E00               	movlw	0
 16342  001692  6E04               	movwf	i2___wmul@multiplicand+1,c
 16343  001694  0E03               	movlw	3
 16344  001696  6E03               	movwf	i2___wmul@multiplicand,c
 16345  001698  EC4E  F023         	call	i2___wmul	;wreg free
 16346  00169C  C001  F05A         	movff	?i2___wmul,_total_number
 16347  0016A0  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 16348                           
 16349                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 16350  0016A4  90D8               	bcf	status,0,c
 16351  0016A6  345E               	rlcf	_counter_step,w,c
 16352  0016A8  6ED9               	movwf	fsr2l,c
 16353  0016AA  345F               	rlcf	_counter_step+1,w,c
 16354  0016AC  6EDA               	movwf	fsr2h,c
 16355  0016AE  0E42               	movlw	low _compartment_number
 16356  0016B0  26D9               	addwf	fsr2l,f,c
 16357  0016B2  0E00               	movlw	high _compartment_number
 16358  0016B4  22DA               	addwfc	fsr2h,f,c
 16359  0016B6  CFDE F007          	movff	postinc2,??_is_valid
 16360  0016BA  CFDD F008          	movff	postdec2,??_is_valid+1
 16361  0016BE  90D8               	bcf	status,0,c
 16362  0016C0  3607               	rlcf	??_is_valid,f,c
 16363  0016C2  3608               	rlcf	??_is_valid+1,f,c
 16364  0016C4  0E30               	movlw	low _B_array
 16365  0016C6  2407               	addwf	??_is_valid,w,c
 16366  0016C8  6ED9               	movwf	fsr2l,c
 16367  0016CA  0E01               	movlw	high _B_array
 16368  0016CC  2008               	addwfc	??_is_valid+1,w,c
 16369  0016CE  6EDA               	movwf	fsr2h,c
 16370  0016D0  C058  FFDE         	movff	_B,postinc2
 16371  0016D4  C059  FFDD         	movff	_B+1,postdec2
 16372                           
 16373                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 16374  0016D8  90D8               	bcf	status,0,c
 16375  0016DA  345E               	rlcf	_counter_step,w,c
 16376  0016DC  6ED9               	movwf	fsr2l,c
 16377  0016DE  345F               	rlcf	_counter_step+1,w,c
 16378  0016E0  6EDA               	movwf	fsr2h,c
 16379  0016E2  0E42               	movlw	low _compartment_number
 16380  0016E4  26D9               	addwf	fsr2l,f,c
 16381  0016E6  0E00               	movlw	high _compartment_number
 16382  0016E8  22DA               	addwfc	fsr2h,f,c
 16383  0016EA  CFDE F007          	movff	postinc2,??_is_valid
 16384  0016EE  CFDD F008          	movff	postdec2,??_is_valid+1
 16385  0016F2  90D8               	bcf	status,0,c
 16386  0016F4  3607               	rlcf	??_is_valid,f,c
 16387  0016F6  3608               	rlcf	??_is_valid+1,f,c
 16388  0016F8  0E20               	movlw	low _S_array
 16389  0016FA  2407               	addwf	??_is_valid,w,c
 16390  0016FC  6ED9               	movwf	fsr2l,c
 16391  0016FE  0E01               	movlw	high _S_array
 16392  001700  2008               	addwfc	??_is_valid+1,w,c
 16393  001702  6EDA               	movwf	fsr2h,c
 16394  001704  C054  FFDE         	movff	_S,postinc2
 16395  001708  C055  FFDD         	movff	_S+1,postdec2
 16396                           
 16397                           ;keypad.c: 114: W_array[compartment_number[counter_step]] = W;
 16398  00170C  90D8               	bcf	status,0,c
 16399  00170E  345E               	rlcf	_counter_step,w,c
 16400  001710  6ED9               	movwf	fsr2l,c
 16401  001712  345F               	rlcf	_counter_step+1,w,c
 16402  001714  6EDA               	movwf	fsr2h,c
 16403  001716  0E42               	movlw	low _compartment_number
 16404  001718  26D9               	addwf	fsr2l,f,c
 16405  00171A  0E00               	movlw	high _compartment_number
 16406  00171C  22DA               	addwfc	fsr2h,f,c
 16407  00171E  CFDE F007          	movff	postinc2,??_is_valid
 16408  001722  CFDD F008          	movff	postdec2,??_is_valid+1
 16409  001726  90D8               	bcf	status,0,c
 16410  001728  3607               	rlcf	??_is_valid,f,c
 16411  00172A  3608               	rlcf	??_is_valid+1,f,c
 16412  00172C  0E00               	movlw	low _W_array
 16413  00172E  2407               	addwf	??_is_valid,w,c
 16414  001730  6ED9               	movwf	fsr2l,c
 16415  001732  0E01               	movlw	high _W_array
 16416  001734  2008               	addwfc	??_is_valid+1,w,c
 16417  001736  6EDA               	movwf	fsr2h,c
 16418  001738  C052  FFDE         	movff	_W,postinc2
 16419  00173C  C053  FFDD         	movff	_W+1,postdec2
 16420                           
 16421                           ;keypad.c: 116: }
 16422  001740  0012               	return	
 16423  001742                     i2l1007:
 16424                           
 16425                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 16426  001742  0E70               	movlw	low _current_set2
 16427  001744  6E01               	movwf	strcmp@s1,c
 16428  001746  0E00               	movlw	high _current_set2
 16429  001748  6E02               	movwf	strcmp@s1+1,c
 16430  00174A  0EF4               	movlw	low STR_90
 16431  00174C  6E03               	movwf	strcmp@s2,c
 16432  00174E  0EFF               	movlw	high STR_90
 16433  001750  6E04               	movwf	strcmp@s2+1,c
 16434  001752  EC4E  F022         	call	_strcmp	;wreg free
 16435  001756  5001               	movf	?_strcmp,w,c
 16436  001758  1002               	iorwf	?_strcmp+1,w,c
 16437  00175A  A4D8               	btfss	status,2,c
 16438  00175C  D04C               	goto	i2l1009
 16439                           
 16440                           ;keypad.c: 118: B = 1*number;
 16441  00175E  C075  F058         	movff	_number,_B
 16442  001762  C076  F059         	movff	_number+1,_B+1
 16443                           
 16444                           ;keypad.c: 119: W = 2*number;
 16445  001766  90D8               	bcf	status,0,c
 16446  001768  3475               	rlcf	_number,w,c
 16447  00176A  6E52               	movwf	_W,c
 16448  00176C  3476               	rlcf	_number+1,w,c
 16449  00176E  6E53               	movwf	_W+1,c
 16450                           
 16451                           ;keypad.c: 120: total_number = 3*number;
 16452  001770  C075  F001         	movff	_number,i2___wmul@multiplier
 16453  001774  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 16454  001778  0E00               	movlw	0
 16455  00177A  6E04               	movwf	i2___wmul@multiplicand+1,c
 16456  00177C  0E03               	movlw	3
 16457  00177E  6E03               	movwf	i2___wmul@multiplicand,c
 16458  001780  EC4E  F023         	call	i2___wmul	;wreg free
 16459  001784  C001  F05A         	movff	?i2___wmul,_total_number
 16460  001788  C002  F05B         	movff	?i2___wmul+1,_total_number+1
 16461                           
 16462                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 16463  00178C  90D8               	bcf	status,0,c
 16464  00178E  345E               	rlcf	_counter_step,w,c
 16465  001790  6ED9               	movwf	fsr2l,c
 16466  001792  345F               	rlcf	_counter_step+1,w,c
 16467  001794  6EDA               	movwf	fsr2h,c
 16468  001796  0E42               	movlw	low _compartment_number
 16469  001798  26D9               	addwf	fsr2l,f,c
 16470  00179A  0E00               	movlw	high _compartment_number
 16471  00179C  22DA               	addwfc	fsr2h,f,c
 16472  00179E  CFDE F007          	movff	postinc2,??_is_valid
 16473  0017A2  CFDD F008          	movff	postdec2,??_is_valid+1
 16474  0017A6  90D8               	bcf	status,0,c
 16475  0017A8  3607               	rlcf	??_is_valid,f,c
 16476  0017AA  3608               	rlcf	??_is_valid+1,f,c
 16477  0017AC  0E30               	movlw	low _B_array
 16478  0017AE  2407               	addwf	??_is_valid,w,c
 16479  0017B0  6ED9               	movwf	fsr2l,c
 16480  0017B2  0E01               	movlw	high _B_array
 16481  0017B4  2008               	addwfc	??_is_valid+1,w,c
 16482  0017B6  6EDA               	movwf	fsr2h,c
 16483  0017B8  C058  FFDE         	movff	_B,postinc2
 16484  0017BC  C059  FFDD         	movff	_B+1,postdec2
 16485                           
 16486                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 16487  0017C0  90D8               	bcf	status,0,c
 16488  0017C2  345E               	rlcf	_counter_step,w,c
 16489  0017C4  6ED9               	movwf	fsr2l,c
 16490  0017C6  345F               	rlcf	_counter_step+1,w,c
 16491  0017C8  6EDA               	movwf	fsr2h,c
 16492  0017CA  0E42               	movlw	low _compartment_number
 16493  0017CC  26D9               	addwf	fsr2l,f,c
 16494  0017CE  0E00               	movlw	high _compartment_number
 16495  0017D0  22DA               	addwfc	fsr2h,f,c
 16496  0017D2  CFDE F007          	movff	postinc2,??_is_valid
 16497  0017D6  CFDD F008          	movff	postdec2,??_is_valid+1
 16498  0017DA  90D8               	bcf	status,0,c
 16499  0017DC  3607               	rlcf	??_is_valid,f,c
 16500  0017DE  3608               	rlcf	??_is_valid+1,f,c
 16501  0017E0  0E00               	movlw	low _W_array
 16502  0017E2  2407               	addwf	??_is_valid,w,c
 16503  0017E4  6ED9               	movwf	fsr2l,c
 16504  0017E6  0E01               	movlw	high _W_array
 16505  0017E8  2008               	addwfc	??_is_valid+1,w,c
 16506  0017EA  6EDA               	movwf	fsr2h,c
 16507  0017EC  C052  FFDE         	movff	_W,postinc2
 16508  0017F0  C053  FFDD         	movff	_W+1,postdec2
 16509                           
 16510                           ;keypad.c: 124: }
 16511  0017F4  0012               	return	
 16512  0017F6                     i2l1009:
 16513                           
 16514                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 16515  0017F6  0E70               	movlw	low _current_set2
 16516  0017F8  6E01               	movwf	strcmp@s1,c
 16517  0017FA  0E00               	movlw	high _current_set2
 16518  0017FC  6E02               	movwf	strcmp@s1+1,c
 16519  0017FE  0EC0               	movlw	low STR_91
 16520  001800  6E03               	movwf	strcmp@s2,c
 16521  001802  0EFF               	movlw	high STR_91
 16522  001804  6E04               	movwf	strcmp@s2+1,c
 16523  001806  EC4E  F022         	call	_strcmp	;wreg free
 16524  00180A  5001               	movf	?_strcmp,w,c
 16525  00180C  1002               	iorwf	?_strcmp+1,w,c
 16526  00180E  A4D8               	btfss	status,2,c
 16527  001810  D06A               	goto	i2l1011
 16528                           
 16529                           ;keypad.c: 126: B = 1*number;
 16530  001812  C075  F058         	movff	_number,_B
 16531  001816  C076  F059         	movff	_number+1,_B+1
 16532                           
 16533                           ;keypad.c: 127: N = 1*number;
 16534  00181A  C075  F056         	movff	_number,_N
 16535  00181E  C076  F057         	movff	_number+1,_N+1
 16536                           
 16537                           ;keypad.c: 128: W = 2*number;
 16538  001822  90D8               	bcf	status,0,c
 16539  001824  3475               	rlcf	_number,w,c
 16540  001826  6E52               	movwf	_W,c
 16541  001828  3476               	rlcf	_number+1,w,c
 16542  00182A  6E53               	movwf	_W+1,c
 16543                           
 16544                           ;keypad.c: 129: total_number = 4*number;
 16545  00182C  C075  F007         	movff	_number,??_is_valid
 16546  001830  C076  F008         	movff	_number+1,??_is_valid+1
 16547  001834  90D8               	bcf	status,0,c
 16548  001836  3607               	rlcf	??_is_valid,f,c
 16549  001838  3608               	rlcf	??_is_valid+1,f,c
 16550  00183A  90D8               	bcf	status,0,c
 16551  00183C  3607               	rlcf	??_is_valid,f,c
 16552  00183E  3608               	rlcf	??_is_valid+1,f,c
 16553  001840  C007  F05A         	movff	??_is_valid,_total_number
 16554  001844  C008  F05B         	movff	??_is_valid+1,_total_number+1
 16555                           
 16556                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 16557  001848  90D8               	bcf	status,0,c
 16558  00184A  345E               	rlcf	_counter_step,w,c
 16559  00184C  6ED9               	movwf	fsr2l,c
 16560  00184E  345F               	rlcf	_counter_step+1,w,c
 16561  001850  6EDA               	movwf	fsr2h,c
 16562  001852  0E42               	movlw	low _compartment_number
 16563  001854  26D9               	addwf	fsr2l,f,c
 16564  001856  0E00               	movlw	high _compartment_number
 16565  001858  22DA               	addwfc	fsr2h,f,c
 16566  00185A  CFDE F007          	movff	postinc2,??_is_valid
 16567  00185E  CFDD F008          	movff	postdec2,??_is_valid+1
 16568  001862  90D8               	bcf	status,0,c
 16569  001864  3607               	rlcf	??_is_valid,f,c
 16570  001866  3608               	rlcf	??_is_valid+1,f,c
 16571  001868  0E30               	movlw	low _B_array
 16572  00186A  2407               	addwf	??_is_valid,w,c
 16573  00186C  6ED9               	movwf	fsr2l,c
 16574  00186E  0E01               	movlw	high _B_array
 16575  001870  2008               	addwfc	??_is_valid+1,w,c
 16576  001872  6EDA               	movwf	fsr2h,c
 16577  001874  C058  FFDE         	movff	_B,postinc2
 16578  001878  C059  FFDD         	movff	_B+1,postdec2
 16579                           
 16580                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 16581  00187C  90D8               	bcf	status,0,c
 16582  00187E  345E               	rlcf	_counter_step,w,c
 16583  001880  6ED9               	movwf	fsr2l,c
 16584  001882  345F               	rlcf	_counter_step+1,w,c
 16585  001884  6EDA               	movwf	fsr2h,c
 16586  001886  0E42               	movlw	low _compartment_number
 16587  001888  26D9               	addwf	fsr2l,f,c
 16588  00188A  0E00               	movlw	high _compartment_number
 16589  00188C  22DA               	addwfc	fsr2h,f,c
 16590  00188E  CFDE F007          	movff	postinc2,??_is_valid
 16591  001892  CFDD F008          	movff	postdec2,??_is_valid+1
 16592  001896  90D8               	bcf	status,0,c
 16593  001898  3607               	rlcf	??_is_valid,f,c
 16594  00189A  3608               	rlcf	??_is_valid+1,f,c
 16595  00189C  0E10               	movlw	low _N_array
 16596  00189E  2407               	addwf	??_is_valid,w,c
 16597  0018A0  6ED9               	movwf	fsr2l,c
 16598  0018A2  0E01               	movlw	high _N_array
 16599  0018A4  2008               	addwfc	??_is_valid+1,w,c
 16600  0018A6  6EDA               	movwf	fsr2h,c
 16601  0018A8  C056  FFDE         	movff	_N,postinc2
 16602  0018AC  C057  FFDD         	movff	_N+1,postdec2
 16603                           
 16604                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 16605  0018B0  90D8               	bcf	status,0,c
 16606  0018B2  345E               	rlcf	_counter_step,w,c
 16607  0018B4  6ED9               	movwf	fsr2l,c
 16608  0018B6  345F               	rlcf	_counter_step+1,w,c
 16609  0018B8  6EDA               	movwf	fsr2h,c
 16610  0018BA  0E42               	movlw	low _compartment_number
 16611  0018BC  26D9               	addwf	fsr2l,f,c
 16612  0018BE  0E00               	movlw	high _compartment_number
 16613  0018C0  22DA               	addwfc	fsr2h,f,c
 16614  0018C2  CFDE F007          	movff	postinc2,??_is_valid
 16615  0018C6  CFDD F008          	movff	postdec2,??_is_valid+1
 16616  0018CA  90D8               	bcf	status,0,c
 16617  0018CC  3607               	rlcf	??_is_valid,f,c
 16618  0018CE  3608               	rlcf	??_is_valid+1,f,c
 16619  0018D0  0E00               	movlw	low _W_array
 16620  0018D2  2407               	addwf	??_is_valid,w,c
 16621  0018D4  6ED9               	movwf	fsr2l,c
 16622  0018D6  0E01               	movlw	high _W_array
 16623  0018D8  2008               	addwfc	??_is_valid+1,w,c
 16624  0018DA  6EDA               	movwf	fsr2h,c
 16625  0018DC  C052  FFDE         	movff	_W,postinc2
 16626  0018E0  C053  FFDD         	movff	_W+1,postdec2
 16627                           
 16628                           ;keypad.c: 134: }
 16629  0018E4  0012               	return	
 16630  0018E6                     i2l1011:
 16631                           
 16632                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 16633  0018E6  0E70               	movlw	low _current_set2
 16634  0018E8  6E01               	movwf	strcmp@s1,c
 16635  0018EA  0E00               	movlw	high _current_set2
 16636  0018EC  6E02               	movwf	strcmp@s1+1,c
 16637  0018EE  0EC5               	movlw	low STR_92
 16638  0018F0  6E03               	movwf	strcmp@s2,c
 16639  0018F2  0EFF               	movlw	high STR_92
 16640  0018F4  6E04               	movwf	strcmp@s2+1,c
 16641  0018F6  EC4E  F022         	call	_strcmp	;wreg free
 16642  0018FA  5001               	movf	?_strcmp,w,c
 16643  0018FC  1002               	iorwf	?_strcmp+1,w,c
 16644  0018FE  A4D8               	btfss	status,2,c
 16645  001900  D06A               	goto	i2l1013
 16646                           
 16647                           ;keypad.c: 136: B = 1*number;
 16648  001902  C075  F058         	movff	_number,_B
 16649  001906  C076  F059         	movff	_number+1,_B+1
 16650                           
 16651                           ;keypad.c: 137: S = 1*number;
 16652  00190A  C075  F054         	movff	_number,_S
 16653  00190E  C076  F055         	movff	_number+1,_S+1
 16654                           
 16655                           ;keypad.c: 138: W = 2*number;
 16656  001912  90D8               	bcf	status,0,c
 16657  001914  3475               	rlcf	_number,w,c
 16658  001916  6E52               	movwf	_W,c
 16659  001918  3476               	rlcf	_number+1,w,c
 16660  00191A  6E53               	movwf	_W+1,c
 16661                           
 16662                           ;keypad.c: 139: total_number = 4*number;
 16663  00191C  C075  F007         	movff	_number,??_is_valid
 16664  001920  C076  F008         	movff	_number+1,??_is_valid+1
 16665  001924  90D8               	bcf	status,0,c
 16666  001926  3607               	rlcf	??_is_valid,f,c
 16667  001928  3608               	rlcf	??_is_valid+1,f,c
 16668  00192A  90D8               	bcf	status,0,c
 16669  00192C  3607               	rlcf	??_is_valid,f,c
 16670  00192E  3608               	rlcf	??_is_valid+1,f,c
 16671  001930  C007  F05A         	movff	??_is_valid,_total_number
 16672  001934  C008  F05B         	movff	??_is_valid+1,_total_number+1
 16673                           
 16674                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 16675  001938  90D8               	bcf	status,0,c
 16676  00193A  345E               	rlcf	_counter_step,w,c
 16677  00193C  6ED9               	movwf	fsr2l,c
 16678  00193E  345F               	rlcf	_counter_step+1,w,c
 16679  001940  6EDA               	movwf	fsr2h,c
 16680  001942  0E42               	movlw	low _compartment_number
 16681  001944  26D9               	addwf	fsr2l,f,c
 16682  001946  0E00               	movlw	high _compartment_number
 16683  001948  22DA               	addwfc	fsr2h,f,c
 16684  00194A  CFDE F007          	movff	postinc2,??_is_valid
 16685  00194E  CFDD F008          	movff	postdec2,??_is_valid+1
 16686  001952  90D8               	bcf	status,0,c
 16687  001954  3607               	rlcf	??_is_valid,f,c
 16688  001956  3608               	rlcf	??_is_valid+1,f,c
 16689  001958  0E30               	movlw	low _B_array
 16690  00195A  2407               	addwf	??_is_valid,w,c
 16691  00195C  6ED9               	movwf	fsr2l,c
 16692  00195E  0E01               	movlw	high _B_array
 16693  001960  2008               	addwfc	??_is_valid+1,w,c
 16694  001962  6EDA               	movwf	fsr2h,c
 16695  001964  C058  FFDE         	movff	_B,postinc2
 16696  001968  C059  FFDD         	movff	_B+1,postdec2
 16697                           
 16698                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 16699  00196C  90D8               	bcf	status,0,c
 16700  00196E  345E               	rlcf	_counter_step,w,c
 16701  001970  6ED9               	movwf	fsr2l,c
 16702  001972  345F               	rlcf	_counter_step+1,w,c
 16703  001974  6EDA               	movwf	fsr2h,c
 16704  001976  0E42               	movlw	low _compartment_number
 16705  001978  26D9               	addwf	fsr2l,f,c
 16706  00197A  0E00               	movlw	high _compartment_number
 16707  00197C  22DA               	addwfc	fsr2h,f,c
 16708  00197E  CFDE F007          	movff	postinc2,??_is_valid
 16709  001982  CFDD F008          	movff	postdec2,??_is_valid+1
 16710  001986  90D8               	bcf	status,0,c
 16711  001988  3607               	rlcf	??_is_valid,f,c
 16712  00198A  3608               	rlcf	??_is_valid+1,f,c
 16713  00198C  0E20               	movlw	low _S_array
 16714  00198E  2407               	addwf	??_is_valid,w,c
 16715  001990  6ED9               	movwf	fsr2l,c
 16716  001992  0E01               	movlw	high _S_array
 16717  001994  2008               	addwfc	??_is_valid+1,w,c
 16718  001996  6EDA               	movwf	fsr2h,c
 16719  001998  C054  FFDE         	movff	_S,postinc2
 16720  00199C  C055  FFDD         	movff	_S+1,postdec2
 16721                           
 16722                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 16723  0019A0  90D8               	bcf	status,0,c
 16724  0019A2  345E               	rlcf	_counter_step,w,c
 16725  0019A4  6ED9               	movwf	fsr2l,c
 16726  0019A6  345F               	rlcf	_counter_step+1,w,c
 16727  0019A8  6EDA               	movwf	fsr2h,c
 16728  0019AA  0E42               	movlw	low _compartment_number
 16729  0019AC  26D9               	addwf	fsr2l,f,c
 16730  0019AE  0E00               	movlw	high _compartment_number
 16731  0019B0  22DA               	addwfc	fsr2h,f,c
 16732  0019B2  CFDE F007          	movff	postinc2,??_is_valid
 16733  0019B6  CFDD F008          	movff	postdec2,??_is_valid+1
 16734  0019BA  90D8               	bcf	status,0,c
 16735  0019BC  3607               	rlcf	??_is_valid,f,c
 16736  0019BE  3608               	rlcf	??_is_valid+1,f,c
 16737  0019C0  0E00               	movlw	low _W_array
 16738  0019C2  2407               	addwf	??_is_valid,w,c
 16739  0019C4  6ED9               	movwf	fsr2l,c
 16740  0019C6  0E01               	movlw	high _W_array
 16741  0019C8  2008               	addwfc	??_is_valid+1,w,c
 16742  0019CA  6EDA               	movwf	fsr2h,c
 16743  0019CC  C052  FFDE         	movff	_W,postinc2
 16744  0019D0  C053  FFDD         	movff	_W+1,postdec2
 16745                           
 16746                           ;keypad.c: 145: }
 16747  0019D4  0012               	return	
 16748  0019D6                     i2l1013:
 16749                           
 16750                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 16751  0019D6  0E70               	movlw	low _current_set2
 16752  0019D8  6E01               	movwf	strcmp@s1,c
 16753  0019DA  0E00               	movlw	high _current_set2
 16754  0019DC  6E02               	movwf	strcmp@s1+1,c
 16755  0019DE  0EBB               	movlw	low STR_93
 16756  0019E0  6E03               	movwf	strcmp@s2,c
 16757  0019E2  0EFF               	movlw	high STR_93
 16758  0019E4  6E04               	movwf	strcmp@s2+1,c
 16759  0019E6  EC4E  F022         	call	_strcmp	;wreg free
 16760  0019EA  5001               	movf	?_strcmp,w,c
 16761  0019EC  1002               	iorwf	?_strcmp+1,w,c
 16762  0019EE  A4D8               	btfss	status,2,c
 16763  0019F0  D06A               	goto	i2l1015
 16764                           
 16765                           ;keypad.c: 147: B = 2*number;
 16766  0019F2  90D8               	bcf	status,0,c
 16767  0019F4  3475               	rlcf	_number,w,c
 16768  0019F6  6E58               	movwf	_B,c
 16769  0019F8  3476               	rlcf	_number+1,w,c
 16770  0019FA  6E59               	movwf	_B+1,c
 16771                           
 16772                           ;keypad.c: 148: S = 1*number;
 16773  0019FC  C075  F054         	movff	_number,_S
 16774  001A00  C076  F055         	movff	_number+1,_S+1
 16775                           
 16776                           ;keypad.c: 149: W = number;
 16777  001A04  C075  F052         	movff	_number,_W
 16778  001A08  C076  F053         	movff	_number+1,_W+1
 16779                           
 16780                           ;keypad.c: 150: total_number = 4*number;
 16781  001A0C  C075  F007         	movff	_number,??_is_valid
 16782  001A10  C076  F008         	movff	_number+1,??_is_valid+1
 16783  001A14  90D8               	bcf	status,0,c
 16784  001A16  3607               	rlcf	??_is_valid,f,c
 16785  001A18  3608               	rlcf	??_is_valid+1,f,c
 16786  001A1A  90D8               	bcf	status,0,c
 16787  001A1C  3607               	rlcf	??_is_valid,f,c
 16788  001A1E  3608               	rlcf	??_is_valid+1,f,c
 16789  001A20  C007  F05A         	movff	??_is_valid,_total_number
 16790  001A24  C008  F05B         	movff	??_is_valid+1,_total_number+1
 16791                           
 16792                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 16793  001A28  90D8               	bcf	status,0,c
 16794  001A2A  345E               	rlcf	_counter_step,w,c
 16795  001A2C  6ED9               	movwf	fsr2l,c
 16796  001A2E  345F               	rlcf	_counter_step+1,w,c
 16797  001A30  6EDA               	movwf	fsr2h,c
 16798  001A32  0E42               	movlw	low _compartment_number
 16799  001A34  26D9               	addwf	fsr2l,f,c
 16800  001A36  0E00               	movlw	high _compartment_number
 16801  001A38  22DA               	addwfc	fsr2h,f,c
 16802  001A3A  CFDE F007          	movff	postinc2,??_is_valid
 16803  001A3E  CFDD F008          	movff	postdec2,??_is_valid+1
 16804  001A42  90D8               	bcf	status,0,c
 16805  001A44  3607               	rlcf	??_is_valid,f,c
 16806  001A46  3608               	rlcf	??_is_valid+1,f,c
 16807  001A48  0E30               	movlw	low _B_array
 16808  001A4A  2407               	addwf	??_is_valid,w,c
 16809  001A4C  6ED9               	movwf	fsr2l,c
 16810  001A4E  0E01               	movlw	high _B_array
 16811  001A50  2008               	addwfc	??_is_valid+1,w,c
 16812  001A52  6EDA               	movwf	fsr2h,c
 16813  001A54  C058  FFDE         	movff	_B,postinc2
 16814  001A58  C059  FFDD         	movff	_B+1,postdec2
 16815                           
 16816                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 16817  001A5C  90D8               	bcf	status,0,c
 16818  001A5E  345E               	rlcf	_counter_step,w,c
 16819  001A60  6ED9               	movwf	fsr2l,c
 16820  001A62  345F               	rlcf	_counter_step+1,w,c
 16821  001A64  6EDA               	movwf	fsr2h,c
 16822  001A66  0E42               	movlw	low _compartment_number
 16823  001A68  26D9               	addwf	fsr2l,f,c
 16824  001A6A  0E00               	movlw	high _compartment_number
 16825  001A6C  22DA               	addwfc	fsr2h,f,c
 16826  001A6E  CFDE F007          	movff	postinc2,??_is_valid
 16827  001A72  CFDD F008          	movff	postdec2,??_is_valid+1
 16828  001A76  90D8               	bcf	status,0,c
 16829  001A78  3607               	rlcf	??_is_valid,f,c
 16830  001A7A  3608               	rlcf	??_is_valid+1,f,c
 16831  001A7C  0E20               	movlw	low _S_array
 16832  001A7E  2407               	addwf	??_is_valid,w,c
 16833  001A80  6ED9               	movwf	fsr2l,c
 16834  001A82  0E01               	movlw	high _S_array
 16835  001A84  2008               	addwfc	??_is_valid+1,w,c
 16836  001A86  6EDA               	movwf	fsr2h,c
 16837  001A88  C054  FFDE         	movff	_S,postinc2
 16838  001A8C  C055  FFDD         	movff	_S+1,postdec2
 16839                           
 16840                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 16841  001A90  90D8               	bcf	status,0,c
 16842  001A92  345E               	rlcf	_counter_step,w,c
 16843  001A94  6ED9               	movwf	fsr2l,c
 16844  001A96  345F               	rlcf	_counter_step+1,w,c
 16845  001A98  6EDA               	movwf	fsr2h,c
 16846  001A9A  0E42               	movlw	low _compartment_number
 16847  001A9C  26D9               	addwf	fsr2l,f,c
 16848  001A9E  0E00               	movlw	high _compartment_number
 16849  001AA0  22DA               	addwfc	fsr2h,f,c
 16850  001AA2  CFDE F007          	movff	postinc2,??_is_valid
 16851  001AA6  CFDD F008          	movff	postdec2,??_is_valid+1
 16852  001AAA  90D8               	bcf	status,0,c
 16853  001AAC  3607               	rlcf	??_is_valid,f,c
 16854  001AAE  3608               	rlcf	??_is_valid+1,f,c
 16855  001AB0  0E00               	movlw	low _W_array
 16856  001AB2  2407               	addwf	??_is_valid,w,c
 16857  001AB4  6ED9               	movwf	fsr2l,c
 16858  001AB6  0E01               	movlw	high _W_array
 16859  001AB8  2008               	addwfc	??_is_valid+1,w,c
 16860  001ABA  6EDA               	movwf	fsr2h,c
 16861  001ABC  C052  FFDE         	movff	_W,postinc2
 16862  001AC0  C053  FFDD         	movff	_W+1,postdec2
 16863                           
 16864                           ;keypad.c: 155: }
 16865  001AC4  0012               	return	
 16866  001AC6                     i2l1015:
 16867                           
 16868                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 16869  001AC6  0E70               	movlw	low _current_set2
 16870  001AC8  6E01               	movwf	strcmp@s1,c
 16871  001ACA  0E00               	movlw	high _current_set2
 16872  001ACC  6E02               	movwf	strcmp@s1+1,c
 16873  001ACE  0EB1               	movlw	low STR_94
 16874  001AD0  6E03               	movwf	strcmp@s2,c
 16875  001AD2  0EFF               	movlw	high STR_94
 16876  001AD4  6E04               	movwf	strcmp@s2+1,c
 16877  001AD6  EC4E  F022         	call	_strcmp	;wreg free
 16878  001ADA  5001               	movf	?_strcmp,w,c
 16879  001ADC  1002               	iorwf	?_strcmp+1,w,c
 16880  001ADE  A4D8               	btfss	status,2,c
 16881  001AE0  D06A               	goto	i2l1017
 16882                           
 16883                           ;keypad.c: 157: B = 2*number;
 16884  001AE2  90D8               	bcf	status,0,c
 16885  001AE4  3475               	rlcf	_number,w,c
 16886  001AE6  6E58               	movwf	_B,c
 16887  001AE8  3476               	rlcf	_number+1,w,c
 16888  001AEA  6E59               	movwf	_B+1,c
 16889                           
 16890                           ;keypad.c: 158: N = 1*number;
 16891  001AEC  C075  F056         	movff	_number,_N
 16892  001AF0  C076  F057         	movff	_number+1,_N+1
 16893                           
 16894                           ;keypad.c: 159: W = 1*number;
 16895  001AF4  C075  F052         	movff	_number,_W
 16896  001AF8  C076  F053         	movff	_number+1,_W+1
 16897                           
 16898                           ;keypad.c: 160: total_number = 4*number;
 16899  001AFC  C075  F007         	movff	_number,??_is_valid
 16900  001B00  C076  F008         	movff	_number+1,??_is_valid+1
 16901  001B04  90D8               	bcf	status,0,c
 16902  001B06  3607               	rlcf	??_is_valid,f,c
 16903  001B08  3608               	rlcf	??_is_valid+1,f,c
 16904  001B0A  90D8               	bcf	status,0,c
 16905  001B0C  3607               	rlcf	??_is_valid,f,c
 16906  001B0E  3608               	rlcf	??_is_valid+1,f,c
 16907  001B10  C007  F05A         	movff	??_is_valid,_total_number
 16908  001B14  C008  F05B         	movff	??_is_valid+1,_total_number+1
 16909                           
 16910                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 16911  001B18  90D8               	bcf	status,0,c
 16912  001B1A  345E               	rlcf	_counter_step,w,c
 16913  001B1C  6ED9               	movwf	fsr2l,c
 16914  001B1E  345F               	rlcf	_counter_step+1,w,c
 16915  001B20  6EDA               	movwf	fsr2h,c
 16916  001B22  0E42               	movlw	low _compartment_number
 16917  001B24  26D9               	addwf	fsr2l,f,c
 16918  001B26  0E00               	movlw	high _compartment_number
 16919  001B28  22DA               	addwfc	fsr2h,f,c
 16920  001B2A  CFDE F007          	movff	postinc2,??_is_valid
 16921  001B2E  CFDD F008          	movff	postdec2,??_is_valid+1
 16922  001B32  90D8               	bcf	status,0,c
 16923  001B34  3607               	rlcf	??_is_valid,f,c
 16924  001B36  3608               	rlcf	??_is_valid+1,f,c
 16925  001B38  0E30               	movlw	low _B_array
 16926  001B3A  2407               	addwf	??_is_valid,w,c
 16927  001B3C  6ED9               	movwf	fsr2l,c
 16928  001B3E  0E01               	movlw	high _B_array
 16929  001B40  2008               	addwfc	??_is_valid+1,w,c
 16930  001B42  6EDA               	movwf	fsr2h,c
 16931  001B44  C058  FFDE         	movff	_B,postinc2
 16932  001B48  C059  FFDD         	movff	_B+1,postdec2
 16933                           
 16934                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 16935  001B4C  90D8               	bcf	status,0,c
 16936  001B4E  345E               	rlcf	_counter_step,w,c
 16937  001B50  6ED9               	movwf	fsr2l,c
 16938  001B52  345F               	rlcf	_counter_step+1,w,c
 16939  001B54  6EDA               	movwf	fsr2h,c
 16940  001B56  0E42               	movlw	low _compartment_number
 16941  001B58  26D9               	addwf	fsr2l,f,c
 16942  001B5A  0E00               	movlw	high _compartment_number
 16943  001B5C  22DA               	addwfc	fsr2h,f,c
 16944  001B5E  CFDE F007          	movff	postinc2,??_is_valid
 16945  001B62  CFDD F008          	movff	postdec2,??_is_valid+1
 16946  001B66  90D8               	bcf	status,0,c
 16947  001B68  3607               	rlcf	??_is_valid,f,c
 16948  001B6A  3608               	rlcf	??_is_valid+1,f,c
 16949  001B6C  0E10               	movlw	low _N_array
 16950  001B6E  2407               	addwf	??_is_valid,w,c
 16951  001B70  6ED9               	movwf	fsr2l,c
 16952  001B72  0E01               	movlw	high _N_array
 16953  001B74  2008               	addwfc	??_is_valid+1,w,c
 16954  001B76  6EDA               	movwf	fsr2h,c
 16955  001B78  C056  FFDE         	movff	_N,postinc2
 16956  001B7C  C057  FFDD         	movff	_N+1,postdec2
 16957                           
 16958                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 16959  001B80  90D8               	bcf	status,0,c
 16960  001B82  345E               	rlcf	_counter_step,w,c
 16961  001B84  6ED9               	movwf	fsr2l,c
 16962  001B86  345F               	rlcf	_counter_step+1,w,c
 16963  001B88  6EDA               	movwf	fsr2h,c
 16964  001B8A  0E42               	movlw	low _compartment_number
 16965  001B8C  26D9               	addwf	fsr2l,f,c
 16966  001B8E  0E00               	movlw	high _compartment_number
 16967  001B90  22DA               	addwfc	fsr2h,f,c
 16968  001B92  CFDE F007          	movff	postinc2,??_is_valid
 16969  001B96  CFDD F008          	movff	postdec2,??_is_valid+1
 16970  001B9A  90D8               	bcf	status,0,c
 16971  001B9C  3607               	rlcf	??_is_valid,f,c
 16972  001B9E  3608               	rlcf	??_is_valid+1,f,c
 16973  001BA0  0E00               	movlw	low _W_array
 16974  001BA2  2407               	addwf	??_is_valid,w,c
 16975  001BA4  6ED9               	movwf	fsr2l,c
 16976  001BA6  0E01               	movlw	high _W_array
 16977  001BA8  2008               	addwfc	??_is_valid+1,w,c
 16978  001BAA  6EDA               	movwf	fsr2h,c
 16979  001BAC  C052  FFDE         	movff	_W,postinc2
 16980  001BB0  C053  FFDD         	movff	_W+1,postdec2
 16981                           
 16982                           ;keypad.c: 165: }
 16983  001BB4  0012               	return	
 16984  001BB6                     i2l1017:
 16985                           
 16986                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 16987  001BB6  0E70               	movlw	low _current_set2
 16988  001BB8  6E01               	movwf	strcmp@s1,c
 16989  001BBA  0E00               	movlw	high _current_set2
 16990  001BBC  6E02               	movwf	strcmp@s1+1,c
 16991  001BBE  0EB6               	movlw	low STR_95
 16992  001BC0  6E03               	movwf	strcmp@s2,c
 16993  001BC2  0EFF               	movlw	high STR_95
 16994  001BC4  6E04               	movwf	strcmp@s2+1,c
 16995  001BC6  EC4E  F022         	call	_strcmp	;wreg free
 16996  001BCA  5001               	movf	?_strcmp,w,c
 16997  001BCC  1002               	iorwf	?_strcmp+1,w,c
 16998  001BCE  A4D8               	btfss	status,2,c
 16999  001BD0  D06A               	goto	i2l1019
 17000                           
 17001                           ;keypad.c: 167: B = 1*number;
 17002  001BD2  C075  F058         	movff	_number,_B
 17003  001BD6  C076  F059         	movff	_number+1,_B+1
 17004                           
 17005                           ;keypad.c: 168: N = 2*number;
 17006  001BDA  90D8               	bcf	status,0,c
 17007  001BDC  3475               	rlcf	_number,w,c
 17008  001BDE  6E56               	movwf	_N,c
 17009  001BE0  3476               	rlcf	_number+1,w,c
 17010  001BE2  6E57               	movwf	_N+1,c
 17011                           
 17012                           ;keypad.c: 169: W = 1*number;
 17013  001BE4  C075  F052         	movff	_number,_W
 17014  001BE8  C076  F053         	movff	_number+1,_W+1
 17015                           
 17016                           ;keypad.c: 170: total_number = 4*number;
 17017  001BEC  C075  F007         	movff	_number,??_is_valid
 17018  001BF0  C076  F008         	movff	_number+1,??_is_valid+1
 17019  001BF4  90D8               	bcf	status,0,c
 17020  001BF6  3607               	rlcf	??_is_valid,f,c
 17021  001BF8  3608               	rlcf	??_is_valid+1,f,c
 17022  001BFA  90D8               	bcf	status,0,c
 17023  001BFC  3607               	rlcf	??_is_valid,f,c
 17024  001BFE  3608               	rlcf	??_is_valid+1,f,c
 17025  001C00  C007  F05A         	movff	??_is_valid,_total_number
 17026  001C04  C008  F05B         	movff	??_is_valid+1,_total_number+1
 17027                           
 17028                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 17029  001C08  90D8               	bcf	status,0,c
 17030  001C0A  345E               	rlcf	_counter_step,w,c
 17031  001C0C  6ED9               	movwf	fsr2l,c
 17032  001C0E  345F               	rlcf	_counter_step+1,w,c
 17033  001C10  6EDA               	movwf	fsr2h,c
 17034  001C12  0E42               	movlw	low _compartment_number
 17035  001C14  26D9               	addwf	fsr2l,f,c
 17036  001C16  0E00               	movlw	high _compartment_number
 17037  001C18  22DA               	addwfc	fsr2h,f,c
 17038  001C1A  CFDE F007          	movff	postinc2,??_is_valid
 17039  001C1E  CFDD F008          	movff	postdec2,??_is_valid+1
 17040  001C22  90D8               	bcf	status,0,c
 17041  001C24  3607               	rlcf	??_is_valid,f,c
 17042  001C26  3608               	rlcf	??_is_valid+1,f,c
 17043  001C28  0E30               	movlw	low _B_array
 17044  001C2A  2407               	addwf	??_is_valid,w,c
 17045  001C2C  6ED9               	movwf	fsr2l,c
 17046  001C2E  0E01               	movlw	high _B_array
 17047  001C30  2008               	addwfc	??_is_valid+1,w,c
 17048  001C32  6EDA               	movwf	fsr2h,c
 17049  001C34  C058  FFDE         	movff	_B,postinc2
 17050  001C38  C059  FFDD         	movff	_B+1,postdec2
 17051                           
 17052                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 17053  001C3C  90D8               	bcf	status,0,c
 17054  001C3E  345E               	rlcf	_counter_step,w,c
 17055  001C40  6ED9               	movwf	fsr2l,c
 17056  001C42  345F               	rlcf	_counter_step+1,w,c
 17057  001C44  6EDA               	movwf	fsr2h,c
 17058  001C46  0E42               	movlw	low _compartment_number
 17059  001C48  26D9               	addwf	fsr2l,f,c
 17060  001C4A  0E00               	movlw	high _compartment_number
 17061  001C4C  22DA               	addwfc	fsr2h,f,c
 17062  001C4E  CFDE F007          	movff	postinc2,??_is_valid
 17063  001C52  CFDD F008          	movff	postdec2,??_is_valid+1
 17064  001C56  90D8               	bcf	status,0,c
 17065  001C58  3607               	rlcf	??_is_valid,f,c
 17066  001C5A  3608               	rlcf	??_is_valid+1,f,c
 17067  001C5C  0E10               	movlw	low _N_array
 17068  001C5E  2407               	addwf	??_is_valid,w,c
 17069  001C60  6ED9               	movwf	fsr2l,c
 17070  001C62  0E01               	movlw	high _N_array
 17071  001C64  2008               	addwfc	??_is_valid+1,w,c
 17072  001C66  6EDA               	movwf	fsr2h,c
 17073  001C68  C056  FFDE         	movff	_N,postinc2
 17074  001C6C  C057  FFDD         	movff	_N+1,postdec2
 17075                           
 17076                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 17077  001C70  90D8               	bcf	status,0,c
 17078  001C72  345E               	rlcf	_counter_step,w,c
 17079  001C74  6ED9               	movwf	fsr2l,c
 17080  001C76  345F               	rlcf	_counter_step+1,w,c
 17081  001C78  6EDA               	movwf	fsr2h,c
 17082  001C7A  0E42               	movlw	low _compartment_number
 17083  001C7C  26D9               	addwf	fsr2l,f,c
 17084  001C7E  0E00               	movlw	high _compartment_number
 17085  001C80  22DA               	addwfc	fsr2h,f,c
 17086  001C82  CFDE F007          	movff	postinc2,??_is_valid
 17087  001C86  CFDD F008          	movff	postdec2,??_is_valid+1
 17088  001C8A  90D8               	bcf	status,0,c
 17089  001C8C  3607               	rlcf	??_is_valid,f,c
 17090  001C8E  3608               	rlcf	??_is_valid+1,f,c
 17091  001C90  0E00               	movlw	low _W_array
 17092  001C92  2407               	addwf	??_is_valid,w,c
 17093  001C94  6ED9               	movwf	fsr2l,c
 17094  001C96  0E01               	movlw	high _W_array
 17095  001C98  2008               	addwfc	??_is_valid+1,w,c
 17096  001C9A  6EDA               	movwf	fsr2h,c
 17097  001C9C  C052  FFDE         	movff	_W,postinc2
 17098  001CA0  C053  FFDD         	movff	_W+1,postdec2
 17099                           
 17100                           ;keypad.c: 175: }
 17101  001CA4  0012               	return	
 17102  001CA6                     i2l1019:
 17103                           
 17104                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 17105  001CA6  0E70               	movlw	low _current_set2
 17106  001CA8  6E01               	movwf	strcmp@s1,c
 17107  001CAA  0E00               	movlw	high _current_set2
 17108  001CAC  6E02               	movwf	strcmp@s1+1,c
 17109  001CAE  0EAC               	movlw	low STR_96
 17110  001CB0  6E03               	movwf	strcmp@s2,c
 17111  001CB2  0EFF               	movlw	high STR_96
 17112  001CB4  6E04               	movwf	strcmp@s2+1,c
 17113  001CB6  EC4E  F022         	call	_strcmp	;wreg free
 17114  001CBA  5001               	movf	?_strcmp,w,c
 17115  001CBC  1002               	iorwf	?_strcmp+1,w,c
 17116  001CBE  A4D8               	btfss	status,2,c
 17117  001CC0  D055               	goto	i2l1021
 17118                           
 17119                           ;keypad.c: 177: B = 1*number;
 17120  001CC2  C075  F058         	movff	_number,_B
 17121  001CC6  C076  F059         	movff	_number+1,_B+1
 17122                           
 17123                           ;keypad.c: 178: N = 3*number;
 17124  001CCA  C075  F001         	movff	_number,i2___wmul@multiplier
 17125  001CCE  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 17126  001CD2  0E00               	movlw	0
 17127  001CD4  6E04               	movwf	i2___wmul@multiplicand+1,c
 17128  001CD6  0E03               	movlw	3
 17129  001CD8  6E03               	movwf	i2___wmul@multiplicand,c
 17130  001CDA  EC4E  F023         	call	i2___wmul	;wreg free
 17131  001CDE  C001  F056         	movff	?i2___wmul,_N
 17132  001CE2  C002  F057         	movff	?i2___wmul+1,_N+1
 17133                           
 17134                           ;keypad.c: 179: total_number = 4*number;
 17135  001CE6  C075  F007         	movff	_number,??_is_valid
 17136  001CEA  C076  F008         	movff	_number+1,??_is_valid+1
 17137  001CEE  90D8               	bcf	status,0,c
 17138  001CF0  3607               	rlcf	??_is_valid,f,c
 17139  001CF2  3608               	rlcf	??_is_valid+1,f,c
 17140  001CF4  90D8               	bcf	status,0,c
 17141  001CF6  3607               	rlcf	??_is_valid,f,c
 17142  001CF8  3608               	rlcf	??_is_valid+1,f,c
 17143  001CFA  C007  F05A         	movff	??_is_valid,_total_number
 17144  001CFE  C008  F05B         	movff	??_is_valid+1,_total_number+1
 17145                           
 17146                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 17147  001D02  90D8               	bcf	status,0,c
 17148  001D04  345E               	rlcf	_counter_step,w,c
 17149  001D06  6ED9               	movwf	fsr2l,c
 17150  001D08  345F               	rlcf	_counter_step+1,w,c
 17151  001D0A  6EDA               	movwf	fsr2h,c
 17152  001D0C  0E42               	movlw	low _compartment_number
 17153  001D0E  26D9               	addwf	fsr2l,f,c
 17154  001D10  0E00               	movlw	high _compartment_number
 17155  001D12  22DA               	addwfc	fsr2h,f,c
 17156  001D14  CFDE F007          	movff	postinc2,??_is_valid
 17157  001D18  CFDD F008          	movff	postdec2,??_is_valid+1
 17158  001D1C  90D8               	bcf	status,0,c
 17159  001D1E  3607               	rlcf	??_is_valid,f,c
 17160  001D20  3608               	rlcf	??_is_valid+1,f,c
 17161  001D22  0E30               	movlw	low _B_array
 17162  001D24  2407               	addwf	??_is_valid,w,c
 17163  001D26  6ED9               	movwf	fsr2l,c
 17164  001D28  0E01               	movlw	high _B_array
 17165  001D2A  2008               	addwfc	??_is_valid+1,w,c
 17166  001D2C  6EDA               	movwf	fsr2h,c
 17167  001D2E  C058  FFDE         	movff	_B,postinc2
 17168  001D32  C059  FFDD         	movff	_B+1,postdec2
 17169                           
 17170                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 17171  001D36  90D8               	bcf	status,0,c
 17172  001D38  345E               	rlcf	_counter_step,w,c
 17173  001D3A  6ED9               	movwf	fsr2l,c
 17174  001D3C  345F               	rlcf	_counter_step+1,w,c
 17175  001D3E  6EDA               	movwf	fsr2h,c
 17176  001D40  0E42               	movlw	low _compartment_number
 17177  001D42  26D9               	addwf	fsr2l,f,c
 17178  001D44  0E00               	movlw	high _compartment_number
 17179  001D46  22DA               	addwfc	fsr2h,f,c
 17180  001D48  CFDE F007          	movff	postinc2,??_is_valid
 17181  001D4C  CFDD F008          	movff	postdec2,??_is_valid+1
 17182  001D50  90D8               	bcf	status,0,c
 17183  001D52  3607               	rlcf	??_is_valid,f,c
 17184  001D54  3608               	rlcf	??_is_valid+1,f,c
 17185  001D56  0E10               	movlw	low _N_array
 17186  001D58  2407               	addwf	??_is_valid,w,c
 17187  001D5A  6ED9               	movwf	fsr2l,c
 17188  001D5C  0E01               	movlw	high _N_array
 17189  001D5E  2008               	addwfc	??_is_valid+1,w,c
 17190  001D60  6EDA               	movwf	fsr2h,c
 17191  001D62  C056  FFDE         	movff	_N,postinc2
 17192  001D66  C057  FFDD         	movff	_N+1,postdec2
 17193                           
 17194                           ;keypad.c: 184: }
 17195  001D6A  0012               	return	
 17196  001D6C                     i2l1021:
 17197                           
 17198                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 17199  001D6C  0E70               	movlw	low _current_set2
 17200  001D6E  6E01               	movwf	strcmp@s1,c
 17201  001D70  0E00               	movlw	high _current_set2
 17202  001D72  6E02               	movwf	strcmp@s1+1,c
 17203  001D74  0ECA               	movlw	low STR_97
 17204  001D76  6E03               	movwf	strcmp@s2,c
 17205  001D78  0EFF               	movlw	high STR_97
 17206  001D7A  6E04               	movwf	strcmp@s2+1,c
 17207  001D7C  EC4E  F022         	call	_strcmp	;wreg free
 17208  001D80  5001               	movf	?_strcmp,w,c
 17209  001D82  1002               	iorwf	?_strcmp+1,w,c
 17210  001D84  A4D8               	btfss	status,2,c
 17211  001D86  0012               	return	
 17212                           
 17213                           ;keypad.c: 186: B = 1*number;
 17214  001D88  C075  F058         	movff	_number,_B
 17215  001D8C  C076  F059         	movff	_number+1,_B+1
 17216                           
 17217                           ;keypad.c: 187: W = 3*number;
 17218  001D90  C075  F001         	movff	_number,i2___wmul@multiplier
 17219  001D94  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 17220  001D98  0E00               	movlw	0
 17221  001D9A  6E04               	movwf	i2___wmul@multiplicand+1,c
 17222  001D9C  0E03               	movlw	3
 17223  001D9E  6E03               	movwf	i2___wmul@multiplicand,c
 17224  001DA0  EC4E  F023         	call	i2___wmul	;wreg free
 17225  001DA4  C001  F052         	movff	?i2___wmul,_W
 17226  001DA8  C002  F053         	movff	?i2___wmul+1,_W+1
 17227                           
 17228                           ;keypad.c: 188: total_number = 4*number;
 17229  001DAC  C075  F007         	movff	_number,??_is_valid
 17230  001DB0  C076  F008         	movff	_number+1,??_is_valid+1
 17231  001DB4  90D8               	bcf	status,0,c
 17232  001DB6  3607               	rlcf	??_is_valid,f,c
 17233  001DB8  3608               	rlcf	??_is_valid+1,f,c
 17234  001DBA  90D8               	bcf	status,0,c
 17235  001DBC  3607               	rlcf	??_is_valid,f,c
 17236  001DBE  3608               	rlcf	??_is_valid+1,f,c
 17237  001DC0  C007  F05A         	movff	??_is_valid,_total_number
 17238  001DC4  C008  F05B         	movff	??_is_valid+1,_total_number+1
 17239                           
 17240                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 17241  001DC8  90D8               	bcf	status,0,c
 17242  001DCA  345E               	rlcf	_counter_step,w,c
 17243  001DCC  6ED9               	movwf	fsr2l,c
 17244  001DCE  345F               	rlcf	_counter_step+1,w,c
 17245  001DD0  6EDA               	movwf	fsr2h,c
 17246  001DD2  0E42               	movlw	low _compartment_number
 17247  001DD4  26D9               	addwf	fsr2l,f,c
 17248  001DD6  0E00               	movlw	high _compartment_number
 17249  001DD8  22DA               	addwfc	fsr2h,f,c
 17250  001DDA  CFDE F007          	movff	postinc2,??_is_valid
 17251  001DDE  CFDD F008          	movff	postdec2,??_is_valid+1
 17252  001DE2  90D8               	bcf	status,0,c
 17253  001DE4  3607               	rlcf	??_is_valid,f,c
 17254  001DE6  3608               	rlcf	??_is_valid+1,f,c
 17255  001DE8  0E30               	movlw	low _B_array
 17256  001DEA  2407               	addwf	??_is_valid,w,c
 17257  001DEC  6ED9               	movwf	fsr2l,c
 17258  001DEE  0E01               	movlw	high _B_array
 17259  001DF0  2008               	addwfc	??_is_valid+1,w,c
 17260  001DF2  6EDA               	movwf	fsr2h,c
 17261  001DF4  C058  FFDE         	movff	_B,postinc2
 17262  001DF8  C059  FFDD         	movff	_B+1,postdec2
 17263                           
 17264                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 17265  001DFC  90D8               	bcf	status,0,c
 17266  001DFE  345E               	rlcf	_counter_step,w,c
 17267  001E00  6ED9               	movwf	fsr2l,c
 17268  001E02  345F               	rlcf	_counter_step+1,w,c
 17269  001E04  6EDA               	movwf	fsr2h,c
 17270  001E06  0E42               	movlw	low _compartment_number
 17271  001E08  26D9               	addwf	fsr2l,f,c
 17272  001E0A  0E00               	movlw	high _compartment_number
 17273  001E0C  22DA               	addwfc	fsr2h,f,c
 17274  001E0E  CFDE F007          	movff	postinc2,??_is_valid
 17275  001E12  CFDD F008          	movff	postdec2,??_is_valid+1
 17276  001E16  90D8               	bcf	status,0,c
 17277  001E18  3607               	rlcf	??_is_valid,f,c
 17278  001E1A  3608               	rlcf	??_is_valid+1,f,c
 17279  001E1C  0E00               	movlw	low _W_array
 17280  001E1E  2407               	addwf	??_is_valid,w,c
 17281  001E20  6ED9               	movwf	fsr2l,c
 17282  001E22  0E01               	movlw	high _W_array
 17283  001E24  2008               	addwfc	??_is_valid+1,w,c
 17284  001E26  6EDA               	movwf	fsr2h,c
 17285  001E28  C052  FFDE         	movff	_W,postinc2
 17286  001E2C  C053  FFDD         	movff	_W+1,postdec2
 17287  001E30  0012               	return	
 17288  001E32                     __end_of_is_valid:
 17289                           	opt stack 0
 17290                           pclatu	equ	0xFFB
 17291                           pclath	equ	0xFFA
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           intcon3	equ	0xFF0
 17300                           indf0	equ	0xFEF
 17301                           postinc0	equ	0xFEE
 17302                           fsr0h	equ	0xFEA
 17303                           fsr0l	equ	0xFE9
 17304                           wreg	equ	0xFE8
 17305                           indf1	equ	0xFE7
 17306                           postdec1	equ	0xFE5
 17307                           fsr1h	equ	0xFE2
 17308                           fsr1l	equ	0xFE1
 17309                           indf2	equ	0xFDF
 17310                           postinc2	equ	0xFDE
 17311                           postdec2	equ	0xFDD
 17312                           fsr2h	equ	0xFDA
 17313                           fsr2l	equ	0xFD9
 17314                           status	equ	0xFD8
 17315                           
 17316 ;; *************** function i2___wmul *****************
 17317 ;; Defined at:
 17318 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;  multiplier      2    0[COMRAM] unsigned int 
 17321 ;;  multiplicand    2    2[COMRAM] unsigned int 
 17322 ;; Auto vars:     Size  Location     Type
 17323 ;;  __wmul          2    4[COMRAM] unsigned int 
 17324 ;; Return value:  Size  Location     Type
 17325 ;;                  2    0[COMRAM] unsigned int 
 17326 ;; Registers used:
 17327 ;;		wreg, status,2, status,0, prodl, prodh
 17328 ;; Tracked objects:
 17329 ;;		On entry : 0/0
 17330 ;;		On exit  : 0/0
 17331 ;;		Unchanged: 0/0
 17332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17333 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;Total ram usage:        6 bytes
 17338 ;; Hardware stack levels used:    1
 17339 ;; This function calls:
 17340 ;;		Nothing
 17341 ;; This function is called by:
 17342 ;;		_interruptHandler
 17343 ;;		_is_valid
 17344 ;;		i2_printf
 17345 ;; This function uses a non-reentrant model
 17346 ;;
 17347                           
 17348                           	psect	text53
 17349  00469C                     __ptext53:
 17350                           	opt stack 0
 17351  00469C                     i2___wmul:
 17352                           	opt stack 24
 17353                           
 17354                           ;incstack = 0
 17355  00469C  5001               	movf	i2___wmul@multiplier,w,c
 17356  00469E  0203               	mulwf	i2___wmul@multiplicand,c
 17357  0046A0  CFF3 F005          	movff	prodl,i2___wmul@product
 17358  0046A4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 17359  0046A8  5001               	movf	i2___wmul@multiplier,w,c
 17360  0046AA  0204               	mulwf	i2___wmul@multiplicand+1,c
 17361  0046AC  50F3               	movf	prodl,w,c
 17362  0046AE  2606               	addwf	i2___wmul@product+1,f,c
 17363  0046B0  5002               	movf	i2___wmul@multiplier+1,w,c
 17364  0046B2  0203               	mulwf	i2___wmul@multiplicand,c
 17365  0046B4  50F3               	movf	prodl,w,c
 17366  0046B6  2606               	addwf	i2___wmul@product+1,f,c
 17367  0046B8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 17368  0046BC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 17369  0046C0  0012               	return	
 17370  0046C2                     __end_ofi2___wmul:
 17371                           	opt stack 0
 17372                           pclatu	equ	0xFFB
 17373                           pclath	equ	0xFFA
 17374                           tblptru	equ	0xFF8
 17375                           tblptrh	equ	0xFF7
 17376                           tblptrl	equ	0xFF6
 17377                           tablat	equ	0xFF5
 17378                           prodh	equ	0xFF4
 17379                           prodl	equ	0xFF3
 17380                           intcon	equ	0xFF2
 17381                           intcon3	equ	0xFF0
 17382                           indf0	equ	0xFEF
 17383                           postinc0	equ	0xFEE
 17384                           fsr0h	equ	0xFEA
 17385                           fsr0l	equ	0xFE9
 17386                           wreg	equ	0xFE8
 17387                           indf1	equ	0xFE7
 17388                           postdec1	equ	0xFE5
 17389                           fsr1h	equ	0xFE2
 17390                           fsr1l	equ	0xFE1
 17391                           indf2	equ	0xFDF
 17392                           postinc2	equ	0xFDE
 17393                           postdec2	equ	0xFDD
 17394                           fsr2h	equ	0xFDA
 17395                           fsr2l	equ	0xFD9
 17396                           status	equ	0xFD8
 17397                           
 17398 ;; *************** function _strcmp *****************
 17399 ;; Defined at:
 17400 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 17403 ;;		 -> current_set2(5), 
 17404 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 17405 ;;		 -> STR_97(5), STR_96(5), STR_95(5), STR_94(5), 
 17406 ;;		 -> STR_93(5), STR_92(5), STR_91(5), STR_90(4), 
 17407 ;;		 -> STR_89(4), STR_88(4), STR_87(4), STR_86(4), 
 17408 ;;		 -> STR_85(4), STR_84(3), STR_83(3), STR_82(3), 
 17409 ;;		 -> STR_81(2), STR_80(2), STR_79(2), STR_78(2), 
 17410 ;; Auto vars:     Size  Location     Type
 17411 ;;  r               1    5[COMRAM] char 
 17412 ;; Return value:  Size  Location     Type
 17413 ;;                  2    0[COMRAM] int 
 17414 ;; Registers used:
 17415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17416 ;; Tracked objects:
 17417 ;;		On entry : 0/0
 17418 ;;		On exit  : 0/0
 17419 ;;		Unchanged: 0/0
 17420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17425 ;;Total ram usage:        6 bytes
 17426 ;; Hardware stack levels used:    1
 17427 ;; This function calls:
 17428 ;;		Nothing
 17429 ;; This function is called by:
 17430 ;;		_is_valid
 17431 ;; This function uses a non-reentrant model
 17432 ;;
 17433                           
 17434                           	psect	text54
 17435  00449C                     __ptext54:
 17436                           	opt stack 0
 17437  00449C                     _strcmp:
 17438                           	opt stack 24
 17439                           
 17440                           ;incstack = 0
 17441  00449C  D004               	goto	i2l1806
 17442  00449E  4A01               	infsnz	strcmp@s1,f,c
 17443  0044A0  2A02               	incf	strcmp@s1+1,f,c
 17444  0044A2  4A03               	infsnz	strcmp@s2,f,c
 17445  0044A4  2A04               	incf	strcmp@s2+1,f,c
 17446  0044A6                     i2l1806:
 17447  0044A6  C001  FFD9         	movff	strcmp@s1,fsr2l
 17448  0044AA  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 17449  0044AE  50DF               	movf	indf2,w,c
 17450  0044B0  6E05               	movwf	??_strcmp& (0+255),c
 17451  0044B2  C003  FFF6         	movff	strcmp@s2,tblptrl
 17452  0044B6  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 17453  0044BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17454  0044BA  6AF8               	clrf	tblptru,c
 17455  0044BC                     	endif
 17456  0044BC                     	if	0	;tblptru may be non-zero
 17457  0044BC                     	endif
 17458  0044BC  0008               	tblrd		*
 17459  0044BE  50F5               	movf	tablat,w,c
 17460  0044C0  0800               	sublw	0
 17461  0044C2  2405               	addwf	??_strcmp,w,c
 17462  0044C4  6E06               	movwf	strcmp@r,c
 17463  0044C6  5006               	movf	strcmp@r,w,c
 17464  0044C8  A4D8               	btfss	status,2,c
 17465  0044CA  D007               	goto	i2u378_40
 17466  0044CC  C001  FFD9         	movff	strcmp@s1,fsr2l
 17467  0044D0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 17468  0044D4  50DF               	movf	indf2,w,c
 17469  0044D6  A4D8               	btfss	status,2,c
 17470  0044D8  D7E2               	goto	i2l1807
 17471  0044DA                     i2u378_40:
 17472  0044DA  5006               	movf	strcmp@r,w,c
 17473  0044DC  6E01               	movwf	?_strcmp,c
 17474  0044DE  6A02               	clrf	?_strcmp+1,c
 17475  0044E0  BE01               	btfsc	?_strcmp,7,c
 17476  0044E2  0602               	decf	?_strcmp+1,f,c
 17477  0044E4  0012               	return	
 17478  0044E6                     __end_of_strcmp:
 17479                           	opt stack 0
 17480                           pclatu	equ	0xFFB
 17481                           pclath	equ	0xFFA
 17482                           tblptru	equ	0xFF8
 17483                           tblptrh	equ	0xFF7
 17484                           tblptrl	equ	0xFF6
 17485                           tablat	equ	0xFF5
 17486                           prodh	equ	0xFF4
 17487                           prodl	equ	0xFF3
 17488                           intcon	equ	0xFF2
 17489                           intcon3	equ	0xFF0
 17490                           indf0	equ	0xFEF
 17491                           postinc0	equ	0xFEE
 17492                           fsr0h	equ	0xFEA
 17493                           fsr0l	equ	0xFE9
 17494                           wreg	equ	0xFE8
 17495                           indf1	equ	0xFE7
 17496                           postdec1	equ	0xFE5
 17497                           fsr1h	equ	0xFE2
 17498                           fsr1l	equ	0xFE1
 17499                           indf2	equ	0xFDF
 17500                           postinc2	equ	0xFDE
 17501                           postdec2	equ	0xFDD
 17502                           fsr2h	equ	0xFDA
 17503                           fsr2l	equ	0xFD9
 17504                           status	equ	0xFD8
 17505                           
 17506 ;; *************** function _check *****************
 17507 ;; Defined at:
 17508 ;;		line 208 in file "keypad.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;		None
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  2    0[COMRAM] int 
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, status,0
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:        2 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; This function calls:
 17529 ;;		Nothing
 17530 ;; This function is called by:
 17531 ;;		_interruptHandler
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           	psect	text55
 17536  00423E                     __ptext55:
 17537                           	opt stack 0
 17538  00423E                     _check:
 17539                           	opt stack 25
 17540                           
 17541                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 17542                           
 17543                           ;incstack = 0
 17544  00423E  BE59               	btfsc	_B+1,7,c
 17545  004240  D006               	goto	i2u446_40
 17546  004242  5059               	movf	_B+1,w,c
 17547  004244  E124               	bnz	i2l5773
 17548  004246  0E03               	movlw	3
 17549  004248  5C58               	subwf	_B,w,c
 17550  00424A  B0D8               	btfsc	status,0,c
 17551  00424C  D020               	goto	i2u450_40
 17552  00424E                     i2u446_40:
 17553  00424E  BE57               	btfsc	_N+1,7,c
 17554  004250  D006               	goto	i2u447_40
 17555  004252  5057               	movf	_N+1,w,c
 17556  004254  E11C               	bnz	i2l5773
 17557  004256  0E04               	movlw	4
 17558  004258  5C56               	subwf	_N,w,c
 17559  00425A  B0D8               	btfsc	status,0,c
 17560  00425C  D018               	goto	i2u450_40
 17561  00425E                     i2u447_40:
 17562  00425E  BE55               	btfsc	_S+1,7,c
 17563  004260  D006               	goto	i2u448_40
 17564  004262  5055               	movf	_S+1,w,c
 17565  004264  E114               	bnz	i2l5773
 17566  004266  0E03               	movlw	3
 17567  004268  5C54               	subwf	_S,w,c
 17568  00426A  B0D8               	btfsc	status,0,c
 17569  00426C  D010               	goto	i2u450_40
 17570  00426E                     i2u448_40:
 17571  00426E  BE53               	btfsc	_W+1,7,c
 17572  004270  D006               	goto	i2u449_40
 17573  004272  5053               	movf	_W+1,w,c
 17574  004274  E10C               	bnz	i2l5773
 17575  004276  0E05               	movlw	5
 17576  004278  5C52               	subwf	_W,w,c
 17577  00427A  B0D8               	btfsc	status,0,c
 17578  00427C  D008               	goto	i2u450_40
 17579  00427E                     i2u449_40:
 17580  00427E  BE5B               	btfsc	_total_number+1,7,c
 17581  004280  D00B               	goto	i2l1027
 17582  004282  505B               	movf	_total_number+1,w,c
 17583  004284  E104               	bnz	i2l5773
 17584  004286  0E05               	movlw	5
 17585  004288  5C5A               	subwf	_total_number,w,c
 17586  00428A  A0D8               	btfss	status,0,c
 17587  00428C  D005               	goto	i2l1027
 17588  00428E                     i2u450_40:
 17589  00428E                     i2l5773:
 17590                           
 17591                           ;keypad.c: 213: return 0;
 17592  00428E  0E00               	movlw	0
 17593  004290  6E02               	movwf	?_check+1,c
 17594  004292  0E00               	movlw	0
 17595  004294  6E01               	movwf	?_check,c
 17596  004296  0012               	return	
 17597  004298                     i2l1027:
 17598                           
 17599                           ;keypad.c: 214: }
 17600                           ;keypad.c: 215: return 1;
 17601  004298  0E00               	movlw	0
 17602  00429A  6E02               	movwf	?_check+1,c
 17603  00429C  0E01               	movlw	1
 17604  00429E  6E01               	movwf	?_check,c
 17605  0042A0  0012               	return	
 17606  0042A2                     __end_of_check:
 17607                           	opt stack 0
 17608                           pclatu	equ	0xFFB
 17609                           pclath	equ	0xFFA
 17610                           tblptru	equ	0xFF8
 17611                           tblptrh	equ	0xFF7
 17612                           tblptrl	equ	0xFF6
 17613                           tablat	equ	0xFF5
 17614                           prodh	equ	0xFF4
 17615                           prodl	equ	0xFF3
 17616                           intcon	equ	0xFF2
 17617                           intcon3	equ	0xFF0
 17618                           indf0	equ	0xFEF
 17619                           postinc0	equ	0xFEE
 17620                           fsr0h	equ	0xFEA
 17621                           fsr0l	equ	0xFE9
 17622                           wreg	equ	0xFE8
 17623                           indf1	equ	0xFE7
 17624                           postdec1	equ	0xFE5
 17625                           fsr1h	equ	0xFE2
 17626                           fsr1l	equ	0xFE1
 17627                           indf2	equ	0xFDF
 17628                           postinc2	equ	0xFDE
 17629                           postdec2	equ	0xFDD
 17630                           fsr2h	equ	0xFDA
 17631                           fsr2l	equ	0xFD9
 17632                           status	equ	0xFD8
 17633                           
 17634 ;; *************** function ___awmod *****************
 17635 ;; Defined at:
 17636 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 17637 ;; Parameters:    Size  Location     Type
 17638 ;;  dividend        2    0[COMRAM] int 
 17639 ;;  divisor         2    2[COMRAM] int 
 17640 ;; Auto vars:     Size  Location     Type
 17641 ;;  sign            1    5[COMRAM] unsigned char 
 17642 ;;  counter         1    4[COMRAM] unsigned char 
 17643 ;; Return value:  Size  Location     Type
 17644 ;;                  2    0[COMRAM] int 
 17645 ;; Registers used:
 17646 ;;		wreg, status,2, status,0
 17647 ;; Tracked objects:
 17648 ;;		On entry : 0/0
 17649 ;;		On exit  : 0/0
 17650 ;;		Unchanged: 0/0
 17651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;Total ram usage:        6 bytes
 17657 ;; Hardware stack levels used:    1
 17658 ;; This function calls:
 17659 ;;		Nothing
 17660 ;; This function is called by:
 17661 ;;		_interruptHandler
 17662 ;; This function uses a non-reentrant model
 17663 ;;
 17664                           
 17665                           	psect	text56
 17666  0041CE                     __ptext56:
 17667                           	opt stack 0
 17668  0041CE                     ___awmod:
 17669                           	opt stack 25
 17670                           
 17671                           ;incstack = 0
 17672  0041CE  0E00               	movlw	0
 17673  0041D0  6E06               	movwf	___awmod@sign,c
 17674  0041D2  AE02               	btfss	___awmod@dividend+1,7,c
 17675  0041D4  D006               	goto	i2l1425
 17676  0041D6  6C01               	negf	___awmod@dividend,c
 17677  0041D8  1E02               	comf	___awmod@dividend+1,f,c
 17678  0041DA  B0D8               	btfsc	status,0,c
 17679  0041DC  2A02               	incf	___awmod@dividend+1,f,c
 17680  0041DE  0E01               	movlw	1
 17681  0041E0  6E06               	movwf	___awmod@sign,c
 17682  0041E2                     i2l1425:
 17683  0041E2  AE04               	btfss	___awmod@divisor+1,7,c
 17684  0041E4  D004               	goto	i2l1426
 17685  0041E6  6C03               	negf	___awmod@divisor,c
 17686  0041E8  1E04               	comf	___awmod@divisor+1,f,c
 17687  0041EA  B0D8               	btfsc	status,0,c
 17688  0041EC  2A04               	incf	___awmod@divisor+1,f,c
 17689  0041EE                     i2l1426:
 17690  0041EE  5003               	movf	___awmod@divisor,w,c
 17691  0041F0  1004               	iorwf	___awmod@divisor+1,w,c
 17692  0041F2  B4D8               	btfsc	status,2,c
 17693  0041F4  D018               	goto	i2l1433
 17694  0041F6  0E01               	movlw	1
 17695  0041F8  6E05               	movwf	___awmod@counter,c
 17696  0041FA  D004               	goto	i2l1428
 17697  0041FC  90D8               	bcf	status,0,c
 17698  0041FE  3603               	rlcf	___awmod@divisor,f,c
 17699  004200  3604               	rlcf	___awmod@divisor+1,f,c
 17700  004202  2A05               	incf	___awmod@counter,f,c
 17701  004204                     i2l1428:
 17702  004204  AE04               	btfss	___awmod@divisor+1,7,c
 17703  004206  D7FA               	goto	i2l1429
 17704  004208                     i2u461_40:
 17705  004208  5003               	movf	___awmod@divisor,w,c
 17706  00420A  5C01               	subwf	___awmod@dividend,w,c
 17707  00420C  5004               	movf	___awmod@divisor+1,w,c
 17708  00420E  5802               	subwfb	___awmod@dividend+1,w,c
 17709  004210  A0D8               	btfss	status,0,c
 17710  004212  D004               	goto	i2l1432
 17711  004214  5003               	movf	___awmod@divisor,w,c
 17712  004216  5E01               	subwf	___awmod@dividend,f,c
 17713  004218  5004               	movf	___awmod@divisor+1,w,c
 17714  00421A  5A02               	subwfb	___awmod@dividend+1,f,c
 17715  00421C                     i2l1432:
 17716  00421C  90D8               	bcf	status,0,c
 17717  00421E  3204               	rrcf	___awmod@divisor+1,f,c
 17718  004220  3203               	rrcf	___awmod@divisor,f,c
 17719  004222  2E05               	decfsz	___awmod@counter,f,c
 17720  004224  D7F1               	goto	i2u461_40
 17721  004226                     i2l1433:
 17722  004226  5006               	movf	___awmod@sign,w,c
 17723  004228  B4D8               	btfsc	status,2,c
 17724  00422A  D004               	goto	i2l1434
 17725  00422C  6C01               	negf	___awmod@dividend,c
 17726  00422E  1E02               	comf	___awmod@dividend+1,f,c
 17727  004230  B0D8               	btfsc	status,0,c
 17728  004232  2A02               	incf	___awmod@dividend+1,f,c
 17729  004234                     i2l1434:
 17730  004234  C001  F001         	movff	___awmod@dividend,?___awmod
 17731  004238  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 17732  00423C  0012               	return	
 17733  00423E                     __end_of___awmod:
 17734                           	opt stack 0
 17735                           pclatu	equ	0xFFB
 17736                           pclath	equ	0xFFA
 17737                           tblptru	equ	0xFF8
 17738                           tblptrh	equ	0xFF7
 17739                           tblptrl	equ	0xFF6
 17740                           tablat	equ	0xFF5
 17741                           prodh	equ	0xFF4
 17742                           prodl	equ	0xFF3
 17743                           intcon	equ	0xFF2
 17744                           intcon3	equ	0xFF0
 17745                           indf0	equ	0xFEF
 17746                           postinc0	equ	0xFEE
 17747                           fsr0h	equ	0xFEA
 17748                           fsr0l	equ	0xFE9
 17749                           wreg	equ	0xFE8
 17750                           indf1	equ	0xFE7
 17751                           postdec1	equ	0xFE5
 17752                           fsr1h	equ	0xFE2
 17753                           fsr1l	equ	0xFE1
 17754                           indf2	equ	0xFDF
 17755                           postinc2	equ	0xFDE
 17756                           postdec2	equ	0xFDD
 17757                           fsr2h	equ	0xFDA
 17758                           fsr2l	equ	0xFD9
 17759                           status	equ	0xFD8
 17760                           pclatu	equ	0xFFB
 17761                           pclath	equ	0xFFA
 17762                           tblptru	equ	0xFF8
 17763                           tblptrh	equ	0xFF7
 17764                           tblptrl	equ	0xFF6
 17765                           tablat	equ	0xFF5
 17766                           prodh	equ	0xFF4
 17767                           prodl	equ	0xFF3
 17768                           intcon	equ	0xFF2
 17769                           intcon3	equ	0xFF0
 17770                           indf0	equ	0xFEF
 17771                           postinc0	equ	0xFEE
 17772                           fsr0h	equ	0xFEA
 17773                           fsr0l	equ	0xFE9
 17774                           wreg	equ	0xFE8
 17775                           indf1	equ	0xFE7
 17776                           postdec1	equ	0xFE5
 17777                           fsr1h	equ	0xFE2
 17778                           fsr1l	equ	0xFE1
 17779                           indf2	equ	0xFDF
 17780                           postinc2	equ	0xFDE
 17781                           postdec2	equ	0xFDD
 17782                           fsr2h	equ	0xFDA
 17783                           fsr2l	equ	0xFD9
 17784                           status	equ	0xFD8
 17785                           
 17786                           	psect	rparam
 17787  0000                     pclatu	equ	0xFFB
 17788                           pclath	equ	0xFFA
 17789                           tblptru	equ	0xFF8
 17790                           tblptrh	equ	0xFF7
 17791                           tblptrl	equ	0xFF6
 17792                           tablat	equ	0xFF5
 17793                           prodh	equ	0xFF4
 17794                           prodl	equ	0xFF3
 17795                           intcon	equ	0xFF2
 17796                           intcon3	equ	0xFF0
 17797                           indf0	equ	0xFEF
 17798                           postinc0	equ	0xFEE
 17799                           fsr0h	equ	0xFEA
 17800                           fsr0l	equ	0xFE9
 17801                           wreg	equ	0xFE8
 17802                           indf1	equ	0xFE7
 17803                           postdec1	equ	0xFE5
 17804                           fsr1h	equ	0xFE2
 17805                           fsr1l	equ	0xFE1
 17806                           indf2	equ	0xFDF
 17807                           postinc2	equ	0xFDE
 17808                           postdec2	equ	0xFDD
 17809                           fsr2h	equ	0xFDA
 17810                           fsr2l	equ	0xFD9
 17811                           status	equ	0xFD8
 17812                           
 17813                           	psect	temp
 17814  00007F                     btemp:
 17815                           	opt stack 0
 17816  00007F                     	ds	1
 17817  0000                     int$flags	set	btemp
 17818  0000                     wtemp6	set	btemp+1
 17819                           pclatu	equ	0xFFB
 17820                           pclath	equ	0xFFA
 17821                           tblptru	equ	0xFF8
 17822                           tblptrh	equ	0xFF7
 17823                           tblptrl	equ	0xFF6
 17824                           tablat	equ	0xFF5
 17825                           prodh	equ	0xFF4
 17826                           prodl	equ	0xFF3
 17827                           intcon	equ	0xFF2
 17828                           intcon3	equ	0xFF0
 17829                           indf0	equ	0xFEF
 17830                           postinc0	equ	0xFEE
 17831                           fsr0h	equ	0xFEA
 17832                           fsr0l	equ	0xFE9
 17833                           wreg	equ	0xFE8
 17834                           indf1	equ	0xFE7
 17835                           postdec1	equ	0xFE5
 17836                           fsr1h	equ	0xFE2
 17837                           fsr1l	equ	0xFE1
 17838                           indf2	equ	0xFDF
 17839                           postinc2	equ	0xFDE
 17840                           postdec2	equ	0xFDD
 17841                           fsr2h	equ	0xFDA
 17842                           fsr2l	equ	0xFD9
 17843                           status	equ	0xFD8


Data Sizes:
    Strings     681
    Constant    227
    Data        24
    BSS         552
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     52     128
    BANK1           256      0     239
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$2288	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_57(CODE[1]), STR_55(CODE[1]), STR_52(CODE[1]), STR_49(CODE[2]), 
		 -> STR_48(CODE[2]), STR_47(CODE[2]), STR_46(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_97(CODE[5]), STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), 
		 -> STR_93(CODE[5]), STR_92(CODE[5]), STR_91(CODE[5]), STR_90(CODE[4]), 
		 -> STR_89(CODE[4]), STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), 
		 -> STR_85(CODE[4]), STR_84(CODE[3]), STR_83(CODE[3]), STR_82(CODE[3]), 
		 -> STR_81(CODE[2]), STR_80(CODE[2]), STR_79(CODE[2]), STR_78(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_98(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[5]), STR_74(CODE[5]), 
		 -> STR_73(CODE[19]), STR_72(CODE[20]), STR_71(CODE[20]), STR_70(CODE[20]), 
		 -> STR_69(CODE[5]), STR_68(CODE[5]), STR_67(CODE[5]), STR_66(CODE[5]), 
		 -> STR_65(CODE[3]), STR_64(CODE[19]), STR_63(CODE[19]), STR_62(CODE[14]), 
		 -> STR_61(CODE[15]), STR_60(CODE[9]), STR_59(CODE[12]), STR_58(CODE[14]), 
		 -> STR_56(CODE[7]), STR_54(CODE[3]), STR_53(CODE[11]), STR_51(CODE[3]), 
		 -> STR_50(CODE[9]), STR_45(CODE[15]), STR_44(CODE[5]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[14]), STR_40(CODE[15]), STR_39(CODE[12]), 
		 -> STR_38(CODE[12]), STR_37(CODE[17]), STR_36(CODE[13]), STR_35(CODE[16]), 
		 -> STR_34(CODE[15]), STR_33(CODE[15]), STR_32(CODE[15]), STR_31(CODE[15]), 
		 -> STR_30(CODE[9]), STR_29(CODE[10]), STR_28(CODE[19]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[14]), STR_23(CODE[15]), 
		 -> STR_22(CODE[11]), STR_21(CODE[11]), STR_20(CODE[9]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[12]), STR_16(CODE[7]), STR_15(CODE[16]), 
		 -> STR_14(CODE[18]), STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[17]), 
		 -> STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), 
		 -> STR_2(CODE[20]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_Bolt_dispense
    _main->_Bolt_remain
    _main->_Nut_dispense
    _main->_Nut_remain
    _main->_Spacer_dispense
    _main->_Spacer_remain
    _main->_Washer_dispense
    _main->_Washer_remain
    _initLCD->_lcdInst
    _Washer_remain->_printf
    _Washer_dispense->_printf
    _Spacer_remain->_printf
    _Spacer_dispense->_printf
    _Nut_remain->_printf
    _Nut_dispense->_printf
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _I2C_Master_Read->_I2C_Master_Wait
    _Bolt_remain->_printf
    _Bolt_dispense->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  132415
                                             46 BANK0      6     6      0
                      _Bolt_dispense
                        _Bolt_remain
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_init
                       _I2C_sendData
                       _Nut_dispense
                         _Nut_remain
                    _Spacer_dispense
                      _Spacer_remain
                    _Washer_dispense
                      _Washer_remain
                            ___awdiv
                             ___wmul
         _generate_compartment_array
                            _initLCD
                       _initVibTimer
                         _initialize
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initVibTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     224
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2224
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Washer_remain                                        4     2      2   13369
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Washer_dispense                                      4     2      2   13391
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_remain                                        4     2      2   13369
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_dispense                                      4     2      2   13391
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_remain                                           4     2      2   13369
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_dispense                                         4     2      2   13391
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0    2962
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     664
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _Bolt_remain                                          4     2      2   13369
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Bolt_dispense                                        4     2      2   13391
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    22     10   10816
                                             14 BANK0     28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3993
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_sendData                                         1     1      0    2320
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2298
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interruptHandler                                    27    27      0   13532
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            30    22      8    3544
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bolt_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Bolt_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_init
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Nut_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Nut_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   ___awdiv
   ___wmul
     ___awdiv (ARG)
   _generate_compartment_array
   _initLCD
     _lcdInst
       _lcdNibble
   _initVibTimer
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      EF       7       93.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     34      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B5      34        0.0%
DATA                 0      0     2B5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 12:00:21 2018

                                    _B 0058                                      _N 0056  
                                    _S 0054                                      _W 0052  
                                    _i 00BB                                      _j 006B  
                   i2_I2C_Master_Start 47F6                     i2_I2C_Master_Write 47CC  
                          _rotate_gear 00FF                            __CFG_CPD$ON 000000  
                         ___awdiv@sign 00CB                    ___wmul@multiplicand 00D0  
                   i2___lwdiv@dividend 0001                            __CFG_BORV$3 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  l501 2130                                    l511 2500  
                                  l520 24CA                                    l512 238C  
                                  l521 24F4                                    l514 2422  
                                  l515 2448                                    l532 28FA  
                                  l516 246E                                    l508 233C  
                                  l517 2494                                    l509 231C  
                                  l526 2568                                    l527 257C  
                                  l616 3848                                    l528 2590  
                                  l529 25A4                                    l490 1EDC  
                                  l492 22AE                                    l661 3E06  
                                  l493 1EE8                                    l662 3DC2  
                                  l670 3CDA                                    l494 1F36  
                                  l486 1E70                                    l735 3ADE  
                                  l671 3C96                                    l495 1F86  
                                  l736 3A92                                    l744 3A26  
                                  l680 3BFA                                    l496 1FBC  
                                  l745 39DA                                    l753 396E  
                                  l497 20E8                                    l754 3922  
                                  l762 38B6                                    l498 20D4  
                                  l763 386A                                    l499 2008  
                                  l679 3C3E                                    l688 3BA2  
                                  l689 3B5E                           __CFG_CPB$OFF 000000  
                                  _RED FCB5                    ?i2_I2C_Master_Start 0001  
                  ?i2_I2C_Master_Write 0002                        _compartment_pos 018C  
                         ___awmod@sign 0006                                    prod 000FF3  
                        _assembly_step 00AF                                    wreg 000FE8  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1040 3686                                   l1201 2B22  
                                 l1033 36C8                                   l1210 2BEC  
                                 l1034 349A                                   l1203 2B32  
                                 l1204 2B2C                                   l1036 34DE  
                                 l1213 2C72                                   l1037 3530  
                                 l1214 2C06                                   l1206 2B72  
                                 l1038 3592                                   l1223 2C9C  
                                 l1207 2B46                                   l1039 3604  
                                 l1240 2DE4                                   l1224 2CC0  
                                 l1241 2D7E                                   l1225 2CC8  
                                 l1226 2CF8                                   l1218 2C82  
                                 l1235 2D28                                   l1227 2CDE  
                                 l1219 2C3C                                   l1236 2DEA  
                                 l1420 3F20                                   l1412 3EC8  
                                 l1181 29FE                                   l1421 3F2E  
                                 l1413 3ED8                                   l1238 2DD2  
                                 l1182 29F6                                   l1239 2D2E  
                                 l1415 3EF6                                   l1600 4074  
                                 l1416 3EEE                                   l1601 4068  
                                 l1194 2BBC                                   l1178 29D6  
                                 l1195 2A98                                   l1187 2A32  
                                 l1179 29E6                                   l1419 3F16  
                                 l1196 2A9E                                   l1604 40A8  
                                 l1189 2B84                                   l1197 2AC6  
                                 l1605 40B6                                   l1198 2AD6  
                                 l1199 2AD0                                   l1653 437E  
                                 l5013 2B2C                                   l1654 4376  
                                 l1574 4700                                   l1663 4544  
                                 l1664 453C                                   l1657 439E  
                                 l5017 2B46                                   l1658 43A8  
                                 l1667 455C                                   l5043 2C0A  
                                 l1668 4566                                   l5057 2C40  
                                 l6309 21A8                                   l6425 2516  
                                 l5491 379A                                   l6419 24FC  
                                 l6471 262C                                   l6481 2654  
                                 l6299 2180                                   _ADON 007E10  
                                 STR_1 FE41                                   STR_2 FD6A  
                                 STR_3 FE70                                   STR_4 FED8  
                                 STR_5 FFF8                                   STR_6 FF8F  
                                 STR_7 FE0F                                   STR_8 FFE3  
                                 STR_9 FFD1                                   _BLUE FCA5  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4010 3C5A  
                                 u4120 398A                                   u4040 3BBE  
                                 u3305 3EAE                                   u3306 3EB0  
                                 u3420 4548                                   u3500 2B04  
                                 u4060 3A42                                   u4150 3AFA  
                                 u3360 4078                                   u4090 38D2  
                                 u3507 2AFA                                   _GREY FCBD  
                                 u3540 2B68                                   u5300 24FC  
                                 u3390 4382                                   u3710 2D00  
                                 u3295 3E6A                                   u3296 3E6C  
                                 u3720 2D16                                   u5320 2516  
                                 u5080 1E7A                                   u3547 2B5E  
                                 u3740 2DF4                                   u4550 3EFA  
                                 u5190 21A8                                   u7007 474E  
                                 _RBIE 007F93                                   u5280 24C2  
                                 _RBIF 007F90                                   u7017 3E50  
                                 u7027 3E5A                                   u5380 2654  
                                 u7037 3E94                                   u3925 4642  
                                 u3765 42D8                                   u3950 3E22  
                                 u3926 4644                                   u7047 3E9E  
                                 u6407 1FEE                                   u6417 20BC  
                                 u6507 25DA                                   u6427 2100  
                                 u6347 1EA6                                   u3980 3CF6  
                                 u6517 2752                                   u6437 2124  
                                 u6357 1EC0                                   u6607 2872  
                                 u6527 276E                                   u6447 22DA  
                                 u6367 1F00                                   u6617 2888  
                                 u6537 279A                                   u6457 2366  
                                 u6377 1F24                                   u6707 4440  
                                 u6627 28B4                                   u6547 27B6  
                                 u6467 23B6                                   u6387 1F7A  
                                 u6717 3856                                   u6637 28D0  
                                 u6557 27CC                                   u6477 2528  
                                 u6397 1FB0                                   u6807 3946  
                                 u6727 3878                                   u6647 28E6  
                                 u6567 27F8                                   u6487 2548  
                                 u6817 39AC                                   u6737 388E  
                                 u6657 2932                                   u6577 2814  
                                 u6497 25B6                                   u6907 3CA4  
                                 u6827 3BDC                                   u6747 38F4  
                                 u6667 2952                                   u6587 282A  
                                 u6917 3CBC                                   u6837 3C08  
                                 u6757 3B40                                   u6677 298A  
                                 u6597 2856                                   u6927 3A7E  
                                 u6847 3C20                                   u6767 3B6C  
                                 u6687 29A4                                   u6937 3AA0  
                                 u6857 39C6                                   u6777 3B82  
                                 u6697 440C                                   u6947 3AB8  
                                 u6867 39E8                                   u6787 390E  
                                 u6957 3B1C                                   u6877 39FE  
                                 u6797 3930                                   u6967 3DAE  
                                 u6887 3A64                                   u6977 3DD0  
                                 u6897 3C78                                   u6987 3DE6  
                                 u6997 4736                                   _main 1E32  
             __end_of_interruptHandler 0FE2                                   _mode 00B7  
                                 _keys FC73                                   _temp 006E  
                                 _time 0090                                   _prev 0064  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 007F                                   _strs FCF2  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                     __end_of_I2C_init 4622                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 4792  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                          i2_lcdNibble 3F38                    __end_of_Bolt_remain 3B2A  
                     __end_of_LCD_LEFT FCED                           _total_number 005A  
                I2C_Master_Read@ackBit 00C7                       ?_I2C_Master_Init 00D3  
                     ?_I2C_Master_Read 0001       i2generate_compartment_array@step 0001  
       generate_compartment_array@step 00C6                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                      __end_of___awdiv 3F38                                  _BLACK FCC1  
                                _EEADR 000FA9                                  STR_10 FE3F  
                                STR_11 FFF8                                  STR_12 FFFB  
                                STR_20 FF7D                                  STR_13 FFD1  
                                STR_21 FF4B                                  STR_22 FF4B  
                                STR_30 FF86                                  STR_14 FDCA  
                                STR_31 FEAC                                  STR_23 FE7F  
                                STR_15 FE51                                  STR_40 FE7F  
                                STR_16 FFA5                                  STR_24 FEE6  
                                STR_32 FEBB                                  STR_41 FEE6  
                                STR_33 FEAC                                  STR_17 FF0F  
                                STR_25 FDED                                  STR_42 FDED  
                                STR_34 FEBB                                  STR_50 FF6B  
                                STR_18 FF33                                  STR_26 FDFE  
                                STR_43 FDFE                                  STR_51 FFF8  
                                STR_19 FE8E                                  STR_35 FE31  
                                STR_27 FE20                                  STR_52 FE6F  
                                STR_44 FFDE                                  STR_60 FF74  
                                STR_36 FF02                                  STR_28 FDA4  
                      __end_of___awmod 423E                                  STR_37 FE0F  
                                STR_29 FF61                                  STR_53 FF56  
                                STR_61 FE9D                                  STR_45 FE61  
                                STR_54 FFF8                                  STR_46 FFFD  
                                STR_38 FF1B                                  STR_62 FEF4  
                                STR_70 FD56                                  STR_55 FE6F  
                                STR_47 FFEA                                  STR_39 FF27  
                                STR_63 FD7E                                  STR_80 FFEE  
                                STR_48 FFEE                                  STR_56 FF9E  
                                STR_64 FD91                                  STR_57 FE6F  
                                STR_81 FFF2                                  STR_49 FFF2  
                                STR_73 FDB7                                  STR_82 FFE9  
                                STR_74 FFCF                                  STR_90 FFF4  
                                STR_66 FFCF                                  STR_58 FECA  
                                STR_83 FFED                                  STR_75 FFD4  
                                STR_67 FFD4                                  STR_91 FFC0  
                                STR_59 FF3F                                  STR_84 FFF1  
                                STR_76 FFD9                                  STR_68 FFD9  
                                STR_92 FFC5                                  STR_77 FD65  
                                STR_69 FD65                                  STR_85 FFE8  
                                STR_93 FFBB                                  STR_78 FFFD  
                                STR_86 FFEC                                  STR_94 FFB1  
                                STR_79 FFEA                                  STR_87 FFF0  
                                STR_95 FFB6                                  STR_88 FFB2  
                                STR_96 FFAC                                  STR_89 FFBC  
                                STR_97 FFCA                                  STR_98 FF97  
                                STR_99 FDDC                        __end_of___lldiv 40C8  
                     __end_of_INST_NOP FCE8                        ___awdiv@divisor 00C8  
                                _GREEN FCA9                        __end_of___lwdiv 43B2  
                      __end_of___lwmod 4570                                  i2l601 0DAC  
                                i2l610 0F84                                  i2l611 0F94  
                                i2l603 0DE0                                  i2l604 0F70  
                                i2l605 0E9C                                  i2l606 0EDA  
                                i2l607 0F16                                  i2l551 01CA  
                                i2l543 0E0C                                  i2l608 0F54  
                                i2l609 0F96                                  i2l553 02EE  
                                i2l545 01AE                                  i2l570 07BA  
                                i2l562 0692                                  i2l554 01F2  
                                i2l546 00B0                                  i2l563 0838  
                                i2l580 099A                                  i2l572 0802  
                                i2l564 06E2                                  i2l556 0242  
                                i2l548 0100                                  i2l573 082A  
                                i2l590 0C34                                  i2l574 0B56  
                                i2l582 0A82                                  i2l566 072A  
                                i2l558 0428                                  i2l591 0CC2  
                                i2l583 0AF8                                  i2l575 0882  
                                i2l559 0676                                  i2l592 0C3C  
                                i2l576 08C2                                  i2l568 0772  
                                i2l593 0C44                                  i2l577 0902  
                                i2l594 0C4C                                  i2l578 0942  
                                i2l595 0C54                                  i2l579 0B00  
                                i2l596 0C5E                                  i2l597 0D22  
                                i2l589 0C88                                  i2l599 0D74  
                      ___awdiv@counter 00CA                                  i2l991 116A  
                                i2l993 120A                                  i2l985 1044  
                                i2l995 12AA                                  i2l987 10A6  
                                i2l997 134A                                  i2l989 1108  
                                i2l999 13FE                                  _PORTB 000F81  
                                _WHITE FCB9                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _B_max 01EB                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                                  _N_max 01E9  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4756  
                        _N_spacingTime 009B                                  _S_max 01E7  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _W_max 01E5  
              __end_of_Washer_dispense 3BC6                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_initLCD 4450                                  _check 423E  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _angle 018E                        __end_of_dpowers FC8E  
                                _array FCC5                                  _error 018A  
                      __end_of_isdigit 4708                                  _valid 005C  
                                _state 00B1                                  _putch 4726  
                    _compartment_array 0080                                  pclath 000FFA  
                                tablat 000FF5                      _LCDinterruptState 00C0  
                     __end_ofi2___wmul 46C2                                  status 000FD8  
          I2C_Master_Read@receivedByte 00C8                                  wtemp6 0080  
                      __end_of_strncmp 4044                     __size_ofi2___awdiv 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0024  
                __size_of_I2C_sendData 0028                     __size_ofi2___lldiv 0082  
                     __end_ofi2_printf 322C                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                           __end_of_BLUE FCA9  
                         __end_of_GREY FCC1                        __initialization 3CFE  
                    i2___lldiv@divisor 0005                     __size_ofi2_lcdInst 0014  
                         __end_of_main 29CA                      i2___lldiv@counter 000D  
                         __end_of_keys FC84                             i2printf@ap 001D  
                           i2printf@cp 001B                           __end_of_strs FD56  
                   __size_ofi2_initLCD 004C                     __size_ofi2_isdigit 001E  
             __size_of_Spacer_dispense 009C                      __end_of_LCD_RIGHT FCEE  
                               ??_main 00F4                          ?_initVibTimer 0001  
                        __activetblptr 000003                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 00C7                  __end_of_Spacer_remain 39BA  
                               ?_check 0001                     ??_I2C_Master_Start 00C7  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 00C9                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 00C6  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
                         _I2C_sendData 4674                        Bolt_remain@time 00F0  
                    __end_of_INST_TEON FCD8                        i2lcdNibble@temp 0001  
                               _INDIGO FCA1                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 i2l1001 14B2  
                               i2l1011 18E6                                 i2l1003 1566  
                               i2l1021 1D6C                                 i2l1013 19D6  
                               i2l1005 1654                                 i2l1015 1AC6  
                               i2l1007 1742                                 i2l1040 3422  
                               i2l1017 1BB6                                 i2l1009 17F6  
                               i2l1033 3466                                 i2l1201 2F58  
                               i2l1034 322E                                 i2l1210 301A  
                               i2l1027 4298                                 i2l1019 1CA6  
                               i2l1203 2F68                                 i2l1036 3272  
                               i2l1204 2F62                                 i2l1037 32C6  
                               i2l1213 30A0                                 i2l1038 332A  
                               i2l1214 3034                                 i2l1206 2FA4  
                               i2l1039 339E                                 i2l1223 30CA  
                               i2l1207 2F7A                                 i2l1240 3202  
                               i2l1224 30EE                                 i2l1241 31A0  
                               i2l1225 30F6                                 i2l1226 3122  
                               i2l1218 30B0                                 i2l1235 3150  
                               i2l1227 310C                                 i2l1219 306A  
                               i2l1420 4134                                 i2l1412 40DC  
                               i2l1236 3208                                 i2l1421 4142  
                               i2l1413 40EC                                 i2l1181 2E40  
                               i2l1238 31F2                                 i2l1182 2E3A  
                               i2l1415 410A                                 i2l1239 3156  
                               i2l1432 421C                                 i2l1600 417A  
                               i2l1416 4102                                 i2l1433 4226  
                               i2l1425 41E2                                 i2l1601 416E  
                               i2l1434 4234                                 i2l1426 41EE  
                               i2l1194 2FEC                                 i2l1178 2E1C  
                               i2l1419 412A                                 i2l1195 2ED4  
                               i2l1187 2E72                                 i2l1179 2E2C  
                               i2l1428 4204                                 i2l1604 41AE  
                               i2l1196 2ED8                                 i2l1429 41FC  
                               i2l1605 41BC                                 i2l1189 2FB6  
                               i2l1197 2F00                                 i2l1198 2F0E  
                               i2l1199 2F0A                                 i2l1800 45D8  
                               i2l1801 45D0                                 i2l1820 402A  
                               i2l1821 3FC0                                 i2l1653 43D0  
                               i2l1806 44A6                                 i2l1814 44F8  
                               i2l1822 4022                                 i2l1654 43C8  
                               i2l1574 471E                                 i2l1807 449E  
                               i2l1815 44F0                                 i2l1663 4586  
                               i2l1664 457E                                 i2l1657 43F0  
                               i2l1658 43FA                                 i2l1667 459E  
                               i2l1668 45A8                                 i2l6031 306E  
                               i2l6017 3038                                 i2l1797 45C0  
                               i2l1798 45BC                                 i2l7045 0E08  
                               i2l5519 3FC0                                 i2l6617 00F8  
                               i2l6723 046A                                 i2l6643 01C6  
                               i2l5773 428E                                 i2l6663 023A  
                               i2l6745 054A                                 i2l5991 2F7A  
                               i2l6935 0A90                                 i2l5987 2F62  
                               _ORANGE FCB1                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _VIOLET FC9D                                 _SSPADD 000FC8  
                               _YELLOW FCAD                                 _SSPBUF 000FC9  
                               _B_done 017E                        _openHandle_data 00BF  
                          _Bolt_remain 3A72                                 _N_done 017C  
                               _S_done 017A                         __CFG_XINST$OFF 000000  
                               _W_done 0178         ??i2_generate_compartment_array 0003  
                               ___wmul 464C                              ??___awdiv 00CA  
                       __CFG_STVREN$ON 000000                              ??___awmod 0005  
                            ??___lldiv 00CE                              ??___lwdiv 00CA  
                            ??___lwmod 00D1                       __end_of_is_valid 1E32  
                               clear_0 3D64                                 clear_1 3D70  
                               clear_2 3D7C                                 clear_3 3D88  
                     ___awdiv@quotient 00CC                        ___awmod@divisor 0003  
                               _number 0075                        ___awmod@counter 0005  
                            ??_lcdInst 00C8                                 _printf 29CA  
                       ??_initVibTimer 00C6                                 _strcat 45B2  
                               _strcmp 449C                                 _strcpy 44E6  
                       i2___awdiv@sign 0006                              ??_initLCD 00C9  
                           _Nut_remain 39BA                     _compartment_number 0042  
                         __pdataCOMRAM 0077                              ??_isdigit 00C6  
                    __end_ofi2___awdiv 414C                           _EndOfProgram 00BE  
                    __end_ofi2___lldiv 41CE                      __end_ofi2___lwdiv 4404  
                         __mediumconst FC72                      __end_ofi2___lwmod 45B2  
                            ?_I2C_init 0001                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                     ?_Washer_dispense 00F0                      __end_ofi2_lcdInst 47A6  
                            ??_strncmp 000D                      __end_ofi2_initLCD 449C  
                    __end_ofi2_isdigit 4726                             __accesstop 0080  
              __end_of__initialization 3D8E                          __end_of_BLACK FCC5  
                        ___rparam_used 000001                          __end_of_GREEN FCAD  
                        __end_of_WHITE FCBD                     i2___lwmod@dividend 0008  
                 __end_of_happynewyear FC9D                         __pcstackCOMRAM 0001  
                   i2___lldiv@dividend 0001                           __pidataBANK0 47FE  
                         __pidataBANK1 47B8                i2I2C_Master_Read@ackBit 0002  
                   Bolt_dispense@B_max 00F0                          __end_of_check 42A2  
                __end_of_Bolt_dispense 3E2A                          __end_of_array FCC8  
                        __end_of_putch 473E                  __end_of_Washer_remain 3902  
                          i2printf@idx 0019                            i2printf@len 001F  
                          i2printf@val 0021                          _B_spacingTime 009D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0088  
                          i2putch@data 0003                             ??_I2C_init 00DB  
                    ??_Spacer_dispense 00F2                              ?i2_printf 000D  
                              ??_check 0003                                ??_putch 00C8  
                        _INST_VMOFCTR2 FCC8                     i2___lldiv@quotient 0009  
                           __pbssBANK0 0080                             __pbssBANK1 0100  
                           __pbssBANK2 0200                      _S_total_dispensed 0172  
                    ?_interruptHandler 0001                     ??_interruptHandler 0027  
                    Washer_remain@time 00F0                          _init_position 01ED  
                         ?i2_lcdNibble 0001                                ?___wmul 00CE  
                       main@compart_id 00F8             i2I2C_Master_Init@clockFreq 000E  
                   __end_of_INST_CASET FCDD                     __end_of_INST_IDMON FCD5  
                 Spacer_dispense@S_max 00F0                                ?_printf 00D4  
                   __end_of_INST_INVON FCE1                     __end_of_INST_RASET FCDC  
                   __end_of_INST_RAMWR FCDB                     __end_of_INST_TEOFF FCD9  
                              ?_strcat 0001                     __end_of_INST_NORON FCE3  
                              ?_strcmp 0001                                ?_strcpy 0007  
                   __end_of_INST_PTLAR FCDA                     __end_of_INST_SLPIN FCE6  
                   __end_of_INST_PTLON FCE4                             ??i2___wmul 0005  
                          ?_Nut_remain 00F0                           _gear_counter 0066  
                           _final_time 0160                             ??i2_printf 0015  
                 lcd@LCDinterruptState 006F                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _B_array 0130                                _B_input 0186  
                              i2_putch 477E                              ?_is_valid 0001  
                 __end_of_initVibTimer 476A                                _N_array 0110  
                              _N_input 0184            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3EB2            __size_ofi2_I2C_Master_Write 000A  
                              _S_array 0120                                _S_input 0182  
                              __Hparam 0000                         _GLCD_SIZE_HORZ FCE9  
                           _hr_initial 016E                                __Lparam 0000  
                              _W_array 0100                         _GLCD_SIZE_VERT FCE8  
                              _W_input 0180                   __end_of_INST_DISPOFF FCDF  
                 __end_of_INST_FRMCTR1 FCD3                   __end_of_INST_FRMCTR2 FCD2  
                 __end_of_INST_FRMCTR3 FCD1                                ___awdiv 3EB2  
                              ___awmod 41CE                                ___lldiv 4044  
                      __size_of___wmul 0028                                ___lwdiv 435E  
                        ?_Nut_dispense 00F0                                ___lwmod 452C  
             interruptHandler@keypress 0040                                __pcinit 3CFE  
                              __ramtop 1000                             _initialize 36FC  
                              _lcdInst 473E                                __ptext0 1E32  
                              __ptext1 36FC                                __ptext2 4756  
                              __ptext3 4404                                __ptext4 3498  
                              __ptext5 3EB2                                __ptext6 384A  
                              __ptext7 3B2A                                __ptext8 3902  
                              __ptext9 3BC6                        __size_of_printf 0448  
                            _T0CONbits 000FD5                        __size_of_strcat 0042  
                      __size_of_strcmp 004A                   __end_of_INST_SWRESET FCE7  
                      __size_of_strcpy 0046                                _initLCD 4404  
                    __end_of_hexpowers FC96                                _counter 0060  
                              _dpowers FC84                                _isdigit 46E6  
                     ___awmod@dividend 0001                              _LCD_RIGHT FCED  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002A  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                        _S_spacingTime 0099                                _strncmp 3FBE  
                       __pintcode_body 0012                   end_of_initialization 3D8E  
                __end_of_LCD_SIZE_HORZ FCF0                  __end_of_LCD_SIZE_VERT FCEF  
         ??_generate_compartment_array 00C8                           _final_number 0150  
                              int_func 0012                    i2___wmul@multiplier 0001  
                           ??_is_valid 0007                 __end_of_GLCD_SIZE_HORZ FCEA  
                         ?_Bolt_remain 00F0                         _operation_done 00B3  
                            _INST_TEON FCD7                 __end_of_GLCD_SIZE_VERT FCE9  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 00CA                           _close_handle 00FC  
                  __size_of_Nut_remain 00B8                        ___lldiv@counter 00D2  
                              printf@c 00EF                                printf@f 00D4  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                       ??_Nut_dispense 00F2                                strcmp@r 0006  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                           _prev_state 0188                             _servo_ramp 00FD  
  __size_of_generate_compartment_array 0264                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                            _TRISDbits 000F95                      i2_I2C_Master_Init 4302  
                    i2_I2C_Master_Read 46C2                      i2_I2C_Master_Wait 47A6  
                         _happynewyear FC96                      i2_I2C_Master_Stop 47EE  
                            i2___awdiv 40C8                      __size_of_I2C_init 002E  
                           _white_tape 00B9                              _B_counter 00AD  
                    i2___lwdiv@divisor 0003                              i2___lldiv 414C  
                            i2___lwdiv 43B2                              i2___lwmod 4570  
                   ?i2_I2C_Master_Init 000E                      i2___lwdiv@counter 0007  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   ?i2_I2C_Master_Stop 0001                      Nut_dispense@N_max 00F0  
                            i2_lcdInst 4792                         __end_of_INDIGO FCA5  
                 Washer_dispense@W_max 00F0                            printf@width 00ED  
                       __end_of_ORANGE FCB5                              i2_initLCD 4450  
                   i2___awdiv@dividend 0001                         __end_of_VIOLET FCA1  
                       __end_of_YELLOW FCB1                    ??i2_I2C_Master_Init 0012  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4708  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
               __size_of_Spacer_remain 00B8                        _Spacer_dispense 3BC6  
                       __end_of___wmul 4674                   __size_ofi2_lcdNibble 0086  
                        __pidataCOMRAM 47D6                            ?_initialize 0001  
                        i2lcdInst@data 0003                       i2___wmul@product 0005  
                       __end_of_printf 2E12                              _N_counter 00A9  
                       __end_of_strcat 45F4                         __end_of_strcmp 44E6  
                         i2printf@flag 0023                         __end_of_strcpy 452C  
            __end_ofi2_I2C_Master_Init 435E              __end_ofi2_I2C_Master_Read 46E6  
            __end_ofi2_I2C_Master_Wait 47B8                           i2printf@prec 001A  
                  start_initialization 3CFE              __end_ofi2_I2C_Master_Stop 47F6  
                   i2___awdiv@quotient 0007                            __end_of_RED FCB9  
                    __size_ofi2___wmul 0026                              i2printf@c 0026  
                            i2printf@f 000D   __end_ofi2_generate_compartment_array 3498  
__size_ofi2_generate_compartment_array 026C           i2_generate_compartment_array 322C  
                           ?i2___awdiv 0001                  __size_of_initVibTimer 0014  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00AB                      ??_I2C_Master_Init 00D7  
                    ??_I2C_Master_Read 00C7                      ??_I2C_Master_Wait 00C6  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C7  
                         _counter_step 005E                       __CFG_OSC$INTIO67 000000  
             __size_of_Washer_dispense 009C                             ?i2_initLCD 0001  
                           ?i2_isdigit 0001                              _W_counter 00A7  
                    interruptHandler@i 003E                               ??___wmul 00D2  
             I2C_Master_Init@clockFreq 00D3                            __pdataBANK0 00FA  
                          __pdataBANK1 01E5                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 00DE              __size_of_interruptHandler 0FDA  
                             ??_strcat 0005                               ??_strcmp 0005  
                             ??_strcpy 000B                           ??_Nut_remain 00F2  
                         _initVibTimer 4756     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ FCEC  
           _GLCD_ADDRESSABLE_SIZE_HORZ FCEB     __end_of_GLCD_ADDRESSABLE_SIZE_VERT FCEB  
           _GLCD_ADDRESSABLE_SIZE_VERT FCEA                            __pbssCOMRAM 0042  
                          _change_mode 00B5                          __pcstackBANK0 00C6  
                    i2___lwmod@divisor 000A                           _INST_DISPOFF FCDE  
                    i2___lwmod@counter 000C                           _isdigit$1869 00C7  
                        _Spacer_remain 3902                           _INST_FRMCTR1 FCD2  
                         _INST_FRMCTR2 FCD1                           _INST_FRMCTR3 FCD0  
                 __end_of_Nut_dispense 3CFE     __end_of_generate_compartment_array 36FC  
        ?i2_generate_compartment_array 0001             _generate_compartment_array 3498  
               __size_of_Bolt_dispense 0092                               ?i2_putch 0001  
               __size_of_Washer_remain 00B8                      _W_total_dispensed 0170  
                  __size_of_initialize 014E                           _current_set2 0070  
                         _INST_SWRESET FCE6                       _I2C_Master_Start 47E6  
                     _I2C_Master_Write 47C2                __end_of_Spacer_dispense 3C62  
                    __size_of_is_valid 0E50                              _main$2288 00F6  
                     ___lwdiv@dividend 00C6                           _initial_time 0168  
                   __end_of_Nut_remain 3A72                   __size_of_Bolt_remain 00B8  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FC72                              _lcdNibble 3E2A  
                             ?___awdiv 00C6                               ?___awmod 0001  
                             ?___lldiv 00C6                               ?___lwdiv 00C6  
                             ?___lwmod 00CD                              _final_set 01B8  
                             ?_lcdInst 0001                               ?_initLCD 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Init 005C  
           __size_ofi2_I2C_Master_Read 0024             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                               _I2C_init 45F4  
                  __end_of_INST_GAMSET FCE0                    __end_of_INST_COLMOD FCD4  
                  __end_of_INST_MADCTL FCD7                    __end_of_INST_DISPON FCDE  
                  __end_of_INST_IDMOFF FCD6                              _hexpowers FC8E  
                       ?_Spacer_remain 00F0                         __size_of_check 0064  
                  __end_of_INST_INVCTR FCD0                    __end_of_INST_INVOFF FCE2  
                     ___lwdiv@quotient 00CA                            ??i2___awdiv 0005  
                       Nut_remain@time 00F0                            ??i2___lldiv 0009  
                        _W_spacingTime 0097                          ?_I2C_sendData 0001  
                  __end_of_INST_PWCTR1 FCCF                    __end_of_INST_PWCTR2 FCCE  
                  __end_of_INST_PWCTR3 FCCD                    __end_of_INST_PWCTR4 FCCC  
                            _min_final 0164                    __end_of_INST_PWCTR5 FCCB  
                             ?_strncmp 0007                            ??i2___lwdiv 0005  
                  __end_of_INST_VMCTR1 FCCA                    __end_of_INST_SLPOUT FCE5  
                          ??i2___lwmod 000C                         __size_of_putch 0018  
                            _sec_final 0162                               _LCD_LEFT FCEC  
           __end_ofi2_I2C_Master_Start 47FE             __end_ofi2_I2C_Master_Write 47D6  
                          ??i2_lcdInst 0003                         ___wmul@product 00D2  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                          ??i2_initLCD 0004                            ??i2_isdigit 0001  
                        _operationTime 0062                               _INST_NOP FCE7  
                             i2u424_40 3FEE                               i2u344_45 3F76  
                             i2u344_46 3F78                               i2u345_45 3FBA  
                             i2u345_46 3FBC                               i2u450_40 428E  
                             i2u419_40 4522                               i2u419_47 4518  
                             i2u461_40 4208                               i2u446_40 424E  
                             i2u390_40 458A                               i2u470_40 2F3C  
                             i2u550_40 01EE                               i2u470_47 2F32  
                             i2u710_47 0416                               i2u447_40 425E  
                             i2u543_40 00AC                               i2u711_47 0454  
                            _operation 0068                               i2u448_40 426E  
                             i2u384_40 417E                               i2u552_40 025E  
                             i2u464_45 4336                               i2u720_47 0632  
                             i2u712_47 0482                               i2u449_40 427E  
                             i2u553_40 02EA                               i2u545_40 011C  
                             i2u465_45 46DE                               i2u465_46 46E0  
                             i2u721_47 0652                               i2u713_47 0498  
                             i2u705_47 0136                               i2u378_40 44DA  
                             i2u474_40 2F9C                               i2u474_47 2F92  
                             i2u730_47 0CE2                               i2u722_47 066C  
                             i2u714_47 0534                               i2u706_47 018A  
                             i2u387_40 43D4                               i2u491_40 312A  
                             i2u571_40 0998                               i2u731_47 0D00  
                             i2u723_47 081C                               i2u715_47 0554  
                             i2u707_47 0278                               i2u492_40 313E  
                             i2u740_47 479E                               i2u732_47 0E8E  
                             i2u724_47 096C                               i2u716_47 0584  
                             i2u708_47 02CC                               i2u573_40 0A90  
                             i2u557_40 054A                               i2u741_47 3F5C  
                             i2u733_47 0ECC                               i2u725_47 0A42  
                             i2u717_47 05B4                               i2u709_47 0404  
                             i2u494_40 3210                               i2u590_40 0E56  
                             i2u742_47 3F66                               i2u734_47 0F0E  
                             i2u726_47 0ADA                               i2u718_47 05E4  
                             i2u590_48 0E58                               i2u575_40 0B10  
                             i2u743_47 3FA0                               i2u735_47 0F46  
                             i2u727_47 0B2A                               i2u719_47 0614  
                             i2u744_47 3FAA                               i2u736_47 0F64  
                             i2u728_47 0B98                               i2u737_47 478A  
                             i2u729_47 0C78                               i2u738_47 4456  
                             i2u499_40 410E                               i2u587_40 0E1A  
                             i2u739_47 448A                               i2u588_40 0E2E  
                             i2u587_48 0E1C                               i2u589_40 0E42  
                             i2u588_48 0E30                               i2u589_48 0E44  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
        i2I2C_Master_Write@byteToWrite 0002                      ??_Washer_dispense 00F2  
                        _Bolt_dispense 3D98                          _Washer_remain 384A  
                            _nuts_data 006D                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 00CE                               i2___wmul 469C  
                        lcdNibble@data 00C7                               _B_remain 00A5  
                           printf@flag 00EC                          lcdNibble@temp 00C6  
                           printf@prec 00E3                      i2___awdiv@divisor 0003  
                    i2___awdiv@counter 0005                               i2_printf 2E12  
                       ??_I2C_sendData 00C9                         _LCD_HORZ_LIMIT FCF1  
                            copy_data0 3D12                              copy_data1 3D32  
                            copy_data2 3D52                   interruptHandler@temp 0041  
                             _N_remain 00A3                       __size_ofi2_putch 0014  
                           _EECON1bits 000FA6                               _S_remain 00A1  
                       _NeedToCloseLid 00BD                       ?_Spacer_dispense 00F0  
                             __Hrparam 0000                  I2C_sendData@char_data 00C9  
                             __Lrparam 0000                               _W_remain 009F  
                   __CFG_BOREN$SBORDIS 000000                         ?_Bolt_dispense 00F0  
                    Spacer_remain@time 00F0                       __size_of___awdiv 0086  
                     __size_of___awmod 0070                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 0084                         ?_Washer_remain 00F0  
                  _rotate_1compartment 00FE                       __size_of___lwdiv 0054  
                     __size_of___lwmod 0044                           ??_initialize 00C6  
                          _INST_GAMSET FCDF                            _INST_COLMOD FCD3  
                          _INST_MADCTL FCD6                            _INST_DISPON FCDD  
                          _INST_IDMOFF FCD5                       _interruptHandler 0008  
                          _INST_INVCTR FCCF                            _INST_INVOFF FCE1  
                     __size_of_lcdInst 0018                            _INST_PWCTR1 FCCE  
                          _INST_PWCTR2 FCCD                            _INST_PWCTR3 FCCC  
                          _INST_PWCTR4 FCCB                            _INST_PWCTR5 FCCA  
                          _INST_VMCTR1 FCC9                            _INST_SLPOUT FCE4  
                      _I2C_Master_Init 42A2                        _I2C_Master_Read 4622  
                     __size_of_initLCD 004C                            _current_set 00C1  
                      _I2C_Master_Wait 476A                  __size_of_Nut_dispense 009C  
                           strcat@from 0003                        ??_Spacer_remain 00F2  
                      _I2C_Master_Stop 47DE                 __end_of_LCD_HORZ_LIMIT FCF2  
                     __size_of_isdigit 0022                        ___lwdiv@divisor 00C8  
                      ___lwdiv@counter 00CC                               __ptext10 39BA  
                             __ptext11 3C62                               __ptext20 46E6  
                             __ptext12 45F4                               __ptext21 464C  
                             __ptext13 42A2                               __ptext30 476A  
                             __ptext22 452C                               __ptext14 4044  
                             __ptext23 435E                               __ptext15 4622  
                             __ptext40 322C                               __ptext32 2E12  
                             __ptext24 473E                               __ptext16 3A72  
                             __ptext41 40C8                               __ptext33 477E  
                             __ptext25 3E2A                               __ptext17 3D98  
                             __ptext50 44E6                               __ptext42 47CC  
                             __ptext34 4708                               __ptext26 4674  
                             __ptext18 29CA                               __ptext51 45B2  
                             __ptext43 47EE                               __ptext35 4570  
                             __ptext27 47C2                               __ptext19 4726  
                             __ptext52 0FE2                               __ptext44 47F6  
                             __ptext36 43B2                               __ptext28 47DE  
                             __ptext53 469C                               __ptext45 46C2  
                             __ptext37 4450                               __ptext29 47E6  
                             __ptext54 449C                               __ptext46 47A6  
                             __ptext38 4792                               __ptext55 423E  
                             __ptext47 4302                               __ptext39 3F38  
                             __ptext56 41CE                               __ptext48 414C  
                             __ptext49 3FBE                  __end_of_INST_VMOFCTR2 FCC9  
                             _fastener 0200                         _LCD_VERT_LIMIT FCF0  
                          _min_initial 016C                       __size_of_strncmp 0086  
                             _hr_final 0166                             strcpy@from 0009  
                       i2_isdigit$1869 0002                          __size_of_main 0B98  
                             _is_valid 0FE2                             strncmp@len 000B  
                   __end_of_initialize 384A                               _input_ch 006C  
                          _sec_initial 016A                               _temp_set 01E0  
                        ??i2_lcdNibble 0001                            ??_lcdNibble 00C6  
                             _prev_set 0190                               int$flags 007F  
                         _Nut_dispense 3C62                              printf@idx 00E2  
                            printf@len 00E8                              printf@val 00EA  
          I2C_Master_Write@byteToWrite 00C7                              putch@data 00C8  
             __end_of_I2C_Master_Start 47EE                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 47CC                             _INTCONbits 000FF2  
                         _motorStart_0 007E                           _motorStart_1 007C  
                         _motorStart_2 007A                           _motorStart_3 0078  
               __end_of_LCD_VERT_LIMIT FCF1                      _B_total_dispensed 0176  
                             isdigit@c 00C8                      _N_total_dispensed 0174  
                           _INST_CASET FCDC                             _INST_IDMON FCD4  
                           _INST_INVON FCE0                             _INST_RASET FCDB  
                             intlevel2 0000                             _INST_RAMWR FCDA  
                           _INST_TEOFF FCD8            ?_generate_compartment_array 00C6  
                           _INST_NORON FCE2                             _INST_PTLAR FCD9  
                           _INST_SLPIN FCE5                             _INST_PTLON FCE3  
                        _LCD_SIZE_HORZ FCEF                           _timerCounter 006A  
                     ___lwmod@dividend 00CD                          _LCD_SIZE_VERT FCEE  
                     ___lldiv@dividend 00C6                              strncmp@s1 0007  
                            strncmp@s2 0009                             _OSCCONbits 000FD3  
                      ??_Bolt_dispense 00F2                        ??_Washer_remain 00F2  
                             printf@ap 00E6                               printf@cp 00E4  
                 __end_of_I2C_sendData 469C                __end_of_I2C_Master_Init 4302  
              __end_of_I2C_Master_Read 464C                __end_of_I2C_Master_Wait 477E  
              __end_of_I2C_Master_Stop 47E6                            lcdInst@data 00C8  
                          _motorStop_0 007D                            _motorStop_1 007B  
                          _motorStop_2 0079                            _motorStop_3 0077  
                          _spacingTime 00FA                    __end_ofi2_lcdNibble 3FBE  
                             strcat@cp 0005                               strcat@to 0001  
                             strcmp@s1 0001                               strcmp@s2 0003  
                     ___lldiv@quotient 00CE                        ___lwmod@divisor 00CF  
                             strcpy@cp 000B                               strcpy@to 0007  
                      ___lwmod@counter 00D1                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                            _prev_number 0140  
        i2I2C_Master_Read@receivedByte 0003                        _Washer_dispense 3B2A  
                        ??_Bolt_remain 00F2  
