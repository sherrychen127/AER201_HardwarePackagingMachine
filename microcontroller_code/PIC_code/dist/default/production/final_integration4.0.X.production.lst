

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 17:54:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4620 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  00472E                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _close_handle
   112  00472E  0E                 	db	14
   113                           
   114                           ;initializer for _servo_ramp
   115  00472F  0D                 	db	13
   116                           
   117                           ;initializer for _motorStop_3
   118  004730  0C                 	db	12
   119                           
   120                           ;initializer for _motorStart_3
   121  004731  0B                 	db	11
   122                           
   123                           ;initializer for _motorStop_2
   124  004732  0A                 	db	10
   125                           
   126                           ;initializer for _motorStart_2
   127  004733  39                 	db	57
   128                           
   129                           ;initializer for _motorStop_1
   130  004734  38                 	db	56
   131                           
   132                           ;initializer for _motorStart_1
   133  004735  37                 	db	55
   134                           
   135                           ;initializer for _motorStop_0
   136  004736  36                 	db	54
   137                           
   138                           ;initializer for _motorStart_0
   139  004737  35                 	db	53
   140                           
   141                           ;initializer for _S_dispense
   142  004738  34                 	db	52
   143                           
   144                           ;initializer for _N_dispense
   145  004739  33                 	db	51
   146                           
   147                           ;initializer for _B_dispense
   148  00473A  32                 	db	50
   149                           
   150                           ;initializer for _rotate_1compartment
   151  00473B  31                 	db	49
   152                           
   153                           ;initializer for _rotate_gear
   154  00473C  30                 	db	48
   155                           
   156                           	psect	idataBANK1
   157  00473D                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _W_max
   161  00473D  0004               	dw	4
   162                           
   163                           ;initializer for _S_max
   164  00473F  0004               	dw	4
   165                           
   166                           ;initializer for _N_max
   167  004741  0004               	dw	4
   168                           
   169                           ;initializer for _B_max
   170  004743  0004               	dw	4
   171                           
   172                           ;initializer for _init_position
   173  004745  0005               	dw	5
   174                           
   175                           	psect	mediumconst
   176  00FC92                     __pmediumconst:
   177                           	opt stack 0
   178  00FC92  00                 	db	0
   179  00FC93                     _keys:
   180                           	opt stack 0
   181  00FC93  31                 	db	49
   182  00FC94  32                 	db	50
   183  00FC95  33                 	db	51
   184  00FC96  41                 	db	65
   185  00FC97  34                 	db	52
   186  00FC98  35                 	db	53
   187  00FC99  36                 	db	54
   188  00FC9A  42                 	db	66
   189  00FC9B  37                 	db	55
   190  00FC9C  38                 	db	56
   191  00FC9D  39                 	db	57
   192  00FC9E  43                 	db	67
   193  00FC9F  2A                 	db	42
   194  00FCA0  30                 	db	48
   195  00FCA1  23                 	db	35
   196  00FCA2  44                 	db	68
   197  00FCA3  00                 	db	0
   198  00FCA4                     __end_of_keys:
   199                           	opt stack 0
   200  00FCA4                     _dpowers:
   201                           	opt stack 0
   202  00FCA4  0001               	dw	1
   203  00FCA6  000A               	dw	10
   204  00FCA8  0064               	dw	100
   205  00FCAA  03E8               	dw	1000
   206  00FCAC  2710               	dw	10000
   207  00FCAE                     __end_of_dpowers:
   208                           	opt stack 0
   209  00FCAE                     _hexpowers:
   210                           	opt stack 0
   211  00FCAE  0001               	dw	1
   212  00FCB0  0010               	dw	16
   213  00FCB2  0100               	dw	256
   214  00FCB4  1000               	dw	4096
   215  00FCB6                     __end_of_hexpowers:
   216                           	opt stack 0
   217  00FCB6                     _happynewyear:
   218                           	opt stack 0
   219  00FCB6  45                 	db	69
   220  00FCB7  14                 	db	20
   221  00FCB8  14                 	db	20
   222  00FCB9  00                 	db	0
   223  00FCBA  11                 	db	17
   224  00FCBB  03                 	db	3
   225  00FCBC  18                 	db	24
   226  00FCBD                     __end_of_happynewyear:
   227                           	opt stack 0
   228  00FCBD                     _array:
   229                           	opt stack 0
   230  00FCBD  30                 	db	48
   231  00FCBE  31                 	db	49
   232  00FCBF  00                 	db	0
   233  00FCC0                     __end_of_array:
   234                           	opt stack 0
   235  00FCC0                     _LCD_LEFT:
   236                           	opt stack 0
   237  00FCC0  00                 	db	0
   238  00FCC1                     __end_of_LCD_LEFT:
   239                           	opt stack 0
   240  00FCC1                     _LCD_RIGHT:
   241                           	opt stack 0
   242  00FCC1  01                 	db	1
   243  00FCC2                     __end_of_LCD_RIGHT:
   244                           	opt stack 0
   245  00FCC2                     _LCD_SIZE_VERT:
   246                           	opt stack 0
   247  00FCC2  02                 	db	2
   248  00FCC3                     __end_of_LCD_SIZE_VERT:
   249                           	opt stack 0
   250  00FCC3                     _LCD_SIZE_HORZ:
   251                           	opt stack 0
   252  00FCC3  10                 	db	16
   253  00FCC4                     __end_of_LCD_SIZE_HORZ:
   254                           	opt stack 0
   255  00FCC4                     _LCD_VERT_LIMIT:
   256                           	opt stack 0
   257  00FCC4  02                 	db	2
   258  00FCC5                     __end_of_LCD_VERT_LIMIT:
   259                           	opt stack 0
   260  00FCC5                     _LCD_HORZ_LIMIT:
   261                           	opt stack 0
   262  00FCC5  28                 	db	40
   263  00FCC6                     __end_of_LCD_HORZ_LIMIT:
   264                           	opt stack 0
   265  00FCC6                     _strs:
   266                           	opt stack 0
   267  00FCC6  42                 	db	66
   268  00FCC7  00                 	db	0
   269  00FCC8  00                 	db	0
   270  00FCC9  00                 	db	0
   271  00FCCA  00                 	db	0
   272  00FCCB  4E                 	db	78
   273  00FCCC  00                 	db	0
   274  00FCCD  00                 	db	0
   275  00FCCE  00                 	db	0
   276  00FCCF  00                 	db	0
   277  00FCD0  53                 	db	83
   278  00FCD1  00                 	db	0
   279  00FCD2  00                 	db	0
   280  00FCD3  00                 	db	0
   281  00FCD4  00                 	db	0
   282  00FCD5  57                 	db	87
   283  00FCD6  00                 	db	0
   284  00FCD7  00                 	db	0
   285  00FCD8  00                 	db	0
   286  00FCD9  00                 	db	0
   287  00FCDA  42                 	db	66
   288  00FCDB  4E                 	db	78
   289  00FCDC  00                 	db	0
   290  00FCDD  00                 	db	0
   291  00FCDE  00                 	db	0
   292  00FCDF  42                 	db	66
   293  00FCE0  53                 	db	83
   294  00FCE1  00                 	db	0
   295  00FCE2  00                 	db	0
   296  00FCE3  00                 	db	0
   297  00FCE4  42                 	db	66
   298  00FCE5  57                 	db	87
   299  00FCE6  00                 	db	0
   300  00FCE7  00                 	db	0
   301  00FCE8  00                 	db	0
   302  00FCE9  42                 	db	66
   303  00FCEA  42                 	db	66
   304  00FCEB  4E                 	db	78
   305  00FCEC  00                 	db	0
   306  00FCED  00                 	db	0
   307  00FCEE  42                 	db	66
   308  00FCEF  42                 	db	66
   309  00FCF0  53                 	db	83
   310  00FCF1  00                 	db	0
   311  00FCF2  00                 	db	0
   312  00FCF3  42                 	db	66
   313  00FCF4  42                 	db	66
   314  00FCF5  57                 	db	87
   315  00FCF6  00                 	db	0
   316  00FCF7  00                 	db	0
   317  00FCF8  42                 	db	66
   318  00FCF9  4E                 	db	78
   319  00FCFA  57                 	db	87
   320  00FCFB  00                 	db	0
   321  00FCFC  00                 	db	0
   322  00FCFD  42                 	db	66
   323  00FCFE  53                 	db	83
   324  00FCFF  57                 	db	87
   325  00FD00  00                 	db	0
   326  00FD01  00                 	db	0
   327  00FD02  42                 	db	66
   328  00FD03  57                 	db	87
   329  00FD04  57                 	db	87
   330  00FD05  00                 	db	0
   331  00FD06  00                 	db	0
   332  00FD07  42                 	db	66
   333  00FD08  4E                 	db	78
   334  00FD09  57                 	db	87
   335  00FD0A  57                 	db	87
   336  00FD0B  00                 	db	0
   337  00FD0C  42                 	db	66
   338  00FD0D  53                 	db	83
   339  00FD0E  57                 	db	87
   340  00FD0F  57                 	db	87
   341  00FD10  00                 	db	0
   342  00FD11  42                 	db	66
   343  00FD12  42                 	db	66
   344  00FD13  53                 	db	83
   345  00FD14  57                 	db	87
   346  00FD15  00                 	db	0
   347  00FD16  42                 	db	66
   348  00FD17  42                 	db	66
   349  00FD18  4E                 	db	78
   350  00FD19  57                 	db	87
   351  00FD1A  00                 	db	0
   352  00FD1B  42                 	db	66
   353  00FD1C  4E                 	db	78
   354  00FD1D  4E                 	db	78
   355  00FD1E  57                 	db	87
   356  00FD1F  00                 	db	0
   357  00FD20  42                 	db	66
   358  00FD21  4E                 	db	78
   359  00FD22  4E                 	db	78
   360  00FD23  4E                 	db	78
   361  00FD24  00                 	db	0
   362  00FD25  42                 	db	66
   363  00FD26  57                 	db	87
   364  00FD27  57                 	db	87
   365  00FD28  57                 	db	87
   366  00FD29  00                 	db	0
   367  00FD2A                     __end_of_strs:
   368                           	opt stack 0
   369  0000                     _SSPBUF	set	4041
   370  0000                     _SSPCON2bits	set	4037
   371  0000                     _SSPADD	set	4040
   372  0000                     _SSPCON2	set	4037
   373  0000                     _SSPCON1	set	4038
   374  0000                     _SSPSTAT	set	4039
   375  0000                     _TRISCbits	set	3988
   376  0000                     _SSPCON1bits	set	4038
   377  0000                     _PORTAbits	set	3968
   378  0000                     _TRISAbits	set	3986
   379  0000                     _TRISDbits	set	3989
   380  0000                     _ADRESL	set	4035
   381  0000                     _ADRESH	set	4036
   382  0000                     _ADCON0bits	set	4034
   383  0000                     _PORTB	set	3969
   384  0000                     _ADCON1	set	4033
   385  0000                     _ADCON0	set	4034
   386  0000                     _TRISE	set	3990
   387  0000                     _TRISD	set	3989
   388  0000                     _TRISC	set	3988
   389  0000                     _TRISB	set	3987
   390  0000                     _TRISA	set	3986
   391  0000                     _LATE	set	3981
   392  0000                     _LATC	set	3979
   393  0000                     _LATB	set	3978
   394  0000                     _LATA	set	3977
   395  0000                     _OSCTUNEbits	set	3995
   396  0000                     _OSCCONbits	set	4051
   397  0000                     _INTCONbits	set	4082
   398  0000                     _LATD	set	3980
   399  0000                     _LATDbits	set	3980
   400  0000                     _ADON	set	32272
   401  0000                     _INT1IF	set	32640
   402  0000                     _INT1IE	set	32643
   403  00FD2A                     STR_30:
   404  00FD2A  73                 	db	115	;'s'
   405  00FD2B  70                 	db	112	;'p'
   406  00FD2C  61                 	db	97	;'a'
   407  00FD2D  63                 	db	99	;'c'
   408  00FD2E  65                 	db	101	;'e'
   409  00FD2F  72                 	db	114	;'r'
   410  00FD30  73                 	db	115	;'s'
   411  00FD31  20                 	db	32
   412  00FD32  64                 	db	100	;'d'
   413  00FD33  69                 	db	105	;'i'
   414  00FD34  73                 	db	115	;'s'
   415  00FD35  70                 	db	112	;'p'
   416  00FD36  65                 	db	101	;'e'
   417  00FD37  6E                 	db	110	;'n'
   418  00FD38  73                 	db	115	;'s'
   419  00FD39  65                 	db	101	;'e'
   420  00FD3A  64                 	db	100	;'d'
   421  00FD3B  3A                 	db	58	;':'
   422  00FD3C  25                 	db	37
   423  00FD3D  64                 	db	100	;'d'
   424  00FD3E  00                 	db	0
   425  00FD3F                     STR_33:
   426  00FD3F  57                 	db	87	;'W'
   427  00FD40  61                 	db	97	;'a'
   428  00FD41  73                 	db	115	;'s'
   429  00FD42  68                 	db	104	;'h'
   430  00FD43  65                 	db	101	;'e'
   431  00FD44  72                 	db	114	;'r'
   432  00FD45  20                 	db	32
   433  00FD46  64                 	db	100	;'d'
   434  00FD47  69                 	db	105	;'i'
   435  00FD48  73                 	db	115	;'s'
   436  00FD49  70                 	db	112	;'p'
   437  00FD4A  65                 	db	101	;'e'
   438  00FD4B  6E                 	db	110	;'n'
   439  00FD4C  73                 	db	115	;'s'
   440  00FD4D  65                 	db	101	;'e'
   441  00FD4E  64                 	db	100	;'d'
   442  00FD4F  3A                 	db	58	;':'
   443  00FD50  25                 	db	37
   444  00FD51  64                 	db	100	;'d'
   445  00FD52  00                 	db	0
   446  00FD53                     STR_53:
   447  00FD53  43                 	db	67	;'C'
   448  00FD54  25                 	db	37
   449  00FD55  64                 	db	100	;'d'
   450  00FD56  3A                 	db	58	;':'
   451  00FD57  42                 	db	66	;'B'
   452  00FD58  25                 	db	37
   453  00FD59  64                 	db	100	;'d'
   454  00FD5A  2C                 	db	44
   455  00FD5B  4E                 	db	78	;'N'
   456  00FD5C  25                 	db	37
   457  00FD5D  64                 	db	100	;'d'
   458  00FD5E  2C                 	db	44
   459  00FD5F  53                 	db	83	;'S'
   460  00FD60  25                 	db	37
   461  00FD61  64                 	db	100	;'d'
   462  00FD62  2C                 	db	44
   463  00FD63  57                 	db	87	;'W'
   464  00FD64  25                 	db	37
   465  00FD65  64                 	db	100	;'d'
   466  00FD66  00                 	db	0
   467  00FD67                     STR_24:
   468  00FD67  62                 	db	98	;'b'
   469  00FD68  6F                 	db	111	;'o'
   470  00FD69  6C                 	db	108	;'l'
   471  00FD6A  74                 	db	116	;'t'
   472  00FD6B  73                 	db	115	;'s'
   473  00FD6C  20                 	db	32
   474  00FD6D  64                 	db	100	;'d'
   475  00FD6E  69                 	db	105	;'i'
   476  00FD6F  73                 	db	115	;'s'
   477  00FD70  70                 	db	112	;'p'
   478  00FD71  65                 	db	101	;'e'
   479  00FD72  6E                 	db	110	;'n'
   480  00FD73  73                 	db	115	;'s'
   481  00FD74  65                 	db	101	;'e'
   482  00FD75  64                 	db	100	;'d'
   483  00FD76  3A                 	db	58	;':'
   484  00FD77  25                 	db	37
   485  00FD78  64                 	db	100	;'d'
   486  00FD79  00                 	db	0
   487  00FD7A                     STR_44:
   488  00FD7A  20                 	db	32
   489  00FD7B  32                 	db	50	;'2'
   490  00FD7C  3A                 	db	58	;':'
   491  00FD7D  20                 	db	32
   492  00FD7E  4F                 	db	79	;'O'
   493  00FD7F  70                 	db	112	;'p'
   494  00FD80  65                 	db	101	;'e'
   495  00FD81  72                 	db	114	;'r'
   496  00FD82  61                 	db	97	;'a'
   497  00FD83  74                 	db	116	;'t'
   498  00FD84  69                 	db	105	;'i'
   499  00FD85  6F                 	db	111	;'o'
   500  00FD86  6E                 	db	110	;'n'
   501  00FD87  20                 	db	32
   502  00FD88  54                 	db	84	;'T'
   503  00FD89  69                 	db	105	;'i'
   504  00FD8A  6D                 	db	109	;'m'
   505  00FD8B  65                 	db	101	;'e'
   506  00FD8C  00                 	db	0
   507  00FD8D                     STR_27:
   508  00FD8D  6E                 	db	110	;'n'
   509  00FD8E  75                 	db	117	;'u'
   510  00FD8F  74                 	db	116	;'t'
   511  00FD90  73                 	db	115	;'s'
   512  00FD91  20                 	db	32
   513  00FD92  64                 	db	100	;'d'
   514  00FD93  69                 	db	105	;'i'
   515  00FD94  73                 	db	115	;'s'
   516  00FD95  70                 	db	112	;'p'
   517  00FD96  65                 	db	101	;'e'
   518  00FD97  6E                 	db	110	;'n'
   519  00FD98  73                 	db	115	;'s'
   520  00FD99  65                 	db	101	;'e'
   521  00FD9A  64                 	db	100	;'d'
   522  00FD9B  3A                 	db	58	;':'
   523  00FD9C  25                 	db	37
   524  00FD9D  64                 	db	100	;'d'
   525  00FD9E  00                 	db	0
   526  00FD9F                     STR_102:
   527  00FD9F  30                 	db	48	;'0'
   528  00FDA0  31                 	db	49	;'1'
   529  00FDA1  32                 	db	50	;'2'
   530  00FDA2  33                 	db	51	;'3'
   531  00FDA3  34                 	db	52	;'4'
   532  00FDA4  35                 	db	53	;'5'
   533  00FDA5  36                 	db	54	;'6'
   534  00FDA6  37                 	db	55	;'7'
   535  00FDA7  38                 	db	56	;'8'
   536  00FDA8  39                 	db	57	;'9'
   537  00FDA9  61                 	db	97	;'a'
   538  00FDAA  62                 	db	98	;'b'
   539  00FDAB  63                 	db	99	;'c'
   540  00FDAC  64                 	db	100	;'d'
   541  00FDAD  65                 	db	101	;'e'
   542  00FDAE  66                 	db	102	;'f'
   543  00FDAF  00                 	db	0
   544  00FDB0                     STR_40:
   545  00FDB0  53                 	db	83	;'S'
   546  00FDB1  70                 	db	112	;'p'
   547  00FDB2  61                 	db	97	;'a'
   548  00FDB3  63                 	db	99	;'c'
   549  00FDB4  65                 	db	101	;'e'
   550  00FDB5  72                 	db	114	;'r'
   551  00FDB6  5F                 	db	95	;'_'
   552  00FDB7  72                 	db	114	;'r'
   553  00FDB8  65                 	db	101	;'e'
   554  00FDB9  6D                 	db	109	;'m'
   555  00FDBA  61                 	db	97	;'a'
   556  00FDBB  69                 	db	105	;'i'
   557  00FDBC  6E                 	db	110	;'n'
   558  00FDBD  3A                 	db	58	;':'
   559  00FDBE  25                 	db	37
   560  00FDBF  64                 	db	100	;'d'
   561  00FDC0  00                 	db	0
   562  00FDC1                     STR_41:
   563  00FDC1  57                 	db	87	;'W'
   564  00FDC2  61                 	db	97	;'a'
   565  00FDC3  73                 	db	115	;'s'
   566  00FDC4  68                 	db	104	;'h'
   567  00FDC5  65                 	db	101	;'e'
   568  00FDC6  72                 	db	114	;'r'
   569  00FDC7  5F                 	db	95	;'_'
   570  00FDC8  72                 	db	114	;'r'
   571  00FDC9  65                 	db	101	;'e'
   572  00FDCA  6D                 	db	109	;'m'
   573  00FDCB  61                 	db	97	;'a'
   574  00FDCC  69                 	db	105	;'i'
   575  00FDCD  6E                 	db	110	;'n'
   576  00FDCE  3A                 	db	58	;':'
   577  00FDCF  25                 	db	37
   578  00FDD0  64                 	db	100	;'d'
   579  00FDD1  00                 	db	0
   580  00FDD2                     STR_8:
   581  00FDD2  61                 	db	97	;'a'
   582  00FDD3  73                 	db	115	;'s'
   583  00FDD4  73                 	db	115	;'s'
   584  00FDD5  65                 	db	101	;'e'
   585  00FDD6  6D                 	db	109	;'m'
   586  00FDD7  62                 	db	98	;'b'
   587  00FDD8  6C                 	db	108	;'l'
   588  00FDD9  79                 	db	121	;'y'
   589  00FDDA  20                 	db	32
   590  00FDDB  73                 	db	115	;'s'
   591  00FDDC  74                 	db	116	;'t'
   592  00FDDD  65                 	db	101	;'e'
   593  00FDDE  70                 	db	112	;'p'
   594  00FDDF  3A                 	db	58	;':'
   595  00FDE0  25                 	db	37
   596  00FDE1  64                 	db	100	;'d'
   597  00FDE2  00                 	db	0
   598  00FDE3                     STR_43:
   599  00FDE3  31                 	db	49	;'1'
   600  00FDE4  3A                 	db	58	;':'
   601  00FDE5  20                 	db	32
   602  00FDE6  44                 	db	68	;'D'
   603  00FDE7  61                 	db	97	;'a'
   604  00FDE8  74                 	db	116	;'t'
   605  00FDE9  65                 	db	101	;'e'
   606  00FDEA  20                 	db	32
   607  00FDEB  61                 	db	97	;'a'
   608  00FDEC  6E                 	db	110	;'n'
   609  00FDED  64                 	db	100	;'d'
   610  00FDEE  20                 	db	32
   611  00FDEF  54                 	db	84	;'T'
   612  00FDF0  69                 	db	105	;'i'
   613  00FDF1  6D                 	db	109	;'m'
   614  00FDF2  65                 	db	101	;'e'
   615  00FDF3  00                 	db	0
   616  00FDF4                     STR_50:
   617  00FDF4  6F                 	db	111	;'o'
   618  00FDF5  70                 	db	112	;'p'
   619  00FDF6  65                 	db	101	;'e'
   620  00FDF7  72                 	db	114	;'r'
   621  00FDF8  61                 	db	97	;'a'
   622  00FDF9  74                 	db	116	;'t'
   623  00FDFA  69                 	db	105	;'i'
   624  00FDFB  6F                 	db	111	;'o'
   625  00FDFC  6E                 	db	110	;'n'
   626  00FDFD  20                 	db	32
   627  00FDFE  74                 	db	116	;'t'
   628  00FDFF  69                 	db	105	;'i'
   629  00FE00  6D                 	db	109	;'m'
   630  00FE01  65                 	db	101	;'e'
   631  00FE02  3A                 	db	58	;':'
   632  00FE03  00                 	db	0
   633  00FE04                     STR_1:
   634  00FE04  31                 	db	49	;'1'
   635  00FE05  3A                 	db	58	;':'
   636  00FE06  64                 	db	100	;'d'
   637  00FE07  61                 	db	97	;'a'
   638  00FE08  74                 	db	116	;'t'
   639  00FE09  65                 	db	101	;'e'
   640  00FE0A  20                 	db	32
   641  00FE0B  61                 	db	97	;'a'
   642  00FE0C  6E                 	db	110	;'n'
   643  00FE0D  64                 	db	100	;'d'
   644  00FE0E  20                 	db	32
   645  00FE0F  74                 	db	116	;'t'
   646  00FE10  69                 	db	105	;'i'
   647  00FE11  6D                 	db	109	;'m'
   648  00FE12  65                 	db	101	;'e'
   649  00FE13  00                 	db	0
   650  00FE14                     STR_16:
   651  00FE14  73                 	db	115	;'s'
   652  00FE15  74                 	db	116	;'t'
   653  00FE16  61                 	db	97	;'a'
   654  00FE17  72                 	db	114	;'r'
   655  00FE18  74                 	db	116	;'t'
   656  00FE19  20                 	db	32
   657  00FE1A  6F                 	db	111	;'o'
   658  00FE1B  70                 	db	112	;'p'
   659  00FE1C  65                 	db	101	;'e'
   660  00FE1D  72                 	db	114	;'r'
   661  00FE1E  61                 	db	97	;'a'
   662  00FE1F  74                 	db	116	;'t'
   663  00FE20  69                 	db	105	;'i'
   664  00FE21  6F                 	db	111	;'o'
   665  00FE22  6E                 	db	110	;'n'
   666  00FE23  00                 	db	0
   667  00FE24                     STR_65:
   668  00FE24  57                 	db	87	;'W'
   669  00FE25  72                 	db	114	;'r'
   670  00FE26  6F                 	db	111	;'o'
   671  00FE27  6E                 	db	110	;'n'
   672  00FE28  67                 	db	103	;'g'
   673  00FE29  20                 	db	32
   674  00FE2A  6E                 	db	110	;'n'
   675  00FE2B  75                 	db	117	;'u'
   676  00FE2C  6D                 	db	109	;'m'
   677  00FE2D  62                 	db	98	;'b'
   678  00FE2E  65                 	db	101	;'e'
   679  00FE2F  72                 	db	114	;'r'
   680  00FE30  21                 	db	33
   681  00FE31  20                 	db	32
   682  00FE32  00                 	db	0
   683  00FE33                     STR_3:
   684  00FE33  61                 	db	97	;'a'
   685  00FE34  73                 	db	115	;'s'
   686  00FE35  73                 	db	115	;'s'
   687  00FE36  65                 	db	101	;'e'
   688  00FE37  6D                 	db	109	;'m'
   689  00FE38  62                 	db	98	;'b'
   690  00FE39  6C                 	db	108	;'l'
   691  00FE3A  79                 	db	121	;'y'
   692  00FE3B  20                 	db	32
   693  00FE3C  73                 	db	115	;'s'
   694  00FE3D  74                 	db	116	;'t'
   695  00FE3E  65                 	db	101	;'e'
   696  00FE3F  70                 	db	112	;'p'
   697  00FE40  3A                 	db	58	;':'
   698  00FE41  00                 	db	0
   699  00FE42                     STR_54:
   700  00FE42  42                 	db	66	;'B'
   701  00FE43  20                 	db	32
   702  00FE44  64                 	db	100	;'d'
   703  00FE45  69                 	db	105	;'i'
   704  00FE46  73                 	db	115	;'s'
   705  00FE47  70                 	db	112	;'p'
   706  00FE48  65                 	db	101	;'e'
   707  00FE49  6E                 	db	110	;'n'
   708  00FE4A  73                 	db	115	;'s'
   709  00FE4B  65                 	db	101	;'e'
   710  00FE4C  64                 	db	100	;'d'
   711  00FE4D  3A                 	db	58	;':'
   712  00FE4E  25                 	db	37
   713  00FE4F  64                 	db	100	;'d'
   714  00FE50  00                 	db	0
   715  00FE51                     STR_55:
   716  00FE51  4E                 	db	78	;'N'
   717  00FE52  20                 	db	32
   718  00FE53  64                 	db	100	;'d'
   719  00FE54  69                 	db	105	;'i'
   720  00FE55  73                 	db	115	;'s'
   721  00FE56  70                 	db	112	;'p'
   722  00FE57  65                 	db	101	;'e'
   723  00FE58  6E                 	db	110	;'n'
   724  00FE59  73                 	db	115	;'s'
   725  00FE5A  65                 	db	101	;'e'
   726  00FE5B  64                 	db	100	;'d'
   727  00FE5C  3A                 	db	58	;':'
   728  00FE5D  25                 	db	37
   729  00FE5E  64                 	db	100	;'d'
   730  00FE5F  00                 	db	0
   731  00FE60                     STR_56:
   732  00FE60  53                 	db	83	;'S'
   733  00FE61  20                 	db	32
   734  00FE62  64                 	db	100	;'d'
   735  00FE63  69                 	db	105	;'i'
   736  00FE64  73                 	db	115	;'s'
   737  00FE65  70                 	db	112	;'p'
   738  00FE66  65                 	db	101	;'e'
   739  00FE67  6E                 	db	110	;'n'
   740  00FE68  73                 	db	115	;'s'
   741  00FE69  65                 	db	101	;'e'
   742  00FE6A  64                 	db	100	;'d'
   743  00FE6B  3A                 	db	58	;':'
   744  00FE6C  25                 	db	37
   745  00FE6D  64                 	db	100	;'d'
   746  00FE6E  00                 	db	0
   747  00FE6F                     STR_57:
   748  00FE6F  57                 	db	87	;'W'
   749  00FE70  20                 	db	32
   750  00FE71  64                 	db	100	;'d'
   751  00FE72  69                 	db	105	;'i'
   752  00FE73  73                 	db	115	;'s'
   753  00FE74  70                 	db	112	;'p'
   754  00FE75  65                 	db	101	;'e'
   755  00FE76  6E                 	db	110	;'n'
   756  00FE77  73                 	db	115	;'s'
   757  00FE78  65                 	db	101	;'e'
   758  00FE79  64                 	db	100	;'d'
   759  00FE7A  3A                 	db	58	;':'
   760  00FE7B  25                 	db	37
   761  00FE7C  64                 	db	100	;'d'
   762  00FE7D  00                 	db	0
   763  00FE7E                     STR_38:
   764  00FE7E  42                 	db	66	;'B'
   765  00FE7F  6F                 	db	111	;'o'
   766  00FE80  6C                 	db	108	;'l'
   767  00FE81  74                 	db	116	;'t'
   768  00FE82  5F                 	db	95	;'_'
   769  00FE83  72                 	db	114	;'r'
   770  00FE84  65                 	db	101	;'e'
   771  00FE85  6D                 	db	109	;'m'
   772  00FE86  61                 	db	97	;'a'
   773  00FE87  69                 	db	105	;'i'
   774  00FE88  6E                 	db	110	;'n'
   775  00FE89  3A                 	db	58	;':'
   776  00FE8A  25                 	db	37
   777  00FE8B  64                 	db	100	;'d'
   778  00FE8C  00                 	db	0
   779  00FE8D                     STR_21:
   780  00FE8D  70                 	db	112	;'p'
   781  00FE8E  72                 	db	114	;'r'
   782  00FE8F  6F                 	db	111	;'o'
   783  00FE90  63                 	db	99	;'c'
   784  00FE91  65                 	db	101	;'e'
   785  00FE92  73                 	db	115	;'s'
   786  00FE93  73                 	db	115	;'s'
   787  00FE94  69                 	db	105	;'i'
   788  00FE95  6E                 	db	110	;'n'
   789  00FE96  67                 	db	103	;'g'
   790  00FE97  20                 	db	32
   791  00FE98  43                 	db	67	;'C'
   792  00FE99  25                 	db	37
   793  00FE9A  64                 	db	100	;'d'
   794  00FE9B  00                 	db	0
   795  00FE9C                     STR_46:
   796  00FE9C  25                 	db	37
   797  00FE9D  30                 	db	48	;'0'
   798  00FE9E  32                 	db	50	;'2'
   799  00FE9F  78                 	db	120	;'x'
   800  00FEA0  2F                 	db	47
   801  00FEA1  25                 	db	37
   802  00FEA2  30                 	db	48	;'0'
   803  00FEA3  32                 	db	50	;'2'
   804  00FEA4  78                 	db	120	;'x'
   805  00FEA5  2F                 	db	47
   806  00FEA6  25                 	db	37
   807  00FEA7  30                 	db	48	;'0'
   808  00FEA8  32                 	db	50	;'2'
   809  00FEA9  78                 	db	120	;'x'
   810  00FEAA  00                 	db	0
   811  00FEAB                     STR_47:
   812  00FEAB  25                 	db	37
   813  00FEAC  30                 	db	48	;'0'
   814  00FEAD  32                 	db	50	;'2'
   815  00FEAE  78                 	db	120	;'x'
   816  00FEAF  3A                 	db	58	;':'
   817  00FEB0  25                 	db	37
   818  00FEB1  30                 	db	48	;'0'
   819  00FEB2  32                 	db	50	;'2'
   820  00FEB3  78                 	db	120	;'x'
   821  00FEB4  3A                 	db	58	;':'
   822  00FEB5  25                 	db	37
   823  00FEB6  30                 	db	48	;'0'
   824  00FEB7  32                 	db	50	;'2'
   825  00FEB8  78                 	db	120	;'x'
   826  00FEB9  00                 	db	0
   827  00FEBA                     STR_15:
   828  00FEBA  63                 	db	99	;'c'
   829  00FEBB  68                 	db	104	;'h'
   830  00FEBC  61                 	db	97	;'a'
   831  00FEBD  6E                 	db	110	;'n'
   832  00FEBE  67                 	db	103	;'g'
   833  00FEBF  65                 	db	101	;'e'
   834  00FEC0  20                 	db	32
   835  00FEC1  6D                 	db	109	;'m'
   836  00FEC2  6F                 	db	111	;'o'
   837  00FEC3  64                 	db	100	;'d'
   838  00FEC4  65                 	db	101	;'e'
   839  00FEC5  20                 	db	32
   840  00FEC6  32                 	db	50	;'2'
   841  00FEC7  00                 	db	0
   842  00FEC8                     STR_4:
   843  00FEC8  66                 	db	102	;'f'
   844  00FEC9  61                 	db	97	;'a'
   845  00FECA  73                 	db	115	;'s'
   846  00FECB  74                 	db	116	;'t'
   847  00FECC  65                 	db	101	;'e'
   848  00FECD  6E                 	db	110	;'n'
   849  00FECE  65                 	db	101	;'e'
   850  00FECF  72                 	db	114	;'r'
   851  00FED0  20                 	db	32
   852  00FED1  73                 	db	115	;'s'
   853  00FED2  65                 	db	101	;'e'
   854  00FED3  74                 	db	116	;'t'
   855  00FED4  3A                 	db	58	;':'
   856  00FED5  00                 	db	0
   857  00FED6                     STR_39:
   858  00FED6  4E                 	db	78	;'N'
   859  00FED7  75                 	db	117	;'u'
   860  00FED8  74                 	db	116	;'t'
   861  00FED9  5F                 	db	95	;'_'
   862  00FEDA  72                 	db	114	;'r'
   863  00FEDB  65                 	db	101	;'e'
   864  00FEDC  6D                 	db	109	;'m'
   865  00FEDD  61                 	db	97	;'a'
   866  00FEDE  69                 	db	105	;'i'
   867  00FEDF  6E                 	db	110	;'n'
   868  00FEE0  3A                 	db	58	;':'
   869  00FEE1  25                 	db	37
   870  00FEE2  64                 	db	100	;'d'
   871  00FEE3  00                 	db	0
   872  00FEE4                     STR_2:
   873  00FEE4  32                 	db	50	;'2'
   874  00FEE5  3A                 	db	58	;':'
   875  00FEE6  69                 	db	105	;'i'
   876  00FEE7  6E                 	db	110	;'n'
   877  00FEE8  73                 	db	115	;'s'
   878  00FEE9  74                 	db	116	;'t'
   879  00FEEA  72                 	db	114	;'r'
   880  00FEEB  75                 	db	117	;'u'
   881  00FEEC  63                 	db	99	;'c'
   882  00FEED  74                 	db	116	;'t'
   883  00FEEE  69                 	db	105	;'i'
   884  00FEEF  6F                 	db	111	;'o'
   885  00FEF0  6E                 	db	110	;'n'
   886  00FEF1  00                 	db	0
   887  00FEF2                     STR_22:
   888  00FEF2  42                 	db	66	;'B'
   889  00FEF3  5F                 	db	95	;'_'
   890  00FEF4  63                 	db	99	;'c'
   891  00FEF5  6F                 	db	111	;'o'
   892  00FEF6  75                 	db	117	;'u'
   893  00FEF7  6E                 	db	110	;'n'
   894  00FEF8  74                 	db	116	;'t'
   895  00FEF9  65                 	db	101	;'e'
   896  00FEFA  72                 	db	114	;'r'
   897  00FEFB  3A                 	db	58	;':'
   898  00FEFC  25                 	db	37
   899  00FEFD  64                 	db	100	;'d'
   900  00FEFE  00                 	db	0
   901  00FEFF                     STR_25:
   902  00FEFF  4E                 	db	78	;'N'
   903  00FF00  5F                 	db	95	;'_'
   904  00FF01  63                 	db	99	;'c'
   905  00FF02  6F                 	db	111	;'o'
   906  00FF03  75                 	db	117	;'u'
   907  00FF04  6E                 	db	110	;'n'
   908  00FF05  74                 	db	116	;'t'
   909  00FF06  65                 	db	101	;'e'
   910  00FF07  72                 	db	114	;'r'
   911  00FF08  3A                 	db	58	;':'
   912  00FF09  25                 	db	37
   913  00FF0A  64                 	db	100	;'d'
   914  00FF0B  00                 	db	0
   915  00FF0C                     STR_28:
   916  00FF0C  53                 	db	83	;'S'
   917  00FF0D  5F                 	db	95	;'_'
   918  00FF0E  63                 	db	99	;'c'
   919  00FF0F  6F                 	db	111	;'o'
   920  00FF10  75                 	db	117	;'u'
   921  00FF11  6E                 	db	110	;'n'
   922  00FF12  74                 	db	116	;'t'
   923  00FF13  65                 	db	101	;'e'
   924  00FF14  72                 	db	114	;'r'
   925  00FF15  3A                 	db	58	;':'
   926  00FF16  25                 	db	37
   927  00FF17  64                 	db	100	;'d'
   928  00FF18  00                 	db	0
   929  00FF19                     STR_51:
   930  00FF19  25                 	db	37
   931  00FF1A  64                 	db	100	;'d'
   932  00FF1B  6D                 	db	109	;'m'
   933  00FF1C  69                 	db	105	;'i'
   934  00FF1D  6E                 	db	110	;'n'
   935  00FF1E  20                 	db	32
   936  00FF1F  25                 	db	37
   937  00FF20  64                 	db	100	;'d'
   938  00FF21  73                 	db	115	;'s'
   939  00FF22  65                 	db	101	;'e'
   940  00FF23  63                 	db	99	;'c'
   941  00FF24  73                 	db	115	;'s'
   942  00FF25  00                 	db	0
   943  00FF26                     STR_20:
   944  00FF26  43                 	db	67	;'C'
   945  00FF27  30                 	db	48	;'0'
   946  00FF28  20                 	db	32
   947  00FF29  69                 	db	105	;'i'
   948  00FF2A  73                 	db	115	;'s'
   949  00FF2B  20                 	db	32
   950  00FF2C  66                 	db	102	;'f'
   951  00FF2D  6F                 	db	111	;'o'
   952  00FF2E  75                 	db	117	;'u'
   953  00FF2F  6E                 	db	110	;'n'
   954  00FF30  64                 	db	100	;'d'
   955  00FF31  00                 	db	0
   956  00FF32                     STR_42:
   957  00FF32  79                 	db	121	;'y'
   958  00FF33  6F                 	db	111	;'o'
   959  00FF34  75                 	db	117	;'u'
   960  00FF35  27                 	db	39
   961  00FF36  72                 	db	114	;'r'
   962  00FF37  65                 	db	101	;'e'
   963  00FF38  20                 	db	32
   964  00FF39  64                 	db	100	;'d'
   965  00FF3A  6F                 	db	111	;'o'
   966  00FF3B  6E                 	db	110	;'n'
   967  00FF3C  65                 	db	101	;'e'
   968  00FF3D  00                 	db	0
   969  00FF3E                     STR_78:
   970  00FF3E  57                 	db	87	;'W'
   971  00FF3F  72                 	db	114	;'r'
   972  00FF40  6F                 	db	111	;'o'
   973  00FF41  6E                 	db	110	;'n'
   974  00FF42  67                 	db	103	;'g'
   975  00FF43  20                 	db	32
   976  00FF44  69                 	db	105	;'i'
   977  00FF45  6E                 	db	110	;'n'
   978  00FF46  70                 	db	112	;'p'
   979  00FF47  75                 	db	117	;'u'
   980  00FF48  74                 	db	116	;'t'
   981  00FF49  00                 	db	0
   982  00FF4A                     STR_73:
   983  00FF4A  77                 	db	119	;'w'
   984  00FF4B  72                 	db	114	;'r'
   985  00FF4C  6F                 	db	111	;'o'
   986  00FF4D  6E                 	db	110	;'n'
   987  00FF4E  67                 	db	103	;'g'
   988  00FF4F  20                 	db	32
   989  00FF50  73                 	db	115	;'s'
   990  00FF51  65                 	db	101	;'e'
   991  00FF52  74                 	db	116	;'t'
   992  00FF53  21                 	db	33
   993  00FF54  00                 	db	0
   994  00FF55                     STR_23:
   995  00FF55  42                 	db	66	;'B'
   996  00FF56  5F                 	db	95	;'_'
   997  00FF57  63                 	db	99	;'c'
   998  00FF58  6F                 	db	111	;'o'
   999  00FF59  75                 	db	117	;'u'
  1000  00FF5A  6E                 	db	110	;'n'
  1001  00FF5B  74                 	db	116	;'t'
  1002  00FF5C  3A                 	db	58	;':'
  1003  00FF5D  25                 	db	37
  1004  00FF5E  64                 	db	100	;'d'
  1005  00FF5F  00                 	db	0
  1006  00FF60                     STR_26:
  1007  00FF60  4E                 	db	78	;'N'
  1008  00FF61  5F                 	db	95	;'_'
  1009  00FF62  63                 	db	99	;'c'
  1010  00FF63  6F                 	db	111	;'o'
  1011  00FF64  75                 	db	117	;'u'
  1012  00FF65  6E                 	db	110	;'n'
  1013  00FF66  74                 	db	116	;'t'
  1014  00FF67  3A                 	db	58	;':'
  1015  00FF68  25                 	db	37
  1016  00FF69  64                 	db	100	;'d'
  1017  00FF6A  00                 	db	0
  1018  00FF6B                     STR_29:
  1019  00FF6B  53                 	db	83	;'S'
  1020  00FF6C  5F                 	db	95	;'_'
  1021  00FF6D  63                 	db	99	;'c'
  1022  00FF6E  6F                 	db	111	;'o'
  1023  00FF6F  75                 	db	117	;'u'
  1024  00FF70  6E                 	db	110	;'n'
  1025  00FF71  74                 	db	116	;'t'
  1026  00FF72  3A                 	db	58	;':'
  1027  00FF73  25                 	db	37
  1028  00FF74  64                 	db	100	;'d'
  1029  00FF75  00                 	db	0
  1030  00FF76                     STR_45:
  1031  00FF76  33                 	db	51	;'3'
  1032  00FF77  3A                 	db	58	;':'
  1033  00FF78  73                 	db	115	;'s'
  1034  00FF79  75                 	db	117	;'u'
  1035  00FF7A  6D                 	db	109	;'m'
  1036  00FF7B  6D                 	db	109	;'m'
  1037  00FF7C  61                 	db	97	;'a'
  1038  00FF7D  72                 	db	114	;'r'
  1039  00FF7E  79                 	db	121	;'y'
  1040  00FF7F  00                 	db	0
  1041  00FF80                     STR_70:
  1042  00FF80  63                 	db	99	;'c'
  1043  00FF81  6F                 	db	111	;'o'
  1044  00FF82  72                 	db	114	;'r'
  1045  00FF83  72                 	db	114	;'r'
  1046  00FF84  65                 	db	101	;'e'
  1047  00FF85  63                 	db	99	;'c'
  1048  00FF86  74                 	db	116	;'t'
  1049  00FF87  21                 	db	33
  1050  00FF88  00                 	db	0
  1051  00FF89                     STR_63:
  1052  00FF89  30                 	db	48	;'0'
  1053  00FF8A  30                 	db	48	;'0'
  1054  00FF8B  3A                 	db	58	;':'
  1055  00FF8C  30                 	db	48	;'0'
  1056  00FF8D  34                 	db	52	;'4'
  1057  00FF8E  3A                 	db	58	;':'
  1058  00FF8F  30                 	db	48	;'0'
  1059  00FF90  33                 	db	51	;'3'
  1060  00FF91  00                 	db	0
  1061  00FF92                     STR_79:
  1062  00FF92  54                 	db	84	;'T'
  1063  00FF93  4F                 	db	79	;'O'
  1064  00FF94  4F                 	db	79	;'O'
  1065  00FF95  20                 	db	32
  1066  00FF96  4D                 	db	77	;'M'
  1067  00FF97  41                 	db	65	;'A'
  1068  00FF98  4E                 	db	78	;'N'
  1069  00FF99  59                 	db	89	;'Y'
  1070  00FF9A  00                 	db	0
  1071  00FF9B                     STR_34:
  1072  00FF9B  64                 	db	100	;'d'
  1073  00FF9C  6F                 	db	111	;'o'
  1074  00FF9D  6E                 	db	110	;'n'
  1075  00FF9E  65                 	db	101	;'e'
  1076  00FF9F  20                 	db	32
  1077  00FFA0  43                 	db	67	;'C'
  1078  00FFA1  25                 	db	37
  1079  00FFA2  64                 	db	100	;'d'
  1080  00FFA3  00                 	db	0
  1081  00FFA4                     STR_6:
  1082  00FFA4  6E                 	db	110	;'n'
  1083  00FFA5  75                 	db	117	;'u'
  1084  00FFA6  6D                 	db	109	;'m'
  1085  00FFA7  62                 	db	98	;'b'
  1086  00FFA8  65                 	db	101	;'e'
  1087  00FFA9  72                 	db	114	;'r'
  1088  00FFAA  3A                 	db	58	;':'
  1089  00FFAB  00                 	db	0
  1090  00FFAC                     STR_101:
  1091  00FFAC  28                 	db	40
  1092  00FFAD  6E                 	db	110	;'n'
  1093  00FFAE  75                 	db	117	;'u'
  1094  00FFAF  6C                 	db	108	;'l'
  1095  00FFB0  6C                 	db	108	;'l'
  1096  00FFB1  29                 	db	41
  1097  00FFB2  00                 	db	0
  1098  00FFB3                     STR_76:
  1099  00FFB3  77                 	db	119	;'w'
  1100  00FFB4  72                 	db	114	;'r'
  1101  00FFB5  6F                 	db	111	;'o'
  1102  00FFB6  6E                 	db	110	;'n'
  1103  00FFB7  67                 	db	103	;'g'
  1104  00FFB8  21                 	db	33
  1105  00FFB9  00                 	db	0
  1106  00FFBA                     STR_7:
  1107  00FFBA  44                 	db	68	;'D'
  1108  00FFBB  6F                 	db	111	;'o'
  1109  00FFBC  6E                 	db	110	;'n'
  1110  00FFBD  65                 	db	101	;'e'
  1111  00FFBE  21                 	db	33
  1112  00FFBF  00                 	db	0
  1113  00FFC0                     STR_99:
  1114  00FFC0  42                 	db	66	;'B'
  1115  00FFC1  4E                 	db	78	;'N'
  1116  00FFC2  4E                 	db	78	;'N'
  1117  00FFC3  4E                 	db	78	;'N'
  1118  00FFC4  00                 	db	0
  1119  00FFC5                     STR_97:
  1120  00FFC5  42                 	db	66	;'B'
  1121  00FFC6  42                 	db	66	;'B'
  1122  00FFC7  4E                 	db	78	;'N'
  1123  00FFC8  57                 	db	87	;'W'
  1124  00FFC9  00                 	db	0
  1125  00FFCA                     STR_98:
  1126  00FFCA  42                 	db	66	;'B'
  1127  00FFCB  4E                 	db	78	;'N'
  1128  00FFCC  4E                 	db	78	;'N'
  1129  00FFCD  57                 	db	87	;'W'
  1130  00FFCE  00                 	db	0
  1131  00FFCF                     STR_96:
  1132  00FFCF  42                 	db	66	;'B'
  1133  00FFD0  42                 	db	66	;'B'
  1134  00FFD1  53                 	db	83	;'S'
  1135  00FFD2  57                 	db	87	;'W'
  1136  00FFD3  00                 	db	0
  1137  00FFD4                     STR_94:
  1138  00FFD4  42                 	db	66	;'B'
  1139  00FFD5  4E                 	db	78	;'N'
  1140  00FFD6  57                 	db	87	;'W'
  1141  00FFD7  57                 	db	87	;'W'
  1142  00FFD8  00                 	db	0
  1143  00FFD9                     STR_95:
  1144  00FFD9  42                 	db	66	;'B'
  1145  00FFDA  53                 	db	83	;'S'
  1146  00FFDB  57                 	db	87	;'W'
  1147  00FFDC  57                 	db	87	;'W'
  1148  00FFDD  00                 	db	0
  1149  00FFDE                     STR_100:
  1150  00FFDE  42                 	db	66	;'B'
  1151  00FFDF  57                 	db	87	;'W'
  1152  00FFE0  57                 	db	87	;'W'
  1153  00FFE1  57                 	db	87	;'W'
  1154  00FFE2  00                 	db	0
  1155  00FFE3                     STR_9:
  1156  00FFE3  73                 	db	115	;'s'
  1157  00FFE4  74                 	db	116	;'t'
  1158  00FFE5  65                 	db	101	;'e'
  1159  00FFE6  70                 	db	112	;'p'
  1160  00FFE7  00                 	db	0
  1161  00FFE8                     STR_88:
  1162  00FFE8  42                 	db	66	;'B'
  1163  00FFE9  42                 	db	66	;'B'
  1164  00FFEA  4E                 	db	78	;'N'
  1165  00FFEB  00                 	db	0
  1166  00FFEC                     STR_89:
  1167  00FFEC  42                 	db	66	;'B'
  1168  00FFED  42                 	db	66	;'B'
  1169  00FFEE  53                 	db	83	;'S'
  1170  00FFEF  00                 	db	0
  1171  00FFF0                     STR_90:
  1172  00FFF0  42                 	db	66	;'B'
  1173  00FFF1  42                 	db	66	;'B'
  1174  00FFF2  57                 	db	87	;'W'
  1175  00FFF3  00                 	db	0
  1176  00FFF4                     STR_93:
  1177  00FFF4  42                 	db	66	;'B'
  1178  00FFF5  57                 	db	87	;'W'
  1179  00FFF6  57                 	db	87	;'W'
  1180  00FFF7  00                 	db	0
  1181  00FFF8                     STR_5:
  1182  00FFF8  25                 	db	37
  1183  00FFF9  73                 	db	115	;'s'
  1184  00FFFA  00                 	db	0
  1185  00FFFB                     STR_13:
  1186  00FFFB  2C                 	db	44
  1187  00FFFC  00                 	db	0
  1188  00FFFD                     STR_66:
  1189  00FFFD  42                 	db	66	;'B'
  1190  00FFFE  00                 	db	0
  1191  0000                     
  1192                           ; #config settings
  1193  00FFFF  00                 	db	0	; dummy byte at the end
  1194  0000                     
  1195                           	psect	cinit
  1196  0040D2                     __pcinit:
  1197                           	opt stack 0
  1198  0040D2                     start_initialization:
  1199                           	opt stack 0
  1200  0040D2                     __initialization:
  1201                           	opt stack 0
  1202                           
  1203                           ; Initialize objects allocated to BANK1 (10 bytes)
  1204                           ; load TBLPTR registers with __pidataBANK1
  1205  0040D2  0E3D               	movlw	low __pidataBANK1
  1206  0040D4  6EF6               	movwf	tblptrl,c
  1207  0040D6  0E47               	movlw	high __pidataBANK1
  1208  0040D8  6EF7               	movwf	tblptrh,c
  1209  0040DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1210  0040DC  6EF8               	movwf	tblptru,c
  1211  0040DE  EE01  F0D3         	lfsr	0,__pdataBANK1
  1212  0040E2  EE10 F00A          	lfsr	1,10
  1213  0040E6                     copy_data0:
  1214  0040E6  0009               	tblrd		*+
  1215  0040E8  CFF5 FFEE          	movff	tablat,postinc0
  1216  0040EC  50E5               	movf	postdec1,w,c
  1217  0040EE  50E1               	movf	fsr1l,w,c
  1218  0040F0  E1FA               	bnz	copy_data0
  1219                           
  1220                           ; Initialize objects allocated to BANK0 (15 bytes)
  1221                           ; load TBLPTR registers with __pidataBANK0
  1222  0040F2  0E2E               	movlw	low __pidataBANK0
  1223  0040F4  6EF6               	movwf	tblptrl,c
  1224  0040F6  0E47               	movlw	high __pidataBANK0
  1225  0040F8  6EF7               	movwf	tblptrh,c
  1226  0040FA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1227  0040FC  6EF8               	movwf	tblptru,c
  1228  0040FE  EE00  F0F0         	lfsr	0,__pdataBANK0
  1229  004102  EE10 F00F          	lfsr	1,15
  1230  004106                     copy_data1:
  1231  004106  0009               	tblrd		*+
  1232  004108  CFF5 FFEE          	movff	tablat,postinc0
  1233  00410C  50E5               	movf	postdec1,w,c
  1234  00410E  50E1               	movf	fsr1l,w,c
  1235  004110  E1FA               	bnz	copy_data1
  1236                           
  1237                           ; Clear objects allocated to BANK2 (200 bytes)
  1238  004112  EE02  F000         	lfsr	0,__pbssBANK2
  1239  004116  0EC8               	movlw	200
  1240  004118                     clear_0:
  1241  004118  6AEE               	clrf	postinc0,c
  1242  00411A  06E8               	decf	wreg,f,c
  1243  00411C  E1FD               	bnz	clear_0
  1244                           
  1245                           ; Clear objects allocated to BANK1 (211 bytes)
  1246  00411E  EE01  F000         	lfsr	0,__pbssBANK1
  1247  004122  0ED3               	movlw	211
  1248  004124                     clear_1:
  1249  004124  6AEE               	clrf	postinc0,c
  1250  004126  06E8               	decf	wreg,f,c
  1251  004128  E1FD               	bnz	clear_1
  1252                           
  1253                           ; Clear objects allocated to BANK0 (72 bytes)
  1254  00412A  EE00  F080         	lfsr	0,__pbssBANK0
  1255  00412E  0E48               	movlw	72
  1256  004130                     clear_2:
  1257  004130  6AEE               	clrf	postinc0,c
  1258  004132  06E8               	decf	wreg,f,c
  1259  004134  E1FD               	bnz	clear_2
  1260                           
  1261                           ; Clear objects allocated to COMRAM (57 bytes)
  1262  004136  EE00  F046         	lfsr	0,__pbssCOMRAM
  1263  00413A  0E39               	movlw	57
  1264  00413C                     clear_3:
  1265  00413C  6AEE               	clrf	postinc0,c
  1266  00413E  06E8               	decf	wreg,f,c
  1267  004140  E1FD               	bnz	clear_3
  1268  004142                     end_of_initialization:
  1269                           	opt stack 0
  1270  004142                     __end_of__initialization:
  1271                           	opt stack 0
  1272  004142  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1273  004144  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1274  004146  0100               	movlb	0
  1275  004148  EF21  F00F         	goto	_main	;jump to C main() function
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           postinc0	equ	0xFEE
  1281                           wreg	equ	0xFE8
  1282                           postdec1	equ	0xFE5
  1283                           fsr1l	equ	0xFE1
  1284                           
  1285                           	psect	bssCOMRAM
  1286  000046                     __pbssCOMRAM:
  1287                           	opt stack 0
  1288  000046                     _compartment_number:
  1289                           	opt stack 0
  1290  000046                     	ds	16
  1291  000056                     _time:
  1292                           	opt stack 0
  1293  000056                     	ds	7
  1294  00005D                     _B_total_dispensed:
  1295                           	opt stack 0
  1296  00005D                     	ds	2
  1297  00005F                     _W:
  1298                           	opt stack 0
  1299  00005F                     	ds	2
  1300  000061                     _S:
  1301                           	opt stack 0
  1302  000061                     	ds	2
  1303  000063                     _N:
  1304                           	opt stack 0
  1305  000063                     	ds	2
  1306  000065                     _B:
  1307                           	opt stack 0
  1308  000065                     	ds	2
  1309  000067                     _prev_state:
  1310                           	opt stack 0
  1311  000067                     	ds	2
  1312  000069                     _total_number:
  1313                           	opt stack 0
  1314  000069                     	ds	2
  1315  00006B                     _valid:
  1316                           	opt stack 0
  1317  00006B                     	ds	2
  1318  00006D                     _counter_step:
  1319                           	opt stack 0
  1320  00006D                     	ds	2
  1321  00006F                     _counter:
  1322                           	opt stack 0
  1323  00006F                     	ds	2
  1324  000071                     _operationTime:
  1325                           	opt stack 0
  1326  000071                     	ds	2
  1327  000073                     _operation:
  1328                           	opt stack 0
  1329  000073                     	ds	2
  1330  000075                     _j:
  1331                           	opt stack 0
  1332  000075                     	ds	1
  1333  000076                     _temp:
  1334                           	opt stack 0
  1335  000076                     	ds	1
  1336  000077                     	ds	1
  1337  000078                     _current_set2:
  1338                           	opt stack 0
  1339  000078                     	ds	5
  1340  00007D                     _number:
  1341                           	opt stack 0
  1342  00007D                     	ds	2
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	bssBANK0
  1353  000080                     __pbssBANK0:
  1354                           	opt stack 0
  1355  000080                     _compartment_array:
  1356                           	opt stack 0
  1357  000080                     	ds	16
  1358  000090                     _min_initial:
  1359                           	opt stack 0
  1360  000090                     	ds	2
  1361  000092                     _hr_initial:
  1362                           	opt stack 0
  1363  000092                     	ds	2
  1364  000094                     _W_total_dispensed:
  1365                           	opt stack 0
  1366  000094                     	ds	2
  1367  000096                     _S_total_dispensed:
  1368                           	opt stack 0
  1369  000096                     	ds	2
  1370  000098                     _N_total_dispensed:
  1371                           	opt stack 0
  1372  000098                     	ds	2
  1373  00009A                     _N_spacingTime:
  1374                           	opt stack 0
  1375  00009A                     	ds	2
  1376  00009C                     _W_remain:
  1377                           	opt stack 0
  1378  00009C                     	ds	2
  1379  00009E                     _S_remain:
  1380                           	opt stack 0
  1381  00009E                     	ds	2
  1382  0000A0                     _N_remain:
  1383                           	opt stack 0
  1384  0000A0                     	ds	2
  1385  0000A2                     _B_remain:
  1386                           	opt stack 0
  1387  0000A2                     	ds	2
  1388  0000A4                     _W_counter:
  1389                           	opt stack 0
  1390  0000A4                     	ds	2
  1391  0000A6                     _N_counter:
  1392                           	opt stack 0
  1393  0000A6                     	ds	2
  1394  0000A8                     _S_counter:
  1395                           	opt stack 0
  1396  0000A8                     	ds	2
  1397  0000AA                     _B_counter:
  1398                           	opt stack 0
  1399  0000AA                     	ds	2
  1400  0000AC                     _assembly_step:
  1401                           	opt stack 0
  1402  0000AC                     	ds	2
  1403  0000AE                     _state:
  1404                           	opt stack 0
  1405  0000AE                     	ds	2
  1406  0000B0                     _compartment_pos:
  1407                           	opt stack 0
  1408  0000B0                     	ds	2
  1409  0000B2                     _prev:
  1410                           	opt stack 0
  1411  0000B2                     	ds	2
  1412  0000B4                     _gear_counter:
  1413                           	opt stack 0
  1414  0000B4                     	ds	2
  1415  0000B6                     _operation_done:
  1416                           	opt stack 0
  1417  0000B6                     	ds	2
  1418  0000B8                     _change_mode:
  1419                           	opt stack 0
  1420  0000B8                     	ds	2
  1421  0000BA                     _mode:
  1422                           	opt stack 0
  1423  0000BA                     	ds	2
  1424  0000BC                     _white_tape:
  1425                           	opt stack 0
  1426  0000BC                     	ds	2
  1427  0000BE                     _i:
  1428                           	opt stack 0
  1429  0000BE                     	ds	2
  1430  0000C0                     _nuts_data:
  1431                           	opt stack 0
  1432  0000C0                     	ds	1
  1433  0000C1                     _openHandle_data:
  1434                           	opt stack 0
  1435  0000C1                     	ds	1
  1436  0000C2                     _LCDinterruptState:
  1437                           	opt stack 0
  1438  0000C2                     	ds	1
  1439  0000C3                     _current_set:
  1440                           	opt stack 0
  1441  0000C3                     	ds	5
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           
  1451                           	psect	dataBANK0
  1452  0000F0                     __pdataBANK0:
  1453                           	opt stack 0
  1454  0000F0                     _close_handle:
  1455                           	opt stack 0
  1456  0000F0                     	ds	1
  1457  0000F1                     _servo_ramp:
  1458                           	opt stack 0
  1459  0000F1                     	ds	1
  1460  0000F2                     _motorStop_3:
  1461                           	opt stack 0
  1462  0000F2                     	ds	1
  1463  0000F3                     _motorStart_3:
  1464                           	opt stack 0
  1465  0000F3                     	ds	1
  1466  0000F4                     _motorStop_2:
  1467                           	opt stack 0
  1468  0000F4                     	ds	1
  1469  0000F5                     _motorStart_2:
  1470                           	opt stack 0
  1471  0000F5                     	ds	1
  1472  0000F6                     _motorStop_1:
  1473                           	opt stack 0
  1474  0000F6                     	ds	1
  1475  0000F7                     _motorStart_1:
  1476                           	opt stack 0
  1477  0000F7                     	ds	1
  1478  0000F8                     _motorStop_0:
  1479                           	opt stack 0
  1480  0000F8                     	ds	1
  1481  0000F9                     _motorStart_0:
  1482                           	opt stack 0
  1483  0000F9                     	ds	1
  1484  0000FA                     _S_dispense:
  1485                           	opt stack 0
  1486  0000FA                     	ds	1
  1487  0000FB                     _N_dispense:
  1488                           	opt stack 0
  1489  0000FB                     	ds	1
  1490  0000FC                     _B_dispense:
  1491                           	opt stack 0
  1492  0000FC                     	ds	1
  1493  0000FD                     _rotate_1compartment:
  1494                           	opt stack 0
  1495  0000FD                     	ds	1
  1496  0000FE                     _rotate_gear:
  1497                           	opt stack 0
  1498  0000FE                     	ds	1
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           postdec1	equ	0xFE5
  1506                           fsr1l	equ	0xFE1
  1507                           
  1508                           	psect	bssBANK1
  1509  000100                     __pbssBANK1:
  1510                           	opt stack 0
  1511  000100                     _W_array:
  1512                           	opt stack 0
  1513  000100                     	ds	16
  1514  000110                     _N_array:
  1515                           	opt stack 0
  1516  000110                     	ds	16
  1517  000120                     _S_array:
  1518                           	opt stack 0
  1519  000120                     	ds	16
  1520  000130                     _B_array:
  1521                           	opt stack 0
  1522  000130                     	ds	16
  1523  000140                     _prev_number:
  1524                           	opt stack 0
  1525  000140                     	ds	16
  1526  000150                     _final_number:
  1527                           	opt stack 0
  1528  000150                     	ds	16
  1529  000160                     _final_time:
  1530                           	opt stack 0
  1531  000160                     	ds	2
  1532  000162                     _sec_final:
  1533                           	opt stack 0
  1534  000162                     	ds	2
  1535  000164                     _min_final:
  1536                           	opt stack 0
  1537  000164                     	ds	2
  1538  000166                     _hr_final:
  1539                           	opt stack 0
  1540  000166                     	ds	2
  1541  000168                     _initial_time:
  1542                           	opt stack 0
  1543  000168                     	ds	2
  1544  00016A                     _sec_initial:
  1545                           	opt stack 0
  1546  00016A                     	ds	2
  1547  00016C                     _W_done:
  1548                           	opt stack 0
  1549  00016C                     	ds	2
  1550  00016E                     _S_done:
  1551                           	opt stack 0
  1552  00016E                     	ds	2
  1553  000170                     _N_done:
  1554                           	opt stack 0
  1555  000170                     	ds	2
  1556  000172                     _B_done:
  1557                           	opt stack 0
  1558  000172                     	ds	2
  1559  000174                     _W_spacingTime:
  1560                           	opt stack 0
  1561  000174                     	ds	2
  1562  000176                     _S_spacingTime:
  1563                           	opt stack 0
  1564  000176                     	ds	2
  1565  000178                     _B_spacingTime:
  1566                           	opt stack 0
  1567  000178                     	ds	2
  1568  00017A                     _error:
  1569                           	opt stack 0
  1570  00017A                     	ds	2
  1571  00017C                     _angle:
  1572                           	opt stack 0
  1573  00017C                     	ds	2
  1574  00017E                     _prev_set:
  1575                           	opt stack 0
  1576  00017E                     	ds	40
  1577  0001A6                     _final_set:
  1578                           	opt stack 0
  1579  0001A6                     	ds	40
  1580  0001CE                     _temp_set:
  1581                           	opt stack 0
  1582  0001CE                     	ds	5
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postdec1	equ	0xFE5
  1590                           fsr1l	equ	0xFE1
  1591                           
  1592                           	psect	dataBANK1
  1593  0001D3                     __pdataBANK1:
  1594                           	opt stack 0
  1595  0001D3                     _W_max:
  1596                           	opt stack 0
  1597  0001D3                     	ds	2
  1598  0001D5                     _S_max:
  1599                           	opt stack 0
  1600  0001D5                     	ds	2
  1601  0001D7                     _N_max:
  1602                           	opt stack 0
  1603  0001D7                     	ds	2
  1604  0001D9                     _B_max:
  1605                           	opt stack 0
  1606  0001D9                     	ds	2
  1607  0001DB                     _init_position:
  1608                           	opt stack 0
  1609  0001DB                     	ds	2
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postdec1	equ	0xFE5
  1617                           fsr1l	equ	0xFE1
  1618                           
  1619                           	psect	bssBANK2
  1620  000200                     __pbssBANK2:
  1621                           	opt stack 0
  1622  000200                     _fastener:
  1623                           	opt stack 0
  1624  000200                     	ds	200
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	cstackBANK0
  1635  0000C8                     __pcstackBANK0:
  1636                           	opt stack 0
  1637  0000C8                     ??_isdigit:
  1638  0000C8                     ??_I2C_Master_Wait:
  1639  0000C8                     ?_readADC:
  1640                           	opt stack 0
  1641  0000C8                     ?___awdiv:
  1642                           	opt stack 0
  1643  0000C8                     ?___lwdiv:
  1644                           	opt stack 0
  1645  0000C8                     ?___lldiv:
  1646                           	opt stack 0
  1647  0000C8                     lcdNibble@temp:
  1648                           	opt stack 0
  1649  0000C8                     generate_compartment_array@step:
  1650                           	opt stack 0
  1651  0000C8                     ___awdiv@dividend:
  1652                           	opt stack 0
  1653  0000C8                     ___lwdiv@dividend:
  1654                           	opt stack 0
  1655  0000C8                     ___lldiv@dividend:
  1656                           	opt stack 0
  1657                           
  1658                           ; 4 bytes @ 0x0
  1659  0000C8                     	ds	1
  1660  0000C9                     lcdNibble@data:
  1661                           	opt stack 0
  1662  0000C9                     I2C_Master_Read@ackBit:
  1663                           	opt stack 0
  1664  0000C9                     _isdigit$1367:
  1665                           	opt stack 0
  1666  0000C9                     I2C_Master_Write@byteToWrite:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x1
  1670  0000C9                     	ds	1
  1671  0000CA                     ??_generate_compartment_array:
  1672  0000CA                     ??_readADC:
  1673  0000CA                     lcdInst@data:
  1674                           	opt stack 0
  1675  0000CA                     putch@data:
  1676                           	opt stack 0
  1677  0000CA                     I2C_Master_Read@receivedByte:
  1678                           	opt stack 0
  1679  0000CA                     isdigit@c:
  1680                           	opt stack 0
  1681  0000CA                     ___awdiv@divisor:
  1682                           	opt stack 0
  1683  0000CA                     ___lwdiv@divisor:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x2
  1687  0000CA                     	ds	1
  1688  0000CB                     ??_initLCD:
  1689  0000CB                     I2C_sendData@char_data:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0x3
  1693  0000CB                     	ds	1
  1694  0000CC                     readADC@channel:
  1695                           	opt stack 0
  1696  0000CC                     ___awdiv@counter:
  1697                           	opt stack 0
  1698  0000CC                     ___lwdiv@quotient:
  1699                           	opt stack 0
  1700  0000CC                     ___lldiv@divisor:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x4
  1704  0000CC                     	ds	1
  1705  0000CD                     ___awdiv@sign:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0x5
  1709  0000CD                     	ds	1
  1710  0000CE                     ___lwdiv@counter:
  1711                           	opt stack 0
  1712  0000CE                     ___awdiv@quotient:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x6
  1716  0000CE                     	ds	1
  1717  0000CF                     ?___lwmod:
  1718                           	opt stack 0
  1719  0000CF                     ___lwmod@dividend:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x7
  1723  0000CF                     	ds	1
  1724  0000D0                     ?___wmul:
  1725                           	opt stack 0
  1726  0000D0                     ___wmul@multiplier:
  1727                           	opt stack 0
  1728  0000D0                     ___lldiv@quotient:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x8
  1732  0000D0                     	ds	1
  1733  0000D1                     ___lwmod@divisor:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x9
  1737  0000D1                     	ds	1
  1738  0000D2                     ___wmul@multiplicand:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0xA
  1742  0000D2                     	ds	1
  1743  0000D3                     ___lwmod@counter:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0xB
  1747  0000D3                     	ds	1
  1748  0000D4                     ___lldiv@counter:
  1749                           	opt stack 0
  1750  0000D4                     ___wmul@product:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0xC
  1754  0000D4                     	ds	1
  1755  0000D5                     I2C_Master_Init@clockFreq:
  1756                           	opt stack 0
  1757                           
  1758                           ; 4 bytes @ 0xD
  1759  0000D5                     	ds	1
  1760  0000D6                     ??_get_RTC_initial:
  1761  0000D6                     ??_get_RTC_final:
  1762  0000D6                     ?_printf:
  1763                           	opt stack 0
  1764  0000D6                     printf@f:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0xE
  1768  0000D6                     	ds	3
  1769  0000D9                     ??_I2C_Master_Init:
  1770                           
  1771                           ; 1 bytes @ 0x11
  1772  0000D9                     	ds	1
  1773  0000DA                     ??_printf:
  1774                           
  1775                           ; 1 bytes @ 0x12
  1776  0000DA                     	ds	4
  1777  0000DE                     printf@idx:
  1778                           	opt stack 0
  1779                           
  1780                           ; 1 bytes @ 0x16
  1781  0000DE                     	ds	1
  1782  0000DF                     printf@prec:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x17
  1786  0000DF                     	ds	1
  1787  0000E0                     printf@cp:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x18
  1791  0000E0                     	ds	2
  1792  0000E2                     printf@ap:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x1A
  1796  0000E2                     	ds	2
  1797  0000E4                     printf@len:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x1C
  1801  0000E4                     	ds	2
  1802  0000E6                     printf@val:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0x1E
  1806  0000E6                     	ds	2
  1807  0000E8                     printf@flag:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0x20
  1811  0000E8                     	ds	1
  1812  0000E9                     printf@width:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x21
  1816  0000E9                     	ds	2
  1817  0000EB                     printf@c:
  1818                           	opt stack 0
  1819                           
  1820                           ; 1 bytes @ 0x23
  1821  0000EB                     	ds	1
  1822  0000EC                     ??_main:
  1823                           
  1824                           ; 1 bytes @ 0x24
  1825  0000EC                     	ds	2
  1826  0000EE                     _main$1756:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x26
  1830  0000EE                     	ds	2
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1l	equ	0xFE1
  1839                           
  1840                           	psect	cstackCOMRAM
  1841  000001                     __pcstackCOMRAM:
  1842                           	opt stack 0
  1843  000001                     ??i2_I2C_Master_Wait:
  1844  000001                     ??i2_isdigit:
  1845  000001                     ?_check:
  1846                           	opt stack 0
  1847  000001                     ?_strcmp:
  1848                           	opt stack 0
  1849  000001                     ?___awmod:
  1850                           	opt stack 0
  1851  000001                     ?i2___wmul:
  1852                           	opt stack 0
  1853  000001                     ?i2___awdiv:
  1854                           	opt stack 0
  1855  000001                     ?i2___lwdiv:
  1856                           	opt stack 0
  1857  000001                     ?i2___lldiv:
  1858                           	opt stack 0
  1859  000001                     i2lcdNibble@temp:
  1860                           	opt stack 0
  1861  000001                     ___awmod@dividend:
  1862                           	opt stack 0
  1863  000001                     strcat@to:
  1864                           	opt stack 0
  1865  000001                     strcmp@s1:
  1866                           	opt stack 0
  1867  000001                     i2generate_compartment_array@step:
  1868                           	opt stack 0
  1869  000001                     i2___wmul@multiplier:
  1870                           	opt stack 0
  1871  000001                     i2___awdiv@dividend:
  1872                           	opt stack 0
  1873  000001                     i2___lwdiv@dividend:
  1874                           	opt stack 0
  1875  000001                     i2___lldiv@dividend:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x0
  1879  000001                     	ds	1
  1880  000002                     i2lcdNibble@data:
  1881                           	opt stack 0
  1882  000002                     i2I2C_Master_Read@ackBit:
  1883                           	opt stack 0
  1884  000002                     i2_isdigit$1367:
  1885                           	opt stack 0
  1886  000002                     i2I2C_Master_Write@byteToWrite:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x1
  1890  000002                     	ds	1
  1891  000003                     ??i2_generate_compartment_array:
  1892  000003                     i2lcdInst@data:
  1893                           	opt stack 0
  1894  000003                     i2putch@data:
  1895                           	opt stack 0
  1896  000003                     i2I2C_Master_Read@receivedByte:
  1897                           	opt stack 0
  1898  000003                     i2isdigit@c:
  1899                           	opt stack 0
  1900  000003                     ___awmod@divisor:
  1901                           	opt stack 0
  1902  000003                     strcat@from:
  1903                           	opt stack 0
  1904  000003                     strcmp@s2:
  1905                           	opt stack 0
  1906  000003                     i2___wmul@multiplicand:
  1907                           	opt stack 0
  1908  000003                     i2___awdiv@divisor:
  1909                           	opt stack 0
  1910  000003                     i2___lwdiv@divisor:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x2
  1914  000003                     	ds	1
  1915  000004                     ??i2_initLCD:
  1916  000004                     
  1917                           ; 1 bytes @ 0x3
  1918  000004                     	ds	1
  1919  000005                     ??_strcmp:
  1920  000005                     ___awmod@counter:
  1921                           	opt stack 0
  1922  000005                     i2___awdiv@counter:
  1923                           	opt stack 0
  1924  000005                     strcat@cp:
  1925                           	opt stack 0
  1926  000005                     i2___wmul@product:
  1927                           	opt stack 0
  1928  000005                     i2___lwdiv@quotient:
  1929                           	opt stack 0
  1930  000005                     i2___lldiv@divisor:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0x4
  1934  000005                     	ds	1
  1935  000006                     ___awmod@sign:
  1936                           	opt stack 0
  1937  000006                     strcmp@r:
  1938                           	opt stack 0
  1939  000006                     i2___awdiv@sign:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x5
  1943  000006                     	ds	1
  1944  000007                     ??_is_valid:
  1945  000007                     ?_strncmp:
  1946                           	opt stack 0
  1947  000007                     i2___lwdiv@counter:
  1948                           	opt stack 0
  1949  000007                     strcpy@to:
  1950                           	opt stack 0
  1951  000007                     strncmp@s1:
  1952                           	opt stack 0
  1953  000007                     i2___awdiv@quotient:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x6
  1957  000007                     	ds	1
  1958  000008                     ?i2___lwmod:
  1959                           	opt stack 0
  1960  000008                     i2___lwmod@dividend:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x7
  1964  000008                     	ds	1
  1965  000009                     strcpy@from:
  1966                           	opt stack 0
  1967  000009                     strncmp@s2:
  1968                           	opt stack 0
  1969  000009                     i2___lldiv@quotient:
  1970                           	opt stack 0
  1971                           
  1972                           ; 4 bytes @ 0x8
  1973  000009                     	ds	1
  1974  00000A                     i2___lwmod@divisor:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x9
  1978  00000A                     	ds	1
  1979  00000B                     strcpy@cp:
  1980                           	opt stack 0
  1981  00000B                     strncmp@len:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0xA
  1985  00000B                     	ds	1
  1986  00000C                     i2___lwmod@counter:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0xB
  1990  00000C                     	ds	1
  1991  00000D                     ??_strncmp:
  1992  00000D                     ?i2_printf:
  1993                           	opt stack 0
  1994  00000D                     i2___lldiv@counter:
  1995                           	opt stack 0
  1996  00000D                     i2printf@f:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0xC
  2000  00000D                     	ds	1
  2001  00000E                     i2I2C_Master_Init@clockFreq:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0xD
  2005  00000E                     	ds	4
  2006  000012                     ??i2_I2C_Master_Init:
  2007                           
  2008                           ; 1 bytes @ 0x11
  2009  000012                     	ds	7
  2010  000019                     ??i2_printf:
  2011                           
  2012                           ; 1 bytes @ 0x18
  2013  000019                     	ds	4
  2014  00001D                     i2printf@idx:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x1C
  2018  00001D                     	ds	1
  2019  00001E                     i2printf@prec:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x1D
  2023  00001E                     	ds	1
  2024  00001F                     i2printf@cp:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x1E
  2028  00001F                     	ds	2
  2029  000021                     i2printf@ap:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x20
  2033  000021                     	ds	2
  2034  000023                     i2printf@len:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x22
  2038  000023                     	ds	2
  2039  000025                     i2printf@val:
  2040                           	opt stack 0
  2041                           
  2042                           ; 2 bytes @ 0x24
  2043  000025                     	ds	2
  2044  000027                     i2printf@flag:
  2045                           	opt stack 0
  2046                           
  2047                           ; 1 bytes @ 0x26
  2048  000027                     	ds	1
  2049  000028                     i2printf@width:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x27
  2053  000028                     	ds	2
  2054  00002A                     i2printf@c:
  2055                           	opt stack 0
  2056                           
  2057                           ; 1 bytes @ 0x29
  2058  00002A                     	ds	1
  2059  00002B                     ??_interruptHandler:
  2060                           
  2061                           ; 1 bytes @ 0x2A
  2062  00002B                     	ds	23
  2063  000042                     interruptHandler@i:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x41
  2067  000042                     	ds	2
  2068  000044                     interruptHandler@keypress:
  2069                           	opt stack 0
  2070                           
  2071                           ; 1 bytes @ 0x43
  2072  000044                     	ds	1
  2073  000045                     interruptHandler@temp:
  2074                           	opt stack 0
  2075                           
  2076                           ; 1 bytes @ 0x44
  2077  000045                     	ds	1
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           postdec1	equ	0xFE5
  2085                           fsr1l	equ	0xFE1
  2086                           
  2087 ;;
  2088 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2089 ;;
  2090 ;; *************** function _main *****************
  2091 ;; Defined at:
  2092 ;;		line 65 in file "main.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;Total ram usage:        4 bytes
  2111 ;; Hardware stack levels required when called:    7
  2112 ;; This function calls:
  2113 ;;		_I2C_Master_Init
  2114 ;;		_I2C_Master_Read
  2115 ;;		_I2C_Master_Start
  2116 ;;		_I2C_Master_Stop
  2117 ;;		_I2C_Master_Write
  2118 ;;		_I2C_sendData
  2119 ;;		___wmul
  2120 ;;		_generate_compartment_array
  2121 ;;		_get_RTC_final
  2122 ;;		_get_RTC_initial
  2123 ;;		_initLCD
  2124 ;;		_initialize
  2125 ;;		_lcdInst
  2126 ;;		_printf
  2127 ;;		_readADC
  2128 ;; This function is called by:
  2129 ;;		Startup code after reset
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text0
  2134  001E42                     __ptext0:
  2135                           	opt stack 0
  2136  001E42                     _main:
  2137                           	opt stack 24
  2138                           
  2139                           ;main.c: 71: OSCCONbits.IRCF2 = 1;
  2140                           
  2141                           ;incstack = 0
  2142  001E42  8CD3               	bsf	4051,6,c	;volatile
  2143                           
  2144                           ;main.c: 72: OSCCONbits.IRCF1 = 1;
  2145  001E44  8AD3               	bsf	4051,5,c	;volatile
  2146                           
  2147                           ;main.c: 73: OSCCONbits.IRCF0 = 1;
  2148  001E46  88D3               	bsf	4051,4,c	;volatile
  2149                           
  2150                           ;main.c: 74: OSCTUNEbits.PLLEN = 1;
  2151  001E48  8C9B               	bsf	3995,6,c	;volatile
  2152                           
  2153                           ;main.c: 79: LATA = 0x00;
  2154  001E4A  0E00               	movlw	0
  2155  001E4C  6E89               	movwf	3977,c	;volatile
  2156                           
  2157                           ;main.c: 80: LATB = 0x00;
  2158  001E4E  0E00               	movlw	0
  2159  001E50  6E8A               	movwf	3978,c	;volatile
  2160                           
  2161                           ;main.c: 81: LATC = 0x00;
  2162  001E52  0E00               	movlw	0
  2163  001E54  6E8B               	movwf	3979,c	;volatile
  2164                           
  2165                           ;main.c: 82: LATD = 0x00;
  2166  001E56  0E00               	movlw	0
  2167  001E58  6E8C               	movwf	3980,c	;volatile
  2168                           
  2169                           ;main.c: 83: LATE = 0x00;
  2170  001E5A  0E00               	movlw	0
  2171  001E5C  6E8D               	movwf	3981,c	;volatile
  2172                           
  2173                           ;main.c: 87: TRISA = 0xFF;
  2174  001E5E  6892               	setf	3986,c	;volatile
  2175                           
  2176                           ;main.c: 88: TRISB = 0xFF;
  2177  001E60  6893               	setf	3987,c	;volatile
  2178                           
  2179                           ;main.c: 89: TRISC = 0x00;
  2180  001E62  0E00               	movlw	0
  2181  001E64  6E94               	movwf	3988,c	;volatile
  2182                           
  2183                           ;main.c: 90: TRISD = 0x00;
  2184  001E66  0E00               	movlw	0
  2185  001E68  6E95               	movwf	3989,c	;volatile
  2186                           
  2187                           ;main.c: 91: TRISE = 0x00;
  2188  001E6A  0E00               	movlw	0
  2189  001E6C  6E96               	movwf	3990,c	;volatile
  2190                           
  2191                           ;main.c: 94: ADCON0 = 0x00;
  2192  001E6E  0E00               	movlw	0
  2193  001E70  6EC2               	movwf	4034,c	;volatile
  2194                           
  2195                           ;main.c: 95: ADCON1 = 0b00001111;
  2196  001E72  0E0F               	movlw	15
  2197  001E74  6EC1               	movwf	4033,c	;volatile
  2198                           
  2199                           ;main.c: 98: INT1IE = 1;
  2200  001E76  86F0               	bsf	intcon3,3,c	;volatile
  2201                           
  2202                           ;main.c: 99: (INTCONbits.GIE = 1);
  2203  001E78  8EF2               	bsf	intcon,7,c	;volatile
  2204                           
  2205                           ;main.c: 102: initLCD();
  2206  001E7A  ECC1  F021         	call	_initLCD	;wreg free
  2207  001E7E                     
  2208                           ;main.c: 107: if (mode == 0){
  2209  001E7E  0100               	movlb	0	; () banked
  2210  001E80  51BA               	movf	_mode& (0+255),w,b
  2211  001E82  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2212  001E84  A4D8               	btfss	status,2,c
  2213  001E86  D032               	goto	l354
  2214  001E88                     u4100:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 109: printf("1:date and time");
  2218                           
  2219                           ; BSR set to: 0
  2220                           
  2221                           ;main.c: 108: while(1){
  2222  001E88  0E04               	movlw	low STR_1
  2223  001E8A  6FD6               	movwf	printf@f& (0+255),b
  2224  001E8C  0EFE               	movlw	high STR_1
  2225  001E8E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2226  001E90  EC17  F016         	call	_printf	;wreg free
  2227                           
  2228                           ;main.c: 110: lcdInst(0xC0);;
  2229  001E94  0EC0               	movlw	192
  2230  001E96  EC64  F023         	call	_lcdInst
  2231                           
  2232                           ;main.c: 111: printf("2:instruction");
  2233  001E9A  0EE4               	movlw	low STR_2
  2234  001E9C  0100               	movlb	0	; () banked
  2235  001E9E  6FD6               	movwf	printf@f& (0+255),b
  2236  001EA0  0EFE               	movlw	high STR_2
  2237  001EA2  6FD7               	movwf	(printf@f+1)& (0+255),b
  2238  001EA4  EC17  F016         	call	_printf	;wreg free
  2239                           
  2240                           ;main.c: 112: _delay((unsigned long)((300)*(32000000/4000.0)));
  2241  001EA8  0E0D               	movlw	13
  2242  001EAA  0100               	movlb	0	; () banked
  2243  001EAC  6FED               	movwf	(??_main+1)& (0+255),b
  2244  001EAE  0E2D               	movlw	45
  2245  001EB0  6FEC               	movwf	??_main& (0+255),b
  2246  001EB2  0ED7               	movlw	215
  2247  001EB4                     u5047:
  2248  001EB4  2EE8               	decfsz	wreg,f,c
  2249  001EB6  D7FE               	bra	u5047
  2250  001EB8  2FEC               	decfsz	??_main& (0+255),f,b
  2251  001EBA  D7FC               	bra	u5047
  2252  001EBC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2253  001EBE  D7FA               	bra	u5047
  2254  001EC0  D000               	nop2	
  2255                           
  2256                           ;main.c: 113: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2257  001EC2  0E80               	movlw	128
  2258  001EC4  EC64  F023         	call	_lcdInst
  2259  001EC8  0E34               	movlw	52
  2260  001ECA  0100               	movlb	0	; () banked
  2261  001ECC  6FEC               	movwf	??_main& (0+255),b
  2262  001ECE  0EF1               	movlw	241
  2263  001ED0                     u5057:
  2264  001ED0  2EE8               	decfsz	wreg,f,c
  2265  001ED2  D7FE               	bra	u5057
  2266  001ED4  2FEC               	decfsz	??_main& (0+255),f,b
  2267  001ED6  D7FC               	bra	u5057
  2268  001ED8  D000               	nop2	
  2269                           
  2270                           ;main.c: 114: if (change_mode == 1){
  2271  001EDA  0100               	movlb	0	; () banked
  2272  001EDC  05B8               	decf	_change_mode& (0+255),w,b
  2273  001EDE  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  2274  001EE0  A4D8               	btfss	status,2,c
  2275  001EE2  D7D2               	goto	u4100
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;main.c: 115: mode = 1;
  2279  001EE4  0E00               	movlw	0
  2280  001EE6  6FBB               	movwf	(_mode+1)& (0+255),b
  2281  001EE8  0E01               	movlw	1
  2282  001EEA  6FBA               	movwf	_mode& (0+255),b
  2283  001EEC                     l354:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 117: }
  2287                           ;main.c: 118: }
  2288                           ;main.c: 120: }
  2289                           ;main.c: 123: if (mode == 1){
  2290                           
  2291                           ; BSR set to: 0
  2292                           
  2293                           ; BSR set to: 0
  2294  001EEC  05BA               	decf	_mode& (0+255),w,b
  2295  001EEE  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2296  001EF0  A4D8               	btfss	status,2,c
  2297  001EF2  D126               	goto	l356
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 125: initLCD();
  2301  001EF4  ECC1  F021         	call	_initLCD	;wreg free
  2302  001EF8                     
  2303                           ;main.c: 128: if (state == 0){
  2304  001EF8  0100               	movlb	0	; () banked
  2305  001EFA  51AE               	movf	_state& (0+255),w,b
  2306  001EFC  11AF               	iorwf	(_state+1)& (0+255),w,b
  2307  001EFE  A4D8               	btfss	status,2,c
  2308  001F00  D023               	goto	l358
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;main.c: 130: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2312  001F02  0E80               	movlw	128
  2313  001F04  EC64  F023         	call	_lcdInst
  2314  001F08  0E34               	movlw	52
  2315  001F0A  0100               	movlb	0	; () banked
  2316  001F0C  6FEC               	movwf	??_main& (0+255),b
  2317  001F0E  0EF1               	movlw	241
  2318  001F10                     u5067:
  2319  001F10  2EE8               	decfsz	wreg,f,c
  2320  001F12  D7FE               	bra	u5067
  2321  001F14  2FEC               	decfsz	??_main& (0+255),f,b
  2322  001F16  D7FC               	bra	u5067
  2323  001F18  D000               	nop2	
  2324                           
  2325                           ;main.c: 131: printf("assembly step:");
  2326  001F1A  0E33               	movlw	low STR_3
  2327  001F1C  0100               	movlb	0	; () banked
  2328  001F1E  6FD6               	movwf	printf@f& (0+255),b
  2329  001F20  0EFE               	movlw	high STR_3
  2330  001F22  6FD7               	movwf	(printf@f+1)& (0+255),b
  2331  001F24  EC17  F016         	call	_printf	;wreg free
  2332                           
  2333                           ;main.c: 132: _delay((unsigned long)((500)*(32000000/4000.0)));
  2334  001F28  0E15               	movlw	21
  2335  001F2A  0100               	movlb	0	; () banked
  2336  001F2C  6FED               	movwf	(??_main+1)& (0+255),b
  2337  001F2E  0E4B               	movlw	75
  2338  001F30  6FEC               	movwf	??_main& (0+255),b
  2339  001F32  0EBE               	movlw	190
  2340  001F34                     u5077:
  2341  001F34  2EE8               	decfsz	wreg,f,c
  2342  001F36  D7FE               	bra	u5077
  2343  001F38  2FEC               	decfsz	??_main& (0+255),f,b
  2344  001F3A  D7FC               	bra	u5077
  2345  001F3C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2346  001F3E  D7FA               	bra	u5077
  2347  001F40  F000               	nop	
  2348                           
  2349                           ;main.c: 133: lcdInst(0xC0);;
  2350  001F42  0EC0               	movlw	192
  2351  001F44  EC64  F023         	call	_lcdInst
  2352  001F48                     l358:
  2353                           
  2354                           ;main.c: 134: }
  2355                           ;main.c: 135: if (state ==1){
  2356  001F48  0100               	movlb	0	; () banked
  2357  001F4A  05AE               	decf	_state& (0+255),w,b
  2358  001F4C  11AF               	iorwf	(_state+1)& (0+255),w,b
  2359  001F4E  A4D8               	btfss	status,2,c
  2360  001F50  D024               	goto	l359
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 136: initLCD();
  2364  001F52  ECC1  F021         	call	_initLCD	;wreg free
  2365                           
  2366                           ;main.c: 137: printf("fastener set:");
  2367  001F56  0EC8               	movlw	low STR_4
  2368  001F58  0100               	movlb	0	; () banked
  2369  001F5A  6FD6               	movwf	printf@f& (0+255),b
  2370  001F5C  0EFE               	movlw	high STR_4
  2371  001F5E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2372  001F60  EC17  F016         	call	_printf	;wreg free
  2373                           
  2374                           ;main.c: 138: lcdInst(0xC0);;
  2375  001F64  0EC0               	movlw	192
  2376  001F66  EC64  F023         	call	_lcdInst
  2377                           
  2378                           ;main.c: 139: printf("%s",current_set);
  2379  001F6A  0EF8               	movlw	low STR_5
  2380  001F6C  0100               	movlb	0	; () banked
  2381  001F6E  6FD6               	movwf	printf@f& (0+255),b
  2382  001F70  0EFF               	movlw	high STR_5
  2383  001F72  6FD7               	movwf	(printf@f+1)& (0+255),b
  2384  001F74  0EC3               	movlw	low _current_set
  2385  001F76  6FD8               	movwf	(?_printf+2)& (0+255),b
  2386  001F78  0E00               	movlw	high _current_set
  2387  001F7A  6FD9               	movwf	(?_printf+3)& (0+255),b
  2388  001F7C  EC17  F016         	call	_printf	;wreg free
  2389                           
  2390                           ;main.c: 140: _delay((unsigned long)((500)*(32000000/4000.0)));
  2391  001F80  0E15               	movlw	21
  2392  001F82  0100               	movlb	0	; () banked
  2393  001F84  6FED               	movwf	(??_main+1)& (0+255),b
  2394  001F86  0E4B               	movlw	75
  2395  001F88  6FEC               	movwf	??_main& (0+255),b
  2396  001F8A  0EBE               	movlw	190
  2397  001F8C                     u5087:
  2398  001F8C  2EE8               	decfsz	wreg,f,c
  2399  001F8E  D7FE               	bra	u5087
  2400  001F90  2FEC               	decfsz	??_main& (0+255),f,b
  2401  001F92  D7FC               	bra	u5087
  2402  001F94  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2403  001F96  D7FA               	bra	u5087
  2404  001F98  F000               	nop	
  2405  001F9A                     l359:
  2406                           
  2407                           ;main.c: 141: }
  2408                           ;main.c: 143: if (state == 2){
  2409  001F9A  0E02               	movlw	2
  2410  001F9C  0100               	movlb	0	; () banked
  2411  001F9E  19AE               	xorwf	_state& (0+255),w,b
  2412  001FA0  11AF               	iorwf	(_state+1)& (0+255),w,b
  2413  001FA2  A4D8               	btfss	status,2,c
  2414  001FA4  D016               	goto	l360
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;main.c: 144: initLCD();
  2418  001FA6  ECC1  F021         	call	_initLCD	;wreg free
  2419                           
  2420                           ;main.c: 145: printf("number:");
  2421  001FAA  0EA4               	movlw	low STR_6
  2422  001FAC  0100               	movlb	0	; () banked
  2423  001FAE  6FD6               	movwf	printf@f& (0+255),b
  2424  001FB0  0EFF               	movlw	high STR_6
  2425  001FB2  6FD7               	movwf	(printf@f+1)& (0+255),b
  2426  001FB4  EC17  F016         	call	_printf	;wreg free
  2427                           
  2428                           ;main.c: 146: _delay((unsigned long)((500)*(32000000/4000.0)));
  2429  001FB8  0E15               	movlw	21
  2430  001FBA  0100               	movlb	0	; () banked
  2431  001FBC  6FED               	movwf	(??_main+1)& (0+255),b
  2432  001FBE  0E4B               	movlw	75
  2433  001FC0  6FEC               	movwf	??_main& (0+255),b
  2434  001FC2  0EBE               	movlw	190
  2435  001FC4                     u5097:
  2436  001FC4  2EE8               	decfsz	wreg,f,c
  2437  001FC6  D7FE               	bra	u5097
  2438  001FC8  2FEC               	decfsz	??_main& (0+255),f,b
  2439  001FCA  D7FC               	bra	u5097
  2440  001FCC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2441  001FCE  D7FA               	bra	u5097
  2442  001FD0  F000               	nop	
  2443  001FD2                     l360:
  2444                           
  2445                           ;main.c: 147: }
  2446                           ;main.c: 149: if (state == 3){
  2447  001FD2  0E03               	movlw	3
  2448  001FD4  0100               	movlb	0	; () banked
  2449  001FD6  19AE               	xorwf	_state& (0+255),w,b
  2450  001FD8  11AF               	iorwf	(_state+1)& (0+255),w,b
  2451  001FDA  A4D8               	btfss	status,2,c
  2452  001FDC  D78D               	goto	l357
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;main.c: 150: initLCD();
  2456  001FDE  ECC1  F021         	call	_initLCD	;wreg free
  2457                           
  2458                           ;main.c: 151: printf("Done!");
  2459  001FE2  0EBA               	movlw	low STR_7
  2460  001FE4  0100               	movlb	0	; () banked
  2461  001FE6  6FD6               	movwf	printf@f& (0+255),b
  2462  001FE8  0EFF               	movlw	high STR_7
  2463  001FEA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2464  001FEC  EC17  F016         	call	_printf	;wreg free
  2465                           
  2466                           ;main.c: 152: _delay((unsigned long)((1000)*(32000000/4000.0)));
  2467  001FF0  0E29               	movlw	41
  2468  001FF2  0100               	movlb	0	; () banked
  2469  001FF4  6FED               	movwf	(??_main+1)& (0+255),b
  2470  001FF6  0E96               	movlw	150
  2471  001FF8  6FEC               	movwf	??_main& (0+255),b
  2472  001FFA  0E7F               	movlw	127
  2473  001FFC                     u5107:
  2474  001FFC  2EE8               	decfsz	wreg,f,c
  2475  001FFE  D7FE               	bra	u5107
  2476  002000  2FEC               	decfsz	??_main& (0+255),f,b
  2477  002002  D7FC               	bra	u5107
  2478  002004  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2479  002006  D7FA               	bra	u5107
  2480                           
  2481                           ;main.c: 153: initLCD();
  2482  002008  ECC1  F021         	call	_initLCD	;wreg free
  2483                           
  2484                           ;main.c: 154: printf("assembly step:%d",assembly_step);
  2485  00200C  0ED2               	movlw	low STR_8
  2486  00200E  0100               	movlb	0	; () banked
  2487  002010  6FD6               	movwf	printf@f& (0+255),b
  2488  002012  0EFD               	movlw	high STR_8
  2489  002014  6FD7               	movwf	(printf@f+1)& (0+255),b
  2490  002016  C0AC  F0D8         	movff	_assembly_step,?_printf+2
  2491  00201A  C0AD  F0D9         	movff	_assembly_step+1,?_printf+3
  2492  00201E  EC17  F016         	call	_printf	;wreg free
  2493                           
  2494                           ;main.c: 155: _delay((unsigned long)((600)*(32000000/4000.0)));
  2495  002022  0E19               	movlw	25
  2496  002024  0100               	movlb	0	; () banked
  2497  002026  6FED               	movwf	(??_main+1)& (0+255),b
  2498  002028  0E5A               	movlw	90
  2499  00202A  6FEC               	movwf	??_main& (0+255),b
  2500  00202C  0EB1               	movlw	177
  2501  00202E                     u5117:
  2502  00202E  2EE8               	decfsz	wreg,f,c
  2503  002030  D7FE               	bra	u5117
  2504  002032  2FEC               	decfsz	??_main& (0+255),f,b
  2505  002034  D7FC               	bra	u5117
  2506  002036  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2507  002038  D7FA               	bra	u5117
  2508  00203A  D000               	nop2	
  2509                           
  2510                           ;main.c: 156: for ( i=0; i<assembly_step; i++){
  2511  00203C  0E00               	movlw	0
  2512  00203E  0100               	movlb	0	; () banked
  2513  002040  6FBF               	movwf	(_i+1)& (0+255),b
  2514  002042  0E00               	movlw	0
  2515  002044  6FBE               	movwf	_i& (0+255),b
  2516  002046  D066               	goto	l362
  2517  002048                     
  2518                           ; BSR set to: 0
  2519                           ;main.c: 158: initLCD();
  2520                           
  2521                           ; BSR set to: 0
  2522  002048  ECC1  F021         	call	_initLCD	;wreg free
  2523                           
  2524                           ;main.c: 160: printf("step");
  2525  00204C  0EE3               	movlw	low STR_9
  2526  00204E  0100               	movlb	0	; () banked
  2527  002050  6FD6               	movwf	printf@f& (0+255),b
  2528  002052  0EFF               	movlw	high STR_9
  2529  002054  6FD7               	movwf	(printf@f+1)& (0+255),b
  2530  002056  EC17  F016         	call	_printf	;wreg free
  2531                           
  2532                           ;main.c: 161: printf("%d", i+1);
  2533  00205A  0E4E               	movlw	low (STR_54+12)
  2534  00205C  0100               	movlb	0	; () banked
  2535  00205E  6FD6               	movwf	printf@f& (0+255),b
  2536  002060  0EFE               	movlw	high (STR_54+12)
  2537  002062  6FD7               	movwf	(printf@f+1)& (0+255),b
  2538  002064  0E01               	movlw	1
  2539  002066  25BE               	addwf	_i& (0+255),w,b
  2540  002068  6FD8               	movwf	(?_printf+2)& (0+255),b
  2541  00206A  0E00               	movlw	0
  2542  00206C  21BF               	addwfc	(_i+1)& (0+255),w,b
  2543  00206E  6FD9               	movwf	(?_printf+3)& (0+255),b
  2544  002070  EC17  F016         	call	_printf	;wreg free
  2545                           
  2546                           ;main.c: 162: printf(":");
  2547  002074  0E02               	movlw	low (STR_50+14)
  2548  002076  0100               	movlb	0	; () banked
  2549  002078  6FD6               	movwf	printf@f& (0+255),b
  2550  00207A  0EFE               	movlw	high (STR_50+14)
  2551  00207C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2552  00207E  EC17  F016         	call	_printf	;wreg free
  2553                           
  2554                           ;main.c: 163: printf("%s", final_set[i]);
  2555  002082  C0BE  F0D0         	movff	_i,___wmul@multiplier
  2556  002086  C0BF  F0D1         	movff	_i+1,___wmul@multiplier+1
  2557  00208A  0E00               	movlw	0
  2558  00208C  0100               	movlb	0	; () banked
  2559  00208E  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2560  002090  0E05               	movlw	5
  2561  002092  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  2562  002094  ECEB  F022         	call	___wmul	;wreg free
  2563  002098  0EA6               	movlw	low _final_set
  2564  00209A  0100               	movlb	0	; () banked
  2565  00209C  25D0               	addwf	?___wmul& (0+255),w,b
  2566  00209E  6FEE               	movwf	_main$1756& (0+255),b
  2567  0020A0  0E01               	movlw	high _final_set
  2568  0020A2  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  2569  0020A4  6FEF               	movwf	(_main$1756+1)& (0+255),b
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 163: printf("%s", final_set[i]);
  2573  0020A6  0EF8               	movlw	low STR_5
  2574  0020A8  6FD6               	movwf	printf@f& (0+255),b
  2575  0020AA  0EFF               	movlw	high STR_5
  2576  0020AC  6FD7               	movwf	(printf@f+1)& (0+255),b
  2577  0020AE  C0EE  F0D8         	movff	_main$1756,?_printf+2
  2578  0020B2  C0EF  F0D9         	movff	_main$1756+1,?_printf+3
  2579  0020B6  EC17  F016         	call	_printf	;wreg free
  2580                           
  2581                           ;main.c: 164: printf(",");
  2582  0020BA  0EFB               	movlw	low STR_13
  2583  0020BC  0100               	movlb	0	; () banked
  2584  0020BE  6FD6               	movwf	printf@f& (0+255),b
  2585  0020C0  0EFF               	movlw	high STR_13
  2586  0020C2  6FD7               	movwf	(printf@f+1)& (0+255),b
  2587  0020C4  EC17  F016         	call	_printf	;wreg free
  2588                           
  2589                           ;main.c: 165: printf("%d",final_number[i]);
  2590  0020C8  0E4E               	movlw	low (STR_54+12)
  2591  0020CA  0100               	movlb	0	; () banked
  2592  0020CC  6FD6               	movwf	printf@f& (0+255),b
  2593  0020CE  0EFE               	movlw	high (STR_54+12)
  2594  0020D0  6FD7               	movwf	(printf@f+1)& (0+255),b
  2595  0020D2  90D8               	bcf	status,0,c
  2596  0020D4  35BE               	rlcf	_i& (0+255),w,b
  2597  0020D6  6ED9               	movwf	fsr2l,c
  2598  0020D8  35BF               	rlcf	(_i+1)& (0+255),w,b
  2599  0020DA  6EDA               	movwf	fsr2h,c
  2600  0020DC  0E50               	movlw	low _final_number
  2601  0020DE  26D9               	addwf	fsr2l,f,c
  2602  0020E0  0E01               	movlw	high _final_number
  2603  0020E2  22DA               	addwfc	fsr2h,f,c
  2604  0020E4  CFDE F0D8          	movff	postinc2,?_printf+2
  2605  0020E8  CFDD F0D9          	movff	postdec2,?_printf+3
  2606  0020EC  EC17  F016         	call	_printf	;wreg free
  2607                           
  2608                           ;main.c: 166: _delay((unsigned long)((1000)*(32000000/4000.0)));
  2609  0020F0  0E29               	movlw	41
  2610  0020F2  0100               	movlb	0	; () banked
  2611  0020F4  6FED               	movwf	(??_main+1)& (0+255),b
  2612  0020F6  0E96               	movlw	150
  2613  0020F8  6FEC               	movwf	??_main& (0+255),b
  2614  0020FA  0E7F               	movlw	127
  2615  0020FC                     u5127:
  2616  0020FC  2EE8               	decfsz	wreg,f,c
  2617  0020FE  D7FE               	bra	u5127
  2618  002100  2FEC               	decfsz	??_main& (0+255),f,b
  2619  002102  D7FC               	bra	u5127
  2620  002104  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2621  002106  D7FA               	bra	u5127
  2622                           
  2623                           ;main.c: 167: lcdInst(0xC0);;
  2624  002108  0EC0               	movlw	192
  2625  00210A  EC64  F023         	call	_lcdInst
  2626  00210E  0100               	movlb	0	; () banked
  2627  002110  4BBE               	infsnz	_i& (0+255),f,b
  2628  002112  2BBF               	incf	(_i+1)& (0+255),f,b
  2629  002114                     l362:
  2630                           
  2631                           ; BSR set to: 0
  2632                           
  2633                           ; BSR set to: 0
  2634  002114  51AC               	movf	_assembly_step& (0+255),w,b
  2635  002116  5DBE               	subwf	_i& (0+255),w,b
  2636  002118  51AD               	movf	(_assembly_step+1)& (0+255),w,b
  2637  00211A  59BF               	subwfb	(_i+1)& (0+255),w,b
  2638  00211C  A0D8               	btfss	status,0,c
  2639  00211E  D794               	goto	l363
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;main.c: 172: }
  2643                           ;main.c: 173: mode = 2;
  2644                           
  2645                           ; BSR set to: 0
  2646  002120  0E00               	movlw	0
  2647  002122  6FBB               	movwf	(_mode+1)& (0+255),b
  2648  002124  0E02               	movlw	2
  2649  002126  6FBA               	movwf	_mode& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 174: printf("change mode 2");
  2653  002128  0EBA               	movlw	low STR_15
  2654  00212A  6FD6               	movwf	printf@f& (0+255),b
  2655  00212C  0EFE               	movlw	high STR_15
  2656  00212E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2657  002130  EC17  F016         	call	_printf	;wreg free
  2658                           
  2659                           ;main.c: 197: }
  2660                           ;main.c: 199: }
  2661                           ;main.c: 200: generate_compartment_array(assembly_step);
  2662                           
  2663                           ;main.c: 195: break;
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 194: printf("change mode 2");
  2667                           
  2668                           ;main.c: 193: mode = 2;
  2669                           
  2670                           ;main.c: 187: get_RTC_initial();
  2671                           
  2672                           ;main.c: 182: printf("change mode 2");
  2673                           
  2674                           ;main.c: 181: initLCD();
  2675                           
  2676                           ;main.c: 178: printf("start operation");
  2677                           
  2678                           ;main.c: 177: initLCD();
  2679                           
  2680                           ;main.c: 175: break;
  2681  002134  C0AC  F0C8         	movff	_assembly_step,generate_compartment_array@step
  2682  002138  C0AD  F0C9         	movff	_assembly_step+1,generate_compartment_array@step+1
  2683  00213C  EC7E  F01B         	call	_generate_compartment_array	;wreg free
  2684  002140                     l356:
  2685                           
  2686                           ;main.c: 204: }
  2687                           ;main.c: 217: if (mode == 2){
  2688  002140  0E02               	movlw	2
  2689  002142  0100               	movlb	0	; () banked
  2690  002144  19BA               	xorwf	_mode& (0+255),w,b
  2691  002146  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2692  002148  A4D8               	btfss	status,2,c
  2693  00214A  D699               	goto	l350
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 219: (INTCONbits.GIE = 0);
  2697  00214C  9EF2               	bcf	intcon,7,c	;volatile
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 220: initLCD();
  2701  00214E  ECC1  F021         	call	_initLCD	;wreg free
  2702                           
  2703                           ;main.c: 221: printf("mode 2");
  2704  002152  0EC1               	movlw	low (STR_15+7)
  2705  002154  0100               	movlb	0	; () banked
  2706  002156  6FD6               	movwf	printf@f& (0+255),b
  2707  002158  0EFE               	movlw	high (STR_15+7)
  2708  00215A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2709  00215C  EC17  F016         	call	_printf	;wreg free
  2710                           
  2711                           ;main.c: 222: _delay((unsigned long)((200)*(32000000/4000.0)));
  2712  002160  0E09               	movlw	9
  2713  002162  0100               	movlb	0	; () banked
  2714  002164  6FED               	movwf	(??_main+1)& (0+255),b
  2715  002166  0E1E               	movlw	30
  2716  002168  6FEC               	movwf	??_main& (0+255),b
  2717  00216A  0EE4               	movlw	228
  2718  00216C                     u5137:
  2719  00216C  2EE8               	decfsz	wreg,f,c
  2720  00216E  D7FE               	bra	u5137
  2721  002170  2FEC               	decfsz	??_main& (0+255),f,b
  2722  002172  D7FC               	bra	u5137
  2723  002174  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2724  002176  D7FA               	bra	u5137
  2725  002178  F000               	nop	
  2726                           
  2727                           ;main.c: 224: I2C_Master_Init(100000);
  2728  00217A  0EA0               	movlw	160
  2729  00217C  0100               	movlb	0	; () banked
  2730  00217E  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2731  002180  0E86               	movlw	134
  2732  002182  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2733  002184  0E01               	movlw	1
  2734  002186  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2735  002188  0E00               	movlw	0
  2736  00218A  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2737  00218C  EC10  F021         	call	_I2C_Master_Init	;wreg free
  2738                           
  2739                           ;main.c: 225: I2C_Master_Start();
  2740  002190  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  2741                           
  2742                           ;main.c: 228: I2C_Master_Write(0b00010000);
  2743  002194  0E00               	movlw	0
  2744  002196  0100               	movlb	0	; () banked
  2745  002198  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2746  00219A  0E10               	movlw	16
  2747  00219C  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2748  00219E  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  2749                           
  2750                           ;main.c: 229: I2C_Master_Stop();
  2751  0021A2  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  2752                           
  2753                           ;main.c: 232: I2C_sendData(rotate_gear);
  2754  0021A6  0100               	movlb	0	; () banked
  2755  0021A8  51FE               	movf	_rotate_gear& (0+255),w,b
  2756  0021AA  ECFF  F022         	call	_I2C_sendData
  2757  0021AE                     
  2758                           ;main.c: 238: I2C_Master_Start();
  2759  0021AE  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  2760                           
  2761                           ;main.c: 239: I2C_Master_Write(0b00010001);
  2762  0021B2  0E00               	movlw	0
  2763  0021B4  0100               	movlb	0	; () banked
  2764  0021B6  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2765  0021B8  0E11               	movlw	17
  2766  0021BA  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2767  0021BC  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  2768                           
  2769                           ;main.c: 240: openHandle_data = I2C_Master_Read(1);
  2770  0021C0  0E01               	movlw	1
  2771  0021C2  ECD6  F022         	call	_I2C_Master_Read
  2772  0021C6  0100               	movlb	0	; () banked
  2773  0021C8  6FC1               	movwf	_openHandle_data& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 241: I2C_Master_Stop();
  2777  0021CA  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  2778                           
  2779                           ;main.c: 243: if (openHandle_data == '0'){
  2780  0021CE  0E30               	movlw	48
  2781  0021D0  0100               	movlb	0	; () banked
  2782  0021D2  19C1               	xorwf	_openHandle_data& (0+255),w,b
  2783  0021D4  A4D8               	btfss	status,2,c
  2784  0021D6  D7EB               	goto	l368
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 244: initLCD();
  2788  0021D8  ECC1  F021         	call	_initLCD	;wreg free
  2789                           
  2790                           ;main.c: 245: printf("C0 is found");
  2791  0021DC  0E26               	movlw	low STR_20
  2792  0021DE  0100               	movlb	0	; () banked
  2793  0021E0  6FD6               	movwf	printf@f& (0+255),b
  2794  0021E2  0EFF               	movlw	high STR_20
  2795  0021E4  6FD7               	movwf	(printf@f+1)& (0+255),b
  2796  0021E6  EC17  F016         	call	_printf	;wreg free
  2797                           
  2798                           ;main.c: 246: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2799  0021EA  0E80               	movlw	128
  2800  0021EC  EC64  F023         	call	_lcdInst
  2801  0021F0  0E34               	movlw	52
  2802  0021F2  0100               	movlb	0	; () banked
  2803  0021F4  6FEC               	movwf	??_main& (0+255),b
  2804  0021F6  0EF1               	movlw	241
  2805  0021F8                     u5147:
  2806  0021F8  2EE8               	decfsz	wreg,f,c
  2807  0021FA  D7FE               	bra	u5147
  2808  0021FC  2FEC               	decfsz	??_main& (0+255),f,b
  2809  0021FE  D7FC               	bra	u5147
  2810  002200  D000               	nop2	
  2811                           
  2812                           ;main.c: 249: }
  2813                           ;main.c: 250: }
  2814                           ;main.c: 256: I2C_Master_Init(100000);
  2815                           
  2816                           ;main.c: 248: break;
  2817  002202  0EA0               	movlw	160
  2818  002204  0100               	movlb	0	; () banked
  2819  002206  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2820  002208  0E86               	movlw	134
  2821  00220A  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2822  00220C  0E01               	movlw	1
  2823  00220E  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2824  002210  0E00               	movlw	0
  2825  002212  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2826  002214  EC10  F021         	call	_I2C_Master_Init	;wreg free
  2827                           
  2828                           ;main.c: 257: I2C_Master_Start();
  2829  002218  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  2830                           
  2831                           ;main.c: 260: I2C_Master_Write(0b00010000);
  2832  00221C  0E00               	movlw	0
  2833  00221E  0100               	movlb	0	; () banked
  2834  002220  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2835  002222  0E10               	movlw	16
  2836  002224  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2837  002226  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  2838                           
  2839                           ;main.c: 261: I2C_Master_Stop();
  2840  00222A  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  2841                           
  2842                           ;main.c: 263: I2C_sendData(15);
  2843  00222E  0E0F               	movlw	15
  2844  002230  ECFF  F022         	call	_I2C_sendData
  2845                           
  2846                           ;main.c: 264: _delay((unsigned long)((200)*(32000000/4000.0)));
  2847  002234  0E09               	movlw	9
  2848  002236  0100               	movlb	0	; () banked
  2849  002238  6FED               	movwf	(??_main+1)& (0+255),b
  2850  00223A  0E1E               	movlw	30
  2851  00223C  6FEC               	movwf	??_main& (0+255),b
  2852  00223E  0EE4               	movlw	228
  2853  002240                     u5157:
  2854  002240  2EE8               	decfsz	wreg,f,c
  2855  002242  D7FE               	bra	u5157
  2856  002244  2FEC               	decfsz	??_main& (0+255),f,b
  2857  002246  D7FC               	bra	u5157
  2858  002248  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2859  00224A  D7FA               	bra	u5157
  2860  00224C  F000               	nop	
  2861                           
  2862                           ;main.c: 266: i = 0;
  2863  00224E  0E00               	movlw	0
  2864  002250  0100               	movlb	0	; () banked
  2865  002252  6FBF               	movwf	(_i+1)& (0+255),b
  2866  002254  0E00               	movlw	0
  2867  002256  6FBE               	movwf	_i& (0+255),b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 267: compartment_pos = 0;
  2871  002258  0E00               	movlw	0
  2872  00225A  6FB1               	movwf	(_compartment_pos+1)& (0+255),b
  2873  00225C  0E00               	movlw	0
  2874  00225E  6FB0               	movwf	_compartment_pos& (0+255),b
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;main.c: 271: for (i = 0; i<8; i++){
  2878  002260  0E00               	movlw	0
  2879  002262  6FBF               	movwf	(_i+1)& (0+255),b
  2880  002264  0E00               	movlw	0
  2881  002266  6FBE               	movwf	_i& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884  002268  51BF               	movf	(_i+1)& (0+255),w,b
  2885  00226A  E105               	bnz	u4200
  2886  00226C  0E08               	movlw	8
  2887  00226E  5DBE               	subwf	_i& (0+255),w,b
  2888  002270  B0D8               	btfsc	status,0,c
  2889  002272  D2DC               	goto	u4360
  2890  002274  D001               	goto	l372
  2891  002276                     u4200:
  2892                           
  2893                           ; BSR set to: 0
  2894  002276  D2DA               	goto	u4360
  2895  002278                     l372:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 273: initLCD();
  2899                           
  2900                           ; BSR set to: 0
  2901  002278  ECC1  F021         	call	_initLCD	;wreg free
  2902                           
  2903                           ;main.c: 274: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2904  00227C  0E01               	movlw	1
  2905  00227E  EC64  F023         	call	_lcdInst
  2906  002282  0E9C               	movlw	156
  2907  002284  0100               	movlb	0	; () banked
  2908  002286  6FEC               	movwf	??_main& (0+255),b
  2909  002288  0ED7               	movlw	215
  2910  00228A                     u5167:
  2911  00228A  2EE8               	decfsz	wreg,f,c
  2912  00228C  D7FE               	bra	u5167
  2913  00228E  2FEC               	decfsz	??_main& (0+255),f,b
  2914  002290  D7FC               	bra	u5167
  2915                           
  2916                           ;main.c: 275: printf("processing C%d",i);
  2917  002292  0E8D               	movlw	low STR_21
  2918  002294  0100               	movlb	0	; () banked
  2919  002296  6FD6               	movwf	printf@f& (0+255),b
  2920  002298  0EFE               	movlw	high STR_21
  2921  00229A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2922  00229C  C0BE  F0D8         	movff	_i,?_printf+2
  2923  0022A0  C0BF  F0D9         	movff	_i+1,?_printf+3
  2924  0022A4  EC17  F016         	call	_printf	;wreg free
  2925                           
  2926                           ;main.c: 276: _delay((unsigned long)((200)*(32000000/4000.0)));
  2927  0022A8  0E09               	movlw	9
  2928  0022AA  0100               	movlb	0	; () banked
  2929  0022AC  6FED               	movwf	(??_main+1)& (0+255),b
  2930  0022AE  0E1E               	movlw	30
  2931  0022B0  6FEC               	movwf	??_main& (0+255),b
  2932  0022B2  0EE4               	movlw	228
  2933  0022B4                     u5177:
  2934  0022B4  2EE8               	decfsz	wreg,f,c
  2935  0022B6  D7FE               	bra	u5177
  2936  0022B8  2FEC               	decfsz	??_main& (0+255),f,b
  2937  0022BA  D7FC               	bra	u5177
  2938  0022BC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2939  0022BE  D7FA               	bra	u5177
  2940  0022C0  F000               	nop	
  2941                           
  2942                           ;main.c: 279: if (compartment_array[compartment_pos] != 0){
  2943  0022C2  90D8               	bcf	status,0,c
  2944  0022C4  0100               	movlb	0	; () banked
  2945  0022C6  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2946  0022C8  6ED9               	movwf	fsr2l,c
  2947  0022CA  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2948  0022CC  6EDA               	movwf	fsr2h,c
  2949  0022CE  0E80               	movlw	low _compartment_array
  2950  0022D0  26D9               	addwf	fsr2l,f,c
  2951  0022D2  0E00               	movlw	high _compartment_array
  2952  0022D4  22DA               	addwfc	fsr2h,f,c
  2953  0022D6  50DE               	movf	postinc2,w,c
  2954  0022D8  10DE               	iorwf	postinc2,w,c
  2955  0022DA  B4D8               	btfsc	status,2,c
  2956  0022DC  D277               	goto	l374
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 283: initLCD();
  2960  0022DE  ECC1  F021         	call	_initLCD	;wreg free
  2961                           
  2962                           ;main.c: 285: printf("B_counter:%d",B_counter);
  2963  0022E2  0EF2               	movlw	low STR_22
  2964  0022E4  0100               	movlb	0	; () banked
  2965  0022E6  6FD6               	movwf	printf@f& (0+255),b
  2966  0022E8  0EFE               	movlw	high STR_22
  2967  0022EA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2968  0022EC  C0AA  F0D8         	movff	_B_counter,?_printf+2
  2969  0022F0  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  2970  0022F4  EC17  F016         	call	_printf	;wreg free
  2971                           
  2972                           ;main.c: 286: B_counter = B_array[compartment_pos];
  2973  0022F8  90D8               	bcf	status,0,c
  2974  0022FA  0100               	movlb	0	; () banked
  2975  0022FC  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2976  0022FE  6ED9               	movwf	fsr2l,c
  2977  002300  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2978  002302  6EDA               	movwf	fsr2h,c
  2979  002304  0E30               	movlw	low _B_array
  2980  002306  26D9               	addwf	fsr2l,f,c
  2981  002308  0E01               	movlw	high _B_array
  2982  00230A  22DA               	addwfc	fsr2h,f,c
  2983  00230C  CFDE F0AA          	movff	postinc2,_B_counter
  2984  002310  CFDD F0AB          	movff	postdec2,_B_counter+1
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;main.c: 287: if(B_counter != 0){
  2988  002314  51AA               	movf	_B_counter& (0+255),w,b
  2989  002316  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  2990  002318  B4D8               	btfsc	status,2,c
  2991  00231A  D047               	goto	l380
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 288: I2C_sendData(motorStart_0);
  2995  00231C  51F9               	movf	_motorStart_0& (0+255),w,b
  2996  00231E  ECFF  F022         	call	_I2C_sendData
  2997                           
  2998                           ;main.c: 289: _delay((unsigned long)((2000)*(32000000/4000.0)));
  2999  002322  0E52               	movlw	82
  3000  002324  0100               	movlb	0	; () banked
  3001  002326  6FED               	movwf	(??_main+1)& (0+255),b
  3002  002328  0E2B               	movlw	43
  3003  00232A  6FEC               	movwf	??_main& (0+255),b
  3004  00232C  0E00               	movlw	0
  3005  00232E                     u5187:
  3006  00232E  2EE8               	decfsz	wreg,f,c
  3007  002330  D7FE               	bra	u5187
  3008  002332  2FEC               	decfsz	??_main& (0+255),f,b
  3009  002334  D7FC               	bra	u5187
  3010  002336  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3011  002338  D7FA               	bra	u5187
  3012  00233A  F000               	nop	
  3013                           
  3014                           ;main.c: 290: I2C_sendData(B_dispense);
  3015  00233C  0100               	movlb	0	; () banked
  3016  00233E  51FC               	movf	_B_dispense& (0+255),w,b
  3017  002340  ECFF  F022         	call	_I2C_sendData
  3018                           
  3019                           ;main.c: 291: }
  3020                           ;main.c: 293: while(B_counter > 0){
  3021  002344  D032               	goto	l380
  3022  002346                     l5398:
  3023                           
  3024                           ;main.c: 296: I2C_Master_Start();
  3025  002346  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  3026                           
  3027                           ;main.c: 297: I2C_Master_Write(0b00010001);
  3028  00234A  0E00               	movlw	0
  3029  00234C  0100               	movlb	0	; () banked
  3030  00234E  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3031  002350  0E11               	movlw	17
  3032  002352  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3033  002354  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  3034                           
  3035                           ;main.c: 298: nuts_data = I2C_Master_Read(1);
  3036  002358  0E01               	movlw	1
  3037  00235A  ECD6  F022         	call	_I2C_Master_Read
  3038  00235E  0100               	movlb	0	; () banked
  3039  002360  6FC0               	movwf	_nuts_data& (0+255),b
  3040                           
  3041                           ;main.c: 299: I2C_Master_Stop();
  3042  002362  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  3043                           
  3044                           ;main.c: 300: if (nuts_data == '2'){
  3045  002366  0E32               	movlw	50
  3046  002368  0100               	movlb	0	; () banked
  3047  00236A  19C0               	xorwf	_nuts_data& (0+255),w,b
  3048  00236C  A4D8               	btfss	status,2,c
  3049  00236E  D01D               	goto	l380
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 301: B_counter --;
  3053  002370  07AA               	decf	_B_counter& (0+255),f,b
  3054  002372  A0D8               	btfss	status,0,c
  3055  002374  07AB               	decf	(_B_counter+1)& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;main.c: 302: initLCD();
  3059  002376  ECC1  F021         	call	_initLCD	;wreg free
  3060                           
  3061                           ;main.c: 303: printf("B_count:%d", B_counter);
  3062  00237A  0E55               	movlw	low STR_23
  3063  00237C  0100               	movlb	0	; () banked
  3064  00237E  6FD6               	movwf	printf@f& (0+255),b
  3065  002380  0EFF               	movlw	high STR_23
  3066  002382  6FD7               	movwf	(printf@f+1)& (0+255),b
  3067  002384  C0AA  F0D8         	movff	_B_counter,?_printf+2
  3068  002388  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  3069  00238C  EC17  F016         	call	_printf	;wreg free
  3070                           
  3071                           ;main.c: 305: if (B_counter ==0){
  3072  002390  0100               	movlb	0	; () banked
  3073  002392  51AA               	movf	_B_counter& (0+255),w,b
  3074  002394  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  3075  002396  A4D8               	btfss	status,2,c
  3076  002398  D004               	goto	l379
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 306: I2C_sendData(motorStop_0);
  3080  00239A  51F8               	movf	_motorStop_0& (0+255),w,b
  3081  00239C  ECFF  F022         	call	_I2C_sendData
  3082                           
  3083                           ;main.c: 307: }
  3084  0023A0  D004               	goto	l380
  3085  0023A2                     l379:
  3086                           
  3087                           ;main.c: 308: else{
  3088                           ;main.c: 309: I2C_sendData(B_dispense);
  3089  0023A2  0100               	movlb	0	; () banked
  3090  0023A4  51FC               	movf	_B_dispense& (0+255),w,b
  3091  0023A6  ECFF  F022         	call	_I2C_sendData
  3092  0023AA                     l380:
  3093  0023AA  0100               	movlb	0	; () banked
  3094  0023AC  BFAB               	btfsc	(_B_counter+1)& (0+255),7,b
  3095  0023AE  D005               	goto	u4250
  3096  0023B0  51AB               	movf	(_B_counter+1)& (0+255),w,b
  3097  0023B2  E1C9               	bnz	l5398
  3098  0023B4  05AA               	decf	_B_counter& (0+255),w,b
  3099  0023B6  B0D8               	btfsc	status,0,c
  3100  0023B8  D7C6               	goto	l377
  3101  0023BA                     u4250:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;main.c: 310: }
  3105                           ;main.c: 311: }
  3106                           ;main.c: 312: }
  3107                           ;main.c: 316: initLCD();
  3108                           
  3109                           ; BSR set to: 0
  3110  0023BA  ECC1  F021         	call	_initLCD	;wreg free
  3111                           
  3112                           ;main.c: 318: printf("bolts dispensed:%d",B_array[compartment_pos]);
  3113  0023BE  0E67               	movlw	low STR_24
  3114  0023C0  0100               	movlb	0	; () banked
  3115  0023C2  6FD6               	movwf	printf@f& (0+255),b
  3116  0023C4  0EFD               	movlw	high STR_24
  3117  0023C6  6FD7               	movwf	(printf@f+1)& (0+255),b
  3118  0023C8  90D8               	bcf	status,0,c
  3119  0023CA  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3120  0023CC  6ED9               	movwf	fsr2l,c
  3121  0023CE  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3122  0023D0  6EDA               	movwf	fsr2h,c
  3123  0023D2  0E30               	movlw	low _B_array
  3124  0023D4  26D9               	addwf	fsr2l,f,c
  3125  0023D6  0E01               	movlw	high _B_array
  3126  0023D8  22DA               	addwfc	fsr2h,f,c
  3127  0023DA  CFDE F0D8          	movff	postinc2,?_printf+2
  3128  0023DE  CFDD F0D9          	movff	postdec2,?_printf+3
  3129  0023E2  EC17  F016         	call	_printf	;wreg free
  3130                           
  3131                           ;main.c: 319: _delay((unsigned long)((1000)*(32000000/4000.0)));
  3132  0023E6  0E29               	movlw	41
  3133  0023E8  0100               	movlb	0	; () banked
  3134  0023EA  6FED               	movwf	(??_main+1)& (0+255),b
  3135  0023EC  0E96               	movlw	150
  3136  0023EE  6FEC               	movwf	??_main& (0+255),b
  3137  0023F0  0E7F               	movlw	127
  3138  0023F2                     u5197:
  3139  0023F2  2EE8               	decfsz	wreg,f,c
  3140  0023F4  D7FE               	bra	u5197
  3141  0023F6  2FEC               	decfsz	??_main& (0+255),f,b
  3142  0023F8  D7FC               	bra	u5197
  3143  0023FA  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3144  0023FC  D7FA               	bra	u5197
  3145                           
  3146                           ;main.c: 320: _delay((unsigned long)((3000)*(32000000/4000.0)));
  3147  0023FE  0E7A               	movlw	122
  3148  002400  0100               	movlb	0	; () banked
  3149  002402  6FED               	movwf	(??_main+1)& (0+255),b
  3150  002404  0EC1               	movlw	193
  3151  002406  6FEC               	movwf	??_main& (0+255),b
  3152  002408  0E81               	movlw	129
  3153  00240A                     u5207:
  3154  00240A  2EE8               	decfsz	wreg,f,c
  3155  00240C  D7FE               	bra	u5207
  3156  00240E  2FEC               	decfsz	??_main& (0+255),f,b
  3157  002410  D7FC               	bra	u5207
  3158  002412  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3159  002414  D7FA               	bra	u5207
  3160  002416  D000               	nop2	
  3161                           
  3162                           ;main.c: 321: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3163  002418  0E80               	movlw	128
  3164  00241A  EC64  F023         	call	_lcdInst
  3165  00241E  0E34               	movlw	52
  3166  002420  0100               	movlb	0	; () banked
  3167  002422  6FEC               	movwf	??_main& (0+255),b
  3168  002424  0EF1               	movlw	241
  3169  002426                     u5217:
  3170  002426  2EE8               	decfsz	wreg,f,c
  3171  002428  D7FE               	bra	u5217
  3172  00242A  2FEC               	decfsz	??_main& (0+255),f,b
  3173  00242C  D7FC               	bra	u5217
  3174  00242E  D000               	nop2	
  3175                           
  3176                           ;main.c: 322: B_counter = 0;
  3177  002430  0E00               	movlw	0
  3178  002432  0100               	movlb	0	; () banked
  3179  002434  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3180  002436  0E00               	movlw	0
  3181  002438  6FAA               	movwf	_B_counter& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;main.c: 331: initLCD();
  3185  00243A  ECC1  F021         	call	_initLCD	;wreg free
  3186                           
  3187                           ;main.c: 333: printf("N_counter:%d",N_counter);
  3188  00243E  0EFF               	movlw	low STR_25
  3189  002440  0100               	movlb	0	; () banked
  3190  002442  6FD6               	movwf	printf@f& (0+255),b
  3191  002444  0EFE               	movlw	high STR_25
  3192  002446  6FD7               	movwf	(printf@f+1)& (0+255),b
  3193  002448  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3194  00244C  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3195  002450  EC17  F016         	call	_printf	;wreg free
  3196                           
  3197                           ;main.c: 334: N_counter = N_array[compartment_pos];
  3198  002454  90D8               	bcf	status,0,c
  3199  002456  0100               	movlb	0	; () banked
  3200  002458  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3201  00245A  6ED9               	movwf	fsr2l,c
  3202  00245C  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3203  00245E  6EDA               	movwf	fsr2h,c
  3204  002460  0E10               	movlw	low _N_array
  3205  002462  26D9               	addwf	fsr2l,f,c
  3206  002464  0E01               	movlw	high _N_array
  3207  002466  22DA               	addwfc	fsr2h,f,c
  3208  002468  CFDE F0A6          	movff	postinc2,_N_counter
  3209  00246C  CFDD F0A7          	movff	postdec2,_N_counter+1
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 335: if(N_counter != 0){
  3213  002470  51A6               	movf	_N_counter& (0+255),w,b
  3214  002472  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3215  002474  B4D8               	btfsc	status,2,c
  3216  002476  D03A               	goto	l387
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 336: I2C_sendData(motorStart_1);
  3220  002478  51F7               	movf	_motorStart_1& (0+255),w,b
  3221  00247A  ECFF  F022         	call	_I2C_sendData
  3222                           
  3223                           ;main.c: 337: I2C_sendData(N_dispense);
  3224  00247E  0100               	movlb	0	; () banked
  3225  002480  51FB               	movf	_N_dispense& (0+255),w,b
  3226  002482  ECFF  F022         	call	_I2C_sendData
  3227                           
  3228                           ;main.c: 338: }
  3229                           ;main.c: 340: while(N_counter > 0){
  3230  002486  D032               	goto	l387
  3231  002488                     l5440:
  3232                           
  3233                           ;main.c: 343: I2C_Master_Start();
  3234  002488  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  3235                           
  3236                           ;main.c: 344: I2C_Master_Write(0b00010001);
  3237  00248C  0E00               	movlw	0
  3238  00248E  0100               	movlb	0	; () banked
  3239  002490  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3240  002492  0E11               	movlw	17
  3241  002494  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3242  002496  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  3243                           
  3244                           ;main.c: 345: nuts_data = I2C_Master_Read(1);
  3245  00249A  0E01               	movlw	1
  3246  00249C  ECD6  F022         	call	_I2C_Master_Read
  3247  0024A0  0100               	movlb	0	; () banked
  3248  0024A2  6FC0               	movwf	_nuts_data& (0+255),b
  3249                           
  3250                           ;main.c: 346: I2C_Master_Stop();
  3251  0024A4  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  3252                           
  3253                           ;main.c: 347: if (nuts_data == '3'){
  3254  0024A8  0E33               	movlw	51
  3255  0024AA  0100               	movlb	0	; () banked
  3256  0024AC  19C0               	xorwf	_nuts_data& (0+255),w,b
  3257  0024AE  A4D8               	btfss	status,2,c
  3258  0024B0  D01D               	goto	l387
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 348: N_counter --;
  3262  0024B2  07A6               	decf	_N_counter& (0+255),f,b
  3263  0024B4  A0D8               	btfss	status,0,c
  3264  0024B6  07A7               	decf	(_N_counter+1)& (0+255),f,b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 349: initLCD();
  3268  0024B8  ECC1  F021         	call	_initLCD	;wreg free
  3269                           
  3270                           ;main.c: 350: printf("N_count:%d", N_counter);
  3271  0024BC  0E60               	movlw	low STR_26
  3272  0024BE  0100               	movlb	0	; () banked
  3273  0024C0  6FD6               	movwf	printf@f& (0+255),b
  3274  0024C2  0EFF               	movlw	high STR_26
  3275  0024C4  6FD7               	movwf	(printf@f+1)& (0+255),b
  3276  0024C6  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3277  0024CA  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3278  0024CE  EC17  F016         	call	_printf	;wreg free
  3279                           
  3280                           ;main.c: 352: if (N_counter ==0){
  3281  0024D2  0100               	movlb	0	; () banked
  3282  0024D4  51A6               	movf	_N_counter& (0+255),w,b
  3283  0024D6  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3284  0024D8  A4D8               	btfss	status,2,c
  3285  0024DA  D004               	goto	l386
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;main.c: 353: I2C_sendData(motorStop_1);
  3289  0024DC  51F6               	movf	_motorStop_1& (0+255),w,b
  3290  0024DE  ECFF  F022         	call	_I2C_sendData
  3291                           
  3292                           ;main.c: 354: }
  3293  0024E2  D004               	goto	l387
  3294  0024E4                     l386:
  3295                           
  3296                           ;main.c: 355: else{
  3297                           ;main.c: 356: I2C_sendData(N_dispense);
  3298  0024E4  0100               	movlb	0	; () banked
  3299  0024E6  51FB               	movf	_N_dispense& (0+255),w,b
  3300  0024E8  ECFF  F022         	call	_I2C_sendData
  3301  0024EC                     l387:
  3302  0024EC  0100               	movlb	0	; () banked
  3303  0024EE  BFA7               	btfsc	(_N_counter+1)& (0+255),7,b
  3304  0024F0  D005               	goto	u4290
  3305  0024F2  51A7               	movf	(_N_counter+1)& (0+255),w,b
  3306  0024F4  E1C9               	bnz	l5440
  3307  0024F6  05A6               	decf	_N_counter& (0+255),w,b
  3308  0024F8  B0D8               	btfsc	status,0,c
  3309  0024FA  D7C6               	goto	l384
  3310  0024FC                     u4290:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 357: }
  3314                           ;main.c: 358: }
  3315                           ;main.c: 359: }
  3316                           ;main.c: 363: initLCD();
  3317                           
  3318                           ; BSR set to: 0
  3319  0024FC  ECC1  F021         	call	_initLCD	;wreg free
  3320                           
  3321                           ;main.c: 365: printf("nuts dispensed:%d",N_array[compartment_pos]);
  3322  002500  0E8D               	movlw	low STR_27
  3323  002502  0100               	movlb	0	; () banked
  3324  002504  6FD6               	movwf	printf@f& (0+255),b
  3325  002506  0EFD               	movlw	high STR_27
  3326  002508  6FD7               	movwf	(printf@f+1)& (0+255),b
  3327  00250A  90D8               	bcf	status,0,c
  3328  00250C  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3329  00250E  6ED9               	movwf	fsr2l,c
  3330  002510  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3331  002512  6EDA               	movwf	fsr2h,c
  3332  002514  0E10               	movlw	low _N_array
  3333  002516  26D9               	addwf	fsr2l,f,c
  3334  002518  0E01               	movlw	high _N_array
  3335  00251A  22DA               	addwfc	fsr2h,f,c
  3336  00251C  CFDE F0D8          	movff	postinc2,?_printf+2
  3337  002520  CFDD F0D9          	movff	postdec2,?_printf+3
  3338  002524  EC17  F016         	call	_printf	;wreg free
  3339                           
  3340                           ;main.c: 366: _delay((unsigned long)((1000)*(32000000/4000.0)));
  3341  002528  0E29               	movlw	41
  3342  00252A  0100               	movlb	0	; () banked
  3343  00252C  6FED               	movwf	(??_main+1)& (0+255),b
  3344  00252E  0E96               	movlw	150
  3345  002530  6FEC               	movwf	??_main& (0+255),b
  3346  002532  0E7F               	movlw	127
  3347  002534                     u5227:
  3348  002534  2EE8               	decfsz	wreg,f,c
  3349  002536  D7FE               	bra	u5227
  3350  002538  2FEC               	decfsz	??_main& (0+255),f,b
  3351  00253A  D7FC               	bra	u5227
  3352  00253C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3353  00253E  D7FA               	bra	u5227
  3354                           
  3355                           ;main.c: 367: _delay((unsigned long)((3000)*(32000000/4000.0)));
  3356  002540  0E7A               	movlw	122
  3357  002542  0100               	movlb	0	; () banked
  3358  002544  6FED               	movwf	(??_main+1)& (0+255),b
  3359  002546  0EC1               	movlw	193
  3360  002548  6FEC               	movwf	??_main& (0+255),b
  3361  00254A  0E81               	movlw	129
  3362  00254C                     u5237:
  3363  00254C  2EE8               	decfsz	wreg,f,c
  3364  00254E  D7FE               	bra	u5237
  3365  002550  2FEC               	decfsz	??_main& (0+255),f,b
  3366  002552  D7FC               	bra	u5237
  3367  002554  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3368  002556  D7FA               	bra	u5237
  3369  002558  D000               	nop2	
  3370                           
  3371                           ;main.c: 368: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3372  00255A  0E80               	movlw	128
  3373  00255C  EC64  F023         	call	_lcdInst
  3374  002560  0E34               	movlw	52
  3375  002562  0100               	movlb	0	; () banked
  3376  002564  6FEC               	movwf	??_main& (0+255),b
  3377  002566  0EF1               	movlw	241
  3378  002568                     u5247:
  3379  002568  2EE8               	decfsz	wreg,f,c
  3380  00256A  D7FE               	bra	u5247
  3381  00256C  2FEC               	decfsz	??_main& (0+255),f,b
  3382  00256E  D7FC               	bra	u5247
  3383  002570  D000               	nop2	
  3384                           
  3385                           ;main.c: 369: N_counter = 0;
  3386  002572  0E00               	movlw	0
  3387  002574  0100               	movlb	0	; () banked
  3388  002576  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3389  002578  0E00               	movlw	0
  3390  00257A  6FA6               	movwf	_N_counter& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 379: initLCD();
  3394  00257C  ECC1  F021         	call	_initLCD	;wreg free
  3395                           
  3396                           ;main.c: 381: printf("S_counter:%d",S_counter);
  3397  002580  0E0C               	movlw	low STR_28
  3398  002582  0100               	movlb	0	; () banked
  3399  002584  6FD6               	movwf	printf@f& (0+255),b
  3400  002586  0EFF               	movlw	high STR_28
  3401  002588  6FD7               	movwf	(printf@f+1)& (0+255),b
  3402  00258A  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3403  00258E  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3404  002592  EC17  F016         	call	_printf	;wreg free
  3405                           
  3406                           ;main.c: 382: S_counter = S_array[compartment_pos];
  3407  002596  90D8               	bcf	status,0,c
  3408  002598  0100               	movlb	0	; () banked
  3409  00259A  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3410  00259C  6ED9               	movwf	fsr2l,c
  3411  00259E  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3412  0025A0  6EDA               	movwf	fsr2h,c
  3413  0025A2  0E20               	movlw	low _S_array
  3414  0025A4  26D9               	addwf	fsr2l,f,c
  3415  0025A6  0E01               	movlw	high _S_array
  3416  0025A8  22DA               	addwfc	fsr2h,f,c
  3417  0025AA  CFDE F0A8          	movff	postinc2,_S_counter
  3418  0025AE  CFDD F0A9          	movff	postdec2,_S_counter+1
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 383: if(S_counter != 0){
  3422  0025B2  51A8               	movf	_S_counter& (0+255),w,b
  3423  0025B4  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3424  0025B6  B4D8               	btfsc	status,2,c
  3425  0025B8  D03A               	goto	l394
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;main.c: 384: I2C_sendData(motorStart_2);
  3429  0025BA  51F5               	movf	_motorStart_2& (0+255),w,b
  3430  0025BC  ECFF  F022         	call	_I2C_sendData
  3431                           
  3432                           ;main.c: 385: I2C_sendData(S_dispense);
  3433  0025C0  0100               	movlb	0	; () banked
  3434  0025C2  51FA               	movf	_S_dispense& (0+255),w,b
  3435  0025C4  ECFF  F022         	call	_I2C_sendData
  3436                           
  3437                           ;main.c: 386: }
  3438                           ;main.c: 388: while(S_counter > 0){
  3439  0025C8  D032               	goto	l394
  3440  0025CA                     l5482:
  3441                           
  3442                           ;main.c: 391: I2C_Master_Start();
  3443  0025CA  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  3444                           
  3445                           ;main.c: 392: I2C_Master_Write(0b00010001);
  3446  0025CE  0E00               	movlw	0
  3447  0025D0  0100               	movlb	0	; () banked
  3448  0025D2  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3449  0025D4  0E11               	movlw	17
  3450  0025D6  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3451  0025D8  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  3452                           
  3453                           ;main.c: 393: nuts_data = I2C_Master_Read(1);
  3454  0025DC  0E01               	movlw	1
  3455  0025DE  ECD6  F022         	call	_I2C_Master_Read
  3456  0025E2  0100               	movlb	0	; () banked
  3457  0025E4  6FC0               	movwf	_nuts_data& (0+255),b
  3458                           
  3459                           ;main.c: 394: I2C_Master_Stop();
  3460  0025E6  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  3461                           
  3462                           ;main.c: 395: if (nuts_data == '4'){
  3463  0025EA  0E34               	movlw	52
  3464  0025EC  0100               	movlb	0	; () banked
  3465  0025EE  19C0               	xorwf	_nuts_data& (0+255),w,b
  3466  0025F0  A4D8               	btfss	status,2,c
  3467  0025F2  D01D               	goto	l394
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 396: S_counter --;
  3471  0025F4  07A8               	decf	_S_counter& (0+255),f,b
  3472  0025F6  A0D8               	btfss	status,0,c
  3473  0025F8  07A9               	decf	(_S_counter+1)& (0+255),f,b
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;main.c: 397: initLCD();
  3477  0025FA  ECC1  F021         	call	_initLCD	;wreg free
  3478                           
  3479                           ;main.c: 398: printf("S_count:%d", S_counter);
  3480  0025FE  0E6B               	movlw	low STR_29
  3481  002600  0100               	movlb	0	; () banked
  3482  002602  6FD6               	movwf	printf@f& (0+255),b
  3483  002604  0EFF               	movlw	high STR_29
  3484  002606  6FD7               	movwf	(printf@f+1)& (0+255),b
  3485  002608  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3486  00260C  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3487  002610  EC17  F016         	call	_printf	;wreg free
  3488                           
  3489                           ;main.c: 400: if (S_counter ==0){
  3490  002614  0100               	movlb	0	; () banked
  3491  002616  51A8               	movf	_S_counter& (0+255),w,b
  3492  002618  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3493  00261A  A4D8               	btfss	status,2,c
  3494  00261C  D004               	goto	l393
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;main.c: 401: I2C_sendData(motorStop_2);
  3498  00261E  51F4               	movf	_motorStop_2& (0+255),w,b
  3499  002620  ECFF  F022         	call	_I2C_sendData
  3500                           
  3501                           ;main.c: 402: }
  3502  002624  D004               	goto	l394
  3503  002626                     l393:
  3504                           
  3505                           ;main.c: 403: else{
  3506                           ;main.c: 404: I2C_sendData(S_dispense);
  3507  002626  0100               	movlb	0	; () banked
  3508  002628  51FA               	movf	_S_dispense& (0+255),w,b
  3509  00262A  ECFF  F022         	call	_I2C_sendData
  3510  00262E                     l394:
  3511  00262E  0100               	movlb	0	; () banked
  3512  002630  BFA9               	btfsc	(_S_counter+1)& (0+255),7,b
  3513  002632  D005               	goto	u4330
  3514  002634  51A9               	movf	(_S_counter+1)& (0+255),w,b
  3515  002636  E1C9               	bnz	l5482
  3516  002638  05A8               	decf	_S_counter& (0+255),w,b
  3517  00263A  B0D8               	btfsc	status,0,c
  3518  00263C  D7C6               	goto	l391
  3519  00263E                     u4330:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;main.c: 405: }
  3523                           ;main.c: 406: }
  3524                           ;main.c: 407: }
  3525                           ;main.c: 411: initLCD();
  3526                           
  3527                           ; BSR set to: 0
  3528  00263E  ECC1  F021         	call	_initLCD	;wreg free
  3529                           
  3530                           ;main.c: 413: printf("spacers dispensed:%d",S_array[compartment_pos]);
  3531  002642  0E2A               	movlw	low STR_30
  3532  002644  0100               	movlb	0	; () banked
  3533  002646  6FD6               	movwf	printf@f& (0+255),b
  3534  002648  0EFD               	movlw	high STR_30
  3535  00264A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3536  00264C  90D8               	bcf	status,0,c
  3537  00264E  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3538  002650  6ED9               	movwf	fsr2l,c
  3539  002652  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3540  002654  6EDA               	movwf	fsr2h,c
  3541  002656  0E20               	movlw	low _S_array
  3542  002658  26D9               	addwf	fsr2l,f,c
  3543  00265A  0E01               	movlw	high _S_array
  3544  00265C  22DA               	addwfc	fsr2h,f,c
  3545  00265E  CFDE F0D8          	movff	postinc2,?_printf+2
  3546  002662  CFDD F0D9          	movff	postdec2,?_printf+3
  3547  002666  EC17  F016         	call	_printf	;wreg free
  3548                           
  3549                           ;main.c: 415: _delay((unsigned long)((2000)*(32000000/4000.0)));
  3550  00266A  0E52               	movlw	82
  3551  00266C  0100               	movlb	0	; () banked
  3552  00266E  6FED               	movwf	(??_main+1)& (0+255),b
  3553  002670  0E2B               	movlw	43
  3554  002672  6FEC               	movwf	??_main& (0+255),b
  3555  002674  0E00               	movlw	0
  3556  002676                     u5257:
  3557  002676  2EE8               	decfsz	wreg,f,c
  3558  002678  D7FE               	bra	u5257
  3559  00267A  2FEC               	decfsz	??_main& (0+255),f,b
  3560  00267C  D7FC               	bra	u5257
  3561  00267E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3562  002680  D7FA               	bra	u5257
  3563  002682  F000               	nop	
  3564                           
  3565                           ;main.c: 416: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3566  002684  0E80               	movlw	128
  3567  002686  EC64  F023         	call	_lcdInst
  3568  00268A  0E34               	movlw	52
  3569  00268C  0100               	movlb	0	; () banked
  3570  00268E  6FEC               	movwf	??_main& (0+255),b
  3571  002690  0EF1               	movlw	241
  3572  002692                     u5267:
  3573  002692  2EE8               	decfsz	wreg,f,c
  3574  002694  D7FE               	bra	u5267
  3575  002696  2FEC               	decfsz	??_main& (0+255),f,b
  3576  002698  D7FC               	bra	u5267
  3577  00269A  D000               	nop2	
  3578                           
  3579                           ;main.c: 417: S_counter = 0;
  3580  00269C  0E00               	movlw	0
  3581  00269E  0100               	movlb	0	; () banked
  3582  0026A0  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3583  0026A2  0E00               	movlw	0
  3584  0026A4  6FA8               	movwf	_S_counter& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;main.c: 427: initLCD();
  3588  0026A6  ECC1  F021         	call	_initLCD	;wreg free
  3589                           
  3590                           ;main.c: 428: printf("%d",W_counter);
  3591  0026AA  0E4E               	movlw	low (STR_54+12)
  3592  0026AC  0100               	movlb	0	; () banked
  3593  0026AE  6FD6               	movwf	printf@f& (0+255),b
  3594  0026B0  0EFE               	movlw	high (STR_54+12)
  3595  0026B2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3596  0026B4  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3597  0026B8  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3598  0026BC  EC17  F016         	call	_printf	;wreg free
  3599                           
  3600                           ;main.c: 429: _delay((unsigned long)((50)*(32000000/4000.0)));
  3601  0026C0  0E03               	movlw	3
  3602  0026C2  0100               	movlb	0	; () banked
  3603  0026C4  6FED               	movwf	(??_main+1)& (0+255),b
  3604  0026C6  0E08               	movlw	8
  3605  0026C8  6FEC               	movwf	??_main& (0+255),b
  3606  0026CA  0E77               	movlw	119
  3607  0026CC                     u5277:
  3608  0026CC  2EE8               	decfsz	wreg,f,c
  3609  0026CE  D7FE               	bra	u5277
  3610  0026D0  2FEC               	decfsz	??_main& (0+255),f,b
  3611  0026D2  D7FC               	bra	u5277
  3612  0026D4  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3613  0026D6  D7FA               	bra	u5277
  3614                           
  3615                           ;main.c: 430: I2C_sendData(motorStart_3);
  3616  0026D8  0100               	movlb	0	; () banked
  3617  0026DA  51F3               	movf	_motorStart_3& (0+255),w,b
  3618  0026DC  ECFF  F022         	call	_I2C_sendData
  3619  0026E0                     l5520:
  3620                           
  3621                           ;main.c: 434: if (W_counter == W_array[compartment_pos]){
  3622  0026E0  90D8               	bcf	status,0,c
  3623  0026E2  0100               	movlb	0	; () banked
  3624  0026E4  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3625  0026E6  6ED9               	movwf	fsr2l,c
  3626  0026E8  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3627  0026EA  6EDA               	movwf	fsr2h,c
  3628  0026EC  0E00               	movlw	low _W_array
  3629  0026EE  26D9               	addwf	fsr2l,f,c
  3630  0026F0  0E01               	movlw	high _W_array
  3631  0026F2  22DA               	addwfc	fsr2h,f,c
  3632  0026F4  51A4               	movf	_W_counter& (0+255),w,b
  3633  0026F6  18DE               	xorwf	postinc2,w,c
  3634  0026F8  E108               	bnz	l5524
  3635  0026FA  51A5               	movf	(_W_counter+1)& (0+255),w,b
  3636  0026FC  18DE               	xorwf	postinc2,w,c
  3637  0026FE  A4D8               	btfss	status,2,c
  3638  002700  D004               	goto	l397
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;main.c: 435: I2C_sendData(motorStop_3);
  3642  002702  51F2               	movf	_motorStop_3& (0+255),w,b
  3643  002704  ECFF  F022         	call	_I2C_sendData
  3644                           
  3645                           ;main.c: 436: break;
  3646  002708  D026               	goto	l398
  3647  00270A                     l397:
  3648  00270A                     l5524:
  3649                           
  3650                           ;main.c: 437: }
  3651                           ;main.c: 438: if (readADC(3)<=250 ){
  3652  00270A  0E03               	movlw	3
  3653  00270C  ECB9  F022         	call	_readADC
  3654  002710  0100               	movlb	0	; () banked
  3655  002712  51C9               	movf	(?_readADC+1)& (0+255),w,b
  3656  002714  E1E5               	bnz	l5520
  3657  002716  0EFB               	movlw	251
  3658  002718  5DC8               	subwf	?_readADC& (0+255),w,b
  3659  00271A  B0D8               	btfsc	status,0,c
  3660  00271C  D7E1               	goto	l396
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;main.c: 440: W_counter ++;
  3664  00271E  4BA4               	infsnz	_W_counter& (0+255),f,b
  3665  002720  2BA5               	incf	(_W_counter+1)& (0+255),f,b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;main.c: 441: initLCD();
  3669  002722  ECC1  F021         	call	_initLCD	;wreg free
  3670                           
  3671                           ;main.c: 442: printf("%d", W_counter);
  3672  002726  0E4E               	movlw	low (STR_54+12)
  3673  002728  0100               	movlb	0	; () banked
  3674  00272A  6FD6               	movwf	printf@f& (0+255),b
  3675  00272C  0EFE               	movlw	high (STR_54+12)
  3676  00272E  6FD7               	movwf	(printf@f+1)& (0+255),b
  3677  002730  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3678  002734  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3679  002738  EC17  F016         	call	_printf	;wreg free
  3680                           
  3681                           ;main.c: 443: _delay((unsigned long)((50)*(32000000/4000.0)));
  3682  00273C  0E03               	movlw	3
  3683  00273E  0100               	movlb	0	; () banked
  3684  002740  6FED               	movwf	(??_main+1)& (0+255),b
  3685  002742  0E08               	movlw	8
  3686  002744  6FEC               	movwf	??_main& (0+255),b
  3687  002746  0E77               	movlw	119
  3688  002748                     u5287:
  3689  002748  2EE8               	decfsz	wreg,f,c
  3690  00274A  D7FE               	bra	u5287
  3691  00274C  2FEC               	decfsz	??_main& (0+255),f,b
  3692  00274E  D7FC               	bra	u5287
  3693  002750  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3694  002752  D7FA               	bra	u5287
  3695  002754  D7C5               	goto	l396
  3696  002756                     l398:
  3697                           
  3698                           ;main.c: 444: }
  3699                           ;main.c: 446: }
  3700                           ;main.c: 448: initLCD();
  3701  002756  ECC1  F021         	call	_initLCD	;wreg free
  3702                           
  3703                           ;main.c: 450: printf("Washer dispensed:%d",W_counter);
  3704  00275A  0E3F               	movlw	low STR_33
  3705  00275C  0100               	movlb	0	; () banked
  3706  00275E  6FD6               	movwf	printf@f& (0+255),b
  3707  002760  0EFD               	movlw	high STR_33
  3708  002762  6FD7               	movwf	(printf@f+1)& (0+255),b
  3709  002764  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3710  002768  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3711  00276C  EC17  F016         	call	_printf	;wreg free
  3712                           
  3713                           ;main.c: 451: _delay((unsigned long)((200)*(32000000/4000.0)));
  3714  002770  0E09               	movlw	9
  3715  002772  0100               	movlb	0	; () banked
  3716  002774  6FED               	movwf	(??_main+1)& (0+255),b
  3717  002776  0E1E               	movlw	30
  3718  002778  6FEC               	movwf	??_main& (0+255),b
  3719  00277A  0EE4               	movlw	228
  3720  00277C                     u5297:
  3721  00277C  2EE8               	decfsz	wreg,f,c
  3722  00277E  D7FE               	bra	u5297
  3723  002780  2FEC               	decfsz	??_main& (0+255),f,b
  3724  002782  D7FC               	bra	u5297
  3725  002784  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3726  002786  D7FA               	bra	u5297
  3727  002788  F000               	nop	
  3728                           
  3729                           ;main.c: 452: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3730  00278A  0E80               	movlw	128
  3731  00278C  EC64  F023         	call	_lcdInst
  3732  002790  0E34               	movlw	52
  3733  002792  0100               	movlb	0	; () banked
  3734  002794  6FEC               	movwf	??_main& (0+255),b
  3735  002796  0EF1               	movlw	241
  3736  002798                     u5307:
  3737  002798  2EE8               	decfsz	wreg,f,c
  3738  00279A  D7FE               	bra	u5307
  3739  00279C  2FEC               	decfsz	??_main& (0+255),f,b
  3740  00279E  D7FC               	bra	u5307
  3741  0027A0  D000               	nop2	
  3742                           
  3743                           ;main.c: 453: W_counter = 0;
  3744  0027A2  0E00               	movlw	0
  3745  0027A4  0100               	movlb	0	; () banked
  3746  0027A6  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3747  0027A8  0E00               	movlw	0
  3748  0027AA  6FA4               	movwf	_W_counter& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;main.c: 458: B_counter = 0;
  3752  0027AC  0E00               	movlw	0
  3753  0027AE  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3754  0027B0  0E00               	movlw	0
  3755  0027B2  6FAA               	movwf	_B_counter& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 459: N_counter = 0;
  3759  0027B4  0E00               	movlw	0
  3760  0027B6  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3761  0027B8  0E00               	movlw	0
  3762  0027BA  6FA6               	movwf	_N_counter& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 460: S_counter = 0;
  3766  0027BC  0E00               	movlw	0
  3767  0027BE  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3768  0027C0  0E00               	movlw	0
  3769  0027C2  6FA8               	movwf	_S_counter& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;main.c: 461: W_counter = 0;
  3773  0027C4  0E00               	movlw	0
  3774  0027C6  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3775  0027C8  0E00               	movlw	0
  3776  0027CA  6FA4               	movwf	_W_counter& (0+255),b
  3777  0027CC                     l374:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;main.c: 463: }
  3781                           ;main.c: 467: printf("done C%d",compartment_pos);
  3782                           
  3783                           ; BSR set to: 0
  3784  0027CC  0E9B               	movlw	low STR_34
  3785  0027CE  6FD6               	movwf	printf@f& (0+255),b
  3786  0027D0  0EFF               	movlw	high STR_34
  3787  0027D2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3788  0027D4  C0B0  F0D8         	movff	_compartment_pos,?_printf+2
  3789  0027D8  C0B1  F0D9         	movff	_compartment_pos+1,?_printf+3
  3790  0027DC  EC17  F016         	call	_printf	;wreg free
  3791                           
  3792                           ;main.c: 468: I2C_sendData(rotate_1compartment);
  3793  0027E0  0100               	movlb	0	; () banked
  3794  0027E2  51FD               	movf	_rotate_1compartment& (0+255),w,b
  3795  0027E4  ECFF  F022         	call	_I2C_sendData
  3796                           
  3797                           ;main.c: 469: _delay((unsigned long)((3000)*(32000000/4000.0)));
  3798  0027E8  0E7A               	movlw	122
  3799  0027EA  0100               	movlb	0	; () banked
  3800  0027EC  6FED               	movwf	(??_main+1)& (0+255),b
  3801  0027EE  0EC1               	movlw	193
  3802  0027F0  6FEC               	movwf	??_main& (0+255),b
  3803  0027F2  0E81               	movlw	129
  3804  0027F4                     u5317:
  3805  0027F4  2EE8               	decfsz	wreg,f,c
  3806  0027F6  D7FE               	bra	u5317
  3807  0027F8  2FEC               	decfsz	??_main& (0+255),f,b
  3808  0027FA  D7FC               	bra	u5317
  3809  0027FC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3810  0027FE  D7FA               	bra	u5317
  3811  002800  D000               	nop2	
  3812                           
  3813                           ;main.c: 470: _delay((unsigned long)((2000)*(32000000/4000.0)));
  3814  002802  0E52               	movlw	82
  3815  002804  0100               	movlb	0	; () banked
  3816  002806  6FED               	movwf	(??_main+1)& (0+255),b
  3817  002808  0E2B               	movlw	43
  3818  00280A  6FEC               	movwf	??_main& (0+255),b
  3819  00280C  0E00               	movlw	0
  3820  00280E                     u5327:
  3821  00280E  2EE8               	decfsz	wreg,f,c
  3822  002810  D7FE               	bra	u5327
  3823  002812  2FEC               	decfsz	??_main& (0+255),f,b
  3824  002814  D7FC               	bra	u5327
  3825  002816  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3826  002818  D7FA               	bra	u5327
  3827  00281A  F000               	nop	
  3828                           
  3829                           ;main.c: 471: compartment_pos ++;
  3830  00281C  0100               	movlb	0	; () banked
  3831  00281E  4BB0               	infsnz	_compartment_pos& (0+255),f,b
  3832  002820  2BB1               	incf	(_compartment_pos+1)& (0+255),f,b
  3833                           
  3834                           ; BSR set to: 0
  3835  002822  4BBE               	infsnz	_i& (0+255),f,b
  3836  002824  2BBF               	incf	(_i+1)& (0+255),f,b
  3837                           
  3838                           ; BSR set to: 0
  3839  002826  51BF               	movf	(_i+1)& (0+255),w,b
  3840  002828  E101               	bnz	l5568
  3841  00282A  D520               	goto	L1
  3842  00282C                     u4360:
  3843  00282C                     l5568:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main.c: 472: }
  3847                           ;main.c: 480: I2C_sendData(servo_ramp);
  3848  00282C  51F1               	movf	_servo_ramp& (0+255),w,b
  3849  00282E  ECFF  F022         	call	_I2C_sendData
  3850                           
  3851                           ;main.c: 487: initLCD();
  3852  002832  ECC1  F021         	call	_initLCD	;wreg free
  3853                           
  3854                           ;main.c: 488: N_spacingTime = 0;
  3855  002836  0E00               	movlw	0
  3856  002838  0100               	movlb	0	; () banked
  3857  00283A  6F9B               	movwf	(_N_spacingTime+1)& (0+255),b
  3858  00283C  0E00               	movlw	0
  3859  00283E  6F9A               	movwf	_N_spacingTime& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;main.c: 489: initLCD();
  3863  002840  ECC1  F021         	call	_initLCD	;wreg free
  3864                           
  3865                           ;main.c: 490: printf("%d", N_remain);
  3866  002844  0E4E               	movlw	low (STR_54+12)
  3867  002846  0100               	movlb	0	; () banked
  3868  002848  6FD6               	movwf	printf@f& (0+255),b
  3869  00284A  0EFE               	movlw	high (STR_54+12)
  3870  00284C  6FD7               	movwf	(printf@f+1)& (0+255),b
  3871  00284E  C0A0  F0D8         	movff	_N_remain,?_printf+2
  3872  002852  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  3873  002856  EC17  F016         	call	_printf	;wreg free
  3874                           
  3875                           ;main.c: 491: I2C_sendData(motorStart_1);
  3876  00285A  0100               	movlb	0	; () banked
  3877  00285C  51F7               	movf	_motorStart_1& (0+255),w,b
  3878  00285E  ECFF  F022         	call	_I2C_sendData
  3879  002862                     
  3880                           ;main.c: 494: if (N_spacingTime >= 30000){
  3881  002862  0100               	movlb	0	; () banked
  3882  002864  BF9B               	btfsc	(_N_spacingTime+1)& (0+255),7,b
  3883  002866  D00A               	goto	l402
  3884  002868  0E30               	movlw	48
  3885  00286A  5D9A               	subwf	_N_spacingTime& (0+255),w,b
  3886  00286C  0E75               	movlw	117
  3887  00286E  599B               	subwfb	(_N_spacingTime+1)& (0+255),w,b
  3888  002870  A0D8               	btfss	status,0,c
  3889  002872  D004               	goto	l402
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 495: I2C_sendData(motorStop_1);
  3893  002874  51F6               	movf	_motorStop_1& (0+255),w,b
  3894  002876  ECFF  F022         	call	_I2C_sendData
  3895                           
  3896                           ;main.c: 496: break;
  3897  00287A  D04E               	goto	l403
  3898  00287C                     l402:
  3899                           
  3900                           ;main.c: 500: else{
  3901                           ;main.c: 501: I2C_sendData(N_dispense);
  3902  00287C  0100               	movlb	0	; () banked
  3903  00287E  51FB               	movf	_N_dispense& (0+255),w,b
  3904  002880  ECFF  F022         	call	_I2C_sendData
  3905                           
  3906                           ;main.c: 503: I2C_Master_Start();
  3907  002884  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  3908                           
  3909                           ;main.c: 504: I2C_Master_Write(0b00010001);
  3910  002888  0E00               	movlw	0
  3911  00288A  0100               	movlb	0	; () banked
  3912  00288C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3913  00288E  0E11               	movlw	17
  3914  002890  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3915  002892  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  3916                           
  3917                           ;main.c: 505: nuts_data = I2C_Master_Read(1);
  3918  002896  0E01               	movlw	1
  3919  002898  ECD6  F022         	call	_I2C_Master_Read
  3920  00289C  0100               	movlb	0	; () banked
  3921  00289E  6FC0               	movwf	_nuts_data& (0+255),b
  3922                           
  3923                           ;main.c: 506: I2C_Master_Stop();
  3924  0028A0  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  3925                           
  3926                           ;main.c: 507: if (nuts_data == '3'){
  3927  0028A4  0E33               	movlw	51
  3928  0028A6  0100               	movlb	0	; () banked
  3929  0028A8  19C0               	xorwf	_nuts_data& (0+255),w,b
  3930  0028AA  A4D8               	btfss	status,2,c
  3931  0028AC  D006               	goto	l405
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 508: N_remain++;
  3935  0028AE  4BA0               	infsnz	_N_remain& (0+255),f,b
  3936  0028B0  2BA1               	incf	(_N_remain+1)& (0+255),f,b
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;main.c: 509: N_spacingTime = 0;
  3940  0028B2  0E00               	movlw	0
  3941  0028B4  6F9B               	movwf	(_N_spacingTime+1)& (0+255),b
  3942  0028B6  0E00               	movlw	0
  3943  0028B8  6F9A               	movwf	_N_spacingTime& (0+255),b
  3944  0028BA                     l405:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;main.c: 510: }
  3948                           ;main.c: 511: N_spacingTime+=200;
  3949                           
  3950                           ; BSR set to: 0
  3951  0028BA  0EC8               	movlw	200
  3952  0028BC  279A               	addwf	_N_spacingTime& (0+255),f,b
  3953  0028BE  0E00               	movlw	0
  3954  0028C0  239B               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  3955                           
  3956                           ;main.c: 515: }
  3957                           ;main.c: 520: printf("%d", N_remain);
  3958                           
  3959                           ; BSR set to: 0
  3960  0028C2  0E4E               	movlw	low (STR_54+12)
  3961  0028C4  0100               	movlb	0	; () banked
  3962  0028C6  6FD6               	movwf	printf@f& (0+255),b
  3963  0028C8  0EFE               	movlw	high (STR_54+12)
  3964  0028CA  6FD7               	movwf	(printf@f+1)& (0+255),b
  3965  0028CC  C0A0  F0D8         	movff	_N_remain,?_printf+2
  3966  0028D0  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  3967  0028D4  EC17  F016         	call	_printf	;wreg free
  3968                           
  3969                           ;main.c: 521: lcdInst(0xC0);;
  3970  0028D8  0EC0               	movlw	192
  3971  0028DA  EC64  F023         	call	_lcdInst
  3972                           
  3973                           ;main.c: 522: printf("%d",N_spacingTime);
  3974  0028DE  0E4E               	movlw	low (STR_54+12)
  3975  0028E0  0100               	movlb	0	; () banked
  3976  0028E2  6FD6               	movwf	printf@f& (0+255),b
  3977  0028E4  0EFE               	movlw	high (STR_54+12)
  3978  0028E6  6FD7               	movwf	(printf@f+1)& (0+255),b
  3979  0028E8  C09A  F0D8         	movff	_N_spacingTime,?_printf+2
  3980  0028EC  C09B  F0D9         	movff	_N_spacingTime+1,?_printf+3
  3981  0028F0  EC17  F016         	call	_printf	;wreg free
  3982                           
  3983                           ;main.c: 524: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3984  0028F4  0E80               	movlw	128
  3985  0028F6  EC64  F023         	call	_lcdInst
  3986  0028FA  0E34               	movlw	52
  3987  0028FC  0100               	movlb	0	; () banked
  3988  0028FE  6FEC               	movwf	??_main& (0+255),b
  3989  002900  0EF1               	movlw	241
  3990  002902                     u5337:
  3991  002902  2EE8               	decfsz	wreg,f,c
  3992  002904  D7FE               	bra	u5337
  3993  002906  2FEC               	decfsz	??_main& (0+255),f,b
  3994  002908  D7FC               	bra	u5337
  3995  00290A  D000               	nop2	
  3996                           
  3997                           ;main.c: 527: N_spacingTime +=200;
  3998  00290C  0EC8               	movlw	200
  3999  00290E  0100               	movlb	0	; () banked
  4000  002910  279A               	addwf	_N_spacingTime& (0+255),f,b
  4001  002912  0E00               	movlw	0
  4002  002914  239B               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  4003                           
  4004                           ; BSR set to: 0
  4005  002916  D7A5               	goto	l401
  4006  002918                     l403:
  4007                           
  4008                           ;main.c: 530: }
  4009                           ;main.c: 541: I2C_sendData(close_handle);
  4010                           
  4011                           ; BSR set to: 0
  4012  002918  0100               	movlb	0	; () banked
  4013  00291A  51F0               	movf	_close_handle& (0+255),w,b
  4014  00291C  ECFF  F022         	call	_I2C_sendData
  4015  002920                     l407:
  4016                           
  4017                           ;main.c: 544: I2C_Master_Start();
  4018  002920  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  4019                           
  4020                           ;main.c: 545: I2C_Master_Write(0b00010001);
  4021  002924  0E00               	movlw	0
  4022  002926  0100               	movlb	0	; () banked
  4023  002928  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4024  00292A  0E11               	movlw	17
  4025  00292C  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4026  00292E  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  4027                           
  4028                           ;main.c: 546: nuts_data = I2C_Master_Read(1);
  4029  002932  0E01               	movlw	1
  4030  002934  ECD6  F022         	call	_I2C_Master_Read
  4031  002938  0100               	movlb	0	; () banked
  4032  00293A  6FC0               	movwf	_nuts_data& (0+255),b
  4033                           
  4034                           ;main.c: 547: I2C_Master_Stop();
  4035  00293C  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  4036                           
  4037                           ;main.c: 548: if (nuts_data == '4'){
  4038  002940  0E34               	movlw	52
  4039  002942  0100               	movlb	0	; () banked
  4040  002944  19C0               	xorwf	_nuts_data& (0+255),w,b
  4041  002946  A4D8               	btfss	status,2,c
  4042  002948  D7EB               	goto	l407
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;main.c: 550: }
  4046                           ;main.c: 551: }
  4047                           ;main.c: 552: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4048                           
  4049                           ; BSR set to: 0
  4050                           
  4051                           ; BSR set to: 0
  4052                           
  4053                           ; BSR set to: 0
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;main.c: 549: break;
  4057  00294A  0E52               	movlw	82
  4058  00294C  0100               	movlb	0	; () banked
  4059  00294E  6FED               	movwf	(??_main+1)& (0+255),b
  4060  002950  0E2B               	movlw	43
  4061  002952  6FEC               	movwf	??_main& (0+255),b
  4062  002954  0E00               	movlw	0
  4063  002956                     u5347:
  4064  002956  2EE8               	decfsz	wreg,f,c
  4065  002958  D7FE               	bra	u5347
  4066  00295A  2FEC               	decfsz	??_main& (0+255),f,b
  4067  00295C  D7FC               	bra	u5347
  4068  00295E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4069  002960  D7FA               	bra	u5347
  4070  002962  F000               	nop	
  4071                           
  4072                           ;main.c: 553: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4073  002964  0E52               	movlw	82
  4074  002966  0100               	movlb	0	; () banked
  4075  002968  6FED               	movwf	(??_main+1)& (0+255),b
  4076  00296A  0E2B               	movlw	43
  4077  00296C  6FEC               	movwf	??_main& (0+255),b
  4078  00296E  0E00               	movlw	0
  4079  002970                     u5357:
  4080  002970  2EE8               	decfsz	wreg,f,c
  4081  002972  D7FE               	bra	u5357
  4082  002974  2FEC               	decfsz	??_main& (0+255),f,b
  4083  002976  D7FC               	bra	u5357
  4084  002978  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4085  00297A  D7FA               	bra	u5357
  4086  00297C  F000               	nop	
  4087                           
  4088                           ;main.c: 554: _delay((unsigned long)((3000)*(32000000/4000.0)));
  4089  00297E  0E7A               	movlw	122
  4090  002980  0100               	movlb	0	; () banked
  4091  002982  6FED               	movwf	(??_main+1)& (0+255),b
  4092  002984  0EC1               	movlw	193
  4093  002986  6FEC               	movwf	??_main& (0+255),b
  4094  002988  0E81               	movlw	129
  4095  00298A                     u5367:
  4096  00298A  2EE8               	decfsz	wreg,f,c
  4097  00298C  D7FE               	bra	u5367
  4098  00298E  2FEC               	decfsz	??_main& (0+255),f,b
  4099  002990  D7FC               	bra	u5367
  4100  002992  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4101  002994  D7FA               	bra	u5367
  4102  002996  D000               	nop2	
  4103                           
  4104                           ;main.c: 555: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4105  002998  0E52               	movlw	82
  4106  00299A  0100               	movlb	0	; () banked
  4107  00299C  6FED               	movwf	(??_main+1)& (0+255),b
  4108  00299E  0E2B               	movlw	43
  4109  0029A0  6FEC               	movwf	??_main& (0+255),b
  4110  0029A2  0E00               	movlw	0
  4111  0029A4                     u5377:
  4112  0029A4  2EE8               	decfsz	wreg,f,c
  4113  0029A6  D7FE               	bra	u5377
  4114  0029A8  2FEC               	decfsz	??_main& (0+255),f,b
  4115  0029AA  D7FC               	bra	u5377
  4116  0029AC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4117  0029AE  D7FA               	bra	u5377
  4118  0029B0  F000               	nop	
  4119                           
  4120                           ;main.c: 560: get_RTC_final();
  4121  0029B2  EC57  F01D         	call	_get_RTC_final	;wreg free
  4122                           
  4123                           ;main.c: 562: printf("Bolt_remain:%d",B_remain);
  4124  0029B6  0E7E               	movlw	low STR_38
  4125  0029B8  0100               	movlb	0	; () banked
  4126  0029BA  6FD6               	movwf	printf@f& (0+255),b
  4127  0029BC  0EFE               	movlw	high STR_38
  4128  0029BE  6FD7               	movwf	(printf@f+1)& (0+255),b
  4129  0029C0  C0A2  F0D8         	movff	_B_remain,?_printf+2
  4130  0029C4  C0A3  F0D9         	movff	_B_remain+1,?_printf+3
  4131  0029C8  EC17  F016         	call	_printf	;wreg free
  4132                           
  4133                           ;main.c: 563: _delay((unsigned long)((300)*(32000000/4000.0)));
  4134  0029CC  0E0D               	movlw	13
  4135  0029CE  0100               	movlb	0	; () banked
  4136  0029D0  6FED               	movwf	(??_main+1)& (0+255),b
  4137  0029D2  0E2D               	movlw	45
  4138  0029D4  6FEC               	movwf	??_main& (0+255),b
  4139  0029D6  0ED7               	movlw	215
  4140  0029D8                     u5387:
  4141  0029D8  2EE8               	decfsz	wreg,f,c
  4142  0029DA  D7FE               	bra	u5387
  4143  0029DC  2FEC               	decfsz	??_main& (0+255),f,b
  4144  0029DE  D7FC               	bra	u5387
  4145  0029E0  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4146  0029E2  D7FA               	bra	u5387
  4147  0029E4  D000               	nop2	
  4148                           
  4149                           ;main.c: 564: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4150  0029E6  0E01               	movlw	1
  4151  0029E8  EC64  F023         	call	_lcdInst
  4152  0029EC  0E9C               	movlw	156
  4153  0029EE  0100               	movlb	0	; () banked
  4154  0029F0  6FEC               	movwf	??_main& (0+255),b
  4155  0029F2  0ED7               	movlw	215
  4156  0029F4                     u5397:
  4157  0029F4  2EE8               	decfsz	wreg,f,c
  4158  0029F6  D7FE               	bra	u5397
  4159  0029F8  2FEC               	decfsz	??_main& (0+255),f,b
  4160  0029FA  D7FC               	bra	u5397
  4161                           
  4162                           ;main.c: 565: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4163  0029FC  0E80               	movlw	128
  4164  0029FE  EC64  F023         	call	_lcdInst
  4165  002A02  0E34               	movlw	52
  4166  002A04  0100               	movlb	0	; () banked
  4167  002A06  6FEC               	movwf	??_main& (0+255),b
  4168  002A08  0EF1               	movlw	241
  4169  002A0A                     u5407:
  4170  002A0A  2EE8               	decfsz	wreg,f,c
  4171  002A0C  D7FE               	bra	u5407
  4172  002A0E  2FEC               	decfsz	??_main& (0+255),f,b
  4173  002A10  D7FC               	bra	u5407
  4174  002A12  D000               	nop2	
  4175                           
  4176                           ;main.c: 566: printf("Nut_remain:%d",N_remain);
  4177  002A14  0ED6               	movlw	low STR_39
  4178  002A16  0100               	movlb	0	; () banked
  4179  002A18  6FD6               	movwf	printf@f& (0+255),b
  4180  002A1A  0EFE               	movlw	high STR_39
  4181  002A1C  6FD7               	movwf	(printf@f+1)& (0+255),b
  4182  002A1E  C0A0  F0D8         	movff	_N_remain,?_printf+2
  4183  002A22  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  4184  002A26  EC17  F016         	call	_printf	;wreg free
  4185                           
  4186                           ;main.c: 567: _delay((unsigned long)((300)*(32000000/4000.0)));
  4187  002A2A  0E0D               	movlw	13
  4188  002A2C  0100               	movlb	0	; () banked
  4189  002A2E  6FED               	movwf	(??_main+1)& (0+255),b
  4190  002A30  0E2D               	movlw	45
  4191  002A32  6FEC               	movwf	??_main& (0+255),b
  4192  002A34  0ED7               	movlw	215
  4193  002A36                     u5417:
  4194  002A36  2EE8               	decfsz	wreg,f,c
  4195  002A38  D7FE               	bra	u5417
  4196  002A3A  2FEC               	decfsz	??_main& (0+255),f,b
  4197  002A3C  D7FC               	bra	u5417
  4198  002A3E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4199  002A40  D7FA               	bra	u5417
  4200  002A42  D000               	nop2	
  4201                           
  4202                           ;main.c: 568: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4203  002A44  0E01               	movlw	1
  4204  002A46  EC64  F023         	call	_lcdInst
  4205  002A4A  0E9C               	movlw	156
  4206  002A4C  0100               	movlb	0	; () banked
  4207  002A4E  6FEC               	movwf	??_main& (0+255),b
  4208  002A50  0ED7               	movlw	215
  4209  002A52                     u5427:
  4210  002A52  2EE8               	decfsz	wreg,f,c
  4211  002A54  D7FE               	bra	u5427
  4212  002A56  2FEC               	decfsz	??_main& (0+255),f,b
  4213  002A58  D7FC               	bra	u5427
  4214                           
  4215                           ;main.c: 569: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4216  002A5A  0E80               	movlw	128
  4217  002A5C  EC64  F023         	call	_lcdInst
  4218  002A60  0E34               	movlw	52
  4219  002A62  0100               	movlb	0	; () banked
  4220  002A64  6FEC               	movwf	??_main& (0+255),b
  4221  002A66  0EF1               	movlw	241
  4222  002A68                     u5437:
  4223  002A68  2EE8               	decfsz	wreg,f,c
  4224  002A6A  D7FE               	bra	u5437
  4225  002A6C  2FEC               	decfsz	??_main& (0+255),f,b
  4226  002A6E  D7FC               	bra	u5437
  4227  002A70  D000               	nop2	
  4228                           
  4229                           ;main.c: 570: printf("Spacer_remain:%d",S_remain);
  4230  002A72  0EB0               	movlw	low STR_40
  4231  002A74  0100               	movlb	0	; () banked
  4232  002A76  6FD6               	movwf	printf@f& (0+255),b
  4233  002A78  0EFD               	movlw	high STR_40
  4234  002A7A  6FD7               	movwf	(printf@f+1)& (0+255),b
  4235  002A7C  C09E  F0D8         	movff	_S_remain,?_printf+2
  4236  002A80  C09F  F0D9         	movff	_S_remain+1,?_printf+3
  4237  002A84  EC17  F016         	call	_printf	;wreg free
  4238                           
  4239                           ;main.c: 571: _delay((unsigned long)((300)*(32000000/4000.0)));
  4240  002A88  0E0D               	movlw	13
  4241  002A8A  0100               	movlb	0	; () banked
  4242  002A8C  6FED               	movwf	(??_main+1)& (0+255),b
  4243  002A8E  0E2D               	movlw	45
  4244  002A90  6FEC               	movwf	??_main& (0+255),b
  4245  002A92  0ED7               	movlw	215
  4246  002A94                     u5447:
  4247  002A94  2EE8               	decfsz	wreg,f,c
  4248  002A96  D7FE               	bra	u5447
  4249  002A98  2FEC               	decfsz	??_main& (0+255),f,b
  4250  002A9A  D7FC               	bra	u5447
  4251  002A9C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4252  002A9E  D7FA               	bra	u5447
  4253  002AA0  D000               	nop2	
  4254                           
  4255                           ;main.c: 572: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4256  002AA2  0E01               	movlw	1
  4257  002AA4  EC64  F023         	call	_lcdInst
  4258  002AA8  0E9C               	movlw	156
  4259  002AAA  0100               	movlb	0	; () banked
  4260  002AAC  6FEC               	movwf	??_main& (0+255),b
  4261  002AAE  0ED7               	movlw	215
  4262  002AB0                     u5457:
  4263  002AB0  2EE8               	decfsz	wreg,f,c
  4264  002AB2  D7FE               	bra	u5457
  4265  002AB4  2FEC               	decfsz	??_main& (0+255),f,b
  4266  002AB6  D7FC               	bra	u5457
  4267                           
  4268                           ;main.c: 573: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4269  002AB8  0E80               	movlw	128
  4270  002ABA  EC64  F023         	call	_lcdInst
  4271  002ABE  0E34               	movlw	52
  4272  002AC0  0100               	movlb	0	; () banked
  4273  002AC2  6FEC               	movwf	??_main& (0+255),b
  4274  002AC4  0EF1               	movlw	241
  4275  002AC6                     u5467:
  4276  002AC6  2EE8               	decfsz	wreg,f,c
  4277  002AC8  D7FE               	bra	u5467
  4278  002ACA  2FEC               	decfsz	??_main& (0+255),f,b
  4279  002ACC  D7FC               	bra	u5467
  4280  002ACE  D000               	nop2	
  4281                           
  4282                           ;main.c: 574: printf("Washer_remain:%d",W_remain);
  4283  002AD0  0EC1               	movlw	low STR_41
  4284  002AD2  0100               	movlb	0	; () banked
  4285  002AD4  6FD6               	movwf	printf@f& (0+255),b
  4286  002AD6  0EFD               	movlw	high STR_41
  4287  002AD8  6FD7               	movwf	(printf@f+1)& (0+255),b
  4288  002ADA  C09C  F0D8         	movff	_W_remain,?_printf+2
  4289  002ADE  C09D  F0D9         	movff	_W_remain+1,?_printf+3
  4290  002AE2  EC17  F016         	call	_printf	;wreg free
  4291                           
  4292                           ;main.c: 575: _delay((unsigned long)((300)*(32000000/4000.0)));
  4293  002AE6  0E0D               	movlw	13
  4294  002AE8  0100               	movlb	0	; () banked
  4295  002AEA  6FED               	movwf	(??_main+1)& (0+255),b
  4296  002AEC  0E2D               	movlw	45
  4297  002AEE  6FEC               	movwf	??_main& (0+255),b
  4298  002AF0  0ED7               	movlw	215
  4299  002AF2                     u5477:
  4300  002AF2  2EE8               	decfsz	wreg,f,c
  4301  002AF4  D7FE               	bra	u5477
  4302  002AF6  2FEC               	decfsz	??_main& (0+255),f,b
  4303  002AF8  D7FC               	bra	u5477
  4304  002AFA  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4305  002AFC  D7FA               	bra	u5477
  4306  002AFE  D000               	nop2	
  4307                           
  4308                           ;main.c: 576: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4309  002B00  0E01               	movlw	1
  4310  002B02  EC64  F023         	call	_lcdInst
  4311  002B06  0E9C               	movlw	156
  4312  002B08  0100               	movlb	0	; () banked
  4313  002B0A  6FEC               	movwf	??_main& (0+255),b
  4314  002B0C  0ED7               	movlw	215
  4315  002B0E                     u5487:
  4316  002B0E  2EE8               	decfsz	wreg,f,c
  4317  002B10  D7FE               	bra	u5487
  4318  002B12  2FEC               	decfsz	??_main& (0+255),f,b
  4319  002B14  D7FC               	bra	u5487
  4320                           
  4321                           ;main.c: 577: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4322  002B16  0E80               	movlw	128
  4323  002B18  EC64  F023         	call	_lcdInst
  4324  002B1C  0E34               	movlw	52
  4325  002B1E  0100               	movlb	0	; () banked
  4326  002B20  6FEC               	movwf	??_main& (0+255),b
  4327  002B22  0EF1               	movlw	241
  4328  002B24                     u5497:
  4329  002B24  2EE8               	decfsz	wreg,f,c
  4330  002B26  D7FE               	bra	u5497
  4331  002B28  2FEC               	decfsz	??_main& (0+255),f,b
  4332  002B2A  D7FC               	bra	u5497
  4333  002B2C  D000               	nop2	
  4334                           
  4335                           ;main.c: 578: printf("you're done");
  4336  002B2E  0E32               	movlw	low STR_42
  4337  002B30  0100               	movlb	0	; () banked
  4338  002B32  6FD6               	movwf	printf@f& (0+255),b
  4339  002B34  0EFF               	movlw	high STR_42
  4340  002B36  6FD7               	movwf	(printf@f+1)& (0+255),b
  4341  002B38  EC17  F016         	call	_printf	;wreg free
  4342                           
  4343                           ;main.c: 579: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4344  002B3C  0E29               	movlw	41
  4345  002B3E  0100               	movlb	0	; () banked
  4346  002B40  6FED               	movwf	(??_main+1)& (0+255),b
  4347  002B42  0E96               	movlw	150
  4348  002B44  6FEC               	movwf	??_main& (0+255),b
  4349  002B46  0E7F               	movlw	127
  4350  002B48                     u5507:
  4351  002B48  2EE8               	decfsz	wreg,f,c
  4352  002B4A  D7FE               	bra	u5507
  4353  002B4C  2FEC               	decfsz	??_main& (0+255),f,b
  4354  002B4E  D7FC               	bra	u5507
  4355  002B50  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4356  002B52  D7FA               	bra	u5507
  4357                           
  4358                           ;main.c: 580: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4359  002B54  0E80               	movlw	128
  4360  002B56  EC64  F023         	call	_lcdInst
  4361  002B5A  0E34               	movlw	52
  4362  002B5C  0100               	movlb	0	; () banked
  4363  002B5E  6FEC               	movwf	??_main& (0+255),b
  4364  002B60  0EF1               	movlw	241
  4365  002B62                     u5517:
  4366  002B62  2EE8               	decfsz	wreg,f,c
  4367  002B64  D7FE               	bra	u5517
  4368  002B66  2FEC               	decfsz	??_main& (0+255),f,b
  4369  002B68  D7FC               	bra	u5517
  4370  002B6A  D000               	nop2	
  4371  002B6C                     
  4372                           ;main.c: 604: (INTCONbits.GIE = 1);
  4373  002B6C  8EF2               	bsf	intcon,7,c	;volatile
  4374                           
  4375                           ;main.c: 605: operation = 1;
  4376  002B6E  0E00               	movlw	0
  4377  002B70  6E74               	movwf	_operation+1,c
  4378  002B72  0E01               	movlw	1
  4379  002B74  6E73               	movwf	_operation,c
  4380                           
  4381                           ;main.c: 606: printf("1: Date and Time");
  4382  002B76  0EE3               	movlw	low STR_43
  4383  002B78  0100               	movlb	0	; () banked
  4384  002B7A  6FD6               	movwf	printf@f& (0+255),b
  4385  002B7C  0EFD               	movlw	high STR_43
  4386  002B7E  6FD7               	movwf	(printf@f+1)& (0+255),b
  4387  002B80  EC17  F016         	call	_printf	;wreg free
  4388                           
  4389                           ;main.c: 607: lcdInst(0xC0);;
  4390  002B84  0EC0               	movlw	192
  4391  002B86  EC64  F023         	call	_lcdInst
  4392                           
  4393                           ;main.c: 608: printf(" 2: Operation Time");
  4394  002B8A  0E7A               	movlw	low STR_44
  4395  002B8C  0100               	movlb	0	; () banked
  4396  002B8E  6FD6               	movwf	printf@f& (0+255),b
  4397  002B90  0EFD               	movlw	high STR_44
  4398  002B92  6FD7               	movwf	(printf@f+1)& (0+255),b
  4399  002B94  EC17  F016         	call	_printf	;wreg free
  4400                           
  4401                           ;main.c: 609: _delay((unsigned long)((600)*(32000000/4000.0)));
  4402  002B98  0E19               	movlw	25
  4403  002B9A  0100               	movlb	0	; () banked
  4404  002B9C  6FED               	movwf	(??_main+1)& (0+255),b
  4405  002B9E  0E5A               	movlw	90
  4406  002BA0  6FEC               	movwf	??_main& (0+255),b
  4407  002BA2  0EB1               	movlw	177
  4408  002BA4                     u5527:
  4409  002BA4  2EE8               	decfsz	wreg,f,c
  4410  002BA6  D7FE               	bra	u5527
  4411  002BA8  2FEC               	decfsz	??_main& (0+255),f,b
  4412  002BAA  D7FC               	bra	u5527
  4413  002BAC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4414  002BAE  D7FA               	bra	u5527
  4415  002BB0  D000               	nop2	
  4416                           
  4417                           ;main.c: 610: initLCD();
  4418  002BB2  ECC1  F021         	call	_initLCD	;wreg free
  4419                           
  4420                           ;main.c: 611: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4421  002BB6  0E80               	movlw	128
  4422  002BB8  EC64  F023         	call	_lcdInst
  4423  002BBC  0E34               	movlw	52
  4424  002BBE  0100               	movlb	0	; () banked
  4425  002BC0  6FEC               	movwf	??_main& (0+255),b
  4426  002BC2  0EF1               	movlw	241
  4427  002BC4                     u5537:
  4428  002BC4  2EE8               	decfsz	wreg,f,c
  4429  002BC6  D7FE               	bra	u5537
  4430  002BC8  2FEC               	decfsz	??_main& (0+255),f,b
  4431  002BCA  D7FC               	bra	u5537
  4432  002BCC  D000               	nop2	
  4433                           
  4434                           ;main.c: 612: printf("3:summary");
  4435  002BCE  0E76               	movlw	low STR_45
  4436  002BD0  0100               	movlb	0	; () banked
  4437  002BD2  6FD6               	movwf	printf@f& (0+255),b
  4438  002BD4  0EFF               	movlw	high STR_45
  4439  002BD6  6FD7               	movwf	(printf@f+1)& (0+255),b
  4440  002BD8  EC17  F016         	call	_printf	;wreg free
  4441                           
  4442                           ;main.c: 613: lcdInst(0xC0);;
  4443  002BDC  0EC0               	movlw	192
  4444  002BDE  EC64  F023         	call	_lcdInst
  4445                           
  4446                           ;main.c: 615: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4447  002BE2  0E29               	movlw	41
  4448  002BE4  0100               	movlb	0	; () banked
  4449  002BE6  6FED               	movwf	(??_main+1)& (0+255),b
  4450  002BE8  0E96               	movlw	150
  4451  002BEA  6FEC               	movwf	??_main& (0+255),b
  4452  002BEC  0E7F               	movlw	127
  4453  002BEE                     u5547:
  4454  002BEE  2EE8               	decfsz	wreg,f,c
  4455  002BF0  D7FE               	bra	u5547
  4456  002BF2  2FEC               	decfsz	??_main& (0+255),f,b
  4457  002BF4  D7FC               	bra	u5547
  4458  002BF6  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4459  002BF8  D7FA               	bra	u5547
  4460                           
  4461                           ;main.c: 616: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4462  002BFA  0E80               	movlw	128
  4463  002BFC  EC64  F023         	call	_lcdInst
  4464  002C00  0E34               	movlw	52
  4465  002C02  0100               	movlb	0	; () banked
  4466  002C04  6FEC               	movwf	??_main& (0+255),b
  4467  002C06  0EF1               	movlw	241
  4468  002C08                     u5557:
  4469  002C08  2EE8               	decfsz	wreg,f,c
  4470  002C0A  D7FE               	bra	u5557
  4471  002C0C  2FEC               	decfsz	??_main& (0+255),f,b
  4472  002C0E  D7FC               	bra	u5557
  4473  002C10  D000               	nop2	
  4474                           
  4475                           ;main.c: 618: if(operation_done == 1){
  4476  002C12  0100               	movlb	0	; () banked
  4477  002C14  05B6               	decf	_operation_done& (0+255),w,b
  4478  002C16  11B7               	iorwf	(_operation_done+1)& (0+255),w,b
  4479  002C18  A4D8               	btfss	status,2,c
  4480  002C1A  D7A8               	goto	l411
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 620: }
  4484                           ;main.c: 621: }
  4485                           ;main.c: 622: initialize();
  4486                           
  4487                           ; BSR set to: 0
  4488                           
  4489                           ; BSR set to: 0
  4490                           
  4491                           ; BSR set to: 0
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;main.c: 619: break;
  4495  002C1C  ECB0  F01C         	call	_initialize	;wreg free
  4496                           
  4497                           ;main.c: 623: mode = 0;
  4498  002C20  0E00               	movlw	0
  4499  002C22  0100               	movlb	0	; () banked
  4500  002C24  6FBB               	movwf	(_mode+1)& (0+255),b
  4501  002C26  0E00               	movlw	0
  4502  002C28  6FBA               	movwf	_mode& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505                           
  4506                           ; BSR set to: 0
  4507  002C2A  EF3F  F00F         	goto	l350
  4508  002C2E                     __end_of_main:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           intcon	equ	0xFF2
  4515                           intcon3	equ	0xFF0
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           postdec1	equ	0xFE5
  4519                           fsr1l	equ	0xFE1
  4520                           postinc2	equ	0xFDE
  4521                           postdec2	equ	0xFDD
  4522                           fsr2h	equ	0xFDA
  4523                           fsr2l	equ	0xFD9
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _readADC *****************
  4527 ;; Defined at:
  4528 ;;		line 1158 in file "main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  channel         1    wreg     unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  channel         1    4[BANK0 ] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  2    0[BANK0 ] unsigned short 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;Total ram usage:        5 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    4
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_main
  4553 ;;		_count_gear
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text1
  4558  004572                     __ptext1:
  4559                           	opt stack 0
  4560  004572                     _readADC:
  4561                           	opt stack 26
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;incstack = 0
  4565                           ;readADC@channel stored from wreg
  4566  004572  0100               	movlb	0	; () banked
  4567  004574  6FCC               	movwf	readADC@channel& (0+255),b
  4568                           
  4569                           ;main.c: 1167: ADCON0 = (channel & 0x0F) << 2;
  4570  004576  C0CC  F0CA         	movff	readADC@channel,??_readADC
  4571  00457A  0E0F               	movlw	15
  4572  00457C  0100               	movlb	0	; () banked
  4573  00457E  17CA               	andwf	??_readADC& (0+255),f,b
  4574  004580  90D8               	bcf	status,0,c
  4575  004582  37CA               	rlcf	??_readADC& (0+255),f,b
  4576  004584  90D8               	bcf	status,0,c
  4577  004586  35CA               	rlcf	??_readADC& (0+255),w,b
  4578  004588  6EC2               	movwf	4034,c	;volatile
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;main.c: 1168: ADON = 1;
  4582  00458A  80C2               	bsf	4034,0,c	;volatile
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;main.c: 1169: ADCON0bits.GO = 1;
  4586  00458C  82C2               	bsf	4034,1,c	;volatile
  4587  00458E                     
  4588                           ; BSR set to: 0
  4589  00458E  B2C2               	btfsc	4034,1,c	;volatile
  4590  004590  D7FE               	goto	l491
  4591                           
  4592                           ;main.c: 1171: return (ADRESH << 8) | ADRESL;
  4593  004592  50C3               	movf	4035,w,c	;volatile
  4594  004594  CFC4 F0CA          	movff	4036,??_readADC	;volatile
  4595  004598  0100               	movlb	0	; () banked
  4596  00459A  6BCB               	clrf	(??_readADC+1)& (0+255),b
  4597  00459C  C0CA  F0CB         	movff	??_readADC,??_readADC+1
  4598  0045A0  6BCA               	clrf	??_readADC& (0+255),b
  4599  0045A2  11CA               	iorwf	??_readADC& (0+255),w,b
  4600  0045A4  6FC8               	movwf	?_readADC& (0+255),b
  4601  0045A6  51CB               	movf	(??_readADC+1)& (0+255),w,b
  4602  0045A8  6FC9               	movwf	(?_readADC+1)& (0+255),b
  4603  0045AA  0012               	return	
  4604  0045AC                     __end_of_readADC:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           intcon	equ	0xFF2
  4611                           intcon3	equ	0xFF0
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1l	equ	0xFE1
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _printf *****************
  4623 ;; Defined at:
  4624 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4627 ;;		 -> STR_80(3), STR_79(9), STR_78(12), STR_76(7), 
  4628 ;;		 -> STR_74(3), STR_73(11), STR_71(3), STR_70(9), 
  4629 ;;		 -> STR_65(15), STR_64(12), STR_63(9), STR_62(16), 
  4630 ;;		 -> STR_61(17), STR_60(17), STR_59(14), STR_58(15), 
  4631 ;;		 -> STR_57(15), STR_56(15), STR_55(15), STR_54(15), 
  4632 ;;		 -> STR_53(20), STR_52(17), STR_51(13), STR_50(16), 
  4633 ;;		 -> STR_49(15), STR_48(15), STR_47(15), STR_46(15), 
  4634 ;;		 -> STR_45(10), STR_44(19), STR_43(17), STR_42(12), 
  4635 ;;		 -> STR_41(17), STR_40(17), STR_39(14), STR_38(15), 
  4636 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(9), 
  4637 ;;		 -> STR_33(20), STR_32(3), STR_31(3), STR_30(21), 
  4638 ;;		 -> STR_29(11), STR_28(13), STR_27(18), STR_26(11), 
  4639 ;;		 -> STR_25(13), STR_24(19), STR_23(11), STR_22(13), 
  4640 ;;		 -> STR_21(15), STR_20(12), STR_19(7), STR_18(14), 
  4641 ;;		 -> STR_17(14), STR_16(16), STR_15(14), STR_14(3), 
  4642 ;;		 -> STR_13(2), STR_12(3), STR_11(2), STR_10(3), 
  4643 ;;		 -> STR_9(5), STR_8(17), STR_7(6), STR_6(8), 
  4644 ;;		 -> STR_5(3), STR_4(14), STR_3(15), STR_2(14), 
  4645 ;;		 -> STR_1(16), 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  idx             1   22[BANK0 ] unsigned char 
  4648 ;;  tmpval          4    0        struct .
  4649 ;;  width           2   33[BANK0 ] int 
  4650 ;;  val             2   30[BANK0 ] unsigned int 
  4651 ;;  len             2   28[BANK0 ] unsigned int 
  4652 ;;  ap              2   26[BANK0 ] PTR void [1]
  4653 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4654 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  4655 ;;		 -> STR_101(7), number(2), final_set(40), current_set(5), 
  4656 ;;  c               1   35[BANK0 ] char 
  4657 ;;  flag            1   32[BANK0 ] unsigned char 
  4658 ;;  prec            1   23[BANK0 ] char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  2   14[BANK0 ] int 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;Total ram usage:       22 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    6
  4675 ;; This function calls:
  4676 ;;		___lwdiv
  4677 ;;		___lwmod
  4678 ;;		___wmul
  4679 ;;		_isdigit
  4680 ;;		_putch
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;;		_count_gear
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text2
  4688  002C2E                     __ptext2:
  4689                           	opt stack 0
  4690  002C2E                     _printf:
  4691                           	opt stack 24
  4692                           
  4693                           ;doprnt.c: 466: va_list ap;
  4694                           ;doprnt.c: 499: signed char c;
  4695                           ;doprnt.c: 501: int width;
  4696                           ;doprnt.c: 506: signed char prec;
  4697                           ;doprnt.c: 508: unsigned char flag;
  4698                           ;doprnt.c: 523: union {
  4699                           ;doprnt.c: 524: unsigned long vd;
  4700                           ;doprnt.c: 525: double integ;
  4701                           ;doprnt.c: 526: } tmpval;
  4702                           ;doprnt.c: 528: unsigned int val;
  4703                           ;doprnt.c: 529: unsigned len;
  4704                           ;doprnt.c: 530: const char * cp;
  4705                           ;doprnt.c: 533: *ap = __va_start();
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;incstack = 0
  4709  002C2E  0ED8               	movlw	low (?_printf+2)
  4710  002C30  0100               	movlb	0	; () banked
  4711  002C32  6FE2               	movwf	printf@ap& (0+255),b
  4712  002C34  0E00               	movlw	high (?_printf+2)
  4713  002C36  6FE3               	movwf	(printf@ap+1)& (0+255),b
  4714                           
  4715                           ;doprnt.c: 536: while(c = *f++) {
  4716  002C38  D20F               	goto	u3180
  4717  002C3A                     
  4718                           ; BSR set to: 0
  4719                           ;doprnt.c: 538: if(c != '%')
  4720                           
  4721                           ; BSR set to: 0
  4722  002C3A  0E25               	movlw	37
  4723  002C3C  19EB               	xorwf	printf@c& (0+255),w,b
  4724  002C3E  B4D8               	btfsc	status,2,c
  4725  002C40  D004               	goto	l850
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;doprnt.c: 540: {
  4729                           ;doprnt.c: 541: (putch(c) );
  4730  002C42  51EB               	movf	printf@c& (0+255),w,b
  4731  002C44  EC58  F023         	call	_putch
  4732                           
  4733                           ;doprnt.c: 542: continue;
  4734  002C48  D207               	goto	u3180
  4735  002C4A                     l850:
  4736                           
  4737                           ;doprnt.c: 543: }
  4738                           ;doprnt.c: 546: width = 0;
  4739  002C4A  0E00               	movlw	0
  4740  002C4C  0100               	movlb	0	; () banked
  4741  002C4E  6FEA               	movwf	(printf@width+1)& (0+255),b
  4742  002C50  0E00               	movlw	0
  4743  002C52  6FE9               	movwf	printf@width& (0+255),b
  4744                           
  4745                           ;doprnt.c: 548: flag = 0;
  4746  002C54  0E00               	movlw	0
  4747  002C56  6FE8               	movwf	printf@flag& (0+255),b
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 551: switch(*f) {
  4751                           
  4752                           ;doprnt.c: 550: for(;;) {
  4753  002C58  D004               	goto	l852
  4754  002C5A                     
  4755                           ;doprnt.c: 580: flag |= 0x04;
  4756                           
  4757                           ; BSR set to: 0
  4758  002C5A  0100               	movlb	0	; () banked
  4759  002C5C  85E8               	bsf	printf@flag& (0+255),2,b
  4760                           
  4761                           ;doprnt.c: 581: f++;
  4762  002C5E  4BD6               	infsnz	printf@f& (0+255),f,b
  4763  002C60  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4764  002C62                     l852:
  4765                           
  4766                           ; BSR set to: 0
  4767  002C62  C0D6  FFF6         	movff	printf@f,tblptrl
  4768  002C66  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4769  002C6A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4770  002C6A  6AF8               	clrf	tblptru,c
  4771  002C6C                     	endif
  4772  002C6C                     	if	0	;tblptru may be non-zero
  4773  002C6C                     	endif
  4774  002C6C  0008               	tblrd		*
  4775  002C6E  50F5               	movf	tablat,w,c
  4776                           
  4777                           ; Switch size 1, requested type "space"
  4778                           ; Number of cases is 1, Range of values is 48 to 48
  4779                           ; switch strategies available:
  4780                           ; Name         Instructions Cycles
  4781                           ; simple_byte            4     3 (average)
  4782                           ;	Chosen strategy is simple_byte
  4783  002C70  0A30               	xorlw	48	; case 48
  4784  002C72  B4D8               	btfsc	status,2,c
  4785  002C74  D7F2               	goto	l853
  4786                           
  4787                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4788                           
  4789                           ;doprnt.c: 586: }
  4790                           
  4791                           ;doprnt.c: 585: break;
  4792  002C76  C0D6  FFF6         	movff	printf@f,tblptrl
  4793  002C7A  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4794  002C7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4795  002C7E  6AF8               	clrf	tblptru,c
  4796  002C80                     	endif
  4797  002C80                     	if	0	;tblptru may be non-zero
  4798  002C80                     	endif
  4799  002C80  0008               	tblrd		*
  4800  002C82  50F5               	movf	tablat,w,c
  4801  002C84  EC38  F023         	call	_isdigit
  4802  002C88  A0D8               	btfss	status,0,c
  4803  002C8A  D0AE               	goto	l860
  4804                           
  4805                           ;doprnt.c: 598: width = 0;
  4806  002C8C  0E00               	movlw	0
  4807  002C8E  0100               	movlb	0	; () banked
  4808  002C90  6FEA               	movwf	(printf@width+1)& (0+255),b
  4809  002C92  0E00               	movlw	0
  4810  002C94  6FE9               	movwf	printf@width& (0+255),b
  4811  002C96                     
  4812                           ;doprnt.c: 600: width *= 10;
  4813                           
  4814                           ; BSR set to: 0
  4815  002C96  C0E9  F0D0         	movff	printf@width,___wmul@multiplier
  4816  002C9A  C0EA  F0D1         	movff	printf@width+1,___wmul@multiplier+1
  4817  002C9E  0E00               	movlw	0
  4818  002CA0  0100               	movlb	0	; () banked
  4819  002CA2  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4820  002CA4  0E0A               	movlw	10
  4821  002CA6  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  4822  002CA8  ECEB  F022         	call	___wmul	;wreg free
  4823  002CAC  C0D0  F0E9         	movff	?___wmul,printf@width
  4824  002CB0  C0D1  F0EA         	movff	?___wmul+1,printf@width+1
  4825                           
  4826                           ;doprnt.c: 601: width += *f++ - '0';
  4827  002CB4  0ED0               	movlw	208
  4828  002CB6  0100               	movlb	0	; () banked
  4829  002CB8  6FDA               	movwf	??_printf& (0+255),b
  4830  002CBA  0EFF               	movlw	255
  4831  002CBC  6FDB               	movwf	(??_printf+1)& (0+255),b
  4832  002CBE  C0D6  FFF6         	movff	printf@f,tblptrl
  4833  002CC2  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4834  002CC6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4835  002CC6  6AF8               	clrf	tblptru,c
  4836  002CC8                     	endif
  4837  002CC8                     	if	0	;tblptru may be non-zero
  4838  002CC8                     	endif
  4839  002CC8  0008               	tblrd		*
  4840  002CCA  50F5               	movf	tablat,w,c
  4841  002CCC  6FDC               	movwf	(??_printf+2)& (0+255),b
  4842  002CCE  6BDD               	clrf	(??_printf+3)& (0+255),b
  4843  002CD0  51DA               	movf	??_printf& (0+255),w,b
  4844  002CD2  27DC               	addwf	(??_printf+2)& (0+255),f,b
  4845  002CD4  51DB               	movf	(??_printf+1)& (0+255),w,b
  4846  002CD6  23DD               	addwfc	(??_printf+3)& (0+255),f,b
  4847  002CD8  51DC               	movf	(??_printf+2)& (0+255),w,b
  4848  002CDA  27E9               	addwf	printf@width& (0+255),f,b
  4849  002CDC  51DD               	movf	(??_printf+3)& (0+255),w,b
  4850  002CDE  23EA               	addwfc	(printf@width+1)& (0+255),f,b
  4851                           
  4852                           ; BSR set to: 0
  4853  002CE0  4BD6               	infsnz	printf@f& (0+255),f,b
  4854  002CE2  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4858  002CE4  C0D6  FFF6         	movff	printf@f,tblptrl
  4859  002CE8  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4860  002CEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4861  002CEC  6AF8               	clrf	tblptru,c
  4862  002CEE                     	endif
  4863  002CEE                     	if	0	;tblptru may be non-zero
  4864  002CEE                     	endif
  4865  002CEE  0008               	tblrd		*
  4866  002CF0  50F5               	movf	tablat,w,c
  4867  002CF2  EC38  F023         	call	_isdigit
  4868  002CF6  A0D8               	btfss	status,0,c
  4869  002CF8  D077               	goto	l860
  4870  002CFA  D7CD               	goto	l858
  4871  002CFC                     
  4872                           ;doprnt.c: 721: flag |= 0x80;
  4873  002CFC  0100               	movlb	0	; () banked
  4874  002CFE  8FE8               	bsf	printf@flag& (0+255),7,b
  4875                           
  4876                           ;doprnt.c: 723: break;
  4877  002D00  D08F               	goto	l865
  4878  002D02                     
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4881                           
  4882                           ; BSR set to: 0
  4883  002D02  C0E2  FFD9         	movff	printf@ap,fsr2l
  4884  002D06  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4885  002D0A  CFDE F0E0          	movff	postinc2,printf@cp
  4886  002D0E  CFDD F0E1          	movff	postdec2,printf@cp+1
  4887                           
  4888                           ; BSR set to: 0
  4889  002D12  0E02               	movlw	2
  4890  002D14  27E2               	addwf	printf@ap& (0+255),f,b
  4891  002D16  0E00               	movlw	0
  4892  002D18  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;doprnt.c: 740: if(!cp)
  4896  002D1A  51E0               	movf	printf@cp& (0+255),w,b
  4897  002D1C  11E1               	iorwf	(printf@cp+1)& (0+255),w,b
  4898  002D1E  A4D8               	btfss	status,2,c
  4899  002D20  D004               	goto	l868
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;doprnt.c: 741: cp = "(null)";
  4903  002D22  0EAC               	movlw	low STR_101
  4904  002D24  6FE0               	movwf	printf@cp& (0+255),b
  4905  002D26  0EFF               	movlw	high STR_101
  4906  002D28  6FE1               	movwf	(printf@cp+1)& (0+255),b
  4907  002D2A                     l868:
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;doprnt.c: 745: len = 0;
  4911                           
  4912                           ; BSR set to: 0
  4913  002D2A  0E00               	movlw	0
  4914  002D2C  6FE5               	movwf	(printf@len+1)& (0+255),b
  4915  002D2E  0E00               	movlw	0
  4916  002D30  6FE4               	movwf	printf@len& (0+255),b
  4917                           
  4918                           ;doprnt.c: 746: while(cp[len])
  4919  002D32  D003               	goto	l869
  4920  002D34                     
  4921                           ;doprnt.c: 747: len++;
  4922                           
  4923                           ; BSR set to: 0
  4924  002D34  0100               	movlb	0	; () banked
  4925  002D36  4BE4               	infsnz	printf@len& (0+255),f,b
  4926  002D38  2BE5               	incf	(printf@len+1)& (0+255),f,b
  4927  002D3A                     l869:
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932  002D3A  51E4               	movf	printf@len& (0+255),w,b
  4933  002D3C  25E0               	addwf	printf@cp& (0+255),w,b
  4934  002D3E  6FDA               	movwf	??_printf& (0+255),b
  4935  002D40  51E5               	movf	(printf@len+1)& (0+255),w,b
  4936  002D42  21E1               	addwfc	(printf@cp+1)& (0+255),w,b
  4937  002D44  6FDB               	movwf	(??_printf+1)& (0+255),b
  4938  002D46  C0DA  FFF6         	movff	??_printf,tblptrl
  4939  002D4A  C0DB  FFF7         	movff	??_printf+1,tblptrh
  4940  002D4E  0E00               	movlw	low (__mediumconst shr (0+16))
  4941  002D50  6EF8               	movwf	tblptru,c
  4942  002D52  0E0F               	movlw	(high __ramtop+-1)
  4943  002D54  64F7               	cpfsgt	tblptrh,c
  4944  002D56  D003               	bra	u2947
  4945  002D58  0008               	tblrd		*
  4946  002D5A  50F5               	movf	tablat,w,c
  4947  002D5C  D005               	bra	u2940
  4948  002D5E                     u2947:
  4949  002D5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4950  002D62  CFF7 FFEA          	movff	tblptrh,fsr0h
  4951  002D66  50EF               	movf	indf0,w,c
  4952  002D68                     u2940:
  4953  002D68  0900               	iorlw	0
  4954  002D6A  A4D8               	btfss	status,2,c
  4955  002D6C  D7E3               	goto	l870
  4956                           
  4957                           ;doprnt.c: 757: if(width > len)
  4958  002D6E  0100               	movlb	0	; () banked
  4959  002D70  51E9               	movf	printf@width& (0+255),w,b
  4960  002D72  5DE4               	subwf	printf@len& (0+255),w,b
  4961  002D74  51EA               	movf	(printf@width+1)& (0+255),w,b
  4962  002D76  59E5               	subwfb	(printf@len+1)& (0+255),w,b
  4963  002D78  B0D8               	btfsc	status,0,c
  4964  002D7A  D005               	goto	l872
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;doprnt.c: 758: width -= len;
  4968  002D7C  51E4               	movf	printf@len& (0+255),w,b
  4969  002D7E  5FE9               	subwf	printf@width& (0+255),f,b
  4970  002D80  51E5               	movf	(printf@len+1)& (0+255),w,b
  4971  002D82  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  4972  002D84  D008               	goto	l874
  4973  002D86                     l872:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;doprnt.c: 759: else
  4977                           ;doprnt.c: 760: width = 0;
  4978                           
  4979                           ; BSR set to: 0
  4980  002D86  0E00               	movlw	0
  4981  002D88  6FEA               	movwf	(printf@width+1)& (0+255),b
  4982  002D8A  0E00               	movlw	0
  4983  002D8C  6FE9               	movwf	printf@width& (0+255),b
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 764: while(width--)
  4987  002D8E  D003               	goto	l874
  4988  002D90                     l4368:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;doprnt.c: 765: (putch(' ') );
  4992  002D90  0E20               	movlw	32
  4993  002D92  EC58  F023         	call	_putch
  4994  002D96                     l874:
  4995  002D96  0100               	movlb	0	; () banked
  4996  002D98  07E9               	decf	printf@width& (0+255),f,b
  4997  002D9A  A0D8               	btfss	status,0,c
  4998  002D9C  07EA               	decf	(printf@width+1)& (0+255),f,b
  4999  002D9E  29E9               	incf	printf@width& (0+255),w,b
  5000  002DA0  E1F7               	bnz	l4368
  5001  002DA2  29EA               	incf	(printf@width+1)& (0+255),w,b
  5002  002DA4  B4D8               	btfsc	status,2,c
  5003  002DA6  D017               	goto	l877
  5004  002DA8  D7F3               	goto	l875
  5005  002DAA                     l4372:
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;doprnt.c: 768: (putch(*cp++) );
  5009  002DAA  C0E0  FFF6         	movff	printf@cp,tblptrl
  5010  002DAE  C0E1  FFF7         	movff	printf@cp+1,tblptrh
  5011  002DB2  0E00               	movlw	low (__mediumconst shr (0+16))
  5012  002DB4  6EF8               	movwf	tblptru,c
  5013  002DB6  0E0F               	movlw	(high __ramtop+-1)
  5014  002DB8  64F7               	cpfsgt	tblptrh,c
  5015  002DBA  D003               	bra	u2987
  5016  002DBC  0008               	tblrd		*
  5017  002DBE  50F5               	movf	tablat,w,c
  5018  002DC0  D005               	bra	u2980
  5019  002DC2                     u2987:
  5020  002DC2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5021  002DC6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5022  002DCA  50EF               	movf	indf0,w,c
  5023  002DCC                     u2980:
  5024  002DCC  EC58  F023         	call	_putch
  5025  002DD0  0100               	movlb	0	; () banked
  5026  002DD2  4BE0               	infsnz	printf@cp& (0+255),f,b
  5027  002DD4  2BE1               	incf	(printf@cp+1)& (0+255),f,b
  5028  002DD6                     l877:
  5029                           
  5030                           ; BSR set to: 0
  5031                           
  5032                           ; BSR set to: 0
  5033  002DD6  07E4               	decf	printf@len& (0+255),f,b
  5034  002DD8  A0D8               	btfss	status,0,c
  5035  002DDA  07E5               	decf	(printf@len+1)& (0+255),f,b
  5036  002DDC  29E4               	incf	printf@len& (0+255),w,b
  5037  002DDE  E1E5               	bnz	l4372
  5038  002DE0  29E5               	incf	(printf@len+1)& (0+255),w,b
  5039  002DE2  B4D8               	btfsc	status,2,c
  5040  002DE4  D139               	goto	u3180
  5041  002DE6  D7E1               	goto	l878
  5042  002DE8                     l860:
  5043                           
  5044                           ; BSR set to: 0
  5045  002DE8  C0D6  FFF6         	movff	printf@f,tblptrl
  5046  002DEC  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5047  002DF0  0100               	movlb	0	; () banked
  5048  002DF2  4BD6               	infsnz	printf@f& (0+255),f,b
  5049  002DF4  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5050  002DF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5051  002DF6  6AF8               	clrf	tblptru,c
  5052  002DF8                     	endif
  5053  002DF8                     	if	0	;tblptru may be non-zero
  5054  002DF8                     	endif
  5055  002DF8  0008               	tblrd		*
  5056  002DFA  CFF5 F0EB          	movff	tablat,printf@c
  5057  002DFE  51EB               	movf	printf@c& (0+255),w,b
  5058                           
  5059                           ; Switch size 1, requested type "space"
  5060                           ; Number of cases is 5, Range of values is 0 to 120
  5061                           ; switch strategies available:
  5062                           ; Name         Instructions Cycles
  5063                           ; simple_byte           16     9 (average)
  5064                           ;	Chosen strategy is simple_byte
  5065  002E00  0A00               	xorlw	0	; case 0
  5066  002E02  B4D8               	btfsc	status,2,c
  5067  002E04  0012               	return	
  5068  002E06  0A64               	xorlw	100	; case 100
  5069  002E08  B4D8               	btfsc	status,2,c
  5070  002E0A  D00A               	goto	l865
  5071  002E0C  0A0D               	xorlw	13	; case 105
  5072  002E0E  B4D8               	btfsc	status,2,c
  5073  002E10  D007               	goto	l865
  5074  002E12  0A1A               	xorlw	26	; case 115
  5075  002E14  B4D8               	btfsc	status,2,c
  5076  002E16  D775               	goto	l867
  5077  002E18  0A0B               	xorlw	11	; case 120
  5078  002E1A  B4D8               	btfsc	status,2,c
  5079  002E1C  D76F               	goto	l866
  5080  002E1E  D11C               	goto	u3180
  5081  002E20                     l865:
  5082                           
  5083                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5084  002E20  0100               	movlb	0	; () banked
  5085  002E22  BFE8               	btfsc	printf@flag& (0+255),7,b
  5086  002E24  D015               	goto	l881
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;doprnt.c: 1253: {
  5090                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5091  002E26  C0E2  FFD9         	movff	printf@ap,fsr2l
  5092  002E2A  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5093  002E2E  CFDE F0E6          	movff	postinc2,printf@val
  5094  002E32  CFDD F0E7          	movff	postdec2,printf@val+1
  5095                           
  5096                           ; BSR set to: 0
  5097  002E36  0E02               	movlw	2
  5098  002E38  27E2               	addwf	printf@ap& (0+255),f,b
  5099  002E3A  0E00               	movlw	0
  5100  002E3C  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1261: if((int)val < 0) {
  5104  002E3E  AFE7               	btfss	(printf@val+1)& (0+255),7,b
  5105  002E40  D04A               	goto	l884
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;doprnt.c: 1262: flag |= 0x03;
  5109  002E42  0E03               	movlw	3
  5110  002E44  13E8               	iorwf	printf@flag& (0+255),f,b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 1263: val = -val;
  5114  002E46  6DE6               	negf	printf@val& (0+255),b
  5115  002E48  1FE7               	comf	(printf@val+1)& (0+255),f,b
  5116  002E4A  B0D8               	btfsc	status,0,c
  5117  002E4C  2BE7               	incf	(printf@val+1)& (0+255),f,b
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;doprnt.c: 1264: }
  5121                           ;doprnt.c: 1266: }
  5122  002E4E  D043               	goto	l884
  5123  002E50                     l881:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;doprnt.c: 1268: else
  5127                           ;doprnt.c: 1273: {
  5128                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5129                           
  5130                           ; BSR set to: 0
  5131  002E50  C0E2  FFD9         	movff	printf@ap,fsr2l
  5132  002E54  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5133  002E58  CFDE F0E6          	movff	postinc2,printf@val
  5134  002E5C  CFDD F0E7          	movff	postdec2,printf@val+1
  5135                           
  5136                           ; BSR set to: 0
  5137  002E60  0E02               	movlw	2
  5138  002E62  27E2               	addwf	printf@ap& (0+255),f,b
  5139  002E64  0E00               	movlw	0
  5140  002E66  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;doprnt.c: 1287: }
  5144                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5145  002E68  D036               	goto	l884
  5146  002E6A                     
  5147                           ; BSR set to: 0
  5148                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5149                           
  5150                           ; BSR set to: 0
  5151  002E6A  0E01               	movlw	1
  5152  002E6C  6FEB               	movwf	printf@c& (0+255),b
  5153  002E6E                     l4398:
  5154                           
  5155                           ; BSR set to: 0
  5156  002E6E  0E05               	movlw	5
  5157  002E70  19EB               	xorwf	printf@c& (0+255),w,b
  5158  002E72  B4D8               	btfsc	status,2,c
  5159  002E74  D038               	goto	l889
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;doprnt.c: 1306: if(val < dpowers[c])
  5163                           
  5164                           ; BSR set to: 0
  5165                           
  5166                           ; BSR set to: 0
  5167  002E76  51EB               	movf	printf@c& (0+255),w,b
  5168  002E78  0D02               	mullw	2
  5169  002E7A  0EA4               	movlw	low _dpowers
  5170  002E7C  24F3               	addwf	prodl,w,c
  5171  002E7E  6EF6               	movwf	tblptrl,c
  5172  002E80  0EFC               	movlw	high _dpowers
  5173  002E82  20F4               	addwfc	prodh,w,c
  5174  002E84  6EF7               	movwf	tblptrh,c
  5175  002E86                     	if	1	;There are 3 active tblptr bytes
  5176  002E86  6AF8               	clrf	tblptru,c
  5177  002E88  0E00               	movlw	low (__mediumconst shr (0+16))
  5178  002E8A  22F8               	addwfc	tblptru,f,c
  5179  002E8C                     	endif
  5180  002E8C  0009               	tblrd		*+
  5181  002E8E  50F5               	movf	tablat,w,c
  5182  002E90  5DE6               	subwf	printf@val& (0+255),w,b
  5183  002E92  0009               	tblrd		*+
  5184  002E94  50F5               	movf	tablat,w,c
  5185  002E96  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5186  002E98  A0D8               	btfss	status,0,c
  5187  002E9A  D025               	goto	l889
  5188                           
  5189                           ; BSR set to: 0
  5190                           
  5191                           ; BSR set to: 0
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;doprnt.c: 1307: break;
  5195  002E9C  2BEB               	incf	printf@c& (0+255),f,b
  5196  002E9E  D7E7               	goto	l4398
  5197  002EA0                     
  5198                           ; BSR set to: 0
  5199                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5200                           
  5201                           ; BSR set to: 0
  5202  002EA0  0E01               	movlw	1
  5203  002EA2  6FEB               	movwf	printf@c& (0+255),b
  5204  002EA4                     l4412:
  5205                           
  5206                           ; BSR set to: 0
  5207  002EA4  0E04               	movlw	4
  5208  002EA6  19EB               	xorwf	printf@c& (0+255),w,b
  5209  002EA8  B4D8               	btfsc	status,2,c
  5210  002EAA  D01D               	goto	l889
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5214                           
  5215                           ; BSR set to: 0
  5216                           
  5217                           ; BSR set to: 0
  5218  002EAC  51EB               	movf	printf@c& (0+255),w,b
  5219  002EAE  0D02               	mullw	2
  5220  002EB0  0EAE               	movlw	low _hexpowers
  5221  002EB2  24F3               	addwf	prodl,w,c
  5222  002EB4  6EF6               	movwf	tblptrl,c
  5223  002EB6  0EFC               	movlw	high _hexpowers
  5224  002EB8  20F4               	addwfc	prodh,w,c
  5225  002EBA  6EF7               	movwf	tblptrh,c
  5226  002EBC                     	if	1	;There are 3 active tblptr bytes
  5227  002EBC  6AF8               	clrf	tblptru,c
  5228  002EBE  0E00               	movlw	low (__mediumconst shr (0+16))
  5229  002EC0  22F8               	addwfc	tblptru,f,c
  5230  002EC2                     	endif
  5231  002EC2  0009               	tblrd		*+
  5232  002EC4  50F5               	movf	tablat,w,c
  5233  002EC6  5DE6               	subwf	printf@val& (0+255),w,b
  5234  002EC8  0009               	tblrd		*+
  5235  002ECA  50F5               	movf	tablat,w,c
  5236  002ECC  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5237  002ECE  A0D8               	btfss	status,0,c
  5238  002ED0  D00A               	goto	l889
  5239                           
  5240                           ; BSR set to: 0
  5241                           
  5242                           ; BSR set to: 0
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 1318: break;
  5246  002ED2  2BEB               	incf	printf@c& (0+255),f,b
  5247  002ED4  D7E7               	goto	l4412
  5248  002ED6                     l884:
  5249                           
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  002ED6  51E8               	movf	printf@flag& (0+255),w,b
  5254  002ED8  0B80               	andlw	128
  5255                           
  5256                           ; Switch size 1, requested type "space"
  5257                           ; Number of cases is 2, Range of values is 0 to 128
  5258                           ; switch strategies available:
  5259                           ; Name         Instructions Cycles
  5260                           ; simple_byte            7     4 (average)
  5261                           ;	Chosen strategy is simple_byte
  5262  002EDA  0A00               	xorlw	0	; case 0
  5263  002EDC  B4D8               	btfsc	status,2,c
  5264  002EDE  D7C5               	goto	l885
  5265  002EE0  0A80               	xorlw	128	; case 128
  5266  002EE2  B4D8               	btfsc	status,2,c
  5267  002EE4  D7DD               	goto	l890
  5268  002EE6                     l889:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5272                           
  5273                           ; BSR set to: 0
  5274  002EE6  51E9               	movf	printf@width& (0+255),w,b
  5275  002EE8  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5276  002EEA  B4D8               	btfsc	status,2,c
  5277  002EEC  D009               	goto	l894
  5278                           
  5279                           ; BSR set to: 0
  5280  002EEE  C0E8  F0DA         	movff	printf@flag,??_printf
  5281  002EF2  0E03               	movlw	3
  5282  002EF4  17DA               	andwf	??_printf& (0+255),f,b
  5283  002EF6  B4D8               	btfsc	status,2,c
  5284  002EF8  D003               	goto	l894
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;doprnt.c: 1346: width--;
  5288  002EFA  07E9               	decf	printf@width& (0+255),f,b
  5289  002EFC  A0D8               	btfss	status,0,c
  5290  002EFE  07EA               	decf	(printf@width+1)& (0+255),f,b
  5291  002F00                     l894:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;doprnt.c: 1381: if(width > c)
  5295                           
  5296                           ; BSR set to: 0
  5297  002F00  0E80               	movlw	128
  5298  002F02  BFEB               	btfsc	printf@c& (0+255),7,b
  5299  002F04  0E7F               	movlw	127
  5300  002F06  6FDA               	movwf	??_printf& (0+255),b
  5301  002F08  51E9               	movf	printf@width& (0+255),w,b
  5302  002F0A  5DEB               	subwf	printf@c& (0+255),w,b
  5303  002F0C  51EA               	movf	(printf@width+1)& (0+255),w,b
  5304  002F0E  0A80               	xorlw	128
  5305  002F10  59DA               	subwfb	??_printf& (0+255),w,b
  5306  002F12  B0D8               	btfsc	status,0,c
  5307  002F14  D007               	goto	l895
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;doprnt.c: 1382: width -= c;
  5311  002F16  51EB               	movf	printf@c& (0+255),w,b
  5312  002F18  5FE9               	subwf	printf@width& (0+255),f,b
  5313  002F1A  0E00               	movlw	0
  5314  002F1C  BFEB               	btfsc	printf@c& (0+255),7,b
  5315  002F1E  0EFF               	movlw	255
  5316  002F20  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  5317  002F22  D004               	goto	l896
  5318  002F24                     l895:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1383: else
  5322                           ;doprnt.c: 1384: width = 0;
  5323                           
  5324                           ; BSR set to: 0
  5325  002F24  0E00               	movlw	0
  5326  002F26  6FEA               	movwf	(printf@width+1)& (0+255),b
  5327  002F28  0E00               	movlw	0
  5328  002F2A  6FE9               	movwf	printf@width& (0+255),b
  5329  002F2C                     l896:
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;doprnt.c: 1387: if(flag & 0x04) {
  5333                           
  5334                           ; BSR set to: 0
  5335  002F2C  A5E8               	btfss	printf@flag& (0+255),2,b
  5336  002F2E  D016               	goto	l897
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;doprnt.c: 1392: if(flag & 0x03)
  5340  002F30  C0E8  F0DA         	movff	printf@flag,??_printf
  5341  002F34  0E03               	movlw	3
  5342  002F36  17DA               	andwf	??_printf& (0+255),f,b
  5343  002F38  B4D8               	btfsc	status,2,c
  5344  002F3A  D003               	goto	l898
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;doprnt.c: 1393: (putch('-') );
  5348  002F3C  0E2D               	movlw	45
  5349  002F3E  EC58  F023         	call	_putch
  5350  002F42                     l898:
  5351                           
  5352                           ;doprnt.c: 1415: if(width)
  5353  002F42  0100               	movlb	0	; () banked
  5354  002F44  51E9               	movf	printf@width& (0+255),w,b
  5355  002F46  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5356  002F48  B4D8               	btfsc	status,2,c
  5357  002F4A  D020               	goto	l906
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;doprnt.c: 1417: (putch('0') );
  5361                           
  5362                           ; BSR set to: 0
  5363                           
  5364                           ;doprnt.c: 1416: do
  5365  002F4C  0E30               	movlw	48
  5366  002F4E  EC58  F023         	call	_putch
  5367                           
  5368                           ;doprnt.c: 1418: while(--width);
  5369  002F52  0100               	movlb	0	; () banked
  5370  002F54  07E9               	decf	printf@width& (0+255),f,b
  5371  002F56  A0D8               	btfss	status,0,c
  5372  002F58  07EA               	decf	(printf@width+1)& (0+255),f,b
  5373  002F5A  D7F4               	goto	L11
  5374  002F5C                     l897:
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;doprnt.c: 1422: {
  5378                           ;doprnt.c: 1424: if(width
  5379                           ;doprnt.c: 1428: )
  5380                           
  5381                           ; BSR set to: 0
  5382  002F5C  51E9               	movf	printf@width& (0+255),w,b
  5383  002F5E  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5384  002F60  B4D8               	btfsc	status,2,c
  5385  002F62  D00B               	goto	u3160
  5386  002F64                     u3150:
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 1430: (putch(' ') );
  5390                           
  5391                           ; BSR set to: 0
  5392                           
  5393                           ;doprnt.c: 1429: do
  5394  002F64  0E20               	movlw	32
  5395  002F66  EC58  F023         	call	_putch
  5396                           
  5397                           ;doprnt.c: 1431: while(--width);
  5398  002F6A  0100               	movlb	0	; () banked
  5399  002F6C  07E9               	decf	printf@width& (0+255),f,b
  5400  002F6E  A0D8               	btfss	status,0,c
  5401  002F70  07EA               	decf	(printf@width+1)& (0+255),f,b
  5402  002F72  51E9               	movf	printf@width& (0+255),w,b
  5403  002F74  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5404  002F76  A4D8               	btfss	status,2,c
  5405  002F78  D7F5               	goto	u3150
  5406  002F7A                     u3160:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 1438: if(flag & 0x03)
  5410                           
  5411                           ; BSR set to: 0
  5412                           
  5413                           ; BSR set to: 0
  5414  002F7A  C0E8  F0DA         	movff	printf@flag,??_printf
  5415  002F7E  0E03               	movlw	3
  5416  002F80  17DA               	andwf	??_printf& (0+255),f,b
  5417  002F82  B4D8               	btfsc	status,2,c
  5418  002F84  D003               	goto	l906
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;doprnt.c: 1439: (putch('-') );
  5422  002F86  0E2D               	movlw	45
  5423  002F88  EC58  F023         	call	_putch
  5424  002F8C                     l906:
  5425                           
  5426                           ;doprnt.c: 1469: }
  5427                           ;doprnt.c: 1472: prec = c;
  5428  002F8C  C0EB  F0DF         	movff	printf@c,printf@prec
  5429                           
  5430                           ;doprnt.c: 1474: while(prec--) {
  5431  002F90  D05E               	goto	l907
  5432  002F92                     
  5433                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5434  002F92  0100               	movlb	0	; () banked
  5435  002F94  51DF               	movf	printf@prec& (0+255),w,b
  5436  002F96  0D02               	mullw	2
  5437  002F98  0EA4               	movlw	low _dpowers
  5438  002F9A  24F3               	addwf	prodl,w,c
  5439  002F9C  6EF6               	movwf	tblptrl,c
  5440  002F9E  0EFC               	movlw	high _dpowers
  5441  002FA0  20F4               	addwfc	prodh,w,c
  5442  002FA2  6EF7               	movwf	tblptrh,c
  5443  002FA4                     	if	1	;There are 3 active tblptr bytes
  5444  002FA4  6AF8               	clrf	tblptru,c
  5445  002FA6  0E00               	movlw	low (__mediumconst shr (0+16))
  5446  002FA8  22F8               	addwfc	tblptru,f,c
  5447  002FAA                     	endif
  5448  002FAA  0009               	tblrd		*+
  5449  002FAC  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5450  002FB0  000A               	tblrd		*-
  5451  002FB2  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5452  002FB6  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5453  002FBA  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5454  002FBE  EC6E  F021         	call	___lwdiv	;wreg free
  5455  002FC2  C0C8  F0CF         	movff	?___lwdiv,___lwmod@dividend
  5456  002FC6  C0C9  F0D0         	movff	?___lwdiv+1,___lwmod@dividend+1
  5457  002FCA  0E00               	movlw	0
  5458  002FCC  0100               	movlb	0	; () banked
  5459  002FCE  6FD2               	movwf	(___lwmod@divisor+1)& (0+255),b
  5460  002FD0  0E0A               	movlw	10
  5461  002FD2  6FD1               	movwf	___lwmod@divisor& (0+255),b
  5462  002FD4  EC55  F022         	call	___lwmod	;wreg free
  5463  002FD8  0100               	movlb	0	; () banked
  5464  002FDA  51CF               	movf	?___lwmod& (0+255),w,b
  5465  002FDC  0F30               	addlw	48
  5466  002FDE  6FEB               	movwf	printf@c& (0+255),b
  5467                           
  5468                           ;doprnt.c: 1491: break;
  5469  002FE0  D033               	goto	l911
  5470  002FE2                     
  5471                           ; BSR set to: 0
  5472                           ;doprnt.c: 1499: {
  5473                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5474                           
  5475                           ; BSR set to: 0
  5476  002FE2  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5477  002FE6  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5478  002FEA  51DF               	movf	printf@prec& (0+255),w,b
  5479  002FEC  0D02               	mullw	2
  5480  002FEE  0EAE               	movlw	low _hexpowers
  5481  002FF0  24F3               	addwf	prodl,w,c
  5482  002FF2  6EF6               	movwf	tblptrl,c
  5483  002FF4  0EFC               	movlw	high _hexpowers
  5484  002FF6  20F4               	addwfc	prodh,w,c
  5485  002FF8  6EF7               	movwf	tblptrh,c
  5486  002FFA                     	if	1	;There are 3 active tblptr bytes
  5487  002FFA  6AF8               	clrf	tblptru,c
  5488  002FFC  0E00               	movlw	low (__mediumconst shr (0+16))
  5489  002FFE  22F8               	addwfc	tblptru,f,c
  5490  003000                     	endif
  5491  003000  0009               	tblrd		*+
  5492  003002  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5493  003006  000A               	tblrd		*-
  5494  003008  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5495  00300C  EC6E  F021         	call	___lwdiv	;wreg free
  5496  003010  0100               	movlb	0	; () banked
  5497  003012  51C8               	movf	?___lwdiv& (0+255),w,b
  5498  003014  0B0F               	andlw	15
  5499  003016  6FDE               	movwf	printf@idx& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5503  003018  51DE               	movf	printf@idx& (0+255),w,b
  5504  00301A  0D01               	mullw	1
  5505  00301C  0E9F               	movlw	low STR_102
  5506  00301E  24F3               	addwf	prodl,w,c
  5507  003020  6EF6               	movwf	tblptrl,c
  5508  003022  0EFD               	movlw	high STR_102
  5509  003024  20F4               	addwfc	prodh,w,c
  5510  003026  6EF7               	movwf	tblptrh,c
  5511  003028                     	if	1	;There are 3 active tblptr bytes
  5512  003028  6AF8               	clrf	tblptru,c
  5513  00302A  0E00               	movlw	low (__mediumconst shr (0+16))
  5514  00302C  22F8               	addwfc	tblptru,f,c
  5515  00302E                     	endif
  5516  00302E  0008               	tblrd		*
  5517  003030  CFF5 F0EB          	movff	tablat,printf@c
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;doprnt.c: 1523: }
  5521                           
  5522                           ;doprnt.c: 1508: }
  5523                           ;doprnt.c: 1510: break;
  5524  003034  D009               	goto	l911
  5525  003036                     
  5526                           ; BSR set to: 0
  5527  003036  0100               	movlb	0	; () banked
  5528  003038  51E8               	movf	printf@flag& (0+255),w,b
  5529  00303A  0B80               	andlw	128
  5530                           
  5531                           ; Switch size 1, requested type "space"
  5532                           ; Number of cases is 2, Range of values is 0 to 128
  5533                           ; switch strategies available:
  5534                           ; Name         Instructions Cycles
  5535                           ; simple_byte            7     4 (average)
  5536                           ;	Chosen strategy is simple_byte
  5537  00303C  0A00               	xorlw	0	; case 0
  5538  00303E  B4D8               	btfsc	status,2,c
  5539  003040  D7A8               	goto	l910
  5540  003042  0A80               	xorlw	128	; case 128
  5541  003044  B4D8               	btfsc	status,2,c
  5542  003046  D7CD               	goto	l912
  5543  003048                     l911:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;doprnt.c: 1524: (putch(c) );
  5547                           
  5548                           ; BSR set to: 0
  5549  003048  51EB               	movf	printf@c& (0+255),w,b
  5550  00304A  EC58  F023         	call	_putch
  5551  00304E                     l907:
  5552  00304E  0100               	movlb	0	; () banked
  5553  003050  07DF               	decf	printf@prec& (0+255),f,b
  5554  003052  29DF               	incf	printf@prec& (0+255),w,b
  5555  003054  A4D8               	btfss	status,2,c
  5556  003056  D7EF               	goto	l909
  5557  003058                     u3180:
  5558                           
  5559                           ; BSR set to: 0
  5560                           
  5561                           ; BSR set to: 0
  5562  003058  C0D6  FFF6         	movff	printf@f,tblptrl
  5563  00305C  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5564  003060  0100               	movlb	0	; () banked
  5565  003062  4BD6               	infsnz	printf@f& (0+255),f,b
  5566  003064  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5567  003066                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5568  003066  6AF8               	clrf	tblptru,c
  5569  003068                     	endif
  5570  003068                     	if	0	;tblptru may be non-zero
  5571  003068                     	endif
  5572  003068  0008               	tblrd		*
  5573  00306A  CFF5 F0EB          	movff	tablat,printf@c
  5574  00306E  51EB               	movf	printf@c& (0+255),w,b
  5575  003070  B4D8               	btfsc	status,2,c
  5576  003072  0012               	return	
  5577  003074  D5E2               	goto	l849
  5578  003076                     __end_of_printf:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           intcon3	equ	0xFF0
  5588                           indf0	equ	0xFEF
  5589                           postinc0	equ	0xFEE
  5590                           fsr0h	equ	0xFEA
  5591                           fsr0l	equ	0xFE9
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _putch *****************
  5602 ;; Defined at:
  5603 ;;		line 24 in file "lcd.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  data            1    wreg     unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  data            1    2[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    5
  5624 ;; This function calls:
  5625 ;;		_lcdNibble
  5626 ;; This function is called by:
  5627 ;;		_printf
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text3
  5632  0046B0                     __ptext3:
  5633                           	opt stack 0
  5634  0046B0                     _putch:
  5635                           	opt stack 24
  5636                           
  5637                           ;incstack = 0
  5638                           ;putch@data stored from wreg
  5639  0046B0  0100               	movlb	0	; () banked
  5640  0046B2  6FCA               	movwf	putch@data& (0+255),b
  5641                           
  5642                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5643  0046B4  848C               	bsf	3980,2,c	;volatile
  5644                           
  5645                           ;lcd.c: 33: lcdNibble(data);
  5646  0046B6  0100               	movlb	0	; () banked
  5647  0046B8  51CA               	movf	putch@data& (0+255),w,b
  5648  0046BA  EC97  F01E         	call	_lcdNibble
  5649                           
  5650                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5651  0046BE  0EA0               	movlw	160
  5652  0046C0                     u5567:
  5653  0046C0  D000               	nop2	
  5654  0046C2  2EE8               	decfsz	wreg,f,c
  5655  0046C4  D7FD               	bra	u5567
  5656  0046C6  0012               	return		;funcret
  5657  0046C8                     __end_of_putch:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           intcon3	equ	0xFF0
  5667                           indf0	equ	0xFEF
  5668                           postinc0	equ	0xFEE
  5669                           fsr0h	equ	0xFEA
  5670                           fsr0l	equ	0xFE9
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           fsr1l	equ	0xFE1
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _isdigit *****************
  5681 ;; Defined at:
  5682 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  c               1    wreg     unsigned char 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  c               1    2[BANK0 ] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;		None               void
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        3 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    4
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_printf
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text4
  5711  004670                     __ptext4:
  5712                           	opt stack 0
  5713  004670                     _isdigit:
  5714                           	opt stack 25
  5715                           
  5716                           ;incstack = 0
  5717                           ;isdigit@c stored from wreg
  5718  004670  0100               	movlb	0	; () banked
  5719  004672  6FCA               	movwf	isdigit@c& (0+255),b
  5720  004674  0E00               	movlw	0
  5721  004676  0100               	movlb	0	; () banked
  5722  004678  6FC9               	movwf	_isdigit$1367& (0+255),b
  5723                           
  5724                           ; BSR set to: 0
  5725  00467A  0E3A               	movlw	58
  5726  00467C  61CA               	cpfslt	isdigit@c& (0+255),b
  5727  00467E  D005               	goto	l1245
  5728                           
  5729                           ; BSR set to: 0
  5730  004680  0E2F               	movlw	47
  5731  004682  65CA               	cpfsgt	isdigit@c& (0+255),b
  5732  004684  D002               	goto	l1245
  5733                           
  5734                           ; BSR set to: 0
  5735  004686  0E01               	movlw	1
  5736  004688  6FC9               	movwf	_isdigit$1367& (0+255),b
  5737  00468A                     l1245:
  5738                           
  5739                           ; BSR set to: 0
  5740                           
  5741                           ; BSR set to: 0
  5742  00468A  C0C9  F0C8         	movff	_isdigit$1367,??_isdigit
  5743  00468E  31C8               	rrcf	??_isdigit& (0+255),w,b
  5744  004690  0012               	return	
  5745  004692                     __end_of_isdigit:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           intcon3	equ	0xFF0
  5755                           indf0	equ	0xFEF
  5756                           postinc0	equ	0xFEE
  5757                           fsr0h	equ	0xFEA
  5758                           fsr0l	equ	0xFE9
  5759                           wreg	equ	0xFE8
  5760                           postdec1	equ	0xFE5
  5761                           fsr1l	equ	0xFE1
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function ___lwmod *****************
  5769 ;; Defined at:
  5770 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  dividend        2    7[BANK0 ] unsigned int 
  5773 ;;  divisor         2    9[BANK0 ] unsigned int 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  counter         1   11[BANK0 ] unsigned char 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  2    7[BANK0 ] unsigned int 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5785 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;Total ram usage:        5 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    4
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_printf
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text5
  5800  0044AA                     __ptext5:
  5801                           	opt stack 0
  5802  0044AA                     ___lwmod:
  5803                           	opt stack 25
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;incstack = 0
  5807  0044AA  0100               	movlb	0	; () banked
  5808  0044AC  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5809  0044AE  11D2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5810  0044B0  B4D8               	btfsc	status,2,c
  5811  0044B2  D018               	goto	l1339
  5812                           
  5813                           ; BSR set to: 0
  5814  0044B4  0E01               	movlw	1
  5815  0044B6  6FD3               	movwf	___lwmod@counter& (0+255),b
  5816  0044B8  D004               	goto	l1334
  5817  0044BA                     
  5818                           ; BSR set to: 0
  5819                           
  5820                           ; BSR set to: 0
  5821  0044BA  90D8               	bcf	status,0,c
  5822  0044BC  37D1               	rlcf	___lwmod@divisor& (0+255),f,b
  5823  0044BE  37D2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5824  0044C0  2BD3               	incf	___lwmod@counter& (0+255),f,b
  5825  0044C2                     l1334:
  5826                           
  5827                           ; BSR set to: 0
  5828                           
  5829                           ; BSR set to: 0
  5830  0044C2  AFD2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5831  0044C4  D7FA               	goto	l1335
  5832  0044C6                     u2750:
  5833                           
  5834                           ; BSR set to: 0
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839  0044C6  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5840  0044C8  5DCF               	subwf	___lwmod@dividend& (0+255),w,b
  5841  0044CA  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5842  0044CC  59D0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5843  0044CE  A0D8               	btfss	status,0,c
  5844  0044D0  D004               	goto	l1338
  5845                           
  5846                           ; BSR set to: 0
  5847  0044D2  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5848  0044D4  5FCF               	subwf	___lwmod@dividend& (0+255),f,b
  5849  0044D6  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5850  0044D8  5BD0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5851  0044DA                     l1338:
  5852                           
  5853                           ; BSR set to: 0
  5854                           
  5855                           ; BSR set to: 0
  5856  0044DA  90D8               	bcf	status,0,c
  5857  0044DC  33D2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5858  0044DE  33D1               	rrcf	___lwmod@divisor& (0+255),f,b
  5859                           
  5860                           ; BSR set to: 0
  5861  0044E0  2FD3               	decfsz	___lwmod@counter& (0+255),f,b
  5862  0044E2  D7F1               	goto	u2750
  5863  0044E4                     l1339:
  5864                           
  5865                           ; BSR set to: 0
  5866                           
  5867                           ; BSR set to: 0
  5868  0044E4  C0CF  F0CF         	movff	___lwmod@dividend,?___lwmod
  5869  0044E8  C0D0  F0D0         	movff	___lwmod@dividend+1,?___lwmod+1
  5870                           
  5871                           ; BSR set to: 0
  5872  0044EC  0012               	return		;funcret
  5873  0044EE                     __end_of___lwmod:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           intcon	equ	0xFF2
  5882                           intcon3	equ	0xFF0
  5883                           indf0	equ	0xFEF
  5884                           postinc0	equ	0xFEE
  5885                           fsr0h	equ	0xFEA
  5886                           fsr0l	equ	0xFE9
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1l	equ	0xFE1
  5890                           postinc2	equ	0xFDE
  5891                           postdec2	equ	0xFDD
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function ___lwdiv *****************
  5897 ;; Defined at:
  5898 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  dividend        2    0[BANK0 ] unsigned int 
  5901 ;;  divisor         2    2[BANK0 ] unsigned int 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  quotient        2    4[BANK0 ] unsigned int 
  5904 ;;  counter         1    6[BANK0 ] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  2    0[BANK0 ] unsigned int 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;Total ram usage:        7 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    4
  5921 ;; This function calls:
  5922 ;;		Nothing
  5923 ;; This function is called by:
  5924 ;;		_printf
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text6
  5929  0042DC                     __ptext6:
  5930                           	opt stack 0
  5931  0042DC                     ___lwdiv:
  5932                           	opt stack 25
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;incstack = 0
  5936  0042DC  0E00               	movlw	0
  5937  0042DE  0100               	movlb	0	; () banked
  5938  0042E0  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5939  0042E2  0E00               	movlw	0
  5940  0042E4  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  5941                           
  5942                           ; BSR set to: 0
  5943  0042E6  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5944  0042E8  11CB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5945  0042EA  B4D8               	btfsc	status,2,c
  5946  0042EC  D01C               	goto	l1329
  5947                           
  5948                           ; BSR set to: 0
  5949  0042EE  0E01               	movlw	1
  5950  0042F0  6FCE               	movwf	___lwdiv@counter& (0+255),b
  5951  0042F2  D004               	goto	l1324
  5952  0042F4                     
  5953                           ; BSR set to: 0
  5954                           
  5955                           ; BSR set to: 0
  5956  0042F4  90D8               	bcf	status,0,c
  5957  0042F6  37CA               	rlcf	___lwdiv@divisor& (0+255),f,b
  5958  0042F8  37CB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5959  0042FA  2BCE               	incf	___lwdiv@counter& (0+255),f,b
  5960  0042FC                     l1324:
  5961                           
  5962                           ; BSR set to: 0
  5963                           
  5964                           ; BSR set to: 0
  5965  0042FC  AFCB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5966  0042FE  D7FA               	goto	l1325
  5967  004300                     u2720:
  5968                           
  5969                           ; BSR set to: 0
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ; BSR set to: 0
  5974  004300  90D8               	bcf	status,0,c
  5975  004302  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  5976  004304  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5977                           
  5978                           ; BSR set to: 0
  5979  004306  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5980  004308  5DC8               	subwf	___lwdiv@dividend& (0+255),w,b
  5981  00430A  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5982  00430C  59C9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5983  00430E  A0D8               	btfss	status,0,c
  5984  004310  D005               	goto	l1328
  5985                           
  5986                           ; BSR set to: 0
  5987  004312  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5988  004314  5FC8               	subwf	___lwdiv@dividend& (0+255),f,b
  5989  004316  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5990  004318  5BC9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5991                           
  5992                           ; BSR set to: 0
  5993  00431A  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  5994  00431C                     l1328:
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999  00431C  90D8               	bcf	status,0,c
  6000  00431E  33CB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6001  004320  33CA               	rrcf	___lwdiv@divisor& (0+255),f,b
  6002                           
  6003                           ; BSR set to: 0
  6004  004322  2FCE               	decfsz	___lwdiv@counter& (0+255),f,b
  6005  004324  D7ED               	goto	u2720
  6006  004326                     l1329:
  6007                           
  6008                           ; BSR set to: 0
  6009                           
  6010                           ; BSR set to: 0
  6011  004326  C0CC  F0C8         	movff	___lwdiv@quotient,?___lwdiv
  6012  00432A  C0CD  F0C9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6013                           
  6014                           ; BSR set to: 0
  6015  00432E  0012               	return		;funcret
  6016  004330                     __end_of___lwdiv:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           intcon3	equ	0xFF0
  6026                           indf0	equ	0xFEF
  6027                           postinc0	equ	0xFEE
  6028                           fsr0h	equ	0xFEA
  6029                           fsr0l	equ	0xFE9
  6030                           wreg	equ	0xFE8
  6031                           postdec1	equ	0xFE5
  6032                           fsr1l	equ	0xFE1
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039 ;; *************** function _initialize *****************
  6040 ;; Defined at:
  6041 ;;		line 1123 in file "main.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      void 
  6048 ;; Registers used:
  6049 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;Total ram usage:        0 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    4
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_main
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text7
  6070  003960                     __ptext7:
  6071                           	opt stack 0
  6072  003960                     _initialize:
  6073                           	opt stack 26
  6074                           
  6075                           ;main.c: 1124: white_tape = 0;
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;incstack = 0
  6079  003960  0E00               	movlw	0
  6080  003962  0100               	movlb	0	; () banked
  6081  003964  6FBD               	movwf	(_white_tape+1)& (0+255),b
  6082  003966  0E00               	movlw	0
  6083  003968  6FBC               	movwf	_white_tape& (0+255),b
  6084                           
  6085                           ;main.c: 1125: mode = 0;
  6086  00396A  0E00               	movlw	0
  6087  00396C  6FBB               	movwf	(_mode+1)& (0+255),b
  6088  00396E  0E00               	movlw	0
  6089  003970  6FBA               	movwf	_mode& (0+255),b
  6090                           
  6091                           ;main.c: 1126: state = 0;
  6092  003972  0E00               	movlw	0
  6093  003974  6FAF               	movwf	(_state+1)& (0+255),b
  6094  003976  0E00               	movlw	0
  6095  003978  6FAE               	movwf	_state& (0+255),b
  6096                           
  6097                           ;main.c: 1127: assembly_step = 0;
  6098  00397A  0E00               	movlw	0
  6099  00397C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
  6100  00397E  0E00               	movlw	0
  6101  003980  6FAC               	movwf	_assembly_step& (0+255),b
  6102                           
  6103                           ;main.c: 1128: counter_step = 0;
  6104  003982  0E00               	movlw	0
  6105  003984  6E6E               	movwf	_counter_step+1,c
  6106  003986  0E00               	movlw	0
  6107  003988  6E6D               	movwf	_counter_step,c
  6108                           
  6109                           ;main.c: 1130: valid = 0;
  6110  00398A  0E00               	movlw	0
  6111  00398C  6E6C               	movwf	_valid+1,c
  6112  00398E  0E00               	movlw	0
  6113  003990  6E6B               	movwf	_valid,c
  6114                           
  6115                           ;main.c: 1131: number = 0;
  6116  003992  0E00               	movlw	0
  6117  003994  6E7E               	movwf	_number+1,c
  6118  003996  0E00               	movlw	0
  6119  003998  6E7D               	movwf	_number,c
  6120                           
  6121                           ;main.c: 1132: total_number=0;
  6122  00399A  0E00               	movlw	0
  6123  00399C  6E6A               	movwf	_total_number+1,c
  6124  00399E  0E00               	movlw	0
  6125  0039A0  6E69               	movwf	_total_number,c
  6126                           
  6127                           ;main.c: 1134: B=0,N=0,S=0,W=0;
  6128  0039A2  0E00               	movlw	0
  6129  0039A4  6E66               	movwf	_B+1,c
  6130  0039A6  0E00               	movlw	0
  6131  0039A8  6E65               	movwf	_B,c
  6132  0039AA  0E00               	movlw	0
  6133  0039AC  6E64               	movwf	_N+1,c
  6134  0039AE  0E00               	movlw	0
  6135  0039B0  6E63               	movwf	_N,c
  6136  0039B2  0E00               	movlw	0
  6137  0039B4  6E62               	movwf	_S+1,c
  6138  0039B6  0E00               	movlw	0
  6139  0039B8  6E61               	movwf	_S,c
  6140  0039BA  0E00               	movlw	0
  6141  0039BC  6E60               	movwf	_W+1,c
  6142  0039BE  0E00               	movlw	0
  6143  0039C0  6E5F               	movwf	_W,c
  6144                           
  6145                           ;main.c: 1136: B_counter= 0;
  6146  0039C2  0E00               	movlw	0
  6147  0039C4  6FAB               	movwf	(_B_counter+1)& (0+255),b
  6148  0039C6  0E00               	movlw	0
  6149  0039C8  6FAA               	movwf	_B_counter& (0+255),b
  6150                           
  6151                           ;main.c: 1137: S_counter= 0;
  6152  0039CA  0E00               	movlw	0
  6153  0039CC  6FA9               	movwf	(_S_counter+1)& (0+255),b
  6154  0039CE  0E00               	movlw	0
  6155  0039D0  6FA8               	movwf	_S_counter& (0+255),b
  6156                           
  6157                           ;main.c: 1138: N_counter= 0;
  6158  0039D2  0E00               	movlw	0
  6159  0039D4  6FA7               	movwf	(_N_counter+1)& (0+255),b
  6160  0039D6  0E00               	movlw	0
  6161  0039D8  6FA6               	movwf	_N_counter& (0+255),b
  6162                           
  6163                           ;main.c: 1139: W_counter= 0;
  6164  0039DA  0E00               	movlw	0
  6165  0039DC  6FA5               	movwf	(_W_counter+1)& (0+255),b
  6166  0039DE  0E00               	movlw	0
  6167  0039E0  6FA4               	movwf	_W_counter& (0+255),b
  6168                           
  6169                           ;main.c: 1142: initial_time = 0;
  6170  0039E2  0E00               	movlw	0
  6171  0039E4  0101               	movlb	1	; () banked
  6172  0039E6  6F69               	movwf	(_initial_time+1)& (0+255),b
  6173  0039E8  0E00               	movlw	0
  6174  0039EA  6F68               	movwf	_initial_time& (0+255),b
  6175                           
  6176                           ;main.c: 1143: final_time = 0;
  6177  0039EC  0E00               	movlw	0
  6178  0039EE  6F61               	movwf	(_final_time+1)& (0+255),b
  6179  0039F0  0E00               	movlw	0
  6180  0039F2  6F60               	movwf	_final_time& (0+255),b
  6181                           
  6182                           ;main.c: 1145: for (i=0;i<8;i++){
  6183  0039F4  0E00               	movlw	0
  6184  0039F6  0100               	movlb	0	; () banked
  6185  0039F8  6FBF               	movwf	(_i+1)& (0+255),b
  6186  0039FA  0E00               	movlw	0
  6187  0039FC  6FBE               	movwf	_i& (0+255),b
  6188  0039FE                     l4564:
  6189                           
  6190                           ; BSR set to: 0
  6191  0039FE  51BF               	movf	(_i+1)& (0+255),w,b
  6192  003A00  E155               	bnz	l487
  6193  003A02  0E08               	movlw	8
  6194  003A04  5DBE               	subwf	_i& (0+255),w,b
  6195  003A06  B0D8               	btfsc	status,0,c
  6196  003A08  0012               	return	
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;main.c: 1146: compartment_array[i] = 0;
  6200                           
  6201                           ; BSR set to: 0
  6202                           
  6203                           ; BSR set to: 0
  6204  003A0A  90D8               	bcf	status,0,c
  6205  003A0C  35BE               	rlcf	_i& (0+255),w,b
  6206  003A0E  6ED9               	movwf	fsr2l,c
  6207  003A10  35BF               	rlcf	(_i+1)& (0+255),w,b
  6208  003A12  6EDA               	movwf	fsr2h,c
  6209  003A14  0E80               	movlw	low _compartment_array
  6210  003A16  26D9               	addwf	fsr2l,f,c
  6211  003A18  0E00               	movlw	high _compartment_array
  6212  003A1A  22DA               	addwfc	fsr2h,f,c
  6213  003A1C  0E00               	movlw	0
  6214  003A1E  6EDE               	movwf	postinc2,c
  6215  003A20  0E00               	movlw	0
  6216  003A22  6EDD               	movwf	postdec2,c
  6217                           
  6218                           ;main.c: 1147: compartment_number[i] = 0;
  6219  003A24  90D8               	bcf	status,0,c
  6220  003A26  35BE               	rlcf	_i& (0+255),w,b
  6221  003A28  6ED9               	movwf	fsr2l,c
  6222  003A2A  35BF               	rlcf	(_i+1)& (0+255),w,b
  6223  003A2C  6EDA               	movwf	fsr2h,c
  6224  003A2E  0E46               	movlw	low _compartment_number
  6225  003A30  26D9               	addwf	fsr2l,f,c
  6226  003A32  0E00               	movlw	high _compartment_number
  6227  003A34  22DA               	addwfc	fsr2h,f,c
  6228  003A36  0E00               	movlw	0
  6229  003A38  6EDE               	movwf	postinc2,c
  6230  003A3A  0E00               	movlw	0
  6231  003A3C  6EDD               	movwf	postdec2,c
  6232                           
  6233                           ;main.c: 1148: B_array[i] = 0;
  6234  003A3E  90D8               	bcf	status,0,c
  6235  003A40  35BE               	rlcf	_i& (0+255),w,b
  6236  003A42  6ED9               	movwf	fsr2l,c
  6237  003A44  35BF               	rlcf	(_i+1)& (0+255),w,b
  6238  003A46  6EDA               	movwf	fsr2h,c
  6239  003A48  0E30               	movlw	low _B_array
  6240  003A4A  26D9               	addwf	fsr2l,f,c
  6241  003A4C  0E01               	movlw	high _B_array
  6242  003A4E  22DA               	addwfc	fsr2h,f,c
  6243  003A50  0E00               	movlw	0
  6244  003A52  6EDE               	movwf	postinc2,c
  6245  003A54  0E00               	movlw	0
  6246  003A56  6EDD               	movwf	postdec2,c
  6247                           
  6248                           ;main.c: 1149: N_array[i] = 0;
  6249  003A58  90D8               	bcf	status,0,c
  6250  003A5A  35BE               	rlcf	_i& (0+255),w,b
  6251  003A5C  6ED9               	movwf	fsr2l,c
  6252  003A5E  35BF               	rlcf	(_i+1)& (0+255),w,b
  6253  003A60  6EDA               	movwf	fsr2h,c
  6254  003A62  0E10               	movlw	low _N_array
  6255  003A64  26D9               	addwf	fsr2l,f,c
  6256  003A66  0E01               	movlw	high _N_array
  6257  003A68  22DA               	addwfc	fsr2h,f,c
  6258  003A6A  0E00               	movlw	0
  6259  003A6C  6EDE               	movwf	postinc2,c
  6260  003A6E  0E00               	movlw	0
  6261  003A70  6EDD               	movwf	postdec2,c
  6262                           
  6263                           ;main.c: 1150: S_array[i] = 0;
  6264  003A72  90D8               	bcf	status,0,c
  6265  003A74  35BE               	rlcf	_i& (0+255),w,b
  6266  003A76  6ED9               	movwf	fsr2l,c
  6267  003A78  35BF               	rlcf	(_i+1)& (0+255),w,b
  6268  003A7A  6EDA               	movwf	fsr2h,c
  6269  003A7C  0E20               	movlw	low _S_array
  6270  003A7E  26D9               	addwf	fsr2l,f,c
  6271  003A80  0E01               	movlw	high _S_array
  6272  003A82  22DA               	addwfc	fsr2h,f,c
  6273  003A84  0E00               	movlw	0
  6274  003A86  6EDE               	movwf	postinc2,c
  6275  003A88  0E00               	movlw	0
  6276  003A8A  6EDD               	movwf	postdec2,c
  6277                           
  6278                           ;main.c: 1151: W_array[i] = 0;
  6279  003A8C  90D8               	bcf	status,0,c
  6280  003A8E  35BE               	rlcf	_i& (0+255),w,b
  6281  003A90  6ED9               	movwf	fsr2l,c
  6282  003A92  35BF               	rlcf	(_i+1)& (0+255),w,b
  6283  003A94  6EDA               	movwf	fsr2h,c
  6284  003A96  0E00               	movlw	low _W_array
  6285  003A98  26D9               	addwf	fsr2l,f,c
  6286  003A9A  0E01               	movlw	high _W_array
  6287  003A9C  22DA               	addwfc	fsr2h,f,c
  6288  003A9E  0E00               	movlw	0
  6289  003AA0  6EDE               	movwf	postinc2,c
  6290  003AA2  0E00               	movlw	0
  6291  003AA4  6EDD               	movwf	postdec2,c
  6292                           
  6293                           ; BSR set to: 0
  6294  003AA6  4BBE               	infsnz	_i& (0+255),f,b
  6295  003AA8  2BBF               	incf	(_i+1)& (0+255),f,b
  6296  003AAA  D7A9               	goto	l4564
  6297  003AAC                     l487:
  6298                           
  6299                           ; BSR set to: 0
  6300  003AAC  0012               	return		;funcret
  6301  003AAE                     __end_of_initialize:
  6302                           	opt stack 0
  6303                           tblptru	equ	0xFF8
  6304                           tblptrh	equ	0xFF7
  6305                           tblptrl	equ	0xFF6
  6306                           tablat	equ	0xFF5
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           intcon	equ	0xFF2
  6310                           intcon3	equ	0xFF0
  6311                           indf0	equ	0xFEF
  6312                           postinc0	equ	0xFEE
  6313                           fsr0h	equ	0xFEA
  6314                           fsr0l	equ	0xFE9
  6315                           wreg	equ	0xFE8
  6316                           postdec1	equ	0xFE5
  6317                           fsr1l	equ	0xFE1
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _initLCD *****************
  6325 ;; Defined at:
  6326 ;;		line 60 in file "lcd.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2, status,0, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;Total ram usage:        1 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    6
  6347 ;; This function calls:
  6348 ;;		_lcdInst
  6349 ;; This function is called by:
  6350 ;;		_main
  6351 ;;		_count_gear
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text8
  6356  004382                     __ptext8:
  6357                           	opt stack 0
  6358  004382                     _initLCD:
  6359                           	opt stack 24
  6360                           
  6361                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;incstack = 0
  6365  004382  0E9C               	movlw	156
  6366  004384  0100               	movlb	0	; () banked
  6367  004386  6FCB               	movwf	??_initLCD& (0+255),b
  6368  004388  0ED7               	movlw	215
  6369  00438A                     u5577:
  6370  00438A  2EE8               	decfsz	wreg,f,c
  6371  00438C  D7FE               	bra	u5577
  6372  00438E  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6373  004390  D7FC               	bra	u5577
  6374                           
  6375                           ;lcd.c: 69: lcdInst(0b00110011);
  6376  004392  0E33               	movlw	51
  6377  004394  EC64  F023         	call	_lcdInst
  6378                           
  6379                           ;lcd.c: 70: lcdInst(0b00110010);
  6380  004398  0E32               	movlw	50
  6381  00439A  EC64  F023         	call	_lcdInst
  6382                           
  6383                           ;lcd.c: 71: lcdInst(0b00101000);
  6384  00439E  0E28               	movlw	40
  6385  0043A0  EC64  F023         	call	_lcdInst
  6386                           
  6387                           ;lcd.c: 72: lcdInst(0b00001111);
  6388  0043A4  0E0F               	movlw	15
  6389  0043A6  EC64  F023         	call	_lcdInst
  6390                           
  6391                           ;lcd.c: 73: lcdInst(0b00000110);
  6392  0043AA  0E06               	movlw	6
  6393  0043AC  EC64  F023         	call	_lcdInst
  6394                           
  6395                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  6396  0043B0  0E01               	movlw	1
  6397  0043B2  EC64  F023         	call	_lcdInst
  6398  0043B6  0E9C               	movlw	156
  6399  0043B8  0100               	movlb	0	; () banked
  6400  0043BA  6FCB               	movwf	??_initLCD& (0+255),b
  6401  0043BC  0ED7               	movlw	215
  6402  0043BE                     u5587:
  6403  0043BE  2EE8               	decfsz	wreg,f,c
  6404  0043C0  D7FE               	bra	u5587
  6405  0043C2  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6406  0043C4  D7FC               	bra	u5587
  6407                           
  6408                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6409  0043C6  0E0F               	movlw	15
  6410  0043C8  EC64  F023         	call	_lcdInst
  6411  0043CC  0012               	return		;funcret
  6412  0043CE                     __end_of_initLCD:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           intcon3	equ	0xFF0
  6422                           indf0	equ	0xFEF
  6423                           postinc0	equ	0xFEE
  6424                           fsr0h	equ	0xFEA
  6425                           fsr0l	equ	0xFE9
  6426                           wreg	equ	0xFE8
  6427                           postdec1	equ	0xFE5
  6428                           fsr1l	equ	0xFE1
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _lcdInst *****************
  6436 ;; Defined at:
  6437 ;;		line 11 in file "lcd.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  data            1    wreg     unsigned char 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  data            1    2[BANK0 ] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:        1 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    5
  6458 ;; This function calls:
  6459 ;;		_lcdNibble
  6460 ;; This function is called by:
  6461 ;;		_initLCD
  6462 ;;		_main
  6463 ;;		_lcd_set_cursor
  6464 ;;		_lcd_shift_cursor
  6465 ;;		_lcd_shift_display
  6466 ;;		_count_gear
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text9
  6471  0046C8                     __ptext9:
  6472                           	opt stack 0
  6473  0046C8                     _lcdInst:
  6474                           	opt stack 25
  6475                           
  6476                           ;incstack = 0
  6477                           ;lcdInst@data stored from wreg
  6478  0046C8  0100               	movlb	0	; () banked
  6479  0046CA  6FCA               	movwf	lcdInst@data& (0+255),b
  6480                           
  6481                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6482  0046CC  948C               	bcf	3980,2,c	;volatile
  6483                           
  6484                           ;lcd.c: 20: lcdNibble(data);
  6485  0046CE  0100               	movlb	0	; () banked
  6486  0046D0  51CA               	movf	lcdInst@data& (0+255),w,b
  6487  0046D2  EC97  F01E         	call	_lcdNibble
  6488                           
  6489                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  6490  0046D6  0EA0               	movlw	160
  6491  0046D8                     u5597:
  6492  0046D8  D000               	nop2	
  6493  0046DA  2EE8               	decfsz	wreg,f,c
  6494  0046DC  D7FD               	bra	u5597
  6495  0046DE  0012               	return		;funcret
  6496  0046E0                     __end_of_lcdInst:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           intcon3	equ	0xFF0
  6506                           indf0	equ	0xFEF
  6507                           postinc0	equ	0xFEE
  6508                           fsr0h	equ	0xFEA
  6509                           fsr0l	equ	0xFE9
  6510                           wreg	equ	0xFE8
  6511                           postdec1	equ	0xFE5
  6512                           fsr1l	equ	0xFE1
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _lcdNibble *****************
  6520 ;; Defined at:
  6521 ;;		line 37 in file "lcd.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  data            1    wreg     unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  data            1    1[BANK0 ] unsigned char 
  6526 ;;  temp            1    0[BANK0 ] unsigned char 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        2 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    4
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_lcdInst
  6547 ;;		_putch
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text10
  6552  003D2E                     __ptext10:
  6553                           	opt stack 0
  6554  003D2E                     _lcdNibble:
  6555                           	opt stack 24
  6556                           
  6557                           ;incstack = 0
  6558                           ;lcdNibble@data stored from wreg
  6559  003D2E  0100               	movlb	0	; () banked
  6560  003D30  6FC9               	movwf	lcdNibble@data& (0+255),b
  6561                           
  6562                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  6563  003D32  0100               	movlb	0	; () banked
  6564  003D34  51C9               	movf	lcdNibble@data& (0+255),w,b
  6565  003D36  0BF0               	andlw	240
  6566  003D38  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6567                           
  6568                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  6569  003D3A  508C               	movf	3980,w,c	;volatile
  6570  003D3C  0B0F               	andlw	15
  6571  003D3E  6E8C               	movwf	3980,c	;volatile
  6572                           
  6573                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  6574  003D40  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6575  003D42  108C               	iorwf	3980,w,c	;volatile
  6576  003D44  6E8C               	movwf	3980,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6580  003D46  0E00               	movlw	0
  6581  003D48  BEF2               	btfsc	intcon,7,c	;volatile
  6582  003D4A  0E01               	movlw	1
  6583  003D4C  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6584                           
  6585                           ; BSR set to: 0
  6586  003D4E  9EF2               	bcf	intcon,7,c	;volatile
  6587                           
  6588                           ; BSR set to: 0
  6589  003D50  868C               	bsf	3980,3,c	;volatile
  6590                           
  6591                           ; BSR set to: 0
  6592  003D52  0E42               	movlw	66
  6593  003D54                     u5607:
  6594  003D54  2EE8               	decfsz	wreg,f,c
  6595  003D56  D7FE               	bra	u5607
  6596  003D58  D000               	nop2	
  6597  003D5A  968C               	bcf	3980,3,c	;volatile
  6598  003D5C  0EA0               	movlw	160
  6599  003D5E                     u5617:
  6600  003D5E  D000               	nop2	
  6601  003D60  2EE8               	decfsz	wreg,f,c
  6602  003D62  D7FD               	bra	u5617
  6603  003D64  0100               	movlb	0	; () banked
  6604  003D66  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6605  003D68  D002               	bra	u2515
  6606  003D6A  9EF2               	bcf	intcon,7,c	;volatile
  6607  003D6C  D001               	bra	u2516
  6608  003D6E                     u2515:
  6609  003D6E  8EF2               	bsf	intcon,7,c	;volatile
  6610  003D70                     u2516:
  6611                           
  6612                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  6613  003D70  0100               	movlb	0	; () banked
  6614  003D72  39C9               	swapf	lcdNibble@data& (0+255),w,b
  6615  003D74  0BF0               	andlw	240
  6616  003D76  6FC9               	movwf	lcdNibble@data& (0+255),b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  6620  003D78  51C9               	movf	lcdNibble@data& (0+255),w,b
  6621  003D7A  0BF0               	andlw	240
  6622  003D7C  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  6626  003D7E  508C               	movf	3980,w,c	;volatile
  6627  003D80  0B0F               	andlw	15
  6628  003D82  6E8C               	movwf	3980,c	;volatile
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  6632  003D84  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6633  003D86  108C               	iorwf	3980,w,c	;volatile
  6634  003D88  6E8C               	movwf	3980,c	;volatile
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6638  003D8A  0E00               	movlw	0
  6639  003D8C  BEF2               	btfsc	intcon,7,c	;volatile
  6640  003D8E  0E01               	movlw	1
  6641  003D90  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6642                           
  6643                           ; BSR set to: 0
  6644  003D92  9EF2               	bcf	intcon,7,c	;volatile
  6645                           
  6646                           ; BSR set to: 0
  6647  003D94  868C               	bsf	3980,3,c	;volatile
  6648                           
  6649                           ; BSR set to: 0
  6650  003D96  0E42               	movlw	66
  6651  003D98                     u5627:
  6652  003D98  2EE8               	decfsz	wreg,f,c
  6653  003D9A  D7FE               	bra	u5627
  6654  003D9C  D000               	nop2	
  6655  003D9E  968C               	bcf	3980,3,c	;volatile
  6656  003DA0  0EA0               	movlw	160
  6657  003DA2                     u5637:
  6658  003DA2  D000               	nop2	
  6659  003DA4  2EE8               	decfsz	wreg,f,c
  6660  003DA6  D7FD               	bra	u5637
  6661  003DA8  0100               	movlb	0	; () banked
  6662  003DAA  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6663  003DAC  D002               	bra	u2525
  6664  003DAE  9EF2               	bcf	intcon,7,c	;volatile
  6665  003DB0  D001               	bra	u2526
  6666  003DB2                     u2525:
  6667  003DB2  8EF2               	bsf	intcon,7,c	;volatile
  6668  003DB4                     u2526:
  6669  003DB4  0012               	return		;funcret
  6670  003DB6                     __end_of_lcdNibble:
  6671                           	opt stack 0
  6672                           tblptru	equ	0xFF8
  6673                           tblptrh	equ	0xFF7
  6674                           tblptrl	equ	0xFF6
  6675                           tablat	equ	0xFF5
  6676                           prodh	equ	0xFF4
  6677                           prodl	equ	0xFF3
  6678                           intcon	equ	0xFF2
  6679                           intcon3	equ	0xFF0
  6680                           indf0	equ	0xFEF
  6681                           postinc0	equ	0xFEE
  6682                           fsr0h	equ	0xFEA
  6683                           fsr0l	equ	0xFE9
  6684                           wreg	equ	0xFE8
  6685                           postdec1	equ	0xFE5
  6686                           fsr1l	equ	0xFE1
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _get_RTC_initial *****************
  6694 ;; Defined at:
  6695 ;;		line 1257 in file "main.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        1 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    6
  6716 ;; This function calls:
  6717 ;;		_I2C_Master_Read
  6718 ;;		_I2C_Master_Start
  6719 ;;		_I2C_Master_Stop
  6720 ;;		_I2C_Master_Write
  6721 ;;		___awdiv
  6722 ;;		___wmul
  6723 ;; This function is called by:
  6724 ;;		_main
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text11
  6729  003BF6                     __ptext11:
  6730                           	opt stack 0
  6731  003BF6                     _get_RTC_initial:
  6732                           	opt stack 24
  6733                           
  6734                           ;main.c: 1259: I2C_Master_Start();
  6735                           
  6736                           ;incstack = 0
  6737  003BF6  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  6738                           
  6739                           ;main.c: 1260: I2C_Master_Write(0b11010000);
  6740  003BFA  0E00               	movlw	0
  6741  003BFC  0100               	movlb	0	; () banked
  6742  003BFE  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6743  003C00  0ED0               	movlw	208
  6744  003C02  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6745  003C04  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  6746                           
  6747                           ;main.c: 1261: I2C_Master_Write(0x00);
  6748  003C08  0E00               	movlw	0
  6749  003C0A  0100               	movlb	0	; () banked
  6750  003C0C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6751  003C0E  0E00               	movlw	0
  6752  003C10  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6753  003C12  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  6754                           
  6755                           ;main.c: 1262: I2C_Master_Stop();
  6756  003C16  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  6757                           
  6758                           ;main.c: 1265: I2C_Master_Start();
  6759  003C1A  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  6760                           
  6761                           ;main.c: 1266: I2C_Master_Write(0b11010001);
  6762  003C1E  0E00               	movlw	0
  6763  003C20  0100               	movlb	0	; () banked
  6764  003C22  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6765  003C24  0ED1               	movlw	209
  6766  003C26  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6767  003C28  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  6768                           
  6769                           ;main.c: 1267: for(i = 0; i < 6; i++){
  6770  003C2C  0E00               	movlw	0
  6771  003C2E  0100               	movlb	0	; () banked
  6772  003C30  6FBF               	movwf	(_i+1)& (0+255),b
  6773  003C32  0E00               	movlw	0
  6774  003C34  6FBE               	movwf	_i& (0+255),b
  6775  003C36                     l4484:
  6776                           
  6777                           ; BSR set to: 0
  6778  003C36  51BF               	movf	(_i+1)& (0+255),w,b
  6779  003C38  E112               	bnz	l4494
  6780  003C3A  0E06               	movlw	6
  6781  003C3C  5DBE               	subwf	_i& (0+255),w,b
  6782  003C3E  B0D8               	btfsc	status,0,c
  6783  003C40  D00E               	goto	u3210
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;main.c: 1268: time[i] = I2C_Master_Read(0);
  6787                           
  6788                           ; BSR set to: 0
  6789                           
  6790                           ; BSR set to: 0
  6791  003C42  0E56               	movlw	low _time
  6792  003C44  25BE               	addwf	_i& (0+255),w,b
  6793  003C46  6ED9               	movwf	fsr2l,c
  6794  003C48  0E00               	movlw	high _time
  6795  003C4A  21BF               	addwfc	(_i+1)& (0+255),w,b
  6796  003C4C  6EDA               	movwf	fsr2h,c
  6797  003C4E  0E00               	movlw	0
  6798  003C50  ECD6  F022         	call	_I2C_Master_Read
  6799  003C54  6EDF               	movwf	indf2,c
  6800  003C56  0100               	movlb	0	; () banked
  6801  003C58  4BBE               	infsnz	_i& (0+255),f,b
  6802  003C5A  2BBF               	incf	(_i+1)& (0+255),f,b
  6803  003C5C  D7EC               	goto	l4484
  6804  003C5E                     u3210:
  6805  003C5E                     l4494:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 1269: }
  6809                           ;main.c: 1270: time[6] = I2C_Master_Read(1);
  6810  003C5E  0E01               	movlw	1
  6811  003C60  ECD6  F022         	call	_I2C_Master_Read
  6812  003C64  6E5C               	movwf	_time+6,c
  6813                           
  6814                           ;main.c: 1271: I2C_Master_Stop();
  6815  003C66  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  6816                           
  6817                           ;main.c: 1273: hr_initial = time[2]/16*10+time[2]%16;
  6818  003C6A  C058  F0D6         	movff	_time+2,??_get_RTC_initial
  6819  003C6E  0E0F               	movlw	15
  6820  003C70  0100               	movlb	0	; () banked
  6821  003C72  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6822  003C74  0E00               	movlw	0
  6823  003C76  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6824  003C78  0E10               	movlw	16
  6825  003C7A  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6826  003C7C  C058  F0C8         	movff	_time+2,___awdiv@dividend
  6827  003C80  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6828  003C82  ECDB  F01E         	call	___awdiv	;wreg free
  6829  003C86  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6830  003C8A  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6831  003C8E  0E00               	movlw	0
  6832  003C90  0100               	movlb	0	; () banked
  6833  003C92  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6834  003C94  0E0A               	movlw	10
  6835  003C96  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6836  003C98  ECEB  F022         	call	___wmul	;wreg free
  6837  003C9C  0100               	movlb	0	; () banked
  6838  003C9E  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6839  003CA0  25D0               	addwf	?___wmul& (0+255),w,b
  6840  003CA2  6F92               	movwf	_hr_initial& (0+255),b
  6841  003CA4  0E00               	movlw	0
  6842  003CA6  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6843  003CA8  6F93               	movwf	(_hr_initial+1)& (0+255),b
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;main.c: 1274: min_initial = time[1]/16*10 + time[1]%16;
  6847  003CAA  C057  F0D6         	movff	_time+1,??_get_RTC_initial
  6848  003CAE  0E0F               	movlw	15
  6849  003CB0  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6850  003CB2  0E00               	movlw	0
  6851  003CB4  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6852  003CB6  0E10               	movlw	16
  6853  003CB8  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6854  003CBA  C057  F0C8         	movff	_time+1,___awdiv@dividend
  6855  003CBE  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6856  003CC0  ECDB  F01E         	call	___awdiv	;wreg free
  6857  003CC4  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6858  003CC8  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6859  003CCC  0E00               	movlw	0
  6860  003CCE  0100               	movlb	0	; () banked
  6861  003CD0  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6862  003CD2  0E0A               	movlw	10
  6863  003CD4  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6864  003CD6  ECEB  F022         	call	___wmul	;wreg free
  6865  003CDA  0100               	movlb	0	; () banked
  6866  003CDC  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6867  003CDE  25D0               	addwf	?___wmul& (0+255),w,b
  6868  003CE0  6F90               	movwf	_min_initial& (0+255),b
  6869  003CE2  0E00               	movlw	0
  6870  003CE4  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6871  003CE6  6F91               	movwf	(_min_initial+1)& (0+255),b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;main.c: 1275: sec_initial = time[0]/16*10 +time[0]%16;
  6875  003CE8  C056  F0D6         	movff	_time,??_get_RTC_initial
  6876  003CEC  0E0F               	movlw	15
  6877  003CEE  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6878  003CF0  0E00               	movlw	0
  6879  003CF2  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6880  003CF4  0E10               	movlw	16
  6881  003CF6  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6882  003CF8  C056  F0C8         	movff	_time,___awdiv@dividend
  6883  003CFC  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6884  003CFE  ECDB  F01E         	call	___awdiv	;wreg free
  6885  003D02  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6886  003D06  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6887  003D0A  0E00               	movlw	0
  6888  003D0C  0100               	movlb	0	; () banked
  6889  003D0E  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6890  003D10  0E0A               	movlw	10
  6891  003D12  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6892  003D14  ECEB  F022         	call	___wmul	;wreg free
  6893  003D18  0100               	movlb	0	; () banked
  6894  003D1A  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6895  003D1C  25D0               	addwf	?___wmul& (0+255),w,b
  6896  003D1E  0101               	movlb	1	; () banked
  6897  003D20  6F6A               	movwf	_sec_initial& (0+255),b
  6898  003D22  0100               	movlb	0	; () banked
  6899  003D24  0E00               	movlw	0
  6900  003D26  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6901  003D28  0101               	movlb	1	; () banked
  6902  003D2A  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  6903                           
  6904                           ; BSR set to: 1
  6905  003D2C  0012               	return		;funcret
  6906  003D2E                     __end_of_get_RTC_initial:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           intcon3	equ	0xFF0
  6916                           indf0	equ	0xFEF
  6917                           postinc0	equ	0xFEE
  6918                           fsr0h	equ	0xFEA
  6919                           fsr0l	equ	0xFE9
  6920                           wreg	equ	0xFE8
  6921                           postdec1	equ	0xFE5
  6922                           fsr1l	equ	0xFE1
  6923                           indf2	equ	0xFDF
  6924                           postinc2	equ	0xFDE
  6925                           postdec2	equ	0xFDD
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _get_RTC_final *****************
  6931 ;; Defined at:
  6932 ;;		line 1278 in file "main.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    6
  6953 ;; This function calls:
  6954 ;;		_I2C_Master_Read
  6955 ;;		_I2C_Master_Start
  6956 ;;		_I2C_Master_Stop
  6957 ;;		_I2C_Master_Write
  6958 ;;		___awdiv
  6959 ;;		___wmul
  6960 ;; This function is called by:
  6961 ;;		_main
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	text12
  6966  003AAE                     __ptext12:
  6967                           	opt stack 0
  6968  003AAE                     _get_RTC_final:
  6969                           	opt stack 24
  6970                           
  6971                           ;main.c: 1279: I2C_Master_Start();
  6972                           
  6973                           ; BSR set to: 1
  6974                           ;incstack = 0
  6975  003AAE  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  6976                           
  6977                           ;main.c: 1280: I2C_Master_Write(0b11010000);
  6978  003AB2  0E00               	movlw	0
  6979  003AB4  0100               	movlb	0	; () banked
  6980  003AB6  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6981  003AB8  0ED0               	movlw	208
  6982  003ABA  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6983  003ABC  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  6984                           
  6985                           ;main.c: 1281: I2C_Master_Write(0x00);
  6986  003AC0  0E00               	movlw	0
  6987  003AC2  0100               	movlb	0	; () banked
  6988  003AC4  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6989  003AC6  0E00               	movlw	0
  6990  003AC8  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6991  003ACA  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  6992                           
  6993                           ;main.c: 1282: I2C_Master_Stop();
  6994  003ACE  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  6995                           
  6996                           ;main.c: 1285: I2C_Master_Start();
  6997  003AD2  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  6998                           
  6999                           ;main.c: 1286: I2C_Master_Write(0b11010001);
  7000  003AD6  0E00               	movlw	0
  7001  003AD8  0100               	movlb	0	; () banked
  7002  003ADA  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7003  003ADC  0ED1               	movlw	209
  7004  003ADE  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  7005  003AE0  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  7006                           
  7007                           ;main.c: 1287: for(i = 0; i < 6; i++){
  7008  003AE4  0E00               	movlw	0
  7009  003AE6  0100               	movlb	0	; () banked
  7010  003AE8  6FBF               	movwf	(_i+1)& (0+255),b
  7011  003AEA  0E00               	movlw	0
  7012  003AEC  6FBE               	movwf	_i& (0+255),b
  7013  003AEE                     l4544:
  7014                           
  7015                           ; BSR set to: 0
  7016  003AEE  51BF               	movf	(_i+1)& (0+255),w,b
  7017  003AF0  E112               	bnz	l4554
  7018  003AF2  0E06               	movlw	6
  7019  003AF4  5DBE               	subwf	_i& (0+255),w,b
  7020  003AF6  B0D8               	btfsc	status,0,c
  7021  003AF8  D00E               	goto	u3250
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;main.c: 1288: time[i] = I2C_Master_Read(0);
  7025                           
  7026                           ; BSR set to: 0
  7027                           
  7028                           ; BSR set to: 0
  7029  003AFA  0E56               	movlw	low _time
  7030  003AFC  25BE               	addwf	_i& (0+255),w,b
  7031  003AFE  6ED9               	movwf	fsr2l,c
  7032  003B00  0E00               	movlw	high _time
  7033  003B02  21BF               	addwfc	(_i+1)& (0+255),w,b
  7034  003B04  6EDA               	movwf	fsr2h,c
  7035  003B06  0E00               	movlw	0
  7036  003B08  ECD6  F022         	call	_I2C_Master_Read
  7037  003B0C  6EDF               	movwf	indf2,c
  7038  003B0E  0100               	movlb	0	; () banked
  7039  003B10  4BBE               	infsnz	_i& (0+255),f,b
  7040  003B12  2BBF               	incf	(_i+1)& (0+255),f,b
  7041  003B14  D7EC               	goto	l4544
  7042  003B16                     u3250:
  7043  003B16                     l4554:
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;main.c: 1289: }
  7047                           ;main.c: 1290: time[6] = I2C_Master_Read(1);
  7048  003B16  0E01               	movlw	1
  7049  003B18  ECD6  F022         	call	_I2C_Master_Read
  7050  003B1C  6E5C               	movwf	_time+6,c
  7051                           
  7052                           ;main.c: 1291: I2C_Master_Stop();
  7053  003B1E  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  7054                           
  7055                           ;main.c: 1293: hr_final = time[2]/16*10+time[2]%16;
  7056  003B22  C058  F0D6         	movff	_time+2,??_get_RTC_final
  7057  003B26  0E0F               	movlw	15
  7058  003B28  0100               	movlb	0	; () banked
  7059  003B2A  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7060  003B2C  0E00               	movlw	0
  7061  003B2E  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7062  003B30  0E10               	movlw	16
  7063  003B32  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7064  003B34  C058  F0C8         	movff	_time+2,___awdiv@dividend
  7065  003B38  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7066  003B3A  ECDB  F01E         	call	___awdiv	;wreg free
  7067  003B3E  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7068  003B42  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7069  003B46  0E00               	movlw	0
  7070  003B48  0100               	movlb	0	; () banked
  7071  003B4A  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7072  003B4C  0E0A               	movlw	10
  7073  003B4E  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7074  003B50  ECEB  F022         	call	___wmul	;wreg free
  7075  003B54  0100               	movlb	0	; () banked
  7076  003B56  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7077  003B58  25D0               	addwf	?___wmul& (0+255),w,b
  7078  003B5A  0101               	movlb	1	; () banked
  7079  003B5C  6F66               	movwf	_hr_final& (0+255),b
  7080  003B5E  0100               	movlb	0	; () banked
  7081  003B60  0E00               	movlw	0
  7082  003B62  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7083  003B64  0101               	movlb	1	; () banked
  7084  003B66  6F67               	movwf	(_hr_final+1)& (0+255),b
  7085                           
  7086                           ; BSR set to: 1
  7087                           ;main.c: 1294: min_final = time[1]/16*10 + time[1]%16;
  7088  003B68  C057  F0D6         	movff	_time+1,??_get_RTC_final
  7089  003B6C  0E0F               	movlw	15
  7090  003B6E  0100               	movlb	0	; () banked
  7091  003B70  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7092  003B72  0E00               	movlw	0
  7093  003B74  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7094  003B76  0E10               	movlw	16
  7095  003B78  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7096  003B7A  C057  F0C8         	movff	_time+1,___awdiv@dividend
  7097  003B7E  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7098  003B80  ECDB  F01E         	call	___awdiv	;wreg free
  7099  003B84  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7100  003B88  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7101  003B8C  0E00               	movlw	0
  7102  003B8E  0100               	movlb	0	; () banked
  7103  003B90  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7104  003B92  0E0A               	movlw	10
  7105  003B94  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7106  003B96  ECEB  F022         	call	___wmul	;wreg free
  7107  003B9A  0100               	movlb	0	; () banked
  7108  003B9C  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7109  003B9E  25D0               	addwf	?___wmul& (0+255),w,b
  7110  003BA0  0101               	movlb	1	; () banked
  7111  003BA2  6F64               	movwf	_min_final& (0+255),b
  7112  003BA4  0100               	movlb	0	; () banked
  7113  003BA6  0E00               	movlw	0
  7114  003BA8  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7115  003BAA  0101               	movlb	1	; () banked
  7116  003BAC  6F65               	movwf	(_min_final+1)& (0+255),b
  7117                           
  7118                           ; BSR set to: 1
  7119                           ;main.c: 1295: sec_final = time[0]/16*10 + time[0]%16;
  7120  003BAE  C056  F0D6         	movff	_time,??_get_RTC_final
  7121  003BB2  0E0F               	movlw	15
  7122  003BB4  0100               	movlb	0	; () banked
  7123  003BB6  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7124  003BB8  0E00               	movlw	0
  7125  003BBA  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7126  003BBC  0E10               	movlw	16
  7127  003BBE  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7128  003BC0  C056  F0C8         	movff	_time,___awdiv@dividend
  7129  003BC4  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7130  003BC6  ECDB  F01E         	call	___awdiv	;wreg free
  7131  003BCA  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7132  003BCE  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7133  003BD2  0E00               	movlw	0
  7134  003BD4  0100               	movlb	0	; () banked
  7135  003BD6  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7136  003BD8  0E0A               	movlw	10
  7137  003BDA  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7138  003BDC  ECEB  F022         	call	___wmul	;wreg free
  7139  003BE0  0100               	movlb	0	; () banked
  7140  003BE2  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7141  003BE4  25D0               	addwf	?___wmul& (0+255),w,b
  7142  003BE6  0101               	movlb	1	; () banked
  7143  003BE8  6F62               	movwf	_sec_final& (0+255),b
  7144  003BEA  0100               	movlb	0	; () banked
  7145  003BEC  0E00               	movlw	0
  7146  003BEE  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7147  003BF0  0101               	movlb	1	; () banked
  7148  003BF2  6F63               	movwf	(_sec_final+1)& (0+255),b
  7149                           
  7150                           ; BSR set to: 1
  7151  003BF4  0012               	return		;funcret
  7152  003BF6                     __end_of_get_RTC_final:
  7153                           	opt stack 0
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           intcon3	equ	0xFF0
  7162                           indf0	equ	0xFEF
  7163                           postinc0	equ	0xFEE
  7164                           fsr0h	equ	0xFEA
  7165                           fsr0l	equ	0xFE9
  7166                           wreg	equ	0xFE8
  7167                           postdec1	equ	0xFE5
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function ___wmul *****************
  7177 ;; Defined at:
  7178 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7181 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  product         2   12[BANK0 ] unsigned int 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  2    8[BANK0 ] unsigned int 
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0, prodl, prodh
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;Total ram usage:        6 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    4
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_main
  7204 ;;		_get_RTC_initial
  7205 ;;		_get_RTC_final
  7206 ;;		_printf
  7207 ;;		_store_prev
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text13
  7212  0045D6                     __ptext13:
  7213                           	opt stack 0
  7214  0045D6                     ___wmul:
  7215                           	opt stack 25
  7216                           
  7217                           ; BSR set to: 1
  7218                           ;incstack = 0
  7219  0045D6  0100               	movlb	0	; () banked
  7220  0045D8  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7221  0045DA  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7222  0045DC  CFF3 F0D4          	movff	prodl,___wmul@product
  7223  0045E0  CFF4 F0D5          	movff	prodh,___wmul@product+1
  7224  0045E4  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7225  0045E6  03D3               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7226  0045E8  50F3               	movf	prodl,w,c
  7227  0045EA  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7228  0045EC  51D1               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7229  0045EE  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7230  0045F0  50F3               	movf	prodl,w,c
  7231  0045F2  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7232                           
  7233                           ; BSR set to: 0
  7234  0045F4  C0D4  F0D0         	movff	___wmul@product,?___wmul
  7235  0045F8  C0D5  F0D1         	movff	___wmul@product+1,?___wmul+1
  7236  0045FC  0012               	return	
  7237  0045FE                     __end_of___wmul:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           intcon3	equ	0xFF0
  7247                           indf0	equ	0xFEF
  7248                           postinc0	equ	0xFEE
  7249                           fsr0h	equ	0xFEA
  7250                           fsr0l	equ	0xFE9
  7251                           wreg	equ	0xFE8
  7252                           postdec1	equ	0xFE5
  7253                           fsr1l	equ	0xFE1
  7254                           indf2	equ	0xFDF
  7255                           postinc2	equ	0xFDE
  7256                           postdec2	equ	0xFDD
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8
  7260                           
  7261 ;; *************** function ___awdiv *****************
  7262 ;; Defined at:
  7263 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  dividend        2    0[BANK0 ] int 
  7266 ;;  divisor         2    2[BANK0 ] int 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  quotient        2    6[BANK0 ] int 
  7269 ;;  sign            1    5[BANK0 ] unsigned char 
  7270 ;;  counter         1    4[BANK0 ] unsigned char 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  2    0[BANK0 ] int 
  7273 ;; Registers used:
  7274 ;;		wreg, status,2, status,0
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:        8 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    4
  7287 ;; This function calls:
  7288 ;;		Nothing
  7289 ;; This function is called by:
  7290 ;;		_get_RTC_initial
  7291 ;;		_get_RTC_final
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text14
  7296  003DB6                     __ptext14:
  7297                           	opt stack 0
  7298  003DB6                     ___awdiv:
  7299                           	opt stack 25
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;incstack = 0
  7303  003DB6  0E00               	movlw	0
  7304  003DB8  0100               	movlb	0	; () banked
  7305  003DBA  6FCD               	movwf	___awdiv@sign& (0+255),b
  7306                           
  7307                           ; BSR set to: 0
  7308  003DBC  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7309  003DBE  D006               	goto	l1083
  7310                           
  7311                           ; BSR set to: 0
  7312  003DC0  6DCA               	negf	___awdiv@divisor& (0+255),b
  7313  003DC2  1FCB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7314  003DC4  B0D8               	btfsc	status,0,c
  7315  003DC6  2BCB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7316                           
  7317                           ; BSR set to: 0
  7318  003DC8  0E01               	movlw	1
  7319  003DCA  6FCD               	movwf	___awdiv@sign& (0+255),b
  7320  003DCC                     l1083:
  7321                           
  7322                           ; BSR set to: 0
  7323                           
  7324                           ; BSR set to: 0
  7325  003DCC  AFC9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7326  003DCE  D006               	goto	l1084
  7327                           
  7328                           ; BSR set to: 0
  7329  003DD0  6DC8               	negf	___awdiv@dividend& (0+255),b
  7330  003DD2  1FC9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7331  003DD4  B0D8               	btfsc	status,0,c
  7332  003DD6  2BC9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7333                           
  7334                           ; BSR set to: 0
  7335  003DD8  0E01               	movlw	1
  7336  003DDA  1BCD               	xorwf	___awdiv@sign& (0+255),f,b
  7337  003DDC                     l1084:
  7338                           
  7339                           ; BSR set to: 0
  7340                           
  7341                           ; BSR set to: 0
  7342  003DDC  0E00               	movlw	0
  7343  003DDE  6FCF               	movwf	(___awdiv@quotient+1)& (0+255),b
  7344  003DE0  0E00               	movlw	0
  7345  003DE2  6FCE               	movwf	___awdiv@quotient& (0+255),b
  7346                           
  7347                           ; BSR set to: 0
  7348  003DE4  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7349  003DE6  11CB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7350  003DE8  B4D8               	btfsc	status,2,c
  7351  003DEA  D01C               	goto	l1091
  7352                           
  7353                           ; BSR set to: 0
  7354  003DEC  0E01               	movlw	1
  7355  003DEE  6FCC               	movwf	___awdiv@counter& (0+255),b
  7356  003DF0  D004               	goto	l1086
  7357  003DF2                     
  7358                           ; BSR set to: 0
  7359                           
  7360                           ; BSR set to: 0
  7361  003DF2  90D8               	bcf	status,0,c
  7362  003DF4  37CA               	rlcf	___awdiv@divisor& (0+255),f,b
  7363  003DF6  37CB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7364  003DF8  2BCC               	incf	___awdiv@counter& (0+255),f,b
  7365  003DFA                     l1086:
  7366                           
  7367                           ; BSR set to: 0
  7368                           
  7369                           ; BSR set to: 0
  7370  003DFA  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7371  003DFC  D7FA               	goto	l1087
  7372  003DFE                     u2650:
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ; BSR set to: 0
  7377                           
  7378                           ; BSR set to: 0
  7379  003DFE  90D8               	bcf	status,0,c
  7380  003E00  37CE               	rlcf	___awdiv@quotient& (0+255),f,b
  7381  003E02  37CF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7382                           
  7383                           ; BSR set to: 0
  7384  003E04  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7385  003E06  5DC8               	subwf	___awdiv@dividend& (0+255),w,b
  7386  003E08  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7387  003E0A  59C9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7388  003E0C  A0D8               	btfss	status,0,c
  7389  003E0E  D005               	goto	l1090
  7390                           
  7391                           ; BSR set to: 0
  7392  003E10  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7393  003E12  5FC8               	subwf	___awdiv@dividend& (0+255),f,b
  7394  003E14  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7395  003E16  5BC9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7396                           
  7397                           ; BSR set to: 0
  7398  003E18  81CE               	bsf	___awdiv@quotient& (0+255),0,b
  7399  003E1A                     l1090:
  7400                           
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404  003E1A  90D8               	bcf	status,0,c
  7405  003E1C  33CB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7406  003E1E  33CA               	rrcf	___awdiv@divisor& (0+255),f,b
  7407                           
  7408                           ; BSR set to: 0
  7409  003E20  2FCC               	decfsz	___awdiv@counter& (0+255),f,b
  7410  003E22  D7ED               	goto	u2650
  7411  003E24                     l1091:
  7412                           
  7413                           ; BSR set to: 0
  7414                           
  7415                           ; BSR set to: 0
  7416                           
  7417                           ; BSR set to: 0
  7418  003E24  51CD               	movf	___awdiv@sign& (0+255),w,b
  7419  003E26  B4D8               	btfsc	status,2,c
  7420  003E28  D004               	goto	l1092
  7421                           
  7422                           ; BSR set to: 0
  7423  003E2A  6DCE               	negf	___awdiv@quotient& (0+255),b
  7424  003E2C  1FCF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7425  003E2E  B0D8               	btfsc	status,0,c
  7426  003E30  2BCF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7427  003E32                     l1092:
  7428                           
  7429                           ; BSR set to: 0
  7430                           
  7431                           ; BSR set to: 0
  7432  003E32  C0CE  F0C8         	movff	___awdiv@quotient,?___awdiv
  7433  003E36  C0CF  F0C9         	movff	___awdiv@quotient+1,?___awdiv+1
  7434  003E3A  0012               	return	
  7435  003E3C                     __end_of___awdiv:
  7436                           	opt stack 0
  7437                           tblptru	equ	0xFF8
  7438                           tblptrh	equ	0xFF7
  7439                           tblptrl	equ	0xFF6
  7440                           tablat	equ	0xFF5
  7441                           prodh	equ	0xFF4
  7442                           prodl	equ	0xFF3
  7443                           intcon	equ	0xFF2
  7444                           intcon3	equ	0xFF0
  7445                           indf0	equ	0xFEF
  7446                           postinc0	equ	0xFEE
  7447                           fsr0h	equ	0xFEA
  7448                           fsr0l	equ	0xFE9
  7449                           wreg	equ	0xFE8
  7450                           postdec1	equ	0xFE5
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _I2C_Master_Read *****************
  7460 ;; Defined at:
  7461 ;;		line 120 in file "I2C.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;  ackBit          1    wreg     unsigned char 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  ackBit          1    1[BANK0 ] unsigned char 
  7466 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      unsigned char 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;Total ram usage:        2 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    5
  7483 ;; This function calls:
  7484 ;;		_I2C_Master_Wait
  7485 ;; This function is called by:
  7486 ;;		_main
  7487 ;;		_get_RTC_initial
  7488 ;;		_get_RTC_final
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text15
  7493  0045AC                     __ptext15:
  7494                           	opt stack 0
  7495  0045AC                     _I2C_Master_Read:
  7496                           	opt stack 24
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;incstack = 0
  7500                           ;I2C_Master_Read@ackBit stored from wreg
  7501  0045AC  0100               	movlb	0	; () banked
  7502  0045AE  6FC9               	movwf	I2C_Master_Read@ackBit& (0+255),b
  7503                           
  7504                           ;I2C.c: 130: unsigned char receivedByte;
  7505                           ;I2C.c: 132: I2C_Master_Wait();
  7506  0045B0  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  7507                           
  7508                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  7509  0045B4  86C5               	bsf	4037,3,c	;volatile
  7510                           
  7511                           ;I2C.c: 135: I2C_Master_Wait();
  7512  0045B6  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  7513                           
  7514                           ;I2C.c: 136: receivedByte = SSPBUF;
  7515  0045BA  CFC9 F0CA          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  7516                           
  7517                           ;I2C.c: 138: I2C_Master_Wait();
  7518  0045BE  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  7519                           
  7520                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  7521  0045C2  0100               	movlb	0	; () banked
  7522  0045C4  B1C9               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  7523  0045C6  D002               	bra	u2575
  7524  0045C8  9AC5               	bcf	4037,5,c	;volatile
  7525  0045CA  D001               	bra	u2576
  7526  0045CC                     u2575:
  7527  0045CC  8AC5               	bsf	4037,5,c	;volatile
  7528  0045CE                     u2576:
  7529                           
  7530                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  7531  0045CE  88C5               	bsf	4037,4,c	;volatile
  7532                           
  7533                           ;I2C.c: 142: return receivedByte;
  7534  0045D0  0100               	movlb	0	; () banked
  7535  0045D2  51CA               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  7536  0045D4  0012               	return	
  7537  0045D6                     __end_of_I2C_Master_Read:
  7538                           	opt stack 0
  7539                           tblptru	equ	0xFF8
  7540                           tblptrh	equ	0xFF7
  7541                           tblptrl	equ	0xFF6
  7542                           tablat	equ	0xFF5
  7543                           prodh	equ	0xFF4
  7544                           prodl	equ	0xFF3
  7545                           intcon	equ	0xFF2
  7546                           intcon3	equ	0xFF0
  7547                           indf0	equ	0xFEF
  7548                           postinc0	equ	0xFEE
  7549                           fsr0h	equ	0xFEA
  7550                           fsr0l	equ	0xFE9
  7551                           wreg	equ	0xFE8
  7552                           postdec1	equ	0xFE5
  7553                           fsr1l	equ	0xFE1
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _generate_compartment_array *****************
  7562 ;; Defined at:
  7563 ;;		line 220 in file "keypad.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  step            2    0[BANK0 ] int 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;		None
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      void 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;Total ram usage:        4 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    4
  7584 ;; This function calls:
  7585 ;;		Nothing
  7586 ;; This function is called by:
  7587 ;;		_main
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text16
  7592  0036FC                     __ptext16:
  7593                           	opt stack 0
  7594  0036FC                     _generate_compartment_array:
  7595                           	opt stack 26
  7596                           
  7597                           ;keypad.c: 222: switch(step){
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;incstack = 0
  7601  0036FC  D117               	goto	l780
  7602  0036FE                     
  7603                           ;keypad.c: 224: compartment_array[1] = 1;
  7604  0036FE  0E00               	movlw	0
  7605  003700  0100               	movlb	0	; () banked
  7606  003702  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7607  003704  0E01               	movlw	1
  7608  003706  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7609                           
  7610                           ;keypad.c: 225: compartment_array[3] = 1;
  7611  003708  0E00               	movlw	0
  7612  00370A  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7613  00370C  0E01               	movlw	1
  7614  00370E  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7615                           
  7616                           ;keypad.c: 226: compartment_array[5] = 1;
  7617  003710  0E00               	movlw	0
  7618  003712  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7619  003714  0E01               	movlw	1
  7620  003716  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7621                           
  7622                           ;keypad.c: 227: compartment_array[7] = 1;
  7623  003718  0E00               	movlw	0
  7624  00371A  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7625  00371C  0E01               	movlw	1
  7626  00371E  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7627                           
  7628                           ;keypad.c: 230: compartment_number[0] = 1;
  7629  003720  0E00               	movlw	0
  7630  003722  6E47               	movwf	_compartment_number+1,c
  7631  003724  0E01               	movlw	1
  7632  003726  6E46               	movwf	_compartment_number,c
  7633                           
  7634                           ;keypad.c: 231: compartment_number[1] = 3;
  7635  003728  0E00               	movlw	0
  7636  00372A  6E49               	movwf	_compartment_number+3,c
  7637  00372C  0E03               	movlw	3
  7638  00372E  6E48               	movwf	_compartment_number+2,c
  7639                           
  7640                           ;keypad.c: 232: compartment_number[2] = 5;
  7641  003730  0E00               	movlw	0
  7642  003732  6E4B               	movwf	_compartment_number+5,c
  7643  003734  0E05               	movlw	5
  7644  003736  6E4A               	movwf	_compartment_number+4,c
  7645                           
  7646                           ;keypad.c: 233: compartment_number[3] = 7;
  7647  003738  0E00               	movlw	0
  7648  00373A  6E4D               	movwf	_compartment_number+7,c
  7649  00373C  0E07               	movlw	7
  7650  00373E  6E4C               	movwf	_compartment_number+6,c
  7651                           
  7652                           ;keypad.c: 235: break;
  7653  003740  0012               	return	
  7654  003742                     
  7655                           ; BSR set to: 0
  7656                           ;keypad.c: 237: compartment_array[0] = 1;
  7657                           
  7658                           ; BSR set to: 0
  7659  003742  0E00               	movlw	0
  7660  003744  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7661  003746  0E01               	movlw	1
  7662  003748  6F80               	movwf	_compartment_array& (0+255),b
  7663                           
  7664                           ;keypad.c: 238: compartment_array[1] = 1;
  7665  00374A  0E00               	movlw	0
  7666  00374C  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7667  00374E  0E01               	movlw	1
  7668  003750  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7669                           
  7670                           ;keypad.c: 239: compartment_array[3] = 1;
  7671  003752  0E00               	movlw	0
  7672  003754  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7673  003756  0E01               	movlw	1
  7674  003758  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7675                           
  7676                           ;keypad.c: 240: compartment_array[4] = 1;
  7677  00375A  0E00               	movlw	0
  7678  00375C  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7679  00375E  0E01               	movlw	1
  7680  003760  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7681                           
  7682                           ;keypad.c: 241: compartment_array[6] = 1;
  7683  003762  0E00               	movlw	0
  7684  003764  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7685  003766  0E01               	movlw	1
  7686  003768  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7687                           
  7688                           ;keypad.c: 245: compartment_number[0] = 0;
  7689  00376A  0E00               	movlw	0
  7690  00376C  6E47               	movwf	_compartment_number+1,c
  7691  00376E  0E00               	movlw	0
  7692  003770  6E46               	movwf	_compartment_number,c
  7693                           
  7694                           ;keypad.c: 246: compartment_number[1] = 1;
  7695  003772  0E00               	movlw	0
  7696  003774  6E49               	movwf	_compartment_number+3,c
  7697  003776  0E01               	movlw	1
  7698  003778  6E48               	movwf	_compartment_number+2,c
  7699                           
  7700                           ;keypad.c: 247: compartment_number[2] = 3;
  7701  00377A  0E00               	movlw	0
  7702  00377C  6E4B               	movwf	_compartment_number+5,c
  7703  00377E  0E03               	movlw	3
  7704  003780  6E4A               	movwf	_compartment_number+4,c
  7705                           
  7706                           ;keypad.c: 248: compartment_number[3] = 4;
  7707  003782  0E00               	movlw	0
  7708  003784  6E4D               	movwf	_compartment_number+7,c
  7709  003786  0E04               	movlw	4
  7710  003788  6E4C               	movwf	_compartment_number+6,c
  7711                           
  7712                           ;keypad.c: 249: compartment_number[4] = 6;
  7713  00378A  0E00               	movlw	0
  7714  00378C  6E4F               	movwf	_compartment_number+9,c
  7715  00378E  0E06               	movlw	6
  7716  003790  6E4E               	movwf	_compartment_number+8,c
  7717                           
  7718                           ;keypad.c: 251: break;
  7719  003792  0012               	return	
  7720  003794                     
  7721                           ; BSR set to: 0
  7722                           ;keypad.c: 254: compartment_array[0] = 1;
  7723                           
  7724                           ; BSR set to: 0
  7725  003794  0E00               	movlw	0
  7726  003796  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7727  003798  0E01               	movlw	1
  7728  00379A  6F80               	movwf	_compartment_array& (0+255),b
  7729                           
  7730                           ;keypad.c: 255: compartment_array[1] = 1;
  7731  00379C  0E00               	movlw	0
  7732  00379E  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7733  0037A0  0E01               	movlw	1
  7734  0037A2  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7735                           
  7736                           ;keypad.c: 256: compartment_array[2] = 1;
  7737  0037A4  0E00               	movlw	0
  7738  0037A6  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7739  0037A8  0E01               	movlw	1
  7740  0037AA  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7741                           
  7742                           ;keypad.c: 257: compartment_array[4] = 1;
  7743  0037AC  0E00               	movlw	0
  7744  0037AE  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7745  0037B0  0E01               	movlw	1
  7746  0037B2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7747                           
  7748                           ;keypad.c: 258: compartment_array[5] = 1;
  7749  0037B4  0E00               	movlw	0
  7750  0037B6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7751  0037B8  0E01               	movlw	1
  7752  0037BA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7753                           
  7754                           ;keypad.c: 259: compartment_array[6] = 1;
  7755  0037BC  0E00               	movlw	0
  7756  0037BE  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7757  0037C0  0E01               	movlw	1
  7758  0037C2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7759                           
  7760                           ;keypad.c: 262: compartment_number[0] = 0;
  7761  0037C4  0E00               	movlw	0
  7762  0037C6  6E47               	movwf	_compartment_number+1,c
  7763  0037C8  0E00               	movlw	0
  7764  0037CA  6E46               	movwf	_compartment_number,c
  7765                           
  7766                           ;keypad.c: 263: compartment_number[1] = 1;
  7767  0037CC  0E00               	movlw	0
  7768  0037CE  6E49               	movwf	_compartment_number+3,c
  7769  0037D0  0E01               	movlw	1
  7770  0037D2  6E48               	movwf	_compartment_number+2,c
  7771                           
  7772                           ;keypad.c: 264: compartment_number[2] = 2;
  7773  0037D4  0E00               	movlw	0
  7774  0037D6  6E4B               	movwf	_compartment_number+5,c
  7775  0037D8  0E02               	movlw	2
  7776  0037DA  6E4A               	movwf	_compartment_number+4,c
  7777                           
  7778                           ;keypad.c: 265: compartment_number[3] = 4;
  7779  0037DC  0E00               	movlw	0
  7780  0037DE  6E4D               	movwf	_compartment_number+7,c
  7781  0037E0  0E04               	movlw	4
  7782  0037E2  6E4C               	movwf	_compartment_number+6,c
  7783                           
  7784                           ;keypad.c: 266: compartment_number[4] = 5;
  7785  0037E4  0E00               	movlw	0
  7786  0037E6  6E4F               	movwf	_compartment_number+9,c
  7787  0037E8  0E05               	movlw	5
  7788  0037EA  6E4E               	movwf	_compartment_number+8,c
  7789                           
  7790                           ;keypad.c: 267: compartment_number[5] = 6;
  7791  0037EC  0E00               	movlw	0
  7792  0037EE  6E51               	movwf	_compartment_number+11,c
  7793  0037F0  0E06               	movlw	6
  7794  0037F2  6E50               	movwf	_compartment_number+10,c
  7795                           
  7796                           ;keypad.c: 269: break;
  7797  0037F4  0012               	return	
  7798  0037F6                     
  7799                           ; BSR set to: 0
  7800                           ;keypad.c: 271: compartment_array[0] = 1;
  7801                           
  7802                           ; BSR set to: 0
  7803  0037F6  0E00               	movlw	0
  7804  0037F8  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7805  0037FA  0E01               	movlw	1
  7806  0037FC  6F80               	movwf	_compartment_array& (0+255),b
  7807                           
  7808                           ;keypad.c: 272: compartment_array[1] = 1;
  7809  0037FE  0E00               	movlw	0
  7810  003800  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7811  003802  0E01               	movlw	1
  7812  003804  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7813                           
  7814                           ;keypad.c: 273: compartment_array[2] = 1;
  7815  003806  0E00               	movlw	0
  7816  003808  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7817  00380A  0E01               	movlw	1
  7818  00380C  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7819                           
  7820                           ;keypad.c: 274: compartment_array[3] = 1;
  7821  00380E  0E00               	movlw	0
  7822  003810  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7823  003812  0E01               	movlw	1
  7824  003814  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7825                           
  7826                           ;keypad.c: 275: compartment_array[4] = 1;
  7827  003816  0E00               	movlw	0
  7828  003818  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7829  00381A  0E01               	movlw	1
  7830  00381C  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7831                           
  7832                           ;keypad.c: 276: compartment_array[5] = 1;
  7833  00381E  0E00               	movlw	0
  7834  003820  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7835  003822  0E01               	movlw	1
  7836  003824  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7837                           
  7838                           ;keypad.c: 277: compartment_array[6] = 1;
  7839  003826  0E00               	movlw	0
  7840  003828  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7841  00382A  0E01               	movlw	1
  7842  00382C  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7843                           
  7844                           ;keypad.c: 280: compartment_number[0] = 0;
  7845  00382E  0E00               	movlw	0
  7846  003830  6E47               	movwf	_compartment_number+1,c
  7847  003832  0E00               	movlw	0
  7848  003834  6E46               	movwf	_compartment_number,c
  7849                           
  7850                           ;keypad.c: 281: compartment_number[1] = 1;
  7851  003836  0E00               	movlw	0
  7852  003838  6E49               	movwf	_compartment_number+3,c
  7853  00383A  0E01               	movlw	1
  7854  00383C  6E48               	movwf	_compartment_number+2,c
  7855                           
  7856                           ;keypad.c: 282: compartment_number[2] = 2;
  7857  00383E  0E00               	movlw	0
  7858  003840  6E4B               	movwf	_compartment_number+5,c
  7859  003842  0E02               	movlw	2
  7860  003844  6E4A               	movwf	_compartment_number+4,c
  7861                           
  7862                           ;keypad.c: 283: compartment_number[3] = 3;
  7863  003846  0E00               	movlw	0
  7864  003848  6E4D               	movwf	_compartment_number+7,c
  7865  00384A  0E03               	movlw	3
  7866  00384C  6E4C               	movwf	_compartment_number+6,c
  7867                           
  7868                           ;keypad.c: 284: compartment_number[4] = 4;
  7869  00384E  0E00               	movlw	0
  7870  003850  6E4F               	movwf	_compartment_number+9,c
  7871  003852  0E04               	movlw	4
  7872  003854  6E4E               	movwf	_compartment_number+8,c
  7873                           
  7874                           ;keypad.c: 285: compartment_number[5] = 5;
  7875  003856  0E00               	movlw	0
  7876  003858  6E51               	movwf	_compartment_number+11,c
  7877  00385A  0E05               	movlw	5
  7878  00385C  6E50               	movwf	_compartment_number+10,c
  7879                           
  7880                           ;keypad.c: 286: compartment_number[6] = 6;
  7881  00385E  0E00               	movlw	0
  7882  003860  6E53               	movwf	_compartment_number+13,c
  7883  003862  0E06               	movlw	6
  7884  003864  6E52               	movwf	_compartment_number+12,c
  7885                           
  7886                           ;keypad.c: 288: break;
  7887  003866  0012               	return	
  7888  003868                     
  7889                           ; BSR set to: 0
  7890                           ;keypad.c: 290: compartment_array[0] = 1;
  7891                           
  7892                           ; BSR set to: 0
  7893  003868  0E00               	movlw	0
  7894  00386A  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7895  00386C  0E01               	movlw	1
  7896  00386E  6F80               	movwf	_compartment_array& (0+255),b
  7897                           
  7898                           ;keypad.c: 291: compartment_array[1] = 1;
  7899  003870  0E00               	movlw	0
  7900  003872  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7901  003874  0E01               	movlw	1
  7902  003876  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7903                           
  7904                           ;keypad.c: 292: compartment_array[2] = 1;
  7905  003878  0E00               	movlw	0
  7906  00387A  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7907  00387C  0E01               	movlw	1
  7908  00387E  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7909                           
  7910                           ;keypad.c: 293: compartment_array[3] = 1;
  7911  003880  0E00               	movlw	0
  7912  003882  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7913  003884  0E01               	movlw	1
  7914  003886  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7915                           
  7916                           ;keypad.c: 294: compartment_array[4] = 1;
  7917  003888  0E00               	movlw	0
  7918  00388A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7919  00388C  0E01               	movlw	1
  7920  00388E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7921                           
  7922                           ;keypad.c: 295: compartment_array[5] = 1;
  7923  003890  0E00               	movlw	0
  7924  003892  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7925  003894  0E01               	movlw	1
  7926  003896  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7927                           
  7928                           ;keypad.c: 296: compartment_array[6] = 1;
  7929  003898  0E00               	movlw	0
  7930  00389A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7931  00389C  0E01               	movlw	1
  7932  00389E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7933                           
  7934                           ;keypad.c: 297: compartment_array[7] = 1;
  7935  0038A0  0E00               	movlw	0
  7936  0038A2  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7937  0038A4  0E01               	movlw	1
  7938  0038A6  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7939                           
  7940                           ;keypad.c: 300: compartment_number[0] = 0;
  7941  0038A8  0E00               	movlw	0
  7942  0038AA  6E47               	movwf	_compartment_number+1,c
  7943  0038AC  0E00               	movlw	0
  7944  0038AE  6E46               	movwf	_compartment_number,c
  7945                           
  7946                           ;keypad.c: 301: compartment_number[1] = 1;
  7947  0038B0  0E00               	movlw	0
  7948  0038B2  6E49               	movwf	_compartment_number+3,c
  7949  0038B4  0E01               	movlw	1
  7950  0038B6  6E48               	movwf	_compartment_number+2,c
  7951                           
  7952                           ;keypad.c: 302: compartment_number[2] = 2;
  7953  0038B8  0E00               	movlw	0
  7954  0038BA  6E4B               	movwf	_compartment_number+5,c
  7955  0038BC  0E02               	movlw	2
  7956  0038BE  6E4A               	movwf	_compartment_number+4,c
  7957                           
  7958                           ;keypad.c: 303: compartment_number[3] = 3;
  7959  0038C0  0E00               	movlw	0
  7960  0038C2  6E4D               	movwf	_compartment_number+7,c
  7961  0038C4  0E03               	movlw	3
  7962  0038C6  6E4C               	movwf	_compartment_number+6,c
  7963                           
  7964                           ;keypad.c: 304: compartment_number[4] = 4;
  7965  0038C8  0E00               	movlw	0
  7966  0038CA  6E4F               	movwf	_compartment_number+9,c
  7967  0038CC  0E04               	movlw	4
  7968  0038CE  6E4E               	movwf	_compartment_number+8,c
  7969                           
  7970                           ;keypad.c: 305: compartment_number[5] = 5;
  7971  0038D0  0E00               	movlw	0
  7972  0038D2  6E51               	movwf	_compartment_number+11,c
  7973  0038D4  0E05               	movlw	5
  7974  0038D6  6E50               	movwf	_compartment_number+10,c
  7975                           
  7976                           ;keypad.c: 306: compartment_number[6] = 6;
  7977  0038D8  0E00               	movlw	0
  7978  0038DA  6E53               	movwf	_compartment_number+13,c
  7979  0038DC  0E06               	movlw	6
  7980  0038DE  6E52               	movwf	_compartment_number+12,c
  7981                           
  7982                           ;keypad.c: 307: compartment_number[7] = 7;
  7983  0038E0  0E00               	movlw	0
  7984  0038E2  6E55               	movwf	_compartment_number+15,c
  7985  0038E4  0E07               	movlw	7
  7986  0038E6  6E54               	movwf	_compartment_number+14,c
  7987                           
  7988                           ;keypad.c: 309: break;
  7989  0038E8  0012               	return	
  7990  0038EA                     
  7991                           ; BSR set to: 0
  7992                           ;keypad.c: 311: compartment_array[0] = 0;
  7993                           
  7994                           ; BSR set to: 0
  7995  0038EA  0E00               	movlw	0
  7996  0038EC  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7997  0038EE  0E00               	movlw	0
  7998  0038F0  6F80               	movwf	_compartment_array& (0+255),b
  7999                           
  8000                           ;keypad.c: 312: compartment_array[1] = 0;
  8001  0038F2  0E00               	movlw	0
  8002  0038F4  6F83               	movwf	(_compartment_array+3)& (0+255),b
  8003  0038F6  0E00               	movlw	0
  8004  0038F8  6F82               	movwf	(_compartment_array+2)& (0+255),b
  8005                           
  8006                           ;keypad.c: 313: compartment_array[2] = 0;
  8007  0038FA  0E00               	movlw	0
  8008  0038FC  6F85               	movwf	(_compartment_array+5)& (0+255),b
  8009  0038FE  0E00               	movlw	0
  8010  003900  6F84               	movwf	(_compartment_array+4)& (0+255),b
  8011                           
  8012                           ;keypad.c: 314: compartment_array[3] = 0;
  8013  003902  0E00               	movlw	0
  8014  003904  6F87               	movwf	(_compartment_array+7)& (0+255),b
  8015  003906  0E00               	movlw	0
  8016  003908  6F86               	movwf	(_compartment_array+6)& (0+255),b
  8017                           
  8018                           ;keypad.c: 315: compartment_array[4] = 0;
  8019  00390A  0E00               	movlw	0
  8020  00390C  6F89               	movwf	(_compartment_array+9)& (0+255),b
  8021  00390E  0E00               	movlw	0
  8022  003910  6F88               	movwf	(_compartment_array+8)& (0+255),b
  8023                           
  8024                           ;keypad.c: 316: compartment_array[5] = 0;
  8025  003912  0E00               	movlw	0
  8026  003914  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  8027  003916  0E00               	movlw	0
  8028  003918  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  8029                           
  8030                           ;keypad.c: 317: compartment_array[6] = 0;
  8031  00391A  0E00               	movlw	0
  8032  00391C  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  8033  00391E  0E00               	movlw	0
  8034  003920  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  8035                           
  8036                           ;keypad.c: 318: compartment_array[7] = 0;
  8037  003922  0E00               	movlw	0
  8038  003924  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  8039  003926  0E00               	movlw	0
  8040  003928  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  8041                           
  8042                           ;keypad.c: 320: }
  8043  00392A  0012               	return	
  8044  00392C                     l780:
  8045                           
  8046                           ; BSR set to: 0
  8047  00392C  C0C8  F0CA         	movff	generate_compartment_array@step,??_generate_compartment_array
  8048  003930  C0C9  F0CB         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  8049                           
  8050                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8051                           ; Switch size 1, requested type "space"
  8052                           ; Number of cases is 1, Range of values is 0 to 0
  8053                           ; switch strategies available:
  8054                           ; Name         Instructions Cycles
  8055                           ; simple_byte            4     3 (average)
  8056                           ;	Chosen strategy is simple_byte
  8057  003934  0100               	movlb	0	; () banked
  8058  003936  51CB               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  8059  003938  0A00               	xorlw	0	; case 0
  8060  00393A  A4D8               	btfss	status,2,c
  8061  00393C  D7D6               	goto	l787
  8062                           
  8063                           ; BSR set to: 0
  8064                           ; Switch size 1, requested type "space"
  8065                           ; Number of cases is 5, Range of values is 4 to 8
  8066                           ; switch strategies available:
  8067                           ; Name         Instructions Cycles
  8068                           ; simple_byte           16     9 (average)
  8069                           ;	Chosen strategy is simple_byte
  8070  00393E  51CA               	movf	??_generate_compartment_array& (0+255),w,b
  8071  003940  0A04               	xorlw	4	; case 4
  8072  003942  B4D8               	btfsc	status,2,c
  8073  003944  D6DC               	goto	l781
  8074  003946  0A01               	xorlw	1	; case 5
  8075  003948  B4D8               	btfsc	status,2,c
  8076  00394A  D6FB               	goto	l783
  8077  00394C  0A03               	xorlw	3	; case 6
  8078  00394E  B4D8               	btfsc	status,2,c
  8079  003950  D721               	goto	l784
  8080  003952  0A01               	xorlw	1	; case 7
  8081  003954  B4D8               	btfsc	status,2,c
  8082  003956  D74F               	goto	l785
  8083  003958  0A0F               	xorlw	15	; case 8
  8084  00395A  B4D8               	btfsc	status,2,c
  8085  00395C  D785               	goto	l786
  8086  00395E  D7C5               	goto	l787
  8087  003960                     __end_of_generate_compartment_array:
  8088                           	opt stack 0
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon3	equ	0xFF0
  8097                           indf0	equ	0xFEF
  8098                           postinc0	equ	0xFEE
  8099                           fsr0h	equ	0xFEA
  8100                           fsr0l	equ	0xFE9
  8101                           wreg	equ	0xFE8
  8102                           postdec1	equ	0xFE5
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _I2C_sendData *****************
  8112 ;; Defined at:
  8113 ;;		line 1301 in file "main.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  char_data       1    wreg     unsigned char 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  char_data       1    3[BANK0 ] unsigned char 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;Total ram usage:        1 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    6
  8134 ;; This function calls:
  8135 ;;		_I2C_Master_Start
  8136 ;;		_I2C_Master_Stop
  8137 ;;		_I2C_Master_Write
  8138 ;; This function is called by:
  8139 ;;		_main
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           	psect	text17
  8144  0045FE                     __ptext17:
  8145                           	opt stack 0
  8146  0045FE                     _I2C_sendData:
  8147                           	opt stack 24
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;incstack = 0
  8151                           ;I2C_sendData@char_data stored from wreg
  8152  0045FE  0100               	movlb	0	; () banked
  8153  004600  6FCB               	movwf	I2C_sendData@char_data& (0+255),b
  8154                           
  8155                           ;main.c: 1302: I2C_Master_Start();
  8156  004602  ECB2  F023         	call	_I2C_Master_Start	;wreg free
  8157                           
  8158                           ;main.c: 1303: I2C_Master_Write(0b00010000);
  8159  004606  0E00               	movlw	0
  8160  004608  0100               	movlb	0	; () banked
  8161  00460A  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8162  00460C  0E10               	movlw	16
  8163  00460E  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  8164  004610  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  8165                           
  8166                           ;main.c: 1304: I2C_Master_Write(char_data);
  8167  004614  C0CB  F0C9         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  8168  004618  0100               	movlb	0	; () banked
  8169  00461A  6BCA               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8170  00461C  ECA4  F023         	call	_I2C_Master_Write	;wreg free
  8171                           
  8172                           ;main.c: 1305: I2C_Master_Stop();
  8173  004620  ECAE  F023         	call	_I2C_Master_Stop	;wreg free
  8174  004624  0012               	return		;funcret
  8175  004626                     __end_of_I2C_sendData:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon3	equ	0xFF0
  8185                           indf0	equ	0xFEF
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           postdec1	equ	0xFE5
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _I2C_Master_Write *****************
  8200 ;; Defined at:
  8201 ;;		line 108 in file "I2C.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:        2 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    5
  8222 ;; This function calls:
  8223 ;;		_I2C_Master_Wait
  8224 ;; This function is called by:
  8225 ;;		_main
  8226 ;;		_get_RTC_initial
  8227 ;;		_get_RTC_final
  8228 ;;		_I2C_sendData
  8229 ;;		_initRamp
  8230 ;;		_ramp_Rotate
  8231 ;;		_RTC_setTime
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text18
  8236  004748                     __ptext18:
  8237                           	opt stack 0
  8238  004748                     _I2C_Master_Write:
  8239                           	opt stack 24
  8240                           
  8241                           ;I2C.c: 116: I2C_Master_Wait();
  8242                           
  8243                           ;incstack = 0
  8244  004748  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  8245                           
  8246                           ;I2C.c: 117: SSPBUF = byteToWrite;
  8247  00474C  C0C9  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  8248  004750  0012               	return		;funcret
  8249  004752                     __end_of_I2C_Master_Write:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon3	equ	0xFF0
  8259                           indf0	equ	0xFEF
  8260                           postinc0	equ	0xFEE
  8261                           fsr0h	equ	0xFEA
  8262                           fsr0l	equ	0xFE9
  8263                           wreg	equ	0xFE8
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _I2C_Master_Stop *****************
  8274 ;; Defined at:
  8275 ;;		line 95 in file "I2C.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;		None
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;		None
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, status,2, status,0, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;Total ram usage:        0 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    5
  8296 ;; This function calls:
  8297 ;;		_I2C_Master_Wait
  8298 ;; This function is called by:
  8299 ;;		_main
  8300 ;;		_get_RTC_initial
  8301 ;;		_get_RTC_final
  8302 ;;		_I2C_sendData
  8303 ;;		_initRamp
  8304 ;;		_ramp_Rotate
  8305 ;;		_RTC_setTime
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	text19
  8310  00475C                     __ptext19:
  8311                           	opt stack 0
  8312  00475C                     _I2C_Master_Stop:
  8313                           	opt stack 24
  8314                           
  8315                           ;I2C.c: 104: I2C_Master_Wait();
  8316                           
  8317                           ;incstack = 0
  8318  00475C  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  8319                           
  8320                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  8321  004760  84C5               	bsf	4037,2,c	;volatile
  8322  004762  0012               	return		;funcret
  8323  004764                     __end_of_I2C_Master_Stop:
  8324                           	opt stack 0
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           prodh	equ	0xFF4
  8330                           prodl	equ	0xFF3
  8331                           intcon	equ	0xFF2
  8332                           intcon3	equ	0xFF0
  8333                           indf0	equ	0xFEF
  8334                           postinc0	equ	0xFEE
  8335                           fsr0h	equ	0xFEA
  8336                           fsr0l	equ	0xFE9
  8337                           wreg	equ	0xFE8
  8338                           postdec1	equ	0xFE5
  8339                           fsr1l	equ	0xFE1
  8340                           indf2	equ	0xFDF
  8341                           postinc2	equ	0xFDE
  8342                           postdec2	equ	0xFDD
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8
  8346                           
  8347 ;; *************** function _I2C_Master_Start *****************
  8348 ;; Defined at:
  8349 ;;		line 69 in file "I2C.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;		None
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;		None
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;Total ram usage:        0 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    5
  8370 ;; This function calls:
  8371 ;;		_I2C_Master_Wait
  8372 ;; This function is called by:
  8373 ;;		_main
  8374 ;;		_get_RTC_initial
  8375 ;;		_get_RTC_final
  8376 ;;		_I2C_sendData
  8377 ;;		_initRamp
  8378 ;;		_ramp_Rotate
  8379 ;;		_RTC_setTime
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text20
  8384  004764                     __ptext20:
  8385                           	opt stack 0
  8386  004764                     _I2C_Master_Start:
  8387                           	opt stack 24
  8388                           
  8389                           ;I2C.c: 78: I2C_Master_Wait();
  8390                           
  8391                           ;incstack = 0
  8392  004764  EC70  F023         	call	_I2C_Master_Wait	;wreg free
  8393                           
  8394                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  8395  004768  80C5               	bsf	4037,0,c	;volatile
  8396  00476A  0012               	return		;funcret
  8397  00476C                     __end_of_I2C_Master_Start:
  8398                           	opt stack 0
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           intcon	equ	0xFF2
  8406                           intcon3	equ	0xFF0
  8407                           indf0	equ	0xFEF
  8408                           postinc0	equ	0xFEE
  8409                           fsr0h	equ	0xFEA
  8410                           fsr0l	equ	0xFE9
  8411                           wreg	equ	0xFE8
  8412                           postdec1	equ	0xFE5
  8413                           fsr1l	equ	0xFE1
  8414                           indf2	equ	0xFDF
  8415                           postinc2	equ	0xFDE
  8416                           postdec2	equ	0xFDD
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _I2C_Master_Wait *****************
  8422 ;; Defined at:
  8423 ;;		line 51 in file "I2C.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:        1 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    4
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_I2C_Master_Start
  8448 ;;		_I2C_Master_Stop
  8449 ;;		_I2C_Master_Write
  8450 ;;		_I2C_Master_Read
  8451 ;;		_I2C_Master_RepeatedStart
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text21
  8456  0046E0                     __ptext21:
  8457                           	opt stack 0
  8458  0046E0                     _I2C_Master_Wait:
  8459                           	opt stack 24
  8460                           
  8461                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  8462                           
  8463                           ;incstack = 0
  8464  0046E0  B4C7               	btfsc	4039,2,c	;volatile
  8465  0046E2  D7FE               	goto	_I2C_Master_Wait
  8466  0046E4  CFC5 F0C8          	movff	4037,??_I2C_Master_Wait	;volatile
  8467  0046E8  0E1F               	movlw	31
  8468  0046EA  0100               	movlb	0	; () banked
  8469  0046EC  17C8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8470  0046EE  B4D8               	btfsc	status,2,c
  8471  0046F0  0012               	return	
  8472  0046F2  D7F6               	goto	_I2C_Master_Wait
  8473  0046F4                     __end_of_I2C_Master_Wait:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon3	equ	0xFF0
  8483                           indf0	equ	0xFEF
  8484                           postinc0	equ	0xFEE
  8485                           fsr0h	equ	0xFEA
  8486                           fsr0l	equ	0xFE9
  8487                           wreg	equ	0xFE8
  8488                           postdec1	equ	0xFE5
  8489                           fsr1l	equ	0xFE1
  8490                           indf2	equ	0xFDF
  8491                           postinc2	equ	0xFDE
  8492                           postdec2	equ	0xFDD
  8493                           fsr2h	equ	0xFDA
  8494                           fsr2l	equ	0xFD9
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function _I2C_Master_Init *****************
  8498 ;; Defined at:
  8499 ;;		line 14 in file "I2C.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;Total ram usage:        8 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    5
  8520 ;; This function calls:
  8521 ;;		___lldiv
  8522 ;; This function is called by:
  8523 ;;		_main
  8524 ;;		_initRamp
  8525 ;;		_ramp_Rotate
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text22
  8530  004220                     __ptext22:
  8531                           	opt stack 0
  8532  004220                     _I2C_Master_Init:
  8533                           	opt stack 25
  8534                           
  8535                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;incstack = 0
  8539  004220  9AC6               	bcf	4038,5,c	;volatile
  8540                           
  8541                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  8542  004222  8694               	bsf	3988,3,c	;volatile
  8543                           
  8544                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  8545  004224  8894               	bsf	3988,4,c	;volatile
  8546                           
  8547                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  8548  004226  0E80               	movlw	128
  8549  004228  6EC7               	movwf	4039,c	;volatile
  8550                           
  8551                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  8552  00422A  0E28               	movlw	40
  8553  00422C  6EC6               	movwf	4038,c	;volatile
  8554                           
  8555                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  8556  00422E  0E00               	movlw	0
  8557  004230  6EC5               	movwf	4037,c	;volatile
  8558                           
  8559                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
  8560  004232  0E00               	movlw	0
  8561  004234  0100               	movlb	0	; () banked
  8562  004236  6FC8               	movwf	___lldiv@dividend& (0+255),b
  8563  004238  0E48               	movlw	72
  8564  00423A  6FC9               	movwf	(___lldiv@dividend+1)& (0+255),b
  8565  00423C  0EE8               	movlw	232
  8566  00423E  6FCA               	movwf	(___lldiv@dividend+2)& (0+255),b
  8567  004240  0E01               	movlw	1
  8568  004242  6FCB               	movwf	(___lldiv@dividend+3)& (0+255),b
  8569  004244  C0D5  F0D9         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  8570  004248  C0D6  F0DA         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  8571  00424C  C0D7  F0DB         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  8572  004250  C0D8  F0DC         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  8573  004254  0E02               	movlw	2
  8574  004256                     u3225:
  8575  004256  90D8               	bcf	status,0,c
  8576  004258  37D9               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8577  00425A  37DA               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8578  00425C  37DB               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8579  00425E  37DC               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8580  004260  2EE8               	decfsz	wreg,f,c
  8581  004262  D7F9               	goto	u3225
  8582  004264  C0D9  F0CC         	movff	??_I2C_Master_Init,___lldiv@divisor
  8583  004268  C0DA  F0CD         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8584  00426C  C0DB  F0CE         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8585  004270  C0DC  F0CF         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8586  004274  ECA4  F01F         	call	___lldiv	;wreg free
  8587  004278  0100               	movlb	0	; () banked
  8588  00427A  05C8               	decf	?___lldiv& (0+255),w,b
  8589  00427C  6EC8               	movwf	4040,c	;volatile
  8590                           
  8591                           ; BSR set to: 0
  8592  00427E  0012               	return		;funcret
  8593  004280                     __end_of_I2C_Master_Init:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           prodh	equ	0xFF4
  8600                           prodl	equ	0xFF3
  8601                           intcon	equ	0xFF2
  8602                           intcon3	equ	0xFF0
  8603                           indf0	equ	0xFEF
  8604                           postinc0	equ	0xFEE
  8605                           fsr0h	equ	0xFEA
  8606                           fsr0l	equ	0xFE9
  8607                           wreg	equ	0xFE8
  8608                           postdec1	equ	0xFE5
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function ___lldiv *****************
  8618 ;; Defined at:
  8619 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  dividend        4    0[BANK0 ] unsigned long 
  8622 ;;  divisor         4    4[BANK0 ] unsigned long 
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;  quotient        4    8[BANK0 ] unsigned long 
  8625 ;;  counter         1   12[BANK0 ] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  4    0[BANK0 ] unsigned long 
  8628 ;; Registers used:
  8629 ;;		wreg, status,2, status,0
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8635 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;Total ram usage:       13 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    4
  8642 ;; This function calls:
  8643 ;;		Nothing
  8644 ;; This function is called by:
  8645 ;;		_I2C_Master_Init
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text23
  8650  003F48                     __ptext23:
  8651                           	opt stack 0
  8652  003F48                     ___lldiv:
  8653                           	opt stack 25
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;incstack = 0
  8657  003F48  0E00               	movlw	0
  8658  003F4A  0100               	movlb	0	; () banked
  8659  003F4C  6FD0               	movwf	___lldiv@quotient& (0+255),b
  8660  003F4E  0E00               	movlw	0
  8661  003F50  6FD1               	movwf	(___lldiv@quotient+1)& (0+255),b
  8662  003F52  0E00               	movlw	0
  8663  003F54  6FD2               	movwf	(___lldiv@quotient+2)& (0+255),b
  8664  003F56  0E00               	movlw	0
  8665  003F58  6FD3               	movwf	(___lldiv@quotient+3)& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  003F5A  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8669  003F5C  11CD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8670  003F5E  11CE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8671  003F60  11CF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8672  003F62  B4D8               	btfsc	status,2,c
  8673  003F64  D02A               	goto	l1276
  8674                           
  8675                           ; BSR set to: 0
  8676  003F66  0E01               	movlw	1
  8677  003F68  6FD4               	movwf	___lldiv@counter& (0+255),b
  8678  003F6A  D006               	goto	l1271
  8679  003F6C                     
  8680                           ; BSR set to: 0
  8681                           
  8682                           ; BSR set to: 0
  8683  003F6C  90D8               	bcf	status,0,c
  8684  003F6E  37CC               	rlcf	___lldiv@divisor& (0+255),f,b
  8685  003F70  37CD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8686  003F72  37CE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8687  003F74  37CF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8688  003F76  2BD4               	incf	___lldiv@counter& (0+255),f,b
  8689  003F78                     l1271:
  8690                           
  8691                           ; BSR set to: 0
  8692                           
  8693                           ; BSR set to: 0
  8694  003F78  AFCF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8695  003F7A  D7F8               	goto	l1272
  8696  003F7C                     u2690:
  8697                           
  8698                           ; BSR set to: 0
  8699                           
  8700                           ; BSR set to: 0
  8701                           
  8702                           ; BSR set to: 0
  8703  003F7C  90D8               	bcf	status,0,c
  8704  003F7E  37D0               	rlcf	___lldiv@quotient& (0+255),f,b
  8705  003F80  37D1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8706  003F82  37D2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8707  003F84  37D3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8708                           
  8709                           ; BSR set to: 0
  8710  003F86  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8711  003F88  5DC8               	subwf	___lldiv@dividend& (0+255),w,b
  8712  003F8A  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8713  003F8C  59C9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8714  003F8E  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8715  003F90  59CA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8716  003F92  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8717  003F94  59CB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8718  003F96  A0D8               	btfss	status,0,c
  8719  003F98  D009               	goto	l1275
  8720                           
  8721                           ; BSR set to: 0
  8722  003F9A  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8723  003F9C  5FC8               	subwf	___lldiv@dividend& (0+255),f,b
  8724  003F9E  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8725  003FA0  5BC9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8726  003FA2  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8727  003FA4  5BCA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8728  003FA6  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8729  003FA8  5BCB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8730                           
  8731                           ; BSR set to: 0
  8732  003FAA  81D0               	bsf	___lldiv@quotient& (0+255),0,b
  8733  003FAC                     l1275:
  8734                           
  8735                           ; BSR set to: 0
  8736                           
  8737                           ; BSR set to: 0
  8738  003FAC  90D8               	bcf	status,0,c
  8739  003FAE  33CF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8740  003FB0  33CE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8741  003FB2  33CD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8742  003FB4  33CC               	rrcf	___lldiv@divisor& (0+255),f,b
  8743                           
  8744                           ; BSR set to: 0
  8745  003FB6  2FD4               	decfsz	___lldiv@counter& (0+255),f,b
  8746  003FB8  D7E1               	goto	u2690
  8747  003FBA                     l1276:
  8748                           
  8749                           ; BSR set to: 0
  8750                           
  8751                           ; BSR set to: 0
  8752  003FBA  C0D0  F0C8         	movff	___lldiv@quotient,?___lldiv
  8753  003FBE  C0D1  F0C9         	movff	___lldiv@quotient+1,?___lldiv+1
  8754  003FC2  C0D2  F0CA         	movff	___lldiv@quotient+2,?___lldiv+2
  8755  003FC6  C0D3  F0CB         	movff	___lldiv@quotient+3,?___lldiv+3
  8756                           
  8757                           ; BSR set to: 0
  8758  003FCA  0012               	return		;funcret
  8759  003FCC                     __end_of___lldiv:
  8760                           	opt stack 0
  8761                           tblptru	equ	0xFF8
  8762                           tblptrh	equ	0xFF7
  8763                           tblptrl	equ	0xFF6
  8764                           tablat	equ	0xFF5
  8765                           prodh	equ	0xFF4
  8766                           prodl	equ	0xFF3
  8767                           intcon	equ	0xFF2
  8768                           intcon3	equ	0xFF0
  8769                           indf0	equ	0xFEF
  8770                           postinc0	equ	0xFEE
  8771                           fsr0h	equ	0xFEA
  8772                           fsr0l	equ	0xFE9
  8773                           wreg	equ	0xFE8
  8774                           postdec1	equ	0xFE5
  8775                           fsr1l	equ	0xFE1
  8776                           indf2	equ	0xFDF
  8777                           postinc2	equ	0xFDE
  8778                           postdec2	equ	0xFDD
  8779                           fsr2h	equ	0xFDA
  8780                           fsr2l	equ	0xFD9
  8781                           status	equ	0xFD8
  8782                           
  8783 ;; *************** function _interruptHandler *****************
  8784 ;; Defined at:
  8785 ;;		line 633 in file "main.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  i               2   65[COMRAM] int 
  8790 ;;  temp            1   68[COMRAM] unsigned char 
  8791 ;;  keypress        1   67[COMRAM] unsigned char 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      void 
  8794 ;; Registers used:
  8795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;Total ram usage:       27 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    3
  8808 ;; This function calls:
  8809 ;;		___awmod
  8810 ;;		_check
  8811 ;;		_is_valid
  8812 ;;		_strcat
  8813 ;;		_strcpy
  8814 ;;		_strncmp
  8815 ;;		i2_I2C_Master_Init
  8816 ;;		i2_I2C_Master_Read
  8817 ;;		i2_I2C_Master_Start
  8818 ;;		i2_I2C_Master_Stop
  8819 ;;		i2_I2C_Master_Write
  8820 ;;		i2___awdiv
  8821 ;;		i2___wmul
  8822 ;;		i2_generate_compartment_array
  8823 ;;		i2_initLCD
  8824 ;;		i2_lcdInst
  8825 ;;		i2_printf
  8826 ;;		i2_putch
  8827 ;; This function is called by:
  8828 ;;		Interrupt level 2
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	intcode
  8833  000008                     __pintcode:
  8834                           	opt stack 0
  8835  000008                     _interruptHandler:
  8836                           	opt stack 24
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;incstack = 0
  8840  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8841  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  8842                           tblptru	equ	0xFF8
  8843                           tblptrh	equ	0xFF7
  8844                           tblptrl	equ	0xFF6
  8845                           tablat	equ	0xFF5
  8846                           prodh	equ	0xFF4
  8847                           prodl	equ	0xFF3
  8848                           intcon	equ	0xFF2
  8849                           intcon3	equ	0xFF0
  8850                           indf0	equ	0xFEF
  8851                           postinc0	equ	0xFEE
  8852                           fsr0h	equ	0xFEA
  8853                           fsr0l	equ	0xFE9
  8854                           wreg	equ	0xFE8
  8855                           postdec1	equ	0xFE5
  8856                           fsr1l	equ	0xFE1
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           fsr2h	equ	0xFDA
  8861                           fsr2l	equ	0xFD9
  8862                           status	equ	0xFD8
  8863                           
  8864                           	psect	intcode_body
  8865  000012                     __pintcode_body:
  8866                           	opt stack 24
  8867  000012                     int_func:
  8868                           	opt stack 24
  8869  000012  0006               	pop		; remove dummy address from shadow register refresh
  8870  000014  CFFA F030          	movff	pclath,??_interruptHandler+5
  8871  000018  CFFB F031          	movff	pclatu,??_interruptHandler+6
  8872  00001C  CFE9 F032          	movff	fsr0l,??_interruptHandler+7
  8873  000020  CFEA F033          	movff	fsr0h,??_interruptHandler+8
  8874  000024  CFE1 F034          	movff	fsr1l,??_interruptHandler+9
  8875  000028  CFE2 F035          	movff	fsr1h,??_interruptHandler+10
  8876  00002C  CFD9 F036          	movff	fsr2l,??_interruptHandler+11
  8877  000030  CFDA F037          	movff	fsr2h,??_interruptHandler+12
  8878  000034  CFF3 F038          	movff	prodl,??_interruptHandler+13
  8879  000038  CFF4 F039          	movff	prodh,??_interruptHandler+14
  8880  00003C  CFF6 F03A          	movff	tblptrl,??_interruptHandler+15
  8881  000040  CFF7 F03B          	movff	tblptrh,??_interruptHandler+16
  8882  000044  CFF8 F03C          	movff	tblptru,??_interruptHandler+17
  8883  000048  CFF5 F03D          	movff	tablat,??_interruptHandler+18
  8884  00004C  C07F  F03E         	movff	btemp,??_interruptHandler+19
  8885  000050  C080  F03F         	movff	btemp+1,??_interruptHandler+20
  8886  000054  C081  F040         	movff	btemp+2,??_interruptHandler+21
  8887  000058  C082  F041         	movff	btemp+3,??_interruptHandler+22
  8888                           
  8889                           ;main.c: 644: if(INT1IF){
  8890  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  8891  00005E  EFD3  F007         	goto	i2l6210
  8892                           
  8893                           ;main.c: 650: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8894  000062  3881               	swapf	3969,w,c	;volatile
  8895  000064  0B0F               	andlw	15
  8896  000066  0B0F               	andlw	15
  8897  000068  6E44               	movwf	interruptHandler@keypress,c
  8898                           
  8899                           ;main.c: 652: char temp = keys[keypress];
  8900  00006A  5044               	movf	interruptHandler@keypress,w,c
  8901  00006C  0D01               	mullw	1
  8902  00006E  0E93               	movlw	low _keys
  8903  000070  24F3               	addwf	prodl,w,c
  8904  000072  6EF6               	movwf	tblptrl,c
  8905  000074  0EFC               	movlw	high _keys
  8906  000076  20F4               	addwfc	prodh,w,c
  8907  000078  6EF7               	movwf	tblptrh,c
  8908  00007A                     	if	1	;There are 3 active tblptr bytes
  8909  00007A  6AF8               	clrf	tblptru,c
  8910  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
  8911  00007E  22F8               	addwfc	tblptru,f,c
  8912  000080                     	endif
  8913  000080  0008               	tblrd		*
  8914  000082  CFF5 F045          	movff	tablat,interruptHandler@temp
  8915                           
  8916                           ;main.c: 655: if(temp == 'A'){
  8917  000086  0E41               	movlw	65
  8918  000088  1845               	xorwf	interruptHandler@temp,w,c
  8919  00008A  A4D8               	btfss	status,2,c
  8920  00008C  D006               	goto	i2l423
  8921                           
  8922                           ;main.c: 656: state = prev_state;
  8923  00008E  C067  F0AE         	movff	_prev_state,_state
  8924  000092  C068  F0AF         	movff	_prev_state+1,_state+1
  8925  000096  EFD2  F007         	goto	i2l6208
  8926  00009A                     i2l423:
  8927                           
  8928                           ;main.c: 659: }
  8929                           ;main.c: 662: if (change_mode == 0){
  8930  00009A  0100               	movlb	0	; () banked
  8931  00009C  51B8               	movf	_change_mode& (0+255),w,b
  8932  00009E  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  8933  0000A0  A4D8               	btfss	status,2,c
  8934  0000A2  D09B               	goto	i2l431
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;main.c: 666: if (temp == '1'){
  8938  0000A4  0E31               	movlw	49
  8939  0000A6  1845               	xorwf	interruptHandler@temp,w,c
  8940  0000A8  A4D8               	btfss	status,2,c
  8941  0000AA  D089               	goto	i2l426
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;main.c: 668: initLCD();
  8945  0000AC  ECE7  F021         	call	i2_initLCD	;wreg free
  8946                           
  8947                           ;main.c: 669: for (i = 0; i <3; i++){
  8948  0000B0  0E00               	movlw	0
  8949  0000B2  0100               	movlb	0	; () banked
  8950  0000B4  6FBF               	movwf	(_i+1)& (0+255),b
  8951  0000B6  0E00               	movlw	0
  8952  0000B8  6FBE               	movwf	_i& (0+255),b
  8953                           
  8954                           ; BSR set to: 0
  8955  0000BA  51BF               	movf	(_i+1)& (0+255),w,b
  8956  0000BC  E101               	bnz	i2u445_40
  8957  0000BE  D079               	goto	L2
  8958  0000C0                     i2u445_40:
  8959                           
  8960                           ; BSR set to: 0
  8961  0000C0  EFD2  F007         	goto	i2l6208
  8962  0000C4                     
  8963                           ; BSR set to: 0
  8964                           ;main.c: 670: I2C_Master_Init(100000);
  8965                           
  8966                           ; BSR set to: 0
  8967  0000C4  0EA0               	movlw	160
  8968  0000C6  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  8969  0000C8  0E86               	movlw	134
  8970  0000CA  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  8971  0000CC  0E01               	movlw	1
  8972  0000CE  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  8973  0000D0  0E00               	movlw	0
  8974  0000D2  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  8975  0000D4  EC40  F021         	call	i2_I2C_Master_Init	;wreg free
  8976                           
  8977                           ;main.c: 671: I2C_Master_Start();
  8978  0000D8  ECBA  F023         	call	i2_I2C_Master_Start	;wreg free
  8979                           
  8980                           ;main.c: 672: I2C_Master_Write(0b11010000);
  8981  0000DC  0E00               	movlw	0
  8982  0000DE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  8983  0000E0  0ED0               	movlw	208
  8984  0000E2  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  8985  0000E4  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  8986                           
  8987                           ;main.c: 673: I2C_Master_Write(0x00);
  8988  0000E8  0E00               	movlw	0
  8989  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  8990  0000EC  0E00               	movlw	0
  8991  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  8992  0000F0  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  8993                           
  8994                           ;main.c: 674: I2C_Master_Stop();
  8995  0000F4  ECB6  F023         	call	i2_I2C_Master_Stop	;wreg free
  8996                           
  8997                           ;main.c: 677: I2C_Master_Start();
  8998  0000F8  ECBA  F023         	call	i2_I2C_Master_Start	;wreg free
  8999                           
  9000                           ;main.c: 678: I2C_Master_Write(0b11010001);
  9001  0000FC  0E00               	movlw	0
  9002  0000FE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9003  000100  0ED1               	movlw	209
  9004  000102  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9005  000104  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  9006                           
  9007                           ;main.c: 679: for(j = 0; j < 6; j++){
  9008  000108  0E00               	movlw	0
  9009  00010A  6E75               	movwf	_j,c
  9010  00010C                     i2l5734:
  9011  00010C  0E05               	movlw	5
  9012  00010E  6475               	cpfsgt	_j,c
  9013  000110  D001               	goto	i2l429
  9014  000112  D00E               	goto	i2u447_40
  9015  000114                     i2l429:
  9016                           
  9017                           ;main.c: 680: time[j] = I2C_Master_Read(0);
  9018  000114  5075               	movf	_j,w,c
  9019  000116  0D01               	mullw	1
  9020  000118  0E56               	movlw	low _time
  9021  00011A  24F3               	addwf	prodl,w,c
  9022  00011C  6ED9               	movwf	fsr2l,c
  9023  00011E  0E00               	movlw	high _time
  9024  000120  20F4               	addwfc	prodh,w,c
  9025  000122  6EDA               	movwf	fsr2h,c
  9026  000124  0E00               	movlw	0
  9027  000126  EC26  F023         	call	i2_I2C_Master_Read
  9028  00012A  6EDF               	movwf	indf2,c
  9029  00012C  2A75               	incf	_j,f,c
  9030  00012E  D7EE               	goto	i2l5734
  9031  000130                     i2u447_40:
  9032                           
  9033                           ;main.c: 681: }
  9034                           ;main.c: 682: time[6] = I2C_Master_Read(1);
  9035  000130  0E01               	movlw	1
  9036  000132  EC26  F023         	call	i2_I2C_Master_Read
  9037  000136  6E5C               	movwf	_time+6,c
  9038                           
  9039                           ;main.c: 683: I2C_Master_Stop();
  9040  000138  ECB6  F023         	call	i2_I2C_Master_Stop	;wreg free
  9041                           
  9042                           ;main.c: 685: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9043  00013C  0E80               	movlw	128
  9044  00013E  EC84  F023         	call	i2_lcdInst
  9045  000142  0E34               	movlw	52
  9046  000144  6E2B               	movwf	??_interruptHandler& (0+255),c
  9047  000146  0EF2               	movlw	242
  9048  000148                     i2u564_47:
  9049  000148  2EE8               	decfsz	wreg,f,c
  9050  00014A  D7FE               	bra	i2u564_47
  9051  00014C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9052  00014E  D7FC               	bra	i2u564_47
  9053                           
  9054                           ;main.c: 686: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9055  000150  0E9C               	movlw	low STR_46
  9056  000152  6E0D               	movwf	i2printf@f,c
  9057  000154  0EFE               	movlw	high STR_46
  9058  000156  6E0E               	movwf	i2printf@f+1,c
  9059  000158  C05C  F00F         	movff	_time+6,?i2_printf+2
  9060  00015C  6A10               	clrf	?i2_printf+3,c
  9061  00015E  C05B  F011         	movff	_time+5,?i2_printf+4
  9062  000162  6A12               	clrf	?i2_printf+5,c
  9063  000164  C05A  F013         	movff	_time+4,?i2_printf+6
  9064  000168  6A14               	clrf	?i2_printf+7,c
  9065  00016A  EC3B  F018         	call	i2_printf	;wreg free
  9066                           
  9067                           ;main.c: 687: lcdInst(0xC0);;
  9068  00016E  0EC0               	movlw	192
  9069  000170  EC84  F023         	call	i2_lcdInst
  9070                           
  9071                           ;main.c: 688: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9072  000174  0EAB               	movlw	low STR_47
  9073  000176  6E0D               	movwf	i2printf@f,c
  9074  000178  0EFE               	movlw	high STR_47
  9075  00017A  6E0E               	movwf	i2printf@f+1,c
  9076  00017C  C058  F00F         	movff	_time+2,?i2_printf+2
  9077  000180  6A10               	clrf	?i2_printf+3,c
  9078  000182  C057  F011         	movff	_time+1,?i2_printf+4
  9079  000186  6A12               	clrf	?i2_printf+5,c
  9080  000188  C056  F013         	movff	_time,?i2_printf+6
  9081  00018C  6A14               	clrf	?i2_printf+7,c
  9082  00018E  EC3B  F018         	call	i2_printf	;wreg free
  9083                           
  9084                           ;main.c: 689: _delay((unsigned long)((600)*(32000000/4000.0)));
  9085  000192  0E19               	movlw	25
  9086  000194  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9087  000196  0E5A               	movlw	90
  9088  000198  6E2B               	movwf	??_interruptHandler& (0+255),c
  9089  00019A  0EB2               	movlw	178
  9090  00019C                     i2u565_47:
  9091  00019C  2EE8               	decfsz	wreg,f,c
  9092  00019E  D7FE               	bra	i2u565_47
  9093  0001A0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9094  0001A2  D7FC               	bra	i2u565_47
  9095  0001A4  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9096  0001A6  D7FA               	bra	i2u565_47
  9097  0001A8  0100               	movlb	0	; () banked
  9098  0001AA  4BBE               	infsnz	_i& (0+255),f,b
  9099  0001AC  2BBF               	incf	(_i+1)& (0+255),f,b
  9100  0001AE  51BF               	movf	(_i+1)& (0+255),w,b
  9101  0001B0  E112               	bnz	i2l5760
  9102  0001B2                     L2:
  9103  0001B2  0E03               	movlw	3
  9104  0001B4  5DBE               	subwf	_i& (0+255),w,b
  9105  0001B6  A0D8               	btfss	status,0,c
  9106  0001B8  D785               	goto	i2l427
  9107  0001BA  EFD2  F007         	goto	i2l6208
  9108  0001BE                     i2l426:
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;main.c: 693: }
  9112                           ;main.c: 694: if (temp == '2'){
  9113                           
  9114                           ; BSR set to: 0
  9115  0001BE  0E32               	movlw	50
  9116  0001C0  1845               	xorwf	interruptHandler@temp,w,c
  9117  0001C2  A4D8               	btfss	status,2,c
  9118  0001C4  D00A               	goto	i2l431
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;main.c: 695: change_mode = 1;
  9122  0001C6  0E00               	movlw	0
  9123  0001C8  6FB9               	movwf	(_change_mode+1)& (0+255),b
  9124  0001CA  0E01               	movlw	1
  9125  0001CC  6FB8               	movwf	_change_mode& (0+255),b
  9126                           
  9127                           ;main.c: 696: mode = 1;
  9128  0001CE  0E00               	movlw	0
  9129  0001D0  6FBB               	movwf	(_mode+1)& (0+255),b
  9130  0001D2  0E01               	movlw	1
  9131  0001D4  D337               	goto	L10
  9132  0001D6                     i2l5760:
  9133  0001D6  EFD2  F007         	goto	i2l6208
  9134  0001DA                     i2l431:
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;main.c: 701: }
  9138                           ;main.c: 704: }
  9139                           ;main.c: 709: if(operation == 1){
  9140                           
  9141                           ; BSR set to: 0
  9142                           
  9143                           ; BSR set to: 0
  9144  0001DA  0473               	decf	_operation,w,c
  9145  0001DC  1074               	iorwf	_operation+1,w,c
  9146  0001DE  A4D8               	btfss	status,2,c
  9147  0001E0  D333               	goto	i2l442
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;main.c: 710: if (temp == '1'){
  9151  0001E2  0E31               	movlw	49
  9152  0001E4  1845               	xorwf	interruptHandler@temp,w,c
  9153  0001E6  A4D8               	btfss	status,2,c
  9154  0001E8  D089               	goto	i2l433
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 711: initLCD();
  9158  0001EA  ECE7  F021         	call	i2_initLCD	;wreg free
  9159                           
  9160                           ;main.c: 712: for (i = 0; i <3; i++){
  9161  0001EE  0E00               	movlw	0
  9162  0001F0  0100               	movlb	0	; () banked
  9163  0001F2  6FBF               	movwf	(_i+1)& (0+255),b
  9164  0001F4  0E00               	movlw	0
  9165  0001F6  6FBE               	movwf	_i& (0+255),b
  9166                           
  9167                           ; BSR set to: 0
  9168  0001F8  51BF               	movf	(_i+1)& (0+255),w,b
  9169  0001FA  E101               	bnz	i2u452_40
  9170  0001FC  D079               	goto	L3
  9171  0001FE                     i2u452_40:
  9172                           
  9173                           ; BSR set to: 0
  9174  0001FE  EFD2  F007         	goto	i2l6208
  9175  000202                     
  9176                           ; BSR set to: 0
  9177                           ;main.c: 713: I2C_Master_Init(100000);
  9178                           
  9179                           ; BSR set to: 0
  9180  000202  0EA0               	movlw	160
  9181  000204  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9182  000206  0E86               	movlw	134
  9183  000208  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9184  00020A  0E01               	movlw	1
  9185  00020C  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9186  00020E  0E00               	movlw	0
  9187  000210  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9188  000212  EC40  F021         	call	i2_I2C_Master_Init	;wreg free
  9189                           
  9190                           ;main.c: 714: I2C_Master_Start();
  9191  000216  ECBA  F023         	call	i2_I2C_Master_Start	;wreg free
  9192                           
  9193                           ;main.c: 715: I2C_Master_Write(0b11010000);
  9194  00021A  0E00               	movlw	0
  9195  00021C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9196  00021E  0ED0               	movlw	208
  9197  000220  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9198  000222  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  9199                           
  9200                           ;main.c: 716: I2C_Master_Write(0x00);
  9201  000226  0E00               	movlw	0
  9202  000228  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9203  00022A  0E00               	movlw	0
  9204  00022C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9205  00022E  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  9206                           
  9207                           ;main.c: 717: I2C_Master_Stop();
  9208  000232  ECB6  F023         	call	i2_I2C_Master_Stop	;wreg free
  9209                           
  9210                           ;main.c: 720: I2C_Master_Start();
  9211  000236  ECBA  F023         	call	i2_I2C_Master_Start	;wreg free
  9212                           
  9213                           ;main.c: 721: I2C_Master_Write(0b11010001);
  9214  00023A  0E00               	movlw	0
  9215  00023C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9216  00023E  0ED1               	movlw	209
  9217  000240  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9218  000242  ECA9  F023         	call	i2_I2C_Master_Write	;wreg free
  9219                           
  9220                           ;main.c: 722: for(j = 0; j < 6; j++){
  9221  000246  0E00               	movlw	0
  9222  000248  6E75               	movwf	_j,c
  9223  00024A                     i2l5780:
  9224  00024A  0E05               	movlw	5
  9225  00024C  6475               	cpfsgt	_j,c
  9226  00024E  D001               	goto	i2l436
  9227  000250  D00E               	goto	i2u454_40
  9228  000252                     i2l436:
  9229                           
  9230                           ;main.c: 723: time[j] = I2C_Master_Read(0);
  9231  000252  5075               	movf	_j,w,c
  9232  000254  0D01               	mullw	1
  9233  000256  0E56               	movlw	low _time
  9234  000258  24F3               	addwf	prodl,w,c
  9235  00025A  6ED9               	movwf	fsr2l,c
  9236  00025C  0E00               	movlw	high _time
  9237  00025E  20F4               	addwfc	prodh,w,c
  9238  000260  6EDA               	movwf	fsr2h,c
  9239  000262  0E00               	movlw	0
  9240  000264  EC26  F023         	call	i2_I2C_Master_Read
  9241  000268  6EDF               	movwf	indf2,c
  9242  00026A  2A75               	incf	_j,f,c
  9243  00026C  D7EE               	goto	i2l5780
  9244  00026E                     i2u454_40:
  9245                           
  9246                           ;main.c: 724: }
  9247                           ;main.c: 725: time[6] = I2C_Master_Read(1);
  9248  00026E  0E01               	movlw	1
  9249  000270  EC26  F023         	call	i2_I2C_Master_Read
  9250  000274  6E5C               	movwf	_time+6,c
  9251                           
  9252                           ;main.c: 726: I2C_Master_Stop();
  9253  000276  ECB6  F023         	call	i2_I2C_Master_Stop	;wreg free
  9254                           
  9255                           ;main.c: 728: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9256  00027A  0E80               	movlw	128
  9257  00027C  EC84  F023         	call	i2_lcdInst
  9258  000280  0E34               	movlw	52
  9259  000282  6E2B               	movwf	??_interruptHandler& (0+255),c
  9260  000284  0EF2               	movlw	242
  9261  000286                     i2u566_47:
  9262  000286  2EE8               	decfsz	wreg,f,c
  9263  000288  D7FE               	bra	i2u566_47
  9264  00028A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9265  00028C  D7FC               	bra	i2u566_47
  9266                           
  9267                           ;main.c: 729: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9268  00028E  0E9C               	movlw	low STR_46
  9269  000290  6E0D               	movwf	i2printf@f,c
  9270  000292  0EFE               	movlw	high STR_46
  9271  000294  6E0E               	movwf	i2printf@f+1,c
  9272  000296  C05C  F00F         	movff	_time+6,?i2_printf+2
  9273  00029A  6A10               	clrf	?i2_printf+3,c
  9274  00029C  C05B  F011         	movff	_time+5,?i2_printf+4
  9275  0002A0  6A12               	clrf	?i2_printf+5,c
  9276  0002A2  C05A  F013         	movff	_time+4,?i2_printf+6
  9277  0002A6  6A14               	clrf	?i2_printf+7,c
  9278  0002A8  EC3B  F018         	call	i2_printf	;wreg free
  9279                           
  9280                           ;main.c: 730: lcdInst(0xC0);;
  9281  0002AC  0EC0               	movlw	192
  9282  0002AE  EC84  F023         	call	i2_lcdInst
  9283                           
  9284                           ;main.c: 731: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9285  0002B2  0EAB               	movlw	low STR_47
  9286  0002B4  6E0D               	movwf	i2printf@f,c
  9287  0002B6  0EFE               	movlw	high STR_47
  9288  0002B8  6E0E               	movwf	i2printf@f+1,c
  9289  0002BA  C058  F00F         	movff	_time+2,?i2_printf+2
  9290  0002BE  6A10               	clrf	?i2_printf+3,c
  9291  0002C0  C057  F011         	movff	_time+1,?i2_printf+4
  9292  0002C4  6A12               	clrf	?i2_printf+5,c
  9293  0002C6  C056  F013         	movff	_time,?i2_printf+6
  9294  0002CA  6A14               	clrf	?i2_printf+7,c
  9295  0002CC  EC3B  F018         	call	i2_printf	;wreg free
  9296                           
  9297                           ;main.c: 732: _delay((unsigned long)((600)*(32000000/4000.0)));
  9298  0002D0  0E19               	movlw	25
  9299  0002D2  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9300  0002D4  0E5A               	movlw	90
  9301  0002D6  6E2B               	movwf	??_interruptHandler& (0+255),c
  9302  0002D8  0EB2               	movlw	178
  9303  0002DA                     i2u567_47:
  9304  0002DA  2EE8               	decfsz	wreg,f,c
  9305  0002DC  D7FE               	bra	i2u567_47
  9306  0002DE  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9307  0002E0  D7FC               	bra	i2u567_47
  9308  0002E2  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9309  0002E4  D7FA               	bra	i2u567_47
  9310  0002E6  0100               	movlb	0	; () banked
  9311  0002E8  4BBE               	infsnz	_i& (0+255),f,b
  9312  0002EA  2BBF               	incf	(_i+1)& (0+255),f,b
  9313  0002EC  51BF               	movf	(_i+1)& (0+255),w,b
  9314  0002EE  E104               	bnz	i2u455_40
  9315  0002F0                     L3:
  9316  0002F0  0E03               	movlw	3
  9317  0002F2  5DBE               	subwf	_i& (0+255),w,b
  9318  0002F4  A0D8               	btfss	status,0,c
  9319  0002F6  D785               	goto	i2l434
  9320  0002F8                     i2u455_40:
  9321  0002F8  EFD2  F007         	goto	i2l6208
  9322  0002FC                     i2l433:
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;main.c: 738: }
  9326                           ;main.c: 739: if (temp == '2'){
  9327                           
  9328                           ; BSR set to: 0
  9329  0002FC  0E32               	movlw	50
  9330  0002FE  1845               	xorwf	interruptHandler@temp,w,c
  9331  000300  A4D8               	btfss	status,2,c
  9332  000302  D099               	goto	i2l438
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;main.c: 748: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  9336  000304  C092  F001         	movff	_hr_initial,i2___wmul@multiplier
  9337  000308  C093  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  9338  00030C  0E0E               	movlw	14
  9339  00030E  6E04               	movwf	i2___wmul@multiplicand+1,c
  9340  000310  0E10               	movlw	16
  9341  000312  6E03               	movwf	i2___wmul@multiplicand,c
  9342  000314  EC13  F023         	call	i2___wmul	;wreg free
  9343  000318  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9344  00031C  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9345  000320  C090  F001         	movff	_min_initial,i2___wmul@multiplier
  9346  000324  C091  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  9347  000328  0E00               	movlw	0
  9348  00032A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9349  00032C  0E3C               	movlw	60
  9350  00032E  6E03               	movwf	i2___wmul@multiplicand,c
  9351  000330  EC13  F023         	call	i2___wmul	;wreg free
  9352  000334  5001               	movf	?i2___wmul,w,c
  9353  000336  262B               	addwf	??_interruptHandler,f,c
  9354  000338  5002               	movf	?i2___wmul+1,w,c
  9355  00033A  222C               	addwfc	??_interruptHandler+1,f,c
  9356  00033C  0101               	movlb	1	; () banked
  9357  00033E  516A               	movf	_sec_initial& (0+255),w,b
  9358  000340  242B               	addwf	??_interruptHandler,w,c
  9359  000342  6F68               	movwf	_initial_time& (0+255),b
  9360  000344  516B               	movf	(_sec_initial+1)& (0+255),w,b
  9361  000346  202C               	addwfc	??_interruptHandler+1,w,c
  9362  000348  6F69               	movwf	(_initial_time+1)& (0+255),b
  9363                           
  9364                           ;main.c: 749: final_time = hr_final*3600 + min_final*60 + sec_final;
  9365  00034A  C166  F001         	movff	_hr_final,i2___wmul@multiplier
  9366  00034E  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  9367  000352  0E0E               	movlw	14
  9368  000354  6E04               	movwf	i2___wmul@multiplicand+1,c
  9369  000356  0E10               	movlw	16
  9370  000358  6E03               	movwf	i2___wmul@multiplicand,c
  9371  00035A  EC13  F023         	call	i2___wmul	;wreg free
  9372  00035E  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9373  000362  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9374  000366  C164  F001         	movff	_min_final,i2___wmul@multiplier
  9375  00036A  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  9376  00036E  0E00               	movlw	0
  9377  000370  6E04               	movwf	i2___wmul@multiplicand+1,c
  9378  000372  0E3C               	movlw	60
  9379  000374  6E03               	movwf	i2___wmul@multiplicand,c
  9380  000376  EC13  F023         	call	i2___wmul	;wreg free
  9381  00037A  5001               	movf	?i2___wmul,w,c
  9382  00037C  262B               	addwf	??_interruptHandler,f,c
  9383  00037E  5002               	movf	?i2___wmul+1,w,c
  9384  000380  222C               	addwfc	??_interruptHandler+1,f,c
  9385  000382  0101               	movlb	1	; () banked
  9386  000384  5162               	movf	_sec_final& (0+255),w,b
  9387  000386  242B               	addwf	??_interruptHandler,w,c
  9388  000388  6F60               	movwf	_final_time& (0+255),b
  9389  00038A  5163               	movf	(_sec_final+1)& (0+255),w,b
  9390  00038C  202C               	addwfc	??_interruptHandler+1,w,c
  9391  00038E  6F61               	movwf	(_final_time+1)& (0+255),b
  9392                           
  9393                           ; BSR set to: 1
  9394                           ;main.c: 750: operationTime = final_time - initial_time;
  9395  000390  C168  F02B         	movff	_initial_time,??_interruptHandler
  9396  000394  C169  F02C         	movff	_initial_time+1,??_interruptHandler+1
  9397  000398  1E2B               	comf	??_interruptHandler,f,c
  9398  00039A  1E2C               	comf	??_interruptHandler+1,f,c
  9399  00039C  4A2B               	infsnz	??_interruptHandler,f,c
  9400  00039E  2A2C               	incf	??_interruptHandler+1,f,c
  9401  0003A0  5160               	movf	_final_time& (0+255),w,b
  9402  0003A2  242B               	addwf	??_interruptHandler,w,c
  9403  0003A4  6E71               	movwf	_operationTime,c
  9404  0003A6  5161               	movf	(_final_time+1)& (0+255),w,b
  9405  0003A8  202C               	addwfc	??_interruptHandler+1,w,c
  9406  0003AA  6E72               	movwf	_operationTime+1,c
  9407                           
  9408                           ; BSR set to: 1
  9409                           ;main.c: 751: initLCD();
  9410  0003AC  ECE7  F021         	call	i2_initLCD	;wreg free
  9411                           
  9412                           ;main.c: 754: printf("operation time:");
  9413  0003B0  0EF4               	movlw	low STR_50
  9414  0003B2  6E0D               	movwf	i2printf@f,c
  9415  0003B4  0EFD               	movlw	high STR_50
  9416  0003B6  6E0E               	movwf	i2printf@f+1,c
  9417  0003B8  EC3B  F018         	call	i2_printf	;wreg free
  9418                           
  9419                           ;main.c: 755: lcdInst(0xC0);;
  9420  0003BC  0EC0               	movlw	192
  9421  0003BE  EC84  F023         	call	i2_lcdInst
  9422                           
  9423                           ;main.c: 756: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  9424  0003C2  0E19               	movlw	low STR_51
  9425  0003C4  6E0D               	movwf	i2printf@f,c
  9426  0003C6  0EFF               	movlw	high STR_51
  9427  0003C8  6E0E               	movwf	i2printf@f+1,c
  9428  0003CA  C071  F001         	movff	_operationTime,i2___awdiv@dividend
  9429  0003CE  C072  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  9430  0003D2  0E00               	movlw	0
  9431  0003D4  6E04               	movwf	i2___awdiv@divisor+1,c
  9432  0003D6  0E3C               	movlw	60
  9433  0003D8  6E03               	movwf	i2___awdiv@divisor,c
  9434  0003DA  ECE6  F01F         	call	i2___awdiv	;wreg free
  9435  0003DE  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9436  0003E2  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9437  0003E6  C071  F001         	movff	_operationTime,___awmod@dividend
  9438  0003EA  C072  F002         	movff	_operationTime+1,___awmod@dividend+1
  9439  0003EE  0E00               	movlw	0
  9440  0003F0  6E04               	movwf	___awmod@divisor+1,c
  9441  0003F2  0E3C               	movlw	60
  9442  0003F4  6E03               	movwf	___awmod@divisor,c
  9443  0003F6  ECA6  F020         	call	___awmod	;wreg free
  9444  0003FA  C001  F011         	movff	?___awmod,?i2_printf+4
  9445  0003FE  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9446  000402  EC3B  F018         	call	i2_printf	;wreg free
  9447                           
  9448                           ;main.c: 757: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9449  000406  0E80               	movlw	128
  9450  000408  EC84  F023         	call	i2_lcdInst
  9451  00040C  0E34               	movlw	52
  9452  00040E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9453  000410  0EF2               	movlw	242
  9454  000412                     i2u568_47:
  9455  000412  2EE8               	decfsz	wreg,f,c
  9456  000414  D7FE               	bra	i2u568_47
  9457  000416  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9458  000418  D7FC               	bra	i2u568_47
  9459                           
  9460                           ;main.c: 758: _delay((unsigned long)((2000)*(32000000/4000.0)));
  9461  00041A  0E52               	movlw	82
  9462  00041C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9463  00041E  0E2B               	movlw	43
  9464  000420  6E2B               	movwf	??_interruptHandler& (0+255),c
  9465  000422  0E00               	movlw	0
  9466  000424                     i2u569_47:
  9467  000424  2EE8               	decfsz	wreg,f,c
  9468  000426  D7FE               	bra	i2u569_47
  9469  000428  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9470  00042A  D7FC               	bra	i2u569_47
  9471  00042C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9472  00042E  D7FA               	bra	i2u569_47
  9473  000430  D000               	nop2	
  9474  000432  EFD2  F007         	goto	i2l6208
  9475  000436                     i2l438:
  9476                           
  9477                           ;main.c: 764: }
  9478                           ;main.c: 766: if (temp == '3'){
  9479  000436  0E33               	movlw	51
  9480  000438  1845               	xorwf	interruptHandler@temp,w,c
  9481  00043A  A4D8               	btfss	status,2,c
  9482  00043C  D1F7               	goto	i2l439
  9483                           
  9484                           ;main.c: 771: initLCD();
  9485  00043E  ECE7  F021         	call	i2_initLCD	;wreg free
  9486                           
  9487                           ;main.c: 772: printf("assembly step:%d",assembly_step);
  9488  000442  0ED2               	movlw	low STR_8
  9489  000444  6E0D               	movwf	i2printf@f,c
  9490  000446  0EFD               	movlw	high STR_8
  9491  000448  6E0E               	movwf	i2printf@f+1,c
  9492  00044A  C0AC  F00F         	movff	_assembly_step,?i2_printf+2
  9493  00044E  C0AD  F010         	movff	_assembly_step+1,?i2_printf+3
  9494  000452  EC3B  F018         	call	i2_printf	;wreg free
  9495                           
  9496                           ;main.c: 773: for (i = 0; i<8; i++){
  9497  000456  0E00               	movlw	0
  9498  000458  0100               	movlb	0	; () banked
  9499  00045A  6FBF               	movwf	(_i+1)& (0+255),b
  9500  00045C  0E00               	movlw	0
  9501  00045E  6FBE               	movwf	_i& (0+255),b
  9502                           
  9503                           ; BSR set to: 0
  9504  000460  51BF               	movf	(_i+1)& (0+255),w,b
  9505  000462  E105               	bnz	i2u458_40
  9506  000464  0E08               	movlw	8
  9507  000466  5DBE               	subwf	_i& (0+255),w,b
  9508  000468  B0D8               	btfsc	status,0,c
  9509  00046A  D093               	goto	i2u459_40
  9510  00046C  D001               	goto	i2l440
  9511  00046E                     i2u458_40:
  9512                           
  9513                           ; BSR set to: 0
  9514  00046E  D091               	goto	i2u459_40
  9515  000470                     i2l440:
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;main.c: 775: _delay((unsigned long)((800)*(32000000/4000.0)));
  9519                           
  9520                           ; BSR set to: 0
  9521  000470  0E21               	movlw	33
  9522  000472  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9523  000474  0E78               	movlw	120
  9524  000476  6E2B               	movwf	??_interruptHandler& (0+255),c
  9525  000478  0E98               	movlw	152
  9526  00047A                     i2u570_47:
  9527  00047A  2EE8               	decfsz	wreg,f,c
  9528  00047C  D7FE               	bra	i2u570_47
  9529  00047E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9530  000480  D7FC               	bra	i2u570_47
  9531  000482  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9532  000484  D7FA               	bra	i2u570_47
  9533  000486  D000               	nop2	
  9534                           
  9535                           ;main.c: 776: printf("C%d:B%d,N%d,S%d,W%d",i,B_array[i],N_array[i],S_array[i],W_array[i]
      +                          );
  9536  000488  0E53               	movlw	low STR_53
  9537  00048A  6E0D               	movwf	i2printf@f,c
  9538  00048C  0EFD               	movlw	high STR_53
  9539  00048E  6E0E               	movwf	i2printf@f+1,c
  9540  000490  C0BE  F00F         	movff	_i,?i2_printf+2
  9541  000494  C0BF  F010         	movff	_i+1,?i2_printf+3
  9542  000498  90D8               	bcf	status,0,c
  9543  00049A  0100               	movlb	0	; () banked
  9544  00049C  35BE               	rlcf	_i& (0+255),w,b
  9545  00049E  6ED9               	movwf	fsr2l,c
  9546  0004A0  35BF               	rlcf	(_i+1)& (0+255),w,b
  9547  0004A2  6EDA               	movwf	fsr2h,c
  9548  0004A4  0E30               	movlw	low _B_array
  9549  0004A6  26D9               	addwf	fsr2l,f,c
  9550  0004A8  0E01               	movlw	high _B_array
  9551  0004AA  22DA               	addwfc	fsr2h,f,c
  9552  0004AC  CFDE F011          	movff	postinc2,?i2_printf+4
  9553  0004B0  CFDD F012          	movff	postdec2,?i2_printf+5
  9554  0004B4  90D8               	bcf	status,0,c
  9555  0004B6  35BE               	rlcf	_i& (0+255),w,b
  9556  0004B8  6ED9               	movwf	fsr2l,c
  9557  0004BA  35BF               	rlcf	(_i+1)& (0+255),w,b
  9558  0004BC  6EDA               	movwf	fsr2h,c
  9559  0004BE  0E10               	movlw	low _N_array
  9560  0004C0  26D9               	addwf	fsr2l,f,c
  9561  0004C2  0E01               	movlw	high _N_array
  9562  0004C4  22DA               	addwfc	fsr2h,f,c
  9563  0004C6  CFDE F013          	movff	postinc2,?i2_printf+6
  9564  0004CA  CFDD F014          	movff	postdec2,?i2_printf+7
  9565  0004CE  90D8               	bcf	status,0,c
  9566  0004D0  35BE               	rlcf	_i& (0+255),w,b
  9567  0004D2  6ED9               	movwf	fsr2l,c
  9568  0004D4  35BF               	rlcf	(_i+1)& (0+255),w,b
  9569  0004D6  6EDA               	movwf	fsr2h,c
  9570  0004D8  0E20               	movlw	low _S_array
  9571  0004DA  26D9               	addwf	fsr2l,f,c
  9572  0004DC  0E01               	movlw	high _S_array
  9573  0004DE  22DA               	addwfc	fsr2h,f,c
  9574  0004E0  CFDE F015          	movff	postinc2,?i2_printf+8
  9575  0004E4  CFDD F016          	movff	postdec2,?i2_printf+9
  9576  0004E8  90D8               	bcf	status,0,c
  9577  0004EA  35BE               	rlcf	_i& (0+255),w,b
  9578  0004EC  6ED9               	movwf	fsr2l,c
  9579  0004EE  35BF               	rlcf	(_i+1)& (0+255),w,b
  9580  0004F0  6EDA               	movwf	fsr2h,c
  9581  0004F2  0E00               	movlw	low _W_array
  9582  0004F4  26D9               	addwf	fsr2l,f,c
  9583  0004F6  0E01               	movlw	high _W_array
  9584  0004F8  22DA               	addwfc	fsr2h,f,c
  9585  0004FA  CFDE F017          	movff	postinc2,?i2_printf+10
  9586  0004FE  CFDD F018          	movff	postdec2,?i2_printf+11
  9587  000502  EC3B  F018         	call	i2_printf	;wreg free
  9588                           
  9589                           ;main.c: 777: _delay((unsigned long)((800)*(32000000/4000.0)));
  9590  000506  0E21               	movlw	33
  9591  000508  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9592  00050A  0E78               	movlw	120
  9593  00050C  6E2B               	movwf	??_interruptHandler& (0+255),c
  9594  00050E  0E98               	movlw	152
  9595  000510                     i2u571_47:
  9596  000510  2EE8               	decfsz	wreg,f,c
  9597  000512  D7FE               	bra	i2u571_47
  9598  000514  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9599  000516  D7FC               	bra	i2u571_47
  9600  000518  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9601  00051A  D7FA               	bra	i2u571_47
  9602  00051C  D000               	nop2	
  9603                           
  9604                           ;main.c: 778: B_total_dispensed += B_array[i];
  9605  00051E  90D8               	bcf	status,0,c
  9606  000520  0100               	movlb	0	; () banked
  9607  000522  35BE               	rlcf	_i& (0+255),w,b
  9608  000524  6ED9               	movwf	fsr2l,c
  9609  000526  35BF               	rlcf	(_i+1)& (0+255),w,b
  9610  000528  6EDA               	movwf	fsr2h,c
  9611  00052A  0E30               	movlw	low _B_array
  9612  00052C  26D9               	addwf	fsr2l,f,c
  9613  00052E  0E01               	movlw	high _B_array
  9614  000530  22DA               	addwfc	fsr2h,f,c
  9615  000532  50DE               	movf	postinc2,w,c
  9616  000534  265D               	addwf	_B_total_dispensed,f,c
  9617  000536  50DD               	movf	postdec2,w,c
  9618  000538  225E               	addwfc	_B_total_dispensed+1,f,c
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;main.c: 779: N_total_dispensed += N_array[i];
  9622  00053A  90D8               	bcf	status,0,c
  9623  00053C  35BE               	rlcf	_i& (0+255),w,b
  9624  00053E  6ED9               	movwf	fsr2l,c
  9625  000540  35BF               	rlcf	(_i+1)& (0+255),w,b
  9626  000542  6EDA               	movwf	fsr2h,c
  9627  000544  0E10               	movlw	low _N_array
  9628  000546  26D9               	addwf	fsr2l,f,c
  9629  000548  0E01               	movlw	high _N_array
  9630  00054A  22DA               	addwfc	fsr2h,f,c
  9631  00054C  50DE               	movf	postinc2,w,c
  9632  00054E  2798               	addwf	_N_total_dispensed& (0+255),f,b
  9633  000550  50DD               	movf	postdec2,w,c
  9634  000552  2399               	addwfc	(_N_total_dispensed+1)& (0+255),f,b
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;main.c: 780: S_total_dispensed += S_array[i];
  9638  000554  90D8               	bcf	status,0,c
  9639  000556  35BE               	rlcf	_i& (0+255),w,b
  9640  000558  6ED9               	movwf	fsr2l,c
  9641  00055A  35BF               	rlcf	(_i+1)& (0+255),w,b
  9642  00055C  6EDA               	movwf	fsr2h,c
  9643  00055E  0E20               	movlw	low _S_array
  9644  000560  26D9               	addwf	fsr2l,f,c
  9645  000562  0E01               	movlw	high _S_array
  9646  000564  22DA               	addwfc	fsr2h,f,c
  9647  000566  50DE               	movf	postinc2,w,c
  9648  000568  2796               	addwf	_S_total_dispensed& (0+255),f,b
  9649  00056A  50DD               	movf	postdec2,w,c
  9650  00056C  2397               	addwfc	(_S_total_dispensed+1)& (0+255),f,b
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;main.c: 781: W_total_dispensed += W_array[i];
  9654  00056E  90D8               	bcf	status,0,c
  9655  000570  35BE               	rlcf	_i& (0+255),w,b
  9656  000572  6ED9               	movwf	fsr2l,c
  9657  000574  35BF               	rlcf	(_i+1)& (0+255),w,b
  9658  000576  6EDA               	movwf	fsr2h,c
  9659  000578  0E00               	movlw	low _W_array
  9660  00057A  26D9               	addwf	fsr2l,f,c
  9661  00057C  0E01               	movlw	high _W_array
  9662  00057E  22DA               	addwfc	fsr2h,f,c
  9663  000580  50DE               	movf	postinc2,w,c
  9664  000582  2794               	addwf	_W_total_dispensed& (0+255),f,b
  9665  000584  50DD               	movf	postdec2,w,c
  9666  000586  2395               	addwfc	(_W_total_dispensed+1)& (0+255),f,b
  9667                           
  9668                           ; BSR set to: 0
  9669  000588  4BBE               	infsnz	_i& (0+255),f,b
  9670  00058A  2BBF               	incf	(_i+1)& (0+255),f,b
  9671                           
  9672                           ; BSR set to: 0
  9673  00058C  51BF               	movf	(_i+1)& (0+255),w,b
  9674  00058E  E101               	bnz	i2l5856
  9675  000590  D769               	goto	L4
  9676  000592                     i2u459_40:
  9677  000592                     i2l5856:
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;main.c: 783: }
  9681                           ;main.c: 784: initLCD();
  9682  000592  ECE7  F021         	call	i2_initLCD	;wreg free
  9683                           
  9684                           ;main.c: 785: printf("B dispensed:%d",B_total_dispensed);
  9685  000596  0E42               	movlw	low STR_54
  9686  000598  6E0D               	movwf	i2printf@f,c
  9687  00059A  0EFE               	movlw	high STR_54
  9688  00059C  6E0E               	movwf	i2printf@f+1,c
  9689  00059E  C05D  F00F         	movff	_B_total_dispensed,?i2_printf+2
  9690  0005A2  C05E  F010         	movff	_B_total_dispensed+1,?i2_printf+3
  9691  0005A6  EC3B  F018         	call	i2_printf	;wreg free
  9692                           
  9693                           ;main.c: 786: _delay((unsigned long)((800)*(32000000/4000.0)));
  9694  0005AA  0E21               	movlw	33
  9695  0005AC  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9696  0005AE  0E78               	movlw	120
  9697  0005B0  6E2B               	movwf	??_interruptHandler& (0+255),c
  9698  0005B2  0E98               	movlw	152
  9699  0005B4                     i2u572_47:
  9700  0005B4  2EE8               	decfsz	wreg,f,c
  9701  0005B6  D7FE               	bra	i2u572_47
  9702  0005B8  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9703  0005BA  D7FC               	bra	i2u572_47
  9704  0005BC  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9705  0005BE  D7FA               	bra	i2u572_47
  9706  0005C0  D000               	nop2	
  9707                           
  9708                           ;main.c: 787: initLCD();
  9709  0005C2  ECE7  F021         	call	i2_initLCD	;wreg free
  9710                           
  9711                           ;main.c: 788: printf("N dispensed:%d",N_total_dispensed);
  9712  0005C6  0E51               	movlw	low STR_55
  9713  0005C8  6E0D               	movwf	i2printf@f,c
  9714  0005CA  0EFE               	movlw	high STR_55
  9715  0005CC  6E0E               	movwf	i2printf@f+1,c
  9716  0005CE  C098  F00F         	movff	_N_total_dispensed,?i2_printf+2
  9717  0005D2  C099  F010         	movff	_N_total_dispensed+1,?i2_printf+3
  9718  0005D6  EC3B  F018         	call	i2_printf	;wreg free
  9719                           
  9720                           ;main.c: 789: _delay((unsigned long)((800)*(32000000/4000.0)));
  9721  0005DA  0E21               	movlw	33
  9722  0005DC  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9723  0005DE  0E78               	movlw	120
  9724  0005E0  6E2B               	movwf	??_interruptHandler& (0+255),c
  9725  0005E2  0E98               	movlw	152
  9726  0005E4                     i2u573_47:
  9727  0005E4  2EE8               	decfsz	wreg,f,c
  9728  0005E6  D7FE               	bra	i2u573_47
  9729  0005E8  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9730  0005EA  D7FC               	bra	i2u573_47
  9731  0005EC  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9732  0005EE  D7FA               	bra	i2u573_47
  9733  0005F0  D000               	nop2	
  9734                           
  9735                           ;main.c: 790: initLCD();
  9736  0005F2  ECE7  F021         	call	i2_initLCD	;wreg free
  9737                           
  9738                           ;main.c: 791: printf("S dispensed:%d",S_total_dispensed);
  9739  0005F6  0E60               	movlw	low STR_56
  9740  0005F8  6E0D               	movwf	i2printf@f,c
  9741  0005FA  0EFE               	movlw	high STR_56
  9742  0005FC  6E0E               	movwf	i2printf@f+1,c
  9743  0005FE  C096  F00F         	movff	_S_total_dispensed,?i2_printf+2
  9744  000602  C097  F010         	movff	_S_total_dispensed+1,?i2_printf+3
  9745  000606  EC3B  F018         	call	i2_printf	;wreg free
  9746                           
  9747                           ;main.c: 792: _delay((unsigned long)((800)*(32000000/4000.0)));
  9748  00060A  0E21               	movlw	33
  9749  00060C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9750  00060E  0E78               	movlw	120
  9751  000610  6E2B               	movwf	??_interruptHandler& (0+255),c
  9752  000612  0E98               	movlw	152
  9753  000614                     i2u574_47:
  9754  000614  2EE8               	decfsz	wreg,f,c
  9755  000616  D7FE               	bra	i2u574_47
  9756  000618  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9757  00061A  D7FC               	bra	i2u574_47
  9758  00061C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9759  00061E  D7FA               	bra	i2u574_47
  9760  000620  D000               	nop2	
  9761                           
  9762                           ;main.c: 793: initLCD();
  9763  000622  ECE7  F021         	call	i2_initLCD	;wreg free
  9764                           
  9765                           ;main.c: 794: printf("W dispensed:%d",W_total_dispensed);
  9766  000626  0E6F               	movlw	low STR_57
  9767  000628  6E0D               	movwf	i2printf@f,c
  9768  00062A  0EFE               	movlw	high STR_57
  9769  00062C  6E0E               	movwf	i2printf@f+1,c
  9770  00062E  C094  F00F         	movff	_W_total_dispensed,?i2_printf+2
  9771  000632  C095  F010         	movff	_W_total_dispensed+1,?i2_printf+3
  9772  000636  EC3B  F018         	call	i2_printf	;wreg free
  9773                           
  9774                           ;main.c: 796: _delay((unsigned long)((800)*(32000000/4000.0)));
  9775  00063A  0E21               	movlw	33
  9776  00063C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9777  00063E  0E78               	movlw	120
  9778  000640  6E2B               	movwf	??_interruptHandler& (0+255),c
  9779  000642  0E98               	movlw	152
  9780  000644                     i2u575_47:
  9781  000644  2EE8               	decfsz	wreg,f,c
  9782  000646  D7FE               	bra	i2u575_47
  9783  000648  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9784  00064A  D7FC               	bra	i2u575_47
  9785  00064C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9786  00064E  D7FA               	bra	i2u575_47
  9787  000650  D000               	nop2	
  9788                           
  9789                           ;main.c: 797: initLCD();
  9790  000652  ECE7  F021         	call	i2_initLCD	;wreg free
  9791                           
  9792                           ;main.c: 799: printf("Bolt_remain:%d",B_remain);
  9793  000656  0E7E               	movlw	low STR_38
  9794  000658  6E0D               	movwf	i2printf@f,c
  9795  00065A  0EFE               	movlw	high STR_38
  9796  00065C  6E0E               	movwf	i2printf@f+1,c
  9797  00065E  C0A2  F00F         	movff	_B_remain,?i2_printf+2
  9798  000662  C0A3  F010         	movff	_B_remain+1,?i2_printf+3
  9799  000666  EC3B  F018         	call	i2_printf	;wreg free
  9800                           
  9801                           ;main.c: 800: _delay((unsigned long)((300)*(32000000/4000.0)));
  9802  00066A  0E0D               	movlw	13
  9803  00066C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9804  00066E  0E2D               	movlw	45
  9805  000670  6E2B               	movwf	??_interruptHandler& (0+255),c
  9806  000672  0ED8               	movlw	216
  9807  000674                     i2u576_47:
  9808  000674  2EE8               	decfsz	wreg,f,c
  9809  000676  D7FE               	bra	i2u576_47
  9810  000678  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9811  00067A  D7FC               	bra	i2u576_47
  9812  00067C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9813  00067E  D7FA               	bra	i2u576_47
  9814                           
  9815                           ;main.c: 801: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9816  000680  0E01               	movlw	1
  9817  000682  EC84  F023         	call	i2_lcdInst
  9818  000686  0E9C               	movlw	156
  9819  000688  6E2B               	movwf	??_interruptHandler& (0+255),c
  9820  00068A  0ED7               	movlw	215
  9821  00068C                     i2u577_47:
  9822  00068C  2EE8               	decfsz	wreg,f,c
  9823  00068E  D7FE               	bra	i2u577_47
  9824  000690  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9825  000692  D7FC               	bra	i2u577_47
  9826  000694  F000               	nop	
  9827                           
  9828                           ;main.c: 802: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9829  000696  0E80               	movlw	128
  9830  000698  EC84  F023         	call	i2_lcdInst
  9831  00069C  0E34               	movlw	52
  9832  00069E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9833  0006A0  0EF2               	movlw	242
  9834  0006A2                     i2u578_47:
  9835  0006A2  2EE8               	decfsz	wreg,f,c
  9836  0006A4  D7FE               	bra	i2u578_47
  9837  0006A6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9838  0006A8  D7FC               	bra	i2u578_47
  9839                           
  9840                           ;main.c: 803: printf("Nut_remain:%d",N_remain);
  9841  0006AA  0ED6               	movlw	low STR_39
  9842  0006AC  6E0D               	movwf	i2printf@f,c
  9843  0006AE  0EFE               	movlw	high STR_39
  9844  0006B0  6E0E               	movwf	i2printf@f+1,c
  9845  0006B2  C0A0  F00F         	movff	_N_remain,?i2_printf+2
  9846  0006B6  C0A1  F010         	movff	_N_remain+1,?i2_printf+3
  9847  0006BA  EC3B  F018         	call	i2_printf	;wreg free
  9848                           
  9849                           ;main.c: 804: _delay((unsigned long)((300)*(32000000/4000.0)));
  9850  0006BE  0E0D               	movlw	13
  9851  0006C0  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9852  0006C2  0E2D               	movlw	45
  9853  0006C4  6E2B               	movwf	??_interruptHandler& (0+255),c
  9854  0006C6  0ED8               	movlw	216
  9855  0006C8                     i2u579_47:
  9856  0006C8  2EE8               	decfsz	wreg,f,c
  9857  0006CA  D7FE               	bra	i2u579_47
  9858  0006CC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9859  0006CE  D7FC               	bra	i2u579_47
  9860  0006D0  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9861  0006D2  D7FA               	bra	i2u579_47
  9862                           
  9863                           ;main.c: 805: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9864  0006D4  0E01               	movlw	1
  9865  0006D6  EC84  F023         	call	i2_lcdInst
  9866  0006DA  0E9C               	movlw	156
  9867  0006DC  6E2B               	movwf	??_interruptHandler& (0+255),c
  9868  0006DE  0ED7               	movlw	215
  9869  0006E0                     i2u580_47:
  9870  0006E0  2EE8               	decfsz	wreg,f,c
  9871  0006E2  D7FE               	bra	i2u580_47
  9872  0006E4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9873  0006E6  D7FC               	bra	i2u580_47
  9874  0006E8  F000               	nop	
  9875                           
  9876                           ;main.c: 806: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9877  0006EA  0E80               	movlw	128
  9878  0006EC  EC84  F023         	call	i2_lcdInst
  9879  0006F0  0E34               	movlw	52
  9880  0006F2  6E2B               	movwf	??_interruptHandler& (0+255),c
  9881  0006F4  0EF2               	movlw	242
  9882  0006F6                     i2u581_47:
  9883  0006F6  2EE8               	decfsz	wreg,f,c
  9884  0006F8  D7FE               	bra	i2u581_47
  9885  0006FA  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9886  0006FC  D7FC               	bra	i2u581_47
  9887                           
  9888                           ;main.c: 807: printf("Spacer_remain:%d",S_remain);
  9889  0006FE  0EB0               	movlw	low STR_40
  9890  000700  6E0D               	movwf	i2printf@f,c
  9891  000702  0EFD               	movlw	high STR_40
  9892  000704  6E0E               	movwf	i2printf@f+1,c
  9893  000706  C09E  F00F         	movff	_S_remain,?i2_printf+2
  9894  00070A  C09F  F010         	movff	_S_remain+1,?i2_printf+3
  9895  00070E  EC3B  F018         	call	i2_printf	;wreg free
  9896                           
  9897                           ;main.c: 808: _delay((unsigned long)((300)*(32000000/4000.0)));
  9898  000712  0E0D               	movlw	13
  9899  000714  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9900  000716  0E2D               	movlw	45
  9901  000718  6E2B               	movwf	??_interruptHandler& (0+255),c
  9902  00071A  0ED8               	movlw	216
  9903  00071C                     i2u582_47:
  9904  00071C  2EE8               	decfsz	wreg,f,c
  9905  00071E  D7FE               	bra	i2u582_47
  9906  000720  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9907  000722  D7FC               	bra	i2u582_47
  9908  000724  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9909  000726  D7FA               	bra	i2u582_47
  9910                           
  9911                           ;main.c: 809: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9912  000728  0E01               	movlw	1
  9913  00072A  EC84  F023         	call	i2_lcdInst
  9914  00072E  0E9C               	movlw	156
  9915  000730  6E2B               	movwf	??_interruptHandler& (0+255),c
  9916  000732  0ED7               	movlw	215
  9917  000734                     i2u583_47:
  9918  000734  2EE8               	decfsz	wreg,f,c
  9919  000736  D7FE               	bra	i2u583_47
  9920  000738  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9921  00073A  D7FC               	bra	i2u583_47
  9922  00073C  F000               	nop	
  9923                           
  9924                           ;main.c: 810: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9925  00073E  0E80               	movlw	128
  9926  000740  EC84  F023         	call	i2_lcdInst
  9927  000744  0E34               	movlw	52
  9928  000746  6E2B               	movwf	??_interruptHandler& (0+255),c
  9929  000748  0EF2               	movlw	242
  9930  00074A                     i2u584_47:
  9931  00074A  2EE8               	decfsz	wreg,f,c
  9932  00074C  D7FE               	bra	i2u584_47
  9933  00074E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9934  000750  D7FC               	bra	i2u584_47
  9935                           
  9936                           ;main.c: 811: printf("Washer_remain:%d",W_remain);
  9937  000752  0EC1               	movlw	low STR_41
  9938  000754  6E0D               	movwf	i2printf@f,c
  9939  000756  0EFD               	movlw	high STR_41
  9940  000758  6E0E               	movwf	i2printf@f+1,c
  9941  00075A  C09C  F00F         	movff	_W_remain,?i2_printf+2
  9942  00075E  C09D  F010         	movff	_W_remain+1,?i2_printf+3
  9943  000762  EC3B  F018         	call	i2_printf	;wreg free
  9944                           
  9945                           ;main.c: 812: _delay((unsigned long)((300)*(32000000/4000.0)));
  9946  000766  0E0D               	movlw	13
  9947  000768  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9948  00076A  0E2D               	movlw	45
  9949  00076C  6E2B               	movwf	??_interruptHandler& (0+255),c
  9950  00076E  0ED8               	movlw	216
  9951  000770                     i2u585_47:
  9952  000770  2EE8               	decfsz	wreg,f,c
  9953  000772  D7FE               	bra	i2u585_47
  9954  000774  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9955  000776  D7FC               	bra	i2u585_47
  9956  000778  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9957  00077A  D7FA               	bra	i2u585_47
  9958                           
  9959                           ;main.c: 813: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9960  00077C  0E01               	movlw	1
  9961  00077E  EC84  F023         	call	i2_lcdInst
  9962  000782  0E9C               	movlw	156
  9963  000784  6E2B               	movwf	??_interruptHandler& (0+255),c
  9964  000786  0ED7               	movlw	215
  9965  000788                     i2u586_47:
  9966  000788  2EE8               	decfsz	wreg,f,c
  9967  00078A  D7FE               	bra	i2u586_47
  9968  00078C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9969  00078E  D7FC               	bra	i2u586_47
  9970  000790  F000               	nop	
  9971                           
  9972                           ;main.c: 814: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9973  000792  0E80               	movlw	128
  9974  000794  EC84  F023         	call	i2_lcdInst
  9975  000798  0E34               	movlw	52
  9976  00079A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9977  00079C  0EF2               	movlw	242
  9978  00079E                     i2u587_47:
  9979  00079E  2EE8               	decfsz	wreg,f,c
  9980  0007A0  D7FE               	bra	i2u587_47
  9981  0007A2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9982  0007A4  D7FC               	bra	i2u587_47
  9983                           
  9984                           ;main.c: 815: printf("operation time:");
  9985  0007A6  0EF4               	movlw	low STR_50
  9986  0007A8  6E0D               	movwf	i2printf@f,c
  9987  0007AA  0EFD               	movlw	high STR_50
  9988  0007AC  6E0E               	movwf	i2printf@f+1,c
  9989  0007AE  EC3B  F018         	call	i2_printf	;wreg free
  9990                           
  9991                           ;main.c: 816: lcdInst(0xC0);;
  9992  0007B2  0EC0               	movlw	192
  9993  0007B4  EC84  F023         	call	i2_lcdInst
  9994                           
  9995                           ;main.c: 817: printf("00:04:03");
  9996  0007B8  0E89               	movlw	low STR_63
  9997  0007BA  6E0D               	movwf	i2printf@f,c
  9998  0007BC  0EFF               	movlw	high STR_63
  9999  0007BE  6E0E               	movwf	i2printf@f+1,c
 10000  0007C0  EC3B  F018         	call	i2_printf	;wreg free
 10001                           
 10002                           ;main.c: 818: _delay((unsigned long)((1000)*(32000000/4000.0)));
 10003  0007C4  0E29               	movlw	41
 10004  0007C6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10005  0007C8  0E96               	movlw	150
 10006  0007CA  6E2B               	movwf	??_interruptHandler& (0+255),c
 10007  0007CC  0E7F               	movlw	127
 10008  0007CE                     i2u588_47:
 10009  0007CE  2EE8               	decfsz	wreg,f,c
 10010  0007D0  D7FE               	bra	i2u588_47
 10011  0007D2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10012  0007D4  D7FC               	bra	i2u588_47
 10013  0007D6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10014  0007D8  D7FA               	bra	i2u588_47
 10015  0007DA  F000               	nop	
 10016                           
 10017                           ;main.c: 819: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10018  0007DC  0E01               	movlw	1
 10019  0007DE  EC84  F023         	call	i2_lcdInst
 10020  0007E2  0E9C               	movlw	156
 10021  0007E4  6E2B               	movwf	??_interruptHandler& (0+255),c
 10022  0007E6  0ED7               	movlw	215
 10023  0007E8                     i2u589_47:
 10024  0007E8  2EE8               	decfsz	wreg,f,c
 10025  0007EA  D7FE               	bra	i2u589_47
 10026  0007EC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10027  0007EE  D7FC               	bra	i2u589_47
 10028  0007F0  F000               	nop	
 10029                           
 10030                           ;main.c: 820: printf("you're done");
 10031  0007F2  0E32               	movlw	low STR_42
 10032  0007F4  6E0D               	movwf	i2printf@f,c
 10033  0007F6  0EFF               	movlw	high STR_42
 10034  0007F8  6E0E               	movwf	i2printf@f+1,c
 10035  0007FA  EC3B  F018         	call	i2_printf	;wreg free
 10036                           
 10037                           ;main.c: 821: _delay((unsigned long)((1000)*(32000000/4000.0)));
 10038  0007FE  0E29               	movlw	41
 10039  000800  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10040  000802  0E96               	movlw	150
 10041  000804  6E2B               	movwf	??_interruptHandler& (0+255),c
 10042  000806  0E7F               	movlw	127
 10043  000808                     i2u590_47:
 10044  000808  2EE8               	decfsz	wreg,f,c
 10045  00080A  D7FE               	bra	i2u590_47
 10046  00080C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10047  00080E  D7FC               	bra	i2u590_47
 10048  000810  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10049  000812  D7FA               	bra	i2u590_47
 10050  000814  F000               	nop	
 10051                           
 10052                           ;main.c: 822: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10053  000816  0E80               	movlw	128
 10054  000818  EC84  F023         	call	i2_lcdInst
 10055  00081C  0E34               	movlw	52
 10056  00081E  6E2B               	movwf	??_interruptHandler& (0+255),c
 10057  000820  0EF2               	movlw	242
 10058  000822                     i2u591_47:
 10059  000822  2EE8               	decfsz	wreg,f,c
 10060  000824  D7FE               	bra	i2u591_47
 10061  000826  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10062  000828  D7FC               	bra	i2u591_47
 10063  00082A  D3BC               	goto	i2l6208
 10064  00082C                     i2l439:
 10065                           
 10066                           ;main.c: 827: }
 10067                           ;main.c: 829: if (temp == '4'){
 10068  00082C  0E34               	movlw	52
 10069  00082E  1845               	xorwf	interruptHandler@temp,w,c
 10070  000830  A4D8               	btfss	status,2,c
 10071  000832  D00A               	goto	i2l442
 10072                           
 10073                           ;main.c: 830: operation_done = 1;
 10074  000834  0E00               	movlw	0
 10075  000836  0100               	movlb	0	; () banked
 10076  000838  6FB7               	movwf	(_operation_done+1)& (0+255),b
 10077  00083A  0E01               	movlw	1
 10078  00083C  6FB6               	movwf	_operation_done& (0+255),b
 10079                           
 10080                           ;main.c: 831: mode = 0;
 10081  00083E  0E00               	movlw	0
 10082  000840  6FBB               	movwf	(_mode+1)& (0+255),b
 10083  000842  0E00               	movlw	0
 10084  000844                     L10:
 10085  000844  6FBA               	movwf	_mode& (0+255),b
 10086  000846  D3AE               	goto	i2l6208
 10087  000848                     i2l442:
 10088                           
 10089                           ;main.c: 834: }
 10090                           ;main.c: 836: }
 10091                           ;main.c: 861: if (state == 0){
 10092                           
 10093                           ; BSR set to: 0
 10094                           
 10095                           ; BSR set to: 0
 10096  000848  0100               	movlb	0	; () banked
 10097  00084A  51AE               	movf	_state& (0+255),w,b
 10098  00084C  11AF               	iorwf	(_state+1)& (0+255),w,b
 10099  00084E  A4D8               	btfss	status,2,c
 10100  000850  D0CE               	goto	i2l443
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;main.c: 863: if(temp == '4'){
 10104  000852  0E34               	movlw	52
 10105  000854  1845               	xorwf	interruptHandler@temp,w,c
 10106  000856  A4D8               	btfss	status,2,c
 10107  000858  D01F               	goto	i2l444
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;main.c: 864: assembly_step = 4;
 10111  00085A  0E00               	movlw	0
 10112  00085C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10113  00085E  0E04               	movlw	4
 10114  000860  6FAC               	movwf	_assembly_step& (0+255),b
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;main.c: 865: prev_state = state;
 10118  000862  C0AE  F067         	movff	_state,_prev_state
 10119  000866  C0AF  F068         	movff	_state+1,_prev_state+1
 10120                           
 10121                           ;main.c: 866: state = 1;
 10122  00086A  0E00               	movlw	0
 10123  00086C  6FAF               	movwf	(_state+1)& (0+255),b
 10124  00086E  0E01               	movlw	1
 10125  000870  6FAE               	movwf	_state& (0+255),b
 10126                           
 10127                           ; BSR set to: 0
 10128                           ;main.c: 867: lcdInst(0xC0);;
 10129  000872  0EC0               	movlw	192
 10130  000874  EC84  F023         	call	i2_lcdInst
 10131                           
 10132                           ;main.c: 868: putch(keys[keypress]);
 10133  000878  5044               	movf	interruptHandler@keypress,w,c
 10134  00087A  0D01               	mullw	1
 10135  00087C  0E93               	movlw	low _keys
 10136  00087E  24F3               	addwf	prodl,w,c
 10137  000880  6EF6               	movwf	tblptrl,c
 10138  000882  0EFC               	movlw	high _keys
 10139  000884  20F4               	addwfc	prodh,w,c
 10140  000886  6EF7               	movwf	tblptrh,c
 10141  000888                     	if	1	;There are 3 active tblptr bytes
 10142  000888  6AF8               	clrf	tblptru,c
 10143  00088A  0E00               	movlw	low (__mediumconst shr (0+16))
 10144  00088C  22F8               	addwfc	tblptru,f,c
 10145  00088E                     	endif
 10146  00088E  0008               	tblrd		*
 10147  000890  50F5               	movf	tablat,w,c
 10148  000892  EC7A  F023         	call	i2_putch
 10149                           
 10150                           ;main.c: 870: }
 10151  000896  D0A4               	goto	i2l453
 10152  000898                     i2l444:
 10153                           
 10154                           ;main.c: 871: else if(temp == '5'){
 10155  000898  0E35               	movlw	53
 10156  00089A  1845               	xorwf	interruptHandler@temp,w,c
 10157  00089C  A4D8               	btfss	status,2,c
 10158  00089E  D020               	goto	i2l446
 10159                           
 10160                           ;main.c: 872: assembly_step = 5;
 10161  0008A0  0E00               	movlw	0
 10162  0008A2  0100               	movlb	0	; () banked
 10163  0008A4  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10164  0008A6  0E05               	movlw	5
 10165  0008A8  6FAC               	movwf	_assembly_step& (0+255),b
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;main.c: 873: prev_state = state;
 10169  0008AA  C0AE  F067         	movff	_state,_prev_state
 10170  0008AE  C0AF  F068         	movff	_state+1,_prev_state+1
 10171                           
 10172                           ;main.c: 874: state = 1;
 10173  0008B2  0E00               	movlw	0
 10174  0008B4  6FAF               	movwf	(_state+1)& (0+255),b
 10175  0008B6  0E01               	movlw	1
 10176  0008B8  6FAE               	movwf	_state& (0+255),b
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;main.c: 875: lcdInst(0xC0);;
 10180  0008BA  0EC0               	movlw	192
 10181  0008BC  EC84  F023         	call	i2_lcdInst
 10182                           
 10183                           ;main.c: 876: putch(keys[keypress]);
 10184  0008C0  5044               	movf	interruptHandler@keypress,w,c
 10185  0008C2  0D01               	mullw	1
 10186  0008C4  0E93               	movlw	low _keys
 10187  0008C6  24F3               	addwf	prodl,w,c
 10188  0008C8  6EF6               	movwf	tblptrl,c
 10189  0008CA  0EFC               	movlw	high _keys
 10190  0008CC  20F4               	addwfc	prodh,w,c
 10191  0008CE  6EF7               	movwf	tblptrh,c
 10192  0008D0                     	if	1	;There are 3 active tblptr bytes
 10193  0008D0  6AF8               	clrf	tblptru,c
 10194  0008D2  0E00               	movlw	low (__mediumconst shr (0+16))
 10195  0008D4  22F8               	addwfc	tblptru,f,c
 10196  0008D6                     	endif
 10197  0008D6  0008               	tblrd		*
 10198  0008D8  50F5               	movf	tablat,w,c
 10199  0008DA  EC7A  F023         	call	i2_putch
 10200                           
 10201                           ;main.c: 878: }
 10202  0008DE  D080               	goto	i2l453
 10203  0008E0                     i2l446:
 10204                           
 10205                           ;main.c: 879: else if (temp == '6') {
 10206  0008E0  0E36               	movlw	54
 10207  0008E2  1845               	xorwf	interruptHandler@temp,w,c
 10208  0008E4  A4D8               	btfss	status,2,c
 10209  0008E6  D020               	goto	i2l448
 10210                           
 10211                           ;main.c: 880: assembly_step = 6;
 10212  0008E8  0E00               	movlw	0
 10213  0008EA  0100               	movlb	0	; () banked
 10214  0008EC  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10215  0008EE  0E06               	movlw	6
 10216  0008F0  6FAC               	movwf	_assembly_step& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;main.c: 881: prev_state = state;
 10220  0008F2  C0AE  F067         	movff	_state,_prev_state
 10221  0008F6  C0AF  F068         	movff	_state+1,_prev_state+1
 10222                           
 10223                           ;main.c: 882: state = 1;
 10224  0008FA  0E00               	movlw	0
 10225  0008FC  6FAF               	movwf	(_state+1)& (0+255),b
 10226  0008FE  0E01               	movlw	1
 10227  000900  6FAE               	movwf	_state& (0+255),b
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;main.c: 883: lcdInst(0xC0);;
 10231  000902  0EC0               	movlw	192
 10232  000904  EC84  F023         	call	i2_lcdInst
 10233                           
 10234                           ;main.c: 884: putch(keys[keypress]);
 10235  000908  5044               	movf	interruptHandler@keypress,w,c
 10236  00090A  0D01               	mullw	1
 10237  00090C  0E93               	movlw	low _keys
 10238  00090E  24F3               	addwf	prodl,w,c
 10239  000910  6EF6               	movwf	tblptrl,c
 10240  000912  0EFC               	movlw	high _keys
 10241  000914  20F4               	addwfc	prodh,w,c
 10242  000916  6EF7               	movwf	tblptrh,c
 10243  000918                     	if	1	;There are 3 active tblptr bytes
 10244  000918  6AF8               	clrf	tblptru,c
 10245  00091A  0E00               	movlw	low (__mediumconst shr (0+16))
 10246  00091C  22F8               	addwfc	tblptru,f,c
 10247  00091E                     	endif
 10248  00091E  0008               	tblrd		*
 10249  000920  50F5               	movf	tablat,w,c
 10250  000922  EC7A  F023         	call	i2_putch
 10251                           
 10252                           ;main.c: 885: }
 10253  000926  D05C               	goto	i2l453
 10254  000928                     i2l448:
 10255                           
 10256                           ;main.c: 886: else if (temp == '7'){
 10257  000928  0E37               	movlw	55
 10258  00092A  1845               	xorwf	interruptHandler@temp,w,c
 10259  00092C  A4D8               	btfss	status,2,c
 10260  00092E  D020               	goto	i2l450
 10261                           
 10262                           ;main.c: 887: assembly_step = 7;
 10263  000930  0E00               	movlw	0
 10264  000932  0100               	movlb	0	; () banked
 10265  000934  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10266  000936  0E07               	movlw	7
 10267  000938  6FAC               	movwf	_assembly_step& (0+255),b
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;main.c: 888: prev_state = state;
 10271  00093A  C0AE  F067         	movff	_state,_prev_state
 10272  00093E  C0AF  F068         	movff	_state+1,_prev_state+1
 10273                           
 10274                           ;main.c: 889: state = 1;
 10275  000942  0E00               	movlw	0
 10276  000944  6FAF               	movwf	(_state+1)& (0+255),b
 10277  000946  0E01               	movlw	1
 10278  000948  6FAE               	movwf	_state& (0+255),b
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;main.c: 890: lcdInst(0xC0);;
 10282  00094A  0EC0               	movlw	192
 10283  00094C  EC84  F023         	call	i2_lcdInst
 10284                           
 10285                           ;main.c: 891: putch(keys[keypress]);
 10286  000950  5044               	movf	interruptHandler@keypress,w,c
 10287  000952  0D01               	mullw	1
 10288  000954  0E93               	movlw	low _keys
 10289  000956  24F3               	addwf	prodl,w,c
 10290  000958  6EF6               	movwf	tblptrl,c
 10291  00095A  0EFC               	movlw	high _keys
 10292  00095C  20F4               	addwfc	prodh,w,c
 10293  00095E  6EF7               	movwf	tblptrh,c
 10294  000960                     	if	1	;There are 3 active tblptr bytes
 10295  000960  6AF8               	clrf	tblptru,c
 10296  000962  0E00               	movlw	low (__mediumconst shr (0+16))
 10297  000964  22F8               	addwfc	tblptru,f,c
 10298  000966                     	endif
 10299  000966  0008               	tblrd		*
 10300  000968  50F5               	movf	tablat,w,c
 10301  00096A  EC7A  F023         	call	i2_putch
 10302                           
 10303                           ;main.c: 893: }
 10304  00096E  D038               	goto	i2l453
 10305  000970                     i2l450:
 10306                           
 10307                           ;main.c: 894: else if (temp == '8'){
 10308  000970  0E38               	movlw	56
 10309  000972  1845               	xorwf	interruptHandler@temp,w,c
 10310  000974  A4D8               	btfss	status,2,c
 10311  000976  D020               	goto	i2l452
 10312                           
 10313                           ;main.c: 895: assembly_step = 8;
 10314  000978  0E00               	movlw	0
 10315  00097A  0100               	movlb	0	; () banked
 10316  00097C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10317  00097E  0E08               	movlw	8
 10318  000980  6FAC               	movwf	_assembly_step& (0+255),b
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;main.c: 896: prev_state = state;
 10322  000982  C0AE  F067         	movff	_state,_prev_state
 10323  000986  C0AF  F068         	movff	_state+1,_prev_state+1
 10324                           
 10325                           ;main.c: 897: state = 1;
 10326  00098A  0E00               	movlw	0
 10327  00098C  6FAF               	movwf	(_state+1)& (0+255),b
 10328  00098E  0E01               	movlw	1
 10329  000990  6FAE               	movwf	_state& (0+255),b
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;main.c: 898: lcdInst(0xC0);;
 10333  000992  0EC0               	movlw	192
 10334  000994  EC84  F023         	call	i2_lcdInst
 10335                           
 10336                           ;main.c: 899: putch(keys[keypress]);
 10337  000998  5044               	movf	interruptHandler@keypress,w,c
 10338  00099A  0D01               	mullw	1
 10339  00099C  0E93               	movlw	low _keys
 10340  00099E  24F3               	addwf	prodl,w,c
 10341  0009A0  6EF6               	movwf	tblptrl,c
 10342  0009A2  0EFC               	movlw	high _keys
 10343  0009A4  20F4               	addwfc	prodh,w,c
 10344  0009A6  6EF7               	movwf	tblptrh,c
 10345  0009A8                     	if	1	;There are 3 active tblptr bytes
 10346  0009A8  6AF8               	clrf	tblptru,c
 10347  0009AA  0E00               	movlw	low (__mediumconst shr (0+16))
 10348  0009AC  22F8               	addwfc	tblptru,f,c
 10349  0009AE                     	endif
 10350  0009AE  0008               	tblrd		*
 10351  0009B0  50F5               	movf	tablat,w,c
 10352  0009B2  EC7A  F023         	call	i2_putch
 10353                           
 10354                           ;main.c: 901: }
 10355  0009B6  D014               	goto	i2l453
 10356  0009B8                     i2l452:
 10357                           
 10358                           ;main.c: 902: else{
 10359                           ;main.c: 908: initLCD();
 10360  0009B8  ECE7  F021         	call	i2_initLCD	;wreg free
 10361                           
 10362                           ;main.c: 909: printf("Wrong number! ");
 10363  0009BC  0E24               	movlw	low STR_65
 10364  0009BE  6E0D               	movwf	i2printf@f,c
 10365  0009C0  0EFE               	movlw	high STR_65
 10366  0009C2  6E0E               	movwf	i2printf@f+1,c
 10367  0009C4  EC3B  F018         	call	i2_printf	;wreg free
 10368                           
 10369                           ;main.c: 910: _delay((unsigned long)((1000)*(32000000/4000.0)));
 10370  0009C8  0E29               	movlw	41
 10371  0009CA  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10372  0009CC  0E96               	movlw	150
 10373  0009CE  6E2B               	movwf	??_interruptHandler& (0+255),c
 10374  0009D0  0E7F               	movlw	127
 10375  0009D2                     i2u592_47:
 10376  0009D2  2EE8               	decfsz	wreg,f,c
 10377  0009D4  D7FE               	bra	i2u592_47
 10378  0009D6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10379  0009D8  D7FC               	bra	i2u592_47
 10380  0009DA  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10381  0009DC  D7FA               	bra	i2u592_47
 10382  0009DE  F000               	nop	
 10383  0009E0                     i2l453:
 10384                           
 10385                           ;main.c: 912: }
 10386                           ;main.c: 918: generate_compartment_array(assembly_step);
 10387  0009E0  C0AC  F001         	movff	_assembly_step,i2generate_compartment_array@step
 10388  0009E4  C0AD  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 10389  0009E8  EC48  F01A         	call	i2_generate_compartment_array	;wreg free
 10390  0009EC  D2DB               	goto	i2l6208
 10391  0009EE                     i2l443:
 10392                           
 10393                           ;main.c: 925: }
 10394                           ;main.c: 933: if(state == 1){
 10395  0009EE  0100               	movlb	0	; () banked
 10396  0009F0  05AE               	decf	_state& (0+255),w,b
 10397  0009F2  11AF               	iorwf	(_state+1)& (0+255),w,b
 10398  0009F4  A4D8               	btfss	status,2,c
 10399  0009F6  D19D               	goto	i2l454
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;main.c: 934: if (temp == 'A'){
 10403  0009F8  0E41               	movlw	65
 10404  0009FA  1845               	xorwf	interruptHandler@temp,w,c
 10405  0009FC  A4D8               	btfss	status,2,c
 10406  0009FE  D004               	goto	i2l455
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;main.c: 935: state = prev_state;
 10410  000A00  C067  F0AE         	movff	_prev_state,_state
 10411  000A04  C068  F0AF         	movff	_prev_state+1,_state+1
 10412  000A08                     i2l455:
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;main.c: 936: }
 10416                           ;main.c: 938: if (temp == '1'){
 10417                           
 10418                           ; BSR set to: 0
 10419  000A08  0E31               	movlw	49
 10420  000A0A  1845               	xorwf	interruptHandler@temp,w,c
 10421  000A0C  A4D8               	btfss	status,2,c
 10422  000A0E  D01C               	goto	i2l456
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;main.c: 939: lcdInst(0xC0);;
 10426  000A10  0EC0               	movlw	192
 10427  000A12  EC84  F023         	call	i2_lcdInst
 10428                           
 10429                           ;main.c: 940: putch('B');
 10430  000A16  0E42               	movlw	66
 10431  000A18  EC7A  F023         	call	i2_putch
 10432                           
 10433                           ;main.c: 941: strcpy(temp_set,"B");
 10434  000A1C  0ECE               	movlw	low _temp_set
 10435  000A1E  6E07               	movwf	strcpy@to,c
 10436  000A20  0E01               	movlw	high _temp_set
 10437  000A22  6E08               	movwf	strcpy@to+1,c
 10438  000A24  0EFD               	movlw	low STR_66
 10439  000A26  6E09               	movwf	strcpy@from,c
 10440  000A28  0EFF               	movlw	high STR_66
 10441  000A2A  6E0A               	movwf	strcpy@from+1,c
 10442  000A2C  EC32  F022         	call	_strcpy	;wreg free
 10443                           
 10444                           ;main.c: 942: strcat(current_set,temp_set);
 10445  000A30  0EC3               	movlw	low _current_set
 10446  000A32  6E01               	movwf	strcat@to,c
 10447  000A34  0E00               	movlw	high _current_set
 10448  000A36  6E02               	movwf	strcat@to+1,c
 10449  000A38  0ECE               	movlw	low _temp_set
 10450  000A3A  6E03               	movwf	strcat@from,c
 10451  000A3C  0E01               	movlw	high _temp_set
 10452  000A3E  6E04               	movwf	strcat@from+1,c
 10453  000A40  EC98  F022         	call	_strcat	;wreg free
 10454                           
 10455                           ;main.c: 943: counter++;
 10456  000A44  4A6F               	infsnz	_counter,f,c
 10457  000A46  2A70               	incf	_counter+1,f,c
 10458  000A48                     i2l456:
 10459                           
 10460                           ;main.c: 944: }
 10461                           ;main.c: 946: if(temp == '2'){
 10462  000A48  0E32               	movlw	50
 10463  000A4A  1845               	xorwf	interruptHandler@temp,w,c
 10464  000A4C  A4D8               	btfss	status,2,c
 10465  000A4E  D01C               	goto	i2l457
 10466                           
 10467                           ;main.c: 947: lcdInst(0xC0);;
 10468  000A50  0EC0               	movlw	192
 10469  000A52  EC84  F023         	call	i2_lcdInst
 10470                           
 10471                           ;main.c: 948: putch('N');
 10472  000A56  0E4E               	movlw	78
 10473  000A58  EC7A  F023         	call	i2_putch
 10474                           
 10475                           ;main.c: 949: strcpy(temp_set,"N");
 10476  000A5C  0ECE               	movlw	low _temp_set
 10477  000A5E  6E07               	movwf	strcpy@to,c
 10478  000A60  0E01               	movlw	high _temp_set
 10479  000A62  6E08               	movwf	strcpy@to+1,c
 10480  000A64  0EEA               	movlw	low (STR_88+2)
 10481  000A66  6E09               	movwf	strcpy@from,c
 10482  000A68  0EFF               	movlw	high (STR_88+2)
 10483  000A6A  6E0A               	movwf	strcpy@from+1,c
 10484  000A6C  EC32  F022         	call	_strcpy	;wreg free
 10485                           
 10486                           ;main.c: 950: strcat(current_set,temp_set);
 10487  000A70  0EC3               	movlw	low _current_set
 10488  000A72  6E01               	movwf	strcat@to,c
 10489  000A74  0E00               	movlw	high _current_set
 10490  000A76  6E02               	movwf	strcat@to+1,c
 10491  000A78  0ECE               	movlw	low _temp_set
 10492  000A7A  6E03               	movwf	strcat@from,c
 10493  000A7C  0E01               	movlw	high _temp_set
 10494  000A7E  6E04               	movwf	strcat@from+1,c
 10495  000A80  EC98  F022         	call	_strcat	;wreg free
 10496                           
 10497                           ;main.c: 951: counter++;
 10498  000A84  4A6F               	infsnz	_counter,f,c
 10499  000A86  2A70               	incf	_counter+1,f,c
 10500  000A88                     i2l457:
 10501                           
 10502                           ;main.c: 952: }
 10503                           ;main.c: 954: if(temp == '3'){
 10504  000A88  0E33               	movlw	51
 10505  000A8A  1845               	xorwf	interruptHandler@temp,w,c
 10506  000A8C  A4D8               	btfss	status,2,c
 10507  000A8E  D01C               	goto	i2l458
 10508                           
 10509                           ;main.c: 955: lcdInst(0xC0);;
 10510  000A90  0EC0               	movlw	192
 10511  000A92  EC84  F023         	call	i2_lcdInst
 10512                           
 10513                           ;main.c: 956: putch('S');
 10514  000A96  0E53               	movlw	83
 10515  000A98  EC7A  F023         	call	i2_putch
 10516                           
 10517                           ;main.c: 958: strcpy(temp_set,"S");
 10518  000A9C  0ECE               	movlw	low _temp_set
 10519  000A9E  6E07               	movwf	strcpy@to,c
 10520  000AA0  0E01               	movlw	high _temp_set
 10521  000AA2  6E08               	movwf	strcpy@to+1,c
 10522  000AA4  0EEE               	movlw	low (STR_89+2)
 10523  000AA6  6E09               	movwf	strcpy@from,c
 10524  000AA8  0EFF               	movlw	high (STR_89+2)
 10525  000AAA  6E0A               	movwf	strcpy@from+1,c
 10526  000AAC  EC32  F022         	call	_strcpy	;wreg free
 10527                           
 10528                           ;main.c: 959: strcat(current_set,temp_set);
 10529  000AB0  0EC3               	movlw	low _current_set
 10530  000AB2  6E01               	movwf	strcat@to,c
 10531  000AB4  0E00               	movlw	high _current_set
 10532  000AB6  6E02               	movwf	strcat@to+1,c
 10533  000AB8  0ECE               	movlw	low _temp_set
 10534  000ABA  6E03               	movwf	strcat@from,c
 10535  000ABC  0E01               	movlw	high _temp_set
 10536  000ABE  6E04               	movwf	strcat@from+1,c
 10537  000AC0  EC98  F022         	call	_strcat	;wreg free
 10538                           
 10539                           ;main.c: 960: counter++;
 10540  000AC4  4A6F               	infsnz	_counter,f,c
 10541  000AC6  2A70               	incf	_counter+1,f,c
 10542  000AC8                     i2l458:
 10543                           
 10544                           ;main.c: 961: }
 10545                           ;main.c: 962: if (temp == '4'){
 10546  000AC8  0E34               	movlw	52
 10547  000ACA  1845               	xorwf	interruptHandler@temp,w,c
 10548  000ACC  A4D8               	btfss	status,2,c
 10549  000ACE  D01C               	goto	i2l459
 10550                           
 10551                           ;main.c: 963: lcdInst(0xC0);;
 10552  000AD0  0EC0               	movlw	192
 10553  000AD2  EC84  F023         	call	i2_lcdInst
 10554                           
 10555                           ;main.c: 964: putch('W');
 10556  000AD6  0E57               	movlw	87
 10557  000AD8  EC7A  F023         	call	i2_putch
 10558                           
 10559                           ;main.c: 966: strcpy(temp_set,"W");
 10560  000ADC  0ECE               	movlw	low _temp_set
 10561  000ADE  6E07               	movwf	strcpy@to,c
 10562  000AE0  0E01               	movlw	high _temp_set
 10563  000AE2  6E08               	movwf	strcpy@to+1,c
 10564  000AE4  0EF2               	movlw	low (STR_90+2)
 10565  000AE6  6E09               	movwf	strcpy@from,c
 10566  000AE8  0EFF               	movlw	high (STR_90+2)
 10567  000AEA  6E0A               	movwf	strcpy@from+1,c
 10568  000AEC  EC32  F022         	call	_strcpy	;wreg free
 10569                           
 10570                           ;main.c: 967: strcat(current_set,temp_set);
 10571  000AF0  0EC3               	movlw	low _current_set
 10572  000AF2  6E01               	movwf	strcat@to,c
 10573  000AF4  0E00               	movlw	high _current_set
 10574  000AF6  6E02               	movwf	strcat@to+1,c
 10575  000AF8  0ECE               	movlw	low _temp_set
 10576  000AFA  6E03               	movwf	strcat@from,c
 10577  000AFC  0E01               	movlw	high _temp_set
 10578  000AFE  6E04               	movwf	strcat@from+1,c
 10579  000B00  EC98  F022         	call	_strcat	;wreg free
 10580                           
 10581                           ;main.c: 969: counter++;
 10582  000B04  4A6F               	infsnz	_counter,f,c
 10583  000B06  2A70               	incf	_counter+1,f,c
 10584  000B08                     i2l459:
 10585                           
 10586                           ;main.c: 970: }
 10587                           ;main.c: 972: if (keys[keypress] == '*'){
 10588  000B08  5044               	movf	interruptHandler@keypress,w,c
 10589  000B0A  0D01               	mullw	1
 10590  000B0C  0E93               	movlw	low _keys
 10591  000B0E  24F3               	addwf	prodl,w,c
 10592  000B10  6EF6               	movwf	tblptrl,c
 10593  000B12  0EFC               	movlw	high _keys
 10594  000B14  20F4               	addwfc	prodh,w,c
 10595  000B16  6EF7               	movwf	tblptrh,c
 10596  000B18                     	if	1	;There are 3 active tblptr bytes
 10597  000B18  6AF8               	clrf	tblptru,c
 10598  000B1A  0E00               	movlw	low (__mediumconst shr (0+16))
 10599  000B1C  22F8               	addwfc	tblptru,f,c
 10600  000B1E                     	endif
 10601  000B1E  0008               	tblrd		*
 10602  000B20  50F5               	movf	tablat,w,c
 10603  000B22  0A2A               	xorlw	42
 10604  000B24  A4D8               	btfss	status,2,c
 10605  000B26  D0DA               	goto	i2l460
 10606                           
 10607                           ;main.c: 975: _delay((unsigned long)((500)*(32000000/4000.0)));
 10608  000B28  0E15               	movlw	21
 10609  000B2A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10610  000B2C  0E4B               	movlw	75
 10611  000B2E  6E2B               	movwf	??_interruptHandler& (0+255),c
 10612  000B30  0EBE               	movlw	190
 10613  000B32                     i2u593_47:
 10614  000B32  2EE8               	decfsz	wreg,f,c
 10615  000B34  D7FE               	bra	i2u593_47
 10616  000B36  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10617  000B38  D7FC               	bra	i2u593_47
 10618  000B3A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10619  000B3C  D7FA               	bra	i2u593_47
 10620  000B3E  D000               	nop2	
 10621                           
 10622                           ;main.c: 976: counter ++;
 10623  000B40  4A6F               	infsnz	_counter,f,c
 10624  000B42  2A70               	incf	_counter+1,f,c
 10625                           
 10626                           ;main.c: 977: for (int i=0;i<20;i++){
 10627  000B44  0E00               	movlw	0
 10628  000B46  6E43               	movwf	interruptHandler@i+1,c
 10629  000B48  0E00               	movlw	0
 10630  000B4A  6E42               	movwf	interruptHandler@i,c
 10631  000B4C  BE43               	btfsc	interruptHandler@i+1,7,c
 10632  000B4E  D008               	goto	i2l461
 10633  000B50  5043               	movf	interruptHandler@i+1,w,c
 10634  000B52  E105               	bnz	i2u474_40
 10635  000B54  0E14               	movlw	20
 10636  000B56  5C42               	subwf	interruptHandler@i,w,c
 10637  000B58  B0D8               	btfsc	status,0,c
 10638  000B5A  D089               	goto	i2u476_40
 10639  000B5C  D001               	goto	i2l461
 10640  000B5E                     i2u474_40:
 10641  000B5E  D087               	goto	i2u476_40
 10642  000B60                     i2l461:
 10643                           
 10644                           ;main.c: 978: if (strncmp(current_set,strs[i],4) == 0){
 10645  000B60  0EC3               	movlw	low _current_set
 10646  000B62  6E07               	movwf	strncmp@s1,c
 10647  000B64  0E00               	movlw	high _current_set
 10648  000B66  6E08               	movwf	strncmp@s1+1,c
 10649  000B68  C042  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 10650  000B6C  C043  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 10651  000B70  0E00               	movlw	0
 10652  000B72  6E04               	movwf	i2___wmul@multiplicand+1,c
 10653  000B74  0E05               	movlw	5
 10654  000B76  6E03               	movwf	i2___wmul@multiplicand,c
 10655  000B78  EC13  F023         	call	i2___wmul	;wreg free
 10656  000B7C  0EC6               	movlw	low _strs
 10657  000B7E  2401               	addwf	?i2___wmul,w,c
 10658  000B80  6E09               	movwf	strncmp@s2,c
 10659  000B82  0EFC               	movlw	high _strs
 10660  000B84  2002               	addwfc	?i2___wmul+1,w,c
 10661  000B86  6E0A               	movwf	strncmp@s2+1,c
 10662  000B88  0E00               	movlw	0
 10663  000B8A  6E0C               	movwf	strncmp@len+1,c
 10664  000B8C  0E04               	movlw	4
 10665  000B8E  6E0B               	movwf	strncmp@len,c
 10666  000B90  EC61  F01F         	call	_strncmp	;wreg free
 10667  000B94  5007               	movf	?_strncmp,w,c
 10668  000B96  1008               	iorwf	?_strncmp+1,w,c
 10669  000B98  A4D8               	btfss	status,2,c
 10670  000B9A  D062               	goto	i2l463
 10671                           
 10672                           ;main.c: 979: strcpy(final_set[counter_step],current_set);
 10673  000B9C  C06D  F001         	movff	_counter_step,i2___wmul@multiplier
 10674  000BA0  C06E  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 10675  000BA4  0E00               	movlw	0
 10676  000BA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 10677  000BA8  0E05               	movlw	5
 10678  000BAA  6E03               	movwf	i2___wmul@multiplicand,c
 10679  000BAC  EC13  F023         	call	i2___wmul	;wreg free
 10680  000BB0  0EA6               	movlw	low _final_set
 10681  000BB2  2401               	addwf	?i2___wmul,w,c
 10682  000BB4  6E07               	movwf	strcpy@to,c
 10683  000BB6  0E01               	movlw	high _final_set
 10684  000BB8  2002               	addwfc	?i2___wmul+1,w,c
 10685  000BBA  6E08               	movwf	strcpy@to+1,c
 10686  000BBC  0EC3               	movlw	low _current_set
 10687  000BBE  6E09               	movwf	strcpy@from,c
 10688  000BC0  0E00               	movlw	high _current_set
 10689  000BC2  6E0A               	movwf	strcpy@from+1,c
 10690  000BC4  EC32  F022         	call	_strcpy	;wreg free
 10691                           
 10692                           ;main.c: 980: strcpy(current_set2,current_set);
 10693  000BC8  0E78               	movlw	low _current_set2
 10694  000BCA  6E07               	movwf	strcpy@to,c
 10695  000BCC  0E00               	movlw	high _current_set2
 10696  000BCE  6E08               	movwf	strcpy@to+1,c
 10697  000BD0  0EC3               	movlw	low _current_set
 10698  000BD2  6E09               	movwf	strcpy@from,c
 10699  000BD4  0E00               	movlw	high _current_set
 10700  000BD6  6E0A               	movwf	strcpy@from+1,c
 10701  000BD8  EC32  F022         	call	_strcpy	;wreg free
 10702                           
 10703                           ;main.c: 983: valid = 1;
 10704  000BDC  0E00               	movlw	0
 10705  000BDE  6E6C               	movwf	_valid+1,c
 10706  000BE0  0E01               	movlw	1
 10707  000BE2  6E6B               	movwf	_valid,c
 10708                           
 10709                           ;main.c: 984: state = 2;
 10710  000BE4  0E00               	movlw	0
 10711  000BE6  0100               	movlb	0	; () banked
 10712  000BE8  6FAF               	movwf	(_state+1)& (0+255),b
 10713  000BEA  0E02               	movlw	2
 10714  000BEC  6FAE               	movwf	_state& (0+255),b
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;main.c: 986: initLCD();
 10718  000BEE  ECE7  F021         	call	i2_initLCD	;wreg free
 10719                           
 10720                           ;main.c: 987: printf("correct!");
 10721  000BF2  0E80               	movlw	low STR_70
 10722  000BF4  6E0D               	movwf	i2printf@f,c
 10723  000BF6  0EFF               	movlw	high STR_70
 10724  000BF8  6E0E               	movwf	i2printf@f+1,c
 10725  000BFA  EC3B  F018         	call	i2_printf	;wreg free
 10726                           
 10727                           ;main.c: 988: _delay((unsigned long)((500)*(32000000/4000.0)));
 10728  000BFE  0E15               	movlw	21
 10729  000C00  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10730  000C02  0E4B               	movlw	75
 10731  000C04  6E2B               	movwf	??_interruptHandler& (0+255),c
 10732  000C06  0EBE               	movlw	190
 10733  000C08                     i2u594_47:
 10734  000C08  2EE8               	decfsz	wreg,f,c
 10735  000C0A  D7FE               	bra	i2u594_47
 10736  000C0C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10737  000C0E  D7FC               	bra	i2u594_47
 10738  000C10  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10739  000C12  D7FA               	bra	i2u594_47
 10740  000C14  D000               	nop2	
 10741                           
 10742                           ;main.c: 990: printf("%s",current_set);
 10743  000C16  0EF8               	movlw	low STR_5
 10744  000C18  6E0D               	movwf	i2printf@f,c
 10745  000C1A  0EFF               	movlw	high STR_5
 10746  000C1C  6E0E               	movwf	i2printf@f+1,c
 10747  000C1E  0EC3               	movlw	low _current_set
 10748  000C20  6E0F               	movwf	?i2_printf+2,c
 10749  000C22  0E00               	movlw	high _current_set
 10750  000C24  6E10               	movwf	?i2_printf+3,c
 10751  000C26  EC3B  F018         	call	i2_printf	;wreg free
 10752                           
 10753                           ;main.c: 992: strcpy(current_set,"");
 10754  000C2A  0EC3               	movlw	low _current_set
 10755  000C2C  6E07               	movwf	strcpy@to,c
 10756  000C2E  0E00               	movlw	high _current_set
 10757  000C30  6E08               	movwf	strcpy@to+1,c
 10758  000C32  0E32               	movlw	low (STR_65+14)
 10759  000C34  6E09               	movwf	strcpy@from,c
 10760  000C36  0EFE               	movlw	high (STR_65+14)
 10761  000C38  6E0A               	movwf	strcpy@from+1,c
 10762  000C3A  EC32  F022         	call	_strcpy	;wreg free
 10763                           
 10764                           ;main.c: 993: _delay((unsigned long)((500)*(32000000/4000.0)));
 10765  000C3E  0E15               	movlw	21
 10766  000C40  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10767  000C42  0E4B               	movlw	75
 10768  000C44  6E2B               	movwf	??_interruptHandler& (0+255),c
 10769  000C46  0EBE               	movlw	190
 10770  000C48                     i2u595_47:
 10771  000C48  2EE8               	decfsz	wreg,f,c
 10772  000C4A  D7FE               	bra	i2u595_47
 10773  000C4C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10774  000C4E  D7FC               	bra	i2u595_47
 10775  000C50  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10776  000C52  D7FA               	bra	i2u595_47
 10777  000C54  D000               	nop2	
 10778                           
 10779                           ;main.c: 994: counter = 0;
 10780  000C56  0E00               	movlw	0
 10781  000C58  6E70               	movwf	_counter+1,c
 10782  000C5A  0E00               	movlw	0
 10783  000C5C  6E6F               	movwf	_counter,c
 10784                           
 10785                           ;main.c: 995: break;
 10786  000C5E  D007               	goto	i2u476_40
 10787  000C60                     i2l463:
 10788  000C60  4A42               	infsnz	interruptHandler@i,f,c
 10789  000C62  2A43               	incf	interruptHandler@i+1,f,c
 10790  000C64  BE43               	btfsc	interruptHandler@i+1,7,c
 10791  000C66  D77C               	goto	i2l461
 10792  000C68  5043               	movf	interruptHandler@i+1,w,c
 10793  000C6A  E101               	bnz	i2l6096
 10794  000C6C  D773               	goto	L5
 10795  000C6E                     i2u476_40:
 10796  000C6E                     i2l6096:
 10797                           
 10798                           ;main.c: 997: }
 10799                           ;main.c: 998: }
 10800                           ;main.c: 999: if (valid != 1){
 10801  000C6E  046B               	decf	_valid,w,c
 10802  000C70  106C               	iorwf	_valid+1,w,c
 10803  000C72  B4D8               	btfsc	status,2,c
 10804  000C74  D02F               	goto	i2l464
 10805                           
 10806                           ;main.c: 1001: initLCD();
 10807  000C76  ECE7  F021         	call	i2_initLCD	;wreg free
 10808                           
 10809                           ;main.c: 1002: printf("wrong set!");
 10810  000C7A  0E4A               	movlw	low STR_73
 10811  000C7C  6E0D               	movwf	i2printf@f,c
 10812  000C7E  0EFF               	movlw	high STR_73
 10813  000C80  6E0E               	movwf	i2printf@f+1,c
 10814  000C82  EC3B  F018         	call	i2_printf	;wreg free
 10815                           
 10816                           ;main.c: 1003: printf("%s",current_set);
 10817  000C86  0EF8               	movlw	low STR_5
 10818  000C88  6E0D               	movwf	i2printf@f,c
 10819  000C8A  0EFF               	movlw	high STR_5
 10820  000C8C  6E0E               	movwf	i2printf@f+1,c
 10821  000C8E  0EC3               	movlw	low _current_set
 10822  000C90  6E0F               	movwf	?i2_printf+2,c
 10823  000C92  0E00               	movlw	high _current_set
 10824  000C94  6E10               	movwf	?i2_printf+3,c
 10825  000C96  EC3B  F018         	call	i2_printf	;wreg free
 10826                           
 10827                           ;main.c: 1004: strcpy(current_set,"");
 10828  000C9A  0EC3               	movlw	low _current_set
 10829  000C9C  6E07               	movwf	strcpy@to,c
 10830  000C9E  0E00               	movlw	high _current_set
 10831  000CA0  6E08               	movwf	strcpy@to+1,c
 10832  000CA2  0E32               	movlw	low (STR_65+14)
 10833  000CA4  6E09               	movwf	strcpy@from,c
 10834  000CA6  0EFE               	movlw	high (STR_65+14)
 10835  000CA8  6E0A               	movwf	strcpy@from+1,c
 10836  000CAA  EC32  F022         	call	_strcpy	;wreg free
 10837                           
 10838                           ;main.c: 1005: _delay((unsigned long)((300)*(32000000/4000.0)));
 10839  000CAE  0E0D               	movlw	13
 10840  000CB0  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10841  000CB2  0E2D               	movlw	45
 10842  000CB4  6E2B               	movwf	??_interruptHandler& (0+255),c
 10843  000CB6  0ED8               	movlw	216
 10844  000CB8                     i2u596_47:
 10845  000CB8  2EE8               	decfsz	wreg,f,c
 10846  000CBA  D7FE               	bra	i2u596_47
 10847  000CBC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10848  000CBE  D7FC               	bra	i2u596_47
 10849  000CC0  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10850  000CC2  D7FA               	bra	i2u596_47
 10851                           
 10852                           ;main.c: 1006: counter = 0;
 10853  000CC4  0E00               	movlw	0
 10854  000CC6  6E70               	movwf	_counter+1,c
 10855  000CC8  0E00               	movlw	0
 10856  000CCA  6E6F               	movwf	_counter,c
 10857                           
 10858                           ;main.c: 1007: valid = 0;
 10859  000CCC  0E00               	movlw	0
 10860  000CCE  6E6C               	movwf	_valid+1,c
 10861  000CD0  0E00               	movlw	0
 10862  000CD2  6E6B               	movwf	_valid,c
 10863  000CD4                     i2l464:
 10864                           
 10865                           ;main.c: 1008: }
 10866                           ;main.c: 1009: valid = 0;
 10867  000CD4  0E00               	movlw	0
 10868  000CD6  6E6C               	movwf	_valid+1,c
 10869  000CD8  0E00               	movlw	0
 10870  000CDA  6E6B               	movwf	_valid,c
 10871  000CDC                     i2l460:
 10872                           
 10873                           ;main.c: 1011: }
 10874                           ;main.c: 1014: if (counter >= 5){
 10875  000CDC  BE70               	btfsc	_counter+1,7,c
 10876  000CDE  D162               	goto	i2l6208
 10877  000CE0  5070               	movf	_counter+1,w,c
 10878  000CE2  E104               	bnz	i2u478_40
 10879  000CE4  0E05               	movlw	5
 10880  000CE6  5C6F               	subwf	_counter,w,c
 10881  000CE8  A0D8               	btfss	status,0,c
 10882  000CEA  D15C               	goto	i2l6208
 10883  000CEC                     i2u478_40:
 10884                           
 10885                           ;main.c: 1016: initLCD();
 10886  000CEC  ECE7  F021         	call	i2_initLCD	;wreg free
 10887                           
 10888                           ;main.c: 1017: printf("wrong!");
 10889  000CF0  0EB3               	movlw	low STR_76
 10890  000CF2  6E0D               	movwf	i2printf@f,c
 10891  000CF4  0EFF               	movlw	high STR_76
 10892  000CF6  6E0E               	movwf	i2printf@f+1,c
 10893  000CF8  EC3B  F018         	call	i2_printf	;wreg free
 10894                           
 10895                           ;main.c: 1019: _delay((unsigned long)((500)*(32000000/4000.0)));
 10896  000CFC  0E15               	movlw	21
 10897  000CFE  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10898  000D00  0E4B               	movlw	75
 10899  000D02  6E2B               	movwf	??_interruptHandler& (0+255),c
 10900  000D04  0EBE               	movlw	190
 10901  000D06                     i2u597_47:
 10902  000D06  2EE8               	decfsz	wreg,f,c
 10903  000D08  D7FE               	bra	i2u597_47
 10904  000D0A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10905  000D0C  D7FC               	bra	i2u597_47
 10906  000D0E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10907  000D10  D7FA               	bra	i2u597_47
 10908  000D12  D000               	nop2	
 10909                           
 10910                           ;main.c: 1021: strcpy(current_set,"");
 10911  000D14  0EC3               	movlw	low _current_set
 10912  000D16  6E07               	movwf	strcpy@to,c
 10913  000D18  0E00               	movlw	high _current_set
 10914  000D1A  6E08               	movwf	strcpy@to+1,c
 10915  000D1C  0E32               	movlw	low (STR_65+14)
 10916  000D1E  6E09               	movwf	strcpy@from,c
 10917  000D20  0EFE               	movlw	high (STR_65+14)
 10918  000D22  6E0A               	movwf	strcpy@from+1,c
 10919  000D24  EC32  F022         	call	_strcpy	;wreg free
 10920                           
 10921                           ;main.c: 1024: counter = 0;
 10922  000D28  0E00               	movlw	0
 10923  000D2A  6E70               	movwf	_counter+1,c
 10924  000D2C  0E00               	movlw	0
 10925  000D2E  6E6F               	movwf	_counter,c
 10926  000D30  D139               	goto	i2l6208
 10927  000D32                     i2l454:
 10928                           
 10929                           ;main.c: 1029: }
 10930                           ;main.c: 1034: if (state ==2){
 10931  000D32  0E02               	movlw	2
 10932  000D34  0100               	movlb	0	; () banked
 10933  000D36  19AE               	xorwf	_state& (0+255),w,b
 10934  000D38  11AF               	iorwf	(_state+1)& (0+255),w,b
 10935  000D3A  A4D8               	btfss	status,2,c
 10936  000D3C  D11F               	goto	i2l482
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;main.c: 1035: counter = 0;
 10940  000D3E  0E00               	movlw	0
 10941  000D40  6E70               	movwf	_counter+1,c
 10942  000D42  0E00               	movlw	0
 10943  000D44  6E6F               	movwf	_counter,c
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;main.c: 1037: lcdInst(0xC0);;
 10947  000D46  0EC0               	movlw	192
 10948  000D48  EC84  F023         	call	i2_lcdInst
 10949                           
 10950                           ;main.c: 1038: putch(keys[keypress]);
 10951  000D4C  5044               	movf	interruptHandler@keypress,w,c
 10952  000D4E  0D01               	mullw	1
 10953  000D50  0E93               	movlw	low _keys
 10954  000D52  24F3               	addwf	prodl,w,c
 10955  000D54  6EF6               	movwf	tblptrl,c
 10956  000D56  0EFC               	movlw	high _keys
 10957  000D58  20F4               	addwfc	prodh,w,c
 10958  000D5A  6EF7               	movwf	tblptrh,c
 10959  000D5C                     	if	1	;There are 3 active tblptr bytes
 10960  000D5C  6AF8               	clrf	tblptru,c
 10961  000D5E  0E00               	movlw	low (__mediumconst shr (0+16))
 10962  000D60  22F8               	addwfc	tblptru,f,c
 10963  000D62                     	endif
 10964  000D62  0008               	tblrd		*
 10965  000D64  50F5               	movf	tablat,w,c
 10966  000D66  EC7A  F023         	call	i2_putch
 10967                           
 10968                           ;main.c: 1040: _delay((unsigned long)((500)*(32000000/4000.0)));
 10969  000D6A  0E15               	movlw	21
 10970  000D6C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10971  000D6E  0E4B               	movlw	75
 10972  000D70  6E2B               	movwf	??_interruptHandler& (0+255),c
 10973  000D72  0EBE               	movlw	190
 10974  000D74                     i2u598_47:
 10975  000D74  2EE8               	decfsz	wreg,f,c
 10976  000D76  D7FE               	bra	i2u598_47
 10977  000D78  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10978  000D7A  D7FC               	bra	i2u598_47
 10979  000D7C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10980  000D7E  D7FA               	bra	i2u598_47
 10981  000D80  D000               	nop2	
 10982                           
 10983                           ;main.c: 1042: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' 
      +                          ||keys[keypress] == '4'){
 10984  000D82  5044               	movf	interruptHandler@keypress,w,c
 10985  000D84  0D01               	mullw	1
 10986  000D86  0E93               	movlw	low _keys
 10987  000D88  24F3               	addwf	prodl,w,c
 10988  000D8A  6EF6               	movwf	tblptrl,c
 10989  000D8C  0EFC               	movlw	high _keys
 10990  000D8E  20F4               	addwfc	prodh,w,c
 10991  000D90  6EF7               	movwf	tblptrh,c
 10992  000D92                     	if	1	;There are 3 active tblptr bytes
 10993  000D92  6AF8               	clrf	tblptru,c
 10994  000D94  0E00               	movlw	low (__mediumconst shr (0+16))
 10995  000D96  22F8               	addwfc	tblptru,f,c
 10996  000D98                     	endif
 10997  000D98  0008               	tblrd		*
 10998  000D9A  50F5               	movf	tablat,w,c
 10999  000D9C  0A31               	xorlw	49
 11000  000D9E  B4D8               	btfsc	status,2,c
 11001  000DA0  D05B               	goto	i2l470
 11002  000DA2  5044               	movf	interruptHandler@keypress,w,c
 11003  000DA4  0D01               	mullw	1
 11004  000DA6  0E93               	movlw	low _keys
 11005  000DA8  24F3               	addwf	prodl,w,c
 11006  000DAA  6EF6               	movwf	tblptrl,c
 11007  000DAC  0EFC               	movlw	high _keys
 11008  000DAE  20F4               	addwfc	prodh,w,c
 11009  000DB0  6EF7               	movwf	tblptrh,c
 11010  000DB2                     	if	1	;There are 3 active tblptr bytes
 11011  000DB2  6AF8               	clrf	tblptru,c
 11012  000DB4  0E00               	movlw	low (__mediumconst shr (0+16))
 11013  000DB6  22F8               	addwfc	tblptru,f,c
 11014  000DB8                     	endif
 11015  000DB8  0008               	tblrd		*
 11016  000DBA  50F5               	movf	tablat,w,c
 11017  000DBC  0A32               	xorlw	50
 11018  000DBE  B4D8               	btfsc	status,2,c
 11019  000DC0  D04B               	goto	i2l470
 11020  000DC2  5044               	movf	interruptHandler@keypress,w,c
 11021  000DC4  0D01               	mullw	1
 11022  000DC6  0E93               	movlw	low _keys
 11023  000DC8  24F3               	addwf	prodl,w,c
 11024  000DCA  6EF6               	movwf	tblptrl,c
 11025  000DCC  0EFC               	movlw	high _keys
 11026  000DCE  20F4               	addwfc	prodh,w,c
 11027  000DD0  6EF7               	movwf	tblptrh,c
 11028  000DD2                     	if	1	;There are 3 active tblptr bytes
 11029  000DD2  6AF8               	clrf	tblptru,c
 11030  000DD4  0E00               	movlw	low (__mediumconst shr (0+16))
 11031  000DD6  22F8               	addwfc	tblptru,f,c
 11032  000DD8                     	endif
 11033  000DD8  0008               	tblrd		*
 11034  000DDA  50F5               	movf	tablat,w,c
 11035  000DDC  0A33               	xorlw	51
 11036  000DDE  B4D8               	btfsc	status,2,c
 11037  000DE0  D03B               	goto	i2l470
 11038  000DE2  5044               	movf	interruptHandler@keypress,w,c
 11039  000DE4  0D01               	mullw	1
 11040  000DE6  0E93               	movlw	low _keys
 11041  000DE8  24F3               	addwf	prodl,w,c
 11042  000DEA  6EF6               	movwf	tblptrl,c
 11043  000DEC  0EFC               	movlw	high _keys
 11044  000DEE  20F4               	addwfc	prodh,w,c
 11045  000DF0  6EF7               	movwf	tblptrh,c
 11046  000DF2                     	if	1	;There are 3 active tblptr bytes
 11047  000DF2  6AF8               	clrf	tblptru,c
 11048  000DF4  0E00               	movlw	low (__mediumconst shr (0+16))
 11049  000DF6  22F8               	addwfc	tblptru,f,c
 11050  000DF8                     	endif
 11051  000DF8  0008               	tblrd		*
 11052  000DFA  50F5               	movf	tablat,w,c
 11053  000DFC  0A34               	xorlw	52
 11054  000DFE  B4D8               	btfsc	status,2,c
 11055  000E00  D02B               	goto	i2l470
 11056  000E02  D0BC               	goto	i2l482
 11057  000E04                     
 11058                           ;main.c: 1046: number = 1;
 11059  000E04  0E00               	movlw	0
 11060  000E06  6E7E               	movwf	_number+1,c
 11061  000E08  0E01               	movlw	1
 11062  000E0A  D00F               	goto	L9
 11063  000E0C                     
 11064                           ;main.c: 1049: number = 2;
 11065  000E0C  0E00               	movlw	0
 11066  000E0E  6E7E               	movwf	_number+1,c
 11067  000E10  0E02               	movlw	2
 11068  000E12  D00B               	goto	L9
 11069  000E14                     
 11070                           ;main.c: 1052: number = 3;
 11071  000E14  0E00               	movlw	0
 11072  000E16  6E7E               	movwf	_number+1,c
 11073  000E18  0E03               	movlw	3
 11074  000E1A  D007               	goto	L9
 11075  000E1C                     
 11076                           ;main.c: 1055: number = 4;
 11077  000E1C  0E00               	movlw	0
 11078  000E1E  6E7E               	movwf	_number+1,c
 11079  000E20  0E04               	movlw	4
 11080  000E22  D003               	goto	L9
 11081  000E24                     
 11082                           ;main.c: 1058: number = 5;
 11083  000E24  0E00               	movlw	0
 11084  000E26  6E7E               	movwf	_number+1,c
 11085  000E28  0E05               	movlw	5
 11086  000E2A                     L9:
 11087  000E2A  6E7D               	movwf	_number,c
 11088                           
 11089                           ;main.c: 1059: break;
 11090  000E2C  D032               	goto	i2l472
 11091  000E2E                     
 11092                           ;main.c: 1061: initLCD();
 11093  000E2E  ECE7  F021         	call	i2_initLCD	;wreg free
 11094                           
 11095                           ;main.c: 1062: printf("Wrong input");
 11096  000E32  0E3E               	movlw	low STR_78
 11097  000E34  6E0D               	movwf	i2printf@f,c
 11098  000E36  0EFF               	movlw	high STR_78
 11099  000E38  6E0E               	movwf	i2printf@f+1,c
 11100  000E3A  EC3B  F018         	call	i2_printf	;wreg free
 11101                           
 11102                           ;main.c: 1063: _delay((unsigned long)((1000)*(32000000/4000.0)));
 11103  000E3E  0E29               	movlw	41
 11104  000E40  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11105  000E42  0E96               	movlw	150
 11106  000E44  6E2B               	movwf	??_interruptHandler& (0+255),c
 11107  000E46  0E7F               	movlw	127
 11108  000E48                     i2u599_47:
 11109  000E48  2EE8               	decfsz	wreg,f,c
 11110  000E4A  D7FE               	bra	i2u599_47
 11111  000E4C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11112  000E4E  D7FC               	bra	i2u599_47
 11113  000E50  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11114  000E52  D7FA               	bra	i2u599_47
 11115  000E54  F000               	nop	
 11116                           
 11117                           ;main.c: 1064: }
 11118  000E56  D01D               	goto	i2l472
 11119  000E58                     i2l470:
 11120  000E58  5044               	movf	interruptHandler@keypress,w,c
 11121  000E5A  0D01               	mullw	1
 11122  000E5C  0E93               	movlw	low _keys
 11123  000E5E  24F3               	addwf	prodl,w,c
 11124  000E60  6EF6               	movwf	tblptrl,c
 11125  000E62  0EFC               	movlw	high _keys
 11126  000E64  20F4               	addwfc	prodh,w,c
 11127  000E66  6EF7               	movwf	tblptrh,c
 11128  000E68                     	if	1	;There are 3 active tblptr bytes
 11129  000E68  6AF8               	clrf	tblptru,c
 11130  000E6A  0E00               	movlw	low (__mediumconst shr (0+16))
 11131  000E6C  22F8               	addwfc	tblptru,f,c
 11132  000E6E                     	endif
 11133  000E6E  0008               	tblrd		*
 11134  000E70  50F5               	movf	tablat,w,c
 11135                           
 11136                           ; Switch size 1, requested type "space"
 11137                           ; Number of cases is 5, Range of values is 49 to 53
 11138                           ; switch strategies available:
 11139                           ; Name         Instructions Cycles
 11140                           ; simple_byte           16     9 (average)
 11141                           ;	Chosen strategy is simple_byte
 11142  000E72  0A31               	xorlw	49	; case 49
 11143  000E74  B4D8               	btfsc	status,2,c
 11144  000E76  D7C6               	goto	i2l471
 11145  000E78  0A03               	xorlw	3	; case 50
 11146  000E7A  B4D8               	btfsc	status,2,c
 11147  000E7C  D7C7               	goto	i2l473
 11148  000E7E  0A01               	xorlw	1	; case 51
 11149  000E80  B4D8               	btfsc	status,2,c
 11150  000E82  D7C8               	goto	i2l474
 11151  000E84  0A07               	xorlw	7	; case 52
 11152  000E86  B4D8               	btfsc	status,2,c
 11153  000E88  D7C9               	goto	i2l475
 11154  000E8A  0A01               	xorlw	1	; case 53
 11155  000E8C  B4D8               	btfsc	status,2,c
 11156  000E8E  D7CA               	goto	i2l476
 11157  000E90  D7CE               	goto	i2l477
 11158  000E92                     i2l472:
 11159                           
 11160                           ;main.c: 1067: is_valid();
 11161  000E92  ECF9  F007         	call	_is_valid	;wreg free
 11162                           
 11163                           ;main.c: 1069: if ( check() == 0){
 11164  000E96  ECDE  F020         	call	_check	;wreg free
 11165  000E9A  5001               	movf	?_check,w,c
 11166  000E9C  1002               	iorwf	?_check+1,w,c
 11167  000E9E  A4D8               	btfss	status,2,c
 11168  000EA0  D028               	goto	i2l478
 11169                           
 11170                           ;main.c: 1070: initLCD();
 11171  000EA2  ECE7  F021         	call	i2_initLCD	;wreg free
 11172                           
 11173                           ;main.c: 1071: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 11174  000EA6  0E80               	movlw	128
 11175  000EA8  EC84  F023         	call	i2_lcdInst
 11176  000EAC  0E34               	movlw	52
 11177  000EAE  6E2B               	movwf	??_interruptHandler& (0+255),c
 11178  000EB0  0EF2               	movlw	242
 11179  000EB2                     i2u600_47:
 11180  000EB2  2EE8               	decfsz	wreg,f,c
 11181  000EB4  D7FE               	bra	i2u600_47
 11182  000EB6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11183  000EB8  D7FC               	bra	i2u600_47
 11184                           
 11185                           ;main.c: 1072: printf("TOO MANY");
 11186  000EBA  0E92               	movlw	low STR_79
 11187  000EBC  6E0D               	movwf	i2printf@f,c
 11188  000EBE  0EFF               	movlw	high STR_79
 11189  000EC0  6E0E               	movwf	i2printf@f+1,c
 11190  000EC2  EC3B  F018         	call	i2_printf	;wreg free
 11191                           
 11192                           ;main.c: 1074: _delay((unsigned long)((500)*(32000000/4000.0)));
 11193  000EC6  0E15               	movlw	21
 11194  000EC8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11195  000ECA  0E4B               	movlw	75
 11196  000ECC  6E2B               	movwf	??_interruptHandler& (0+255),c
 11197  000ECE  0EBE               	movlw	190
 11198  000ED0                     i2u601_47:
 11199  000ED0  2EE8               	decfsz	wreg,f,c
 11200  000ED2  D7FE               	bra	i2u601_47
 11201  000ED4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11202  000ED6  D7FC               	bra	i2u601_47
 11203  000ED8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11204  000EDA  D7FA               	bra	i2u601_47
 11205  000EDC  D000               	nop2	
 11206                           
 11207                           ;main.c: 1075: state = 2;
 11208  000EDE  0E00               	movlw	0
 11209  000EE0  0100               	movlb	0	; () banked
 11210  000EE2  6FAF               	movwf	(_state+1)& (0+255),b
 11211  000EE4  0E02               	movlw	2
 11212  000EE6  6FAE               	movwf	_state& (0+255),b
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;main.c: 1076: number = 0;
 11216  000EE8  0E00               	movlw	0
 11217  000EEA  6E7E               	movwf	_number+1,c
 11218  000EEC  0E00               	movlw	0
 11219  000EEE  6E7D               	movwf	_number,c
 11220                           
 11221                           ;main.c: 1077: }
 11222  000EF0  D045               	goto	i2l482
 11223  000EF2                     i2l478:
 11224                           
 11225                           ;main.c: 1080: else if (counter_step >= assembly_step-1){
 11226                           
 11227                           ; BSR set to: 0
 11228  000EF2  0EFF               	movlw	255
 11229  000EF4  6E2B               	movwf	??_interruptHandler& (0+255),c
 11230  000EF6  0EFF               	movlw	255
 11231  000EF8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11232  000EFA  C0AC  F02D         	movff	_assembly_step,??_interruptHandler+2
 11233  000EFE  C0AD  F02E         	movff	_assembly_step+1,??_interruptHandler+3
 11234  000F02  502B               	movf	??_interruptHandler,w,c
 11235  000F04  262D               	addwf	??_interruptHandler+2,f,c
 11236  000F06  502C               	movf	??_interruptHandler+1,w,c
 11237  000F08  222E               	addwfc	??_interruptHandler+3,f,c
 11238  000F0A  502D               	movf	??_interruptHandler+2,w,c
 11239  000F0C  5C6D               	subwf	_counter_step,w,c
 11240  000F0E  506E               	movf	_counter_step+1,w,c
 11241  000F10  0A80               	xorlw	128
 11242  000F12  6E2F               	movwf	(??_interruptHandler+4)& (0+255),c
 11243  000F14  502E               	movf	??_interruptHandler+3,w,c
 11244  000F16  0A80               	xorlw	128
 11245  000F18  582F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11246  000F1A  A0D8               	btfss	status,0,c
 11247  000F1C  D013               	goto	i2l480
 11248                           
 11249                           ;main.c: 1081: final_number[counter_step] = number;
 11250  000F1E  90D8               	bcf	status,0,c
 11251  000F20  346D               	rlcf	_counter_step,w,c
 11252  000F22  6ED9               	movwf	fsr2l,c
 11253  000F24  346E               	rlcf	_counter_step+1,w,c
 11254  000F26  6EDA               	movwf	fsr2h,c
 11255  000F28  0E50               	movlw	low _final_number
 11256  000F2A  26D9               	addwf	fsr2l,f,c
 11257  000F2C  0E01               	movlw	high _final_number
 11258  000F2E  22DA               	addwfc	fsr2h,f,c
 11259  000F30  C07D  FFDE         	movff	_number,postinc2
 11260  000F34  C07E  FFDD         	movff	_number+1,postdec2
 11261                           
 11262                           ;main.c: 1082: state = 3;
 11263  000F38  0E00               	movlw	0
 11264  000F3A  0100               	movlb	0	; () banked
 11265  000F3C  6FAF               	movwf	(_state+1)& (0+255),b
 11266  000F3E  0E03               	movlw	3
 11267  000F40  6FAE               	movwf	_state& (0+255),b
 11268                           
 11269                           ;main.c: 1083: }
 11270  000F42  D01C               	goto	i2l482
 11271  000F44                     i2l480:
 11272                           
 11273                           ;main.c: 1084: else if ( check() == 1){
 11274                           
 11275                           ; BSR set to: 0
 11276  000F44  ECDE  F020         	call	_check	;wreg free
 11277  000F48  0401               	decf	?_check,w,c
 11278  000F4A  1002               	iorwf	?_check+1,w,c
 11279  000F4C  A4D8               	btfss	status,2,c
 11280  000F4E  D016               	goto	i2l482
 11281                           
 11282                           ;main.c: 1085: state = 1;
 11283  000F50  0E00               	movlw	0
 11284  000F52  0100               	movlb	0	; () banked
 11285  000F54  6FAF               	movwf	(_state+1)& (0+255),b
 11286  000F56  0E01               	movlw	1
 11287  000F58  6FAE               	movwf	_state& (0+255),b
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;main.c: 1086: initLCD();
 11291  000F5A  ECE7  F021         	call	i2_initLCD	;wreg free
 11292                           
 11293                           ;main.c: 1089: final_number[counter_step] = number;
 11294  000F5E  90D8               	bcf	status,0,c
 11295  000F60  346D               	rlcf	_counter_step,w,c
 11296  000F62  6ED9               	movwf	fsr2l,c
 11297  000F64  346E               	rlcf	_counter_step+1,w,c
 11298  000F66  6EDA               	movwf	fsr2h,c
 11299  000F68  0E50               	movlw	low _final_number
 11300  000F6A  26D9               	addwf	fsr2l,f,c
 11301  000F6C  0E01               	movlw	high _final_number
 11302  000F6E  22DA               	addwfc	fsr2h,f,c
 11303  000F70  C07D  FFDE         	movff	_number,postinc2
 11304  000F74  C07E  FFDD         	movff	_number+1,postdec2
 11305                           
 11306                           ;main.c: 1090: counter_step++;
 11307  000F78  4A6D               	infsnz	_counter_step,f,c
 11308  000F7A  2A6E               	incf	_counter_step+1,f,c
 11309  000F7C                     i2l482:
 11310                           
 11311                           ;main.c: 1091: }
 11312                           ;main.c: 1094: }
 11313                           ;main.c: 1096: }
 11314                           ;main.c: 1103: B=0;N=0;S=0;W=0;
 11315  000F7C  0E00               	movlw	0
 11316  000F7E  6E66               	movwf	_B+1,c
 11317  000F80  0E00               	movlw	0
 11318  000F82  6E65               	movwf	_B,c
 11319  000F84  0E00               	movlw	0
 11320  000F86  6E64               	movwf	_N+1,c
 11321  000F88  0E00               	movlw	0
 11322  000F8A  6E63               	movwf	_N,c
 11323  000F8C  0E00               	movlw	0
 11324  000F8E  6E62               	movwf	_S+1,c
 11325  000F90  0E00               	movlw	0
 11326  000F92  6E61               	movwf	_S,c
 11327  000F94  0E00               	movlw	0
 11328  000F96  6E60               	movwf	_W+1,c
 11329  000F98  0E00               	movlw	0
 11330  000F9A  6E5F               	movwf	_W,c
 11331                           
 11332                           ;main.c: 1104: total_number = 0;
 11333  000F9C  0E00               	movlw	0
 11334  000F9E  6E6A               	movwf	_total_number+1,c
 11335  000FA0  0E00               	movlw	0
 11336  000FA2  6E69               	movwf	_total_number,c
 11337  000FA4                     i2l6208:
 11338                           
 11339                           ;main.c: 1106: INT1IF = 0;
 11340  000FA4  90F0               	bcf	intcon3,0,c	;volatile
 11341  000FA6                     i2l6210:
 11342                           
 11343                           ;main.c: 1107: return;
 11344  000FA6  C041  F082         	movff	??_interruptHandler+22,btemp+3
 11345  000FAA  C040  F081         	movff	??_interruptHandler+21,btemp+2
 11346  000FAE  C03F  F080         	movff	??_interruptHandler+20,btemp+1
 11347  000FB2  C03E  F07F         	movff	??_interruptHandler+19,btemp
 11348  000FB6  C03D  FFF5         	movff	??_interruptHandler+18,tablat
 11349  000FBA  C03C  FFF8         	movff	??_interruptHandler+17,tblptru
 11350  000FBE  C03B  FFF7         	movff	??_interruptHandler+16,tblptrh
 11351  000FC2  C03A  FFF6         	movff	??_interruptHandler+15,tblptrl
 11352  000FC6  C039  FFF4         	movff	??_interruptHandler+14,prodh
 11353  000FCA  C038  FFF3         	movff	??_interruptHandler+13,prodl
 11354  000FCE  C037  FFDA         	movff	??_interruptHandler+12,fsr2h
 11355  000FD2  C036  FFD9         	movff	??_interruptHandler+11,fsr2l
 11356  000FD6  C035  FFE2         	movff	??_interruptHandler+10,fsr1h
 11357  000FDA  C034  FFE1         	movff	??_interruptHandler+9,fsr1l
 11358  000FDE  C033  FFEA         	movff	??_interruptHandler+8,fsr0h
 11359  000FE2  C032  FFE9         	movff	??_interruptHandler+7,fsr0l
 11360  000FE6  C031  FFFB         	movff	??_interruptHandler+6,pclatu
 11361  000FEA  C030  FFFA         	movff	??_interruptHandler+5,pclath
 11362  000FEE  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11363  000FF0  0011               	retfie		f
 11364  000FF2                     __end_of_interruptHandler:
 11365                           	opt stack 0
 11366                           pclatu	equ	0xFFB
 11367                           pclath	equ	0xFFA
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           intcon3	equ	0xFF0
 11376                           indf0	equ	0xFEF
 11377                           postinc0	equ	0xFEE
 11378                           fsr0h	equ	0xFEA
 11379                           fsr0l	equ	0xFE9
 11380                           wreg	equ	0xFE8
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           
 11391 ;; *************** function i2_printf *****************
 11392 ;; Defined at:
 11393 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11396 ;;		 -> STR_80(3), STR_79(9), STR_78(12), STR_76(7), 
 11397 ;;		 -> STR_74(3), STR_73(11), STR_71(3), STR_70(9), 
 11398 ;;		 -> STR_65(15), STR_64(12), STR_63(9), STR_62(16), 
 11399 ;;		 -> STR_61(17), STR_60(17), STR_59(14), STR_58(15), 
 11400 ;;		 -> STR_57(15), STR_56(15), STR_55(15), STR_54(15), 
 11401 ;;		 -> STR_53(20), STR_52(17), STR_51(13), STR_50(16), 
 11402 ;;		 -> STR_49(15), STR_48(15), STR_47(15), STR_46(15), 
 11403 ;;		 -> STR_45(10), STR_44(19), STR_43(17), STR_42(12), 
 11404 ;;		 -> STR_41(17), STR_40(17), STR_39(14), STR_38(15), 
 11405 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(9), 
 11406 ;;		 -> STR_33(20), STR_32(3), STR_31(3), STR_30(21), 
 11407 ;;		 -> STR_29(11), STR_28(13), STR_27(18), STR_26(11), 
 11408 ;;		 -> STR_25(13), STR_24(19), STR_23(11), STR_22(13), 
 11409 ;;		 -> STR_21(15), STR_20(12), STR_19(7), STR_18(14), 
 11410 ;;		 -> STR_17(14), STR_16(16), STR_15(14), STR_14(3), 
 11411 ;;		 -> STR_13(2), STR_12(3), STR_11(2), STR_10(3), 
 11412 ;;		 -> STR_9(5), STR_8(17), STR_7(6), STR_6(8), 
 11413 ;;		 -> STR_5(3), STR_4(14), STR_3(15), STR_2(14), 
 11414 ;;		 -> STR_1(16), 
 11415 ;; Auto vars:     Size  Location     Type
 11416 ;;  printf          4    0        struct .
 11417 ;;  printf          2   39[COMRAM] int 
 11418 ;;  printf          2   36[COMRAM] unsigned int 
 11419 ;;  printf          2   34[COMRAM] unsigned int 
 11420 ;;  printf          2   32[COMRAM] PTR void [1]
 11421 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11422 ;;  printf          2   30[COMRAM] PTR const unsigned char 
 11423 ;;		 -> STR_101(7), number(2), final_set(40), current_set(5), 
 11424 ;;  printf          1   41[COMRAM] char 
 11425 ;;  printf          1   38[COMRAM] unsigned char 
 11426 ;;  printf          1   29[COMRAM] char 
 11427 ;;  printf          1   28[COMRAM] unsigned char 
 11428 ;; Return value:  Size  Location     Type
 11429 ;;                  2   12[COMRAM] int 
 11430 ;; Registers used:
 11431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11437 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;Total ram usage:       30 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    2
 11444 ;; This function calls:
 11445 ;;		i2___lwdiv
 11446 ;;		i2___lwmod
 11447 ;;		i2___wmul
 11448 ;;		i2_isdigit
 11449 ;;		i2_putch
 11450 ;; This function is called by:
 11451 ;;		_interruptHandler
 11452 ;; This function uses a non-reentrant model
 11453 ;;
 11454                           
 11455                           	psect	text25
 11456  003076                     __ptext25:
 11457                           	opt stack 0
 11458  003076                     i2_printf:
 11459                           	opt stack 24
 11460                           
 11461                           ;doprnt.c: 466: va_list ap;
 11462                           ;doprnt.c: 499: signed char c;
 11463                           ;doprnt.c: 501: int width;
 11464                           ;doprnt.c: 506: signed char prec;
 11465                           ;doprnt.c: 508: unsigned char flag;
 11466                           ;doprnt.c: 523: union {
 11467                           ;doprnt.c: 524: unsigned long vd;
 11468                           ;doprnt.c: 525: double integ;
 11469                           ;doprnt.c: 526: } tmpval;
 11470                           ;doprnt.c: 528: unsigned int val;
 11471                           ;doprnt.c: 529: unsigned len;
 11472                           ;doprnt.c: 530: const char * cp;
 11473                           ;doprnt.c: 533: *ap = __va_start();
 11474                           
 11475                           ;incstack = 0
 11476  003076  0E0F               	movlw	low (?i2_printf+2)
 11477  003078  6E21               	movwf	i2printf@ap,c
 11478  00307A  0E00               	movlw	high (?i2_printf+2)
 11479  00307C  6E22               	movwf	i2printf@ap+1,c
 11480                           
 11481                           ;doprnt.c: 536: while(c = *f++) {
 11482  00307E  D1FA               	goto	i2u396_40
 11483  003080                     
 11484                           ;doprnt.c: 538: if(c != '%')
 11485  003080  0E25               	movlw	37
 11486  003082  182A               	xorwf	i2printf@c,w,c
 11487  003084  B4D8               	btfsc	status,2,c
 11488  003086  D004               	goto	i2l850
 11489                           
 11490                           ;doprnt.c: 540: {
 11491                           ;doprnt.c: 541: (putch(c) );
 11492  003088  502A               	movf	i2printf@c,w,c
 11493  00308A  EC7A  F023         	call	i2_putch
 11494                           
 11495                           ;doprnt.c: 542: continue;
 11496  00308E  D1F2               	goto	i2u396_40
 11497  003090                     i2l850:
 11498                           
 11499                           ;doprnt.c: 543: }
 11500                           ;doprnt.c: 546: width = 0;
 11501  003090  0E00               	movlw	0
 11502  003092  6E29               	movwf	i2printf@width+1,c
 11503  003094  0E00               	movlw	0
 11504  003096  6E28               	movwf	i2printf@width,c
 11505                           
 11506                           ;doprnt.c: 548: flag = 0;
 11507  003098  0E00               	movlw	0
 11508  00309A  6E27               	movwf	i2printf@flag,c
 11509                           
 11510                           ;doprnt.c: 551: switch(*f) {
 11511                           
 11512                           ;doprnt.c: 550: for(;;) {
 11513  00309C  D003               	goto	i2l852
 11514  00309E                     
 11515                           ;doprnt.c: 580: flag |= 0x04;
 11516  00309E  8427               	bsf	i2printf@flag,2,c
 11517                           
 11518                           ;doprnt.c: 581: f++;
 11519  0030A0  4A0D               	infsnz	i2printf@f,f,c
 11520  0030A2  2A0E               	incf	i2printf@f+1,f,c
 11521  0030A4                     i2l852:
 11522  0030A4  C00D  FFF6         	movff	i2printf@f,tblptrl
 11523  0030A8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11524  0030AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11525  0030AC  6AF8               	clrf	tblptru,c
 11526  0030AE                     	endif
 11527  0030AE                     	if	0	;tblptru may be non-zero
 11528  0030AE                     	endif
 11529  0030AE  0008               	tblrd		*
 11530  0030B0  50F5               	movf	tablat,w,c
 11531                           
 11532                           ; Switch size 1, requested type "space"
 11533                           ; Number of cases is 1, Range of values is 48 to 48
 11534                           ; switch strategies available:
 11535                           ; Name         Instructions Cycles
 11536                           ; simple_byte            4     3 (average)
 11537                           ;	Chosen strategy is simple_byte
 11538  0030B2  0A30               	xorlw	48	; case 48
 11539  0030B4  B4D8               	btfsc	status,2,c
 11540  0030B6  D7F3               	goto	i2l853
 11541                           
 11542                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11543                           
 11544                           ;doprnt.c: 586: }
 11545                           
 11546                           ;doprnt.c: 585: break;
 11547  0030B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 11548  0030BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11549  0030C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11550  0030C0  6AF8               	clrf	tblptru,c
 11551  0030C2                     	endif
 11552  0030C2                     	if	0	;tblptru may be non-zero
 11553  0030C2                     	endif
 11554  0030C2  0008               	tblrd		*
 11555  0030C4  50F5               	movf	tablat,w,c
 11556  0030C6  EC49  F023         	call	i2_isdigit
 11557  0030CA  A0D8               	btfss	status,0,c
 11558  0030CC  D0A6               	goto	i2l860
 11559                           
 11560                           ;doprnt.c: 598: width = 0;
 11561  0030CE  0E00               	movlw	0
 11562  0030D0  6E29               	movwf	i2printf@width+1,c
 11563  0030D2  0E00               	movlw	0
 11564  0030D4  6E28               	movwf	i2printf@width,c
 11565  0030D6                     
 11566                           ;doprnt.c: 600: width *= 10;
 11567  0030D6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11568  0030DA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11569  0030DE  0E00               	movlw	0
 11570  0030E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11571  0030E2  0E0A               	movlw	10
 11572  0030E4  6E03               	movwf	i2___wmul@multiplicand,c
 11573  0030E6  EC13  F023         	call	i2___wmul	;wreg free
 11574  0030EA  C001  F028         	movff	?i2___wmul,i2printf@width
 11575  0030EE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11576                           
 11577                           ;doprnt.c: 601: width += *f++ - '0';
 11578  0030F2  0ED0               	movlw	208
 11579  0030F4  6E19               	movwf	??i2_printf& (0+255),c
 11580  0030F6  0EFF               	movlw	255
 11581  0030F8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11582  0030FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 11583  0030FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11584  003102                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11585  003102  6AF8               	clrf	tblptru,c
 11586  003104                     	endif
 11587  003104                     	if	0	;tblptru may be non-zero
 11588  003104                     	endif
 11589  003104  0008               	tblrd		*
 11590  003106  50F5               	movf	tablat,w,c
 11591  003108  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11592  00310A  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11593  00310C  5019               	movf	??i2_printf,w,c
 11594  00310E  261B               	addwf	??i2_printf+2,f,c
 11595  003110  501A               	movf	??i2_printf+1,w,c
 11596  003112  221C               	addwfc	??i2_printf+3,f,c
 11597  003114  501B               	movf	??i2_printf+2,w,c
 11598  003116  2628               	addwf	i2printf@width,f,c
 11599  003118  501C               	movf	??i2_printf+3,w,c
 11600  00311A  2229               	addwfc	i2printf@width+1,f,c
 11601  00311C  4A0D               	infsnz	i2printf@f,f,c
 11602  00311E  2A0E               	incf	i2printf@f+1,f,c
 11603                           
 11604                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11605  003120  C00D  FFF6         	movff	i2printf@f,tblptrl
 11606  003124  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11607  003128                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11608  003128  6AF8               	clrf	tblptru,c
 11609  00312A                     	endif
 11610  00312A                     	if	0	;tblptru may be non-zero
 11611  00312A                     	endif
 11612  00312A  0008               	tblrd		*
 11613  00312C  50F5               	movf	tablat,w,c
 11614  00312E  EC49  F023         	call	i2_isdigit
 11615  003132  A0D8               	btfss	status,0,c
 11616  003134  D072               	goto	i2l860
 11617  003136  D7CF               	goto	i2l858
 11618  003138                     
 11619                           ;doprnt.c: 721: flag |= 0x80;
 11620  003138  8E27               	bsf	i2printf@flag,7,c
 11621                           
 11622                           ;doprnt.c: 723: break;
 11623  00313A  D08A               	goto	i2l865
 11624  00313C                     
 11625                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11626  00313C  C021  FFD9         	movff	i2printf@ap,fsr2l
 11627  003140  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11628  003144  CFDE F01F          	movff	postinc2,i2printf@cp
 11629  003148  CFDD F020          	movff	postdec2,i2printf@cp+1
 11630  00314C  0E02               	movlw	2
 11631  00314E  2621               	addwf	i2printf@ap,f,c
 11632  003150  0E00               	movlw	0
 11633  003152  2222               	addwfc	i2printf@ap+1,f,c
 11634                           
 11635                           ;doprnt.c: 740: if(!cp)
 11636  003154  501F               	movf	i2printf@cp,w,c
 11637  003156  1020               	iorwf	i2printf@cp+1,w,c
 11638  003158  A4D8               	btfss	status,2,c
 11639  00315A  D004               	goto	i2l868
 11640                           
 11641                           ;doprnt.c: 741: cp = "(null)";
 11642  00315C  0EAC               	movlw	low STR_101
 11643  00315E  6E1F               	movwf	i2printf@cp,c
 11644  003160  0EFF               	movlw	high STR_101
 11645  003162  6E20               	movwf	i2printf@cp+1,c
 11646  003164                     i2l868:
 11647                           
 11648                           ;doprnt.c: 745: len = 0;
 11649  003164  0E00               	movlw	0
 11650  003166  6E24               	movwf	i2printf@len+1,c
 11651  003168  0E00               	movlw	0
 11652  00316A  6E23               	movwf	i2printf@len,c
 11653                           
 11654                           ;doprnt.c: 746: while(cp[len])
 11655  00316C  D002               	goto	i2l869
 11656  00316E                     
 11657                           ;doprnt.c: 747: len++;
 11658  00316E  4A23               	infsnz	i2printf@len,f,c
 11659  003170  2A24               	incf	i2printf@len+1,f,c
 11660  003172                     i2l869:
 11661  003172  5023               	movf	i2printf@len,w,c
 11662  003174  241F               	addwf	i2printf@cp,w,c
 11663  003176  6E19               	movwf	??i2_printf& (0+255),c
 11664  003178  5024               	movf	i2printf@len+1,w,c
 11665  00317A  2020               	addwfc	i2printf@cp+1,w,c
 11666  00317C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11667  00317E  C019  FFF6         	movff	??i2_printf,tblptrl
 11668  003182  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11669  003186  0E00               	movlw	low (__mediumconst shr (0+16))
 11670  003188  6EF8               	movwf	tblptru,c
 11671  00318A  0E0F               	movlw	(high __ramtop+-1)
 11672  00318C  64F7               	cpfsgt	tblptrh,c
 11673  00318E  D003               	bra	i2u372_47
 11674  003190  0008               	tblrd		*
 11675  003192  50F5               	movf	tablat,w,c
 11676  003194  D005               	bra	i2u372_40
 11677  003196                     i2u372_47:
 11678  003196  CFF6 FFE9          	movff	tblptrl,fsr0l
 11679  00319A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11680  00319E  50EF               	movf	indf0,w,c
 11681  0031A0                     i2u372_40:
 11682  0031A0  0900               	iorlw	0
 11683  0031A2  A4D8               	btfss	status,2,c
 11684  0031A4  D7E4               	goto	i2l870
 11685                           
 11686                           ;doprnt.c: 757: if(width > len)
 11687  0031A6  5028               	movf	i2printf@width,w,c
 11688  0031A8  5C23               	subwf	i2printf@len,w,c
 11689  0031AA  5029               	movf	i2printf@width+1,w,c
 11690  0031AC  5824               	subwfb	i2printf@len+1,w,c
 11691  0031AE  B0D8               	btfsc	status,0,c
 11692  0031B0  D005               	goto	i2l872
 11693                           
 11694                           ;doprnt.c: 758: width -= len;
 11695  0031B2  5023               	movf	i2printf@len,w,c
 11696  0031B4  5E28               	subwf	i2printf@width,f,c
 11697  0031B6  5024               	movf	i2printf@len+1,w,c
 11698  0031B8  5A29               	subwfb	i2printf@width+1,f,c
 11699  0031BA  D008               	goto	i2l874
 11700  0031BC                     i2l872:
 11701                           
 11702                           ;doprnt.c: 759: else
 11703                           ;doprnt.c: 760: width = 0;
 11704  0031BC  0E00               	movlw	0
 11705  0031BE  6E29               	movwf	i2printf@width+1,c
 11706  0031C0  0E00               	movlw	0
 11707  0031C2  6E28               	movwf	i2printf@width,c
 11708                           
 11709                           ;doprnt.c: 764: while(width--)
 11710  0031C4  D003               	goto	i2l874
 11711  0031C6                     i2l5006:
 11712                           
 11713                           ;doprnt.c: 765: (putch(' ') );
 11714  0031C6  0E20               	movlw	32
 11715  0031C8  EC7A  F023         	call	i2_putch
 11716  0031CC                     i2l874:
 11717  0031CC  0628               	decf	i2printf@width,f,c
 11718  0031CE  A0D8               	btfss	status,0,c
 11719  0031D0  0629               	decf	i2printf@width+1,f,c
 11720  0031D2  2828               	incf	i2printf@width,w,c
 11721  0031D4  E1F8               	bnz	i2l5006
 11722  0031D6  2829               	incf	i2printf@width+1,w,c
 11723  0031D8  B4D8               	btfsc	status,2,c
 11724  0031DA  D016               	goto	i2l877
 11725  0031DC  D7F4               	goto	i2l875
 11726  0031DE                     i2l5010:
 11727                           
 11728                           ;doprnt.c: 768: (putch(*cp++) );
 11729  0031DE  C01F  FFF6         	movff	i2printf@cp,tblptrl
 11730  0031E2  C020  FFF7         	movff	i2printf@cp+1,tblptrh
 11731  0031E6  0E00               	movlw	low (__mediumconst shr (0+16))
 11732  0031E8  6EF8               	movwf	tblptru,c
 11733  0031EA  0E0F               	movlw	(high __ramtop+-1)
 11734  0031EC  64F7               	cpfsgt	tblptrh,c
 11735  0031EE  D003               	bra	i2u376_47
 11736  0031F0  0008               	tblrd		*
 11737  0031F2  50F5               	movf	tablat,w,c
 11738  0031F4  D005               	bra	i2u376_40
 11739  0031F6                     i2u376_47:
 11740  0031F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11741  0031FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11742  0031FE  50EF               	movf	indf0,w,c
 11743  003200                     i2u376_40:
 11744  003200  EC7A  F023         	call	i2_putch
 11745  003204  4A1F               	infsnz	i2printf@cp,f,c
 11746  003206  2A20               	incf	i2printf@cp+1,f,c
 11747  003208                     i2l877:
 11748  003208  0623               	decf	i2printf@len,f,c
 11749  00320A  A0D8               	btfss	status,0,c
 11750  00320C  0624               	decf	i2printf@len+1,f,c
 11751  00320E  2823               	incf	i2printf@len,w,c
 11752  003210  E1E6               	bnz	i2l5010
 11753  003212  2824               	incf	i2printf@len+1,w,c
 11754  003214  B4D8               	btfsc	status,2,c
 11755  003216  D12E               	goto	i2u396_40
 11756  003218  D7E2               	goto	i2l878
 11757  00321A                     i2l860:
 11758  00321A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11759  00321E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11760  003222  4A0D               	infsnz	i2printf@f,f,c
 11761  003224  2A0E               	incf	i2printf@f+1,f,c
 11762  003226                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11763  003226  6AF8               	clrf	tblptru,c
 11764  003228                     	endif
 11765  003228                     	if	0	;tblptru may be non-zero
 11766  003228                     	endif
 11767  003228  0008               	tblrd		*
 11768  00322A  CFF5 F02A          	movff	tablat,i2printf@c
 11769  00322E  502A               	movf	i2printf@c,w,c
 11770                           
 11771                           ; Switch size 1, requested type "space"
 11772                           ; Number of cases is 5, Range of values is 0 to 120
 11773                           ; switch strategies available:
 11774                           ; Name         Instructions Cycles
 11775                           ; simple_byte           16     9 (average)
 11776                           ;	Chosen strategy is simple_byte
 11777  003230  0A00               	xorlw	0	; case 0
 11778  003232  B4D8               	btfsc	status,2,c
 11779  003234  0012               	return	
 11780  003236  0A64               	xorlw	100	; case 100
 11781  003238  B4D8               	btfsc	status,2,c
 11782  00323A  D00A               	goto	i2l865
 11783  00323C  0A0D               	xorlw	13	; case 105
 11784  00323E  B4D8               	btfsc	status,2,c
 11785  003240  D007               	goto	i2l865
 11786  003242  0A1A               	xorlw	26	; case 115
 11787  003244  B4D8               	btfsc	status,2,c
 11788  003246  D77A               	goto	i2l867
 11789  003248  0A0B               	xorlw	11	; case 120
 11790  00324A  B4D8               	btfsc	status,2,c
 11791  00324C  D775               	goto	i2l866
 11792  00324E  D112               	goto	i2u396_40
 11793  003250                     i2l865:
 11794                           
 11795                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11796  003250  BE27               	btfsc	i2printf@flag,7,c
 11797  003252  D015               	goto	i2l881
 11798                           
 11799                           ;doprnt.c: 1253: {
 11800                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11801  003254  C021  FFD9         	movff	i2printf@ap,fsr2l
 11802  003258  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11803  00325C  CFDE F025          	movff	postinc2,i2printf@val
 11804  003260  CFDD F026          	movff	postdec2,i2printf@val+1
 11805  003264  0E02               	movlw	2
 11806  003266  2621               	addwf	i2printf@ap,f,c
 11807  003268  0E00               	movlw	0
 11808  00326A  2222               	addwfc	i2printf@ap+1,f,c
 11809                           
 11810                           ;doprnt.c: 1261: if((int)val < 0) {
 11811  00326C  AE26               	btfss	i2printf@val+1,7,c
 11812  00326E  D04A               	goto	i2l884
 11813                           
 11814                           ;doprnt.c: 1262: flag |= 0x03;
 11815  003270  0E03               	movlw	3
 11816  003272  1227               	iorwf	i2printf@flag,f,c
 11817                           
 11818                           ;doprnt.c: 1263: val = -val;
 11819  003274  6C25               	negf	i2printf@val,c
 11820  003276  1E26               	comf	i2printf@val+1,f,c
 11821  003278  B0D8               	btfsc	status,0,c
 11822  00327A  2A26               	incf	i2printf@val+1,f,c
 11823                           
 11824                           ;doprnt.c: 1264: }
 11825                           ;doprnt.c: 1266: }
 11826  00327C  D043               	goto	i2l884
 11827  00327E                     i2l881:
 11828                           
 11829                           ;doprnt.c: 1268: else
 11830                           ;doprnt.c: 1273: {
 11831                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11832  00327E  C021  FFD9         	movff	i2printf@ap,fsr2l
 11833  003282  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11834  003286  CFDE F025          	movff	postinc2,i2printf@val
 11835  00328A  CFDD F026          	movff	postdec2,i2printf@val+1
 11836  00328E  0E02               	movlw	2
 11837  003290  2621               	addwf	i2printf@ap,f,c
 11838  003292  0E00               	movlw	0
 11839  003294  2222               	addwfc	i2printf@ap+1,f,c
 11840                           
 11841                           ;doprnt.c: 1287: }
 11842                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11843  003296  D036               	goto	i2l884
 11844  003298                     
 11845                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11846  003298  0E01               	movlw	1
 11847  00329A  6E2A               	movwf	i2printf@c,c
 11848  00329C                     i2l5036:
 11849  00329C  0E05               	movlw	5
 11850  00329E  182A               	xorwf	i2printf@c,w,c
 11851  0032A0  B4D8               	btfsc	status,2,c
 11852  0032A2  D038               	goto	i2l889
 11853                           
 11854                           ;doprnt.c: 1306: if(val < dpowers[c])
 11855  0032A4  502A               	movf	i2printf@c,w,c
 11856  0032A6  0D02               	mullw	2
 11857  0032A8  0EA4               	movlw	low _dpowers
 11858  0032AA  24F3               	addwf	prodl,w,c
 11859  0032AC  6EF6               	movwf	tblptrl,c
 11860  0032AE  0EFC               	movlw	high _dpowers
 11861  0032B0  20F4               	addwfc	prodh,w,c
 11862  0032B2  6EF7               	movwf	tblptrh,c
 11863  0032B4                     	if	1	;There are 3 active tblptr bytes
 11864  0032B4  6AF8               	clrf	tblptru,c
 11865  0032B6  0E00               	movlw	low (__mediumconst shr (0+16))
 11866  0032B8  22F8               	addwfc	tblptru,f,c
 11867  0032BA                     	endif
 11868  0032BA  0009               	tblrd		*+
 11869  0032BC  50F5               	movf	tablat,w,c
 11870  0032BE  5C25               	subwf	i2printf@val,w,c
 11871  0032C0  0009               	tblrd		*+
 11872  0032C2  50F5               	movf	tablat,w,c
 11873  0032C4  5826               	subwfb	i2printf@val+1,w,c
 11874  0032C6  A0D8               	btfss	status,0,c
 11875  0032C8  D025               	goto	i2l889
 11876                           
 11877                           ;doprnt.c: 1307: break;
 11878  0032CA  2A2A               	incf	i2printf@c,f,c
 11879  0032CC  D7E7               	goto	i2l5036
 11880  0032CE                     
 11881                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11882  0032CE  0E01               	movlw	1
 11883  0032D0  6E2A               	movwf	i2printf@c,c
 11884  0032D2                     i2l5050:
 11885  0032D2  0E04               	movlw	4
 11886  0032D4  182A               	xorwf	i2printf@c,w,c
 11887  0032D6  B4D8               	btfsc	status,2,c
 11888  0032D8  D01D               	goto	i2l889
 11889                           
 11890                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11891  0032DA  502A               	movf	i2printf@c,w,c
 11892  0032DC  0D02               	mullw	2
 11893  0032DE  0EAE               	movlw	low _hexpowers
 11894  0032E0  24F3               	addwf	prodl,w,c
 11895  0032E2  6EF6               	movwf	tblptrl,c
 11896  0032E4  0EFC               	movlw	high _hexpowers
 11897  0032E6  20F4               	addwfc	prodh,w,c
 11898  0032E8  6EF7               	movwf	tblptrh,c
 11899  0032EA                     	if	1	;There are 3 active tblptr bytes
 11900  0032EA  6AF8               	clrf	tblptru,c
 11901  0032EC  0E00               	movlw	low (__mediumconst shr (0+16))
 11902  0032EE  22F8               	addwfc	tblptru,f,c
 11903  0032F0                     	endif
 11904  0032F0  0009               	tblrd		*+
 11905  0032F2  50F5               	movf	tablat,w,c
 11906  0032F4  5C25               	subwf	i2printf@val,w,c
 11907  0032F6  0009               	tblrd		*+
 11908  0032F8  50F5               	movf	tablat,w,c
 11909  0032FA  5826               	subwfb	i2printf@val+1,w,c
 11910  0032FC  A0D8               	btfss	status,0,c
 11911  0032FE  D00A               	goto	i2l889
 11912                           
 11913                           ;doprnt.c: 1318: break;
 11914  003300  2A2A               	incf	i2printf@c,f,c
 11915  003302  D7E7               	goto	i2l5050
 11916  003304                     i2l884:
 11917  003304  5027               	movf	i2printf@flag,w,c
 11918  003306  0B80               	andlw	128
 11919                           
 11920                           ; Switch size 1, requested type "space"
 11921                           ; Number of cases is 2, Range of values is 0 to 128
 11922                           ; switch strategies available:
 11923                           ; Name         Instructions Cycles
 11924                           ; simple_byte            7     4 (average)
 11925                           ;	Chosen strategy is simple_byte
 11926  003308  0A00               	xorlw	0	; case 0
 11927  00330A  B4D8               	btfsc	status,2,c
 11928  00330C  D7C5               	goto	i2l885
 11929  00330E  0A80               	xorlw	128	; case 128
 11930  003310  B4D8               	btfsc	status,2,c
 11931  003312  D7DD               	goto	i2l890
 11932  003314                     i2l889:
 11933                           
 11934                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11935  003314  5028               	movf	i2printf@width,w,c
 11936  003316  1029               	iorwf	i2printf@width+1,w,c
 11937  003318  B4D8               	btfsc	status,2,c
 11938  00331A  D009               	goto	i2l894
 11939  00331C  C027  F019         	movff	i2printf@flag,??i2_printf
 11940  003320  0E03               	movlw	3
 11941  003322  1619               	andwf	??i2_printf,f,c
 11942  003324  B4D8               	btfsc	status,2,c
 11943  003326  D003               	goto	i2l894
 11944                           
 11945                           ;doprnt.c: 1346: width--;
 11946  003328  0628               	decf	i2printf@width,f,c
 11947  00332A  A0D8               	btfss	status,0,c
 11948  00332C  0629               	decf	i2printf@width+1,f,c
 11949  00332E                     i2l894:
 11950                           
 11951                           ;doprnt.c: 1381: if(width > c)
 11952  00332E  0E80               	movlw	128
 11953  003330  BE2A               	btfsc	i2printf@c,7,c
 11954  003332  0E7F               	movlw	127
 11955  003334  6E19               	movwf	??i2_printf& (0+255),c
 11956  003336  5028               	movf	i2printf@width,w,c
 11957  003338  5C2A               	subwf	i2printf@c,w,c
 11958  00333A  5029               	movf	i2printf@width+1,w,c
 11959  00333C  0A80               	xorlw	128
 11960  00333E  5819               	subwfb	??i2_printf& (0+255),w,c
 11961  003340  B0D8               	btfsc	status,0,c
 11962  003342  D007               	goto	i2l895
 11963                           
 11964                           ;doprnt.c: 1382: width -= c;
 11965  003344  502A               	movf	i2printf@c,w,c
 11966  003346  5E28               	subwf	i2printf@width,f,c
 11967  003348  0E00               	movlw	0
 11968  00334A  BE2A               	btfsc	i2printf@c,7,c
 11969  00334C  0EFF               	movlw	255
 11970  00334E  5A29               	subwfb	i2printf@width+1,f,c
 11971  003350  D004               	goto	i2l896
 11972  003352                     i2l895:
 11973                           
 11974                           ;doprnt.c: 1383: else
 11975                           ;doprnt.c: 1384: width = 0;
 11976  003352  0E00               	movlw	0
 11977  003354  6E29               	movwf	i2printf@width+1,c
 11978  003356  0E00               	movlw	0
 11979  003358  6E28               	movwf	i2printf@width,c
 11980  00335A                     i2l896:
 11981                           
 11982                           ;doprnt.c: 1387: if(flag & 0x04) {
 11983  00335A  A427               	btfss	i2printf@flag,2,c
 11984  00335C  D014               	goto	i2l897
 11985                           
 11986                           ;doprnt.c: 1392: if(flag & 0x03)
 11987  00335E  C027  F019         	movff	i2printf@flag,??i2_printf
 11988  003362  0E03               	movlw	3
 11989  003364  1619               	andwf	??i2_printf,f,c
 11990  003366  B4D8               	btfsc	status,2,c
 11991  003368  D003               	goto	i2l898
 11992                           
 11993                           ;doprnt.c: 1393: (putch('-') );
 11994  00336A  0E2D               	movlw	45
 11995  00336C  EC7A  F023         	call	i2_putch
 11996  003370                     i2l898:
 11997                           
 11998                           ;doprnt.c: 1415: if(width)
 11999  003370  5028               	movf	i2printf@width,w,c
 12000  003372  1029               	iorwf	i2printf@width+1,w,c
 12001  003374  B4D8               	btfsc	status,2,c
 12002  003376  D01E               	goto	i2l906
 12003                           
 12004                           ;doprnt.c: 1417: (putch('0') );
 12005                           
 12006                           ;doprnt.c: 1416: do
 12007  003378  0E30               	movlw	48
 12008  00337A  EC7A  F023         	call	i2_putch
 12009                           
 12010                           ;doprnt.c: 1418: while(--width);
 12011  00337E  0628               	decf	i2printf@width,f,c
 12012  003380  A0D8               	btfss	status,0,c
 12013  003382  0629               	decf	i2printf@width+1,f,c
 12014  003384  D7F5               	goto	i2l898
 12015  003386                     i2l897:
 12016                           
 12017                           ;doprnt.c: 1422: {
 12018                           ;doprnt.c: 1424: if(width
 12019                           ;doprnt.c: 1428: )
 12020  003386  5028               	movf	i2printf@width,w,c
 12021  003388  1029               	iorwf	i2printf@width+1,w,c
 12022  00338A  B4D8               	btfsc	status,2,c
 12023  00338C  D00A               	goto	i2u394_40
 12024  00338E                     i2u393_40:
 12025                           
 12026                           ;doprnt.c: 1430: (putch(' ') );
 12027                           
 12028                           ;doprnt.c: 1429: do
 12029  00338E  0E20               	movlw	32
 12030  003390  EC7A  F023         	call	i2_putch
 12031                           
 12032                           ;doprnt.c: 1431: while(--width);
 12033  003394  0628               	decf	i2printf@width,f,c
 12034  003396  A0D8               	btfss	status,0,c
 12035  003398  0629               	decf	i2printf@width+1,f,c
 12036  00339A  5028               	movf	i2printf@width,w,c
 12037  00339C  1029               	iorwf	i2printf@width+1,w,c
 12038  00339E  A4D8               	btfss	status,2,c
 12039  0033A0  D7F6               	goto	i2u393_40
 12040  0033A2                     i2u394_40:
 12041                           
 12042                           ;doprnt.c: 1438: if(flag & 0x03)
 12043  0033A2  C027  F019         	movff	i2printf@flag,??i2_printf
 12044  0033A6  0E03               	movlw	3
 12045  0033A8  1619               	andwf	??i2_printf,f,c
 12046  0033AA  B4D8               	btfsc	status,2,c
 12047  0033AC  D003               	goto	i2l906
 12048                           
 12049                           ;doprnt.c: 1439: (putch('-') );
 12050  0033AE  0E2D               	movlw	45
 12051  0033B0  EC7A  F023         	call	i2_putch
 12052  0033B4                     i2l906:
 12053                           
 12054                           ;doprnt.c: 1469: }
 12055                           ;doprnt.c: 1472: prec = c;
 12056  0033B4  C02A  F01E         	movff	i2printf@c,i2printf@prec
 12057                           
 12058                           ;doprnt.c: 1474: while(prec--) {
 12059  0033B8  D059               	goto	i2l907
 12060  0033BA                     
 12061                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12062  0033BA  501E               	movf	i2printf@prec,w,c
 12063  0033BC  0D02               	mullw	2
 12064  0033BE  0EA4               	movlw	low _dpowers
 12065  0033C0  24F3               	addwf	prodl,w,c
 12066  0033C2  6EF6               	movwf	tblptrl,c
 12067  0033C4  0EFC               	movlw	high _dpowers
 12068  0033C6  20F4               	addwfc	prodh,w,c
 12069  0033C8  6EF7               	movwf	tblptrh,c
 12070  0033CA                     	if	1	;There are 3 active tblptr bytes
 12071  0033CA  6AF8               	clrf	tblptru,c
 12072  0033CC  0E00               	movlw	low (__mediumconst shr (0+16))
 12073  0033CE  22F8               	addwfc	tblptru,f,c
 12074  0033D0                     	endif
 12075  0033D0  0009               	tblrd		*+
 12076  0033D2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12077  0033D6  000A               	tblrd		*-
 12078  0033D8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12079  0033DC  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12080  0033E0  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12081  0033E4  EC98  F021         	call	i2___lwdiv	;wreg free
 12082  0033E8  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12083  0033EC  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12084  0033F0  0E00               	movlw	0
 12085  0033F2  6E0B               	movwf	i2___lwmod@divisor+1,c
 12086  0033F4  0E0A               	movlw	10
 12087  0033F6  6E0A               	movwf	i2___lwmod@divisor,c
 12088  0033F8  EC77  F022         	call	i2___lwmod	;wreg free
 12089  0033FC  5008               	movf	?i2___lwmod,w,c
 12090  0033FE  0F30               	addlw	48
 12091  003400  6E2A               	movwf	i2printf@c,c
 12092                           
 12093                           ;doprnt.c: 1491: break;
 12094  003402  D031               	goto	i2l911
 12095  003404                     
 12096                           ;doprnt.c: 1499: {
 12097                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12098  003404  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12099  003408  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12100  00340C  501E               	movf	i2printf@prec,w,c
 12101  00340E  0D02               	mullw	2
 12102  003410  0EAE               	movlw	low _hexpowers
 12103  003412  24F3               	addwf	prodl,w,c
 12104  003414  6EF6               	movwf	tblptrl,c
 12105  003416  0EFC               	movlw	high _hexpowers
 12106  003418  20F4               	addwfc	prodh,w,c
 12107  00341A  6EF7               	movwf	tblptrh,c
 12108  00341C                     	if	1	;There are 3 active tblptr bytes
 12109  00341C  6AF8               	clrf	tblptru,c
 12110  00341E  0E00               	movlw	low (__mediumconst shr (0+16))
 12111  003420  22F8               	addwfc	tblptru,f,c
 12112  003422                     	endif
 12113  003422  0009               	tblrd		*+
 12114  003424  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12115  003428  000A               	tblrd		*-
 12116  00342A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12117  00342E  EC98  F021         	call	i2___lwdiv	;wreg free
 12118  003432  5001               	movf	?i2___lwdiv,w,c
 12119  003434  0B0F               	andlw	15
 12120  003436  6E1D               	movwf	i2printf@idx,c
 12121                           
 12122                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12123  003438  501D               	movf	i2printf@idx,w,c
 12124  00343A  0D01               	mullw	1
 12125  00343C  0E9F               	movlw	low STR_102
 12126  00343E  24F3               	addwf	prodl,w,c
 12127  003440  6EF6               	movwf	tblptrl,c
 12128  003442  0EFD               	movlw	high STR_102
 12129  003444  20F4               	addwfc	prodh,w,c
 12130  003446  6EF7               	movwf	tblptrh,c
 12131  003448                     	if	1	;There are 3 active tblptr bytes
 12132  003448  6AF8               	clrf	tblptru,c
 12133  00344A  0E00               	movlw	low (__mediumconst shr (0+16))
 12134  00344C  22F8               	addwfc	tblptru,f,c
 12135  00344E                     	endif
 12136  00344E  0008               	tblrd		*
 12137  003450  CFF5 F02A          	movff	tablat,i2printf@c
 12138                           
 12139                           ;doprnt.c: 1523: }
 12140                           
 12141                           ;doprnt.c: 1508: }
 12142                           ;doprnt.c: 1510: break;
 12143  003454  D008               	goto	i2l911
 12144  003456  5027               	movf	i2printf@flag,w,c
 12145  003458  0B80               	andlw	128
 12146                           
 12147                           ; Switch size 1, requested type "space"
 12148                           ; Number of cases is 2, Range of values is 0 to 128
 12149                           ; switch strategies available:
 12150                           ; Name         Instructions Cycles
 12151                           ; simple_byte            7     4 (average)
 12152                           ;	Chosen strategy is simple_byte
 12153  00345A  0A00               	xorlw	0	; case 0
 12154  00345C  B4D8               	btfsc	status,2,c
 12155  00345E  D7AD               	goto	i2l910
 12156  003460  0A80               	xorlw	128	; case 128
 12157  003462  B4D8               	btfsc	status,2,c
 12158  003464  D7CF               	goto	i2l912
 12159  003466                     i2l911:
 12160                           
 12161                           ;doprnt.c: 1524: (putch(c) );
 12162  003466  502A               	movf	i2printf@c,w,c
 12163  003468  EC7A  F023         	call	i2_putch
 12164  00346C                     i2l907:
 12165  00346C  061E               	decf	i2printf@prec,f,c
 12166  00346E  281E               	incf	i2printf@prec,w,c
 12167  003470  A4D8               	btfss	status,2,c
 12168  003472  D7F1               	goto	i2l909
 12169  003474                     i2u396_40:
 12170  003474  C00D  FFF6         	movff	i2printf@f,tblptrl
 12171  003478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12172  00347C  4A0D               	infsnz	i2printf@f,f,c
 12173  00347E  2A0E               	incf	i2printf@f+1,f,c
 12174  003480                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12175  003480  6AF8               	clrf	tblptru,c
 12176  003482                     	endif
 12177  003482                     	if	0	;tblptru may be non-zero
 12178  003482                     	endif
 12179  003482  0008               	tblrd		*
 12180  003484  CFF5 F02A          	movff	tablat,i2printf@c
 12181  003488  502A               	movf	i2printf@c,w,c
 12182  00348A  B4D8               	btfsc	status,2,c
 12183  00348C  0012               	return	
 12184  00348E  D5F8               	goto	i2l849
 12185  003490                     __end_ofi2_printf:
 12186                           	opt stack 0
 12187                           pclatu	equ	0xFFB
 12188                           pclath	equ	0xFFA
 12189                           tblptru	equ	0xFF8
 12190                           tblptrh	equ	0xFF7
 12191                           tblptrl	equ	0xFF6
 12192                           tablat	equ	0xFF5
 12193                           prodh	equ	0xFF4
 12194                           prodl	equ	0xFF3
 12195                           intcon	equ	0xFF2
 12196                           intcon3	equ	0xFF0
 12197                           indf0	equ	0xFEF
 12198                           postinc0	equ	0xFEE
 12199                           fsr0h	equ	0xFEA
 12200                           fsr0l	equ	0xFE9
 12201                           wreg	equ	0xFE8
 12202                           postdec1	equ	0xFE5
 12203                           fsr1h	equ	0xFE2
 12204                           fsr1l	equ	0xFE1
 12205                           indf2	equ	0xFDF
 12206                           postinc2	equ	0xFDE
 12207                           postdec2	equ	0xFDD
 12208                           fsr2h	equ	0xFDA
 12209                           fsr2l	equ	0xFD9
 12210                           status	equ	0xFD8
 12211                           
 12212 ;; *************** function i2_putch *****************
 12213 ;; Defined at:
 12214 ;;		line 24 in file "lcd.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;  data            1    wreg     unsigned char 
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;  data            1    2[COMRAM] unsigned char 
 12219 ;; Return value:  Size  Location     Type
 12220 ;;                  1    wreg      void 
 12221 ;; Registers used:
 12222 ;;		wreg, status,2, status,0, cstack
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;Total ram usage:        1 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    1
 12235 ;; This function calls:
 12236 ;;		i2_lcdNibble
 12237 ;; This function is called by:
 12238 ;;		_interruptHandler
 12239 ;;		i2_printf
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text26
 12244  0046F4                     __ptext26:
 12245                           	opt stack 0
 12246  0046F4                     i2_putch:
 12247                           	opt stack 25
 12248                           
 12249                           ;incstack = 0
 12250                           ;i2putch@data stored from wreg
 12251  0046F4  6E03               	movwf	i2putch@data,c
 12252                           
 12253                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 12254  0046F6  848C               	bsf	3980,2,c	;volatile
 12255                           
 12256                           ;lcd.c: 33: lcdNibble(data);
 12257  0046F8  5003               	movf	i2putch@data,w,c
 12258  0046FA  EC1E  F01F         	call	i2_lcdNibble
 12259                           
 12260                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12261  0046FE  0EA0               	movlw	160
 12262  004700                     i2u602_47:
 12263  004700  D000               	nop2	
 12264  004702  2EE8               	decfsz	wreg,f,c
 12265  004704  D7FD               	bra	i2u602_47
 12266  004706  0012               	return		;funcret
 12267  004708                     __end_ofi2_putch:
 12268                           	opt stack 0
 12269                           pclatu	equ	0xFFB
 12270                           pclath	equ	0xFFA
 12271                           tblptru	equ	0xFF8
 12272                           tblptrh	equ	0xFF7
 12273                           tblptrl	equ	0xFF6
 12274                           tablat	equ	0xFF5
 12275                           prodh	equ	0xFF4
 12276                           prodl	equ	0xFF3
 12277                           intcon	equ	0xFF2
 12278                           intcon3	equ	0xFF0
 12279                           indf0	equ	0xFEF
 12280                           postinc0	equ	0xFEE
 12281                           fsr0h	equ	0xFEA
 12282                           fsr0l	equ	0xFE9
 12283                           wreg	equ	0xFE8
 12284                           postdec1	equ	0xFE5
 12285                           fsr1h	equ	0xFE2
 12286                           fsr1l	equ	0xFE1
 12287                           indf2	equ	0xFDF
 12288                           postinc2	equ	0xFDE
 12289                           postdec2	equ	0xFDD
 12290                           fsr2h	equ	0xFDA
 12291                           fsr2l	equ	0xFD9
 12292                           status	equ	0xFD8
 12293                           
 12294 ;; *************** function i2_isdigit *****************
 12295 ;; Defined at:
 12296 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;  c               1    wreg     unsigned char 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;  c               1    2[COMRAM] unsigned char 
 12301 ;; Return value:  Size  Location     Type
 12302 ;;		None               void
 12303 ;; Registers used:
 12304 ;;		wreg, status,2, status,0
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;Total ram usage:        3 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; This function calls:
 12317 ;;		Nothing
 12318 ;; This function is called by:
 12319 ;;		i2_printf
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text27
 12324  004692                     __ptext27:
 12325                           	opt stack 0
 12326  004692                     i2_isdigit:
 12327                           	opt stack 25
 12328                           
 12329                           ;incstack = 0
 12330                           ;i2isdigit@c stored from wreg
 12331  004692  6E03               	movwf	i2isdigit@c,c
 12332  004694  0E00               	movlw	0
 12333  004696  6E02               	movwf	i2_isdigit$1367,c
 12334  004698  0E3A               	movlw	58
 12335  00469A  6003               	cpfslt	i2isdigit@c,c
 12336  00469C  D005               	goto	i2l1245
 12337  00469E  0E2F               	movlw	47
 12338  0046A0  6403               	cpfsgt	i2isdigit@c,c
 12339  0046A2  D002               	goto	i2l1245
 12340  0046A4  0E01               	movlw	1
 12341  0046A6  6E02               	movwf	i2_isdigit$1367,c
 12342  0046A8                     i2l1245:
 12343  0046A8  C002  F001         	movff	i2_isdigit$1367,??i2_isdigit
 12344  0046AC  3001               	rrcf	??i2_isdigit,w,c
 12345  0046AE  0012               	return	
 12346  0046B0                     __end_ofi2_isdigit:
 12347                           	opt stack 0
 12348                           pclatu	equ	0xFFB
 12349                           pclath	equ	0xFFA
 12350                           tblptru	equ	0xFF8
 12351                           tblptrh	equ	0xFF7
 12352                           tblptrl	equ	0xFF6
 12353                           tablat	equ	0xFF5
 12354                           prodh	equ	0xFF4
 12355                           prodl	equ	0xFF3
 12356                           intcon	equ	0xFF2
 12357                           intcon3	equ	0xFF0
 12358                           indf0	equ	0xFEF
 12359                           postinc0	equ	0xFEE
 12360                           fsr0h	equ	0xFEA
 12361                           fsr0l	equ	0xFE9
 12362                           wreg	equ	0xFE8
 12363                           postdec1	equ	0xFE5
 12364                           fsr1h	equ	0xFE2
 12365                           fsr1l	equ	0xFE1
 12366                           indf2	equ	0xFDF
 12367                           postinc2	equ	0xFDE
 12368                           postdec2	equ	0xFDD
 12369                           fsr2h	equ	0xFDA
 12370                           fsr2l	equ	0xFD9
 12371                           status	equ	0xFD8
 12372                           
 12373 ;; *************** function i2___lwmod *****************
 12374 ;; Defined at:
 12375 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;  dividend        2    7[COMRAM] unsigned int 
 12378 ;;  divisor         2    9[COMRAM] unsigned int 
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  2    7[COMRAM] unsigned int 
 12383 ;; Registers used:
 12384 ;;		wreg, status,2, status,0
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;Total ram usage:        5 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; This function calls:
 12397 ;;		Nothing
 12398 ;; This function is called by:
 12399 ;;		i2_printf
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           	psect	text28
 12404  0044EE                     __ptext28:
 12405                           	opt stack 0
 12406  0044EE                     i2___lwmod:
 12407                           	opt stack 25
 12408                           
 12409                           ;incstack = 0
 12410  0044EE  500A               	movf	i2___lwmod@divisor,w,c
 12411  0044F0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12412  0044F2  B4D8               	btfsc	status,2,c
 12413  0044F4  D018               	goto	i2l1339
 12414  0044F6  0E01               	movlw	1
 12415  0044F8  6E0C               	movwf	i2___lwmod@counter,c
 12416  0044FA  D004               	goto	i2l1334
 12417  0044FC  90D8               	bcf	status,0,c
 12418  0044FE  360A               	rlcf	i2___lwmod@divisor,f,c
 12419  004500  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12420  004502  2A0C               	incf	i2___lwmod@counter,f,c
 12421  004504                     i2l1334:
 12422  004504  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12423  004506  D7FA               	goto	i2l1335
 12424  004508                     i2u288_40:
 12425  004508  500A               	movf	i2___lwmod@divisor,w,c
 12426  00450A  5C08               	subwf	i2___lwmod@dividend,w,c
 12427  00450C  500B               	movf	i2___lwmod@divisor+1,w,c
 12428  00450E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12429  004510  A0D8               	btfss	status,0,c
 12430  004512  D004               	goto	i2l1338
 12431  004514  500A               	movf	i2___lwmod@divisor,w,c
 12432  004516  5E08               	subwf	i2___lwmod@dividend,f,c
 12433  004518  500B               	movf	i2___lwmod@divisor+1,w,c
 12434  00451A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12435  00451C                     i2l1338:
 12436  00451C  90D8               	bcf	status,0,c
 12437  00451E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12438  004520  320A               	rrcf	i2___lwmod@divisor,f,c
 12439  004522  2E0C               	decfsz	i2___lwmod@counter,f,c
 12440  004524  D7F1               	goto	i2u288_40
 12441  004526                     i2l1339:
 12442  004526  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12443  00452A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12444  00452E  0012               	return		;funcret
 12445  004530                     __end_ofi2___lwmod:
 12446                           	opt stack 0
 12447                           pclatu	equ	0xFFB
 12448                           pclath	equ	0xFFA
 12449                           tblptru	equ	0xFF8
 12450                           tblptrh	equ	0xFF7
 12451                           tblptrl	equ	0xFF6
 12452                           tablat	equ	0xFF5
 12453                           prodh	equ	0xFF4
 12454                           prodl	equ	0xFF3
 12455                           intcon	equ	0xFF2
 12456                           intcon3	equ	0xFF0
 12457                           indf0	equ	0xFEF
 12458                           postinc0	equ	0xFEE
 12459                           fsr0h	equ	0xFEA
 12460                           fsr0l	equ	0xFE9
 12461                           wreg	equ	0xFE8
 12462                           postdec1	equ	0xFE5
 12463                           fsr1h	equ	0xFE2
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           fsr2h	equ	0xFDA
 12469                           fsr2l	equ	0xFD9
 12470                           status	equ	0xFD8
 12471                           
 12472 ;; *************** function i2___lwdiv *****************
 12473 ;; Defined at:
 12474 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;  dividend        2    0[COMRAM] unsigned int 
 12477 ;;  divisor         2    2[COMRAM] unsigned int 
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12480 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12481 ;; Return value:  Size  Location     Type
 12482 ;;                  2    0[COMRAM] unsigned int 
 12483 ;; Registers used:
 12484 ;;		wreg, status,2, status,0
 12485 ;; Tracked objects:
 12486 ;;		On entry : 0/0
 12487 ;;		On exit  : 0/0
 12488 ;;		Unchanged: 0/0
 12489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12494 ;;Total ram usage:        7 bytes
 12495 ;; Hardware stack levels used:    1
 12496 ;; This function calls:
 12497 ;;		Nothing
 12498 ;; This function is called by:
 12499 ;;		i2_printf
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           	psect	text29
 12504  004330                     __ptext29:
 12505                           	opt stack 0
 12506  004330                     i2___lwdiv:
 12507                           	opt stack 25
 12508                           
 12509                           ;incstack = 0
 12510  004330  0E00               	movlw	0
 12511  004332  6E06               	movwf	i2___lwdiv@quotient+1,c
 12512  004334  0E00               	movlw	0
 12513  004336  6E05               	movwf	i2___lwdiv@quotient,c
 12514  004338  5003               	movf	i2___lwdiv@divisor,w,c
 12515  00433A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12516  00433C  B4D8               	btfsc	status,2,c
 12517  00433E  D01C               	goto	i2l1329
 12518  004340  0E01               	movlw	1
 12519  004342  6E07               	movwf	i2___lwdiv@counter,c
 12520  004344  D004               	goto	i2l1324
 12521  004346  90D8               	bcf	status,0,c
 12522  004348  3603               	rlcf	i2___lwdiv@divisor,f,c
 12523  00434A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12524  00434C  2A07               	incf	i2___lwdiv@counter,f,c
 12525  00434E                     i2l1324:
 12526  00434E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12527  004350  D7FA               	goto	i2l1325
 12528  004352                     i2u285_40:
 12529  004352  90D8               	bcf	status,0,c
 12530  004354  3605               	rlcf	i2___lwdiv@quotient,f,c
 12531  004356  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12532  004358  5003               	movf	i2___lwdiv@divisor,w,c
 12533  00435A  5C01               	subwf	i2___lwdiv@dividend,w,c
 12534  00435C  5004               	movf	i2___lwdiv@divisor+1,w,c
 12535  00435E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12536  004360  A0D8               	btfss	status,0,c
 12537  004362  D005               	goto	i2l1328
 12538  004364  5003               	movf	i2___lwdiv@divisor,w,c
 12539  004366  5E01               	subwf	i2___lwdiv@dividend,f,c
 12540  004368  5004               	movf	i2___lwdiv@divisor+1,w,c
 12541  00436A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12542  00436C  8005               	bsf	i2___lwdiv@quotient,0,c
 12543  00436E                     i2l1328:
 12544  00436E  90D8               	bcf	status,0,c
 12545  004370  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12546  004372  3203               	rrcf	i2___lwdiv@divisor,f,c
 12547  004374  2E07               	decfsz	i2___lwdiv@counter,f,c
 12548  004376  D7ED               	goto	i2u285_40
 12549  004378                     i2l1329:
 12550  004378  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12551  00437C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12552  004380  0012               	return		;funcret
 12553  004382                     __end_ofi2___lwdiv:
 12554                           	opt stack 0
 12555                           pclatu	equ	0xFFB
 12556                           pclath	equ	0xFFA
 12557                           tblptru	equ	0xFF8
 12558                           tblptrh	equ	0xFF7
 12559                           tblptrl	equ	0xFF6
 12560                           tablat	equ	0xFF5
 12561                           prodh	equ	0xFF4
 12562                           prodl	equ	0xFF3
 12563                           intcon	equ	0xFF2
 12564                           intcon3	equ	0xFF0
 12565                           indf0	equ	0xFEF
 12566                           postinc0	equ	0xFEE
 12567                           fsr0h	equ	0xFEA
 12568                           fsr0l	equ	0xFE9
 12569                           wreg	equ	0xFE8
 12570                           postdec1	equ	0xFE5
 12571                           fsr1h	equ	0xFE2
 12572                           fsr1l	equ	0xFE1
 12573                           indf2	equ	0xFDF
 12574                           postinc2	equ	0xFDE
 12575                           postdec2	equ	0xFDD
 12576                           fsr2h	equ	0xFDA
 12577                           fsr2l	equ	0xFD9
 12578                           status	equ	0xFD8
 12579                           
 12580 ;; *************** function i2_initLCD *****************
 12581 ;; Defined at:
 12582 ;;		line 60 in file "lcd.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;		None
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;		None
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  1    wreg      void 
 12589 ;; Registers used:
 12590 ;;		wreg, status,2, status,0, cstack
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;Total ram usage:        1 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; Hardware stack levels required when called:    2
 12603 ;; This function calls:
 12604 ;;		i2_lcdInst
 12605 ;; This function is called by:
 12606 ;;		_interruptHandler
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           	psect	text30
 12611  0043CE                     __ptext30:
 12612                           	opt stack 0
 12613  0043CE                     i2_initLCD:
 12614                           	opt stack 24
 12615                           
 12616                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
 12617                           
 12618                           ;incstack = 0
 12619  0043CE  0E9C               	movlw	156
 12620  0043D0  6E04               	movwf	??i2_initLCD& (0+255),c
 12621  0043D2  0ED7               	movlw	215
 12622  0043D4                     i2u603_47:
 12623  0043D4  2EE8               	decfsz	wreg,f,c
 12624  0043D6  D7FE               	bra	i2u603_47
 12625  0043D8  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12626  0043DA  D7FC               	bra	i2u603_47
 12627  0043DC  F000               	nop	
 12628                           
 12629                           ;lcd.c: 69: lcdInst(0b00110011);
 12630  0043DE  0E33               	movlw	51
 12631  0043E0  EC84  F023         	call	i2_lcdInst
 12632                           
 12633                           ;lcd.c: 70: lcdInst(0b00110010);
 12634  0043E4  0E32               	movlw	50
 12635  0043E6  EC84  F023         	call	i2_lcdInst
 12636                           
 12637                           ;lcd.c: 71: lcdInst(0b00101000);
 12638  0043EA  0E28               	movlw	40
 12639  0043EC  EC84  F023         	call	i2_lcdInst
 12640                           
 12641                           ;lcd.c: 72: lcdInst(0b00001111);
 12642  0043F0  0E0F               	movlw	15
 12643  0043F2  EC84  F023         	call	i2_lcdInst
 12644                           
 12645                           ;lcd.c: 73: lcdInst(0b00000110);
 12646  0043F6  0E06               	movlw	6
 12647  0043F8  EC84  F023         	call	i2_lcdInst
 12648                           
 12649                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 12650  0043FC  0E01               	movlw	1
 12651  0043FE  EC84  F023         	call	i2_lcdInst
 12652  004402  0E9C               	movlw	156
 12653  004404  6E04               	movwf	??i2_initLCD& (0+255),c
 12654  004406  0ED7               	movlw	215
 12655  004408                     i2u604_47:
 12656  004408  2EE8               	decfsz	wreg,f,c
 12657  00440A  D7FE               	bra	i2u604_47
 12658  00440C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12659  00440E  D7FC               	bra	i2u604_47
 12660  004410  F000               	nop	
 12661                           
 12662                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12663  004412  0E0F               	movlw	15
 12664  004414  EC84  F023         	call	i2_lcdInst
 12665  004418  0012               	return		;funcret
 12666  00441A                     __end_ofi2_initLCD:
 12667                           	opt stack 0
 12668                           pclatu	equ	0xFFB
 12669                           pclath	equ	0xFFA
 12670                           tblptru	equ	0xFF8
 12671                           tblptrh	equ	0xFF7
 12672                           tblptrl	equ	0xFF6
 12673                           tablat	equ	0xFF5
 12674                           prodh	equ	0xFF4
 12675                           prodl	equ	0xFF3
 12676                           intcon	equ	0xFF2
 12677                           intcon3	equ	0xFF0
 12678                           indf0	equ	0xFEF
 12679                           postinc0	equ	0xFEE
 12680                           fsr0h	equ	0xFEA
 12681                           fsr0l	equ	0xFE9
 12682                           wreg	equ	0xFE8
 12683                           postdec1	equ	0xFE5
 12684                           fsr1h	equ	0xFE2
 12685                           fsr1l	equ	0xFE1
 12686                           indf2	equ	0xFDF
 12687                           postinc2	equ	0xFDE
 12688                           postdec2	equ	0xFDD
 12689                           fsr2h	equ	0xFDA
 12690                           fsr2l	equ	0xFD9
 12691                           status	equ	0xFD8
 12692                           
 12693 ;; *************** function i2_lcdInst *****************
 12694 ;; Defined at:
 12695 ;;		line 11 in file "lcd.c"
 12696 ;; Parameters:    Size  Location     Type
 12697 ;;  data            1    wreg     unsigned char 
 12698 ;; Auto vars:     Size  Location     Type
 12699 ;;  data            1    2[COMRAM] unsigned char 
 12700 ;; Return value:  Size  Location     Type
 12701 ;;                  1    wreg      void 
 12702 ;; Registers used:
 12703 ;;		wreg, status,2, status,0, cstack
 12704 ;; Tracked objects:
 12705 ;;		On entry : 0/0
 12706 ;;		On exit  : 0/0
 12707 ;;		Unchanged: 0/0
 12708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12713 ;;Total ram usage:        1 bytes
 12714 ;; Hardware stack levels used:    1
 12715 ;; Hardware stack levels required when called:    1
 12716 ;; This function calls:
 12717 ;;		i2_lcdNibble
 12718 ;; This function is called by:
 12719 ;;		_interruptHandler
 12720 ;;		i2_initLCD
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           	psect	text31
 12725  004708                     __ptext31:
 12726                           	opt stack 0
 12727  004708                     i2_lcdInst:
 12728                           	opt stack 25
 12729                           
 12730                           ;incstack = 0
 12731                           ;i2lcdInst@data stored from wreg
 12732  004708  6E03               	movwf	i2lcdInst@data,c
 12733                           
 12734                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12735  00470A  948C               	bcf	3980,2,c	;volatile
 12736                           
 12737                           ;lcd.c: 20: lcdNibble(data);
 12738  00470C  5003               	movf	i2lcdInst@data,w,c
 12739  00470E  EC1E  F01F         	call	i2_lcdNibble
 12740                           
 12741                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12742  004712  0EA0               	movlw	160
 12743  004714                     i2u605_47:
 12744  004714  D000               	nop2	
 12745  004716  2EE8               	decfsz	wreg,f,c
 12746  004718  D7FD               	bra	i2u605_47
 12747  00471A  0012               	return		;funcret
 12748  00471C                     __end_ofi2_lcdInst:
 12749                           	opt stack 0
 12750                           pclatu	equ	0xFFB
 12751                           pclath	equ	0xFFA
 12752                           tblptru	equ	0xFF8
 12753                           tblptrh	equ	0xFF7
 12754                           tblptrl	equ	0xFF6
 12755                           tablat	equ	0xFF5
 12756                           prodh	equ	0xFF4
 12757                           prodl	equ	0xFF3
 12758                           intcon	equ	0xFF2
 12759                           intcon3	equ	0xFF0
 12760                           indf0	equ	0xFEF
 12761                           postinc0	equ	0xFEE
 12762                           fsr0h	equ	0xFEA
 12763                           fsr0l	equ	0xFE9
 12764                           wreg	equ	0xFE8
 12765                           postdec1	equ	0xFE5
 12766                           fsr1h	equ	0xFE2
 12767                           fsr1l	equ	0xFE1
 12768                           indf2	equ	0xFDF
 12769                           postinc2	equ	0xFDE
 12770                           postdec2	equ	0xFDD
 12771                           fsr2h	equ	0xFDA
 12772                           fsr2l	equ	0xFD9
 12773                           status	equ	0xFD8
 12774                           
 12775 ;; *************** function i2_lcdNibble *****************
 12776 ;; Defined at:
 12777 ;;		line 37 in file "lcd.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;  data            1    wreg     unsigned char 
 12780 ;; Auto vars:     Size  Location     Type
 12781 ;;  data            1    1[COMRAM] unsigned char 
 12782 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12783 ;; Return value:  Size  Location     Type
 12784 ;;                  1    wreg      void 
 12785 ;; Registers used:
 12786 ;;		wreg, status,2, status,0
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;Total ram usage:        2 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; This function calls:
 12799 ;;		Nothing
 12800 ;; This function is called by:
 12801 ;;		i2_lcdInst
 12802 ;;		i2_putch
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           	psect	text32
 12807  003E3C                     __ptext32:
 12808                           	opt stack 0
 12809  003E3C                     i2_lcdNibble:
 12810                           	opt stack 25
 12811                           
 12812                           ;incstack = 0
 12813                           ;i2lcdNibble@data stored from wreg
 12814  003E3C  6E02               	movwf	i2lcdNibble@data,c
 12815                           
 12816                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12817  003E3E  5002               	movf	i2lcdNibble@data,w,c
 12818  003E40  0BF0               	andlw	240
 12819  003E42  6E01               	movwf	i2lcdNibble@temp,c
 12820                           
 12821                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12822  003E44  508C               	movf	3980,w,c	;volatile
 12823  003E46  0B0F               	andlw	15
 12824  003E48  6E8C               	movwf	3980,c	;volatile
 12825                           
 12826                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12827  003E4A  5001               	movf	i2lcdNibble@temp,w,c
 12828  003E4C  108C               	iorwf	3980,w,c	;volatile
 12829  003E4E  6E8C               	movwf	3980,c	;volatile
 12830                           
 12831                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12832  003E50  0E00               	movlw	0
 12833  003E52  BEF2               	btfsc	intcon,7,c	;volatile
 12834  003E54  0E01               	movlw	1
 12835  003E56  0100               	movlb	0	; () banked
 12836  003E58  6FC2               	movwf	_LCDinterruptState& (0+255),b
 12837                           
 12838                           ; BSR set to: 0
 12839  003E5A  9EF2               	bcf	intcon,7,c	;volatile
 12840                           
 12841                           ; BSR set to: 0
 12842  003E5C  868C               	bsf	3980,3,c	;volatile
 12843                           
 12844                           ; BSR set to: 0
 12845  003E5E  0E42               	movlw	66
 12846  003E60                     i2u606_47:
 12847  003E60  2EE8               	decfsz	wreg,f,c
 12848  003E62  D7FE               	bra	i2u606_47
 12849  003E64  D000               	nop2	
 12850  003E66  968C               	bcf	3980,3,c	;volatile
 12851  003E68  0EA0               	movlw	160
 12852  003E6A                     i2u607_47:
 12853  003E6A  D000               	nop2	
 12854  003E6C  2EE8               	decfsz	wreg,f,c
 12855  003E6E  D7FD               	bra	i2u607_47
 12856  003E70  0100               	movlb	0	; () banked
 12857  003E72  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 12858  003E74  D002               	bra	i2u255_45
 12859  003E76  9EF2               	bcf	intcon,7,c	;volatile
 12860  003E78  D001               	bra	i2u255_46
 12861  003E7A                     i2u255_45:
 12862  003E7A  8EF2               	bsf	intcon,7,c	;volatile
 12863  003E7C                     i2u255_46:
 12864                           
 12865                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12866  003E7C  3802               	swapf	i2lcdNibble@data,w,c
 12867  003E7E  0BF0               	andlw	240
 12868  003E80  6E02               	movwf	i2lcdNibble@data,c
 12869                           
 12870                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12871  003E82  5002               	movf	i2lcdNibble@data,w,c
 12872  003E84  0BF0               	andlw	240
 12873  003E86  6E01               	movwf	i2lcdNibble@temp,c
 12874                           
 12875                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12876  003E88  508C               	movf	3980,w,c	;volatile
 12877  003E8A  0B0F               	andlw	15
 12878  003E8C  6E8C               	movwf	3980,c	;volatile
 12879                           
 12880                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12881  003E8E  5001               	movf	i2lcdNibble@temp,w,c
 12882  003E90  108C               	iorwf	3980,w,c	;volatile
 12883  003E92  6E8C               	movwf	3980,c	;volatile
 12884                           
 12885                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12886  003E94  0E00               	movlw	0
 12887  003E96  BEF2               	btfsc	intcon,7,c	;volatile
 12888  003E98  0E01               	movlw	1
 12889  003E9A  0100               	movlb	0	; () banked
 12890  003E9C  6FC2               	movwf	_LCDinterruptState& (0+255),b
 12891                           
 12892                           ; BSR set to: 0
 12893  003E9E  9EF2               	bcf	intcon,7,c	;volatile
 12894                           
 12895                           ; BSR set to: 0
 12896  003EA0  868C               	bsf	3980,3,c	;volatile
 12897                           
 12898                           ; BSR set to: 0
 12899  003EA2  0E42               	movlw	66
 12900  003EA4                     i2u608_47:
 12901  003EA4  2EE8               	decfsz	wreg,f,c
 12902  003EA6  D7FE               	bra	i2u608_47
 12903  003EA8  D000               	nop2	
 12904  003EAA  968C               	bcf	3980,3,c	;volatile
 12905  003EAC  0EA0               	movlw	160
 12906  003EAE                     i2u609_47:
 12907  003EAE  D000               	nop2	
 12908  003EB0  2EE8               	decfsz	wreg,f,c
 12909  003EB2  D7FD               	bra	i2u609_47
 12910  003EB4  0100               	movlb	0	; () banked
 12911  003EB6  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 12912  003EB8  D002               	bra	i2u256_45
 12913  003EBA  9EF2               	bcf	intcon,7,c	;volatile
 12914  003EBC  D001               	bra	i2u256_46
 12915  003EBE                     i2u256_45:
 12916  003EBE  8EF2               	bsf	intcon,7,c	;volatile
 12917  003EC0                     i2u256_46:
 12918  003EC0  0012               	return		;funcret
 12919  003EC2                     __end_ofi2_lcdNibble:
 12920                           	opt stack 0
 12921                           pclatu	equ	0xFFB
 12922                           pclath	equ	0xFFA
 12923                           tblptru	equ	0xFF8
 12924                           tblptrh	equ	0xFF7
 12925                           tblptrl	equ	0xFF6
 12926                           tablat	equ	0xFF5
 12927                           prodh	equ	0xFF4
 12928                           prodl	equ	0xFF3
 12929                           intcon	equ	0xFF2
 12930                           intcon3	equ	0xFF0
 12931                           indf0	equ	0xFEF
 12932                           postinc0	equ	0xFEE
 12933                           fsr0h	equ	0xFEA
 12934                           fsr0l	equ	0xFE9
 12935                           wreg	equ	0xFE8
 12936                           postdec1	equ	0xFE5
 12937                           fsr1h	equ	0xFE2
 12938                           fsr1l	equ	0xFE1
 12939                           indf2	equ	0xFDF
 12940                           postinc2	equ	0xFDE
 12941                           postdec2	equ	0xFDD
 12942                           fsr2h	equ	0xFDA
 12943                           fsr2l	equ	0xFD9
 12944                           status	equ	0xFD8
 12945                           
 12946 ;; *************** function i2_generate_compartment_array *****************
 12947 ;; Defined at:
 12948 ;;		line 220 in file "keypad.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;  step            2    0[COMRAM] int 
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;		None
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  1    wreg      void 
 12955 ;; Registers used:
 12956 ;;		wreg, status,2, status,0
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12962 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;Total ram usage:        4 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_interruptHandler
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text33
 12976  003490                     __ptext33:
 12977                           	opt stack 0
 12978  003490                     i2_generate_compartment_array:
 12979                           	opt stack 26
 12980                           
 12981                           ;keypad.c: 222: switch(step){
 12982                           
 12983                           ;incstack = 0
 12984  003490  D11C               	goto	i2l780
 12985  003492                     
 12986                           ;keypad.c: 224: compartment_array[1] = 1;
 12987  003492  0E00               	movlw	0
 12988  003494  0100               	movlb	0	; () banked
 12989  003496  6F83               	movwf	(_compartment_array+3)& (0+255),b
 12990  003498  0E01               	movlw	1
 12991  00349A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 12992                           
 12993                           ;keypad.c: 225: compartment_array[3] = 1;
 12994  00349C  0E00               	movlw	0
 12995  00349E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 12996  0034A0  0E01               	movlw	1
 12997  0034A2  6F86               	movwf	(_compartment_array+6)& (0+255),b
 12998                           
 12999                           ;keypad.c: 226: compartment_array[5] = 1;
 13000  0034A4  0E00               	movlw	0
 13001  0034A6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13002  0034A8  0E01               	movlw	1
 13003  0034AA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13004                           
 13005                           ;keypad.c: 227: compartment_array[7] = 1;
 13006  0034AC  0E00               	movlw	0
 13007  0034AE  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13008  0034B0  0E01               	movlw	1
 13009  0034B2  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13010                           
 13011                           ;keypad.c: 230: compartment_number[0] = 1;
 13012  0034B4  0E00               	movlw	0
 13013  0034B6  6E47               	movwf	_compartment_number+1,c
 13014  0034B8  0E01               	movlw	1
 13015  0034BA  6E46               	movwf	_compartment_number,c
 13016                           
 13017                           ;keypad.c: 231: compartment_number[1] = 3;
 13018  0034BC  0E00               	movlw	0
 13019  0034BE  6E49               	movwf	_compartment_number+3,c
 13020  0034C0  0E03               	movlw	3
 13021  0034C2  6E48               	movwf	_compartment_number+2,c
 13022                           
 13023                           ;keypad.c: 232: compartment_number[2] = 5;
 13024  0034C4  0E00               	movlw	0
 13025  0034C6  6E4B               	movwf	_compartment_number+5,c
 13026  0034C8  0E05               	movlw	5
 13027  0034CA  6E4A               	movwf	_compartment_number+4,c
 13028                           
 13029                           ;keypad.c: 233: compartment_number[3] = 7;
 13030  0034CC  0E00               	movlw	0
 13031  0034CE  6E4D               	movwf	_compartment_number+7,c
 13032  0034D0  0E07               	movlw	7
 13033  0034D2  6E4C               	movwf	_compartment_number+6,c
 13034                           
 13035                           ;keypad.c: 235: break;
 13036  0034D4  0012               	return	
 13037  0034D6                     
 13038                           ;keypad.c: 237: compartment_array[0] = 1;
 13039                           
 13040                           ; BSR set to: 0
 13041  0034D6  0E00               	movlw	0
 13042  0034D8  0100               	movlb	0	; () banked
 13043  0034DA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13044  0034DC  0E01               	movlw	1
 13045  0034DE  6F80               	movwf	_compartment_array& (0+255),b
 13046                           
 13047                           ;keypad.c: 238: compartment_array[1] = 1;
 13048  0034E0  0E00               	movlw	0
 13049  0034E2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13050  0034E4  0E01               	movlw	1
 13051  0034E6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13052                           
 13053                           ;keypad.c: 239: compartment_array[3] = 1;
 13054  0034E8  0E00               	movlw	0
 13055  0034EA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13056  0034EC  0E01               	movlw	1
 13057  0034EE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13058                           
 13059                           ;keypad.c: 240: compartment_array[4] = 1;
 13060  0034F0  0E00               	movlw	0
 13061  0034F2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13062  0034F4  0E01               	movlw	1
 13063  0034F6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13064                           
 13065                           ;keypad.c: 241: compartment_array[6] = 1;
 13066  0034F8  0E00               	movlw	0
 13067  0034FA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13068  0034FC  0E01               	movlw	1
 13069  0034FE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13070                           
 13071                           ;keypad.c: 245: compartment_number[0] = 0;
 13072  003500  0E00               	movlw	0
 13073  003502  6E47               	movwf	_compartment_number+1,c
 13074  003504  0E00               	movlw	0
 13075  003506  6E46               	movwf	_compartment_number,c
 13076                           
 13077                           ;keypad.c: 246: compartment_number[1] = 1;
 13078  003508  0E00               	movlw	0
 13079  00350A  6E49               	movwf	_compartment_number+3,c
 13080  00350C  0E01               	movlw	1
 13081  00350E  6E48               	movwf	_compartment_number+2,c
 13082                           
 13083                           ;keypad.c: 247: compartment_number[2] = 3;
 13084  003510  0E00               	movlw	0
 13085  003512  6E4B               	movwf	_compartment_number+5,c
 13086  003514  0E03               	movlw	3
 13087  003516  6E4A               	movwf	_compartment_number+4,c
 13088                           
 13089                           ;keypad.c: 248: compartment_number[3] = 4;
 13090  003518  0E00               	movlw	0
 13091  00351A  6E4D               	movwf	_compartment_number+7,c
 13092  00351C  0E04               	movlw	4
 13093  00351E  6E4C               	movwf	_compartment_number+6,c
 13094                           
 13095                           ;keypad.c: 249: compartment_number[4] = 6;
 13096  003520  0E00               	movlw	0
 13097  003522  6E4F               	movwf	_compartment_number+9,c
 13098  003524  0E06               	movlw	6
 13099  003526  6E4E               	movwf	_compartment_number+8,c
 13100                           
 13101                           ;keypad.c: 251: break;
 13102  003528  0012               	return	
 13103  00352A                     
 13104                           ;keypad.c: 254: compartment_array[0] = 1;
 13105                           
 13106                           ; BSR set to: 0
 13107  00352A  0E00               	movlw	0
 13108  00352C  0100               	movlb	0	; () banked
 13109  00352E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13110  003530  0E01               	movlw	1
 13111  003532  6F80               	movwf	_compartment_array& (0+255),b
 13112                           
 13113                           ;keypad.c: 255: compartment_array[1] = 1;
 13114  003534  0E00               	movlw	0
 13115  003536  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13116  003538  0E01               	movlw	1
 13117  00353A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13118                           
 13119                           ;keypad.c: 256: compartment_array[2] = 1;
 13120  00353C  0E00               	movlw	0
 13121  00353E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13122  003540  0E01               	movlw	1
 13123  003542  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13124                           
 13125                           ;keypad.c: 257: compartment_array[4] = 1;
 13126  003544  0E00               	movlw	0
 13127  003546  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13128  003548  0E01               	movlw	1
 13129  00354A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13130                           
 13131                           ;keypad.c: 258: compartment_array[5] = 1;
 13132  00354C  0E00               	movlw	0
 13133  00354E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13134  003550  0E01               	movlw	1
 13135  003552  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13136                           
 13137                           ;keypad.c: 259: compartment_array[6] = 1;
 13138  003554  0E00               	movlw	0
 13139  003556  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13140  003558  0E01               	movlw	1
 13141  00355A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13142                           
 13143                           ;keypad.c: 262: compartment_number[0] = 0;
 13144  00355C  0E00               	movlw	0
 13145  00355E  6E47               	movwf	_compartment_number+1,c
 13146  003560  0E00               	movlw	0
 13147  003562  6E46               	movwf	_compartment_number,c
 13148                           
 13149                           ;keypad.c: 263: compartment_number[1] = 1;
 13150  003564  0E00               	movlw	0
 13151  003566  6E49               	movwf	_compartment_number+3,c
 13152  003568  0E01               	movlw	1
 13153  00356A  6E48               	movwf	_compartment_number+2,c
 13154                           
 13155                           ;keypad.c: 264: compartment_number[2] = 2;
 13156  00356C  0E00               	movlw	0
 13157  00356E  6E4B               	movwf	_compartment_number+5,c
 13158  003570  0E02               	movlw	2
 13159  003572  6E4A               	movwf	_compartment_number+4,c
 13160                           
 13161                           ;keypad.c: 265: compartment_number[3] = 4;
 13162  003574  0E00               	movlw	0
 13163  003576  6E4D               	movwf	_compartment_number+7,c
 13164  003578  0E04               	movlw	4
 13165  00357A  6E4C               	movwf	_compartment_number+6,c
 13166                           
 13167                           ;keypad.c: 266: compartment_number[4] = 5;
 13168  00357C  0E00               	movlw	0
 13169  00357E  6E4F               	movwf	_compartment_number+9,c
 13170  003580  0E05               	movlw	5
 13171  003582  6E4E               	movwf	_compartment_number+8,c
 13172                           
 13173                           ;keypad.c: 267: compartment_number[5] = 6;
 13174  003584  0E00               	movlw	0
 13175  003586  6E51               	movwf	_compartment_number+11,c
 13176  003588  0E06               	movlw	6
 13177  00358A  6E50               	movwf	_compartment_number+10,c
 13178                           
 13179                           ;keypad.c: 269: break;
 13180  00358C  0012               	return	
 13181  00358E                     
 13182                           ;keypad.c: 271: compartment_array[0] = 1;
 13183                           
 13184                           ; BSR set to: 0
 13185  00358E  0E00               	movlw	0
 13186  003590  0100               	movlb	0	; () banked
 13187  003592  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13188  003594  0E01               	movlw	1
 13189  003596  6F80               	movwf	_compartment_array& (0+255),b
 13190                           
 13191                           ;keypad.c: 272: compartment_array[1] = 1;
 13192  003598  0E00               	movlw	0
 13193  00359A  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13194  00359C  0E01               	movlw	1
 13195  00359E  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13196                           
 13197                           ;keypad.c: 273: compartment_array[2] = 1;
 13198  0035A0  0E00               	movlw	0
 13199  0035A2  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13200  0035A4  0E01               	movlw	1
 13201  0035A6  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13202                           
 13203                           ;keypad.c: 274: compartment_array[3] = 1;
 13204  0035A8  0E00               	movlw	0
 13205  0035AA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13206  0035AC  0E01               	movlw	1
 13207  0035AE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13208                           
 13209                           ;keypad.c: 275: compartment_array[4] = 1;
 13210  0035B0  0E00               	movlw	0
 13211  0035B2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13212  0035B4  0E01               	movlw	1
 13213  0035B6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13214                           
 13215                           ;keypad.c: 276: compartment_array[5] = 1;
 13216  0035B8  0E00               	movlw	0
 13217  0035BA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13218  0035BC  0E01               	movlw	1
 13219  0035BE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13220                           
 13221                           ;keypad.c: 277: compartment_array[6] = 1;
 13222  0035C0  0E00               	movlw	0
 13223  0035C2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13224  0035C4  0E01               	movlw	1
 13225  0035C6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13226                           
 13227                           ;keypad.c: 280: compartment_number[0] = 0;
 13228  0035C8  0E00               	movlw	0
 13229  0035CA  6E47               	movwf	_compartment_number+1,c
 13230  0035CC  0E00               	movlw	0
 13231  0035CE  6E46               	movwf	_compartment_number,c
 13232                           
 13233                           ;keypad.c: 281: compartment_number[1] = 1;
 13234  0035D0  0E00               	movlw	0
 13235  0035D2  6E49               	movwf	_compartment_number+3,c
 13236  0035D4  0E01               	movlw	1
 13237  0035D6  6E48               	movwf	_compartment_number+2,c
 13238                           
 13239                           ;keypad.c: 282: compartment_number[2] = 2;
 13240  0035D8  0E00               	movlw	0
 13241  0035DA  6E4B               	movwf	_compartment_number+5,c
 13242  0035DC  0E02               	movlw	2
 13243  0035DE  6E4A               	movwf	_compartment_number+4,c
 13244                           
 13245                           ;keypad.c: 283: compartment_number[3] = 3;
 13246  0035E0  0E00               	movlw	0
 13247  0035E2  6E4D               	movwf	_compartment_number+7,c
 13248  0035E4  0E03               	movlw	3
 13249  0035E6  6E4C               	movwf	_compartment_number+6,c
 13250                           
 13251                           ;keypad.c: 284: compartment_number[4] = 4;
 13252  0035E8  0E00               	movlw	0
 13253  0035EA  6E4F               	movwf	_compartment_number+9,c
 13254  0035EC  0E04               	movlw	4
 13255  0035EE  6E4E               	movwf	_compartment_number+8,c
 13256                           
 13257                           ;keypad.c: 285: compartment_number[5] = 5;
 13258  0035F0  0E00               	movlw	0
 13259  0035F2  6E51               	movwf	_compartment_number+11,c
 13260  0035F4  0E05               	movlw	5
 13261  0035F6  6E50               	movwf	_compartment_number+10,c
 13262                           
 13263                           ;keypad.c: 286: compartment_number[6] = 6;
 13264  0035F8  0E00               	movlw	0
 13265  0035FA  6E53               	movwf	_compartment_number+13,c
 13266  0035FC  0E06               	movlw	6
 13267  0035FE  6E52               	movwf	_compartment_number+12,c
 13268                           
 13269                           ;keypad.c: 288: break;
 13270  003600  0012               	return	
 13271  003602                     
 13272                           ;keypad.c: 290: compartment_array[0] = 1;
 13273                           
 13274                           ; BSR set to: 0
 13275  003602  0E00               	movlw	0
 13276  003604  0100               	movlb	0	; () banked
 13277  003606  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13278  003608  0E01               	movlw	1
 13279  00360A  6F80               	movwf	_compartment_array& (0+255),b
 13280                           
 13281                           ;keypad.c: 291: compartment_array[1] = 1;
 13282  00360C  0E00               	movlw	0
 13283  00360E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13284  003610  0E01               	movlw	1
 13285  003612  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13286                           
 13287                           ;keypad.c: 292: compartment_array[2] = 1;
 13288  003614  0E00               	movlw	0
 13289  003616  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13290  003618  0E01               	movlw	1
 13291  00361A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13292                           
 13293                           ;keypad.c: 293: compartment_array[3] = 1;
 13294  00361C  0E00               	movlw	0
 13295  00361E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13296  003620  0E01               	movlw	1
 13297  003622  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13298                           
 13299                           ;keypad.c: 294: compartment_array[4] = 1;
 13300  003624  0E00               	movlw	0
 13301  003626  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13302  003628  0E01               	movlw	1
 13303  00362A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13304                           
 13305                           ;keypad.c: 295: compartment_array[5] = 1;
 13306  00362C  0E00               	movlw	0
 13307  00362E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13308  003630  0E01               	movlw	1
 13309  003632  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13310                           
 13311                           ;keypad.c: 296: compartment_array[6] = 1;
 13312  003634  0E00               	movlw	0
 13313  003636  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13314  003638  0E01               	movlw	1
 13315  00363A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13316                           
 13317                           ;keypad.c: 297: compartment_array[7] = 1;
 13318  00363C  0E00               	movlw	0
 13319  00363E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13320  003640  0E01               	movlw	1
 13321  003642  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13322                           
 13323                           ;keypad.c: 300: compartment_number[0] = 0;
 13324  003644  0E00               	movlw	0
 13325  003646  6E47               	movwf	_compartment_number+1,c
 13326  003648  0E00               	movlw	0
 13327  00364A  6E46               	movwf	_compartment_number,c
 13328                           
 13329                           ;keypad.c: 301: compartment_number[1] = 1;
 13330  00364C  0E00               	movlw	0
 13331  00364E  6E49               	movwf	_compartment_number+3,c
 13332  003650  0E01               	movlw	1
 13333  003652  6E48               	movwf	_compartment_number+2,c
 13334                           
 13335                           ;keypad.c: 302: compartment_number[2] = 2;
 13336  003654  0E00               	movlw	0
 13337  003656  6E4B               	movwf	_compartment_number+5,c
 13338  003658  0E02               	movlw	2
 13339  00365A  6E4A               	movwf	_compartment_number+4,c
 13340                           
 13341                           ;keypad.c: 303: compartment_number[3] = 3;
 13342  00365C  0E00               	movlw	0
 13343  00365E  6E4D               	movwf	_compartment_number+7,c
 13344  003660  0E03               	movlw	3
 13345  003662  6E4C               	movwf	_compartment_number+6,c
 13346                           
 13347                           ;keypad.c: 304: compartment_number[4] = 4;
 13348  003664  0E00               	movlw	0
 13349  003666  6E4F               	movwf	_compartment_number+9,c
 13350  003668  0E04               	movlw	4
 13351  00366A  6E4E               	movwf	_compartment_number+8,c
 13352                           
 13353                           ;keypad.c: 305: compartment_number[5] = 5;
 13354  00366C  0E00               	movlw	0
 13355  00366E  6E51               	movwf	_compartment_number+11,c
 13356  003670  0E05               	movlw	5
 13357  003672  6E50               	movwf	_compartment_number+10,c
 13358                           
 13359                           ;keypad.c: 306: compartment_number[6] = 6;
 13360  003674  0E00               	movlw	0
 13361  003676  6E53               	movwf	_compartment_number+13,c
 13362  003678  0E06               	movlw	6
 13363  00367A  6E52               	movwf	_compartment_number+12,c
 13364                           
 13365                           ;keypad.c: 307: compartment_number[7] = 7;
 13366  00367C  0E00               	movlw	0
 13367  00367E  6E55               	movwf	_compartment_number+15,c
 13368  003680  0E07               	movlw	7
 13369  003682  6E54               	movwf	_compartment_number+14,c
 13370                           
 13371                           ;keypad.c: 309: break;
 13372  003684  0012               	return	
 13373  003686                     
 13374                           ;keypad.c: 311: compartment_array[0] = 0;
 13375                           
 13376                           ; BSR set to: 0
 13377  003686  0E00               	movlw	0
 13378  003688  0100               	movlb	0	; () banked
 13379  00368A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13380  00368C  0E00               	movlw	0
 13381  00368E  6F80               	movwf	_compartment_array& (0+255),b
 13382                           
 13383                           ;keypad.c: 312: compartment_array[1] = 0;
 13384  003690  0E00               	movlw	0
 13385  003692  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13386  003694  0E00               	movlw	0
 13387  003696  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13388                           
 13389                           ;keypad.c: 313: compartment_array[2] = 0;
 13390  003698  0E00               	movlw	0
 13391  00369A  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13392  00369C  0E00               	movlw	0
 13393  00369E  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13394                           
 13395                           ;keypad.c: 314: compartment_array[3] = 0;
 13396  0036A0  0E00               	movlw	0
 13397  0036A2  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13398  0036A4  0E00               	movlw	0
 13399  0036A6  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13400                           
 13401                           ;keypad.c: 315: compartment_array[4] = 0;
 13402  0036A8  0E00               	movlw	0
 13403  0036AA  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13404  0036AC  0E00               	movlw	0
 13405  0036AE  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13406                           
 13407                           ;keypad.c: 316: compartment_array[5] = 0;
 13408  0036B0  0E00               	movlw	0
 13409  0036B2  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13410  0036B4  0E00               	movlw	0
 13411  0036B6  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13412                           
 13413                           ;keypad.c: 317: compartment_array[6] = 0;
 13414  0036B8  0E00               	movlw	0
 13415  0036BA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13416  0036BC  0E00               	movlw	0
 13417  0036BE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13418                           
 13419                           ;keypad.c: 318: compartment_array[7] = 0;
 13420  0036C0  0E00               	movlw	0
 13421  0036C2  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13422  0036C4  0E00               	movlw	0
 13423  0036C6  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13424                           
 13425                           ;keypad.c: 320: }
 13426  0036C8  0012               	return	
 13427  0036CA                     i2l780:
 13428                           
 13429                           ; BSR set to: 0
 13430  0036CA  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 13431  0036CE  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 13432                           
 13433                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13434                           ; Switch size 1, requested type "space"
 13435                           ; Number of cases is 1, Range of values is 0 to 0
 13436                           ; switch strategies available:
 13437                           ; Name         Instructions Cycles
 13438                           ; simple_byte            4     3 (average)
 13439                           ;	Chosen strategy is simple_byte
 13440  0036D2  5004               	movf	??i2_generate_compartment_array+1,w,c
 13441  0036D4  0A00               	xorlw	0	; case 0
 13442  0036D6  A4D8               	btfss	status,2,c
 13443  0036D8  D7D6               	goto	i2l787
 13444                           
 13445                           ; Switch size 1, requested type "space"
 13446                           ; Number of cases is 5, Range of values is 4 to 8
 13447                           ; switch strategies available:
 13448                           ; Name         Instructions Cycles
 13449                           ; simple_byte           16     9 (average)
 13450                           ;	Chosen strategy is simple_byte
 13451  0036DA  5003               	movf	??i2_generate_compartment_array,w,c
 13452  0036DC  0A04               	xorlw	4	; case 4
 13453  0036DE  B4D8               	btfsc	status,2,c
 13454  0036E0  D6D8               	goto	i2l781
 13455  0036E2  0A01               	xorlw	1	; case 5
 13456  0036E4  B4D8               	btfsc	status,2,c
 13457  0036E6  D6F7               	goto	i2l783
 13458  0036E8  0A03               	xorlw	3	; case 6
 13459  0036EA  B4D8               	btfsc	status,2,c
 13460  0036EC  D71E               	goto	i2l784
 13461  0036EE  0A01               	xorlw	1	; case 7
 13462  0036F0  B4D8               	btfsc	status,2,c
 13463  0036F2  D74D               	goto	i2l785
 13464  0036F4  0A0F               	xorlw	15	; case 8
 13465  0036F6  B4D8               	btfsc	status,2,c
 13466  0036F8  D784               	goto	i2l786
 13467  0036FA  D7C5               	goto	i2l787
 13468  0036FC                     __end_ofi2_generate_compartment_array:
 13469                           	opt stack 0
 13470                           pclatu	equ	0xFFB
 13471                           pclath	equ	0xFFA
 13472                           tblptru	equ	0xFF8
 13473                           tblptrh	equ	0xFF7
 13474                           tblptrl	equ	0xFF6
 13475                           tablat	equ	0xFF5
 13476                           prodh	equ	0xFF4
 13477                           prodl	equ	0xFF3
 13478                           intcon	equ	0xFF2
 13479                           intcon3	equ	0xFF0
 13480                           indf0	equ	0xFEF
 13481                           postinc0	equ	0xFEE
 13482                           fsr0h	equ	0xFEA
 13483                           fsr0l	equ	0xFE9
 13484                           wreg	equ	0xFE8
 13485                           postdec1	equ	0xFE5
 13486                           fsr1h	equ	0xFE2
 13487                           fsr1l	equ	0xFE1
 13488                           indf2	equ	0xFDF
 13489                           postinc2	equ	0xFDE
 13490                           postdec2	equ	0xFDD
 13491                           fsr2h	equ	0xFDA
 13492                           fsr2l	equ	0xFD9
 13493                           status	equ	0xFD8
 13494                           
 13495 ;; *************** function i2___awdiv *****************
 13496 ;; Defined at:
 13497 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  dividend        2    0[COMRAM] int 
 13500 ;;  divisor         2    2[COMRAM] int 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;  __awdiv         2    6[COMRAM] int 
 13503 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13504 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;                  2    0[COMRAM] int 
 13507 ;; Registers used:
 13508 ;;		wreg, status,2, status,0
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13517 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;Total ram usage:        8 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; This function calls:
 13521 ;;		Nothing
 13522 ;; This function is called by:
 13523 ;;		_interruptHandler
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           	psect	text34
 13528  003FCC                     __ptext34:
 13529                           	opt stack 0
 13530  003FCC                     i2___awdiv:
 13531                           	opt stack 26
 13532                           
 13533                           ;incstack = 0
 13534  003FCC  0E00               	movlw	0
 13535  003FCE  6E06               	movwf	i2___awdiv@sign,c
 13536  003FD0  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13537  003FD2  D006               	goto	i2l1083
 13538  003FD4  6C03               	negf	i2___awdiv@divisor,c
 13539  003FD6  1E04               	comf	i2___awdiv@divisor+1,f,c
 13540  003FD8  B0D8               	btfsc	status,0,c
 13541  003FDA  2A04               	incf	i2___awdiv@divisor+1,f,c
 13542  003FDC  0E01               	movlw	1
 13543  003FDE  6E06               	movwf	i2___awdiv@sign,c
 13544  003FE0                     i2l1083:
 13545  003FE0  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13546  003FE2  D006               	goto	i2l1084
 13547  003FE4  6C01               	negf	i2___awdiv@dividend,c
 13548  003FE6  1E02               	comf	i2___awdiv@dividend+1,f,c
 13549  003FE8  B0D8               	btfsc	status,0,c
 13550  003FEA  2A02               	incf	i2___awdiv@dividend+1,f,c
 13551  003FEC  0E01               	movlw	1
 13552  003FEE  1A06               	xorwf	i2___awdiv@sign,f,c
 13553  003FF0                     i2l1084:
 13554  003FF0  0E00               	movlw	0
 13555  003FF2  6E08               	movwf	i2___awdiv@quotient+1,c
 13556  003FF4  0E00               	movlw	0
 13557  003FF6  6E07               	movwf	i2___awdiv@quotient,c
 13558  003FF8  5003               	movf	i2___awdiv@divisor,w,c
 13559  003FFA  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13560  003FFC  B4D8               	btfsc	status,2,c
 13561  003FFE  D01C               	goto	i2l1091
 13562  004000  0E01               	movlw	1
 13563  004002  6E05               	movwf	i2___awdiv@counter,c
 13564  004004  D004               	goto	i2l1086
 13565  004006  90D8               	bcf	status,0,c
 13566  004008  3603               	rlcf	i2___awdiv@divisor,f,c
 13567  00400A  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13568  00400C  2A05               	incf	i2___awdiv@counter,f,c
 13569  00400E                     i2l1086:
 13570  00400E  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13571  004010  D7FA               	goto	i2l1087
 13572  004012                     i2u401_40:
 13573  004012  90D8               	bcf	status,0,c
 13574  004014  3607               	rlcf	i2___awdiv@quotient,f,c
 13575  004016  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13576  004018  5003               	movf	i2___awdiv@divisor,w,c
 13577  00401A  5C01               	subwf	i2___awdiv@dividend,w,c
 13578  00401C  5004               	movf	i2___awdiv@divisor+1,w,c
 13579  00401E  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13580  004020  A0D8               	btfss	status,0,c
 13581  004022  D005               	goto	i2l1090
 13582  004024  5003               	movf	i2___awdiv@divisor,w,c
 13583  004026  5E01               	subwf	i2___awdiv@dividend,f,c
 13584  004028  5004               	movf	i2___awdiv@divisor+1,w,c
 13585  00402A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13586  00402C  8007               	bsf	i2___awdiv@quotient,0,c
 13587  00402E                     i2l1090:
 13588  00402E  90D8               	bcf	status,0,c
 13589  004030  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13590  004032  3203               	rrcf	i2___awdiv@divisor,f,c
 13591  004034  2E05               	decfsz	i2___awdiv@counter,f,c
 13592  004036  D7ED               	goto	i2u401_40
 13593  004038                     i2l1091:
 13594  004038  5006               	movf	i2___awdiv@sign,w,c
 13595  00403A  B4D8               	btfsc	status,2,c
 13596  00403C  D004               	goto	i2l1092
 13597  00403E  6C07               	negf	i2___awdiv@quotient,c
 13598  004040  1E08               	comf	i2___awdiv@quotient+1,f,c
 13599  004042  B0D8               	btfsc	status,0,c
 13600  004044  2A08               	incf	i2___awdiv@quotient+1,f,c
 13601  004046                     i2l1092:
 13602  004046  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13603  00404A  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13604  00404E  0012               	return	
 13605  004050                     __end_ofi2___awdiv:
 13606                           	opt stack 0
 13607                           pclatu	equ	0xFFB
 13608                           pclath	equ	0xFFA
 13609                           tblptru	equ	0xFF8
 13610                           tblptrh	equ	0xFF7
 13611                           tblptrl	equ	0xFF6
 13612                           tablat	equ	0xFF5
 13613                           prodh	equ	0xFF4
 13614                           prodl	equ	0xFF3
 13615                           intcon	equ	0xFF2
 13616                           intcon3	equ	0xFF0
 13617                           indf0	equ	0xFEF
 13618                           postinc0	equ	0xFEE
 13619                           fsr0h	equ	0xFEA
 13620                           fsr0l	equ	0xFE9
 13621                           wreg	equ	0xFE8
 13622                           postdec1	equ	0xFE5
 13623                           fsr1h	equ	0xFE2
 13624                           fsr1l	equ	0xFE1
 13625                           indf2	equ	0xFDF
 13626                           postinc2	equ	0xFDE
 13627                           postdec2	equ	0xFDD
 13628                           fsr2h	equ	0xFDA
 13629                           fsr2l	equ	0xFD9
 13630                           status	equ	0xFD8
 13631                           
 13632 ;; *************** function i2_I2C_Master_Write *****************
 13633 ;; Defined at:
 13634 ;;		line 108 in file "I2C.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;		None
 13639 ;; Return value:  Size  Location     Type
 13640 ;;                  1    wreg      void 
 13641 ;; Registers used:
 13642 ;;		wreg, status,2, status,0, cstack
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;Total ram usage:        2 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    1
 13655 ;; This function calls:
 13656 ;;		i2_I2C_Master_Wait
 13657 ;; This function is called by:
 13658 ;;		_interruptHandler
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           	psect	text35
 13663  004752                     __ptext35:
 13664                           	opt stack 0
 13665  004752                     i2_I2C_Master_Write:
 13666                           	opt stack 25
 13667                           
 13668                           ;I2C.c: 116: I2C_Master_Wait();
 13669                           
 13670                           ;incstack = 0
 13671  004752  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13672                           
 13673                           ;I2C.c: 117: SSPBUF = byteToWrite;
 13674  004756  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 13675  00475A  0012               	return		;funcret
 13676  00475C                     __end_ofi2_I2C_Master_Write:
 13677                           	opt stack 0
 13678                           pclatu	equ	0xFFB
 13679                           pclath	equ	0xFFA
 13680                           tblptru	equ	0xFF8
 13681                           tblptrh	equ	0xFF7
 13682                           tblptrl	equ	0xFF6
 13683                           tablat	equ	0xFF5
 13684                           prodh	equ	0xFF4
 13685                           prodl	equ	0xFF3
 13686                           intcon	equ	0xFF2
 13687                           intcon3	equ	0xFF0
 13688                           indf0	equ	0xFEF
 13689                           postinc0	equ	0xFEE
 13690                           fsr0h	equ	0xFEA
 13691                           fsr0l	equ	0xFE9
 13692                           wreg	equ	0xFE8
 13693                           postdec1	equ	0xFE5
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           fsr2h	equ	0xFDA
 13700                           fsr2l	equ	0xFD9
 13701                           status	equ	0xFD8
 13702                           
 13703 ;; *************** function i2_I2C_Master_Stop *****************
 13704 ;; Defined at:
 13705 ;;		line 95 in file "I2C.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;		None
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;		None
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      void 
 13712 ;; Registers used:
 13713 ;;		wreg, status,2, status,0, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13723 ;;Total ram usage:        0 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    1
 13726 ;; This function calls:
 13727 ;;		i2_I2C_Master_Wait
 13728 ;; This function is called by:
 13729 ;;		_interruptHandler
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           	psect	text36
 13734  00476C                     __ptext36:
 13735                           	opt stack 0
 13736  00476C                     i2_I2C_Master_Stop:
 13737                           	opt stack 25
 13738                           
 13739                           ;I2C.c: 104: I2C_Master_Wait();
 13740                           
 13741                           ;incstack = 0
 13742  00476C  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13743                           
 13744                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13745  004770  84C5               	bsf	4037,2,c	;volatile
 13746  004772  0012               	return		;funcret
 13747  004774                     __end_ofi2_I2C_Master_Stop:
 13748                           	opt stack 0
 13749                           pclatu	equ	0xFFB
 13750                           pclath	equ	0xFFA
 13751                           tblptru	equ	0xFF8
 13752                           tblptrh	equ	0xFF7
 13753                           tblptrl	equ	0xFF6
 13754                           tablat	equ	0xFF5
 13755                           prodh	equ	0xFF4
 13756                           prodl	equ	0xFF3
 13757                           intcon	equ	0xFF2
 13758                           intcon3	equ	0xFF0
 13759                           indf0	equ	0xFEF
 13760                           postinc0	equ	0xFEE
 13761                           fsr0h	equ	0xFEA
 13762                           fsr0l	equ	0xFE9
 13763                           wreg	equ	0xFE8
 13764                           postdec1	equ	0xFE5
 13765                           fsr1h	equ	0xFE2
 13766                           fsr1l	equ	0xFE1
 13767                           indf2	equ	0xFDF
 13768                           postinc2	equ	0xFDE
 13769                           postdec2	equ	0xFDD
 13770                           fsr2h	equ	0xFDA
 13771                           fsr2l	equ	0xFD9
 13772                           status	equ	0xFD8
 13773                           
 13774 ;; *************** function i2_I2C_Master_Start *****************
 13775 ;; Defined at:
 13776 ;;		line 69 in file "I2C.c"
 13777 ;; Parameters:    Size  Location     Type
 13778 ;;		None
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;		None
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  1    wreg      void 
 13783 ;; Registers used:
 13784 ;;		wreg, status,2, status,0, cstack
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13794 ;;Total ram usage:        0 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    1
 13797 ;; This function calls:
 13798 ;;		i2_I2C_Master_Wait
 13799 ;; This function is called by:
 13800 ;;		_interruptHandler
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           	psect	text37
 13805  004774                     __ptext37:
 13806                           	opt stack 0
 13807  004774                     i2_I2C_Master_Start:
 13808                           	opt stack 25
 13809                           
 13810                           ;I2C.c: 78: I2C_Master_Wait();
 13811                           
 13812                           ;incstack = 0
 13813  004774  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13814                           
 13815                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 13816  004778  80C5               	bsf	4037,0,c	;volatile
 13817  00477A  0012               	return		;funcret
 13818  00477C                     __end_ofi2_I2C_Master_Start:
 13819                           	opt stack 0
 13820                           pclatu	equ	0xFFB
 13821                           pclath	equ	0xFFA
 13822                           tblptru	equ	0xFF8
 13823                           tblptrh	equ	0xFF7
 13824                           tblptrl	equ	0xFF6
 13825                           tablat	equ	0xFF5
 13826                           prodh	equ	0xFF4
 13827                           prodl	equ	0xFF3
 13828                           intcon	equ	0xFF2
 13829                           intcon3	equ	0xFF0
 13830                           indf0	equ	0xFEF
 13831                           postinc0	equ	0xFEE
 13832                           fsr0h	equ	0xFEA
 13833                           fsr0l	equ	0xFE9
 13834                           wreg	equ	0xFE8
 13835                           postdec1	equ	0xFE5
 13836                           fsr1h	equ	0xFE2
 13837                           fsr1l	equ	0xFE1
 13838                           indf2	equ	0xFDF
 13839                           postinc2	equ	0xFDE
 13840                           postdec2	equ	0xFDD
 13841                           fsr2h	equ	0xFDA
 13842                           fsr2l	equ	0xFD9
 13843                           status	equ	0xFD8
 13844                           
 13845 ;; *************** function i2_I2C_Master_Read *****************
 13846 ;; Defined at:
 13847 ;;		line 120 in file "I2C.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;  ackBit          1    wreg     unsigned char 
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;  ackBit          1    1[COMRAM] unsigned char 
 13852 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  1    wreg      unsigned char 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0, cstack
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;Total ram usage:        2 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    1
 13869 ;; This function calls:
 13870 ;;		i2_I2C_Master_Wait
 13871 ;; This function is called by:
 13872 ;;		_interruptHandler
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text38
 13877  00464C                     __ptext38:
 13878                           	opt stack 0
 13879  00464C                     i2_I2C_Master_Read:
 13880                           	opt stack 25
 13881                           
 13882                           ;incstack = 0
 13883                           ;i2I2C_Master_Read@ackBit stored from wreg
 13884  00464C  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 13885                           
 13886                           ;I2C.c: 130: unsigned char receivedByte;
 13887                           ;I2C.c: 132: I2C_Master_Wait();
 13888  00464E  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13889                           
 13890                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 13891  004652  86C5               	bsf	4037,3,c	;volatile
 13892                           
 13893                           ;I2C.c: 135: I2C_Master_Wait();
 13894  004654  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13895                           
 13896                           ;I2C.c: 136: receivedByte = SSPBUF;
 13897  004658  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 13898                           
 13899                           ;I2C.c: 138: I2C_Master_Wait();
 13900  00465C  EC8E  F023         	call	i2_I2C_Master_Wait	;wreg free
 13901                           
 13902                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 13903  004660  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 13904  004662  D002               	bra	i2u367_45
 13905  004664  9AC5               	bcf	4037,5,c	;volatile
 13906  004666  D001               	bra	i2u367_46
 13907  004668                     i2u367_45:
 13908  004668  8AC5               	bsf	4037,5,c	;volatile
 13909  00466A                     i2u367_46:
 13910                           
 13911                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 13912  00466A  88C5               	bsf	4037,4,c	;volatile
 13913                           
 13914                           ;I2C.c: 142: return receivedByte;
 13915  00466C  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 13916  00466E  0012               	return	
 13917  004670                     __end_ofi2_I2C_Master_Read:
 13918                           	opt stack 0
 13919                           pclatu	equ	0xFFB
 13920                           pclath	equ	0xFFA
 13921                           tblptru	equ	0xFF8
 13922                           tblptrh	equ	0xFF7
 13923                           tblptrl	equ	0xFF6
 13924                           tablat	equ	0xFF5
 13925                           prodh	equ	0xFF4
 13926                           prodl	equ	0xFF3
 13927                           intcon	equ	0xFF2
 13928                           intcon3	equ	0xFF0
 13929                           indf0	equ	0xFEF
 13930                           postinc0	equ	0xFEE
 13931                           fsr0h	equ	0xFEA
 13932                           fsr0l	equ	0xFE9
 13933                           wreg	equ	0xFE8
 13934                           postdec1	equ	0xFE5
 13935                           fsr1h	equ	0xFE2
 13936                           fsr1l	equ	0xFE1
 13937                           indf2	equ	0xFDF
 13938                           postinc2	equ	0xFDE
 13939                           postdec2	equ	0xFDD
 13940                           fsr2h	equ	0xFDA
 13941                           fsr2l	equ	0xFD9
 13942                           status	equ	0xFD8
 13943                           
 13944 ;; *************** function i2_I2C_Master_Wait *****************
 13945 ;; Defined at:
 13946 ;;		line 51 in file "I2C.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;		None
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;		None
 13951 ;; Return value:  Size  Location     Type
 13952 ;;                  1    wreg      void 
 13953 ;; Registers used:
 13954 ;;		wreg, status,2, status,0
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;Total ram usage:        1 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; This function calls:
 13967 ;;		Nothing
 13968 ;; This function is called by:
 13969 ;;		i2_I2C_Master_Start
 13970 ;;		i2_I2C_Master_Stop
 13971 ;;		i2_I2C_Master_Write
 13972 ;;		i2_I2C_Master_Read
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text39
 13977  00471C                     __ptext39:
 13978                           	opt stack 0
 13979  00471C                     i2_I2C_Master_Wait:
 13980                           	opt stack 25
 13981                           
 13982                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 13983                           
 13984                           ;incstack = 0
 13985  00471C  B4C7               	btfsc	4039,2,c	;volatile
 13986  00471E  D7FE               	goto	i2_I2C_Master_Wait
 13987  004720  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13988  004724  0E1F               	movlw	31
 13989  004726  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13990  004728  B4D8               	btfsc	status,2,c
 13991  00472A  0012               	return	
 13992  00472C  D7F7               	goto	i2_I2C_Master_Wait
 13993  00472E                     __end_ofi2_I2C_Master_Wait:
 13994                           	opt stack 0
 13995                           pclatu	equ	0xFFB
 13996                           pclath	equ	0xFFA
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           intcon3	equ	0xFF0
 14005                           indf0	equ	0xFEF
 14006                           postinc0	equ	0xFEE
 14007                           fsr0h	equ	0xFEA
 14008                           fsr0l	equ	0xFE9
 14009                           wreg	equ	0xFE8
 14010                           postdec1	equ	0xFE5
 14011                           fsr1h	equ	0xFE2
 14012                           fsr1l	equ	0xFE1
 14013                           indf2	equ	0xFDF
 14014                           postinc2	equ	0xFDE
 14015                           postdec2	equ	0xFDD
 14016                           fsr2h	equ	0xFDA
 14017                           fsr2l	equ	0xFD9
 14018                           status	equ	0xFD8
 14019                           
 14020 ;; *************** function i2_I2C_Master_Init *****************
 14021 ;; Defined at:
 14022 ;;		line 14 in file "I2C.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;		None
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  1    wreg      void 
 14029 ;; Registers used:
 14030 ;;		wreg, status,2, status,0, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14039 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14040 ;;Total ram usage:        8 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; Hardware stack levels required when called:    1
 14043 ;; This function calls:
 14044 ;;		i2___lldiv
 14045 ;; This function is called by:
 14046 ;;		_interruptHandler
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           	psect	text40
 14051  004280                     __ptext40:
 14052                           	opt stack 0
 14053  004280                     i2_I2C_Master_Init:
 14054                           	opt stack 25
 14055                           
 14056                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 14057                           
 14058                           ;incstack = 0
 14059  004280  9AC6               	bcf	4038,5,c	;volatile
 14060                           
 14061                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 14062  004282  8694               	bsf	3988,3,c	;volatile
 14063                           
 14064                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 14065  004284  8894               	bsf	3988,4,c	;volatile
 14066                           
 14067                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 14068  004286  0E80               	movlw	128
 14069  004288  6EC7               	movwf	4039,c	;volatile
 14070                           
 14071                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 14072  00428A  0E28               	movlw	40
 14073  00428C  6EC6               	movwf	4038,c	;volatile
 14074                           
 14075                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 14076  00428E  0E00               	movlw	0
 14077  004290  6EC5               	movwf	4037,c	;volatile
 14078                           
 14079                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 14080  004292  0E00               	movlw	0
 14081  004294  6E01               	movwf	i2___lldiv@dividend,c
 14082  004296  0E48               	movlw	72
 14083  004298  6E02               	movwf	i2___lldiv@dividend+1,c
 14084  00429A  0EE8               	movlw	232
 14085  00429C  6E03               	movwf	i2___lldiv@dividend+2,c
 14086  00429E  0E01               	movlw	1
 14087  0042A0  6E04               	movwf	i2___lldiv@dividend+3,c
 14088  0042A2  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 14089  0042A6  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 14090  0042AA  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 14091  0042AE  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 14092  0042B2  0E02               	movlw	2
 14093  0042B4                     i2u366_45:
 14094  0042B4  90D8               	bcf	status,0,c
 14095  0042B6  3612               	rlcf	??i2_I2C_Master_Init,f,c
 14096  0042B8  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 14097  0042BA  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 14098  0042BC  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 14099  0042BE  2EE8               	decfsz	wreg,f,c
 14100  0042C0  D7F9               	goto	i2u366_45
 14101  0042C2  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 14102  0042C6  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 14103  0042CA  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 14104  0042CE  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 14105  0042D2  EC28  F020         	call	i2___lldiv	;wreg free
 14106  0042D6  0401               	decf	?i2___lldiv,w,c
 14107  0042D8  6EC8               	movwf	4040,c	;volatile
 14108  0042DA  0012               	return		;funcret
 14109  0042DC                     __end_ofi2_I2C_Master_Init:
 14110                           	opt stack 0
 14111                           pclatu	equ	0xFFB
 14112                           pclath	equ	0xFFA
 14113                           tblptru	equ	0xFF8
 14114                           tblptrh	equ	0xFF7
 14115                           tblptrl	equ	0xFF6
 14116                           tablat	equ	0xFF5
 14117                           prodh	equ	0xFF4
 14118                           prodl	equ	0xFF3
 14119                           intcon	equ	0xFF2
 14120                           intcon3	equ	0xFF0
 14121                           indf0	equ	0xFEF
 14122                           postinc0	equ	0xFEE
 14123                           fsr0h	equ	0xFEA
 14124                           fsr0l	equ	0xFE9
 14125                           wreg	equ	0xFE8
 14126                           postdec1	equ	0xFE5
 14127                           fsr1h	equ	0xFE2
 14128                           fsr1l	equ	0xFE1
 14129                           indf2	equ	0xFDF
 14130                           postinc2	equ	0xFDE
 14131                           postdec2	equ	0xFDD
 14132                           fsr2h	equ	0xFDA
 14133                           fsr2l	equ	0xFD9
 14134                           status	equ	0xFD8
 14135                           
 14136 ;; *************** function i2___lldiv *****************
 14137 ;; Defined at:
 14138 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  dividend        4    0[COMRAM] unsigned long 
 14141 ;;  divisor         4    4[COMRAM] unsigned long 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14144 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14145 ;; Return value:  Size  Location     Type
 14146 ;;                  4    0[COMRAM] unsigned long 
 14147 ;; Registers used:
 14148 ;;		wreg, status,2, status,0
 14149 ;; Tracked objects:
 14150 ;;		On entry : 0/0
 14151 ;;		On exit  : 0/0
 14152 ;;		Unchanged: 0/0
 14153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14154 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14155 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;Total ram usage:       13 bytes
 14159 ;; Hardware stack levels used:    1
 14160 ;; This function calls:
 14161 ;;		Nothing
 14162 ;; This function is called by:
 14163 ;;		i2_I2C_Master_Init
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           	psect	text41
 14168  004050                     __ptext41:
 14169                           	opt stack 0
 14170  004050                     i2___lldiv:
 14171                           	opt stack 25
 14172                           
 14173                           ;incstack = 0
 14174  004050  0E00               	movlw	0
 14175  004052  6E09               	movwf	i2___lldiv@quotient,c
 14176  004054  0E00               	movlw	0
 14177  004056  6E0A               	movwf	i2___lldiv@quotient+1,c
 14178  004058  0E00               	movlw	0
 14179  00405A  6E0B               	movwf	i2___lldiv@quotient+2,c
 14180  00405C  0E00               	movlw	0
 14181  00405E  6E0C               	movwf	i2___lldiv@quotient+3,c
 14182  004060  5005               	movf	i2___lldiv@divisor,w,c
 14183  004062  1006               	iorwf	i2___lldiv@divisor+1,w,c
 14184  004064  1007               	iorwf	i2___lldiv@divisor+2,w,c
 14185  004066  1008               	iorwf	i2___lldiv@divisor+3,w,c
 14186  004068  B4D8               	btfsc	status,2,c
 14187  00406A  D02A               	goto	i2l1276
 14188  00406C  0E01               	movlw	1
 14189  00406E  6E0D               	movwf	i2___lldiv@counter,c
 14190  004070  D006               	goto	i2l1271
 14191  004072  90D8               	bcf	status,0,c
 14192  004074  3605               	rlcf	i2___lldiv@divisor,f,c
 14193  004076  3606               	rlcf	i2___lldiv@divisor+1,f,c
 14194  004078  3607               	rlcf	i2___lldiv@divisor+2,f,c
 14195  00407A  3608               	rlcf	i2___lldiv@divisor+3,f,c
 14196  00407C  2A0D               	incf	i2___lldiv@counter,f,c
 14197  00407E                     i2l1271:
 14198  00407E  AE08               	btfss	i2___lldiv@divisor+3,7,c
 14199  004080  D7F8               	goto	i2l1272
 14200  004082                     i2u282_40:
 14201  004082  90D8               	bcf	status,0,c
 14202  004084  3609               	rlcf	i2___lldiv@quotient,f,c
 14203  004086  360A               	rlcf	i2___lldiv@quotient+1,f,c
 14204  004088  360B               	rlcf	i2___lldiv@quotient+2,f,c
 14205  00408A  360C               	rlcf	i2___lldiv@quotient+3,f,c
 14206  00408C  5005               	movf	i2___lldiv@divisor,w,c
 14207  00408E  5C01               	subwf	i2___lldiv@dividend,w,c
 14208  004090  5006               	movf	i2___lldiv@divisor+1,w,c
 14209  004092  5802               	subwfb	i2___lldiv@dividend+1,w,c
 14210  004094  5007               	movf	i2___lldiv@divisor+2,w,c
 14211  004096  5803               	subwfb	i2___lldiv@dividend+2,w,c
 14212  004098  5008               	movf	i2___lldiv@divisor+3,w,c
 14213  00409A  5804               	subwfb	i2___lldiv@dividend+3,w,c
 14214  00409C  A0D8               	btfss	status,0,c
 14215  00409E  D009               	goto	i2l1275
 14216  0040A0  5005               	movf	i2___lldiv@divisor,w,c
 14217  0040A2  5E01               	subwf	i2___lldiv@dividend,f,c
 14218  0040A4  5006               	movf	i2___lldiv@divisor+1,w,c
 14219  0040A6  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 14220  0040A8  5007               	movf	i2___lldiv@divisor+2,w,c
 14221  0040AA  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 14222  0040AC  5008               	movf	i2___lldiv@divisor+3,w,c
 14223  0040AE  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 14224  0040B0  8009               	bsf	i2___lldiv@quotient,0,c
 14225  0040B2                     i2l1275:
 14226  0040B2  90D8               	bcf	status,0,c
 14227  0040B4  3208               	rrcf	i2___lldiv@divisor+3,f,c
 14228  0040B6  3207               	rrcf	i2___lldiv@divisor+2,f,c
 14229  0040B8  3206               	rrcf	i2___lldiv@divisor+1,f,c
 14230  0040BA  3205               	rrcf	i2___lldiv@divisor,f,c
 14231  0040BC  2E0D               	decfsz	i2___lldiv@counter,f,c
 14232  0040BE  D7E1               	goto	i2u282_40
 14233  0040C0                     i2l1276:
 14234  0040C0  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 14235  0040C4  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 14236  0040C8  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 14237  0040CC  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 14238  0040D0  0012               	return		;funcret
 14239  0040D2                     __end_ofi2___lldiv:
 14240                           	opt stack 0
 14241                           pclatu	equ	0xFFB
 14242                           pclath	equ	0xFFA
 14243                           tblptru	equ	0xFF8
 14244                           tblptrh	equ	0xFF7
 14245                           tblptrl	equ	0xFF6
 14246                           tablat	equ	0xFF5
 14247                           prodh	equ	0xFF4
 14248                           prodl	equ	0xFF3
 14249                           intcon	equ	0xFF2
 14250                           intcon3	equ	0xFF0
 14251                           indf0	equ	0xFEF
 14252                           postinc0	equ	0xFEE
 14253                           fsr0h	equ	0xFEA
 14254                           fsr0l	equ	0xFE9
 14255                           wreg	equ	0xFE8
 14256                           postdec1	equ	0xFE5
 14257                           fsr1h	equ	0xFE2
 14258                           fsr1l	equ	0xFE1
 14259                           indf2	equ	0xFDF
 14260                           postinc2	equ	0xFDE
 14261                           postdec2	equ	0xFDD
 14262                           fsr2h	equ	0xFDA
 14263                           fsr2l	equ	0xFD9
 14264                           status	equ	0xFD8
 14265                           
 14266 ;; *************** function _strncmp *****************
 14267 ;; Defined at:
 14268 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 14271 ;;		 -> current_set(5), 
 14272 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 14273 ;;		 -> strs(100), 
 14274 ;;  len             2   10[COMRAM] unsigned int 
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;		None
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  2    6[COMRAM] int 
 14279 ;; Registers used:
 14280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14286 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;Total ram usage:        9 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; This function calls:
 14293 ;;		Nothing
 14294 ;; This function is called by:
 14295 ;;		_interruptHandler
 14296 ;; This function uses a non-reentrant model
 14297 ;;
 14298                           
 14299                           	psect	text42
 14300  003EC2                     __ptext42:
 14301                           	opt stack 0
 14302  003EC2                     _strncmp:
 14303                           	opt stack 26
 14304                           
 14305                           ;incstack = 0
 14306  003EC2  D035               	goto	i2l1491
 14307  003EC4                     i2l4592:
 14308  003EC4  C007  FFD9         	movff	strncmp@s1,fsr2l
 14309  003EC8  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14310  003ECC  50DF               	movf	indf2,w,c
 14311  003ECE  B4D8               	btfsc	status,2,c
 14312  003ED0  D010               	goto	i2u333_40
 14313  003ED2  C007  FFD9         	movff	strncmp@s1,fsr2l
 14314  003ED6  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14315  003EDA  50DF               	movf	indf2,w,c
 14316  003EDC  6E0D               	movwf	??_strncmp& (0+255),c
 14317  003EDE  C009  FFF6         	movff	strncmp@s2,tblptrl
 14318  003EE2  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14319  003EE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14320  003EE6  6AF8               	clrf	tblptru,c
 14321  003EE8                     	endif
 14322  003EE8                     	if	0	;tblptru may be non-zero
 14323  003EE8                     	endif
 14324  003EE8  0008               	tblrd		*
 14325  003EEA  50F5               	movf	tablat,w,c
 14326  003EEC  180D               	xorwf	??_strncmp,w,c
 14327  003EEE  B4D8               	btfsc	status,2,c
 14328  003EF0  D01A               	goto	i2l1493
 14329  003EF2                     i2u333_40:
 14330  003EF2  C009  FFF6         	movff	strncmp@s2,tblptrl
 14331  003EF6  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14332  003EFA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14333  003EFA  6AF8               	clrf	tblptru,c
 14334  003EFC                     	endif
 14335  003EFC                     	if	0	;tblptru may be non-zero
 14336  003EFC                     	endif
 14337  003EFC  0008               	tblrd		*
 14338  003EFE  50F5               	movf	tablat,w,c
 14339  003F00  6E0D               	movwf	??_strncmp& (0+255),c
 14340  003F02  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 14341  003F04  1E0D               	comf	??_strncmp,f,c
 14342  003F06  1E0E               	comf	??_strncmp+1,f,c
 14343  003F08  4A0D               	infsnz	??_strncmp,f,c
 14344  003F0A  2A0E               	incf	??_strncmp+1,f,c
 14345  003F0C  C007  FFD9         	movff	strncmp@s1,fsr2l
 14346  003F10  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14347  003F14  50DF               	movf	indf2,w,c
 14348  003F16  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 14349  003F18  500F               	movf	??_strncmp+2,w,c
 14350  003F1A  240D               	addwf	??_strncmp,w,c
 14351  003F1C  6E07               	movwf	?_strncmp,c
 14352  003F1E  0E00               	movlw	0
 14353  003F20  200E               	addwfc	??_strncmp+1,w,c
 14354  003F22  6E08               	movwf	?_strncmp+1,c
 14355  003F24  0012               	return	
 14356  003F26                     i2l1493:
 14357  003F26  4A07               	infsnz	strncmp@s1,f,c
 14358  003F28  2A08               	incf	strncmp@s1+1,f,c
 14359  003F2A  4A09               	infsnz	strncmp@s2,f,c
 14360  003F2C  2A0A               	incf	strncmp@s2+1,f,c
 14361  003F2E                     i2l1491:
 14362  003F2E  060B               	decf	strncmp@len,f,c
 14363  003F30  A0D8               	btfss	status,0,c
 14364  003F32  060C               	decf	strncmp@len+1,f,c
 14365  003F34  280B               	incf	strncmp@len,w,c
 14366  003F36  E1C6               	bnz	i2l4592
 14367  003F38  280C               	incf	strncmp@len+1,w,c
 14368  003F3A  A4D8               	btfss	status,2,c
 14369  003F3C  D7C3               	goto	i2l1492
 14370  003F3E  0E00               	movlw	0
 14371  003F40  6E08               	movwf	?_strncmp+1,c
 14372  003F42  0E00               	movlw	0
 14373  003F44  6E07               	movwf	?_strncmp,c
 14374  003F46  0012               	return	
 14375  003F48                     __end_of_strncmp:
 14376                           	opt stack 0
 14377                           pclatu	equ	0xFFB
 14378                           pclath	equ	0xFFA
 14379                           tblptru	equ	0xFF8
 14380                           tblptrh	equ	0xFF7
 14381                           tblptrl	equ	0xFF6
 14382                           tablat	equ	0xFF5
 14383                           prodh	equ	0xFF4
 14384                           prodl	equ	0xFF3
 14385                           intcon	equ	0xFF2
 14386                           intcon3	equ	0xFF0
 14387                           indf0	equ	0xFEF
 14388                           postinc0	equ	0xFEE
 14389                           fsr0h	equ	0xFEA
 14390                           fsr0l	equ	0xFE9
 14391                           wreg	equ	0xFE8
 14392                           postdec1	equ	0xFE5
 14393                           fsr1h	equ	0xFE2
 14394                           fsr1l	equ	0xFE1
 14395                           indf2	equ	0xFDF
 14396                           postinc2	equ	0xFDE
 14397                           postdec2	equ	0xFDD
 14398                           fsr2h	equ	0xFDA
 14399                           fsr2l	equ	0xFD9
 14400                           status	equ	0xFD8
 14401                           
 14402 ;; *************** function _strcpy *****************
 14403 ;; Defined at:
 14404 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 14405 ;; Parameters:    Size  Location     Type
 14406 ;;  to              2    6[COMRAM] PTR unsigned char 
 14407 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14408 ;;  from            2    8[COMRAM] PTR const unsigned char 
 14409 ;;		 -> STR_77(1), STR_75(1), STR_72(1), STR_69(2), 
 14410 ;;		 -> STR_68(2), STR_67(2), STR_66(2), current_set(5), 
 14411 ;; Auto vars:     Size  Location     Type
 14412 ;;  cp              2   10[COMRAM] PTR unsigned char 
 14413 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14414 ;; Return value:  Size  Location     Type
 14415 ;;                  2    6[COMRAM] PTR unsigned char 
 14416 ;; Registers used:
 14417 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14418 ;; Tracked objects:
 14419 ;;		On entry : 0/0
 14420 ;;		On exit  : 0/0
 14421 ;;		Unchanged: 0/0
 14422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14423 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14427 ;;Total ram usage:        6 bytes
 14428 ;; Hardware stack levels used:    1
 14429 ;; This function calls:
 14430 ;;		Nothing
 14431 ;; This function is called by:
 14432 ;;		_interruptHandler
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           	psect	text43
 14437  004464                     __ptext43:
 14438                           	opt stack 0
 14439  004464                     _strcpy:
 14440                           	opt stack 26
 14441                           
 14442                           ;incstack = 0
 14443  004464  C007  F00B         	movff	strcpy@to,strcpy@cp
 14444  004468  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 14445  00446C  D004               	goto	i2l1485
 14446  00446E  4A0B               	infsnz	strcpy@cp,f,c
 14447  004470  2A0C               	incf	strcpy@cp+1,f,c
 14448  004472  4A09               	infsnz	strcpy@from,f,c
 14449  004474  2A0A               	incf	strcpy@from+1,f,c
 14450  004476                     i2l1485:
 14451  004476  C009  FFF6         	movff	strcpy@from,tblptrl
 14452  00447A  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 14453  00447E  0E00               	movlw	low (__mediumconst shr (0+16))
 14454  004480  6EF8               	movwf	tblptru,c
 14455  004482  C00B  FFD9         	movff	strcpy@cp,fsr2l
 14456  004486  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 14457  00448A  0E0F               	movlw	(high __ramtop+-1)
 14458  00448C  64F7               	cpfsgt	tblptrh,c
 14459  00448E  D003               	bra	i2u328_47
 14460  004490  0008               	tblrd		*
 14461  004492  50F5               	movf	tablat,w,c
 14462  004494  D005               	bra	i2u328_40
 14463  004496                     i2u328_47:
 14464  004496  CFF6 FFE9          	movff	tblptrl,fsr0l
 14465  00449A  CFF7 FFEA          	movff	tblptrh,fsr0h
 14466  00449E  50EF               	movf	indf0,w,c
 14467  0044A0                     i2u328_40:
 14468  0044A0  6EDF               	movwf	indf2,c
 14469  0044A2  50DF               	movf	indf2,w,c
 14470  0044A4  B4D8               	btfsc	status,2,c
 14471  0044A6  0012               	return	
 14472  0044A8  D7E2               	goto	i2l1486
 14473  0044AA                     __end_of_strcpy:
 14474                           	opt stack 0
 14475                           pclatu	equ	0xFFB
 14476                           pclath	equ	0xFFA
 14477                           tblptru	equ	0xFF8
 14478                           tblptrh	equ	0xFF7
 14479                           tblptrl	equ	0xFF6
 14480                           tablat	equ	0xFF5
 14481                           prodh	equ	0xFF4
 14482                           prodl	equ	0xFF3
 14483                           intcon	equ	0xFF2
 14484                           intcon3	equ	0xFF0
 14485                           indf0	equ	0xFEF
 14486                           postinc0	equ	0xFEE
 14487                           fsr0h	equ	0xFEA
 14488                           fsr0l	equ	0xFE9
 14489                           wreg	equ	0xFE8
 14490                           postdec1	equ	0xFE5
 14491                           fsr1h	equ	0xFE2
 14492                           fsr1l	equ	0xFE1
 14493                           indf2	equ	0xFDF
 14494                           postinc2	equ	0xFDE
 14495                           postdec2	equ	0xFDD
 14496                           fsr2h	equ	0xFDA
 14497                           fsr2l	equ	0xFD9
 14498                           status	equ	0xFD8
 14499                           
 14500 ;; *************** function _strcat *****************
 14501 ;; Defined at:
 14502 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  to              2    0[COMRAM] PTR unsigned char 
 14505 ;;		 -> current_set(5), 
 14506 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14507 ;;		 -> temp_set(5), 
 14508 ;; Auto vars:     Size  Location     Type
 14509 ;;  cp              2    4[COMRAM] PTR unsigned char 
 14510 ;;		 -> current_set(5), 
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  2    0[COMRAM] PTR unsigned char 
 14513 ;; Registers used:
 14514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;Total ram usage:        6 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; This function calls:
 14527 ;;		Nothing
 14528 ;; This function is called by:
 14529 ;;		_interruptHandler
 14530 ;; This function uses a non-reentrant model
 14531 ;;
 14532                           
 14533                           	psect	text44
 14534  004530                     __ptext44:
 14535                           	opt stack 0
 14536  004530                     _strcat:
 14537                           	opt stack 26
 14538                           
 14539                           ;incstack = 0
 14540  004530  C001  F005         	movff	strcat@to,strcat@cp
 14541  004534  C002  F006         	movff	strcat@to+1,strcat@cp+1
 14542  004538  D002               	goto	i2l1468
 14543  00453A  4A05               	infsnz	strcat@cp,f,c
 14544  00453C  2A06               	incf	strcat@cp+1,f,c
 14545  00453E                     i2l1468:
 14546  00453E  C005  FFD9         	movff	strcat@cp,fsr2l
 14547  004542  C006  FFDA         	movff	strcat@cp+1,fsr2h
 14548  004546  50DF               	movf	indf2,w,c
 14549  004548  B4D8               	btfsc	status,2,c
 14550  00454A  D005               	goto	i2l1471
 14551  00454C  D7F6               	goto	i2l1469
 14552  00454E  4A05               	infsnz	strcat@cp,f,c
 14553  004550  2A06               	incf	strcat@cp+1,f,c
 14554  004552  4A03               	infsnz	strcat@from,f,c
 14555  004554  2A04               	incf	strcat@from+1,f,c
 14556  004556                     i2l1471:
 14557  004556  C003  FFD9         	movff	strcat@from,fsr2l
 14558  00455A  C004  FFDA         	movff	strcat@from+1,fsr2h
 14559  00455E  C005  FFE1         	movff	strcat@cp,fsr1l
 14560  004562  C006  FFE2         	movff	strcat@cp+1,fsr1h
 14561  004566  CFDF FFE7          	movff	indf2,indf1
 14562  00456A  50E7               	movf	indf1,w,c
 14563  00456C  B4D8               	btfsc	status,2,c
 14564  00456E  0012               	return	
 14565  004570  D7EE               	goto	i2l1472
 14566  004572                     __end_of_strcat:
 14567                           	opt stack 0
 14568                           pclatu	equ	0xFFB
 14569                           pclath	equ	0xFFA
 14570                           tblptru	equ	0xFF8
 14571                           tblptrh	equ	0xFF7
 14572                           tblptrl	equ	0xFF6
 14573                           tablat	equ	0xFF5
 14574                           prodh	equ	0xFF4
 14575                           prodl	equ	0xFF3
 14576                           intcon	equ	0xFF2
 14577                           intcon3	equ	0xFF0
 14578                           indf0	equ	0xFEF
 14579                           postinc0	equ	0xFEE
 14580                           fsr0h	equ	0xFEA
 14581                           fsr0l	equ	0xFE9
 14582                           wreg	equ	0xFE8
 14583                           indf1	equ	0xFE7
 14584                           postdec1	equ	0xFE5
 14585                           fsr1h	equ	0xFE2
 14586                           fsr1l	equ	0xFE1
 14587                           indf2	equ	0xFDF
 14588                           postinc2	equ	0xFDE
 14589                           postdec2	equ	0xFDD
 14590                           fsr2h	equ	0xFDA
 14591                           fsr2l	equ	0xFD9
 14592                           status	equ	0xFD8
 14593                           
 14594 ;; *************** function _is_valid *****************
 14595 ;; Defined at:
 14596 ;;		line 12 in file "keypad.c"
 14597 ;; Parameters:    Size  Location     Type
 14598 ;;		None
 14599 ;; Auto vars:     Size  Location     Type
 14600 ;;		None
 14601 ;; Return value:  Size  Location     Type
 14602 ;;                  2  131[None  ] int 
 14603 ;; Registers used:
 14604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14605 ;; Tracked objects:
 14606 ;;		On entry : 0/0
 14607 ;;		On exit  : 0/0
 14608 ;;		Unchanged: 0/0
 14609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14614 ;;Total ram usage:        2 bytes
 14615 ;; Hardware stack levels used:    1
 14616 ;; Hardware stack levels required when called:    1
 14617 ;; This function calls:
 14618 ;;		_strcmp
 14619 ;;		i2___wmul
 14620 ;; This function is called by:
 14621 ;;		_interruptHandler
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           	psect	text45
 14626  000FF2                     __ptext45:
 14627                           	opt stack 0
 14628  000FF2                     _is_valid:
 14629                           	opt stack 25
 14630                           
 14631                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 14632                           
 14633                           ;incstack = 0
 14634  000FF2  0E78               	movlw	low _current_set2
 14635  000FF4  6E01               	movwf	strcmp@s1,c
 14636  000FF6  0E00               	movlw	high _current_set2
 14637  000FF8  6E02               	movwf	strcmp@s1+1,c
 14638  000FFA  0EFD               	movlw	low STR_66
 14639  000FFC  6E03               	movwf	strcmp@s2,c
 14640  000FFE  0EFF               	movlw	high STR_66
 14641  001000  6E04               	movwf	strcmp@s2+1,c
 14642  001002  EC0D  F022         	call	_strcmp	;wreg free
 14643  001006  5001               	movf	?_strcmp,w,c
 14644  001008  1002               	iorwf	?_strcmp+1,w,c
 14645  00100A  A4D8               	btfss	status,2,c
 14646  00100C  D023               	goto	i2l732
 14647                           
 14648                           ;keypad.c: 17: B=1*number;
 14649  00100E  C07D  F065         	movff	_number,_B
 14650  001012  C07E  F066         	movff	_number+1,_B+1
 14651                           
 14652                           ;keypad.c: 18: total_number = 1*number;
 14653  001016  C07D  F069         	movff	_number,_total_number
 14654  00101A  C07E  F06A         	movff	_number+1,_total_number+1
 14655                           
 14656                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 14657  00101E  90D8               	bcf	status,0,c
 14658  001020  346D               	rlcf	_counter_step,w,c
 14659  001022  6ED9               	movwf	fsr2l,c
 14660  001024  346E               	rlcf	_counter_step+1,w,c
 14661  001026  6EDA               	movwf	fsr2h,c
 14662  001028  0E46               	movlw	low _compartment_number
 14663  00102A  26D9               	addwf	fsr2l,f,c
 14664  00102C  0E00               	movlw	high _compartment_number
 14665  00102E  22DA               	addwfc	fsr2h,f,c
 14666  001030  CFDE F007          	movff	postinc2,??_is_valid
 14667  001034  CFDD F008          	movff	postdec2,??_is_valid+1
 14668  001038  90D8               	bcf	status,0,c
 14669  00103A  3607               	rlcf	??_is_valid,f,c
 14670  00103C  3608               	rlcf	??_is_valid+1,f,c
 14671  00103E  0E30               	movlw	low _B_array
 14672  001040  2407               	addwf	??_is_valid,w,c
 14673  001042  6ED9               	movwf	fsr2l,c
 14674  001044  0E01               	movlw	high _B_array
 14675  001046  2008               	addwfc	??_is_valid+1,w,c
 14676  001048  6EDA               	movwf	fsr2h,c
 14677  00104A  C065  FFDE         	movff	_B,postinc2
 14678  00104E  C066  FFDD         	movff	_B+1,postdec2
 14679                           
 14680                           ;keypad.c: 22: }
 14681  001052  0012               	return	
 14682  001054                     i2l732:
 14683                           
 14684                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 14685  001054  0E78               	movlw	low _current_set2
 14686  001056  6E01               	movwf	strcmp@s1,c
 14687  001058  0E00               	movlw	high _current_set2
 14688  00105A  6E02               	movwf	strcmp@s1+1,c
 14689  00105C  0EEA               	movlw	low (STR_88+2)
 14690  00105E  6E03               	movwf	strcmp@s2,c
 14691  001060  0EFF               	movlw	high (STR_88+2)
 14692  001062  6E04               	movwf	strcmp@s2+1,c
 14693  001064  EC0D  F022         	call	_strcmp	;wreg free
 14694  001068  5001               	movf	?_strcmp,w,c
 14695  00106A  1002               	iorwf	?_strcmp+1,w,c
 14696  00106C  A4D8               	btfss	status,2,c
 14697  00106E  D023               	goto	i2l734
 14698                           
 14699                           ;keypad.c: 25: N=1*number;
 14700  001070  C07D  F063         	movff	_number,_N
 14701  001074  C07E  F064         	movff	_number+1,_N+1
 14702                           
 14703                           ;keypad.c: 26: total_number = 1*number;
 14704  001078  C07D  F069         	movff	_number,_total_number
 14705  00107C  C07E  F06A         	movff	_number+1,_total_number+1
 14706                           
 14707                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 14708  001080  90D8               	bcf	status,0,c
 14709  001082  346D               	rlcf	_counter_step,w,c
 14710  001084  6ED9               	movwf	fsr2l,c
 14711  001086  346E               	rlcf	_counter_step+1,w,c
 14712  001088  6EDA               	movwf	fsr2h,c
 14713  00108A  0E46               	movlw	low _compartment_number
 14714  00108C  26D9               	addwf	fsr2l,f,c
 14715  00108E  0E00               	movlw	high _compartment_number
 14716  001090  22DA               	addwfc	fsr2h,f,c
 14717  001092  CFDE F007          	movff	postinc2,??_is_valid
 14718  001096  CFDD F008          	movff	postdec2,??_is_valid+1
 14719  00109A  90D8               	bcf	status,0,c
 14720  00109C  3607               	rlcf	??_is_valid,f,c
 14721  00109E  3608               	rlcf	??_is_valid+1,f,c
 14722  0010A0  0E10               	movlw	low _N_array
 14723  0010A2  2407               	addwf	??_is_valid,w,c
 14724  0010A4  6ED9               	movwf	fsr2l,c
 14725  0010A6  0E01               	movlw	high _N_array
 14726  0010A8  2008               	addwfc	??_is_valid+1,w,c
 14727  0010AA  6EDA               	movwf	fsr2h,c
 14728  0010AC  C063  FFDE         	movff	_N,postinc2
 14729  0010B0  C064  FFDD         	movff	_N+1,postdec2
 14730                           
 14731                           ;keypad.c: 28: }
 14732  0010B4  0012               	return	
 14733  0010B6                     i2l734:
 14734                           
 14735                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 14736  0010B6  0E78               	movlw	low _current_set2
 14737  0010B8  6E01               	movwf	strcmp@s1,c
 14738  0010BA  0E00               	movlw	high _current_set2
 14739  0010BC  6E02               	movwf	strcmp@s1+1,c
 14740  0010BE  0EEE               	movlw	low (STR_89+2)
 14741  0010C0  6E03               	movwf	strcmp@s2,c
 14742  0010C2  0EFF               	movlw	high (STR_89+2)
 14743  0010C4  6E04               	movwf	strcmp@s2+1,c
 14744  0010C6  EC0D  F022         	call	_strcmp	;wreg free
 14745  0010CA  5001               	movf	?_strcmp,w,c
 14746  0010CC  1002               	iorwf	?_strcmp+1,w,c
 14747  0010CE  A4D8               	btfss	status,2,c
 14748  0010D0  D023               	goto	i2l736
 14749                           
 14750                           ;keypad.c: 30: S=1*number;
 14751  0010D2  C07D  F061         	movff	_number,_S
 14752  0010D6  C07E  F062         	movff	_number+1,_S+1
 14753                           
 14754                           ;keypad.c: 31: total_number = 1*number;
 14755  0010DA  C07D  F069         	movff	_number,_total_number
 14756  0010DE  C07E  F06A         	movff	_number+1,_total_number+1
 14757                           
 14758                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 14759  0010E2  90D8               	bcf	status,0,c
 14760  0010E4  346D               	rlcf	_counter_step,w,c
 14761  0010E6  6ED9               	movwf	fsr2l,c
 14762  0010E8  346E               	rlcf	_counter_step+1,w,c
 14763  0010EA  6EDA               	movwf	fsr2h,c
 14764  0010EC  0E46               	movlw	low _compartment_number
 14765  0010EE  26D9               	addwf	fsr2l,f,c
 14766  0010F0  0E00               	movlw	high _compartment_number
 14767  0010F2  22DA               	addwfc	fsr2h,f,c
 14768  0010F4  CFDE F007          	movff	postinc2,??_is_valid
 14769  0010F8  CFDD F008          	movff	postdec2,??_is_valid+1
 14770  0010FC  90D8               	bcf	status,0,c
 14771  0010FE  3607               	rlcf	??_is_valid,f,c
 14772  001100  3608               	rlcf	??_is_valid+1,f,c
 14773  001102  0E20               	movlw	low _S_array
 14774  001104  2407               	addwf	??_is_valid,w,c
 14775  001106  6ED9               	movwf	fsr2l,c
 14776  001108  0E01               	movlw	high _S_array
 14777  00110A  2008               	addwfc	??_is_valid+1,w,c
 14778  00110C  6EDA               	movwf	fsr2h,c
 14779  00110E  C061  FFDE         	movff	_S,postinc2
 14780  001112  C062  FFDD         	movff	_S+1,postdec2
 14781                           
 14782                           ;keypad.c: 33: }
 14783  001116  0012               	return	
 14784  001118                     i2l736:
 14785                           
 14786                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 14787  001118  0E78               	movlw	low _current_set2
 14788  00111A  6E01               	movwf	strcmp@s1,c
 14789  00111C  0E00               	movlw	high _current_set2
 14790  00111E  6E02               	movwf	strcmp@s1+1,c
 14791  001120  0EF2               	movlw	low (STR_90+2)
 14792  001122  6E03               	movwf	strcmp@s2,c
 14793  001124  0EFF               	movlw	high (STR_90+2)
 14794  001126  6E04               	movwf	strcmp@s2+1,c
 14795  001128  EC0D  F022         	call	_strcmp	;wreg free
 14796  00112C  5001               	movf	?_strcmp,w,c
 14797  00112E  1002               	iorwf	?_strcmp+1,w,c
 14798  001130  A4D8               	btfss	status,2,c
 14799  001132  D023               	goto	i2l738
 14800                           
 14801                           ;keypad.c: 35: W=1*number;
 14802  001134  C07D  F05F         	movff	_number,_W
 14803  001138  C07E  F060         	movff	_number+1,_W+1
 14804                           
 14805                           ;keypad.c: 36: total_number = 1*number;
 14806  00113C  C07D  F069         	movff	_number,_total_number
 14807  001140  C07E  F06A         	movff	_number+1,_total_number+1
 14808                           
 14809                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 14810  001144  90D8               	bcf	status,0,c
 14811  001146  346D               	rlcf	_counter_step,w,c
 14812  001148  6ED9               	movwf	fsr2l,c
 14813  00114A  346E               	rlcf	_counter_step+1,w,c
 14814  00114C  6EDA               	movwf	fsr2h,c
 14815  00114E  0E46               	movlw	low _compartment_number
 14816  001150  26D9               	addwf	fsr2l,f,c
 14817  001152  0E00               	movlw	high _compartment_number
 14818  001154  22DA               	addwfc	fsr2h,f,c
 14819  001156  CFDE F007          	movff	postinc2,??_is_valid
 14820  00115A  CFDD F008          	movff	postdec2,??_is_valid+1
 14821  00115E  90D8               	bcf	status,0,c
 14822  001160  3607               	rlcf	??_is_valid,f,c
 14823  001162  3608               	rlcf	??_is_valid+1,f,c
 14824  001164  0E00               	movlw	low _W_array
 14825  001166  2407               	addwf	??_is_valid,w,c
 14826  001168  6ED9               	movwf	fsr2l,c
 14827  00116A  0E01               	movlw	high _W_array
 14828  00116C  2008               	addwfc	??_is_valid+1,w,c
 14829  00116E  6EDA               	movwf	fsr2h,c
 14830  001170  C05F  FFDE         	movff	_W,postinc2
 14831  001174  C060  FFDD         	movff	_W+1,postdec2
 14832                           
 14833                           ;keypad.c: 38: }
 14834  001178  0012               	return	
 14835  00117A                     i2l738:
 14836                           
 14837                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 14838  00117A  0E78               	movlw	low _current_set2
 14839  00117C  6E01               	movwf	strcmp@s1,c
 14840  00117E  0E00               	movlw	high _current_set2
 14841  001180  6E02               	movwf	strcmp@s1+1,c
 14842  001182  0EE9               	movlw	low (STR_88+1)
 14843  001184  6E03               	movwf	strcmp@s2,c
 14844  001186  0EFF               	movlw	high (STR_88+1)
 14845  001188  6E04               	movwf	strcmp@s2+1,c
 14846  00118A  EC0D  F022         	call	_strcmp	;wreg free
 14847  00118E  5001               	movf	?_strcmp,w,c
 14848  001190  1002               	iorwf	?_strcmp+1,w,c
 14849  001192  A4D8               	btfss	status,2,c
 14850  001194  D042               	goto	i2l740
 14851                           
 14852                           ;keypad.c: 40: B = 1*number;
 14853  001196  C07D  F065         	movff	_number,_B
 14854  00119A  C07E  F066         	movff	_number+1,_B+1
 14855                           
 14856                           ;keypad.c: 42: N = 1*number;
 14857  00119E  C07D  F063         	movff	_number,_N
 14858  0011A2  C07E  F064         	movff	_number+1,_N+1
 14859                           
 14860                           ;keypad.c: 43: total_number = 2*number;
 14861  0011A6  90D8               	bcf	status,0,c
 14862  0011A8  347D               	rlcf	_number,w,c
 14863  0011AA  6E69               	movwf	_total_number,c
 14864  0011AC  347E               	rlcf	_number+1,w,c
 14865  0011AE  6E6A               	movwf	_total_number+1,c
 14866                           
 14867                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 14868  0011B0  90D8               	bcf	status,0,c
 14869  0011B2  346D               	rlcf	_counter_step,w,c
 14870  0011B4  6ED9               	movwf	fsr2l,c
 14871  0011B6  346E               	rlcf	_counter_step+1,w,c
 14872  0011B8  6EDA               	movwf	fsr2h,c
 14873  0011BA  0E46               	movlw	low _compartment_number
 14874  0011BC  26D9               	addwf	fsr2l,f,c
 14875  0011BE  0E00               	movlw	high _compartment_number
 14876  0011C0  22DA               	addwfc	fsr2h,f,c
 14877  0011C2  CFDE F007          	movff	postinc2,??_is_valid
 14878  0011C6  CFDD F008          	movff	postdec2,??_is_valid+1
 14879  0011CA  90D8               	bcf	status,0,c
 14880  0011CC  3607               	rlcf	??_is_valid,f,c
 14881  0011CE  3608               	rlcf	??_is_valid+1,f,c
 14882  0011D0  0E30               	movlw	low _B_array
 14883  0011D2  2407               	addwf	??_is_valid,w,c
 14884  0011D4  6ED9               	movwf	fsr2l,c
 14885  0011D6  0E01               	movlw	high _B_array
 14886  0011D8  2008               	addwfc	??_is_valid+1,w,c
 14887  0011DA  6EDA               	movwf	fsr2h,c
 14888  0011DC  C065  FFDE         	movff	_B,postinc2
 14889  0011E0  C066  FFDD         	movff	_B+1,postdec2
 14890                           
 14891                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 14892  0011E4  90D8               	bcf	status,0,c
 14893  0011E6  346D               	rlcf	_counter_step,w,c
 14894  0011E8  6ED9               	movwf	fsr2l,c
 14895  0011EA  346E               	rlcf	_counter_step+1,w,c
 14896  0011EC  6EDA               	movwf	fsr2h,c
 14897  0011EE  0E46               	movlw	low _compartment_number
 14898  0011F0  26D9               	addwf	fsr2l,f,c
 14899  0011F2  0E00               	movlw	high _compartment_number
 14900  0011F4  22DA               	addwfc	fsr2h,f,c
 14901  0011F6  CFDE F007          	movff	postinc2,??_is_valid
 14902  0011FA  CFDD F008          	movff	postdec2,??_is_valid+1
 14903  0011FE  90D8               	bcf	status,0,c
 14904  001200  3607               	rlcf	??_is_valid,f,c
 14905  001202  3608               	rlcf	??_is_valid+1,f,c
 14906  001204  0E10               	movlw	low _N_array
 14907  001206  2407               	addwf	??_is_valid,w,c
 14908  001208  6ED9               	movwf	fsr2l,c
 14909  00120A  0E01               	movlw	high _N_array
 14910  00120C  2008               	addwfc	??_is_valid+1,w,c
 14911  00120E  6EDA               	movwf	fsr2h,c
 14912  001210  C063  FFDE         	movff	_N,postinc2
 14913  001214  C064  FFDD         	movff	_N+1,postdec2
 14914                           
 14915                           ;keypad.c: 47: }
 14916  001218  0012               	return	
 14917  00121A                     i2l740:
 14918                           
 14919                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 14920  00121A  0E78               	movlw	low _current_set2
 14921  00121C  6E01               	movwf	strcmp@s1,c
 14922  00121E  0E00               	movlw	high _current_set2
 14923  001220  6E02               	movwf	strcmp@s1+1,c
 14924  001222  0EED               	movlw	low (STR_89+1)
 14925  001224  6E03               	movwf	strcmp@s2,c
 14926  001226  0EFF               	movlw	high (STR_89+1)
 14927  001228  6E04               	movwf	strcmp@s2+1,c
 14928  00122A  EC0D  F022         	call	_strcmp	;wreg free
 14929  00122E  5001               	movf	?_strcmp,w,c
 14930  001230  1002               	iorwf	?_strcmp+1,w,c
 14931  001232  A4D8               	btfss	status,2,c
 14932  001234  D042               	goto	i2l742
 14933                           
 14934                           ;keypad.c: 49: B = 1*number;
 14935  001236  C07D  F065         	movff	_number,_B
 14936  00123A  C07E  F066         	movff	_number+1,_B+1
 14937                           
 14938                           ;keypad.c: 51: S = 1*number;
 14939  00123E  C07D  F061         	movff	_number,_S
 14940  001242  C07E  F062         	movff	_number+1,_S+1
 14941                           
 14942                           ;keypad.c: 52: total_number = 2*number;
 14943  001246  90D8               	bcf	status,0,c
 14944  001248  347D               	rlcf	_number,w,c
 14945  00124A  6E69               	movwf	_total_number,c
 14946  00124C  347E               	rlcf	_number+1,w,c
 14947  00124E  6E6A               	movwf	_total_number+1,c
 14948                           
 14949                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 14950  001250  90D8               	bcf	status,0,c
 14951  001252  346D               	rlcf	_counter_step,w,c
 14952  001254  6ED9               	movwf	fsr2l,c
 14953  001256  346E               	rlcf	_counter_step+1,w,c
 14954  001258  6EDA               	movwf	fsr2h,c
 14955  00125A  0E46               	movlw	low _compartment_number
 14956  00125C  26D9               	addwf	fsr2l,f,c
 14957  00125E  0E00               	movlw	high _compartment_number
 14958  001260  22DA               	addwfc	fsr2h,f,c
 14959  001262  CFDE F007          	movff	postinc2,??_is_valid
 14960  001266  CFDD F008          	movff	postdec2,??_is_valid+1
 14961  00126A  90D8               	bcf	status,0,c
 14962  00126C  3607               	rlcf	??_is_valid,f,c
 14963  00126E  3608               	rlcf	??_is_valid+1,f,c
 14964  001270  0E30               	movlw	low _B_array
 14965  001272  2407               	addwf	??_is_valid,w,c
 14966  001274  6ED9               	movwf	fsr2l,c
 14967  001276  0E01               	movlw	high _B_array
 14968  001278  2008               	addwfc	??_is_valid+1,w,c
 14969  00127A  6EDA               	movwf	fsr2h,c
 14970  00127C  C065  FFDE         	movff	_B,postinc2
 14971  001280  C066  FFDD         	movff	_B+1,postdec2
 14972                           
 14973                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 14974  001284  90D8               	bcf	status,0,c
 14975  001286  346D               	rlcf	_counter_step,w,c
 14976  001288  6ED9               	movwf	fsr2l,c
 14977  00128A  346E               	rlcf	_counter_step+1,w,c
 14978  00128C  6EDA               	movwf	fsr2h,c
 14979  00128E  0E46               	movlw	low _compartment_number
 14980  001290  26D9               	addwf	fsr2l,f,c
 14981  001292  0E00               	movlw	high _compartment_number
 14982  001294  22DA               	addwfc	fsr2h,f,c
 14983  001296  CFDE F007          	movff	postinc2,??_is_valid
 14984  00129A  CFDD F008          	movff	postdec2,??_is_valid+1
 14985  00129E  90D8               	bcf	status,0,c
 14986  0012A0  3607               	rlcf	??_is_valid,f,c
 14987  0012A2  3608               	rlcf	??_is_valid+1,f,c
 14988  0012A4  0E20               	movlw	low _S_array
 14989  0012A6  2407               	addwf	??_is_valid,w,c
 14990  0012A8  6ED9               	movwf	fsr2l,c
 14991  0012AA  0E01               	movlw	high _S_array
 14992  0012AC  2008               	addwfc	??_is_valid+1,w,c
 14993  0012AE  6EDA               	movwf	fsr2h,c
 14994  0012B0  C061  FFDE         	movff	_S,postinc2
 14995  0012B4  C062  FFDD         	movff	_S+1,postdec2
 14996                           
 14997                           ;keypad.c: 57: }
 14998  0012B8  0012               	return	
 14999  0012BA                     i2l742:
 15000                           
 15001                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 15002  0012BA  0E78               	movlw	low _current_set2
 15003  0012BC  6E01               	movwf	strcmp@s1,c
 15004  0012BE  0E00               	movlw	high _current_set2
 15005  0012C0  6E02               	movwf	strcmp@s1+1,c
 15006  0012C2  0EF1               	movlw	low (STR_90+1)
 15007  0012C4  6E03               	movwf	strcmp@s2,c
 15008  0012C6  0EFF               	movlw	high (STR_90+1)
 15009  0012C8  6E04               	movwf	strcmp@s2+1,c
 15010  0012CA  EC0D  F022         	call	_strcmp	;wreg free
 15011  0012CE  5001               	movf	?_strcmp,w,c
 15012  0012D0  1002               	iorwf	?_strcmp+1,w,c
 15013  0012D2  A4D8               	btfss	status,2,c
 15014  0012D4  D042               	goto	i2l744
 15015                           
 15016                           ;keypad.c: 60: B = 1*number;
 15017  0012D6  C07D  F065         	movff	_number,_B
 15018  0012DA  C07E  F066         	movff	_number+1,_B+1
 15019                           
 15020                           ;keypad.c: 62: W = 1*number;
 15021  0012DE  C07D  F05F         	movff	_number,_W
 15022  0012E2  C07E  F060         	movff	_number+1,_W+1
 15023                           
 15024                           ;keypad.c: 63: total_number = 2*number;
 15025  0012E6  90D8               	bcf	status,0,c
 15026  0012E8  347D               	rlcf	_number,w,c
 15027  0012EA  6E69               	movwf	_total_number,c
 15028  0012EC  347E               	rlcf	_number+1,w,c
 15029  0012EE  6E6A               	movwf	_total_number+1,c
 15030                           
 15031                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 15032  0012F0  90D8               	bcf	status,0,c
 15033  0012F2  346D               	rlcf	_counter_step,w,c
 15034  0012F4  6ED9               	movwf	fsr2l,c
 15035  0012F6  346E               	rlcf	_counter_step+1,w,c
 15036  0012F8  6EDA               	movwf	fsr2h,c
 15037  0012FA  0E46               	movlw	low _compartment_number
 15038  0012FC  26D9               	addwf	fsr2l,f,c
 15039  0012FE  0E00               	movlw	high _compartment_number
 15040  001300  22DA               	addwfc	fsr2h,f,c
 15041  001302  CFDE F007          	movff	postinc2,??_is_valid
 15042  001306  CFDD F008          	movff	postdec2,??_is_valid+1
 15043  00130A  90D8               	bcf	status,0,c
 15044  00130C  3607               	rlcf	??_is_valid,f,c
 15045  00130E  3608               	rlcf	??_is_valid+1,f,c
 15046  001310  0E30               	movlw	low _B_array
 15047  001312  2407               	addwf	??_is_valid,w,c
 15048  001314  6ED9               	movwf	fsr2l,c
 15049  001316  0E01               	movlw	high _B_array
 15050  001318  2008               	addwfc	??_is_valid+1,w,c
 15051  00131A  6EDA               	movwf	fsr2h,c
 15052  00131C  C065  FFDE         	movff	_B,postinc2
 15053  001320  C066  FFDD         	movff	_B+1,postdec2
 15054                           
 15055                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 15056  001324  90D8               	bcf	status,0,c
 15057  001326  346D               	rlcf	_counter_step,w,c
 15058  001328  6ED9               	movwf	fsr2l,c
 15059  00132A  346E               	rlcf	_counter_step+1,w,c
 15060  00132C  6EDA               	movwf	fsr2h,c
 15061  00132E  0E46               	movlw	low _compartment_number
 15062  001330  26D9               	addwf	fsr2l,f,c
 15063  001332  0E00               	movlw	high _compartment_number
 15064  001334  22DA               	addwfc	fsr2h,f,c
 15065  001336  CFDE F007          	movff	postinc2,??_is_valid
 15066  00133A  CFDD F008          	movff	postdec2,??_is_valid+1
 15067  00133E  90D8               	bcf	status,0,c
 15068  001340  3607               	rlcf	??_is_valid,f,c
 15069  001342  3608               	rlcf	??_is_valid+1,f,c
 15070  001344  0E00               	movlw	low _W_array
 15071  001346  2407               	addwf	??_is_valid,w,c
 15072  001348  6ED9               	movwf	fsr2l,c
 15073  00134A  0E01               	movlw	high _W_array
 15074  00134C  2008               	addwfc	??_is_valid+1,w,c
 15075  00134E  6EDA               	movwf	fsr2h,c
 15076  001350  C05F  FFDE         	movff	_W,postinc2
 15077  001354  C060  FFDD         	movff	_W+1,postdec2
 15078                           
 15079                           ;keypad.c: 67: }
 15080  001358  0012               	return	
 15081  00135A                     i2l744:
 15082                           
 15083                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 15084  00135A  0E78               	movlw	low _current_set2
 15085  00135C  6E01               	movwf	strcmp@s1,c
 15086  00135E  0E00               	movlw	high _current_set2
 15087  001360  6E02               	movwf	strcmp@s1+1,c
 15088  001362  0EE8               	movlw	low STR_88
 15089  001364  6E03               	movwf	strcmp@s2,c
 15090  001366  0EFF               	movlw	high STR_88
 15091  001368  6E04               	movwf	strcmp@s2+1,c
 15092  00136A  EC0D  F022         	call	_strcmp	;wreg free
 15093  00136E  5001               	movf	?_strcmp,w,c
 15094  001370  1002               	iorwf	?_strcmp+1,w,c
 15095  001372  A4D8               	btfss	status,2,c
 15096  001374  D04C               	goto	i2l746
 15097                           
 15098                           ;keypad.c: 69: B = 2*number;
 15099  001376  90D8               	bcf	status,0,c
 15100  001378  347D               	rlcf	_number,w,c
 15101  00137A  6E65               	movwf	_B,c
 15102  00137C  347E               	rlcf	_number+1,w,c
 15103  00137E  6E66               	movwf	_B+1,c
 15104                           
 15105                           ;keypad.c: 71: N = 1*number;
 15106  001380  C07D  F063         	movff	_number,_N
 15107  001384  C07E  F064         	movff	_number+1,_N+1
 15108                           
 15109                           ;keypad.c: 72: total_number = 3*number;
 15110  001388  C07D  F001         	movff	_number,i2___wmul@multiplier
 15111  00138C  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15112  001390  0E00               	movlw	0
 15113  001392  6E04               	movwf	i2___wmul@multiplicand+1,c
 15114  001394  0E03               	movlw	3
 15115  001396  6E03               	movwf	i2___wmul@multiplicand,c
 15116  001398  EC13  F023         	call	i2___wmul	;wreg free
 15117  00139C  C001  F069         	movff	?i2___wmul,_total_number
 15118  0013A0  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15119                           
 15120                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 15121  0013A4  90D8               	bcf	status,0,c
 15122  0013A6  346D               	rlcf	_counter_step,w,c
 15123  0013A8  6ED9               	movwf	fsr2l,c
 15124  0013AA  346E               	rlcf	_counter_step+1,w,c
 15125  0013AC  6EDA               	movwf	fsr2h,c
 15126  0013AE  0E46               	movlw	low _compartment_number
 15127  0013B0  26D9               	addwf	fsr2l,f,c
 15128  0013B2  0E00               	movlw	high _compartment_number
 15129  0013B4  22DA               	addwfc	fsr2h,f,c
 15130  0013B6  CFDE F007          	movff	postinc2,??_is_valid
 15131  0013BA  CFDD F008          	movff	postdec2,??_is_valid+1
 15132  0013BE  90D8               	bcf	status,0,c
 15133  0013C0  3607               	rlcf	??_is_valid,f,c
 15134  0013C2  3608               	rlcf	??_is_valid+1,f,c
 15135  0013C4  0E30               	movlw	low _B_array
 15136  0013C6  2407               	addwf	??_is_valid,w,c
 15137  0013C8  6ED9               	movwf	fsr2l,c
 15138  0013CA  0E01               	movlw	high _B_array
 15139  0013CC  2008               	addwfc	??_is_valid+1,w,c
 15140  0013CE  6EDA               	movwf	fsr2h,c
 15141  0013D0  C065  FFDE         	movff	_B,postinc2
 15142  0013D4  C066  FFDD         	movff	_B+1,postdec2
 15143                           
 15144                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 15145  0013D8  90D8               	bcf	status,0,c
 15146  0013DA  346D               	rlcf	_counter_step,w,c
 15147  0013DC  6ED9               	movwf	fsr2l,c
 15148  0013DE  346E               	rlcf	_counter_step+1,w,c
 15149  0013E0  6EDA               	movwf	fsr2h,c
 15150  0013E2  0E46               	movlw	low _compartment_number
 15151  0013E4  26D9               	addwf	fsr2l,f,c
 15152  0013E6  0E00               	movlw	high _compartment_number
 15153  0013E8  22DA               	addwfc	fsr2h,f,c
 15154  0013EA  CFDE F007          	movff	postinc2,??_is_valid
 15155  0013EE  CFDD F008          	movff	postdec2,??_is_valid+1
 15156  0013F2  90D8               	bcf	status,0,c
 15157  0013F4  3607               	rlcf	??_is_valid,f,c
 15158  0013F6  3608               	rlcf	??_is_valid+1,f,c
 15159  0013F8  0E10               	movlw	low _N_array
 15160  0013FA  2407               	addwf	??_is_valid,w,c
 15161  0013FC  6ED9               	movwf	fsr2l,c
 15162  0013FE  0E01               	movlw	high _N_array
 15163  001400  2008               	addwfc	??_is_valid+1,w,c
 15164  001402  6EDA               	movwf	fsr2h,c
 15165  001404  C063  FFDE         	movff	_N,postinc2
 15166  001408  C064  FFDD         	movff	_N+1,postdec2
 15167                           
 15168                           ;keypad.c: 76: }
 15169  00140C  0012               	return	
 15170  00140E                     i2l746:
 15171                           
 15172                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 15173  00140E  0E78               	movlw	low _current_set2
 15174  001410  6E01               	movwf	strcmp@s1,c
 15175  001412  0E00               	movlw	high _current_set2
 15176  001414  6E02               	movwf	strcmp@s1+1,c
 15177  001416  0EEC               	movlw	low STR_89
 15178  001418  6E03               	movwf	strcmp@s2,c
 15179  00141A  0EFF               	movlw	high STR_89
 15180  00141C  6E04               	movwf	strcmp@s2+1,c
 15181  00141E  EC0D  F022         	call	_strcmp	;wreg free
 15182  001422  5001               	movf	?_strcmp,w,c
 15183  001424  1002               	iorwf	?_strcmp+1,w,c
 15184  001426  A4D8               	btfss	status,2,c
 15185  001428  D04C               	goto	i2l748
 15186                           
 15187                           ;keypad.c: 78: B = 2*number;
 15188  00142A  90D8               	bcf	status,0,c
 15189  00142C  347D               	rlcf	_number,w,c
 15190  00142E  6E65               	movwf	_B,c
 15191  001430  347E               	rlcf	_number+1,w,c
 15192  001432  6E66               	movwf	_B+1,c
 15193                           
 15194                           ;keypad.c: 80: S = 1*number;
 15195  001434  C07D  F061         	movff	_number,_S
 15196  001438  C07E  F062         	movff	_number+1,_S+1
 15197                           
 15198                           ;keypad.c: 81: total_number = 3*number;
 15199  00143C  C07D  F001         	movff	_number,i2___wmul@multiplier
 15200  001440  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15201  001444  0E00               	movlw	0
 15202  001446  6E04               	movwf	i2___wmul@multiplicand+1,c
 15203  001448  0E03               	movlw	3
 15204  00144A  6E03               	movwf	i2___wmul@multiplicand,c
 15205  00144C  EC13  F023         	call	i2___wmul	;wreg free
 15206  001450  C001  F069         	movff	?i2___wmul,_total_number
 15207  001454  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15208                           
 15209                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 15210  001458  90D8               	bcf	status,0,c
 15211  00145A  346D               	rlcf	_counter_step,w,c
 15212  00145C  6ED9               	movwf	fsr2l,c
 15213  00145E  346E               	rlcf	_counter_step+1,w,c
 15214  001460  6EDA               	movwf	fsr2h,c
 15215  001462  0E46               	movlw	low _compartment_number
 15216  001464  26D9               	addwf	fsr2l,f,c
 15217  001466  0E00               	movlw	high _compartment_number
 15218  001468  22DA               	addwfc	fsr2h,f,c
 15219  00146A  CFDE F007          	movff	postinc2,??_is_valid
 15220  00146E  CFDD F008          	movff	postdec2,??_is_valid+1
 15221  001472  90D8               	bcf	status,0,c
 15222  001474  3607               	rlcf	??_is_valid,f,c
 15223  001476  3608               	rlcf	??_is_valid+1,f,c
 15224  001478  0E30               	movlw	low _B_array
 15225  00147A  2407               	addwf	??_is_valid,w,c
 15226  00147C  6ED9               	movwf	fsr2l,c
 15227  00147E  0E01               	movlw	high _B_array
 15228  001480  2008               	addwfc	??_is_valid+1,w,c
 15229  001482  6EDA               	movwf	fsr2h,c
 15230  001484  C065  FFDE         	movff	_B,postinc2
 15231  001488  C066  FFDD         	movff	_B+1,postdec2
 15232                           
 15233                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 15234  00148C  90D8               	bcf	status,0,c
 15235  00148E  346D               	rlcf	_counter_step,w,c
 15236  001490  6ED9               	movwf	fsr2l,c
 15237  001492  346E               	rlcf	_counter_step+1,w,c
 15238  001494  6EDA               	movwf	fsr2h,c
 15239  001496  0E46               	movlw	low _compartment_number
 15240  001498  26D9               	addwf	fsr2l,f,c
 15241  00149A  0E00               	movlw	high _compartment_number
 15242  00149C  22DA               	addwfc	fsr2h,f,c
 15243  00149E  CFDE F007          	movff	postinc2,??_is_valid
 15244  0014A2  CFDD F008          	movff	postdec2,??_is_valid+1
 15245  0014A6  90D8               	bcf	status,0,c
 15246  0014A8  3607               	rlcf	??_is_valid,f,c
 15247  0014AA  3608               	rlcf	??_is_valid+1,f,c
 15248  0014AC  0E20               	movlw	low _S_array
 15249  0014AE  2407               	addwf	??_is_valid,w,c
 15250  0014B0  6ED9               	movwf	fsr2l,c
 15251  0014B2  0E01               	movlw	high _S_array
 15252  0014B4  2008               	addwfc	??_is_valid+1,w,c
 15253  0014B6  6EDA               	movwf	fsr2h,c
 15254  0014B8  C061  FFDE         	movff	_S,postinc2
 15255  0014BC  C062  FFDD         	movff	_S+1,postdec2
 15256                           
 15257                           ;keypad.c: 85: }
 15258  0014C0  0012               	return	
 15259  0014C2                     i2l748:
 15260                           
 15261                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 15262  0014C2  0E78               	movlw	low _current_set2
 15263  0014C4  6E01               	movwf	strcmp@s1,c
 15264  0014C6  0E00               	movlw	high _current_set2
 15265  0014C8  6E02               	movwf	strcmp@s1+1,c
 15266  0014CA  0EF0               	movlw	low STR_90
 15267  0014CC  6E03               	movwf	strcmp@s2,c
 15268  0014CE  0EFF               	movlw	high STR_90
 15269  0014D0  6E04               	movwf	strcmp@s2+1,c
 15270  0014D2  EC0D  F022         	call	_strcmp	;wreg free
 15271  0014D6  5001               	movf	?_strcmp,w,c
 15272  0014D8  1002               	iorwf	?_strcmp+1,w,c
 15273  0014DA  A4D8               	btfss	status,2,c
 15274  0014DC  D04C               	goto	i2l750
 15275                           
 15276                           ;keypad.c: 87: B = 2*number;
 15277  0014DE  90D8               	bcf	status,0,c
 15278  0014E0  347D               	rlcf	_number,w,c
 15279  0014E2  6E65               	movwf	_B,c
 15280  0014E4  347E               	rlcf	_number+1,w,c
 15281  0014E6  6E66               	movwf	_B+1,c
 15282                           
 15283                           ;keypad.c: 89: W = 1*number;
 15284  0014E8  C07D  F05F         	movff	_number,_W
 15285  0014EC  C07E  F060         	movff	_number+1,_W+1
 15286                           
 15287                           ;keypad.c: 90: total_number = 3*number;
 15288  0014F0  C07D  F001         	movff	_number,i2___wmul@multiplier
 15289  0014F4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15290  0014F8  0E00               	movlw	0
 15291  0014FA  6E04               	movwf	i2___wmul@multiplicand+1,c
 15292  0014FC  0E03               	movlw	3
 15293  0014FE  6E03               	movwf	i2___wmul@multiplicand,c
 15294  001500  EC13  F023         	call	i2___wmul	;wreg free
 15295  001504  C001  F069         	movff	?i2___wmul,_total_number
 15296  001508  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15297                           
 15298                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 15299  00150C  90D8               	bcf	status,0,c
 15300  00150E  346D               	rlcf	_counter_step,w,c
 15301  001510  6ED9               	movwf	fsr2l,c
 15302  001512  346E               	rlcf	_counter_step+1,w,c
 15303  001514  6EDA               	movwf	fsr2h,c
 15304  001516  0E46               	movlw	low _compartment_number
 15305  001518  26D9               	addwf	fsr2l,f,c
 15306  00151A  0E00               	movlw	high _compartment_number
 15307  00151C  22DA               	addwfc	fsr2h,f,c
 15308  00151E  CFDE F007          	movff	postinc2,??_is_valid
 15309  001522  CFDD F008          	movff	postdec2,??_is_valid+1
 15310  001526  90D8               	bcf	status,0,c
 15311  001528  3607               	rlcf	??_is_valid,f,c
 15312  00152A  3608               	rlcf	??_is_valid+1,f,c
 15313  00152C  0E30               	movlw	low _B_array
 15314  00152E  2407               	addwf	??_is_valid,w,c
 15315  001530  6ED9               	movwf	fsr2l,c
 15316  001532  0E01               	movlw	high _B_array
 15317  001534  2008               	addwfc	??_is_valid+1,w,c
 15318  001536  6EDA               	movwf	fsr2h,c
 15319  001538  C065  FFDE         	movff	_B,postinc2
 15320  00153C  C066  FFDD         	movff	_B+1,postdec2
 15321                           
 15322                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 15323  001540  90D8               	bcf	status,0,c
 15324  001542  346D               	rlcf	_counter_step,w,c
 15325  001544  6ED9               	movwf	fsr2l,c
 15326  001546  346E               	rlcf	_counter_step+1,w,c
 15327  001548  6EDA               	movwf	fsr2h,c
 15328  00154A  0E46               	movlw	low _compartment_number
 15329  00154C  26D9               	addwf	fsr2l,f,c
 15330  00154E  0E00               	movlw	high _compartment_number
 15331  001550  22DA               	addwfc	fsr2h,f,c
 15332  001552  CFDE F007          	movff	postinc2,??_is_valid
 15333  001556  CFDD F008          	movff	postdec2,??_is_valid+1
 15334  00155A  90D8               	bcf	status,0,c
 15335  00155C  3607               	rlcf	??_is_valid,f,c
 15336  00155E  3608               	rlcf	??_is_valid+1,f,c
 15337  001560  0E00               	movlw	low _W_array
 15338  001562  2407               	addwf	??_is_valid,w,c
 15339  001564  6ED9               	movwf	fsr2l,c
 15340  001566  0E01               	movlw	high _W_array
 15341  001568  2008               	addwfc	??_is_valid+1,w,c
 15342  00156A  6EDA               	movwf	fsr2h,c
 15343  00156C  C05F  FFDE         	movff	_W,postinc2
 15344  001570  C060  FFDD         	movff	_W+1,postdec2
 15345                           
 15346                           ;keypad.c: 94: }
 15347  001574  0012               	return	
 15348  001576                     i2l750:
 15349                           
 15350                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 15351  001576  0E78               	movlw	low _current_set2
 15352  001578  6E01               	movwf	strcmp@s1,c
 15353  00157A  0E00               	movlw	high _current_set2
 15354  00157C  6E02               	movwf	strcmp@s1+1,c
 15355  00157E  0EC6               	movlw	low (STR_97+1)
 15356  001580  6E03               	movwf	strcmp@s2,c
 15357  001582  0EFF               	movlw	high (STR_97+1)
 15358  001584  6E04               	movwf	strcmp@s2+1,c
 15359  001586  EC0D  F022         	call	_strcmp	;wreg free
 15360  00158A  5001               	movf	?_strcmp,w,c
 15361  00158C  1002               	iorwf	?_strcmp+1,w,c
 15362  00158E  A4D8               	btfss	status,2,c
 15363  001590  D069               	goto	i2l752
 15364                           
 15365                           ;keypad.c: 96: B = 1*number;
 15366  001592  C07D  F065         	movff	_number,_B
 15367  001596  C07E  F066         	movff	_number+1,_B+1
 15368                           
 15369                           ;keypad.c: 97: W = 1*number;
 15370  00159A  C07D  F05F         	movff	_number,_W
 15371  00159E  C07E  F060         	movff	_number+1,_W+1
 15372                           
 15373                           ;keypad.c: 98: N = 1*number;
 15374  0015A2  C07D  F063         	movff	_number,_N
 15375  0015A6  C07E  F064         	movff	_number+1,_N+1
 15376                           
 15377                           ;keypad.c: 99: total_number = 3*number;
 15378  0015AA  C07D  F001         	movff	_number,i2___wmul@multiplier
 15379  0015AE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15380  0015B2  0E00               	movlw	0
 15381  0015B4  6E04               	movwf	i2___wmul@multiplicand+1,c
 15382  0015B6  0E03               	movlw	3
 15383  0015B8  6E03               	movwf	i2___wmul@multiplicand,c
 15384  0015BA  EC13  F023         	call	i2___wmul	;wreg free
 15385  0015BE  C001  F069         	movff	?i2___wmul,_total_number
 15386  0015C2  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15387                           
 15388                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 15389  0015C6  90D8               	bcf	status,0,c
 15390  0015C8  346D               	rlcf	_counter_step,w,c
 15391  0015CA  6ED9               	movwf	fsr2l,c
 15392  0015CC  346E               	rlcf	_counter_step+1,w,c
 15393  0015CE  6EDA               	movwf	fsr2h,c
 15394  0015D0  0E46               	movlw	low _compartment_number
 15395  0015D2  26D9               	addwf	fsr2l,f,c
 15396  0015D4  0E00               	movlw	high _compartment_number
 15397  0015D6  22DA               	addwfc	fsr2h,f,c
 15398  0015D8  CFDE F007          	movff	postinc2,??_is_valid
 15399  0015DC  CFDD F008          	movff	postdec2,??_is_valid+1
 15400  0015E0  90D8               	bcf	status,0,c
 15401  0015E2  3607               	rlcf	??_is_valid,f,c
 15402  0015E4  3608               	rlcf	??_is_valid+1,f,c
 15403  0015E6  0E30               	movlw	low _B_array
 15404  0015E8  2407               	addwf	??_is_valid,w,c
 15405  0015EA  6ED9               	movwf	fsr2l,c
 15406  0015EC  0E01               	movlw	high _B_array
 15407  0015EE  2008               	addwfc	??_is_valid+1,w,c
 15408  0015F0  6EDA               	movwf	fsr2h,c
 15409  0015F2  C065  FFDE         	movff	_B,postinc2
 15410  0015F6  C066  FFDD         	movff	_B+1,postdec2
 15411                           
 15412                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 15413  0015FA  90D8               	bcf	status,0,c
 15414  0015FC  346D               	rlcf	_counter_step,w,c
 15415  0015FE  6ED9               	movwf	fsr2l,c
 15416  001600  346E               	rlcf	_counter_step+1,w,c
 15417  001602  6EDA               	movwf	fsr2h,c
 15418  001604  0E46               	movlw	low _compartment_number
 15419  001606  26D9               	addwf	fsr2l,f,c
 15420  001608  0E00               	movlw	high _compartment_number
 15421  00160A  22DA               	addwfc	fsr2h,f,c
 15422  00160C  CFDE F007          	movff	postinc2,??_is_valid
 15423  001610  CFDD F008          	movff	postdec2,??_is_valid+1
 15424  001614  90D8               	bcf	status,0,c
 15425  001616  3607               	rlcf	??_is_valid,f,c
 15426  001618  3608               	rlcf	??_is_valid+1,f,c
 15427  00161A  0E00               	movlw	low _W_array
 15428  00161C  2407               	addwf	??_is_valid,w,c
 15429  00161E  6ED9               	movwf	fsr2l,c
 15430  001620  0E01               	movlw	high _W_array
 15431  001622  2008               	addwfc	??_is_valid+1,w,c
 15432  001624  6EDA               	movwf	fsr2h,c
 15433  001626  C05F  FFDE         	movff	_W,postinc2
 15434  00162A  C060  FFDD         	movff	_W+1,postdec2
 15435                           
 15436                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 15437  00162E  90D8               	bcf	status,0,c
 15438  001630  346D               	rlcf	_counter_step,w,c
 15439  001632  6ED9               	movwf	fsr2l,c
 15440  001634  346E               	rlcf	_counter_step+1,w,c
 15441  001636  6EDA               	movwf	fsr2h,c
 15442  001638  0E46               	movlw	low _compartment_number
 15443  00163A  26D9               	addwf	fsr2l,f,c
 15444  00163C  0E00               	movlw	high _compartment_number
 15445  00163E  22DA               	addwfc	fsr2h,f,c
 15446  001640  CFDE F007          	movff	postinc2,??_is_valid
 15447  001644  CFDD F008          	movff	postdec2,??_is_valid+1
 15448  001648  90D8               	bcf	status,0,c
 15449  00164A  3607               	rlcf	??_is_valid,f,c
 15450  00164C  3608               	rlcf	??_is_valid+1,f,c
 15451  00164E  0E10               	movlw	low _N_array
 15452  001650  2407               	addwf	??_is_valid,w,c
 15453  001652  6ED9               	movwf	fsr2l,c
 15454  001654  0E01               	movlw	high _N_array
 15455  001656  2008               	addwfc	??_is_valid+1,w,c
 15456  001658  6EDA               	movwf	fsr2h,c
 15457  00165A  C063  FFDE         	movff	_N,postinc2
 15458  00165E  C064  FFDD         	movff	_N+1,postdec2
 15459                           
 15460                           ;keypad.c: 105: }
 15461  001662  0012               	return	
 15462  001664                     i2l752:
 15463                           
 15464                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 15465  001664  0E78               	movlw	low _current_set2
 15466  001666  6E01               	movwf	strcmp@s1,c
 15467  001668  0E00               	movlw	high _current_set2
 15468  00166A  6E02               	movwf	strcmp@s1+1,c
 15469  00166C  0ED0               	movlw	low (STR_96+1)
 15470  00166E  6E03               	movwf	strcmp@s2,c
 15471  001670  0EFF               	movlw	high (STR_96+1)
 15472  001672  6E04               	movwf	strcmp@s2+1,c
 15473  001674  EC0D  F022         	call	_strcmp	;wreg free
 15474  001678  5001               	movf	?_strcmp,w,c
 15475  00167A  1002               	iorwf	?_strcmp+1,w,c
 15476  00167C  A4D8               	btfss	status,2,c
 15477  00167E  D069               	goto	i2l754
 15478                           
 15479                           ;keypad.c: 107: B = 1*number;
 15480  001680  C07D  F065         	movff	_number,_B
 15481  001684  C07E  F066         	movff	_number+1,_B+1
 15482                           
 15483                           ;keypad.c: 108: S = 1*number;
 15484  001688  C07D  F061         	movff	_number,_S
 15485  00168C  C07E  F062         	movff	_number+1,_S+1
 15486                           
 15487                           ;keypad.c: 109: N = 1*number;
 15488  001690  C07D  F063         	movff	_number,_N
 15489  001694  C07E  F064         	movff	_number+1,_N+1
 15490                           
 15491                           ;keypad.c: 110: total_number = 3*number;
 15492  001698  C07D  F001         	movff	_number,i2___wmul@multiplier
 15493  00169C  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15494  0016A0  0E00               	movlw	0
 15495  0016A2  6E04               	movwf	i2___wmul@multiplicand+1,c
 15496  0016A4  0E03               	movlw	3
 15497  0016A6  6E03               	movwf	i2___wmul@multiplicand,c
 15498  0016A8  EC13  F023         	call	i2___wmul	;wreg free
 15499  0016AC  C001  F069         	movff	?i2___wmul,_total_number
 15500  0016B0  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15501                           
 15502                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 15503  0016B4  90D8               	bcf	status,0,c
 15504  0016B6  346D               	rlcf	_counter_step,w,c
 15505  0016B8  6ED9               	movwf	fsr2l,c
 15506  0016BA  346E               	rlcf	_counter_step+1,w,c
 15507  0016BC  6EDA               	movwf	fsr2h,c
 15508  0016BE  0E46               	movlw	low _compartment_number
 15509  0016C0  26D9               	addwf	fsr2l,f,c
 15510  0016C2  0E00               	movlw	high _compartment_number
 15511  0016C4  22DA               	addwfc	fsr2h,f,c
 15512  0016C6  CFDE F007          	movff	postinc2,??_is_valid
 15513  0016CA  CFDD F008          	movff	postdec2,??_is_valid+1
 15514  0016CE  90D8               	bcf	status,0,c
 15515  0016D0  3607               	rlcf	??_is_valid,f,c
 15516  0016D2  3608               	rlcf	??_is_valid+1,f,c
 15517  0016D4  0E30               	movlw	low _B_array
 15518  0016D6  2407               	addwf	??_is_valid,w,c
 15519  0016D8  6ED9               	movwf	fsr2l,c
 15520  0016DA  0E01               	movlw	high _B_array
 15521  0016DC  2008               	addwfc	??_is_valid+1,w,c
 15522  0016DE  6EDA               	movwf	fsr2h,c
 15523  0016E0  C065  FFDE         	movff	_B,postinc2
 15524  0016E4  C066  FFDD         	movff	_B+1,postdec2
 15525                           
 15526                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 15527  0016E8  90D8               	bcf	status,0,c
 15528  0016EA  346D               	rlcf	_counter_step,w,c
 15529  0016EC  6ED9               	movwf	fsr2l,c
 15530  0016EE  346E               	rlcf	_counter_step+1,w,c
 15531  0016F0  6EDA               	movwf	fsr2h,c
 15532  0016F2  0E46               	movlw	low _compartment_number
 15533  0016F4  26D9               	addwf	fsr2l,f,c
 15534  0016F6  0E00               	movlw	high _compartment_number
 15535  0016F8  22DA               	addwfc	fsr2h,f,c
 15536  0016FA  CFDE F007          	movff	postinc2,??_is_valid
 15537  0016FE  CFDD F008          	movff	postdec2,??_is_valid+1
 15538  001702  90D8               	bcf	status,0,c
 15539  001704  3607               	rlcf	??_is_valid,f,c
 15540  001706  3608               	rlcf	??_is_valid+1,f,c
 15541  001708  0E20               	movlw	low _S_array
 15542  00170A  2407               	addwf	??_is_valid,w,c
 15543  00170C  6ED9               	movwf	fsr2l,c
 15544  00170E  0E01               	movlw	high _S_array
 15545  001710  2008               	addwfc	??_is_valid+1,w,c
 15546  001712  6EDA               	movwf	fsr2h,c
 15547  001714  C061  FFDE         	movff	_S,postinc2
 15548  001718  C062  FFDD         	movff	_S+1,postdec2
 15549                           
 15550                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 15551  00171C  90D8               	bcf	status,0,c
 15552  00171E  346D               	rlcf	_counter_step,w,c
 15553  001720  6ED9               	movwf	fsr2l,c
 15554  001722  346E               	rlcf	_counter_step+1,w,c
 15555  001724  6EDA               	movwf	fsr2h,c
 15556  001726  0E46               	movlw	low _compartment_number
 15557  001728  26D9               	addwf	fsr2l,f,c
 15558  00172A  0E00               	movlw	high _compartment_number
 15559  00172C  22DA               	addwfc	fsr2h,f,c
 15560  00172E  CFDE F007          	movff	postinc2,??_is_valid
 15561  001732  CFDD F008          	movff	postdec2,??_is_valid+1
 15562  001736  90D8               	bcf	status,0,c
 15563  001738  3607               	rlcf	??_is_valid,f,c
 15564  00173A  3608               	rlcf	??_is_valid+1,f,c
 15565  00173C  0E10               	movlw	low _N_array
 15566  00173E  2407               	addwf	??_is_valid,w,c
 15567  001740  6ED9               	movwf	fsr2l,c
 15568  001742  0E01               	movlw	high _N_array
 15569  001744  2008               	addwfc	??_is_valid+1,w,c
 15570  001746  6EDA               	movwf	fsr2h,c
 15571  001748  C063  FFDE         	movff	_N,postinc2
 15572  00174C  C064  FFDD         	movff	_N+1,postdec2
 15573                           
 15574                           ;keypad.c: 116: }
 15575  001750  0012               	return	
 15576  001752                     i2l754:
 15577                           
 15578                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 15579  001752  0E78               	movlw	low _current_set2
 15580  001754  6E01               	movwf	strcmp@s1,c
 15581  001756  0E00               	movlw	high _current_set2
 15582  001758  6E02               	movwf	strcmp@s1+1,c
 15583  00175A  0EF4               	movlw	low STR_93
 15584  00175C  6E03               	movwf	strcmp@s2,c
 15585  00175E  0EFF               	movlw	high STR_93
 15586  001760  6E04               	movwf	strcmp@s2+1,c
 15587  001762  EC0D  F022         	call	_strcmp	;wreg free
 15588  001766  5001               	movf	?_strcmp,w,c
 15589  001768  1002               	iorwf	?_strcmp+1,w,c
 15590  00176A  A4D8               	btfss	status,2,c
 15591  00176C  D04C               	goto	i2l756
 15592                           
 15593                           ;keypad.c: 118: B = 1*number;
 15594  00176E  C07D  F065         	movff	_number,_B
 15595  001772  C07E  F066         	movff	_number+1,_B+1
 15596                           
 15597                           ;keypad.c: 119: W = 2*number;
 15598  001776  90D8               	bcf	status,0,c
 15599  001778  347D               	rlcf	_number,w,c
 15600  00177A  6E5F               	movwf	_W,c
 15601  00177C  347E               	rlcf	_number+1,w,c
 15602  00177E  6E60               	movwf	_W+1,c
 15603                           
 15604                           ;keypad.c: 120: total_number = 3*number;
 15605  001780  C07D  F001         	movff	_number,i2___wmul@multiplier
 15606  001784  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15607  001788  0E00               	movlw	0
 15608  00178A  6E04               	movwf	i2___wmul@multiplicand+1,c
 15609  00178C  0E03               	movlw	3
 15610  00178E  6E03               	movwf	i2___wmul@multiplicand,c
 15611  001790  EC13  F023         	call	i2___wmul	;wreg free
 15612  001794  C001  F069         	movff	?i2___wmul,_total_number
 15613  001798  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15614                           
 15615                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 15616  00179C  90D8               	bcf	status,0,c
 15617  00179E  346D               	rlcf	_counter_step,w,c
 15618  0017A0  6ED9               	movwf	fsr2l,c
 15619  0017A2  346E               	rlcf	_counter_step+1,w,c
 15620  0017A4  6EDA               	movwf	fsr2h,c
 15621  0017A6  0E46               	movlw	low _compartment_number
 15622  0017A8  26D9               	addwf	fsr2l,f,c
 15623  0017AA  0E00               	movlw	high _compartment_number
 15624  0017AC  22DA               	addwfc	fsr2h,f,c
 15625  0017AE  CFDE F007          	movff	postinc2,??_is_valid
 15626  0017B2  CFDD F008          	movff	postdec2,??_is_valid+1
 15627  0017B6  90D8               	bcf	status,0,c
 15628  0017B8  3607               	rlcf	??_is_valid,f,c
 15629  0017BA  3608               	rlcf	??_is_valid+1,f,c
 15630  0017BC  0E30               	movlw	low _B_array
 15631  0017BE  2407               	addwf	??_is_valid,w,c
 15632  0017C0  6ED9               	movwf	fsr2l,c
 15633  0017C2  0E01               	movlw	high _B_array
 15634  0017C4  2008               	addwfc	??_is_valid+1,w,c
 15635  0017C6  6EDA               	movwf	fsr2h,c
 15636  0017C8  C065  FFDE         	movff	_B,postinc2
 15637  0017CC  C066  FFDD         	movff	_B+1,postdec2
 15638                           
 15639                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 15640  0017D0  90D8               	bcf	status,0,c
 15641  0017D2  346D               	rlcf	_counter_step,w,c
 15642  0017D4  6ED9               	movwf	fsr2l,c
 15643  0017D6  346E               	rlcf	_counter_step+1,w,c
 15644  0017D8  6EDA               	movwf	fsr2h,c
 15645  0017DA  0E46               	movlw	low _compartment_number
 15646  0017DC  26D9               	addwf	fsr2l,f,c
 15647  0017DE  0E00               	movlw	high _compartment_number
 15648  0017E0  22DA               	addwfc	fsr2h,f,c
 15649  0017E2  CFDE F007          	movff	postinc2,??_is_valid
 15650  0017E6  CFDD F008          	movff	postdec2,??_is_valid+1
 15651  0017EA  90D8               	bcf	status,0,c
 15652  0017EC  3607               	rlcf	??_is_valid,f,c
 15653  0017EE  3608               	rlcf	??_is_valid+1,f,c
 15654  0017F0  0E00               	movlw	low _W_array
 15655  0017F2  2407               	addwf	??_is_valid,w,c
 15656  0017F4  6ED9               	movwf	fsr2l,c
 15657  0017F6  0E01               	movlw	high _W_array
 15658  0017F8  2008               	addwfc	??_is_valid+1,w,c
 15659  0017FA  6EDA               	movwf	fsr2h,c
 15660  0017FC  C05F  FFDE         	movff	_W,postinc2
 15661  001800  C060  FFDD         	movff	_W+1,postdec2
 15662                           
 15663                           ;keypad.c: 124: }
 15664  001804  0012               	return	
 15665  001806                     i2l756:
 15666                           
 15667                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 15668  001806  0E78               	movlw	low _current_set2
 15669  001808  6E01               	movwf	strcmp@s1,c
 15670  00180A  0E00               	movlw	high _current_set2
 15671  00180C  6E02               	movwf	strcmp@s1+1,c
 15672  00180E  0ED4               	movlw	low STR_94
 15673  001810  6E03               	movwf	strcmp@s2,c
 15674  001812  0EFF               	movlw	high STR_94
 15675  001814  6E04               	movwf	strcmp@s2+1,c
 15676  001816  EC0D  F022         	call	_strcmp	;wreg free
 15677  00181A  5001               	movf	?_strcmp,w,c
 15678  00181C  1002               	iorwf	?_strcmp+1,w,c
 15679  00181E  A4D8               	btfss	status,2,c
 15680  001820  D06A               	goto	i2l758
 15681                           
 15682                           ;keypad.c: 126: B = 1*number;
 15683  001822  C07D  F065         	movff	_number,_B
 15684  001826  C07E  F066         	movff	_number+1,_B+1
 15685                           
 15686                           ;keypad.c: 127: N = 1*number;
 15687  00182A  C07D  F063         	movff	_number,_N
 15688  00182E  C07E  F064         	movff	_number+1,_N+1
 15689                           
 15690                           ;keypad.c: 128: W = 2*number;
 15691  001832  90D8               	bcf	status,0,c
 15692  001834  347D               	rlcf	_number,w,c
 15693  001836  6E5F               	movwf	_W,c
 15694  001838  347E               	rlcf	_number+1,w,c
 15695  00183A  6E60               	movwf	_W+1,c
 15696                           
 15697                           ;keypad.c: 129: total_number = 4*number;
 15698  00183C  C07D  F007         	movff	_number,??_is_valid
 15699  001840  C07E  F008         	movff	_number+1,??_is_valid+1
 15700  001844  90D8               	bcf	status,0,c
 15701  001846  3607               	rlcf	??_is_valid,f,c
 15702  001848  3608               	rlcf	??_is_valid+1,f,c
 15703  00184A  90D8               	bcf	status,0,c
 15704  00184C  3607               	rlcf	??_is_valid,f,c
 15705  00184E  3608               	rlcf	??_is_valid+1,f,c
 15706  001850  C007  F069         	movff	??_is_valid,_total_number
 15707  001854  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15708                           
 15709                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 15710  001858  90D8               	bcf	status,0,c
 15711  00185A  346D               	rlcf	_counter_step,w,c
 15712  00185C  6ED9               	movwf	fsr2l,c
 15713  00185E  346E               	rlcf	_counter_step+1,w,c
 15714  001860  6EDA               	movwf	fsr2h,c
 15715  001862  0E46               	movlw	low _compartment_number
 15716  001864  26D9               	addwf	fsr2l,f,c
 15717  001866  0E00               	movlw	high _compartment_number
 15718  001868  22DA               	addwfc	fsr2h,f,c
 15719  00186A  CFDE F007          	movff	postinc2,??_is_valid
 15720  00186E  CFDD F008          	movff	postdec2,??_is_valid+1
 15721  001872  90D8               	bcf	status,0,c
 15722  001874  3607               	rlcf	??_is_valid,f,c
 15723  001876  3608               	rlcf	??_is_valid+1,f,c
 15724  001878  0E30               	movlw	low _B_array
 15725  00187A  2407               	addwf	??_is_valid,w,c
 15726  00187C  6ED9               	movwf	fsr2l,c
 15727  00187E  0E01               	movlw	high _B_array
 15728  001880  2008               	addwfc	??_is_valid+1,w,c
 15729  001882  6EDA               	movwf	fsr2h,c
 15730  001884  C065  FFDE         	movff	_B,postinc2
 15731  001888  C066  FFDD         	movff	_B+1,postdec2
 15732                           
 15733                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 15734  00188C  90D8               	bcf	status,0,c
 15735  00188E  346D               	rlcf	_counter_step,w,c
 15736  001890  6ED9               	movwf	fsr2l,c
 15737  001892  346E               	rlcf	_counter_step+1,w,c
 15738  001894  6EDA               	movwf	fsr2h,c
 15739  001896  0E46               	movlw	low _compartment_number
 15740  001898  26D9               	addwf	fsr2l,f,c
 15741  00189A  0E00               	movlw	high _compartment_number
 15742  00189C  22DA               	addwfc	fsr2h,f,c
 15743  00189E  CFDE F007          	movff	postinc2,??_is_valid
 15744  0018A2  CFDD F008          	movff	postdec2,??_is_valid+1
 15745  0018A6  90D8               	bcf	status,0,c
 15746  0018A8  3607               	rlcf	??_is_valid,f,c
 15747  0018AA  3608               	rlcf	??_is_valid+1,f,c
 15748  0018AC  0E10               	movlw	low _N_array
 15749  0018AE  2407               	addwf	??_is_valid,w,c
 15750  0018B0  6ED9               	movwf	fsr2l,c
 15751  0018B2  0E01               	movlw	high _N_array
 15752  0018B4  2008               	addwfc	??_is_valid+1,w,c
 15753  0018B6  6EDA               	movwf	fsr2h,c
 15754  0018B8  C063  FFDE         	movff	_N,postinc2
 15755  0018BC  C064  FFDD         	movff	_N+1,postdec2
 15756                           
 15757                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 15758  0018C0  90D8               	bcf	status,0,c
 15759  0018C2  346D               	rlcf	_counter_step,w,c
 15760  0018C4  6ED9               	movwf	fsr2l,c
 15761  0018C6  346E               	rlcf	_counter_step+1,w,c
 15762  0018C8  6EDA               	movwf	fsr2h,c
 15763  0018CA  0E46               	movlw	low _compartment_number
 15764  0018CC  26D9               	addwf	fsr2l,f,c
 15765  0018CE  0E00               	movlw	high _compartment_number
 15766  0018D0  22DA               	addwfc	fsr2h,f,c
 15767  0018D2  CFDE F007          	movff	postinc2,??_is_valid
 15768  0018D6  CFDD F008          	movff	postdec2,??_is_valid+1
 15769  0018DA  90D8               	bcf	status,0,c
 15770  0018DC  3607               	rlcf	??_is_valid,f,c
 15771  0018DE  3608               	rlcf	??_is_valid+1,f,c
 15772  0018E0  0E00               	movlw	low _W_array
 15773  0018E2  2407               	addwf	??_is_valid,w,c
 15774  0018E4  6ED9               	movwf	fsr2l,c
 15775  0018E6  0E01               	movlw	high _W_array
 15776  0018E8  2008               	addwfc	??_is_valid+1,w,c
 15777  0018EA  6EDA               	movwf	fsr2h,c
 15778  0018EC  C05F  FFDE         	movff	_W,postinc2
 15779  0018F0  C060  FFDD         	movff	_W+1,postdec2
 15780                           
 15781                           ;keypad.c: 134: }
 15782  0018F4  0012               	return	
 15783  0018F6                     i2l758:
 15784                           
 15785                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 15786  0018F6  0E78               	movlw	low _current_set2
 15787  0018F8  6E01               	movwf	strcmp@s1,c
 15788  0018FA  0E00               	movlw	high _current_set2
 15789  0018FC  6E02               	movwf	strcmp@s1+1,c
 15790  0018FE  0ED9               	movlw	low STR_95
 15791  001900  6E03               	movwf	strcmp@s2,c
 15792  001902  0EFF               	movlw	high STR_95
 15793  001904  6E04               	movwf	strcmp@s2+1,c
 15794  001906  EC0D  F022         	call	_strcmp	;wreg free
 15795  00190A  5001               	movf	?_strcmp,w,c
 15796  00190C  1002               	iorwf	?_strcmp+1,w,c
 15797  00190E  A4D8               	btfss	status,2,c
 15798  001910  D06A               	goto	i2l760
 15799                           
 15800                           ;keypad.c: 136: B = 1*number;
 15801  001912  C07D  F065         	movff	_number,_B
 15802  001916  C07E  F066         	movff	_number+1,_B+1
 15803                           
 15804                           ;keypad.c: 137: S = 1*number;
 15805  00191A  C07D  F061         	movff	_number,_S
 15806  00191E  C07E  F062         	movff	_number+1,_S+1
 15807                           
 15808                           ;keypad.c: 138: W = 2*number;
 15809  001922  90D8               	bcf	status,0,c
 15810  001924  347D               	rlcf	_number,w,c
 15811  001926  6E5F               	movwf	_W,c
 15812  001928  347E               	rlcf	_number+1,w,c
 15813  00192A  6E60               	movwf	_W+1,c
 15814                           
 15815                           ;keypad.c: 139: total_number = 4*number;
 15816  00192C  C07D  F007         	movff	_number,??_is_valid
 15817  001930  C07E  F008         	movff	_number+1,??_is_valid+1
 15818  001934  90D8               	bcf	status,0,c
 15819  001936  3607               	rlcf	??_is_valid,f,c
 15820  001938  3608               	rlcf	??_is_valid+1,f,c
 15821  00193A  90D8               	bcf	status,0,c
 15822  00193C  3607               	rlcf	??_is_valid,f,c
 15823  00193E  3608               	rlcf	??_is_valid+1,f,c
 15824  001940  C007  F069         	movff	??_is_valid,_total_number
 15825  001944  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15826                           
 15827                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 15828  001948  90D8               	bcf	status,0,c
 15829  00194A  346D               	rlcf	_counter_step,w,c
 15830  00194C  6ED9               	movwf	fsr2l,c
 15831  00194E  346E               	rlcf	_counter_step+1,w,c
 15832  001950  6EDA               	movwf	fsr2h,c
 15833  001952  0E46               	movlw	low _compartment_number
 15834  001954  26D9               	addwf	fsr2l,f,c
 15835  001956  0E00               	movlw	high _compartment_number
 15836  001958  22DA               	addwfc	fsr2h,f,c
 15837  00195A  CFDE F007          	movff	postinc2,??_is_valid
 15838  00195E  CFDD F008          	movff	postdec2,??_is_valid+1
 15839  001962  90D8               	bcf	status,0,c
 15840  001964  3607               	rlcf	??_is_valid,f,c
 15841  001966  3608               	rlcf	??_is_valid+1,f,c
 15842  001968  0E30               	movlw	low _B_array
 15843  00196A  2407               	addwf	??_is_valid,w,c
 15844  00196C  6ED9               	movwf	fsr2l,c
 15845  00196E  0E01               	movlw	high _B_array
 15846  001970  2008               	addwfc	??_is_valid+1,w,c
 15847  001972  6EDA               	movwf	fsr2h,c
 15848  001974  C065  FFDE         	movff	_B,postinc2
 15849  001978  C066  FFDD         	movff	_B+1,postdec2
 15850                           
 15851                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 15852  00197C  90D8               	bcf	status,0,c
 15853  00197E  346D               	rlcf	_counter_step,w,c
 15854  001980  6ED9               	movwf	fsr2l,c
 15855  001982  346E               	rlcf	_counter_step+1,w,c
 15856  001984  6EDA               	movwf	fsr2h,c
 15857  001986  0E46               	movlw	low _compartment_number
 15858  001988  26D9               	addwf	fsr2l,f,c
 15859  00198A  0E00               	movlw	high _compartment_number
 15860  00198C  22DA               	addwfc	fsr2h,f,c
 15861  00198E  CFDE F007          	movff	postinc2,??_is_valid
 15862  001992  CFDD F008          	movff	postdec2,??_is_valid+1
 15863  001996  90D8               	bcf	status,0,c
 15864  001998  3607               	rlcf	??_is_valid,f,c
 15865  00199A  3608               	rlcf	??_is_valid+1,f,c
 15866  00199C  0E20               	movlw	low _S_array
 15867  00199E  2407               	addwf	??_is_valid,w,c
 15868  0019A0  6ED9               	movwf	fsr2l,c
 15869  0019A2  0E01               	movlw	high _S_array
 15870  0019A4  2008               	addwfc	??_is_valid+1,w,c
 15871  0019A6  6EDA               	movwf	fsr2h,c
 15872  0019A8  C061  FFDE         	movff	_S,postinc2
 15873  0019AC  C062  FFDD         	movff	_S+1,postdec2
 15874                           
 15875                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 15876  0019B0  90D8               	bcf	status,0,c
 15877  0019B2  346D               	rlcf	_counter_step,w,c
 15878  0019B4  6ED9               	movwf	fsr2l,c
 15879  0019B6  346E               	rlcf	_counter_step+1,w,c
 15880  0019B8  6EDA               	movwf	fsr2h,c
 15881  0019BA  0E46               	movlw	low _compartment_number
 15882  0019BC  26D9               	addwf	fsr2l,f,c
 15883  0019BE  0E00               	movlw	high _compartment_number
 15884  0019C0  22DA               	addwfc	fsr2h,f,c
 15885  0019C2  CFDE F007          	movff	postinc2,??_is_valid
 15886  0019C6  CFDD F008          	movff	postdec2,??_is_valid+1
 15887  0019CA  90D8               	bcf	status,0,c
 15888  0019CC  3607               	rlcf	??_is_valid,f,c
 15889  0019CE  3608               	rlcf	??_is_valid+1,f,c
 15890  0019D0  0E00               	movlw	low _W_array
 15891  0019D2  2407               	addwf	??_is_valid,w,c
 15892  0019D4  6ED9               	movwf	fsr2l,c
 15893  0019D6  0E01               	movlw	high _W_array
 15894  0019D8  2008               	addwfc	??_is_valid+1,w,c
 15895  0019DA  6EDA               	movwf	fsr2h,c
 15896  0019DC  C05F  FFDE         	movff	_W,postinc2
 15897  0019E0  C060  FFDD         	movff	_W+1,postdec2
 15898                           
 15899                           ;keypad.c: 145: }
 15900  0019E4  0012               	return	
 15901  0019E6                     i2l760:
 15902                           
 15903                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 15904  0019E6  0E78               	movlw	low _current_set2
 15905  0019E8  6E01               	movwf	strcmp@s1,c
 15906  0019EA  0E00               	movlw	high _current_set2
 15907  0019EC  6E02               	movwf	strcmp@s1+1,c
 15908  0019EE  0ECF               	movlw	low STR_96
 15909  0019F0  6E03               	movwf	strcmp@s2,c
 15910  0019F2  0EFF               	movlw	high STR_96
 15911  0019F4  6E04               	movwf	strcmp@s2+1,c
 15912  0019F6  EC0D  F022         	call	_strcmp	;wreg free
 15913  0019FA  5001               	movf	?_strcmp,w,c
 15914  0019FC  1002               	iorwf	?_strcmp+1,w,c
 15915  0019FE  A4D8               	btfss	status,2,c
 15916  001A00  D06A               	goto	i2l762
 15917                           
 15918                           ;keypad.c: 147: B = 2*number;
 15919  001A02  90D8               	bcf	status,0,c
 15920  001A04  347D               	rlcf	_number,w,c
 15921  001A06  6E65               	movwf	_B,c
 15922  001A08  347E               	rlcf	_number+1,w,c
 15923  001A0A  6E66               	movwf	_B+1,c
 15924                           
 15925                           ;keypad.c: 148: S = 1*number;
 15926  001A0C  C07D  F061         	movff	_number,_S
 15927  001A10  C07E  F062         	movff	_number+1,_S+1
 15928                           
 15929                           ;keypad.c: 149: W = number;
 15930  001A14  C07D  F05F         	movff	_number,_W
 15931  001A18  C07E  F060         	movff	_number+1,_W+1
 15932                           
 15933                           ;keypad.c: 150: total_number = 4*number;
 15934  001A1C  C07D  F007         	movff	_number,??_is_valid
 15935  001A20  C07E  F008         	movff	_number+1,??_is_valid+1
 15936  001A24  90D8               	bcf	status,0,c
 15937  001A26  3607               	rlcf	??_is_valid,f,c
 15938  001A28  3608               	rlcf	??_is_valid+1,f,c
 15939  001A2A  90D8               	bcf	status,0,c
 15940  001A2C  3607               	rlcf	??_is_valid,f,c
 15941  001A2E  3608               	rlcf	??_is_valid+1,f,c
 15942  001A30  C007  F069         	movff	??_is_valid,_total_number
 15943  001A34  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15944                           
 15945                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 15946  001A38  90D8               	bcf	status,0,c
 15947  001A3A  346D               	rlcf	_counter_step,w,c
 15948  001A3C  6ED9               	movwf	fsr2l,c
 15949  001A3E  346E               	rlcf	_counter_step+1,w,c
 15950  001A40  6EDA               	movwf	fsr2h,c
 15951  001A42  0E46               	movlw	low _compartment_number
 15952  001A44  26D9               	addwf	fsr2l,f,c
 15953  001A46  0E00               	movlw	high _compartment_number
 15954  001A48  22DA               	addwfc	fsr2h,f,c
 15955  001A4A  CFDE F007          	movff	postinc2,??_is_valid
 15956  001A4E  CFDD F008          	movff	postdec2,??_is_valid+1
 15957  001A52  90D8               	bcf	status,0,c
 15958  001A54  3607               	rlcf	??_is_valid,f,c
 15959  001A56  3608               	rlcf	??_is_valid+1,f,c
 15960  001A58  0E30               	movlw	low _B_array
 15961  001A5A  2407               	addwf	??_is_valid,w,c
 15962  001A5C  6ED9               	movwf	fsr2l,c
 15963  001A5E  0E01               	movlw	high _B_array
 15964  001A60  2008               	addwfc	??_is_valid+1,w,c
 15965  001A62  6EDA               	movwf	fsr2h,c
 15966  001A64  C065  FFDE         	movff	_B,postinc2
 15967  001A68  C066  FFDD         	movff	_B+1,postdec2
 15968                           
 15969                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 15970  001A6C  90D8               	bcf	status,0,c
 15971  001A6E  346D               	rlcf	_counter_step,w,c
 15972  001A70  6ED9               	movwf	fsr2l,c
 15973  001A72  346E               	rlcf	_counter_step+1,w,c
 15974  001A74  6EDA               	movwf	fsr2h,c
 15975  001A76  0E46               	movlw	low _compartment_number
 15976  001A78  26D9               	addwf	fsr2l,f,c
 15977  001A7A  0E00               	movlw	high _compartment_number
 15978  001A7C  22DA               	addwfc	fsr2h,f,c
 15979  001A7E  CFDE F007          	movff	postinc2,??_is_valid
 15980  001A82  CFDD F008          	movff	postdec2,??_is_valid+1
 15981  001A86  90D8               	bcf	status,0,c
 15982  001A88  3607               	rlcf	??_is_valid,f,c
 15983  001A8A  3608               	rlcf	??_is_valid+1,f,c
 15984  001A8C  0E20               	movlw	low _S_array
 15985  001A8E  2407               	addwf	??_is_valid,w,c
 15986  001A90  6ED9               	movwf	fsr2l,c
 15987  001A92  0E01               	movlw	high _S_array
 15988  001A94  2008               	addwfc	??_is_valid+1,w,c
 15989  001A96  6EDA               	movwf	fsr2h,c
 15990  001A98  C061  FFDE         	movff	_S,postinc2
 15991  001A9C  C062  FFDD         	movff	_S+1,postdec2
 15992                           
 15993                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 15994  001AA0  90D8               	bcf	status,0,c
 15995  001AA2  346D               	rlcf	_counter_step,w,c
 15996  001AA4  6ED9               	movwf	fsr2l,c
 15997  001AA6  346E               	rlcf	_counter_step+1,w,c
 15998  001AA8  6EDA               	movwf	fsr2h,c
 15999  001AAA  0E46               	movlw	low _compartment_number
 16000  001AAC  26D9               	addwf	fsr2l,f,c
 16001  001AAE  0E00               	movlw	high _compartment_number
 16002  001AB0  22DA               	addwfc	fsr2h,f,c
 16003  001AB2  CFDE F007          	movff	postinc2,??_is_valid
 16004  001AB6  CFDD F008          	movff	postdec2,??_is_valid+1
 16005  001ABA  90D8               	bcf	status,0,c
 16006  001ABC  3607               	rlcf	??_is_valid,f,c
 16007  001ABE  3608               	rlcf	??_is_valid+1,f,c
 16008  001AC0  0E00               	movlw	low _W_array
 16009  001AC2  2407               	addwf	??_is_valid,w,c
 16010  001AC4  6ED9               	movwf	fsr2l,c
 16011  001AC6  0E01               	movlw	high _W_array
 16012  001AC8  2008               	addwfc	??_is_valid+1,w,c
 16013  001ACA  6EDA               	movwf	fsr2h,c
 16014  001ACC  C05F  FFDE         	movff	_W,postinc2
 16015  001AD0  C060  FFDD         	movff	_W+1,postdec2
 16016                           
 16017                           ;keypad.c: 155: }
 16018  001AD4  0012               	return	
 16019  001AD6                     i2l762:
 16020                           
 16021                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 16022  001AD6  0E78               	movlw	low _current_set2
 16023  001AD8  6E01               	movwf	strcmp@s1,c
 16024  001ADA  0E00               	movlw	high _current_set2
 16025  001ADC  6E02               	movwf	strcmp@s1+1,c
 16026  001ADE  0EC5               	movlw	low STR_97
 16027  001AE0  6E03               	movwf	strcmp@s2,c
 16028  001AE2  0EFF               	movlw	high STR_97
 16029  001AE4  6E04               	movwf	strcmp@s2+1,c
 16030  001AE6  EC0D  F022         	call	_strcmp	;wreg free
 16031  001AEA  5001               	movf	?_strcmp,w,c
 16032  001AEC  1002               	iorwf	?_strcmp+1,w,c
 16033  001AEE  A4D8               	btfss	status,2,c
 16034  001AF0  D06A               	goto	i2l764
 16035                           
 16036                           ;keypad.c: 157: B = 2*number;
 16037  001AF2  90D8               	bcf	status,0,c
 16038  001AF4  347D               	rlcf	_number,w,c
 16039  001AF6  6E65               	movwf	_B,c
 16040  001AF8  347E               	rlcf	_number+1,w,c
 16041  001AFA  6E66               	movwf	_B+1,c
 16042                           
 16043                           ;keypad.c: 158: N = 1*number;
 16044  001AFC  C07D  F063         	movff	_number,_N
 16045  001B00  C07E  F064         	movff	_number+1,_N+1
 16046                           
 16047                           ;keypad.c: 159: W = 1*number;
 16048  001B04  C07D  F05F         	movff	_number,_W
 16049  001B08  C07E  F060         	movff	_number+1,_W+1
 16050                           
 16051                           ;keypad.c: 160: total_number = 4*number;
 16052  001B0C  C07D  F007         	movff	_number,??_is_valid
 16053  001B10  C07E  F008         	movff	_number+1,??_is_valid+1
 16054  001B14  90D8               	bcf	status,0,c
 16055  001B16  3607               	rlcf	??_is_valid,f,c
 16056  001B18  3608               	rlcf	??_is_valid+1,f,c
 16057  001B1A  90D8               	bcf	status,0,c
 16058  001B1C  3607               	rlcf	??_is_valid,f,c
 16059  001B1E  3608               	rlcf	??_is_valid+1,f,c
 16060  001B20  C007  F069         	movff	??_is_valid,_total_number
 16061  001B24  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16062                           
 16063                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 16064  001B28  90D8               	bcf	status,0,c
 16065  001B2A  346D               	rlcf	_counter_step,w,c
 16066  001B2C  6ED9               	movwf	fsr2l,c
 16067  001B2E  346E               	rlcf	_counter_step+1,w,c
 16068  001B30  6EDA               	movwf	fsr2h,c
 16069  001B32  0E46               	movlw	low _compartment_number
 16070  001B34  26D9               	addwf	fsr2l,f,c
 16071  001B36  0E00               	movlw	high _compartment_number
 16072  001B38  22DA               	addwfc	fsr2h,f,c
 16073  001B3A  CFDE F007          	movff	postinc2,??_is_valid
 16074  001B3E  CFDD F008          	movff	postdec2,??_is_valid+1
 16075  001B42  90D8               	bcf	status,0,c
 16076  001B44  3607               	rlcf	??_is_valid,f,c
 16077  001B46  3608               	rlcf	??_is_valid+1,f,c
 16078  001B48  0E30               	movlw	low _B_array
 16079  001B4A  2407               	addwf	??_is_valid,w,c
 16080  001B4C  6ED9               	movwf	fsr2l,c
 16081  001B4E  0E01               	movlw	high _B_array
 16082  001B50  2008               	addwfc	??_is_valid+1,w,c
 16083  001B52  6EDA               	movwf	fsr2h,c
 16084  001B54  C065  FFDE         	movff	_B,postinc2
 16085  001B58  C066  FFDD         	movff	_B+1,postdec2
 16086                           
 16087                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 16088  001B5C  90D8               	bcf	status,0,c
 16089  001B5E  346D               	rlcf	_counter_step,w,c
 16090  001B60  6ED9               	movwf	fsr2l,c
 16091  001B62  346E               	rlcf	_counter_step+1,w,c
 16092  001B64  6EDA               	movwf	fsr2h,c
 16093  001B66  0E46               	movlw	low _compartment_number
 16094  001B68  26D9               	addwf	fsr2l,f,c
 16095  001B6A  0E00               	movlw	high _compartment_number
 16096  001B6C  22DA               	addwfc	fsr2h,f,c
 16097  001B6E  CFDE F007          	movff	postinc2,??_is_valid
 16098  001B72  CFDD F008          	movff	postdec2,??_is_valid+1
 16099  001B76  90D8               	bcf	status,0,c
 16100  001B78  3607               	rlcf	??_is_valid,f,c
 16101  001B7A  3608               	rlcf	??_is_valid+1,f,c
 16102  001B7C  0E10               	movlw	low _N_array
 16103  001B7E  2407               	addwf	??_is_valid,w,c
 16104  001B80  6ED9               	movwf	fsr2l,c
 16105  001B82  0E01               	movlw	high _N_array
 16106  001B84  2008               	addwfc	??_is_valid+1,w,c
 16107  001B86  6EDA               	movwf	fsr2h,c
 16108  001B88  C063  FFDE         	movff	_N,postinc2
 16109  001B8C  C064  FFDD         	movff	_N+1,postdec2
 16110                           
 16111                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 16112  001B90  90D8               	bcf	status,0,c
 16113  001B92  346D               	rlcf	_counter_step,w,c
 16114  001B94  6ED9               	movwf	fsr2l,c
 16115  001B96  346E               	rlcf	_counter_step+1,w,c
 16116  001B98  6EDA               	movwf	fsr2h,c
 16117  001B9A  0E46               	movlw	low _compartment_number
 16118  001B9C  26D9               	addwf	fsr2l,f,c
 16119  001B9E  0E00               	movlw	high _compartment_number
 16120  001BA0  22DA               	addwfc	fsr2h,f,c
 16121  001BA2  CFDE F007          	movff	postinc2,??_is_valid
 16122  001BA6  CFDD F008          	movff	postdec2,??_is_valid+1
 16123  001BAA  90D8               	bcf	status,0,c
 16124  001BAC  3607               	rlcf	??_is_valid,f,c
 16125  001BAE  3608               	rlcf	??_is_valid+1,f,c
 16126  001BB0  0E00               	movlw	low _W_array
 16127  001BB2  2407               	addwf	??_is_valid,w,c
 16128  001BB4  6ED9               	movwf	fsr2l,c
 16129  001BB6  0E01               	movlw	high _W_array
 16130  001BB8  2008               	addwfc	??_is_valid+1,w,c
 16131  001BBA  6EDA               	movwf	fsr2h,c
 16132  001BBC  C05F  FFDE         	movff	_W,postinc2
 16133  001BC0  C060  FFDD         	movff	_W+1,postdec2
 16134                           
 16135                           ;keypad.c: 165: }
 16136  001BC4  0012               	return	
 16137  001BC6                     i2l764:
 16138                           
 16139                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 16140  001BC6  0E78               	movlw	low _current_set2
 16141  001BC8  6E01               	movwf	strcmp@s1,c
 16142  001BCA  0E00               	movlw	high _current_set2
 16143  001BCC  6E02               	movwf	strcmp@s1+1,c
 16144  001BCE  0ECA               	movlw	low STR_98
 16145  001BD0  6E03               	movwf	strcmp@s2,c
 16146  001BD2  0EFF               	movlw	high STR_98
 16147  001BD4  6E04               	movwf	strcmp@s2+1,c
 16148  001BD6  EC0D  F022         	call	_strcmp	;wreg free
 16149  001BDA  5001               	movf	?_strcmp,w,c
 16150  001BDC  1002               	iorwf	?_strcmp+1,w,c
 16151  001BDE  A4D8               	btfss	status,2,c
 16152  001BE0  D06A               	goto	i2l766
 16153                           
 16154                           ;keypad.c: 167: B = 1*number;
 16155  001BE2  C07D  F065         	movff	_number,_B
 16156  001BE6  C07E  F066         	movff	_number+1,_B+1
 16157                           
 16158                           ;keypad.c: 168: N = 2*number;
 16159  001BEA  90D8               	bcf	status,0,c
 16160  001BEC  347D               	rlcf	_number,w,c
 16161  001BEE  6E63               	movwf	_N,c
 16162  001BF0  347E               	rlcf	_number+1,w,c
 16163  001BF2  6E64               	movwf	_N+1,c
 16164                           
 16165                           ;keypad.c: 169: W = 1*number;
 16166  001BF4  C07D  F05F         	movff	_number,_W
 16167  001BF8  C07E  F060         	movff	_number+1,_W+1
 16168                           
 16169                           ;keypad.c: 170: total_number = 4*number;
 16170  001BFC  C07D  F007         	movff	_number,??_is_valid
 16171  001C00  C07E  F008         	movff	_number+1,??_is_valid+1
 16172  001C04  90D8               	bcf	status,0,c
 16173  001C06  3607               	rlcf	??_is_valid,f,c
 16174  001C08  3608               	rlcf	??_is_valid+1,f,c
 16175  001C0A  90D8               	bcf	status,0,c
 16176  001C0C  3607               	rlcf	??_is_valid,f,c
 16177  001C0E  3608               	rlcf	??_is_valid+1,f,c
 16178  001C10  C007  F069         	movff	??_is_valid,_total_number
 16179  001C14  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16180                           
 16181                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 16182  001C18  90D8               	bcf	status,0,c
 16183  001C1A  346D               	rlcf	_counter_step,w,c
 16184  001C1C  6ED9               	movwf	fsr2l,c
 16185  001C1E  346E               	rlcf	_counter_step+1,w,c
 16186  001C20  6EDA               	movwf	fsr2h,c
 16187  001C22  0E46               	movlw	low _compartment_number
 16188  001C24  26D9               	addwf	fsr2l,f,c
 16189  001C26  0E00               	movlw	high _compartment_number
 16190  001C28  22DA               	addwfc	fsr2h,f,c
 16191  001C2A  CFDE F007          	movff	postinc2,??_is_valid
 16192  001C2E  CFDD F008          	movff	postdec2,??_is_valid+1
 16193  001C32  90D8               	bcf	status,0,c
 16194  001C34  3607               	rlcf	??_is_valid,f,c
 16195  001C36  3608               	rlcf	??_is_valid+1,f,c
 16196  001C38  0E30               	movlw	low _B_array
 16197  001C3A  2407               	addwf	??_is_valid,w,c
 16198  001C3C  6ED9               	movwf	fsr2l,c
 16199  001C3E  0E01               	movlw	high _B_array
 16200  001C40  2008               	addwfc	??_is_valid+1,w,c
 16201  001C42  6EDA               	movwf	fsr2h,c
 16202  001C44  C065  FFDE         	movff	_B,postinc2
 16203  001C48  C066  FFDD         	movff	_B+1,postdec2
 16204                           
 16205                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 16206  001C4C  90D8               	bcf	status,0,c
 16207  001C4E  346D               	rlcf	_counter_step,w,c
 16208  001C50  6ED9               	movwf	fsr2l,c
 16209  001C52  346E               	rlcf	_counter_step+1,w,c
 16210  001C54  6EDA               	movwf	fsr2h,c
 16211  001C56  0E46               	movlw	low _compartment_number
 16212  001C58  26D9               	addwf	fsr2l,f,c
 16213  001C5A  0E00               	movlw	high _compartment_number
 16214  001C5C  22DA               	addwfc	fsr2h,f,c
 16215  001C5E  CFDE F007          	movff	postinc2,??_is_valid
 16216  001C62  CFDD F008          	movff	postdec2,??_is_valid+1
 16217  001C66  90D8               	bcf	status,0,c
 16218  001C68  3607               	rlcf	??_is_valid,f,c
 16219  001C6A  3608               	rlcf	??_is_valid+1,f,c
 16220  001C6C  0E10               	movlw	low _N_array
 16221  001C6E  2407               	addwf	??_is_valid,w,c
 16222  001C70  6ED9               	movwf	fsr2l,c
 16223  001C72  0E01               	movlw	high _N_array
 16224  001C74  2008               	addwfc	??_is_valid+1,w,c
 16225  001C76  6EDA               	movwf	fsr2h,c
 16226  001C78  C063  FFDE         	movff	_N,postinc2
 16227  001C7C  C064  FFDD         	movff	_N+1,postdec2
 16228                           
 16229                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 16230  001C80  90D8               	bcf	status,0,c
 16231  001C82  346D               	rlcf	_counter_step,w,c
 16232  001C84  6ED9               	movwf	fsr2l,c
 16233  001C86  346E               	rlcf	_counter_step+1,w,c
 16234  001C88  6EDA               	movwf	fsr2h,c
 16235  001C8A  0E46               	movlw	low _compartment_number
 16236  001C8C  26D9               	addwf	fsr2l,f,c
 16237  001C8E  0E00               	movlw	high _compartment_number
 16238  001C90  22DA               	addwfc	fsr2h,f,c
 16239  001C92  CFDE F007          	movff	postinc2,??_is_valid
 16240  001C96  CFDD F008          	movff	postdec2,??_is_valid+1
 16241  001C9A  90D8               	bcf	status,0,c
 16242  001C9C  3607               	rlcf	??_is_valid,f,c
 16243  001C9E  3608               	rlcf	??_is_valid+1,f,c
 16244  001CA0  0E00               	movlw	low _W_array
 16245  001CA2  2407               	addwf	??_is_valid,w,c
 16246  001CA4  6ED9               	movwf	fsr2l,c
 16247  001CA6  0E01               	movlw	high _W_array
 16248  001CA8  2008               	addwfc	??_is_valid+1,w,c
 16249  001CAA  6EDA               	movwf	fsr2h,c
 16250  001CAC  C05F  FFDE         	movff	_W,postinc2
 16251  001CB0  C060  FFDD         	movff	_W+1,postdec2
 16252                           
 16253                           ;keypad.c: 175: }
 16254  001CB4  0012               	return	
 16255  001CB6                     i2l766:
 16256                           
 16257                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 16258  001CB6  0E78               	movlw	low _current_set2
 16259  001CB8  6E01               	movwf	strcmp@s1,c
 16260  001CBA  0E00               	movlw	high _current_set2
 16261  001CBC  6E02               	movwf	strcmp@s1+1,c
 16262  001CBE  0EC0               	movlw	low STR_99
 16263  001CC0  6E03               	movwf	strcmp@s2,c
 16264  001CC2  0EFF               	movlw	high STR_99
 16265  001CC4  6E04               	movwf	strcmp@s2+1,c
 16266  001CC6  EC0D  F022         	call	_strcmp	;wreg free
 16267  001CCA  5001               	movf	?_strcmp,w,c
 16268  001CCC  1002               	iorwf	?_strcmp+1,w,c
 16269  001CCE  A4D8               	btfss	status,2,c
 16270  001CD0  D055               	goto	i2l768
 16271                           
 16272                           ;keypad.c: 177: B = 1*number;
 16273  001CD2  C07D  F065         	movff	_number,_B
 16274  001CD6  C07E  F066         	movff	_number+1,_B+1
 16275                           
 16276                           ;keypad.c: 178: N = 3*number;
 16277  001CDA  C07D  F001         	movff	_number,i2___wmul@multiplier
 16278  001CDE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16279  001CE2  0E00               	movlw	0
 16280  001CE4  6E04               	movwf	i2___wmul@multiplicand+1,c
 16281  001CE6  0E03               	movlw	3
 16282  001CE8  6E03               	movwf	i2___wmul@multiplicand,c
 16283  001CEA  EC13  F023         	call	i2___wmul	;wreg free
 16284  001CEE  C001  F063         	movff	?i2___wmul,_N
 16285  001CF2  C002  F064         	movff	?i2___wmul+1,_N+1
 16286                           
 16287                           ;keypad.c: 179: total_number = 4*number;
 16288  001CF6  C07D  F007         	movff	_number,??_is_valid
 16289  001CFA  C07E  F008         	movff	_number+1,??_is_valid+1
 16290  001CFE  90D8               	bcf	status,0,c
 16291  001D00  3607               	rlcf	??_is_valid,f,c
 16292  001D02  3608               	rlcf	??_is_valid+1,f,c
 16293  001D04  90D8               	bcf	status,0,c
 16294  001D06  3607               	rlcf	??_is_valid,f,c
 16295  001D08  3608               	rlcf	??_is_valid+1,f,c
 16296  001D0A  C007  F069         	movff	??_is_valid,_total_number
 16297  001D0E  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16298                           
 16299                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 16300  001D12  90D8               	bcf	status,0,c
 16301  001D14  346D               	rlcf	_counter_step,w,c
 16302  001D16  6ED9               	movwf	fsr2l,c
 16303  001D18  346E               	rlcf	_counter_step+1,w,c
 16304  001D1A  6EDA               	movwf	fsr2h,c
 16305  001D1C  0E46               	movlw	low _compartment_number
 16306  001D1E  26D9               	addwf	fsr2l,f,c
 16307  001D20  0E00               	movlw	high _compartment_number
 16308  001D22  22DA               	addwfc	fsr2h,f,c
 16309  001D24  CFDE F007          	movff	postinc2,??_is_valid
 16310  001D28  CFDD F008          	movff	postdec2,??_is_valid+1
 16311  001D2C  90D8               	bcf	status,0,c
 16312  001D2E  3607               	rlcf	??_is_valid,f,c
 16313  001D30  3608               	rlcf	??_is_valid+1,f,c
 16314  001D32  0E30               	movlw	low _B_array
 16315  001D34  2407               	addwf	??_is_valid,w,c
 16316  001D36  6ED9               	movwf	fsr2l,c
 16317  001D38  0E01               	movlw	high _B_array
 16318  001D3A  2008               	addwfc	??_is_valid+1,w,c
 16319  001D3C  6EDA               	movwf	fsr2h,c
 16320  001D3E  C065  FFDE         	movff	_B,postinc2
 16321  001D42  C066  FFDD         	movff	_B+1,postdec2
 16322                           
 16323                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 16324  001D46  90D8               	bcf	status,0,c
 16325  001D48  346D               	rlcf	_counter_step,w,c
 16326  001D4A  6ED9               	movwf	fsr2l,c
 16327  001D4C  346E               	rlcf	_counter_step+1,w,c
 16328  001D4E  6EDA               	movwf	fsr2h,c
 16329  001D50  0E46               	movlw	low _compartment_number
 16330  001D52  26D9               	addwf	fsr2l,f,c
 16331  001D54  0E00               	movlw	high _compartment_number
 16332  001D56  22DA               	addwfc	fsr2h,f,c
 16333  001D58  CFDE F007          	movff	postinc2,??_is_valid
 16334  001D5C  CFDD F008          	movff	postdec2,??_is_valid+1
 16335  001D60  90D8               	bcf	status,0,c
 16336  001D62  3607               	rlcf	??_is_valid,f,c
 16337  001D64  3608               	rlcf	??_is_valid+1,f,c
 16338  001D66  0E10               	movlw	low _N_array
 16339  001D68  2407               	addwf	??_is_valid,w,c
 16340  001D6A  6ED9               	movwf	fsr2l,c
 16341  001D6C  0E01               	movlw	high _N_array
 16342  001D6E  2008               	addwfc	??_is_valid+1,w,c
 16343  001D70  6EDA               	movwf	fsr2h,c
 16344  001D72  C063  FFDE         	movff	_N,postinc2
 16345  001D76  C064  FFDD         	movff	_N+1,postdec2
 16346                           
 16347                           ;keypad.c: 184: }
 16348  001D7A  0012               	return	
 16349  001D7C                     i2l768:
 16350                           
 16351                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 16352  001D7C  0E78               	movlw	low _current_set2
 16353  001D7E  6E01               	movwf	strcmp@s1,c
 16354  001D80  0E00               	movlw	high _current_set2
 16355  001D82  6E02               	movwf	strcmp@s1+1,c
 16356  001D84  0EDE               	movlw	low STR_100
 16357  001D86  6E03               	movwf	strcmp@s2,c
 16358  001D88  0EFF               	movlw	high STR_100
 16359  001D8A  6E04               	movwf	strcmp@s2+1,c
 16360  001D8C  EC0D  F022         	call	_strcmp	;wreg free
 16361  001D90  5001               	movf	?_strcmp,w,c
 16362  001D92  1002               	iorwf	?_strcmp+1,w,c
 16363  001D94  A4D8               	btfss	status,2,c
 16364  001D96  0012               	return	
 16365                           
 16366                           ;keypad.c: 186: B = 1*number;
 16367  001D98  C07D  F065         	movff	_number,_B
 16368  001D9C  C07E  F066         	movff	_number+1,_B+1
 16369                           
 16370                           ;keypad.c: 187: W = 3*number;
 16371  001DA0  C07D  F001         	movff	_number,i2___wmul@multiplier
 16372  001DA4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16373  001DA8  0E00               	movlw	0
 16374  001DAA  6E04               	movwf	i2___wmul@multiplicand+1,c
 16375  001DAC  0E03               	movlw	3
 16376  001DAE  6E03               	movwf	i2___wmul@multiplicand,c
 16377  001DB0  EC13  F023         	call	i2___wmul	;wreg free
 16378  001DB4  C001  F05F         	movff	?i2___wmul,_W
 16379  001DB8  C002  F060         	movff	?i2___wmul+1,_W+1
 16380                           
 16381                           ;keypad.c: 188: total_number = 4*number;
 16382  001DBC  C07D  F007         	movff	_number,??_is_valid
 16383  001DC0  C07E  F008         	movff	_number+1,??_is_valid+1
 16384  001DC4  90D8               	bcf	status,0,c
 16385  001DC6  3607               	rlcf	??_is_valid,f,c
 16386  001DC8  3608               	rlcf	??_is_valid+1,f,c
 16387  001DCA  90D8               	bcf	status,0,c
 16388  001DCC  3607               	rlcf	??_is_valid,f,c
 16389  001DCE  3608               	rlcf	??_is_valid+1,f,c
 16390  001DD0  C007  F069         	movff	??_is_valid,_total_number
 16391  001DD4  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16392                           
 16393                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 16394  001DD8  90D8               	bcf	status,0,c
 16395  001DDA  346D               	rlcf	_counter_step,w,c
 16396  001DDC  6ED9               	movwf	fsr2l,c
 16397  001DDE  346E               	rlcf	_counter_step+1,w,c
 16398  001DE0  6EDA               	movwf	fsr2h,c
 16399  001DE2  0E46               	movlw	low _compartment_number
 16400  001DE4  26D9               	addwf	fsr2l,f,c
 16401  001DE6  0E00               	movlw	high _compartment_number
 16402  001DE8  22DA               	addwfc	fsr2h,f,c
 16403  001DEA  CFDE F007          	movff	postinc2,??_is_valid
 16404  001DEE  CFDD F008          	movff	postdec2,??_is_valid+1
 16405  001DF2  90D8               	bcf	status,0,c
 16406  001DF4  3607               	rlcf	??_is_valid,f,c
 16407  001DF6  3608               	rlcf	??_is_valid+1,f,c
 16408  001DF8  0E30               	movlw	low _B_array
 16409  001DFA  2407               	addwf	??_is_valid,w,c
 16410  001DFC  6ED9               	movwf	fsr2l,c
 16411  001DFE  0E01               	movlw	high _B_array
 16412  001E00  2008               	addwfc	??_is_valid+1,w,c
 16413  001E02  6EDA               	movwf	fsr2h,c
 16414  001E04  C065  FFDE         	movff	_B,postinc2
 16415  001E08  C066  FFDD         	movff	_B+1,postdec2
 16416                           
 16417                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 16418  001E0C  90D8               	bcf	status,0,c
 16419  001E0E  346D               	rlcf	_counter_step,w,c
 16420  001E10  6ED9               	movwf	fsr2l,c
 16421  001E12  346E               	rlcf	_counter_step+1,w,c
 16422  001E14  6EDA               	movwf	fsr2h,c
 16423  001E16  0E46               	movlw	low _compartment_number
 16424  001E18  26D9               	addwf	fsr2l,f,c
 16425  001E1A  0E00               	movlw	high _compartment_number
 16426  001E1C  22DA               	addwfc	fsr2h,f,c
 16427  001E1E  CFDE F007          	movff	postinc2,??_is_valid
 16428  001E22  CFDD F008          	movff	postdec2,??_is_valid+1
 16429  001E26  90D8               	bcf	status,0,c
 16430  001E28  3607               	rlcf	??_is_valid,f,c
 16431  001E2A  3608               	rlcf	??_is_valid+1,f,c
 16432  001E2C  0E00               	movlw	low _W_array
 16433  001E2E  2407               	addwf	??_is_valid,w,c
 16434  001E30  6ED9               	movwf	fsr2l,c
 16435  001E32  0E01               	movlw	high _W_array
 16436  001E34  2008               	addwfc	??_is_valid+1,w,c
 16437  001E36  6EDA               	movwf	fsr2h,c
 16438  001E38  C05F  FFDE         	movff	_W,postinc2
 16439  001E3C  C060  FFDD         	movff	_W+1,postdec2
 16440  001E40  0012               	return	
 16441  001E42                     __end_of_is_valid:
 16442                           	opt stack 0
 16443                           pclatu	equ	0xFFB
 16444                           pclath	equ	0xFFA
 16445                           tblptru	equ	0xFF8
 16446                           tblptrh	equ	0xFF7
 16447                           tblptrl	equ	0xFF6
 16448                           tablat	equ	0xFF5
 16449                           prodh	equ	0xFF4
 16450                           prodl	equ	0xFF3
 16451                           intcon	equ	0xFF2
 16452                           intcon3	equ	0xFF0
 16453                           indf0	equ	0xFEF
 16454                           postinc0	equ	0xFEE
 16455                           fsr0h	equ	0xFEA
 16456                           fsr0l	equ	0xFE9
 16457                           wreg	equ	0xFE8
 16458                           indf1	equ	0xFE7
 16459                           postdec1	equ	0xFE5
 16460                           fsr1h	equ	0xFE2
 16461                           fsr1l	equ	0xFE1
 16462                           indf2	equ	0xFDF
 16463                           postinc2	equ	0xFDE
 16464                           postdec2	equ	0xFDD
 16465                           fsr2h	equ	0xFDA
 16466                           fsr2l	equ	0xFD9
 16467                           status	equ	0xFD8
 16468                           
 16469 ;; *************** function i2___wmul *****************
 16470 ;; Defined at:
 16471 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16472 ;; Parameters:    Size  Location     Type
 16473 ;;  multiplier      2    0[COMRAM] unsigned int 
 16474 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16475 ;; Auto vars:     Size  Location     Type
 16476 ;;  __wmul          2    4[COMRAM] unsigned int 
 16477 ;; Return value:  Size  Location     Type
 16478 ;;                  2    0[COMRAM] unsigned int 
 16479 ;; Registers used:
 16480 ;;		wreg, status,2, status,0, prodl, prodh
 16481 ;; Tracked objects:
 16482 ;;		On entry : 0/0
 16483 ;;		On exit  : 0/0
 16484 ;;		Unchanged: 0/0
 16485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;Total ram usage:        6 bytes
 16491 ;; Hardware stack levels used:    1
 16492 ;; This function calls:
 16493 ;;		Nothing
 16494 ;; This function is called by:
 16495 ;;		_interruptHandler
 16496 ;;		_is_valid
 16497 ;;		i2_printf
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           	psect	text46
 16502  004626                     __ptext46:
 16503                           	opt stack 0
 16504  004626                     i2___wmul:
 16505                           	opt stack 25
 16506                           
 16507                           ;incstack = 0
 16508  004626  5001               	movf	i2___wmul@multiplier,w,c
 16509  004628  0203               	mulwf	i2___wmul@multiplicand,c
 16510  00462A  CFF3 F005          	movff	prodl,i2___wmul@product
 16511  00462E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16512  004632  5001               	movf	i2___wmul@multiplier,w,c
 16513  004634  0204               	mulwf	i2___wmul@multiplicand+1,c
 16514  004636  50F3               	movf	prodl,w,c
 16515  004638  2606               	addwf	i2___wmul@product+1,f,c
 16516  00463A  5002               	movf	i2___wmul@multiplier+1,w,c
 16517  00463C  0203               	mulwf	i2___wmul@multiplicand,c
 16518  00463E  50F3               	movf	prodl,w,c
 16519  004640  2606               	addwf	i2___wmul@product+1,f,c
 16520  004642  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16521  004646  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16522  00464A  0012               	return	
 16523  00464C                     __end_ofi2___wmul:
 16524                           	opt stack 0
 16525                           pclatu	equ	0xFFB
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon3	equ	0xFF0
 16535                           indf0	equ	0xFEF
 16536                           postinc0	equ	0xFEE
 16537                           fsr0h	equ	0xFEA
 16538                           fsr0l	equ	0xFE9
 16539                           wreg	equ	0xFE8
 16540                           indf1	equ	0xFE7
 16541                           postdec1	equ	0xFE5
 16542                           fsr1h	equ	0xFE2
 16543                           fsr1l	equ	0xFE1
 16544                           indf2	equ	0xFDF
 16545                           postinc2	equ	0xFDE
 16546                           postdec2	equ	0xFDD
 16547                           fsr2h	equ	0xFDA
 16548                           fsr2l	equ	0xFD9
 16549                           status	equ	0xFD8
 16550                           
 16551 ;; *************** function _strcmp *****************
 16552 ;; Defined at:
 16553 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 16556 ;;		 -> current_set2(5), 
 16557 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 16558 ;;		 -> STR_100(5), STR_99(5), STR_98(5), STR_97(5), 
 16559 ;;		 -> STR_96(5), STR_95(5), STR_94(5), STR_93(4), 
 16560 ;;		 -> STR_92(4), STR_91(4), STR_90(4), STR_89(4), 
 16561 ;;		 -> STR_88(4), STR_87(3), STR_86(3), STR_85(3), 
 16562 ;;		 -> STR_84(2), STR_83(2), STR_82(2), STR_81(2), 
 16563 ;; Auto vars:     Size  Location     Type
 16564 ;;  r               1    5[COMRAM] char 
 16565 ;; Return value:  Size  Location     Type
 16566 ;;                  2    0[COMRAM] int 
 16567 ;; Registers used:
 16568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;Total ram usage:        6 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; This function calls:
 16581 ;;		Nothing
 16582 ;; This function is called by:
 16583 ;;		_is_valid
 16584 ;; This function uses a non-reentrant model
 16585 ;;
 16586                           
 16587                           	psect	text47
 16588  00441A                     __ptext47:
 16589                           	opt stack 0
 16590  00441A                     _strcmp:
 16591                           	opt stack 25
 16592                           
 16593                           ;incstack = 0
 16594  00441A  D004               	goto	i2l1477
 16595  00441C  4A01               	infsnz	strcmp@s1,f,c
 16596  00441E  2A02               	incf	strcmp@s1+1,f,c
 16597  004420  4A03               	infsnz	strcmp@s2,f,c
 16598  004422  2A04               	incf	strcmp@s2+1,f,c
 16599  004424                     i2l1477:
 16600  004424  C001  FFD9         	movff	strcmp@s1,fsr2l
 16601  004428  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16602  00442C  50DF               	movf	indf2,w,c
 16603  00442E  6E05               	movwf	??_strcmp& (0+255),c
 16604  004430  C003  FFF6         	movff	strcmp@s2,tblptrl
 16605  004434  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 16606  004438                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16607  004438  6AF8               	clrf	tblptru,c
 16608  00443A                     	endif
 16609  00443A                     	if	0	;tblptru may be non-zero
 16610  00443A                     	endif
 16611  00443A  0008               	tblrd		*
 16612  00443C  50F5               	movf	tablat,w,c
 16613  00443E  0800               	sublw	0
 16614  004440  2405               	addwf	??_strcmp,w,c
 16615  004442  6E06               	movwf	strcmp@r,c
 16616  004444  5006               	movf	strcmp@r,w,c
 16617  004446  A4D8               	btfss	status,2,c
 16618  004448  D007               	goto	i2u259_40
 16619  00444A  C001  FFD9         	movff	strcmp@s1,fsr2l
 16620  00444E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16621  004452  50DF               	movf	indf2,w,c
 16622  004454  A4D8               	btfss	status,2,c
 16623  004456  D7E2               	goto	i2l1478
 16624  004458                     i2u259_40:
 16625  004458  5006               	movf	strcmp@r,w,c
 16626  00445A  6E01               	movwf	?_strcmp,c
 16627  00445C  6A02               	clrf	?_strcmp+1,c
 16628  00445E  BE01               	btfsc	?_strcmp,7,c
 16629  004460  0602               	decf	?_strcmp+1,f,c
 16630  004462  0012               	return	
 16631  004464                     __end_of_strcmp:
 16632                           	opt stack 0
 16633                           pclatu	equ	0xFFB
 16634                           pclath	equ	0xFFA
 16635                           tblptru	equ	0xFF8
 16636                           tblptrh	equ	0xFF7
 16637                           tblptrl	equ	0xFF6
 16638                           tablat	equ	0xFF5
 16639                           prodh	equ	0xFF4
 16640                           prodl	equ	0xFF3
 16641                           intcon	equ	0xFF2
 16642                           intcon3	equ	0xFF0
 16643                           indf0	equ	0xFEF
 16644                           postinc0	equ	0xFEE
 16645                           fsr0h	equ	0xFEA
 16646                           fsr0l	equ	0xFE9
 16647                           wreg	equ	0xFE8
 16648                           indf1	equ	0xFE7
 16649                           postdec1	equ	0xFE5
 16650                           fsr1h	equ	0xFE2
 16651                           fsr1l	equ	0xFE1
 16652                           indf2	equ	0xFDF
 16653                           postinc2	equ	0xFDE
 16654                           postdec2	equ	0xFDD
 16655                           fsr2h	equ	0xFDA
 16656                           fsr2l	equ	0xFD9
 16657                           status	equ	0xFD8
 16658                           
 16659 ;; *************** function _check *****************
 16660 ;; Defined at:
 16661 ;;		line 208 in file "keypad.c"
 16662 ;; Parameters:    Size  Location     Type
 16663 ;;		None
 16664 ;; Auto vars:     Size  Location     Type
 16665 ;;		None
 16666 ;; Return value:  Size  Location     Type
 16667 ;;                  2    0[COMRAM] int 
 16668 ;; Registers used:
 16669 ;;		wreg, status,2, status,0
 16670 ;; Tracked objects:
 16671 ;;		On entry : 0/0
 16672 ;;		On exit  : 0/0
 16673 ;;		Unchanged: 0/0
 16674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16679 ;;Total ram usage:        2 bytes
 16680 ;; Hardware stack levels used:    1
 16681 ;; This function calls:
 16682 ;;		Nothing
 16683 ;; This function is called by:
 16684 ;;		_interruptHandler
 16685 ;; This function uses a non-reentrant model
 16686 ;;
 16687                           
 16688                           	psect	text48
 16689  0041BC                     __ptext48:
 16690                           	opt stack 0
 16691  0041BC                     _check:
 16692                           	opt stack 26
 16693                           
 16694                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 16695                           
 16696                           ;incstack = 0
 16697  0041BC  BE66               	btfsc	_B+1,7,c
 16698  0041BE  D006               	goto	i2u355_40
 16699  0041C0  5066               	movf	_B+1,w,c
 16700  0041C2  E124               	bnz	i2l4846
 16701  0041C4  0E03               	movlw	3
 16702  0041C6  5C65               	subwf	_B,w,c
 16703  0041C8  B0D8               	btfsc	status,0,c
 16704  0041CA  D020               	goto	i2u359_40
 16705  0041CC                     i2u355_40:
 16706  0041CC  BE64               	btfsc	_N+1,7,c
 16707  0041CE  D006               	goto	i2u356_40
 16708  0041D0  5064               	movf	_N+1,w,c
 16709  0041D2  E11C               	bnz	i2l4846
 16710  0041D4  0E04               	movlw	4
 16711  0041D6  5C63               	subwf	_N,w,c
 16712  0041D8  B0D8               	btfsc	status,0,c
 16713  0041DA  D018               	goto	i2u359_40
 16714  0041DC                     i2u356_40:
 16715  0041DC  BE62               	btfsc	_S+1,7,c
 16716  0041DE  D006               	goto	i2u357_40
 16717  0041E0  5062               	movf	_S+1,w,c
 16718  0041E2  E114               	bnz	i2l4846
 16719  0041E4  0E03               	movlw	3
 16720  0041E6  5C61               	subwf	_S,w,c
 16721  0041E8  B0D8               	btfsc	status,0,c
 16722  0041EA  D010               	goto	i2u359_40
 16723  0041EC                     i2u357_40:
 16724  0041EC  BE60               	btfsc	_W+1,7,c
 16725  0041EE  D006               	goto	i2u358_40
 16726  0041F0  5060               	movf	_W+1,w,c
 16727  0041F2  E10C               	bnz	i2l4846
 16728  0041F4  0E05               	movlw	5
 16729  0041F6  5C5F               	subwf	_W,w,c
 16730  0041F8  B0D8               	btfsc	status,0,c
 16731  0041FA  D008               	goto	i2u359_40
 16732  0041FC                     i2u358_40:
 16733  0041FC  BE6A               	btfsc	_total_number+1,7,c
 16734  0041FE  D00B               	goto	i2l774
 16735  004200  506A               	movf	_total_number+1,w,c
 16736  004202  E104               	bnz	i2l4846
 16737  004204  0E05               	movlw	5
 16738  004206  5C69               	subwf	_total_number,w,c
 16739  004208  A0D8               	btfss	status,0,c
 16740  00420A  D005               	goto	i2l774
 16741  00420C                     i2u359_40:
 16742  00420C                     i2l4846:
 16743                           
 16744                           ;keypad.c: 213: return 0;
 16745  00420C  0E00               	movlw	0
 16746  00420E  6E02               	movwf	?_check+1,c
 16747  004210  0E00               	movlw	0
 16748  004212  6E01               	movwf	?_check,c
 16749  004214  0012               	return	
 16750  004216                     i2l774:
 16751                           
 16752                           ;keypad.c: 214: }
 16753                           ;keypad.c: 215: return 1;
 16754  004216  0E00               	movlw	0
 16755  004218  6E02               	movwf	?_check+1,c
 16756  00421A  0E01               	movlw	1
 16757  00421C  6E01               	movwf	?_check,c
 16758  00421E  0012               	return	
 16759  004220                     __end_of_check:
 16760                           	opt stack 0
 16761                           pclatu	equ	0xFFB
 16762                           pclath	equ	0xFFA
 16763                           tblptru	equ	0xFF8
 16764                           tblptrh	equ	0xFF7
 16765                           tblptrl	equ	0xFF6
 16766                           tablat	equ	0xFF5
 16767                           prodh	equ	0xFF4
 16768                           prodl	equ	0xFF3
 16769                           intcon	equ	0xFF2
 16770                           intcon3	equ	0xFF0
 16771                           indf0	equ	0xFEF
 16772                           postinc0	equ	0xFEE
 16773                           fsr0h	equ	0xFEA
 16774                           fsr0l	equ	0xFE9
 16775                           wreg	equ	0xFE8
 16776                           indf1	equ	0xFE7
 16777                           postdec1	equ	0xFE5
 16778                           fsr1h	equ	0xFE2
 16779                           fsr1l	equ	0xFE1
 16780                           indf2	equ	0xFDF
 16781                           postinc2	equ	0xFDE
 16782                           postdec2	equ	0xFDD
 16783                           fsr2h	equ	0xFDA
 16784                           fsr2l	equ	0xFD9
 16785                           status	equ	0xFD8
 16786                           
 16787 ;; *************** function ___awmod *****************
 16788 ;; Defined at:
 16789 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;  dividend        2    0[COMRAM] int 
 16792 ;;  divisor         2    2[COMRAM] int 
 16793 ;; Auto vars:     Size  Location     Type
 16794 ;;  sign            1    5[COMRAM] unsigned char 
 16795 ;;  counter         1    4[COMRAM] unsigned char 
 16796 ;; Return value:  Size  Location     Type
 16797 ;;                  2    0[COMRAM] int 
 16798 ;; Registers used:
 16799 ;;		wreg, status,2, status,0
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;Total ram usage:        6 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; This function calls:
 16812 ;;		Nothing
 16813 ;; This function is called by:
 16814 ;;		_interruptHandler
 16815 ;; This function uses a non-reentrant model
 16816 ;;
 16817                           
 16818                           	psect	text49
 16819  00414C                     __ptext49:
 16820                           	opt stack 0
 16821  00414C                     ___awmod:
 16822                           	opt stack 26
 16823                           
 16824                           ;incstack = 0
 16825  00414C  0E00               	movlw	0
 16826  00414E  6E06               	movwf	___awmod@sign,c
 16827  004150  AE02               	btfss	___awmod@dividend+1,7,c
 16828  004152  D006               	goto	i2l1096
 16829  004154  6C01               	negf	___awmod@dividend,c
 16830  004156  1E02               	comf	___awmod@dividend+1,f,c
 16831  004158  B0D8               	btfsc	status,0,c
 16832  00415A  2A02               	incf	___awmod@dividend+1,f,c
 16833  00415C  0E01               	movlw	1
 16834  00415E  6E06               	movwf	___awmod@sign,c
 16835  004160                     i2l1096:
 16836  004160  AE04               	btfss	___awmod@divisor+1,7,c
 16837  004162  D004               	goto	i2l1097
 16838  004164  6C03               	negf	___awmod@divisor,c
 16839  004166  1E04               	comf	___awmod@divisor+1,f,c
 16840  004168  B0D8               	btfsc	status,0,c
 16841  00416A  2A04               	incf	___awmod@divisor+1,f,c
 16842  00416C                     i2l1097:
 16843  00416C  5003               	movf	___awmod@divisor,w,c
 16844  00416E  1004               	iorwf	___awmod@divisor+1,w,c
 16845  004170  B4D8               	btfsc	status,2,c
 16846  004172  D018               	goto	i2l1104
 16847  004174  0E01               	movlw	1
 16848  004176  6E05               	movwf	___awmod@counter,c
 16849  004178  D004               	goto	i2l1099
 16850  00417A  90D8               	bcf	status,0,c
 16851  00417C  3603               	rlcf	___awmod@divisor,f,c
 16852  00417E  3604               	rlcf	___awmod@divisor+1,f,c
 16853  004180  2A05               	incf	___awmod@counter,f,c
 16854  004182                     i2l1099:
 16855  004182  AE04               	btfss	___awmod@divisor+1,7,c
 16856  004184  D7FA               	goto	i2l1100
 16857  004186                     i2u363_40:
 16858  004186  5003               	movf	___awmod@divisor,w,c
 16859  004188  5C01               	subwf	___awmod@dividend,w,c
 16860  00418A  5004               	movf	___awmod@divisor+1,w,c
 16861  00418C  5802               	subwfb	___awmod@dividend+1,w,c
 16862  00418E  A0D8               	btfss	status,0,c
 16863  004190  D004               	goto	i2l1103
 16864  004192  5003               	movf	___awmod@divisor,w,c
 16865  004194  5E01               	subwf	___awmod@dividend,f,c
 16866  004196  5004               	movf	___awmod@divisor+1,w,c
 16867  004198  5A02               	subwfb	___awmod@dividend+1,f,c
 16868  00419A                     i2l1103:
 16869  00419A  90D8               	bcf	status,0,c
 16870  00419C  3204               	rrcf	___awmod@divisor+1,f,c
 16871  00419E  3203               	rrcf	___awmod@divisor,f,c
 16872  0041A0  2E05               	decfsz	___awmod@counter,f,c
 16873  0041A2  D7F1               	goto	i2u363_40
 16874  0041A4                     i2l1104:
 16875  0041A4  5006               	movf	___awmod@sign,w,c
 16876  0041A6  B4D8               	btfsc	status,2,c
 16877  0041A8  D004               	goto	i2l1105
 16878  0041AA  6C01               	negf	___awmod@dividend,c
 16879  0041AC  1E02               	comf	___awmod@dividend+1,f,c
 16880  0041AE  B0D8               	btfsc	status,0,c
 16881  0041B0  2A02               	incf	___awmod@dividend+1,f,c
 16882  0041B2                     i2l1105:
 16883  0041B2  C001  F001         	movff	___awmod@dividend,?___awmod
 16884  0041B6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 16885  0041BA  0012               	return	
 16886  0041BC                     __end_of___awmod:
 16887                           	opt stack 0
 16888                           pclatu	equ	0xFFB
 16889                           pclath	equ	0xFFA
 16890                           tblptru	equ	0xFF8
 16891                           tblptrh	equ	0xFF7
 16892                           tblptrl	equ	0xFF6
 16893                           tablat	equ	0xFF5
 16894                           prodh	equ	0xFF4
 16895                           prodl	equ	0xFF3
 16896                           intcon	equ	0xFF2
 16897                           intcon3	equ	0xFF0
 16898                           indf0	equ	0xFEF
 16899                           postinc0	equ	0xFEE
 16900                           fsr0h	equ	0xFEA
 16901                           fsr0l	equ	0xFE9
 16902                           wreg	equ	0xFE8
 16903                           indf1	equ	0xFE7
 16904                           postdec1	equ	0xFE5
 16905                           fsr1h	equ	0xFE2
 16906                           fsr1l	equ	0xFE1
 16907                           indf2	equ	0xFDF
 16908                           postinc2	equ	0xFDE
 16909                           postdec2	equ	0xFDD
 16910                           fsr2h	equ	0xFDA
 16911                           fsr2l	equ	0xFD9
 16912                           status	equ	0xFD8
 16913                           pclatu	equ	0xFFB
 16914                           pclath	equ	0xFFA
 16915                           tblptru	equ	0xFF8
 16916                           tblptrh	equ	0xFF7
 16917                           tblptrl	equ	0xFF6
 16918                           tablat	equ	0xFF5
 16919                           prodh	equ	0xFF4
 16920                           prodl	equ	0xFF3
 16921                           intcon	equ	0xFF2
 16922                           intcon3	equ	0xFF0
 16923                           indf0	equ	0xFEF
 16924                           postinc0	equ	0xFEE
 16925                           fsr0h	equ	0xFEA
 16926                           fsr0l	equ	0xFE9
 16927                           wreg	equ	0xFE8
 16928                           indf1	equ	0xFE7
 16929                           postdec1	equ	0xFE5
 16930                           fsr1h	equ	0xFE2
 16931                           fsr1l	equ	0xFE1
 16932                           indf2	equ	0xFDF
 16933                           postinc2	equ	0xFDE
 16934                           postdec2	equ	0xFDD
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939                           	psect	rparam
 16940  0000                     pclatu	equ	0xFFB
 16941                           pclath	equ	0xFFA
 16942                           tblptru	equ	0xFF8
 16943                           tblptrh	equ	0xFF7
 16944                           tblptrl	equ	0xFF6
 16945                           tablat	equ	0xFF5
 16946                           prodh	equ	0xFF4
 16947                           prodl	equ	0xFF3
 16948                           intcon	equ	0xFF2
 16949                           intcon3	equ	0xFF0
 16950                           indf0	equ	0xFEF
 16951                           postinc0	equ	0xFEE
 16952                           fsr0h	equ	0xFEA
 16953                           fsr0l	equ	0xFE9
 16954                           wreg	equ	0xFE8
 16955                           indf1	equ	0xFE7
 16956                           postdec1	equ	0xFE5
 16957                           fsr1h	equ	0xFE2
 16958                           fsr1l	equ	0xFE1
 16959                           indf2	equ	0xFDF
 16960                           postinc2	equ	0xFDE
 16961                           postdec2	equ	0xFDD
 16962                           fsr2h	equ	0xFDA
 16963                           fsr2l	equ	0xFD9
 16964                           status	equ	0xFD8
 16965                           
 16966                           	psect	temp
 16967  00007F                     btemp:
 16968                           	opt stack 0
 16969  00007F                     	ds	1
 16970  0000                     int$flags	set	btemp
 16971  0000                     wtemp6	set	btemp+1
 16972                           pclatu	equ	0xFFB
 16973                           pclath	equ	0xFFA
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           intcon3	equ	0xFF0
 16982                           indf0	equ	0xFEF
 16983                           postinc0	equ	0xFEE
 16984                           fsr0h	equ	0xFEA
 16985                           fsr0l	equ	0xFE9
 16986                           wreg	equ	0xFE8
 16987                           indf1	equ	0xFE7
 16988                           postdec1	equ	0xFE5
 16989                           fsr1h	equ	0xFE2
 16990                           fsr1l	equ	0xFE1
 16991                           indf2	equ	0xFDF
 16992                           postinc2	equ	0xFDE
 16993                           postdec2	equ	0xFDD
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8


Data Sizes:
    Strings     725
    Constant    151
    Data        25
    BSS         540
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69     126
    BANK0           128     40     127
    BANK1           256      0     221
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1756	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_77(CODE[1]), STR_75(CODE[1]), STR_72(CODE[1]), STR_69(CODE[2]), 
		 -> STR_68(CODE[2]), STR_67(CODE[2]), STR_66(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_100(CODE[5]), STR_99(CODE[5]), STR_98(CODE[5]), STR_97(CODE[5]), 
		 -> STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), STR_93(CODE[4]), 
		 -> STR_92(CODE[4]), STR_91(CODE[4]), STR_90(CODE[4]), STR_89(CODE[4]), 
		 -> STR_88(CODE[4]), STR_87(CODE[3]), STR_86(CODE[3]), STR_85(CODE[3]), 
		 -> STR_84(CODE[2]), STR_83(CODE[2]), STR_82(CODE[2]), STR_81(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_101(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_80(CODE[3]), STR_79(CODE[9]), STR_78(CODE[12]), STR_76(CODE[7]), 
		 -> STR_74(CODE[3]), STR_73(CODE[11]), STR_71(CODE[3]), STR_70(CODE[9]), 
		 -> STR_65(CODE[15]), STR_64(CODE[12]), STR_63(CODE[9]), STR_62(CODE[16]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[14]), STR_58(CODE[15]), 
		 -> STR_57(CODE[15]), STR_56(CODE[15]), STR_55(CODE[15]), STR_54(CODE[15]), 
		 -> STR_53(CODE[20]), STR_52(CODE[17]), STR_51(CODE[13]), STR_50(CODE[16]), 
		 -> STR_49(CODE[15]), STR_48(CODE[15]), STR_47(CODE[15]), STR_46(CODE[15]), 
		 -> STR_45(CODE[10]), STR_44(CODE[19]), STR_43(CODE[17]), STR_42(CODE[12]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[14]), STR_38(CODE[15]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[9]), 
		 -> STR_33(CODE[20]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[21]), 
		 -> STR_29(CODE[11]), STR_28(CODE[13]), STR_27(CODE[18]), STR_26(CODE[11]), 
		 -> STR_25(CODE[13]), STR_24(CODE[19]), STR_23(CODE[11]), STR_22(CODE[13]), 
		 -> STR_21(CODE[15]), STR_20(CODE[12]), STR_19(CODE[7]), STR_18(CODE[14]), 
		 -> STR_17(CODE[14]), STR_16(CODE[16]), STR_15(CODE[14]), STR_14(CODE[3]), 
		 -> STR_13(CODE[2]), STR_12(CODE[3]), STR_11(CODE[2]), STR_10(CODE[3]), 
		 -> STR_9(CODE[5]), STR_8(CODE[17]), STR_7(CODE[6]), STR_6(CODE[8]), 
		 -> STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), STR_2(CODE[14]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   32247
                                             36 BANK0      4     4      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                             ___wmul
         _generate_compartment_array
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4   10132
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    6660
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6660
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3081
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    2244
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2222
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     740
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13554
                                             42 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            34    22     12    3544
                                             12 COMRAM    30    18     12
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (6) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   ___wmul
     ___awdiv (ARG)
   _generate_compartment_array
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DD       7       86.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A2      34        0.0%
DATA                 0      0     2A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 17:54:27 2018

                                    _B 0065                                      _N 0063  
                                    _S 0061                                      _W 005F  
                                    _i 00BE                                      _j 0075  
                   i2_I2C_Master_Start 4774                             _B_dispense 00FC  
                   i2_I2C_Master_Write 4752                            _rotate_gear 00FE  
                          __CFG_CPD$ON 000000                           ___awdiv@sign 00CD  
                  ___wmul@multiplicand 00D2                     i2___lwdiv@dividend 0001  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l401 2862  
                                  l402 287C                                    l411 2B6C  
                                  l403 2918                                    l405 28BA  
                                  l350 1E7E                                    l407 2920  
                                  l360 1FD2                                    l362 2114  
                                  l354 1EEC                                    l363 2048  
                                  l380 23AA                                    l372 2278  
                                  l356 2140                                    l357 1EF8  
                                  l374 27CC                                    l358 1F48  
                                  l391 25CA                                    l359 1F9A  
                                  l384 2488                                    l368 21AE  
                                  l393 2626                                    l377 2346  
                                  l394 262E                                    l386 24E4  
                                  l491 458E                                    l387 24EC  
                                  l379 23A2                                    l396 26E0  
                                  l397 270A                                    l910 2F92  
                                  l398 2756                                    l487 3AAC  
                                  l911 3048                                    l912 2FE2  
                                  l906 2F8C                                    l850 2C4A  
                                  l907 304E                                    l780 392C  
                                  l860 2DE8                                    l852 2C62  
                                  l781 36FE                                    l909 3036  
                                  l853 2C5A                                    l870 2D34  
                                  l783 3742                                    l784 3794  
                                  l872 2D86                                    l785 37F6  
                                  l881 2E50                                    l865 2E20  
                                  l849 2C3A                                    l786 3868  
                                  l890 2EA0                                    l874 2D96  
                                  l866 2CFC                                    l858 2C96  
                                  l787 38EA                                    l875 2D90  
                                  l867 2D02                                    l884 2ED6  
                                  l868 2D2A                                    l885 2E6A  
                                  l877 2DD6                                    l869 2D3A  
                                  l894 2F00                                    l878 2DAA  
                                  l895 2F24                                    l896 2F2C  
                                  l897 2F5C                                    l889 2EE6  
                                  l898 2F42                           __CFG_CPB$OFF 000000  
                  ?i2_I2C_Master_Start 0001                    ?i2_I2C_Master_Write 0002  
                      _compartment_pos 00B0                           ___awmod@sign 0006  
                                  prod 000FF3                          _assembly_step 00AC  
                                  wreg 000FE8                __end_of_get_RTC_initial 3D2E  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1090 3E1A                                   l1091 3E24  
                                 l1083 3DCC                                   l1092 3E32  
                                 l1084 3DDC                                   l1324 42FC  
                                 l1325 42F4                                   l1245 468A  
                                 l1086 3DFA                                   l1334 44C2  
                                 l1271 3F78                                   l1087 3DF2  
                                 l1335 44BA                                   l1272 3F6C  
                                 l1328 431C                                   l1329 4326  
                                 l1338 44DA                                   l1275 3FAC  
                                 l1339 44E4                                   l1276 3FBA  
                                 l4412 2EA4                                   l4372 2DAA  
                                 l4544 3AEE                                   l4368 2D90  
                                 l5520 26E0                                   l5440 2488  
                                 l4554 3B16                                   l4484 3C36  
                                 l4564 39FE                                   l5524 270A  
                                 l4494 3C5E                                   l4398 2E6E  
                                 l5482 25CA                                   l5398 2346  
                                 l5568 282C                                   _ADON 007E10  
                                 STR_1 FE04                                   STR_2 FEE4  
                                 STR_3 FE33                                   STR_4 FEC8  
                                 STR_5 FFF8                                   STR_6 FFA4  
                                 STR_7 FFBA                                   STR_8 FDD2  
                                 STR_9 FFE3                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3210 3C5E                                   u4100 1E88  
                                 u3150 2F64                                   u3160 2F7A  
                                 u4200 2276                                   u3225 4256  
                                 u3250 3B16                                   u2515 3D6E  
                                 u2516 3D70                                   u3180 3058  
                                 u2525 3DB2                                   u2526 3DB4  
                                 u2720 4300                                   u2650 3DFE  
                                 u4330 263E                                   u4250 23BA  
                                 u5107 1FFC                                   u5117 202E  
                                 u2750 44C6                                   u2575 45CC  
                                 u5207 240A                                   u5127 20FC  
                                 u5047 1EB4                                   u2576 45CE  
                                 u4360 282C                                   u5217 2426  
                                 u5137 216C                                   u5057 1ED0  
                                 u2690 3F7C                                   u4290 24FC  
                                 u5307 2798                                   u5227 2534  
                                 u5147 21F8                                   u5067 1F10  
                                 u2940 2D68                                   u5317 27F4  
                                 u5237 254C                                   u5157 2240  
                                 u5077 1F34                                   u5407 2A0A  
                                 u5327 280E                                   u5247 2568  
                                 u5167 228A                                   u5087 1F8C  
                                 u5417 2A36                                   u5337 2902  
                                 u5257 2676                                   u5177 22B4  
                                 u5097 1FC4                                   u2947 2D5E  
                                 u5507 2B48                                   u5427 2A52  
                                 u5347 2956                                   u5267 2692  
                                 u5187 232E                                   u2980 2DCC  
                                 u5517 2B62                                   u5437 2A68  
                                 u5357 2970                                   u5277 26CC  
                                 u5197 23F2                                   u5607 3D54  
                                 u5527 2BA4                                   u5447 2A94  
                                 u5367 298A                                   u5287 2748  
                                 u5617 3D5E                                   u5537 2BC4  
                                 u5457 2AB0                                   u5377 29A4  
                                 u5297 277C                                   u5627 3D98  
                                 u2987 2DC2                                   u5547 2BEE  
                                 u5467 2AC6                                   u5387 29D8  
                                 u5637 3DA2                                   u5557 2C08  
                                 u5477 2AF2                                   u5397 29F4  
                                 u5567 46C0                                   u5487 2B0E  
                                 u5577 438A                                   u5497 2B24  
                                 u5587 43BE                                   u5597 46D8  
                                 _main 1E42               __end_of_interruptHandler 0FF2  
                                 _mode 00BA                                   _keys FC93  
                                 _temp 0076                                   _time 0056  
                                 _prev 00B2                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 0005  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 007F  
                                 _strs FCC6                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 4708  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                          i2_lcdNibble 3E3C                       __end_of_LCD_LEFT FCC1  
                         _total_number 0069                  I2C_Master_Read@ackBit 00C9  
                     ?_I2C_Master_Init 00D5                       ?_I2C_Master_Read 0001  
     i2generate_compartment_array@step 0001         generate_compartment_array@step 00C8  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                        __end_of___awdiv 3E3C  
                                STR_10 FE4E                                  STR_11 FE02  
                                STR_12 FFF8                                  STR_20 FF26  
                                STR_13 FFFB                                  STR_21 FE8D  
                                STR_14 FE4E                                  STR_22 FEF2  
                                STR_30 FD2A                                  STR_31 FE4E  
                                STR_23 FF55                                  STR_15 FEBA  
                                STR_32 FE4E                                  STR_16 FE14  
                                STR_40 FDB0                                  STR_24 FD67  
                                STR_17 FEBA                                  STR_25 FEFF  
                                STR_41 FDC1                                  STR_33 FD3F  
                                STR_18 FEBA                                  STR_34 FF9B  
                                STR_26 FF60                                  STR_42 FF32  
                                STR_50 FDF4                                  STR_19 FEC1  
                                STR_35 FE4E                                  STR_51 FF19  
                                STR_43 FDE3                                  STR_27 FD8D  
                                STR_36 FE4E                                  STR_60 FDB0  
                                STR_52 FDD2                                  STR_28 FF0C  
                                STR_44 FD7A                        __end_of___awmod 41BC  
                                STR_37 FE4E                                  STR_61 FDC1  
                                STR_45 FF76                                  STR_29 FF6B  
                                STR_53 FD53                                  STR_62 FDF4  
                                STR_70 FF80                                  STR_46 FE9C  
                                STR_38 FE7E                                  STR_54 FE42  
                                STR_71 FFF8                                  STR_63 FF89  
                                STR_39 FED6                                  STR_47 FEAB  
                                STR_55 FE51                                  STR_72 FE32  
                                STR_64 FF32                                  STR_48 FE9C  
                                STR_56 FE60                                  STR_81 FFFD  
                                STR_49 FEAB                                  STR_73 FF4A  
                                STR_57 FE6F                                  STR_65 FE24  
                                STR_82 FFEA                                  STR_58 FE7E  
                                STR_74 FFF8                                  STR_66 FFFD  
                                STR_90 FFF0                                  STR_75 FE32  
                                STR_67 FFEA                                  STR_83 FFEE  
                                STR_91 FFC6                                  STR_59 FED6  
                                STR_68 FFEE                                  STR_84 FFF2  
                                STR_92 FFD0                                  STR_76 FFB3  
                                STR_77 FE32                                  STR_85 FFE9  
                                STR_69 FFF2                                  STR_93 FFF4  
                                STR_86 FFED                                  STR_94 FFD4  
                                STR_78 FF3E                                  STR_87 FFF1  
                                STR_95 FFD9                                  STR_79 FF92  
                                STR_88 FFE8                                  STR_96 FFCF  
                                STR_89 FFEC                                  STR_97 FFC5  
                                STR_98 FFCA                                  STR_99 FFC0  
                      __end_of___lldiv 3FCC                        ___awdiv@divisor 00CA  
                      __end_of___lwdiv 4330                        __end_of___lwmod 44EE  
                                i2l431 01DA                                  i2l423 009A  
                                i2l440 0470                                  i2l433 02FC  
                                i2l450 0970                                  i2l442 0848  
                                i2l434 0202                                  i2l426 01BE  
                                i2l443 09EE                                  i2l427 00C4  
                                i2l460 0CDC                                  i2l452 09B8  
                                i2l444 0898                                  i2l436 0252  
                                i2l461 0B60                                  i2l453 09E0  
                                i2l429 0114                                  i2l470 0E58  
                                i2l454 0D32                                  i2l446 08E0  
                                i2l438 0436                                  i2l471 0E04  
                                i2l463 0C60                                  i2l455 0A08  
                                i2l439 082C                                  i2l480 0F44  
                                i2l472 0E92                                  i2l464 0CD4  
                                i2l456 0A48                                  i2l448 0928  
                                i2l473 0E0C                                  i2l457 0A88  
                                i2l482 0F7C                                  i2l474 0E14  
                                i2l458 0AC8                                  i2l475 0E1C  
                                i2l459 0B08                                  i2l740 121A  
                                i2l732 1054                                  i2l476 0E24  
                                i2l477 0E2E                                  i2l750 1576  
                                i2l742 12BA                                  i2l734 10B6  
                                i2l910 33BA                                  i2l478 0EF2  
                                i2l911 3466                                  i2l760 19E6  
                                i2l752 1664                                  i2l744 135A  
                                i2l736 1118                                  i2l912 3404  
                                i2l762 1AD6                                  i2l754 1752  
                                i2l746 140E                                  i2l738 117A  
                                i2l906 33B4                                  i2l850 3090  
                                i2l907 346C                                  i2l764 1BC6  
                                i2l756 1806                                  i2l748 14C2  
                                i2l780 36CA                                  i2l860 321A  
                                i2l852 30A4                                  i2l781 3492  
                                i2l909 3456                                  i2l853 309E  
                                i2l774 4216                                  i2l766 1CB6  
                                i2l758 18F6                                  i2l870 316E  
                                i2l783 34D6                                  i2l768 1D7C  
                                i2l784 352A                                  i2l872 31BC  
                                i2l785 358E                                  i2l881 327E  
                                i2l865 3250                                  i2l849 3080  
                                i2l786 3602                                  i2l890 32CE  
                                i2l874 31CC                                  i2l866 3138  
                                i2l858 30D6                                  i2l787 3686  
                                i2l875 31C6                                  i2l867 313C  
                                i2l884 3304                                  i2l868 3164  
                      ___awdiv@counter 00CC                                  i2l885 3298  
                                i2l877 3208                                  i2l869 3172  
                                i2l894 332E                                  i2l878 31DE  
                                i2l895 3352                                  i2l896 335A  
                                i2l897 3386                                  i2l889 3314  
                                i2l898 3370                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _B_max 01D9  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                                _N_max 01D7                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 46E0                          _N_spacingTime 009A  
                                _S_max 01D5                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _W_max 01D3                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 45AC                        __end_of_initLCD 43CE  
                                _check 41BC                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                                  _angle 017C  
                      __end_of_dpowers FCAE                                  _array FCBD  
                                _error 017A                        __end_of_isdigit 4692  
                                _valid 006B                                  _state 00AE  
                                _putch 46B0                      _compartment_array 0080  
                           _N_dispense 00FB                                  pclath 000FFA  
                                tablat 000FF5                      _LCDinterruptState 00C2  
                     __end_ofi2___wmul 464C                                  status 000FD8  
          I2C_Master_Read@receivedByte 00CA                                  wtemp6 0080  
                      __end_of_strncmp 3F48                     __size_ofi2___awdiv 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                __size_of_I2C_sendData 0028                     __size_ofi2___lldiv 0082  
                     __end_ofi2_printf 3490                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                        __initialization 40D2  
                    i2___lldiv@divisor 0005                     __size_ofi2_lcdInst 0014  
                         __end_of_main 2C2E                      i2___lldiv@counter 000D  
                         __end_of_keys FCA4                             i2printf@ap 0021  
                           i2printf@cp 001F                           __end_of_strs FD2A  
                   __size_ofi2_initLCD 004C                     __size_ofi2_isdigit 001E  
                    __end_of_LCD_RIGHT FCC2                                 ??_main 00EC  
                           _S_dispense 00FA                          __activetblptr 000003  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 00C9  
                     ?_get_RTC_initial 0001                                 ?_check 0001  
                   ??_I2C_Master_Start 00C9                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 00CB  
                               STR_100 FFDE                                 STR_101 FFAC  
                               STR_102 FD9F                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 00C8  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
                         _I2C_sendData 45FE                        i2lcdNibble@temp 0001  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               i2l1100 417A                                 i2l1103 419A  
                               i2l1104 41A4                                 i2l1105 41B2  
                               i2l1090 402E                                 i2l1091 4038  
                               i2l1083 3FE0                                 i2l1092 4046  
                               i2l1084 3FF0                                 i2l1324 434E  
                               i2l1325 4346                                 i2l1245 46A8  
                               i2l1086 400E                                 i2l1334 4504  
                               i2l1271 407E                                 i2l1087 4006  
                               i2l1335 44FC                                 i2l1096 4160  
                               i2l1272 4072                                 i2l1328 436E  
                               i2l1097 416C                                 i2l1329 4378  
                               i2l1338 451C                                 i2l1099 4182  
                               i2l1275 40B2                                 i2l1339 4526  
                               i2l1276 40C0                                 i2l1471 4556  
                               i2l1472 454E                                 i2l5010 31DE  
                               i2l1491 3F2E                                 i2l1468 453E  
                               i2l1492 3EC4                                 i2l1477 4424  
                               i2l1469 453A                                 i2l1485 4476  
                               i2l1493 3F26                                 i2l1478 441C  
                               i2l1486 446E                                 i2l5006 31C6  
                               i2l5050 32D2                                 i2l5036 329C  
                               i2l6210 0FA6                                 i2l6208 0FA4  
                               i2l4592 3EC4                                 i2l6096 0C6E  
                               i2l4846 420C                                 i2l5734 010C  
                               i2l5760 01D6                                 i2l5780 024A  
                               i2l5856 0592                              ??i2_putch 0003  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                               _B_done 0172                        _openHandle_data 00C1  
                               _N_done 0170                                 _S_done 016E  
                       __CFG_XINST$OFF 000000                                 _W_done 016C  
       ??i2_generate_compartment_array 0003                                 ___wmul 45D6  
                            ??___awdiv 00CC                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___lldiv 00D0  
                            ??___lwdiv 00CC                              ??___lwmod 00D3  
                     __end_of_is_valid 1E42                                 clear_0 4118  
                               clear_1 4124                                 clear_2 4130  
                               clear_3 413C                       ___awdiv@quotient 00CE  
                      ___awmod@divisor 0003                                 _number 007D  
                      ___awmod@counter 0005                              ??_lcdInst 00CA  
                               _printf 2C2E                                 _strcat 4530  
                               _strcmp 441A                                 _strcpy 4464  
                       i2___awdiv@sign 0006                              ??_readADC 00CA  
                            ??_initLCD 00CB                     _compartment_number 0046  
                            ??_isdigit 00C8                      __end_ofi2___awdiv 4050  
                    __end_ofi2___lldiv 40D2                      __end_ofi2___lwdiv 4382  
                         __mediumconst FC92                      __end_ofi2___lwmod 4530  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 471C  
                            ??_strncmp 000D                      __end_ofi2_initLCD 441A  
                    __end_ofi2_isdigit 46B0                             __accesstop 0080  
              __end_of__initialization 4142                  __end_of_get_RTC_final 3BF6  
                        ___rparam_used 000001                     i2___lwmod@dividend 0008  
                 __end_of_happynewyear FCBD                         __pcstackCOMRAM 0001  
                   i2___lldiv@dividend 0001                           __pidataBANK0 472E  
                         __pidataBANK1 473D                i2I2C_Master_Read@ackBit 0002  
                        __end_of_check 4220                          __end_of_array FCC0  
                        __end_of_putch 46C8                            i2printf@idx 001D  
                          i2printf@len 0023                            i2printf@val 0025  
                        _B_spacingTime 0178                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0088                            i2putch@data 0003  
                            ?i2_printf 000D                                ??_check 0003  
                              ??_putch 00CA                     i2___lldiv@quotient 0009  
                           __pbssBANK0 0080                             __pbssBANK1 0100  
                           __pbssBANK2 0200                      _S_total_dispensed 0096  
                    ?_interruptHandler 0001                     ??_interruptHandler 002B  
                        _init_position 01DB                           ?i2_lcdNibble 0001  
                              ?___wmul 00D0             i2I2C_Master_Init@clockFreq 000E  
                              ?_printf 00D6                                ?_strcat 0001  
                              ?_strcmp 0001                                ?_strcpy 0007  
                           ??i2___wmul 0005                           _gear_counter 00B4  
                           _final_time 0160                             ??i2_printf 0019  
                 lcd@LCDinterruptState 0077                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _B_array 0130                                i2_putch 46F4  
                            ?_is_valid 0001                                _N_array 0110  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3DB6  
          __size_ofi2_I2C_Master_Write 000A                                _S_array 0120  
                              __Hparam 0000                             _hr_initial 0092  
                              __Lparam 0000                                _W_array 0100  
                              ___awdiv 3DB6                                ___awmod 414C  
                              ___lldiv 3F48                        __size_of___wmul 0028  
                              ___lwdiv 42DC                                ___lwmod 44AA  
             interruptHandler@keypress 0044                                __pcinit 40D2  
                              __ramtop 1000                             _initialize 3960  
                              _lcdInst 46C8                                __ptext0 1E42  
                              __ptext1 4572                                __ptext2 2C2E  
                              __ptext3 46B0                                __ptext4 4670  
                              __ptext5 44AA                                __ptext6 42DC  
                              __ptext7 3960                                __ptext8 4382  
                              __ptext9 46C8                        __size_of_printf 0448  
                      __size_of_strcat 0042                        __size_of_strcmp 004A  
                              _readADC 4572                        __size_of_strcpy 0046  
                              _initLCD 4382                      __end_of_hexpowers FCB6  
                              _counter 006F                                _dpowers FCA4  
                              _isdigit 4670                       ___awmod@dividend 0001  
                            _LCD_RIGHT FCC1               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002A               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                          _S_spacingTime 0176  
                              _strncmp 3EC2                         __pintcode_body 0012  
                 end_of_initialization 4142                  __end_of_LCD_SIZE_HORZ FCC4  
                __end_of_LCD_SIZE_VERT FCC3           ??_generate_compartment_array 00CA  
                         _final_number 0150                                int_func 0012  
                  i2___wmul@multiplier 0001                             ??_is_valid 0007  
                       _operation_done 00B6              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 00CC  
                         _close_handle 00F0                        ___lldiv@counter 00D4  
                              printf@c 00EB                                printf@f 00D6  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                              strcmp@r 0006                              _PORTAbits 000F80  
                           _prev_state 0067                             _servo_ramp 00F1  
  __size_of_generate_compartment_array 0264                              _TRISAbits 000F92  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                    i2_I2C_Master_Init 4280                      i2_I2C_Master_Read 464C  
                    i2_I2C_Master_Wait 471C                           _happynewyear FCB6  
                    i2_I2C_Master_Stop 476C                              i2___awdiv 3FCC  
                           _white_tape 00BC                              _B_counter 00AA  
                    i2___lwdiv@divisor 0003                              i2___lldiv 4050  
                            i2___lwdiv 4330                              i2___lwmod 44EE  
                   ?i2_I2C_Master_Init 000E                      i2___lwdiv@counter 0007  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   ?i2_I2C_Master_Stop 0001                              i2_lcdInst 4708  
             __size_of_get_RTC_initial 0138                            printf@width 00E9  
                            i2_initLCD 43CE                     i2___awdiv@dividend 0001  
                  ??i2_I2C_Master_Init 0012                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4692                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                         __end_of___wmul 45FE  
                 __size_ofi2_lcdNibble 0086                            ?_initialize 0001  
                        i2lcdInst@data 0003                       i2___wmul@product 0005  
                       __end_of_printf 3076                              _N_counter 00A6  
                       __end_of_strcat 4572                         __end_of_strcmp 4464  
                         i2printf@flag 0027                         __end_of_strcpy 44AA  
            __end_ofi2_I2C_Master_Init 42DC              __end_ofi2_I2C_Master_Read 4670  
            __end_ofi2_I2C_Master_Wait 472E                           i2printf@prec 001E  
                  start_initialization 40D2              __end_ofi2_I2C_Master_Stop 4774  
                   i2___awdiv@quotient 0007                      __size_ofi2___wmul 0026  
                            i2printf@c 002A                              i2printf@f 000D  
 __end_ofi2_generate_compartment_array 36FC  __size_ofi2_generate_compartment_array 026C  
         i2_generate_compartment_array 3490                             ?i2___awdiv 0001  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00A8                      ??_I2C_Master_Init 00D9  
                    ??_I2C_Master_Read 00C9                      ??_I2C_Master_Wait 00C8  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C9  
                         _counter_step 006D                       __CFG_OSC$INTIO67 000000  
                           ?i2_initLCD 0001                             ?i2_isdigit 0001  
                            _W_counter 00A4                      interruptHandler@i 0042  
                             ??___wmul 00D4               I2C_Master_Init@clockFreq 00D5  
                          __pdataBANK0 00F0                            __pdataBANK1 01D3  
                     __CFG_LPT1OSC$OFF 000000                               ??_printf 00DA  
            __size_of_interruptHandler 0FEA                               ??_strcat 0005  
                             ??_strcmp 0005                               ??_strcpy 000B  
               __size_of_get_RTC_final 0148                            __pbssCOMRAM 0046  
                          _change_mode 00B8                          __pcstackBANK0 00C8  
                    i2___lwmod@divisor 000A                      i2___lwmod@counter 000C  
                         _isdigit$1367 00C9     __end_of_generate_compartment_array 3960  
        ?i2_generate_compartment_array 0001             _generate_compartment_array 36FC  
                             ?i2_putch 0001                      _W_total_dispensed 0094  
                  __size_of_initialize 014E                           _current_set2 0078  
                     _I2C_Master_Start 4764                       _I2C_Master_Write 4748  
                    __size_of_is_valid 0E50                              _main$1756 00EE  
                     ___lwdiv@dividend 00C8                           _initial_time 0168  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                    ??_get_RTC_initial 00D6                          __pmediumconst FC92  
                            _lcdNibble 3D2E                               ?___awdiv 00C8  
                             ?___awmod 0001                               ?___lldiv 00C8  
                             ?___lwdiv 00C8                               ?___lwmod 00CF  
                            _final_set 01A6                               ?_lcdInst 0001  
                             ?_readADC 00C8                               ?_initLCD 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Init 005C  
           __size_ofi2_I2C_Master_Read 0024             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _hexpowers FCAE  
                       __size_of_check 0064                       ___lwdiv@quotient 00CC  
                          ??i2___awdiv 0005                            ??i2___lldiv 0009  
                        _W_spacingTime 0174                          ?_I2C_sendData 0001  
                            _min_final 0164                               ?_strncmp 0007  
                          ??i2___lwdiv 0005                            ??i2___lwmod 000C  
                       __size_of_putch 0018                              _sec_final 0162  
                             _LCD_LEFT FCC0             __end_ofi2_I2C_Master_Start 477C  
           __end_ofi2_I2C_Master_Write 475C                            ??i2_lcdInst 0003  
                       ___wmul@product 00D4                               _LATDbits 000F8C  
                          ??i2_initLCD 0004                            ??i2_isdigit 0001  
                        _get_RTC_final 3AAE                          _operationTime 0071  
                             i2u401_40 4012                               i2u333_40 3EF2  
                             i2u255_45 3E7A                               i2u255_46 3E7C  
                             i2u328_40 44A0                               i2u256_45 3EBE  
                             i2u256_46 3EC0                               i2u328_47 4496  
                             i2u600_47 0EB2                               i2u601_47 0ED0  
                             i2u282_40 4082                               i2u602_47 4700  
                             i2u363_40 4186                               i2u355_40 41CC  
                             i2u259_40 4458                               i2u603_47 43D4  
                             i2u356_40 41DC                               i2u372_40 31A0  
                             i2u452_40 01FE                               i2u604_47 4408  
                             i2u372_47 3196                               i2u357_40 41EC  
                             i2u285_40 4352                               i2u445_40 00C0  
                             i2u605_47 4714                               i2u358_40 41FC  
                             i2u454_40 026E                               i2u366_45 42B4  
                             i2u606_47 3E60                               i2u359_40 420C  
                             i2u455_40 02F8                               i2u447_40 0130  
                             i2u367_45 4668                               i2u367_46 466A  
                             i2u607_47 3E6A                              _operation 0073  
                             i2u288_40 4508                               i2u376_40 3200  
                             i2u608_47 3EA4                               i2u376_47 31F6  
                             i2u393_40 338E                               i2u609_47 3EAE  
                             i2u394_40 33A2                               i2u474_40 0B5E  
                             i2u458_40 046E                               i2u570_47 047A  
                             i2u459_40 0592                               i2u571_47 0510  
                             i2u396_40 3474                               i2u476_40 0C6E  
                             i2u580_47 06E0                               i2u572_47 05B4  
                             i2u564_47 0148                               i2u581_47 06F6  
                             i2u573_47 05E4                               i2u565_47 019C  
                             i2u478_40 0CEC                               i2u590_47 0808  
                             i2u582_47 071C                               i2u574_47 0614  
                             i2u566_47 0286                               i2u591_47 0822  
                             i2u583_47 0734                               i2u575_47 0644  
                             i2u567_47 02DA                               i2u592_47 09D2  
                             i2u584_47 074A                               i2u576_47 0674  
                             i2u568_47 0412                               i2u593_47 0B32  
                             i2u585_47 0770                               i2u577_47 068C  
                             i2u569_47 0424                               i2u594_47 0C08  
                             i2u586_47 0788                               i2u578_47 06A2  
                             i2u595_47 0C48                               i2u587_47 079E  
                             i2u579_47 06C8                               i2u596_47 0CB8  
                             i2u588_47 07CE                               i2u597_47 0D06  
                             i2u589_47 07E8                               i2u598_47 0D74  
                             i2u599_47 0E48                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001          i2I2C_Master_Write@byteToWrite 0002  
                            _nuts_data 00C0                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 00D0                               i2___wmul 4626  
                        lcdNibble@data 00C9                               _B_remain 00A2  
                           printf@flag 00E8                          lcdNibble@temp 00C8  
                           printf@prec 00DF                      i2___awdiv@divisor 0003  
                    i2___awdiv@counter 0005                               i2_printf 3076  
                       ??_I2C_sendData 00CB                         _LCD_HORZ_LIMIT FCC5  
                            copy_data0 40E6                              copy_data1 4106  
                 interruptHandler@temp 0045                               _N_remain 00A0  
                     __size_ofi2_putch 0014                         ?_get_RTC_final 0001  
                             _S_remain 009E                               __Hrparam 0000  
                I2C_sendData@char_data 00CB                               __Lrparam 0000  
                             _W_remain 009C                     __CFG_BOREN$SBORDIS 000000  
                     __size_of___awdiv 0086                       __size_of___awmod 0070  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 0084  
                  _rotate_1compartment 00FD                       __size_of___lwdiv 0054  
                     __size_of___lwmod 0044                         readADC@channel 00CC  
                         ??_initialize 00C8                       _interruptHandler 0008  
                     __size_of_lcdInst 0018                        _I2C_Master_Init 4220  
                     __size_of_readADC 003A                        _I2C_Master_Read 45AC  
                     __size_of_initLCD 004C                            _current_set 00C3  
                      _I2C_Master_Wait 46E0                             strcat@from 0003  
                      _I2C_Master_Stop 475C                 __end_of_LCD_HORZ_LIMIT FCC6  
                     __size_of_isdigit 0022                        ___lwdiv@divisor 00CA  
                      ___lwdiv@counter 00CE                               __ptext10 3D2E  
                             __ptext11 3BF6                               __ptext20 4764  
                             __ptext12 3AAE                               __ptext21 46E0  
                             __ptext13 45D6                               __ptext30 43CE  
                             __ptext22 4220                               __ptext14 3DB6  
                             __ptext31 4708                               __ptext23 3F48  
                             __ptext15 45AC                               __ptext40 4280  
                             __ptext32 3E3C                               __ptext16 36FC  
                             __ptext41 4050                               __ptext33 3490  
                             __ptext25 3076                               __ptext17 45FE  
                             __ptext42 3EC2                               __ptext34 3FCC  
                             __ptext26 46F4                               __ptext18 4748  
                             __ptext43 4464                               __ptext35 4752  
                             __ptext27 4692                               __ptext19 475C  
                             __ptext44 4530                               __ptext36 476C  
                             __ptext28 44EE                               __ptext45 0FF2  
                             __ptext37 4774                               __ptext29 4330  
                             __ptext46 4626                               __ptext38 464C  
                             __ptext47 441A                               __ptext39 471C  
                             __ptext48 41BC                               __ptext49 414C  
                             _fastener 0200                         _LCD_VERT_LIMIT FCC4  
                          _min_initial 0090                       __size_of_strncmp 0086  
                             _hr_final 0166                             strcpy@from 0009  
                       i2_isdigit$1367 0002                          __size_of_main 0DEC  
                             _is_valid 0FF2                             strncmp@len 000B  
                   __end_of_initialize 3AAE                            _sec_initial 016A  
                             _temp_set 01CE                          ??i2_lcdNibble 0001  
                          ??_lcdNibble 00C8                               _prev_set 017E  
                             int$flags 007F                              printf@idx 00DE  
                            printf@len 00E4                              printf@val 00E6  
          I2C_Master_Write@byteToWrite 00C9                              putch@data 00CA  
             __end_of_I2C_Master_Start 476C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 4752                             _INTCONbits 000FF2  
                         _motorStart_0 00F9                           _motorStart_1 00F7  
                         _motorStart_2 00F5                           _motorStart_3 00F3  
               __end_of_LCD_VERT_LIMIT FCC5                      _B_total_dispensed 005D  
                             isdigit@c 00CA                      _N_total_dispensed 0098  
                             intlevel2 0000            ?_generate_compartment_array 00C8  
                      _get_RTC_initial 3BF6                        ??_get_RTC_final 00D6  
                        _LCD_SIZE_HORZ FCC3                       ___lwmod@dividend 00CF  
                        _LCD_SIZE_VERT FCC2                       ___lldiv@dividend 00C8  
                            strncmp@s1 0007                              strncmp@s2 0009  
                           _OSCCONbits 000FD3                               printf@ap 00E2  
                             printf@cp 00E0                   __end_of_I2C_sendData 4626  
              __end_of_I2C_Master_Init 4280                __end_of_I2C_Master_Read 45D6  
              __end_of_I2C_Master_Wait 46F4                __end_of_I2C_Master_Stop 4764  
                          lcdInst@data 00CA                            _motorStop_0 00F8  
                          _motorStop_1 00F6                            _motorStop_2 00F4  
                          _motorStop_3 00F2                    __end_ofi2_lcdNibble 3EC2  
                             strcat@cp 0005                               strcat@to 0001  
                             strcmp@s1 0001                               strcmp@s2 0003  
                     ___lldiv@quotient 00D0                        ___lwmod@divisor 00D1  
                             strcpy@cp 000B                               strcpy@to 0007  
                      ___lwmod@counter 00D3                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                            _prev_number 0140  
        i2I2C_Master_Read@receivedByte 0003  
