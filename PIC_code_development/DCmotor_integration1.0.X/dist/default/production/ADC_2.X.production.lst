

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 16:21:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  0017FE                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _B_array
    69  0017FE  0000               	dw	0
    70  001800  0003               	dw	3
    71  001802  0000               	dw	0
    72  001804  0002               	dw	2
    73  001806  0000               	dw	0
    74  001808  0001               	dw	1
    75  00180A  0000               	dw	0
    76  00180C  0004               	dw	4
    77                           
    78                           ;initializer for _compartment_array
    79  00180E  0000               	dw	0
    80  001810  0001               	dw	1
    81  001812  0000               	dw	0
    82  001814  0001               	dw	1
    83  001816  0000               	dw	0
    84  001818  0001               	dw	1
    85  00181A  0000               	dw	0
    86  00181C  0001               	dw	1
    87                           
    88                           ;initializer for _max
    89  00181E  0007               	dw	7
    90                           
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _dpowers:
    96                           	opt stack 0
    97  001001  0001               	dw	1
    98  001003  000A               	dw	10
    99  001005  0064               	dw	100
   100  001007  03E8               	dw	1000
   101  001009  2710               	dw	10000
   102  00100B                     __end_of_dpowers:
   103                           	opt stack 0
   104  00100B                     _array:
   105                           	opt stack 0
   106  00100B  31                 	db	49
   107  00100C  30                 	db	48
   108  00100D  00                 	db	0
   109  00100E                     __end_of_array:
   110                           	opt stack 0
   111  00100E                     _LCD_LEFT:
   112                           	opt stack 0
   113  00100E  00                 	db	0
   114  00100F                     __end_of_LCD_LEFT:
   115                           	opt stack 0
   116  00100F                     _LCD_RIGHT:
   117                           	opt stack 0
   118  00100F  01                 	db	1
   119  001010                     __end_of_LCD_RIGHT:
   120                           	opt stack 0
   121  001010                     _LCD_SIZE_VERT:
   122                           	opt stack 0
   123  001010  02                 	db	2
   124  001011                     __end_of_LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001011                     _LCD_SIZE_HORZ:
   127                           	opt stack 0
   128  001011  10                 	db	16
   129  001012                     __end_of_LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001012                     _LCD_VERT_LIMIT:
   132                           	opt stack 0
   133  001012  02                 	db	2
   134  001013                     __end_of_LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001013                     _LCD_HORZ_LIMIT:
   137                           	opt stack 0
   138  001013  28                 	db	40
   139  001014                     __end_of_LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  0000                     _TRISCbits	set	3988
   142  0000                     _LATCbits	set	3979
   143  0000                     _TRISDbits	set	3989
   144  0000                     _LATDbits	set	3980
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADCON0bits	set	4034
   148  0000                     _PORTAbits	set	3968
   149  0000                     _TRISAbits	set	3986
   150  0000                     _INTCONbits	set	4082
   151  0000                     _ADCON2bits	set	4032
   152  0000                     _ADCON1	set	4033
   153  0000                     _ADCON0	set	4034
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISA	set	3986
   159  0000                     _LATE	set	3981
   160  0000                     _LATD	set	3980
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  0000                     _OSCCON	set	4051
   165  0000                     _ADON	set	32272
   166  0000                     _INT1IE	set	32643
   167  001014                     STR_2:
   168  001014  49                 	db	73	;'I'
   169  001015  52                 	db	82	;'R'
   170  001016  20                 	db	32
   171  001017  72                 	db	114	;'r'
   172  001018  65                 	db	101	;'e'
   173  001019  61                 	db	97	;'a'
   174  00101A  64                 	db	100	;'d'
   175  00101B  69                 	db	105	;'i'
   176  00101C  6E                 	db	110	;'n'
   177  00101D  67                 	db	103	;'g'
   178  00101E  3A                 	db	58	;':'
   179  00101F  25                 	db	37
   180  001020  64                 	db	100	;'d'
   181  001021  00                 	db	0
   182  001022                     STR_1:
   183  001022  49                 	db	73	;'I'
   184  001023  52                 	db	82	;'R'
   185  001024  20                 	db	32
   186  001025  72                 	db	114	;'r'
   187  001026  65                 	db	101	;'e'
   188  001027  61                 	db	97	;'a'
   189  001028  64                 	db	100	;'d'
   190  001029  69                 	db	105	;'i'
   191  00102A  6E                 	db	110	;'n'
   192  00102B  67                 	db	103	;'g'
   193  00102C  3A                 	db	58	;':'
   194  00102D  00                 	db	0
   195  00102E                     STR_10:
   196  00102E  72                 	db	114	;'r'
   197  00102F  65                 	db	101	;'e'
   198  001030  6D                 	db	109	;'m'
   199  001031  61                 	db	97	;'a'
   200  001032  69                 	db	105	;'i'
   201  001033  6E                 	db	110	;'n'
   202  001034  3A                 	db	58	;':'
   203  001035  25                 	db	37
   204  001036  64                 	db	100	;'d'
   205  001037  00                 	db	0
   206  001038                     STR_9:
   207  001038  61                 	db	97	;'a'
   208  001039  6C                 	db	108	;'l'
   209  00103A  6C                 	db	108	;'l'
   210  00103B  20                 	db	32
   211  00103C  64                 	db	100	;'d'
   212  00103D  6F                 	db	111	;'o'
   213  00103E  6E                 	db	110	;'n'
   214  00103F  65                 	db	101	;'e'
   215  001040  00                 	db	0
   216  001041                     STR_3:
   217  001041  43                 	db	67	;'C'
   218  001042  25                 	db	37
   219  001043  64                 	db	100	;'d'
   220  001044  3A                 	db	58	;':'
   221  001045  00                 	db	0
   222  001046                     STR_4:
   223  001046  42                 	db	66	;'B'
   224  001047  3A                 	db	58	;':'
   225  001048  25                 	db	37
   226  001049  64                 	db	100	;'d'
   227  00104A  00                 	db	0
   228  0000                     
   229                           ; #config settings
   230  00104B  00                 	db	0	; dummy byte at the end
   231  0000                     
   232                           	psect	cinit
   233  001794                     __pcinit:
   234                           	opt stack 0
   235  001794                     start_initialization:
   236                           	opt stack 0
   237  001794                     __initialization:
   238                           	opt stack 0
   239                           
   240                           ; Initialize objects allocated to COMRAM (34 bytes)
   241                           ; load TBLPTR registers with __pidataCOMRAM
   242  001794  0EFE               	movlw	low __pidataCOMRAM
   243  001796  6EF6               	movwf	tblptrl,c
   244  001798  0E17               	movlw	high __pidataCOMRAM
   245  00179A  6EF7               	movwf	tblptrh,c
   246  00179C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   247  00179E  6EF8               	movwf	tblptru,c
   248  0017A0  EE00  F001         	lfsr	0,__pdataCOMRAM
   249  0017A4  EE10 F022          	lfsr	1,34
   250  0017A8                     copy_data0:
   251  0017A8  0009               	tblrd		*+
   252  0017AA  CFF5 FFEE          	movff	tablat,postinc0
   253  0017AE  50E5               	movf	postdec1,w,c
   254  0017B0  50E1               	movf	fsr1l,w,c
   255  0017B2  E1FA               	bnz	copy_data0
   256                           
   257                           ; Clear objects allocated to COMRAM (12 bytes)
   258  0017B4  EE00  F03F         	lfsr	0,__pbssCOMRAM
   259  0017B8  0E0C               	movlw	12
   260  0017BA                     clear_0:
   261  0017BA  6AEE               	clrf	postinc0,c
   262  0017BC  06E8               	decf	wreg,f,c
   263  0017BE  E1FD               	bnz	clear_0
   264  0017C0                     end_of_initialization:
   265                           	opt stack 0
   266  0017C0                     __end_of__initialization:
   267                           	opt stack 0
   268  0017C0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  0017C2  6EF8               	movwf	tblptru,c
   270  0017C4  0100               	movlb	0
   271  0017C6  EF26  F008         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           postdec1	equ	0xFE5
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	bssCOMRAM
   282  00003F                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00003F                     _white_tape:
   285                           	opt stack 0
   286  00003F                     	ds	2
   287  000041                     _mode:
   288                           	opt stack 0
   289  000041                     	ds	2
   290  000043                     _counter_2:
   291                           	opt stack 0
   292  000043                     	ds	2
   293  000045                     _counter:
   294                           	opt stack 0
   295  000045                     	ds	2
   296  000047                     _i:
   297                           	opt stack 0
   298  000047                     	ds	2
   299  000049                     lcd@LCDinterruptState:
   300                           	opt stack 0
   301  000049                     	ds	1
   302  00004A                     	ds	1
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           postdec1	equ	0xFE5
   310                           fsr1l	equ	0xFE1
   311                           
   312                           	psect	dataCOMRAM
   313  000001                     __pdataCOMRAM:
   314                           	opt stack 0
   315  000001                     _B_array:
   316                           	opt stack 0
   317  000001                     	ds	16
   318  000011                     _compartment_array:
   319                           	opt stack 0
   320  000011                     	ds	16
   321  000021                     _max:
   322                           	opt stack 0
   323  000021                     	ds	2
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           postdec1	equ	0xFE5
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	cstackCOMRAM
   334  000023                     __pcstackCOMRAM:
   335                           	opt stack 0
   336  000023                     ??_motorStart_0:
   337  000023                     ??_motorStop_0:
   338  000023                     ??_motorStop_1:
   339  000023                     ??_motorStart_1:
   340  000023                     ??_servoRotate0:
   341  000023                     ??_servoRotate180:
   342  000023                     ?_readADC:
   343                           	opt stack 0
   344  000023                     ?___lwdiv:
   345                           	opt stack 0
   346  000023                     lcdNibble@temp:
   347                           	opt stack 0
   348  000023                     ___lwdiv@dividend:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x0
   352  000023                     	ds	1
   353  000024                     lcdNibble@data:
   354                           	opt stack 0
   355  000024                     servoRotate180@i:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x1
   359  000024                     	ds	1
   360  000025                     ??_readADC:
   361  000025                     lcdInst@data:
   362                           	opt stack 0
   363  000025                     putch@data:
   364                           	opt stack 0
   365  000025                     ___lwdiv@divisor:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000025                     	ds	1
   370  000026                     ??_initLCD:
   371                           
   372                           ; 1 bytes @ 0x3
   373  000026                     	ds	1
   374  000027                     readADC@channel:
   375                           	opt stack 0
   376  000027                     ___lwdiv@quotient:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x4
   380  000027                     	ds	2
   381  000029                     ___lwdiv@counter:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000029                     	ds	1
   386  00002A                     ?___lwmod:
   387                           	opt stack 0
   388  00002A                     ___lwmod@dividend:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x7
   392  00002A                     	ds	2
   393  00002C                     ___lwmod@divisor:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x9
   397  00002C                     	ds	2
   398  00002E                     ___lwmod@counter:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0xB
   402  00002E                     	ds	1
   403  00002F                     ?_printf:
   404                           	opt stack 0
   405  00002F                     printf@f:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0xC
   409  00002F                     	ds	4
   410  000033                     ??_printf:
   411                           
   412                           ; 1 bytes @ 0x10
   413  000033                     	ds	1
   414  000034                     printf@ap:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x11
   418  000034                     	ds	2
   419  000036                     printf@flag:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x13
   423  000036                     	ds	1
   424  000037                     printf@prec:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x14
   428  000037                     	ds	1
   429  000038                     printf@val:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x15
   433  000038                     	ds	2
   434  00003A                     printf@c:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x17
   438  00003A                     	ds	1
   439  00003B                     ??_main:
   440                           
   441                           ; 1 bytes @ 0x18
   442  00003B                     	ds	3
   443  00003E                     main@input:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x1B
   447  00003E                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457 ;;
   458 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   459 ;;
   460 ;; *************** function _main *****************
   461 ;; Defined at:
   462 ;;		line 51 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  input           1   27[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;Total ram usage:        4 bytes
   481 ;; Hardware stack levels required when called:    3
   482 ;; This function calls:
   483 ;;		_initLCD
   484 ;;		_lcdInst
   485 ;;		_motorStart_0
   486 ;;		_motorStart_1
   487 ;;		_motorStop_0
   488 ;;		_motorStop_1
   489 ;;		_printf
   490 ;;		_putch
   491 ;;		_readADC
   492 ;;		_servoRotate0
   493 ;;		_servoRotate180
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  00104C                     __ptext0:
   501                           	opt stack 0
   502  00104C                     _main:
   503                           	opt stack 28
   504                           
   505                           ;main.c: 55: OSCCON = 0xF2;
   506                           
   507                           ;incstack = 0
   508  00104C  0EF2               	movlw	242
   509  00104E  6ED3               	movwf	4051,c	;volatile
   510                           
   511                           ;main.c: 60: LATA = 0x00;
   512  001050  0E00               	movlw	0
   513  001052  6E89               	movwf	3977,c	;volatile
   514                           
   515                           ;main.c: 61: LATB = 0x00;
   516  001054  0E00               	movlw	0
   517  001056  6E8A               	movwf	3978,c	;volatile
   518                           
   519                           ;main.c: 62: LATC = 0x00;
   520  001058  0E00               	movlw	0
   521  00105A  6E8B               	movwf	3979,c	;volatile
   522                           
   523                           ;main.c: 63: LATD = 0x00;
   524  00105C  0E00               	movlw	0
   525  00105E  6E8C               	movwf	3980,c	;volatile
   526                           
   527                           ;main.c: 64: LATE = 0x00;
   528  001060  0E00               	movlw	0
   529  001062  6E8D               	movwf	3981,c	;volatile
   530                           
   531                           ;main.c: 68: TRISA = 0xFF;
   532  001064  6892               	setf	3986,c	;volatile
   533                           
   534                           ;main.c: 69: TRISB = 0xFF;
   535  001066  6893               	setf	3987,c	;volatile
   536                           
   537                           ;main.c: 70: TRISC = 0x00;
   538  001068  0E00               	movlw	0
   539  00106A  6E94               	movwf	3988,c	;volatile
   540                           
   541                           ;main.c: 71: TRISD = 0x00;
   542  00106C  0E00               	movlw	0
   543  00106E  6E95               	movwf	3989,c	;volatile
   544                           
   545                           ;main.c: 72: TRISE = 0x00;
   546  001070  0E00               	movlw	0
   547  001072  6E96               	movwf	3990,c	;volatile
   548                           
   549                           ;main.c: 75: ADCON0 = 0x00;
   550  001074  0E00               	movlw	0
   551  001076  6EC2               	movwf	4034,c	;volatile
   552                           
   553                           ;main.c: 76: ADCON1 = 0x0B;
   554  001078  0E0B               	movlw	11
   555  00107A  6EC1               	movwf	4033,c	;volatile
   556                           
   557                           ;main.c: 77: ADCON2bits.ADFM = 1;
   558  00107C  8EC0               	bsf	4032,7,c	;volatile
   559                           
   560                           ;main.c: 81: initLCD();
   561  00107E  EC40  F00B         	call	_initLCD	;wreg free
   562                           
   563                           ;main.c: 84: motorStart_0();
   564  001082  EC3D  F00C         	call	_motorStart_0	;wreg free
   565                           
   566                           ;main.c: 85: _delay((unsigned long)((2000)*(8000000/4000.0)));
   567  001086  0E15               	movlw	21
   568  001088  6E3C               	movwf	(??_main+1)& (0+255),c
   569  00108A  0E4B               	movlw	75
   570  00108C  6E3B               	movwf	??_main& (0+255),c
   571  00108E  0EBE               	movlw	190
   572  001090                     u717:
   573  001090  2EE8               	decfsz	wreg,f,c
   574  001092  D7FE               	bra	u717
   575  001094  2E3B               	decfsz	??_main& (0+255),f,c
   576  001096  D7FC               	bra	u717
   577  001098  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   578  00109A  D7FA               	bra	u717
   579  00109C  D000               	nop2	
   580                           
   581                           ;main.c: 89: if (white_tape == 0){
   582  00109E  503F               	movf	_white_tape,w,c
   583  0010A0  1040               	iorwf	_white_tape+1,w,c
   584  0010A2  A4D8               	btfss	status,2,c
   585  0010A4  D052               	goto	l117
   586                           
   587                           ;main.c: 90: INT1IE = 1;
   588  0010A6  86F0               	bsf	intcon3,3,c	;volatile
   589                           
   590                           ;main.c: 91: (INTCONbits.GIE = 1);
   591  0010A8  8EF2               	bsf	intcon,7,c	;volatile
   592                           
   593                           ;main.c: 94: initLCD();
   594  0010AA  EC40  F00B         	call	_initLCD	;wreg free
   595  0010AE                     
   596                           ;main.c: 96: TRISAbits.RA4 = 1;
   597  0010AE  8892               	bsf	3986,4,c	;volatile
   598                           
   599                           ;main.c: 97: unsigned char input = PORTAbits.RA4;
   600  0010B0  0E00               	movlw	0
   601  0010B2  B880               	btfsc	3968,4,c	;volatile
   602  0010B4  0E01               	movlw	1
   603  0010B6  6E3E               	movwf	main@input,c
   604                           
   605                           ;main.c: 98: printf("IR reading:");
   606  0010B8  0E22               	movlw	low STR_1
   607  0010BA  6E2F               	movwf	printf@f,c
   608  0010BC  0E10               	movlw	high STR_1
   609  0010BE  6E30               	movwf	printf@f+1,c
   610  0010C0  EC49  F00A         	call	_printf	;wreg free
   611                           
   612                           ;main.c: 99: putch(array[input]);
   613  0010C4  503E               	movf	main@input,w,c
   614  0010C6  0D01               	mullw	1
   615  0010C8  0E0B               	movlw	low _array
   616  0010CA  24F3               	addwf	prodl,w,c
   617  0010CC  6EF6               	movwf	tblptrl,c
   618  0010CE  0E10               	movlw	high _array
   619  0010D0  20F4               	addwfc	prodh,w,c
   620  0010D2  6EF7               	movwf	tblptrh,c
   621  0010D4                     	if	0	;There are less than 3 active tblptr bytes
   622  0010D4                     	endif
   623  0010D4  0008               	tblrd		*
   624  0010D6  50F5               	movf	tablat,w,c
   625  0010D8  EC4C  F00C         	call	_putch
   626                           
   627                           ;main.c: 100: _delay((unsigned long)((100)*(8000000/4000.0)));
   628  0010DC  0E02               	movlw	2
   629  0010DE  6E3C               	movwf	(??_main+1)& (0+255),c
   630  0010E0  0E04               	movlw	4
   631  0010E2  6E3B               	movwf	??_main& (0+255),c
   632  0010E4  0EBA               	movlw	186
   633  0010E6                     u727:
   634  0010E6  2EE8               	decfsz	wreg,f,c
   635  0010E8  D7FE               	bra	u727
   636  0010EA  2E3B               	decfsz	??_main& (0+255),f,c
   637  0010EC  D7FC               	bra	u727
   638  0010EE  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   639  0010F0  D7FA               	bra	u727
   640  0010F2  D000               	nop2	
   641                           
   642                           ;main.c: 101: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   643  0010F4  0E80               	movlw	128
   644  0010F6  EC56  F00C         	call	_lcdInst
   645  0010FA  0E0D               	movlw	13
   646  0010FC  6E3B               	movwf	??_main& (0+255),c
   647  0010FE  0EFC               	movlw	252
   648  001100                     u737:
   649  001100  2EE8               	decfsz	wreg,f,c
   650  001102  D7FE               	bra	u737
   651  001104  2E3B               	decfsz	??_main& (0+255),f,c
   652  001106  D7FC               	bra	u737
   653                           
   654                           ;main.c: 103: if (white_tape == 0){
   655  001108  503F               	movf	_white_tape,w,c
   656  00110A  1040               	iorwf	_white_tape+1,w,c
   657  00110C  A4D8               	btfss	status,2,c
   658  00110E  D7CF               	goto	l114
   659                           
   660                           ;main.c: 104: if (array[input]=='1'){
   661  001110  503E               	movf	main@input,w,c
   662  001112  0D01               	mullw	1
   663  001114  0E0B               	movlw	low _array
   664  001116  24F3               	addwf	prodl,w,c
   665  001118  6EF6               	movwf	tblptrl,c
   666  00111A  0E10               	movlw	high _array
   667  00111C  20F4               	addwfc	prodh,w,c
   668  00111E  6EF7               	movwf	tblptrh,c
   669  001120                     	if	0	;There are less than 3 active tblptr bytes
   670  001120                     	endif
   671  001120  0008               	tblrd		*
   672  001122  50F5               	movf	tablat,w,c
   673  001124  0A31               	xorlw	49
   674  001126  A4D8               	btfss	status,2,c
   675  001128  D7C2               	goto	l114
   676                           
   677                           ;main.c: 105: white_tape = 1;
   678  00112A  0E00               	movlw	0
   679  00112C  6E40               	movwf	_white_tape+1,c
   680  00112E  0E01               	movlw	1
   681  001130  6E3F               	movwf	_white_tape,c
   682                           
   683                           ;main.c: 107: _delay((unsigned long)((200)*(8000000/4000.0)));
   684  001132  0E03               	movlw	3
   685  001134  6E3C               	movwf	(??_main+1)& (0+255),c
   686  001136  0E08               	movlw	8
   687  001138  6E3B               	movwf	??_main& (0+255),c
   688  00113A  0E77               	movlw	119
   689  00113C                     u747:
   690  00113C  2EE8               	decfsz	wreg,f,c
   691  00113E  D7FE               	bra	u747
   692  001140  2E3B               	decfsz	??_main& (0+255),f,c
   693  001142  D7FC               	bra	u747
   694  001144  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   695  001146  D7FA               	bra	u747
   696  001148  F000               	nop	
   697  00114A                     l117:
   698                           
   699                           ;main.c: 111: }
   700                           ;main.c: 112: }
   701                           ;main.c: 114: }
   702                           ;main.c: 115: }
   703                           ;main.c: 118: if (white_tape == 1){
   704  00114A  043F               	decf	_white_tape,w,c
   705  00114C  1040               	iorwf	_white_tape+1,w,c
   706  00114E  A4D8               	btfss	status,2,c
   707  001150  D18A               	goto	l132
   708                           
   709                           ;main.c: 119: motorStop_0();
   710  001152  EC1F  F00C         	call	_motorStop_0	;wreg free
   711                           
   712                           ;main.c: 120: printf("IR reading:%d",1);
   713  001156  0E14               	movlw	low STR_2
   714  001158  6E2F               	movwf	printf@f,c
   715  00115A  0E10               	movlw	high STR_2
   716  00115C  6E30               	movwf	printf@f+1,c
   717  00115E  0E00               	movlw	0
   718  001160  6E32               	movwf	?_printf+3,c
   719  001162  0E01               	movlw	1
   720  001164  6E31               	movwf	?_printf+2,c
   721  001166  EC49  F00A         	call	_printf	;wreg free
   722                           
   723                           ;main.c: 121: _delay((unsigned long)((600)*(8000000/4000.0)));
   724  00116A  0E07               	movlw	7
   725  00116C  6E3C               	movwf	(??_main+1)& (0+255),c
   726  00116E  0E17               	movlw	23
   727  001170  6E3B               	movwf	??_main& (0+255),c
   728  001172  0E6A               	movlw	106
   729  001174                     u757:
   730  001174  2EE8               	decfsz	wreg,f,c
   731  001176  D7FE               	bra	u757
   732  001178  2E3B               	decfsz	??_main& (0+255),f,c
   733  00117A  D7FC               	bra	u757
   734  00117C  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   735  00117E  D7FA               	bra	u757
   736  001180  D000               	nop2	
   737                           
   738                           ;main.c: 122: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   739  001182  0E80               	movlw	128
   740  001184  EC56  F00C         	call	_lcdInst
   741  001188  0E0D               	movlw	13
   742  00118A  6E3B               	movwf	??_main& (0+255),c
   743  00118C  0EFC               	movlw	252
   744  00118E                     u767:
   745  00118E  2EE8               	decfsz	wreg,f,c
   746  001190  D7FE               	bra	u767
   747  001192  2E3B               	decfsz	??_main& (0+255),f,c
   748  001194  D7FC               	bra	u767
   749                           
   750                           ;main.c: 123: for (i = 0; i<8; i++) {
   751  001196  0E00               	movlw	0
   752  001198  6E48               	movwf	_i+1,c
   753  00119A  0E00               	movlw	0
   754  00119C  6E47               	movwf	_i,c
   755  00119E  BE48               	btfsc	_i+1,7,c
   756  0011A0  D008               	goto	l120
   757  0011A2  5048               	movf	_i+1,w,c
   758  0011A4  E105               	bnz	u630
   759  0011A6  0E08               	movlw	8
   760  0011A8  5C47               	subwf	_i,w,c
   761  0011AA  B0D8               	btfsc	status,0,c
   762  0011AC  D0D3               	goto	u670
   763  0011AE  D001               	goto	l120
   764  0011B0                     u630:
   765  0011B0  D0D1               	goto	u670
   766  0011B2                     l120:
   767                           
   768                           ;main.c: 124: motorStart_0();
   769  0011B2  EC3D  F00C         	call	_motorStart_0	;wreg free
   770                           
   771                           ;main.c: 127: if (compartment_array[i] == 1){
   772  0011B6  90D8               	bcf	status,0,c
   773  0011B8  3447               	rlcf	_i,w,c
   774  0011BA  6ED9               	movwf	fsr2l,c
   775  0011BC  3448               	rlcf	_i+1,w,c
   776  0011BE  6EDA               	movwf	fsr2h,c
   777  0011C0  0E11               	movlw	low _compartment_array
   778  0011C2  26D9               	addwf	fsr2l,f,c
   779  0011C4  0E00               	movlw	high _compartment_array
   780  0011C6  22DA               	addwfc	fsr2h,f,c
   781  0011C8  04DE               	decf	postinc2,w,c
   782  0011CA  10DE               	iorwf	postinc2,w,c
   783  0011CC  A4D8               	btfss	status,2,c
   784  0011CE  D08F               	goto	l122
   785                           
   786                           ;main.c: 128: motorStop_1();
   787  0011D0  EC10  F00C         	call	_motorStop_1	;wreg free
   788                           
   789                           ;main.c: 129: initLCD();
   790  0011D4  EC40  F00B         	call	_initLCD	;wreg free
   791                           
   792                           ;main.c: 130: printf("C%d:",i);
   793  0011D8  0E41               	movlw	low STR_3
   794  0011DA  6E2F               	movwf	printf@f,c
   795  0011DC  0E10               	movlw	high STR_3
   796  0011DE  6E30               	movwf	printf@f+1,c
   797  0011E0  C047  F031         	movff	_i,?_printf+2
   798  0011E4  C048  F032         	movff	_i+1,?_printf+3
   799  0011E8  EC49  F00A         	call	_printf	;wreg free
   800                           
   801                           ;main.c: 131: _delay((unsigned long)((700)*(8000000/4000.0)));
   802  0011EC  0E08               	movlw	8
   803  0011EE  6E3C               	movwf	(??_main+1)& (0+255),c
   804  0011F0  0E1B               	movlw	27
   805  0011F2  6E3B               	movwf	??_main& (0+255),c
   806  0011F4  0E27               	movlw	39
   807  0011F6                     u777:
   808  0011F6  2EE8               	decfsz	wreg,f,c
   809  0011F8  D7FE               	bra	u777
   810  0011FA  2E3B               	decfsz	??_main& (0+255),f,c
   811  0011FC  D7FC               	bra	u777
   812  0011FE  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   813  001200  D7FA               	bra	u777
   814  001202  F000               	nop	
   815                           
   816                           ;main.c: 133: while (counter <= B_array[i]){
   817  001204  D030               	goto	l125
   818  001206                     
   819                           ;main.c: 134: motorStop_0();
   820  001206  EC1F  F00C         	call	_motorStop_0	;wreg free
   821                           
   822                           ;main.c: 135: motorStart_1();
   823  00120A  EC2E  F00C         	call	_motorStart_1	;wreg free
   824                           
   825                           ;main.c: 137: if (readADC(2)<250){
   826  00120E  0E02               	movlw	2
   827  001210  ECE5  F00B         	call	_readADC
   828  001214  5024               	movf	?_readADC+1,w,c
   829  001216  E127               	bnz	l1519
   830  001218  0EFA               	movlw	250
   831  00121A  5C23               	subwf	?_readADC,w,c
   832  00121C  B0D8               	btfsc	status,0,c
   833  00121E  D023               	goto	l125
   834                           
   835                           ;main.c: 139: initLCD();
   836  001220  EC40  F00B         	call	_initLCD	;wreg free
   837                           
   838                           ;main.c: 140: counter++;
   839  001224  4A45               	infsnz	_counter,f,c
   840  001226  2A46               	incf	_counter+1,f,c
   841                           
   842                           ;main.c: 142: printf("B:%d",counter);
   843  001228  0E46               	movlw	low STR_4
   844  00122A  6E2F               	movwf	printf@f,c
   845  00122C  0E10               	movlw	high STR_4
   846  00122E  6E30               	movwf	printf@f+1,c
   847  001230  C045  F031         	movff	_counter,?_printf+2
   848  001234  C046  F032         	movff	_counter+1,?_printf+3
   849  001238  EC49  F00A         	call	_printf	;wreg free
   850                           
   851                           ;main.c: 143: _delay((unsigned long)((300)*(8000000/4000.0)));
   852  00123C  0E04               	movlw	4
   853  00123E  6E3C               	movwf	(??_main+1)& (0+255),c
   854  001240  0E0C               	movlw	12
   855  001242  6E3B               	movwf	??_main& (0+255),c
   856  001244  0E34               	movlw	52
   857  001246                     u787:
   858  001246  2EE8               	decfsz	wreg,f,c
   859  001248  D7FE               	bra	u787
   860  00124A  2E3B               	decfsz	??_main& (0+255),f,c
   861  00124C  D7FC               	bra	u787
   862  00124E  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   863  001250  D7FA               	bra	u787
   864                           
   865                           ;main.c: 144: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   866  001252  0E80               	movlw	128
   867  001254  EC56  F00C         	call	_lcdInst
   868  001258  0E0D               	movlw	13
   869  00125A  6E3B               	movwf	??_main& (0+255),c
   870  00125C  0EFC               	movlw	252
   871  00125E                     u797:
   872  00125E  2EE8               	decfsz	wreg,f,c
   873  001260  D7FE               	bra	u797
   874  001262  2E3B               	decfsz	??_main& (0+255),f,c
   875  001264  D7FC               	bra	u797
   876  001266                     l125:
   877  001266                     l1519:
   878  001266  90D8               	bcf	status,0,c
   879  001268  3447               	rlcf	_i,w,c
   880  00126A  6ED9               	movwf	fsr2l,c
   881  00126C  3448               	rlcf	_i+1,w,c
   882  00126E  6EDA               	movwf	fsr2h,c
   883  001270  0E01               	movlw	low _B_array
   884  001272  26D9               	addwf	fsr2l,f,c
   885  001274  0E00               	movlw	high _B_array
   886  001276  22DA               	addwfc	fsr2h,f,c
   887  001278  5045               	movf	_counter,w,c
   888  00127A  5CDE               	subwf	postinc2,w,c
   889  00127C  50DE               	movf	postinc2,w,c
   890  00127E  0A80               	xorlw	128
   891  001280  6E3D               	movwf	(??_main+2)& (0+255),c
   892  001282  5046               	movf	_counter+1,w,c
   893  001284  0A80               	xorlw	128
   894  001286  583D               	subwfb	(??_main+2)& (0+255),w,c
   895  001288  B0D8               	btfsc	status,0,c
   896  00128A  D7BD               	goto	l124
   897                           
   898                           ;main.c: 146: }
   899                           ;main.c: 147: }
   900                           ;main.c: 149: motorStop_1();
   901  00128C  EC10  F00C         	call	_motorStop_1	;wreg free
   902                           
   903                           ;main.c: 151: initLCD();
   904  001290  EC40  F00B         	call	_initLCD	;wreg free
   905                           
   906                           ;main.c: 152: printf("done");
   907  001294  0E3C               	movlw	low (STR_9+4)
   908  001296  6E2F               	movwf	printf@f,c
   909  001298  0E10               	movlw	high (STR_9+4)
   910  00129A  6E30               	movwf	printf@f+1,c
   911  00129C  EC49  F00A         	call	_printf	;wreg free
   912                           
   913                           ;main.c: 153: lcdInst(0xC0);;
   914  0012A0  0EC0               	movlw	192
   915  0012A2  EC56  F00C         	call	_lcdInst
   916                           
   917                           ;main.c: 154: printf("B:%d",counter);
   918  0012A6  0E46               	movlw	low STR_4
   919  0012A8  6E2F               	movwf	printf@f,c
   920  0012AA  0E10               	movlw	high STR_4
   921  0012AC  6E30               	movwf	printf@f+1,c
   922  0012AE  C045  F031         	movff	_counter,?_printf+2
   923  0012B2  C046  F032         	movff	_counter+1,?_printf+3
   924  0012B6  EC49  F00A         	call	_printf	;wreg free
   925                           
   926                           ;main.c: 156: _delay((unsigned long)((300)*(8000000/4000.0)));
   927  0012BA  0E04               	movlw	4
   928  0012BC  6E3C               	movwf	(??_main+1)& (0+255),c
   929  0012BE  0E0C               	movlw	12
   930  0012C0  6E3B               	movwf	??_main& (0+255),c
   931  0012C2  0E34               	movlw	52
   932  0012C4                     u807:
   933  0012C4  2EE8               	decfsz	wreg,f,c
   934  0012C6  D7FE               	bra	u807
   935  0012C8  2E3B               	decfsz	??_main& (0+255),f,c
   936  0012CA  D7FC               	bra	u807
   937  0012CC  2E3C               	decfsz	(??_main+1)& (0+255),f,c
   938  0012CE  D7FA               	bra	u807
   939                           
   940                           ;main.c: 157: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   941  0012D0  0E80               	movlw	128
   942  0012D2  EC56  F00C         	call	_lcdInst
   943  0012D6  0E0D               	movlw	13
   944  0012D8  6E3B               	movwf	??_main& (0+255),c
   945  0012DA  0EFC               	movlw	252
   946  0012DC                     u817:
   947  0012DC  2EE8               	decfsz	wreg,f,c
   948  0012DE  D7FE               	bra	u817
   949  0012E0  2E3B               	decfsz	??_main& (0+255),f,c
   950  0012E2  D7FC               	bra	u817
   951                           
   952                           ;main.c: 158: counter = 0;
   953  0012E4  0E00               	movlw	0
   954  0012E6  6E46               	movwf	_counter+1,c
   955  0012E8  0E00               	movlw	0
   956  0012EA  6E45               	movwf	_counter,c
   957                           
   958                           ;main.c: 160: }
   959  0012EC  D02C               	goto	l127
   960  0012EE                     l122:
   961                           
   962                           ;main.c: 162: else{
   963                           ;main.c: 164: motorStart_0();
   964  0012EE  EC3D  F00C         	call	_motorStart_0	;wreg free
   965                           
   966                           ;main.c: 165: motorStop_1();
   967  0012F2  EC10  F00C         	call	_motorStop_1	;wreg free
   968                           
   969                           ;main.c: 166: initLCD();
   970  0012F6  EC40  F00B         	call	_initLCD	;wreg free
   971                           
   972                           ;main.c: 167: printf("C%d:",i);
   973  0012FA  0E41               	movlw	low STR_3
   974  0012FC  6E2F               	movwf	printf@f,c
   975  0012FE  0E10               	movlw	high STR_3
   976  001300  6E30               	movwf	printf@f+1,c
   977  001302  C047  F031         	movff	_i,?_printf+2
   978  001306  C048  F032         	movff	_i+1,?_printf+3
   979  00130A  EC49  F00A         	call	_printf	;wreg free
   980                           
   981                           ;main.c: 169: printf("done");
   982  00130E  0E3C               	movlw	low (STR_9+4)
   983  001310  6E2F               	movwf	printf@f,c
   984  001312  0E10               	movlw	high (STR_9+4)
   985  001314  6E30               	movwf	printf@f+1,c
   986  001316  EC49  F00A         	call	_printf	;wreg free
   987                           
   988                           ;main.c: 170: _delay((unsigned long)((2000)*(8000000/4000.0)));
   989  00131A  0E15               	movlw	21
   990  00131C  6E3C               	movwf	(??_main+1)& (0+255),c
   991  00131E  0E4B               	movlw	75
   992  001320  6E3B               	movwf	??_main& (0+255),c
   993  001322  0EBE               	movlw	190
   994  001324                     u827:
   995  001324  2EE8               	decfsz	wreg,f,c
   996  001326  D7FE               	bra	u827
   997  001328  2E3B               	decfsz	??_main& (0+255),f,c
   998  00132A  D7FC               	bra	u827
   999  00132C  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1000  00132E  D7FA               	bra	u827
  1001  001330  D000               	nop2	
  1002                           
  1003                           ;main.c: 171: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
  1004  001332  0E80               	movlw	128
  1005  001334  EC56  F00C         	call	_lcdInst
  1006  001338  0E0D               	movlw	13
  1007  00133A  6E3B               	movwf	??_main& (0+255),c
  1008  00133C  0EFC               	movlw	252
  1009  00133E                     u837:
  1010  00133E  2EE8               	decfsz	wreg,f,c
  1011  001340  D7FE               	bra	u837
  1012  001342  2E3B               	decfsz	??_main& (0+255),f,c
  1013  001344  D7FC               	bra	u837
  1014  001346                     l127:
  1015  001346  4A47               	infsnz	_i,f,c
  1016  001348  2A48               	incf	_i+1,f,c
  1017  00134A  BE48               	btfsc	_i+1,7,c
  1018  00134C  D732               	goto	l120
  1019  00134E  5048               	movf	_i+1,w,c
  1020  001350  E101               	bnz	l1557
  1021  001352  D729               	goto	L1
  1022  001354                     u670:
  1023  001354                     l1557:
  1024                           
  1025                           ;main.c: 172: }
  1026                           ;main.c: 174: }
  1027                           ;main.c: 175: initLCD();
  1028  001354  EC40  F00B         	call	_initLCD	;wreg free
  1029                           
  1030                           ;main.c: 176: printf("all done");
  1031  001358  0E38               	movlw	low STR_9
  1032  00135A  6E2F               	movwf	printf@f,c
  1033  00135C  0E10               	movlw	high STR_9
  1034  00135E  6E30               	movwf	printf@f+1,c
  1035  001360  EC49  F00A         	call	_printf	;wreg free
  1036                           
  1037                           ;main.c: 177: motorStop_0();
  1038  001364  EC1F  F00C         	call	_motorStop_0	;wreg free
  1039                           
  1040                           ;main.c: 178: _delay((unsigned long)((800)*(8000000/4000.0)));
  1041  001368  0E09               	movlw	9
  1042  00136A  6E3C               	movwf	(??_main+1)& (0+255),c
  1043  00136C  0E1E               	movlw	30
  1044  00136E  6E3B               	movwf	??_main& (0+255),c
  1045  001370  0EE4               	movlw	228
  1046  001372                     u847:
  1047  001372  2EE8               	decfsz	wreg,f,c
  1048  001374  D7FE               	bra	u847
  1049  001376  2E3B               	decfsz	??_main& (0+255),f,c
  1050  001378  D7FC               	bra	u847
  1051  00137A  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1052  00137C  D7FA               	bra	u847
  1053  00137E  D000               	nop2	
  1054                           
  1055                           ;main.c: 179: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
  1056  001380  0E80               	movlw	128
  1057  001382  EC56  F00C         	call	_lcdInst
  1058  001386  0E0D               	movlw	13
  1059  001388  6E3B               	movwf	??_main& (0+255),c
  1060  00138A  0EFC               	movlw	252
  1061  00138C                     u857:
  1062  00138C  2EE8               	decfsz	wreg,f,c
  1063  00138E  D7FE               	bra	u857
  1064  001390  2E3B               	decfsz	??_main& (0+255),f,c
  1065  001392  D7FC               	bra	u857
  1066                           
  1067                           ;main.c: 181: counter = 0;
  1068  001394  0E00               	movlw	0
  1069  001396  6E46               	movwf	_counter+1,c
  1070  001398  0E00               	movlw	0
  1071  00139A  6E45               	movwf	_counter,c
  1072                           
  1073                           ;main.c: 183: printf("remain:%d",counter);
  1074  00139C  0E2E               	movlw	low STR_10
  1075  00139E  6E2F               	movwf	printf@f,c
  1076  0013A0  0E10               	movlw	high STR_10
  1077  0013A2  6E30               	movwf	printf@f+1,c
  1078  0013A4  C045  F031         	movff	_counter,?_printf+2
  1079  0013A8  C046  F032         	movff	_counter+1,?_printf+3
  1080  0013AC  EC49  F00A         	call	_printf	;wreg free
  1081                           
  1082                           ;main.c: 184: _delay((unsigned long)((800)*(8000000/4000.0)));
  1083  0013B0  0E09               	movlw	9
  1084  0013B2  6E3C               	movwf	(??_main+1)& (0+255),c
  1085  0013B4  0E1E               	movlw	30
  1086  0013B6  6E3B               	movwf	??_main& (0+255),c
  1087  0013B8  0EE4               	movlw	228
  1088  0013BA                     u867:
  1089  0013BA  2EE8               	decfsz	wreg,f,c
  1090  0013BC  D7FE               	bra	u867
  1091  0013BE  2E3B               	decfsz	??_main& (0+255),f,c
  1092  0013C0  D7FC               	bra	u867
  1093  0013C2  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1094  0013C4  D7FA               	bra	u867
  1095  0013C6  D000               	nop2	
  1096                           
  1097                           ;main.c: 186: motorStart_1();
  1098  0013C8  EC2E  F00C         	call	_motorStart_1	;wreg free
  1099                           
  1100                           ;main.c: 187: servoRotate0();
  1101  0013CC  EC66  F00B         	call	_servoRotate0	;wreg free
  1102                           
  1103                           ;main.c: 188: _delay((unsigned long)((200)*(8000000/4000.0)));
  1104  0013D0  0E03               	movlw	3
  1105  0013D2  6E3C               	movwf	(??_main+1)& (0+255),c
  1106  0013D4  0E08               	movlw	8
  1107  0013D6  6E3B               	movwf	??_main& (0+255),c
  1108  0013D8  0E77               	movlw	119
  1109  0013DA                     u877:
  1110  0013DA  2EE8               	decfsz	wreg,f,c
  1111  0013DC  D7FE               	bra	u877
  1112  0013DE  2E3B               	decfsz	??_main& (0+255),f,c
  1113  0013E0  D7FC               	bra	u877
  1114  0013E2  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1115  0013E4  D7FA               	bra	u877
  1116  0013E6  F000               	nop	
  1117                           
  1118                           ;main.c: 189: servoRotate180();
  1119  0013E8  EC88  F00B         	call	_servoRotate180	;wreg free
  1120  0013EC                     
  1121                           ;main.c: 192: if (readADC(2)<250){
  1122  0013EC  0E02               	movlw	2
  1123  0013EE  ECE5  F00B         	call	_readADC
  1124  0013F2  5024               	movf	?_readADC+1,w,c
  1125  0013F4  E125               	bnz	l1595
  1126  0013F6  0EFA               	movlw	250
  1127  0013F8  5C23               	subwf	?_readADC,w,c
  1128  0013FA  B0D8               	btfsc	status,0,c
  1129  0013FC  D021               	goto	l129
  1130                           
  1131                           ;main.c: 193: counter++;
  1132  0013FE  4A45               	infsnz	_counter,f,c
  1133  001400  2A46               	incf	_counter+1,f,c
  1134                           
  1135                           ;main.c: 194: printf("remain:%d",counter);
  1136  001402  0E2E               	movlw	low STR_10
  1137  001404  6E2F               	movwf	printf@f,c
  1138  001406  0E10               	movlw	high STR_10
  1139  001408  6E30               	movwf	printf@f+1,c
  1140  00140A  C045  F031         	movff	_counter,?_printf+2
  1141  00140E  C046  F032         	movff	_counter+1,?_printf+3
  1142  001412  EC49  F00A         	call	_printf	;wreg free
  1143                           
  1144                           ;main.c: 195: _delay((unsigned long)((500)*(8000000/4000.0)));
  1145  001416  0E06               	movlw	6
  1146  001418  6E3C               	movwf	(??_main+1)& (0+255),c
  1147  00141A  0E13               	movlw	19
  1148  00141C  6E3B               	movwf	??_main& (0+255),c
  1149  00141E  0EAE               	movlw	174
  1150  001420                     u887:
  1151  001420  2EE8               	decfsz	wreg,f,c
  1152  001422  D7FE               	bra	u887
  1153  001424  2E3B               	decfsz	??_main& (0+255),f,c
  1154  001426  D7FC               	bra	u887
  1155  001428  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1156  00142A  D7FA               	bra	u887
  1157                           
  1158                           ;main.c: 196: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
  1159  00142C  0E80               	movlw	128
  1160  00142E  EC56  F00C         	call	_lcdInst
  1161  001432  0E0D               	movlw	13
  1162  001434  6E3B               	movwf	??_main& (0+255),c
  1163  001436  0EFC               	movlw	252
  1164  001438                     u897:
  1165  001438  2EE8               	decfsz	wreg,f,c
  1166  00143A  D7FE               	bra	u897
  1167  00143C  2E3B               	decfsz	??_main& (0+255),f,c
  1168  00143E  D7FC               	bra	u897
  1169  001440                     l129:
  1170  001440                     l1595:
  1171                           
  1172                           ;main.c: 197: }
  1173                           ;main.c: 198: if (readADC(2)>=250){
  1174  001440  0E02               	movlw	2
  1175  001442  ECE5  F00B         	call	_readADC
  1176  001446  5024               	movf	?_readADC+1,w,c
  1177  001448  E104               	bnz	u690
  1178  00144A  0EFA               	movlw	250
  1179  00144C  5C23               	subwf	?_readADC,w,c
  1180  00144E  A0D8               	btfss	status,0,c
  1181  001450  D7CD               	goto	l128
  1182  001452                     u690:
  1183                           
  1184                           ;main.c: 199: counter_2 ++;
  1185  001452  4A43               	infsnz	_counter_2,f,c
  1186  001454  2A44               	incf	_counter_2+1,f,c
  1187                           
  1188                           ;main.c: 200: if (counter_2>=40){
  1189  001456  BE44               	btfsc	_counter_2+1,7,c
  1190  001458  D7C9               	goto	l128
  1191  00145A  5044               	movf	_counter_2+1,w,c
  1192  00145C  E104               	bnz	l1603
  1193  00145E  0E28               	movlw	40
  1194  001460  5C43               	subwf	_counter_2,w,c
  1195  001462  A0D8               	btfss	status,0,c
  1196  001464  D7C3               	goto	l128
  1197  001466                     l132:
  1198  001466                     l1603:
  1199                           
  1200                           ;main.c: 202: }
  1201                           ;main.c: 203: }
  1202                           ;main.c: 206: }
  1203                           ;main.c: 210: }
  1204                           ;main.c: 211: motorStop_0();
  1205  001466  EC1F  F00C         	call	_motorStop_0	;wreg free
  1206                           
  1207                           ;main.c: 212: printf("done");
  1208  00146A  0E3C               	movlw	low (STR_9+4)
  1209  00146C  6E2F               	movwf	printf@f,c
  1210  00146E  0E10               	movlw	high (STR_9+4)
  1211  001470  6E30               	movwf	printf@f+1,c
  1212  001472  EC49  F00A         	call	_printf	;wreg free
  1213                           
  1214                           ;main.c: 213: _delay((unsigned long)((3000)*(8000000/4000.0)));
  1215  001476  0E1F               	movlw	31
  1216  001478  6E3C               	movwf	(??_main+1)& (0+255),c
  1217  00147A  0E71               	movlw	113
  1218  00147C  6E3B               	movwf	??_main& (0+255),c
  1219  00147E  0E1E               	movlw	30
  1220  001480                     u907:
  1221  001480  2EE8               	decfsz	wreg,f,c
  1222  001482  D7FE               	bra	u907
  1223  001484  2E3B               	decfsz	??_main& (0+255),f,c
  1224  001486  D7FC               	bra	u907
  1225  001488  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1226  00148A  D7FA               	bra	u907
  1227  00148C  D000               	nop2	
  1228  00148E  EF00  F000         	goto	start
  1229  001492                     __end_of_main:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           prodh	equ	0xFF4
  1236                           prodl	equ	0xFF3
  1237                           intcon	equ	0xFF2
  1238                           intcon3	equ	0xFF0
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           postinc2	equ	0xFDE
  1244                           fsr2h	equ	0xFDA
  1245                           fsr2l	equ	0xFD9
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function _servoRotate180 *****************
  1249 ;; Defined at:
  1250 ;;		line 236 in file "main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  i               2    1[COMRAM] unsigned int 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;Total ram usage:        3 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text1
  1278  001710                     __ptext1:
  1279                           	opt stack 0
  1280  001710                     _servoRotate180:
  1281                           	opt stack 30
  1282                           
  1283                           ;main.c: 238: unsigned int i;
  1284                           ;main.c: 239: for(i=0;i<50;i++)
  1285                           
  1286                           ;incstack = 0
  1287  001710  0E00               	movlw	0
  1288  001712  6E25               	movwf	servoRotate180@i+1,c
  1289  001714  0E00               	movlw	0
  1290  001716  6E24               	movwf	servoRotate180@i,c
  1291  001718                     l1075:
  1292  001718  5025               	movf	servoRotate180@i+1,w,c
  1293  00171A  E11A               	bnz	l145
  1294  00171C  0E32               	movlw	50
  1295  00171E  5C24               	subwf	servoRotate180@i,w,c
  1296  001720  B0D8               	btfsc	status,0,c
  1297  001722  0012               	return	
  1298                           
  1299                           ;main.c: 240: {
  1300                           ;main.c: 241: LATDbits.LATD1 = 1;
  1301  001724  828C               	bsf	3980,1,c	;volatile
  1302                           
  1303                           ;main.c: 242: TRISDbits.RD1 = 0;
  1304  001726  9295               	bcf	3989,1,c	;volatile
  1305                           
  1306                           ;main.c: 243: _delay((unsigned long)((2000)*(8000000/4000000.0)));
  1307  001728  0E06               	movlw	6
  1308  00172A  6E23               	movwf	??_servoRotate180& (0+255),c
  1309  00172C  0E30               	movlw	48
  1310  00172E                     u917:
  1311  00172E  2EE8               	decfsz	wreg,f,c
  1312  001730  D7FE               	bra	u917
  1313  001732  2E23               	decfsz	??_servoRotate180& (0+255),f,c
  1314  001734  D7FC               	bra	u917
  1315  001736  D000               	nop2	
  1316                           
  1317                           ;main.c: 244: LATDbits.LATD1 = 0;
  1318  001738  928C               	bcf	3980,1,c	;volatile
  1319                           
  1320                           ;main.c: 245: TRISDbits.RD1 = 0;
  1321  00173A  9295               	bcf	3989,1,c	;volatile
  1322                           
  1323                           ;main.c: 246: _delay((unsigned long)((18000)*(8000000/4000000.0)));
  1324  00173C  0E2F               	movlw	47
  1325  00173E  6E23               	movwf	??_servoRotate180& (0+255),c
  1326  001740  0EC0               	movlw	192
  1327  001742                     u927:
  1328  001742  2EE8               	decfsz	wreg,f,c
  1329  001744  D7FE               	bra	u927
  1330  001746  2E23               	decfsz	??_servoRotate180& (0+255),f,c
  1331  001748  D7FC               	bra	u927
  1332  00174A  4A24               	infsnz	servoRotate180@i,f,c
  1333  00174C  2A25               	incf	servoRotate180@i+1,f,c
  1334  00174E  D7E4               	goto	l1075
  1335  001750                     l145:
  1336  001750  0012               	return		;funcret
  1337  001752                     __end_of_servoRotate180:
  1338                           	opt stack 0
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           prodh	equ	0xFF4
  1344                           prodl	equ	0xFF3
  1345                           intcon	equ	0xFF2
  1346                           intcon3	equ	0xFF0
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           postinc2	equ	0xFDE
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _servoRotate0 *****************
  1357 ;; Defined at:
  1358 ;;		line 267 in file "main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;Total ram usage:        1 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text2
  1386  0016CC                     __ptext2:
  1387                           	opt stack 0
  1388  0016CC                     _servoRotate0:
  1389                           	opt stack 30
  1390                           
  1391                           ;main.c: 269: for (i = 0; i<50; i++){
  1392                           
  1393                           ;incstack = 0
  1394  0016CC  0E00               	movlw	0
  1395  0016CE  6E48               	movwf	_i+1,c
  1396  0016D0  0E00               	movlw	0
  1397  0016D2  6E47               	movwf	_i,c
  1398  0016D4                     l1061:
  1399  0016D4  BE48               	btfsc	_i+1,7,c
  1400  0016D6  D006               	goto	l153
  1401  0016D8  5048               	movf	_i+1,w,c
  1402  0016DA  E119               	bnz	l155
  1403  0016DC  0E32               	movlw	50
  1404  0016DE  5C47               	subwf	_i,w,c
  1405  0016E0  B0D8               	btfsc	status,0,c
  1406  0016E2  0012               	return	
  1407  0016E4                     l153:
  1408                           
  1409                           ;main.c: 270: LATDbits.LATD1 = 1;
  1410  0016E4  828C               	bsf	3980,1,c	;volatile
  1411                           
  1412                           ;main.c: 271: TRISDbits.RD1 = 0;
  1413  0016E6  9295               	bcf	3989,1,c	;volatile
  1414                           
  1415                           ;main.c: 272: _delay((unsigned long)((800)*(8000000/4000000.0)));
  1416  0016E8  0EE4               	movlw	228
  1417  0016EA                     u937:
  1418  0016EA  D000               	nop2	
  1419  0016EC  D000               	nop2	
  1420  0016EE  2EE8               	decfsz	wreg,f,c
  1421  0016F0  D7FC               	bra	u937
  1422  0016F2  D000               	nop2	
  1423  0016F4  D000               	nop2	
  1424                           
  1425                           ;main.c: 273: LATDbits.LATD1 = 0;
  1426  0016F6  928C               	bcf	3980,1,c	;volatile
  1427                           
  1428                           ;main.c: 274: TRISDbits.RD1 = 0;
  1429  0016F8  9295               	bcf	3989,1,c	;volatile
  1430                           
  1431                           ;main.c: 275: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  1432  0016FA  0E32               	movlw	50
  1433  0016FC  6E23               	movwf	??_servoRotate0& (0+255),c
  1434  0016FE  0EDE               	movlw	222
  1435  001700                     u947:
  1436  001700  2EE8               	decfsz	wreg,f,c
  1437  001702  D7FE               	bra	u947
  1438  001704  2E23               	decfsz	??_servoRotate0& (0+255),f,c
  1439  001706  D7FC               	bra	u947
  1440  001708  4A47               	infsnz	_i,f,c
  1441  00170A  2A48               	incf	_i+1,f,c
  1442  00170C  D7E3               	goto	l1061
  1443  00170E                     l155:
  1444  00170E  0012               	return		;funcret
  1445  001710                     __end_of_servoRotate0:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           intcon	equ	0xFF2
  1454                           intcon3	equ	0xFF0
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           postinc2	equ	0xFDE
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _readADC *****************
  1465 ;; Defined at:
  1466 ;;		line 220 in file "main.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  channel         1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  channel         1    4[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2    0[COMRAM] unsigned short 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;Total ram usage:        5 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_main
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text3
  1494  0017CA                     __ptext3:
  1495                           	opt stack 0
  1496  0017CA                     _readADC:
  1497                           	opt stack 30
  1498                           
  1499                           ;incstack = 0
  1500                           ;readADC@channel stored from wreg
  1501  0017CA  6E27               	movwf	readADC@channel,c
  1502                           
  1503                           ;main.c: 229: ADCON0 = (channel & 0x0F) << 2;
  1504  0017CC  C027  F025         	movff	readADC@channel,??_readADC
  1505  0017D0  0E0F               	movlw	15
  1506  0017D2  1625               	andwf	??_readADC,f,c
  1507  0017D4  90D8               	bcf	status,0,c
  1508  0017D6  3625               	rlcf	??_readADC,f,c
  1509  0017D8  90D8               	bcf	status,0,c
  1510  0017DA  3425               	rlcf	??_readADC,w,c
  1511  0017DC  6EC2               	movwf	4034,c	;volatile
  1512                           
  1513                           ;main.c: 230: ADON = 1;
  1514  0017DE  80C2               	bsf	4034,0,c	;volatile
  1515                           
  1516                           ;main.c: 231: ADCON0bits.GO = 1;
  1517  0017E0  82C2               	bsf	4034,1,c	;volatile
  1518  0017E2  B2C2               	btfsc	4034,1,c	;volatile
  1519  0017E4  D7FE               	goto	l138
  1520                           
  1521                           ;main.c: 233: return (ADRESH << 8) | ADRESL;
  1522  0017E6  50C3               	movf	4035,w,c	;volatile
  1523  0017E8  CFC4 F025          	movff	4036,??_readADC	;volatile
  1524  0017EC  6A26               	clrf	(??_readADC+1)& (0+255),c
  1525  0017EE  C025  F026         	movff	??_readADC,??_readADC+1
  1526  0017F2  6A25               	clrf	??_readADC,c
  1527  0017F4  1025               	iorwf	??_readADC,w,c
  1528  0017F6  6E23               	movwf	?_readADC,c
  1529  0017F8  5026               	movf	??_readADC+1,w,c
  1530  0017FA  6E24               	movwf	?_readADC+1,c
  1531  0017FC  0012               	return	
  1532  0017FE                     __end_of_readADC:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           prodh	equ	0xFF4
  1539                           prodl	equ	0xFF3
  1540                           intcon	equ	0xFF2
  1541                           intcon3	equ	0xFF0
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           postinc2	equ	0xFDE
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _printf *****************
  1552 ;; Defined at:
  1553 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1556 ;;		 -> STR_12(5), STR_11(10), STR_10(10), STR_9(9), 
  1557 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
  1558 ;;		 -> STR_4(5), STR_3(5), STR_2(14), STR_1(12), 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  tmpval          4    0        struct .
  1561 ;;  cp              3    0        PTR const unsigned char 
  1562 ;;  val             2   21[COMRAM] unsigned int 
  1563 ;;  ap              2   17[COMRAM] PTR void [1]
  1564 ;;		 -> ?_printf(2), 
  1565 ;;  len             2    0        unsigned int 
  1566 ;;  c               1   23[COMRAM] char 
  1567 ;;  prec            1   20[COMRAM] char 
  1568 ;;  flag            1   19[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  2   12[COMRAM] int 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;Total ram usage:       12 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		___lwdiv
  1587 ;;		___lwmod
  1588 ;;		_putch
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text4
  1595  001492                     __ptext4:
  1596                           	opt stack 0
  1597  001492                     _printf:
  1598                           	opt stack 28
  1599                           
  1600                           ;doprnt.c: 466: va_list ap;
  1601                           ;doprnt.c: 499: signed char c;
  1602                           ;doprnt.c: 506: signed char prec;
  1603                           ;doprnt.c: 508: unsigned char flag;
  1604                           ;doprnt.c: 523: union {
  1605                           ;doprnt.c: 524: unsigned long vd;
  1606                           ;doprnt.c: 525: double integ;
  1607                           ;doprnt.c: 526: } tmpval;
  1608                           ;doprnt.c: 528: unsigned int val;
  1609                           ;doprnt.c: 529: unsigned len;
  1610                           ;doprnt.c: 530: const char * cp;
  1611                           ;doprnt.c: 533: *ap = __va_start();
  1612                           
  1613                           ;incstack = 0
  1614  001492  0E31               	movlw	low (?_printf+2)
  1615  001494  6E34               	movwf	printf@ap,c
  1616  001496  0E00               	movlw	high (?_printf+2)
  1617  001498  6E35               	movwf	printf@ap+1,c
  1618                           
  1619                           ;doprnt.c: 536: while(c = *f++) {
  1620  00149A  D07D               	goto	u560
  1621  00149C                     
  1622                           ;doprnt.c: 538: if(c != '%')
  1623  00149C  0E25               	movlw	37
  1624  00149E  183A               	xorwf	printf@c,w,c
  1625  0014A0  B4D8               	btfsc	status,2,c
  1626  0014A2  D004               	goto	l240
  1627                           
  1628                           ;doprnt.c: 540: {
  1629                           ;doprnt.c: 541: (putch(c) );
  1630  0014A4  503A               	movf	printf@c,w,c
  1631  0014A6  EC4C  F00C         	call	_putch
  1632                           
  1633                           ;doprnt.c: 542: continue;
  1634  0014AA  D075               	goto	u560
  1635  0014AC                     l240:
  1636                           
  1637                           ;doprnt.c: 543: }
  1638                           ;doprnt.c: 548: flag = 0;
  1639  0014AC  0E00               	movlw	0
  1640  0014AE  6E36               	movwf	printf@flag,c
  1641                           
  1642                           ;doprnt.c: 822: }
  1643                           
  1644                           ;doprnt.c: 813: continue;
  1645                           
  1646                           ;doprnt.c: 802: default:
  1647                           
  1648                           ;doprnt.c: 698: case 'i':
  1649                           ;doprnt.c: 699: break;
  1650                           
  1651                           ;doprnt.c: 697: case 'd':
  1652                           
  1653                           ;doprnt.c: 638: goto alldone;
  1654                           
  1655                           ;doprnt.c: 637: case 0:
  1656                           
  1657                           ;doprnt.c: 635: switch(c = *f++) {
  1658  0014B0  C02F  FFF6         	movff	printf@f,tblptrl
  1659  0014B4  C030  FFF7         	movff	printf@f+1,tblptrh
  1660  0014B8  4A2F               	infsnz	printf@f,f,c
  1661  0014BA  2A30               	incf	printf@f+1,f,c
  1662  0014BC                     	if	0	;tblptru may be non-zero
  1663  0014BC                     	endif
  1664  0014BC                     	if	0	;tblptru may be non-zero
  1665  0014BC                     	endif
  1666  0014BC  0008               	tblrd		*
  1667  0014BE  CFF5 F03A          	movff	tablat,printf@c
  1668  0014C2  503A               	movf	printf@c,w,c
  1669                           
  1670                           ; Switch size 1, requested type "space"
  1671                           ; Number of cases is 3, Range of values is 0 to 105
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte           10     6 (average)
  1675                           ;	Chosen strategy is simple_byte
  1676  0014C4  0A00               	xorlw	0	; case 0
  1677  0014C6  B4D8               	btfsc	status,2,c
  1678  0014C8  0012               	return	
  1679  0014CA  0A64               	xorlw	100	; case 100
  1680  0014CC  B4D8               	btfsc	status,2,c
  1681  0014CE  D003               	goto	l246
  1682  0014D0  0A0D               	xorlw	13	; case 105
  1683  0014D2  A4D8               	btfss	status,2,c
  1684  0014D4  D060               	goto	u560
  1685  0014D6                     l246:
  1686                           
  1687                           ;doprnt.c: 1253: {
  1688                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1689  0014D6  C034  FFD9         	movff	printf@ap,fsr2l
  1690  0014DA  C035  FFDA         	movff	printf@ap+1,fsr2h
  1691  0014DE  CFDE F038          	movff	postinc2,printf@val
  1692  0014E2  CFDD F039          	movff	postdec2,printf@val+1
  1693  0014E6  0E02               	movlw	2
  1694  0014E8  2634               	addwf	printf@ap,f,c
  1695  0014EA  0E00               	movlw	0
  1696  0014EC  2235               	addwfc	printf@ap+1,f,c
  1697                           
  1698                           ;doprnt.c: 1261: if((int)val < 0) {
  1699  0014EE  AE39               	btfss	printf@val+1,7,c
  1700  0014F0  D006               	goto	l248
  1701                           
  1702                           ;doprnt.c: 1262: flag |= 0x03;
  1703  0014F2  0E03               	movlw	3
  1704  0014F4  1236               	iorwf	printf@flag,f,c
  1705                           
  1706                           ;doprnt.c: 1263: val = -val;
  1707  0014F6  6C38               	negf	printf@val,c
  1708  0014F8  1E39               	comf	printf@val+1,f,c
  1709  0014FA  B0D8               	btfsc	status,0,c
  1710  0014FC  2A39               	incf	printf@val+1,f,c
  1711  0014FE                     l248:
  1712                           
  1713                           ;doprnt.c: 1264: }
  1714                           ;doprnt.c: 1266: }
  1715                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1716  0014FE  0E01               	movlw	1
  1717  001500  6E3A               	movwf	printf@c,c
  1718  001502                     l1395:
  1719  001502  0E05               	movlw	5
  1720  001504  183A               	xorwf	printf@c,w,c
  1721  001506  B4D8               	btfsc	status,2,c
  1722  001508  D012               	goto	u540
  1723                           
  1724                           ;doprnt.c: 1306: if(val < dpowers[c])
  1725  00150A  503A               	movf	printf@c,w,c
  1726  00150C  0D02               	mullw	2
  1727  00150E  0E01               	movlw	low _dpowers
  1728  001510  24F3               	addwf	prodl,w,c
  1729  001512  6EF6               	movwf	tblptrl,c
  1730  001514  0E10               	movlw	high _dpowers
  1731  001516  20F4               	addwfc	prodh,w,c
  1732  001518  6EF7               	movwf	tblptrh,c
  1733  00151A                     	if	0	;There are less than 3 active tblptr bytes
  1734  00151A                     	endif
  1735  00151A  0009               	tblrd		*+
  1736  00151C  50F5               	movf	tablat,w,c
  1737  00151E  5C38               	subwf	printf@val,w,c
  1738  001520  0009               	tblrd		*+
  1739  001522  50F5               	movf	tablat,w,c
  1740  001524  5839               	subwfb	printf@val+1,w,c
  1741  001526  A0D8               	btfss	status,0,c
  1742  001528  D002               	goto	u540
  1743                           
  1744                           ;doprnt.c: 1307: break;
  1745  00152A  2A3A               	incf	printf@c,f,c
  1746  00152C  D7EA               	goto	l1395
  1747  00152E                     u540:
  1748                           
  1749                           ;doprnt.c: 1422: {
  1750                           ;doprnt.c: 1438: if(flag & 0x03)
  1751  00152E  C036  F033         	movff	printf@flag,??_printf
  1752  001532  0E03               	movlw	3
  1753  001534  1633               	andwf	??_printf,f,c
  1754  001536  B4D8               	btfsc	status,2,c
  1755  001538  D003               	goto	l252
  1756                           
  1757                           ;doprnt.c: 1439: (putch('-') );
  1758  00153A  0E2D               	movlw	45
  1759  00153C  EC4C  F00C         	call	_putch
  1760  001540                     l252:
  1761                           
  1762                           ;doprnt.c: 1469: }
  1763                           ;doprnt.c: 1472: prec = c;
  1764  001540  C03A  F037         	movff	printf@c,printf@prec
  1765                           
  1766                           ;doprnt.c: 1474: while(prec--) {
  1767  001544  D024               	goto	l253
  1768  001546                     
  1769                           ;doprnt.c: 1478: {
  1770                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1771  001546  5037               	movf	printf@prec,w,c
  1772  001548  0D02               	mullw	2
  1773  00154A  0E01               	movlw	low _dpowers
  1774  00154C  24F3               	addwf	prodl,w,c
  1775  00154E  6EF6               	movwf	tblptrl,c
  1776  001550  0E10               	movlw	high _dpowers
  1777  001552  20F4               	addwfc	prodh,w,c
  1778  001554  6EF7               	movwf	tblptrh,c
  1779  001556                     	if	0	;There are less than 3 active tblptr bytes
  1780  001556                     	endif
  1781  001556  0009               	tblrd		*+
  1782  001558  CFF5 F025          	movff	tablat,___lwdiv@divisor
  1783  00155C  000A               	tblrd		*-
  1784  00155E  CFF5 F026          	movff	tablat,___lwdiv@divisor+1
  1785  001562  C038  F023         	movff	printf@val,___lwdiv@dividend
  1786  001566  C039  F024         	movff	printf@val+1,___lwdiv@dividend+1
  1787  00156A  EC17  F00B         	call	___lwdiv	;wreg free
  1788  00156E  C023  F02A         	movff	?___lwdiv,___lwmod@dividend
  1789  001572  C024  F02B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1790  001576  0E00               	movlw	0
  1791  001578  6E2D               	movwf	___lwmod@divisor+1,c
  1792  00157A  0E0A               	movlw	10
  1793  00157C  6E2C               	movwf	___lwmod@divisor,c
  1794  00157E  ECA9  F00B         	call	___lwmod	;wreg free
  1795  001582  502A               	movf	?___lwmod,w,c
  1796  001584  0F30               	addlw	48
  1797  001586  6E3A               	movwf	printf@c,c
  1798                           
  1799                           ;doprnt.c: 1523: }
  1800                           ;doprnt.c: 1524: (putch(c) );
  1801  001588  503A               	movf	printf@c,w,c
  1802  00158A  EC4C  F00C         	call	_putch
  1803  00158E                     l253:
  1804  00158E  0637               	decf	printf@prec,f,c
  1805  001590  2837               	incf	printf@prec,w,c
  1806  001592  A4D8               	btfss	status,2,c
  1807  001594  D7D8               	goto	l254
  1808  001596                     u560:
  1809  001596  C02F  FFF6         	movff	printf@f,tblptrl
  1810  00159A  C030  FFF7         	movff	printf@f+1,tblptrh
  1811  00159E  4A2F               	infsnz	printf@f,f,c
  1812  0015A0  2A30               	incf	printf@f+1,f,c
  1813  0015A2                     	if	0	;tblptru may be non-zero
  1814  0015A2                     	endif
  1815  0015A2                     	if	0	;tblptru may be non-zero
  1816  0015A2                     	endif
  1817  0015A2  0008               	tblrd		*
  1818  0015A4  CFF5 F03A          	movff	tablat,printf@c
  1819  0015A8  503A               	movf	printf@c,w,c
  1820  0015AA  B4D8               	btfsc	status,2,c
  1821  0015AC  0012               	return	
  1822  0015AE  D776               	goto	l239
  1823  0015B0                     __end_of_printf:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           prodh	equ	0xFF4
  1830                           prodl	equ	0xFF3
  1831                           intcon	equ	0xFF2
  1832                           intcon3	equ	0xFF0
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _putch *****************
  1844 ;; Defined at:
  1845 ;;		line 24 in file "lcd.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  data            1    wreg     unsigned char 
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  data            1    2[COMRAM] unsigned char 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;Total ram usage:        1 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    1
  1866 ;; This function calls:
  1867 ;;		_lcdNibble
  1868 ;; This function is called by:
  1869 ;;		_main
  1870 ;;		_printf
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text5
  1875  001898                     __ptext5:
  1876                           	opt stack 0
  1877  001898                     _putch:
  1878                           	opt stack 29
  1879                           
  1880                           ;incstack = 0
  1881                           ;putch@data stored from wreg
  1882  001898  6E25               	movwf	putch@data,c
  1883                           
  1884                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1885  00189A  848C               	bsf	3980,2,c	;volatile
  1886                           
  1887                           ;lcd.c: 33: lcdNibble(data);
  1888  00189C  5025               	movf	putch@data,w,c
  1889  00189E  ECD8  F00A         	call	_lcdNibble
  1890                           
  1891                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1892  0018A2  0E42               	movlw	66
  1893  0018A4                     u957:
  1894  0018A4  2EE8               	decfsz	wreg,f,c
  1895  0018A6  D7FE               	bra	u957
  1896  0018A8  D000               	nop2	
  1897  0018AA  0012               	return		;funcret
  1898  0018AC                     __end_of_putch:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           intcon	equ	0xFF2
  1907                           intcon3	equ	0xFF0
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           fsr1l	equ	0xFE1
  1912                           postinc2	equ	0xFDE
  1913                           postdec2	equ	0xFDD
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function ___lwmod *****************
  1919 ;; Defined at:
  1920 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  dividend        2    7[COMRAM] unsigned int 
  1923 ;;  divisor         2    9[COMRAM] unsigned int 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  counter         1   11[COMRAM] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  2    7[COMRAM] unsigned int 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;Total ram usage:        5 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_printf
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text6
  1949  001752                     __ptext6:
  1950                           	opt stack 0
  1951  001752                     ___lwmod:
  1952                           	opt stack 29
  1953                           
  1954                           ;incstack = 0
  1955  001752  502C               	movf	___lwmod@divisor,w,c
  1956  001754  102D               	iorwf	___lwmod@divisor+1,w,c
  1957  001756  B4D8               	btfsc	status,2,c
  1958  001758  D018               	goto	l676
  1959  00175A  0E01               	movlw	1
  1960  00175C  6E2E               	movwf	___lwmod@counter,c
  1961  00175E  D004               	goto	l671
  1962  001760  90D8               	bcf	status,0,c
  1963  001762  362C               	rlcf	___lwmod@divisor,f,c
  1964  001764  362D               	rlcf	___lwmod@divisor+1,f,c
  1965  001766  2A2E               	incf	___lwmod@counter,f,c
  1966  001768                     l671:
  1967  001768  AE2D               	btfss	___lwmod@divisor+1,7,c
  1968  00176A  D7FA               	goto	l672
  1969  00176C                     u480:
  1970  00176C  502C               	movf	___lwmod@divisor,w,c
  1971  00176E  5C2A               	subwf	___lwmod@dividend,w,c
  1972  001770  502D               	movf	___lwmod@divisor+1,w,c
  1973  001772  582B               	subwfb	___lwmod@dividend+1,w,c
  1974  001774  A0D8               	btfss	status,0,c
  1975  001776  D004               	goto	l675
  1976  001778  502C               	movf	___lwmod@divisor,w,c
  1977  00177A  5E2A               	subwf	___lwmod@dividend,f,c
  1978  00177C  502D               	movf	___lwmod@divisor+1,w,c
  1979  00177E  5A2B               	subwfb	___lwmod@dividend+1,f,c
  1980  001780                     l675:
  1981  001780  90D8               	bcf	status,0,c
  1982  001782  322D               	rrcf	___lwmod@divisor+1,f,c
  1983  001784  322C               	rrcf	___lwmod@divisor,f,c
  1984  001786  2E2E               	decfsz	___lwmod@counter,f,c
  1985  001788  D7F1               	goto	u480
  1986  00178A                     l676:
  1987  00178A  C02A  F02A         	movff	___lwmod@dividend,?___lwmod
  1988  00178E  C02B  F02B         	movff	___lwmod@dividend+1,?___lwmod+1
  1989  001792  0012               	return		;funcret
  1990  001794                     __end_of___lwmod:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           intcon3	equ	0xFF0
  2000                           postinc0	equ	0xFEE
  2001                           wreg	equ	0xFE8
  2002                           postdec1	equ	0xFE5
  2003                           fsr1l	equ	0xFE1
  2004                           postinc2	equ	0xFDE
  2005                           postdec2	equ	0xFDD
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function ___lwdiv *****************
  2011 ;; Defined at:
  2012 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  dividend        2    0[COMRAM] unsigned int 
  2015 ;;  divisor         2    2[COMRAM] unsigned int 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  quotient        2    4[COMRAM] unsigned int 
  2018 ;;  counter         1    6[COMRAM] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  2    0[COMRAM] unsigned int 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        7 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_printf
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text7
  2042  00162E                     __ptext7:
  2043                           	opt stack 0
  2044  00162E                     ___lwdiv:
  2045                           	opt stack 29
  2046                           
  2047                           ;incstack = 0
  2048  00162E  0E00               	movlw	0
  2049  001630  6E28               	movwf	___lwdiv@quotient+1,c
  2050  001632  0E00               	movlw	0
  2051  001634  6E27               	movwf	___lwdiv@quotient,c
  2052  001636  5025               	movf	___lwdiv@divisor,w,c
  2053  001638  1026               	iorwf	___lwdiv@divisor+1,w,c
  2054  00163A  B4D8               	btfsc	status,2,c
  2055  00163C  D01C               	goto	l666
  2056  00163E  0E01               	movlw	1
  2057  001640  6E29               	movwf	___lwdiv@counter,c
  2058  001642  D004               	goto	l661
  2059  001644  90D8               	bcf	status,0,c
  2060  001646  3625               	rlcf	___lwdiv@divisor,f,c
  2061  001648  3626               	rlcf	___lwdiv@divisor+1,f,c
  2062  00164A  2A29               	incf	___lwdiv@counter,f,c
  2063  00164C                     l661:
  2064  00164C  AE26               	btfss	___lwdiv@divisor+1,7,c
  2065  00164E  D7FA               	goto	l662
  2066  001650                     u450:
  2067  001650  90D8               	bcf	status,0,c
  2068  001652  3627               	rlcf	___lwdiv@quotient,f,c
  2069  001654  3628               	rlcf	___lwdiv@quotient+1,f,c
  2070  001656  5025               	movf	___lwdiv@divisor,w,c
  2071  001658  5C23               	subwf	___lwdiv@dividend,w,c
  2072  00165A  5026               	movf	___lwdiv@divisor+1,w,c
  2073  00165C  5824               	subwfb	___lwdiv@dividend+1,w,c
  2074  00165E  A0D8               	btfss	status,0,c
  2075  001660  D005               	goto	l665
  2076  001662  5025               	movf	___lwdiv@divisor,w,c
  2077  001664  5E23               	subwf	___lwdiv@dividend,f,c
  2078  001666  5026               	movf	___lwdiv@divisor+1,w,c
  2079  001668  5A24               	subwfb	___lwdiv@dividend+1,f,c
  2080  00166A  8027               	bsf	___lwdiv@quotient,0,c
  2081  00166C                     l665:
  2082  00166C  90D8               	bcf	status,0,c
  2083  00166E  3226               	rrcf	___lwdiv@divisor+1,f,c
  2084  001670  3225               	rrcf	___lwdiv@divisor,f,c
  2085  001672  2E29               	decfsz	___lwdiv@counter,f,c
  2086  001674  D7ED               	goto	u450
  2087  001676                     l666:
  2088  001676  C027  F023         	movff	___lwdiv@quotient,?___lwdiv
  2089  00167A  C028  F024         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2090  00167E  0012               	return		;funcret
  2091  001680                     __end_of___lwdiv:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           intcon	equ	0xFF2
  2100                           intcon3	equ	0xFF0
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           postdec1	equ	0xFE5
  2104                           fsr1l	equ	0xFE1
  2105                           postinc2	equ	0xFDE
  2106                           postdec2	equ	0xFDD
  2107                           fsr2h	equ	0xFDA
  2108                           fsr2l	equ	0xFD9
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _motorStop_1 *****************
  2112 ;; Defined at:
  2113 ;;		line 319 in file "main.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        2 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_main
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text8
  2141  001820                     __ptext8:
  2142                           	opt stack 0
  2143  001820                     _motorStop_1:
  2144                           	opt stack 30
  2145                           
  2146                           ;main.c: 320: LATCbits.LATC1 = 0;
  2147                           
  2148                           ;incstack = 0
  2149  001820  928B               	bcf	3979,1,c	;volatile
  2150                           
  2151                           ;main.c: 321: TRISCbits.RC1 = 0;
  2152  001822  9294               	bcf	3988,1,c	;volatile
  2153                           
  2154                           ;main.c: 323: _delay((unsigned long)((200)*(8000000/4000.0)));
  2155  001824  0E03               	movlw	3
  2156  001826  6E24               	movwf	(??_motorStop_1+1)& (0+255),c
  2157  001828  0E08               	movlw	8
  2158  00182A  6E23               	movwf	??_motorStop_1& (0+255),c
  2159  00182C  0E77               	movlw	119
  2160  00182E                     u967:
  2161  00182E  2EE8               	decfsz	wreg,f,c
  2162  001830  D7FE               	bra	u967
  2163  001832  2E23               	decfsz	??_motorStop_1& (0+255),f,c
  2164  001834  D7FC               	bra	u967
  2165  001836  2E24               	decfsz	(??_motorStop_1+1)& (0+255),f,c
  2166  001838  D7FA               	bra	u967
  2167  00183A  F000               	nop	
  2168  00183C  0012               	return		;funcret
  2169  00183E                     __end_of_motorStop_1:
  2170                           	opt stack 0
  2171                           tblptru	equ	0xFF8
  2172                           tblptrh	equ	0xFF7
  2173                           tblptrl	equ	0xFF6
  2174                           tablat	equ	0xFF5
  2175                           prodh	equ	0xFF4
  2176                           prodl	equ	0xFF3
  2177                           intcon	equ	0xFF2
  2178                           intcon3	equ	0xFF0
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1l	equ	0xFE1
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _motorStop_0 *****************
  2190 ;; Defined at:
  2191 ;;		line 303 in file "main.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:        2 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text9
  2219  00183E                     __ptext9:
  2220                           	opt stack 0
  2221  00183E                     _motorStop_0:
  2222                           	opt stack 30
  2223                           
  2224                           ;main.c: 304: LATCbits.LATC0 = 0;
  2225                           
  2226                           ;incstack = 0
  2227  00183E  908B               	bcf	3979,0,c	;volatile
  2228                           
  2229                           ;main.c: 305: TRISCbits.RC0 = 0;
  2230  001840  9094               	bcf	3988,0,c	;volatile
  2231                           
  2232                           ;main.c: 307: _delay((unsigned long)((200)*(8000000/4000.0)));
  2233  001842  0E03               	movlw	3
  2234  001844  6E24               	movwf	(??_motorStop_0+1)& (0+255),c
  2235  001846  0E08               	movlw	8
  2236  001848  6E23               	movwf	??_motorStop_0& (0+255),c
  2237  00184A  0E77               	movlw	119
  2238  00184C                     u977:
  2239  00184C  2EE8               	decfsz	wreg,f,c
  2240  00184E  D7FE               	bra	u977
  2241  001850  2E23               	decfsz	??_motorStop_0& (0+255),f,c
  2242  001852  D7FC               	bra	u977
  2243  001854  2E24               	decfsz	(??_motorStop_0+1)& (0+255),f,c
  2244  001856  D7FA               	bra	u977
  2245  001858  F000               	nop	
  2246  00185A  0012               	return		;funcret
  2247  00185C                     __end_of_motorStop_0:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           intcon	equ	0xFF2
  2256                           intcon3	equ	0xFF0
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postdec1	equ	0xFE5
  2260                           fsr1l	equ	0xFE1
  2261                           postinc2	equ	0xFDE
  2262                           postdec2	equ	0xFDD
  2263                           fsr2h	equ	0xFDA
  2264                           fsr2l	equ	0xFD9
  2265                           status	equ	0xFD8
  2266                           
  2267 ;; *************** function _motorStart_1 *****************
  2268 ;; Defined at:
  2269 ;;		line 310 in file "main.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;Total ram usage:        2 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text10
  2297  00185C                     __ptext10:
  2298                           	opt stack 0
  2299  00185C                     _motorStart_1:
  2300                           	opt stack 30
  2301                           
  2302                           ;main.c: 312: LATCbits.LATC1 = 1;
  2303                           
  2304                           ;incstack = 0
  2305  00185C  828B               	bsf	3979,1,c	;volatile
  2306                           
  2307                           ;main.c: 313: TRISCbits.RC1 = 0;
  2308  00185E  9294               	bcf	3988,1,c	;volatile
  2309                           
  2310                           ;main.c: 315: _delay((unsigned long)((200)*(8000000/4000.0)));
  2311  001860  0E03               	movlw	3
  2312  001862  6E24               	movwf	(??_motorStart_1+1)& (0+255),c
  2313  001864  0E08               	movlw	8
  2314  001866  6E23               	movwf	??_motorStart_1& (0+255),c
  2315  001868  0E77               	movlw	119
  2316  00186A                     u987:
  2317  00186A  2EE8               	decfsz	wreg,f,c
  2318  00186C  D7FE               	bra	u987
  2319  00186E  2E23               	decfsz	??_motorStart_1& (0+255),f,c
  2320  001870  D7FC               	bra	u987
  2321  001872  2E24               	decfsz	(??_motorStart_1+1)& (0+255),f,c
  2322  001874  D7FA               	bra	u987
  2323  001876  F000               	nop	
  2324  001878  0012               	return		;funcret
  2325  00187A                     __end_of_motorStart_1:
  2326                           	opt stack 0
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           prodh	equ	0xFF4
  2332                           prodl	equ	0xFF3
  2333                           intcon	equ	0xFF2
  2334                           intcon3	equ	0xFF0
  2335                           postinc0	equ	0xFEE
  2336                           wreg	equ	0xFE8
  2337                           postdec1	equ	0xFE5
  2338                           fsr1l	equ	0xFE1
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _motorStart_0 *****************
  2346 ;; Defined at:
  2347 ;;		line 294 in file "main.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;Total ram usage:        2 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text11
  2375  00187A                     __ptext11:
  2376                           	opt stack 0
  2377  00187A                     _motorStart_0:
  2378                           	opt stack 30
  2379                           
  2380                           ;main.c: 296: LATCbits.LATC0 = 1;
  2381                           
  2382                           ;incstack = 0
  2383  00187A  808B               	bsf	3979,0,c	;volatile
  2384                           
  2385                           ;main.c: 297: TRISCbits.RC0 = 0;
  2386  00187C  9094               	bcf	3988,0,c	;volatile
  2387                           
  2388                           ;main.c: 299: _delay((unsigned long)((200)*(8000000/4000.0)));
  2389  00187E  0E03               	movlw	3
  2390  001880  6E24               	movwf	(??_motorStart_0+1)& (0+255),c
  2391  001882  0E08               	movlw	8
  2392  001884  6E23               	movwf	??_motorStart_0& (0+255),c
  2393  001886  0E77               	movlw	119
  2394  001888                     u997:
  2395  001888  2EE8               	decfsz	wreg,f,c
  2396  00188A  D7FE               	bra	u997
  2397  00188C  2E23               	decfsz	??_motorStart_0& (0+255),f,c
  2398  00188E  D7FC               	bra	u997
  2399  001890  2E24               	decfsz	(??_motorStart_0+1)& (0+255),f,c
  2400  001892  D7FA               	bra	u997
  2401  001894  F000               	nop	
  2402  001896  0012               	return		;funcret
  2403  001898                     __end_of_motorStart_0:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           intcon	equ	0xFF2
  2412                           intcon3	equ	0xFF0
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           postdec1	equ	0xFE5
  2416                           fsr1l	equ	0xFE1
  2417                           postinc2	equ	0xFDE
  2418                           postdec2	equ	0xFDD
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _initLCD *****************
  2424 ;; Defined at:
  2425 ;;		line 60 in file "lcd.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;		None
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;Total ram usage:        1 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    2
  2446 ;; This function calls:
  2447 ;;		_lcdInst
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text12
  2454  001680                     __ptext12:
  2455                           	opt stack 0
  2456  001680                     _initLCD:
  2457                           	opt stack 28
  2458                           
  2459                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  2460                           
  2461                           ;incstack = 0
  2462  001680  0E27               	movlw	39
  2463  001682  6E26               	movwf	??_initLCD& (0+255),c
  2464  001684  0EF5               	movlw	245
  2465  001686                     u1007:
  2466  001686  2EE8               	decfsz	wreg,f,c
  2467  001688  D7FE               	bra	u1007
  2468  00168A  2E26               	decfsz	??_initLCD& (0+255),f,c
  2469  00168C  D7FC               	bra	u1007
  2470  00168E  F000               	nop	
  2471                           
  2472                           ;lcd.c: 69: lcdInst(0b00110011);
  2473  001690  0E33               	movlw	51
  2474  001692  EC56  F00C         	call	_lcdInst
  2475                           
  2476                           ;lcd.c: 70: lcdInst(0b00110010);
  2477  001696  0E32               	movlw	50
  2478  001698  EC56  F00C         	call	_lcdInst
  2479                           
  2480                           ;lcd.c: 71: lcdInst(0b00101000);
  2481  00169C  0E28               	movlw	40
  2482  00169E  EC56  F00C         	call	_lcdInst
  2483                           
  2484                           ;lcd.c: 72: lcdInst(0b00001111);
  2485  0016A2  0E0F               	movlw	15
  2486  0016A4  EC56  F00C         	call	_lcdInst
  2487                           
  2488                           ;lcd.c: 73: lcdInst(0b00000110);
  2489  0016A8  0E06               	movlw	6
  2490  0016AA  EC56  F00C         	call	_lcdInst
  2491                           
  2492                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  2493  0016AE  0E01               	movlw	1
  2494  0016B0  EC56  F00C         	call	_lcdInst
  2495  0016B4  0E27               	movlw	39
  2496  0016B6  6E26               	movwf	??_initLCD& (0+255),c
  2497  0016B8  0EF5               	movlw	245
  2498  0016BA                     u1017:
  2499  0016BA  2EE8               	decfsz	wreg,f,c
  2500  0016BC  D7FE               	bra	u1017
  2501  0016BE  2E26               	decfsz	??_initLCD& (0+255),f,c
  2502  0016C0  D7FC               	bra	u1017
  2503  0016C2  F000               	nop	
  2504                           
  2505                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2506  0016C4  0E0F               	movlw	15
  2507  0016C6  EC56  F00C         	call	_lcdInst
  2508  0016CA  0012               	return		;funcret
  2509  0016CC                     __end_of_initLCD:
  2510                           	opt stack 0
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           intcon3	equ	0xFF0
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           fsr1l	equ	0xFE1
  2523                           postinc2	equ	0xFDE
  2524                           postdec2	equ	0xFDD
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _lcdInst *****************
  2530 ;; Defined at:
  2531 ;;		line 11 in file "lcd.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  data            1    wreg     unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  data            1    2[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        1 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    1
  2552 ;; This function calls:
  2553 ;;		_lcdNibble
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;;		_initLCD
  2557 ;;		_lcd_set_cursor
  2558 ;;		_lcd_shift_cursor
  2559 ;;		_lcd_shift_display
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text13
  2564  0018AC                     __ptext13:
  2565                           	opt stack 0
  2566  0018AC                     _lcdInst:
  2567                           	opt stack 29
  2568                           
  2569                           ;incstack = 0
  2570                           ;lcdInst@data stored from wreg
  2571  0018AC  6E25               	movwf	lcdInst@data,c
  2572                           
  2573                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2574  0018AE  948C               	bcf	3980,2,c	;volatile
  2575                           
  2576                           ;lcd.c: 20: lcdNibble(data);
  2577  0018B0  5025               	movf	lcdInst@data,w,c
  2578  0018B2  ECD8  F00A         	call	_lcdNibble
  2579                           
  2580                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2581  0018B6  0E42               	movlw	66
  2582  0018B8                     u1027:
  2583  0018B8  2EE8               	decfsz	wreg,f,c
  2584  0018BA  D7FE               	bra	u1027
  2585  0018BC  D000               	nop2	
  2586  0018BE  0012               	return		;funcret
  2587  0018C0                     __end_of_lcdInst:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           intcon3	equ	0xFF0
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postdec1	equ	0xFE5
  2600                           fsr1l	equ	0xFE1
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _lcdNibble *****************
  2608 ;; Defined at:
  2609 ;;		line 37 in file "lcd.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  data            1    wreg     unsigned char 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  data            1    1[COMRAM] unsigned char 
  2614 ;;  temp            1    0[COMRAM] unsigned char 
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, status,2, status,0
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;Total ram usage:        2 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_lcdInst
  2634 ;;		_putch
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text14
  2639  0015B0                     __ptext14:
  2640                           	opt stack 0
  2641  0015B0                     _lcdNibble:
  2642                           	opt stack 29
  2643                           
  2644                           ;incstack = 0
  2645                           ;lcdNibble@data stored from wreg
  2646  0015B0  6E24               	movwf	lcdNibble@data,c
  2647                           
  2648                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2649  0015B2  5024               	movf	lcdNibble@data,w,c
  2650  0015B4  0BF0               	andlw	240
  2651  0015B6  6E23               	movwf	lcdNibble@temp,c
  2652                           
  2653                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2654  0015B8  508C               	movf	3980,w,c	;volatile
  2655  0015BA  0B0F               	andlw	15
  2656  0015BC  6E8C               	movwf	3980,c	;volatile
  2657                           
  2658                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2659  0015BE  5023               	movf	lcdNibble@temp,w,c
  2660  0015C0  108C               	iorwf	3980,w,c	;volatile
  2661  0015C2  6E8C               	movwf	3980,c	;volatile
  2662                           
  2663                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2664  0015C4  0E00               	movlw	0
  2665  0015C6  BEF2               	btfsc	intcon,7,c	;volatile
  2666  0015C8  0E01               	movlw	1
  2667  0015CA  6E49               	movwf	lcd@LCDinterruptState,c
  2668  0015CC  9EF2               	bcf	intcon,7,c	;volatile
  2669  0015CE  868C               	bsf	3980,3,c	;volatile
  2670  0015D0  0E10               	movlw	16
  2671  0015D2                     u1037:
  2672  0015D2  2EE8               	decfsz	wreg,f,c
  2673  0015D4  D7FE               	bra	u1037
  2674  0015D6  D000               	nop2	
  2675  0015D8  968C               	bcf	3980,3,c	;volatile
  2676  0015DA  0E42               	movlw	66
  2677  0015DC                     u1047:
  2678  0015DC  2EE8               	decfsz	wreg,f,c
  2679  0015DE  D7FE               	bra	u1047
  2680  0015E0  D000               	nop2	
  2681  0015E2  B049               	btfsc	lcd@LCDinterruptState,0,c
  2682  0015E4  D002               	bra	u15
  2683  0015E6  9EF2               	bcf	intcon,7,c	;volatile
  2684  0015E8  D001               	bra	u16
  2685  0015EA                     u15:
  2686  0015EA  8EF2               	bsf	intcon,7,c	;volatile
  2687  0015EC                     u16:
  2688                           
  2689                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2690  0015EC  3824               	swapf	lcdNibble@data,w,c
  2691  0015EE  0BF0               	andlw	240
  2692  0015F0  6E24               	movwf	lcdNibble@data,c
  2693                           
  2694                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2695  0015F2  5024               	movf	lcdNibble@data,w,c
  2696  0015F4  0BF0               	andlw	240
  2697  0015F6  6E23               	movwf	lcdNibble@temp,c
  2698                           
  2699                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2700  0015F8  508C               	movf	3980,w,c	;volatile
  2701  0015FA  0B0F               	andlw	15
  2702  0015FC  6E8C               	movwf	3980,c	;volatile
  2703                           
  2704                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2705  0015FE  5023               	movf	lcdNibble@temp,w,c
  2706  001600  108C               	iorwf	3980,w,c	;volatile
  2707  001602  6E8C               	movwf	3980,c	;volatile
  2708                           
  2709                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2710  001604  0E00               	movlw	0
  2711  001606  BEF2               	btfsc	intcon,7,c	;volatile
  2712  001608  0E01               	movlw	1
  2713  00160A  6E49               	movwf	lcd@LCDinterruptState,c
  2714  00160C  9EF2               	bcf	intcon,7,c	;volatile
  2715  00160E  868C               	bsf	3980,3,c	;volatile
  2716  001610  0E10               	movlw	16
  2717  001612                     u1057:
  2718  001612  2EE8               	decfsz	wreg,f,c
  2719  001614  D7FE               	bra	u1057
  2720  001616  D000               	nop2	
  2721  001618  968C               	bcf	3980,3,c	;volatile
  2722  00161A  0E42               	movlw	66
  2723  00161C                     u1067:
  2724  00161C  2EE8               	decfsz	wreg,f,c
  2725  00161E  D7FE               	bra	u1067
  2726  001620  D000               	nop2	
  2727  001622  B049               	btfsc	lcd@LCDinterruptState,0,c
  2728  001624  D002               	bra	u25
  2729  001626  9EF2               	bcf	intcon,7,c	;volatile
  2730  001628  D001               	bra	u26
  2731  00162A                     u25:
  2732  00162A  8EF2               	bsf	intcon,7,c	;volatile
  2733  00162C                     u26:
  2734  00162C  0012               	return		;funcret
  2735  00162E                     __end_of_lcdNibble:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           prodh	equ	0xFF4
  2742                           prodl	equ	0xFF3
  2743                           intcon	equ	0xFF2
  2744                           intcon3	equ	0xFF0
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1l	equ	0xFE1
  2749                           postinc2	equ	0xFDE
  2750                           postdec2	equ	0xFDD
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           intcon	equ	0xFF2
  2761                           intcon3	equ	0xFF0
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1l	equ	0xFE1
  2766                           postinc2	equ	0xFDE
  2767                           postdec2	equ	0xFDD
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           status	equ	0xFD8
  2771                           
  2772                           	psect	rparam
  2773  0000                     tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon	equ	0xFF2
  2780                           intcon3	equ	0xFF0
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postdec1	equ	0xFE5
  2784                           fsr1l	equ	0xFE1
  2785                           postinc2	equ	0xFDE
  2786                           postdec2	equ	0xFDD
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8


Data Sizes:
    Strings     55
    Constant    19
    Data        34
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     28      74
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_12(CODE[5]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[9]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[14]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2380
                                             24 COMRAM     4     4      0
                            _initLCD
                            _lcdInst
                       _motorStart_0
                       _motorStart_1
                        _motorStop_0
                        _motorStop_1
                             _printf
                              _putch
                            _readADC
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    2013
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_0
   _motorStart_1
   _motorStop_0
   _motorStop_1
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _putch
     _lcdNibble
   _readADC
   _servoRotate0
   _servoRotate180

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1C      4A       1       58.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      34        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 16:21:39 2018

                      _i 0047                       u15 15EA                       u16 15EC  
                     u25 162A                       u26 162C              __CFG_CPD$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l120 11B2  
                    l122 12EE                      l114 10AE                      l132 1466  
                    l124 1206                      l125 1266                      l117 114A  
                    l127 1346                      l240 14AC                      l128 13EC  
                    l153 16E4                      l145 1750                      l129 1440  
                    l138 17E2                      l155 170E                      l252 1540  
                    l253 158E                      l254 1546                      l246 14D6  
                    l239 149C                      l248 14FE                      l661 164C  
                    l662 1644                      l671 1768                      l672 1760  
                    l665 166C                      l666 1676                      l675 1780  
                    l676 178A             __CFG_CPB$OFF 000000                      u450 1650  
                    u540 152E                      u630 11B0                      u480 176C  
                    u560 1596                      u717 1090                      u670 1354  
                    u807 12C4                      u727 10E6                      u817 12DC  
                    u737 1100                      u690 1452                      u907 1480  
                    u827 1324                      u747 113C                      u917 172E  
                    u837 133E                      u757 1174                      u927 1742  
                    u847 1372                      u767 118E                      u937 16EA  
                    u857 138C                      u777 11F6                      u947 1700  
                    u867 13BA                      u787 1246                      u957 18A4  
                    u877 13DA                      u797 125E                      u967 182E  
                    u887 1420                      u977 184C                      u897 1438  
                    u987 186A                      u997 1888                      _max 0021  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1061 16D4                     l1075 1718                     l1603 1466  
                   l1519 1266                     l1395 1502                     l1557 1354  
                   l1595 1440                     _ADON 007E10                     STR_1 1022  
                   STR_2 1014                     STR_3 1041                     STR_4 1046  
                   STR_5 103C                     STR_6 1046                     STR_7 1041  
                   STR_8 103C                     STR_9 1038                     u1007 1686  
                   u1017 16BA                     u1027 18B8                     u1037 15D2  
                   u1047 15DC                     u1057 1612                     u1067 161C  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 104C  
                   _mode 0041                     fsr2h 000FDA                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000          servoRotate180@i 0024  
          __CFG_MCLRE$ON 000000             ___param_bank 000000         __end_of_LCD_LEFT 100F  
                  ?_main 0023                    STR_10 102E                    STR_11 102E  
                  STR_12 103C          __end_of___lwdiv 1680          __end_of___lwmod 1794  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 18C0           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_readADC 17FE          __end_of_initLCD 16CC  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B                    _array 100B  
                  _putch 1898        _compartment_array 0011                    tablat 000FF5  
      _LCDinterruptState 004A                    status 000FD8         ??_servoRotate180 0023  
         __CFG_PBADEN$ON 000000          __initialization 1794             __end_of_main 1492  
      __end_of_LCD_RIGHT 1010                   ??_main 003B            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   ?_putch 0023                   _INT1IE 007F83  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 0027                ??___lwmod 002E                   clear_0 17BA  
           ?_motorStop_0 0023             ?_motorStop_1 0023                ??_lcdInst 0025  
                 _printf 1492                ??_readADC 0025                ??_initLCD 0026  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 17C0            ___rparam_used 000001           __pcstackCOMRAM 0023  
          __end_of_array 100E            __end_of_putch 18AC       __size_of_lcdNibble 007E  
                ??_putch 0025                  ?_printf 002F     lcd@LCDinterruptState 0049  
                _B_array 0001        __end_of_lcdNibble 162E                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 162E                  ___lwmod 1752  
           __psmallconst 1000                  __pcinit 1794                  __ramtop 1000  
                _lcdInst 18AC                  __ptext0 104C                  __ptext1 1710  
                __ptext2 16CC                  __ptext3 17CA                  __ptext4 1492  
                __ptext5 1898                  __ptext6 1752                  __ptext7 162E  
                __ptext8 1820                  __ptext9 183E          __size_of_printf 011E  
                _readADC 17CA                  _initLCD 1680                  _counter 0045  
   __size_of_motorStop_0 001E     __size_of_motorStop_1 001E                  _dpowers 1001  
          ?_motorStart_0 0023            ?_motorStart_1 0023                _LCD_RIGHT 100F  
   end_of_initialization 17C0    __end_of_LCD_SIZE_HORZ 1012    __end_of_LCD_SIZE_VERT 1011  
          __Lmediumconst 0000            ?_servoRotate0 0023                  printf@c 003A  
                printf@f 002F                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _PORTAbits 000F80  
         ??_motorStart_0 0023           ??_motorStart_1 0023                _TRISAbits 000F92  
              _TRISCbits 000F94                _TRISDbits 000F95               _white_tape 003F  
         ??_servoRotate0 0023  __size_of_servoRotate180 0042            __pidataCOMRAM 17FE  
         __end_of_printf 15B0      start_initialization 1794         __CFG_OSC$INTIO67 000000  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0033              __pbssCOMRAM 003F  
   __end_of_motorStart_0 1898     __end_of_motorStart_1 187A         ___lwdiv@dividend 0023  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 15B0                 ?___lwdiv 0023  
               ?___lwmod 002A                 ?_lcdInst 0023                 ?_readADC 0023  
               ?_initLCD 0023              __smallconst 1000                _counter_2 0043  
   __end_of_servoRotate0 1710         ___lwdiv@quotient 0027           __size_of_putch 0014  
               _LCD_LEFT 100E                 _LATCbits 000F8B                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0023           _servoRotate180 1710  
          ??_motorStop_0 0023            ??_motorStop_1 0023               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0            lcdNibble@data 0024               printf@flag 0036  
          lcdNibble@temp 0023               printf@prec 0037                main@input 003E  
         _LCD_HORZ_LIMIT 1013                copy_data0 17A8                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000   __end_of_servoRotate180 1752  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           readADC@channel 0027  
       __size_of_lcdInst 0014         __size_of_readADC 0034         __size_of_initLCD 004C  
 __end_of_LCD_HORZ_LIMIT 1014      __end_of_motorStop_0 185C      __end_of_motorStop_1 183E  
        ___lwdiv@divisor 0025          ___lwdiv@counter 0029                 __ptext10 185C  
               __ptext11 187A                 __ptext12 1680                 __ptext13 18AC  
               __ptext14 15B0           _LCD_VERT_LIMIT 1012    __size_of_motorStart_0 001E  
  __size_of_motorStart_1 001E            __size_of_main 0446              ??_lcdNibble 0023  
        ?_servoRotate180 0023                printf@val 0038    __size_of_servoRotate0 0044  
              putch@data 0025               _INTCONbits 000FF2             _motorStart_0 187A  
           _motorStart_1 185C   __end_of_LCD_VERT_LIMIT 1013            _LCD_SIZE_HORZ 1011  
       ___lwmod@dividend 002A            _LCD_SIZE_VERT 1010             _servoRotate0 16CC  
               printf@ap 0034              lcdInst@data 0025              _motorStop_0 183E  
            _motorStop_1 1820          ___lwmod@divisor 002C          ___lwmod@counter 002E  
