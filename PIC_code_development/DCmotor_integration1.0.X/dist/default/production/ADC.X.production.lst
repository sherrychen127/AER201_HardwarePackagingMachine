

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 19:22:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4620 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     _dpowers:
    61                           	opt stack 0
    62  001001  0001               	dw	1
    63  001003  000A               	dw	10
    64  001005  0064               	dw	100
    65  001007  03E8               	dw	1000
    66  001009  2710               	dw	10000
    67  00100B                     __end_of_dpowers:
    68                           	opt stack 0
    69  00100B                     _LCD_LEFT:
    70                           	opt stack 0
    71  00100B  00                 	db	0
    72  00100C                     __end_of_LCD_LEFT:
    73                           	opt stack 0
    74  00100C                     _LCD_RIGHT:
    75                           	opt stack 0
    76  00100C  01                 	db	1
    77  00100D                     __end_of_LCD_RIGHT:
    78                           	opt stack 0
    79  00100D                     _LCD_SIZE_VERT:
    80                           	opt stack 0
    81  00100D  02                 	db	2
    82  00100E                     __end_of_LCD_SIZE_VERT:
    83                           	opt stack 0
    84  00100E                     _LCD_SIZE_HORZ:
    85                           	opt stack 0
    86  00100E  10                 	db	16
    87  00100F                     __end_of_LCD_SIZE_HORZ:
    88                           	opt stack 0
    89  00100F                     _LCD_VERT_LIMIT:
    90                           	opt stack 0
    91  00100F  02                 	db	2
    92  001010                     __end_of_LCD_VERT_LIMIT:
    93                           	opt stack 0
    94  001010                     _LCD_HORZ_LIMIT:
    95                           	opt stack 0
    96  001010  28                 	db	40
    97  001011                     __end_of_LCD_HORZ_LIMIT:
    98                           	opt stack 0
    99  0000                     _INTCONbits	set	4082
   100  0000                     _LATDbits	set	3980
   101  0000                     _ADRESL	set	4035
   102  0000                     _ADRESH	set	4036
   103  0000                     _ADCON0bits	set	4034
   104  0000                     _ADCON2bits	set	4032
   105  0000                     _ADCON1	set	4033
   106  0000                     _ADCON0	set	4034
   107  0000                     _TRISE	set	3990
   108  0000                     _TRISD	set	3989
   109  0000                     _TRISC	set	3988
   110  0000                     _TRISB	set	3987
   111  0000                     _TRISA	set	3986
   112  0000                     _LATE	set	3981
   113  0000                     _LATD	set	3980
   114  0000                     _LATC	set	3979
   115  0000                     _LATB	set	3978
   116  0000                     _LATA	set	3977
   117  0000                     _OSCCON	set	4051
   118  0000                     _ADON	set	32272
   119  001011                     STR_1:
   120  001011  6C                 	db	108	;'l'
   121  001012  61                 	db	97	;'a'
   122  001013  6C                 	db	108	;'l'
   123  001014  61                 	db	97	;'a'
   124  001015  00                 	db	0
   125  001016                     STR_2:
   126  001016  25                 	db	37
   127  001017  64                 	db	100	;'d'
   128  001018  00                 	db	0
   129                           
   130                           ; #config settings
   131  001019  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  0013B0                     __pcinit:
   135                           	opt stack 0
   136  0013B0                     start_initialization:
   137                           	opt stack 0
   138  0013B0                     __initialization:
   139                           	opt stack 0
   140                           
   141                           ; Clear objects allocated to COMRAM (6 bytes)
   142  0013B0  6A20               	clrf	(__pbssCOMRAM+5)& (0+255),c
   143  0013B2  6A1F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   144  0013B4  6A1E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   145  0013B6  6A1D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   146  0013B8  6A1C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   147  0013BA  6A1B               	clrf	__pbssCOMRAM& (0+255),c
   148  0013BC                     end_of_initialization:
   149                           	opt stack 0
   150  0013BC                     __end_of__initialization:
   151                           	opt stack 0
   152  0013BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   153  0013BE  6EF8               	movwf	tblptru,c
   154  0013C0  0100               	movlb	0
   155  0013C2  EF9C  F008         	goto	_main	;jump to C main() function
   156                           tblptru	equ	0xFF8
   157                           
   158                           	psect	bssCOMRAM
   159  00001B                     __pbssCOMRAM:
   160                           	opt stack 0
   161  00001B                     _mode:
   162                           	opt stack 0
   163  00001B                     	ds	2
   164  00001D                     _counter:
   165                           	opt stack 0
   166  00001D                     	ds	2
   167  00001F                     lcd@LCDinterruptState:
   168                           	opt stack 0
   169  00001F                     	ds	1
   170  000020                     	ds	1
   171                           tblptru	equ	0xFF8
   172                           
   173                           	psect	cstackCOMRAM
   174  000001                     __pcstackCOMRAM:
   175                           	opt stack 0
   176  000001                     ?_readADC:
   177                           	opt stack 0
   178  000001                     ?___lwdiv:
   179                           	opt stack 0
   180  000001                     lcdNibble@temp:
   181                           	opt stack 0
   182  000001                     ___lwdiv@dividend:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x0
   186  000001                     	ds	1
   187  000002                     lcdNibble@data:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1
   191  000002                     	ds	1
   192  000003                     ??_readADC:
   193  000003                     lcdInst@data:
   194                           	opt stack 0
   195  000003                     putch@data:
   196                           	opt stack 0
   197  000003                     ___lwdiv@divisor:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x2
   201  000003                     	ds	1
   202  000004                     ??_initLCD:
   203                           
   204                           ; 1 bytes @ 0x3
   205  000004                     	ds	1
   206  000005                     readADC@channel:
   207                           	opt stack 0
   208  000005                     ___lwdiv@quotient:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x4
   212  000005                     	ds	2
   213  000007                     ___lwdiv@counter:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  000007                     	ds	1
   218  000008                     ?___lwmod:
   219                           	opt stack 0
   220  000008                     ___lwmod@dividend:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x7
   224  000008                     	ds	2
   225  00000A                     ___lwmod@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x9
   229  00000A                     	ds	2
   230  00000C                     ___lwmod@counter:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0xB
   234  00000C                     	ds	1
   235  00000D                     ?_printf:
   236                           	opt stack 0
   237  00000D                     printf@f:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0xC
   241  00000D                     	ds	4
   242  000011                     ??_printf:
   243                           
   244                           ; 1 bytes @ 0x10
   245  000011                     	ds	1
   246  000012                     printf@ap:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x11
   250  000012                     	ds	2
   251  000014                     printf@flag:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x13
   255  000014                     	ds	1
   256  000015                     printf@prec:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x14
   260  000015                     	ds	1
   261  000016                     printf@val:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x15
   265  000016                     	ds	2
   266  000018                     printf@c:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x17
   270  000018                     	ds	1
   271  000019                     ??_main:
   272                           
   273                           ; 1 bytes @ 0x18
   274  000019                     	ds	2
   275                           tblptru	equ	0xFF8
   276                           
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 27 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : 0/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   300 ;;Total ram usage:        2 bytes
   301 ;; Hardware stack levels required when called:    3
   302 ;; This function calls:
   303 ;;		_initLCD
   304 ;;		_lcdInst
   305 ;;		_printf
   306 ;;		_readADC
   307 ;; This function is called by:
   308 ;;		Startup code after reset
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           	psect	text0
   313  001138                     __ptext0:
   314                           	opt stack 0
   315  001138                     _main:
   316                           	opt stack 28
   317                           
   318                           ;main.c: 31: OSCCON = 0xF2;
   319                           
   320                           ;incstack = 0
   321  001138  0EF2               	movlw	242
   322  00113A  6ED3               	movwf	4051,c	;volatile
   323                           
   324                           ;main.c: 36: LATA = 0x00;
   325  00113C  0E00               	movlw	0
   326  00113E  6E89               	movwf	3977,c	;volatile
   327                           
   328                           ;main.c: 37: LATB = 0x00;
   329  001140  0E00               	movlw	0
   330  001142  6E8A               	movwf	3978,c	;volatile
   331                           
   332                           ;main.c: 38: LATC = 0x00;
   333  001144  0E00               	movlw	0
   334  001146  6E8B               	movwf	3979,c	;volatile
   335                           
   336                           ;main.c: 39: LATD = 0x00;
   337  001148  0E00               	movlw	0
   338  00114A  6E8C               	movwf	3980,c	;volatile
   339                           
   340                           ;main.c: 40: LATE = 0x00;
   341  00114C  0E00               	movlw	0
   342  00114E  6E8D               	movwf	3981,c	;volatile
   343                           
   344                           ;main.c: 44: TRISA = 0xFF;
   345  001150  6892               	setf	3986,c	;volatile
   346                           
   347                           ;main.c: 45: TRISB = 0xFF;
   348  001152  6893               	setf	3987,c	;volatile
   349                           
   350                           ;main.c: 46: TRISC = 0x00;
   351  001154  0E00               	movlw	0
   352  001156  6E94               	movwf	3988,c	;volatile
   353                           
   354                           ;main.c: 47: TRISD = 0x00;
   355  001158  0E00               	movlw	0
   356  00115A  6E95               	movwf	3989,c	;volatile
   357                           
   358                           ;main.c: 48: TRISE = 0x00;
   359  00115C  0E00               	movlw	0
   360  00115E  6E96               	movwf	3990,c	;volatile
   361                           
   362                           ;main.c: 51: ADCON0 = 0x00;
   363  001160  0E00               	movlw	0
   364  001162  6EC2               	movwf	4034,c	;volatile
   365                           
   366                           ;main.c: 52: ADCON1 = 0x0B;
   367  001164  0E0B               	movlw	11
   368  001166  6EC1               	movwf	4033,c	;volatile
   369                           
   370                           ;main.c: 53: ADCON2bits.ADFM = 1;
   371  001168  8EC0               	bsf	4032,7,c	;volatile
   372                           
   373                           ;main.c: 57: initLCD();
   374  00116A  EC77  F009         	call	_initLCD	;wreg free
   375                           
   376                           ;main.c: 58: if (mode == 0){
   377  00116E  501B               	movf	_mode,w,c
   378  001170  101C               	iorwf	_mode+1,w,c
   379  001172  A4D8               	btfss	status,2,c
   380  001174  D01F               	goto	l69
   381                           
   382                           ;main.c: 59: printf("lala");
   383  001176  0E11               	movlw	low STR_1
   384  001178  6E0D               	movwf	printf@f,c
   385  00117A  0E10               	movlw	high STR_1
   386  00117C  6E0E               	movwf	printf@f+1,c
   387  00117E  EC0D  F008         	call	_printf	;wreg free
   388                           
   389                           ;main.c: 60: _delay((unsigned long)((5000)*(8000000/4000.0)));
   390  001182  0E33               	movlw	51
   391  001184  6E1A               	movwf	(??_main+1)& (0+255),c
   392  001186  0EBB               	movlw	187
   393  001188  6E19               	movwf	??_main& (0+255),c
   394  00118A  0EE0               	movlw	224
   395  00118C                     u477:
   396  00118C  2EE8               	decfsz	wreg,f,c
   397  00118E  D7FE               	bra	u477
   398  001190  2E19               	decfsz	??_main& (0+255),f,c
   399  001192  D7FC               	bra	u477
   400  001194  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   401  001196  D7FA               	bra	u477
   402                           
   403                           ;main.c: 61: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   404  001198  0E80               	movlw	128
   405  00119A  ECED  F009         	call	_lcdInst
   406  00119E  0E0D               	movlw	13
   407  0011A0  6E19               	movwf	??_main& (0+255),c
   408  0011A2  0EFC               	movlw	252
   409  0011A4                     u487:
   410  0011A4  2EE8               	decfsz	wreg,f,c
   411  0011A6  D7FE               	bra	u487
   412  0011A8  2E19               	decfsz	??_main& (0+255),f,c
   413  0011AA  D7FC               	bra	u487
   414                           
   415                           ;main.c: 62: mode =1;
   416  0011AC  0E00               	movlw	0
   417  0011AE  6E1C               	movwf	_mode+1,c
   418  0011B0  0E01               	movlw	1
   419  0011B2  6E1B               	movwf	_mode,c
   420  0011B4                     l69:
   421                           
   422                           ;main.c: 63: }
   423                           ;main.c: 66: if (mode == 1){
   424  0011B4  041B               	decf	_mode,w,c
   425  0011B6  101C               	iorwf	_mode+1,w,c
   426  0011B8  A4D8               	btfss	status,2,c
   427  0011BA  EF00  F000         	goto	start
   428  0011BE                     u440:
   429  0011BE                     l1153:
   430                           
   431                           ;main.c: 72: if (mode == 1){
   432  0011BE  041B               	decf	_mode,w,c
   433  0011C0  101C               	iorwf	_mode+1,w,c
   434  0011C2  A4D8               	btfss	status,2,c
   435  0011C4  D7FC               	goto	u440
   436                           
   437                           ;main.c: 84: if (readADC(2)<250){
   438  0011C6  0E02               	movlw	2
   439  0011C8  ECBE  F009         	call	_readADC
   440  0011CC  5002               	movf	?_readADC+1,w,c
   441  0011CE  E1F7               	bnz	l1153
   442  0011D0  0EFA               	movlw	250
   443  0011D2  5C01               	subwf	?_readADC,w,c
   444  0011D4  B0D8               	btfsc	status,0,c
   445  0011D6  D7F3               	goto	u440
   446                           
   447                           ;main.c: 86: counter++;
   448  0011D8  4A1D               	infsnz	_counter,f,c
   449  0011DA  2A1E               	incf	_counter+1,f,c
   450                           
   451                           ;main.c: 88: printf("%d",counter);
   452  0011DC  0E16               	movlw	low STR_2
   453  0011DE  6E0D               	movwf	printf@f,c
   454  0011E0  0E10               	movlw	high STR_2
   455  0011E2  6E0E               	movwf	printf@f+1,c
   456  0011E4  C01D  F00F         	movff	_counter,?_printf+2
   457  0011E8  C01E  F010         	movff	_counter+1,?_printf+3
   458  0011EC  EC0D  F008         	call	_printf	;wreg free
   459                           
   460                           ;main.c: 89: _delay((unsigned long)((100)*(8000000/4000.0)));
   461  0011F0  0E02               	movlw	2
   462  0011F2  6E1A               	movwf	(??_main+1)& (0+255),c
   463  0011F4  0E04               	movlw	4
   464  0011F6  6E19               	movwf	??_main& (0+255),c
   465  0011F8  0EBA               	movlw	186
   466  0011FA                     u497:
   467  0011FA  2EE8               	decfsz	wreg,f,c
   468  0011FC  D7FE               	bra	u497
   469  0011FE  2E19               	decfsz	??_main& (0+255),f,c
   470  001200  D7FC               	bra	u497
   471  001202  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   472  001204  D7FA               	bra	u497
   473  001206  D000               	nop2	
   474                           
   475                           ;main.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   476  001208  0E80               	movlw	128
   477  00120A  ECED  F009         	call	_lcdInst
   478  00120E  0E0D               	movlw	13
   479  001210  6E19               	movwf	??_main& (0+255),c
   480  001212  0EFC               	movlw	252
   481  001214                     u507:
   482  001214  2EE8               	decfsz	wreg,f,c
   483  001216  D7FE               	bra	u507
   484  001218  2E19               	decfsz	??_main& (0+255),f,c
   485  00121A  D7FC               	bra	u507
   486  00121C  D7D0               	goto	u440
   487  00121E                     __end_of_main:
   488                           	opt stack 0
   489                           tblptru	equ	0xFF8
   490                           wreg	equ	0xFE8
   491                           status	equ	0xFD8
   492                           
   493 ;; *************** function _readADC *****************
   494 ;; Defined at:
   495 ;;		line 109 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;  channel         1    wreg     unsigned char 
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  channel         1    4[COMRAM] unsigned char 
   500 ;; Return value:  Size  Location     Type
   501 ;;                  2    0[COMRAM] unsigned short 
   502 ;; Registers used:
   503 ;;		wreg, status,2, status,0
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   509 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;Total ram usage:        5 bytes
   514 ;; Hardware stack levels used:    1
   515 ;; This function calls:
   516 ;;		Nothing
   517 ;; This function is called by:
   518 ;;		_main
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text1
   523  00137C                     __ptext1:
   524                           	opt stack 0
   525  00137C                     _readADC:
   526                           	opt stack 30
   527                           
   528                           ;incstack = 0
   529                           ;readADC@channel stored from wreg
   530  00137C  6E05               	movwf	readADC@channel,c
   531                           
   532                           ;main.c: 118: ADCON0 = (channel & 0x0F) << 2;
   533  00137E  C005  F003         	movff	readADC@channel,??_readADC
   534  001382  0E0F               	movlw	15
   535  001384  1603               	andwf	??_readADC,f,c
   536  001386  90D8               	bcf	status,0,c
   537  001388  3603               	rlcf	??_readADC,f,c
   538  00138A  90D8               	bcf	status,0,c
   539  00138C  3403               	rlcf	??_readADC,w,c
   540  00138E  6EC2               	movwf	4034,c	;volatile
   541                           
   542                           ;main.c: 119: ADON = 1;
   543  001390  80C2               	bsf	4034,0,c	;volatile
   544                           
   545                           ;main.c: 120: ADCON0bits.GO = 1;
   546  001392  82C2               	bsf	4034,1,c	;volatile
   547  001394  B2C2               	btfsc	4034,1,c	;volatile
   548  001396  D7FE               	goto	l80
   549                           
   550                           ;main.c: 122: return (ADRESH << 8) | ADRESL;
   551  001398  50C3               	movf	4035,w,c	;volatile
   552  00139A  CFC4 F003          	movff	4036,??_readADC	;volatile
   553  00139E  6A04               	clrf	(??_readADC+1)& (0+255),c
   554  0013A0  C003  F004         	movff	??_readADC,??_readADC+1
   555  0013A4  6A03               	clrf	??_readADC,c
   556  0013A6  1003               	iorwf	??_readADC,w,c
   557  0013A8  6E01               	movwf	?_readADC,c
   558  0013AA  5004               	movf	??_readADC+1,w,c
   559  0013AC  6E02               	movwf	?_readADC+1,c
   560  0013AE  0012               	return	
   561  0013B0                     __end_of_readADC:
   562                           	opt stack 0
   563                           tblptru	equ	0xFF8
   564                           wreg	equ	0xFE8
   565                           status	equ	0xFD8
   566                           
   567 ;; *************** function _printf *****************
   568 ;; Defined at:
   569 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  f               2   12[COMRAM] PTR const unsigned char 
   572 ;;		 -> STR_2(3), STR_1(5), 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;  tmpval          4    0        struct .
   575 ;;  cp              3    0        PTR const unsigned char 
   576 ;;  val             2   21[COMRAM] unsigned int 
   577 ;;  ap              2   17[COMRAM] PTR void [1]
   578 ;;		 -> ?_printf(2), 
   579 ;;  len             2    0        unsigned int 
   580 ;;  c               1   23[COMRAM] char 
   581 ;;  prec            1   20[COMRAM] char 
   582 ;;  flag            1   19[COMRAM] unsigned char 
   583 ;; Return value:  Size  Location     Type
   584 ;;                  2   12[COMRAM] int 
   585 ;; Registers used:
   586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;Total ram usage:       12 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    2
   599 ;; This function calls:
   600 ;;		___lwdiv
   601 ;;		___lwmod
   602 ;;		_putch
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text2
   609  00101A                     __ptext2:
   610                           	opt stack 0
   611  00101A                     _printf:
   612                           	opt stack 28
   613                           
   614                           ;doprnt.c: 466: va_list ap;
   615                           ;doprnt.c: 499: signed char c;
   616                           ;doprnt.c: 506: signed char prec;
   617                           ;doprnt.c: 508: unsigned char flag;
   618                           ;doprnt.c: 523: union {
   619                           ;doprnt.c: 524: unsigned long vd;
   620                           ;doprnt.c: 525: double integ;
   621                           ;doprnt.c: 526: } tmpval;
   622                           ;doprnt.c: 528: unsigned int val;
   623                           ;doprnt.c: 529: unsigned len;
   624                           ;doprnt.c: 530: const char * cp;
   625                           ;doprnt.c: 533: *ap = __va_start();
   626                           
   627                           ;incstack = 0
   628  00101A  0E0F               	movlw	low (?_printf+2)
   629  00101C  6E12               	movwf	printf@ap,c
   630  00101E  0E00               	movlw	high (?_printf+2)
   631  001020  6E13               	movwf	printf@ap+1,c
   632                           
   633                           ;doprnt.c: 536: while(c = *f++) {
   634  001022  D07D               	goto	u400
   635  001024                     
   636                           ;doprnt.c: 538: if(c != '%')
   637  001024  0E25               	movlw	37
   638  001026  1818               	xorwf	printf@c,w,c
   639  001028  B4D8               	btfsc	status,2,c
   640  00102A  D004               	goto	l150
   641                           
   642                           ;doprnt.c: 540: {
   643                           ;doprnt.c: 541: (putch(c) );
   644  00102C  5018               	movf	printf@c,w,c
   645  00102E  ECE3  F009         	call	_putch
   646                           
   647                           ;doprnt.c: 542: continue;
   648  001032  D075               	goto	u400
   649  001034                     l150:
   650                           
   651                           ;doprnt.c: 543: }
   652                           ;doprnt.c: 548: flag = 0;
   653  001034  0E00               	movlw	0
   654  001036  6E14               	movwf	printf@flag,c
   655                           
   656                           ;doprnt.c: 822: }
   657                           
   658                           ;doprnt.c: 813: continue;
   659                           
   660                           ;doprnt.c: 802: default:
   661                           
   662                           ;doprnt.c: 698: case 'i':
   663                           ;doprnt.c: 699: break;
   664                           
   665                           ;doprnt.c: 697: case 'd':
   666                           
   667                           ;doprnt.c: 638: goto alldone;
   668                           
   669                           ;doprnt.c: 637: case 0:
   670                           
   671                           ;doprnt.c: 635: switch(c = *f++) {
   672  001038  C00D  FFF6         	movff	printf@f,tblptrl
   673  00103C  C00E  FFF7         	movff	printf@f+1,tblptrh
   674  001040  4A0D               	infsnz	printf@f,f,c
   675  001042  2A0E               	incf	printf@f+1,f,c
   676  001044                     	if	0	;tblptru may be non-zero
   677  001044                     	endif
   678  001044                     	if	0	;tblptru may be non-zero
   679  001044                     	endif
   680  001044  0008               	tblrd		*
   681  001046  CFF5 F018          	movff	tablat,printf@c
   682  00104A  5018               	movf	printf@c,w,c
   683                           
   684                           ; Switch size 1, requested type "space"
   685                           ; Number of cases is 3, Range of values is 0 to 105
   686                           ; switch strategies available:
   687                           ; Name         Instructions Cycles
   688                           ; simple_byte           10     6 (average)
   689                           ;	Chosen strategy is simple_byte
   690  00104C  0A00               	xorlw	0	; case 0
   691  00104E  B4D8               	btfsc	status,2,c
   692  001050  0012               	return	
   693  001052  0A64               	xorlw	100	; case 100
   694  001054  B4D8               	btfsc	status,2,c
   695  001056  D003               	goto	l156
   696  001058  0A0D               	xorlw	13	; case 105
   697  00105A  A4D8               	btfss	status,2,c
   698  00105C  D060               	goto	u400
   699  00105E                     l156:
   700                           
   701                           ;doprnt.c: 1253: {
   702                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   703  00105E  C012  FFD9         	movff	printf@ap,fsr2l
   704  001062  C013  FFDA         	movff	printf@ap+1,fsr2h
   705  001066  CFDE F016          	movff	postinc2,printf@val
   706  00106A  CFDD F017          	movff	postdec2,printf@val+1
   707  00106E  0E02               	movlw	2
   708  001070  2612               	addwf	printf@ap,f,c
   709  001072  0E00               	movlw	0
   710  001074  2213               	addwfc	printf@ap+1,f,c
   711                           
   712                           ;doprnt.c: 1261: if((int)val < 0) {
   713  001076  AE17               	btfss	printf@val+1,7,c
   714  001078  D006               	goto	l158
   715                           
   716                           ;doprnt.c: 1262: flag |= 0x03;
   717  00107A  0E03               	movlw	3
   718  00107C  1214               	iorwf	printf@flag,f,c
   719                           
   720                           ;doprnt.c: 1263: val = -val;
   721  00107E  6C16               	negf	printf@val,c
   722  001080  1E17               	comf	printf@val+1,f,c
   723  001082  B0D8               	btfsc	status,0,c
   724  001084  2A17               	incf	printf@val+1,f,c
   725  001086                     l158:
   726                           
   727                           ;doprnt.c: 1264: }
   728                           ;doprnt.c: 1266: }
   729                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   730  001086  0E01               	movlw	1
   731  001088  6E18               	movwf	printf@c,c
   732  00108A                     l1093:
   733  00108A  0E05               	movlw	5
   734  00108C  1818               	xorwf	printf@c,w,c
   735  00108E  B4D8               	btfsc	status,2,c
   736  001090  D012               	goto	u380
   737                           
   738                           ;doprnt.c: 1306: if(val < dpowers[c])
   739  001092  5018               	movf	printf@c,w,c
   740  001094  0D02               	mullw	2
   741  001096  0E01               	movlw	low _dpowers
   742  001098  24F3               	addwf	prodl,w,c
   743  00109A  6EF6               	movwf	tblptrl,c
   744  00109C  0E10               	movlw	high _dpowers
   745  00109E  20F4               	addwfc	prodh,w,c
   746  0010A0  6EF7               	movwf	tblptrh,c
   747  0010A2                     	if	0	;There are less than 3 active tblptr bytes
   748  0010A2                     	endif
   749  0010A2  0009               	tblrd		*+
   750  0010A4  50F5               	movf	tablat,w,c
   751  0010A6  5C16               	subwf	printf@val,w,c
   752  0010A8  0009               	tblrd		*+
   753  0010AA  50F5               	movf	tablat,w,c
   754  0010AC  5817               	subwfb	printf@val+1,w,c
   755  0010AE  A0D8               	btfss	status,0,c
   756  0010B0  D002               	goto	u380
   757                           
   758                           ;doprnt.c: 1307: break;
   759  0010B2  2A18               	incf	printf@c,f,c
   760  0010B4  D7EA               	goto	l1093
   761  0010B6                     u380:
   762                           
   763                           ;doprnt.c: 1422: {
   764                           ;doprnt.c: 1438: if(flag & 0x03)
   765  0010B6  C014  F011         	movff	printf@flag,??_printf
   766  0010BA  0E03               	movlw	3
   767  0010BC  1611               	andwf	??_printf,f,c
   768  0010BE  B4D8               	btfsc	status,2,c
   769  0010C0  D003               	goto	l162
   770                           
   771                           ;doprnt.c: 1439: (putch('-') );
   772  0010C2  0E2D               	movlw	45
   773  0010C4  ECE3  F009         	call	_putch
   774  0010C8                     l162:
   775                           
   776                           ;doprnt.c: 1469: }
   777                           ;doprnt.c: 1472: prec = c;
   778  0010C8  C018  F015         	movff	printf@c,printf@prec
   779                           
   780                           ;doprnt.c: 1474: while(prec--) {
   781  0010CC  D024               	goto	l163
   782  0010CE                     
   783                           ;doprnt.c: 1478: {
   784                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   785  0010CE  5015               	movf	printf@prec,w,c
   786  0010D0  0D02               	mullw	2
   787  0010D2  0E01               	movlw	low _dpowers
   788  0010D4  24F3               	addwf	prodl,w,c
   789  0010D6  6EF6               	movwf	tblptrl,c
   790  0010D8  0E10               	movlw	high _dpowers
   791  0010DA  20F4               	addwfc	prodh,w,c
   792  0010DC  6EF7               	movwf	tblptrh,c
   793  0010DE                     	if	0	;There are less than 3 active tblptr bytes
   794  0010DE                     	endif
   795  0010DE  0009               	tblrd		*+
   796  0010E0  CFF5 F003          	movff	tablat,___lwdiv@divisor
   797  0010E4  000A               	tblrd		*-
   798  0010E6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   799  0010EA  C016  F001         	movff	printf@val,___lwdiv@dividend
   800  0010EE  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   801  0010F2  EC4E  F009         	call	___lwdiv	;wreg free
   802  0010F6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   803  0010FA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   804  0010FE  0E00               	movlw	0
   805  001100  6E0B               	movwf	___lwmod@divisor+1,c
   806  001102  0E0A               	movlw	10
   807  001104  6E0A               	movwf	___lwmod@divisor,c
   808  001106  EC9D  F009         	call	___lwmod	;wreg free
   809  00110A  5008               	movf	?___lwmod,w,c
   810  00110C  0F30               	addlw	48
   811  00110E  6E18               	movwf	printf@c,c
   812                           
   813                           ;doprnt.c: 1523: }
   814                           ;doprnt.c: 1524: (putch(c) );
   815  001110  5018               	movf	printf@c,w,c
   816  001112  ECE3  F009         	call	_putch
   817  001116                     l163:
   818  001116  0615               	decf	printf@prec,f,c
   819  001118  2815               	incf	printf@prec,w,c
   820  00111A  A4D8               	btfss	status,2,c
   821  00111C  D7D8               	goto	l164
   822  00111E                     u400:
   823  00111E  C00D  FFF6         	movff	printf@f,tblptrl
   824  001122  C00E  FFF7         	movff	printf@f+1,tblptrh
   825  001126  4A0D               	infsnz	printf@f,f,c
   826  001128  2A0E               	incf	printf@f+1,f,c
   827  00112A                     	if	0	;tblptru may be non-zero
   828  00112A                     	endif
   829  00112A                     	if	0	;tblptru may be non-zero
   830  00112A                     	endif
   831  00112A  0008               	tblrd		*
   832  00112C  CFF5 F018          	movff	tablat,printf@c
   833  001130  5018               	movf	printf@c,w,c
   834  001132  B4D8               	btfsc	status,2,c
   835  001134  0012               	return	
   836  001136  D776               	goto	l149
   837  001138                     __end_of_printf:
   838                           	opt stack 0
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           prodh	equ	0xFF4
   844                           prodl	equ	0xFF3
   845                           wreg	equ	0xFE8
   846                           postinc2	equ	0xFDE
   847                           postdec2	equ	0xFDD
   848                           fsr2h	equ	0xFDA
   849                           fsr2l	equ	0xFD9
   850                           status	equ	0xFD8
   851                           
   852 ;; *************** function _putch *****************
   853 ;; Defined at:
   854 ;;		line 24 in file "lcd.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  data            1    wreg     unsigned char 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  data            1    2[COMRAM] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, status,2, status,0, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;Total ram usage:        1 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    1
   875 ;; This function calls:
   876 ;;		_lcdNibble
   877 ;; This function is called by:
   878 ;;		_printf
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           	psect	text3
   883  0013C6                     __ptext3:
   884                           	opt stack 0
   885  0013C6                     _putch:
   886                           	opt stack 28
   887                           
   888                           ;incstack = 0
   889                           ;putch@data stored from wreg
   890  0013C6  6E03               	movwf	putch@data,c
   891                           
   892                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   893  0013C8  848C               	bsf	3980,2,c	;volatile
   894                           
   895                           ;lcd.c: 33: lcdNibble(data);
   896  0013CA  5003               	movf	putch@data,w,c
   897  0013CC  EC0F  F009         	call	_lcdNibble
   898                           
   899                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   900  0013D0  0E42               	movlw	66
   901  0013D2                     u517:
   902  0013D2  2EE8               	decfsz	wreg,f,c
   903  0013D4  D7FE               	bra	u517
   904  0013D6  D000               	nop2	
   905  0013D8  0012               	return		;funcret
   906  0013DA                     __end_of_putch:
   907                           	opt stack 0
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           prodh	equ	0xFF4
   913                           prodl	equ	0xFF3
   914                           wreg	equ	0xFE8
   915                           postinc2	equ	0xFDE
   916                           postdec2	equ	0xFDD
   917                           fsr2h	equ	0xFDA
   918                           fsr2l	equ	0xFD9
   919                           status	equ	0xFD8
   920                           
   921 ;; *************** function ___lwmod *****************
   922 ;; Defined at:
   923 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  dividend        2    7[COMRAM] unsigned int 
   926 ;;  divisor         2    9[COMRAM] unsigned int 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  counter         1   11[COMRAM] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  2    7[COMRAM] unsigned int 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        5 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_printf
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text4
   952  00133A                     __ptext4:
   953                           	opt stack 0
   954  00133A                     ___lwmod:
   955                           	opt stack 29
   956                           
   957                           ;incstack = 0
   958  00133A  500A               	movf	___lwmod@divisor,w,c
   959  00133C  100B               	iorwf	___lwmod@divisor+1,w,c
   960  00133E  B4D8               	btfsc	status,2,c
   961  001340  D018               	goto	l586
   962  001342  0E01               	movlw	1
   963  001344  6E0C               	movwf	___lwmod@counter,c
   964  001346  D004               	goto	l581
   965  001348  90D8               	bcf	status,0,c
   966  00134A  360A               	rlcf	___lwmod@divisor,f,c
   967  00134C  360B               	rlcf	___lwmod@divisor+1,f,c
   968  00134E  2A0C               	incf	___lwmod@counter,f,c
   969  001350                     l581:
   970  001350  AE0B               	btfss	___lwmod@divisor+1,7,c
   971  001352  D7FA               	goto	l582
   972  001354                     u320:
   973  001354  500A               	movf	___lwmod@divisor,w,c
   974  001356  5C08               	subwf	___lwmod@dividend,w,c
   975  001358  500B               	movf	___lwmod@divisor+1,w,c
   976  00135A  5809               	subwfb	___lwmod@dividend+1,w,c
   977  00135C  A0D8               	btfss	status,0,c
   978  00135E  D004               	goto	l585
   979  001360  500A               	movf	___lwmod@divisor,w,c
   980  001362  5E08               	subwf	___lwmod@dividend,f,c
   981  001364  500B               	movf	___lwmod@divisor+1,w,c
   982  001366  5A09               	subwfb	___lwmod@dividend+1,f,c
   983  001368                     l585:
   984  001368  90D8               	bcf	status,0,c
   985  00136A  320B               	rrcf	___lwmod@divisor+1,f,c
   986  00136C  320A               	rrcf	___lwmod@divisor,f,c
   987  00136E  2E0C               	decfsz	___lwmod@counter,f,c
   988  001370  D7F1               	goto	u320
   989  001372                     l586:
   990  001372  C008  F008         	movff	___lwmod@dividend,?___lwmod
   991  001376  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   992  00137A  0012               	return		;funcret
   993  00137C                     __end_of___lwmod:
   994                           	opt stack 0
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           prodh	equ	0xFF4
  1000                           prodl	equ	0xFF3
  1001                           wreg	equ	0xFE8
  1002                           postinc2	equ	0xFDE
  1003                           postdec2	equ	0xFDD
  1004                           fsr2h	equ	0xFDA
  1005                           fsr2l	equ	0xFD9
  1006                           status	equ	0xFD8
  1007                           
  1008 ;; *************** function ___lwdiv *****************
  1009 ;; Defined at:
  1010 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  dividend        2    0[COMRAM] unsigned int 
  1013 ;;  divisor         2    2[COMRAM] unsigned int 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  quotient        2    4[COMRAM] unsigned int 
  1016 ;;  counter         1    6[COMRAM] unsigned char 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  2    0[COMRAM] unsigned int 
  1019 ;; Registers used:
  1020 ;;		wreg, status,2, status,0
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;Total ram usage:        7 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_printf
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text5
  1040  00129C                     __ptext5:
  1041                           	opt stack 0
  1042  00129C                     ___lwdiv:
  1043                           	opt stack 29
  1044                           
  1045                           ;incstack = 0
  1046  00129C  0E00               	movlw	0
  1047  00129E  6E06               	movwf	___lwdiv@quotient+1,c
  1048  0012A0  0E00               	movlw	0
  1049  0012A2  6E05               	movwf	___lwdiv@quotient,c
  1050  0012A4  5003               	movf	___lwdiv@divisor,w,c
  1051  0012A6  1004               	iorwf	___lwdiv@divisor+1,w,c
  1052  0012A8  B4D8               	btfsc	status,2,c
  1053  0012AA  D01C               	goto	l576
  1054  0012AC  0E01               	movlw	1
  1055  0012AE  6E07               	movwf	___lwdiv@counter,c
  1056  0012B0  D004               	goto	l571
  1057  0012B2  90D8               	bcf	status,0,c
  1058  0012B4  3603               	rlcf	___lwdiv@divisor,f,c
  1059  0012B6  3604               	rlcf	___lwdiv@divisor+1,f,c
  1060  0012B8  2A07               	incf	___lwdiv@counter,f,c
  1061  0012BA                     l571:
  1062  0012BA  AE04               	btfss	___lwdiv@divisor+1,7,c
  1063  0012BC  D7FA               	goto	l572
  1064  0012BE                     u290:
  1065  0012BE  90D8               	bcf	status,0,c
  1066  0012C0  3605               	rlcf	___lwdiv@quotient,f,c
  1067  0012C2  3606               	rlcf	___lwdiv@quotient+1,f,c
  1068  0012C4  5003               	movf	___lwdiv@divisor,w,c
  1069  0012C6  5C01               	subwf	___lwdiv@dividend,w,c
  1070  0012C8  5004               	movf	___lwdiv@divisor+1,w,c
  1071  0012CA  5802               	subwfb	___lwdiv@dividend+1,w,c
  1072  0012CC  A0D8               	btfss	status,0,c
  1073  0012CE  D005               	goto	l575
  1074  0012D0  5003               	movf	___lwdiv@divisor,w,c
  1075  0012D2  5E01               	subwf	___lwdiv@dividend,f,c
  1076  0012D4  5004               	movf	___lwdiv@divisor+1,w,c
  1077  0012D6  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1078  0012D8  8005               	bsf	___lwdiv@quotient,0,c
  1079  0012DA                     l575:
  1080  0012DA  90D8               	bcf	status,0,c
  1081  0012DC  3204               	rrcf	___lwdiv@divisor+1,f,c
  1082  0012DE  3203               	rrcf	___lwdiv@divisor,f,c
  1083  0012E0  2E07               	decfsz	___lwdiv@counter,f,c
  1084  0012E2  D7ED               	goto	u290
  1085  0012E4                     l576:
  1086  0012E4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1087  0012E8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1088  0012EC  0012               	return		;funcret
  1089  0012EE                     __end_of___lwdiv:
  1090                           	opt stack 0
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           prodh	equ	0xFF4
  1096                           prodl	equ	0xFF3
  1097                           wreg	equ	0xFE8
  1098                           postinc2	equ	0xFDE
  1099                           postdec2	equ	0xFDD
  1100                           fsr2h	equ	0xFDA
  1101                           fsr2l	equ	0xFD9
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _initLCD *****************
  1105 ;; Defined at:
  1106 ;;		line 60 in file "lcd.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:        1 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    2
  1127 ;; This function calls:
  1128 ;;		_lcdInst
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text6
  1135  0012EE                     __ptext6:
  1136                           	opt stack 0
  1137  0012EE                     _initLCD:
  1138                           	opt stack 28
  1139                           
  1140                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1141                           
  1142                           ;incstack = 0
  1143  0012EE  0E27               	movlw	39
  1144  0012F0  6E04               	movwf	??_initLCD& (0+255),c
  1145  0012F2  0EF5               	movlw	245
  1146  0012F4                     u527:
  1147  0012F4  2EE8               	decfsz	wreg,f,c
  1148  0012F6  D7FE               	bra	u527
  1149  0012F8  2E04               	decfsz	??_initLCD& (0+255),f,c
  1150  0012FA  D7FC               	bra	u527
  1151  0012FC  F000               	nop	
  1152                           
  1153                           ;lcd.c: 69: lcdInst(0b00110011);
  1154  0012FE  0E33               	movlw	51
  1155  001300  ECED  F009         	call	_lcdInst
  1156                           
  1157                           ;lcd.c: 70: lcdInst(0b00110010);
  1158  001304  0E32               	movlw	50
  1159  001306  ECED  F009         	call	_lcdInst
  1160                           
  1161                           ;lcd.c: 71: lcdInst(0b00101000);
  1162  00130A  0E28               	movlw	40
  1163  00130C  ECED  F009         	call	_lcdInst
  1164                           
  1165                           ;lcd.c: 72: lcdInst(0b00001111);
  1166  001310  0E0F               	movlw	15
  1167  001312  ECED  F009         	call	_lcdInst
  1168                           
  1169                           ;lcd.c: 73: lcdInst(0b00000110);
  1170  001316  0E06               	movlw	6
  1171  001318  ECED  F009         	call	_lcdInst
  1172                           
  1173                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1174  00131C  0E01               	movlw	1
  1175  00131E  ECED  F009         	call	_lcdInst
  1176  001322  0E27               	movlw	39
  1177  001324  6E04               	movwf	??_initLCD& (0+255),c
  1178  001326  0EF5               	movlw	245
  1179  001328                     u537:
  1180  001328  2EE8               	decfsz	wreg,f,c
  1181  00132A  D7FE               	bra	u537
  1182  00132C  2E04               	decfsz	??_initLCD& (0+255),f,c
  1183  00132E  D7FC               	bra	u537
  1184  001330  F000               	nop	
  1185                           
  1186                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1187  001332  0E0F               	movlw	15
  1188  001334  ECED  F009         	call	_lcdInst
  1189  001338  0012               	return		;funcret
  1190  00133A                     __end_of_initLCD:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           prodh	equ	0xFF4
  1197                           prodl	equ	0xFF3
  1198                           wreg	equ	0xFE8
  1199                           postinc2	equ	0xFDE
  1200                           postdec2	equ	0xFDD
  1201                           fsr2h	equ	0xFDA
  1202                           fsr2l	equ	0xFD9
  1203                           status	equ	0xFD8
  1204                           
  1205 ;; *************** function _lcdInst *****************
  1206 ;; Defined at:
  1207 ;;		line 11 in file "lcd.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  data            1    wreg     unsigned char 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  data            1    2[COMRAM] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1225 ;;Total ram usage:        1 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    1
  1228 ;; This function calls:
  1229 ;;		_lcdNibble
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;;		_initLCD
  1233 ;;		_lcd_set_cursor
  1234 ;;		_lcd_shift_cursor
  1235 ;;		_lcd_shift_display
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text7
  1240  0013DA                     __ptext7:
  1241                           	opt stack 0
  1242  0013DA                     _lcdInst:
  1243                           	opt stack 29
  1244                           
  1245                           ;incstack = 0
  1246                           ;lcdInst@data stored from wreg
  1247  0013DA  6E03               	movwf	lcdInst@data,c
  1248                           
  1249                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1250  0013DC  948C               	bcf	3980,2,c	;volatile
  1251                           
  1252                           ;lcd.c: 20: lcdNibble(data);
  1253  0013DE  5003               	movf	lcdInst@data,w,c
  1254  0013E0  EC0F  F009         	call	_lcdNibble
  1255                           
  1256                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1257  0013E4  0E42               	movlw	66
  1258  0013E6                     u547:
  1259  0013E6  2EE8               	decfsz	wreg,f,c
  1260  0013E8  D7FE               	bra	u547
  1261  0013EA  D000               	nop2	
  1262  0013EC  0012               	return		;funcret
  1263  0013EE                     __end_of_lcdInst:
  1264                           	opt stack 0
  1265                           tblptru	equ	0xFF8
  1266                           tblptrh	equ	0xFF7
  1267                           tblptrl	equ	0xFF6
  1268                           tablat	equ	0xFF5
  1269                           prodh	equ	0xFF4
  1270                           prodl	equ	0xFF3
  1271                           wreg	equ	0xFE8
  1272                           postinc2	equ	0xFDE
  1273                           postdec2	equ	0xFDD
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           
  1278 ;; *************** function _lcdNibble *****************
  1279 ;; Defined at:
  1280 ;;		line 37 in file "lcd.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  data            1    wreg     unsigned char 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  data            1    1[COMRAM] unsigned char 
  1285 ;;  temp            1    0[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;Total ram usage:        2 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_lcdInst
  1305 ;;		_putch
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text8
  1310  00121E                     __ptext8:
  1311                           	opt stack 0
  1312  00121E                     _lcdNibble:
  1313                           	opt stack 28
  1314                           
  1315                           ;incstack = 0
  1316                           ;lcdNibble@data stored from wreg
  1317  00121E  6E02               	movwf	lcdNibble@data,c
  1318                           
  1319                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1320  001220  5002               	movf	lcdNibble@data,w,c
  1321  001222  0BF0               	andlw	240
  1322  001224  6E01               	movwf	lcdNibble@temp,c
  1323                           
  1324                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1325  001226  508C               	movf	3980,w,c	;volatile
  1326  001228  0B0F               	andlw	15
  1327  00122A  6E8C               	movwf	3980,c	;volatile
  1328                           
  1329                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1330  00122C  5001               	movf	lcdNibble@temp,w,c
  1331  00122E  108C               	iorwf	3980,w,c	;volatile
  1332  001230  6E8C               	movwf	3980,c	;volatile
  1333                           
  1334                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1335  001232  0E00               	movlw	0
  1336  001234  BEF2               	btfsc	intcon,7,c	;volatile
  1337  001236  0E01               	movlw	1
  1338  001238  6E1F               	movwf	lcd@LCDinterruptState,c
  1339  00123A  9EF2               	bcf	intcon,7,c	;volatile
  1340  00123C  868C               	bsf	3980,3,c	;volatile
  1341  00123E  0E10               	movlw	16
  1342  001240                     u557:
  1343  001240  2EE8               	decfsz	wreg,f,c
  1344  001242  D7FE               	bra	u557
  1345  001244  D000               	nop2	
  1346  001246  968C               	bcf	3980,3,c	;volatile
  1347  001248  0E42               	movlw	66
  1348  00124A                     u567:
  1349  00124A  2EE8               	decfsz	wreg,f,c
  1350  00124C  D7FE               	bra	u567
  1351  00124E  D000               	nop2	
  1352  001250  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1353  001252  D002               	bra	u15
  1354  001254  9EF2               	bcf	intcon,7,c	;volatile
  1355  001256  D001               	bra	u16
  1356  001258                     u15:
  1357  001258  8EF2               	bsf	intcon,7,c	;volatile
  1358  00125A                     u16:
  1359                           
  1360                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1361  00125A  3802               	swapf	lcdNibble@data,w,c
  1362  00125C  0BF0               	andlw	240
  1363  00125E  6E02               	movwf	lcdNibble@data,c
  1364                           
  1365                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1366  001260  5002               	movf	lcdNibble@data,w,c
  1367  001262  0BF0               	andlw	240
  1368  001264  6E01               	movwf	lcdNibble@temp,c
  1369                           
  1370                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1371  001266  508C               	movf	3980,w,c	;volatile
  1372  001268  0B0F               	andlw	15
  1373  00126A  6E8C               	movwf	3980,c	;volatile
  1374                           
  1375                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1376  00126C  5001               	movf	lcdNibble@temp,w,c
  1377  00126E  108C               	iorwf	3980,w,c	;volatile
  1378  001270  6E8C               	movwf	3980,c	;volatile
  1379                           
  1380                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1381  001272  0E00               	movlw	0
  1382  001274  BEF2               	btfsc	intcon,7,c	;volatile
  1383  001276  0E01               	movlw	1
  1384  001278  6E1F               	movwf	lcd@LCDinterruptState,c
  1385  00127A  9EF2               	bcf	intcon,7,c	;volatile
  1386  00127C  868C               	bsf	3980,3,c	;volatile
  1387  00127E  0E10               	movlw	16
  1388  001280                     u577:
  1389  001280  2EE8               	decfsz	wreg,f,c
  1390  001282  D7FE               	bra	u577
  1391  001284  D000               	nop2	
  1392  001286  968C               	bcf	3980,3,c	;volatile
  1393  001288  0E42               	movlw	66
  1394  00128A                     u587:
  1395  00128A  2EE8               	decfsz	wreg,f,c
  1396  00128C  D7FE               	bra	u587
  1397  00128E  D000               	nop2	
  1398  001290  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1399  001292  D002               	bra	u25
  1400  001294  9EF2               	bcf	intcon,7,c	;volatile
  1401  001296  D001               	bra	u26
  1402  001298                     u25:
  1403  001298  8EF2               	bsf	intcon,7,c	;volatile
  1404  00129A                     u26:
  1405  00129A  0012               	return		;funcret
  1406  00129C                     __end_of_lcdNibble:
  1407                           	opt stack 0
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           prodh	equ	0xFF4
  1413                           prodl	equ	0xFF3
  1414                           intcon	equ	0xFF2
  1415                           wreg	equ	0xFE8
  1416                           postinc2	equ	0xFDE
  1417                           postdec2	equ	0xFDD
  1418                           fsr2h	equ	0xFDA
  1419                           fsr2l	equ	0xFD9
  1420                           status	equ	0xFD8
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           wreg	equ	0xFE8
  1429                           postinc2	equ	0xFDE
  1430                           postdec2	equ	0xFDD
  1431                           fsr2h	equ	0xFDA
  1432                           fsr2l	equ	0xFD9
  1433                           status	equ	0xFD8
  1434                           
  1435                           	psect	rparam
  1436  0000                     tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           prodh	equ	0xFF4
  1441                           prodl	equ	0xFF3
  1442                           intcon	equ	0xFF2
  1443                           wreg	equ	0xFE8
  1444                           postinc2	equ	0xFDE
  1445                           postdec2	equ	0xFDD
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    16
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      32
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[3]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1455
                                             24 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1253
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      20       1       25.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      34        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 19:22:39 2018

                     l80 1394                       l69 11B4                       u15 1258  
                     u16 125A                       u25 1298                       u26 129A  
            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l150 1034                      l162 10C8                      l163 1116  
                    l164 10CE                      l156 105E                      l149 1024  
                    l158 1086                      l571 12BA                      l572 12B2  
                    l581 1350                      l582 1348                      l575 12DA  
                    l576 12E4                      l585 1368                      l586 1372  
           __CFG_CPB$OFF 000000                      u320 1354                      u400 111E  
                    u440 11BE                      u290 12BE                      u507 1214  
                    u380 10B6                      u517 13D2                      u527 12F4  
                    u537 1328                      u547 13E6                      u557 1240  
                    u477 118C                      u567 124A                      u487 11A4  
                    u577 1280                      u497 11FA                      u587 128A  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1153 11BE                     l1093 108A                     _ADON 007E10  
                   STR_1 1011                     STR_2 1016                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   _LATE 000F8D                     _main 1138                     _mode 001B  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000         __end_of_LCD_LEFT 100C  
                  ?_main 0001          __end_of___lwdiv 12EE          __end_of___lwmod 137C  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 13EE           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_readADC 13B0          __end_of_initLCD 133A  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B                    _putch 13C6  
                  tablat 000FF5        _LCDinterruptState 0020                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 13B0             __end_of_main 121E  
      __end_of_LCD_RIGHT 100D                   ??_main 0019            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   ?_putch 0001                   _OSCCON 000FD3  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??___lwdiv 0005  
              ??___lwmod 000C                ??_lcdInst 0003                   _printf 101A  
              ??_readADC 0003                ??_initLCD 0004             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 13BC            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_putch 13DA       __size_of_lcdNibble 007E  
                ??_putch 0003                  ?_printf 000D     lcd@LCDinterruptState 001F  
      __end_of_lcdNibble 129C                  __Hparam 0000                  __Lparam 0000  
                ___lwdiv 129C                  ___lwmod 133A             __psmallconst 1000  
                __pcinit 13B0                  __ramtop 1000                  _lcdInst 13DA  
                __ptext0 1138                  __ptext1 137C                  __ptext2 101A  
                __ptext3 13C6                  __ptext4 133A                  __ptext5 129C  
                __ptext6 12EE                  __ptext7 13DA                  __ptext8 121E  
        __size_of_printf 011E                  _readADC 137C                  _initLCD 12EE  
                _counter 001D                  _dpowers 1001                _LCD_RIGHT 100C  
   end_of_initialization 13BC    __end_of_LCD_SIZE_HORZ 100F    __end_of_LCD_SIZE_VERT 100E  
          __Lmediumconst 0000                  printf@c 0018                  printf@f 000D  
                postdec2 000FDD                  postinc2 000FDE           __end_of_printf 1138  
    start_initialization 13B0         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011              __pbssCOMRAM 001B         ___lwdiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 121E                 ?___lwdiv 0001  
               ?___lwmod 0008                 ?_lcdInst 0001                 ?_readADC 0001  
               ?_initLCD 0001              __smallconst 1000         ___lwdiv@quotient 0005  
         __size_of_putch 0014                 _LCD_LEFT 100B                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0            lcdNibble@data 0002               printf@flag 0014  
          lcdNibble@temp 0001               printf@prec 0015           _LCD_HORZ_LIMIT 1010  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           readADC@channel 0005  
       __size_of_lcdInst 0014         __size_of_readADC 0034         __size_of_initLCD 004C  
 __end_of_LCD_HORZ_LIMIT 1011          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
         _LCD_VERT_LIMIT 100F            __size_of_main 00E6              ??_lcdNibble 0001  
              printf@val 0016                putch@data 0003               _INTCONbits 000FF2  
 __end_of_LCD_VERT_LIMIT 1010            _LCD_SIZE_HORZ 100E         ___lwmod@dividend 0008  
          _LCD_SIZE_VERT 100D                 printf@ap 0012              lcdInst@data 0003  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
