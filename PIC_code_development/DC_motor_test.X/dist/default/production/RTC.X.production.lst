

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 16 14:32:25 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4620 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     
    51                           	psect	smallconst
    52  001000                     __psmallconst:
    53                           	opt stack 0
    54  001000  00                 	db	0
    55  001001                     _LCD_LEFT:
    56                           	opt stack 0
    57  001001  00                 	db	0
    58  001002                     __end_of_LCD_LEFT:
    59                           	opt stack 0
    60  001002                     _LCD_RIGHT:
    61                           	opt stack 0
    62  001002  01                 	db	1
    63  001003                     __end_of_LCD_RIGHT:
    64                           	opt stack 0
    65  001003                     _LCD_SIZE_VERT:
    66                           	opt stack 0
    67  001003  02                 	db	2
    68  001004                     __end_of_LCD_SIZE_VERT:
    69                           	opt stack 0
    70  001004                     _LCD_SIZE_HORZ:
    71                           	opt stack 0
    72  001004  10                 	db	16
    73  001005                     __end_of_LCD_SIZE_HORZ:
    74                           	opt stack 0
    75  001005                     _LCD_VERT_LIMIT:
    76                           	opt stack 0
    77  001005  02                 	db	2
    78  001006                     __end_of_LCD_VERT_LIMIT:
    79                           	opt stack 0
    80  001006                     _LCD_HORZ_LIMIT:
    81                           	opt stack 0
    82  001006  28                 	db	40
    83  001007                     __end_of_LCD_HORZ_LIMIT:
    84                           	opt stack 0
    85  0000                     _INTCONbits	set	4082
    86  0000                     _LATD	set	3980
    87  0000                     _LATDbits	set	3980
    88  0000                     _SSPBUF	set	4041
    89  0000                     _SSPCON2bits	set	4037
    90  0000                     _SSPADD	set	4040
    91  0000                     _SSPCON2	set	4037
    92  0000                     _SSPCON1	set	4038
    93  0000                     _SSPSTAT	set	4039
    94  0000                     _TRISCbits	set	3988
    95  0000                     _SSPCON1bits	set	4038
    96  0000                     _TRISB	set	3987
    97  0000                     _RB0	set	31752
    98                           
    99                           ; #config settings
   100  001007  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           	psect	cinit
   103  001106                     __pcinit:
   104                           	opt stack 0
   105  001106                     start_initialization:
   106                           	opt stack 0
   107  001106                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Clear objects allocated to COMRAM (1 bytes)
   111  001106  6A06               	clrf	__pbssCOMRAM& (0+255),c
   112  001108                     end_of_initialization:
   113                           	opt stack 0
   114  001108                     __end_of__initialization:
   115                           	opt stack 0
   116  001108  0E00               	movlw	low (__Lsmallconst shr (0+16))
   117  00110A  6EF8               	movwf	tblptru,c
   118  00110C  0E10               	movlw	high __Lsmallconst
   119  00110E  6EF7               	movwf	tblptrh,c
   120  001110  0100               	movlb	0
   121  001112  EF04  F008         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           
   125                           	psect	bssCOMRAM
   126  000006                     __pbssCOMRAM:
   127                           	opt stack 0
   128  000006                     _LCDinterruptState:
   129                           	opt stack 0
   130  000006                     	ds	1
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           
   134                           	psect	cstackCOMRAM
   135  000001                     __pcstackCOMRAM:
   136                           	opt stack 0
   137  000001                     ??_servoRotate0:
   138  000001                     ??_servoRotate90:
   139  000001                     ??_servoRotate180:
   140  000001                     
   141                           ; 1 bytes @ 0x0
   142  000001                     	ds	1
   143  000002                     servoRotate0@i:
   144                           	opt stack 0
   145  000002                     servoRotate90@i:
   146                           	opt stack 0
   147  000002                     servoRotate180@i:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x1
   151  000002                     	ds	2
   152  000004                     ??_main:
   153                           
   154                           ; 1 bytes @ 0x3
   155  000004                     	ds	2
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           
   159 ;;
   160 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   161 ;;
   162 ;; *************** function _main *****************
   163 ;; Defined at:
   164 ;;		line 52 in file "main.c"
   165 ;; Parameters:    Size  Location     Type
   166 ;;		None
   167 ;; Auto vars:     Size  Location     Type
   168 ;;		None
   169 ;; Return value:  Size  Location     Type
   170 ;;                  1    wreg      void 
   171 ;; Registers used:
   172 ;;		wreg, status,2, status,0, cstack
   173 ;; Tracked objects:
   174 ;;		On entry : 0/0
   175 ;;		On exit  : 0/0
   176 ;;		Unchanged: 0/0
   177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   181 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   182 ;;Total ram usage:        2 bytes
   183 ;; Hardware stack levels required when called:    1
   184 ;; This function calls:
   185 ;;		_servoRotate0
   186 ;;		_servoRotate180
   187 ;;		_servoRotate90
   188 ;; This function is called by:
   189 ;;		Startup code after reset
   190 ;; This function uses a non-reentrant model
   191 ;;
   192                           
   193                           	psect	text0
   194  001008                     __ptext0:
   195                           	opt stack 0
   196  001008                     _main:
   197                           	opt stack 30
   198                           
   199                           ;main.c: 54: TRISB = 0;
   200                           
   201                           ;incstack = 0
   202  001008  0E00               	movlw	0
   203  00100A  6E93               	movwf	3987,c	;volatile
   204  00100C                     
   205                           ;main.c: 56: {
   206                           ;main.c: 57: servoRotate0();
   207  00100C  EC25  F008         	call	_servoRotate0	;wreg free
   208                           
   209                           ;main.c: 58: _delay((unsigned long)((2000)*(40000000/4000.0)));
   210  001010  0E66               	movlw	102
   211  001012  6E05               	movwf	(??_main+1)& (0+255),c
   212  001014  0E76               	movlw	118
   213  001016  6E04               	movwf	??_main& (0+255),c
   214  001018  0EC1               	movlw	193
   215  00101A                     u197:
   216  00101A  2EE8               	decfsz	wreg,f,c
   217  00101C  D7FE               	bra	u197
   218  00101E  2E04               	decfsz	??_main& (0+255),f,c
   219  001020  D7FC               	bra	u197
   220  001022  2E05               	decfsz	(??_main+1)& (0+255),f,c
   221  001024  D7FA               	bra	u197
   222  001026  F000               	nop	
   223                           
   224                           ;main.c: 59: servoRotate90();
   225  001028  EC45  F008         	call	_servoRotate90	;wreg free
   226                           
   227                           ;main.c: 60: _delay((unsigned long)((2000)*(40000000/4000.0)));
   228  00102C  0E66               	movlw	102
   229  00102E  6E05               	movwf	(??_main+1)& (0+255),c
   230  001030  0E76               	movlw	118
   231  001032  6E04               	movwf	??_main& (0+255),c
   232  001034  0EC1               	movlw	193
   233  001036                     u207:
   234  001036  2EE8               	decfsz	wreg,f,c
   235  001038  D7FE               	bra	u207
   236  00103A  2E04               	decfsz	??_main& (0+255),f,c
   237  00103C  D7FC               	bra	u207
   238  00103E  2E05               	decfsz	(??_main+1)& (0+255),f,c
   239  001040  D7FA               	bra	u207
   240  001042  F000               	nop	
   241                           
   242                           ;main.c: 61: servoRotate180();
   243  001044  EC64  F008         	call	_servoRotate180	;wreg free
   244                           
   245                           ;main.c: 62: }while(1);
   246  001048  D7E1               	goto	l26
   247  00104A                     __end_of_main:
   248                           	opt stack 0
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           wreg	equ	0xFE8
   252                           
   253 ;; *************** function _servoRotate90 *****************
   254 ;; Defined at:
   255 ;;		line 28 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;  i               2    1[COMRAM] unsigned int 
   260 ;; Return value:  Size  Location     Type
   261 ;;                  1    wreg      void 
   262 ;; Registers used:
   263 ;;		wreg, status,2, status,0
   264 ;; Tracked objects:
   265 ;;		On entry : 0/0
   266 ;;		On exit  : 0/0
   267 ;;		Unchanged: 0/0
   268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   272 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   273 ;;Total ram usage:        3 bytes
   274 ;; Hardware stack levels used:    1
   275 ;; This function calls:
   276 ;;		Nothing
   277 ;; This function is called by:
   278 ;;		_main
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           	psect	text1
   283  00108A                     __ptext1:
   284                           	opt stack 0
   285  00108A                     _servoRotate90:
   286                           	opt stack 30
   287                           
   288                           ;main.c: 30: unsigned int i;
   289                           ;main.c: 31: for(i=0;i<50;i++)
   290                           
   291                           ;incstack = 0
   292  00108A  0E00               	movlw	0
   293  00108C  6E03               	movwf	servoRotate90@i+1,c
   294  00108E  0E00               	movlw	0
   295  001090  6E02               	movwf	servoRotate90@i,c
   296  001092                     l797:
   297  001092  5003               	movf	servoRotate90@i+1,w,c
   298  001094  E118               	bnz	l16
   299  001096  0E32               	movlw	50
   300  001098  5C02               	subwf	servoRotate90@i,w,c
   301  00109A  B0D8               	btfsc	status,0,c
   302  00109C  0012               	return	
   303                           
   304                           ;main.c: 32: {
   305                           ;main.c: 33: RB0 = 1;
   306  00109E  8081               	bsf	3969,0,c	;volatile
   307                           
   308                           ;main.c: 34: _delay((unsigned long)((1500)*(40000000/4000000.0)));
   309  0010A0  0E14               	movlw	20
   310  0010A2  6E01               	movwf	??_servoRotate90& (0+255),c
   311  0010A4  0E7A               	movlw	122
   312  0010A6                     u217:
   313  0010A6  2EE8               	decfsz	wreg,f,c
   314  0010A8  D7FE               	bra	u217
   315  0010AA  2E01               	decfsz	??_servoRotate90& (0+255),f,c
   316  0010AC  D7FC               	bra	u217
   317                           
   318                           ;main.c: 35: RB0 = 0;
   319  0010AE  9081               	bcf	3969,0,c	;volatile
   320                           
   321                           ;main.c: 36: _delay((unsigned long)((18500)*(40000000/4000000.0)));
   322  0010B0  0EF1               	movlw	241
   323  0010B2  6E01               	movwf	??_servoRotate90& (0+255),c
   324  0010B4  0E41               	movlw	65
   325  0010B6                     u227:
   326  0010B6  2EE8               	decfsz	wreg,f,c
   327  0010B8  D7FE               	bra	u227
   328  0010BA  2E01               	decfsz	??_servoRotate90& (0+255),f,c
   329  0010BC  D7FC               	bra	u227
   330  0010BE  F000               	nop	
   331  0010C0  4A02               	infsnz	servoRotate90@i,f,c
   332  0010C2  2A03               	incf	servoRotate90@i+1,f,c
   333  0010C4  D7E6               	goto	l797
   334  0010C6                     l16:
   335  0010C6  0012               	return		;funcret
   336  0010C8                     __end_of_servoRotate90:
   337                           	opt stack 0
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           wreg	equ	0xFE8
   341                           status	equ	0xFD8
   342                           
   343 ;; *************** function _servoRotate180 *****************
   344 ;; Defined at:
   345 ;;		line 40 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  i               2    1[COMRAM] unsigned int 
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, status,2, status,0
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   361 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   362 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   363 ;;Total ram usage:        3 bytes
   364 ;; Hardware stack levels used:    1
   365 ;; This function calls:
   366 ;;		Nothing
   367 ;; This function is called by:
   368 ;;		_main
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text2
   373  0010C8                     __ptext2:
   374                           	opt stack 0
   375  0010C8                     _servoRotate180:
   376                           	opt stack 30
   377                           
   378                           ;main.c: 42: unsigned int i;
   379                           ;main.c: 43: for(i=0;i<50;i++)
   380                           
   381                           ;incstack = 0
   382  0010C8  0E00               	movlw	0
   383  0010CA  6E03               	movwf	servoRotate180@i+1,c
   384  0010CC  0E00               	movlw	0
   385  0010CE  6E02               	movwf	servoRotate180@i,c
   386  0010D0                     l809:
   387  0010D0  5003               	movf	servoRotate180@i+1,w,c
   388  0010D2  E118               	bnz	l21
   389  0010D4  0E32               	movlw	50
   390  0010D6  5C02               	subwf	servoRotate180@i,w,c
   391  0010D8  B0D8               	btfsc	status,0,c
   392  0010DA  0012               	return	
   393                           
   394                           ;main.c: 44: {
   395                           ;main.c: 45: RB0 = 1;
   396  0010DC  8081               	bsf	3969,0,c	;volatile
   397                           
   398                           ;main.c: 46: _delay((unsigned long)((2200)*(40000000/4000000.0)));
   399  0010DE  0E1D               	movlw	29
   400  0010E0  6E01               	movwf	??_servoRotate180& (0+255),c
   401  0010E2  0E91               	movlw	145
   402  0010E4                     u237:
   403  0010E4  2EE8               	decfsz	wreg,f,c
   404  0010E6  D7FE               	bra	u237
   405  0010E8  2E01               	decfsz	??_servoRotate180& (0+255),f,c
   406  0010EA  D7FC               	bra	u237
   407  0010EC  F000               	nop	
   408                           
   409                           ;main.c: 47: RB0 = 0;
   410  0010EE  9081               	bcf	3969,0,c	;volatile
   411                           
   412                           ;main.c: 48: _delay((unsigned long)((17800)*(40000000/4000000.0)));
   413  0010F0  0EE8               	movlw	232
   414  0010F2  6E01               	movwf	??_servoRotate180& (0+255),c
   415  0010F4  0E2A               	movlw	42
   416  0010F6                     u247:
   417  0010F6  2EE8               	decfsz	wreg,f,c
   418  0010F8  D7FE               	bra	u247
   419  0010FA  2E01               	decfsz	??_servoRotate180& (0+255),f,c
   420  0010FC  D7FC               	bra	u247
   421  0010FE  4A02               	infsnz	servoRotate180@i,f,c
   422  001100  2A03               	incf	servoRotate180@i+1,f,c
   423  001102  D7E6               	goto	l809
   424  001104                     l21:
   425  001104  0012               	return		;funcret
   426  001106                     __end_of_servoRotate180:
   427                           	opt stack 0
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           wreg	equ	0xFE8
   431                           status	equ	0xFD8
   432                           
   433 ;; *************** function _servoRotate0 *****************
   434 ;; Defined at:
   435 ;;		line 16 in file "main.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;  i               2    1[COMRAM] unsigned int 
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, status,2, status,0
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   453 ;;Total ram usage:        3 bytes
   454 ;; Hardware stack levels used:    1
   455 ;; This function calls:
   456 ;;		Nothing
   457 ;; This function is called by:
   458 ;;		_main
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text3
   463  00104A                     __ptext3:
   464                           	opt stack 0
   465  00104A                     _servoRotate0:
   466                           	opt stack 30
   467                           
   468                           ;main.c: 18: unsigned int i;
   469                           ;main.c: 19: for(i=0;i<50;i++)
   470                           
   471                           ;incstack = 0
   472  00104A  0E00               	movlw	0
   473  00104C  6E03               	movwf	servoRotate0@i+1,c
   474  00104E  0E00               	movlw	0
   475  001050  6E02               	movwf	servoRotate0@i,c
   476  001052                     l785:
   477  001052  5003               	movf	servoRotate0@i+1,w,c
   478  001054  E119               	bnz	l11
   479  001056  0E32               	movlw	50
   480  001058  5C02               	subwf	servoRotate0@i,w,c
   481  00105A  B0D8               	btfsc	status,0,c
   482  00105C  0012               	return	
   483                           
   484                           ;main.c: 20: {
   485                           ;main.c: 21: RB0 = 1;
   486  00105E  8081               	bsf	3969,0,c	;volatile
   487                           
   488                           ;main.c: 22: _delay((unsigned long)((800)*(40000000/4000000.0)));
   489  001060  0E0B               	movlw	11
   490  001062  6E01               	movwf	??_servoRotate0& (0+255),c
   491  001064  0E62               	movlw	98
   492  001066                     u257:
   493  001066  2EE8               	decfsz	wreg,f,c
   494  001068  D7FE               	bra	u257
   495  00106A  2E01               	decfsz	??_servoRotate0& (0+255),f,c
   496  00106C  D7FC               	bra	u257
   497  00106E  D000               	nop2	
   498                           
   499                           ;main.c: 23: RB0 = 0;
   500  001070  9081               	bcf	3969,0,c	;volatile
   501                           
   502                           ;main.c: 24: _delay((unsigned long)((19200)*(40000000/4000000.0)));
   503  001072  0EFA               	movlw	250
   504  001074  6E01               	movwf	??_servoRotate0& (0+255),c
   505  001076  0E58               	movlw	88
   506  001078                     u267:
   507  001078  2EE8               	decfsz	wreg,f,c
   508  00107A  D7FE               	bra	u267
   509  00107C  2E01               	decfsz	??_servoRotate0& (0+255),f,c
   510  00107E  D7FC               	bra	u267
   511  001080  D000               	nop2	
   512  001082  4A02               	infsnz	servoRotate0@i,f,c
   513  001084  2A03               	incf	servoRotate0@i+1,f,c
   514  001086  D7E5               	goto	l785
   515  001088                     l11:
   516  001088  0012               	return		;funcret
   517  00108A                     __end_of_servoRotate0:
   518                           	opt stack 0
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           wreg	equ	0xFE8
   522                           status	equ	0xFD8
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           wreg	equ	0xFE8
   526                           status	equ	0xFD8
   527                           
   528                           	psect	rparam
   529  0000                     tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           wreg	equ	0xFE8
   532                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    6
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      5       6
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_servoRotate0
    _main->_servoRotate180
    _main->_servoRotate90

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      90
                                              3 COMRAM     2     2      0
                       _servoRotate0
                     _servoRotate180
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (1) _servoRotate90                                        3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _servoRotate0
   _servoRotate180
   _servoRotate90

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F      5       6       1        4.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       6      34        0.0%
DATA                 0      0       6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 16 14:32:25 2018

                     l11 1088                       l21 1104                       l16 10C6  
                     l26 100C              __CFG_CPD$ON 000000              __CFG_BORV$3 000000  
          servoRotate0@i 0002             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l809 10D0  
                    l785 1052                      l797 1092             __CFG_CPB$OFF 000000  
                    _RB0 007C08                      u207 1036                      u217 10A6  
                    u227 10B6                      u237 10E4                      u247 10F6  
                    u257 1066                      u267 1078                      u197 101A  
                    wreg 000FE8           servoRotate90@i 0002             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _LATD 000F8C                     _main 1008  
                   start 0000            __CFG_IESO$OFF 000000          ??_servoRotate90 0001  
        servoRotate180@i 0002            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_LEFT 1002                    ?_main 0001                    _TRISB 000F93  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000        _LCDinterruptState 0006  
                  status 000FD8         ??_servoRotate180 0001           __CFG_PBADEN$ON 000000  
        __initialization 1106             __end_of_main 104A           __CFG_OSC$HSPLL 000000  
      __end_of_LCD_RIGHT 1003                   ??_main 0004            __activetblptr 000001  
                 _SSPADD 000FC8                   _SSPBUF 000FC9           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000             __mediumconst 0000                   tblptrh 000FF7  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1108  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7                  __Hparam 0000  
                __Lparam 0000    __end_of_servoRotate90 10C8             __psmallconst 1000  
                __pcinit 1106                  __ramtop 1000                  __ptext0 1008  
                __ptext1 108A                  __ptext2 10C8                  __ptext3 104A  
              _LCD_RIGHT 1002     end_of_initialization 1108    __end_of_LCD_SIZE_HORZ 1005  
  __end_of_LCD_SIZE_VERT 1004            ?_servoRotate0 0001                _TRISCbits 000F94  
         ??_servoRotate0 0001  __size_of_servoRotate180 003E      start_initialization 1106  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0006        __CFG_CCP2MX$PORTC 000000  
            __smallconst 1000     __end_of_servoRotate0 108A                 _LCD_LEFT 1001  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000           _servoRotate180 10C8  
         _LCD_HORZ_LIMIT 1006   __size_of_servoRotate90 003E                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000  
 __end_of_servoRotate180 1106   __end_of_LCD_HORZ_LIMIT 1007           _LCD_VERT_LIMIT 1005  
          __size_of_main 0042          ?_servoRotate180 0001            _servoRotate90 108A  
  __size_of_servoRotate0 0040               _INTCONbits 000FF2   __end_of_LCD_VERT_LIMIT 1006  
          _LCD_SIZE_HORZ 1004            _LCD_SIZE_VERT 1003           ?_servoRotate90 0001  
           _servoRotate0 104A              _SSPCON1bits 000FC6              _SSPCON2bits 000FC5  
