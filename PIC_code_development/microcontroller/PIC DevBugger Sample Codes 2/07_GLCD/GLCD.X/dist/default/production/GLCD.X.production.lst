

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr  8 23:59:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4620 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001                     _VIOLET:
    65                           	opt stack 0
    66  001001  00D3               	dw	211
    67  001003  0094               	dw	148
    68  001005                     __end_of_VIOLET:
    69                           	opt stack 0
    70  001005                     _INDIGO:
    71                           	opt stack 0
    72  001005  0082               	dw	130
    73  001007  004B               	dw	75
    74  001009                     __end_of_INDIGO:
    75                           	opt stack 0
    76  001009                     _BLUE:
    77                           	opt stack 0
    78  001009  00FF               	dw	255
    79  00100B  0000               	dw	0
    80  00100D                     __end_of_BLUE:
    81                           	opt stack 0
    82  00100D                     _GREEN:
    83                           	opt stack 0
    84  00100D  FF00               	dw	65280
    85  00100F  0000               	dw	0
    86  001011                     __end_of_GREEN:
    87                           	opt stack 0
    88  001011                     _YELLOW:
    89                           	opt stack 0
    90  001011  FF00               	dw	65280
    91  001013  00FF               	dw	255
    92  001015                     __end_of_YELLOW:
    93                           	opt stack 0
    94  001015                     _ORANGE:
    95                           	opt stack 0
    96  001015  8C00               	dw	35840
    97  001017  00FF               	dw	255
    98  001019                     __end_of_ORANGE:
    99                           	opt stack 0
   100  001019                     _RED:
   101                           	opt stack 0
   102  001019  0000               	dw	0
   103  00101B  00FF               	dw	255
   104  00101D                     __end_of_RED:
   105                           	opt stack 0
   106  00101D                     _WHITE:
   107                           	opt stack 0
   108  00101D  FFFF               	dw	65535
   109  00101F  00FF               	dw	255
   110  001021                     __end_of_WHITE:
   111                           	opt stack 0
   112  001021                     _GREY:
   113                           	opt stack 0
   114  001021  8080               	dw	32896
   115  001023  0080               	dw	128
   116  001025                     __end_of_GREY:
   117                           	opt stack 0
   118  001025                     _BLACK:
   119                           	opt stack 0
   120  001025  0000               	dw	0
   121  001027  0000               	dw	0
   122  001029                     __end_of_BLACK:
   123                           	opt stack 0
   124  001029  C7                 	db	199
   125  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   126                           	opt stack 0
   127  00102A                     GLCD_PIC@INST_VMCTR1:
   128                           	opt stack 0
   129  00102A  C5                 	db	197
   130  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   131                           	opt stack 0
   132  00102B                     GLCD_PIC@INST_PWCTR5:
   133                           	opt stack 0
   134  00102B  C4                 	db	196
   135  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   136                           	opt stack 0
   137  00102C                     GLCD_PIC@INST_PWCTR4:
   138                           	opt stack 0
   139  00102C  C3                 	db	195
   140  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   141                           	opt stack 0
   142  00102D                     GLCD_PIC@INST_PWCTR3:
   143                           	opt stack 0
   144  00102D  C2                 	db	194
   145  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   146                           	opt stack 0
   147  00102E                     GLCD_PIC@INST_PWCTR2:
   148                           	opt stack 0
   149  00102E  C1                 	db	193
   150  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   151                           	opt stack 0
   152  00102F                     GLCD_PIC@INST_PWCTR1:
   153                           	opt stack 0
   154  00102F  C0                 	db	192
   155  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   156                           	opt stack 0
   157  001030                     GLCD_PIC@INST_INVCTR:
   158                           	opt stack 0
   159  001030  B4                 	db	180
   160  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   161                           	opt stack 0
   162  001031                     GLCD_PIC@INST_FRMCTR3:
   163                           	opt stack 0
   164  001031  B3                 	db	179
   165  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   166                           	opt stack 0
   167  001032                     GLCD_PIC@INST_FRMCTR2:
   168                           	opt stack 0
   169  001032  B2                 	db	178
   170  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   171                           	opt stack 0
   172  001033                     GLCD_PIC@INST_FRMCTR1:
   173                           	opt stack 0
   174  001033  B1                 	db	177
   175  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   176                           	opt stack 0
   177  001034                     GLCD_PIC@INST_COLMOD:
   178                           	opt stack 0
   179  001034  3A                 	db	58
   180  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   181                           	opt stack 0
   182  001035  39                 	db	57
   183  001036                     __end_ofGLCD_PIC@INST_IDMON:
   184                           	opt stack 0
   185  001036                     GLCD_PIC@INST_IDMOFF:
   186                           	opt stack 0
   187  001036  38                 	db	56
   188  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   189                           	opt stack 0
   190  001037                     GLCD_PIC@INST_MADCTL:
   191                           	opt stack 0
   192  001037  36                 	db	54
   193  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   194                           	opt stack 0
   195  001038  35                 	db	53
   196  001039                     __end_ofGLCD_PIC@INST_TEON:
   197                           	opt stack 0
   198  001039  34                 	db	52
   199  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   200                           	opt stack 0
   201  00103A  30                 	db	48
   202  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   203                           	opt stack 0
   204  00103B                     GLCD_PIC@INST_RAMWR:
   205                           	opt stack 0
   206  00103B  2C                 	db	44
   207  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   208                           	opt stack 0
   209  00103C                     GLCD_PIC@INST_RASET:
   210                           	opt stack 0
   211  00103C  2B                 	db	43
   212  00103D                     __end_ofGLCD_PIC@INST_RASET:
   213                           	opt stack 0
   214  00103D                     GLCD_PIC@INST_CASET:
   215                           	opt stack 0
   216  00103D  2A                 	db	42
   217  00103E                     __end_ofGLCD_PIC@INST_CASET:
   218                           	opt stack 0
   219  00103E                     GLCD_PIC@INST_DISPON:
   220                           	opt stack 0
   221  00103E  29                 	db	41
   222  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   223                           	opt stack 0
   224  00103F  28                 	db	40
   225  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   226                           	opt stack 0
   227  001040                     GLCD_PIC@INST_GAMSET:
   228                           	opt stack 0
   229  001040  26                 	db	38
   230  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   231                           	opt stack 0
   232  001041  21                 	db	33
   233  001042                     __end_ofGLCD_PIC@INST_INVON:
   234                           	opt stack 0
   235  001042                     GLCD_PIC@INST_INVOFF:
   236                           	opt stack 0
   237  001042  20                 	db	32
   238  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   239                           	opt stack 0
   240  001043                     GLCD_PIC@INST_NORON:
   241                           	opt stack 0
   242  001043  13                 	db	19
   243  001044                     __end_ofGLCD_PIC@INST_NORON:
   244                           	opt stack 0
   245  001044  12                 	db	18
   246  001045                     __end_ofGLCD_PIC@INST_PTLON:
   247                           	opt stack 0
   248  001045                     GLCD_PIC@INST_SLPOUT:
   249                           	opt stack 0
   250  001045  11                 	db	17
   251  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   252                           	opt stack 0
   253  001046  10                 	db	16
   254  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   255                           	opt stack 0
   256  001047                     GLCD_PIC@INST_SWRESET:
   257                           	opt stack 0
   258  001047  01                 	db	1
   259  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   260                           	opt stack 0
   261  001048  00                 	db	0
   262  001049                     __end_ofGLCD_PIC@INST_NOP:
   263                           	opt stack 0
   264  001049  C7                 	db	199
   265  00104A                     __end_of_INST_VMOFCTR2:
   266                           	opt stack 0
   267  00104A  C5                 	db	197
   268  00104B                     __end_of_INST_VMCTR1:
   269                           	opt stack 0
   270  00104B  C4                 	db	196
   271  00104C                     __end_of_INST_PWCTR5:
   272                           	opt stack 0
   273  00104C  C3                 	db	195
   274  00104D                     __end_of_INST_PWCTR4:
   275                           	opt stack 0
   276  00104D  C2                 	db	194
   277  00104E                     __end_of_INST_PWCTR3:
   278                           	opt stack 0
   279  00104E  C1                 	db	193
   280  00104F                     __end_of_INST_PWCTR2:
   281                           	opt stack 0
   282  00104F  C0                 	db	192
   283  001050                     __end_of_INST_PWCTR1:
   284                           	opt stack 0
   285  001050  B4                 	db	180
   286  001051                     __end_of_INST_INVCTR:
   287                           	opt stack 0
   288  001051  B3                 	db	179
   289  001052                     __end_of_INST_FRMCTR3:
   290                           	opt stack 0
   291  001052  B2                 	db	178
   292  001053                     __end_of_INST_FRMCTR2:
   293                           	opt stack 0
   294  001053  B1                 	db	177
   295  001054                     __end_of_INST_FRMCTR1:
   296                           	opt stack 0
   297  001054  3A                 	db	58
   298  001055                     __end_of_INST_COLMOD:
   299                           	opt stack 0
   300  001055  39                 	db	57
   301  001056                     __end_of_INST_IDMON:
   302                           	opt stack 0
   303  001056  38                 	db	56
   304  001057                     __end_of_INST_IDMOFF:
   305                           	opt stack 0
   306  001057  36                 	db	54
   307  001058                     __end_of_INST_MADCTL:
   308                           	opt stack 0
   309  001058  35                 	db	53
   310  001059                     __end_of_INST_TEON:
   311                           	opt stack 0
   312  001059  34                 	db	52
   313  00105A                     __end_of_INST_TEOFF:
   314                           	opt stack 0
   315  00105A  30                 	db	48
   316  00105B                     __end_of_INST_PTLAR:
   317                           	opt stack 0
   318  00105B  2C                 	db	44
   319  00105C                     __end_of_INST_RAMWR:
   320                           	opt stack 0
   321  00105C  2B                 	db	43
   322  00105D                     __end_of_INST_RASET:
   323                           	opt stack 0
   324  00105D  2A                 	db	42
   325  00105E                     __end_of_INST_CASET:
   326                           	opt stack 0
   327  00105E  29                 	db	41
   328  00105F                     __end_of_INST_DISPON:
   329                           	opt stack 0
   330  00105F  28                 	db	40
   331  001060                     __end_of_INST_DISPOFF:
   332                           	opt stack 0
   333  001060  26                 	db	38
   334  001061                     __end_of_INST_GAMSET:
   335                           	opt stack 0
   336  001061                     _INST_INVON:
   337                           	opt stack 0
   338  001061  21                 	db	33
   339  001062                     __end_of_INST_INVON:
   340                           	opt stack 0
   341  001062                     _INST_INVOFF:
   342                           	opt stack 0
   343  001062  20                 	db	32
   344  001063                     __end_of_INST_INVOFF:
   345                           	opt stack 0
   346  001063  13                 	db	19
   347  001064                     __end_of_INST_NORON:
   348                           	opt stack 0
   349  001064  12                 	db	18
   350  001065                     __end_of_INST_PTLON:
   351                           	opt stack 0
   352  001065  11                 	db	17
   353  001066                     __end_of_INST_SLPOUT:
   354                           	opt stack 0
   355  001066  10                 	db	16
   356  001067                     __end_of_INST_SLPIN:
   357                           	opt stack 0
   358  001067  01                 	db	1
   359  001068                     __end_of_INST_SWRESET:
   360                           	opt stack 0
   361  001068  00                 	db	0
   362  001069                     __end_of_INST_NOP:
   363                           	opt stack 0
   364  001069                     _GLCD_SIZE_VERT:
   365                           	opt stack 0
   366  001069  80                 	db	128
   367  00106A                     __end_of_GLCD_SIZE_VERT:
   368                           	opt stack 0
   369  00106A                     _GLCD_SIZE_HORZ:
   370                           	opt stack 0
   371  00106A  80                 	db	128
   372  00106B                     __end_of_GLCD_SIZE_HORZ:
   373                           	opt stack 0
   374  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   375                           	opt stack 0
   376  00106B  A0                 	db	160
   377  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   378                           	opt stack 0
   379  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   380                           	opt stack 0
   381  00106C  80                 	db	128
   382  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   383                           	opt stack 0
   384  0000                     _TRISDbits	set	3989
   385  0000                     _LATDbits	set	3980
   386  0000                     _TRISCbits	set	3988
   387  0000                     _SSPCON1	set	4038
   388  0000                     _SSPSTAT	set	4039
   389  0000                     _SSPCON1bits	set	4038
   390  0000                     _SSPSTATbits	set	4039
   391  0000                     _SSPBUF	set	4041
   392  0000                     _ADCON1	set	4033
   393  0000                     _ADCON0	set	4034
   394  0000                     _TRISE	set	3990
   395  0000                     _TRISD	set	3989
   396  0000                     _TRISC	set	3988
   397  0000                     _TRISB	set	3987
   398  0000                     _TRISA	set	3986
   399  0000                     _LATE	set	3981
   400  0000                     _LATD	set	3980
   401  0000                     _LATC	set	3979
   402  0000                     _LATB	set	3978
   403  0000                     _LATA	set	3977
   404  0000                     _OSCTUNEbits	set	3995
   405  0000                     _OSCCONbits	set	4051
   406  0000                     _SSPIF	set	31987
   407                           
   408                           ; #config settings
   409  00106D  00                 	db	0	; dummy byte at the end
   410  0000                     
   411                           	psect	cinit
   412  001EE4                     __pcinit:
   413                           	opt stack 0
   414  001EE4                     start_initialization:
   415                           	opt stack 0
   416  001EE4                     __initialization:
   417                           	opt stack 0
   418                           
   419                           ; Clear objects allocated to COMRAM (1 bytes)
   420  001EE4  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   421  001EE6                     end_of_initialization:
   422                           	opt stack 0
   423  001EE6                     __end_of__initialization:
   424                           	opt stack 0
   425  001EE6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   426  001EE8  6EF8               	movwf	tblptru,c
   427  001EEA  0100               	movlb	0
   428  001EEC  EF37  F008         	goto	_main	;jump to C main() function
   429                           tblptru	equ	0xFF8
   430                           
   431                           	psect	bssCOMRAM
   432  00002A                     __pbssCOMRAM:
   433                           	opt stack 0
   434  00002A                     _MADCTLbits:
   435                           	opt stack 0
   436  00002A                     	ds	1
   437                           tblptru	equ	0xFF8
   438                           
   439                           	psect	cstackCOMRAM
   440  000001                     __pcstackCOMRAM:
   441                           	opt stack 0
   442  000001                     ??_spiTransfer:
   443  000001                     ?___wmul:
   444                           	opt stack 0
   445  000001                     ?___awdiv:
   446                           	opt stack 0
   447  000001                     spiInit@divider:
   448                           	opt stack 0
   449  000001                     ___wmul@multiplier:
   450                           	opt stack 0
   451  000001                     ___awdiv@dividend:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x0
   455  000001                     	ds	1
   456  000002                     spiTransfer@byteToTransfer:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x1
   460  000002                     	ds	1
   461  000003                     spiSend@val:
   462                           	opt stack 0
   463  000003                     ___wmul@multiplicand:
   464                           	opt stack 0
   465  000003                     ___awdiv@divisor:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x2
   469  000003                     	ds	1
   470  000004                     glcdTransfer@cmd:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x3
   474  000004                     	ds	1
   475  000005                     ??_glcdTransfer:
   476  000005                     ___awdiv@counter:
   477                           	opt stack 0
   478  000005                     ___wmul@product:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x4
   482  000005                     	ds	1
   483  000006                     glcdTransfer@byte:
   484                           	opt stack 0
   485  000006                     ___awdiv@sign:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x5
   489  000006                     	ds	1
   490  000007                     glcdDrawRectangle@XE:
   491                           	opt stack 0
   492  000007                     glcdSetCOLMOD@numBitsPerPixel:
   493                           	opt stack 0
   494  000007                     glcdSetOrigin@corner:
   495                           	opt stack 0
   496  000007                     ___awdiv@quotient:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x6
   500  000007                     	ds	1
   501  000008                     glcdDrawRectangle@YS:
   502                           	opt stack 0
   503  000008                     glcdSetCOLMOD@rawData:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x7
   507  000008                     	ds	1
   508  000009                     ?___awmod:
   509                           	opt stack 0
   510  000009                     glcdDrawRectangle@YE:
   511                           	opt stack 0
   512  000009                     ___awmod@dividend:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x8
   516  000009                     	ds	1
   517  00000A                     glcdDrawRectangle@color:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x9
   521  00000A                     	ds	1
   522  00000B                     ___awmod@divisor:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0xA
   526  00000B                     	ds	2
   527  00000D                     ___awmod@counter:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xC
   531  00000D                     	ds	1
   532  00000E                     ??_glcdDrawRectangle:
   533  00000E                     ___awmod@sign:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0xD
   537  00000E                     	ds	4
   538  000012                     glcdDrawRectangle@numLoops:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x11
   542  000012                     	ds	2
   543  000014                     glcdDrawRectangle@i:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x13
   547  000014                     	ds	2
   548  000016                     glcdDrawRectangle@colorData:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x15
   552  000016                     	ds	3
   553  000019                     glcdDrawRectangle@XS:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x18
   557  000019                     	ds	1
   558  00001A                     ??_initGLCD:
   559  00001A                     glcdDrawPixel@YS:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x19
   563  00001A                     	ds	1
   564  00001B                     glcdDrawPixel@color:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x1A
   568  00001B                     	ds	4
   569  00001F                     ??_glcdDrawPixel:
   570                           
   571                           ; 1 bytes @ 0x1E
   572  00001F                     	ds	1
   573  000020                     glcdDrawPixel@XS:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x1F
   577  000020                     	ds	1
   578  000021                     ??_main:
   579                           
   580                           ; 1 bytes @ 0x20
   581  000021                     	ds	2
   582  000023                     main@rotation:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x22
   586  000023                     	ds	1
   587  000024                     _main$1161:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x23
   591  000024                     	ds	4
   592  000028                     main@y:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x27
   596  000028                     	ds	1
   597  000029                     main@x:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x28
   601  000029                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           
   604 ;;
   605 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   606 ;;
   607 ;; *************** function _main *****************
   608 ;; Defined at:
   609 ;;		line 20 in file "main.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;  x               1   40[COMRAM] unsigned char 
   614 ;;  y               1   39[COMRAM] unsigned char 
   615 ;;  rotation        1   34[COMRAM] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   626 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;Total ram usage:        9 bytes
   630 ;; Hardware stack levels required when called:    5
   631 ;; This function calls:
   632 ;;		___awdiv
   633 ;;		___awmod
   634 ;;		___wmul
   635 ;;		_glcdDrawPixel
   636 ;;		_glcdDrawRectangle
   637 ;;		_glcdSetOrigin
   638 ;;		_glcdTransfer
   639 ;;		_initGLCD
   640 ;; This function is called by:
   641 ;;		Startup code after reset
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text0
   646  00106E                     __ptext0:
   647                           	opt stack 0
   648  00106E                     _main:
   649                           	opt stack 26
   650                           
   651                           ;main.c: 26: OSCCONbits.IRCF2 = 1;
   652                           
   653                           ;incstack = 0
   654  00106E  8CD3               	bsf	4051,6,c	;volatile
   655                           
   656                           ;main.c: 27: OSCCONbits.IRCF1 = 1;
   657  001070  8AD3               	bsf	4051,5,c	;volatile
   658                           
   659                           ;main.c: 28: OSCCONbits.IRCF0 = 1;
   660  001072  88D3               	bsf	4051,4,c	;volatile
   661                           
   662                           ;main.c: 29: OSCCONbits.SCS1 = 1;
   663  001074  82D3               	bsf	4051,1,c	;volatile
   664                           
   665                           ;main.c: 30: OSCTUNEbits.PLLEN = 1;
   666  001076  8C9B               	bsf	3995,6,c	;volatile
   667                           
   668                           ;main.c: 32: LATA = 0x00;
   669  001078  0E00               	movlw	0
   670  00107A  6E89               	movwf	3977,c	;volatile
   671                           
   672                           ;main.c: 33: LATB = 0x00;
   673  00107C  0E00               	movlw	0
   674  00107E  6E8A               	movwf	3978,c	;volatile
   675                           
   676                           ;main.c: 34: LATC = 0x00;
   677  001080  0E00               	movlw	0
   678  001082  6E8B               	movwf	3979,c	;volatile
   679                           
   680                           ;main.c: 35: LATD = 0x00;
   681  001084  0E00               	movlw	0
   682  001086  6E8C               	movwf	3980,c	;volatile
   683                           
   684                           ;main.c: 36: LATE = 0x00;
   685  001088  0E00               	movlw	0
   686  00108A  6E8D               	movwf	3981,c	;volatile
   687                           
   688                           ;main.c: 40: TRISA = 0xFF;
   689  00108C  6892               	setf	3986,c	;volatile
   690                           
   691                           ;main.c: 41: TRISB = 0xFF;
   692  00108E  6893               	setf	3987,c	;volatile
   693                           
   694                           ;main.c: 42: TRISC = 0b10000000;
   695  001090  0E80               	movlw	128
   696  001092  6E94               	movwf	3988,c	;volatile
   697                           
   698                           ;main.c: 46: TRISD = 0b00000001;
   699  001094  0E01               	movlw	1
   700  001096  6E95               	movwf	3989,c	;volatile
   701                           
   702                           ;main.c: 52: TRISE = 0b00000100;
   703  001098  0E04               	movlw	4
   704  00109A  6E96               	movwf	3990,c	;volatile
   705                           
   706                           ;main.c: 59: ADCON0 = 0x00;
   707  00109C  0E00               	movlw	0
   708  00109E  6EC2               	movwf	4034,c	;volatile
   709                           
   710                           ;main.c: 60: ADCON1 = 0b00001111;
   711  0010A0  0E0F               	movlw	15
   712  0010A2  6EC1               	movwf	4033,c	;volatile
   713                           
   714                           ;main.c: 64: initGLCD();
   715  0010A4  ECD4  F00B         	call	_initGLCD	;wreg free
   716                           
   717                           ;main.c: 67: unsigned char rotation = 0, x = 0, y = 0;
   718  0010A8  0E00               	movlw	0
   719  0010AA  6E23               	movwf	main@rotation,c
   720  0010AC  0E00               	movlw	0
   721  0010AE  6E29               	movwf	main@x,c
   722  0010B0  0E00               	movlw	0
   723  0010B2  6E28               	movwf	main@y,c
   724  0010B4                     l137:
   725                           
   726                           ;main.c: 72: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, RED);
   727  0010B4  0E6A               	movlw	low _GLCD_SIZE_HORZ
   728  0010B6  6EF6               	movwf	tblptrl,c
   729  0010B8                     	if	1	;There is more than 1 active tblptr byte
   730  0010B8  0E10               	movlw	high _GLCD_SIZE_HORZ
   731  0010BA  6EF7               	movwf	tblptrh,c
   732  0010BC                     	endif
   733  0010BC                     	if	0	;There are less than 3 active tblptr bytes
   734  0010BC                     	endif
   735  0010BC  0008               	tblrd		*
   736  0010BE  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   737  0010C2  0E00               	movlw	0
   738  0010C4  6E08               	movwf	glcdDrawRectangle@YS,c
   739  0010C6  0E69               	movlw	low _GLCD_SIZE_VERT
   740  0010C8  6EF6               	movwf	tblptrl,c
   741  0010CA                     	if	1	;There is more than 1 active tblptr byte
   742  0010CA  0E10               	movlw	high _GLCD_SIZE_VERT
   743  0010CC  6EF7               	movwf	tblptrh,c
   744  0010CE                     	endif
   745  0010CE                     	if	0	;There are less than 3 active tblptr bytes
   746  0010CE                     	endif
   747  0010CE  0008               	tblrd		*
   748  0010D0  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   749  0010D4  0E19               	movlw	low _RED
   750  0010D6  6EF6               	movwf	tblptrl,c
   751  0010D8                     	if	1	;There is more than 1 active tblptr byte
   752  0010D8  0E10               	movlw	high _RED
   753  0010DA  6EF7               	movwf	tblptrh,c
   754  0010DC                     	endif
   755  0010DC                     	if	0	;There are less than 3 active tblptr bytes
   756  0010DC                     	endif
   757  0010DC  0009               	tblrd		*+
   758  0010DE  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   759  0010E2  0009               	tblrd		*+
   760  0010E4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   761  0010E8  0009               	tblrd		*+
   762  0010EA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   763  0010EE  000A               	tblrd		*-
   764  0010F0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   765  0010F4  0E00               	movlw	0
   766  0010F6  EC56  F00D         	call	_glcdDrawRectangle
   767                           
   768                           ;main.c: 73: _delay((unsigned long)((1000)*(32000000/4000.0)));
   769  0010FA  0E29               	movlw	41
   770  0010FC  6E22               	movwf	(??_main+1)& (0+255),c
   771  0010FE  0E96               	movlw	150
   772  001100  6E21               	movwf	??_main& (0+255),c
   773  001102  0E7F               	movlw	127
   774  001104                     u897:
   775  001104  2EE8               	decfsz	wreg,f,c
   776  001106  D7FE               	bra	u897
   777  001108  2E21               	decfsz	??_main& (0+255),f,c
   778  00110A  D7FC               	bra	u897
   779  00110C  2E22               	decfsz	(??_main+1)& (0+255),f,c
   780  00110E  D7FA               	bra	u897
   781  001110  F000               	nop	
   782                           
   783                           ;main.c: 76: glcdDrawRectangle(0, 18, 0, GLCD_SIZE_VERT, RED);
   784  001112  0E12               	movlw	18
   785  001114  6E07               	movwf	glcdDrawRectangle@XE,c
   786  001116  0E00               	movlw	0
   787  001118  6E08               	movwf	glcdDrawRectangle@YS,c
   788  00111A  0E69               	movlw	low _GLCD_SIZE_VERT
   789  00111C  6EF6               	movwf	tblptrl,c
   790  00111E                     	if	1	;There is more than 1 active tblptr byte
   791  00111E  0E10               	movlw	high _GLCD_SIZE_VERT
   792  001120  6EF7               	movwf	tblptrh,c
   793  001122                     	endif
   794  001122                     	if	0	;There are less than 3 active tblptr bytes
   795  001122                     	endif
   796  001122  0008               	tblrd		*
   797  001124  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   798  001128  0E19               	movlw	low _RED
   799  00112A  6EF6               	movwf	tblptrl,c
   800  00112C                     	if	1	;There is more than 1 active tblptr byte
   801  00112C  0E10               	movlw	high _RED
   802  00112E  6EF7               	movwf	tblptrh,c
   803  001130                     	endif
   804  001130                     	if	0	;There are less than 3 active tblptr bytes
   805  001130                     	endif
   806  001130  0009               	tblrd		*+
   807  001132  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   808  001136  0009               	tblrd		*+
   809  001138  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   810  00113C  0009               	tblrd		*+
   811  00113E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   812  001142  000A               	tblrd		*-
   813  001144  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   814  001148  0E00               	movlw	0
   815  00114A  EC56  F00D         	call	_glcdDrawRectangle
   816                           
   817                           ;main.c: 77: glcdDrawRectangle(18, 36, 0, GLCD_SIZE_VERT, ORANGE);
   818  00114E  0E24               	movlw	36
   819  001150  6E07               	movwf	glcdDrawRectangle@XE,c
   820  001152  0E00               	movlw	0
   821  001154  6E08               	movwf	glcdDrawRectangle@YS,c
   822  001156  0E69               	movlw	low _GLCD_SIZE_VERT
   823  001158  6EF6               	movwf	tblptrl,c
   824  00115A                     	if	1	;There is more than 1 active tblptr byte
   825  00115A  0E10               	movlw	high _GLCD_SIZE_VERT
   826  00115C  6EF7               	movwf	tblptrh,c
   827  00115E                     	endif
   828  00115E                     	if	0	;There are less than 3 active tblptr bytes
   829  00115E                     	endif
   830  00115E  0008               	tblrd		*
   831  001160  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   832  001164  0E15               	movlw	low _ORANGE
   833  001166  6EF6               	movwf	tblptrl,c
   834  001168                     	if	1	;There is more than 1 active tblptr byte
   835  001168  0E10               	movlw	high _ORANGE
   836  00116A  6EF7               	movwf	tblptrh,c
   837  00116C                     	endif
   838  00116C                     	if	0	;There are less than 3 active tblptr bytes
   839  00116C                     	endif
   840  00116C  0009               	tblrd		*+
   841  00116E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   842  001172  0009               	tblrd		*+
   843  001174  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   844  001178  0009               	tblrd		*+
   845  00117A  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   846  00117E  000A               	tblrd		*-
   847  001180  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   848  001184  0E12               	movlw	18
   849  001186  EC56  F00D         	call	_glcdDrawRectangle
   850                           
   851                           ;main.c: 78: glcdDrawRectangle(36, 54, 0, GLCD_SIZE_VERT, YELLOW);
   852  00118A  0E36               	movlw	54
   853  00118C  6E07               	movwf	glcdDrawRectangle@XE,c
   854  00118E  0E00               	movlw	0
   855  001190  6E08               	movwf	glcdDrawRectangle@YS,c
   856  001192  0E69               	movlw	low _GLCD_SIZE_VERT
   857  001194  6EF6               	movwf	tblptrl,c
   858  001196                     	if	1	;There is more than 1 active tblptr byte
   859  001196  0E10               	movlw	high _GLCD_SIZE_VERT
   860  001198  6EF7               	movwf	tblptrh,c
   861  00119A                     	endif
   862  00119A                     	if	0	;There are less than 3 active tblptr bytes
   863  00119A                     	endif
   864  00119A  0008               	tblrd		*
   865  00119C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   866  0011A0  0E11               	movlw	low _YELLOW
   867  0011A2  6EF6               	movwf	tblptrl,c
   868  0011A4                     	if	1	;There is more than 1 active tblptr byte
   869  0011A4  0E10               	movlw	high _YELLOW
   870  0011A6  6EF7               	movwf	tblptrh,c
   871  0011A8                     	endif
   872  0011A8                     	if	0	;There are less than 3 active tblptr bytes
   873  0011A8                     	endif
   874  0011A8  0009               	tblrd		*+
   875  0011AA  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   876  0011AE  0009               	tblrd		*+
   877  0011B0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   878  0011B4  0009               	tblrd		*+
   879  0011B6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   880  0011BA  000A               	tblrd		*-
   881  0011BC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   882  0011C0  0E24               	movlw	36
   883  0011C2  EC56  F00D         	call	_glcdDrawRectangle
   884                           
   885                           ;main.c: 79: glcdDrawRectangle(54, 72, 0, GLCD_SIZE_VERT, GREEN);
   886  0011C6  0E48               	movlw	72
   887  0011C8  6E07               	movwf	glcdDrawRectangle@XE,c
   888  0011CA  0E00               	movlw	0
   889  0011CC  6E08               	movwf	glcdDrawRectangle@YS,c
   890  0011CE  0E69               	movlw	low _GLCD_SIZE_VERT
   891  0011D0  6EF6               	movwf	tblptrl,c
   892  0011D2                     	if	1	;There is more than 1 active tblptr byte
   893  0011D2  0E10               	movlw	high _GLCD_SIZE_VERT
   894  0011D4  6EF7               	movwf	tblptrh,c
   895  0011D6                     	endif
   896  0011D6                     	if	0	;There are less than 3 active tblptr bytes
   897  0011D6                     	endif
   898  0011D6  0008               	tblrd		*
   899  0011D8  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   900  0011DC  0E0D               	movlw	low _GREEN
   901  0011DE  6EF6               	movwf	tblptrl,c
   902  0011E0                     	if	1	;There is more than 1 active tblptr byte
   903  0011E0  0E10               	movlw	high _GREEN
   904  0011E2  6EF7               	movwf	tblptrh,c
   905  0011E4                     	endif
   906  0011E4                     	if	0	;There are less than 3 active tblptr bytes
   907  0011E4                     	endif
   908  0011E4  0009               	tblrd		*+
   909  0011E6  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   910  0011EA  0009               	tblrd		*+
   911  0011EC  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   912  0011F0  0009               	tblrd		*+
   913  0011F2  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   914  0011F6  000A               	tblrd		*-
   915  0011F8  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   916  0011FC  0E36               	movlw	54
   917  0011FE  EC56  F00D         	call	_glcdDrawRectangle
   918                           
   919                           ;main.c: 80: glcdDrawRectangle(72, 90, 0, GLCD_SIZE_VERT, BLUE);
   920  001202  0E5A               	movlw	90
   921  001204  6E07               	movwf	glcdDrawRectangle@XE,c
   922  001206  0E00               	movlw	0
   923  001208  6E08               	movwf	glcdDrawRectangle@YS,c
   924  00120A  0E69               	movlw	low _GLCD_SIZE_VERT
   925  00120C  6EF6               	movwf	tblptrl,c
   926  00120E                     	if	1	;There is more than 1 active tblptr byte
   927  00120E  0E10               	movlw	high _GLCD_SIZE_VERT
   928  001210  6EF7               	movwf	tblptrh,c
   929  001212                     	endif
   930  001212                     	if	0	;There are less than 3 active tblptr bytes
   931  001212                     	endif
   932  001212  0008               	tblrd		*
   933  001214  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   934  001218  0E09               	movlw	low _BLUE
   935  00121A  6EF6               	movwf	tblptrl,c
   936  00121C                     	if	1	;There is more than 1 active tblptr byte
   937  00121C  0E10               	movlw	high _BLUE
   938  00121E  6EF7               	movwf	tblptrh,c
   939  001220                     	endif
   940  001220                     	if	0	;There are less than 3 active tblptr bytes
   941  001220                     	endif
   942  001220  0009               	tblrd		*+
   943  001222  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   944  001226  0009               	tblrd		*+
   945  001228  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   946  00122C  0009               	tblrd		*+
   947  00122E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   948  001232  000A               	tblrd		*-
   949  001234  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   950  001238  0E48               	movlw	72
   951  00123A  EC56  F00D         	call	_glcdDrawRectangle
   952                           
   953                           ;main.c: 81: glcdDrawRectangle(90, 108, 0, GLCD_SIZE_VERT, INDIGO);
   954  00123E  0E6C               	movlw	108
   955  001240  6E07               	movwf	glcdDrawRectangle@XE,c
   956  001242  0E00               	movlw	0
   957  001244  6E08               	movwf	glcdDrawRectangle@YS,c
   958  001246  0E69               	movlw	low _GLCD_SIZE_VERT
   959  001248  6EF6               	movwf	tblptrl,c
   960  00124A                     	if	1	;There is more than 1 active tblptr byte
   961  00124A  0E10               	movlw	high _GLCD_SIZE_VERT
   962  00124C  6EF7               	movwf	tblptrh,c
   963  00124E                     	endif
   964  00124E                     	if	0	;There are less than 3 active tblptr bytes
   965  00124E                     	endif
   966  00124E  0008               	tblrd		*
   967  001250  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   968  001254  0E05               	movlw	low _INDIGO
   969  001256  6EF6               	movwf	tblptrl,c
   970  001258                     	if	1	;There is more than 1 active tblptr byte
   971  001258  0E10               	movlw	high _INDIGO
   972  00125A  6EF7               	movwf	tblptrh,c
   973  00125C                     	endif
   974  00125C                     	if	0	;There are less than 3 active tblptr bytes
   975  00125C                     	endif
   976  00125C  0009               	tblrd		*+
   977  00125E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   978  001262  0009               	tblrd		*+
   979  001264  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   980  001268  0009               	tblrd		*+
   981  00126A  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   982  00126E  000A               	tblrd		*-
   983  001270  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   984  001274  0E5A               	movlw	90
   985  001276  EC56  F00D         	call	_glcdDrawRectangle
   986                           
   987                           ;main.c: 82: glcdDrawRectangle(108, 128, 0, GLCD_SIZE_VERT, VIOLET);
   988  00127A  0E80               	movlw	128
   989  00127C  6E07               	movwf	glcdDrawRectangle@XE,c
   990  00127E  0E00               	movlw	0
   991  001280  6E08               	movwf	glcdDrawRectangle@YS,c
   992  001282  0E69               	movlw	low _GLCD_SIZE_VERT
   993  001284  6EF6               	movwf	tblptrl,c
   994  001286                     	if	1	;There is more than 1 active tblptr byte
   995  001286  0E10               	movlw	high _GLCD_SIZE_VERT
   996  001288  6EF7               	movwf	tblptrh,c
   997  00128A                     	endif
   998  00128A                     	if	0	;There are less than 3 active tblptr bytes
   999  00128A                     	endif
  1000  00128A  0008               	tblrd		*
  1001  00128C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1002  001290  0E01               	movlw	low _VIOLET
  1003  001292  6EF6               	movwf	tblptrl,c
  1004  001294                     	if	1	;There is more than 1 active tblptr byte
  1005  001294  0E10               	movlw	high _VIOLET
  1006  001296  6EF7               	movwf	tblptrh,c
  1007  001298                     	endif
  1008  001298                     	if	0	;There are less than 3 active tblptr bytes
  1009  001298                     	endif
  1010  001298  0009               	tblrd		*+
  1011  00129A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1012  00129E  0009               	tblrd		*+
  1013  0012A0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1014  0012A4  0009               	tblrd		*+
  1015  0012A6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1016  0012AA  000A               	tblrd		*-
  1017  0012AC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1018  0012B0  0E6C               	movlw	108
  1019  0012B2  EC56  F00D         	call	_glcdDrawRectangle
  1020                           
  1021                           ;main.c: 85: _delay((unsigned long)((500)*(32000000/4000.0)));
  1022  0012B6  0E15               	movlw	21
  1023  0012B8  6E22               	movwf	(??_main+1)& (0+255),c
  1024  0012BA  0E4B               	movlw	75
  1025  0012BC  6E21               	movwf	??_main& (0+255),c
  1026  0012BE  0EBE               	movlw	190
  1027  0012C0                     u907:
  1028  0012C0  2EE8               	decfsz	wreg,f,c
  1029  0012C2  D7FE               	bra	u907
  1030  0012C4  2E21               	decfsz	??_main& (0+255),f,c
  1031  0012C6  D7FC               	bra	u907
  1032  0012C8  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1033  0012CA  D7FA               	bra	u907
  1034  0012CC  D000               	nop2	
  1035                           
  1036                           ;main.c: 86: glcdTransfer(INST_INVON, 1);
  1037  0012CE  0E01               	movlw	1
  1038  0012D0  6E04               	movwf	glcdTransfer@cmd,c
  1039  0012D2  0E61               	movlw	low _INST_INVON
  1040  0012D4  6EF6               	movwf	tblptrl,c
  1041  0012D6                     	if	1	;There is more than 1 active tblptr byte
  1042  0012D6  0E10               	movlw	high _INST_INVON
  1043  0012D8  6EF7               	movwf	tblptrh,c
  1044  0012DA                     	endif
  1045  0012DA                     	if	0	;There are less than 3 active tblptr bytes
  1046  0012DA                     	endif
  1047  0012DA  0008               	tblrd		*
  1048  0012DC  50F5               	movf	tablat,w,c
  1049  0012DE  EC39  F00F         	call	_glcdTransfer
  1050                           
  1051                           ;main.c: 87: _delay((unsigned long)((500)*(32000000/4000.0)));
  1052  0012E2  0E15               	movlw	21
  1053  0012E4  6E22               	movwf	(??_main+1)& (0+255),c
  1054  0012E6  0E4B               	movlw	75
  1055  0012E8  6E21               	movwf	??_main& (0+255),c
  1056  0012EA  0EBE               	movlw	190
  1057  0012EC                     u917:
  1058  0012EC  2EE8               	decfsz	wreg,f,c
  1059  0012EE  D7FE               	bra	u917
  1060  0012F0  2E21               	decfsz	??_main& (0+255),f,c
  1061  0012F2  D7FC               	bra	u917
  1062  0012F4  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1063  0012F6  D7FA               	bra	u917
  1064  0012F8  D000               	nop2	
  1065                           
  1066                           ;main.c: 88: glcdTransfer(INST_INVOFF, 1);
  1067  0012FA  0E01               	movlw	1
  1068  0012FC  6E04               	movwf	glcdTransfer@cmd,c
  1069  0012FE  0E62               	movlw	low _INST_INVOFF
  1070  001300  6EF6               	movwf	tblptrl,c
  1071  001302                     	if	1	;There is more than 1 active tblptr byte
  1072  001302  0E10               	movlw	high _INST_INVOFF
  1073  001304  6EF7               	movwf	tblptrh,c
  1074  001306                     	endif
  1075  001306                     	if	0	;There are less than 3 active tblptr bytes
  1076  001306                     	endif
  1077  001306  0008               	tblrd		*
  1078  001308  50F5               	movf	tablat,w,c
  1079  00130A  EC39  F00F         	call	_glcdTransfer
  1080                           
  1081                           ;main.c: 89: _delay((unsigned long)((500)*(32000000/4000.0)));
  1082  00130E  0E15               	movlw	21
  1083  001310  6E22               	movwf	(??_main+1)& (0+255),c
  1084  001312  0E4B               	movlw	75
  1085  001314  6E21               	movwf	??_main& (0+255),c
  1086  001316  0EBE               	movlw	190
  1087  001318                     u927:
  1088  001318  2EE8               	decfsz	wreg,f,c
  1089  00131A  D7FE               	bra	u927
  1090  00131C  2E21               	decfsz	??_main& (0+255),f,c
  1091  00131E  D7FC               	bra	u927
  1092  001320  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1093  001322  D7FA               	bra	u927
  1094  001324  D000               	nop2	
  1095                           
  1096                           ;main.c: 92: glcdDrawPixel(0, 0, WHITE);
  1097  001326  0E00               	movlw	0
  1098  001328  6E1A               	movwf	glcdDrawPixel@YS,c
  1099  00132A  0E1D               	movlw	low _WHITE
  1100  00132C  6EF6               	movwf	tblptrl,c
  1101  00132E                     	if	1	;There is more than 1 active tblptr byte
  1102  00132E  0E10               	movlw	high _WHITE
  1103  001330  6EF7               	movwf	tblptrh,c
  1104  001332                     	endif
  1105  001332                     	if	0	;There are less than 3 active tblptr bytes
  1106  001332                     	endif
  1107  001332  0009               	tblrd		*+
  1108  001334  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1109  001338  0009               	tblrd		*+
  1110  00133A  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1111  00133E  0009               	tblrd		*+
  1112  001340  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1113  001344  000A               	tblrd		*-
  1114  001346  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1115  00134A  0E00               	movlw	0
  1116  00134C  EC90  F00E         	call	_glcdDrawPixel
  1117                           
  1118                           ;main.c: 93: _delay((unsigned long)((500)*(32000000/4000.0)));
  1119  001350  0E15               	movlw	21
  1120  001352  6E22               	movwf	(??_main+1)& (0+255),c
  1121  001354  0E4B               	movlw	75
  1122  001356  6E21               	movwf	??_main& (0+255),c
  1123  001358  0EBE               	movlw	190
  1124  00135A                     u937:
  1125  00135A  2EE8               	decfsz	wreg,f,c
  1126  00135C  D7FE               	bra	u937
  1127  00135E  2E21               	decfsz	??_main& (0+255),f,c
  1128  001360  D7FC               	bra	u937
  1129  001362  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1130  001364  D7FA               	bra	u937
  1131  001366  D000               	nop2	
  1132                           
  1133                           ;main.c: 94: glcdDrawPixel(GLCD_SIZE_HORZ, 0, WHITE);
  1134  001368  0E00               	movlw	0
  1135  00136A  6E1A               	movwf	glcdDrawPixel@YS,c
  1136  00136C  0E1D               	movlw	low _WHITE
  1137  00136E  6EF6               	movwf	tblptrl,c
  1138  001370                     	if	1	;There is more than 1 active tblptr byte
  1139  001370  0E10               	movlw	high _WHITE
  1140  001372  6EF7               	movwf	tblptrh,c
  1141  001374                     	endif
  1142  001374                     	if	0	;There are less than 3 active tblptr bytes
  1143  001374                     	endif
  1144  001374  0009               	tblrd		*+
  1145  001376  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1146  00137A  0009               	tblrd		*+
  1147  00137C  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1148  001380  0009               	tblrd		*+
  1149  001382  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1150  001386  000A               	tblrd		*-
  1151  001388  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1152  00138C  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1153  00138E  6EF6               	movwf	tblptrl,c
  1154  001390                     	if	1	;There is more than 1 active tblptr byte
  1155  001390  0E10               	movlw	high _GLCD_SIZE_HORZ
  1156  001392  6EF7               	movwf	tblptrh,c
  1157  001394                     	endif
  1158  001394                     	if	0	;There are less than 3 active tblptr bytes
  1159  001394                     	endif
  1160  001394  0008               	tblrd		*
  1161  001396  50F5               	movf	tablat,w,c
  1162  001398  EC90  F00E         	call	_glcdDrawPixel
  1163                           
  1164                           ;main.c: 95: _delay((unsigned long)((500)*(32000000/4000.0)));
  1165  00139C  0E15               	movlw	21
  1166  00139E  6E22               	movwf	(??_main+1)& (0+255),c
  1167  0013A0  0E4B               	movlw	75
  1168  0013A2  6E21               	movwf	??_main& (0+255),c
  1169  0013A4  0EBE               	movlw	190
  1170  0013A6                     u947:
  1171  0013A6  2EE8               	decfsz	wreg,f,c
  1172  0013A8  D7FE               	bra	u947
  1173  0013AA  2E21               	decfsz	??_main& (0+255),f,c
  1174  0013AC  D7FC               	bra	u947
  1175  0013AE  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1176  0013B0  D7FA               	bra	u947
  1177  0013B2  D000               	nop2	
  1178                           
  1179                           ;main.c: 96: glcdDrawPixel(GLCD_SIZE_HORZ, GLCD_SIZE_VERT, WHITE);
  1180  0013B4  0E69               	movlw	low _GLCD_SIZE_VERT
  1181  0013B6  6EF6               	movwf	tblptrl,c
  1182  0013B8                     	if	1	;There is more than 1 active tblptr byte
  1183  0013B8  0E10               	movlw	high _GLCD_SIZE_VERT
  1184  0013BA  6EF7               	movwf	tblptrh,c
  1185  0013BC                     	endif
  1186  0013BC                     	if	0	;There are less than 3 active tblptr bytes
  1187  0013BC                     	endif
  1188  0013BC  0008               	tblrd		*
  1189  0013BE  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1190  0013C2  0E1D               	movlw	low _WHITE
  1191  0013C4  6EF6               	movwf	tblptrl,c
  1192  0013C6                     	if	1	;There is more than 1 active tblptr byte
  1193  0013C6  0E10               	movlw	high _WHITE
  1194  0013C8  6EF7               	movwf	tblptrh,c
  1195  0013CA                     	endif
  1196  0013CA                     	if	0	;There are less than 3 active tblptr bytes
  1197  0013CA                     	endif
  1198  0013CA  0009               	tblrd		*+
  1199  0013CC  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1200  0013D0  0009               	tblrd		*+
  1201  0013D2  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1202  0013D6  0009               	tblrd		*+
  1203  0013D8  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1204  0013DC  000A               	tblrd		*-
  1205  0013DE  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1206  0013E2  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1207  0013E4  6EF6               	movwf	tblptrl,c
  1208  0013E6                     	if	1	;There is more than 1 active tblptr byte
  1209  0013E6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1210  0013E8  6EF7               	movwf	tblptrh,c
  1211  0013EA                     	endif
  1212  0013EA                     	if	0	;There are less than 3 active tblptr bytes
  1213  0013EA                     	endif
  1214  0013EA  0008               	tblrd		*
  1215  0013EC  50F5               	movf	tablat,w,c
  1216  0013EE  EC90  F00E         	call	_glcdDrawPixel
  1217                           
  1218                           ;main.c: 97: _delay((unsigned long)((500)*(32000000/4000.0)));
  1219  0013F2  0E15               	movlw	21
  1220  0013F4  6E22               	movwf	(??_main+1)& (0+255),c
  1221  0013F6  0E4B               	movlw	75
  1222  0013F8  6E21               	movwf	??_main& (0+255),c
  1223  0013FA  0EBE               	movlw	190
  1224  0013FC                     u957:
  1225  0013FC  2EE8               	decfsz	wreg,f,c
  1226  0013FE  D7FE               	bra	u957
  1227  001400  2E21               	decfsz	??_main& (0+255),f,c
  1228  001402  D7FC               	bra	u957
  1229  001404  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1230  001406  D7FA               	bra	u957
  1231  001408  D000               	nop2	
  1232                           
  1233                           ;main.c: 98: glcdDrawPixel(0, GLCD_SIZE_VERT, WHITE);
  1234  00140A  0E69               	movlw	low _GLCD_SIZE_VERT
  1235  00140C  6EF6               	movwf	tblptrl,c
  1236  00140E                     	if	1	;There is more than 1 active tblptr byte
  1237  00140E  0E10               	movlw	high _GLCD_SIZE_VERT
  1238  001410  6EF7               	movwf	tblptrh,c
  1239  001412                     	endif
  1240  001412                     	if	0	;There are less than 3 active tblptr bytes
  1241  001412                     	endif
  1242  001412  0008               	tblrd		*
  1243  001414  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1244  001418  0E1D               	movlw	low _WHITE
  1245  00141A  6EF6               	movwf	tblptrl,c
  1246  00141C                     	if	1	;There is more than 1 active tblptr byte
  1247  00141C  0E10               	movlw	high _WHITE
  1248  00141E  6EF7               	movwf	tblptrh,c
  1249  001420                     	endif
  1250  001420                     	if	0	;There are less than 3 active tblptr bytes
  1251  001420                     	endif
  1252  001420  0009               	tblrd		*+
  1253  001422  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1254  001426  0009               	tblrd		*+
  1255  001428  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1256  00142C  0009               	tblrd		*+
  1257  00142E  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1258  001432  000A               	tblrd		*-
  1259  001434  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1260  001438  0E00               	movlw	0
  1261  00143A  EC90  F00E         	call	_glcdDrawPixel
  1262                           
  1263                           ;main.c: 99: _delay((unsigned long)((500)*(32000000/4000.0)));
  1264  00143E  0E15               	movlw	21
  1265  001440  6E22               	movwf	(??_main+1)& (0+255),c
  1266  001442  0E4B               	movlw	75
  1267  001444  6E21               	movwf	??_main& (0+255),c
  1268  001446  0EBE               	movlw	190
  1269  001448                     u967:
  1270  001448  2EE8               	decfsz	wreg,f,c
  1271  00144A  D7FE               	bra	u967
  1272  00144C  2E21               	decfsz	??_main& (0+255),f,c
  1273  00144E  D7FC               	bra	u967
  1274  001450  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1275  001452  D7FA               	bra	u967
  1276  001454  D000               	nop2	
  1277                           
  1278                           ;main.c: 102: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1279  001456  0E00               	movlw	0
  1280  001458  6E29               	movwf	main@x,c
  1281  00145A                     l1885:
  1282  00145A  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1283  00145C  6EF6               	movwf	tblptrl,c
  1284  00145E                     	if	1	;There is more than 1 active tblptr byte
  1285  00145E  0E10               	movlw	high _GLCD_SIZE_HORZ
  1286  001460  6EF7               	movwf	tblptrh,c
  1287  001462                     	endif
  1288  001462                     	if	0	;There are less than 3 active tblptr bytes
  1289  001462                     	endif
  1290  001462  0009               	tblrd		*+
  1291  001464  50F5               	movf	tablat,w,c
  1292  001466  5C29               	subwf	main@x,w,c
  1293  001468  B0D8               	btfsc	status,0,c
  1294  00146A  D083               	goto	u720
  1295                           
  1296                           ;main.c: 103: if(x % (GLCD_SIZE_VERT/16) == 0){
  1297  00146C  C029  F009         	movff	main@x,___awmod@dividend
  1298  001470  6A0A               	clrf	___awmod@dividend+1,c
  1299  001472  0E00               	movlw	0
  1300  001474  6E04               	movwf	___awdiv@divisor+1,c
  1301  001476  0E10               	movlw	16
  1302  001478  6E03               	movwf	___awdiv@divisor,c
  1303  00147A  0E69               	movlw	low _GLCD_SIZE_VERT
  1304  00147C  6EF6               	movwf	tblptrl,c
  1305  00147E                     	if	1	;There is more than 1 active tblptr byte
  1306  00147E  0E10               	movlw	high _GLCD_SIZE_VERT
  1307  001480  6EF7               	movwf	tblptrh,c
  1308  001482                     	endif
  1309  001482                     	if	0	;There are less than 3 active tblptr bytes
  1310  001482                     	endif
  1311  001482  0008               	tblrd		*
  1312  001484  50F5               	movf	tablat,w,c
  1313  001486  6E01               	movwf	___awdiv@dividend,c
  1314  001488  6A02               	clrf	___awdiv@dividend+1,c
  1315  00148A  EC16  F00E         	call	___awdiv	;wreg free
  1316  00148E  C001  F00B         	movff	?___awdiv,___awmod@divisor
  1317  001492  C002  F00C         	movff	?___awdiv+1,___awmod@divisor+1
  1318  001496  EC58  F00E         	call	___awmod	;wreg free
  1319  00149A  5009               	movf	?___awmod,w,c
  1320  00149C  100A               	iorwf	?___awmod+1,w,c
  1321  00149E  A4D8               	btfss	status,2,c
  1322  0014A0  D036               	goto	l140
  1323                           
  1324                           ;main.c: 104: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1325  0014A2  C029  F001         	movff	main@x,___wmul@multiplier
  1326  0014A6  6A02               	clrf	___wmul@multiplier+1,c
  1327  0014A8  0E08               	movlw	8
  1328  0014AA  6E04               	movwf	___wmul@multiplicand+1,c
  1329  0014AC  0E00               	movlw	0
  1330  0014AE  6E03               	movwf	___wmul@multiplicand,c
  1331  0014B0  EC4D  F00F         	call	___wmul	;wreg free
  1332  0014B4  C001  F024         	movff	?___wmul,_main$1161
  1333  0014B8  C002  F025         	movff	?___wmul+1,_main$1161+1
  1334  0014BC  0E00               	movlw	0
  1335  0014BE  BE25               	btfsc	_main$1161+1,7,c
  1336  0014C0  0EFF               	movlw	-1
  1337  0014C2  6E26               	movwf	_main$1161+2,c
  1338  0014C4  6E27               	movwf	_main$1161+3,c
  1339                           
  1340                           ;main.c: 104: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1341  0014C6  C029  F009         	movff	main@x,___awmod@dividend
  1342  0014CA  6A0A               	clrf	___awmod@dividend+1,c
  1343  0014CC  0E00               	movlw	0
  1344  0014CE  6E0C               	movwf	___awmod@divisor+1,c
  1345  0014D0  0E03               	movlw	3
  1346  0014D2  6E0B               	movwf	___awmod@divisor,c
  1347  0014D4  EC58  F00E         	call	___awmod	;wreg free
  1348  0014D8  5009               	movf	?___awmod,w,c
  1349  0014DA  0D21               	mullw	33
  1350  0014DC  CFF3 F01A          	movff	prodl,glcdDrawPixel@YS
  1351  0014E0  C024  F01B         	movff	_main$1161,glcdDrawPixel@color
  1352  0014E4  C025  F01C         	movff	_main$1161+1,glcdDrawPixel@color+1
  1353  0014E8  C026  F01D         	movff	_main$1161+2,glcdDrawPixel@color+2
  1354  0014EC  C027  F01E         	movff	_main$1161+3,glcdDrawPixel@color+3
  1355  0014F0  0E69               	movlw	low _GLCD_SIZE_VERT
  1356  0014F2  6EF6               	movwf	tblptrl,c
  1357  0014F4                     	if	1	;There is more than 1 active tblptr byte
  1358  0014F4  0E10               	movlw	high _GLCD_SIZE_VERT
  1359  0014F6  6EF7               	movwf	tblptrh,c
  1360  0014F8                     	endif
  1361  0014F8                     	if	0	;There are less than 3 active tblptr bytes
  1362  0014F8                     	endif
  1363  0014F8  0008               	tblrd		*
  1364  0014FA  CFF5 F021          	movff	tablat,??_main
  1365  0014FE  5029               	movf	main@x,w,c
  1366  001500  0D08               	mullw	8
  1367  001502  50F3               	movf	prodl,w,c
  1368  001504  0800               	sublw	0
  1369  001506  2421               	addwf	??_main,w,c
  1370  001508  EC90  F00E         	call	_glcdDrawPixel
  1371                           
  1372                           ;main.c: 105: }
  1373  00150C  D028               	goto	l141
  1374  00150E                     l140:
  1375                           
  1376                           ;main.c: 106: else{
  1377                           ;main.c: 107: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1378  00150E  C029  F001         	movff	main@x,___wmul@multiplier
  1379  001512  6A02               	clrf	___wmul@multiplier+1,c
  1380  001514  0E08               	movlw	8
  1381  001516  6E04               	movwf	___wmul@multiplicand+1,c
  1382  001518  0E00               	movlw	0
  1383  00151A  6E03               	movwf	___wmul@multiplicand,c
  1384  00151C  EC4D  F00F         	call	___wmul	;wreg free
  1385  001520  C001  F024         	movff	?___wmul,_main$1161
  1386  001524  C002  F025         	movff	?___wmul+1,_main$1161+1
  1387  001528  0E00               	movlw	0
  1388  00152A  BE25               	btfsc	_main$1161+1,7,c
  1389  00152C  0EFF               	movlw	-1
  1390  00152E  6E26               	movwf	_main$1161+2,c
  1391  001530  6E27               	movwf	_main$1161+3,c
  1392                           
  1393                           ;main.c: 106: else{
  1394                           ;main.c: 107: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1395  001532  0E69               	movlw	low _GLCD_SIZE_VERT
  1396  001534  6EF6               	movwf	tblptrl,c
  1397  001536                     	if	1	;There is more than 1 active tblptr byte
  1398  001536  0E10               	movlw	high _GLCD_SIZE_VERT
  1399  001538  6EF7               	movwf	tblptrh,c
  1400  00153A                     	endif
  1401  00153A                     	if	0	;There are less than 3 active tblptr bytes
  1402  00153A                     	endif
  1403  00153A  0008               	tblrd		*
  1404  00153C  CFF5 F021          	movff	tablat,??_main
  1405  001540  5029               	movf	main@x,w,c
  1406  001542  0800               	sublw	0
  1407  001544  2421               	addwf	??_main,w,c
  1408  001546  6E1A               	movwf	glcdDrawPixel@YS,c
  1409  001548  C024  F01B         	movff	_main$1161,glcdDrawPixel@color
  1410  00154C  C025  F01C         	movff	_main$1161+1,glcdDrawPixel@color+1
  1411  001550  C026  F01D         	movff	_main$1161+2,glcdDrawPixel@color+2
  1412  001554  C027  F01E         	movff	_main$1161+3,glcdDrawPixel@color+3
  1413  001558  5029               	movf	main@x,w,c
  1414  00155A  EC90  F00E         	call	_glcdDrawPixel
  1415  00155E                     l141:
  1416                           
  1417                           ;main.c: 108: }
  1418                           ;main.c: 109: _delay((unsigned long)((10)*(32000000/4000.0)));
  1419  00155E  0E68               	movlw	104
  1420  001560  6E21               	movwf	??_main& (0+255),c
  1421  001562  0EE4               	movlw	228
  1422  001564                     u977:
  1423  001564  2EE8               	decfsz	wreg,f,c
  1424  001566  D7FE               	bra	u977
  1425  001568  2E21               	decfsz	??_main& (0+255),f,c
  1426  00156A  D7FC               	bra	u977
  1427  00156C  D000               	nop2	
  1428  00156E  2A29               	incf	main@x,f,c
  1429  001570  D774               	goto	l1885
  1430  001572                     u720:
  1431                           
  1432                           ;main.c: 110: }
  1433                           ;main.c: 113: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1434  001572  0E00               	movlw	0
  1435  001574  6E28               	movwf	main@y,c
  1436  001576                     l1905:
  1437  001576  0E69               	movlw	low _GLCD_SIZE_VERT
  1438  001578  6EF6               	movwf	tblptrl,c
  1439  00157A                     	if	1	;There is more than 1 active tblptr byte
  1440  00157A  0E10               	movlw	high _GLCD_SIZE_VERT
  1441  00157C  6EF7               	movwf	tblptrh,c
  1442  00157E                     	endif
  1443  00157E                     	if	0	;There are less than 3 active tblptr bytes
  1444  00157E                     	endif
  1445  00157E  0009               	tblrd		*+
  1446  001580  50F5               	movf	tablat,w,c
  1447  001582  5C28               	subwf	main@y,w,c
  1448  001584  B0D8               	btfsc	status,0,c
  1449  001586  D028               	goto	u760
  1450                           
  1451                           ;main.c: 114: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1452  001588  0E00               	movlw	0
  1453  00158A  6E29               	movwf	main@x,c
  1454  00158C                     l1911:
  1455  00158C  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1456  00158E  6EF6               	movwf	tblptrl,c
  1457  001590                     	if	1	;There is more than 1 active tblptr byte
  1458  001590  0E10               	movlw	high _GLCD_SIZE_HORZ
  1459  001592  6EF7               	movwf	tblptrh,c
  1460  001594                     	endif
  1461  001594                     	if	0	;There are less than 3 active tblptr bytes
  1462  001594                     	endif
  1463  001594  0009               	tblrd		*+
  1464  001596  50F5               	movf	tablat,w,c
  1465  001598  5C29               	subwf	main@x,w,c
  1466  00159A  B0D8               	btfsc	status,0,c
  1467  00159C  D01B               	goto	u750
  1468                           
  1469                           ;main.c: 115: glcdDrawPixel(x, y, x*y*16);
  1470  00159E  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1471  0015A2  5029               	movf	main@x,w,c
  1472  0015A4  0228               	mulwf	main@y,c
  1473  0015A6  3AF3               	swapf	prodl,f,c
  1474  0015A8  3AF4               	swapf	prodh,f,c
  1475  0015AA  0EF0               	movlw	240
  1476  0015AC  16F4               	andwf	prodh,f,c
  1477  0015AE  50F3               	movf	prodl,w,c
  1478  0015B0  0B0F               	andlw	15
  1479  0015B2  12F4               	iorwf	prodh,f,c
  1480  0015B4  0EF0               	movlw	240
  1481  0015B6  16F3               	andwf	prodl,f,c
  1482  0015B8  CFF3 F01B          	movff	prodl,glcdDrawPixel@color
  1483  0015BC  CFF4 F01C          	movff	prodh,glcdDrawPixel@color+1
  1484  0015C0  0E00               	movlw	0
  1485  0015C2  BE1C               	btfsc	glcdDrawPixel@color+1,7,c
  1486  0015C4  0EFF               	movlw	-1
  1487  0015C6  6E1D               	movwf	glcdDrawPixel@color+2,c
  1488  0015C8  6E1E               	movwf	glcdDrawPixel@color+3,c
  1489  0015CA  5029               	movf	main@x,w,c
  1490  0015CC  EC90  F00E         	call	_glcdDrawPixel
  1491  0015D0  2A29               	incf	main@x,f,c
  1492  0015D2  D7DC               	goto	l1911
  1493  0015D4                     u750:
  1494  0015D4  2A28               	incf	main@y,f,c
  1495  0015D6  D7CF               	goto	l1905
  1496  0015D8                     u760:
  1497                           
  1498                           ;main.c: 116: }
  1499                           ;main.c: 117: }
  1500                           ;main.c: 120: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1501  0015D8  0E00               	movlw	0
  1502  0015DA  6E28               	movwf	main@y,c
  1503  0015DC                     l1927:
  1504  0015DC  0E69               	movlw	low _GLCD_SIZE_VERT
  1505  0015DE  6EF6               	movwf	tblptrl,c
  1506  0015E0                     	if	1	;There is more than 1 active tblptr byte
  1507  0015E0  0E10               	movlw	high _GLCD_SIZE_VERT
  1508  0015E2  6EF7               	movwf	tblptrh,c
  1509  0015E4                     	endif
  1510  0015E4                     	if	0	;There are less than 3 active tblptr bytes
  1511  0015E4                     	endif
  1512  0015E4  0009               	tblrd		*+
  1513  0015E6  50F5               	movf	tablat,w,c
  1514  0015E8  5C28               	subwf	main@y,w,c
  1515  0015EA  B0D8               	btfsc	status,0,c
  1516  0015EC  D033               	goto	u800
  1517                           
  1518                           ;main.c: 121: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1519  0015EE  0E00               	movlw	0
  1520  0015F0  6E29               	movwf	main@x,c
  1521  0015F2                     l1933:
  1522  0015F2  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1523  0015F4  6EF6               	movwf	tblptrl,c
  1524  0015F6                     	if	1	;There is more than 1 active tblptr byte
  1525  0015F6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1526  0015F8  6EF7               	movwf	tblptrh,c
  1527  0015FA                     	endif
  1528  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  1529  0015FA                     	endif
  1530  0015FA  0009               	tblrd		*+
  1531  0015FC  50F5               	movf	tablat,w,c
  1532  0015FE  5C29               	subwf	main@x,w,c
  1533  001600  B0D8               	btfsc	status,0,c
  1534  001602  D026               	goto	u790
  1535                           
  1536                           ;main.c: 122: glcdDrawPixel(x, y, (x+8)*(y+8));
  1537  001604  0E08               	movlw	8
  1538  001606  2429               	addwf	main@x,w,c
  1539  001608  6E01               	movwf	___wmul@multiplier,c
  1540  00160A  6A02               	clrf	___wmul@multiplier+1,c
  1541  00160C  0E00               	movlw	0
  1542  00160E  2202               	addwfc	___wmul@multiplier+1,f,c
  1543  001610  0E08               	movlw	8
  1544  001612  2428               	addwf	main@y,w,c
  1545  001614  6E03               	movwf	___wmul@multiplicand,c
  1546  001616  6A04               	clrf	___wmul@multiplicand+1,c
  1547  001618  0E00               	movlw	0
  1548  00161A  2204               	addwfc	___wmul@multiplicand+1,f,c
  1549  00161C  EC4D  F00F         	call	___wmul	;wreg free
  1550  001620  C001  F024         	movff	?___wmul,_main$1161
  1551  001624  C002  F025         	movff	?___wmul+1,_main$1161+1
  1552  001628  0E00               	movlw	0
  1553  00162A  BE25               	btfsc	_main$1161+1,7,c
  1554  00162C  0EFF               	movlw	-1
  1555  00162E  6E26               	movwf	_main$1161+2,c
  1556  001630  6E27               	movwf	_main$1161+3,c
  1557                           
  1558                           ;main.c: 122: glcdDrawPixel(x, y, (x+8)*(y+8));
  1559  001632  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1560  001636  C024  F01B         	movff	_main$1161,glcdDrawPixel@color
  1561  00163A  C025  F01C         	movff	_main$1161+1,glcdDrawPixel@color+1
  1562  00163E  C026  F01D         	movff	_main$1161+2,glcdDrawPixel@color+2
  1563  001642  C027  F01E         	movff	_main$1161+3,glcdDrawPixel@color+3
  1564  001646  5029               	movf	main@x,w,c
  1565  001648  EC90  F00E         	call	_glcdDrawPixel
  1566  00164C  2A29               	incf	main@x,f,c
  1567  00164E  D7D1               	goto	l1933
  1568  001650                     u790:
  1569  001650  2A28               	incf	main@y,f,c
  1570  001652  D7C4               	goto	l1927
  1571  001654                     u800:
  1572                           
  1573                           ;main.c: 123: }
  1574                           ;main.c: 124: }
  1575                           ;main.c: 133: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1576  001654  0E00               	movlw	0
  1577  001656  6E28               	movwf	main@y,c
  1578  001658                     l1951:
  1579  001658  0E69               	movlw	low _GLCD_SIZE_VERT
  1580  00165A  6EF6               	movwf	tblptrl,c
  1581  00165C                     	if	1	;There is more than 1 active tblptr byte
  1582  00165C  0E10               	movlw	high _GLCD_SIZE_VERT
  1583  00165E  6EF7               	movwf	tblptrh,c
  1584  001660                     	endif
  1585  001660                     	if	0	;There are less than 3 active tblptr bytes
  1586  001660                     	endif
  1587  001660  0009               	tblrd		*+
  1588  001662  50F5               	movf	tablat,w,c
  1589  001664  5C28               	subwf	main@y,w,c
  1590  001666  B0D8               	btfsc	status,0,c
  1591  001668  D024               	goto	u840
  1592                           
  1593                           ;main.c: 134: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1594  00166A  0E00               	movlw	0
  1595  00166C  6E29               	movwf	main@x,c
  1596  00166E                     l1957:
  1597  00166E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1598  001670  6EF6               	movwf	tblptrl,c
  1599  001672                     	if	1	;There is more than 1 active tblptr byte
  1600  001672  0E10               	movlw	high _GLCD_SIZE_HORZ
  1601  001674  6EF7               	movwf	tblptrh,c
  1602  001676                     	endif
  1603  001676                     	if	0	;There are less than 3 active tblptr bytes
  1604  001676                     	endif
  1605  001676  0009               	tblrd		*+
  1606  001678  50F5               	movf	tablat,w,c
  1607  00167A  5C29               	subwf	main@x,w,c
  1608  00167C  B0D8               	btfsc	status,0,c
  1609  00167E  D017               	goto	u830
  1610                           
  1611                           ;main.c: 135: glcdDrawPixel(x, y, GREEN);
  1612  001680  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1613  001684  0E0D               	movlw	low _GREEN
  1614  001686  6EF6               	movwf	tblptrl,c
  1615  001688                     	if	1	;There is more than 1 active tblptr byte
  1616  001688  0E10               	movlw	high _GREEN
  1617  00168A  6EF7               	movwf	tblptrh,c
  1618  00168C                     	endif
  1619  00168C                     	if	0	;There are less than 3 active tblptr bytes
  1620  00168C                     	endif
  1621  00168C  0009               	tblrd		*+
  1622  00168E  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1623  001692  0009               	tblrd		*+
  1624  001694  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1625  001698  0009               	tblrd		*+
  1626  00169A  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1627  00169E  000A               	tblrd		*-
  1628  0016A0  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1629  0016A4  5029               	movf	main@x,w,c
  1630  0016A6  EC90  F00E         	call	_glcdDrawPixel
  1631  0016AA  2A29               	incf	main@x,f,c
  1632  0016AC  D7E0               	goto	l1957
  1633  0016AE                     u830:
  1634  0016AE  2A28               	incf	main@y,f,c
  1635  0016B0  D7D3               	goto	l1951
  1636  0016B2                     u840:
  1637                           
  1638                           ;main.c: 136: }
  1639                           ;main.c: 137: }
  1640                           ;main.c: 143: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1641  0016B2  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1642  0016B4  6EF6               	movwf	tblptrl,c
  1643  0016B6                     	if	1	;There is more than 1 active tblptr byte
  1644  0016B6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1645  0016B8  6EF7               	movwf	tblptrh,c
  1646  0016BA                     	endif
  1647  0016BA                     	if	0	;There are less than 3 active tblptr bytes
  1648  0016BA                     	endif
  1649  0016BA  0008               	tblrd		*
  1650  0016BC  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1651  0016C0  0E00               	movlw	0
  1652  0016C2  6E08               	movwf	glcdDrawRectangle@YS,c
  1653  0016C4  0E69               	movlw	low _GLCD_SIZE_VERT
  1654  0016C6  6EF6               	movwf	tblptrl,c
  1655  0016C8                     	if	1	;There is more than 1 active tblptr byte
  1656  0016C8  0E10               	movlw	high _GLCD_SIZE_VERT
  1657  0016CA  6EF7               	movwf	tblptrh,c
  1658  0016CC                     	endif
  1659  0016CC                     	if	0	;There are less than 3 active tblptr bytes
  1660  0016CC                     	endif
  1661  0016CC  0008               	tblrd		*
  1662  0016CE  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1663  0016D2  0E25               	movlw	low _BLACK
  1664  0016D4  6EF6               	movwf	tblptrl,c
  1665  0016D6                     	if	1	;There is more than 1 active tblptr byte
  1666  0016D6  0E10               	movlw	high _BLACK
  1667  0016D8  6EF7               	movwf	tblptrh,c
  1668  0016DA                     	endif
  1669  0016DA                     	if	0	;There are less than 3 active tblptr bytes
  1670  0016DA                     	endif
  1671  0016DA  0009               	tblrd		*+
  1672  0016DC  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1673  0016E0  0009               	tblrd		*+
  1674  0016E2  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1675  0016E6  0009               	tblrd		*+
  1676  0016E8  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1677  0016EC  000A               	tblrd		*-
  1678  0016EE  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1679  0016F2  0E00               	movlw	0
  1680  0016F4  EC56  F00D         	call	_glcdDrawRectangle
  1681                           
  1682                           ;main.c: 144: for(y = 0; y < 5; y++){
  1683  0016F8  0E00               	movlw	0
  1684  0016FA  6E28               	movwf	main@y,c
  1685  0016FC                     l1975:
  1686  0016FC  0E04               	movlw	4
  1687  0016FE  6428               	cpfsgt	main@y,c
  1688  001700  D001               	goto	l154
  1689  001702  D03B               	goto	l158
  1690  001704                     l154:
  1691                           
  1692                           ;main.c: 145: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1693  001704  0E00               	movlw	0
  1694  001706  6E29               	movwf	main@x,c
  1695  001708                     l1981:
  1696  001708  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1697  00170A  6EF6               	movwf	tblptrl,c
  1698  00170C                     	if	1	;There is more than 1 active tblptr byte
  1699  00170C  0E10               	movlw	high _GLCD_SIZE_HORZ
  1700  00170E  6EF7               	movwf	tblptrh,c
  1701  001710                     	endif
  1702  001710                     	if	0	;There are less than 3 active tblptr bytes
  1703  001710                     	endif
  1704  001710  0009               	tblrd		*+
  1705  001712  50F5               	movf	tablat,w,c
  1706  001714  5C29               	subwf	main@x,w,c
  1707  001716  B0D8               	btfsc	status,0,c
  1708  001718  D01E               	goto	u870
  1709                           
  1710                           ;main.c: 146: glcdDrawPixel(x, y, WHITE);
  1711  00171A  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1712  00171E  0E1D               	movlw	low _WHITE
  1713  001720  6EF6               	movwf	tblptrl,c
  1714  001722                     	if	1	;There is more than 1 active tblptr byte
  1715  001722  0E10               	movlw	high _WHITE
  1716  001724  6EF7               	movwf	tblptrh,c
  1717  001726                     	endif
  1718  001726                     	if	0	;There are less than 3 active tblptr bytes
  1719  001726                     	endif
  1720  001726  0009               	tblrd		*+
  1721  001728  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1722  00172C  0009               	tblrd		*+
  1723  00172E  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1724  001732  0009               	tblrd		*+
  1725  001734  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1726  001738  000A               	tblrd		*-
  1727  00173A  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1728  00173E  5029               	movf	main@x,w,c
  1729  001740  EC90  F00E         	call	_glcdDrawPixel
  1730                           
  1731                           ;main.c: 147: _delay((unsigned long)((5)*(32000000/4000.0)));
  1732  001744  0E34               	movlw	52
  1733  001746  6E21               	movwf	??_main& (0+255),c
  1734  001748  0EF2               	movlw	242
  1735  00174A                     u987:
  1736  00174A  2EE8               	decfsz	wreg,f,c
  1737  00174C  D7FE               	bra	u987
  1738  00174E  2E21               	decfsz	??_main& (0+255),f,c
  1739  001750  D7FC               	bra	u987
  1740  001752  2A29               	incf	main@x,f,c
  1741  001754  D7D9               	goto	l1981
  1742  001756                     u870:
  1743  001756  2A28               	incf	main@y,f,c
  1744  001758  D7D1               	goto	l1975
  1745  00175A                     
  1746                           ;main.c: 154: glcdSetOrigin(1);
  1747  00175A  0E01               	movlw	1
  1748  00175C  ECC7  F00E         	call	_glcdSetOrigin
  1749                           
  1750                           ;main.c: 155: break;
  1751  001760  D021               	goto	l160
  1752  001762                     
  1753                           ;main.c: 157: glcdSetOrigin(2);
  1754  001762  0E02               	movlw	2
  1755  001764  ECC7  F00E         	call	_glcdSetOrigin
  1756                           
  1757                           ;main.c: 158: break;
  1758  001768  D01D               	goto	l160
  1759  00176A                     
  1760                           ;main.c: 160: glcdSetOrigin(3);
  1761  00176A  0E03               	movlw	3
  1762  00176C  ECC7  F00E         	call	_glcdSetOrigin
  1763                           
  1764                           ;main.c: 161: break;
  1765  001770  D019               	goto	l160
  1766  001772                     
  1767                           ;main.c: 163: glcdSetOrigin(0);
  1768  001772  0E00               	movlw	0
  1769  001774  ECC7  F00E         	call	_glcdSetOrigin
  1770                           
  1771                           ;main.c: 165: }
  1772                           
  1773                           ;main.c: 164: break;
  1774  001778  D015               	goto	l160
  1775  00177A                     l158:
  1776  00177A  5023               	movf	main@rotation,w,c
  1777  00177C  0B03               	andlw	3
  1778  00177E  6E21               	movwf	??_main& (0+255),c
  1779  001780  6A22               	clrf	(??_main+1)& (0+255),c
  1780                           
  1781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1782                           ; Switch size 1, requested type "space"
  1783                           ; Number of cases is 1, Range of values is 0 to 0
  1784                           ; switch strategies available:
  1785                           ; Name         Instructions Cycles
  1786                           ; simple_byte            4     3 (average)
  1787                           ;	Chosen strategy is simple_byte
  1788  001782  5022               	movf	??_main+1,w,c
  1789  001784  0A00               	xorlw	0	; case 0
  1790  001786  A4D8               	btfss	status,2,c
  1791  001788  D00D               	goto	l160
  1792                           
  1793                           ; Switch size 1, requested type "space"
  1794                           ; Number of cases is 4, Range of values is 0 to 3
  1795                           ; switch strategies available:
  1796                           ; Name         Instructions Cycles
  1797                           ; simple_byte           13     7 (average)
  1798                           ;	Chosen strategy is simple_byte
  1799  00178A  5021               	movf	??_main,w,c
  1800  00178C  0A00               	xorlw	0	; case 0
  1801  00178E  B4D8               	btfsc	status,2,c
  1802  001790  D7E4               	goto	l159
  1803  001792  0A01               	xorlw	1	; case 1
  1804  001794  B4D8               	btfsc	status,2,c
  1805  001796  D7E5               	goto	l161
  1806  001798  0A03               	xorlw	3	; case 2
  1807  00179A  B4D8               	btfsc	status,2,c
  1808  00179C  D7E6               	goto	l162
  1809  00179E  0A01               	xorlw	1	; case 3
  1810  0017A0  B4D8               	btfsc	status,2,c
  1811  0017A2  D7E7               	goto	l163
  1812  0017A4                     l160:
  1813                           
  1814                           ;main.c: 166: rotation++;
  1815  0017A4  2A23               	incf	main@rotation,f,c
  1816  0017A6  D486               	goto	l137
  1817  0017A8                     __end_of_main:
  1818                           	opt stack 0
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           prodh	equ	0xFF4
  1824                           prodl	equ	0xFF3
  1825                           wreg	equ	0xFE8
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _initGLCD *****************
  1829 ;; Defined at:
  1830 ;;		line 238 in file "GLCD_PIC_V1.1.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        2 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    4
  1851 ;; This function calls:
  1852 ;;		_glcdDrawRectangle
  1853 ;;		_glcdSetCOLMOD
  1854 ;;		_glcdTransfer
  1855 ;;		_spiInit
  1856 ;; This function is called by:
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text1
  1862  0017A8                     __ptext1:
  1863                           	opt stack 0
  1864  0017A8                     _initGLCD:
  1865                           	opt stack 26
  1866                           
  1867                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
  1868                           
  1869                           ;incstack = 0
  1870  0017A8  808C               	bsf	3980,0,c	;volatile
  1871                           
  1872                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
  1873  0017AA  828C               	bsf	3980,1,c	;volatile
  1874                           
  1875                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
  1876  0017AC  9095               	bcf	3989,0,c	;volatile
  1877                           
  1878                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
  1879  0017AE  9295               	bcf	3989,1,c	;volatile
  1880                           
  1881                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
  1882  0017B0  0E04               	movlw	4
  1883  0017B2  EC1D  F00F         	call	_spiInit
  1884                           
  1885                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(32000000/4000.0)));
  1886  0017B6  0ED0               	movlw	208
  1887  0017B8  6E1A               	movwf	??_initGLCD& (0+255),c
  1888  0017BA  0ECA               	movlw	202
  1889  0017BC                     u997:
  1890  0017BC  2EE8               	decfsz	wreg,f,c
  1891  0017BE  D7FE               	bra	u997
  1892  0017C0  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1893  0017C2  D7FC               	bra	u997
  1894                           
  1895                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(32
      +                          000000/4000.0))); };
  1896  0017C4  0E01               	movlw	1
  1897  0017C6  6E04               	movwf	glcdTransfer@cmd,c
  1898  0017C8  0E47               	movlw	low GLCD_PIC@INST_SWRESET
  1899  0017CA  6EF6               	movwf	tblptrl,c
  1900  0017CC                     	if	1	;There is more than 1 active tblptr byte
  1901  0017CC  0E10               	movlw	high GLCD_PIC@INST_SWRESET
  1902  0017CE  6EF7               	movwf	tblptrh,c
  1903  0017D0                     	endif
  1904  0017D0                     	if	0	;There are less than 3 active tblptr bytes
  1905  0017D0                     	endif
  1906  0017D0  0008               	tblrd		*
  1907  0017D2  50F5               	movf	tablat,w,c
  1908  0017D4  EC39  F00F         	call	_glcdTransfer
  1909  0017D8  0E06               	movlw	6
  1910  0017DA  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1911  0017DC  0E47               	movlw	71
  1912  0017DE  6E1A               	movwf	??_initGLCD& (0+255),c
  1913  0017E0  0EA0               	movlw	160
  1914  0017E2                     u1007:
  1915  0017E2  2EE8               	decfsz	wreg,f,c
  1916  0017E4  D7FE               	bra	u1007
  1917  0017E6  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1918  0017E8  D7FC               	bra	u1007
  1919  0017EA  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1920  0017EC  D7FA               	bra	u1007
  1921  0017EE  D000               	nop2	
  1922                           
  1923                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(320
      +                          00000/4000.0))); };
  1924  0017F0  0E01               	movlw	1
  1925  0017F2  6E04               	movwf	glcdTransfer@cmd,c
  1926  0017F4  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
  1927  0017F6  6EF6               	movwf	tblptrl,c
  1928  0017F8                     	if	1	;There is more than 1 active tblptr byte
  1929  0017F8  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
  1930  0017FA  6EF7               	movwf	tblptrh,c
  1931  0017FC                     	endif
  1932  0017FC                     	if	0	;There are less than 3 active tblptr bytes
  1933  0017FC                     	endif
  1934  0017FC  0008               	tblrd		*
  1935  0017FE  50F5               	movf	tablat,w,c
  1936  001800  EC39  F00F         	call	_glcdTransfer
  1937  001804  0E06               	movlw	6
  1938  001806  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1939  001808  0E47               	movlw	71
  1940  00180A  6E1A               	movwf	??_initGLCD& (0+255),c
  1941  00180C  0EA0               	movlw	160
  1942  00180E                     u1017:
  1943  00180E  2EE8               	decfsz	wreg,f,c
  1944  001810  D7FE               	bra	u1017
  1945  001812  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1946  001814  D7FC               	bra	u1017
  1947  001816  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1948  001818  D7FA               	bra	u1017
  1949  00181A  D000               	nop2	
  1950                           
  1951                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  1952  00181C  0E01               	movlw	1
  1953  00181E  6E04               	movwf	glcdTransfer@cmd,c
  1954  001820  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
  1955  001822  6EF6               	movwf	tblptrl,c
  1956  001824                     	if	1	;There is more than 1 active tblptr byte
  1957  001824  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
  1958  001826  6EF7               	movwf	tblptrh,c
  1959  001828                     	endif
  1960  001828                     	if	0	;There are less than 3 active tblptr bytes
  1961  001828                     	endif
  1962  001828  0008               	tblrd		*
  1963  00182A  50F5               	movf	tablat,w,c
  1964  00182C  EC39  F00F         	call	_glcdTransfer
  1965                           
  1966                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
  1967  001830  0E00               	movlw	0
  1968  001832  6E04               	movwf	glcdTransfer@cmd,c
  1969  001834  0E00               	movlw	0
  1970  001836  EC39  F00F         	call	_glcdTransfer
  1971                           
  1972                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
  1973  00183A  0E00               	movlw	0
  1974  00183C  6E04               	movwf	glcdTransfer@cmd,c
  1975  00183E  0E06               	movlw	6
  1976  001840  EC39  F00F         	call	_glcdTransfer
  1977                           
  1978                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
  1979  001844  0E00               	movlw	0
  1980  001846  6E04               	movwf	glcdTransfer@cmd,c
  1981  001848  0E03               	movlw	3
  1982  00184A  EC39  F00F         	call	_glcdTransfer
  1983                           
  1984                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  1985  00184E  0E01               	movlw	1
  1986  001850  6E04               	movwf	glcdTransfer@cmd,c
  1987  001852  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
  1988  001854  6EF6               	movwf	tblptrl,c
  1989  001856                     	if	1	;There is more than 1 active tblptr byte
  1990  001856  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
  1991  001858  6EF7               	movwf	tblptrh,c
  1992  00185A                     	endif
  1993  00185A                     	if	0	;There are less than 3 active tblptr bytes
  1994  00185A                     	endif
  1995  00185A  0008               	tblrd		*
  1996  00185C  50F5               	movf	tablat,w,c
  1997  00185E  EC39  F00F         	call	_glcdTransfer
  1998                           
  1999                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
  2000  001862  0E00               	movlw	0
  2001  001864  6E04               	movwf	glcdTransfer@cmd,c
  2002  001866  0E01               	movlw	1
  2003  001868  EC39  F00F         	call	_glcdTransfer
  2004                           
  2005                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
  2006  00186C  0E00               	movlw	0
  2007  00186E  6E04               	movwf	glcdTransfer@cmd,c
  2008  001870  0E2C               	movlw	44
  2009  001872  EC39  F00F         	call	_glcdTransfer
  2010                           
  2011                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
  2012  001876  0E00               	movlw	0
  2013  001878  6E04               	movwf	glcdTransfer@cmd,c
  2014  00187A  0E2D               	movlw	45
  2015  00187C  EC39  F00F         	call	_glcdTransfer
  2016                           
  2017                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  2018  001880  0E01               	movlw	1
  2019  001882  6E04               	movwf	glcdTransfer@cmd,c
  2020  001884  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
  2021  001886  6EF6               	movwf	tblptrl,c
  2022  001888                     	if	1	;There is more than 1 active tblptr byte
  2023  001888  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
  2024  00188A  6EF7               	movwf	tblptrh,c
  2025  00188C                     	endif
  2026  00188C                     	if	0	;There are less than 3 active tblptr bytes
  2027  00188C                     	endif
  2028  00188C  0008               	tblrd		*
  2029  00188E  50F5               	movf	tablat,w,c
  2030  001890  EC39  F00F         	call	_glcdTransfer
  2031                           
  2032                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
  2033  001894  0E00               	movlw	0
  2034  001896  6E04               	movwf	glcdTransfer@cmd,c
  2035  001898  0E01               	movlw	1
  2036  00189A  EC39  F00F         	call	_glcdTransfer
  2037                           
  2038                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
  2039  00189E  0E00               	movlw	0
  2040  0018A0  6E04               	movwf	glcdTransfer@cmd,c
  2041  0018A2  0E2C               	movlw	44
  2042  0018A4  EC39  F00F         	call	_glcdTransfer
  2043                           
  2044                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  2045  0018A8  0E00               	movlw	0
  2046  0018AA  6E04               	movwf	glcdTransfer@cmd,c
  2047  0018AC  0E2D               	movlw	45
  2048  0018AE  EC39  F00F         	call	_glcdTransfer
  2049                           
  2050                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  2051  0018B2  0E01               	movlw	1
  2052  0018B4  6E04               	movwf	glcdTransfer@cmd,c
  2053  0018B6  0E30               	movlw	low GLCD_PIC@INST_INVCTR
  2054  0018B8  6EF6               	movwf	tblptrl,c
  2055  0018BA                     	if	1	;There is more than 1 active tblptr byte
  2056  0018BA  0E10               	movlw	high GLCD_PIC@INST_INVCTR
  2057  0018BC  6EF7               	movwf	tblptrh,c
  2058  0018BE                     	endif
  2059  0018BE                     	if	0	;There are less than 3 active tblptr bytes
  2060  0018BE                     	endif
  2061  0018BE  0008               	tblrd		*
  2062  0018C0  50F5               	movf	tablat,w,c
  2063  0018C2  EC39  F00F         	call	_glcdTransfer
  2064                           
  2065                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  2066  0018C6  0E00               	movlw	0
  2067  0018C8  6E04               	movwf	glcdTransfer@cmd,c
  2068  0018CA  0E00               	movlw	0
  2069  0018CC  EC39  F00F         	call	_glcdTransfer
  2070                           
  2071                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  2072  0018D0  0E01               	movlw	1
  2073  0018D2  6E04               	movwf	glcdTransfer@cmd,c
  2074  0018D4  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
  2075  0018D6  6EF6               	movwf	tblptrl,c
  2076  0018D8                     	if	1	;There is more than 1 active tblptr byte
  2077  0018D8  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
  2078  0018DA  6EF7               	movwf	tblptrh,c
  2079  0018DC                     	endif
  2080  0018DC                     	if	0	;There are less than 3 active tblptr bytes
  2081  0018DC                     	endif
  2082  0018DC  0008               	tblrd		*
  2083  0018DE  50F5               	movf	tablat,w,c
  2084  0018E0  EC39  F00F         	call	_glcdTransfer
  2085                           
  2086                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  2087  0018E4  0E00               	movlw	0
  2088  0018E6  6E04               	movwf	glcdTransfer@cmd,c
  2089  0018E8  0EA2               	movlw	162
  2090  0018EA  EC39  F00F         	call	_glcdTransfer
  2091                           
  2092                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  2093  0018EE  0E00               	movlw	0
  2094  0018F0  6E04               	movwf	glcdTransfer@cmd,c
  2095  0018F2  0E02               	movlw	2
  2096  0018F4  EC39  F00F         	call	_glcdTransfer
  2097                           
  2098                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  2099  0018F8  0E00               	movlw	0
  2100  0018FA  6E04               	movwf	glcdTransfer@cmd,c
  2101  0018FC  0E84               	movlw	132
  2102  0018FE  EC39  F00F         	call	_glcdTransfer
  2103                           
  2104                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  2105  001902  0E01               	movlw	1
  2106  001904  6E04               	movwf	glcdTransfer@cmd,c
  2107  001906  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  2108  001908  6EF6               	movwf	tblptrl,c
  2109  00190A                     	if	1	;There is more than 1 active tblptr byte
  2110  00190A  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  2111  00190C  6EF7               	movwf	tblptrh,c
  2112  00190E                     	endif
  2113  00190E                     	if	0	;There are less than 3 active tblptr bytes
  2114  00190E                     	endif
  2115  00190E  0008               	tblrd		*
  2116  001910  50F5               	movf	tablat,w,c
  2117  001912  EC39  F00F         	call	_glcdTransfer
  2118                           
  2119                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  2120  001916  0E00               	movlw	0
  2121  001918  6E04               	movwf	glcdTransfer@cmd,c
  2122  00191A  0EC5               	movlw	197
  2123  00191C  EC39  F00F         	call	_glcdTransfer
  2124                           
  2125                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  2126  001920  0E01               	movlw	1
  2127  001922  6E04               	movwf	glcdTransfer@cmd,c
  2128  001924  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  2129  001926  6EF6               	movwf	tblptrl,c
  2130  001928                     	if	1	;There is more than 1 active tblptr byte
  2131  001928  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  2132  00192A  6EF7               	movwf	tblptrh,c
  2133  00192C                     	endif
  2134  00192C                     	if	0	;There are less than 3 active tblptr bytes
  2135  00192C                     	endif
  2136  00192C  0008               	tblrd		*
  2137  00192E  50F5               	movf	tablat,w,c
  2138  001930  EC39  F00F         	call	_glcdTransfer
  2139                           
  2140                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  2141  001934  0E00               	movlw	0
  2142  001936  6E04               	movwf	glcdTransfer@cmd,c
  2143  001938  0E0A               	movlw	10
  2144  00193A  EC39  F00F         	call	_glcdTransfer
  2145                           
  2146                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  2147  00193E  0E00               	movlw	0
  2148  001940  6E04               	movwf	glcdTransfer@cmd,c
  2149  001942  0E00               	movlw	0
  2150  001944  EC39  F00F         	call	_glcdTransfer
  2151                           
  2152                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  2153  001948  0E01               	movlw	1
  2154  00194A  6E04               	movwf	glcdTransfer@cmd,c
  2155  00194C  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  2156  00194E  6EF6               	movwf	tblptrl,c
  2157  001950                     	if	1	;There is more than 1 active tblptr byte
  2158  001950  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  2159  001952  6EF7               	movwf	tblptrh,c
  2160  001954                     	endif
  2161  001954                     	if	0	;There are less than 3 active tblptr bytes
  2162  001954                     	endif
  2163  001954  0008               	tblrd		*
  2164  001956  50F5               	movf	tablat,w,c
  2165  001958  EC39  F00F         	call	_glcdTransfer
  2166                           
  2167                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  2168  00195C  0E00               	movlw	0
  2169  00195E  6E04               	movwf	glcdTransfer@cmd,c
  2170  001960  0E8A               	movlw	138
  2171  001962  EC39  F00F         	call	_glcdTransfer
  2172                           
  2173                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  2174  001966  0E00               	movlw	0
  2175  001968  6E04               	movwf	glcdTransfer@cmd,c
  2176  00196A  0E2A               	movlw	42
  2177  00196C  EC39  F00F         	call	_glcdTransfer
  2178                           
  2179                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  2180  001970  0E01               	movlw	1
  2181  001972  6E04               	movwf	glcdTransfer@cmd,c
  2182  001974  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  2183  001976  6EF6               	movwf	tblptrl,c
  2184  001978                     	if	1	;There is more than 1 active tblptr byte
  2185  001978  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  2186  00197A  6EF7               	movwf	tblptrh,c
  2187  00197C                     	endif
  2188  00197C                     	if	0	;There are less than 3 active tblptr bytes
  2189  00197C                     	endif
  2190  00197C  0008               	tblrd		*
  2191  00197E  50F5               	movf	tablat,w,c
  2192  001980  EC39  F00F         	call	_glcdTransfer
  2193                           
  2194                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  2195  001984  0E00               	movlw	0
  2196  001986  6E04               	movwf	glcdTransfer@cmd,c
  2197  001988  0E8A               	movlw	138
  2198  00198A  EC39  F00F         	call	_glcdTransfer
  2199                           
  2200                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  2201  00198E  0E00               	movlw	0
  2202  001990  6E04               	movwf	glcdTransfer@cmd,c
  2203  001992  0E2A               	movlw	42
  2204  001994  EC39  F00F         	call	_glcdTransfer
  2205                           
  2206                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  2207  001998  0E01               	movlw	1
  2208  00199A  6E04               	movwf	glcdTransfer@cmd,c
  2209  00199C  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  2210  00199E  6EF6               	movwf	tblptrl,c
  2211  0019A0                     	if	1	;There is more than 1 active tblptr byte
  2212  0019A0  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  2213  0019A2  6EF7               	movwf	tblptrh,c
  2214  0019A4                     	endif
  2215  0019A4                     	if	0	;There are less than 3 active tblptr bytes
  2216  0019A4                     	endif
  2217  0019A4  0008               	tblrd		*
  2218  0019A6  50F5               	movf	tablat,w,c
  2219  0019A8  EC39  F00F         	call	_glcdTransfer
  2220                           
  2221                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  2222  0019AC  0E00               	movlw	0
  2223  0019AE  6E04               	movwf	glcdTransfer@cmd,c
  2224  0019B0  0E3C               	movlw	60
  2225  0019B2  EC39  F00F         	call	_glcdTransfer
  2226                           
  2227                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  2228  0019B6  0E01               	movlw	1
  2229  0019B8  6E04               	movwf	glcdTransfer@cmd,c
  2230  0019BA  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  2231  0019BC  6EF6               	movwf	tblptrl,c
  2232  0019BE                     	if	1	;There is more than 1 active tblptr byte
  2233  0019BE  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  2234  0019C0  6EF7               	movwf	tblptrh,c
  2235  0019C2                     	endif
  2236  0019C2                     	if	0	;There are less than 3 active tblptr bytes
  2237  0019C2                     	endif
  2238  0019C2  0008               	tblrd		*
  2239  0019C4  50F5               	movf	tablat,w,c
  2240  0019C6  EC39  F00F         	call	_glcdTransfer
  2241                           
  2242                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  2243  0019CA  0E12               	movlw	18
  2244  0019CC  ECF5  F00E         	call	_glcdSetCOLMOD
  2245                           
  2246                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  2247  0019D0  0E01               	movlw	1
  2248  0019D2  6E04               	movwf	glcdTransfer@cmd,c
  2249  0019D4  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  2250  0019D6  6EF6               	movwf	tblptrl,c
  2251  0019D8                     	if	1	;There is more than 1 active tblptr byte
  2252  0019D8  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  2253  0019DA  6EF7               	movwf	tblptrh,c
  2254  0019DC                     	endif
  2255  0019DC                     	if	0	;There are less than 3 active tblptr bytes
  2256  0019DC                     	endif
  2257  0019DC  0008               	tblrd		*
  2258  0019DE  50F5               	movf	tablat,w,c
  2259  0019E0  EC39  F00F         	call	_glcdTransfer
  2260                           
  2261                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  2262  0019E4  0E00               	movlw	0
  2263  0019E6  6E04               	movwf	glcdTransfer@cmd,c
  2264  0019E8  0E01               	movlw	1
  2265  0019EA  EC39  F00F         	call	_glcdTransfer
  2266                           
  2267                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  2268  0019EE  0E01               	movlw	1
  2269  0019F0  6E04               	movwf	glcdTransfer@cmd,c
  2270  0019F2  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  2271  0019F4  6EF6               	movwf	tblptrl,c
  2272  0019F6                     	if	1	;There is more than 1 active tblptr byte
  2273  0019F6  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  2274  0019F8  6EF7               	movwf	tblptrh,c
  2275  0019FA                     	endif
  2276  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  2277  0019FA                     	endif
  2278  0019FA  0008               	tblrd		*
  2279  0019FC  50F5               	movf	tablat,w,c
  2280  0019FE  EC39  F00F         	call	_glcdTransfer
  2281                           
  2282                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  2283  001A02  0E01               	movlw	1
  2284  001A04  6E04               	movwf	glcdTransfer@cmd,c
  2285  001A06  0E43               	movlw	low GLCD_PIC@INST_NORON
  2286  001A08  6EF6               	movwf	tblptrl,c
  2287  001A0A                     	if	1	;There is more than 1 active tblptr byte
  2288  001A0A  0E10               	movlw	high GLCD_PIC@INST_NORON
  2289  001A0C  6EF7               	movwf	tblptrh,c
  2290  001A0E                     	endif
  2291  001A0E                     	if	0	;There are less than 3 active tblptr bytes
  2292  001A0E                     	endif
  2293  001A0E  0008               	tblrd		*
  2294  001A10  50F5               	movf	tablat,w,c
  2295  001A12  EC39  F00F         	call	_glcdTransfer
  2296                           
  2297                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  2298  001A16  8C2A               	bsf	_MADCTLbits,6,c
  2299                           
  2300                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  2301  001A18  8E2A               	bsf	_MADCTLbits,7,c
  2302                           
  2303                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  2304  001A1A  8A2A               	bsf	_MADCTLbits,5,c
  2305                           
  2306                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  2307  001A1C  982A               	bcf	_MADCTLbits,4,c
  2308                           
  2309                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  2310  001A1E  962A               	bcf	_MADCTLbits,3,c
  2311                           
  2312                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  2313  001A20  942A               	bcf	_MADCTLbits,2,c
  2314                           
  2315                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2316  001A22  0E01               	movlw	1
  2317  001A24  6E04               	movwf	glcdTransfer@cmd,c
  2318  001A26  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  2319  001A28  6EF6               	movwf	tblptrl,c
  2320  001A2A                     	if	1	;There is more than 1 active tblptr byte
  2321  001A2A  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  2322  001A2C  6EF7               	movwf	tblptrh,c
  2323  001A2E                     	endif
  2324  001A2E                     	if	0	;There are less than 3 active tblptr bytes
  2325  001A2E                     	endif
  2326  001A2E  0008               	tblrd		*
  2327  001A30  50F5               	movf	tablat,w,c
  2328  001A32  EC39  F00F         	call	_glcdTransfer
  2329  001A36  0E00               	movlw	0
  2330  001A38  6E04               	movwf	glcdTransfer@cmd,c
  2331  001A3A  502A               	movf	_MADCTLbits,w,c
  2332  001A3C  EC39  F00F         	call	_glcdTransfer
  2333                           
  2334                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  2335  001A40  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2336  001A42  6EF6               	movwf	tblptrl,c
  2337  001A44                     	if	1	;There is more than 1 active tblptr byte
  2338  001A44  0E10               	movlw	high _GLCD_SIZE_HORZ
  2339  001A46  6EF7               	movwf	tblptrh,c
  2340  001A48                     	endif
  2341  001A48                     	if	0	;There are less than 3 active tblptr bytes
  2342  001A48                     	endif
  2343  001A48  0008               	tblrd		*
  2344  001A4A  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  2345  001A4E  0E00               	movlw	0
  2346  001A50  6E08               	movwf	glcdDrawRectangle@YS,c
  2347  001A52  0E69               	movlw	low _GLCD_SIZE_VERT
  2348  001A54  6EF6               	movwf	tblptrl,c
  2349  001A56                     	if	1	;There is more than 1 active tblptr byte
  2350  001A56  0E10               	movlw	high _GLCD_SIZE_VERT
  2351  001A58  6EF7               	movwf	tblptrh,c
  2352  001A5A                     	endif
  2353  001A5A                     	if	0	;There are less than 3 active tblptr bytes
  2354  001A5A                     	endif
  2355  001A5A  0008               	tblrd		*
  2356  001A5C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  2357  001A60  0E25               	movlw	low _BLACK
  2358  001A62  6EF6               	movwf	tblptrl,c
  2359  001A64                     	if	1	;There is more than 1 active tblptr byte
  2360  001A64  0E10               	movlw	high _BLACK
  2361  001A66  6EF7               	movwf	tblptrh,c
  2362  001A68                     	endif
  2363  001A68                     	if	0	;There are less than 3 active tblptr bytes
  2364  001A68                     	endif
  2365  001A68  0009               	tblrd		*+
  2366  001A6A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  2367  001A6E  0009               	tblrd		*+
  2368  001A70  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  2369  001A74  0009               	tblrd		*+
  2370  001A76  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  2371  001A7A  000A               	tblrd		*-
  2372  001A7C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  2373  001A80  0E00               	movlw	0
  2374  001A82  EC56  F00D         	call	_glcdDrawRectangle
  2375                           
  2376                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  2377  001A86  0E01               	movlw	1
  2378  001A88  6E04               	movwf	glcdTransfer@cmd,c
  2379  001A8A  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  2380  001A8C  6EF6               	movwf	tblptrl,c
  2381  001A8E                     	if	1	;There is more than 1 active tblptr byte
  2382  001A8E  0E10               	movlw	high GLCD_PIC@INST_DISPON
  2383  001A90  6EF7               	movwf	tblptrh,c
  2384  001A92                     	endif
  2385  001A92                     	if	0	;There are less than 3 active tblptr bytes
  2386  001A92                     	endif
  2387  001A92  0008               	tblrd		*
  2388  001A94  50F5               	movf	tablat,w,c
  2389  001A96  EC39  F00F         	call	_glcdTransfer
  2390                           
  2391                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(32000000/4000.0)));
  2392  001A9A  0E68               	movlw	104
  2393  001A9C  6E1A               	movwf	??_initGLCD& (0+255),c
  2394  001A9E  0EE4               	movlw	228
  2395  001AA0                     u1027:
  2396  001AA0  2EE8               	decfsz	wreg,f,c
  2397  001AA2  D7FE               	bra	u1027
  2398  001AA4  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  2399  001AA6  D7FC               	bra	u1027
  2400  001AA8  D000               	nop2	
  2401  001AAA  0012               	return		;funcret
  2402  001AAC                     __end_of_initGLCD:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           prodh	equ	0xFF4
  2409                           prodl	equ	0xFF3
  2410                           wreg	equ	0xFE8
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _spiInit *****************
  2414 ;; Defined at:
  2415 ;;		line 54 in file "SPI_PIC.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  divider         1    wreg     unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  divider         1    0[COMRAM] unsigned char 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, status,2, status,0
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;Total ram usage:        1 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_initGLCD
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text2
  2443  001E3A                     __ptext2:
  2444                           	opt stack 0
  2445  001E3A                     _spiInit:
  2446                           	opt stack 29
  2447                           
  2448                           ;incstack = 0
  2449                           ;spiInit@divider stored from wreg
  2450  001E3A  6E01               	movwf	spiInit@divider,c
  2451                           
  2452                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  2453  001E3C  9AC6               	bcf	4038,5,c	;volatile
  2454                           
  2455                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  2456  001E3E  0E00               	movlw	0
  2457  001E40  6EC7               	movwf	4039,c	;volatile
  2458                           
  2459                           ;SPI_PIC.c: 71: switch(divider){
  2460  001E42  D007               	goto	l195
  2461  001E44                     
  2462                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  2463  001E44  0E11               	movlw	17
  2464  001E46  D003               	goto	L3
  2465  001E48                     
  2466                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  2467  001E48  0E12               	movlw	18
  2468  001E4A  D001               	goto	L3
  2469  001E4C                     
  2470                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  2471  001E4C  0E10               	movlw	16
  2472  001E4E                     L3:
  2473  001E4E  6EC6               	movwf	4038,c	;volatile
  2474                           
  2475                           ;SPI_PIC.c: 83: }
  2476  001E50  D00B               	goto	l197
  2477  001E52                     l195:
  2478  001E52  5001               	movf	spiInit@divider,w,c
  2479                           
  2480                           ; Switch size 1, requested type "space"
  2481                           ; Number of cases is 3, Range of values is 4 to 64
  2482                           ; switch strategies available:
  2483                           ; Name         Instructions Cycles
  2484                           ; simple_byte           10     6 (average)
  2485                           ;	Chosen strategy is simple_byte
  2486  001E54  0A04               	xorlw	4	; case 4
  2487  001E56  B4D8               	btfsc	status,2,c
  2488  001E58  D7F9               	goto	l200
  2489  001E5A  0A14               	xorlw	20	; case 16
  2490  001E5C  B4D8               	btfsc	status,2,c
  2491  001E5E  D7F2               	goto	l198
  2492  001E60  0A50               	xorlw	80	; case 64
  2493  001E62  B4D8               	btfsc	status,2,c
  2494  001E64  D7F1               	goto	l199
  2495  001E66  D7F2               	goto	l200
  2496  001E68                     l197:
  2497                           
  2498                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  2499  001E68  9A94               	bcf	3988,5,c	;volatile
  2500                           
  2501                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  2502  001E6A  8894               	bsf	3988,4,c	;volatile
  2503                           
  2504                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  2505  001E6C  9694               	bcf	3988,3,c	;volatile
  2506                           
  2507                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  2508  001E6E  8AC6               	bsf	4038,5,c	;volatile
  2509  001E70  0012               	return		;funcret
  2510  001E72                     __end_of_spiInit:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           wreg	equ	0xFE8
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _glcdSetCOLMOD *****************
  2522 ;; Defined at:
  2523 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  numBitsPerPi    1    wreg     unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  2528 ;;  rawData         2    7[COMRAM] unsigned short 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;Total ram usage:        3 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    3
  2545 ;; This function calls:
  2546 ;;		_glcdTransfer
  2547 ;; This function is called by:
  2548 ;;		_initGLCD
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text3
  2553  001DEA                     __ptext3:
  2554                           	opt stack 0
  2555  001DEA                     _glcdSetCOLMOD:
  2556                           	opt stack 26
  2557                           
  2558                           ;incstack = 0
  2559                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  2560  001DEA  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  2561                           
  2562                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  2563                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  2564  001DEC  D00D               	goto	l330
  2565  001DEE                     
  2566                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  2567  001DEE  0E00               	movlw	0
  2568  001DF0  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2569  001DF2  0E03               	movlw	3
  2570  001DF4  D003               	goto	L5
  2571  001DF6                     
  2572                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  2573  001DF6  0E00               	movlw	0
  2574  001DF8  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2575  001DFA  0E05               	movlw	5
  2576  001DFC                     L5:
  2577  001DFC  6E08               	movwf	glcdSetCOLMOD@rawData,c
  2578                           
  2579                           ;GLCD_PIC_V1.1.c: 186: break;
  2580  001DFE  D00D               	goto	l332
  2581  001E00                     
  2582                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  2583  001E00  0E00               	movlw	0
  2584  001E02  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2585  001E04  0E06               	movlw	6
  2586  001E06  D7FA               	goto	L5
  2587  001E08                     l330:
  2588  001E08  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  2589                           
  2590                           ; Switch size 1, requested type "space"
  2591                           ; Number of cases is 3, Range of values is 12 to 18
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte           10     6 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  001E0A  0A0C               	xorlw	12	; case 12
  2597  001E0C  B4D8               	btfsc	status,2,c
  2598  001E0E  D7EF               	goto	l331
  2599  001E10  0A1C               	xorlw	28	; case 16
  2600  001E12  B4D8               	btfsc	status,2,c
  2601  001E14  D7F0               	goto	l333
  2602  001E16  0A02               	xorlw	2	; case 18
  2603  001E18  D7F3               	goto	l335
  2604  001E1A                     l332:
  2605                           
  2606                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  2607  001E1A  0E01               	movlw	1
  2608  001E1C  6E04               	movwf	glcdTransfer@cmd,c
  2609  001E1E  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  2610  001E20  6EF6               	movwf	tblptrl,c
  2611  001E22                     	if	1	;There is more than 1 active tblptr byte
  2612  001E22  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  2613  001E24  6EF7               	movwf	tblptrh,c
  2614  001E26                     	endif
  2615  001E26                     	if	0	;There are less than 3 active tblptr bytes
  2616  001E26                     	endif
  2617  001E26  0008               	tblrd		*
  2618  001E28  50F5               	movf	tablat,w,c
  2619  001E2A  EC39  F00F         	call	_glcdTransfer
  2620                           
  2621                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  2622  001E2E  0E00               	movlw	0
  2623  001E30  6E04               	movwf	glcdTransfer@cmd,c
  2624  001E32  5008               	movf	glcdSetCOLMOD@rawData,w,c
  2625  001E34  EC39  F00F         	call	_glcdTransfer
  2626  001E38  0012               	return		;funcret
  2627  001E3A                     __end_of_glcdSetCOLMOD:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           prodh	equ	0xFF4
  2634                           prodl	equ	0xFF3
  2635                           wreg	equ	0xFE8
  2636                           status	equ	0xFD8
  2637                           
  2638 ;; *************** function _glcdSetOrigin *****************
  2639 ;; Defined at:
  2640 ;;		line 195 in file "GLCD_PIC_V1.1.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  corner          1    wreg     unsigned char 
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;  corner          1    6[COMRAM] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;Total ram usage:        1 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    3
  2661 ;; This function calls:
  2662 ;;		_glcdTransfer
  2663 ;; This function is called by:
  2664 ;;		_main
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text4
  2669  001D8E                     __ptext4:
  2670                           	opt stack 0
  2671  001D8E                     _glcdSetOrigin:
  2672                           	opt stack 27
  2673                           
  2674                           ;incstack = 0
  2675                           ;glcdSetOrigin@corner stored from wreg
  2676  001D8E  6E07               	movwf	glcdSetOrigin@corner,c
  2677                           
  2678                           ;GLCD_PIC_V1.1.c: 207: switch(corner){
  2679  001D90  D00E               	goto	l339
  2680  001D92                     l342:
  2681                           
  2682                           ;GLCD_PIC_V1.1.c: 214: MADCTLbits.MY = 1;
  2683  001D92  8E2A               	bsf	_MADCTLbits,7,c
  2684                           
  2685                           ;GLCD_PIC_V1.1.c: 215: MADCTLbits.MX = 0;
  2686  001D94  9C2A               	bcf	_MADCTLbits,6,c
  2687  001D96  D005               	goto	L7
  2688  001D98                     l343:
  2689                           
  2690                           ;GLCD_PIC_V1.1.c: 219: MADCTLbits.MY = 0;
  2691  001D98  9E2A               	bcf	_MADCTLbits,7,c
  2692                           
  2693                           ;GLCD_PIC_V1.1.c: 220: MADCTLbits.MX = 0;
  2694  001D9A  9C2A               	bcf	_MADCTLbits,6,c
  2695  001D9C  D006               	goto	L8
  2696  001D9E                     l344:
  2697                           
  2698                           ;GLCD_PIC_V1.1.c: 224: MADCTLbits.MY = 0;
  2699  001D9E  9E2A               	bcf	_MADCTLbits,7,c
  2700                           
  2701                           ;GLCD_PIC_V1.1.c: 225: MADCTLbits.MX = 1;
  2702  001DA0  8C2A               	bsf	_MADCTLbits,6,c
  2703  001DA2                     L7:
  2704                           
  2705                           ;GLCD_PIC_V1.1.c: 226: MADCTLbits.MV = 0;
  2706  001DA2  9A2A               	bcf	_MADCTLbits,5,c
  2707                           
  2708                           ;GLCD_PIC_V1.1.c: 227: break;
  2709  001DA4  D012               	goto	l341
  2710  001DA6                     l345:
  2711                           
  2712                           ;GLCD_PIC_V1.1.c: 229: MADCTLbits.MY = 1;
  2713  001DA6  8E2A               	bsf	_MADCTLbits,7,c
  2714                           
  2715                           ;GLCD_PIC_V1.1.c: 230: MADCTLbits.MX = 1;
  2716  001DA8  8C2A               	bsf	_MADCTLbits,6,c
  2717  001DAA                     L8:
  2718                           
  2719                           ;GLCD_PIC_V1.1.c: 231: MADCTLbits.MV = 1;
  2720  001DAA  8A2A               	bsf	_MADCTLbits,5,c
  2721                           
  2722                           ;GLCD_PIC_V1.1.c: 233: }
  2723                           
  2724                           ;GLCD_PIC_V1.1.c: 232: break;
  2725  001DAC  D00E               	goto	l341
  2726  001DAE                     l339:
  2727  001DAE  5007               	movf	glcdSetOrigin@corner,w,c
  2728                           
  2729                           ; Switch size 1, requested type "space"
  2730                           ; Number of cases is 4, Range of values is 0 to 3
  2731                           ; switch strategies available:
  2732                           ; Name         Instructions Cycles
  2733                           ; simple_byte           13     7 (average)
  2734                           ;	Chosen strategy is simple_byte
  2735  001DB0  0A00               	xorlw	0	; case 0
  2736  001DB2  B4D8               	btfsc	status,2,c
  2737  001DB4  D7F8               	goto	l345
  2738  001DB6  0A01               	xorlw	1	; case 1
  2739  001DB8  B4D8               	btfsc	status,2,c
  2740  001DBA  D7EB               	goto	l342
  2741  001DBC  0A03               	xorlw	3	; case 2
  2742  001DBE  B4D8               	btfsc	status,2,c
  2743  001DC0  D7EB               	goto	l343
  2744  001DC2  0A01               	xorlw	1	; case 3
  2745  001DC4  B4D8               	btfsc	status,2,c
  2746  001DC6  D7EB               	goto	l344
  2747  001DC8  D7EE               	goto	l345
  2748  001DCA                     l341:
  2749                           
  2750                           ;GLCD_PIC_V1.1.c: 235: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2751  001DCA  0E01               	movlw	1
  2752  001DCC  6E04               	movwf	glcdTransfer@cmd,c
  2753  001DCE  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  2754  001DD0  6EF6               	movwf	tblptrl,c
  2755  001DD2                     	if	1	;There is more than 1 active tblptr byte
  2756  001DD2  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  2757  001DD4  6EF7               	movwf	tblptrh,c
  2758  001DD6                     	endif
  2759  001DD6                     	if	0	;There are less than 3 active tblptr bytes
  2760  001DD6                     	endif
  2761  001DD6  0008               	tblrd		*
  2762  001DD8  50F5               	movf	tablat,w,c
  2763  001DDA  EC39  F00F         	call	_glcdTransfer
  2764  001DDE  0E00               	movlw	0
  2765  001DE0  6E04               	movwf	glcdTransfer@cmd,c
  2766  001DE2  502A               	movf	_MADCTLbits,w,c
  2767  001DE4  EC39  F00F         	call	_glcdTransfer
  2768  001DE8  0012               	return		;funcret
  2769  001DEA                     __end_of_glcdSetOrigin:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           wreg	equ	0xFE8
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _glcdDrawPixel *****************
  2781 ;; Defined at:
  2782 ;;		line 147 in file "GLCD_PIC_V1.1.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  XS              1    wreg     unsigned char 
  2785 ;;  YS              1   25[COMRAM] unsigned char 
  2786 ;;  color           4   26[COMRAM] unsigned long 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  XS              1   31[COMRAM] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        7 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    4
  2805 ;; This function calls:
  2806 ;;		_glcdDrawRectangle
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text5
  2813  001D20                     __ptext5:
  2814                           	opt stack 0
  2815  001D20                     _glcdDrawPixel:
  2816                           	opt stack 26
  2817                           
  2818                           ;incstack = 0
  2819                           ;glcdDrawPixel@XS stored from wreg
  2820  001D20  6E20               	movwf	glcdDrawPixel@XS,c
  2821                           
  2822                           ;GLCD_PIC_V1.1.c: 160: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  2823  001D22  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2824  001D24  6EF6               	movwf	tblptrl,c
  2825  001D26                     	if	1	;There is more than 1 active tblptr byte
  2826  001D26  0E10               	movlw	high _GLCD_SIZE_HORZ
  2827  001D28  6EF7               	movwf	tblptrh,c
  2828  001D2A                     	endif
  2829  001D2A                     	if	0	;There are less than 3 active tblptr bytes
  2830  001D2A                     	endif
  2831  001D2A  0009               	tblrd		*+
  2832  001D2C  50F5               	movf	tablat,w,c
  2833  001D2E  5C20               	subwf	glcdDrawPixel@XS,w,c
  2834  001D30  A0D8               	btfss	status,0,c
  2835  001D32  D009               	goto	l325
  2836  001D34  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2837  001D36  6EF6               	movwf	tblptrl,c
  2838  001D38                     	if	1	;There is more than 1 active tblptr byte
  2839  001D38  0E10               	movlw	high _GLCD_SIZE_HORZ
  2840  001D3A  6EF7               	movwf	tblptrh,c
  2841  001D3C                     	endif
  2842  001D3C                     	if	0	;There are less than 3 active tblptr bytes
  2843  001D3C                     	endif
  2844  001D3C  0008               	tblrd		*
  2845  001D3E  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2846  001D42  041F               	decf	??_glcdDrawPixel,w,c
  2847  001D44  6E20               	movwf	glcdDrawPixel@XS,c
  2848  001D46                     l325:
  2849                           
  2850                           ;GLCD_PIC_V1.1.c: 161: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  2851  001D46  0E69               	movlw	low _GLCD_SIZE_VERT
  2852  001D48  6EF6               	movwf	tblptrl,c
  2853  001D4A                     	if	1	;There is more than 1 active tblptr byte
  2854  001D4A  0E10               	movlw	high _GLCD_SIZE_VERT
  2855  001D4C  6EF7               	movwf	tblptrh,c
  2856  001D4E                     	endif
  2857  001D4E                     	if	0	;There are less than 3 active tblptr bytes
  2858  001D4E                     	endif
  2859  001D4E  0009               	tblrd		*+
  2860  001D50  50F5               	movf	tablat,w,c
  2861  001D52  5C1A               	subwf	glcdDrawPixel@YS,w,c
  2862  001D54  A0D8               	btfss	status,0,c
  2863  001D56  D009               	goto	l326
  2864  001D58  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2865  001D5A  6EF6               	movwf	tblptrl,c
  2866  001D5C                     	if	1	;There is more than 1 active tblptr byte
  2867  001D5C  0E10               	movlw	high _GLCD_SIZE_HORZ
  2868  001D5E  6EF7               	movwf	tblptrh,c
  2869  001D60                     	endif
  2870  001D60                     	if	0	;There are less than 3 active tblptr bytes
  2871  001D60                     	endif
  2872  001D60  0008               	tblrd		*
  2873  001D62  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2874  001D66  041F               	decf	??_glcdDrawPixel,w,c
  2875  001D68  6E1A               	movwf	glcdDrawPixel@YS,c
  2876  001D6A                     l326:
  2877                           
  2878                           ;GLCD_PIC_V1.1.c: 164: glcdDrawRectangle(XS, XS, YS, YS, color);
  2879  001D6A  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  2880  001D6E  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  2881  001D72  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  2882  001D76  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  2883  001D7A  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  2884  001D7E  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  2885  001D82  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  2886  001D86  5020               	movf	glcdDrawPixel@XS,w,c
  2887  001D88  EC56  F00D         	call	_glcdDrawRectangle
  2888  001D8C  0012               	return		;funcret
  2889  001D8E                     __end_of_glcdDrawPixel:
  2890                           	opt stack 0
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           prodh	equ	0xFF4
  2896                           prodl	equ	0xFF3
  2897                           wreg	equ	0xFE8
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _glcdDrawRectangle *****************
  2901 ;; Defined at:
  2902 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  XS              1    wreg     unsigned char 
  2905 ;;  XE              1    6[COMRAM] unsigned char 
  2906 ;;  YS              1    7[COMRAM] unsigned char 
  2907 ;;  YE              1    8[COMRAM] unsigned char 
  2908 ;;  color           4    9[COMRAM] unsigned long 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  XS              1   24[COMRAM] unsigned char 
  2911 ;;  i               2   19[COMRAM] unsigned short 
  2912 ;;  colorData       3   21[COMRAM] unsigned char [3]
  2913 ;;  numLoops        2   17[COMRAM] unsigned short 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:       19 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		___wmul
  2932 ;;		_glcdTransfer
  2933 ;;		_spiSend
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;;		_glcdDrawPixel
  2937 ;;		_initGLCD
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text6
  2942  001AAC                     __ptext6:
  2943                           	opt stack 0
  2944  001AAC                     _glcdDrawRectangle:
  2945                           	opt stack 26
  2946                           
  2947                           ;incstack = 0
  2948                           ;glcdDrawRectangle@XS stored from wreg
  2949  001AAC  6E19               	movwf	glcdDrawRectangle@XS,c
  2950                           
  2951                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  2952  001AAE  BC2A               	btfsc	_MADCTLbits,6,c
  2953  001AB0  AA2A               	btfss	_MADCTLbits,5,c
  2954  001AB2  D005               	goto	l311
  2955                           
  2956                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  2957  001AB4  0E03               	movlw	3
  2958  001AB6  2608               	addwf	glcdDrawRectangle@YS,f,c
  2959                           
  2960                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  2961  001AB8  0E03               	movlw	3
  2962  001ABA  2609               	addwf	glcdDrawRectangle@YE,f,c
  2963  001ABC  D015               	goto	l1537
  2964  001ABE                     l311:
  2965                           
  2966                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  2967  001ABE  AE2A               	btfss	_MADCTLbits,7,c
  2968  001AC0  D008               	goto	l313
  2969                           
  2970                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  2971  001AC2  0E02               	movlw	2
  2972  001AC4  2608               	addwf	glcdDrawRectangle@YS,f,c
  2973                           
  2974                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  2975  001AC6  0E02               	movlw	2
  2976  001AC8  2609               	addwf	glcdDrawRectangle@YE,f,c
  2977                           
  2978                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  2979  001ACA  0E03               	movlw	3
  2980  001ACC  2619               	addwf	glcdDrawRectangle@XS,f,c
  2981                           
  2982                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  2983  001ACE  0E03               	movlw	3
  2984  001AD0  D00E               	goto	L10
  2985  001AD2                     l313:
  2986                           
  2987                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  2988  001AD2  AC2A               	btfss	_MADCTLbits,6,c
  2989  001AD4  D007               	goto	l315
  2990                           
  2991                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  2992  001AD6  0E02               	movlw	2
  2993  001AD8  2608               	addwf	glcdDrawRectangle@YS,f,c
  2994                           
  2995                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  2996  001ADA  0E02               	movlw	2
  2997  001ADC  2609               	addwf	glcdDrawRectangle@YE,f,c
  2998                           
  2999                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  3000  001ADE  2A19               	incf	glcdDrawRectangle@XS,f,c
  3001                           
  3002                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  3003  001AE0  2A07               	incf	glcdDrawRectangle@XE,f,c
  3004                           
  3005                           ;GLCD_PIC_V1.1.c: 78: }
  3006  001AE2  D006               	goto	l316
  3007  001AE4                     l315:
  3008                           
  3009                           ;GLCD_PIC_V1.1.c: 79: else{
  3010                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  3011  001AE4  2A08               	incf	glcdDrawRectangle@YS,f,c
  3012                           
  3013                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  3014  001AE6  2A09               	incf	glcdDrawRectangle@YE,f,c
  3015  001AE8                     l1537:
  3016                           
  3017                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  3018  001AE8  0E02               	movlw	2
  3019  001AEA  2619               	addwf	glcdDrawRectangle@XS,f,c
  3020                           
  3021                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  3022  001AEC  0E02               	movlw	2
  3023  001AEE                     L10:
  3024  001AEE  2607               	addwf	glcdDrawRectangle@XE,f,c
  3025  001AF0                     l316:
  3026                           
  3027                           ;GLCD_PIC_V1.1.c: 85: }
  3028                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  3029  001AF0  0E01               	movlw	1
  3030  001AF2  6E04               	movwf	glcdTransfer@cmd,c
  3031  001AF4  0E3C               	movlw	low GLCD_PIC@INST_RASET
  3032  001AF6  6EF6               	movwf	tblptrl,c
  3033  001AF8                     	if	1	;There is more than 1 active tblptr byte
  3034  001AF8  0E10               	movlw	high GLCD_PIC@INST_RASET
  3035  001AFA  6EF7               	movwf	tblptrh,c
  3036  001AFC                     	endif
  3037  001AFC                     	if	0	;There are less than 3 active tblptr bytes
  3038  001AFC                     	endif
  3039  001AFC  0008               	tblrd		*
  3040  001AFE  50F5               	movf	tablat,w,c
  3041  001B00  EC39  F00F         	call	_glcdTransfer
  3042                           
  3043                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  3044  001B04  0E00               	movlw	0
  3045  001B06  6E04               	movwf	glcdTransfer@cmd,c
  3046  001B08  0E00               	movlw	0
  3047  001B0A  EC39  F00F         	call	_glcdTransfer
  3048                           
  3049                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  3050  001B0E  0E00               	movlw	0
  3051  001B10  6E04               	movwf	glcdTransfer@cmd,c
  3052  001B12  5019               	movf	glcdDrawRectangle@XS,w,c
  3053  001B14  EC39  F00F         	call	_glcdTransfer
  3054                           
  3055                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  3056  001B18  0E00               	movlw	0
  3057  001B1A  6E04               	movwf	glcdTransfer@cmd,c
  3058  001B1C  0E00               	movlw	0
  3059  001B1E  EC39  F00F         	call	_glcdTransfer
  3060                           
  3061                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  3062  001B22  0E00               	movlw	0
  3063  001B24  6E04               	movwf	glcdTransfer@cmd,c
  3064  001B26  0407               	decf	glcdDrawRectangle@XE,w,c
  3065  001B28  EC39  F00F         	call	_glcdTransfer
  3066                           
  3067                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  3068  001B2C  0E01               	movlw	1
  3069  001B2E  6E04               	movwf	glcdTransfer@cmd,c
  3070  001B30  0E3D               	movlw	low GLCD_PIC@INST_CASET
  3071  001B32  6EF6               	movwf	tblptrl,c
  3072  001B34                     	if	1	;There is more than 1 active tblptr byte
  3073  001B34  0E10               	movlw	high GLCD_PIC@INST_CASET
  3074  001B36  6EF7               	movwf	tblptrh,c
  3075  001B38                     	endif
  3076  001B38                     	if	0	;There are less than 3 active tblptr bytes
  3077  001B38                     	endif
  3078  001B38  0008               	tblrd		*
  3079  001B3A  50F5               	movf	tablat,w,c
  3080  001B3C  EC39  F00F         	call	_glcdTransfer
  3081                           
  3082                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  3083  001B40  0E00               	movlw	0
  3084  001B42  6E04               	movwf	glcdTransfer@cmd,c
  3085  001B44  0E00               	movlw	0
  3086  001B46  EC39  F00F         	call	_glcdTransfer
  3087                           
  3088                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  3089  001B4A  0E00               	movlw	0
  3090  001B4C  6E04               	movwf	glcdTransfer@cmd,c
  3091  001B4E  5008               	movf	glcdDrawRectangle@YS,w,c
  3092  001B50  EC39  F00F         	call	_glcdTransfer
  3093                           
  3094                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  3095  001B54  0E00               	movlw	0
  3096  001B56  6E04               	movwf	glcdTransfer@cmd,c
  3097  001B58  0E00               	movlw	0
  3098  001B5A  EC39  F00F         	call	_glcdTransfer
  3099                           
  3100                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  3101  001B5E  0E00               	movlw	0
  3102  001B60  6E04               	movwf	glcdTransfer@cmd,c
  3103  001B62  0409               	decf	glcdDrawRectangle@YE,w,c
  3104  001B64  EC39  F00F         	call	_glcdTransfer
  3105                           
  3106                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  3107  001B68  0E01               	movlw	1
  3108  001B6A  6E04               	movwf	glcdTransfer@cmd,c
  3109  001B6C  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  3110  001B6E  6EF6               	movwf	tblptrl,c
  3111  001B70                     	if	1	;There is more than 1 active tblptr byte
  3112  001B70  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  3113  001B72  6EF7               	movwf	tblptrh,c
  3114  001B74                     	endif
  3115  001B74                     	if	0	;There are less than 3 active tblptr bytes
  3116  001B74                     	endif
  3117  001B74  0008               	tblrd		*
  3118  001B76  50F5               	movf	tablat,w,c
  3119  001B78  EC39  F00F         	call	_glcdTransfer
  3120                           
  3121                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  3122  001B7C  5019               	movf	glcdDrawRectangle@XS,w,c
  3123  001B7E  1807               	xorwf	glcdDrawRectangle@XE,w,c
  3124  001B80  A4D8               	btfss	status,2,c
  3125  001B82  D014               	goto	l317
  3126  001B84  5008               	movf	glcdDrawRectangle@YS,w,c
  3127  001B86  1809               	xorwf	glcdDrawRectangle@YE,w,c
  3128  001B88  A4D8               	btfss	status,2,c
  3129  001B8A  D010               	goto	l317
  3130                           
  3131                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  3132  001B8C  0E00               	movlw	0
  3133  001B8E  6E04               	movwf	glcdTransfer@cmd,c
  3134  001B90  500A               	movf	glcdDrawRectangle@color,w,c
  3135  001B92  EC39  F00F         	call	_glcdTransfer
  3136                           
  3137                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  3138  001B96  0E00               	movlw	0
  3139  001B98  6E04               	movwf	glcdTransfer@cmd,c
  3140  001B9A  500B               	movf	glcdDrawRectangle@color+1,w,c
  3141  001B9C  EC39  F00F         	call	_glcdTransfer
  3142                           
  3143                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  3144  001BA0  0E00               	movlw	0
  3145  001BA2  6E04               	movwf	glcdTransfer@cmd,c
  3146  001BA4  500C               	movf	glcdDrawRectangle@color+2,w,c
  3147  001BA6  EC39  F00F         	call	_glcdTransfer
  3148                           
  3149                           ;GLCD_PIC_V1.1.c: 117: }
  3150  001BAA  0012               	return	
  3151  001BAC                     l317:
  3152                           
  3153                           ;GLCD_PIC_V1.1.c: 118: else{
  3154                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  3155  001BAC  5019               	movf	glcdDrawRectangle@XS,w,c
  3156  001BAE  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  3157  001BB0  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  3158  001BB2  1E0E               	comf	??_glcdDrawRectangle,f,c
  3159  001BB4  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  3160  001BB6  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  3161  001BB8  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  3162  001BBA  5007               	movf	glcdDrawRectangle@XE,w,c
  3163  001BBC  240E               	addwf	??_glcdDrawRectangle,w,c
  3164  001BBE  6E01               	movwf	___wmul@multiplier,c
  3165  001BC0  0E00               	movlw	0
  3166  001BC2  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  3167  001BC4  6E02               	movwf	___wmul@multiplier+1,c
  3168  001BC6  5008               	movf	glcdDrawRectangle@YS,w,c
  3169  001BC8  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  3170  001BCA  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  3171  001BCC  1E10               	comf	??_glcdDrawRectangle+2,f,c
  3172  001BCE  1E11               	comf	??_glcdDrawRectangle+3,f,c
  3173  001BD0  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  3174  001BD2  2A11               	incf	??_glcdDrawRectangle+3,f,c
  3175  001BD4  5009               	movf	glcdDrawRectangle@YE,w,c
  3176  001BD6  2410               	addwf	??_glcdDrawRectangle+2,w,c
  3177  001BD8  6E03               	movwf	___wmul@multiplicand,c
  3178  001BDA  0E00               	movlw	0
  3179  001BDC  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  3180  001BDE  6E04               	movwf	___wmul@multiplicand+1,c
  3181  001BE0  EC4D  F00F         	call	___wmul	;wreg free
  3182  001BE4  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  3183  001BE8  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  3184                           
  3185                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  3186                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  3187  001BEC  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  3188                           
  3189                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  3190  001BF0  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  3191                           
  3192                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  3193  001BF4  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  3194                           
  3195                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  3196  001BF8  908C               	bcf	3980,0,c	;volatile
  3197                           
  3198                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  3199  001BFA  828C               	bsf	3980,1,c	;volatile
  3200                           
  3201                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  3202  001BFC  0E00               	movlw	0
  3203  001BFE  6E15               	movwf	glcdDrawRectangle@i+1,c
  3204  001C00  0E00               	movlw	0
  3205  001C02  6E14               	movwf	glcdDrawRectangle@i,c
  3206  001C04  D00B               	goto	l319
  3207  001C06                     
  3208                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  3209  001C06  5016               	movf	glcdDrawRectangle@colorData,w,c
  3210  001C08  EC78  F00F         	call	_spiSend
  3211                           
  3212                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  3213  001C0C  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  3214  001C0E  EC78  F00F         	call	_spiSend
  3215                           
  3216                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  3217  001C12  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  3218  001C14  EC78  F00F         	call	_spiSend
  3219  001C18  4A14               	infsnz	glcdDrawRectangle@i,f,c
  3220  001C1A  2A15               	incf	glcdDrawRectangle@i+1,f,c
  3221  001C1C                     l319:
  3222  001C1C  5012               	movf	glcdDrawRectangle@numLoops,w,c
  3223  001C1E  5C14               	subwf	glcdDrawRectangle@i,w,c
  3224  001C20  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  3225  001C22  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  3226  001C24  A0D8               	btfss	status,0,c
  3227  001C26  D7EF               	goto	l320
  3228                           
  3229                           ;GLCD_PIC_V1.1.c: 142: }
  3230                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  3231  001C28  808C               	bsf	3980,0,c	;volatile
  3232  001C2A  0012               	return	
  3233  001C2C                     __end_of_glcdDrawRectangle:
  3234                           	opt stack 0
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           prodh	equ	0xFF4
  3240                           prodl	equ	0xFF3
  3241                           wreg	equ	0xFE8
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _glcdTransfer *****************
  3245 ;; Defined at:
  3246 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  byte            1    wreg     unsigned char 
  3249 ;;  cmd             1    3[COMRAM] unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  byte            1    5[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3261 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;Total ram usage:        3 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    2
  3268 ;; This function calls:
  3269 ;;		_spiSend
  3270 ;; This function is called by:
  3271 ;;		_main
  3272 ;;		_glcdDrawRectangle
  3273 ;;		_glcdSetCOLMOD
  3274 ;;		_glcdSetOrigin
  3275 ;;		_initGLCD
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text7
  3280  001E72                     __ptext7:
  3281                           	opt stack 0
  3282  001E72                     _glcdTransfer:
  3283                           	opt stack 27
  3284                           
  3285                           ;incstack = 0
  3286                           ;glcdTransfer@byte stored from wreg
  3287  001E72  6E06               	movwf	glcdTransfer@byte,c
  3288                           
  3289                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  3290  001E74  0404               	decf	glcdTransfer@cmd,w,c
  3291  001E76  B4D8               	btfsc	status,2,c
  3292  001E78  D003               	goto	u470
  3293  001E7A  6A05               	clrf	??_glcdTransfer& (0+255),c
  3294  001E7C  2A05               	incf	??_glcdTransfer& (0+255),f,c
  3295  001E7E  D001               	goto	u488
  3296  001E80                     u470:
  3297  001E80  6A05               	clrf	??_glcdTransfer& (0+255),c
  3298  001E82                     u488:
  3299  001E82  4605               	rlncf	??_glcdTransfer,f,c
  3300  001E84  508C               	movf	3980,w,c	;volatile
  3301  001E86  1805               	xorwf	??_glcdTransfer,w,c
  3302  001E88  0BFD               	andlw	-3
  3303  001E8A  1805               	xorwf	??_glcdTransfer,w,c
  3304  001E8C  6E8C               	movwf	3980,c	;volatile
  3305                           
  3306                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  3307  001E8E  908C               	bcf	3980,0,c	;volatile
  3308                           
  3309                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  3310  001E90  5006               	movf	glcdTransfer@byte,w,c
  3311  001E92  EC78  F00F         	call	_spiSend
  3312                           
  3313                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  3314  001E96  808C               	bsf	3980,0,c	;volatile
  3315  001E98  0012               	return		;funcret
  3316  001E9A                     __end_of_glcdTransfer:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           wreg	equ	0xFE8
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _spiSend *****************
  3328 ;; Defined at:
  3329 ;;		line 33 in file "SPI_PIC.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  val             1    wreg     unsigned char 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  val             1    2[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:        1 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    1
  3350 ;; This function calls:
  3351 ;;		_spiTransfer
  3352 ;; This function is called by:
  3353 ;;		_glcdTransfer
  3354 ;;		_glcdDrawRectangle
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text8
  3359  001EF0                     __ptext8:
  3360                           	opt stack 0
  3361  001EF0                     _spiSend:
  3362                           	opt stack 27
  3363                           
  3364                           ;incstack = 0
  3365                           ;spiSend@val stored from wreg
  3366  001EF0  6E03               	movwf	spiSend@val,c
  3367                           
  3368                           ;SPI_PIC.c: 41: spiTransfer(val);
  3369  001EF2  5003               	movf	spiSend@val,w,c
  3370  001EF4  EC60  F00F         	call	_spiTransfer
  3371  001EF8  0012               	return		;funcret
  3372  001EFA                     __end_of_spiSend:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           wreg	equ	0xFE8
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _spiTransfer *****************
  3384 ;; Defined at:
  3385 ;;		line 12 in file "SPI_PIC.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  byteToTransf    1    wreg     unsigned char 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      unsigned char 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;Total ram usage:        2 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_spiSend
  3409 ;;		_spiReceive
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text9
  3414  001EC0                     __ptext9:
  3415                           	opt stack 0
  3416  001EC0                     _spiTransfer:
  3417                           	opt stack 27
  3418                           
  3419                           ;incstack = 0
  3420                           ;spiTransfer@byteToTransfer stored from wreg
  3421  001EC0  6E02               	movwf	spiTransfer@byteToTransfer,c
  3422                           
  3423                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  3424  001EC2  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  3425  001EC6                     l1499:
  3426  001EC6  B69E               	btfsc	3998,3,c	;volatile
  3427  001EC8  D002               	goto	u450
  3428  001ECA  0E01               	movlw	1
  3429  001ECC  D001               	goto	u452
  3430  001ECE                     u450:
  3431  001ECE  0E00               	movlw	0
  3432  001ED0                     u452:
  3433  001ED0  6E01               	movwf	??_spiTransfer& (0+255),c
  3434  001ED2  B0C7               	btfsc	4039,0,c	;volatile
  3435  001ED4  D002               	goto	u460
  3436  001ED6  0E01               	movlw	1
  3437  001ED8  D001               	goto	u462
  3438  001EDA                     u460:
  3439  001EDA  0E00               	movlw	0
  3440  001EDC                     u462:
  3441  001EDC  1001               	iorwf	??_spiTransfer,w,c
  3442  001EDE  E1F3               	bnz	l1499
  3443                           
  3444                           ;SPI_PIC.c: 30: return SSPBUF;
  3445  001EE0  50C9               	movf	4041,w,c	;volatile
  3446  001EE2  0012               	return	
  3447  001EE4                     __end_of_spiTransfer:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           wreg	equ	0xFE8
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function ___wmul *****************
  3459 ;; Defined at:
  3460 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  multiplier      2    0[COMRAM] unsigned int 
  3463 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  product         2    4[COMRAM] unsigned int 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  2    0[COMRAM] unsigned int 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0, prodl, prodh
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;Total ram usage:        6 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_main
  3485 ;;		_glcdDrawRectangle
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text10
  3490  001E9A                     __ptext10:
  3491                           	opt stack 0
  3492  001E9A                     ___wmul:
  3493                           	opt stack 28
  3494                           
  3495                           ;incstack = 0
  3496  001E9A  5001               	movf	___wmul@multiplier,w,c
  3497  001E9C  0203               	mulwf	___wmul@multiplicand,c
  3498  001E9E  CFF3 F005          	movff	prodl,___wmul@product
  3499  001EA2  CFF4 F006          	movff	prodh,___wmul@product+1
  3500  001EA6  5001               	movf	___wmul@multiplier,w,c
  3501  001EA8  0204               	mulwf	___wmul@multiplicand+1,c
  3502  001EAA  50F3               	movf	prodl,w,c
  3503  001EAC  2606               	addwf	___wmul@product+1,f,c
  3504  001EAE  5002               	movf	___wmul@multiplier+1,w,c
  3505  001EB0  0203               	mulwf	___wmul@multiplicand,c
  3506  001EB2  50F3               	movf	prodl,w,c
  3507  001EB4  2606               	addwf	___wmul@product+1,f,c
  3508  001EB6  C005  F001         	movff	___wmul@product,?___wmul
  3509  001EBA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3510  001EBE  0012               	return	
  3511  001EC0                     __end_of___wmul:
  3512                           	opt stack 0
  3513                           tblptru	equ	0xFF8
  3514                           tblptrh	equ	0xFF7
  3515                           tblptrl	equ	0xFF6
  3516                           tablat	equ	0xFF5
  3517                           prodh	equ	0xFF4
  3518                           prodl	equ	0xFF3
  3519                           wreg	equ	0xFE8
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function ___awmod *****************
  3523 ;; Defined at:
  3524 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  dividend        2    8[COMRAM] int 
  3527 ;;  divisor         2   10[COMRAM] int 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  sign            1   13[COMRAM] unsigned char 
  3530 ;;  counter         1   12[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  2    8[COMRAM] int 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:        6 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text11
  3554  001CB0                     __ptext11:
  3555                           	opt stack 0
  3556  001CB0                     ___awmod:
  3557                           	opt stack 30
  3558                           
  3559                           ;incstack = 0
  3560  001CB0  0E00               	movlw	0
  3561  001CB2  6E0E               	movwf	___awmod@sign,c
  3562  001CB4  AE0A               	btfss	___awmod@dividend+1,7,c
  3563  001CB6  D006               	goto	l530
  3564  001CB8  6C09               	negf	___awmod@dividend,c
  3565  001CBA  1E0A               	comf	___awmod@dividend+1,f,c
  3566  001CBC  B0D8               	btfsc	status,0,c
  3567  001CBE  2A0A               	incf	___awmod@dividend+1,f,c
  3568  001CC0  0E01               	movlw	1
  3569  001CC2  6E0E               	movwf	___awmod@sign,c
  3570  001CC4                     l530:
  3571  001CC4  AE0C               	btfss	___awmod@divisor+1,7,c
  3572  001CC6  D004               	goto	l531
  3573  001CC8  6C0B               	negf	___awmod@divisor,c
  3574  001CCA  1E0C               	comf	___awmod@divisor+1,f,c
  3575  001CCC  B0D8               	btfsc	status,0,c
  3576  001CCE  2A0C               	incf	___awmod@divisor+1,f,c
  3577  001CD0                     l531:
  3578  001CD0  500B               	movf	___awmod@divisor,w,c
  3579  001CD2  100C               	iorwf	___awmod@divisor+1,w,c
  3580  001CD4  B4D8               	btfsc	status,2,c
  3581  001CD6  D018               	goto	l538
  3582  001CD8  0E01               	movlw	1
  3583  001CDA  6E0D               	movwf	___awmod@counter,c
  3584  001CDC  D004               	goto	l533
  3585  001CDE  90D8               	bcf	status,0,c
  3586  001CE0  360B               	rlcf	___awmod@divisor,f,c
  3587  001CE2  360C               	rlcf	___awmod@divisor+1,f,c
  3588  001CE4  2A0D               	incf	___awmod@counter,f,c
  3589  001CE6                     l533:
  3590  001CE6  AE0C               	btfss	___awmod@divisor+1,7,c
  3591  001CE8  D7FA               	goto	l534
  3592  001CEA                     u670:
  3593  001CEA  500B               	movf	___awmod@divisor,w,c
  3594  001CEC  5C09               	subwf	___awmod@dividend,w,c
  3595  001CEE  500C               	movf	___awmod@divisor+1,w,c
  3596  001CF0  580A               	subwfb	___awmod@dividend+1,w,c
  3597  001CF2  A0D8               	btfss	status,0,c
  3598  001CF4  D004               	goto	l537
  3599  001CF6  500B               	movf	___awmod@divisor,w,c
  3600  001CF8  5E09               	subwf	___awmod@dividend,f,c
  3601  001CFA  500C               	movf	___awmod@divisor+1,w,c
  3602  001CFC  5A0A               	subwfb	___awmod@dividend+1,f,c
  3603  001CFE                     l537:
  3604  001CFE  90D8               	bcf	status,0,c
  3605  001D00  320C               	rrcf	___awmod@divisor+1,f,c
  3606  001D02  320B               	rrcf	___awmod@divisor,f,c
  3607  001D04  2E0D               	decfsz	___awmod@counter,f,c
  3608  001D06  D7F1               	goto	u670
  3609  001D08                     l538:
  3610  001D08  500E               	movf	___awmod@sign,w,c
  3611  001D0A  B4D8               	btfsc	status,2,c
  3612  001D0C  D004               	goto	l539
  3613  001D0E  6C09               	negf	___awmod@dividend,c
  3614  001D10  1E0A               	comf	___awmod@dividend+1,f,c
  3615  001D12  B0D8               	btfsc	status,0,c
  3616  001D14  2A0A               	incf	___awmod@dividend+1,f,c
  3617  001D16                     l539:
  3618  001D16  C009  F009         	movff	___awmod@dividend,?___awmod
  3619  001D1A  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3620  001D1E  0012               	return	
  3621  001D20                     __end_of___awmod:
  3622                           	opt stack 0
  3623                           tblptru	equ	0xFF8
  3624                           tblptrh	equ	0xFF7
  3625                           tblptrl	equ	0xFF6
  3626                           tablat	equ	0xFF5
  3627                           prodh	equ	0xFF4
  3628                           prodl	equ	0xFF3
  3629                           wreg	equ	0xFE8
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function ___awdiv *****************
  3633 ;; Defined at:
  3634 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  dividend        2    0[COMRAM] int 
  3637 ;;  divisor         2    2[COMRAM] int 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  quotient        2    6[COMRAM] int 
  3640 ;;  sign            1    5[COMRAM] unsigned char 
  3641 ;;  counter         1    4[COMRAM] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  2    0[COMRAM] int 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;Total ram usage:        8 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text12
  3665  001C2C                     __ptext12:
  3666                           	opt stack 0
  3667  001C2C                     ___awdiv:
  3668                           	opt stack 30
  3669                           
  3670                           ;incstack = 0
  3671  001C2C  0E00               	movlw	0
  3672  001C2E  6E06               	movwf	___awdiv@sign,c
  3673  001C30  AE04               	btfss	___awdiv@divisor+1,7,c
  3674  001C32  D006               	goto	l517
  3675  001C34  6C03               	negf	___awdiv@divisor,c
  3676  001C36  1E04               	comf	___awdiv@divisor+1,f,c
  3677  001C38  B0D8               	btfsc	status,0,c
  3678  001C3A  2A04               	incf	___awdiv@divisor+1,f,c
  3679  001C3C  0E01               	movlw	1
  3680  001C3E  6E06               	movwf	___awdiv@sign,c
  3681  001C40                     l517:
  3682  001C40  AE02               	btfss	___awdiv@dividend+1,7,c
  3683  001C42  D006               	goto	l518
  3684  001C44  6C01               	negf	___awdiv@dividend,c
  3685  001C46  1E02               	comf	___awdiv@dividend+1,f,c
  3686  001C48  B0D8               	btfsc	status,0,c
  3687  001C4A  2A02               	incf	___awdiv@dividend+1,f,c
  3688  001C4C  0E01               	movlw	1
  3689  001C4E  1A06               	xorwf	___awdiv@sign,f,c
  3690  001C50                     l518:
  3691  001C50  0E00               	movlw	0
  3692  001C52  6E08               	movwf	___awdiv@quotient+1,c
  3693  001C54  0E00               	movlw	0
  3694  001C56  6E07               	movwf	___awdiv@quotient,c
  3695  001C58  5003               	movf	___awdiv@divisor,w,c
  3696  001C5A  1004               	iorwf	___awdiv@divisor+1,w,c
  3697  001C5C  B4D8               	btfsc	status,2,c
  3698  001C5E  D01C               	goto	l525
  3699  001C60  0E01               	movlw	1
  3700  001C62  6E05               	movwf	___awdiv@counter,c
  3701  001C64  D004               	goto	l520
  3702  001C66  90D8               	bcf	status,0,c
  3703  001C68  3603               	rlcf	___awdiv@divisor,f,c
  3704  001C6A  3604               	rlcf	___awdiv@divisor+1,f,c
  3705  001C6C  2A05               	incf	___awdiv@counter,f,c
  3706  001C6E                     l520:
  3707  001C6E  AE04               	btfss	___awdiv@divisor+1,7,c
  3708  001C70  D7FA               	goto	l521
  3709  001C72                     u610:
  3710  001C72  90D8               	bcf	status,0,c
  3711  001C74  3607               	rlcf	___awdiv@quotient,f,c
  3712  001C76  3608               	rlcf	___awdiv@quotient+1,f,c
  3713  001C78  5003               	movf	___awdiv@divisor,w,c
  3714  001C7A  5C01               	subwf	___awdiv@dividend,w,c
  3715  001C7C  5004               	movf	___awdiv@divisor+1,w,c
  3716  001C7E  5802               	subwfb	___awdiv@dividend+1,w,c
  3717  001C80  A0D8               	btfss	status,0,c
  3718  001C82  D005               	goto	l524
  3719  001C84  5003               	movf	___awdiv@divisor,w,c
  3720  001C86  5E01               	subwf	___awdiv@dividend,f,c
  3721  001C88  5004               	movf	___awdiv@divisor+1,w,c
  3722  001C8A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3723  001C8C  8007               	bsf	___awdiv@quotient,0,c
  3724  001C8E                     l524:
  3725  001C8E  90D8               	bcf	status,0,c
  3726  001C90  3204               	rrcf	___awdiv@divisor+1,f,c
  3727  001C92  3203               	rrcf	___awdiv@divisor,f,c
  3728  001C94  2E05               	decfsz	___awdiv@counter,f,c
  3729  001C96  D7ED               	goto	u610
  3730  001C98                     l525:
  3731  001C98  5006               	movf	___awdiv@sign,w,c
  3732  001C9A  B4D8               	btfsc	status,2,c
  3733  001C9C  D004               	goto	l526
  3734  001C9E  6C07               	negf	___awdiv@quotient,c
  3735  001CA0  1E08               	comf	___awdiv@quotient+1,f,c
  3736  001CA2  B0D8               	btfsc	status,0,c
  3737  001CA4  2A08               	incf	___awdiv@quotient+1,f,c
  3738  001CA6                     l526:
  3739  001CA6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3740  001CAA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3741  001CAE  0012               	return	
  3742  001CB0                     __end_of___awdiv:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           wreg	equ	0xFE8
  3751                           status	equ	0xFD8
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           wreg	equ	0xFE8
  3759                           status	equ	0xFD8
  3760                           
  3761                           	psect	rparam
  3762  0000                     tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           wreg	equ	0xFE8
  3769                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_glcdDrawPixel
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdSetOrigin->_glcdTransfer
    _glcdDrawPixel->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   51775
                                             32 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                             ___wmul
                      _glcdDrawPixel
                  _glcdDrawRectangle
                      _glcdSetOrigin
                       _glcdTransfer
                           _initGLCD
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   18973
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4772
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdSetOrigin                                        1     1      0    4746
                                              6 COMRAM     1     1      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdDrawPixel                                        7     2      5   11131
                                             25 COMRAM     7     2      5
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7    9455
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4724
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___wmul
   _glcdDrawPixel
     ___awmod (ARG)
       ___awdiv (ARG)
     _glcdDrawRectangle (ARG)
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _glcdSetOrigin
     _glcdTransfer
       _spiSend
         _spiTransfer
   _glcdTransfer
     _spiSend
       _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr  8 23:59:01 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                       __CFG_CPD$ON 000000                        ___awdiv@sign 0006  
               ___wmul@multiplicand 0003                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                               l200 1E4C                                 l140 150E  
                               l141 155E                                 l311 1ABE  
                               l320 1C06                                 l160 17A4  
                               l313 1AD2                                 l161 1762  
                               l137 10B4                                 l330 1E08  
                               l162 176A                                 l154 1704  
                               l315 1AE4                                 l331 1DEE  
                               l163 1772                                 l316 1AF0  
                               l332 1E1A                                 l317 1BAC  
                               l325 1D46                                 l341 1DCA  
                               l333 1DF6                                 l326 1D6A  
                               l342 1D92                                 l158 177A  
                               l319 1C1C                                 l343 1D98  
                               l335 1E00                                 l159 175A  
                               l520 1C6E                                 l344 1D9E  
                               l521 1C66                                 l345 1DA6  
                               l530 1CC4                                 l531 1CD0  
                               l339 1DAE                                 l195 1E52  
                               l524 1C8E                                 l525 1C98  
                               l517 1C40                                 l533 1CE6  
                               l197 1E68                                 l526 1CA6  
                               l518 1C50                                 l534 1CDE  
                               l198 1E44                                 l199 1E48  
                               l537 1CFE                                 l538 1D08  
                               l539 1D16                        __CFG_CPB$OFF 000000  
                               _RED 1019                                 u610 1C72  
                               u450 1ECE                                 u460 1EDA  
                               u452 1ED0                                 u462 1EDC  
                               u470 1E80                                 u800 1654  
                               u720 1572                                 u670 1CEA  
                               u830 16AE                                 u750 15D4  
                               u488 1E82                                 u840 16B2  
                               u760 15D8                                 u907 12C0  
                               u917 12EC                                 u870 1756  
                               u790 1650                                 u927 1318  
                               u937 135A                                 u947 13A6  
                               u957 13FC                                 u967 1448  
                               u977 1564                                 u897 1104  
         __end_ofGLCD_PIC@INST_TEON 1039                                 u987 174A  
                               u997 17BC                        ___awmod@sign 000E  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l1537 1AE8  
                              l1911 158C                                l1905 1576  
                              l1499 1EC6                                l1933 15F2  
                              l1951 1658                                l1927 15DC  
                              l1981 1708                                l1957 166E  
                              l1885 145A                                l1975 16FC  
                              _BLUE 1009                                u1007 17E2  
                              u1017 180E                                u1027 1AA0  
                              _LATA 000F89                                _LATB 000F8A  
                              _LATC 000F8B                                _LATD 000F8C  
                              _LATE 000F8D                                _GREY 1021  
                              _main 106E                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                   __end_of___awdiv 1CB0                               _BLACK 1025  
                   __end_of___awmod 1D20                    __end_of_INST_NOP 1069  
                   ___awdiv@divisor 0003                               _GREEN 100D  
                   ___awdiv@counter 0005                               _WHITE 101D  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _SSPIF 007CF3  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000       __end_ofGLCD_PIC@INST_VMOFCTR2 102A  
                    __CFG_EBTRB$OFF 000000                               main@x 0029  
                             main@y 0028                     __end_of_spiInit 1E72  
                             tablat 000FF5                     __end_of_spiSend 1EFA  
                      main@rotation 0023                               status 000FD8  
                    __CFG_PBADEN$ON 000000                        __end_of_BLUE 100D  
                      __end_of_GREY 1025                     __initialization 1EE4  
                      __end_of_main 17A8        glcdSetCOLMOD@numBitsPerPixel 0007  
                            ??_main 0021                       __activetblptr 000002  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                   glcdDrawPixel@XS 0020                     glcdDrawPixel@YS 001A  
                  ___awdiv@dividend 0001                   _glcdDrawRectangle 1AAC  
                 __end_of_INST_TEON 1059                              _INDIGO 1005  
              __end_of_glcdTransfer 1E9A                              _ORANGE 1015  
                ?_glcdDrawRectangle 0007                              _VIOLET 1001  
                            _YELLOW 1011                              _SSPBUF 000FC9  
                    __CFG_XINST$OFF 000000           glcdDrawRectangle@numLoops 0012  
               ??_glcdDrawRectangle 000E                              ___wmul 1E9A  
                  __end_of_initGLCD 1AAC                           ??___awdiv 0005  
                    __CFG_STVREN$ON 000000                           ??___awmod 000D  
                  ___awdiv@quotient 0007                     ___awmod@divisor 000B  
          __end_ofGLCD_PIC@INST_NOP 1049                     ___awmod@counter 000D  
                      ?_spiTransfer 0001                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_spiInit 0001  
                         ??_spiSend 0003           __end_of_glcdDrawRectangle 1C2C  
                        __accesstop 0080             __end_of__initialization 1EE6  
                     __end_of_BLACK 1029                       ___rparam_used 000001  
                     __end_of_GREEN 1011                       __end_of_WHITE 1021  
       __end_ofGLCD_PIC@INST_GAMSET 1041         __end_ofGLCD_PIC@INST_COLMOD 1035  
       __end_ofGLCD_PIC@INST_MADCTL 1038         __end_ofGLCD_PIC@INST_DISPON 103F  
       __end_ofGLCD_PIC@INST_IDMOFF 1037                      __pcstackCOMRAM 0001  
       __end_ofGLCD_PIC@INST_INVCTR 1031         __end_ofGLCD_PIC@INST_INVOFF 1043  
       __end_ofGLCD_PIC@INST_PWCTR1 1030         __end_ofGLCD_PIC@INST_PWCTR2 102F  
       __end_ofGLCD_PIC@INST_PWCTR3 102E         __end_ofGLCD_PIC@INST_PWCTR4 102D  
       __end_ofGLCD_PIC@INST_PWCTR5 102C         __end_ofGLCD_PIC@INST_VMCTR1 102B  
       __end_ofGLCD_PIC@INST_SLPOUT 1046                 glcdSetOrigin@corner 0007  
             __end_of_glcdDrawPixel 1D8E                       _INST_VMOFCTR2 1049  
             __end_of_glcdSetCOLMOD 1E3A               __end_of_glcdSetOrigin 1DEA  
                           ?___wmul 0001                  glcdDrawRectangle@i 0014  
                __end_of_INST_CASET 105E                  __end_of_INST_IDMON 1056  
                __end_of_INST_INVON 1062                  __end_of_INST_RASET 105D  
                __end_of_INST_RAMWR 105C                  __end_of_INST_TEOFF 105A  
                __end_of_INST_NORON 1064                  __end_of_INST_PTLAR 105B  
                __end_of_INST_SLPIN 1067                  __end_of_INST_PTLON 1065  
             __size_of_glcdTransfer 0028          __size_of_glcdDrawRectangle 0180  
         spiTransfer@byteToTransfer 0002                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
                glcdDrawPixel@color 001B                             __Hparam 0000  
                    _GLCD_SIZE_HORZ 106A                             __Lparam 0000  
                    _GLCD_SIZE_VERT 1069                __end_of_INST_DISPOFF 1060  
              __end_of_INST_FRMCTR1 1054                __end_of_INST_FRMCTR2 1053  
              __end_of_INST_FRMCTR3 1052                             ___awdiv 1C2C  
                           ___awmod 1CB0                     __size_of___wmul 0026  
                      __psmallconst 1000                             __pcinit 1EE4  
                      _glcdTransfer 1E72                             __ramtop 1000  
                           __ptext0 106E                             __ptext1 17A8  
                           __ptext2 1E3A                             __ptext3 1DEA  
                           __ptext4 1D8E                             __ptext5 1D20  
                           __ptext6 1AAC                             __ptext7 1E72  
                           __ptext8 1EF0                             __ptext9 1EC0  
              __end_of_INST_SWRESET 1068                    ___awmod@dividend 0009  
                           _spiInit 1E3A                             _spiSend 1EF0  
              __size_of_spiTransfer 0024                end_of_initialization 1EE6  
             GLCD_PIC@INST_VMOFCTR2 1029                          ??_initGLCD 001A  
                     __Lmediumconst 0000              __end_of_GLCD_SIZE_HORZ 106B  
                         _INST_TEON 1058              __end_of_GLCD_SIZE_VERT 106A  
                  glcdTransfer@byte 0006                      spiInit@divider 0001  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                    __end_of_INDIGO 1009                      __end_of_ORANGE 1019  
                    __end_of_VIOLET 1005                      __end_of_YELLOW 1015  
      __end_ofGLCD_PIC@INST_DISPOFF 1040        __end_ofGLCD_PIC@INST_FRMCTR1 1034  
      __end_ofGLCD_PIC@INST_FRMCTR2 1033        __end_ofGLCD_PIC@INST_FRMCTR3 1032  
                    __end_of___wmul 1EC0        __end_ofGLCD_PIC@INST_SWRESET 1048  
               start_initialization 1EE4                         __end_of_RED 101D  
            glcdDrawRectangle@color 000A                    __CFG_OSC$INTIO67 000000  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D          _GLCD_ADDRESSABLE_SIZE_HORZ 106C  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C          _GLCD_ADDRESSABLE_SIZE_VERT 106B  
                       __pbssCOMRAM 002A          __end_ofGLCD_PIC@INST_CASET 103E  
        __end_ofGLCD_PIC@INST_IDMON 1036          __end_ofGLCD_PIC@INST_INVON 1042  
        __end_ofGLCD_PIC@INST_RASET 103D          __end_ofGLCD_PIC@INST_RAMWR 103C  
                      _INST_DISPOFF 105F          __end_ofGLCD_PIC@INST_TEOFF 103A  
        __end_ofGLCD_PIC@INST_NORON 1044          __end_ofGLCD_PIC@INST_PTLAR 103B  
        __end_ofGLCD_PIC@INST_SLPIN 1047          __end_ofGLCD_PIC@INST_PTLON 1045  
                      _INST_FRMCTR1 1053                        _INST_FRMCTR2 1052  
                      _INST_FRMCTR3 1051                   __size_of_initGLCD 0304  
                      _INST_SWRESET 1067              __size_of_glcdDrawPixel 006E  
                         _main$1161 0024                   __CFG_CCP2MX$PORTC 000000  
                          ?___awdiv 0001                            ?___awmod 0009  
            __size_of_glcdSetCOLMOD 0050                         __smallconst 1000  
               glcdDrawRectangle@XE 0007                 glcdDrawRectangle@YE 0009  
               glcdDrawRectangle@XS 0019                 glcdDrawRectangle@YS 0008  
               __end_of_INST_GAMSET 1061                            ?_spiInit 0001  
               __end_of_INST_COLMOD 1055                            ?_spiSend 0001  
               __end_of_INST_MADCTL 1058                 __end_of_INST_DISPON 105F  
               __end_of_INST_IDMOFF 1057                GLCD_PIC@INST_DISPOFF 103F  
               __end_of_INST_INVCTR 1051                 __end_of_INST_INVOFF 1063  
            __size_of_glcdSetOrigin 005C                GLCD_PIC@INST_FRMCTR1 1033  
              GLCD_PIC@INST_FRMCTR2 1032                GLCD_PIC@INST_FRMCTR3 1031  
               __end_of_INST_PWCTR1 1050                 __end_of_INST_PWCTR2 104F  
               __end_of_INST_PWCTR3 104E                 __end_of_INST_PWCTR4 104D  
               __end_of_INST_PWCTR5 104C                 __end_of_INST_VMCTR1 104B  
               __end_of_INST_SLPOUT 1066                      ___wmul@product 0005  
                          _LATDbits 000F8C                GLCD_PIC@INST_SWRESET 1047  
                          _INST_NOP 1068                          spiSend@val 0003  
                  __CFG_WDTPS$32768 000000                     glcdTransfer@cmd 0004  
                 ___wmul@multiplier 0001                       ??_spiTransfer 0001  
              glcdSetCOLMOD@rawData 0008                       _glcdDrawPixel 1D20  
                     _glcdSetCOLMOD 1DEA                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                     _glcdSetOrigin 1D8E                    __size_of___awdiv 0084  
                  __size_of___awmod 0070                         _INST_GAMSET 1060  
                       _INST_COLMOD 1054                         _INST_MADCTL 1057  
                       _INST_DISPON 105E                         _INST_IDMOFF 1056  
                       _INST_INVCTR 1050                         _INST_INVOFF 1062  
                    ?_glcdDrawPixel 001A                         _INST_PWCTR1 104F  
                       _INST_PWCTR2 104E                         _INST_PWCTR3 104D  
                       _INST_PWCTR4 104C                         _INST_PWCTR5 104B  
                       _INST_VMCTR1 104A                         _INST_SLPOUT 1065  
                          __ptext10 1E9A                            __ptext11 1CB0  
                          __ptext12 1C2C                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 104A  
                        _MADCTLbits 002A                 __end_of_spiTransfer 1EE4  
                    ?_glcdSetCOLMOD 0001                            _initGLCD 17A8  
               GLCD_PIC@INST_GAMSET 1040                 GLCD_PIC@INST_COLMOD 1034  
               GLCD_PIC@INST_MADCTL 1037                 GLCD_PIC@INST_DISPON 103E  
               GLCD_PIC@INST_IDMOFF 1036                       __size_of_main 073A  
               GLCD_PIC@INST_INVCTR 1030                 GLCD_PIC@INST_INVOFF 1042  
               GLCD_PIC@INST_PWCTR1 102F                 GLCD_PIC@INST_PWCTR2 102E  
               GLCD_PIC@INST_PWCTR3 102D                 GLCD_PIC@INST_PWCTR4 102C  
               GLCD_PIC@INST_PWCTR5 102B                 GLCD_PIC@INST_VMCTR1 102A  
               GLCD_PIC@INST_SLPOUT 1045                      ?_glcdSetOrigin 0001  
                       _OSCTUNEbits 000F9B                          _INST_CASET 105D  
                        _INST_IDMON 1055                          _INST_INVON 1061  
                        _INST_RASET 105C                          _INST_RAMWR 105B  
                        _INST_TEOFF 1059                          _INST_NORON 1063  
                        _INST_PTLAR 105A                          _INST_SLPIN 1066  
                        _INST_PTLON 1064                  GLCD_PIC@INST_CASET 103D  
                GLCD_PIC@INST_IDMON 1035                  GLCD_PIC@INST_INVON 1041  
                GLCD_PIC@INST_RASET 103C                  GLCD_PIC@INST_RAMWR 103B  
                GLCD_PIC@INST_TEOFF 1039                  GLCD_PIC@INST_NORON 1043  
                GLCD_PIC@INST_PTLAR 103A                          _OSCCONbits 000FD3  
                GLCD_PIC@INST_SLPIN 1046                  GLCD_PIC@INST_PTLON 1044  
        glcdDrawRectangle@colorData 0016                       ?_glcdTransfer 0004  
                   ??_glcdDrawPixel 001F                         _spiTransfer 1EC0  
                 GLCD_PIC@INST_TEON 1038                         _SSPCON1bits 000FC6  
                   ??_glcdSetCOLMOD 0007                    GLCD_PIC@INST_NOP 1048  
                   ??_glcdSetOrigin 0007  
