

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Sep 15 14:38:37 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.42
    47                           ; Generated 13/04/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4620 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	mediumconst
    82  00FE52                     __pmediumconst:
    83                           	opt stack 0
    84  00FE52  00                 	db	0
    85  00FE53                     _dpowers:
    86                           	opt stack 0
    87  00FE53  0001               	dw	1
    88  00FE55  0000               	dw	0
    89  00FE57  000A               	dw	10
    90  00FE59  0000               	dw	0
    91  00FE5B  0064               	dw	100
    92  00FE5D  0000               	dw	0
    93  00FE5F  03E8               	dw	1000
    94  00FE61  0000               	dw	0
    95  00FE63  2710               	dw	10000
    96  00FE65  0000               	dw	0
    97  00FE67  86A0               	dw	34464
    98  00FE69  0001               	dw	1
    99  00FE6B  4240               	dw	16960
   100  00FE6D  000F               	dw	15
   101  00FE6F  9680               	dw	38528
   102  00FE71  0098               	dw	152
   103  00FE73  E100               	dw	57600
   104  00FE75  05F5               	dw	1525
   105  00FE77  CA00               	dw	51712
   106  00FE79  3B9A               	dw	15258
   107  00FE7B                     __end_of_dpowers:
   108                           	opt stack 0
   109  00FE7B                     __powers_:
   110                           	opt stack 0
   111  00FE7B  00                 	db	0
   112  00FE7C  80                 	db	128
   113  00FE7D  3F                 	db	63
   114  00FE7E  00                 	db	0
   115  00FE7F  20                 	db	32
   116  00FE80  41                 	db	65
   117  00FE81  00                 	db	0
   118  00FE82  C8                 	db	200
   119  00FE83  42                 	db	66
   120  00FE84  00                 	db	0
   121  00FE85  7A                 	db	122
   122  00FE86  44                 	db	68
   123  00FE87  40                 	db	64
   124  00FE88  1C                 	db	28
   125  00FE89  46                 	db	70
   126  00FE8A  50                 	db	80
   127  00FE8B  C3                 	db	195
   128  00FE8C  47                 	db	71
   129  00FE8D  24                 	db	36
   130  00FE8E  74                 	db	116
   131  00FE8F  49                 	db	73
   132  00FE90  97                 	db	151
   133  00FE91  18                 	db	24
   134  00FE92  4B                 	db	75
   135  00FE93  BC                 	db	188
   136  00FE94  BE                 	db	190
   137  00FE95  4C                 	db	76
   138  00FE96  6B                 	db	107
   139  00FE97  6E                 	db	110
   140  00FE98  4E                 	db	78
   141  00FE99  03                 	db	3
   142  00FE9A  15                 	db	21
   143  00FE9B  50                 	db	80
   144  00FE9C  79                 	db	121
   145  00FE9D  AD                 	db	173
   146  00FE9E  60                 	db	96
   147  00FE9F  F3                 	db	243
   148  00FEA0  49                 	db	73
   149  00FEA1  71                 	db	113
   150  00FEA2                     __end_of__powers_:
   151                           	opt stack 0
   152  00FEA2                     __npowers_:
   153                           	opt stack 0
   154  00FEA2  00                 	db	0
   155  00FEA3  80                 	db	128
   156  00FEA4  3F                 	db	63
   157  00FEA5  CD                 	db	205
   158  00FEA6  CC                 	db	204
   159  00FEA7  3D                 	db	61
   160  00FEA8  D7                 	db	215
   161  00FEA9  23                 	db	35
   162  00FEAA  3C                 	db	60
   163  00FEAB  12                 	db	18
   164  00FEAC  83                 	db	131
   165  00FEAD  3A                 	db	58
   166  00FEAE  B7                 	db	183
   167  00FEAF  D1                 	db	209
   168  00FEB0  38                 	db	56
   169  00FEB1  C6                 	db	198
   170  00FEB2  27                 	db	39
   171  00FEB3  37                 	db	55
   172  00FEB4  38                 	db	56
   173  00FEB5  86                 	db	134
   174  00FEB6  35                 	db	53
   175  00FEB7  C0                 	db	192
   176  00FEB8  D6                 	db	214
   177  00FEB9  33                 	db	51
   178  00FEBA  CC                 	db	204
   179  00FEBB  2B                 	db	43
   180  00FEBC  32                 	db	50
   181  00FEBD  70                 	db	112
   182  00FEBE  89                 	db	137
   183  00FEBF  30                 	db	48
   184  00FEC0  E7                 	db	231
   185  00FEC1  DB                 	db	219
   186  00FEC2  2E                 	db	46
   187  00FEC3  E5                 	db	229
   188  00FEC4  3C                 	db	60
   189  00FEC5  1E                 	db	30
   190  00FEC6  42                 	db	66
   191  00FEC7  A2                 	db	162
   192  00FEC8  0D                 	db	13
   193  00FEC9                     __end_of__npowers_:
   194                           	opt stack 0
   195  00FEC9                     _hexpowers:
   196                           	opt stack 0
   197  00FEC9  0001               	dw	1
   198  00FECB  0000               	dw	0
   199  00FECD  0010               	dw	16
   200  00FECF  0000               	dw	0
   201  00FED1  0100               	dw	256
   202  00FED3  0000               	dw	0
   203  00FED5  1000               	dw	4096
   204  00FED7  0000               	dw	0
   205  00FED9  0000               	dw	0
   206  00FEDB  0001               	dw	1
   207  00FEDD  0000               	dw	0
   208  00FEDF  0010               	dw	16
   209  00FEE1  0000               	dw	0
   210  00FEE3  0100               	dw	256
   211  00FEE5  0000               	dw	0
   212  00FEE7  1000               	dw	4096
   213  00FEE9                     __end_of_hexpowers:
   214                           	opt stack 0
   215  00FEE9                     _STOP_TRAN:
   216                           	opt stack 0
   217  00FEE9  FD                 	db	253
   218  00FEEA                     __end_of_STOP_TRAN:
   219                           	opt stack 0
   220  00FEEA                     _START_BLOCK_TOKEN:
   221                           	opt stack 0
   222  00FEEA  FC                 	db	252
   223  00FEEB                     __end_of_START_BLOCK_TOKEN:
   224                           	opt stack 0
   225  00FEEB                     _START_BLOCK:
   226                           	opt stack 0
   227  00FEEB  FE                 	db	254
   228  00FEEC                     __end_of_START_BLOCK:
   229                           	opt stack 0
   230  00FEEC                     _R1_ILLEGAL_COMMAND:
   231                           	opt stack 0
   232  00FEEC  04                 	db	4
   233  00FEED                     __end_of_R1_ILLEGAL_COMMAND:
   234                           	opt stack 0
   235  00FEED                     _R1_IDLE_STATE:
   236                           	opt stack 0
   237  00FEED  01                 	db	1
   238  00FEEE                     __end_of_R1_IDLE_STATE:
   239                           	opt stack 0
   240  00FEEE                     _R1_READY_STATE:
   241                           	opt stack 0
   242  00FEEE  00                 	db	0
   243  00FEEF                     __end_of_R1_READY_STATE:
   244                           	opt stack 0
   245  00FEEF                     _ACMD41:
   246                           	opt stack 0
   247  00FEEF  29                 	db	41
   248  00FEF0                     __end_of_ACMD41:
   249                           	opt stack 0
   250  00FEF0                     _ACMD23:
   251                           	opt stack 0
   252  00FEF0  17                 	db	23
   253  00FEF1                     __end_of_ACMD23:
   254                           	opt stack 0
   255  00FEF1                     _ACMD22:
   256                           	opt stack 0
   257  00FEF1  16                 	db	22
   258  00FEF2                     __end_of_ACMD22:
   259                           	opt stack 0
   260  00FEF2                     _CMD58:
   261                           	opt stack 0
   262  00FEF2  3A                 	db	58
   263  00FEF3                     __end_of_CMD58:
   264                           	opt stack 0
   265  00FEF3                     _CMD55:
   266                           	opt stack 0
   267  00FEF3  37                 	db	55
   268  00FEF4                     __end_of_CMD55:
   269                           	opt stack 0
   270  00FEF4                     _CMD38:
   271                           	opt stack 0
   272  00FEF4  26                 	db	38
   273  00FEF5                     __end_of_CMD38:
   274                           	opt stack 0
   275  00FEF5                     _CMD33:
   276                           	opt stack 0
   277  00FEF5  21                 	db	33
   278  00FEF6                     __end_of_CMD33:
   279                           	opt stack 0
   280  00FEF6                     _CMD32:
   281                           	opt stack 0
   282  00FEF6  20                 	db	32
   283  00FEF7                     __end_of_CMD32:
   284                           	opt stack 0
   285  00FEF7                     _CMD25:
   286                           	opt stack 0
   287  00FEF7  19                 	db	25
   288  00FEF8                     __end_of_CMD25:
   289                           	opt stack 0
   290  00FEF8                     _CMD24:
   291                           	opt stack 0
   292  00FEF8  18                 	db	24
   293  00FEF9                     __end_of_CMD24:
   294                           	opt stack 0
   295  00FEF9                     _CMD18:
   296                           	opt stack 0
   297  00FEF9  12                 	db	18
   298  00FEFA                     __end_of_CMD18:
   299                           	opt stack 0
   300  00FEFA                     _CMD17:
   301                           	opt stack 0
   302  00FEFA  11                 	db	17
   303  00FEFB                     __end_of_CMD17:
   304                           	opt stack 0
   305  00FEFB                     _CMD16:
   306                           	opt stack 0
   307  00FEFB  10                 	db	16
   308  00FEFC                     __end_of_CMD16:
   309                           	opt stack 0
   310  00FEFC                     _CMD13:
   311                           	opt stack 0
   312  00FEFC  0D                 	db	13
   313  00FEFD                     __end_of_CMD13:
   314                           	opt stack 0
   315  00FEFD                     _CMD12:
   316                           	opt stack 0
   317  00FEFD  0C                 	db	12
   318  00FEFE                     __end_of_CMD12:
   319                           	opt stack 0
   320  00FEFE                     _CMD10:
   321                           	opt stack 0
   322  00FEFE  0A                 	db	10
   323  00FEFF                     __end_of_CMD10:
   324                           	opt stack 0
   325  00FEFF                     _CMD9:
   326                           	opt stack 0
   327  00FEFF  09                 	db	9
   328  00FF00                     __end_of_CMD9:
   329                           	opt stack 0
   330  00FF00                     _CMD8CRC:
   331                           	opt stack 0
   332  00FF00  87                 	db	135
   333  00FF01                     __end_of_CMD8CRC:
   334                           	opt stack 0
   335  00FF01                     _CMD8:
   336                           	opt stack 0
   337  00FF01  08                 	db	8
   338  00FF02                     __end_of_CMD8:
   339                           	opt stack 0
   340  00FF02                     _CMD1:
   341                           	opt stack 0
   342  00FF02  01                 	db	1
   343  00FF03                     __end_of_CMD1:
   344                           	opt stack 0
   345  00FF03                     _CMD0CRC:
   346                           	opt stack 0
   347  00FF03  95                 	db	149
   348  00FF04                     __end_of_CMD0CRC:
   349                           	opt stack 0
   350  00FF04                     _CMD0:
   351                           	opt stack 0
   352  00FF04  00                 	db	0
   353  00FF05                     __end_of_CMD0:
   354                           	opt stack 0
   355  00FF05                     _LCD_LEFT:
   356                           	opt stack 0
   357  00FF05  00                 	db	0
   358  00FF06                     __end_of_LCD_LEFT:
   359                           	opt stack 0
   360  00FF06                     _LCD_RIGHT:
   361                           	opt stack 0
   362  00FF06  01                 	db	1
   363  00FF07                     __end_of_LCD_RIGHT:
   364                           	opt stack 0
   365  00FF07                     _LCD_SIZE_VERT:
   366                           	opt stack 0
   367  00FF07  02                 	db	2
   368  00FF08                     __end_of_LCD_SIZE_VERT:
   369                           	opt stack 0
   370  00FF08                     _LCD_SIZE_HORZ:
   371                           	opt stack 0
   372  00FF08  10                 	db	16
   373  00FF09                     __end_of_LCD_SIZE_HORZ:
   374                           	opt stack 0
   375  00FF09                     _LCD_VERT_LIMIT:
   376                           	opt stack 0
   377  00FF09  02                 	db	2
   378  00FF0A                     __end_of_LCD_VERT_LIMIT:
   379                           	opt stack 0
   380  00FF0A                     _LCD_HORZ_LIMIT:
   381                           	opt stack 0
   382  00FF0A  28                 	db	40
   383  00FF0B                     __end_of_LCD_HORZ_LIMIT:
   384                           	opt stack 0
   385  0000                     _TRISEbits	set	3990
   386  0000                     _OSCCONbits	set	4051
   387  0000                     _OSCTUNEbits	set	3995
   388  0000                     _OSCTUNE	set	3995
   389  0000                     _OSCCON	set	4051
   390  0000                     _LATEbits	set	3981
   391  0000                     _TRISCbits	set	3988
   392  0000                     _SSPCON1	set	4038
   393  0000                     _SSPSTAT	set	4039
   394  0000                     _SSPCON1bits	set	4038
   395  0000                     _SSPSTATbits	set	4039
   396  0000                     _SSPBUF	set	4041
   397  0000                     _INTCONbits	set	4082
   398  0000                     _LATDbits	set	3980
   399  0000                     _ADCON1	set	4033
   400  0000                     _ADCON0	set	4034
   401  0000                     _TRISE	set	3990
   402  0000                     _TRISD	set	3989
   403  0000                     _TRISC	set	3988
   404  0000                     _TRISB	set	3987
   405  0000                     _TRISA	set	3986
   406  0000                     _LATE	set	3981
   407  0000                     _LATD	set	3980
   408  0000                     _LATC	set	3979
   409  0000                     _LATB	set	3978
   410  0000                     _LATA	set	3977
   411  0000                     _SSPIF	set	31987
   412  00FF0B                     STR_20:
   413  00FF0B  30                 	db	48	;'0'
   414  00FF0C  31                 	db	49	;'1'
   415  00FF0D  32                 	db	50	;'2'
   416  00FF0E  33                 	db	51	;'3'
   417  00FF0F  34                 	db	52	;'4'
   418  00FF10  35                 	db	53	;'5'
   419  00FF11  36                 	db	54	;'6'
   420  00FF12  37                 	db	55	;'7'
   421  00FF13  38                 	db	56	;'8'
   422  00FF14  39                 	db	57	;'9'
   423  00FF15  61                 	db	97	;'a'
   424  00FF16  62                 	db	98	;'b'
   425  00FF17  63                 	db	99	;'c'
   426  00FF18  64                 	db	100	;'d'
   427  00FF19  65                 	db	101	;'e'
   428  00FF1A  66                 	db	102	;'f'
   429  00FF1B  00                 	db	0
   430  00FF1C                     STR_1:
   431  00FF1C  53                 	db	83	;'S'
   432  00FF1D  44                 	db	68	;'D'
   433  00FF1E  20                 	db	32
   434  00FF1F  69                 	db	105	;'i'
   435  00FF20  6E                 	db	110	;'n'
   436  00FF21  69                 	db	105	;'i'
   437  00FF22  74                 	db	116	;'t'
   438  00FF23  20                 	db	32
   439  00FF24  73                 	db	115	;'s'
   440  00FF25  75                 	db	117	;'u'
   441  00FF26  63                 	db	99	;'c'
   442  00FF27  63                 	db	99	;'c'
   443  00FF28  65                 	db	101	;'e'
   444  00FF29  73                 	db	115	;'s'
   445  00FF2A  73                 	db	115	;'s'
   446  00FF2B  21                 	db	33
   447  00FF2C  00                 	db	0
   448  00FF2D                     STR_19:
   449  00FF2D  53                 	db	83	;'S'
   450  00FF2E  44                 	db	68	;'D'
   451  00FF2F  20                 	db	32
   452  00FF30  69                 	db	105	;'i'
   453  00FF31  6E                 	db	110	;'n'
   454  00FF32  69                 	db	105	;'i'
   455  00FF33  74                 	db	116	;'t'
   456  00FF34  20                 	db	32
   457  00FF35  66                 	db	102	;'f'
   458  00FF36  61                 	db	97	;'a'
   459  00FF37  69                 	db	105	;'i'
   460  00FF38  6C                 	db	108	;'l'
   461  00FF39  65                 	db	101	;'e'
   462  00FF3A  64                 	db	100	;'d'
   463  00FF3B  21                 	db	33
   464  00FF3C  00                 	db	0
   465  00FF3D                     STR_2:
   466  00FF3D  54                 	db	84	;'T'
   467  00FF3E  79                 	db	121	;'y'
   468  00FF3F  70                 	db	112	;'p'
   469  00FF40  65                 	db	101	;'e'
   470  00FF41  3A                 	db	58	;':'
   471  00FF42  20                 	db	32
   472  00FF43  53                 	db	83	;'S'
   473  00FF44  44                 	db	68	;'D'
   474  00FF45  48                 	db	72	;'H'
   475  00FF46  43                 	db	67	;'C'
   476  00FF47  2F                 	db	47
   477  00FF48  53                 	db	83	;'S'
   478  00FF49  44                 	db	68	;'D'
   479  00FF4A  58                 	db	88	;'X'
   480  00FF4B  43                 	db	67	;'C'
   481  00FF4C  00                 	db	0
   482  00FF4D                     STR_11:
   483  00FF4D  50                 	db	80	;'P'
   484  00FF4E  4E                 	db	78	;'N'
   485  00FF4F  4D                 	db	77	;'M'
   486  00FF50  3A                 	db	58	;':'
   487  00FF51  20                 	db	32
   488  00FF52  25                 	db	37
   489  00FF53  63                 	db	99	;'c'
   490  00FF54  25                 	db	37
   491  00FF55  63                 	db	99	;'c'
   492  00FF56  25                 	db	37
   493  00FF57  63                 	db	99	;'c'
   494  00FF58  25                 	db	37
   495  00FF59  63                 	db	99	;'c'
   496  00FF5A  25                 	db	37
   497  00FF5B  63                 	db	99	;'c'
   498  00FF5C  00                 	db	0
   499  00FF5D                     STR_8:
   500  00FF5D  53                 	db	83	;'S'
   501  00FF5E  44                 	db	68	;'D'
   502  00FF5F  20                 	db	32
   503  00FF60  56                 	db	86	;'V'
   504  00FF61  65                 	db	101	;'e'
   505  00FF62  72                 	db	114	;'r'
   506  00FF63  73                 	db	115	;'s'
   507  00FF64  69                 	db	105	;'i'
   508  00FF65  6F                 	db	111	;'o'
   509  00FF66  6E                 	db	110	;'n'
   510  00FF67  3A                 	db	58	;':'
   511  00FF68  20                 	db	32
   512  00FF69  25                 	db	37
   513  00FF6A  75                 	db	117	;'u'
   514  00FF6B  00                 	db	0
   515  00FF6C                     STR_17:
   516  00FF6C  4E                 	db	78	;'N'
   517  00FF6D  75                 	db	117	;'u'
   518  00FF6E  6D                 	db	109	;'m'
   519  00FF6F  62                 	db	98	;'b'
   520  00FF70  65                 	db	101	;'e'
   521  00FF71  72                 	db	114	;'r'
   522  00FF72  20                 	db	32
   523  00FF73  6F                 	db	111	;'o'
   524  00FF74  66                 	db	102	;'f'
   525  00FF75  20                 	db	32
   526  00FF76  4D                 	db	77	;'M'
   527  00FF77  42                 	db	66	;'B'
   528  00FF78  3A                 	db	58	;':'
   529  00FF79  00                 	db	0
   530  00FF7A                     STR_6:
   531  00FF7A  42                 	db	66	;'B'
   532  00FF7B  6C                 	db	108	;'l'
   533  00FF7C  6B                 	db	107	;'k'
   534  00FF7D  53                 	db	83	;'S'
   535  00FF7E  69                 	db	105	;'i'
   536  00FF7F  7A                 	db	122	;'z'
   537  00FF80  65                 	db	101	;'e'
   538  00FF81  3A                 	db	58	;':'
   539  00FF82  20                 	db	32
   540  00FF83  25                 	db	37
   541  00FF84  64                 	db	100	;'d'
   542  00FF85  20                 	db	32
   543  00FF86  62                 	db	98	;'b'
   544  00FF87  00                 	db	0
   545  00FF88                     STR_5:
   546  00FF88  54                 	db	84	;'T'
   547  00FF89  79                 	db	121	;'y'
   548  00FF8A  70                 	db	112	;'p'
   549  00FF8B  65                 	db	101	;'e'
   550  00FF8C  3A                 	db	58	;':'
   551  00FF8D  20                 	db	32
   552  00FF8E  55                 	db	85	;'U'
   553  00FF8F  6E                 	db	110	;'n'
   554  00FF90  6B                 	db	107	;'k'
   555  00FF91  6E                 	db	110	;'n'
   556  00FF92  6F                 	db	111	;'o'
   557  00FF93  77                 	db	119	;'w'
   558  00FF94  6E                 	db	110	;'n'
   559  00FF95  00                 	db	0
   560  00FF96                     STR_10:
   561  00FF96  4F                 	db	79	;'O'
   562  00FF97  45                 	db	69	;'E'
   563  00FF98  4D                 	db	77	;'M'
   564  00FF99  20                 	db	32
   565  00FF9A  49                 	db	73	;'I'
   566  00FF9B  44                 	db	68	;'D'
   567  00FF9C  3A                 	db	58	;':'
   568  00FF9D  20                 	db	32
   569  00FF9E  25                 	db	37
   570  00FF9F  63                 	db	99	;'c'
   571  00FFA0  25                 	db	37
   572  00FFA1  63                 	db	99	;'c'
   573  00FFA2  00                 	db	0
   574  00FFA3                     STR_9:
   575  00FFA3  4D                 	db	77	;'M'
   576  00FFA4  46                 	db	70	;'F'
   577  00FFA5  47                 	db	71	;'G'
   578  00FFA6  20                 	db	32
   579  00FFA7  49                 	db	73	;'I'
   580  00FFA8  44                 	db	68	;'D'
   581  00FFA9  3A                 	db	58	;':'
   582  00FFAA  20                 	db	32
   583  00FFAB  30                 	db	48	;'0'
   584  00FFAC  78                 	db	120	;'x'
   585  00FFAD  25                 	db	37
   586  00FFAE  78                 	db	120	;'x'
   587  00FFAF  00                 	db	0
   588  00FFB0                     STR_3:
   589  00FFB0  54                 	db	84	;'T'
   590  00FFB1  79                 	db	121	;'y'
   591  00FFB2  70                 	db	112	;'p'
   592  00FFB3  65                 	db	101	;'e'
   593  00FFB4  3A                 	db	58	;':'
   594  00FFB5  20                 	db	32
   595  00FFB6  53                 	db	83	;'S'
   596  00FFB7  44                 	db	68	;'D'
   597  00FFB8  53                 	db	83	;'S'
   598  00FFB9  43                 	db	67	;'C'
   599  00FFBA  00                 	db	0
   600  00FFBB                     STR_12:
   601  00FFBB  50                 	db	80	;'P'
   602  00FFBC  52                 	db	82	;'R'
   603  00FFBD  56                 	db	86	;'V'
   604  00FFBE  3A                 	db	58	;':'
   605  00FFBF  20                 	db	32
   606  00FFC0  25                 	db	37
   607  00FFC1  75                 	db	117	;'u'
   608  00FFC2  2E                 	db	46
   609  00FFC3  25                 	db	37
   610  00FFC4  75                 	db	117	;'u'
   611  00FFC5  00                 	db	0
   612  00FFC6                     STR_15:
   613  00FFC6  4D                 	db	77	;'M'
   614  00FFC7  44                 	db	68	;'D'
   615  00FFC8  54                 	db	84	;'T'
   616  00FFC9  3A                 	db	58	;':'
   617  00FFCA  20                 	db	32
   618  00FFCB  25                 	db	37
   619  00FFCC  75                 	db	117	;'u'
   620  00FFCD  2F                 	db	47
   621  00FFCE  25                 	db	37
   622  00FFCF  75                 	db	117	;'u'
   623  00FFD0  00                 	db	0
   624  00FFD1                     STR_7:
   625  00FFD1  23                 	db	35
   626  00FFD2  42                 	db	66	;'B'
   627  00FFD3  6C                 	db	108	;'l'
   628  00FFD4  6B                 	db	107	;'k'
   629  00FFD5  73                 	db	115	;'s'
   630  00FFD6  3A                 	db	58	;':'
   631  00FFD7  20                 	db	32
   632  00FFD8  25                 	db	37
   633  00FFD9  6C                 	db	108	;'l'
   634  00FFDA  75                 	db	117	;'u'
   635  00FFDB  00                 	db	0
   636  00FFDC                     STR_4:
   637  00FFDC  54                 	db	84	;'T'
   638  00FFDD  79                 	db	121	;'y'
   639  00FFDE  70                 	db	112	;'p'
   640  00FFDF  65                 	db	101	;'e'
   641  00FFE0  3A                 	db	58	;':'
   642  00FFE1  20                 	db	32
   643  00FFE2  4D                 	db	77	;'M'
   644  00FFE3  4D                 	db	77	;'M'
   645  00FFE4  43                 	db	67	;'C'
   646  00FFE5  00                 	db	0
   647  00FFE6                     STR_13:
   648  00FFE6  50                 	db	80	;'P'
   649  00FFE7  53                 	db	83	;'S'
   650  00FFE8  4E                 	db	78	;'N'
   651  00FFE9  3A                 	db	58	;':'
   652  00FFEA  20                 	db	32
   653  00FFEB  30                 	db	48	;'0'
   654  00FFEC  78                 	db	120	;'x'
   655  00FFED  25                 	db	37
   656  00FFEE  78                 	db	120	;'x'
   657  00FFEF  00                 	db	0
   658  00FFF0                     STR_16:
   659  00FFF0  43                 	db	67	;'C'
   660  00FFF1  52                 	db	82	;'R'
   661  00FFF2  43                 	db	67	;'C'
   662  00FFF3  37                 	db	55	;'7'
   663  00FFF4  3A                 	db	58	;':'
   664  00FFF5  20                 	db	32
   665  00FFF6  25                 	db	37
   666  00FFF7  75                 	db	117	;'u'
   667  00FFF8  00                 	db	0
   668  00FFF9                     STR_18:
   669  00FFF9  25                 	db	37
   670  00FFFA  2E                 	db	46
   671  00FFFB  32                 	db	50	;'2'
   672  00FFFC  66                 	db	102	;'f'
   673  00FFFD  20                 	db	32
   674  00FFFE  00                 	db	0
   675  0000                     
   676                           ; #config settings
   677  00FFFF  00                 	db	0	; dummy byte at the end
   678  0000                     
   679                           	psect	cinit
   680  00D510                     __pcinit:
   681                           	opt stack 0
   682  00D510                     start_initialization:
   683                           	opt stack 0
   684  00D510                     __initialization:
   685                           	opt stack 0
   686                           
   687                           ; Clear objects allocated to BANK0 (62 bytes)
   688  00D510  EE00  F080         	lfsr	0,__pbssBANK0
   689  00D514  0E3E               	movlw	62
   690  00D516                     clear_0:
   691  00D516  6AEE               	clrf	postinc0,c
   692  00D518  06E8               	decf	wreg,f,c
   693  00D51A  E1FD               	bnz	clear_0
   694                           
   695                           ; Clear objects allocated to COMRAM (2 bytes)
   696  00D51C  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   697  00D51E  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   698  00D520                     end_of_initialization:
   699                           	opt stack 0
   700  00D520                     __end_of__initialization:
   701                           	opt stack 0
   702  00D520  0E00               	movlw	low (__Lmediumconst shr (0+16))
   703  00D522  6EF8               	movwf	tblptru,c
   704  00D524  0100               	movlb	0
   705  00D526  EF33  F074         	goto	_main	;jump to C main() function
   706                           tblptru	equ	0xFF8
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           
   710                           	psect	bssCOMRAM
   711  00007B                     __pbssCOMRAM:
   712                           	opt stack 0
   713  00007B                     lcd@LCDinterruptState:
   714                           	opt stack 0
   715  00007B                     	ds	1
   716  00007C                     	ds	1
   717                           tblptru	equ	0xFF8
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           
   721                           	psect	bssBANK0
   722  000080                     __pbssBANK0:
   723                           	opt stack 0
   724  000080                     _SDCard:
   725                           	opt stack 0
   726  000080                     	ds	46
   727  0000AE                     initSD@F3023:
   728                           	opt stack 0
   729  0000AE                     	ds	16
   730                           tblptru	equ	0xFF8
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           
   734                           	psect	cstackCOMRAM
   735  000001                     __pcstackCOMRAM:
   736                           	opt stack 0
   737  000001                     ??_isdigit:
   738  000001                     ??_spiTransfer:
   739  000001                     ?___awmod:
   740                           	opt stack 0
   741  000001                     ?___ftpack:
   742                           	opt stack 0
   743  000001                     ?___ftneg:
   744                           	opt stack 0
   745  000001                     ?__tdiv_to_l_:
   746                           	opt stack 0
   747  000001                     ?__div_to_l_:
   748                           	opt stack 0
   749  000001                     ?___lldiv:
   750                           	opt stack 0
   751  000001                     lcdNibble@temp:
   752                           	opt stack 0
   753  000001                     spiInit@divider:
   754                           	opt stack 0
   755  000001                     ___awmod@dividend:
   756                           	opt stack 0
   757  000001                     __div_to_l_@f1:
   758                           	opt stack 0
   759  000001                     ___ftpack@arg:
   760                           	opt stack 0
   761  000001                     __tdiv_to_l_@f1:
   762                           	opt stack 0
   763  000001                     ___ftge@ff1:
   764                           	opt stack 0
   765  000001                     ___ftneg@f1:
   766                           	opt stack 0
   767  000001                     ___lldiv@dividend:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x0
   771  000001                     	ds	1
   772  000002                     lcdNibble@data:
   773                           	opt stack 0
   774  000002                     spiTransfer@byteToTransfer:
   775                           	opt stack 0
   776  000002                     _isdigit$1087:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x1
   780  000002                     	ds	1
   781  000003                     lcdInst@data:
   782                           	opt stack 0
   783  000003                     putch@data:
   784                           	opt stack 0
   785  000003                     spiSend@val:
   786                           	opt stack 0
   787  000003                     isdigit@c:
   788                           	opt stack 0
   789  000003                     ___awmod@divisor:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x2
   793  000003                     	ds	1
   794  000004                     ??_initLCD:
   795  000004                     ___ftpack@exp:
   796                           	opt stack 0
   797  000004                     __div_to_l_@f2:
   798                           	opt stack 0
   799  000004                     __tdiv_to_l_@f2:
   800                           	opt stack 0
   801  000004                     ___ftge@ff2:
   802                           	opt stack 0
   803  000004                     SD_Command@arg:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x3
   807  000004                     	ds	1
   808  000005                     ___awmod@counter:
   809                           	opt stack 0
   810  000005                     ___ftpack@sign:
   811                           	opt stack 0
   812  000005                     ___lldiv@divisor:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x4
   816  000005                     	ds	1
   817  000006                     ??___ftpack:
   818  000006                     ___awmod@sign:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x5
   822  000006                     	ds	1
   823  000007                     ??__tdiv_to_l_:
   824  000007                     ??___ftge:
   825  000007                     ?___awdiv:
   826                           	opt stack 0
   827  000007                     ___awdiv@dividend:
   828                           	opt stack 0
   829  000007                     __div_to_l_@quot:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x6
   833  000007                     	ds	1
   834  000008                     SD_Command@ptr:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x7
   838  000008                     	ds	1
   839  000009                     ?___lltoft:
   840                           	opt stack 0
   841  000009                     ?___lwtoft:
   842                           	opt stack 0
   843  000009                     ___awdiv@divisor:
   844                           	opt stack 0
   845  000009                     ___lwtoft@c:
   846                           	opt stack 0
   847  000009                     ___lldiv@quotient:
   848                           	opt stack 0
   849  000009                     ___lltoft@c:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x8
   853  000009                     	ds	1
   854  00000A                     SD_Command@cmd:
   855                           	opt stack 0
   856  00000A                     __tdiv_to_l_@quot:
   857                           	opt stack 0
   858                           
   859                           ; 4 bytes @ 0x9
   860  00000A                     	ds	1
   861  00000B                     SD_Command@response:
   862                           	opt stack 0
   863  00000B                     ___awdiv@counter:
   864                           	opt stack 0
   865  00000B                     __div_to_l_@cntr:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0xA
   869  00000B                     	ds	1
   870  00000C                     ?___ftdiv:
   871                           	opt stack 0
   872  00000C                     SD_Command@n:
   873                           	opt stack 0
   874  00000C                     ___awdiv@sign:
   875                           	opt stack 0
   876  00000C                     __div_to_l_@exp1:
   877                           	opt stack 0
   878  00000C                     ___ftdiv@f1:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0xB
   882  00000C                     	ds	1
   883  00000D                     ??___lltoft:
   884  00000D                     ___lldiv@counter:
   885                           	opt stack 0
   886  00000D                     ___awdiv@quotient:
   887                           	opt stack 0
   888  00000D                     SD_ACMD@arg:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0xC
   892  00000D                     	ds	1
   893  00000E                     ?___llmod:
   894                           	opt stack 0
   895  00000E                     __tdiv_to_l_@cntr:
   896                           	opt stack 0
   897  00000E                     ___llmod@dividend:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0xD
   901  00000E                     	ds	1
   902  00000F                     ?___wmul:
   903                           	opt stack 0
   904  00000F                     __tdiv_to_l_@exp1:
   905                           	opt stack 0
   906  00000F                     ___wmul@multiplier:
   907                           	opt stack 0
   908  00000F                     ___ftdiv@f2:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0xE
   912  00000F                     	ds	2
   913  000011                     SD_ACMD@cmd:
   914                           	opt stack 0
   915  000011                     ___lltoft@exp:
   916                           	opt stack 0
   917  000011                     ___wmul@multiplicand:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x10
   921  000011                     	ds	1
   922  000012                     ??___ftdiv:
   923  000012                     ___llmod@divisor:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x11
   927  000012                     	ds	1
   928  000013                     ___wmul@product:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x12
   932  000013                     	ds	2
   933  000015                     ?___ftmul:
   934                           	opt stack 0
   935  000015                     ___ftdiv@cntr:
   936                           	opt stack 0
   937  000015                     ___ftmul@f1:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0x14
   941  000015                     	ds	1
   942  000016                     ___llmod@counter:
   943                           	opt stack 0
   944  000016                     ___ftdiv@f3:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x15
   948  000016                     	ds	2
   949  000018                     ___ftmul@f2:
   950                           	opt stack 0
   951                           
   952                           ; 3 bytes @ 0x17
   953  000018                     	ds	1
   954  000019                     ___ftdiv@exp:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x18
   958  000019                     	ds	1
   959  00001A                     ___ftdiv@sign:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x19
   963  00001A                     	ds	1
   964  00001B                     ??___ftmul:
   965                           
   966                           ; 1 bytes @ 0x1A
   967  00001B                     	ds	3
   968  00001E                     ___ftmul@exp:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x1D
   972  00001E                     	ds	1
   973  00001F                     ___ftmul@f3_as_product:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x1E
   977  00001F                     	ds	3
   978  000022                     ___ftmul@cntr:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x21
   982  000022                     	ds	1
   983  000023                     ___ftmul@sign:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x22
   987  000023                     	ds	1
   988  000024                     ?_fround:
   989                           	opt stack 0
   990  000024                     ?_scale:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x23
   994  000024                     	ds	3
   995  000027                     _fround$1464:
   996                           	opt stack 0
   997  000027                     _scale$1465:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x26
  1001  000027                     	ds	3
  1002  00002A                     scale@scl:
  1003                           	opt stack 0
  1004  00002A                     _fround$1463:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x29
  1008  00002A                     	ds	1
  1009  00002B                     ?___fttol:
  1010                           	opt stack 0
  1011  00002B                     ___fttol@f1:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x2A
  1015  00002B                     	ds	2
  1016  00002D                     fround@prec:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x2C
  1020  00002D                     	ds	1
  1021  00002E                     ?___ftadd:
  1022                           	opt stack 0
  1023  00002E                     ___ftadd@f1:
  1024                           	opt stack 0
  1025                           
  1026                           ; 3 bytes @ 0x2D
  1027  00002E                     	ds	1
  1028  00002F                     ??___fttol:
  1029                           
  1030                           ; 1 bytes @ 0x2E
  1031  00002F                     	ds	2
  1032  000031                     ___ftadd@f2:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x30
  1036  000031                     	ds	3
  1037  000034                     ??___ftadd:
  1038  000034                     ___fttol@sign1:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x33
  1042  000034                     	ds	1
  1043  000035                     ___fttol@lval:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x34
  1047  000035                     	ds	2
  1048  000037                     ___ftadd@sign:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x36
  1052  000037                     	ds	1
  1053  000038                     ___ftadd@exp2:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x37
  1057  000038                     	ds	1
  1058  000039                     ___ftadd@exp1:
  1059                           	opt stack 0
  1060  000039                     ___fttol@exp1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x38
  1064  000039                     	ds	1
  1065  00003A                     ??_initSD:
  1066  00003A                     ?___ftsub:
  1067                           	opt stack 0
  1068  00003A                     ___ftsub@f1:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x39
  1072  00003A                     	ds	3
  1073  00003D                     ___ftsub@f2:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x3C
  1077  00003D                     	ds	3
  1078  000040                     ?_printf:
  1079                           	opt stack 0
  1080  000040                     printf@f:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x3F
  1084  000040                     	ds	1
  1085  000041                     initSD@argument:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x40
  1089  000041                     	ds	4
  1090  000045                     initSD@last_OSCCON:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x44
  1094  000045                     	ds	1
  1095  000046                     initSD@last_OSCTUNE:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x45
  1099  000046                     	ds	1
  1100  000047                     initSD@tempSize:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x46
  1104  000047                     	ds	4
  1105  00004B                     initSD@arr_response:
  1106                           	opt stack 0
  1107                           
  1108                           ; 16 bytes @ 0x4A
  1109  00004B                     	ds	1
  1110  00004C                     ??_printf:
  1111                           
  1112                           ; 1 bytes @ 0x4B
  1113  00004C                     	ds	6
  1114  000052                     _printf$1466:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x51
  1118  000052                     	ds	3
  1119  000055                     printf@cp:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x54
  1123  000055                     	ds	2
  1124  000057                     printf@idx:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x56
  1128  000057                     	ds	1
  1129  000058                     printf@len:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x57
  1133  000058                     	ds	2
  1134  00005A                     printf@ap:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x59
  1138  00005A                     	ds	1
  1139  00005B                     initSD@tempSize_802:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x5A
  1143  00005B                     	ds	1
  1144  00005C                     printf@exp:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x5B
  1148  00005C                     	ds	2
  1149  00005E                     printf@flag:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x5D
  1153  00005E                     	ds	1
  1154  00005F                     initSD@response:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x5E
  1158  00005F                     	ds	1
  1159  000060                     initSD@i:
  1160                           	opt stack 0
  1161  000060                     printf@tmpval:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0x5F
  1165  000060                     	ds	4
  1166  000064                     printf@val:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x63
  1170  000064                     	ds	4
  1171  000068                     printf@fval:
  1172                           	opt stack 0
  1173                           
  1174                           ; 3 bytes @ 0x67
  1175  000068                     	ds	3
  1176  00006B                     printf@prec:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x6A
  1180  00006B                     	ds	2
  1181  00006D                     printf@c:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x6C
  1185  00006D                     	ds	1
  1186  00006E                     ??_main:
  1187                           
  1188                           ; 1 bytes @ 0x6D
  1189  00006E                     	ds	5
  1190  000073                     main@year:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x72
  1194  000073                     	ds	2
  1195  000075                     main@month:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x74
  1199  000075                     	ds	1
  1200  000076                     main@PNM:
  1201                           	opt stack 0
  1202                           
  1203                           ; 5 bytes @ 0x75
  1204  000076                     	ds	5
  1205                           tblptru	equ	0xFF8
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           
  1209 ;;
  1210 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1211 ;;
  1212 ;; *************** function _main *****************
  1213 ;; Defined at:
  1214 ;;		line 23 in file "main.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  PNM             5  117[COMRAM] unsigned char [5]
  1219 ;;  year            2  114[COMRAM] unsigned short 
  1220 ;;  month           1  116[COMRAM] unsigned char 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1234 ;;Total ram usage:       13 bytes
  1235 ;; Hardware stack levels required when called:    5
  1236 ;; This function calls:
  1237 ;;		_initLCD
  1238 ;;		_initSD
  1239 ;;		_lcdInst
  1240 ;;		_printf
  1241 ;; This function is called by:
  1242 ;;		Startup code after reset
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text0
  1247  00E866                     __ptext0:
  1248                           	opt stack 0
  1249  00E866                     _main:
  1250                           	opt stack 26
  1251                           
  1252                           ;main.c: 29: LATA = 0x00;
  1253                           
  1254                           ;incstack = 0
  1255  00E866  0E00               	movlw	0
  1256  00E868  6E89               	movwf	3977,c	;volatile
  1257                           
  1258                           ;main.c: 30: LATB = 0x00;
  1259  00E86A  0E00               	movlw	0
  1260  00E86C  6E8A               	movwf	3978,c	;volatile
  1261                           
  1262                           ;main.c: 31: LATC = 0x00;
  1263  00E86E  0E00               	movlw	0
  1264  00E870  6E8B               	movwf	3979,c	;volatile
  1265                           
  1266                           ;main.c: 32: LATD = 0x00;
  1267  00E872  0E00               	movlw	0
  1268  00E874  6E8C               	movwf	3980,c	;volatile
  1269                           
  1270                           ;main.c: 33: LATE = 0x00;
  1271  00E876  0E00               	movlw	0
  1272  00E878  6E8D               	movwf	3981,c	;volatile
  1273                           
  1274                           ;main.c: 37: TRISA = 0xFF;
  1275  00E87A  6892               	setf	3986,c	;volatile
  1276                           
  1277                           ;main.c: 38: TRISB = 0xFF;
  1278  00E87C  6893               	setf	3987,c	;volatile
  1279                           
  1280                           ;main.c: 39: TRISC = 0b10000000;
  1281  00E87E  0E80               	movlw	128
  1282  00E880  6E94               	movwf	3988,c	;volatile
  1283                           
  1284                           ;main.c: 43: TRISD = 0x00;
  1285  00E882  0E00               	movlw	0
  1286  00E884  6E95               	movwf	3989,c	;volatile
  1287                           
  1288                           ;main.c: 44: TRISE = 0b00000100;
  1289  00E886  0E04               	movlw	4
  1290  00E888  6E96               	movwf	3990,c	;volatile
  1291                           
  1292                           ;main.c: 51: ADCON0 = 0x00;
  1293  00E88A  0E00               	movlw	0
  1294  00E88C  6EC2               	movwf	4034,c	;volatile
  1295                           
  1296                           ;main.c: 52: ADCON1 = 0b00001111;
  1297  00E88E  0E0F               	movlw	15
  1298  00E890  6EC1               	movwf	4033,c	;volatile
  1299                           
  1300                           ;main.c: 56: initLCD();
  1301  00E892  EC46  F06B         	call	_initLCD	;wreg free
  1302                           
  1303                           ;main.c: 57: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1304  00E896  0E0C               	movlw	12
  1305  00E898  EC74  F06A         	call	_lcdInst
  1306                           
  1307                           ;main.c: 60: initSD();
  1308  00E89C  EC5F  F076         	call	_initSD	;wreg free
  1309  00E8A0                     l4202:
  1310                           
  1311                           ;main.c: 64: if(SDCard.init){
  1312  00E8A0  0100               	movlb	0	; () banked
  1313  00E8A2  519B               	movf	(_SDCard+27)& (0+255),w,b
  1314  00E8A4  B4D8               	btfsc	status,2,c
  1315  00E8A6  D204               	goto	l4326
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 65: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1319  00E8A8  0E01               	movlw	1
  1320  00E8AA  EC74  F06A         	call	_lcdInst
  1321  00E8AE  0EC3               	movlw	195
  1322  00E8B0  6E6E               	movwf	??_main& (0+255),c
  1323  00E8B2  0ECD               	movlw	205
  1324  00E8B4                     u4697:
  1325  00E8B4  2EE8               	decfsz	wreg,f,c
  1326  00E8B6  D7FE               	bra	u4697
  1327  00E8B8  2E6E               	decfsz	??_main& (0+255),f,c
  1328  00E8BA  D7FC               	bra	u4697
  1329  00E8BC  F000               	nop	
  1330  00E8BE  0E80               	movlw	128
  1331  00E8C0  EC74  F06A         	call	_lcdInst
  1332  00E8C4  0E41               	movlw	65
  1333  00E8C6  6E6E               	movwf	??_main& (0+255),c
  1334  00E8C8  0EEE               	movlw	238
  1335  00E8CA                     u4707:
  1336  00E8CA  2EE8               	decfsz	wreg,f,c
  1337  00E8CC  D7FE               	bra	u4707
  1338  00E8CE  2E6E               	decfsz	??_main& (0+255),f,c
  1339  00E8D0  D7FC               	bra	u4707
  1340  00E8D2  D000               	nop2	
  1341                           
  1342                           ;main.c: 66: printf("SD init success!");
  1343  00E8D4  0E1C               	movlw	low STR_1
  1344  00E8D6  6E40               	movwf	printf@f,c
  1345  00E8D8  0EFF               	movlw	high STR_1
  1346  00E8DA  6E41               	movwf	printf@f+1,c
  1347  00E8DC  EC67  F07A         	call	_printf	;wreg free
  1348                           
  1349                           ;main.c: 67: lcdInst(0xC0);;
  1350  00E8E0  0EC0               	movlw	192
  1351  00E8E2  EC74  F06A         	call	_lcdInst
  1352                           
  1353                           ;main.c: 68: switch(SDCard.Type){
  1354  00E8E6  D01C               	goto	l4224
  1355  00E8E8                     l4214:
  1356  00E8E8  0E3D               	movlw	low STR_2
  1357  00E8EA  6E40               	movwf	printf@f,c
  1358  00E8EC  0EFF               	movlw	high STR_2
  1359  00E8EE  6E41               	movwf	printf@f+1,c
  1360  00E8F0  EC67  F07A         	call	_printf	;wreg free
  1361                           
  1362                           ;main.c: 70: break;
  1363  00E8F4  D021               	goto	l4226
  1364  00E8F6                     l4216:
  1365  00E8F6  0EB0               	movlw	low STR_3
  1366  00E8F8  6E40               	movwf	printf@f,c
  1367  00E8FA  0EFF               	movlw	high STR_3
  1368  00E8FC  6E41               	movwf	printf@f+1,c
  1369  00E8FE  EC67  F07A         	call	_printf	;wreg free
  1370                           
  1371                           ;main.c: 72: break;
  1372  00E902  D01A               	goto	l4226
  1373  00E904                     l4218:
  1374  00E904  0EDC               	movlw	low STR_4
  1375  00E906  6E40               	movwf	printf@f,c
  1376  00E908  0EFF               	movlw	high STR_4
  1377  00E90A  6E41               	movwf	printf@f+1,c
  1378  00E90C  EC67  F07A         	call	_printf	;wreg free
  1379                           
  1380                           ;main.c: 74: break;
  1381  00E910  D013               	goto	l4226
  1382  00E912                     l4220:
  1383                           
  1384                           ;main.c: 76: printf("Type: Unknown");
  1385  00E912  0E88               	movlw	low STR_5
  1386  00E914  6E40               	movwf	printf@f,c
  1387  00E916  0EFF               	movlw	high STR_5
  1388  00E918  6E41               	movwf	printf@f+1,c
  1389  00E91A  EC67  F07A         	call	_printf	;wreg free
  1390                           
  1391                           ;main.c: 78: }
  1392                           
  1393                           ;main.c: 77: break;
  1394  00E91E  D00C               	goto	l4226
  1395  00E920                     l4224:
  1396  00E920  0100               	movlb	0	; () banked
  1397  00E922  5181               	movf	(_SDCard+1)& (0+255),w,b
  1398                           
  1399                           ; Switch size 1, requested type "space"
  1400                           ; Number of cases is 3, Range of values is 0 to 2
  1401                           ; switch strategies available:
  1402                           ; Name         Instructions Cycles
  1403                           ; simple_byte           10     6 (average)
  1404                           ;	Chosen strategy is simple_byte
  1405  00E924  0A00               	xorlw	0	; case 0
  1406  00E926  B4D8               	btfsc	status,2,c
  1407  00E928  D7E6               	goto	l4216
  1408  00E92A  0A01               	xorlw	1	; case 1
  1409  00E92C  B4D8               	btfsc	status,2,c
  1410  00E92E  D7DC               	goto	l4214
  1411  00E930  0A03               	xorlw	3	; case 2
  1412  00E932  B4D8               	btfsc	status,2,c
  1413  00E934  D7E7               	goto	l4218
  1414  00E936  D7ED               	goto	l4220
  1415  00E938                     l4226:
  1416                           
  1417                           ;main.c: 79: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1418  00E938  0E66               	movlw	102
  1419  00E93A  6E6F               	movwf	(??_main+1)& (0+255),c
  1420  00E93C  0E76               	movlw	118
  1421  00E93E  6E6E               	movwf	??_main& (0+255),c
  1422  00E940  0EC1               	movlw	193
  1423  00E942                     u4717:
  1424  00E942  2EE8               	decfsz	wreg,f,c
  1425  00E944  D7FE               	bra	u4717
  1426  00E946  2E6E               	decfsz	??_main& (0+255),f,c
  1427  00E948  D7FC               	bra	u4717
  1428  00E94A  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1429  00E94C  D7FA               	bra	u4717
  1430  00E94E  F000               	nop	
  1431                           
  1432                           ;main.c: 81: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1433  00E950  0E01               	movlw	1
  1434  00E952  EC74  F06A         	call	_lcdInst
  1435  00E956  0EC3               	movlw	195
  1436  00E958  6E6E               	movwf	??_main& (0+255),c
  1437  00E95A  0ECD               	movlw	205
  1438  00E95C                     u4727:
  1439  00E95C  2EE8               	decfsz	wreg,f,c
  1440  00E95E  D7FE               	bra	u4727
  1441  00E960  2E6E               	decfsz	??_main& (0+255),f,c
  1442  00E962  D7FC               	bra	u4727
  1443  00E964  F000               	nop	
  1444  00E966  0E80               	movlw	128
  1445  00E968  EC74  F06A         	call	_lcdInst
  1446  00E96C  0E41               	movlw	65
  1447  00E96E  6E6E               	movwf	??_main& (0+255),c
  1448  00E970  0EEE               	movlw	238
  1449  00E972                     u4737:
  1450  00E972  2EE8               	decfsz	wreg,f,c
  1451  00E974  D7FE               	bra	u4737
  1452  00E976  2E6E               	decfsz	??_main& (0+255),f,c
  1453  00E978  D7FC               	bra	u4737
  1454  00E97A  D000               	nop2	
  1455                           
  1456                           ;main.c: 82: printf("BlkSize: %d b", SDCard.blockSize);
  1457  00E97C  0E7A               	movlw	low STR_6
  1458  00E97E  6E40               	movwf	printf@f,c
  1459  00E980  0EFF               	movlw	high STR_6
  1460  00E982  6E41               	movwf	printf@f+1,c
  1461  00E984  C092  F042         	movff	_SDCard+18,?_printf+2
  1462  00E988  C093  F043         	movff	_SDCard+19,?_printf+3
  1463  00E98C  EC67  F07A         	call	_printf	;wreg free
  1464                           
  1465                           ;main.c: 83: lcdInst(0xC0);;
  1466  00E990  0EC0               	movlw	192
  1467  00E992  EC74  F06A         	call	_lcdInst
  1468                           
  1469                           ;main.c: 84: printf("#Blks: %lu", SDCard.numBlocks);
  1470  00E996  0ED1               	movlw	low STR_7
  1471  00E998  6E40               	movwf	printf@f,c
  1472  00E99A  0EFF               	movlw	high STR_7
  1473  00E99C  6E41               	movwf	printf@f+1,c
  1474  00E99E  C094  F042         	movff	_SDCard+20,?_printf+2
  1475  00E9A2  C095  F043         	movff	_SDCard+21,?_printf+3
  1476  00E9A6  C096  F044         	movff	_SDCard+22,?_printf+4
  1477  00E9AA  C097  F045         	movff	_SDCard+23,?_printf+5
  1478  00E9AE  EC67  F07A         	call	_printf	;wreg free
  1479                           
  1480                           ;main.c: 85: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1481  00E9B2  0E66               	movlw	102
  1482  00E9B4  6E6F               	movwf	(??_main+1)& (0+255),c
  1483  00E9B6  0E76               	movlw	118
  1484  00E9B8  6E6E               	movwf	??_main& (0+255),c
  1485  00E9BA  0EC1               	movlw	193
  1486  00E9BC                     u4747:
  1487  00E9BC  2EE8               	decfsz	wreg,f,c
  1488  00E9BE  D7FE               	bra	u4747
  1489  00E9C0  2E6E               	decfsz	??_main& (0+255),f,c
  1490  00E9C2  D7FC               	bra	u4747
  1491  00E9C4  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1492  00E9C6  D7FA               	bra	u4747
  1493  00E9C8  F000               	nop	
  1494                           
  1495                           ;main.c: 87: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1496  00E9CA  0E01               	movlw	1
  1497  00E9CC  EC74  F06A         	call	_lcdInst
  1498  00E9D0  0EC3               	movlw	195
  1499  00E9D2  6E6E               	movwf	??_main& (0+255),c
  1500  00E9D4  0ECD               	movlw	205
  1501  00E9D6                     u4757:
  1502  00E9D6  2EE8               	decfsz	wreg,f,c
  1503  00E9D8  D7FE               	bra	u4757
  1504  00E9DA  2E6E               	decfsz	??_main& (0+255),f,c
  1505  00E9DC  D7FC               	bra	u4757
  1506  00E9DE  F000               	nop	
  1507  00E9E0  0E80               	movlw	128
  1508  00E9E2  EC74  F06A         	call	_lcdInst
  1509  00E9E6  0E41               	movlw	65
  1510  00E9E8  6E6E               	movwf	??_main& (0+255),c
  1511  00E9EA  0EEE               	movlw	238
  1512  00E9EC                     u4767:
  1513  00E9EC  2EE8               	decfsz	wreg,f,c
  1514  00E9EE  D7FE               	bra	u4767
  1515  00E9F0  2E6E               	decfsz	??_main& (0+255),f,c
  1516  00E9F2  D7FC               	bra	u4767
  1517  00E9F4  D000               	nop2	
  1518                           
  1519                           ;main.c: 88: printf("SD Version: %u", SDCard.SDversion);
  1520  00E9F6  0E5D               	movlw	low STR_8
  1521  00E9F8  6E40               	movwf	printf@f,c
  1522  00E9FA  0EFF               	movlw	high STR_8
  1523  00E9FC  6E41               	movwf	printf@f+1,c
  1524  00E9FE  C080  F042         	movff	_SDCard,?_printf+2
  1525  00EA02  6A43               	clrf	?_printf+3,c
  1526  00EA04  EC67  F07A         	call	_printf	;wreg free
  1527                           
  1528                           ;main.c: 89: lcdInst(0xC0);;
  1529  00EA08  0EC0               	movlw	192
  1530  00EA0A  EC74  F06A         	call	_lcdInst
  1531                           
  1532                           ;main.c: 90: printf("MFG ID: 0x%x", SDCard.MID);
  1533  00EA0E  0EA3               	movlw	low STR_9
  1534  00EA10  6E40               	movwf	printf@f,c
  1535  00EA12  0EFF               	movlw	high STR_9
  1536  00EA14  6E41               	movwf	printf@f+1,c
  1537  00EA16  C082  F042         	movff	_SDCard+2,?_printf+2
  1538  00EA1A  6A43               	clrf	?_printf+3,c
  1539  00EA1C  EC67  F07A         	call	_printf	;wreg free
  1540                           
  1541                           ;main.c: 91: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1542  00EA20  0E66               	movlw	102
  1543  00EA22  6E6F               	movwf	(??_main+1)& (0+255),c
  1544  00EA24  0E76               	movlw	118
  1545  00EA26  6E6E               	movwf	??_main& (0+255),c
  1546  00EA28  0EC1               	movlw	193
  1547  00EA2A                     u4777:
  1548  00EA2A  2EE8               	decfsz	wreg,f,c
  1549  00EA2C  D7FE               	bra	u4777
  1550  00EA2E  2E6E               	decfsz	??_main& (0+255),f,c
  1551  00EA30  D7FC               	bra	u4777
  1552  00EA32  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1553  00EA34  D7FA               	bra	u4777
  1554  00EA36  F000               	nop	
  1555                           
  1556                           ;main.c: 93: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1557  00EA38  0E01               	movlw	1
  1558  00EA3A  EC74  F06A         	call	_lcdInst
  1559  00EA3E  0EC3               	movlw	195
  1560  00EA40  6E6E               	movwf	??_main& (0+255),c
  1561  00EA42  0ECD               	movlw	205
  1562  00EA44                     u4787:
  1563  00EA44  2EE8               	decfsz	wreg,f,c
  1564  00EA46  D7FE               	bra	u4787
  1565  00EA48  2E6E               	decfsz	??_main& (0+255),f,c
  1566  00EA4A  D7FC               	bra	u4787
  1567  00EA4C  F000               	nop	
  1568  00EA4E  0E80               	movlw	128
  1569  00EA50  EC74  F06A         	call	_lcdInst
  1570  00EA54  0E41               	movlw	65
  1571  00EA56  6E6E               	movwf	??_main& (0+255),c
  1572  00EA58  0EEE               	movlw	238
  1573  00EA5A                     u4797:
  1574  00EA5A  2EE8               	decfsz	wreg,f,c
  1575  00EA5C  D7FE               	bra	u4797
  1576  00EA5E  2E6E               	decfsz	??_main& (0+255),f,c
  1577  00EA60  D7FC               	bra	u4797
  1578  00EA62  D000               	nop2	
  1579                           
  1580                           ;main.c: 94: printf("OEM ID: %c%c", SDCard.OID >> 8, SDCard.OID & 0xFF);
  1581  00EA64  0E96               	movlw	low STR_10
  1582  00EA66  6E40               	movwf	printf@f,c
  1583  00EA68  0EFF               	movlw	high STR_10
  1584  00EA6A  6E41               	movwf	printf@f+1,c
  1585  00EA6C  0100               	movlb	0	; () banked
  1586  00EA6E  5184               	movf	(_SDCard+4)& (0+255),w,b
  1587  00EA70  6E42               	movwf	?_printf+2,c
  1588  00EA72  6A43               	clrf	?_printf+3,c
  1589  00EA74  0100               	movlb	0	; () banked
  1590  00EA76  5183               	movf	(_SDCard+3)& (0+255),w,b
  1591  00EA78  6E44               	movwf	?_printf+4,c
  1592  00EA7A  6A45               	clrf	?_printf+5,c
  1593  00EA7C  EC67  F07A         	call	_printf	;wreg free
  1594                           
  1595                           ;main.c: 95: lcdInst(0xC0);;
  1596  00EA80  0EC0               	movlw	192
  1597  00EA82  EC74  F06A         	call	_lcdInst
  1598                           
  1599                           ;main.c: 96: unsigned char PNM[5];
  1600                           ;main.c: 97: PNM[0] = SDCard.PHML & 0xFF;
  1601  00EA86  C085  F076         	movff	_SDCard+5,main@PNM
  1602                           
  1603                           ;main.c: 98: PNM[1] = (SDCard.PHML >> 8) & 0xFF;
  1604  00EA8A  C086  F077         	movff	_SDCard+6,main@PNM+1
  1605                           
  1606                           ;main.c: 99: PNM[2] = (SDCard.PHML >> 16) & 0xFF;
  1607  00EA8E  C087  F078         	movff	_SDCard+7,main@PNM+2
  1608                           
  1609                           ;main.c: 100: PNM[3] = (SDCard.PHML >> 24) & 0xFF;
  1610  00EA92  C088  F079         	movff	_SDCard+8,main@PNM+3
  1611                           
  1612                           ;main.c: 101: PNM[4] = SDCard.PHMH;
  1613  00EA96  C089  F07A         	movff	_SDCard+9,main@PNM+4
  1614                           
  1615                           ;main.c: 102: printf("PNM: %c%c%c%c%c", PNM[4], PNM[3], PNM[2], PNM[1], PNM[0]);
  1616  00EA9A  0E4D               	movlw	low STR_11
  1617  00EA9C  6E40               	movwf	printf@f,c
  1618  00EA9E  0EFF               	movlw	high STR_11
  1619  00EAA0  6E41               	movwf	printf@f+1,c
  1620  00EAA2  C07A  F042         	movff	main@PNM+4,?_printf+2
  1621  00EAA6  6A43               	clrf	?_printf+3,c
  1622  00EAA8  C079  F044         	movff	main@PNM+3,?_printf+4
  1623  00EAAC  6A45               	clrf	?_printf+5,c
  1624  00EAAE  C078  F046         	movff	main@PNM+2,?_printf+6
  1625  00EAB2  6A47               	clrf	?_printf+7,c
  1626  00EAB4  C077  F048         	movff	main@PNM+1,?_printf+8
  1627  00EAB8  6A49               	clrf	?_printf+9,c
  1628  00EABA  C076  F04A         	movff	main@PNM,?_printf+10
  1629  00EABE  6A4B               	clrf	?_printf+11,c
  1630  00EAC0  EC67  F07A         	call	_printf	;wreg free
  1631                           
  1632                           ;main.c: 103: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1633  00EAC4  0E66               	movlw	102
  1634  00EAC6  6E6F               	movwf	(??_main+1)& (0+255),c
  1635  00EAC8  0E76               	movlw	118
  1636  00EACA  6E6E               	movwf	??_main& (0+255),c
  1637  00EACC  0EC1               	movlw	193
  1638  00EACE                     u4807:
  1639  00EACE  2EE8               	decfsz	wreg,f,c
  1640  00EAD0  D7FE               	bra	u4807
  1641  00EAD2  2E6E               	decfsz	??_main& (0+255),f,c
  1642  00EAD4  D7FC               	bra	u4807
  1643  00EAD6  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1644  00EAD8  D7FA               	bra	u4807
  1645  00EADA  F000               	nop	
  1646                           
  1647                           ;main.c: 105: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1648  00EADC  0E01               	movlw	1
  1649  00EADE  EC74  F06A         	call	_lcdInst
  1650  00EAE2  0EC3               	movlw	195
  1651  00EAE4  6E6E               	movwf	??_main& (0+255),c
  1652  00EAE6  0ECD               	movlw	205
  1653  00EAE8                     u4817:
  1654  00EAE8  2EE8               	decfsz	wreg,f,c
  1655  00EAEA  D7FE               	bra	u4817
  1656  00EAEC  2E6E               	decfsz	??_main& (0+255),f,c
  1657  00EAEE  D7FC               	bra	u4817
  1658  00EAF0  F000               	nop	
  1659  00EAF2  0E80               	movlw	128
  1660  00EAF4  EC74  F06A         	call	_lcdInst
  1661  00EAF8  0E41               	movlw	65
  1662  00EAFA  6E6E               	movwf	??_main& (0+255),c
  1663  00EAFC  0EEE               	movlw	238
  1664  00EAFE                     u4827:
  1665  00EAFE  2EE8               	decfsz	wreg,f,c
  1666  00EB00  D7FE               	bra	u4827
  1667  00EB02  2E6E               	decfsz	??_main& (0+255),f,c
  1668  00EB04  D7FC               	bra	u4827
  1669  00EB06  D000               	nop2	
  1670                           
  1671                           ;main.c: 106: printf("PRV: %u.%u", ((SDCard.PRV >> 4) & 0x0F), (SDCard.PRV & 0x0F));
  1672  00EB08  0EBB               	movlw	low STR_12
  1673  00EB0A  6E40               	movwf	printf@f,c
  1674  00EB0C  0EFF               	movlw	high STR_12
  1675  00EB0E  6E41               	movwf	printf@f+1,c
  1676  00EB10  C08A  F06E         	movff	_SDCard+10,??_main
  1677  00EB14  3A6E               	swapf	??_main,f,c
  1678  00EB16  0E0F               	movlw	15
  1679  00EB18  166E               	andwf	??_main,f,c
  1680  00EB1A  0E0F               	movlw	15
  1681  00EB1C  166E               	andwf	??_main,f,c
  1682  00EB1E  506E               	movf	??_main,w,c
  1683  00EB20  6E42               	movwf	?_printf+2,c
  1684  00EB22  6A43               	clrf	?_printf+3,c
  1685  00EB24  C08A  F06F         	movff	_SDCard+10,??_main+1
  1686  00EB28  0E0F               	movlw	15
  1687  00EB2A  166F               	andwf	??_main+1,f,c
  1688  00EB2C  506F               	movf	??_main+1,w,c
  1689  00EB2E  6E44               	movwf	?_printf+4,c
  1690  00EB30  6A45               	clrf	?_printf+5,c
  1691  00EB32  EC67  F07A         	call	_printf	;wreg free
  1692                           
  1693                           ;main.c: 107: lcdInst(0xC0);;
  1694  00EB36  0EC0               	movlw	192
  1695  00EB38  EC74  F06A         	call	_lcdInst
  1696                           
  1697                           ;main.c: 108: printf("PSN: 0x%x", (SDCard.PSN >> 16));
  1698  00EB3C  0EE6               	movlw	low STR_13
  1699  00EB3E  6E40               	movwf	printf@f,c
  1700  00EB40  0EFF               	movlw	high STR_13
  1701  00EB42  6E41               	movwf	printf@f+1,c
  1702  00EB44  C08D  F042         	movff	_SDCard+13,?_printf+2
  1703  00EB48  C08E  F043         	movff	_SDCard+14,?_printf+3
  1704  00EB4C  6A44               	clrf	?_printf+4,c
  1705  00EB4E  6A45               	clrf	?_printf+5,c
  1706  00EB50  EC67  F07A         	call	_printf	;wreg free
  1707                           
  1708                           ;main.c: 109: printf("%x",SDCard.PSN & 0xFFFF);
  1709  00EB54  0EAD               	movlw	low (STR_9+10)
  1710  00EB56  6E40               	movwf	printf@f,c
  1711  00EB58  0EFF               	movlw	high (STR_9+10)
  1712  00EB5A  6E41               	movwf	printf@f+1,c
  1713  00EB5C  EE20  F08B         	lfsr	2,_SDCard+11
  1714  00EB60  0EFF               	movlw	255
  1715  00EB62  14DE               	andwf	postinc2,w,c
  1716  00EB64  6E42               	movwf	?_printf+2,c
  1717  00EB66  0EFF               	movlw	255
  1718  00EB68  14DE               	andwf	postinc2,w,c
  1719  00EB6A  6E43               	movwf	?_printf+3,c
  1720  00EB6C  0E00               	movlw	0
  1721  00EB6E  14DE               	andwf	postinc2,w,c
  1722  00EB70  6E44               	movwf	?_printf+4,c
  1723  00EB72  0E00               	movlw	0
  1724  00EB74  14DE               	andwf	postinc2,w,c
  1725  00EB76  6E45               	movwf	?_printf+5,c
  1726  00EB78  EC67  F07A         	call	_printf	;wreg free
  1727                           
  1728                           ;main.c: 110: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1729  00EB7C  0E66               	movlw	102
  1730  00EB7E  6E6F               	movwf	(??_main+1)& (0+255),c
  1731  00EB80  0E76               	movlw	118
  1732  00EB82  6E6E               	movwf	??_main& (0+255),c
  1733  00EB84  0EC1               	movlw	193
  1734  00EB86                     u4837:
  1735  00EB86  2EE8               	decfsz	wreg,f,c
  1736  00EB88  D7FE               	bra	u4837
  1737  00EB8A  2E6E               	decfsz	??_main& (0+255),f,c
  1738  00EB8C  D7FC               	bra	u4837
  1739  00EB8E  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1740  00EB90  D7FA               	bra	u4837
  1741  00EB92  F000               	nop	
  1742                           
  1743                           ;main.c: 112: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1744  00EB94  0E01               	movlw	1
  1745  00EB96  EC74  F06A         	call	_lcdInst
  1746  00EB9A  0EC3               	movlw	195
  1747  00EB9C  6E6E               	movwf	??_main& (0+255),c
  1748  00EB9E  0ECD               	movlw	205
  1749  00EBA0                     u4847:
  1750  00EBA0  2EE8               	decfsz	wreg,f,c
  1751  00EBA2  D7FE               	bra	u4847
  1752  00EBA4  2E6E               	decfsz	??_main& (0+255),f,c
  1753  00EBA6  D7FC               	bra	u4847
  1754  00EBA8  F000               	nop	
  1755  00EBAA  0E80               	movlw	128
  1756  00EBAC  EC74  F06A         	call	_lcdInst
  1757  00EBB0  0E41               	movlw	65
  1758  00EBB2  6E6E               	movwf	??_main& (0+255),c
  1759  00EBB4  0EEE               	movlw	238
  1760  00EBB6                     u4857:
  1761  00EBB6  2EE8               	decfsz	wreg,f,c
  1762  00EBB8  D7FE               	bra	u4857
  1763  00EBBA  2E6E               	decfsz	??_main& (0+255),f,c
  1764  00EBBC  D7FC               	bra	u4857
  1765  00EBBE  D000               	nop2	
  1766                           
  1767                           ;main.c: 113: unsigned short year = 2000 + ((SDCard.MDT >> 4) & 0xFF);
  1768  00EBC0  0ED0               	movlw	208
  1769  00EBC2  6E6E               	movwf	??_main& (0+255),c
  1770  00EBC4  0E07               	movlw	7
  1771  00EBC6  6E6F               	movwf	(??_main+1)& (0+255),c
  1772  00EBC8  EE20  F08F         	lfsr	2,_SDCard+15
  1773  00EBCC  CFDE F070          	movff	postinc2,??_main+2
  1774  00EBD0  CFDD F071          	movff	postdec2,??_main+3
  1775  00EBD4  0E04               	movlw	4
  1776  00EBD6  6E72               	movwf	(??_main+4)& (0+255),c
  1777  00EBD8                     u4275:
  1778  00EBD8  90D8               	bcf	status,0,c
  1779  00EBDA  3271               	rrcf	??_main+3,f,c
  1780  00EBDC  3270               	rrcf	??_main+2,f,c
  1781  00EBDE  2E72               	decfsz	(??_main+4)& (0+255),f,c
  1782  00EBE0  D7FB               	goto	u4275
  1783  00EBE2  5070               	movf	??_main+2,w,c
  1784  00EBE4  246E               	addwf	??_main,w,c
  1785  00EBE6  6E73               	movwf	main@year,c
  1786  00EBE8  0E00               	movlw	0
  1787  00EBEA  206F               	addwfc	??_main+1,w,c
  1788  00EBEC  6E74               	movwf	main@year+1,c
  1789                           
  1790                           ;main.c: 114: unsigned char month = SDCard.MDT & 0xF;
  1791  00EBEE  0100               	movlb	0	; () banked
  1792  00EBF0  518F               	movf	(_SDCard+15)& (0+255),w,b
  1793  00EBF2  0B0F               	andlw	15
  1794  00EBF4  6E75               	movwf	main@month,c
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 115: printf("MDT: %u/%u", month, year);
  1798  00EBF6  0EC6               	movlw	low STR_15
  1799  00EBF8  6E40               	movwf	printf@f,c
  1800  00EBFA  0EFF               	movlw	high STR_15
  1801  00EBFC  6E41               	movwf	printf@f+1,c
  1802  00EBFE  C075  F042         	movff	main@month,?_printf+2
  1803  00EC02  6A43               	clrf	?_printf+3,c
  1804  00EC04  C073  F044         	movff	main@year,?_printf+4
  1805  00EC08  C074  F045         	movff	main@year+1,?_printf+5
  1806  00EC0C  EC67  F07A         	call	_printf	;wreg free
  1807                           
  1808                           ;main.c: 116: lcdInst(0xC0);;
  1809  00EC10  0EC0               	movlw	192
  1810  00EC12  EC74  F06A         	call	_lcdInst
  1811                           
  1812                           ;main.c: 117: printf("CRC7: %u", SDCard.CRC);
  1813  00EC16  0EF0               	movlw	low STR_16
  1814  00EC18  6E40               	movwf	printf@f,c
  1815  00EC1A  0EFF               	movlw	high STR_16
  1816  00EC1C  6E41               	movwf	printf@f+1,c
  1817  00EC1E  C091  F042         	movff	_SDCard+17,?_printf+2
  1818  00EC22  6A43               	clrf	?_printf+3,c
  1819  00EC24  EC67  F07A         	call	_printf	;wreg free
  1820                           
  1821                           ;main.c: 118: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1822  00EC28  0E66               	movlw	102
  1823  00EC2A  6E6F               	movwf	(??_main+1)& (0+255),c
  1824  00EC2C  0E76               	movlw	118
  1825  00EC2E  6E6E               	movwf	??_main& (0+255),c
  1826  00EC30  0EC1               	movlw	193
  1827  00EC32                     u4867:
  1828  00EC32  2EE8               	decfsz	wreg,f,c
  1829  00EC34  D7FE               	bra	u4867
  1830  00EC36  2E6E               	decfsz	??_main& (0+255),f,c
  1831  00EC38  D7FC               	bra	u4867
  1832  00EC3A  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1833  00EC3C  D7FA               	bra	u4867
  1834  00EC3E  F000               	nop	
  1835                           
  1836                           ;main.c: 120: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1837  00EC40  0E01               	movlw	1
  1838  00EC42  EC74  F06A         	call	_lcdInst
  1839  00EC46  0EC3               	movlw	195
  1840  00EC48  6E6E               	movwf	??_main& (0+255),c
  1841  00EC4A  0ECD               	movlw	205
  1842  00EC4C                     u4877:
  1843  00EC4C  2EE8               	decfsz	wreg,f,c
  1844  00EC4E  D7FE               	bra	u4877
  1845  00EC50  2E6E               	decfsz	??_main& (0+255),f,c
  1846  00EC52  D7FC               	bra	u4877
  1847  00EC54  F000               	nop	
  1848  00EC56  0E80               	movlw	128
  1849  00EC58  EC74  F06A         	call	_lcdInst
  1850  00EC5C  0E41               	movlw	65
  1851  00EC5E  6E6E               	movwf	??_main& (0+255),c
  1852  00EC60  0EEE               	movlw	238
  1853  00EC62                     u4887:
  1854  00EC62  2EE8               	decfsz	wreg,f,c
  1855  00EC64  D7FE               	bra	u4887
  1856  00EC66  2E6E               	decfsz	??_main& (0+255),f,c
  1857  00EC68  D7FC               	bra	u4887
  1858  00EC6A  D000               	nop2	
  1859                           
  1860                           ;main.c: 121: printf("Number of MB:");
  1861  00EC6C  0E6C               	movlw	low STR_17
  1862  00EC6E  6E40               	movwf	printf@f,c
  1863  00EC70  0EFF               	movlw	high STR_17
  1864  00EC72  6E41               	movwf	printf@f+1,c
  1865  00EC74  EC67  F07A         	call	_printf	;wreg free
  1866                           
  1867                           ;main.c: 122: lcdInst(0xC0);;
  1868  00EC78  0EC0               	movlw	192
  1869  00EC7A  EC74  F06A         	call	_lcdInst
  1870                           
  1871                           ;main.c: 123: printf("%.2f ", SDCard.size);
  1872  00EC7E  0EF9               	movlw	low STR_18
  1873  00EC80  6E40               	movwf	printf@f,c
  1874  00EC82  0EFF               	movlw	high STR_18
  1875  00EC84  6E41               	movwf	printf@f+1,c
  1876  00EC86  C098  F042         	movff	_SDCard+24,?_printf+2
  1877  00EC8A  C099  F043         	movff	_SDCard+25,?_printf+3
  1878  00EC8E  C09A  F044         	movff	_SDCard+26,?_printf+4
  1879  00EC92  EC67  F07A         	call	_printf	;wreg free
  1880                           
  1881                           ;main.c: 124: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1882  00EC96  0E66               	movlw	102
  1883  00EC98  6E6F               	movwf	(??_main+1)& (0+255),c
  1884  00EC9A  0E76               	movlw	118
  1885  00EC9C  6E6E               	movwf	??_main& (0+255),c
  1886  00EC9E  0EC1               	movlw	193
  1887  00ECA0                     u4897:
  1888  00ECA0  2EE8               	decfsz	wreg,f,c
  1889  00ECA2  D7FE               	bra	u4897
  1890  00ECA4  2E6E               	decfsz	??_main& (0+255),f,c
  1891  00ECA6  D7FC               	bra	u4897
  1892  00ECA8  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1893  00ECAA  D7FA               	bra	u4897
  1894  00ECAC  F000               	nop	
  1895                           
  1896                           ;main.c: 125: }
  1897  00ECAE  D5F8               	goto	l4202
  1898  00ECB0                     l4326:
  1899                           
  1900                           ;main.c: 126: else{
  1901                           ;main.c: 127: printf("SD init failed!");
  1902  00ECB0  0E2D               	movlw	low STR_19
  1903  00ECB2  6E40               	movwf	printf@f,c
  1904  00ECB4  0EFF               	movlw	high STR_19
  1905  00ECB6  6E41               	movwf	printf@f+1,c
  1906  00ECB8  EC67  F07A         	call	_printf	;wreg free
  1907  00ECBC                     l120:
  1908  00ECBC  D7FF               	goto	l120
  1909  00ECBE                     __end_of_main:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postinc2	equ	0xFDE
  1915                           postdec2	equ	0xFDD
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _printf *****************
  1919 ;; Defined at:
  1920 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1923 ;;		 -> STR_19(16), STR_18(6), STR_17(14), STR_16(9), 
  1924 ;;		 -> STR_15(11), STR_14(3), STR_13(10), STR_12(11), 
  1925 ;;		 -> STR_11(16), STR_10(13), STR_9(13), STR_8(15), 
  1926 ;;		 -> STR_7(11), STR_6(14), STR_5(14), STR_4(10), 
  1927 ;;		 -> STR_3(11), STR_2(16), STR_1(17), 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  idx             1   86[COMRAM] unsigned char 
  1930 ;;  val             4   99[COMRAM] unsigned long 
  1931 ;;  tmpval          4   95[COMRAM] struct .
  1932 ;;  fval            3  103[COMRAM] struct .
  1933 ;;  prec            2  106[COMRAM] int 
  1934 ;;  flag            2   93[COMRAM] unsigned short 
  1935 ;;  exp             2   91[COMRAM] int 
  1936 ;;  ap              2   89[COMRAM] PTR void [1]
  1937 ;;		 -> ?_printf(2), 
  1938 ;;  len             2   87[COMRAM] unsigned int 
  1939 ;;  cp              2   84[COMRAM] PTR const unsigned char 
  1940 ;;		 -> printf@c(1), 
  1941 ;;  width           2    0        int 
  1942 ;;  c               1  108[COMRAM] char 
  1943 ;;  d               1    0        unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  2   63[COMRAM] int 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1953 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;Total ram usage:       46 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    3
  1960 ;; This function calls:
  1961 ;;		___awdiv
  1962 ;;		___ftadd
  1963 ;;		___ftge
  1964 ;;		___ftmul
  1965 ;;		___ftneg
  1966 ;;		___ftsub
  1967 ;;		___fttol
  1968 ;;		___lldiv
  1969 ;;		___llmod
  1970 ;;		___lltoft
  1971 ;;		___wmul
  1972 ;;		__div_to_l_
  1973 ;;		__tdiv_to_l_
  1974 ;;		_fround
  1975 ;;		_isdigit
  1976 ;;		_putch
  1977 ;;		_scale
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text1
  1984  00F4CE                     __ptext1:
  1985                           	opt stack 0
  1986  00F4CE                     _printf:
  1987                           	opt stack 27
  1988                           
  1989                           ;doprnt.c: 466: va_list ap;
  1990                           ;doprnt.c: 499: signed char c;
  1991                           ;doprnt.c: 501: int width;
  1992                           ;doprnt.c: 504: int prec;
  1993                           ;doprnt.c: 508: unsigned short flag;
  1994                           ;doprnt.c: 515: char d;
  1995                           ;doprnt.c: 516: double fval;
  1996                           ;doprnt.c: 517: int exp;
  1997                           ;doprnt.c: 523: union {
  1998                           ;doprnt.c: 524: unsigned long vd;
  1999                           ;doprnt.c: 525: double integ;
  2000                           ;doprnt.c: 526: } tmpval;
  2001                           ;doprnt.c: 528: unsigned long val;
  2002                           ;doprnt.c: 529: unsigned len;
  2003                           ;doprnt.c: 530: const char * cp;
  2004                           ;doprnt.c: 533: *ap = __va_start();
  2005                           
  2006                           ;incstack = 0
  2007  00F4CE  0E42               	movlw	low (?_printf+2)
  2008  00F4D0  6E5A               	movwf	printf@ap,c
  2009  00F4D2  0E00               	movlw	high (?_printf+2)
  2010  00F4D4  6E5B               	movwf	printf@ap+1,c
  2011                           
  2012                           ;doprnt.c: 536: while(c = *f++) {
  2013  00F4D6  EF1B  F07F         	goto	l4180
  2014  00F4DA                     l3902:
  2015                           
  2016                           ;doprnt.c: 538: if(c != '%')
  2017  00F4DA  0E25               	movlw	37
  2018  00F4DC  186D               	xorwf	printf@c,w,c
  2019  00F4DE  B4D8               	btfsc	status,2,c
  2020  00F4E0  D005               	goto	l3906
  2021                           
  2022                           ;doprnt.c: 540: {
  2023                           ;doprnt.c: 541: (putch(c) );
  2024  00F4E2  506D               	movf	printf@c,w,c
  2025  00F4E4  EC7E  F06A         	call	_putch
  2026                           
  2027                           ;doprnt.c: 542: continue;
  2028  00F4E8  EF1B  F07F         	goto	l4180
  2029  00F4EC                     l3906:
  2030                           
  2031                           ;doprnt.c: 543: }
  2032                           ;doprnt.c: 548: flag = 0;
  2033  00F4EC  0E00               	movlw	0
  2034  00F4EE  6E5F               	movwf	printf@flag+1,c
  2035  00F4F0  0E00               	movlw	0
  2036  00F4F2  6E5E               	movwf	printf@flag,c
  2037                           
  2038                           ;doprnt.c: 611: if(*f == '.') {
  2039  00F4F4  C040  FFF6         	movff	printf@f,tblptrl
  2040  00F4F8  C041  FFF7         	movff	printf@f+1,tblptrh
  2041  00F4FC                     	if	0	;tblptru may be non-zero
  2042  00F4FC                     	endif
  2043  00F4FC                     	if	0	;tblptru may be non-zero
  2044  00F4FC                     	endif
  2045  00F4FC  0008               	tblrd		*
  2046  00F4FE  50F5               	movf	tablat,w,c
  2047  00F500  0A2E               	xorlw	46
  2048  00F502  A4D8               	btfss	status,2,c
  2049  00F504  D02E               	goto	l3920
  2050                           
  2051                           ;doprnt.c: 612: flag |= 0x4000;
  2052  00F506  8C5F               	bsf	printf@flag+1,6,c
  2053                           
  2054                           ;doprnt.c: 613: f++;
  2055  00F508  4A40               	infsnz	printf@f,f,c
  2056  00F50A  2A41               	incf	printf@f+1,f,c
  2057                           
  2058                           ;doprnt.c: 620: {
  2059                           ;doprnt.c: 621: prec = 0;
  2060  00F50C  0E00               	movlw	0
  2061  00F50E  6E6C               	movwf	printf@prec+1,c
  2062  00F510  0E00               	movlw	0
  2063  00F512  6E6B               	movwf	printf@prec,c
  2064                           
  2065                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2066  00F514  D01B               	goto	l3918
  2067  00F516                     l3914:
  2068                           
  2069                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2070  00F516  C06B  F00F         	movff	printf@prec,___wmul@multiplier
  2071  00F51A  C06C  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2072  00F51E  0E00               	movlw	0
  2073  00F520  6E12               	movwf	___wmul@multiplicand+1,c
  2074  00F522  0E0A               	movlw	10
  2075  00F524  6E11               	movwf	___wmul@multiplicand,c
  2076  00F526  ECDA  F06A         	call	___wmul	;wreg free
  2077  00F52A  C040  FFF6         	movff	printf@f,tblptrl
  2078  00F52E  C041  FFF7         	movff	printf@f+1,tblptrh
  2079  00F532                     	if	0	;tblptru may be non-zero
  2080  00F532                     	endif
  2081  00F532                     	if	0	;tblptru may be non-zero
  2082  00F532                     	endif
  2083  00F532  0008               	tblrd		*
  2084  00F534  50F5               	movf	tablat,w,c
  2085  00F536  260F               	addwf	?___wmul,f,c
  2086  00F538  0E00               	movlw	0
  2087  00F53A  2210               	addwfc	?___wmul+1,f,c
  2088  00F53C  0ED0               	movlw	208
  2089  00F53E  240F               	addwf	?___wmul,w,c
  2090  00F540  6E6B               	movwf	printf@prec,c
  2091  00F542  0EFF               	movlw	255
  2092  00F544  2010               	addwfc	?___wmul+1,w,c
  2093  00F546  6E6C               	movwf	printf@prec+1,c
  2094  00F548  4A40               	infsnz	printf@f,f,c
  2095  00F54A  2A41               	incf	printf@f+1,f,c
  2096  00F54C                     l3918:
  2097  00F54C  C040  FFF6         	movff	printf@f,tblptrl
  2098  00F550  C041  FFF7         	movff	printf@f+1,tblptrh
  2099  00F554                     	if	0	;tblptru may be non-zero
  2100  00F554                     	endif
  2101  00F554                     	if	0	;tblptru may be non-zero
  2102  00F554                     	endif
  2103  00F554  0008               	tblrd		*
  2104  00F556  50F5               	movf	tablat,w,c
  2105  00F558  EC95  F06A         	call	_isdigit
  2106  00F55C  A0D8               	btfss	status,0,c
  2107  00F55E  D045               	goto	l3954
  2108  00F560  D7DA               	goto	l3914
  2109  00F562                     l3920:
  2110                           
  2111                           ;doprnt.c: 626: prec = 0;
  2112  00F562  0E00               	movlw	0
  2113  00F564  6E6C               	movwf	printf@prec+1,c
  2114  00F566  0E00               	movlw	0
  2115  00F568  6E6B               	movwf	printf@prec,c
  2116                           
  2117                           ;doprnt.c: 628: flag |= 0x1000;
  2118  00F56A  885F               	bsf	printf@flag+1,4,c
  2119                           
  2120                           ;doprnt.c: 635: switch(c = *f++) {
  2121                           
  2122                           ;doprnt.c: 630: }
  2123                           ;doprnt.c: 633: loop:
  2124  00F56C  D03E               	goto	l3954
  2125  00F56E                     l3924:
  2126                           
  2127                           ;doprnt.c: 643: flag |= 0x10;
  2128  00F56E  885E               	bsf	printf@flag,4,c
  2129                           
  2130                           ;doprnt.c: 644: goto loop;
  2131  00F570  D03C               	goto	l3954
  2132  00F572                     l3926:
  2133                           
  2134                           ;doprnt.c: 663: flag |= 0x400;
  2135  00F572  845F               	bsf	printf@flag+1,2,c
  2136                           
  2137                           ;doprnt.c: 698: case 'i':
  2138                           ;doprnt.c: 699: break;
  2139                           
  2140                           ;doprnt.c: 697: case 'd':
  2141                           
  2142                           ;doprnt.c: 664: break;
  2143  00F574  D05D               	goto	l3956
  2144  00F576                     l3928:
  2145                           
  2146                           ;doprnt.c: 721: flag |= 0x80;
  2147  00F576  8E5E               	bsf	printf@flag,7,c
  2148                           
  2149                           ;doprnt.c: 723: break;
  2150  00F578  D05B               	goto	l3956
  2151  00F57A                     l3930:
  2152                           
  2153                           ;doprnt.c: 753: if(prec && prec < len)
  2154  00F57A  506B               	movf	printf@prec,w,c
  2155  00F57C  106C               	iorwf	printf@prec+1,w,c
  2156  00F57E  B4D8               	btfsc	status,2,c
  2157  00F580  D014               	goto	l3940
  2158  00F582  5058               	movf	printf@len,w,c
  2159  00F584  5C6B               	subwf	printf@prec,w,c
  2160  00F586  5059               	movf	printf@len+1,w,c
  2161  00F588  586C               	subwfb	printf@prec+1,w,c
  2162  00F58A  B0D8               	btfsc	status,0,c
  2163  00F58C  D00E               	goto	l3940
  2164                           
  2165                           ;doprnt.c: 754: len = prec;
  2166  00F58E  C06B  F058         	movff	printf@prec,printf@len
  2167  00F592  C06C  F059         	movff	printf@prec+1,printf@len+1
  2168                           
  2169                           ;doprnt.c: 767: while(len--)
  2170  00F596  D009               	goto	l3940
  2171  00F598                     l3936:
  2172                           
  2173                           ;doprnt.c: 768: (putch(*cp++) );
  2174  00F598  C055  FFD9         	movff	printf@cp,fsr2l
  2175  00F59C  C056  FFDA         	movff	printf@cp+1,fsr2h
  2176  00F5A0  50DF               	movf	indf2,w,c
  2177  00F5A2  EC7E  F06A         	call	_putch
  2178  00F5A6  4A55               	infsnz	printf@cp,f,c
  2179  00F5A8  2A56               	incf	printf@cp+1,f,c
  2180  00F5AA                     l3940:
  2181  00F5AA  0658               	decf	printf@len,f,c
  2182  00F5AC  A0D8               	btfss	status,0,c
  2183  00F5AE  0659               	decf	printf@len+1,f,c
  2184  00F5B0  2858               	incf	printf@len,w,c
  2185  00F5B2  E1F2               	bnz	l3936
  2186  00F5B4  2859               	incf	printf@len+1,w,c
  2187  00F5B6  B4D8               	btfsc	status,2,c
  2188  00F5B8  EF1B  F07F         	goto	l4180
  2189  00F5BC  D7ED               	goto	l3936
  2190  00F5BE                     l3942:
  2191                           
  2192                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2193  00F5BE  C05A  FFD9         	movff	printf@ap,fsr2l
  2194  00F5C2  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2195  00F5C6  50DF               	movf	indf2,w,c
  2196  00F5C8  6E6D               	movwf	printf@c,c
  2197  00F5CA  0E02               	movlw	2
  2198  00F5CC  265A               	addwf	printf@ap,f,c
  2199  00F5CE  0E00               	movlw	0
  2200  00F5D0  225B               	addwfc	printf@ap+1,f,c
  2201  00F5D2                     l3946:
  2202                           
  2203                           ;doprnt.c: 805: cp = (char *)&c;
  2204  00F5D2  0E6D               	movlw	low printf@c
  2205  00F5D4  6E55               	movwf	printf@cp,c
  2206  00F5D6  0E00               	movlw	high printf@c
  2207  00F5D8  6E56               	movwf	printf@cp+1,c
  2208                           
  2209                           ;doprnt.c: 806: len = 1;
  2210  00F5DA  0E00               	movlw	0
  2211  00F5DC  6E59               	movwf	printf@len+1,c
  2212  00F5DE  0E01               	movlw	1
  2213  00F5E0  6E58               	movwf	printf@len,c
  2214                           
  2215                           ;doprnt.c: 807: goto dostring;
  2216  00F5E2  D7CB               	goto	l3930
  2217  00F5E4                     l3950:
  2218                           
  2219                           ;doprnt.c: 818: flag |= 0xC0;
  2220  00F5E4  0EC0               	movlw	192
  2221  00F5E6  125E               	iorwf	printf@flag,f,c
  2222                           
  2223                           ;doprnt.c: 822: }
  2224                           
  2225                           ;doprnt.c: 819: break;
  2226  00F5E8  D023               	goto	l3956
  2227  00F5EA                     l3954:
  2228  00F5EA  C040  FFF6         	movff	printf@f,tblptrl
  2229  00F5EE  C041  FFF7         	movff	printf@f+1,tblptrh
  2230  00F5F2  4A40               	infsnz	printf@f,f,c
  2231  00F5F4  2A41               	incf	printf@f+1,f,c
  2232  00F5F6                     	if	0	;tblptru may be non-zero
  2233  00F5F6                     	endif
  2234  00F5F6                     	if	0	;tblptru may be non-zero
  2235  00F5F6                     	endif
  2236  00F5F6  0008               	tblrd		*
  2237  00F5F8  CFF5 F06D          	movff	tablat,printf@c
  2238  00F5FC  506D               	movf	printf@c,w,c
  2239                           
  2240                           ; Switch size 1, requested type "space"
  2241                           ; Number of cases is 8, Range of values is 0 to 120
  2242                           ; switch strategies available:
  2243                           ; Name         Instructions Cycles
  2244                           ; simple_byte           25    13 (average)
  2245                           ;	Chosen strategy is simple_byte
  2246  00F5FE  0A00               	xorlw	0	; case 0
  2247  00F600  B4D8               	btfsc	status,2,c
  2248  00F602  0012               	return	
  2249  00F604  0A63               	xorlw	99	; case 99
  2250  00F606  B4D8               	btfsc	status,2,c
  2251  00F608  D7DA               	goto	l3942
  2252  00F60A  0A07               	xorlw	7	; case 100
  2253  00F60C  B4D8               	btfsc	status,2,c
  2254  00F60E  D010               	goto	l3956
  2255  00F610  0A02               	xorlw	2	; case 102
  2256  00F612  B4D8               	btfsc	status,2,c
  2257  00F614  D7AE               	goto	l3926
  2258  00F616  0A0F               	xorlw	15	; case 105
  2259  00F618  B4D8               	btfsc	status,2,c
  2260  00F61A  D00A               	goto	l3956
  2261  00F61C  0A05               	xorlw	5	; case 108
  2262  00F61E  B4D8               	btfsc	status,2,c
  2263  00F620  D7A6               	goto	l3924
  2264  00F622  0A19               	xorlw	25	; case 117
  2265  00F624  B4D8               	btfsc	status,2,c
  2266  00F626  D7DE               	goto	l3950
  2267  00F628  0A0D               	xorlw	13	; case 120
  2268  00F62A  B4D8               	btfsc	status,2,c
  2269  00F62C  D7A4               	goto	l3928
  2270  00F62E  D7D1               	goto	l3946
  2271  00F630                     l3956:
  2272                           
  2273                           ;doprnt.c: 825: if(flag & (0x700)) {
  2274  00F630  0E07               	movlw	7
  2275  00F632  145F               	andwf	printf@flag+1,w,c
  2276  00F634  B4D8               	btfsc	status,2,c
  2277  00F636  D29E               	goto	l4090
  2278                           
  2279                           ;doprnt.c: 827: if(flag & 0x1000)
  2280  00F638  A85F               	btfss	printf@flag+1,4,c
  2281  00F63A  D004               	goto	l3962
  2282                           
  2283                           ;doprnt.c: 829: prec = 6;
  2284  00F63C  0E00               	movlw	0
  2285  00F63E  6E6C               	movwf	printf@prec+1,c
  2286  00F640  0E06               	movlw	6
  2287  00F642  6E6B               	movwf	printf@prec,c
  2288  00F644                     l3962:
  2289                           
  2290                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2291  00F644  C05A  FFD9         	movff	printf@ap,fsr2l
  2292  00F648  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2293  00F64C  CFDE F068          	movff	postinc2,printf@fval
  2294  00F650  CFDE F069          	movff	postinc2,printf@fval+1
  2295  00F654  CFDD F06A          	movff	postdec2,printf@fval+2
  2296  00F658  0E03               	movlw	3
  2297  00F65A  265A               	addwf	printf@ap,f,c
  2298  00F65C  0E00               	movlw	0
  2299  00F65E  225B               	addwfc	printf@ap+1,f,c
  2300                           
  2301                           ;doprnt.c: 831: if(fval < 0.0) {
  2302  00F660  AE6A               	btfss	printf@fval+2,7,c
  2303  00F662  D010               	goto	l3972
  2304                           
  2305                           ;doprnt.c: 832: fval = -fval;
  2306  00F664  C068  F001         	movff	printf@fval,___ftneg@f1
  2307  00F668  C069  F002         	movff	printf@fval+1,___ftneg@f1+1
  2308  00F66C  C06A  F003         	movff	printf@fval+2,___ftneg@f1+2
  2309  00F670  ECC8  F06A         	call	___ftneg	;wreg free
  2310  00F674  C001  F068         	movff	?___ftneg,printf@fval
  2311  00F678  C002  F069         	movff	?___ftneg+1,printf@fval+1
  2312  00F67C  C003  F06A         	movff	?___ftneg+2,printf@fval+2
  2313                           
  2314                           ;doprnt.c: 833: flag |= 0x03;
  2315  00F680  0E03               	movlw	3
  2316  00F682  125E               	iorwf	printf@flag,f,c
  2317  00F684                     l3972:
  2318                           
  2319                           ;doprnt.c: 834: }
  2320                           ;doprnt.c: 835: exp = 0;
  2321  00F684  0E00               	movlw	0
  2322  00F686  6E5D               	movwf	printf@exp+1,c
  2323  00F688  0E00               	movlw	0
  2324  00F68A  6E5C               	movwf	printf@exp,c
  2325                           
  2326                           ;doprnt.c: 836: if( fval!=0) {
  2327  00F68C  5068               	movf	printf@fval,w,c
  2328  00F68E  1069               	iorwf	printf@fval+1,w,c
  2329  00F690  106A               	iorwf	printf@fval+2,w,c
  2330  00F692  B4D8               	btfsc	status,2,c
  2331  00F694  D083               	goto	l4000
  2332                           
  2333                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2334  00F696  0E82               	movlw	130
  2335  00F698  6E4C               	movwf	??_printf& (0+255),c
  2336  00F69A  0EFF               	movlw	255
  2337  00F69C  6E4D               	movwf	(??_printf+1)& (0+255),c
  2338  00F69E  C068  F04E         	movff	printf@fval,??_printf+2
  2339  00F6A2  C069  F04F         	movff	printf@fval+1,??_printf+3
  2340  00F6A6  C06A  F050         	movff	printf@fval+2,??_printf+4
  2341  00F6AA  C06B  F051         	movff	printf@fval+3,??_printf+5
  2342  00F6AE  0E10               	movlw	16
  2343  00F6B0  D005               	goto	u3880
  2344  00F6B2                     u3885:
  2345  00F6B2  90D8               	bcf	status,0,c
  2346  00F6B4  3251               	rrcf	??_printf+5,f,c
  2347  00F6B6  3250               	rrcf	??_printf+4,f,c
  2348  00F6B8  324F               	rrcf	??_printf+3,f,c
  2349  00F6BA  324E               	rrcf	??_printf+2,f,c
  2350  00F6BC                     u3880:
  2351  00F6BC  2EE8               	decfsz	wreg,f,c
  2352  00F6BE  D7F9               	goto	u3885
  2353  00F6C0  504E               	movf	??_printf+2,w,c
  2354  00F6C2  244C               	addwf	??_printf,w,c
  2355  00F6C4  6E5C               	movwf	printf@exp,c
  2356  00F6C6  0E00               	movlw	0
  2357  00F6C8  204D               	addwfc	??_printf+1,w,c
  2358  00F6CA  6E5D               	movwf	printf@exp+1,c
  2359                           
  2360                           ;doprnt.c: 838: exp--;
  2361  00F6CC  065C               	decf	printf@exp,f,c
  2362  00F6CE  A0D8               	btfss	status,0,c
  2363  00F6D0  065D               	decf	printf@exp+1,f,c
  2364                           
  2365                           ;doprnt.c: 839: exp *= 3;
  2366  00F6D2  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  2367  00F6D6  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2368  00F6DA  0E00               	movlw	0
  2369  00F6DC  6E12               	movwf	___wmul@multiplicand+1,c
  2370  00F6DE  0E03               	movlw	3
  2371  00F6E0  6E11               	movwf	___wmul@multiplicand,c
  2372  00F6E2  ECDA  F06A         	call	___wmul	;wreg free
  2373  00F6E6  C00F  F05C         	movff	?___wmul,printf@exp
  2374  00F6EA  C010  F05D         	movff	?___wmul+1,printf@exp+1
  2375                           
  2376                           ;doprnt.c: 840: exp /= 10;
  2377  00F6EE  C05C  F007         	movff	printf@exp,___awdiv@dividend
  2378  00F6F2  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2379  00F6F6  0E00               	movlw	0
  2380  00F6F8  6E0A               	movwf	___awdiv@divisor+1,c
  2381  00F6FA  0E0A               	movlw	10
  2382  00F6FC  6E09               	movwf	___awdiv@divisor,c
  2383  00F6FE  EC85  F06C         	call	___awdiv	;wreg free
  2384  00F702  C007  F05C         	movff	?___awdiv,printf@exp
  2385  00F706  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  2386                           
  2387                           ;doprnt.c: 841: if(exp < 0)
  2388  00F70A  AE5D               	btfss	printf@exp+1,7,c
  2389  00F70C  D003               	goto	l3988
  2390                           
  2391                           ;doprnt.c: 842: exp--;
  2392  00F70E  065C               	decf	printf@exp,f,c
  2393  00F710  A0D8               	btfss	status,0,c
  2394  00F712  065D               	decf	printf@exp+1,f,c
  2395  00F714                     l3988:
  2396                           
  2397                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2398  00F714  505C               	movf	printf@exp,w,c
  2399  00F716  0800               	sublw	0
  2400  00F718  EC3B  F072         	call	_scale
  2401  00F71C  C024  F060         	movff	?_scale,printf@tmpval
  2402  00F720  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2403  00F724  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2404                           
  2405                           ;doprnt.c: 847: tmpval.integ *= fval;
  2406  00F728  C060  F015         	movff	printf@tmpval,___ftmul@f1
  2407  00F72C  C061  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2408  00F730  C062  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2409  00F734  C068  F018         	movff	printf@fval,___ftmul@f2
  2410  00F738  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2411  00F73C  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2412  00F740  EC21  F06E         	call	___ftmul	;wreg free
  2413  00F744  C015  F060         	movff	?___ftmul,printf@tmpval
  2414  00F748  C016  F061         	movff	?___ftmul+1,printf@tmpval+1
  2415  00F74C  C017  F062         	movff	?___ftmul+2,printf@tmpval+2
  2416                           
  2417                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2418  00F750  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2419  00F754  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2420  00F758  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2421  00F75C  0E00               	movlw	0
  2422  00F75E  6E04               	movwf	___ftge@ff2,c
  2423  00F760  0E80               	movlw	128
  2424  00F762  6E05               	movwf	___ftge@ff2+1,c
  2425  00F764  0E3F               	movlw	63
  2426  00F766  6E06               	movwf	___ftge@ff2+2,c
  2427  00F768  EC0F  F06D         	call	___ftge	;wreg free
  2428  00F76C  B0D8               	btfsc	status,0,c
  2429  00F76E  D004               	goto	l3996
  2430                           
  2431                           ;doprnt.c: 849: exp--;
  2432  00F770  065C               	decf	printf@exp,f,c
  2433  00F772  A0D8               	btfss	status,0,c
  2434  00F774  065D               	decf	printf@exp+1,f,c
  2435  00F776  D012               	goto	l4000
  2436  00F778                     l3996:
  2437                           
  2438                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2439  00F778  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2440  00F77C  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2441  00F780  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2442  00F784  0E00               	movlw	0
  2443  00F786  6E04               	movwf	___ftge@ff2,c
  2444  00F788  0E20               	movlw	32
  2445  00F78A  6E05               	movwf	___ftge@ff2+1,c
  2446  00F78C  0E41               	movlw	65
  2447  00F78E  6E06               	movwf	___ftge@ff2+2,c
  2448  00F790  EC0F  F06D         	call	___ftge	;wreg free
  2449  00F794  A0D8               	btfss	status,0,c
  2450  00F796  D002               	goto	l4000
  2451                           
  2452                           ;doprnt.c: 851: exp++;
  2453  00F798  4A5C               	infsnz	printf@exp,f,c
  2454  00F79A  2A5D               	incf	printf@exp+1,f,c
  2455  00F79C                     l4000:
  2456                           
  2457                           ;doprnt.c: 852: }
  2458                           ;doprnt.c: 1112: if(prec <= 12)
  2459  00F79C  BE6C               	btfsc	printf@prec+1,7,c
  2460  00F79E  D006               	goto	l4002
  2461  00F7A0  506C               	movf	printf@prec+1,w,c
  2462  00F7A2  E11B               	bnz	l4004
  2463  00F7A4  0E0D               	movlw	13
  2464  00F7A6  5C6B               	subwf	printf@prec,w,c
  2465  00F7A8  B0D8               	btfsc	status,0,c
  2466  00F7AA  D017               	goto	l4004
  2467  00F7AC                     l4002:
  2468                           
  2469                           ;doprnt.c: 1113: fval += fround(prec);
  2470  00F7AC  C068  F02E         	movff	printf@fval,___ftadd@f1
  2471  00F7B0  C069  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2472  00F7B4  C06A  F030         	movff	printf@fval+2,___ftadd@f1+2
  2473  00F7B8  506B               	movf	printf@prec,w,c
  2474  00F7BA  EC18  F071         	call	_fround
  2475  00F7BE  C024  F031         	movff	?_fround,___ftadd@f2
  2476  00F7C2  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2477  00F7C6  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2478  00F7CA  EC42  F070         	call	___ftadd	;wreg free
  2479  00F7CE  C02E  F068         	movff	?___ftadd,printf@fval
  2480  00F7D2  C02F  F069         	movff	?___ftadd+1,printf@fval+1
  2481  00F7D6  C030  F06A         	movff	?___ftadd+2,printf@fval+2
  2482  00F7DA                     l4004:
  2483                           
  2484                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2485  00F7DA  BE5D               	btfsc	printf@exp+1,7,c
  2486  00F7DC  D006               	goto	l4006
  2487  00F7DE  505D               	movf	printf@exp+1,w,c
  2488  00F7E0  E11E               	bnz	l4012
  2489  00F7E2  0E0A               	movlw	10
  2490  00F7E4  5C5C               	subwf	printf@exp,w,c
  2491  00F7E6  B0D8               	btfsc	status,0,c
  2492  00F7E8  D01A               	goto	l4012
  2493  00F7EA                     l4006:
  2494  00F7EA  5068               	movf	printf@fval,w,c
  2495  00F7EC  1069               	iorwf	printf@fval+1,w,c
  2496  00F7EE  106A               	iorwf	printf@fval+2,w,c
  2497  00F7F0  B4D8               	btfsc	status,2,c
  2498  00F7F2  D051               	goto	l4026
  2499  00F7F4  C068  F02B         	movff	printf@fval,___fttol@f1
  2500  00F7F8  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2501  00F7FC  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2502  00F800  EC9B  F06E         	call	___fttol	;wreg free
  2503  00F804  502B               	movf	?___fttol,w,c
  2504  00F806  102C               	iorwf	?___fttol+1,w,c
  2505  00F808  102D               	iorwf	?___fttol+2,w,c
  2506  00F80A  102E               	iorwf	?___fttol+3,w,c
  2507  00F80C  B4D8               	btfsc	status,2,c
  2508  00F80E  BE5D               	btfsc	printf@exp+1,7,c
  2509  00F810  D042               	goto	l4026
  2510  00F812  505D               	movf	printf@exp+1,w,c
  2511  00F814  E104               	bnz	l4012
  2512  00F816  0E02               	movlw	2
  2513  00F818  5C5C               	subwf	printf@exp,w,c
  2514  00F81A  A0D8               	btfss	status,0,c
  2515  00F81C  D03C               	goto	l4026
  2516  00F81E                     l4012:
  2517                           
  2518                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2519  00F81E  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2520  00F822  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2521  00F826  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2522  00F82A  0E70               	movlw	112
  2523  00F82C  6E04               	movwf	___ftge@ff2,c
  2524  00F82E  0E89               	movlw	137
  2525  00F830  6E05               	movwf	___ftge@ff2+1,c
  2526  00F832  0E40               	movlw	64
  2527  00F834  6E06               	movwf	___ftge@ff2+2,c
  2528  00F836  EC0F  F06D         	call	___ftge	;wreg free
  2529  00F83A  B0D8               	btfsc	status,0,c
  2530  00F83C  D002               	goto	l4016
  2531                           
  2532                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2533  00F83E  0EF7               	movlw	247
  2534  00F840  D001               	goto	L1
  2535  00F842                     l4016:
  2536                           
  2537                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2538  00F842  0EF8               	movlw	248
  2539  00F844                     L1:
  2540  00F844  265C               	addwf	printf@exp,f,c
  2541  00F846  0EFF               	movlw	255
  2542  00F848  225D               	addwfc	printf@exp+1,f,c
  2543                           
  2544                           ;doprnt.c: 1124: }
  2545                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2546  00F84A  505C               	movf	printf@exp,w,c
  2547  00F84C  EC3B  F072         	call	_scale
  2548  00F850  C024  F060         	movff	?_scale,printf@tmpval
  2549  00F854  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2550  00F858  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2551                           
  2552                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2553  00F85C  C068  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2554  00F860  C069  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2555  00F864  C06A  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2556  00F868  C060  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2557  00F86C  C061  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2558  00F870  C062  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2559  00F874  ECA9  F06F         	call	__tdiv_to_l_	;wreg free
  2560  00F878  C001  F064         	movff	?__tdiv_to_l_,printf@val
  2561  00F87C  C002  F065         	movff	?__tdiv_to_l_+1,printf@val+1
  2562  00F880  C003  F066         	movff	?__tdiv_to_l_+2,printf@val+2
  2563  00F884  C004  F067         	movff	?__tdiv_to_l_+3,printf@val+3
  2564                           
  2565                           ;doprnt.c: 1129: fval = 0.0;
  2566  00F888  0E00               	movlw	0
  2567  00F88A  6E68               	movwf	printf@fval,c
  2568  00F88C  0E00               	movlw	0
  2569  00F88E  6E69               	movwf	printf@fval+1,c
  2570  00F890  0E00               	movlw	0
  2571  00F892  6E6A               	movwf	printf@fval+2,c
  2572                           
  2573                           ;doprnt.c: 1130: } else {
  2574  00F894  D032               	goto	l4030
  2575  00F896                     l4026:
  2576                           
  2577                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2578  00F896  C068  F02B         	movff	printf@fval,___fttol@f1
  2579  00F89A  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2580  00F89E  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2581  00F8A2  EC9B  F06E         	call	___fttol	;wreg free
  2582  00F8A6  C02B  F064         	movff	?___fttol,printf@val
  2583  00F8AA  C02C  F065         	movff	?___fttol+1,printf@val+1
  2584  00F8AE  C02D  F066         	movff	?___fttol+2,printf@val+2
  2585  00F8B2  C02E  F067         	movff	?___fttol+3,printf@val+3
  2586                           
  2587                           ;doprnt.c: 1132: fval -= (double)val;
  2588  00F8B6  C068  F03A         	movff	printf@fval,___ftsub@f1
  2589  00F8BA  C069  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2590  00F8BE  C06A  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2591  00F8C2  C064  F009         	movff	printf@val,___lltoft@c
  2592  00F8C6  C065  F00A         	movff	printf@val+1,___lltoft@c+1
  2593  00F8CA  C066  F00B         	movff	printf@val+2,___lltoft@c+2
  2594  00F8CE  C067  F00C         	movff	printf@val+3,___lltoft@c+3
  2595  00F8D2  EC6C  F06B         	call	___lltoft	;wreg free
  2596  00F8D6  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2597  00F8DA  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2598  00F8DE  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2599  00F8E2  EC26  F06B         	call	___ftsub	;wreg free
  2600  00F8E6  C03A  F068         	movff	?___ftsub,printf@fval
  2601  00F8EA  C03B  F069         	movff	?___ftsub+1,printf@fval+1
  2602  00F8EE  C03C  F06A         	movff	?___ftsub+2,printf@fval+2
  2603                           
  2604                           ;doprnt.c: 1133: exp = 0;
  2605  00F8F2  0E00               	movlw	0
  2606  00F8F4  6E5D               	movwf	printf@exp+1,c
  2607  00F8F6  0E00               	movlw	0
  2608  00F8F8  6E5C               	movwf	printf@exp,c
  2609  00F8FA                     l4030:
  2610                           
  2611                           ;doprnt.c: 1134: }
  2612                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2613  00F8FA  0E01               	movlw	1
  2614  00F8FC  6E6D               	movwf	printf@c,c
  2615  00F8FE                     l4032:
  2616  00F8FE  0E0A               	movlw	10
  2617  00F900  186D               	xorwf	printf@c,w,c
  2618  00F902  B4D8               	btfsc	status,2,c
  2619  00F904  D018               	goto	l4044
  2620                           
  2621                           ;doprnt.c: 1137: if(val < dpowers[c])
  2622  00F906  506D               	movf	printf@c,w,c
  2623  00F908  0D04               	mullw	4
  2624  00F90A  0E53               	movlw	low _dpowers
  2625  00F90C  24F3               	addwf	prodl,w,c
  2626  00F90E  6EF6               	movwf	tblptrl,c
  2627  00F910  0EFE               	movlw	high _dpowers
  2628  00F912  20F4               	addwfc	prodh,w,c
  2629  00F914  6EF7               	movwf	tblptrh,c
  2630  00F916                     	if	0	;There are less than 3 active tblptr bytes
  2631  00F916                     	endif
  2632  00F916  0009               	tblrd		*+
  2633  00F918  50F5               	movf	tablat,w,c
  2634  00F91A  5C64               	subwf	printf@val,w,c
  2635  00F91C  0009               	tblrd		*+
  2636  00F91E  50F5               	movf	tablat,w,c
  2637  00F920  5865               	subwfb	printf@val+1,w,c
  2638  00F922  0009               	tblrd		*+
  2639  00F924  50F5               	movf	tablat,w,c
  2640  00F926  5866               	subwfb	printf@val+2,w,c
  2641  00F928  0009               	tblrd		*+
  2642  00F92A  50F5               	movf	tablat,w,c
  2643  00F92C  5867               	subwfb	printf@val+3,w,c
  2644  00F92E  A0D8               	btfss	status,0,c
  2645  00F930  D002               	goto	l4044
  2646                           
  2647                           ;doprnt.c: 1138: break;
  2648  00F932  2A6D               	incf	printf@c,f,c
  2649  00F934  D7E4               	goto	l4032
  2650  00F936                     l4044:
  2651                           
  2652                           ;doprnt.c: 1175: {
  2653                           ;doprnt.c: 1188: if(flag & 0x03)
  2654  00F936  0E03               	movlw	3
  2655  00F938  145E               	andwf	printf@flag,w,c
  2656  00F93A  6E4C               	movwf	??_printf& (0+255),c
  2657  00F93C  0E00               	movlw	0
  2658  00F93E  145F               	andwf	printf@flag+1,w,c
  2659  00F940  6E4D               	movwf	(??_printf+1)& (0+255),c
  2660  00F942  504C               	movf	??_printf,w,c
  2661  00F944  104D               	iorwf	??_printf+1,w,c
  2662  00F946  B4D8               	btfsc	status,2,c
  2663  00F948  D048               	goto	l4054
  2664                           
  2665                           ;doprnt.c: 1190: (putch('-') );
  2666  00F94A  0E2D               	movlw	45
  2667  00F94C  EC7E  F06A         	call	_putch
  2668                           
  2669                           ;doprnt.c: 1195: }
  2670                           ;doprnt.c: 1196: while(c--) {
  2671  00F950  D044               	goto	l4054
  2672  00F952                     l4048:
  2673                           
  2674                           ;doprnt.c: 1200: {
  2675                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2676  00F952  C064  F001         	movff	printf@val,___lldiv@dividend
  2677  00F956  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2678  00F95A  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2679  00F95E  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2680  00F962  506D               	movf	printf@c,w,c
  2681  00F964  0D04               	mullw	4
  2682  00F966  0E53               	movlw	low _dpowers
  2683  00F968  24F3               	addwf	prodl,w,c
  2684  00F96A  6EF6               	movwf	tblptrl,c
  2685  00F96C  0EFE               	movlw	high _dpowers
  2686  00F96E  20F4               	addwfc	prodh,w,c
  2687  00F970  6EF7               	movwf	tblptrh,c
  2688  00F972                     	if	0	;There are less than 3 active tblptr bytes
  2689  00F972                     	endif
  2690  00F972  0009               	tblrd		*+
  2691  00F974  CFF5 F005          	movff	tablat,___lldiv@divisor
  2692  00F978  0009               	tblrd		*+
  2693  00F97A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2694  00F97E  0009               	tblrd		*+
  2695  00F980  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2696  00F984  000A               	tblrd		*-
  2697  00F986  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2698  00F98A  EC44  F06C         	call	___lldiv	;wreg free
  2699  00F98E  C001  F060         	movff	?___lldiv,printf@tmpval
  2700  00F992  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2701  00F996  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2702  00F99A  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2703                           
  2704                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2705  00F99E  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2706  00F9A2  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2707  00F9A6  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2708  00F9AA  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2709  00F9AE  0E0A               	movlw	10
  2710  00F9B0  6E12               	movwf	___llmod@divisor,c
  2711  00F9B2  0E00               	movlw	0
  2712  00F9B4  6E13               	movwf	___llmod@divisor+1,c
  2713  00F9B6  0E00               	movlw	0
  2714  00F9B8  6E14               	movwf	___llmod@divisor+2,c
  2715  00F9BA  0E00               	movlw	0
  2716  00F9BC  6E15               	movwf	___llmod@divisor+3,c
  2717  00F9BE  EC9A  F06B         	call	___llmod	;wreg free
  2718  00F9C2  C00E  F060         	movff	?___llmod,printf@tmpval
  2719  00F9C6  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2720  00F9CA  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2721  00F9CE  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2722                           
  2723                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2724  00F9D2  5060               	movf	printf@tmpval,w,c
  2725  00F9D4  0F30               	addlw	48
  2726  00F9D6  EC7E  F06A         	call	_putch
  2727  00F9DA                     l4054:
  2728  00F9DA  066D               	decf	printf@c,f,c
  2729  00F9DC  286D               	incf	printf@c,w,c
  2730  00F9DE  B4D8               	btfsc	status,2,c
  2731  00F9E0  D007               	goto	l4060
  2732  00F9E2  D7B7               	goto	l4048
  2733  00F9E4                     l4056:
  2734                           
  2735                           ;doprnt.c: 1208: (putch('0') );
  2736  00F9E4  0E30               	movlw	48
  2737  00F9E6  EC7E  F06A         	call	_putch
  2738                           
  2739                           ;doprnt.c: 1209: exp--;
  2740  00F9EA  065C               	decf	printf@exp,f,c
  2741  00F9EC  A0D8               	btfss	status,0,c
  2742  00F9EE  065D               	decf	printf@exp+1,f,c
  2743  00F9F0                     l4060:
  2744  00F9F0  BE5D               	btfsc	printf@exp+1,7,c
  2745  00F9F2  D005               	goto	l4062
  2746  00F9F4  505D               	movf	printf@exp+1,w,c
  2747  00F9F6  E1F6               	bnz	l4056
  2748  00F9F8  045C               	decf	printf@exp,w,c
  2749  00F9FA  B0D8               	btfsc	status,0,c
  2750  00F9FC  D7F3               	goto	l4056
  2751  00F9FE                     l4062:
  2752                           
  2753                           ;doprnt.c: 1210: }
  2754                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2755  00F9FE  BE6C               	btfsc	printf@prec+1,7,c
  2756  00FA00  D009               	goto	l564
  2757  00FA02  506C               	movf	printf@prec+1,w,c
  2758  00FA04  E104               	bnz	u4040
  2759  00FA06  0E09               	movlw	9
  2760  00FA08  5C6B               	subwf	printf@prec,w,c
  2761  00FA0A  A0D8               	btfss	status,0,c
  2762  00FA0C  D003               	goto	l564
  2763  00FA0E                     u4040:
  2764                           
  2765                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2766  00FA0E  0E08               	movlw	8
  2767  00FA10  6E6D               	movwf	printf@c,c
  2768  00FA12  D002               	goto	l4066
  2769  00FA14                     l564:
  2770                           
  2771                           ;doprnt.c: 1213: else
  2772                           ;doprnt.c: 1214: c = prec;
  2773  00FA14  C06B  F06D         	movff	printf@prec,printf@c
  2774  00FA18                     l4066:
  2775                           
  2776                           ;doprnt.c: 1215: prec -= c;
  2777  00FA18  506D               	movf	printf@c,w,c
  2778  00FA1A  5E6B               	subwf	printf@prec,f,c
  2779  00FA1C  0E00               	movlw	0
  2780  00FA1E  BE6D               	btfsc	printf@c,7,c
  2781  00FA20  0EFF               	movlw	255
  2782  00FA22  5A6C               	subwfb	printf@prec+1,f,c
  2783                           
  2784                           ;doprnt.c: 1219: if(c)
  2785  00FA24  506D               	movf	printf@c,w,c
  2786  00FA26  B4D8               	btfsc	status,2,c
  2787  00FA28  D003               	goto	l4072
  2788                           
  2789                           ;doprnt.c: 1221: (putch('.') );
  2790  00FA2A  0E2E               	movlw	46
  2791  00FA2C  EC7E  F06A         	call	_putch
  2792  00FA30                     l4072:
  2793                           
  2794                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2795  00FA30  506D               	movf	printf@c,w,c
  2796  00FA32  EC3B  F072         	call	_scale
  2797  00FA36  C024  F052         	movff	?_scale,_printf$1466
  2798  00FA3A  C025  F053         	movff	?_scale+1,_printf$1466+1
  2799  00FA3E  C026  F054         	movff	?_scale+2,_printf$1466+2
  2800                           
  2801                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2802  00FA42  C068  F018         	movff	printf@fval,___ftmul@f2
  2803  00FA46  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2804  00FA4A  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2805  00FA4E  C052  F015         	movff	_printf$1466,___ftmul@f1
  2806  00FA52  C053  F016         	movff	_printf$1466+1,___ftmul@f1+1
  2807  00FA56  C054  F017         	movff	_printf$1466+2,___ftmul@f1+2
  2808  00FA5A  EC21  F06E         	call	___ftmul	;wreg free
  2809  00FA5E  C015  F02B         	movff	?___ftmul,___fttol@f1
  2810  00FA62  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2811  00FA66  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2812  00FA6A  EC9B  F06E         	call	___fttol	;wreg free
  2813  00FA6E  C02B  F064         	movff	?___fttol,printf@val
  2814  00FA72  C02C  F065         	movff	?___fttol+1,printf@val+1
  2815  00FA76  C02D  F066         	movff	?___fttol+2,printf@val+2
  2816  00FA7A  C02E  F067         	movff	?___fttol+3,printf@val+3
  2817                           
  2818                           ;doprnt.c: 1228: while(c--) {
  2819  00FA7E  D06A               	goto	l4082
  2820  00FA80                     l4076:
  2821                           
  2822                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2823  00FA80  C064  F001         	movff	printf@val,___lldiv@dividend
  2824  00FA84  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2825  00FA88  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2826  00FA8C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2827  00FA90  506D               	movf	printf@c,w,c
  2828  00FA92  0D04               	mullw	4
  2829  00FA94  0E53               	movlw	low _dpowers
  2830  00FA96  24F3               	addwf	prodl,w,c
  2831  00FA98  6EF6               	movwf	tblptrl,c
  2832  00FA9A  0EFE               	movlw	high _dpowers
  2833  00FA9C  20F4               	addwfc	prodh,w,c
  2834  00FA9E  6EF7               	movwf	tblptrh,c
  2835  00FAA0                     	if	0	;There are less than 3 active tblptr bytes
  2836  00FAA0                     	endif
  2837  00FAA0  0009               	tblrd		*+
  2838  00FAA2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2839  00FAA6  0009               	tblrd		*+
  2840  00FAA8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2841  00FAAC  0009               	tblrd		*+
  2842  00FAAE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2843  00FAB2  000A               	tblrd		*-
  2844  00FAB4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2845  00FAB8  EC44  F06C         	call	___lldiv	;wreg free
  2846  00FABC  C001  F060         	movff	?___lldiv,printf@tmpval
  2847  00FAC0  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2848  00FAC4  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2849  00FAC8  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2850                           
  2851                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2852  00FACC  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2853  00FAD0  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2854  00FAD4  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2855  00FAD8  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2856  00FADC  0E0A               	movlw	10
  2857  00FADE  6E12               	movwf	___llmod@divisor,c
  2858  00FAE0  0E00               	movlw	0
  2859  00FAE2  6E13               	movwf	___llmod@divisor+1,c
  2860  00FAE4  0E00               	movlw	0
  2861  00FAE6  6E14               	movwf	___llmod@divisor+2,c
  2862  00FAE8  0E00               	movlw	0
  2863  00FAEA  6E15               	movwf	___llmod@divisor+3,c
  2864  00FAEC  EC9A  F06B         	call	___llmod	;wreg free
  2865  00FAF0  C00E  F060         	movff	?___llmod,printf@tmpval
  2866  00FAF4  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2867  00FAF8  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2868  00FAFC  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2869                           
  2870                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2871  00FB00  5060               	movf	printf@tmpval,w,c
  2872  00FB02  0F30               	addlw	48
  2873  00FB04  EC7E  F06A         	call	_putch
  2874                           
  2875                           ;doprnt.c: 1232: val %= dpowers[c];
  2876  00FB08  C064  F00E         	movff	printf@val,___llmod@dividend
  2877  00FB0C  C065  F00F         	movff	printf@val+1,___llmod@dividend+1
  2878  00FB10  C066  F010         	movff	printf@val+2,___llmod@dividend+2
  2879  00FB14  C067  F011         	movff	printf@val+3,___llmod@dividend+3
  2880  00FB18  506D               	movf	printf@c,w,c
  2881  00FB1A  0D04               	mullw	4
  2882  00FB1C  0E53               	movlw	low _dpowers
  2883  00FB1E  24F3               	addwf	prodl,w,c
  2884  00FB20  6EF6               	movwf	tblptrl,c
  2885  00FB22  0EFE               	movlw	high _dpowers
  2886  00FB24  20F4               	addwfc	prodh,w,c
  2887  00FB26  6EF7               	movwf	tblptrh,c
  2888  00FB28                     	if	0	;There are less than 3 active tblptr bytes
  2889  00FB28                     	endif
  2890  00FB28  0009               	tblrd		*+
  2891  00FB2A  CFF5 F012          	movff	tablat,___llmod@divisor
  2892  00FB2E  0009               	tblrd		*+
  2893  00FB30  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2894  00FB34  0009               	tblrd		*+
  2895  00FB36  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2896  00FB3A  000A               	tblrd		*-
  2897  00FB3C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2898  00FB40  EC9A  F06B         	call	___llmod	;wreg free
  2899  00FB44  C00E  F064         	movff	?___llmod,printf@val
  2900  00FB48  C00F  F065         	movff	?___llmod+1,printf@val+1
  2901  00FB4C  C010  F066         	movff	?___llmod+2,printf@val+2
  2902  00FB50  C011  F067         	movff	?___llmod+3,printf@val+3
  2903  00FB54                     l4082:
  2904  00FB54  066D               	decf	printf@c,f,c
  2905  00FB56  286D               	incf	printf@c,w,c
  2906  00FB58  B4D8               	btfsc	status,2,c
  2907  00FB5A  D007               	goto	l4088
  2908  00FB5C  D791               	goto	l4076
  2909  00FB5E                     l4084:
  2910                           
  2911                           ;doprnt.c: 1236: (putch('0') );
  2912  00FB5E  0E30               	movlw	48
  2913  00FB60  EC7E  F06A         	call	_putch
  2914                           
  2915                           ;doprnt.c: 1237: prec--;
  2916  00FB64  066B               	decf	printf@prec,f,c
  2917  00FB66  A0D8               	btfss	status,0,c
  2918  00FB68  066C               	decf	printf@prec+1,f,c
  2919  00FB6A                     l4088:
  2920  00FB6A  506B               	movf	printf@prec,w,c
  2921  00FB6C  106C               	iorwf	printf@prec+1,w,c
  2922  00FB6E  B4D8               	btfsc	status,2,c
  2923  00FB70  D162               	goto	l4180
  2924  00FB72  D7F5               	goto	l4084
  2925  00FB74                     l4090:
  2926                           
  2927                           ;doprnt.c: 1246: }
  2928                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2929  00FB74  0EC0               	movlw	192
  2930  00FB76  145E               	andwf	printf@flag,w,c
  2931  00FB78  6E4C               	movwf	??_printf& (0+255),c
  2932  00FB7A  0E00               	movlw	0
  2933  00FB7C  145F               	andwf	printf@flag+1,w,c
  2934  00FB7E  6E4D               	movwf	(??_printf+1)& (0+255),c
  2935  00FB80  504C               	movf	??_printf,w,c
  2936  00FB82  104D               	iorwf	??_printf+1,w,c
  2937  00FB84  A4D8               	btfss	status,2,c
  2938  00FB86  D02E               	goto	l573
  2939                           
  2940                           ;doprnt.c: 1253: {
  2941                           ;doprnt.c: 1255: if(flag & 0x10)
  2942  00FB88  A85E               	btfss	printf@flag,4,c
  2943  00FB8A  D00E               	goto	l4098
  2944                           
  2945                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2946  00FB8C  C05A  FFD9         	movff	printf@ap,fsr2l
  2947  00FB90  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2948  00FB94  CFDE F064          	movff	postinc2,printf@val
  2949  00FB98  CFDE F065          	movff	postinc2,printf@val+1
  2950  00FB9C  CFDE F066          	movff	postinc2,printf@val+2
  2951  00FBA0  CFDE F067          	movff	postinc2,printf@val+3
  2952  00FBA4  0E04               	movlw	4
  2953  00FBA6  D00E               	goto	L2
  2954  00FBA8                     l4098:
  2955                           
  2956                           ;doprnt.c: 1257: else
  2957                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2958  00FBA8  C05A  FFD9         	movff	printf@ap,fsr2l
  2959  00FBAC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2960  00FBB0  CFDE F064          	movff	postinc2,printf@val
  2961  00FBB4  CFDD F065          	movff	postdec2,printf@val+1
  2962  00FBB8  0E00               	movlw	0
  2963  00FBBA  BE65               	btfsc	printf@val+1,7,c
  2964  00FBBC  0EFF               	movlw	-1
  2965  00FBBE  6E66               	movwf	printf@val+2,c
  2966  00FBC0  6E67               	movwf	printf@val+3,c
  2967  00FBC2  0E02               	movlw	2
  2968  00FBC4                     L2:
  2969  00FBC4  265A               	addwf	printf@ap,f,c
  2970  00FBC6  0E00               	movlw	0
  2971  00FBC8  225B               	addwfc	printf@ap+1,f,c
  2972                           
  2973                           ;doprnt.c: 1261: if((long)val < 0) {
  2974  00FBCA  AE67               	btfss	printf@val+3,7,c
  2975  00FBCC  D02D               	goto	l4116
  2976                           
  2977                           ;doprnt.c: 1262: flag |= 0x03;
  2978  00FBCE  0E03               	movlw	3
  2979  00FBD0  125E               	iorwf	printf@flag,f,c
  2980                           
  2981                           ;doprnt.c: 1263: val = -val;
  2982  00FBD2  1E67               	comf	printf@val+3,f,c
  2983  00FBD4  1E66               	comf	printf@val+2,f,c
  2984  00FBD6  1E65               	comf	printf@val+1,f,c
  2985  00FBD8  6C64               	negf	printf@val,c
  2986  00FBDA  0E00               	movlw	0
  2987  00FBDC  2265               	addwfc	printf@val+1,f,c
  2988  00FBDE  2266               	addwfc	printf@val+2,f,c
  2989  00FBE0  2267               	addwfc	printf@val+3,f,c
  2990                           
  2991                           ;doprnt.c: 1264: }
  2992                           ;doprnt.c: 1266: }
  2993  00FBE2  D022               	goto	l4116
  2994  00FBE4                     l573:
  2995                           
  2996                           ;doprnt.c: 1268: else
  2997                           ;doprnt.c: 1273: {
  2998                           ;doprnt.c: 1281: if(flag & 0x10)
  2999  00FBE4  A85E               	btfss	printf@flag,4,c
  3000  00FBE6  D00E               	goto	l4112
  3001                           
  3002                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3003  00FBE8  C05A  FFD9         	movff	printf@ap,fsr2l
  3004  00FBEC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  3005  00FBF0  CFDE F064          	movff	postinc2,printf@val
  3006  00FBF4  CFDE F065          	movff	postinc2,printf@val+1
  3007  00FBF8  CFDE F066          	movff	postinc2,printf@val+2
  3008  00FBFC  CFDE F067          	movff	postinc2,printf@val+3
  3009  00FC00  0E04               	movlw	4
  3010  00FC02  D00F               	goto	L3
  3011  00FC04                     l4112:
  3012                           
  3013                           ;doprnt.c: 1283: else
  3014                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3015  00FC04  C05A  FFD9         	movff	printf@ap,fsr2l
  3016  00FC08  C05B  FFDA         	movff	printf@ap+1,fsr2h
  3017  00FC0C  CFDE F04C          	movff	postinc2,??_printf
  3018  00FC10  CFDD F04D          	movff	postdec2,??_printf+1
  3019  00FC14  C04C  F064         	movff	??_printf,printf@val
  3020  00FC18  C04D  F065         	movff	??_printf+1,printf@val+1
  3021  00FC1C  6A66               	clrf	printf@val+2,c
  3022  00FC1E  6A67               	clrf	printf@val+3,c
  3023  00FC20  0E02               	movlw	2
  3024  00FC22                     L3:
  3025  00FC22  265A               	addwf	printf@ap,f,c
  3026  00FC24  0E00               	movlw	0
  3027  00FC26  225B               	addwfc	printf@ap+1,f,c
  3028  00FC28                     l4116:
  3029                           
  3030                           ;doprnt.c: 1287: }
  3031                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3032  00FC28  506B               	movf	printf@prec,w,c
  3033  00FC2A  106C               	iorwf	printf@prec+1,w,c
  3034  00FC2C  A4D8               	btfss	status,2,c
  3035  00FC2E  D045               	goto	l4152
  3036  00FC30  5064               	movf	printf@val,w,c
  3037  00FC32  1065               	iorwf	printf@val+1,w,c
  3038  00FC34  1066               	iorwf	printf@val+2,w,c
  3039  00FC36  1067               	iorwf	printf@val+3,w,c
  3040  00FC38  A4D8               	btfss	status,2,c
  3041  00FC3A  D03F               	goto	l4152
  3042                           
  3043                           ;doprnt.c: 1291: prec++;
  3044  00FC3C  4A6B               	infsnz	printf@prec,f,c
  3045  00FC3E  2A6C               	incf	printf@prec+1,f,c
  3046                           
  3047                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3048  00FC40  D03C               	goto	l4152
  3049  00FC42                     l4122:
  3050                           
  3051                           ;doprnt.c: 1302: case 0xC0:
  3052                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3053  00FC42  0E01               	movlw	1
  3054  00FC44  6E6D               	movwf	printf@c,c
  3055  00FC46                     l4124:
  3056  00FC46  0E0A               	movlw	10
  3057  00FC48  186D               	xorwf	printf@c,w,c
  3058  00FC4A  B4D8               	btfsc	status,2,c
  3059  00FC4C  D041               	goto	l4154
  3060                           
  3061                           ;doprnt.c: 1306: if(val < dpowers[c])
  3062  00FC4E  506D               	movf	printf@c,w,c
  3063  00FC50  0D04               	mullw	4
  3064  00FC52  0E53               	movlw	low _dpowers
  3065  00FC54  24F3               	addwf	prodl,w,c
  3066  00FC56  6EF6               	movwf	tblptrl,c
  3067  00FC58  0EFE               	movlw	high _dpowers
  3068  00FC5A  20F4               	addwfc	prodh,w,c
  3069  00FC5C  6EF7               	movwf	tblptrh,c
  3070  00FC5E                     	if	0	;There are less than 3 active tblptr bytes
  3071  00FC5E                     	endif
  3072  00FC5E  0009               	tblrd		*+
  3073  00FC60  50F5               	movf	tablat,w,c
  3074  00FC62  5C64               	subwf	printf@val,w,c
  3075  00FC64  0009               	tblrd		*+
  3076  00FC66  50F5               	movf	tablat,w,c
  3077  00FC68  5865               	subwfb	printf@val+1,w,c
  3078  00FC6A  0009               	tblrd		*+
  3079  00FC6C  50F5               	movf	tablat,w,c
  3080  00FC6E  5866               	subwfb	printf@val+2,w,c
  3081  00FC70  0009               	tblrd		*+
  3082  00FC72  50F5               	movf	tablat,w,c
  3083  00FC74  5867               	subwfb	printf@val+3,w,c
  3084  00FC76  A0D8               	btfss	status,0,c
  3085  00FC78  D02B               	goto	l4154
  3086                           
  3087                           ;doprnt.c: 1307: break;
  3088  00FC7A  2A6D               	incf	printf@c,f,c
  3089  00FC7C  D7E4               	goto	l4124
  3090  00FC7E                     l4136:
  3091                           
  3092                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3093  00FC7E  0E01               	movlw	1
  3094  00FC80  6E6D               	movwf	printf@c,c
  3095  00FC82                     l4138:
  3096  00FC82  0E08               	movlw	8
  3097  00FC84  186D               	xorwf	printf@c,w,c
  3098  00FC86  B4D8               	btfsc	status,2,c
  3099  00FC88  D023               	goto	l4154
  3100                           
  3101                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3102  00FC8A  506D               	movf	printf@c,w,c
  3103  00FC8C  0D04               	mullw	4
  3104  00FC8E  0EC9               	movlw	low _hexpowers
  3105  00FC90  24F3               	addwf	prodl,w,c
  3106  00FC92  6EF6               	movwf	tblptrl,c
  3107  00FC94  0EFE               	movlw	high _hexpowers
  3108  00FC96  20F4               	addwfc	prodh,w,c
  3109  00FC98  6EF7               	movwf	tblptrh,c
  3110  00FC9A                     	if	0	;There are less than 3 active tblptr bytes
  3111  00FC9A                     	endif
  3112  00FC9A  0009               	tblrd		*+
  3113  00FC9C  50F5               	movf	tablat,w,c
  3114  00FC9E  5C64               	subwf	printf@val,w,c
  3115  00FCA0  0009               	tblrd		*+
  3116  00FCA2  50F5               	movf	tablat,w,c
  3117  00FCA4  5865               	subwfb	printf@val+1,w,c
  3118  00FCA6  0009               	tblrd		*+
  3119  00FCA8  50F5               	movf	tablat,w,c
  3120  00FCAA  5866               	subwfb	printf@val+2,w,c
  3121  00FCAC  0009               	tblrd		*+
  3122  00FCAE  50F5               	movf	tablat,w,c
  3123  00FCB0  5867               	subwfb	printf@val+3,w,c
  3124  00FCB2  A0D8               	btfss	status,0,c
  3125  00FCB4  D00D               	goto	l4154
  3126                           
  3127                           ;doprnt.c: 1318: break;
  3128  00FCB6  2A6D               	incf	printf@c,f,c
  3129  00FCB8  D7E4               	goto	l4138
  3130  00FCBA                     l4152:
  3131  00FCBA  505E               	movf	printf@flag,w,c
  3132  00FCBC  0BC0               	andlw	192
  3133                           
  3134                           ; Switch size 1, requested type "space"
  3135                           ; Number of cases is 3, Range of values is 0 to 192
  3136                           ; switch strategies available:
  3137                           ; Name         Instructions Cycles
  3138                           ; simple_byte           10     6 (average)
  3139                           ;	Chosen strategy is simple_byte
  3140  00FCBE  0A00               	xorlw	0	; case 0
  3141  00FCC0  B4D8               	btfsc	status,2,c
  3142  00FCC2  D7BF               	goto	l4122
  3143  00FCC4  0A80               	xorlw	128	; case 128
  3144  00FCC6  B4D8               	btfsc	status,2,c
  3145  00FCC8  D7DA               	goto	l4136
  3146  00FCCA  0A40               	xorlw	64	; case 192
  3147  00FCCC  B4D8               	btfsc	status,2,c
  3148  00FCCE  D7B9               	goto	l4122
  3149  00FCD0                     l4154:
  3150                           
  3151                           ;doprnt.c: 1339: if(c < prec)
  3152  00FCD0  0E80               	movlw	128
  3153  00FCD2  BE6D               	btfsc	printf@c,7,c
  3154  00FCD4  0E7F               	movlw	127
  3155  00FCD6  6E4C               	movwf	??_printf& (0+255),c
  3156  00FCD8  506B               	movf	printf@prec,w,c
  3157  00FCDA  5C6D               	subwf	printf@c,w,c
  3158  00FCDC  506C               	movf	printf@prec+1,w,c
  3159  00FCDE  0A80               	xorlw	128
  3160  00FCE0  584C               	subwfb	??_printf& (0+255),w,c
  3161  00FCE2  B0D8               	btfsc	status,0,c
  3162  00FCE4  D003               	goto	l4158
  3163                           
  3164                           ;doprnt.c: 1340: c = prec;
  3165  00FCE6  C06B  F06D         	movff	printf@prec,printf@c
  3166  00FCEA  D010               	goto	l4162
  3167  00FCEC                     l4158:
  3168                           
  3169                           ;doprnt.c: 1341: else if(prec < c)
  3170  00FCEC  506C               	movf	printf@prec+1,w,c
  3171  00FCEE  0A80               	xorlw	128
  3172  00FCF0  6E4C               	movwf	??_printf& (0+255),c
  3173  00FCF2  506D               	movf	printf@c,w,c
  3174  00FCF4  5C6B               	subwf	printf@prec,w,c
  3175  00FCF6  0E80               	movlw	128
  3176  00FCF8  BE6D               	btfsc	printf@c,7,c
  3177  00FCFA  0E7F               	movlw	127
  3178  00FCFC  584C               	subwfb	??_printf& (0+255),w,c
  3179  00FCFE  B0D8               	btfsc	status,0,c
  3180  00FD00  D005               	goto	l4162
  3181                           
  3182                           ;doprnt.c: 1342: prec = c;
  3183  00FD02  506D               	movf	printf@c,w,c
  3184  00FD04  6E6B               	movwf	printf@prec,c
  3185  00FD06  6A6C               	clrf	printf@prec+1,c
  3186  00FD08  BE6B               	btfsc	printf@prec,7,c
  3187  00FD0A  066C               	decf	printf@prec+1,f,c
  3188  00FD0C                     l4162:
  3189                           
  3190                           ;doprnt.c: 1422: {
  3191                           ;doprnt.c: 1438: if(flag & 0x03)
  3192  00FD0C  0E03               	movlw	3
  3193  00FD0E  145E               	andwf	printf@flag,w,c
  3194  00FD10  6E4C               	movwf	??_printf& (0+255),c
  3195  00FD12  0E00               	movlw	0
  3196  00FD14  145F               	andwf	printf@flag+1,w,c
  3197  00FD16  6E4D               	movwf	(??_printf+1)& (0+255),c
  3198  00FD18  504C               	movf	??_printf,w,c
  3199  00FD1A  104D               	iorwf	??_printf+1,w,c
  3200  00FD1C  B4D8               	btfsc	status,2,c
  3201  00FD1E  D083               	goto	l4178
  3202                           
  3203                           ;doprnt.c: 1439: (putch('-') );
  3204  00FD20  0E2D               	movlw	45
  3205  00FD22  EC7E  F06A         	call	_putch
  3206                           
  3207                           ;doprnt.c: 1469: }
  3208                           ;doprnt.c: 1474: while(prec--) {
  3209  00FD26  D07F               	goto	l4178
  3210  00FD28                     l4166:
  3211                           
  3212                           ;doprnt.c: 1486: case 0xC0:
  3213                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3214  00FD28  C06B  F04C         	movff	printf@prec,??_printf
  3215  00FD2C  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3216  00FD30  90D8               	bcf	status,0,c
  3217  00FD32  364C               	rlcf	??_printf,f,c
  3218  00FD34  364D               	rlcf	??_printf+1,f,c
  3219  00FD36  90D8               	bcf	status,0,c
  3220  00FD38  364C               	rlcf	??_printf,f,c
  3221  00FD3A  364D               	rlcf	??_printf+1,f,c
  3222  00FD3C  0E53               	movlw	low _dpowers
  3223  00FD3E  244C               	addwf	??_printf,w,c
  3224  00FD40  6EF6               	movwf	tblptrl,c
  3225  00FD42  0EFE               	movlw	high _dpowers
  3226  00FD44  204D               	addwfc	??_printf+1,w,c
  3227  00FD46  6EF7               	movwf	tblptrh,c
  3228  00FD48                     	if	0	;There are less than 3 active tblptr bytes
  3229  00FD48                     	endif
  3230  00FD48  0009               	tblrd		*+
  3231  00FD4A  CFF5 F005          	movff	tablat,___lldiv@divisor
  3232  00FD4E  0009               	tblrd		*+
  3233  00FD50  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3234  00FD54  0009               	tblrd		*+
  3235  00FD56  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3236  00FD5A  000A               	tblrd		*-
  3237  00FD5C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3238  00FD60  C064  F001         	movff	printf@val,___lldiv@dividend
  3239  00FD64  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3240  00FD68  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3241  00FD6C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3242  00FD70  EC44  F06C         	call	___lldiv	;wreg free
  3243  00FD74  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3244  00FD78  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3245  00FD7C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3246  00FD80  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3247  00FD84  0E0A               	movlw	10
  3248  00FD86  6E12               	movwf	___llmod@divisor,c
  3249  00FD88  0E00               	movlw	0
  3250  00FD8A  6E13               	movwf	___llmod@divisor+1,c
  3251  00FD8C  0E00               	movlw	0
  3252  00FD8E  6E14               	movwf	___llmod@divisor+2,c
  3253  00FD90  0E00               	movlw	0
  3254  00FD92  6E15               	movwf	___llmod@divisor+3,c
  3255  00FD94  EC9A  F06B         	call	___llmod	;wreg free
  3256  00FD98  500E               	movf	?___llmod,w,c
  3257  00FD9A  0F30               	addlw	48
  3258  00FD9C  6E6D               	movwf	printf@c,c
  3259                           
  3260                           ;doprnt.c: 1491: break;
  3261  00FD9E  D040               	goto	l4176
  3262  00FDA0                     l4168:
  3263                           
  3264                           ;doprnt.c: 1499: {
  3265                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3266  00FDA0  C064  F001         	movff	printf@val,___lldiv@dividend
  3267  00FDA4  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3268  00FDA8  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3269  00FDAC  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3270  00FDB0  C06B  F04C         	movff	printf@prec,??_printf
  3271  00FDB4  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3272  00FDB8  90D8               	bcf	status,0,c
  3273  00FDBA  364C               	rlcf	??_printf,f,c
  3274  00FDBC  364D               	rlcf	??_printf+1,f,c
  3275  00FDBE  90D8               	bcf	status,0,c
  3276  00FDC0  364C               	rlcf	??_printf,f,c
  3277  00FDC2  364D               	rlcf	??_printf+1,f,c
  3278  00FDC4  0EC9               	movlw	low _hexpowers
  3279  00FDC6  244C               	addwf	??_printf,w,c
  3280  00FDC8  6EF6               	movwf	tblptrl,c
  3281  00FDCA  0EFE               	movlw	high _hexpowers
  3282  00FDCC  204D               	addwfc	??_printf+1,w,c
  3283  00FDCE  6EF7               	movwf	tblptrh,c
  3284  00FDD0                     	if	0	;There are less than 3 active tblptr bytes
  3285  00FDD0                     	endif
  3286  00FDD0  0009               	tblrd		*+
  3287  00FDD2  CFF5 F005          	movff	tablat,___lldiv@divisor
  3288  00FDD6  0009               	tblrd		*+
  3289  00FDD8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3290  00FDDC  0009               	tblrd		*+
  3291  00FDDE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3292  00FDE2  000A               	tblrd		*-
  3293  00FDE4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3294  00FDE8  EC44  F06C         	call	___lldiv	;wreg free
  3295  00FDEC  5001               	movf	?___lldiv,w,c
  3296  00FDEE  0B0F               	andlw	15
  3297  00FDF0  6E57               	movwf	printf@idx,c
  3298                           
  3299                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3300  00FDF2  5057               	movf	printf@idx,w,c
  3301  00FDF4  0D01               	mullw	1
  3302  00FDF6  0E0B               	movlw	low STR_20
  3303  00FDF8  24F3               	addwf	prodl,w,c
  3304  00FDFA  6EF6               	movwf	tblptrl,c
  3305  00FDFC  0EFF               	movlw	high STR_20
  3306  00FDFE  20F4               	addwfc	prodh,w,c
  3307  00FE00  6EF7               	movwf	tblptrh,c
  3308  00FE02                     	if	0	;There are less than 3 active tblptr bytes
  3309  00FE02                     	endif
  3310  00FE02  0008               	tblrd		*
  3311  00FE04  CFF5 F06D          	movff	tablat,printf@c
  3312                           
  3313                           ;doprnt.c: 1523: }
  3314                           
  3315                           ;doprnt.c: 1508: }
  3316                           ;doprnt.c: 1510: break;
  3317  00FE08  D00B               	goto	l4176
  3318  00FE0A                     l4174:
  3319  00FE0A  505E               	movf	printf@flag,w,c
  3320  00FE0C  0BC0               	andlw	192
  3321                           
  3322                           ; Switch size 1, requested type "space"
  3323                           ; Number of cases is 3, Range of values is 0 to 192
  3324                           ; switch strategies available:
  3325                           ; Name         Instructions Cycles
  3326                           ; simple_byte           10     6 (average)
  3327                           ;	Chosen strategy is simple_byte
  3328  00FE0E  0A00               	xorlw	0	; case 0
  3329  00FE10  B4D8               	btfsc	status,2,c
  3330  00FE12  D78A               	goto	l4166
  3331  00FE14  0A80               	xorlw	128	; case 128
  3332  00FE16  B4D8               	btfsc	status,2,c
  3333  00FE18  D7C3               	goto	l4168
  3334  00FE1A  0A40               	xorlw	64	; case 192
  3335  00FE1C  B4D8               	btfsc	status,2,c
  3336  00FE1E  D784               	goto	l4166
  3337  00FE20                     l4176:
  3338                           
  3339                           ;doprnt.c: 1524: (putch(c) );
  3340  00FE20  506D               	movf	printf@c,w,c
  3341  00FE22  EC7E  F06A         	call	_putch
  3342  00FE26                     l4178:
  3343  00FE26  066B               	decf	printf@prec,f,c
  3344  00FE28  A0D8               	btfss	status,0,c
  3345  00FE2A  066C               	decf	printf@prec+1,f,c
  3346  00FE2C  286B               	incf	printf@prec,w,c
  3347  00FE2E  E1ED               	bnz	l4174
  3348  00FE30  286C               	incf	printf@prec+1,w,c
  3349  00FE32  A4D8               	btfss	status,2,c
  3350  00FE34  D7EA               	goto	l4174
  3351  00FE36                     l4180:
  3352  00FE36  C040  FFF6         	movff	printf@f,tblptrl
  3353  00FE3A  C041  FFF7         	movff	printf@f+1,tblptrh
  3354  00FE3E  4A40               	infsnz	printf@f,f,c
  3355  00FE40  2A41               	incf	printf@f+1,f,c
  3356  00FE42                     	if	0	;tblptru may be non-zero
  3357  00FE42                     	endif
  3358  00FE42                     	if	0	;tblptru may be non-zero
  3359  00FE42                     	endif
  3360  00FE42  0008               	tblrd		*
  3361  00FE44  CFF5 F06D          	movff	tablat,printf@c
  3362  00FE48  506D               	movf	printf@c,w,c
  3363  00FE4A  B4D8               	btfsc	status,2,c
  3364  00FE4C  0012               	return	
  3365  00FE4E  EF6D  F07A         	goto	l3902
  3366  00FE52                     __end_of_printf:
  3367                           	opt stack 0
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           postinc0	equ	0xFEE
  3375                           wreg	equ	0xFE8
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _scale *****************
  3384 ;; Defined at:
  3385 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  scl             1    wreg     char 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  scl             1   41[COMRAM] char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  3   35[COMRAM] char 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3399 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;Total ram usage:        7 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    2
  3406 ;; This function calls:
  3407 ;;		___awdiv
  3408 ;;		___awmod
  3409 ;;		___ftmul
  3410 ;;		___wmul
  3411 ;; This function is called by:
  3412 ;;		_printf
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text2
  3417  00E476                     __ptext2:
  3418                           	opt stack 0
  3419  00E476                     _scale:
  3420                           	opt stack 27
  3421                           
  3422                           ;incstack = 0
  3423                           ;scale@scl stored from wreg
  3424  00E476  6E2A               	movwf	scale@scl,c
  3425                           
  3426                           ;doprnt.c: 428: if(scl < 0) {
  3427  00E478  AE2A               	btfss	scale@scl,7,c
  3428  00E47A  D0FB               	goto	l3322
  3429                           
  3430                           ;doprnt.c: 429: scl = -scl;
  3431  00E47C  6C2A               	negf	scale@scl,c
  3432                           
  3433                           ;doprnt.c: 430: if(scl>=110)
  3434  00E47E  502A               	movf	scale@scl,w,c
  3435  00E480  0A80               	xorlw	128
  3436  00E482  0F12               	addlw	-238
  3437  00E484  A0D8               	btfss	status,0,c
  3438  00E486  D091               	goto	l3312
  3439                           
  3440                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3441  00E488  0E00               	movlw	0
  3442  00E48A  6E12               	movwf	___wmul@multiplicand+1,c
  3443  00E48C  0E03               	movlw	3
  3444  00E48E  6E11               	movwf	___wmul@multiplicand,c
  3445  00E490  0E00               	movlw	0
  3446  00E492  6E0A               	movwf	___awdiv@divisor+1,c
  3447  00E494  0E0A               	movlw	10
  3448  00E496  6E09               	movwf	___awdiv@divisor,c
  3449  00E498  0E00               	movlw	0
  3450  00E49A  6E04               	movwf	___awmod@divisor+1,c
  3451  00E49C  0E64               	movlw	100
  3452  00E49E  6E03               	movwf	___awmod@divisor,c
  3453  00E4A0  502A               	movf	scale@scl,w,c
  3454  00E4A2  6E01               	movwf	___awmod@dividend,c
  3455  00E4A4  6A02               	clrf	___awmod@dividend+1,c
  3456  00E4A6  BE01               	btfsc	___awmod@dividend,7,c
  3457  00E4A8  0602               	decf	___awmod@dividend+1,f,c
  3458  00E4AA  ECCD  F06B         	call	___awmod	;wreg free
  3459  00E4AE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3460  00E4B2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3461  00E4B6  EC85  F06C         	call	___awdiv	;wreg free
  3462  00E4BA  0E09               	movlw	9
  3463  00E4BC  2407               	addwf	?___awdiv,w,c
  3464  00E4BE  6E0F               	movwf	___wmul@multiplier,c
  3465  00E4C0  0E00               	movlw	0
  3466  00E4C2  2008               	addwfc	?___awdiv+1,w,c
  3467  00E4C4  6E10               	movwf	___wmul@multiplier+1,c
  3468  00E4C6  ECDA  F06A         	call	___wmul	;wreg free
  3469  00E4CA  0EA2               	movlw	low __npowers_
  3470  00E4CC  240F               	addwf	?___wmul,w,c
  3471  00E4CE  6EF6               	movwf	tblptrl,c
  3472  00E4D0  0EFE               	movlw	high __npowers_
  3473  00E4D2  2010               	addwfc	?___wmul+1,w,c
  3474  00E4D4  6EF7               	movwf	tblptrh,c
  3475  00E4D6                     	if	0	;There are less than 3 active tblptr bytes
  3476  00E4D6                     	endif
  3477  00E4D6  0009               	tblrd		*+
  3478  00E4D8  CFF5 F018          	movff	tablat,___ftmul@f2
  3479  00E4DC  0009               	tblrd		*+
  3480  00E4DE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3481  00E4E2  000A               	tblrd		*-
  3482  00E4E4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3483  00E4E8  0E00               	movlw	0
  3484  00E4EA  6E0A               	movwf	___awdiv@divisor+1,c
  3485  00E4EC  0E64               	movlw	100
  3486  00E4EE  6E09               	movwf	___awdiv@divisor,c
  3487  00E4F0  502A               	movf	scale@scl,w,c
  3488  00E4F2  6E07               	movwf	___awdiv@dividend,c
  3489  00E4F4  6A08               	clrf	___awdiv@dividend+1,c
  3490  00E4F6  BE07               	btfsc	___awdiv@dividend,7,c
  3491  00E4F8  0608               	decf	___awdiv@dividend+1,f,c
  3492  00E4FA  EC85  F06C         	call	___awdiv	;wreg free
  3493  00E4FE  0E12               	movlw	18
  3494  00E500  2407               	addwf	?___awdiv,w,c
  3495  00E502  6E0F               	movwf	___wmul@multiplier,c
  3496  00E504  0E00               	movlw	0
  3497  00E506  2008               	addwfc	?___awdiv+1,w,c
  3498  00E508  6E10               	movwf	___wmul@multiplier+1,c
  3499  00E50A  0E00               	movlw	0
  3500  00E50C  6E12               	movwf	___wmul@multiplicand+1,c
  3501  00E50E  0E03               	movlw	3
  3502  00E510  6E11               	movwf	___wmul@multiplicand,c
  3503  00E512  ECDA  F06A         	call	___wmul	;wreg free
  3504  00E516  0EA2               	movlw	low __npowers_
  3505  00E518  240F               	addwf	?___wmul,w,c
  3506  00E51A  6EF6               	movwf	tblptrl,c
  3507  00E51C  0EFE               	movlw	high __npowers_
  3508  00E51E  2010               	addwfc	?___wmul+1,w,c
  3509  00E520  6EF7               	movwf	tblptrh,c
  3510  00E522                     	if	0	;There are less than 3 active tblptr bytes
  3511  00E522                     	endif
  3512  00E522  0009               	tblrd		*+
  3513  00E524  CFF5 F015          	movff	tablat,___ftmul@f1
  3514  00E528  0009               	tblrd		*+
  3515  00E52A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3516  00E52E  000A               	tblrd		*-
  3517  00E530  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3518  00E534  EC21  F06E         	call	___ftmul	;wreg free
  3519  00E538  C015  F027         	movff	?___ftmul,_scale$1465
  3520  00E53C  C016  F028         	movff	?___ftmul+1,_scale$1465+1
  3521  00E540  C017  F029         	movff	?___ftmul+2,_scale$1465+2
  3522                           
  3523                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3524  00E544  C027  F015         	movff	_scale$1465,___ftmul@f1
  3525  00E548  C028  F016         	movff	_scale$1465+1,___ftmul@f1+1
  3526  00E54C  C029  F017         	movff	_scale$1465+2,___ftmul@f1+2
  3527  00E550  0E00               	movlw	0
  3528  00E552  6E12               	movwf	___wmul@multiplicand+1,c
  3529  00E554  0E03               	movlw	3
  3530  00E556  6E11               	movwf	___wmul@multiplicand,c
  3531  00E558  0E00               	movlw	0
  3532  00E55A  6E04               	movwf	___awmod@divisor+1,c
  3533  00E55C  0E0A               	movlw	10
  3534  00E55E  6E03               	movwf	___awmod@divisor,c
  3535  00E560  502A               	movf	scale@scl,w,c
  3536  00E562  6E01               	movwf	___awmod@dividend,c
  3537  00E564  6A02               	clrf	___awmod@dividend+1,c
  3538  00E566  BE01               	btfsc	___awmod@dividend,7,c
  3539  00E568  0602               	decf	___awmod@dividend+1,f,c
  3540  00E56A  ECCD  F06B         	call	___awmod	;wreg free
  3541  00E56E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3542  00E572  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3543  00E576  ECDA  F06A         	call	___wmul	;wreg free
  3544  00E57A  0EA2               	movlw	low __npowers_
  3545  00E57C  240F               	addwf	?___wmul,w,c
  3546  00E57E  6EF6               	movwf	tblptrl,c
  3547  00E580  0EFE               	movlw	high __npowers_
  3548  00E582  2010               	addwfc	?___wmul+1,w,c
  3549  00E584  6EF7               	movwf	tblptrh,c
  3550  00E586                     	if	0	;There are less than 3 active tblptr bytes
  3551  00E586                     	endif
  3552  00E586  0009               	tblrd		*+
  3553  00E588  CFF5 F018          	movff	tablat,___ftmul@f2
  3554  00E58C  0009               	tblrd		*+
  3555  00E58E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3556  00E592  000A               	tblrd		*-
  3557  00E594  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3558  00E598  EC21  F06E         	call	___ftmul	;wreg free
  3559  00E59C  C015  F024         	movff	?___ftmul,?_scale
  3560  00E5A0  C016  F025         	movff	?___ftmul+1,?_scale+1
  3561  00E5A4  C017  F026         	movff	?___ftmul+2,?_scale+2
  3562  00E5A8  0012               	return	
  3563  00E5AA                     l3312:
  3564                           
  3565                           ;doprnt.c: 432: else if(scl > 10)
  3566  00E5AA  502A               	movf	scale@scl,w,c
  3567  00E5AC  0A80               	xorlw	128
  3568  00E5AE  0F75               	addlw	-139
  3569  00E5B0  A0D8               	btfss	status,0,c
  3570  00E5B2  D04D               	goto	l3318
  3571                           
  3572                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3573  00E5B4  0E00               	movlw	0
  3574  00E5B6  6E0A               	movwf	___awdiv@divisor+1,c
  3575  00E5B8  0E0A               	movlw	10
  3576  00E5BA  6E09               	movwf	___awdiv@divisor,c
  3577  00E5BC  502A               	movf	scale@scl,w,c
  3578  00E5BE  6E07               	movwf	___awdiv@dividend,c
  3579  00E5C0  6A08               	clrf	___awdiv@dividend+1,c
  3580  00E5C2  BE07               	btfsc	___awdiv@dividend,7,c
  3581  00E5C4  0608               	decf	___awdiv@dividend+1,f,c
  3582  00E5C6  EC85  F06C         	call	___awdiv	;wreg free
  3583  00E5CA  0E09               	movlw	9
  3584  00E5CC  2407               	addwf	?___awdiv,w,c
  3585  00E5CE  6E0F               	movwf	___wmul@multiplier,c
  3586  00E5D0  0E00               	movlw	0
  3587  00E5D2  2008               	addwfc	?___awdiv+1,w,c
  3588  00E5D4  6E10               	movwf	___wmul@multiplier+1,c
  3589  00E5D6  0E00               	movlw	0
  3590  00E5D8  6E12               	movwf	___wmul@multiplicand+1,c
  3591  00E5DA  0E03               	movlw	3
  3592  00E5DC  6E11               	movwf	___wmul@multiplicand,c
  3593  00E5DE  ECDA  F06A         	call	___wmul	;wreg free
  3594  00E5E2  0EA2               	movlw	low __npowers_
  3595  00E5E4  240F               	addwf	?___wmul,w,c
  3596  00E5E6  6EF6               	movwf	tblptrl,c
  3597  00E5E8  0EFE               	movlw	high __npowers_
  3598  00E5EA  2010               	addwfc	?___wmul+1,w,c
  3599  00E5EC  6EF7               	movwf	tblptrh,c
  3600  00E5EE                     	if	0	;There are less than 3 active tblptr bytes
  3601  00E5EE                     	endif
  3602  00E5EE  0009               	tblrd		*+
  3603  00E5F0  CFF5 F015          	movff	tablat,___ftmul@f1
  3604  00E5F4  0009               	tblrd		*+
  3605  00E5F6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3606  00E5FA  000A               	tblrd		*-
  3607  00E5FC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3608  00E600  0E00               	movlw	0
  3609  00E602  6E12               	movwf	___wmul@multiplicand+1,c
  3610  00E604  0E03               	movlw	3
  3611  00E606  6E11               	movwf	___wmul@multiplicand,c
  3612  00E608  0E00               	movlw	0
  3613  00E60A  6E04               	movwf	___awmod@divisor+1,c
  3614  00E60C  0E0A               	movlw	10
  3615  00E60E  6E03               	movwf	___awmod@divisor,c
  3616  00E610  502A               	movf	scale@scl,w,c
  3617  00E612  6E01               	movwf	___awmod@dividend,c
  3618  00E614  6A02               	clrf	___awmod@dividend+1,c
  3619  00E616  BE01               	btfsc	___awmod@dividend,7,c
  3620  00E618  0602               	decf	___awmod@dividend+1,f,c
  3621  00E61A  ECCD  F06B         	call	___awmod	;wreg free
  3622  00E61E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3623  00E622  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3624  00E626  ECDA  F06A         	call	___wmul	;wreg free
  3625  00E62A  0EA2               	movlw	low __npowers_
  3626  00E62C  240F               	addwf	?___wmul,w,c
  3627  00E62E  6EF6               	movwf	tblptrl,c
  3628  00E630  0EFE               	movlw	high __npowers_
  3629  00E632  2010               	addwfc	?___wmul+1,w,c
  3630  00E634  6EF7               	movwf	tblptrh,c
  3631  00E636                     	if	0	;There are less than 3 active tblptr bytes
  3632  00E636                     	endif
  3633  00E636  0009               	tblrd		*+
  3634  00E638  CFF5 F018          	movff	tablat,___ftmul@f2
  3635  00E63C  0009               	tblrd		*+
  3636  00E63E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3637  00E642  000A               	tblrd		*-
  3638  00E644  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3639  00E648  EC21  F06E         	call	___ftmul	;wreg free
  3640  00E64C  D7A7               	goto	L4
  3641  00E64E                     l3318:
  3642                           
  3643                           ;doprnt.c: 434: return _npowers_[scl];
  3644  00E64E  502A               	movf	scale@scl,w,c
  3645  00E650  0D03               	mullw	3
  3646  00E652  0EA2               	movlw	low __npowers_
  3647  00E654  24F3               	addwf	prodl,w,c
  3648  00E656  6EF6               	movwf	tblptrl,c
  3649  00E658  0EFE               	movlw	high __npowers_
  3650  00E65A  20F4               	addwfc	prodh,w,c
  3651  00E65C  6EF7               	movwf	tblptrh,c
  3652  00E65E                     	if	0	;There are less than 3 active tblptr bytes
  3653  00E65E                     	endif
  3654  00E65E  0009               	tblrd		*+
  3655  00E660  CFF5 F024          	movff	tablat,?_scale
  3656  00E664  0009               	tblrd		*+
  3657  00E666  CFF5 F025          	movff	tablat,?_scale+1
  3658  00E66A  000A               	tblrd		*-
  3659  00E66C  CFF5 F026          	movff	tablat,?_scale+2
  3660  00E670  0012               	return	
  3661  00E672                     l3322:
  3662                           
  3663                           ;doprnt.c: 435: }
  3664                           ;doprnt.c: 436: if(scl>=110)
  3665  00E672  502A               	movf	scale@scl,w,c
  3666  00E674  0A80               	xorlw	128
  3667  00E676  0F12               	addlw	-238
  3668  00E678  A0D8               	btfss	status,0,c
  3669  00E67A  D091               	goto	l3330
  3670                           
  3671                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3672  00E67C  0E00               	movlw	0
  3673  00E67E  6E12               	movwf	___wmul@multiplicand+1,c
  3674  00E680  0E03               	movlw	3
  3675  00E682  6E11               	movwf	___wmul@multiplicand,c
  3676  00E684  0E00               	movlw	0
  3677  00E686  6E0A               	movwf	___awdiv@divisor+1,c
  3678  00E688  0E0A               	movlw	10
  3679  00E68A  6E09               	movwf	___awdiv@divisor,c
  3680  00E68C  0E00               	movlw	0
  3681  00E68E  6E04               	movwf	___awmod@divisor+1,c
  3682  00E690  0E64               	movlw	100
  3683  00E692  6E03               	movwf	___awmod@divisor,c
  3684  00E694  502A               	movf	scale@scl,w,c
  3685  00E696  6E01               	movwf	___awmod@dividend,c
  3686  00E698  6A02               	clrf	___awmod@dividend+1,c
  3687  00E69A  BE01               	btfsc	___awmod@dividend,7,c
  3688  00E69C  0602               	decf	___awmod@dividend+1,f,c
  3689  00E69E  ECCD  F06B         	call	___awmod	;wreg free
  3690  00E6A2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3691  00E6A6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3692  00E6AA  EC85  F06C         	call	___awdiv	;wreg free
  3693  00E6AE  0E09               	movlw	9
  3694  00E6B0  2407               	addwf	?___awdiv,w,c
  3695  00E6B2  6E0F               	movwf	___wmul@multiplier,c
  3696  00E6B4  0E00               	movlw	0
  3697  00E6B6  2008               	addwfc	?___awdiv+1,w,c
  3698  00E6B8  6E10               	movwf	___wmul@multiplier+1,c
  3699  00E6BA  ECDA  F06A         	call	___wmul	;wreg free
  3700  00E6BE  0E7B               	movlw	low __powers_
  3701  00E6C0  240F               	addwf	?___wmul,w,c
  3702  00E6C2  6EF6               	movwf	tblptrl,c
  3703  00E6C4  0EFE               	movlw	high __powers_
  3704  00E6C6  2010               	addwfc	?___wmul+1,w,c
  3705  00E6C8  6EF7               	movwf	tblptrh,c
  3706  00E6CA                     	if	0	;There are less than 3 active tblptr bytes
  3707  00E6CA                     	endif
  3708  00E6CA  0009               	tblrd		*+
  3709  00E6CC  CFF5 F018          	movff	tablat,___ftmul@f2
  3710  00E6D0  0009               	tblrd		*+
  3711  00E6D2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3712  00E6D6  000A               	tblrd		*-
  3713  00E6D8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3714  00E6DC  0E00               	movlw	0
  3715  00E6DE  6E0A               	movwf	___awdiv@divisor+1,c
  3716  00E6E0  0E64               	movlw	100
  3717  00E6E2  6E09               	movwf	___awdiv@divisor,c
  3718  00E6E4  502A               	movf	scale@scl,w,c
  3719  00E6E6  6E07               	movwf	___awdiv@dividend,c
  3720  00E6E8  6A08               	clrf	___awdiv@dividend+1,c
  3721  00E6EA  BE07               	btfsc	___awdiv@dividend,7,c
  3722  00E6EC  0608               	decf	___awdiv@dividend+1,f,c
  3723  00E6EE  EC85  F06C         	call	___awdiv	;wreg free
  3724  00E6F2  0E12               	movlw	18
  3725  00E6F4  2407               	addwf	?___awdiv,w,c
  3726  00E6F6  6E0F               	movwf	___wmul@multiplier,c
  3727  00E6F8  0E00               	movlw	0
  3728  00E6FA  2008               	addwfc	?___awdiv+1,w,c
  3729  00E6FC  6E10               	movwf	___wmul@multiplier+1,c
  3730  00E6FE  0E00               	movlw	0
  3731  00E700  6E12               	movwf	___wmul@multiplicand+1,c
  3732  00E702  0E03               	movlw	3
  3733  00E704  6E11               	movwf	___wmul@multiplicand,c
  3734  00E706  ECDA  F06A         	call	___wmul	;wreg free
  3735  00E70A  0E7B               	movlw	low __powers_
  3736  00E70C  240F               	addwf	?___wmul,w,c
  3737  00E70E  6EF6               	movwf	tblptrl,c
  3738  00E710  0EFE               	movlw	high __powers_
  3739  00E712  2010               	addwfc	?___wmul+1,w,c
  3740  00E714  6EF7               	movwf	tblptrh,c
  3741  00E716                     	if	0	;There are less than 3 active tblptr bytes
  3742  00E716                     	endif
  3743  00E716  0009               	tblrd		*+
  3744  00E718  CFF5 F015          	movff	tablat,___ftmul@f1
  3745  00E71C  0009               	tblrd		*+
  3746  00E71E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3747  00E722  000A               	tblrd		*-
  3748  00E724  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3749  00E728  EC21  F06E         	call	___ftmul	;wreg free
  3750  00E72C  C015  F027         	movff	?___ftmul,_scale$1465
  3751  00E730  C016  F028         	movff	?___ftmul+1,_scale$1465+1
  3752  00E734  C017  F029         	movff	?___ftmul+2,_scale$1465+2
  3753                           
  3754                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3755  00E738  C027  F015         	movff	_scale$1465,___ftmul@f1
  3756  00E73C  C028  F016         	movff	_scale$1465+1,___ftmul@f1+1
  3757  00E740  C029  F017         	movff	_scale$1465+2,___ftmul@f1+2
  3758  00E744  0E00               	movlw	0
  3759  00E746  6E12               	movwf	___wmul@multiplicand+1,c
  3760  00E748  0E03               	movlw	3
  3761  00E74A  6E11               	movwf	___wmul@multiplicand,c
  3762  00E74C  0E00               	movlw	0
  3763  00E74E  6E04               	movwf	___awmod@divisor+1,c
  3764  00E750  0E0A               	movlw	10
  3765  00E752  6E03               	movwf	___awmod@divisor,c
  3766  00E754  502A               	movf	scale@scl,w,c
  3767  00E756  6E01               	movwf	___awmod@dividend,c
  3768  00E758  6A02               	clrf	___awmod@dividend+1,c
  3769  00E75A  BE01               	btfsc	___awmod@dividend,7,c
  3770  00E75C  0602               	decf	___awmod@dividend+1,f,c
  3771  00E75E  ECCD  F06B         	call	___awmod	;wreg free
  3772  00E762  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3773  00E766  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3774  00E76A  ECDA  F06A         	call	___wmul	;wreg free
  3775  00E76E  0E7B               	movlw	low __powers_
  3776  00E770  240F               	addwf	?___wmul,w,c
  3777  00E772  6EF6               	movwf	tblptrl,c
  3778  00E774  0EFE               	movlw	high __powers_
  3779  00E776  2010               	addwfc	?___wmul+1,w,c
  3780  00E778  6EF7               	movwf	tblptrh,c
  3781  00E77A                     	if	0	;There are less than 3 active tblptr bytes
  3782  00E77A                     	endif
  3783  00E77A  0009               	tblrd		*+
  3784  00E77C  CFF5 F018          	movff	tablat,___ftmul@f2
  3785  00E780  0009               	tblrd		*+
  3786  00E782  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3787  00E786  000A               	tblrd		*-
  3788  00E788  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3789  00E78C  EC21  F06E         	call	___ftmul	;wreg free
  3790  00E790  C015  F024         	movff	?___ftmul,?_scale
  3791  00E794  C016  F025         	movff	?___ftmul+1,?_scale+1
  3792  00E798  C017  F026         	movff	?___ftmul+2,?_scale+2
  3793  00E79C  0012               	return	
  3794  00E79E                     l3330:
  3795                           
  3796                           ;doprnt.c: 438: else if(scl > 10)
  3797  00E79E  502A               	movf	scale@scl,w,c
  3798  00E7A0  0A80               	xorlw	128
  3799  00E7A2  0F75               	addlw	-139
  3800  00E7A4  A0D8               	btfss	status,0,c
  3801  00E7A6  D04D               	goto	l3336
  3802                           
  3803                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3804  00E7A8  0E00               	movlw	0
  3805  00E7AA  6E0A               	movwf	___awdiv@divisor+1,c
  3806  00E7AC  0E0A               	movlw	10
  3807  00E7AE  6E09               	movwf	___awdiv@divisor,c
  3808  00E7B0  502A               	movf	scale@scl,w,c
  3809  00E7B2  6E07               	movwf	___awdiv@dividend,c
  3810  00E7B4  6A08               	clrf	___awdiv@dividend+1,c
  3811  00E7B6  BE07               	btfsc	___awdiv@dividend,7,c
  3812  00E7B8  0608               	decf	___awdiv@dividend+1,f,c
  3813  00E7BA  EC85  F06C         	call	___awdiv	;wreg free
  3814  00E7BE  0E09               	movlw	9
  3815  00E7C0  2407               	addwf	?___awdiv,w,c
  3816  00E7C2  6E0F               	movwf	___wmul@multiplier,c
  3817  00E7C4  0E00               	movlw	0
  3818  00E7C6  2008               	addwfc	?___awdiv+1,w,c
  3819  00E7C8  6E10               	movwf	___wmul@multiplier+1,c
  3820  00E7CA  0E00               	movlw	0
  3821  00E7CC  6E12               	movwf	___wmul@multiplicand+1,c
  3822  00E7CE  0E03               	movlw	3
  3823  00E7D0  6E11               	movwf	___wmul@multiplicand,c
  3824  00E7D2  ECDA  F06A         	call	___wmul	;wreg free
  3825  00E7D6  0E7B               	movlw	low __powers_
  3826  00E7D8  240F               	addwf	?___wmul,w,c
  3827  00E7DA  6EF6               	movwf	tblptrl,c
  3828  00E7DC  0EFE               	movlw	high __powers_
  3829  00E7DE  2010               	addwfc	?___wmul+1,w,c
  3830  00E7E0  6EF7               	movwf	tblptrh,c
  3831  00E7E2                     	if	0	;There are less than 3 active tblptr bytes
  3832  00E7E2                     	endif
  3833  00E7E2  0009               	tblrd		*+
  3834  00E7E4  CFF5 F015          	movff	tablat,___ftmul@f1
  3835  00E7E8  0009               	tblrd		*+
  3836  00E7EA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3837  00E7EE  000A               	tblrd		*-
  3838  00E7F0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3839  00E7F4  0E00               	movlw	0
  3840  00E7F6  6E12               	movwf	___wmul@multiplicand+1,c
  3841  00E7F8  0E03               	movlw	3
  3842  00E7FA  6E11               	movwf	___wmul@multiplicand,c
  3843  00E7FC  0E00               	movlw	0
  3844  00E7FE  6E04               	movwf	___awmod@divisor+1,c
  3845  00E800  0E0A               	movlw	10
  3846  00E802  6E03               	movwf	___awmod@divisor,c
  3847  00E804  502A               	movf	scale@scl,w,c
  3848  00E806  6E01               	movwf	___awmod@dividend,c
  3849  00E808  6A02               	clrf	___awmod@dividend+1,c
  3850  00E80A  BE01               	btfsc	___awmod@dividend,7,c
  3851  00E80C  0602               	decf	___awmod@dividend+1,f,c
  3852  00E80E  ECCD  F06B         	call	___awmod	;wreg free
  3853  00E812  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3854  00E816  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3855  00E81A  ECDA  F06A         	call	___wmul	;wreg free
  3856  00E81E  0E7B               	movlw	low __powers_
  3857  00E820  240F               	addwf	?___wmul,w,c
  3858  00E822  6EF6               	movwf	tblptrl,c
  3859  00E824  0EFE               	movlw	high __powers_
  3860  00E826  2010               	addwfc	?___wmul+1,w,c
  3861  00E828  6EF7               	movwf	tblptrh,c
  3862  00E82A                     	if	0	;There are less than 3 active tblptr bytes
  3863  00E82A                     	endif
  3864  00E82A  0009               	tblrd		*+
  3865  00E82C  CFF5 F018          	movff	tablat,___ftmul@f2
  3866  00E830  0009               	tblrd		*+
  3867  00E832  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3868  00E836  000A               	tblrd		*-
  3869  00E838  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3870  00E83C  EC21  F06E         	call	___ftmul	;wreg free
  3871  00E840  D7A7               	goto	L5
  3872  00E842                     l3336:
  3873                           
  3874                           ;doprnt.c: 440: return _powers_[scl];
  3875  00E842  502A               	movf	scale@scl,w,c
  3876  00E844  0D03               	mullw	3
  3877  00E846  0E7B               	movlw	low __powers_
  3878  00E848  24F3               	addwf	prodl,w,c
  3879  00E84A  6EF6               	movwf	tblptrl,c
  3880  00E84C  0EFE               	movlw	high __powers_
  3881  00E84E  20F4               	addwfc	prodh,w,c
  3882  00E850  6EF7               	movwf	tblptrh,c
  3883  00E852                     	if	0	;There are less than 3 active tblptr bytes
  3884  00E852                     	endif
  3885  00E852  0009               	tblrd		*+
  3886  00E854  CFF5 F024          	movff	tablat,?_scale
  3887  00E858  0009               	tblrd		*+
  3888  00E85A  CFF5 F025          	movff	tablat,?_scale+1
  3889  00E85E  000A               	tblrd		*-
  3890  00E860  CFF5 F026          	movff	tablat,?_scale+2
  3891  00E864  0012               	return	
  3892  00E866                     __end_of_scale:
  3893                           	opt stack 0
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _putch *****************
  3910 ;; Defined at:
  3911 ;;		line 24 in file "lcd.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  data            1    wreg     unsigned char 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  data            1    2[COMRAM] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        1 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    1
  3932 ;; This function calls:
  3933 ;;		_lcdNibble
  3934 ;; This function is called by:
  3935 ;;		_printf
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text3
  3940  00D4FC                     __ptext3:
  3941                           	opt stack 0
  3942  00D4FC                     _putch:
  3943                           	opt stack 28
  3944                           
  3945                           ;incstack = 0
  3946                           ;putch@data stored from wreg
  3947  00D4FC  6E03               	movwf	putch@data,c
  3948                           
  3949                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3950  00D4FE  848C               	bsf	3980,2,c	;volatile
  3951                           
  3952                           ;lcd.c: 33: lcdNibble(data);
  3953  00D500  5003               	movf	putch@data,w,c
  3954  00D502  EC05  F06C         	call	_lcdNibble
  3955                           
  3956                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3957  00D506  0EC8               	movlw	200
  3958  00D508                     u4907:
  3959  00D508  D000               	nop2	
  3960  00D50A  2EE8               	decfsz	wreg,f,c
  3961  00D50C  D7FD               	bra	u4907
  3962  00D50E  0012               	return		;funcret
  3963  00D510                     __end_of_putch:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function _isdigit *****************
  3981 ;; Defined at:
  3982 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  c               1    wreg     unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  c               1    2[COMRAM] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;		None               void
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;Total ram usage:        3 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_printf
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text4
  4010  00D52A                     __ptext4:
  4011                           	opt stack 0
  4012  00D52A                     _isdigit:
  4013                           	opt stack 29
  4014                           
  4015                           ;incstack = 0
  4016                           ;isdigit@c stored from wreg
  4017  00D52A  6E03               	movwf	isdigit@c,c
  4018  00D52C  0E00               	movlw	0
  4019  00D52E  6E02               	movwf	_isdigit$1087,c
  4020  00D530  0E3A               	movlw	58
  4021  00D532  6003               	cpfslt	isdigit@c,c
  4022  00D534  D005               	goto	l3348
  4023  00D536  0E2F               	movlw	47
  4024  00D538  6403               	cpfsgt	isdigit@c,c
  4025  00D53A  D002               	goto	l3348
  4026  00D53C  0E01               	movlw	1
  4027  00D53E  6E02               	movwf	_isdigit$1087,c
  4028  00D540                     l3348:
  4029  00D540  C002  F001         	movff	_isdigit$1087,??_isdigit
  4030  00D544  3001               	rrcf	??_isdigit,w,c
  4031  00D546  0012               	return	
  4032  00D548                     __end_of_isdigit:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _fround *****************
  4050 ;; Defined at:
  4051 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  prec            1    wreg     unsigned char 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  prec            1   44[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  3   35[COMRAM] unsigned char 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4065 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;Total ram usage:       10 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    2
  4072 ;; This function calls:
  4073 ;;		___awdiv
  4074 ;;		___awmod
  4075 ;;		___ftmul
  4076 ;;		___wmul
  4077 ;; This function is called by:
  4078 ;;		_printf
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text5
  4083  00E230                     __ptext5:
  4084                           	opt stack 0
  4085  00E230                     _fround:
  4086                           	opt stack 27
  4087                           
  4088                           ;incstack = 0
  4089                           ;fround@prec stored from wreg
  4090  00E230  6E2D               	movwf	fround@prec,c
  4091                           
  4092                           ;doprnt.c: 413: if(prec>=110)
  4093  00E232  0E6D               	movlw	109
  4094  00E234  642D               	cpfsgt	fround@prec,c
  4095  00E236  D09F               	goto	l3290
  4096                           
  4097                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4098  00E238  0E00               	movlw	0
  4099  00E23A  6E12               	movwf	___wmul@multiplicand+1,c
  4100  00E23C  0E03               	movlw	3
  4101  00E23E  6E11               	movwf	___wmul@multiplicand,c
  4102  00E240  0E00               	movlw	0
  4103  00E242  6E0A               	movwf	___awdiv@divisor+1,c
  4104  00E244  0E0A               	movlw	10
  4105  00E246  6E09               	movwf	___awdiv@divisor,c
  4106  00E248  0E00               	movlw	0
  4107  00E24A  6E04               	movwf	___awmod@divisor+1,c
  4108  00E24C  0E64               	movlw	100
  4109  00E24E  6E03               	movwf	___awmod@divisor,c
  4110  00E250  C02D  F001         	movff	fround@prec,___awmod@dividend
  4111  00E254  6A02               	clrf	___awmod@dividend+1,c
  4112  00E256  ECCD  F06B         	call	___awmod	;wreg free
  4113  00E25A  C001  F007         	movff	?___awmod,___awdiv@dividend
  4114  00E25E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4115  00E262  EC85  F06C         	call	___awdiv	;wreg free
  4116  00E266  0E09               	movlw	9
  4117  00E268  2407               	addwf	?___awdiv,w,c
  4118  00E26A  6E0F               	movwf	___wmul@multiplier,c
  4119  00E26C  0E00               	movlw	0
  4120  00E26E  2008               	addwfc	?___awdiv+1,w,c
  4121  00E270  6E10               	movwf	___wmul@multiplier+1,c
  4122  00E272  ECDA  F06A         	call	___wmul	;wreg free
  4123  00E276  0EA2               	movlw	low __npowers_
  4124  00E278  240F               	addwf	?___wmul,w,c
  4125  00E27A  6EF6               	movwf	tblptrl,c
  4126  00E27C  0EFE               	movlw	high __npowers_
  4127  00E27E  2010               	addwfc	?___wmul+1,w,c
  4128  00E280  6EF7               	movwf	tblptrh,c
  4129  00E282                     	if	0	;There are less than 3 active tblptr bytes
  4130  00E282                     	endif
  4131  00E282  0009               	tblrd		*+
  4132  00E284  CFF5 F018          	movff	tablat,___ftmul@f2
  4133  00E288  0009               	tblrd		*+
  4134  00E28A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4135  00E28E  000A               	tblrd		*-
  4136  00E290  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4137  00E294  0E00               	movlw	0
  4138  00E296  6E0A               	movwf	___awdiv@divisor+1,c
  4139  00E298  0E64               	movlw	100
  4140  00E29A  6E09               	movwf	___awdiv@divisor,c
  4141  00E29C  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4142  00E2A0  6A08               	clrf	___awdiv@dividend+1,c
  4143  00E2A2  EC85  F06C         	call	___awdiv	;wreg free
  4144  00E2A6  0E12               	movlw	18
  4145  00E2A8  2407               	addwf	?___awdiv,w,c
  4146  00E2AA  6E0F               	movwf	___wmul@multiplier,c
  4147  00E2AC  0E00               	movlw	0
  4148  00E2AE  2008               	addwfc	?___awdiv+1,w,c
  4149  00E2B0  6E10               	movwf	___wmul@multiplier+1,c
  4150  00E2B2  0E00               	movlw	0
  4151  00E2B4  6E12               	movwf	___wmul@multiplicand+1,c
  4152  00E2B6  0E03               	movlw	3
  4153  00E2B8  6E11               	movwf	___wmul@multiplicand,c
  4154  00E2BA  ECDA  F06A         	call	___wmul	;wreg free
  4155  00E2BE  0EA2               	movlw	low __npowers_
  4156  00E2C0  240F               	addwf	?___wmul,w,c
  4157  00E2C2  6EF6               	movwf	tblptrl,c
  4158  00E2C4  0EFE               	movlw	high __npowers_
  4159  00E2C6  2010               	addwfc	?___wmul+1,w,c
  4160  00E2C8  6EF7               	movwf	tblptrh,c
  4161  00E2CA                     	if	0	;There are less than 3 active tblptr bytes
  4162  00E2CA                     	endif
  4163  00E2CA  0009               	tblrd		*+
  4164  00E2CC  CFF5 F015          	movff	tablat,___ftmul@f1
  4165  00E2D0  0009               	tblrd		*+
  4166  00E2D2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4167  00E2D6  000A               	tblrd		*-
  4168  00E2D8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4169  00E2DC  EC21  F06E         	call	___ftmul	;wreg free
  4170  00E2E0  C015  F02A         	movff	?___ftmul,_fround$1463
  4171  00E2E4  C016  F02B         	movff	?___ftmul+1,_fround$1463+1
  4172  00E2E8  C017  F02C         	movff	?___ftmul+2,_fround$1463+2
  4173                           
  4174                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4175  00E2EC  0E00               	movlw	0
  4176  00E2EE  6E12               	movwf	___wmul@multiplicand+1,c
  4177  00E2F0  0E03               	movlw	3
  4178  00E2F2  6E11               	movwf	___wmul@multiplicand,c
  4179  00E2F4  0E00               	movlw	0
  4180  00E2F6  6E04               	movwf	___awmod@divisor+1,c
  4181  00E2F8  0E0A               	movlw	10
  4182  00E2FA  6E03               	movwf	___awmod@divisor,c
  4183  00E2FC  C02D  F001         	movff	fround@prec,___awmod@dividend
  4184  00E300  6A02               	clrf	___awmod@dividend+1,c
  4185  00E302  ECCD  F06B         	call	___awmod	;wreg free
  4186  00E306  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4187  00E30A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4188  00E30E  ECDA  F06A         	call	___wmul	;wreg free
  4189  00E312  0EA2               	movlw	low __npowers_
  4190  00E314  240F               	addwf	?___wmul,w,c
  4191  00E316  6EF6               	movwf	tblptrl,c
  4192  00E318  0EFE               	movlw	high __npowers_
  4193  00E31A  2010               	addwfc	?___wmul+1,w,c
  4194  00E31C  6EF7               	movwf	tblptrh,c
  4195  00E31E                     	if	0	;There are less than 3 active tblptr bytes
  4196  00E31E                     	endif
  4197  00E31E  0009               	tblrd		*+
  4198  00E320  CFF5 F018          	movff	tablat,___ftmul@f2
  4199  00E324  0009               	tblrd		*+
  4200  00E326  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4201  00E32A  000A               	tblrd		*-
  4202  00E32C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4203  00E330  C02A  F015         	movff	_fround$1463,___ftmul@f1
  4204  00E334  C02B  F016         	movff	_fround$1463+1,___ftmul@f1+1
  4205  00E338  C02C  F017         	movff	_fround$1463+2,___ftmul@f1+2
  4206  00E33C  EC21  F06E         	call	___ftmul	;wreg free
  4207  00E340  C015  F027         	movff	?___ftmul,_fround$1464
  4208  00E344  C016  F028         	movff	?___ftmul+1,_fround$1464+1
  4209  00E348  C017  F029         	movff	?___ftmul+2,_fround$1464+2
  4210                           
  4211                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4212  00E34C  C027  F015         	movff	_fround$1464,___ftmul@f1
  4213  00E350  C028  F016         	movff	_fround$1464+1,___ftmul@f1+1
  4214  00E354  C029  F017         	movff	_fround$1464+2,___ftmul@f1+2
  4215  00E358  0E00               	movlw	0
  4216  00E35A  6E18               	movwf	___ftmul@f2,c
  4217  00E35C  0E00               	movlw	0
  4218  00E35E  6E19               	movwf	___ftmul@f2+1,c
  4219  00E360  0E3F               	movlw	63
  4220  00E362  6E1A               	movwf	___ftmul@f2+2,c
  4221  00E364  EC21  F06E         	call	___ftmul	;wreg free
  4222  00E368  C015  F024         	movff	?___ftmul,?_fround
  4223  00E36C  C016  F025         	movff	?___ftmul+1,?_fround+1
  4224  00E370  C017  F026         	movff	?___ftmul+2,?_fround+2
  4225  00E374  0012               	return	
  4226  00E376                     l3290:
  4227                           
  4228                           ;doprnt.c: 415: else if(prec > 10)
  4229  00E376  0E0A               	movlw	10
  4230  00E378  642D               	cpfsgt	fround@prec,c
  4231  00E37A  D05D               	goto	l3298
  4232                           
  4233                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4234  00E37C  0E00               	movlw	0
  4235  00E37E  6E12               	movwf	___wmul@multiplicand+1,c
  4236  00E380  0E03               	movlw	3
  4237  00E382  6E11               	movwf	___wmul@multiplicand,c
  4238  00E384  0E00               	movlw	0
  4239  00E386  6E04               	movwf	___awmod@divisor+1,c
  4240  00E388  0E0A               	movlw	10
  4241  00E38A  6E03               	movwf	___awmod@divisor,c
  4242  00E38C  C02D  F001         	movff	fround@prec,___awmod@dividend
  4243  00E390  6A02               	clrf	___awmod@dividend+1,c
  4244  00E392  ECCD  F06B         	call	___awmod	;wreg free
  4245  00E396  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4246  00E39A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4247  00E39E  ECDA  F06A         	call	___wmul	;wreg free
  4248  00E3A2  0EA2               	movlw	low __npowers_
  4249  00E3A4  240F               	addwf	?___wmul,w,c
  4250  00E3A6  6EF6               	movwf	tblptrl,c
  4251  00E3A8  0EFE               	movlw	high __npowers_
  4252  00E3AA  2010               	addwfc	?___wmul+1,w,c
  4253  00E3AC  6EF7               	movwf	tblptrh,c
  4254  00E3AE                     	if	0	;There are less than 3 active tblptr bytes
  4255  00E3AE                     	endif
  4256  00E3AE  0009               	tblrd		*+
  4257  00E3B0  CFF5 F018          	movff	tablat,___ftmul@f2
  4258  00E3B4  0009               	tblrd		*+
  4259  00E3B6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4260  00E3BA  000A               	tblrd		*-
  4261  00E3BC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4262  00E3C0  0E00               	movlw	0
  4263  00E3C2  6E0A               	movwf	___awdiv@divisor+1,c
  4264  00E3C4  0E0A               	movlw	10
  4265  00E3C6  6E09               	movwf	___awdiv@divisor,c
  4266  00E3C8  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4267  00E3CC  6A08               	clrf	___awdiv@dividend+1,c
  4268  00E3CE  EC85  F06C         	call	___awdiv	;wreg free
  4269  00E3D2  0E09               	movlw	9
  4270  00E3D4  2407               	addwf	?___awdiv,w,c
  4271  00E3D6  6E0F               	movwf	___wmul@multiplier,c
  4272  00E3D8  0E00               	movlw	0
  4273  00E3DA  2008               	addwfc	?___awdiv+1,w,c
  4274  00E3DC  6E10               	movwf	___wmul@multiplier+1,c
  4275  00E3DE  0E00               	movlw	0
  4276  00E3E0  6E12               	movwf	___wmul@multiplicand+1,c
  4277  00E3E2  0E03               	movlw	3
  4278  00E3E4  6E11               	movwf	___wmul@multiplicand,c
  4279  00E3E6  ECDA  F06A         	call	___wmul	;wreg free
  4280  00E3EA  0EA2               	movlw	low __npowers_
  4281  00E3EC  240F               	addwf	?___wmul,w,c
  4282  00E3EE  6EF6               	movwf	tblptrl,c
  4283  00E3F0  0EFE               	movlw	high __npowers_
  4284  00E3F2  2010               	addwfc	?___wmul+1,w,c
  4285  00E3F4  6EF7               	movwf	tblptrh,c
  4286  00E3F6                     	if	0	;There are less than 3 active tblptr bytes
  4287  00E3F6                     	endif
  4288  00E3F6  0009               	tblrd		*+
  4289  00E3F8  CFF5 F015          	movff	tablat,___ftmul@f1
  4290  00E3FC  0009               	tblrd		*+
  4291  00E3FE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4292  00E402  000A               	tblrd		*-
  4293  00E404  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4294  00E408  EC21  F06E         	call	___ftmul	;wreg free
  4295  00E40C  C015  F02A         	movff	?___ftmul,_fround$1463
  4296  00E410  C016  F02B         	movff	?___ftmul+1,_fround$1463+1
  4297  00E414  C017  F02C         	movff	?___ftmul+2,_fround$1463+2
  4298                           
  4299                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4300  00E418  C02A  F015         	movff	_fround$1463,___ftmul@f1
  4301  00E41C  C02B  F016         	movff	_fround$1463+1,___ftmul@f1+1
  4302  00E420  C02C  F017         	movff	_fround$1463+2,___ftmul@f1+2
  4303  00E424  0E00               	movlw	0
  4304  00E426  6E18               	movwf	___ftmul@f2,c
  4305  00E428  0E00               	movlw	0
  4306  00E42A  6E19               	movwf	___ftmul@f2+1,c
  4307  00E42C  0E3F               	movlw	63
  4308  00E42E  6E1A               	movwf	___ftmul@f2+2,c
  4309  00E430  EC21  F06E         	call	___ftmul	;wreg free
  4310  00E434  D799               	goto	L6
  4311  00E436                     l3298:
  4312                           
  4313                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4314  00E436  502D               	movf	fround@prec,w,c
  4315  00E438  0D03               	mullw	3
  4316  00E43A  0EA2               	movlw	low __npowers_
  4317  00E43C  24F3               	addwf	prodl,w,c
  4318  00E43E  6EF6               	movwf	tblptrl,c
  4319  00E440  0EFE               	movlw	high __npowers_
  4320  00E442  20F4               	addwfc	prodh,w,c
  4321  00E444  6EF7               	movwf	tblptrh,c
  4322  00E446                     	if	0	;There are less than 3 active tblptr bytes
  4323  00E446                     	endif
  4324  00E446  0009               	tblrd		*+
  4325  00E448  CFF5 F015          	movff	tablat,___ftmul@f1
  4326  00E44C  0009               	tblrd		*+
  4327  00E44E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4328  00E452  000A               	tblrd		*-
  4329  00E454  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4330  00E458  0E00               	movlw	0
  4331  00E45A  6E18               	movwf	___ftmul@f2,c
  4332  00E45C  0E00               	movlw	0
  4333  00E45E  6E19               	movwf	___ftmul@f2+1,c
  4334  00E460  0E3F               	movlw	63
  4335  00E462  6E1A               	movwf	___ftmul@f2+2,c
  4336  00E464  EC21  F06E         	call	___ftmul	;wreg free
  4337  00E468  C015  F024         	movff	?___ftmul,?_fround
  4338  00E46C  C016  F025         	movff	?___ftmul+1,?_fround+1
  4339  00E470  C017  F026         	movff	?___ftmul+2,?_fround+2
  4340  00E474  0012               	return	
  4341  00E476                     __end_of_fround:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           postinc0	equ	0xFEE
  4350                           wreg	equ	0xFE8
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           postdec2	equ	0xFDD
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function ___wmul *****************
  4359 ;; Defined at:
  4360 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  multiplier      2   14[COMRAM] unsigned int 
  4363 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  product         2   18[COMRAM] unsigned int 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  2   14[COMRAM] unsigned int 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, prodl, prodh
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:        6 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_fround
  4385 ;;		_scale
  4386 ;;		_printf
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text6
  4391  00D5B4                     __ptext6:
  4392                           	opt stack 0
  4393  00D5B4                     ___wmul:
  4394                           	opt stack 28
  4395                           
  4396                           ;incstack = 0
  4397  00D5B4  500F               	movf	___wmul@multiplier,w,c
  4398  00D5B6  0211               	mulwf	___wmul@multiplicand,c
  4399  00D5B8  CFF3 F013          	movff	prodl,___wmul@product
  4400  00D5BC  CFF4 F014          	movff	prodh,___wmul@product+1
  4401  00D5C0  500F               	movf	___wmul@multiplier,w,c
  4402  00D5C2  0212               	mulwf	___wmul@multiplicand+1,c
  4403  00D5C4  50F3               	movf	prodl,w,c
  4404  00D5C6  2614               	addwf	___wmul@product+1,f,c
  4405  00D5C8  5010               	movf	___wmul@multiplier+1,w,c
  4406  00D5CA  0211               	mulwf	___wmul@multiplicand,c
  4407  00D5CC  50F3               	movf	prodl,w,c
  4408  00D5CE  2614               	addwf	___wmul@product+1,f,c
  4409  00D5D0  C013  F00F         	movff	___wmul@product,?___wmul
  4410  00D5D4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4411  00D5D8  0012               	return	
  4412  00D5DA                     __end_of___wmul:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           prodh	equ	0xFF4
  4419                           prodl	equ	0xFF3
  4420                           postinc0	equ	0xFEE
  4421                           wreg	equ	0xFE8
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___awmod *****************
  4430 ;; Defined at:
  4431 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  dividend        2    0[COMRAM] int 
  4434 ;;  divisor         2    2[COMRAM] int 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  sign            1    5[COMRAM] unsigned char 
  4437 ;;  counter         1    4[COMRAM] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  2    0[COMRAM] int 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;Total ram usage:        6 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_fround
  4457 ;;		_scale
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text7
  4462  00D79A                     __ptext7:
  4463                           	opt stack 0
  4464  00D79A                     ___awmod:
  4465                           	opt stack 28
  4466                           
  4467                           ;incstack = 0
  4468  00D79A  0E00               	movlw	0
  4469  00D79C  6E06               	movwf	___awmod@sign,c
  4470  00D79E  AE02               	btfss	___awmod@dividend+1,7,c
  4471  00D7A0  D006               	goto	l3222
  4472  00D7A2  6C01               	negf	___awmod@dividend,c
  4473  00D7A4  1E02               	comf	___awmod@dividend+1,f,c
  4474  00D7A6  B0D8               	btfsc	status,0,c
  4475  00D7A8  2A02               	incf	___awmod@dividend+1,f,c
  4476  00D7AA  0E01               	movlw	1
  4477  00D7AC  6E06               	movwf	___awmod@sign,c
  4478  00D7AE                     l3222:
  4479  00D7AE  AE04               	btfss	___awmod@divisor+1,7,c
  4480  00D7B0  D004               	goto	l3226
  4481  00D7B2  6C03               	negf	___awmod@divisor,c
  4482  00D7B4  1E04               	comf	___awmod@divisor+1,f,c
  4483  00D7B6  B0D8               	btfsc	status,0,c
  4484  00D7B8  2A04               	incf	___awmod@divisor+1,f,c
  4485  00D7BA                     l3226:
  4486  00D7BA  5003               	movf	___awmod@divisor,w,c
  4487  00D7BC  1004               	iorwf	___awmod@divisor+1,w,c
  4488  00D7BE  B4D8               	btfsc	status,2,c
  4489  00D7C0  D018               	goto	l3242
  4490  00D7C2  0E01               	movlw	1
  4491  00D7C4  6E05               	movwf	___awmod@counter,c
  4492  00D7C6  D004               	goto	l3232
  4493  00D7C8                     l3230:
  4494  00D7C8  90D8               	bcf	status,0,c
  4495  00D7CA  3603               	rlcf	___awmod@divisor,f,c
  4496  00D7CC  3604               	rlcf	___awmod@divisor+1,f,c
  4497  00D7CE  2A05               	incf	___awmod@counter,f,c
  4498  00D7D0                     l3232:
  4499  00D7D0  AE04               	btfss	___awmod@divisor+1,7,c
  4500  00D7D2  D7FA               	goto	l3230
  4501  00D7D4                     l3234:
  4502  00D7D4  5003               	movf	___awmod@divisor,w,c
  4503  00D7D6  5C01               	subwf	___awmod@dividend,w,c
  4504  00D7D8  5004               	movf	___awmod@divisor+1,w,c
  4505  00D7DA  5802               	subwfb	___awmod@dividend+1,w,c
  4506  00D7DC  A0D8               	btfss	status,0,c
  4507  00D7DE  D004               	goto	l3238
  4508  00D7E0  5003               	movf	___awmod@divisor,w,c
  4509  00D7E2  5E01               	subwf	___awmod@dividend,f,c
  4510  00D7E4  5004               	movf	___awmod@divisor+1,w,c
  4511  00D7E6  5A02               	subwfb	___awmod@dividend+1,f,c
  4512  00D7E8                     l3238:
  4513  00D7E8  90D8               	bcf	status,0,c
  4514  00D7EA  3204               	rrcf	___awmod@divisor+1,f,c
  4515  00D7EC  3203               	rrcf	___awmod@divisor,f,c
  4516  00D7EE  2E05               	decfsz	___awmod@counter,f,c
  4517  00D7F0  D7F1               	goto	l3234
  4518  00D7F2                     l3242:
  4519  00D7F2  5006               	movf	___awmod@sign,w,c
  4520  00D7F4  B4D8               	btfsc	status,2,c
  4521  00D7F6  D004               	goto	l3246
  4522  00D7F8  6C01               	negf	___awmod@dividend,c
  4523  00D7FA  1E02               	comf	___awmod@dividend+1,f,c
  4524  00D7FC  B0D8               	btfsc	status,0,c
  4525  00D7FE  2A02               	incf	___awmod@dividend+1,f,c
  4526  00D800                     l3246:
  4527  00D800  C001  F001         	movff	___awmod@dividend,?___awmod
  4528  00D804  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4529  00D808  0012               	return	
  4530  00D80A                     __end_of___awmod:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function ___awdiv *****************
  4548 ;; Defined at:
  4549 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  dividend        2    6[COMRAM] int 
  4552 ;;  divisor         2    8[COMRAM] int 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  quotient        2   12[COMRAM] int 
  4555 ;;  sign            1   11[COMRAM] unsigned char 
  4556 ;;  counter         1   10[COMRAM] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  2    6[COMRAM] int 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4566 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;Total ram usage:        8 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_fround
  4576 ;;		_scale
  4577 ;;		_printf
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           	psect	text8
  4582  00D90A                     __ptext8:
  4583                           	opt stack 0
  4584  00D90A                     ___awdiv:
  4585                           	opt stack 28
  4586                           
  4587                           ;incstack = 0
  4588  00D90A  0E00               	movlw	0
  4589  00D90C  6E0C               	movwf	___awdiv@sign,c
  4590  00D90E  AE0A               	btfss	___awdiv@divisor+1,7,c
  4591  00D910  D006               	goto	l3178
  4592  00D912  6C09               	negf	___awdiv@divisor,c
  4593  00D914  1E0A               	comf	___awdiv@divisor+1,f,c
  4594  00D916  B0D8               	btfsc	status,0,c
  4595  00D918  2A0A               	incf	___awdiv@divisor+1,f,c
  4596  00D91A  0E01               	movlw	1
  4597  00D91C  6E0C               	movwf	___awdiv@sign,c
  4598  00D91E                     l3178:
  4599  00D91E  AE08               	btfss	___awdiv@dividend+1,7,c
  4600  00D920  D006               	goto	l3184
  4601  00D922  6C07               	negf	___awdiv@dividend,c
  4602  00D924  1E08               	comf	___awdiv@dividend+1,f,c
  4603  00D926  B0D8               	btfsc	status,0,c
  4604  00D928  2A08               	incf	___awdiv@dividend+1,f,c
  4605  00D92A  0E01               	movlw	1
  4606  00D92C  1A0C               	xorwf	___awdiv@sign,f,c
  4607  00D92E                     l3184:
  4608  00D92E  0E00               	movlw	0
  4609  00D930  6E0E               	movwf	___awdiv@quotient+1,c
  4610  00D932  0E00               	movlw	0
  4611  00D934  6E0D               	movwf	___awdiv@quotient,c
  4612  00D936  5009               	movf	___awdiv@divisor,w,c
  4613  00D938  100A               	iorwf	___awdiv@divisor+1,w,c
  4614  00D93A  B4D8               	btfsc	status,2,c
  4615  00D93C  D01C               	goto	l3206
  4616  00D93E  0E01               	movlw	1
  4617  00D940  6E0B               	movwf	___awdiv@counter,c
  4618  00D942  D004               	goto	l3192
  4619  00D944                     l3190:
  4620  00D944  90D8               	bcf	status,0,c
  4621  00D946  3609               	rlcf	___awdiv@divisor,f,c
  4622  00D948  360A               	rlcf	___awdiv@divisor+1,f,c
  4623  00D94A  2A0B               	incf	___awdiv@counter,f,c
  4624  00D94C                     l3192:
  4625  00D94C  AE0A               	btfss	___awdiv@divisor+1,7,c
  4626  00D94E  D7FA               	goto	l3190
  4627  00D950                     l3194:
  4628  00D950  90D8               	bcf	status,0,c
  4629  00D952  360D               	rlcf	___awdiv@quotient,f,c
  4630  00D954  360E               	rlcf	___awdiv@quotient+1,f,c
  4631  00D956  5009               	movf	___awdiv@divisor,w,c
  4632  00D958  5C07               	subwf	___awdiv@dividend,w,c
  4633  00D95A  500A               	movf	___awdiv@divisor+1,w,c
  4634  00D95C  5808               	subwfb	___awdiv@dividend+1,w,c
  4635  00D95E  A0D8               	btfss	status,0,c
  4636  00D960  D005               	goto	l3202
  4637  00D962  5009               	movf	___awdiv@divisor,w,c
  4638  00D964  5E07               	subwf	___awdiv@dividend,f,c
  4639  00D966  500A               	movf	___awdiv@divisor+1,w,c
  4640  00D968  5A08               	subwfb	___awdiv@dividend+1,f,c
  4641  00D96A  800D               	bsf	___awdiv@quotient,0,c
  4642  00D96C                     l3202:
  4643  00D96C  90D8               	bcf	status,0,c
  4644  00D96E  320A               	rrcf	___awdiv@divisor+1,f,c
  4645  00D970  3209               	rrcf	___awdiv@divisor,f,c
  4646  00D972  2E0B               	decfsz	___awdiv@counter,f,c
  4647  00D974  D7ED               	goto	l3194
  4648  00D976                     l3206:
  4649  00D976  500C               	movf	___awdiv@sign,w,c
  4650  00D978  B4D8               	btfsc	status,2,c
  4651  00D97A  D004               	goto	l3210
  4652  00D97C  6C0D               	negf	___awdiv@quotient,c
  4653  00D97E  1E0E               	comf	___awdiv@quotient+1,f,c
  4654  00D980  B0D8               	btfsc	status,0,c
  4655  00D982  2A0E               	incf	___awdiv@quotient+1,f,c
  4656  00D984                     l3210:
  4657  00D984  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4658  00D988  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4659  00D98C  0012               	return	
  4660  00D98E                     __end_of___awdiv:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           prodh	equ	0xFF4
  4667                           prodl	equ	0xFF3
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function __tdiv_to_l_ *****************
  4678 ;; Defined at:
  4679 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  f1              3    0[COMRAM] float 
  4682 ;;  f2              3    3[COMRAM] float 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  quot            4    9[COMRAM] unsigned long 
  4685 ;;  exp1            1   14[COMRAM] unsigned char 
  4686 ;;  cntr            1   13[COMRAM] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  4    0[COMRAM] unsigned long 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4696 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;Total ram usage:       15 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_printf
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text9
  4710  00DF52                     __ptext9:
  4711                           	opt stack 0
  4712  00DF52                     __tdiv_to_l_:
  4713                           	opt stack 29
  4714                           
  4715                           ;incstack = 0
  4716  00DF52  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4717  00DF56  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4718  00DF58  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4719  00DF5A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4720  00DF5C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4721  00DF5E  E301               	bnc	u3001
  4722  00DF60  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4723  00DF62                     u3001:
  4724  00DF62  5007               	movf	??__tdiv_to_l_,w,c
  4725  00DF64  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4726  00DF66  500F               	movf	__tdiv_to_l_@exp1,w,c
  4727  00DF68  A4D8               	btfss	status,2,c
  4728  00DF6A  D009               	goto	l3358
  4729  00DF6C  0E00               	movlw	0
  4730  00DF6E  6E01               	movwf	?__tdiv_to_l_,c
  4731  00DF70  0E00               	movlw	0
  4732  00DF72  6E02               	movwf	?__tdiv_to_l_+1,c
  4733  00DF74  0E00               	movlw	0
  4734  00DF76  6E03               	movwf	?__tdiv_to_l_+2,c
  4735  00DF78  0E00               	movlw	0
  4736  00DF7A  6E04               	movwf	?__tdiv_to_l_+3,c
  4737  00DF7C  0012               	return	
  4738  00DF7E                     l3358:
  4739  00DF7E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4740  00DF82  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4741  00DF84  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4742  00DF86  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4743  00DF88  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4744  00DF8A  E301               	bnc	u3021
  4745  00DF8C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4746  00DF8E                     u3021:
  4747  00DF8E  5007               	movf	??__tdiv_to_l_,w,c
  4748  00DF90  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4749  00DF92  500E               	movf	__tdiv_to_l_@cntr,w,c
  4750  00DF94  A4D8               	btfss	status,2,c
  4751  00DF96  D009               	goto	l3364
  4752  00DF98  0E00               	movlw	0
  4753  00DF9A  6E01               	movwf	?__tdiv_to_l_,c
  4754  00DF9C  0E00               	movlw	0
  4755  00DF9E  6E02               	movwf	?__tdiv_to_l_+1,c
  4756  00DFA0  0E00               	movlw	0
  4757  00DFA2  6E03               	movwf	?__tdiv_to_l_+2,c
  4758  00DFA4  0E00               	movlw	0
  4759  00DFA6  6E04               	movwf	?__tdiv_to_l_+3,c
  4760  00DFA8  0012               	return	
  4761  00DFAA                     l3364:
  4762  00DFAA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4763  00DFAC  0EFF               	movlw	255
  4764  00DFAE  1601               	andwf	__tdiv_to_l_@f1,f,c
  4765  00DFB0  0EFF               	movlw	255
  4766  00DFB2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4767  00DFB4  0E00               	movlw	0
  4768  00DFB6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4769  00DFB8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4770  00DFBA  0EFF               	movlw	255
  4771  00DFBC  1604               	andwf	__tdiv_to_l_@f2,f,c
  4772  00DFBE  0EFF               	movlw	255
  4773  00DFC0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4774  00DFC2  0E00               	movlw	0
  4775  00DFC4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4776  00DFC6  0E00               	movlw	0
  4777  00DFC8  6E0A               	movwf	__tdiv_to_l_@quot,c
  4778  00DFCA  0E00               	movlw	0
  4779  00DFCC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4780  00DFCE  0E00               	movlw	0
  4781  00DFD0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4782  00DFD2  0E00               	movlw	0
  4783  00DFD4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4784  00DFD6  0E7F               	movlw	127
  4785  00DFD8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4786  00DFDA  500E               	movf	__tdiv_to_l_@cntr,w,c
  4787  00DFDC  0F98               	addlw	152
  4788  00DFDE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4789  00DFE0  0E18               	movlw	24
  4790  00DFE2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4791  00DFE4                     l912:
  4792  00DFE4  90D8               	bcf	status,0,c
  4793  00DFE6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4794  00DFE8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4795  00DFEA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4796  00DFEC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4797  00DFEE  5004               	movf	__tdiv_to_l_@f2,w,c
  4798  00DFF0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4799  00DFF2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4800  00DFF4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4801  00DFF6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4802  00DFF8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4803  00DFFA  A0D8               	btfss	status,0,c
  4804  00DFFC  D007               	goto	l913
  4805  00DFFE  5004               	movf	__tdiv_to_l_@f2,w,c
  4806  00E000  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4807  00E002  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4808  00E004  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4809  00E006  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4810  00E008  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4811  00E00A  800A               	bsf	__tdiv_to_l_@quot,0,c
  4812  00E00C                     l913:
  4813  00E00C  90D8               	bcf	status,0,c
  4814  00E00E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4815  00E010  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4816  00E012  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4817  00E014  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4818  00E016  D7E6               	goto	l912
  4819  00E018  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4820  00E01A  D016               	goto	l3398
  4821  00E01C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4822  00E01E  0A80               	xorlw	128
  4823  00E020  0F97               	addlw	151
  4824  00E022  B0D8               	btfsc	status,0,c
  4825  00E024  D009               	goto	l3394
  4826  00E026  0E00               	movlw	0
  4827  00E028  6E01               	movwf	?__tdiv_to_l_,c
  4828  00E02A  0E00               	movlw	0
  4829  00E02C  6E02               	movwf	?__tdiv_to_l_+1,c
  4830  00E02E  0E00               	movlw	0
  4831  00E030  6E03               	movwf	?__tdiv_to_l_+2,c
  4832  00E032  0E00               	movlw	0
  4833  00E034  6E04               	movwf	?__tdiv_to_l_+3,c
  4834  00E036  0012               	return	
  4835  00E038                     l3394:
  4836  00E038  90D8               	bcf	status,0,c
  4837  00E03A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4838  00E03C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4839  00E03E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4840  00E040  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4841  00E042  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4842  00E044  D7F9               	goto	l3394
  4843  00E046  D015               	goto	l919
  4844  00E048                     l3398:
  4845  00E048  0E17               	movlw	23
  4846  00E04A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4847  00E04C  D00F               	goto	l3406
  4848  00E04E  0E00               	movlw	0
  4849  00E050  6E01               	movwf	?__tdiv_to_l_,c
  4850  00E052  0E00               	movlw	0
  4851  00E054  6E02               	movwf	?__tdiv_to_l_+1,c
  4852  00E056  0E00               	movlw	0
  4853  00E058  6E03               	movwf	?__tdiv_to_l_+2,c
  4854  00E05A  0E00               	movlw	0
  4855  00E05C  6E04               	movwf	?__tdiv_to_l_+3,c
  4856  00E05E  0012               	return	
  4857  00E060                     l3404:
  4858  00E060  90D8               	bcf	status,0,c
  4859  00E062  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4860  00E064  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4861  00E066  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4862  00E068  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4863  00E06A  060F               	decf	__tdiv_to_l_@exp1,f,c
  4864  00E06C                     l3406:
  4865  00E06C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4866  00E06E  A4D8               	btfss	status,2,c
  4867  00E070  D7F7               	goto	l3404
  4868  00E072                     l919:
  4869  00E072  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4870  00E076  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4871  00E07A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4872  00E07E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4873  00E082  0012               	return		;funcret
  4874  00E084                     __end_of__tdiv_to_l_:
  4875                           	opt stack 0
  4876                           tblptru	equ	0xFF8
  4877                           tblptrh	equ	0xFF7
  4878                           tblptrl	equ	0xFF6
  4879                           tablat	equ	0xFF5
  4880                           prodh	equ	0xFF4
  4881                           prodl	equ	0xFF3
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function __div_to_l_ *****************
  4892 ;; Defined at:
  4893 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;  f1              3    0[COMRAM] unsigned long 
  4896 ;;  f2              3    3[COMRAM] unsigned long 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  quot            4    6[COMRAM] unsigned long 
  4899 ;;  exp1            1   11[COMRAM] unsigned char 
  4900 ;;  cntr            1   10[COMRAM] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  4    0[COMRAM] unsigned long 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4910 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;Total ram usage:       12 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		_printf
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text10
  4924  00DE2A                     __ptext10:
  4925                           	opt stack 0
  4926  00DE2A                     __div_to_l_:
  4927                           	opt stack 29
  4928                           
  4929                           ;incstack = 0
  4930  00DE2A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4931  00DE2C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4932  00DE2E  6E0C               	movwf	__div_to_l_@exp1,c
  4933  00DE30  500C               	movf	__div_to_l_@exp1,w,c
  4934  00DE32  A4D8               	btfss	status,2,c
  4935  00DE34  D009               	goto	l3414
  4936  00DE36  0E00               	movlw	0
  4937  00DE38  6E01               	movwf	?__div_to_l_,c
  4938  00DE3A  0E00               	movlw	0
  4939  00DE3C  6E02               	movwf	?__div_to_l_+1,c
  4940  00DE3E  0E00               	movlw	0
  4941  00DE40  6E03               	movwf	?__div_to_l_+2,c
  4942  00DE42  0E00               	movlw	0
  4943  00DE44  6E04               	movwf	?__div_to_l_+3,c
  4944  00DE46  0012               	return	
  4945  00DE48                     l3414:
  4946  00DE48  3406               	rlcf	__div_to_l_@f2+2,w,c
  4947  00DE4A  3407               	rlcf	__div_to_l_@f2+3,w,c
  4948  00DE4C  6E0B               	movwf	__div_to_l_@cntr,c
  4949  00DE4E  500B               	movf	__div_to_l_@cntr,w,c
  4950  00DE50  A4D8               	btfss	status,2,c
  4951  00DE52  D009               	goto	l3420
  4952  00DE54  0E00               	movlw	0
  4953  00DE56  6E01               	movwf	?__div_to_l_,c
  4954  00DE58  0E00               	movlw	0
  4955  00DE5A  6E02               	movwf	?__div_to_l_+1,c
  4956  00DE5C  0E00               	movlw	0
  4957  00DE5E  6E03               	movwf	?__div_to_l_+2,c
  4958  00DE60  0E00               	movlw	0
  4959  00DE62  6E04               	movwf	?__div_to_l_+3,c
  4960  00DE64  0012               	return	
  4961  00DE66                     l3420:
  4962  00DE66  8E03               	bsf	__div_to_l_@f1+2,7,c
  4963  00DE68  0EFF               	movlw	255
  4964  00DE6A  1601               	andwf	__div_to_l_@f1,f,c
  4965  00DE6C  0EFF               	movlw	255
  4966  00DE6E  1602               	andwf	__div_to_l_@f1+1,f,c
  4967  00DE70  0EFF               	movlw	255
  4968  00DE72  1603               	andwf	__div_to_l_@f1+2,f,c
  4969  00DE74  0E00               	movlw	0
  4970  00DE76  1604               	andwf	__div_to_l_@f1+3,f,c
  4971  00DE78  8E06               	bsf	__div_to_l_@f2+2,7,c
  4972  00DE7A  0EFF               	movlw	255
  4973  00DE7C  1604               	andwf	__div_to_l_@f2,f,c
  4974  00DE7E  0EFF               	movlw	255
  4975  00DE80  1605               	andwf	__div_to_l_@f2+1,f,c
  4976  00DE82  0EFF               	movlw	255
  4977  00DE84  1606               	andwf	__div_to_l_@f2+2,f,c
  4978  00DE86  0E00               	movlw	0
  4979  00DE88  1607               	andwf	__div_to_l_@f2+3,f,c
  4980  00DE8A  0E00               	movlw	0
  4981  00DE8C  6E07               	movwf	__div_to_l_@quot,c
  4982  00DE8E  0E00               	movlw	0
  4983  00DE90  6E08               	movwf	__div_to_l_@quot+1,c
  4984  00DE92  0E00               	movlw	0
  4985  00DE94  6E09               	movwf	__div_to_l_@quot+2,c
  4986  00DE96  0E00               	movlw	0
  4987  00DE98  6E0A               	movwf	__div_to_l_@quot+3,c
  4988  00DE9A  0E7F               	movlw	127
  4989  00DE9C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4990  00DE9E  500B               	movf	__div_to_l_@cntr,w,c
  4991  00DEA0  0FA0               	addlw	160
  4992  00DEA2  5E0C               	subwf	__div_to_l_@exp1,f,c
  4993  00DEA4  0E20               	movlw	32
  4994  00DEA6  6E0B               	movwf	__div_to_l_@cntr,c
  4995  00DEA8                     l3434:
  4996  00DEA8  90D8               	bcf	status,0,c
  4997  00DEAA  3607               	rlcf	__div_to_l_@quot,f,c
  4998  00DEAC  3608               	rlcf	__div_to_l_@quot+1,f,c
  4999  00DEAE  3609               	rlcf	__div_to_l_@quot+2,f,c
  5000  00DEB0  360A               	rlcf	__div_to_l_@quot+3,f,c
  5001  00DEB2  5004               	movf	__div_to_l_@f2,w,c
  5002  00DEB4  5C01               	subwf	__div_to_l_@f1,w,c
  5003  00DEB6  5005               	movf	__div_to_l_@f2+1,w,c
  5004  00DEB8  5802               	subwfb	__div_to_l_@f1+1,w,c
  5005  00DEBA  5006               	movf	__div_to_l_@f2+2,w,c
  5006  00DEBC  5803               	subwfb	__div_to_l_@f1+2,w,c
  5007  00DEBE  5007               	movf	__div_to_l_@f2+3,w,c
  5008  00DEC0  5804               	subwfb	__div_to_l_@f1+3,w,c
  5009  00DEC2  A0D8               	btfss	status,0,c
  5010  00DEC4  D009               	goto	l3442
  5011  00DEC6  5004               	movf	__div_to_l_@f2,w,c
  5012  00DEC8  5E01               	subwf	__div_to_l_@f1,f,c
  5013  00DECA  5005               	movf	__div_to_l_@f2+1,w,c
  5014  00DECC  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5015  00DECE  5006               	movf	__div_to_l_@f2+2,w,c
  5016  00DED0  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5017  00DED2  5007               	movf	__div_to_l_@f2+3,w,c
  5018  00DED4  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5019  00DED6  8007               	bsf	__div_to_l_@quot,0,c
  5020  00DED8                     l3442:
  5021  00DED8  90D8               	bcf	status,0,c
  5022  00DEDA  3601               	rlcf	__div_to_l_@f1,f,c
  5023  00DEDC  3602               	rlcf	__div_to_l_@f1+1,f,c
  5024  00DEDE  3603               	rlcf	__div_to_l_@f1+2,f,c
  5025  00DEE0  3604               	rlcf	__div_to_l_@f1+3,f,c
  5026  00DEE2  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5027  00DEE4  D7E1               	goto	l3434
  5028  00DEE6  AE0C               	btfss	__div_to_l_@exp1,7,c
  5029  00DEE8  D016               	goto	l3458
  5030  00DEEA  500C               	movf	__div_to_l_@exp1,w,c
  5031  00DEEC  0A80               	xorlw	128
  5032  00DEEE  0F9F               	addlw	159
  5033  00DEF0  B0D8               	btfsc	status,0,c
  5034  00DEF2  D009               	goto	l3454
  5035  00DEF4  0E00               	movlw	0
  5036  00DEF6  6E01               	movwf	?__div_to_l_,c
  5037  00DEF8  0E00               	movlw	0
  5038  00DEFA  6E02               	movwf	?__div_to_l_+1,c
  5039  00DEFC  0E00               	movlw	0
  5040  00DEFE  6E03               	movwf	?__div_to_l_+2,c
  5041  00DF00  0E00               	movlw	0
  5042  00DF02  6E04               	movwf	?__div_to_l_+3,c
  5043  00DF04  0012               	return	
  5044  00DF06                     l3454:
  5045  00DF06  90D8               	bcf	status,0,c
  5046  00DF08  320A               	rrcf	__div_to_l_@quot+3,f,c
  5047  00DF0A  3209               	rrcf	__div_to_l_@quot+2,f,c
  5048  00DF0C  3208               	rrcf	__div_to_l_@quot+1,f,c
  5049  00DF0E  3207               	rrcf	__div_to_l_@quot,f,c
  5050  00DF10  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5051  00DF12  D7F9               	goto	l3454
  5052  00DF14  D015               	goto	l815
  5053  00DF16                     l3458:
  5054  00DF16  0E1F               	movlw	31
  5055  00DF18  640C               	cpfsgt	__div_to_l_@exp1,c
  5056  00DF1A  D00F               	goto	l3466
  5057  00DF1C  0E00               	movlw	0
  5058  00DF1E  6E01               	movwf	?__div_to_l_,c
  5059  00DF20  0E00               	movlw	0
  5060  00DF22  6E02               	movwf	?__div_to_l_+1,c
  5061  00DF24  0E00               	movlw	0
  5062  00DF26  6E03               	movwf	?__div_to_l_+2,c
  5063  00DF28  0E00               	movlw	0
  5064  00DF2A  6E04               	movwf	?__div_to_l_+3,c
  5065  00DF2C  0012               	return	
  5066  00DF2E                     l3464:
  5067  00DF2E  90D8               	bcf	status,0,c
  5068  00DF30  3607               	rlcf	__div_to_l_@quot,f,c
  5069  00DF32  3608               	rlcf	__div_to_l_@quot+1,f,c
  5070  00DF34  3609               	rlcf	__div_to_l_@quot+2,f,c
  5071  00DF36  360A               	rlcf	__div_to_l_@quot+3,f,c
  5072  00DF38  060C               	decf	__div_to_l_@exp1,f,c
  5073  00DF3A                     l3466:
  5074  00DF3A  500C               	movf	__div_to_l_@exp1,w,c
  5075  00DF3C  A4D8               	btfss	status,2,c
  5076  00DF3E  D7F7               	goto	l3464
  5077  00DF40                     l815:
  5078  00DF40  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5079  00DF44  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5080  00DF48  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5081  00DF4C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5082  00DF50  0012               	return		;funcret
  5083  00DF52                     __end_of__div_to_l_:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           indf2	equ	0xFDF
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function ___llmod *****************
  5101 ;; Defined at:
  5102 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  dividend        4   13[COMRAM] unsigned long 
  5105 ;;  divisor         4   17[COMRAM] unsigned long 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  counter         1   21[COMRAM] unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  4   13[COMRAM] unsigned long 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5117 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;Total ram usage:        9 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_printf
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text11
  5131  00D734                     __ptext11:
  5132                           	opt stack 0
  5133  00D734                     ___llmod:
  5134                           	opt stack 29
  5135                           
  5136                           ;incstack = 0
  5137  00D734  5012               	movf	___llmod@divisor,w,c
  5138  00D736  1013               	iorwf	___llmod@divisor+1,w,c
  5139  00D738  1014               	iorwf	___llmod@divisor+2,w,c
  5140  00D73A  1015               	iorwf	___llmod@divisor+3,w,c
  5141  00D73C  B4D8               	btfsc	status,2,c
  5142  00D73E  D024               	goto	l1004
  5143  00D740  0E01               	movlw	1
  5144  00D742  6E16               	movwf	___llmod@counter,c
  5145  00D744  D006               	goto	l3618
  5146  00D746                     l3616:
  5147  00D746  90D8               	bcf	status,0,c
  5148  00D748  3612               	rlcf	___llmod@divisor,f,c
  5149  00D74A  3613               	rlcf	___llmod@divisor+1,f,c
  5150  00D74C  3614               	rlcf	___llmod@divisor+2,f,c
  5151  00D74E  3615               	rlcf	___llmod@divisor+3,f,c
  5152  00D750  2A16               	incf	___llmod@counter,f,c
  5153  00D752                     l3618:
  5154  00D752  AE15               	btfss	___llmod@divisor+3,7,c
  5155  00D754  D7F8               	goto	l3616
  5156  00D756                     l3620:
  5157  00D756  5012               	movf	___llmod@divisor,w,c
  5158  00D758  5C0E               	subwf	___llmod@dividend,w,c
  5159  00D75A  5013               	movf	___llmod@divisor+1,w,c
  5160  00D75C  580F               	subwfb	___llmod@dividend+1,w,c
  5161  00D75E  5014               	movf	___llmod@divisor+2,w,c
  5162  00D760  5810               	subwfb	___llmod@dividend+2,w,c
  5163  00D762  5015               	movf	___llmod@divisor+3,w,c
  5164  00D764  5811               	subwfb	___llmod@dividend+3,w,c
  5165  00D766  A0D8               	btfss	status,0,c
  5166  00D768  D008               	goto	l3624
  5167  00D76A  5012               	movf	___llmod@divisor,w,c
  5168  00D76C  5E0E               	subwf	___llmod@dividend,f,c
  5169  00D76E  5013               	movf	___llmod@divisor+1,w,c
  5170  00D770  5A0F               	subwfb	___llmod@dividend+1,f,c
  5171  00D772  5014               	movf	___llmod@divisor+2,w,c
  5172  00D774  5A10               	subwfb	___llmod@dividend+2,f,c
  5173  00D776  5015               	movf	___llmod@divisor+3,w,c
  5174  00D778  5A11               	subwfb	___llmod@dividend+3,f,c
  5175  00D77A                     l3624:
  5176  00D77A  90D8               	bcf	status,0,c
  5177  00D77C  3215               	rrcf	___llmod@divisor+3,f,c
  5178  00D77E  3214               	rrcf	___llmod@divisor+2,f,c
  5179  00D780  3213               	rrcf	___llmod@divisor+1,f,c
  5180  00D782  3212               	rrcf	___llmod@divisor,f,c
  5181  00D784  2E16               	decfsz	___llmod@counter,f,c
  5182  00D786  D7E7               	goto	l3620
  5183  00D788                     l1004:
  5184  00D788  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5185  00D78C  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5186  00D790  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5187  00D794  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5188  00D798  0012               	return		;funcret
  5189  00D79A                     __end_of___llmod:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           prodh	equ	0xFF4
  5196                           prodl	equ	0xFF3
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function ___lldiv *****************
  5207 ;; Defined at:
  5208 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  dividend        4    0[COMRAM] unsigned long 
  5211 ;;  divisor         4    4[COMRAM] unsigned long 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  quotient        4    8[COMRAM] unsigned long 
  5214 ;;  counter         1   12[COMRAM] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  4    0[COMRAM] unsigned long 
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5224 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;Total ram usage:       13 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_printf
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text12
  5238  00D888                     __ptext12:
  5239                           	opt stack 0
  5240  00D888                     ___lldiv:
  5241                           	opt stack 29
  5242                           
  5243                           ;incstack = 0
  5244  00D888  0E00               	movlw	0
  5245  00D88A  6E09               	movwf	___lldiv@quotient,c
  5246  00D88C  0E00               	movlw	0
  5247  00D88E  6E0A               	movwf	___lldiv@quotient+1,c
  5248  00D890  0E00               	movlw	0
  5249  00D892  6E0B               	movwf	___lldiv@quotient+2,c
  5250  00D894  0E00               	movlw	0
  5251  00D896  6E0C               	movwf	___lldiv@quotient+3,c
  5252  00D898  5005               	movf	___lldiv@divisor,w,c
  5253  00D89A  1006               	iorwf	___lldiv@divisor+1,w,c
  5254  00D89C  1007               	iorwf	___lldiv@divisor+2,w,c
  5255  00D89E  1008               	iorwf	___lldiv@divisor+3,w,c
  5256  00D8A0  B4D8               	btfsc	status,2,c
  5257  00D8A2  D02A               	goto	l994
  5258  00D8A4  0E01               	movlw	1
  5259  00D8A6  6E0D               	movwf	___lldiv@counter,c
  5260  00D8A8  D006               	goto	l3598
  5261  00D8AA                     l3596:
  5262  00D8AA  90D8               	bcf	status,0,c
  5263  00D8AC  3605               	rlcf	___lldiv@divisor,f,c
  5264  00D8AE  3606               	rlcf	___lldiv@divisor+1,f,c
  5265  00D8B0  3607               	rlcf	___lldiv@divisor+2,f,c
  5266  00D8B2  3608               	rlcf	___lldiv@divisor+3,f,c
  5267  00D8B4  2A0D               	incf	___lldiv@counter,f,c
  5268  00D8B6                     l3598:
  5269  00D8B6  AE08               	btfss	___lldiv@divisor+3,7,c
  5270  00D8B8  D7F8               	goto	l3596
  5271  00D8BA                     l3600:
  5272  00D8BA  90D8               	bcf	status,0,c
  5273  00D8BC  3609               	rlcf	___lldiv@quotient,f,c
  5274  00D8BE  360A               	rlcf	___lldiv@quotient+1,f,c
  5275  00D8C0  360B               	rlcf	___lldiv@quotient+2,f,c
  5276  00D8C2  360C               	rlcf	___lldiv@quotient+3,f,c
  5277  00D8C4  5005               	movf	___lldiv@divisor,w,c
  5278  00D8C6  5C01               	subwf	___lldiv@dividend,w,c
  5279  00D8C8  5006               	movf	___lldiv@divisor+1,w,c
  5280  00D8CA  5802               	subwfb	___lldiv@dividend+1,w,c
  5281  00D8CC  5007               	movf	___lldiv@divisor+2,w,c
  5282  00D8CE  5803               	subwfb	___lldiv@dividend+2,w,c
  5283  00D8D0  5008               	movf	___lldiv@divisor+3,w,c
  5284  00D8D2  5804               	subwfb	___lldiv@dividend+3,w,c
  5285  00D8D4  A0D8               	btfss	status,0,c
  5286  00D8D6  D009               	goto	l3608
  5287  00D8D8  5005               	movf	___lldiv@divisor,w,c
  5288  00D8DA  5E01               	subwf	___lldiv@dividend,f,c
  5289  00D8DC  5006               	movf	___lldiv@divisor+1,w,c
  5290  00D8DE  5A02               	subwfb	___lldiv@dividend+1,f,c
  5291  00D8E0  5007               	movf	___lldiv@divisor+2,w,c
  5292  00D8E2  5A03               	subwfb	___lldiv@dividend+2,f,c
  5293  00D8E4  5008               	movf	___lldiv@divisor+3,w,c
  5294  00D8E6  5A04               	subwfb	___lldiv@dividend+3,f,c
  5295  00D8E8  8009               	bsf	___lldiv@quotient,0,c
  5296  00D8EA                     l3608:
  5297  00D8EA  90D8               	bcf	status,0,c
  5298  00D8EC  3208               	rrcf	___lldiv@divisor+3,f,c
  5299  00D8EE  3207               	rrcf	___lldiv@divisor+2,f,c
  5300  00D8F0  3206               	rrcf	___lldiv@divisor+1,f,c
  5301  00D8F2  3205               	rrcf	___lldiv@divisor,f,c
  5302  00D8F4  2E0D               	decfsz	___lldiv@counter,f,c
  5303  00D8F6  D7E1               	goto	l3600
  5304  00D8F8                     l994:
  5305  00D8F8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5306  00D8FC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5307  00D900  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5308  00D904  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5309  00D908  0012               	return		;funcret
  5310  00D90A                     __end_of___lldiv:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           postinc0	equ	0xFEE
  5319                           wreg	equ	0xFE8
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function ___ftsub *****************
  5328 ;; Defined at:
  5329 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  f1              3   57[COMRAM] float 
  5332 ;;  f2              3   60[COMRAM] float 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  3   57[COMRAM] float 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        6 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    2
  5351 ;; This function calls:
  5352 ;;		___ftadd
  5353 ;; This function is called by:
  5354 ;;		_printf
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text13
  5359  00D64C                     __ptext13:
  5360                           	opt stack 0
  5361  00D64C                     ___ftsub:
  5362                           	opt stack 27
  5363                           
  5364                           ;incstack = 0
  5365  00D64C  503D               	movf	___ftsub@f2,w,c
  5366  00D64E  103E               	iorwf	___ftsub@f2+1,w,c
  5367  00D650  103F               	iorwf	___ftsub@f2+2,w,c
  5368  00D652  B4D8               	btfsc	status,2,c
  5369  00D654  D006               	goto	l3518
  5370  00D656  0E00               	movlw	0
  5371  00D658  1A3D               	xorwf	___ftsub@f2,f,c
  5372  00D65A  0E00               	movlw	0
  5373  00D65C  1A3E               	xorwf	___ftsub@f2+1,f,c
  5374  00D65E  0E80               	movlw	128
  5375  00D660  1A3F               	xorwf	___ftsub@f2+2,f,c
  5376  00D662                     l3518:
  5377  00D662  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5378  00D666  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5379  00D66A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5380  00D66E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5381  00D672  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5382  00D676  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5383  00D67A  EC42  F070         	call	___ftadd	;wreg free
  5384  00D67E  C02E  F03A         	movff	?___ftadd,?___ftsub
  5385  00D682  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5386  00D686  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5387  00D68A  0012               	return	
  5388  00D68C                     __end_of___ftsub:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function ___ftadd *****************
  5406 ;; Defined at:
  5407 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  f1              3   45[COMRAM] float 
  5410 ;;  f2              3   48[COMRAM] float 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  exp1            1   56[COMRAM] unsigned char 
  5413 ;;  exp2            1   55[COMRAM] unsigned char 
  5414 ;;  sign            1   54[COMRAM] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  3   45[COMRAM] float 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5424 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;Total ram usage:       12 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    1
  5431 ;; This function calls:
  5432 ;;		___ftpack
  5433 ;; This function is called by:
  5434 ;;		_printf
  5435 ;;		___ftsub
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text14
  5440  00E084                     __ptext14:
  5441                           	opt stack 0
  5442  00E084                     ___ftadd:
  5443                           	opt stack 27
  5444                           
  5445                           ;incstack = 0
  5446  00E084  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5447  00E088  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5448  00E08A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5449  00E08C  342F               	rlcf	___ftadd@f1+1,w,c
  5450  00E08E  3634               	rlcf	??___ftadd& (0+255),f,c
  5451  00E090  E301               	bnc	u2521
  5452  00E092  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5453  00E094                     u2521:
  5454  00E094  5034               	movf	??___ftadd,w,c
  5455  00E096  6E39               	movwf	___ftadd@exp1,c
  5456  00E098  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5457  00E09C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5458  00E09E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5459  00E0A0  3432               	rlcf	___ftadd@f2+1,w,c
  5460  00E0A2  3634               	rlcf	??___ftadd& (0+255),f,c
  5461  00E0A4  E301               	bnc	u2531
  5462  00E0A6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5463  00E0A8                     u2531:
  5464  00E0A8  5034               	movf	??___ftadd,w,c
  5465  00E0AA  6E38               	movwf	___ftadd@exp2,c
  5466  00E0AC  5039               	movf	___ftadd@exp1,w,c
  5467  00E0AE  B4D8               	btfsc	status,2,c
  5468  00E0B0  D00B               	goto	l870
  5469  00E0B2  5038               	movf	___ftadd@exp2,w,c
  5470  00E0B4  5C39               	subwf	___ftadd@exp1,w,c
  5471  00E0B6  B0D8               	btfsc	status,0,c
  5472  00E0B8  D00E               	goto	l3060
  5473  00E0BA  5039               	movf	___ftadd@exp1,w,c
  5474  00E0BC  0800               	sublw	0
  5475  00E0BE  2438               	addwf	___ftadd@exp2,w,c
  5476  00E0C0  6E34               	movwf	??___ftadd& (0+255),c
  5477  00E0C2  0E18               	movlw	24
  5478  00E0C4  6434               	cpfsgt	??___ftadd,c
  5479  00E0C6  D007               	goto	l3060
  5480  00E0C8                     l870:
  5481  00E0C8  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5482  00E0CC  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5483  00E0D0  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5484  00E0D4  0012               	return	
  5485  00E0D6                     l3060:
  5486  00E0D6  5038               	movf	___ftadd@exp2,w,c
  5487  00E0D8  B4D8               	btfsc	status,2,c
  5488  00E0DA  D00B               	goto	l874
  5489  00E0DC  5039               	movf	___ftadd@exp1,w,c
  5490  00E0DE  5C38               	subwf	___ftadd@exp2,w,c
  5491  00E0E0  B0D8               	btfsc	status,0,c
  5492  00E0E2  D00E               	goto	l3066
  5493  00E0E4  5038               	movf	___ftadd@exp2,w,c
  5494  00E0E6  0800               	sublw	0
  5495  00E0E8  2439               	addwf	___ftadd@exp1,w,c
  5496  00E0EA  6E34               	movwf	??___ftadd& (0+255),c
  5497  00E0EC  0E18               	movlw	24
  5498  00E0EE  6434               	cpfsgt	??___ftadd,c
  5499  00E0F0  D007               	goto	l3066
  5500  00E0F2                     l874:
  5501  00E0F2  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5502  00E0F6  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5503  00E0FA  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5504  00E0FE  0012               	return	
  5505  00E100                     l3066:
  5506  00E100  0E06               	movlw	6
  5507  00E102  6E37               	movwf	___ftadd@sign,c
  5508  00E104  BE30               	btfsc	___ftadd@f1+2,7,c
  5509  00E106  8E37               	bsf	___ftadd@sign,7,c
  5510  00E108  BE33               	btfsc	___ftadd@f2+2,7,c
  5511  00E10A  8C37               	bsf	___ftadd@sign,6,c
  5512  00E10C  8E2F               	bsf	___ftadd@f1+1,7,c
  5513  00E10E  0EFF               	movlw	255
  5514  00E110  162E               	andwf	___ftadd@f1,f,c
  5515  00E112  0EFF               	movlw	255
  5516  00E114  162F               	andwf	___ftadd@f1+1,f,c
  5517  00E116  0E00               	movlw	0
  5518  00E118  1630               	andwf	___ftadd@f1+2,f,c
  5519  00E11A  8E32               	bsf	___ftadd@f2+1,7,c
  5520  00E11C  0EFF               	movlw	255
  5521  00E11E  1631               	andwf	___ftadd@f2,f,c
  5522  00E120  0EFF               	movlw	255
  5523  00E122  1632               	andwf	___ftadd@f2+1,f,c
  5524  00E124  0E00               	movlw	0
  5525  00E126  1633               	andwf	___ftadd@f2+2,f,c
  5526  00E128  5038               	movf	___ftadd@exp2,w,c
  5527  00E12A  5C39               	subwf	___ftadd@exp1,w,c
  5528  00E12C  B0D8               	btfsc	status,0,c
  5529  00E12E  D01B               	goto	l3092
  5530  00E130                     l3082:
  5531  00E130  90D8               	bcf	status,0,c
  5532  00E132  3631               	rlcf	___ftadd@f2,f,c
  5533  00E134  3632               	rlcf	___ftadd@f2+1,f,c
  5534  00E136  3633               	rlcf	___ftadd@f2+2,f,c
  5535  00E138  0638               	decf	___ftadd@exp2,f,c
  5536  00E13A  5039               	movf	___ftadd@exp1,w,c
  5537  00E13C  1838               	xorwf	___ftadd@exp2,w,c
  5538  00E13E  B4D8               	btfsc	status,2,c
  5539  00E140  D00D               	goto	l3090
  5540  00E142  0637               	decf	___ftadd@sign,f,c
  5541  00E144  C037  F034         	movff	___ftadd@sign,??___ftadd
  5542  00E148  0E07               	movlw	7
  5543  00E14A  1634               	andwf	??___ftadd,f,c
  5544  00E14C  B4D8               	btfsc	status,2,c
  5545  00E14E  D006               	goto	l3090
  5546  00E150  D7EF               	goto	l3082
  5547  00E152                     l3088:
  5548  00E152  90D8               	bcf	status,0,c
  5549  00E154  3230               	rrcf	___ftadd@f1+2,f,c
  5550  00E156  322F               	rrcf	___ftadd@f1+1,f,c
  5551  00E158  322E               	rrcf	___ftadd@f1,f,c
  5552  00E15A  2A39               	incf	___ftadd@exp1,f,c
  5553  00E15C                     l3090:
  5554  00E15C  5038               	movf	___ftadd@exp2,w,c
  5555  00E15E  1839               	xorwf	___ftadd@exp1,w,c
  5556  00E160  B4D8               	btfsc	status,2,c
  5557  00E162  D01F               	goto	l885
  5558  00E164  D7F6               	goto	l3088
  5559  00E166                     l3092:
  5560  00E166  5039               	movf	___ftadd@exp1,w,c
  5561  00E168  5C38               	subwf	___ftadd@exp2,w,c
  5562  00E16A  B0D8               	btfsc	status,0,c
  5563  00E16C  D01A               	goto	l885
  5564  00E16E                     l3094:
  5565  00E16E  90D8               	bcf	status,0,c
  5566  00E170  362E               	rlcf	___ftadd@f1,f,c
  5567  00E172  362F               	rlcf	___ftadd@f1+1,f,c
  5568  00E174  3630               	rlcf	___ftadd@f1+2,f,c
  5569  00E176  0639               	decf	___ftadd@exp1,f,c
  5570  00E178  5039               	movf	___ftadd@exp1,w,c
  5571  00E17A  1838               	xorwf	___ftadd@exp2,w,c
  5572  00E17C  B4D8               	btfsc	status,2,c
  5573  00E17E  D00D               	goto	l3102
  5574  00E180  0637               	decf	___ftadd@sign,f,c
  5575  00E182  C037  F034         	movff	___ftadd@sign,??___ftadd
  5576  00E186  0E07               	movlw	7
  5577  00E188  1634               	andwf	??___ftadd,f,c
  5578  00E18A  B4D8               	btfsc	status,2,c
  5579  00E18C  D006               	goto	l3102
  5580  00E18E  D7EF               	goto	l3094
  5581  00E190                     l3100:
  5582  00E190  90D8               	bcf	status,0,c
  5583  00E192  3233               	rrcf	___ftadd@f2+2,f,c
  5584  00E194  3232               	rrcf	___ftadd@f2+1,f,c
  5585  00E196  3231               	rrcf	___ftadd@f2,f,c
  5586  00E198  2A38               	incf	___ftadd@exp2,f,c
  5587  00E19A                     l3102:
  5588  00E19A  5038               	movf	___ftadd@exp2,w,c
  5589  00E19C  1839               	xorwf	___ftadd@exp1,w,c
  5590  00E19E  A4D8               	btfss	status,2,c
  5591  00E1A0  D7F7               	goto	l3100
  5592  00E1A2                     l885:
  5593  00E1A2  AE37               	btfss	___ftadd@sign,7,c
  5594  00E1A4  D00C               	goto	l894
  5595  00E1A6  0EFF               	movlw	255
  5596  00E1A8  1A2E               	xorwf	___ftadd@f1,f,c
  5597  00E1AA  0EFF               	movlw	255
  5598  00E1AC  1A2F               	xorwf	___ftadd@f1+1,f,c
  5599  00E1AE  0EFF               	movlw	255
  5600  00E1B0  1A30               	xorwf	___ftadd@f1+2,f,c
  5601  00E1B2  0E01               	movlw	1
  5602  00E1B4  262E               	addwf	___ftadd@f1,f,c
  5603  00E1B6  0E00               	movlw	0
  5604  00E1B8  222F               	addwfc	___ftadd@f1+1,f,c
  5605  00E1BA  0E00               	movlw	0
  5606  00E1BC  2230               	addwfc	___ftadd@f1+2,f,c
  5607  00E1BE                     l894:
  5608  00E1BE  AC37               	btfss	___ftadd@sign,6,c
  5609  00E1C0  D00C               	goto	l3108
  5610  00E1C2  0EFF               	movlw	255
  5611  00E1C4  1A31               	xorwf	___ftadd@f2,f,c
  5612  00E1C6  0EFF               	movlw	255
  5613  00E1C8  1A32               	xorwf	___ftadd@f2+1,f,c
  5614  00E1CA  0EFF               	movlw	255
  5615  00E1CC  1A33               	xorwf	___ftadd@f2+2,f,c
  5616  00E1CE  0E01               	movlw	1
  5617  00E1D0  2631               	addwf	___ftadd@f2,f,c
  5618  00E1D2  0E00               	movlw	0
  5619  00E1D4  2232               	addwfc	___ftadd@f2+1,f,c
  5620  00E1D6  0E00               	movlw	0
  5621  00E1D8  2233               	addwfc	___ftadd@f2+2,f,c
  5622  00E1DA                     l3108:
  5623  00E1DA  0E00               	movlw	0
  5624  00E1DC  6E37               	movwf	___ftadd@sign,c
  5625  00E1DE  502E               	movf	___ftadd@f1,w,c
  5626  00E1E0  2631               	addwf	___ftadd@f2,f,c
  5627  00E1E2  502F               	movf	___ftadd@f1+1,w,c
  5628  00E1E4  2232               	addwfc	___ftadd@f2+1,f,c
  5629  00E1E6  5030               	movf	___ftadd@f1+2,w,c
  5630  00E1E8  2233               	addwfc	___ftadd@f2+2,f,c
  5631  00E1EA  AE33               	btfss	___ftadd@f2+2,7,c
  5632  00E1EC  D00E               	goto	l3118
  5633  00E1EE  0EFF               	movlw	255
  5634  00E1F0  1A31               	xorwf	___ftadd@f2,f,c
  5635  00E1F2  0EFF               	movlw	255
  5636  00E1F4  1A32               	xorwf	___ftadd@f2+1,f,c
  5637  00E1F6  0EFF               	movlw	255
  5638  00E1F8  1A33               	xorwf	___ftadd@f2+2,f,c
  5639  00E1FA  0E01               	movlw	1
  5640  00E1FC  2631               	addwf	___ftadd@f2,f,c
  5641  00E1FE  0E00               	movlw	0
  5642  00E200  2232               	addwfc	___ftadd@f2+1,f,c
  5643  00E202  0E00               	movlw	0
  5644  00E204  2233               	addwfc	___ftadd@f2+2,f,c
  5645  00E206  0E01               	movlw	1
  5646  00E208  6E37               	movwf	___ftadd@sign,c
  5647  00E20A                     l3118:
  5648  00E20A  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5649  00E20E  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5650  00E212  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5651  00E216  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5652  00E21A  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5653  00E21E  EC57  F06D         	call	___ftpack	;wreg free
  5654  00E222  C001  F02E         	movff	?___ftpack,?___ftadd
  5655  00E226  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5656  00E22A  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5657  00E22E  0012               	return	
  5658  00E230                     __end_of___ftadd:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           postdec2	equ	0xFDD
  5671                           fsr2h	equ	0xFDA
  5672                           fsr2l	equ	0xFD9
  5673                           status	equ	0xFD8
  5674                           
  5675 ;; *************** function ___ftneg *****************
  5676 ;; Defined at:
  5677 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  f1              3    0[COMRAM] float 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;		None
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  3    0[COMRAM] float 
  5684 ;; Registers used:
  5685 ;;		wreg, status,2, status,0
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5691 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;Total ram usage:        3 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_printf
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text15
  5705  00D590                     __ptext15:
  5706                           	opt stack 0
  5707  00D590                     ___ftneg:
  5708                           	opt stack 29
  5709                           
  5710                           ;incstack = 0
  5711  00D590  5001               	movf	___ftneg@f1,w,c
  5712  00D592  1002               	iorwf	___ftneg@f1+1,w,c
  5713  00D594  1003               	iorwf	___ftneg@f1+2,w,c
  5714  00D596  B4D8               	btfsc	status,2,c
  5715  00D598  D006               	goto	l944
  5716  00D59A  0E00               	movlw	0
  5717  00D59C  1A01               	xorwf	___ftneg@f1,f,c
  5718  00D59E  0E00               	movlw	0
  5719  00D5A0  1A02               	xorwf	___ftneg@f1+1,f,c
  5720  00D5A2  0E80               	movlw	128
  5721  00D5A4  1A03               	xorwf	___ftneg@f1+2,f,c
  5722  00D5A6                     l944:
  5723  00D5A6  C001  F001         	movff	___ftneg@f1,?___ftneg
  5724  00D5AA  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5725  00D5AE  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5726  00D5B2  0012               	return		;funcret
  5727  00D5B4                     __end_of___ftneg:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           postinc0	equ	0xFEE
  5736                           wreg	equ	0xFE8
  5737                           indf2	equ	0xFDF
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function ___ftge *****************
  5745 ;; Defined at:
  5746 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  ff1             3    0[COMRAM] float 
  5749 ;;  ff2             3    3[COMRAM] float 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;		None               void
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5761 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;Total ram usage:        9 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_printf
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text16
  5775  00DA1E                     __ptext16:
  5776                           	opt stack 0
  5777  00DA1E                     ___ftge:
  5778                           	opt stack 29
  5779                           
  5780                           ;incstack = 0
  5781  00DA1E  AE03               	btfss	___ftge@ff1+2,7,c
  5782  00DA20  D016               	goto	l3526
  5783  00DA22  C001  F007         	movff	___ftge@ff1,??___ftge
  5784  00DA26  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5785  00DA2A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5786  00DA2E  1E07               	comf	??___ftge,f,c
  5787  00DA30  1E08               	comf	??___ftge+1,f,c
  5788  00DA32  1E09               	comf	??___ftge+2,f,c
  5789  00DA34  2A07               	incf	??___ftge,f,c
  5790  00DA36  0E00               	movlw	0
  5791  00DA38  2208               	addwfc	??___ftge+1,f,c
  5792  00DA3A  2209               	addwfc	??___ftge+2,f,c
  5793  00DA3C  0E00               	movlw	0
  5794  00DA3E  2407               	addwf	??___ftge,w,c
  5795  00DA40  6E01               	movwf	___ftge@ff1,c
  5796  00DA42  0E00               	movlw	0
  5797  00DA44  2008               	addwfc	??___ftge+1,w,c
  5798  00DA46  6E02               	movwf	___ftge@ff1+1,c
  5799  00DA48  0E80               	movlw	128
  5800  00DA4A  2009               	addwfc	??___ftge+2,w,c
  5801  00DA4C  6E03               	movwf	___ftge@ff1+2,c
  5802  00DA4E                     l3526:
  5803  00DA4E  AE06               	btfss	___ftge@ff2+2,7,c
  5804  00DA50  D016               	goto	l3530
  5805  00DA52  C004  F007         	movff	___ftge@ff2,??___ftge
  5806  00DA56  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5807  00DA5A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5808  00DA5E  1E07               	comf	??___ftge,f,c
  5809  00DA60  1E08               	comf	??___ftge+1,f,c
  5810  00DA62  1E09               	comf	??___ftge+2,f,c
  5811  00DA64  2A07               	incf	??___ftge,f,c
  5812  00DA66  0E00               	movlw	0
  5813  00DA68  2208               	addwfc	??___ftge+1,f,c
  5814  00DA6A  2209               	addwfc	??___ftge+2,f,c
  5815  00DA6C  0E00               	movlw	0
  5816  00DA6E  2407               	addwf	??___ftge,w,c
  5817  00DA70  6E04               	movwf	___ftge@ff2,c
  5818  00DA72  0E00               	movlw	0
  5819  00DA74  2008               	addwfc	??___ftge+1,w,c
  5820  00DA76  6E05               	movwf	___ftge@ff2+1,c
  5821  00DA78  0E80               	movlw	128
  5822  00DA7A  2009               	addwfc	??___ftge+2,w,c
  5823  00DA7C  6E06               	movwf	___ftge@ff2+2,c
  5824  00DA7E                     l3530:
  5825  00DA7E  0E00               	movlw	0
  5826  00DA80  1A01               	xorwf	___ftge@ff1,f,c
  5827  00DA82  0E00               	movlw	0
  5828  00DA84  1A02               	xorwf	___ftge@ff1+1,f,c
  5829  00DA86  0E80               	movlw	128
  5830  00DA88  1A03               	xorwf	___ftge@ff1+2,f,c
  5831  00DA8A  0E00               	movlw	0
  5832  00DA8C  1A04               	xorwf	___ftge@ff2,f,c
  5833  00DA8E  0E00               	movlw	0
  5834  00DA90  1A05               	xorwf	___ftge@ff2+1,f,c
  5835  00DA92  0E80               	movlw	128
  5836  00DA94  1A06               	xorwf	___ftge@ff2+2,f,c
  5837  00DA96  5004               	movf	___ftge@ff2,w,c
  5838  00DA98  5C01               	subwf	___ftge@ff1,w,c
  5839  00DA9A  5005               	movf	___ftge@ff2+1,w,c
  5840  00DA9C  5802               	subwfb	___ftge@ff1+1,w,c
  5841  00DA9E  5006               	movf	___ftge@ff2+2,w,c
  5842  00DAA0  5803               	subwfb	___ftge@ff1+2,w,c
  5843  00DAA2  B0D8               	btfsc	status,0,c
  5844  00DAA4  D002               	goto	l3536
  5845  00DAA6  90D8               	bcf	status,0,c
  5846  00DAA8  0012               	return	
  5847  00DAAA                     l3536:
  5848  00DAAA  80D8               	bsf	status,0,c
  5849  00DAAC  0012               	return	
  5850  00DAAE                     __end_of___ftge:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _initSD *****************
  5868 ;; Defined at:
  5869 ;;		line 458 in file "SD_PIC.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  tempSize        4   90[COMRAM] unsigned long 
  5874 ;;  tempSize        4   70[COMRAM] unsigned long 
  5875 ;;  arr_response   16   74[COMRAM] unsigned char [16]
  5876 ;;  argument        4   64[COMRAM] unsigned long 
  5877 ;;  i               1   95[COMRAM] unsigned char 
  5878 ;;  response        1   94[COMRAM] unsigned char 
  5879 ;;  last_OSCTUNE    1   69[COMRAM] unsigned char 
  5880 ;;  last_OSCCON     1   68[COMRAM] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:       39 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    4
  5897 ;; This function calls:
  5898 ;;		_SD_ACMD
  5899 ;;		_SD_Command
  5900 ;;		___ftdiv
  5901 ;;		___ftmul
  5902 ;;		___fttol
  5903 ;;		___lltoft
  5904 ;;		___lwtoft
  5905 ;;		_spiInit
  5906 ;;		_spiReceive
  5907 ;;		_spiSend
  5908 ;; This function is called by:
  5909 ;;		_main
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text17
  5914  00ECBE                     __ptext17:
  5915                           	opt stack 0
  5916  00ECBE                     _initSD:
  5917                           	opt stack 26
  5918                           
  5919                           ;SD_PIC.c: 467: unsigned char last_OSCCON = OSCCON;
  5920                           
  5921                           ;incstack = 0
  5922  00ECBE  CFD3 F045          	movff	4051,initSD@last_OSCCON	;volatile
  5923                           
  5924                           ;SD_PIC.c: 468: unsigned char last_OSCTUNE = OSCTUNE;
  5925  00ECC2  CF9B F046          	movff	3995,initSD@last_OSCTUNE	;volatile
  5926                           
  5927                           ;SD_PIC.c: 469: unsigned char response;
  5928                           ;SD_PIC.c: 470: unsigned char i;
  5929                           ;SD_PIC.c: 471: unsigned char arr_response[16] = {0};
  5930  00ECC6  EE20  F0AE         	lfsr	2,initSD@F3023
  5931  00ECCA  EE10  F04B         	lfsr	1,initSD@arr_response
  5932  00ECCE  0E0F               	movlw	15
  5933  00ECD0                     u3411:
  5934  00ECD0  CFDB FFE3          	movff	plusw2,plusw1
  5935  00ECD4  06E8               	decf	wreg,f,c
  5936  00ECD6  E2FC               	bc	u3411
  5937                           
  5938                           ;SD_PIC.c: 478: OSCTUNEbits.TUN = 0b000000;
  5939  00ECD8  909B               	bcf	3995,0,c	;volatile
  5940  00ECDA  929B               	bcf	3995,1,c	;volatile
  5941  00ECDC  949B               	bcf	3995,2,c	;volatile
  5942  00ECDE  969B               	bcf	3995,3,c	;volatile
  5943  00ECE0  989B               	bcf	3995,4,c	;volatile
  5944                           
  5945                           ;SD_PIC.c: 479: OSCCONbits.IRCF = 0b110;
  5946  00ECE2  50D3               	movf	4051,w,c	;volatile
  5947  00ECE4  0B8F               	andlw	-113
  5948  00ECE6  0960               	iorlw	96
  5949  00ECE8  6ED3               	movwf	4051,c	;volatile
  5950                           
  5951                           ;SD_PIC.c: 480: OSCCONbits.SCS = 0b11;
  5952  00ECEA  0E03               	movlw	3
  5953  00ECEC  12D3               	iorwf	4051,f,c	;volatile
  5954                           
  5955                           ;SD_PIC.c: 481: OSCTUNEbits.PLLEN = 1;
  5956  00ECEE  8C9B               	bsf	3995,6,c	;volatile
  5957                           
  5958                           ;SD_PIC.c: 484: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  5959  00ECF0  D004               	goto	l3672
  5960  00ECF2                     l3670:
  5961  00ECF2  0E42               	movlw	66
  5962  00ECF4                     u4917:
  5963  00ECF4  2EE8               	decfsz	wreg,f,c
  5964  00ECF6  D7FE               	bra	u4917
  5965  00ECF8  D000               	nop2	
  5966  00ECFA                     l3672:
  5967  00ECFA  A4D3               	btfss	4051,2,c	;volatile
  5968  00ECFC  D7FA               	goto	l3670
  5969                           
  5970                           ;SD_PIC.c: 487: spiInit(64);
  5971  00ECFE  0E40               	movlw	64
  5972  00ED00  ECED  F06A         	call	_spiInit
  5973                           
  5974                           ;SD_PIC.c: 491: _delay((unsigned long)((20)*(40000000/4000.0)));
  5975  00ED04  0E02               	movlw	2
  5976  00ED06  6E3B               	movwf	(??_initSD+1)& (0+255),c
  5977  00ED08  0E04               	movlw	4
  5978  00ED0A  6E3A               	movwf	??_initSD& (0+255),c
  5979  00ED0C  0EBA               	movlw	186
  5980  00ED0E                     u4927:
  5981  00ED0E  2EE8               	decfsz	wreg,f,c
  5982  00ED10  D7FE               	bra	u4927
  5983  00ED12  2E3A               	decfsz	??_initSD& (0+255),f,c
  5984  00ED14  D7FC               	bra	u4927
  5985  00ED16  2E3B               	decfsz	(??_initSD+1)& (0+255),f,c
  5986  00ED18  D7FA               	bra	u4927
  5987  00ED1A  D000               	nop2	
  5988                           
  5989                           ;SD_PIC.c: 494: LATEbits.LATE2 = 1;
  5990  00ED1C  848D               	bsf	3981,2,c	;volatile
  5991                           
  5992                           ;SD_PIC.c: 495: TRISEbits.TRISE2 = 0;
  5993  00ED1E  9496               	bcf	3990,2,c	;volatile
  5994                           
  5995                           ;SD_PIC.c: 498: for(i = 0; i < 10; i++){
  5996  00ED20  0E00               	movlw	0
  5997  00ED22  6E60               	movwf	initSD@i,c
  5998  00ED24                     l3684:
  5999  00ED24  0E09               	movlw	9
  6000  00ED26  6460               	cpfsgt	initSD@i,c
  6001  00ED28  D001               	goto	l3688
  6002  00ED2A  D005               	goto	l422
  6003  00ED2C                     l3688:
  6004                           
  6005                           ;SD_PIC.c: 499: spiSend(0xFF);
  6006  00ED2C  0EFF               	movlw	255
  6007  00ED2E  EC6F  F06A         	call	_spiSend
  6008  00ED32  2A60               	incf	initSD@i,f,c
  6009  00ED34  D7F7               	goto	l3684
  6010  00ED36                     l422:
  6011                           
  6012                           ;SD_PIC.c: 500: }
  6013                           ;SD_PIC.c: 502: LATEbits.LATE2 = 0;
  6014  00ED36  948D               	bcf	3981,2,c	;volatile
  6015  00ED38                     l3694:
  6016  00ED38  0E00               	movlw	0
  6017  00ED3A  6E04               	movwf	SD_Command@arg,c
  6018  00ED3C  0E00               	movlw	0
  6019  00ED3E  6E05               	movwf	SD_Command@arg+1,c
  6020  00ED40  0E00               	movlw	0
  6021  00ED42  6E06               	movwf	SD_Command@arg+2,c
  6022  00ED44  0E00               	movlw	0
  6023  00ED46  6E07               	movwf	SD_Command@arg+3,c
  6024  00ED48  0E04               	movlw	low _CMD0
  6025  00ED4A  6EF6               	movwf	tblptrl,c
  6026  00ED4C                     	if	1	;There is more than 1 active tblptr byte
  6027  00ED4C  0EFF               	movlw	high _CMD0
  6028  00ED4E  6EF7               	movwf	tblptrh,c
  6029  00ED50                     	endif
  6030  00ED50                     	if	0	;There are less than 3 active tblptr bytes
  6031  00ED50                     	endif
  6032  00ED50  0008               	tblrd		*
  6033  00ED52  50F5               	movf	tablat,w,c
  6034  00ED54  ECC7  F06C         	call	_SD_Command
  6035  00ED58  6E3A               	movwf	??_initSD& (0+255),c
  6036  00ED5A  0EED               	movlw	low _R1_IDLE_STATE
  6037  00ED5C  6EF6               	movwf	tblptrl,c
  6038  00ED5E                     	if	1	;There is more than 1 active tblptr byte
  6039  00ED5E  0EFE               	movlw	high _R1_IDLE_STATE
  6040  00ED60  6EF7               	movwf	tblptrh,c
  6041  00ED62                     	endif
  6042  00ED62                     	if	0	;There are less than 3 active tblptr bytes
  6043  00ED62                     	endif
  6044  00ED62  0008               	tblrd		*
  6045  00ED64  50F5               	movf	tablat,w,c
  6046  00ED66  183A               	xorwf	??_initSD,w,c
  6047  00ED68  A4D8               	btfss	status,2,c
  6048  00ED6A  D7E6               	goto	l3694
  6049  00ED6C                     l3696:
  6050                           
  6051                           ;SD_PIC.c: 516: response = SD_Command(CMD8, 0x01AA);
  6052  00ED6C  0EAA               	movlw	170
  6053  00ED6E  6E04               	movwf	SD_Command@arg,c
  6054  00ED70  0E01               	movlw	1
  6055  00ED72  6E05               	movwf	SD_Command@arg+1,c
  6056  00ED74  0E00               	movlw	0
  6057  00ED76  6E06               	movwf	SD_Command@arg+2,c
  6058  00ED78  0E00               	movlw	0
  6059  00ED7A  6E07               	movwf	SD_Command@arg+3,c
  6060  00ED7C  0E01               	movlw	low _CMD8
  6061  00ED7E  6EF6               	movwf	tblptrl,c
  6062  00ED80                     	if	1	;There is more than 1 active tblptr byte
  6063  00ED80  0EFF               	movlw	high _CMD8
  6064  00ED82  6EF7               	movwf	tblptrh,c
  6065  00ED84                     	endif
  6066  00ED84                     	if	0	;There are less than 3 active tblptr bytes
  6067  00ED84                     	endif
  6068  00ED84  0008               	tblrd		*
  6069  00ED86  50F5               	movf	tablat,w,c
  6070  00ED88  ECC7  F06C         	call	_SD_Command
  6071  00ED8C  6E5F               	movwf	initSD@response,c
  6072                           
  6073                           ;SD_PIC.c: 519: LATEbits.LATE2 = 0;
  6074  00ED8E  948D               	bcf	3981,2,c	;volatile
  6075                           
  6076                           ;SD_PIC.c: 520: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  6077  00ED90  0E00               	movlw	0
  6078  00ED92  6E60               	movwf	initSD@i,c
  6079  00ED94                     l3702:
  6080  00ED94  0E03               	movlw	3
  6081  00ED96  6460               	cpfsgt	initSD@i,c
  6082  00ED98  D001               	goto	l3706
  6083  00ED9A  D00D               	goto	l428
  6084  00ED9C                     l3706:
  6085  00ED9C  5060               	movf	initSD@i,w,c
  6086  00ED9E  0D01               	mullw	1
  6087  00EDA0  0E4B               	movlw	low initSD@arr_response
  6088  00EDA2  24F3               	addwf	prodl,w,c
  6089  00EDA4  6ED9               	movwf	fsr2l,c
  6090  00EDA6  0E00               	movlw	high initSD@arr_response
  6091  00EDA8  20F4               	addwfc	prodh,w,c
  6092  00EDAA  6EDA               	movwf	fsr2h,c
  6093  00EDAC  EC6B  F06A         	call	_spiReceive	;wreg free
  6094  00EDB0  6EDF               	movwf	indf2,c
  6095  00EDB2  2A60               	incf	initSD@i,f,c
  6096  00EDB4  D7EF               	goto	l3702
  6097  00EDB6                     l428:
  6098                           
  6099                           ;SD_PIC.c: 521: LATEbits.LATE2 = 1;
  6100  00EDB6  848D               	bsf	3981,2,c	;volatile
  6101                           
  6102                           ;SD_PIC.c: 523: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6103  00EDB8  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6104  00EDBA  6EF6               	movwf	tblptrl,c
  6105  00EDBC                     	if	1	;There is more than 1 active tblptr byte
  6106  00EDBC  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6107  00EDBE  6EF7               	movwf	tblptrh,c
  6108  00EDC0                     	endif
  6109  00EDC0                     	if	0	;There are less than 3 active tblptr bytes
  6110  00EDC0                     	endif
  6111  00EDC0  0008               	tblrd		*
  6112  00EDC2  CFF5 F03A          	movff	tablat,??_initSD
  6113  00EDC6  505F               	movf	initSD@response,w,c
  6114  00EDC8  143A               	andwf	??_initSD,w,c
  6115  00EDCA  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6116  00EDCC  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6117  00EDCE  6EF6               	movwf	tblptrl,c
  6118  00EDD0                     	if	1	;There is more than 1 active tblptr byte
  6119  00EDD0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6120  00EDD2  6EF7               	movwf	tblptrh,c
  6121  00EDD4                     	endif
  6122  00EDD4                     	if	0	;There are less than 3 active tblptr bytes
  6123  00EDD4                     	endif
  6124  00EDD4  0008               	tblrd		*
  6125  00EDD6  50F5               	movf	tablat,w,c
  6126  00EDD8  183B               	xorwf	??_initSD+1,w,c
  6127  00EDDA  A4D8               	btfss	status,2,c
  6128  00EDDC  D02C               	goto	l3738
  6129                           
  6130                           ;SD_PIC.c: 526: SDCard.SDversion = 1;
  6131  00EDDE  0E01               	movlw	1
  6132  00EDE0  0100               	movlb	0	; () banked
  6133  00EDE2  6F80               	movwf	_SDCard& (0+255),b
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;SD_PIC.c: 529: SD_Command(CMD58, 0);
  6137  00EDE4  0E00               	movlw	0
  6138  00EDE6  6E04               	movwf	SD_Command@arg,c
  6139  00EDE8  0E00               	movlw	0
  6140  00EDEA  6E05               	movwf	SD_Command@arg+1,c
  6141  00EDEC  0E00               	movlw	0
  6142  00EDEE  6E06               	movwf	SD_Command@arg+2,c
  6143  00EDF0  0E00               	movlw	0
  6144  00EDF2  6E07               	movwf	SD_Command@arg+3,c
  6145  00EDF4  0EF2               	movlw	low _CMD58
  6146  00EDF6  6EF6               	movwf	tblptrl,c
  6147  00EDF8                     	if	1	;There is more than 1 active tblptr byte
  6148  00EDF8  0EFE               	movlw	high _CMD58
  6149  00EDFA  6EF7               	movwf	tblptrh,c
  6150  00EDFC                     	endif
  6151  00EDFC                     	if	0	;There are less than 3 active tblptr bytes
  6152  00EDFC                     	endif
  6153  00EDFC  0008               	tblrd		*
  6154  00EDFE  50F5               	movf	tablat,w,c
  6155  00EE00  ECC7  F06C         	call	_SD_Command
  6156                           
  6157                           ;SD_PIC.c: 530: LATEbits.LATE2 = 0;
  6158  00EE04  948D               	bcf	3981,2,c	;volatile
  6159                           
  6160                           ;SD_PIC.c: 531: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  6161  00EE06  0E00               	movlw	0
  6162  00EE08  6E60               	movwf	initSD@i,c
  6163  00EE0A                     l3722:
  6164  00EE0A  0E03               	movlw	3
  6165  00EE0C  6460               	cpfsgt	initSD@i,c
  6166  00EE0E  D001               	goto	l3726
  6167  00EE10  D00D               	goto	l431
  6168  00EE12                     l3726:
  6169  00EE12  5060               	movf	initSD@i,w,c
  6170  00EE14  0D01               	mullw	1
  6171  00EE16  0E4B               	movlw	low initSD@arr_response
  6172  00EE18  24F3               	addwf	prodl,w,c
  6173  00EE1A  6ED9               	movwf	fsr2l,c
  6174  00EE1C  0E00               	movlw	high initSD@arr_response
  6175  00EE1E  20F4               	addwfc	prodh,w,c
  6176  00EE20  6EDA               	movwf	fsr2h,c
  6177  00EE22  EC6B  F06A         	call	_spiReceive	;wreg free
  6178  00EE26  6EDF               	movwf	indf2,c
  6179  00EE28  2A60               	incf	initSD@i,f,c
  6180  00EE2A  D7EF               	goto	l3722
  6181  00EE2C                     l431:
  6182                           
  6183                           ;SD_PIC.c: 532: LATEbits.LATE2 = 1;
  6184  00EE2C  848D               	bsf	3981,2,c	;volatile
  6185                           
  6186                           ;SD_PIC.c: 534: if(arr_response[2] != 0x01){
  6187  00EE2E  044D               	decf	initSD@arr_response+2,w,c
  6188  00EE30  A4D8               	btfss	status,2,c
  6189  00EE32  0012               	return	
  6190  00EE34  D012               	goto	l3748
  6191  00EE36                     l3738:
  6192                           
  6193                           ;SD_PIC.c: 540: else if(response == R1_IDLE_STATE){
  6194  00EE36  0EED               	movlw	low _R1_IDLE_STATE
  6195  00EE38  6EF6               	movwf	tblptrl,c
  6196  00EE3A                     	if	1	;There is more than 1 active tblptr byte
  6197  00EE3A  0EFE               	movlw	high _R1_IDLE_STATE
  6198  00EE3C  6EF7               	movwf	tblptrh,c
  6199  00EE3E                     	endif
  6200  00EE3E                     	if	0	;There are less than 3 active tblptr bytes
  6201  00EE3E                     	endif
  6202  00EE3E  0008               	tblrd		*
  6203  00EE40  50F5               	movf	tablat,w,c
  6204  00EE42  625F               	cpfseq	initSD@response,c
  6205  00EE44  D793               	goto	l3696
  6206                           
  6207                           ;SD_PIC.c: 541: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  6208  00EE46  044D               	decf	initSD@arr_response+2,w,c
  6209  00EE48  A4D8               	btfss	status,2,c
  6210  00EE4A  0012               	return	
  6211  00EE4C  0EAA               	movlw	170
  6212  00EE4E  184E               	xorwf	initSD@arr_response+3,w,c
  6213  00EE50  A4D8               	btfss	status,2,c
  6214  00EE52  0012               	return	
  6215                           
  6216                           ;SD_PIC.c: 544: SDCard.SDversion = 2;
  6217  00EE54  0E02               	movlw	2
  6218  00EE56  0100               	movlb	0	; () banked
  6219  00EE58  6F80               	movwf	_SDCard& (0+255),b
  6220  00EE5A                     l3748:
  6221                           
  6222                           ;SD_PIC.c: 550: }
  6223                           ;SD_PIC.c: 551: }
  6224                           ;SD_PIC.c: 552: }
  6225                           ;SD_PIC.c: 561: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  6226  00EE5A  0100               	movlb	0	; () banked
  6227  00EE5C  0580               	decf	_SDCard& (0+255),w,b
  6228  00EE5E  B4D8               	btfsc	status,2,c
  6229  00EE60  D008               	goto	l3752
  6230                           
  6231                           ; BSR set to: 0
  6232  00EE62  0E00               	movlw	0
  6233  00EE64  6E41               	movwf	initSD@argument,c
  6234  00EE66  0E00               	movlw	0
  6235  00EE68  6E42               	movwf	initSD@argument+1,c
  6236  00EE6A  0E00               	movlw	0
  6237  00EE6C  6E43               	movwf	initSD@argument+2,c
  6238  00EE6E  0E40               	movlw	64
  6239  00EE70  D007               	goto	L7
  6240  00EE72                     l3752:
  6241                           
  6242                           ; BSR set to: 0
  6243  00EE72  0E00               	movlw	0
  6244  00EE74  6E41               	movwf	initSD@argument,c
  6245  00EE76  0E00               	movlw	0
  6246  00EE78  6E42               	movwf	initSD@argument+1,c
  6247  00EE7A  0E00               	movlw	0
  6248  00EE7C  6E43               	movwf	initSD@argument+2,c
  6249  00EE7E  0E00               	movlw	0
  6250  00EE80                     L7:
  6251  00EE80  6E44               	movwf	initSD@argument+3,c
  6252  00EE82                     l3754:
  6253                           
  6254                           ;SD_PIC.c: 564: response = SD_ACMD(ACMD41, argument);
  6255  00EE82  C041  F00D         	movff	initSD@argument,SD_ACMD@arg
  6256  00EE86  C042  F00E         	movff	initSD@argument+1,SD_ACMD@arg+1
  6257  00EE8A  C043  F00F         	movff	initSD@argument+2,SD_ACMD@arg+2
  6258  00EE8E  C044  F010         	movff	initSD@argument+3,SD_ACMD@arg+3
  6259  00EE92  0EEF               	movlw	low _ACMD41
  6260  00EE94  6EF6               	movwf	tblptrl,c
  6261  00EE96                     	if	1	;There is more than 1 active tblptr byte
  6262  00EE96  0EFE               	movlw	high _ACMD41
  6263  00EE98  6EF7               	movwf	tblptrh,c
  6264  00EE9A                     	endif
  6265  00EE9A                     	if	0	;There are less than 3 active tblptr bytes
  6266  00EE9A                     	endif
  6267  00EE9A  0008               	tblrd		*
  6268  00EE9C  50F5               	movf	tablat,w,c
  6269  00EE9E  EC09  F06B         	call	_SD_ACMD
  6270  00EEA2  6E5F               	movwf	initSD@response,c
  6271                           
  6272                           ;SD_PIC.c: 565: }while((response != R1_READY_STATE) && ((response & R1_ILLEGAL_COMMAND) 
      +                          != R1_ILLEGAL_COMMAND));
  6273  00EEA4  0EEE               	movlw	low _R1_READY_STATE
  6274  00EEA6  6EF6               	movwf	tblptrl,c
  6275  00EEA8                     	if	1	;There is more than 1 active tblptr byte
  6276  00EEA8  0EFE               	movlw	high _R1_READY_STATE
  6277  00EEAA  6EF7               	movwf	tblptrh,c
  6278  00EEAC                     	endif
  6279  00EEAC                     	if	0	;There are less than 3 active tblptr bytes
  6280  00EEAC                     	endif
  6281  00EEAC  0008               	tblrd		*
  6282  00EEAE  50F5               	movf	tablat,w,c
  6283  00EEB0  185F               	xorwf	initSD@response,w,c
  6284  00EEB2  B4D8               	btfsc	status,2,c
  6285  00EEB4  D013               	goto	l3760
  6286  00EEB6  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6287  00EEB8  6EF6               	movwf	tblptrl,c
  6288  00EEBA                     	if	1	;There is more than 1 active tblptr byte
  6289  00EEBA  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6290  00EEBC  6EF7               	movwf	tblptrh,c
  6291  00EEBE                     	endif
  6292  00EEBE                     	if	0	;There are less than 3 active tblptr bytes
  6293  00EEBE                     	endif
  6294  00EEBE  0008               	tblrd		*
  6295  00EEC0  CFF5 F03A          	movff	tablat,??_initSD
  6296  00EEC4  505F               	movf	initSD@response,w,c
  6297  00EEC6  143A               	andwf	??_initSD,w,c
  6298  00EEC8  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6299  00EECA  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6300  00EECC  6EF6               	movwf	tblptrl,c
  6301  00EECE                     	if	1	;There is more than 1 active tblptr byte
  6302  00EECE  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6303  00EED0  6EF7               	movwf	tblptrh,c
  6304  00EED2                     	endif
  6305  00EED2                     	if	0	;There are less than 3 active tblptr bytes
  6306  00EED2                     	endif
  6307  00EED2  0008               	tblrd		*
  6308  00EED4  50F5               	movf	tablat,w,c
  6309  00EED6  183B               	xorwf	??_initSD+1,w,c
  6310  00EED8  A4D8               	btfss	status,2,c
  6311  00EEDA  D7D3               	goto	l3754
  6312  00EEDC                     l3760:
  6313                           
  6314                           ;SD_PIC.c: 570: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6315  00EEDC  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6316  00EEDE  6EF6               	movwf	tblptrl,c
  6317  00EEE0                     	if	1	;There is more than 1 active tblptr byte
  6318  00EEE0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6319  00EEE2  6EF7               	movwf	tblptrh,c
  6320  00EEE4                     	endif
  6321  00EEE4                     	if	0	;There are less than 3 active tblptr bytes
  6322  00EEE4                     	endif
  6323  00EEE4  0008               	tblrd		*
  6324  00EEE6  CFF5 F03A          	movff	tablat,??_initSD
  6325  00EEEA  505F               	movf	initSD@response,w,c
  6326  00EEEC  143A               	andwf	??_initSD,w,c
  6327  00EEEE  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6328  00EEF0  0EEC               	movlw	low _R1_ILLEGAL_COMMAND
  6329  00EEF2  6EF6               	movwf	tblptrl,c
  6330  00EEF4                     	if	1	;There is more than 1 active tblptr byte
  6331  00EEF4  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6332  00EEF6  6EF7               	movwf	tblptrh,c
  6333  00EEF8                     	endif
  6334  00EEF8                     	if	0	;There are less than 3 active tblptr bytes
  6335  00EEF8                     	endif
  6336  00EEF8  0008               	tblrd		*
  6337  00EEFA  50F5               	movf	tablat,w,c
  6338  00EEFC  183B               	xorwf	??_initSD+1,w,c
  6339  00EEFE  A4D8               	btfss	status,2,c
  6340  00EF00  D01C               	goto	l3772
  6341                           
  6342                           ;SD_PIC.c: 571: if(SDCard.SDversion == 1){
  6343  00EF02  0100               	movlb	0	; () banked
  6344  00EF04  0580               	decf	_SDCard& (0+255),w,b
  6345  00EF06  A4D8               	btfss	status,2,c
  6346  00EF08  D014               	goto	l3768
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;SD_PIC.c: 573: SDCard.Type = 2;
  6350  00EF0A  0E02               	movlw	2
  6351  00EF0C  0100               	movlb	0	; () banked
  6352  00EF0E  6F81               	movwf	(_SDCard+1)& (0+255),b
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;SD_PIC.c: 574: SD_Command(CMD1, 0);
  6356  00EF10  0E00               	movlw	0
  6357  00EF12  6E04               	movwf	SD_Command@arg,c
  6358  00EF14  0E00               	movlw	0
  6359  00EF16  6E05               	movwf	SD_Command@arg+1,c
  6360  00EF18  0E00               	movlw	0
  6361  00EF1A  6E06               	movwf	SD_Command@arg+2,c
  6362  00EF1C  0E00               	movlw	0
  6363  00EF1E  6E07               	movwf	SD_Command@arg+3,c
  6364  00EF20  0E02               	movlw	low _CMD1
  6365  00EF22  6EF6               	movwf	tblptrl,c
  6366  00EF24                     	if	1	;There is more than 1 active tblptr byte
  6367  00EF24  0EFF               	movlw	high _CMD1
  6368  00EF26  6EF7               	movwf	tblptrh,c
  6369  00EF28                     	endif
  6370  00EF28                     	if	0	;There are less than 3 active tblptr bytes
  6371  00EF28                     	endif
  6372  00EF28  0008               	tblrd		*
  6373  00EF2A  50F5               	movf	tablat,w,c
  6374  00EF2C  ECC7  F06C         	call	_SD_Command
  6375                           
  6376                           ;SD_PIC.c: 575: }
  6377  00EF30  D004               	goto	l3772
  6378  00EF32                     l3768:
  6379                           
  6380                           ;SD_PIC.c: 576: else{
  6381                           ;SD_PIC.c: 578: SDCard.init = 0;
  6382  00EF32  0E00               	movlw	0
  6383  00EF34  0100               	movlb	0	; () banked
  6384  00EF36  6F9B               	movwf	(_SDCard+27)& (0+255),b
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;SD_PIC.c: 579: return;
  6388  00EF38  0012               	return	
  6389  00EF3A                     l3772:
  6390                           
  6391                           ;SD_PIC.c: 580: }
  6392                           ;SD_PIC.c: 581: }
  6393                           ;SD_PIC.c: 583: if(SDCard.Type != 2){
  6394  00EF3A  0E02               	movlw	2
  6395  00EF3C  0100               	movlb	0	; () banked
  6396  00EF3E  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  6397  00EF40  B4D8               	btfsc	status,2,c
  6398  00EF42  D027               	goto	l3792
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;SD_PIC.c: 586: SD_Command(CMD58, 0);
  6402  00EF44  0E00               	movlw	0
  6403  00EF46  6E04               	movwf	SD_Command@arg,c
  6404  00EF48  0E00               	movlw	0
  6405  00EF4A  6E05               	movwf	SD_Command@arg+1,c
  6406  00EF4C  0E00               	movlw	0
  6407  00EF4E  6E06               	movwf	SD_Command@arg+2,c
  6408  00EF50  0E00               	movlw	0
  6409  00EF52  6E07               	movwf	SD_Command@arg+3,c
  6410  00EF54  0EF2               	movlw	low _CMD58
  6411  00EF56  6EF6               	movwf	tblptrl,c
  6412  00EF58                     	if	1	;There is more than 1 active tblptr byte
  6413  00EF58  0EFE               	movlw	high _CMD58
  6414  00EF5A  6EF7               	movwf	tblptrh,c
  6415  00EF5C                     	endif
  6416  00EF5C                     	if	0	;There are less than 3 active tblptr bytes
  6417  00EF5C                     	endif
  6418  00EF5C  0008               	tblrd		*
  6419  00EF5E  50F5               	movf	tablat,w,c
  6420  00EF60  ECC7  F06C         	call	_SD_Command
  6421                           
  6422                           ;SD_PIC.c: 589: LATEbits.LATE2 = 0;
  6423  00EF64  948D               	bcf	3981,2,c	;volatile
  6424                           
  6425                           ;SD_PIC.c: 590: SDCard.Type = (unsigned char)((spiReceive() & 0xC0) == 0xC0);
  6426  00EF66  EC6B  F06A         	call	_spiReceive	;wreg free
  6427  00EF6A  0BC0               	andlw	192
  6428  00EF6C  0AC0               	xorlw	192
  6429  00EF6E  A4D8               	btfss	status,2,c
  6430  00EF70  D002               	goto	u3610
  6431  00EF72  0E01               	movlw	1
  6432  00EF74  D001               	goto	u3620
  6433  00EF76                     u3610:
  6434  00EF76  0E00               	movlw	0
  6435  00EF78                     u3620:
  6436  00EF78  0100               	movlb	0	; () banked
  6437  00EF7A  6F81               	movwf	(_SDCard+1)& (0+255),b
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;SD_PIC.c: 594: for(i = 0; i < 3; i++){ spiReceive(); }
  6441  00EF7C  0E00               	movlw	0
  6442  00EF7E  6E60               	movwf	initSD@i,c
  6443  00EF80                     l3782:
  6444                           
  6445                           ; BSR set to: 0
  6446  00EF80  0E02               	movlw	2
  6447  00EF82  6460               	cpfsgt	initSD@i,c
  6448  00EF84  D001               	goto	l3786
  6449  00EF86  D004               	goto	l453
  6450  00EF88                     l3786:
  6451  00EF88  EC6B  F06A         	call	_spiReceive	;wreg free
  6452  00EF8C  2A60               	incf	initSD@i,f,c
  6453  00EF8E  D7F8               	goto	l3782
  6454  00EF90                     l453:
  6455                           
  6456                           ;SD_PIC.c: 595: LATEbits.LATE2 = 1;
  6457  00EF90  848D               	bsf	3981,2,c	;volatile
  6458  00EF92                     l3792:
  6459  00EF92  0E00               	movlw	0
  6460  00EF94  6E04               	movwf	SD_Command@arg,c
  6461  00EF96  0E02               	movlw	2
  6462  00EF98  6E05               	movwf	SD_Command@arg+1,c
  6463  00EF9A  0E00               	movlw	0
  6464  00EF9C  6E06               	movwf	SD_Command@arg+2,c
  6465  00EF9E  0E00               	movlw	0
  6466  00EFA0  6E07               	movwf	SD_Command@arg+3,c
  6467  00EFA2  0EFB               	movlw	low _CMD16
  6468  00EFA4  6EF6               	movwf	tblptrl,c
  6469  00EFA6                     	if	1	;There is more than 1 active tblptr byte
  6470  00EFA6  0EFE               	movlw	high _CMD16
  6471  00EFA8  6EF7               	movwf	tblptrh,c
  6472  00EFAA                     	endif
  6473  00EFAA                     	if	0	;There are less than 3 active tblptr bytes
  6474  00EFAA                     	endif
  6475  00EFAA  0008               	tblrd		*
  6476  00EFAC  50F5               	movf	tablat,w,c
  6477  00EFAE  ECC7  F06C         	call	_SD_Command
  6478  00EFB2  6E3A               	movwf	??_initSD& (0+255),c
  6479  00EFB4  0EEE               	movlw	low _R1_READY_STATE
  6480  00EFB6  6EF6               	movwf	tblptrl,c
  6481  00EFB8                     	if	1	;There is more than 1 active tblptr byte
  6482  00EFB8  0EFE               	movlw	high _R1_READY_STATE
  6483  00EFBA  6EF7               	movwf	tblptrh,c
  6484  00EFBC                     	endif
  6485  00EFBC                     	if	0	;There are less than 3 active tblptr bytes
  6486  00EFBC                     	endif
  6487  00EFBC  0008               	tblrd		*
  6488  00EFBE  50F5               	movf	tablat,w,c
  6489  00EFC0  183A               	xorwf	??_initSD,w,c
  6490  00EFC2  A4D8               	btfss	status,2,c
  6491  00EFC4  D7E6               	goto	l3792
  6492                           
  6493                           ;SD_PIC.c: 600: SDCard.blockSize = 512;
  6494  00EFC6  0E02               	movlw	2
  6495  00EFC8  0100               	movlb	0	; () banked
  6496  00EFCA  6F93               	movwf	(_SDCard+19)& (0+255),b
  6497  00EFCC  0E00               	movlw	0
  6498  00EFCE  6F92               	movwf	(_SDCard+18)& (0+255),b
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;SD_PIC.c: 603: SD_Command(CMD9, 0);
  6502  00EFD0  0E00               	movlw	0
  6503  00EFD2  6E04               	movwf	SD_Command@arg,c
  6504  00EFD4  0E00               	movlw	0
  6505  00EFD6  6E05               	movwf	SD_Command@arg+1,c
  6506  00EFD8  0E00               	movlw	0
  6507  00EFDA  6E06               	movwf	SD_Command@arg+2,c
  6508  00EFDC  0E00               	movlw	0
  6509  00EFDE  6E07               	movwf	SD_Command@arg+3,c
  6510  00EFE0  0EFF               	movlw	low _CMD9
  6511  00EFE2  6EF6               	movwf	tblptrl,c
  6512  00EFE4                     	if	1	;There is more than 1 active tblptr byte
  6513  00EFE4  0EFE               	movlw	high _CMD9
  6514  00EFE6  6EF7               	movwf	tblptrh,c
  6515  00EFE8                     	endif
  6516  00EFE8                     	if	0	;There are less than 3 active tblptr bytes
  6517  00EFE8                     	endif
  6518  00EFE8  0008               	tblrd		*
  6519  00EFEA  50F5               	movf	tablat,w,c
  6520  00EFEC  ECC7  F06C         	call	_SD_Command
  6521                           
  6522                           ;SD_PIC.c: 604: LATEbits.LATE2 = 0;
  6523  00EFF0  948D               	bcf	3981,2,c	;volatile
  6524  00EFF2                     l3800:
  6525  00EFF2  EC6B  F06A         	call	_spiReceive	;wreg free
  6526  00EFF6  6E3A               	movwf	??_initSD& (0+255),c
  6527  00EFF8  0EEB               	movlw	low _START_BLOCK
  6528  00EFFA  6EF6               	movwf	tblptrl,c
  6529  00EFFC                     	if	1	;There is more than 1 active tblptr byte
  6530  00EFFC  0EFE               	movlw	high _START_BLOCK
  6531  00EFFE  6EF7               	movwf	tblptrh,c
  6532  00F000                     	endif
  6533  00F000                     	if	0	;There are less than 3 active tblptr bytes
  6534  00F000                     	endif
  6535  00F000  0008               	tblrd		*
  6536  00F002  50F5               	movf	tablat,w,c
  6537  00F004  183A               	xorwf	??_initSD,w,c
  6538  00F006  A4D8               	btfss	status,2,c
  6539  00F008  D7F4               	goto	l3800
  6540                           
  6541                           ;SD_PIC.c: 606: for(i = 0; i < 16; i++){
  6542  00F00A  0E00               	movlw	0
  6543  00F00C  6E60               	movwf	initSD@i,c
  6544  00F00E                     l3804:
  6545  00F00E  0E0F               	movlw	15
  6546  00F010  6460               	cpfsgt	initSD@i,c
  6547  00F012  D001               	goto	l3808
  6548  00F014  D00D               	goto	l3814
  6549  00F016                     l3808:
  6550                           
  6551                           ;SD_PIC.c: 607: arr_response[i] = spiReceive();
  6552  00F016  5060               	movf	initSD@i,w,c
  6553  00F018  0D01               	mullw	1
  6554  00F01A  0E4B               	movlw	low initSD@arr_response
  6555  00F01C  24F3               	addwf	prodl,w,c
  6556  00F01E  6ED9               	movwf	fsr2l,c
  6557  00F020  0E00               	movlw	high initSD@arr_response
  6558  00F022  20F4               	addwfc	prodh,w,c
  6559  00F024  6EDA               	movwf	fsr2h,c
  6560  00F026  EC6B  F06A         	call	_spiReceive	;wreg free
  6561  00F02A  6EDF               	movwf	indf2,c
  6562  00F02C  2A60               	incf	initSD@i,f,c
  6563  00F02E  D7EF               	goto	l3804
  6564  00F030                     l3814:
  6565                           
  6566                           ;SD_PIC.c: 608: }
  6567                           ;SD_PIC.c: 609: spiReceive();
  6568  00F030  EC6B  F06A         	call	_spiReceive	;wreg free
  6569                           
  6570                           ;SD_PIC.c: 610: spiReceive();
  6571  00F034  EC6B  F06A         	call	_spiReceive	;wreg free
  6572                           
  6573                           ;SD_PIC.c: 611: LATEbits.LATE2 = 1;
  6574  00F038  848D               	bsf	3981,2,c	;volatile
  6575                           
  6576                           ;SD_PIC.c: 613: if(SDCard.SDversion == 2){
  6577  00F03A  0E02               	movlw	2
  6578  00F03C  0100               	movlb	0	; () banked
  6579  00F03E  1980               	xorwf	_SDCard& (0+255),w,b
  6580  00F040  A4D8               	btfss	status,2,c
  6581  00F042  D06C               	goto	l3826
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;SD_PIC.c: 619: unsigned long tempSize = arr_response[9] + 1UL;
  6585  00F044  0E01               	movlw	1
  6586  00F046  2454               	addwf	initSD@arr_response+9,w,c
  6587  00F048  6E47               	movwf	initSD@tempSize,c
  6588  00F04A  6A48               	clrf	initSD@tempSize+1,c
  6589  00F04C  0E00               	movlw	0
  6590  00F04E  2248               	addwfc	initSD@tempSize+1,f,c
  6591  00F050  6A49               	clrf	initSD@tempSize+2,c
  6592  00F052  0E00               	movlw	0
  6593  00F054  2249               	addwfc	initSD@tempSize+2,f,c
  6594  00F056  6A4A               	clrf	initSD@tempSize+3,c
  6595  00F058  0E00               	movlw	0
  6596  00F05A  224A               	addwfc	initSD@tempSize+3,f,c
  6597                           
  6598                           ;SD_PIC.c: 620: tempSize |= (unsigned long)(arr_response[8] << 8);
  6599  00F05C  5053               	movf	initSD@arr_response+8,w,c
  6600  00F05E  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6601  00F060  6A3A               	clrf	??_initSD& (0+255),c
  6602  00F062  C03A  F03C         	movff	??_initSD,??_initSD+2
  6603  00F066  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6604  00F06A  0E00               	movlw	0
  6605  00F06C  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6606  00F06E  0EFF               	movlw	255
  6607  00F070  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6608  00F072  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6609  00F074  503C               	movf	??_initSD+2,w,c
  6610  00F076  1247               	iorwf	initSD@tempSize,f,c
  6611  00F078  503D               	movf	??_initSD+3,w,c
  6612  00F07A  1248               	iorwf	initSD@tempSize+1,f,c
  6613  00F07C  503E               	movf	??_initSD+4,w,c
  6614  00F07E  1249               	iorwf	initSD@tempSize+2,f,c
  6615  00F080  503F               	movf	??_initSD+5,w,c
  6616  00F082  124A               	iorwf	initSD@tempSize+3,f,c
  6617                           
  6618                           ;SD_PIC.c: 621: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  6619  00F084  C052  F03A         	movff	initSD@arr_response+7,??_initSD
  6620  00F088  0E3F               	movlw	63
  6621  00F08A  163A               	andwf	??_initSD,f,c
  6622  00F08C  C03A  F03B         	movff	??_initSD,??_initSD+1
  6623  00F090  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6624  00F092  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6625  00F094  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6626  00F096  C03C  F03E         	movff	??_initSD+2,??_initSD+4
  6627  00F09A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6628  00F09E  6A3C               	clrf	??_initSD+2,c
  6629  00F0A0  6A3B               	clrf	??_initSD+1,c
  6630  00F0A2  503B               	movf	??_initSD+1,w,c
  6631  00F0A4  1247               	iorwf	initSD@tempSize,f,c
  6632  00F0A6  503C               	movf	??_initSD+2,w,c
  6633  00F0A8  1248               	iorwf	initSD@tempSize+1,f,c
  6634  00F0AA  503D               	movf	??_initSD+3,w,c
  6635  00F0AC  1249               	iorwf	initSD@tempSize+2,f,c
  6636  00F0AE  503E               	movf	??_initSD+4,w,c
  6637  00F0B0  124A               	iorwf	initSD@tempSize+3,f,c
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;SD_PIC.c: 622: SDCard.size = tempSize * 0.524288;
  6641  00F0B2  C047  F009         	movff	initSD@tempSize,___lltoft@c
  6642  00F0B6  C048  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  6643  00F0BA  C049  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  6644  00F0BE  C04A  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  6645  00F0C2  EC6C  F06B         	call	___lltoft	;wreg free
  6646  00F0C6  C009  F015         	movff	?___lltoft,___ftmul@f1
  6647  00F0CA  C00A  F016         	movff	?___lltoft+1,___ftmul@f1+1
  6648  00F0CE  C00B  F017         	movff	?___lltoft+2,___ftmul@f1+2
  6649  00F0D2  0E38               	movlw	56
  6650  00F0D4  6E18               	movwf	___ftmul@f2,c
  6651  00F0D6  0E06               	movlw	6
  6652  00F0D8  6E19               	movwf	___ftmul@f2+1,c
  6653  00F0DA  0E3F               	movlw	63
  6654  00F0DC  6E1A               	movwf	___ftmul@f2+2,c
  6655  00F0DE  EC21  F06E         	call	___ftmul	;wreg free
  6656  00F0E2  C015  F098         	movff	?___ftmul,_SDCard+24
  6657  00F0E6  C016  F099         	movff	?___ftmul+1,_SDCard+25
  6658  00F0EA  C017  F09A         	movff	?___ftmul+2,_SDCard+26
  6659                           
  6660                           ;SD_PIC.c: 623: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  6661  00F0EE  0E00               	movlw	0
  6662  00F0F0  6E18               	movwf	___ftmul@f2,c
  6663  00F0F2  0E00               	movlw	0
  6664  00F0F4  6E19               	movwf	___ftmul@f2+1,c
  6665  00F0F6  0E45               	movlw	69
  6666  00F0F8  6E1A               	movwf	___ftmul@f2+2,c
  6667  00F0FA  C098  F015         	movff	_SDCard+24,___ftmul@f1
  6668  00F0FE  C099  F016         	movff	_SDCard+25,___ftmul@f1+1
  6669  00F102  C09A  F017         	movff	_SDCard+26,___ftmul@f1+2
  6670  00F106  EC21  F06E         	call	___ftmul	;wreg free
  6671  00F10A  C015  F02B         	movff	?___ftmul,___fttol@f1
  6672  00F10E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6673  00F112  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6674  00F116  EC9B  F06E         	call	___fttol	;wreg free
  6675  00F11A  D0BE               	goto	L8
  6676  00F11C                     l3826:
  6677                           
  6678                           ;SD_PIC.c: 625: else{
  6679                           ;SD_PIC.c: 633: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  6680  00F11C  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  6681  00F120  0E03               	movlw	3
  6682  00F122  163A               	andwf	??_initSD,f,c
  6683  00F124  C03A  F03B         	movff	??_initSD,??_initSD+1
  6684  00F128  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6685  00F12A  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6686  00F12C  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6687  00F12E  0E04               	movlw	4
  6688  00F130                     u3705:
  6689  00F130  90D8               	bcf	status,0,c
  6690  00F132  363B               	rlcf	??_initSD+1,f,c
  6691  00F134  363C               	rlcf	??_initSD+2,f,c
  6692  00F136  363D               	rlcf	??_initSD+3,f,c
  6693  00F138  363E               	rlcf	??_initSD+4,f,c
  6694  00F13A  2EE8               	decfsz	wreg,f,c
  6695  00F13C  D7F9               	goto	u3705
  6696  00F13E  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_802
  6697  00F142  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_802+1
  6698  00F146  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_802+2
  6699  00F14A  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_802+3
  6700                           
  6701                           ;SD_PIC.c: 634: tempSize |= (unsigned long)(arr_response[7] << 2);
  6702  00F14E  5052               	movf	initSD@arr_response+7,w,c
  6703  00F150  6E3A               	movwf	??_initSD& (0+255),c
  6704  00F152  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6705  00F154  90D8               	bcf	status,0,c
  6706  00F156  363A               	rlcf	??_initSD,f,c
  6707  00F158  363B               	rlcf	??_initSD+1,f,c
  6708  00F15A  90D8               	bcf	status,0,c
  6709  00F15C  363A               	rlcf	??_initSD,f,c
  6710  00F15E  363B               	rlcf	??_initSD+1,f,c
  6711  00F160  C03A  F03C         	movff	??_initSD,??_initSD+2
  6712  00F164  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6713  00F168  0E00               	movlw	0
  6714  00F16A  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6715  00F16C  0EFF               	movlw	255
  6716  00F16E  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6717  00F170  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6718  00F172  503C               	movf	??_initSD+2,w,c
  6719  00F174  125B               	iorwf	initSD@tempSize_802,f,c
  6720  00F176  503D               	movf	??_initSD+3,w,c
  6721  00F178  125C               	iorwf	initSD@tempSize_802+1,f,c
  6722  00F17A  503E               	movf	??_initSD+4,w,c
  6723  00F17C  125D               	iorwf	initSD@tempSize_802+2,f,c
  6724  00F17E  503F               	movf	??_initSD+5,w,c
  6725  00F180  125E               	iorwf	initSD@tempSize_802+3,f,c
  6726                           
  6727                           ;SD_PIC.c: 635: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  6728  00F182  C053  F03A         	movff	initSD@arr_response+8,??_initSD
  6729  00F186  90D8               	bcf	status,0,c
  6730  00F188  323A               	rrcf	??_initSD,f,c
  6731  00F18A  90D8               	bcf	status,0,c
  6732  00F18C  323A               	rrcf	??_initSD,f,c
  6733  00F18E  0E30               	movlw	48
  6734  00F190  163A               	andwf	??_initSD,f,c
  6735  00F192  0E01               	movlw	1
  6736  00F194  243A               	addwf	??_initSD,w,c
  6737  00F196  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6738  00F198  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6739  00F19A  0E00               	movlw	0
  6740  00F19C  223C               	addwfc	(??_initSD+2)& (0+255),f,c
  6741  00F19E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6742  00F1A0  0E00               	movlw	0
  6743  00F1A2  223D               	addwfc	(??_initSD+3)& (0+255),f,c
  6744  00F1A4  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6745  00F1A6  0E00               	movlw	0
  6746  00F1A8  223E               	addwfc	(??_initSD+4)& (0+255),f,c
  6747  00F1AA  503B               	movf	??_initSD+1,w,c
  6748  00F1AC  125B               	iorwf	initSD@tempSize_802,f,c
  6749  00F1AE  503C               	movf	??_initSD+2,w,c
  6750  00F1B0  125C               	iorwf	initSD@tempSize_802+1,f,c
  6751  00F1B2  503D               	movf	??_initSD+3,w,c
  6752  00F1B4  125D               	iorwf	initSD@tempSize_802+2,f,c
  6753  00F1B6  503E               	movf	??_initSD+4,w,c
  6754  00F1B8  125E               	iorwf	initSD@tempSize_802+3,f,c
  6755                           
  6756                           ;SD_PIC.c: 636: tempSize = tempSize << (((unsigned long) ((arr_response[9] & 0x03) << 1)
      +                           | (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  6757  00F1BA  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  6758  00F1BE  0E03               	movlw	3
  6759  00F1C0  163A               	andwf	??_initSD,f,c
  6760  00F1C2  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6761  00F1C4  AE55               	btfss	initSD@arr_response+10,7,c
  6762  00F1C6  D001               	bra	u3715
  6763  00F1C8  2A3B               	incf	(??_initSD+1)& (0+255),f,c
  6764  00F1CA                     u3715:
  6765  00F1CA  303B               	rrcf	??_initSD+1,w,c
  6766  00F1CC  343A               	rlcf	??_initSD,w,c
  6767  00F1CE  6E3C               	movwf	(??_initSD+2)& (0+255),c
  6768  00F1D0  0E02               	movlw	2
  6769  00F1D2  263C               	addwf	??_initSD+2,f,c
  6770  00F1D4  C05B  F03D         	movff	initSD@tempSize_802,??_initSD+3
  6771  00F1D8  C05C  F03E         	movff	initSD@tempSize_802+1,??_initSD+4
  6772  00F1DC  C05D  F03F         	movff	initSD@tempSize_802+2,??_initSD+5
  6773  00F1E0  C05E  F040         	movff	initSD@tempSize_802+3,??_initSD+6
  6774  00F1E4  2A3C               	incf	??_initSD+2,f,c
  6775  00F1E6  D005               	goto	u3720
  6776  00F1E8                     u3725:
  6777  00F1E8  90D8               	bcf	status,0,c
  6778  00F1EA  363D               	rlcf	??_initSD+3,f,c
  6779  00F1EC  363E               	rlcf	??_initSD+4,f,c
  6780  00F1EE  363F               	rlcf	??_initSD+5,f,c
  6781  00F1F0  3640               	rlcf	??_initSD+6,f,c
  6782  00F1F2                     u3720:
  6783  00F1F2  2E3C               	decfsz	??_initSD+2,f,c
  6784  00F1F4  D7F9               	goto	u3725
  6785  00F1F6  C03D  F05B         	movff	??_initSD+3,initSD@tempSize_802
  6786  00F1FA  C03E  F05C         	movff	??_initSD+4,initSD@tempSize_802+1
  6787  00F1FE  C03F  F05D         	movff	??_initSD+5,initSD@tempSize_802+2
  6788  00F202  C040  F05E         	movff	??_initSD+6,initSD@tempSize_802+3
  6789                           
  6790                           ;SD_PIC.c: 639: tempSize = tempSize << ((unsigned long) (arr_response[5] & 0x0F));
  6791  00F206  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  6792  00F20A  0E0F               	movlw	15
  6793  00F20C  163A               	andwf	??_initSD,f,c
  6794  00F20E  C05B  F03B         	movff	initSD@tempSize_802,??_initSD+1
  6795  00F212  C05C  F03C         	movff	initSD@tempSize_802+1,??_initSD+2
  6796  00F216  C05D  F03D         	movff	initSD@tempSize_802+2,??_initSD+3
  6797  00F21A  C05E  F03E         	movff	initSD@tempSize_802+3,??_initSD+4
  6798  00F21E  2A3A               	incf	??_initSD,f,c
  6799  00F220  D005               	goto	u3730
  6800  00F222                     u3735:
  6801  00F222  90D8               	bcf	status,0,c
  6802  00F224  363B               	rlcf	??_initSD+1,f,c
  6803  00F226  363C               	rlcf	??_initSD+2,f,c
  6804  00F228  363D               	rlcf	??_initSD+3,f,c
  6805  00F22A  363E               	rlcf	??_initSD+4,f,c
  6806  00F22C                     u3730:
  6807  00F22C  2E3A               	decfsz	??_initSD,f,c
  6808  00F22E  D7F9               	goto	u3735
  6809  00F230  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_802
  6810  00F234  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_802+1
  6811  00F238  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_802+2
  6812  00F23C  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_802+3
  6813                           
  6814                           ;SD_PIC.c: 641: SDCard.size = (unsigned long)tempSize;
  6815  00F240  C05B  F009         	movff	initSD@tempSize_802,___lltoft@c
  6816  00F244  C05C  F00A         	movff	initSD@tempSize_802+1,___lltoft@c+1
  6817  00F248  C05D  F00B         	movff	initSD@tempSize_802+2,___lltoft@c+2
  6818  00F24C  C05E  F00C         	movff	initSD@tempSize_802+3,___lltoft@c+3
  6819  00F250  EC6C  F06B         	call	___lltoft	;wreg free
  6820  00F254  C009  F098         	movff	?___lltoft,_SDCard+24
  6821  00F258  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  6822  00F25C  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  6823                           
  6824                           ;SD_PIC.c: 642: SDCard.numBlocks = (unsigned long)(SDCard.size/SDCard.blockSize);
  6825  00F260  C092  F009         	movff	_SDCard+18,___lwtoft@c
  6826  00F264  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  6827  00F268  ECB6  F06A         	call	___lwtoft	;wreg free
  6828  00F26C  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  6829  00F270  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  6830  00F274  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  6831  00F278  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  6832  00F27C  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  6833  00F280  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  6834  00F284  ECAE  F06D         	call	___ftdiv	;wreg free
  6835  00F288  C00C  F02B         	movff	?___ftdiv,___fttol@f1
  6836  00F28C  C00D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  6837  00F290  C00E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  6838  00F294  EC9B  F06E         	call	___fttol	;wreg free
  6839  00F298                     L8:
  6840  00F298  C02B  F094         	movff	?___fttol,_SDCard+20
  6841  00F29C  C02C  F095         	movff	?___fttol+1,_SDCard+21
  6842  00F2A0  C02D  F096         	movff	?___fttol+2,_SDCard+22
  6843  00F2A4  C02E  F097         	movff	?___fttol+3,_SDCard+23
  6844                           
  6845                           ;SD_PIC.c: 643: }
  6846                           ;SD_PIC.c: 646: SD_Command(CMD10, 0);
  6847  00F2A8  0E00               	movlw	0
  6848  00F2AA  6E04               	movwf	SD_Command@arg,c
  6849  00F2AC  0E00               	movlw	0
  6850  00F2AE  6E05               	movwf	SD_Command@arg+1,c
  6851  00F2B0  0E00               	movlw	0
  6852  00F2B2  6E06               	movwf	SD_Command@arg+2,c
  6853  00F2B4  0E00               	movlw	0
  6854  00F2B6  6E07               	movwf	SD_Command@arg+3,c
  6855  00F2B8  0EFE               	movlw	low _CMD10
  6856  00F2BA  6EF6               	movwf	tblptrl,c
  6857  00F2BC                     	if	1	;There is more than 1 active tblptr byte
  6858  00F2BC  0EFE               	movlw	high _CMD10
  6859  00F2BE  6EF7               	movwf	tblptrh,c
  6860  00F2C0                     	endif
  6861  00F2C0                     	if	0	;There are less than 3 active tblptr bytes
  6862  00F2C0                     	endif
  6863  00F2C0  0008               	tblrd		*
  6864  00F2C2  50F5               	movf	tablat,w,c
  6865  00F2C4  ECC7  F06C         	call	_SD_Command
  6866                           
  6867                           ;SD_PIC.c: 648: LATEbits.LATE2 = 0;
  6868  00F2C8  948D               	bcf	3981,2,c	;volatile
  6869  00F2CA                     l3836:
  6870                           
  6871                           ;SD_PIC.c: 652: response = spiReceive();
  6872  00F2CA  EC6B  F06A         	call	_spiReceive	;wreg free
  6873  00F2CE  6E5F               	movwf	initSD@response,c
  6874                           
  6875                           ;SD_PIC.c: 653: }while(response != START_BLOCK);
  6876  00F2D0  0EEB               	movlw	low _START_BLOCK
  6877  00F2D2  6EF6               	movwf	tblptrl,c
  6878  00F2D4                     	if	1	;There is more than 1 active tblptr byte
  6879  00F2D4  0EFE               	movlw	high _START_BLOCK
  6880  00F2D6  6EF7               	movwf	tblptrh,c
  6881  00F2D8                     	endif
  6882  00F2D8                     	if	0	;There are less than 3 active tblptr bytes
  6883  00F2D8                     	endif
  6884  00F2D8  0008               	tblrd		*
  6885  00F2DA  50F5               	movf	tablat,w,c
  6886  00F2DC  625F               	cpfseq	initSD@response,c
  6887  00F2DE  D7F5               	goto	l3836
  6888                           
  6889                           ;SD_PIC.c: 655: for(i = 0; i < 16; i++){
  6890  00F2E0  0E00               	movlw	0
  6891  00F2E2  6E60               	movwf	initSD@i,c
  6892  00F2E4                     l3842:
  6893  00F2E4  0E0F               	movlw	15
  6894  00F2E6  6460               	cpfsgt	initSD@i,c
  6895  00F2E8  D001               	goto	l3846
  6896  00F2EA  D00D               	goto	l3852
  6897  00F2EC                     l3846:
  6898                           
  6899                           ;SD_PIC.c: 656: arr_response[i] = spiReceive();
  6900  00F2EC  5060               	movf	initSD@i,w,c
  6901  00F2EE  0D01               	mullw	1
  6902  00F2F0  0E4B               	movlw	low initSD@arr_response
  6903  00F2F2  24F3               	addwf	prodl,w,c
  6904  00F2F4  6ED9               	movwf	fsr2l,c
  6905  00F2F6  0E00               	movlw	high initSD@arr_response
  6906  00F2F8  20F4               	addwfc	prodh,w,c
  6907  00F2FA  6EDA               	movwf	fsr2h,c
  6908  00F2FC  EC6B  F06A         	call	_spiReceive	;wreg free
  6909  00F300  6EDF               	movwf	indf2,c
  6910  00F302  2A60               	incf	initSD@i,f,c
  6911  00F304  D7EF               	goto	l3842
  6912  00F306                     l3852:
  6913                           
  6914                           ;SD_PIC.c: 657: }
  6915                           ;SD_PIC.c: 658: spiReceive();
  6916  00F306  EC6B  F06A         	call	_spiReceive	;wreg free
  6917                           
  6918                           ;SD_PIC.c: 659: spiReceive();
  6919  00F30A  EC6B  F06A         	call	_spiReceive	;wreg free
  6920                           
  6921                           ;SD_PIC.c: 660: LATEbits.LATE2 = 1;
  6922  00F30E  848D               	bsf	3981,2,c	;volatile
  6923                           
  6924                           ;SD_PIC.c: 662: SDCard.MID = arr_response[0];
  6925  00F310  C04B  F082         	movff	initSD@arr_response,_SDCard+2
  6926                           
  6927                           ;SD_PIC.c: 663: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  6928  00F314  504C               	movf	initSD@arr_response+1,w,c
  6929  00F316  6E3A               	movwf	??_initSD& (0+255),c
  6930  00F318  504D               	movf	initSD@arr_response+2,w,c
  6931  00F31A  0100               	movlb	0	; () banked
  6932  00F31C  6F83               	movwf	(_SDCard+3)& (0+255),b
  6933  00F31E  C03A  F084         	movff	??_initSD,_SDCard+4
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;SD_PIC.c: 664: SDCard.PHMH = arr_response[3];
  6937  00F322  C04E  F089         	movff	initSD@arr_response+3,_SDCard+9
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;SD_PIC.c: 668: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  6941  00F326  C04F  F03A         	movff	initSD@arr_response+4,??_initSD
  6942  00F32A  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6943  00F32C  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6944  00F32E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6945  00F330  C03A  F03D         	movff	??_initSD,??_initSD+3
  6946  00F334  6A3C               	clrf	??_initSD+2,c
  6947  00F336  6A3B               	clrf	??_initSD+1,c
  6948  00F338  6A3A               	clrf	??_initSD,c
  6949  00F33A  C03A  F085         	movff	??_initSD,_SDCard+5
  6950  00F33E  C03B  F086         	movff	??_initSD+1,_SDCard+6
  6951  00F342  C03C  F087         	movff	??_initSD+2,_SDCard+7
  6952  00F346  C03D  F088         	movff	??_initSD+3,_SDCard+8
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;SD_PIC.c: 669: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  6956  00F34A  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  6957  00F34E  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6958  00F350  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6959  00F352  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6960  00F354  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6961  00F358  C03A  F03C         	movff	??_initSD,??_initSD+2
  6962  00F35C  6A3B               	clrf	??_initSD+1,c
  6963  00F35E  6A3A               	clrf	??_initSD,c
  6964  00F360  503A               	movf	??_initSD,w,c
  6965  00F362  0100               	movlb	0	; () banked
  6966  00F364  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  6967  00F366  503B               	movf	??_initSD+1,w,c
  6968  00F368  0100               	movlb	0	; () banked
  6969  00F36A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  6970  00F36C  503C               	movf	??_initSD+2,w,c
  6971  00F36E  0100               	movlb	0	; () banked
  6972  00F370  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  6973  00F372  503D               	movf	??_initSD+3,w,c
  6974  00F374  0100               	movlb	0	; () banked
  6975  00F376  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;SD_PIC.c: 670: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  6979  00F378  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  6980  00F37C  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6981  00F37E  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6982  00F380  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6983  00F382  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  6984  00F386  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  6985  00F38A  C03A  F03B         	movff	??_initSD,??_initSD+1
  6986  00F38E  6A3A               	clrf	??_initSD,c
  6987  00F390  503A               	movf	??_initSD,w,c
  6988  00F392  0100               	movlb	0	; () banked
  6989  00F394  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  6990  00F396  503B               	movf	??_initSD+1,w,c
  6991  00F398  0100               	movlb	0	; () banked
  6992  00F39A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  6993  00F39C  503C               	movf	??_initSD+2,w,c
  6994  00F39E  0100               	movlb	0	; () banked
  6995  00F3A0  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  6996  00F3A2  503D               	movf	??_initSD+3,w,c
  6997  00F3A4  0100               	movlb	0	; () banked
  6998  00F3A6  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;SD_PIC.c: 671: SDCard.PHML |= (unsigned long)arr_response[7];
  7002  00F3A8  5052               	movf	initSD@arr_response+7,w,c
  7003  00F3AA  0100               	movlb	0	; () banked
  7004  00F3AC  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;SD_PIC.c: 673: SDCard.PRV = arr_response[8];
  7008  00F3AE  C053  F08A         	movff	initSD@arr_response+8,_SDCard+10
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;SD_PIC.c: 677: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  7012  00F3B2  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  7013  00F3B6  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7014  00F3B8  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7015  00F3BA  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7016  00F3BC  C03A  F03D         	movff	??_initSD,??_initSD+3
  7017  00F3C0  6A3C               	clrf	??_initSD+2,c
  7018  00F3C2  6A3B               	clrf	??_initSD+1,c
  7019  00F3C4  6A3A               	clrf	??_initSD,c
  7020  00F3C6  C03A  F08B         	movff	??_initSD,_SDCard+11
  7021  00F3CA  C03B  F08C         	movff	??_initSD+1,_SDCard+12
  7022  00F3CE  C03C  F08D         	movff	??_initSD+2,_SDCard+13
  7023  00F3D2  C03D  F08E         	movff	??_initSD+3,_SDCard+14
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;SD_PIC.c: 678: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  7027  00F3D6  C055  F03A         	movff	initSD@arr_response+10,??_initSD
  7028  00F3DA  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7029  00F3DC  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7030  00F3DE  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7031  00F3E0  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  7032  00F3E4  C03A  F03C         	movff	??_initSD,??_initSD+2
  7033  00F3E8  6A3B               	clrf	??_initSD+1,c
  7034  00F3EA  6A3A               	clrf	??_initSD,c
  7035  00F3EC  503A               	movf	??_initSD,w,c
  7036  00F3EE  0100               	movlb	0	; () banked
  7037  00F3F0  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7038  00F3F2  503B               	movf	??_initSD+1,w,c
  7039  00F3F4  0100               	movlb	0	; () banked
  7040  00F3F6  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7041  00F3F8  503C               	movf	??_initSD+2,w,c
  7042  00F3FA  0100               	movlb	0	; () banked
  7043  00F3FC  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7044  00F3FE  503D               	movf	??_initSD+3,w,c
  7045  00F400  0100               	movlb	0	; () banked
  7046  00F402  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;SD_PIC.c: 679: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  7050  00F404  C056  F03A         	movff	initSD@arr_response+11,??_initSD
  7051  00F408  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7052  00F40A  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7053  00F40C  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7054  00F40E  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  7055  00F412  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  7056  00F416  C03A  F03B         	movff	??_initSD,??_initSD+1
  7057  00F41A  6A3A               	clrf	??_initSD,c
  7058  00F41C  503A               	movf	??_initSD,w,c
  7059  00F41E  0100               	movlb	0	; () banked
  7060  00F420  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7061  00F422  503B               	movf	??_initSD+1,w,c
  7062  00F424  0100               	movlb	0	; () banked
  7063  00F426  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7064  00F428  503C               	movf	??_initSD+2,w,c
  7065  00F42A  0100               	movlb	0	; () banked
  7066  00F42C  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7067  00F42E  503D               	movf	??_initSD+3,w,c
  7068  00F430  0100               	movlb	0	; () banked
  7069  00F432  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;SD_PIC.c: 680: SDCard.PSN |= (unsigned long)arr_response[12];
  7073  00F434  5057               	movf	initSD@arr_response+12,w,c
  7074  00F436  0100               	movlb	0	; () banked
  7075  00F438  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;SD_PIC.c: 682: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  7079                           ;SD_PIC.c: 683: (arr_response[14]);
  7080  00F43A  5058               	movf	initSD@arr_response+13,w,c
  7081  00F43C  0B0F               	andlw	15
  7082  00F43E  6E3A               	movwf	??_initSD& (0+255),c
  7083  00F440  5059               	movf	initSD@arr_response+14,w,c
  7084  00F442  0100               	movlb	0	; () banked
  7085  00F444  6F8F               	movwf	(_SDCard+15)& (0+255),b
  7086  00F446  C03A  F090         	movff	??_initSD,_SDCard+16
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;SD_PIC.c: 684: SDCard.CRC = arr_response[15] & 0xFE;
  7090  00F44A  505A               	movf	initSD@arr_response+15,w,c
  7091  00F44C  0BFE               	andlw	254
  7092  00F44E  0100               	movlb	0	; () banked
  7093  00F450  6F91               	movwf	(_SDCard+17)& (0+255),b
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;SD_PIC.c: 687: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  7097  00F452  848D               	bsf	3981,2,c	;volatile
  7098                           
  7099                           ; BSR set to: 0
  7100  00F454  9AC6               	bcf	4038,5,c	;volatile
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;SD_PIC.c: 688: SSPCON1 = 0b00010000;
  7104  00F456  0E10               	movlw	16
  7105  00F458  6EC6               	movwf	4038,c	;volatile
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;SD_PIC.c: 689: OSCCON = last_OSCCON;
  7109  00F45A  C045  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;SD_PIC.c: 690: OSCTUNE = last_OSCTUNE;
  7113  00F45E  C046  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  7114                           
  7115                           ;SD_PIC.c: 693: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  7116  00F462  D004               	goto	l3896
  7117  00F464                     l3894:
  7118  00F464  0E42               	movlw	66
  7119  00F466                     u4937:
  7120  00F466  2EE8               	decfsz	wreg,f,c
  7121  00F468  D7FE               	bra	u4937
  7122  00F46A  D000               	nop2	
  7123  00F46C                     l3896:
  7124  00F46C  A4D3               	btfss	4051,2,c	;volatile
  7125  00F46E  D7FA               	goto	l3894
  7126                           
  7127                           ;SD_PIC.c: 696: SSPCON1bits.SSPEN = 1;
  7128  00F470  8AC6               	bsf	4038,5,c	;volatile
  7129                           
  7130                           ;SD_PIC.c: 699: SDCard.write.MBW_flag_first = 1;
  7131  00F472  0E01               	movlw	1
  7132  00F474  0100               	movlb	0	; () banked
  7133  00F476  6FA4               	movwf	(_SDCard+36)& (0+255),b
  7134                           
  7135                           ;SD_PIC.c: 700: SDCard.write.MBW_startBlock = 0;
  7136  00F478  0E00               	movlw	0
  7137  00F47A  0100               	movlb	0	; () banked
  7138  00F47C  6FA0               	movwf	(_SDCard+32)& (0+255),b
  7139  00F47E  0E00               	movlw	0
  7140  00F480  6FA1               	movwf	(_SDCard+33)& (0+255),b
  7141  00F482  0E00               	movlw	0
  7142  00F484  6FA2               	movwf	(_SDCard+34)& (0+255),b
  7143  00F486  0E00               	movlw	0
  7144  00F488  6FA3               	movwf	(_SDCard+35)& (0+255),b
  7145                           
  7146                           ;SD_PIC.c: 701: SDCard.write.lastBlockWritten = 0;
  7147  00F48A  0E00               	movlw	0
  7148  00F48C  0100               	movlb	0	; () banked
  7149  00F48E  6F9C               	movwf	(_SDCard+28)& (0+255),b
  7150  00F490  0E00               	movlw	0
  7151  00F492  6F9D               	movwf	(_SDCard+29)& (0+255),b
  7152  00F494  0E00               	movlw	0
  7153  00F496  6F9E               	movwf	(_SDCard+30)& (0+255),b
  7154  00F498  0E00               	movlw	0
  7155  00F49A  6F9F               	movwf	(_SDCard+31)& (0+255),b
  7156                           
  7157                           ;SD_PIC.c: 702: SDCard.read.MBR_flag_first = 1;
  7158  00F49C  0E01               	movlw	1
  7159  00F49E  0100               	movlb	0	; () banked
  7160  00F4A0  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7161                           
  7162                           ;SD_PIC.c: 703: SDCard.read.MBR_startBlock = 0;
  7163  00F4A2  0E00               	movlw	0
  7164  00F4A4  0100               	movlb	0	; () banked
  7165  00F4A6  6FA9               	movwf	(_SDCard+41)& (0+255),b
  7166  00F4A8  0E00               	movlw	0
  7167  00F4AA  6FAA               	movwf	(_SDCard+42)& (0+255),b
  7168  00F4AC  0E00               	movlw	0
  7169  00F4AE  6FAB               	movwf	(_SDCard+43)& (0+255),b
  7170  00F4B0  0E00               	movlw	0
  7171  00F4B2  6FAC               	movwf	(_SDCard+44)& (0+255),b
  7172                           
  7173                           ;SD_PIC.c: 704: SDCard.read.lastBlockRead = 0;
  7174  00F4B4  0E00               	movlw	0
  7175  00F4B6  0100               	movlb	0	; () banked
  7176  00F4B8  6FA5               	movwf	(_SDCard+37)& (0+255),b
  7177  00F4BA  0E00               	movlw	0
  7178  00F4BC  6FA6               	movwf	(_SDCard+38)& (0+255),b
  7179  00F4BE  0E00               	movlw	0
  7180  00F4C0  6FA7               	movwf	(_SDCard+39)& (0+255),b
  7181  00F4C2  0E00               	movlw	0
  7182  00F4C4  6FA8               	movwf	(_SDCard+40)& (0+255),b
  7183                           
  7184                           ;SD_PIC.c: 707: SDCard.init = 1;
  7185  00F4C6  0E01               	movlw	1
  7186  00F4C8  0100               	movlb	0	; () banked
  7187  00F4CA  6F9B               	movwf	(_SDCard+27)& (0+255),b
  7188  00F4CC  0012               	return		;funcret
  7189  00F4CE                     __end_of_initSD:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           plusw1	equ	0xFE3
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           plusw2	equ	0xFDB
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _spiInit *****************
  7209 ;; Defined at:
  7210 ;;		line 54 in file "SPI_PIC.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  divider         1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  divider         1    0[COMRAM] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;Total ram usage:        1 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_initSD
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text18
  7238  00D5DA                     __ptext18:
  7239                           	opt stack 0
  7240  00D5DA                     _spiInit:
  7241                           	opt stack 29
  7242                           
  7243                           ;incstack = 0
  7244                           ;spiInit@divider stored from wreg
  7245  00D5DA  6E01               	movwf	spiInit@divider,c
  7246                           
  7247                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  7248  00D5DC  9AC6               	bcf	4038,5,c	;volatile
  7249                           
  7250                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  7251  00D5DE  0E00               	movlw	0
  7252  00D5E0  6EC7               	movwf	4039,c	;volatile
  7253                           
  7254                           ;SPI_PIC.c: 71: switch(divider){
  7255  00D5E2  D007               	goto	l3274
  7256  00D5E4                     l3268:
  7257                           
  7258                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  7259  00D5E4  0E11               	movlw	17
  7260  00D5E6  D003               	goto	L11
  7261  00D5E8                     l3270:
  7262                           
  7263                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  7264  00D5E8  0E12               	movlw	18
  7265  00D5EA  D001               	goto	L11
  7266  00D5EC                     l3272:
  7267                           
  7268                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  7269  00D5EC  0E10               	movlw	16
  7270  00D5EE                     L11:
  7271  00D5EE  6EC6               	movwf	4038,c	;volatile
  7272                           
  7273                           ;SPI_PIC.c: 83: }
  7274  00D5F0  D00B               	goto	l211
  7275  00D5F2                     l3274:
  7276  00D5F2  5001               	movf	spiInit@divider,w,c
  7277                           
  7278                           ; Switch size 1, requested type "space"
  7279                           ; Number of cases is 3, Range of values is 4 to 64
  7280                           ; switch strategies available:
  7281                           ; Name         Instructions Cycles
  7282                           ; simple_byte           10     6 (average)
  7283                           ;	Chosen strategy is simple_byte
  7284  00D5F4  0A04               	xorlw	4	; case 4
  7285  00D5F6  B4D8               	btfsc	status,2,c
  7286  00D5F8  D7F9               	goto	l3272
  7287  00D5FA  0A14               	xorlw	20	; case 16
  7288  00D5FC  B4D8               	btfsc	status,2,c
  7289  00D5FE  D7F2               	goto	l3268
  7290  00D600  0A50               	xorlw	80	; case 64
  7291  00D602  B4D8               	btfsc	status,2,c
  7292  00D604  D7F1               	goto	l3270
  7293  00D606  D7F2               	goto	l3272
  7294  00D608                     l211:
  7295                           
  7296                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  7297  00D608  9A94               	bcf	3988,5,c	;volatile
  7298                           
  7299                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  7300  00D60A  8894               	bsf	3988,4,c	;volatile
  7301                           
  7302                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  7303  00D60C  9694               	bcf	3988,3,c	;volatile
  7304                           
  7305                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  7306  00D60E  8AC6               	bsf	4038,5,c	;volatile
  7307  00D610  0012               	return		;funcret
  7308  00D612                     __end_of_spiInit:
  7309                           	opt stack 0
  7310                           tblptru	equ	0xFF8
  7311                           tblptrh	equ	0xFF7
  7312                           tblptrl	equ	0xFF6
  7313                           tablat	equ	0xFF5
  7314                           prodh	equ	0xFF4
  7315                           prodl	equ	0xFF3
  7316                           postinc0	equ	0xFEE
  7317                           wreg	equ	0xFE8
  7318                           plusw1	equ	0xFE3
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           plusw2	equ	0xFDB
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function ___lwtoft *****************
  7328 ;; Defined at:
  7329 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  c               2    8[COMRAM] unsigned int 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  3    8[COMRAM] float 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7343 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;Total ram usage:        3 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    1
  7350 ;; This function calls:
  7351 ;;		___ftpack
  7352 ;; This function is called by:
  7353 ;;		_initSD
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text19
  7358  00D56C                     __ptext19:
  7359                           	opt stack 0
  7360  00D56C                     ___lwtoft:
  7361                           	opt stack 28
  7362                           
  7363                           ;incstack = 0
  7364  00D56C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7365  00D570  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7366  00D574  6A03               	clrf	___ftpack@arg+2,c
  7367  00D576  0E8E               	movlw	142
  7368  00D578  6E04               	movwf	___ftpack@exp,c
  7369  00D57A  0E00               	movlw	0
  7370  00D57C  6E05               	movwf	___ftpack@sign,c
  7371  00D57E  EC57  F06D         	call	___ftpack	;wreg free
  7372  00D582  C001  F009         	movff	?___ftpack,?___lwtoft
  7373  00D586  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7374  00D58A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7375  00D58E  0012               	return	
  7376  00D590                     __end_of___lwtoft:
  7377                           	opt stack 0
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           prodh	equ	0xFF4
  7383                           prodl	equ	0xFF3
  7384                           postinc0	equ	0xFEE
  7385                           wreg	equ	0xFE8
  7386                           plusw1	equ	0xFE3
  7387                           indf2	equ	0xFDF
  7388                           postinc2	equ	0xFDE
  7389                           postdec2	equ	0xFDD
  7390                           plusw2	equ	0xFDB
  7391                           fsr2h	equ	0xFDA
  7392                           fsr2l	equ	0xFD9
  7393                           status	equ	0xFD8
  7394                           
  7395 ;; *************** function ___lltoft *****************
  7396 ;; Defined at:
  7397 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  c               4    8[COMRAM] unsigned long 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  exp             1   16[COMRAM] unsigned char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  3    8[COMRAM] float 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2, status,0, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7411 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;Total ram usage:        9 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    1
  7418 ;; This function calls:
  7419 ;;		___ftpack
  7420 ;; This function is called by:
  7421 ;;		_initSD
  7422 ;;		_printf
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text20
  7427  00D6D8                     __ptext20:
  7428                           	opt stack 0
  7429  00D6D8                     ___lltoft:
  7430                           	opt stack 28
  7431                           
  7432                           ;incstack = 0
  7433  00D6D8  0E8E               	movlw	142
  7434  00D6DA  6E11               	movwf	___lltoft@exp,c
  7435  00D6DC  D006               	goto	l3632
  7436  00D6DE                     l3630:
  7437  00D6DE  90D8               	bcf	status,0,c
  7438  00D6E0  320C               	rrcf	___lltoft@c+3,f,c
  7439  00D6E2  320B               	rrcf	___lltoft@c+2,f,c
  7440  00D6E4  320A               	rrcf	___lltoft@c+1,f,c
  7441  00D6E6  3209               	rrcf	___lltoft@c,f,c
  7442  00D6E8  2A11               	incf	___lltoft@exp,f,c
  7443  00D6EA                     l3632:
  7444  00D6EA  0E00               	movlw	0
  7445  00D6EC  1409               	andwf	___lltoft@c,w,c
  7446  00D6EE  6E0D               	movwf	??___lltoft& (0+255),c
  7447  00D6F0  0E00               	movlw	0
  7448  00D6F2  140A               	andwf	___lltoft@c+1,w,c
  7449  00D6F4  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7450  00D6F6  0E00               	movlw	0
  7451  00D6F8  140B               	andwf	___lltoft@c+2,w,c
  7452  00D6FA  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7453  00D6FC  0EFF               	movlw	255
  7454  00D6FE  140C               	andwf	___lltoft@c+3,w,c
  7455  00D700  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7456  00D702  500D               	movf	??___lltoft,w,c
  7457  00D704  100E               	iorwf	??___lltoft+1,w,c
  7458  00D706  100F               	iorwf	??___lltoft+2,w,c
  7459  00D708  1010               	iorwf	??___lltoft+3,w,c
  7460  00D70A  A4D8               	btfss	status,2,c
  7461  00D70C  D7E8               	goto	l3630
  7462  00D70E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7463  00D712  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7464  00D716  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7465  00D71A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7466  00D71E  0E00               	movlw	0
  7467  00D720  6E05               	movwf	___ftpack@sign,c
  7468  00D722  EC57  F06D         	call	___ftpack	;wreg free
  7469  00D726  C001  F009         	movff	?___ftpack,?___lltoft
  7470  00D72A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7471  00D72E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7472  00D732  0012               	return	
  7473  00D734                     __end_of___lltoft:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           plusw1	equ	0xFE3
  7484                           indf2	equ	0xFDF
  7485                           postinc2	equ	0xFDE
  7486                           postdec2	equ	0xFDD
  7487                           plusw2	equ	0xFDB
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function ___fttol *****************
  7493 ;; Defined at:
  7494 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  f1              3   42[COMRAM] float 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  lval            4   52[COMRAM] unsigned long 
  7499 ;;  exp1            1   56[COMRAM] unsigned char 
  7500 ;;  sign1           1   51[COMRAM] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  4   42[COMRAM] long 
  7503 ;; Registers used:
  7504 ;;		wreg, status,2, status,0
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;Total ram usage:       15 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; This function calls:
  7517 ;;		Nothing
  7518 ;; This function is called by:
  7519 ;;		_initSD
  7520 ;;		_printf
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text21
  7525  00DD36                     __ptext21:
  7526                           	opt stack 0
  7527  00DD36                     ___fttol:
  7528                           	opt stack 29
  7529                           
  7530                           ;incstack = 0
  7531  00DD36  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7532  00DD3A  6A30               	clrf	(??___fttol+1)& (0+255),c
  7533  00DD3C  6A31               	clrf	(??___fttol+2)& (0+255),c
  7534  00DD3E  342C               	rlcf	___fttol@f1+1,w,c
  7535  00DD40  362F               	rlcf	??___fttol& (0+255),f,c
  7536  00DD42  E301               	bnc	u3261
  7537  00DD44  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7538  00DD46                     u3261:
  7539  00DD46  502F               	movf	??___fttol,w,c
  7540  00DD48  6E39               	movwf	___fttol@exp1,c
  7541  00DD4A  5039               	movf	___fttol@exp1,w,c
  7542  00DD4C  A4D8               	btfss	status,2,c
  7543  00DD4E  D009               	goto	l3550
  7544  00DD50  0E00               	movlw	0
  7545  00DD52  6E2B               	movwf	?___fttol,c
  7546  00DD54  0E00               	movlw	0
  7547  00DD56  6E2C               	movwf	?___fttol+1,c
  7548  00DD58  0E00               	movlw	0
  7549  00DD5A  6E2D               	movwf	?___fttol+2,c
  7550  00DD5C  0E00               	movlw	0
  7551  00DD5E  6E2E               	movwf	?___fttol+3,c
  7552  00DD60  0012               	return	
  7553  00DD62                     l3550:
  7554  00DD62  0E17               	movlw	23
  7555  00DD64  6E2F               	movwf	??___fttol& (0+255),c
  7556  00DD66  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7557  00DD6A  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7558  00DD6E  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7559  00DD72  282F               	incf	??___fttol,w,c
  7560  00DD74  6E33               	movwf	(??___fttol+4)& (0+255),c
  7561  00DD76  D004               	goto	u3280
  7562  00DD78                     u3285:
  7563  00DD78  90D8               	bcf	status,0,c
  7564  00DD7A  3232               	rrcf	??___fttol+3,f,c
  7565  00DD7C  3231               	rrcf	??___fttol+2,f,c
  7566  00DD7E  3230               	rrcf	??___fttol+1,f,c
  7567  00DD80                     u3280:
  7568  00DD80  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7569  00DD82  D7FA               	goto	u3285
  7570  00DD84  5030               	movf	??___fttol+1,w,c
  7571  00DD86  6E34               	movwf	___fttol@sign1,c
  7572  00DD88  8E2C               	bsf	___fttol@f1+1,7,c
  7573  00DD8A  0EFF               	movlw	255
  7574  00DD8C  162B               	andwf	___fttol@f1,f,c
  7575  00DD8E  0EFF               	movlw	255
  7576  00DD90  162C               	andwf	___fttol@f1+1,f,c
  7577  00DD92  0E00               	movlw	0
  7578  00DD94  162D               	andwf	___fttol@f1+2,f,c
  7579  00DD96  502B               	movf	___fttol@f1,w,c
  7580  00DD98  6E35               	movwf	___fttol@lval,c
  7581  00DD9A  502C               	movf	___fttol@f1+1,w,c
  7582  00DD9C  6E36               	movwf	___fttol@lval+1,c
  7583  00DD9E  502D               	movf	___fttol@f1+2,w,c
  7584  00DDA0  6E37               	movwf	___fttol@lval+2,c
  7585  00DDA2  6A38               	clrf	___fttol@lval+3,c
  7586  00DDA4  0E8E               	movlw	142
  7587  00DDA6  5E39               	subwf	___fttol@exp1,f,c
  7588  00DDA8  AE39               	btfss	___fttol@exp1,7,c
  7589  00DDAA  D016               	goto	l3572
  7590  00DDAC  5039               	movf	___fttol@exp1,w,c
  7591  00DDAE  0A80               	xorlw	128
  7592  00DDB0  0F8F               	addlw	143
  7593  00DDB2  B0D8               	btfsc	status,0,c
  7594  00DDB4  D009               	goto	l3568
  7595  00DDB6  0E00               	movlw	0
  7596  00DDB8  6E2B               	movwf	?___fttol,c
  7597  00DDBA  0E00               	movlw	0
  7598  00DDBC  6E2C               	movwf	?___fttol+1,c
  7599  00DDBE  0E00               	movlw	0
  7600  00DDC0  6E2D               	movwf	?___fttol+2,c
  7601  00DDC2  0E00               	movlw	0
  7602  00DDC4  6E2E               	movwf	?___fttol+3,c
  7603  00DDC6  0012               	return	
  7604  00DDC8                     l3568:
  7605  00DDC8  90D8               	bcf	status,0,c
  7606  00DDCA  3238               	rrcf	___fttol@lval+3,f,c
  7607  00DDCC  3237               	rrcf	___fttol@lval+2,f,c
  7608  00DDCE  3236               	rrcf	___fttol@lval+1,f,c
  7609  00DDD0  3235               	rrcf	___fttol@lval,f,c
  7610  00DDD2  3E39               	incfsz	___fttol@exp1,f,c
  7611  00DDD4  D7F9               	goto	l3568
  7612  00DDD6  D015               	goto	l3582
  7613  00DDD8                     l3572:
  7614  00DDD8  0E17               	movlw	23
  7615  00DDDA  6439               	cpfsgt	___fttol@exp1,c
  7616  00DDDC  D00F               	goto	l3580
  7617  00DDDE  0E00               	movlw	0
  7618  00DDE0  6E2B               	movwf	?___fttol,c
  7619  00DDE2  0E00               	movlw	0
  7620  00DDE4  6E2C               	movwf	?___fttol+1,c
  7621  00DDE6  0E00               	movlw	0
  7622  00DDE8  6E2D               	movwf	?___fttol+2,c
  7623  00DDEA  0E00               	movlw	0
  7624  00DDEC  6E2E               	movwf	?___fttol+3,c
  7625  00DDEE  0012               	return	
  7626  00DDF0                     l3578:
  7627  00DDF0  90D8               	bcf	status,0,c
  7628  00DDF2  3635               	rlcf	___fttol@lval,f,c
  7629  00DDF4  3636               	rlcf	___fttol@lval+1,f,c
  7630  00DDF6  3637               	rlcf	___fttol@lval+2,f,c
  7631  00DDF8  3638               	rlcf	___fttol@lval+3,f,c
  7632  00DDFA  0639               	decf	___fttol@exp1,f,c
  7633  00DDFC                     l3580:
  7634  00DDFC  5039               	movf	___fttol@exp1,w,c
  7635  00DDFE  A4D8               	btfss	status,2,c
  7636  00DE00  D7F7               	goto	l3578
  7637  00DE02                     l3582:
  7638  00DE02  5034               	movf	___fttol@sign1,w,c
  7639  00DE04  B4D8               	btfsc	status,2,c
  7640  00DE06  D008               	goto	l3586
  7641  00DE08  1E38               	comf	___fttol@lval+3,f,c
  7642  00DE0A  1E37               	comf	___fttol@lval+2,f,c
  7643  00DE0C  1E36               	comf	___fttol@lval+1,f,c
  7644  00DE0E  6C35               	negf	___fttol@lval,c
  7645  00DE10  0E00               	movlw	0
  7646  00DE12  2236               	addwfc	___fttol@lval+1,f,c
  7647  00DE14  2237               	addwfc	___fttol@lval+2,f,c
  7648  00DE16  2238               	addwfc	___fttol@lval+3,f,c
  7649  00DE18                     l3586:
  7650  00DE18  C035  F02B         	movff	___fttol@lval,?___fttol
  7651  00DE1C  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7652  00DE20  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7653  00DE24  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7654  00DE28  0012               	return	
  7655  00DE2A                     __end_of___fttol:
  7656                           	opt stack 0
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           prodh	equ	0xFF4
  7662                           prodl	equ	0xFF3
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           plusw1	equ	0xFE3
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           plusw2	equ	0xFDB
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function ___ftmul *****************
  7675 ;; Defined at:
  7676 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  f1              3   20[COMRAM] float 
  7679 ;;  f2              3   23[COMRAM] float 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7682 ;;  sign            1   34[COMRAM] unsigned char 
  7683 ;;  cntr            1   33[COMRAM] unsigned char 
  7684 ;;  exp             1   29[COMRAM] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  3   20[COMRAM] float 
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, status,0, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7694 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;Total ram usage:       15 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    1
  7701 ;; This function calls:
  7702 ;;		___ftpack
  7703 ;; This function is called by:
  7704 ;;		_initSD
  7705 ;;		_fround
  7706 ;;		_scale
  7707 ;;		_printf
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text22
  7712  00DC42                     __ptext22:
  7713                           	opt stack 0
  7714  00DC42                     ___ftmul:
  7715                           	opt stack 27
  7716                           
  7717                           ;incstack = 0
  7718  00DC42  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7719  00DC46  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7720  00DC48  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7721  00DC4A  3416               	rlcf	___ftmul@f1+1,w,c
  7722  00DC4C  361B               	rlcf	??___ftmul& (0+255),f,c
  7723  00DC4E  E301               	bnc	u2731
  7724  00DC50  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7725  00DC52                     u2731:
  7726  00DC52  501B               	movf	??___ftmul,w,c
  7727  00DC54  6E1E               	movwf	___ftmul@exp,c
  7728  00DC56  501E               	movf	___ftmul@exp,w,c
  7729  00DC58  A4D8               	btfss	status,2,c
  7730  00DC5A  D007               	goto	l3128
  7731  00DC5C  0E00               	movlw	0
  7732  00DC5E  6E15               	movwf	?___ftmul,c
  7733  00DC60  0E00               	movlw	0
  7734  00DC62  6E16               	movwf	?___ftmul+1,c
  7735  00DC64  0E00               	movlw	0
  7736  00DC66  6E17               	movwf	?___ftmul+2,c
  7737  00DC68  0012               	return	
  7738  00DC6A                     l3128:
  7739  00DC6A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7740  00DC6E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7741  00DC70  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7742  00DC72  3419               	rlcf	___ftmul@f2+1,w,c
  7743  00DC74  361B               	rlcf	??___ftmul& (0+255),f,c
  7744  00DC76  E301               	bnc	u2751
  7745  00DC78  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7746  00DC7A                     u2751:
  7747  00DC7A  501B               	movf	??___ftmul,w,c
  7748  00DC7C  6E23               	movwf	___ftmul@sign,c
  7749  00DC7E  5023               	movf	___ftmul@sign,w,c
  7750  00DC80  A4D8               	btfss	status,2,c
  7751  00DC82  D007               	goto	l3134
  7752  00DC84  0E00               	movlw	0
  7753  00DC86  6E15               	movwf	?___ftmul,c
  7754  00DC88  0E00               	movlw	0
  7755  00DC8A  6E16               	movwf	?___ftmul+1,c
  7756  00DC8C  0E00               	movlw	0
  7757  00DC8E  6E17               	movwf	?___ftmul+2,c
  7758  00DC90  0012               	return	
  7759  00DC92                     l3134:
  7760  00DC92  5023               	movf	___ftmul@sign,w,c
  7761  00DC94  0F7B               	addlw	123
  7762  00DC96  261E               	addwf	___ftmul@exp,f,c
  7763  00DC98  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7764  00DC9C  501A               	movf	___ftmul@f2+2,w,c
  7765  00DC9E  1A23               	xorwf	___ftmul@sign,f,c
  7766  00DCA0  0E80               	movlw	128
  7767  00DCA2  1623               	andwf	___ftmul@sign,f,c
  7768  00DCA4  8E16               	bsf	___ftmul@f1+1,7,c
  7769  00DCA6  8E19               	bsf	___ftmul@f2+1,7,c
  7770  00DCA8  0EFF               	movlw	255
  7771  00DCAA  1618               	andwf	___ftmul@f2,f,c
  7772  00DCAC  0EFF               	movlw	255
  7773  00DCAE  1619               	andwf	___ftmul@f2+1,f,c
  7774  00DCB0  0E00               	movlw	0
  7775  00DCB2  161A               	andwf	___ftmul@f2+2,f,c
  7776  00DCB4  0E00               	movlw	0
  7777  00DCB6  6E1F               	movwf	___ftmul@f3_as_product,c
  7778  00DCB8  0E00               	movlw	0
  7779  00DCBA  6E20               	movwf	___ftmul@f3_as_product+1,c
  7780  00DCBC  0E00               	movlw	0
  7781  00DCBE  6E21               	movwf	___ftmul@f3_as_product+2,c
  7782  00DCC0  0E07               	movlw	7
  7783  00DCC2  6E22               	movwf	___ftmul@cntr,c
  7784  00DCC4                     l3148:
  7785  00DCC4  A015               	btfss	___ftmul@f1,0,c
  7786  00DCC6  D006               	goto	l3152
  7787  00DCC8  5018               	movf	___ftmul@f2,w,c
  7788  00DCCA  261F               	addwf	___ftmul@f3_as_product,f,c
  7789  00DCCC  5019               	movf	___ftmul@f2+1,w,c
  7790  00DCCE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7791  00DCD0  501A               	movf	___ftmul@f2+2,w,c
  7792  00DCD2  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7793  00DCD4                     l3152:
  7794  00DCD4  90D8               	bcf	status,0,c
  7795  00DCD6  3217               	rrcf	___ftmul@f1+2,f,c
  7796  00DCD8  3216               	rrcf	___ftmul@f1+1,f,c
  7797  00DCDA  3215               	rrcf	___ftmul@f1,f,c
  7798  00DCDC  90D8               	bcf	status,0,c
  7799  00DCDE  3618               	rlcf	___ftmul@f2,f,c
  7800  00DCE0  3619               	rlcf	___ftmul@f2+1,f,c
  7801  00DCE2  361A               	rlcf	___ftmul@f2+2,f,c
  7802  00DCE4  2E22               	decfsz	___ftmul@cntr,f,c
  7803  00DCE6  D7EE               	goto	l3148
  7804  00DCE8  0E09               	movlw	9
  7805  00DCEA  6E22               	movwf	___ftmul@cntr,c
  7806  00DCEC                     l3158:
  7807  00DCEC  A015               	btfss	___ftmul@f1,0,c
  7808  00DCEE  D006               	goto	l3162
  7809  00DCF0  5018               	movf	___ftmul@f2,w,c
  7810  00DCF2  261F               	addwf	___ftmul@f3_as_product,f,c
  7811  00DCF4  5019               	movf	___ftmul@f2+1,w,c
  7812  00DCF6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7813  00DCF8  501A               	movf	___ftmul@f2+2,w,c
  7814  00DCFA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7815  00DCFC                     l3162:
  7816  00DCFC  90D8               	bcf	status,0,c
  7817  00DCFE  3217               	rrcf	___ftmul@f1+2,f,c
  7818  00DD00  3216               	rrcf	___ftmul@f1+1,f,c
  7819  00DD02  3215               	rrcf	___ftmul@f1,f,c
  7820  00DD04  90D8               	bcf	status,0,c
  7821  00DD06  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7822  00DD08  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7823  00DD0A  321F               	rrcf	___ftmul@f3_as_product,f,c
  7824  00DD0C  2E22               	decfsz	___ftmul@cntr,f,c
  7825  00DD0E  D7EE               	goto	l3158
  7826  00DD10  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7827  00DD14  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7828  00DD18  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7829  00DD1C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7830  00DD20  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7831  00DD24  EC57  F06D         	call	___ftpack	;wreg free
  7832  00DD28  C001  F015         	movff	?___ftpack,?___ftmul
  7833  00DD2C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7834  00DD30  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7835  00DD34  0012               	return	
  7836  00DD36                     __end_of___ftmul:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           plusw1	equ	0xFE3
  7847                           indf2	equ	0xFDF
  7848                           postinc2	equ	0xFDE
  7849                           postdec2	equ	0xFDD
  7850                           plusw2	equ	0xFDB
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function ___ftdiv *****************
  7856 ;; Defined at:
  7857 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  f1              3   11[COMRAM] float 
  7860 ;;  f2              3   14[COMRAM] float 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  f3              3   21[COMRAM] float 
  7863 ;;  sign            1   25[COMRAM] unsigned char 
  7864 ;;  exp             1   24[COMRAM] unsigned char 
  7865 ;;  cntr            1   20[COMRAM] unsigned char 
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  3   11[COMRAM] float 
  7868 ;; Registers used:
  7869 ;;		wreg, status,2, status,0, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7875 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;Total ram usage:       15 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    1
  7882 ;; This function calls:
  7883 ;;		___ftpack
  7884 ;; This function is called by:
  7885 ;;		_initSD
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text23
  7890  00DB5C                     __ptext23:
  7891                           	opt stack 0
  7892  00DB5C                     ___ftdiv:
  7893                           	opt stack 28
  7894                           
  7895                           ;incstack = 0
  7896  00DB5C  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  7897  00DB60  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  7898  00DB62  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  7899  00DB64  340D               	rlcf	___ftdiv@f1+1,w,c
  7900  00DB66  3612               	rlcf	??___ftdiv& (0+255),f,c
  7901  00DB68  E301               	bnc	u3161
  7902  00DB6A  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  7903  00DB6C                     u3161:
  7904  00DB6C  5012               	movf	??___ftdiv,w,c
  7905  00DB6E  6E19               	movwf	___ftdiv@exp,c
  7906  00DB70  5019               	movf	___ftdiv@exp,w,c
  7907  00DB72  A4D8               	btfss	status,2,c
  7908  00DB74  D007               	goto	l3474
  7909  00DB76  0E00               	movlw	0
  7910  00DB78  6E0C               	movwf	?___ftdiv,c
  7911  00DB7A  0E00               	movlw	0
  7912  00DB7C  6E0D               	movwf	?___ftdiv+1,c
  7913  00DB7E  0E00               	movlw	0
  7914  00DB80  6E0E               	movwf	?___ftdiv+2,c
  7915  00DB82  0012               	return	
  7916  00DB84                     l3474:
  7917  00DB84  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  7918  00DB88  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  7919  00DB8A  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  7920  00DB8C  3410               	rlcf	___ftdiv@f2+1,w,c
  7921  00DB8E  3612               	rlcf	??___ftdiv& (0+255),f,c
  7922  00DB90  E301               	bnc	u3181
  7923  00DB92  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  7924  00DB94                     u3181:
  7925  00DB94  5012               	movf	??___ftdiv,w,c
  7926  00DB96  6E1A               	movwf	___ftdiv@sign,c
  7927  00DB98  501A               	movf	___ftdiv@sign,w,c
  7928  00DB9A  A4D8               	btfss	status,2,c
  7929  00DB9C  D007               	goto	l3480
  7930  00DB9E  0E00               	movlw	0
  7931  00DBA0  6E0C               	movwf	?___ftdiv,c
  7932  00DBA2  0E00               	movlw	0
  7933  00DBA4  6E0D               	movwf	?___ftdiv+1,c
  7934  00DBA6  0E00               	movlw	0
  7935  00DBA8  6E0E               	movwf	?___ftdiv+2,c
  7936  00DBAA  0012               	return	
  7937  00DBAC                     l3480:
  7938  00DBAC  0E00               	movlw	0
  7939  00DBAE  6E16               	movwf	___ftdiv@f3,c
  7940  00DBB0  0E00               	movlw	0
  7941  00DBB2  6E17               	movwf	___ftdiv@f3+1,c
  7942  00DBB4  0E00               	movlw	0
  7943  00DBB6  6E18               	movwf	___ftdiv@f3+2,c
  7944  00DBB8  501A               	movf	___ftdiv@sign,w,c
  7945  00DBBA  0F89               	addlw	137
  7946  00DBBC  5E19               	subwf	___ftdiv@exp,f,c
  7947  00DBBE  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  7948  00DBC2  5011               	movf	___ftdiv@f2+2,w,c
  7949  00DBC4  1A1A               	xorwf	___ftdiv@sign,f,c
  7950  00DBC6  0E80               	movlw	128
  7951  00DBC8  161A               	andwf	___ftdiv@sign,f,c
  7952  00DBCA  8E0D               	bsf	___ftdiv@f1+1,7,c
  7953  00DBCC  0EFF               	movlw	255
  7954  00DBCE  160C               	andwf	___ftdiv@f1,f,c
  7955  00DBD0  0EFF               	movlw	255
  7956  00DBD2  160D               	andwf	___ftdiv@f1+1,f,c
  7957  00DBD4  0E00               	movlw	0
  7958  00DBD6  160E               	andwf	___ftdiv@f1+2,f,c
  7959  00DBD8  8E10               	bsf	___ftdiv@f2+1,7,c
  7960  00DBDA  0EFF               	movlw	255
  7961  00DBDC  160F               	andwf	___ftdiv@f2,f,c
  7962  00DBDE  0EFF               	movlw	255
  7963  00DBE0  1610               	andwf	___ftdiv@f2+1,f,c
  7964  00DBE2  0E00               	movlw	0
  7965  00DBE4  1611               	andwf	___ftdiv@f2+2,f,c
  7966  00DBE6  0E18               	movlw	24
  7967  00DBE8  6E15               	movwf	___ftdiv@cntr,c
  7968  00DBEA                     l3500:
  7969  00DBEA  90D8               	bcf	status,0,c
  7970  00DBEC  3616               	rlcf	___ftdiv@f3,f,c
  7971  00DBEE  3617               	rlcf	___ftdiv@f3+1,f,c
  7972  00DBF0  3618               	rlcf	___ftdiv@f3+2,f,c
  7973  00DBF2  500F               	movf	___ftdiv@f2,w,c
  7974  00DBF4  5C0C               	subwf	___ftdiv@f1,w,c
  7975  00DBF6  5010               	movf	___ftdiv@f2+1,w,c
  7976  00DBF8  580D               	subwfb	___ftdiv@f1+1,w,c
  7977  00DBFA  5011               	movf	___ftdiv@f2+2,w,c
  7978  00DBFC  580E               	subwfb	___ftdiv@f1+2,w,c
  7979  00DBFE  A0D8               	btfss	status,0,c
  7980  00DC00  D007               	goto	l905
  7981  00DC02  500F               	movf	___ftdiv@f2,w,c
  7982  00DC04  5E0C               	subwf	___ftdiv@f1,f,c
  7983  00DC06  5010               	movf	___ftdiv@f2+1,w,c
  7984  00DC08  5A0D               	subwfb	___ftdiv@f1+1,f,c
  7985  00DC0A  5011               	movf	___ftdiv@f2+2,w,c
  7986  00DC0C  5A0E               	subwfb	___ftdiv@f1+2,f,c
  7987  00DC0E  8016               	bsf	___ftdiv@f3,0,c
  7988  00DC10                     l905:
  7989  00DC10  90D8               	bcf	status,0,c
  7990  00DC12  360C               	rlcf	___ftdiv@f1,f,c
  7991  00DC14  360D               	rlcf	___ftdiv@f1+1,f,c
  7992  00DC16  360E               	rlcf	___ftdiv@f1+2,f,c
  7993  00DC18  2E15               	decfsz	___ftdiv@cntr,f,c
  7994  00DC1A  D7E7               	goto	l3500
  7995  00DC1C  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  7996  00DC20  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7997  00DC24  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7998  00DC28  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  7999  00DC2C  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  8000  00DC30  EC57  F06D         	call	___ftpack	;wreg free
  8001  00DC34  C001  F00C         	movff	?___ftpack,?___ftdiv
  8002  00DC38  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  8003  00DC3C  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  8004  00DC40  0012               	return	
  8005  00DC42                     __end_of___ftdiv:
  8006                           	opt stack 0
  8007                           tblptru	equ	0xFF8
  8008                           tblptrh	equ	0xFF7
  8009                           tblptrl	equ	0xFF6
  8010                           tablat	equ	0xFF5
  8011                           prodh	equ	0xFF4
  8012                           prodl	equ	0xFF3
  8013                           postinc0	equ	0xFEE
  8014                           wreg	equ	0xFE8
  8015                           plusw1	equ	0xFE3
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           plusw2	equ	0xFDB
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function ___ftpack *****************
  8025 ;; Defined at:
  8026 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  arg             3    0[COMRAM] unsigned um
  8029 ;;  exp             1    3[COMRAM] unsigned char 
  8030 ;;  sign            1    4[COMRAM] unsigned char 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  3    0[COMRAM] float 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:        8 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		___ftadd
  8052 ;;		___ftdiv
  8053 ;;		___ftmul
  8054 ;;		___lltoft
  8055 ;;		___lwtoft
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text24
  8060  00DAAE                     __ptext24:
  8061                           	opt stack 0
  8062  00DAAE                     ___ftpack:
  8063                           	opt stack 27
  8064                           
  8065                           ;incstack = 0
  8066  00DAAE  5004               	movf	___ftpack@exp,w,c
  8067  00DAB0  B4D8               	btfsc	status,2,c
  8068  00DAB2  D005               	goto	l2938
  8069  00DAB4  5001               	movf	___ftpack@arg,w,c
  8070  00DAB6  1002               	iorwf	___ftpack@arg+1,w,c
  8071  00DAB8  1003               	iorwf	___ftpack@arg+2,w,c
  8072  00DABA  A4D8               	btfss	status,2,c
  8073  00DABC  D00C               	goto	l2944
  8074  00DABE                     l2938:
  8075  00DABE  0E00               	movlw	0
  8076  00DAC0  6E01               	movwf	?___ftpack,c
  8077  00DAC2  0E00               	movlw	0
  8078  00DAC4  6E02               	movwf	?___ftpack+1,c
  8079  00DAC6  0E00               	movlw	0
  8080  00DAC8  6E03               	movwf	?___ftpack+2,c
  8081  00DACA  0012               	return	
  8082  00DACC                     l2942:
  8083  00DACC  2A04               	incf	___ftpack@exp,f,c
  8084  00DACE  90D8               	bcf	status,0,c
  8085  00DAD0  3203               	rrcf	___ftpack@arg+2,f,c
  8086  00DAD2  3202               	rrcf	___ftpack@arg+1,f,c
  8087  00DAD4  3201               	rrcf	___ftpack@arg,f,c
  8088  00DAD6                     l2944:
  8089  00DAD6  0E00               	movlw	0
  8090  00DAD8  1401               	andwf	___ftpack@arg,w,c
  8091  00DADA  6E06               	movwf	??___ftpack& (0+255),c
  8092  00DADC  0E00               	movlw	0
  8093  00DADE  1402               	andwf	___ftpack@arg+1,w,c
  8094  00DAE0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8095  00DAE2  0EFE               	movlw	254
  8096  00DAE4  1403               	andwf	___ftpack@arg+2,w,c
  8097  00DAE6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8098  00DAE8  5006               	movf	??___ftpack,w,c
  8099  00DAEA  1007               	iorwf	??___ftpack+1,w,c
  8100  00DAEC  1008               	iorwf	??___ftpack+2,w,c
  8101  00DAEE  B4D8               	btfsc	status,2,c
  8102  00DAF0  D00C               	goto	l2950
  8103  00DAF2  D7EC               	goto	l2942
  8104  00DAF4                     l2946:
  8105  00DAF4  2A04               	incf	___ftpack@exp,f,c
  8106  00DAF6  0E01               	movlw	1
  8107  00DAF8  2601               	addwf	___ftpack@arg,f,c
  8108  00DAFA  0E00               	movlw	0
  8109  00DAFC  2202               	addwfc	___ftpack@arg+1,f,c
  8110  00DAFE  0E00               	movlw	0
  8111  00DB00  2203               	addwfc	___ftpack@arg+2,f,c
  8112  00DB02  90D8               	bcf	status,0,c
  8113  00DB04  3203               	rrcf	___ftpack@arg+2,f,c
  8114  00DB06  3202               	rrcf	___ftpack@arg+1,f,c
  8115  00DB08  3201               	rrcf	___ftpack@arg,f,c
  8116  00DB0A                     l2950:
  8117  00DB0A  0E00               	movlw	0
  8118  00DB0C  1401               	andwf	___ftpack@arg,w,c
  8119  00DB0E  6E06               	movwf	??___ftpack& (0+255),c
  8120  00DB10  0E00               	movlw	0
  8121  00DB12  1402               	andwf	___ftpack@arg+1,w,c
  8122  00DB14  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8123  00DB16  0EFF               	movlw	255
  8124  00DB18  1403               	andwf	___ftpack@arg+2,w,c
  8125  00DB1A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8126  00DB1C  5006               	movf	??___ftpack,w,c
  8127  00DB1E  1007               	iorwf	??___ftpack+1,w,c
  8128  00DB20  1008               	iorwf	??___ftpack+2,w,c
  8129  00DB22  B4D8               	btfsc	status,2,c
  8130  00DB24  D006               	goto	l2954
  8131  00DB26  D7E6               	goto	l2946
  8132  00DB28                     l2952:
  8133  00DB28  0604               	decf	___ftpack@exp,f,c
  8134  00DB2A  90D8               	bcf	status,0,c
  8135  00DB2C  3601               	rlcf	___ftpack@arg,f,c
  8136  00DB2E  3602               	rlcf	___ftpack@arg+1,f,c
  8137  00DB30  3603               	rlcf	___ftpack@arg+2,f,c
  8138  00DB32                     l2954:
  8139  00DB32  BE02               	btfsc	___ftpack@arg+1,7,c
  8140  00DB34  D003               	goto	l847
  8141  00DB36  0E02               	movlw	2
  8142  00DB38  6004               	cpfslt	___ftpack@exp,c
  8143  00DB3A  D7F6               	goto	l2952
  8144  00DB3C                     l847:
  8145  00DB3C  A004               	btfss	___ftpack@exp,0,c
  8146  00DB3E  9E02               	bcf	___ftpack@arg+1,7,c
  8147  00DB40  90D8               	bcf	status,0,c
  8148  00DB42  3204               	rrcf	___ftpack@exp,f,c
  8149  00DB44  5004               	movf	___ftpack@exp,w,c
  8150  00DB46  1203               	iorwf	___ftpack@arg+2,f,c
  8151  00DB48  5005               	movf	___ftpack@sign,w,c
  8152  00DB4A  A4D8               	btfss	status,2,c
  8153  00DB4C  8E03               	bsf	___ftpack@arg+2,7,c
  8154  00DB4E  C001  F001         	movff	___ftpack@arg,?___ftpack
  8155  00DB52  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8156  00DB56  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8157  00DB5A  0012               	return	
  8158  00DB5C                     __end_of___ftpack:
  8159                           	opt stack 0
  8160                           tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           plusw1	equ	0xFE3
  8169                           indf2	equ	0xFDF
  8170                           postinc2	equ	0xFDE
  8171                           postdec2	equ	0xFDD
  8172                           plusw2	equ	0xFDB
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function _SD_ACMD *****************
  8178 ;; Defined at:
  8179 ;;		line 88 in file "SD_PIC.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  cmd             1    wreg     unsigned char 
  8182 ;;  arg             4   12[COMRAM] unsigned long 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  cmd             1   16[COMRAM] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      unsigned char 
  8187 ;; Registers used:
  8188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;Total ram usage:        5 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    3
  8201 ;; This function calls:
  8202 ;;		_SD_Command
  8203 ;; This function is called by:
  8204 ;;		_initSD
  8205 ;;		_SD_MBW_Start
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text25
  8210  00D612                     __ptext25:
  8211                           	opt stack 0
  8212  00D612                     _SD_ACMD:
  8213                           	opt stack 26
  8214                           
  8215                           ;incstack = 0
  8216                           ;SD_ACMD@cmd stored from wreg
  8217  00D612  6E11               	movwf	SD_ACMD@cmd,c
  8218                           
  8219                           ;SD_PIC.c: 99: SD_Command(CMD55, 0);
  8220  00D614  0E00               	movlw	0
  8221  00D616  6E04               	movwf	SD_Command@arg,c
  8222  00D618  0E00               	movlw	0
  8223  00D61A  6E05               	movwf	SD_Command@arg+1,c
  8224  00D61C  0E00               	movlw	0
  8225  00D61E  6E06               	movwf	SD_Command@arg+2,c
  8226  00D620  0E00               	movlw	0
  8227  00D622  6E07               	movwf	SD_Command@arg+3,c
  8228  00D624  0EF3               	movlw	low _CMD55
  8229  00D626  6EF6               	movwf	tblptrl,c
  8230  00D628                     	if	1	;There is more than 1 active tblptr byte
  8231  00D628  0EFE               	movlw	high _CMD55
  8232  00D62A  6EF7               	movwf	tblptrh,c
  8233  00D62C                     	endif
  8234  00D62C                     	if	0	;There are less than 3 active tblptr bytes
  8235  00D62C                     	endif
  8236  00D62C  0008               	tblrd		*
  8237  00D62E  50F5               	movf	tablat,w,c
  8238  00D630  ECC7  F06C         	call	_SD_Command
  8239                           
  8240                           ;SD_PIC.c: 100: return SD_Command(cmd, arg);
  8241  00D634  C00D  F004         	movff	SD_ACMD@arg,SD_Command@arg
  8242  00D638  C00E  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  8243  00D63C  C00F  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  8244  00D640  C010  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  8245  00D644  5011               	movf	SD_ACMD@cmd,w,c
  8246  00D646  ECC7  F06C         	call	_SD_Command
  8247  00D64A  0012               	return	
  8248  00D64C                     __end_of_SD_ACMD:
  8249                           	opt stack 0
  8250                           tblptru	equ	0xFF8
  8251                           tblptrh	equ	0xFF7
  8252                           tblptrl	equ	0xFF6
  8253                           tablat	equ	0xFF5
  8254                           prodh	equ	0xFF4
  8255                           prodl	equ	0xFF3
  8256                           postinc0	equ	0xFEE
  8257                           wreg	equ	0xFE8
  8258                           plusw1	equ	0xFE3
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           plusw2	equ	0xFDB
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8
  8266                           
  8267 ;; *************** function _SD_Command *****************
  8268 ;; Defined at:
  8269 ;;		line 32 in file "SD_PIC.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;  cmd             1    wreg     unsigned char 
  8272 ;;  arg             4    3[COMRAM] unsigned long 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  cmd             1    9[COMRAM] unsigned char 
  8275 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  8276 ;;		 -> SD_Command@arg(4), 
  8277 ;;  n               1   11[COMRAM] unsigned char 
  8278 ;;  response        1   10[COMRAM] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      unsigned char 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;Total ram usage:        9 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    2
  8295 ;; This function calls:
  8296 ;;		_spiReceive
  8297 ;;		_spiSend
  8298 ;; This function is called by:
  8299 ;;		_SD_ACMD
  8300 ;;		_initSD
  8301 ;;		_SD_SingleBlockWrite
  8302 ;;		_SD_MBW_Start
  8303 ;;		_SD_MBW_Send
  8304 ;;		_SD_SingleBlockRead
  8305 ;;		_SD_MBR_Start
  8306 ;;		_SD_MBR_Stop
  8307 ;;		_SD_EraseBlocks
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text26
  8312  00D98E                     __ptext26:
  8313                           	opt stack 0
  8314  00D98E                     _SD_Command:
  8315                           	opt stack 27
  8316                           
  8317                           ;incstack = 0
  8318                           ;SD_Command@cmd stored from wreg
  8319  00D98E  6E0A               	movwf	SD_Command@cmd,c
  8320                           
  8321                           ;SD_PIC.c: 42: unsigned char response;
  8322                           ;SD_PIC.c: 43: unsigned char n = 0;
  8323  00D990  0E00               	movlw	0
  8324  00D992  6E0C               	movwf	SD_Command@n,c
  8325                           
  8326                           ;SD_PIC.c: 46: LATEbits.LATE2 = 0;
  8327  00D994  948D               	bcf	3981,2,c	;volatile
  8328  00D996                     l3012:
  8329  00D996  EC6B  F06A         	call	_spiReceive	;wreg free
  8330  00D99A  0AFF               	xorlw	255
  8331  00D99C  A4D8               	btfss	status,2,c
  8332  00D99E  D7FB               	goto	l3012
  8333                           
  8334                           ;SD_PIC.c: 54: spiSend(cmd | 0x40U);
  8335  00D9A0  500A               	movf	SD_Command@cmd,w,c
  8336  00D9A2  0940               	iorlw	64
  8337  00D9A4  EC6F  F06A         	call	_spiSend
  8338                           
  8339                           ;SD_PIC.c: 58: unsigned char* ptr = (unsigned char*)&arg + sizeof(unsigned long) - 1;
  8340  00D9A8  0E07               	movlw	low (SD_Command@arg+3)
  8341  00D9AA  6E08               	movwf	SD_Command@ptr,c
  8342  00D9AC  0E00               	movlw	high (SD_Command@arg+3)
  8343  00D9AE  6E09               	movwf	SD_Command@ptr+1,c
  8344                           
  8345                           ;SD_PIC.c: 59: while(n < 4){
  8346  00D9B0  D00B               	goto	l3024
  8347  00D9B2                     l3018:
  8348                           
  8349                           ;SD_PIC.c: 60: spiSend(*ptr);
  8350  00D9B2  C008  FFD9         	movff	SD_Command@ptr,fsr2l
  8351  00D9B6  C009  FFDA         	movff	SD_Command@ptr+1,fsr2h
  8352  00D9BA  50DF               	movf	indf2,w,c
  8353  00D9BC  EC6F  F06A         	call	_spiSend
  8354                           
  8355                           ;SD_PIC.c: 61: ptr--;
  8356  00D9C0  0608               	decf	SD_Command@ptr,f,c
  8357  00D9C2  A0D8               	btfss	status,0,c
  8358  00D9C4  0609               	decf	SD_Command@ptr+1,f,c
  8359                           
  8360                           ;SD_PIC.c: 62: n++;
  8361  00D9C6  2A0C               	incf	SD_Command@n,f,c
  8362  00D9C8                     l3024:
  8363  00D9C8  0E03               	movlw	3
  8364  00D9CA  640C               	cpfsgt	SD_Command@n,c
  8365  00D9CC  D7F2               	goto	l3018
  8366                           
  8367                           ;SD_PIC.c: 63: }
  8368                           ;SD_PIC.c: 68: if(cmd == CMD8){
  8369  00D9CE  0E01               	movlw	low _CMD8
  8370  00D9D0  6EF6               	movwf	tblptrl,c
  8371  00D9D2                     	if	1	;There is more than 1 active tblptr byte
  8372  00D9D2  0EFF               	movlw	high _CMD8
  8373  00D9D4  6EF7               	movwf	tblptrh,c
  8374  00D9D6                     	endif
  8375  00D9D6                     	if	0	;There are less than 3 active tblptr bytes
  8376  00D9D6                     	endif
  8377  00D9D6  0008               	tblrd		*
  8378  00D9D8  50F5               	movf	tablat,w,c
  8379  00D9DA  620A               	cpfseq	SD_Command@cmd,c
  8380  00D9DC  D009               	goto	l3030
  8381                           
  8382                           ;SD_PIC.c: 69: spiSend(CMD8CRC);
  8383  00D9DE  0E00               	movlw	low _CMD8CRC
  8384  00D9E0  6EF6               	movwf	tblptrl,c
  8385  00D9E2                     	if	1	;There is more than 1 active tblptr byte
  8386  00D9E2  0EFF               	movlw	high _CMD8CRC
  8387  00D9E4  6EF7               	movwf	tblptrh,c
  8388  00D9E6                     	endif
  8389  00D9E6                     	if	0	;There are less than 3 active tblptr bytes
  8390  00D9E6                     	endif
  8391  00D9E6  0008               	tblrd		*
  8392  00D9E8  50F5               	movf	tablat,w,c
  8393  00D9EA  EC6F  F06A         	call	_spiSend
  8394                           
  8395                           ;SD_PIC.c: 70: }
  8396  00D9EE  D008               	goto	l3032
  8397  00D9F0                     l3030:
  8398                           
  8399                           ;SD_PIC.c: 71: else{
  8400                           ;SD_PIC.c: 72: spiSend(CMD0CRC);
  8401  00D9F0  0E03               	movlw	low _CMD0CRC
  8402  00D9F2  6EF6               	movwf	tblptrl,c
  8403  00D9F4                     	if	1	;There is more than 1 active tblptr byte
  8404  00D9F4  0EFF               	movlw	high _CMD0CRC
  8405  00D9F6  6EF7               	movwf	tblptrh,c
  8406  00D9F8                     	endif
  8407  00D9F8                     	if	0	;There are less than 3 active tblptr bytes
  8408  00D9F8                     	endif
  8409  00D9F8  0008               	tblrd		*
  8410  00D9FA  50F5               	movf	tablat,w,c
  8411  00D9FC  EC6F  F06A         	call	_spiSend
  8412  00DA00                     l3032:
  8413                           
  8414                           ;SD_PIC.c: 73: }
  8415                           ;SD_PIC.c: 76: n = 0;
  8416  00DA00  0E00               	movlw	0
  8417  00DA02  6E0C               	movwf	SD_Command@n,c
  8418  00DA04                     l3034:
  8419                           
  8420                           ;SD_PIC.c: 78: response = spiReceive();
  8421  00DA04  EC6B  F06A         	call	_spiReceive	;wreg free
  8422  00DA08  6E0B               	movwf	SD_Command@response,c
  8423                           
  8424                           ;SD_PIC.c: 79: n++;
  8425  00DA0A  2A0C               	incf	SD_Command@n,f,c
  8426                           
  8427                           ;SD_PIC.c: 80: }while((n < 8) && (response == 0xFF));
  8428  00DA0C  0E08               	movlw	8
  8429  00DA0E  600C               	cpfslt	SD_Command@n,c
  8430  00DA10  D003               	goto	l319
  8431  00DA12  280B               	incf	SD_Command@response,w,c
  8432  00DA14  B4D8               	btfsc	status,2,c
  8433  00DA16  D7F6               	goto	l3034
  8434  00DA18                     l319:
  8435                           
  8436                           ;SD_PIC.c: 83: LATEbits.LATE2 = 1;
  8437  00DA18  848D               	bsf	3981,2,c	;volatile
  8438                           
  8439                           ;SD_PIC.c: 85: return response;
  8440  00DA1A  500B               	movf	SD_Command@response,w,c
  8441  00DA1C  0012               	return	
  8442  00DA1E                     __end_of_SD_Command:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           plusw1	equ	0xFE3
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           plusw2	equ	0xFDB
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _spiSend *****************
  8462 ;; Defined at:
  8463 ;;		line 33 in file "SPI_PIC.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  val             1    wreg     unsigned char 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  val             1    2[COMRAM] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        1 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    1
  8484 ;; This function calls:
  8485 ;;		_spiTransfer
  8486 ;; This function is called by:
  8487 ;;		_SD_Command
  8488 ;;		_initSD
  8489 ;;		_SD_SendDummyBytes
  8490 ;;		_SD_SingleBlockWrite
  8491 ;;		_SD_MBW_Send
  8492 ;;		_SD_MBW_Stop
  8493 ;;		_SD_SingleBlockRead
  8494 ;;		_SD_MBR_Receive
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text27
  8499  00D4DE                     __ptext27:
  8500                           	opt stack 0
  8501  00D4DE                     _spiSend:
  8502                           	opt stack 28
  8503                           
  8504                           ;incstack = 0
  8505                           ;spiSend@val stored from wreg
  8506  00D4DE  6E03               	movwf	spiSend@val,c
  8507                           
  8508                           ;SPI_PIC.c: 41: spiTransfer(val);
  8509  00D4E0  5003               	movf	spiSend@val,w,c
  8510  00D4E2  ECA4  F06A         	call	_spiTransfer
  8511  00D4E6  0012               	return		;funcret
  8512  00D4E8                     __end_of_spiSend:
  8513                           	opt stack 0
  8514                           tblptru	equ	0xFF8
  8515                           tblptrh	equ	0xFF7
  8516                           tblptrl	equ	0xFF6
  8517                           tablat	equ	0xFF5
  8518                           prodh	equ	0xFF4
  8519                           prodl	equ	0xFF3
  8520                           postinc0	equ	0xFEE
  8521                           wreg	equ	0xFE8
  8522                           plusw1	equ	0xFE3
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           plusw2	equ	0xFDB
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _spiReceive *****************
  8532 ;; Defined at:
  8533 ;;		line 44 in file "SPI_PIC.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      unsigned char 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;Total ram usage:        0 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    1
  8554 ;; This function calls:
  8555 ;;		_spiTransfer
  8556 ;; This function is called by:
  8557 ;;		_SD_Command
  8558 ;;		_initSD
  8559 ;;		_SD_SingleBlockWrite
  8560 ;;		_SD_MBW_Send
  8561 ;;		_SD_MBW_Stop
  8562 ;;		_SD_SingleBlockRead
  8563 ;;		_SD_MBR_Receive
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           	psect	text28
  8568  00D4D6                     __ptext28:
  8569                           	opt stack 0
  8570  00D4D6                     _spiReceive:
  8571                           	opt stack 28
  8572                           
  8573                           ;SPI_PIC.c: 51: return spiTransfer(0xFF);
  8574                           
  8575                           ;incstack = 0
  8576  00D4D6  0EFF               	movlw	255
  8577  00D4D8  ECA4  F06A         	call	_spiTransfer
  8578  00D4DC  0012               	return	
  8579  00D4DE                     __end_of_spiReceive:
  8580                           	opt stack 0
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           postinc0	equ	0xFEE
  8588                           wreg	equ	0xFE8
  8589                           plusw1	equ	0xFE3
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           plusw2	equ	0xFDB
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _spiTransfer *****************
  8599 ;; Defined at:
  8600 ;;		line 12 in file "SPI_PIC.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  byteToTransf    1    wreg     unsigned char 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      unsigned char 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        2 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; This function calls:
  8621 ;;		Nothing
  8622 ;; This function is called by:
  8623 ;;		_spiSend
  8624 ;;		_spiReceive
  8625 ;;		_SD_SingleBlockWrite
  8626 ;;		_SD_MBW_Send
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text29
  8631  00D548                     __ptext29:
  8632                           	opt stack 0
  8633  00D548                     _spiTransfer:
  8634                           	opt stack 28
  8635                           
  8636                           ;incstack = 0
  8637                           ;spiTransfer@byteToTransfer stored from wreg
  8638  00D548  6E02               	movwf	spiTransfer@byteToTransfer,c
  8639                           
  8640                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  8641  00D54A  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  8642  00D54E                     l2922:
  8643  00D54E  B69E               	btfsc	3998,3,c	;volatile
  8644  00D550  D002               	goto	u2350
  8645  00D552  0E01               	movlw	1
  8646  00D554  D001               	goto	u2352
  8647  00D556                     u2350:
  8648  00D556  0E00               	movlw	0
  8649  00D558                     u2352:
  8650  00D558  6E01               	movwf	??_spiTransfer& (0+255),c
  8651  00D55A  B0C7               	btfsc	4039,0,c	;volatile
  8652  00D55C  D002               	goto	u2360
  8653  00D55E  0E01               	movlw	1
  8654  00D560  D001               	goto	u2362
  8655  00D562                     u2360:
  8656  00D562  0E00               	movlw	0
  8657  00D564                     u2362:
  8658  00D564  1001               	iorwf	??_spiTransfer,w,c
  8659  00D566  E1F3               	bnz	l2922
  8660                           
  8661                           ;SPI_PIC.c: 30: return SSPBUF;
  8662  00D568  50C9               	movf	4041,w,c	;volatile
  8663  00D56A  0012               	return	
  8664  00D56C                     __end_of_spiTransfer:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           plusw1	equ	0xFE3
  8675                           indf2	equ	0xFDF
  8676                           postinc2	equ	0xFDE
  8677                           postdec2	equ	0xFDD
  8678                           plusw2	equ	0xFDB
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _initLCD *****************
  8684 ;; Defined at:
  8685 ;;		line 60 in file "lcd.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        1 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    2
  8706 ;; This function calls:
  8707 ;;		_lcdInst
  8708 ;; This function is called by:
  8709 ;;		_main
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text30
  8714  00D68C                     __ptext30:
  8715                           	opt stack 0
  8716  00D68C                     _initLCD:
  8717                           	opt stack 28
  8718                           
  8719                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  8720                           
  8721                           ;incstack = 0
  8722  00D68C  0EC3               	movlw	195
  8723  00D68E  6E04               	movwf	??_initLCD& (0+255),c
  8724  00D690  0ECD               	movlw	205
  8725  00D692                     u4947:
  8726  00D692  2EE8               	decfsz	wreg,f,c
  8727  00D694  D7FE               	bra	u4947
  8728  00D696  2E04               	decfsz	??_initLCD& (0+255),f,c
  8729  00D698  D7FC               	bra	u4947
  8730  00D69A  F000               	nop	
  8731                           
  8732                           ;lcd.c: 69: lcdInst(0b00110011);
  8733  00D69C  0E33               	movlw	51
  8734  00D69E  EC74  F06A         	call	_lcdInst
  8735                           
  8736                           ;lcd.c: 70: lcdInst(0b00110010);
  8737  00D6A2  0E32               	movlw	50
  8738  00D6A4  EC74  F06A         	call	_lcdInst
  8739                           
  8740                           ;lcd.c: 71: lcdInst(0b00101000);
  8741  00D6A8  0E28               	movlw	40
  8742  00D6AA  EC74  F06A         	call	_lcdInst
  8743                           
  8744                           ;lcd.c: 72: lcdInst(0b00001111);
  8745  00D6AE  0E0F               	movlw	15
  8746  00D6B0  EC74  F06A         	call	_lcdInst
  8747                           
  8748                           ;lcd.c: 73: lcdInst(0b00000110);
  8749  00D6B4  0E06               	movlw	6
  8750  00D6B6  EC74  F06A         	call	_lcdInst
  8751                           
  8752                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8753  00D6BA  0E01               	movlw	1
  8754  00D6BC  EC74  F06A         	call	_lcdInst
  8755  00D6C0  0EC3               	movlw	195
  8756  00D6C2  6E04               	movwf	??_initLCD& (0+255),c
  8757  00D6C4  0ECD               	movlw	205
  8758  00D6C6                     u4957:
  8759  00D6C6  2EE8               	decfsz	wreg,f,c
  8760  00D6C8  D7FE               	bra	u4957
  8761  00D6CA  2E04               	decfsz	??_initLCD& (0+255),f,c
  8762  00D6CC  D7FC               	bra	u4957
  8763  00D6CE  F000               	nop	
  8764                           
  8765                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8766  00D6D0  0E0F               	movlw	15
  8767  00D6D2  EC74  F06A         	call	_lcdInst
  8768  00D6D6  0012               	return		;funcret
  8769  00D6D8                     __end_of_initLCD:
  8770                           	opt stack 0
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           postinc0	equ	0xFEE
  8778                           wreg	equ	0xFE8
  8779                           plusw1	equ	0xFE3
  8780                           indf2	equ	0xFDF
  8781                           postinc2	equ	0xFDE
  8782                           postdec2	equ	0xFDD
  8783                           plusw2	equ	0xFDB
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function _lcdInst *****************
  8789 ;; Defined at:
  8790 ;;		line 11 in file "lcd.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  data            1    wreg     unsigned char 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  data            1    2[COMRAM] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;Total ram usage:        1 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    1
  8811 ;; This function calls:
  8812 ;;		_lcdNibble
  8813 ;; This function is called by:
  8814 ;;		_main
  8815 ;;		_initLCD
  8816 ;;		_lcd_set_cursor
  8817 ;;		_lcd_shift_cursor
  8818 ;;		_lcd_shift_display
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text31
  8823  00D4E8                     __ptext31:
  8824                           	opt stack 0
  8825  00D4E8                     _lcdInst:
  8826                           	opt stack 29
  8827                           
  8828                           ;incstack = 0
  8829                           ;lcdInst@data stored from wreg
  8830  00D4E8  6E03               	movwf	lcdInst@data,c
  8831                           
  8832                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8833  00D4EA  948C               	bcf	3980,2,c	;volatile
  8834                           
  8835                           ;lcd.c: 20: lcdNibble(data);
  8836  00D4EC  5003               	movf	lcdInst@data,w,c
  8837  00D4EE  EC05  F06C         	call	_lcdNibble
  8838                           
  8839                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8840  00D4F2  0EC8               	movlw	200
  8841  00D4F4                     u4967:
  8842  00D4F4  D000               	nop2	
  8843  00D4F6  2EE8               	decfsz	wreg,f,c
  8844  00D4F8  D7FD               	bra	u4967
  8845  00D4FA  0012               	return		;funcret
  8846  00D4FC                     __end_of_lcdInst:
  8847                           	opt stack 0
  8848                           tblptru	equ	0xFF8
  8849                           tblptrh	equ	0xFF7
  8850                           tblptrl	equ	0xFF6
  8851                           tablat	equ	0xFF5
  8852                           prodh	equ	0xFF4
  8853                           prodl	equ	0xFF3
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           plusw1	equ	0xFE3
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           plusw2	equ	0xFDB
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function _lcdNibble *****************
  8866 ;; Defined at:
  8867 ;;		line 37 in file "lcd.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  data            1    wreg     unsigned char 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  data            1    1[COMRAM] unsigned char 
  8872 ;;  temp            1    0[COMRAM] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      void 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;Total ram usage:        2 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_lcdInst
  8892 ;;		_putch
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           	psect	text32
  8897  00D80A                     __ptext32:
  8898                           	opt stack 0
  8899  00D80A                     _lcdNibble:
  8900                           	opt stack 28
  8901                           
  8902                           ;incstack = 0
  8903                           ;lcdNibble@data stored from wreg
  8904  00D80A  6E02               	movwf	lcdNibble@data,c
  8905                           
  8906                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  8907  00D80C  5002               	movf	lcdNibble@data,w,c
  8908  00D80E  0BF0               	andlw	240
  8909  00D810  6E01               	movwf	lcdNibble@temp,c
  8910                           
  8911                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  8912  00D812  508C               	movf	3980,w,c	;volatile
  8913  00D814  0B0F               	andlw	15
  8914  00D816  6E8C               	movwf	3980,c	;volatile
  8915                           
  8916                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  8917  00D818  5001               	movf	lcdNibble@temp,w,c
  8918  00D81A  108C               	iorwf	3980,w,c	;volatile
  8919  00D81C  6E8C               	movwf	3980,c	;volatile
  8920                           
  8921                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8922  00D81E  0E00               	movlw	0
  8923  00D820  BEF2               	btfsc	intcon,7,c	;volatile
  8924  00D822  0E01               	movlw	1
  8925  00D824  6E7B               	movwf	lcd@LCDinterruptState,c
  8926  00D826  9EF2               	bcf	intcon,7,c	;volatile
  8927  00D828  868C               	bsf	3980,3,c	;volatile
  8928  00D82A  0E53               	movlw	83
  8929  00D82C                     u4977:
  8930  00D82C  2EE8               	decfsz	wreg,f,c
  8931  00D82E  D7FE               	bra	u4977
  8932  00D830  F000               	nop	
  8933  00D832  968C               	bcf	3980,3,c	;volatile
  8934  00D834  0EC8               	movlw	200
  8935  00D836                     u4987:
  8936  00D836  D000               	nop2	
  8937  00D838  2EE8               	decfsz	wreg,f,c
  8938  00D83A  D7FD               	bra	u4987
  8939  00D83C  B07B               	btfsc	lcd@LCDinterruptState,0,c
  8940  00D83E  D002               	bra	u2455
  8941  00D840  9EF2               	bcf	intcon,7,c	;volatile
  8942  00D842  D001               	bra	u2456
  8943  00D844                     u2455:
  8944  00D844  8EF2               	bsf	intcon,7,c	;volatile
  8945  00D846                     u2456:
  8946                           
  8947                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  8948  00D846  3802               	swapf	lcdNibble@data,w,c
  8949  00D848  0BF0               	andlw	240
  8950  00D84A  6E02               	movwf	lcdNibble@data,c
  8951                           
  8952                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  8953  00D84C  5002               	movf	lcdNibble@data,w,c
  8954  00D84E  0BF0               	andlw	240
  8955  00D850  6E01               	movwf	lcdNibble@temp,c
  8956                           
  8957                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  8958  00D852  508C               	movf	3980,w,c	;volatile
  8959  00D854  0B0F               	andlw	15
  8960  00D856  6E8C               	movwf	3980,c	;volatile
  8961                           
  8962                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  8963  00D858  5001               	movf	lcdNibble@temp,w,c
  8964  00D85A  108C               	iorwf	3980,w,c	;volatile
  8965  00D85C  6E8C               	movwf	3980,c	;volatile
  8966                           
  8967                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8968  00D85E  0E00               	movlw	0
  8969  00D860  BEF2               	btfsc	intcon,7,c	;volatile
  8970  00D862  0E01               	movlw	1
  8971  00D864  6E7B               	movwf	lcd@LCDinterruptState,c
  8972  00D866  9EF2               	bcf	intcon,7,c	;volatile
  8973  00D868  868C               	bsf	3980,3,c	;volatile
  8974  00D86A  0E53               	movlw	83
  8975  00D86C                     u4997:
  8976  00D86C  2EE8               	decfsz	wreg,f,c
  8977  00D86E  D7FE               	bra	u4997
  8978  00D870  F000               	nop	
  8979  00D872  968C               	bcf	3980,3,c	;volatile
  8980  00D874  0EC8               	movlw	200
  8981  00D876                     u5007:
  8982  00D876  D000               	nop2	
  8983  00D878  2EE8               	decfsz	wreg,f,c
  8984  00D87A  D7FD               	bra	u5007
  8985  00D87C  B07B               	btfsc	lcd@LCDinterruptState,0,c
  8986  00D87E  D002               	bra	u2465
  8987  00D880  9EF2               	bcf	intcon,7,c	;volatile
  8988  00D882  D001               	bra	u2466
  8989  00D884                     u2465:
  8990  00D884  8EF2               	bsf	intcon,7,c	;volatile
  8991  00D886                     u2466:
  8992  00D886  0012               	return		;funcret
  8993  00D888                     __end_of_lcdNibble:
  8994                           	opt stack 0
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           postinc0	equ	0xFEE
  9003                           wreg	equ	0xFE8
  9004                           plusw1	equ	0xFE3
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           plusw2	equ	0xFDB
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           intcon	equ	0xFF2
  9019                           postinc0	equ	0xFEE
  9020                           wreg	equ	0xFE8
  9021                           plusw1	equ	0xFE3
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           plusw2	equ	0xFDB
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030                           	psect	rparam
  9031  0000                     tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon	equ	0xFF2
  9038                           postinc0	equ	0xFEE
  9039                           wreg	equ	0xFE8
  9040                           plusw1	equ	0xFE3
  9041                           indf2	equ	0xFDF
  9042                           postinc2	equ	0xFDE
  9043                           postdec2	equ	0xFDD
  9044                           plusw2	equ	0xFDB
  9045                           fsr2h	equ	0xFDA
  9046                           fsr2l	equ	0xFD9
  9047                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    184
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     124
    BANK0           128      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[16]), STR_18(CODE[6]), STR_17(CODE[14]), STR_16(CODE[9]), 
		 -> STR_15(CODE[11]), STR_14(CODE[3]), STR_13(CODE[10]), STR_12(CODE[11]), 
		 -> STR_11(CODE[16]), STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[15]), 
		 -> STR_7(CODE[11]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[10]), 
		 -> STR_3(CODE[11]), STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    SD_Command@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> SD_Command@arg(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftmul->___wmul
    ___ftdiv->___lwtoft
    _SD_ACMD->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   72946
                                            109 COMRAM    13    13      0
                            _initLCD
                             _initSD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              49    37     12   52701
                                             63 COMRAM    46    34     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12105
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11907
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initSD                                              39    39      0   19718
                                             57 COMRAM    39    39      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2802
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5389
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1966
                                             12 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           9     5      4    1770
                                              3 COMRAM     9     5      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (3) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7C       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      34        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Sep 15 14:38:37 2017

    __end_of_R1_READY_STATE FEEF                 _SSPSTATbits 000FC7                 __CFG_CPD$ON 000000  
        initSD@arr_response 004B                ___awdiv@sign 000C         ___wmul@multiplicand 0011  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037                         l120 ECBC  
                       l211 D608                         l422 ED36                         l319 DA18  
                       l431 EE2C                         l428 EDB6                         l453 EF90  
                       l564 FA14                         l573 FBE4                         l815 DF40  
                       l912 DFE4                         l905 DC10                         l913 E00C  
                       l870 E0C8                         l847 DB3C                         l919 E072  
                       l944 D5A6                         l874 E0F2                         l885 E1A2  
                       l894 E1BE                         l994 D8F8                __CFG_CPB$OFF 000000  
           __end_of_CMD0CRC FF04             __end_of_CMD8CRC FF01                ___awmod@sign 0006  
                       prod 000FF3                         wreg 000FE8               SD_Command@cmd 000A  
             SD_Command@arg 0004               SD_Command@ptr 0008                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 0015                ___ftdiv@sign 001A                __CFG_WDT$OFF 000000  
                      l1004 D788                        l3012 D996                        l3100 E190  
                      l3030 D9F0                        l3102 E19A                        l3032 DA00  
                      l3024 D9C8                        l4000 F79C                        l3034 DA04  
                      l3018 D9B2                        l3210 D984                        l3202 D96C  
                      l4002 F7AC                        l3108 E1DA                        l3060 E0D6  
                      l4012 F81E                        l4004 F7DA                        l3134 DC92  
                      l3118 E20A                        l3206 D976                        l3230 D7C8  
                      l3222 D7AE                        l4030 F8FA                        l4006 F7EA  
                      l3152 DCD4                        l3128 DC6A                        l3232 D7D0  
                      l3312 E5AA                        l4112 FC04                        l4032 F8FE  
                      l4016 F842                        l3162 DCFC                        l3090 E15C  
                      l3082 E130                        l3066 E100                        l3234 D7D4  
                      l3242 D7F2                        l3226 D7BA                        l3330 E79E  
                      l3322 E672                        l4122 FC42                        l4026 F896  
                      l4202 E8A0                        l3500 DBEA                        l3148 DCC4  
                      l3092 E166                        l3420 DE66                        l3404 E060  
                      l4124 FC46                        l4116 FC28                        l4060 F9F0  
                      l4044 F936                        l4220 E912                        l3158 DCEC  
                      l3270 D5E8                        l3094 E16E                        l3414 DE48  
                      l3406 E06C                        l3190 D944                        l3246 D800  
                      l3238 D7E8                        l3318 E64E                        l4062 F9FE  
                      l4054 F9DA                        l4214 E8E8                        l3272 D5EC  
                      l3088 E152                        l3600 D8BA                        l3192 D94C  
                      l3184 D92E                        l3336 E842                        l4136 FC7E  
                      l4152 FCBA                        l4072 FA30                        l4056 F9E4  
                      l4048 F952                        l4216 E8F6                        l4224 E920  
                      l3274 D5F2                        l3530 DA7E                        l3442 DED8  
                      l3434 DEA8                        l3194 D950                        l3178 D91E  
                      l3290 E376                        l4162 FD0C                        l4138 FC82  
                      l4154 FCD0                        l4082 FB54                        l4066 FA18  
                      l4090 FB74                        l4218 E904                        l4226 E938  
                      l3268 D5E4                        l3620 D756                        l3364 DFAA  
                      l3348 D540                        l4084 FB5E                        l4076 FA80  
                      l4180 FE36                        l3550 DD62                        l3630 D6DE  
                      l3702 ED94                        l3526 DA4E                        l3518 D662  
                      l3454 DF06                        l3358 DF7E                        l4166 FD28  
                      l4174 FE0A                        l4158 FCEC                        l4326 ECB0  
                      l3480 DBAC                        l3632 D6EA                        l3800 EFF2  
                      l3536 DAAA                        l3608 D8EA                        l3624 D77A  
                      l3616 D746                        l3464 DF2E                        l4168 FDA0  
                      l4176 FE20                        l4088 FB6A                        l2922 D54E  
                      l3474 DB84                        l3722 EE0A                        l3706 ED9C  
                      l3618 D752                        l3466 DF3A                        l3458 DF16  
                      l3394 E038                        l3298 E436                        l4178 FE26  
                      l4098 FBA8                        l3580 DDFC                        l3572 DDD8  
                      l3804 F00E                        l2950 DB0A                        l2942 DACC  
                      l3582 DE02                        l3814 F030                        l3726 EE12  
                      l3670 ECF2                        l3398 E048                        l3902 F4DA  
                      l2952 DB28                        l2944 DAD6                        l3568 DDC8  
                      l3808 F016                        l3760 EEDC                        l3752 EE72  
                      l3672 ECFA                        l3920 F562                        l2954 DB32  
                      l2946 DAF4                        l2938 DABE                        l3586 DE18  
                      l3578 DDF0                        l3842 F2E4                        l3826 F11C  
                      l3754 EE82                        l3738 EE36                        l3930 F57A  
                      l3914 F516                        l3906 F4EC                        l3852 F306  
                      l3836 F2CA                        l3772 EF3A                        l3748 EE5A  
                      l3684 ED24                        l3596 D8AA                        l3940 F5AA  
                      l3924 F56E                        l3846 F2EC                        l3782 EF80  
                      l3694 ED38                        l3598 D8B6                        l3950 F5E4  
                      l3942 F5BE                        l3926 F572                        l3918 F54C  
                      l3792 EF92                        l3768 EF32                        l3696 ED6C  
                      l3688 ED2C                        l3936 F598                        l3928 F576  
                      l3786 EF88                        l3962 F644                        l3946 F5D2  
                      l3954 F5EA                        l3972 F684                        l3956 F630  
                      l3894 F464                        l3896 F46C                        l3996 F778  
                      l3988 F714                        _CMD0 FF04                        _CMD1 FF02  
                      _CMD8 FF01                        _CMD9 FEFF                        STR_1 FF1C  
                      STR_2 FF3D                        STR_3 FFB0                        STR_4 FFDC  
                      STR_5 FF88                        STR_6 FF7A                        STR_7 FFD1  
                      STR_8 FF5D                        STR_9 FFA3                        u3001 DF62  
                      u3021 DF8E                        _LATA 000F89                        _LATB 000F8A  
                      _LATC 000F8B                        _LATD 000F8C                        _LATE 000F8D  
                      u2350 D556                        u2360 D562                        u2352 D558  
                      u4040 FA0E                        u3161 DB6C                        u2521 E094  
                      u2362 D564                        u3411 ECD0                        u2531 E0A8  
                      u3181 DB94                        u3261 DD46                        u5007 D876  
                      u2455 D844                        u2456 D846                        u3280 DD80  
                      u2465 D884                        u2466 D886                        u3610 EF76  
                      u2731 DC52                printf@tmpval 0060                        u3620 EF78  
                      u3285 DD78                        u2751 DC7A                        u3720 F1F2  
                      u3705 F130                        u3730 F22C                        u3715 F1CA  
                      u4275 EBD8                        u3725 F1E8                        u3735 F222  
                      u4707 E8CA                        u4717 E942                        u4807 EACE  
                      u4727 E95C                        u3880 F6BC                        u4817 EAE8  
                      u4737 E972                        u4907 D508                        u4827 EAFE  
                      u4747 E9BC                        u4917 ECF4                        u3885 F6B2  
                      u4837 EB86                        u4757 E9D6                        u4927 ED0E  
                      u4847 EBA0                        u4767 E9EC                        u4937 F466  
                      u4857 EBB6                        u4777 EA2A                        u4697 E8B4  
                      u4947 D692                        u4867 EC32                        u4787 EA44  
                      u4957 D6C6                        u4877 EC4C                        u4797 EA5A  
                      u4967 D4F4                        u4887 EC62                        u4977 D82C  
                      u4897 ECA0                        u4987 D836                        u4997 D86C  
           __end_of_SD_ACMD D64C                        _main E866                ___ftpack@arg 0001  
              ___ftpack@exp 0004                        fsr2h 000FDA                        indf2 000FDF  
                      fsr2l 000FD9                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000              initSD@argument 0041  
             __CFG_MCLRE$ON 000000                ___ftmul@cntr 0022                ___param_bank 000000  
              ___ftmul@sign 0023            __end_of_LCD_LEFT FF06                ___fttol@exp1 0039  
              ___fttol@lval 0035                       ?_main 0001                       _CMD10 FEFE  
                     _CMD12 FEFD                       _CMD13 FEFC                       _CMD16 FEFB  
                     _CMD24 FEF8                       _CMD32 FEF6                       _CMD17 FEFA  
                     _CMD25 FEF7                       _CMD33 FEF5                       _CMD18 FEF9  
                     _CMD38 FEF4                       _CMD55 FEF3                       _CMD58 FEF2  
           __end_of___awdiv D98E             __end_of___ftadd E230                       STR_10 FF96  
                     STR_11 FF4D                       STR_12 FFBB                       STR_20 FF0B  
                     STR_13 FFE6                       STR_14 FFAD                       STR_15 FFC6  
                     STR_16 FFF0                       STR_17 FF6C                       STR_18 FFF9  
                     STR_19 FF2D             __end_of___awmod D80A              initSD@tempSize 0047  
           __end_of___ftdiv DC42             __end_of___ftneg D5B4             __end_of___lldiv D90A  
           __end_of___ftmul DD36             ___awdiv@divisor 0009             __end_of___llmod D79A  
           __end_of___ftsub D68C             __end_of___fttol DE2A              initSD@response 005F  
           ___awdiv@counter 000B                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
                     _SSPIF 007CF3          initSD@last_OSCTUNE 0046               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0011             __end_of_lcdInst D4FC  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000             __end_of_initLCD D6D8  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers FE7B                       _scale E476  
           __end_of_isdigit D548               ___ftpack@sign 0005                       _putch D4FC  
               initSD@F3023 00AE             __end_of_spiInit D612                       tablat 000FF5  
           __end_of_spiSend D4E8           _LCDinterruptState 007C                       plusw1 000FE3  
                     plusw2 000FDB                 ?_SD_Command 0004                       status 000FD8  
            __CFG_PBADEN$ON 000000                __end_of_CMD0 FF05                __end_of_CMD1 FF03  
              __end_of_CMD8 FF02                __end_of_CMD9 FF00             __initialization D510  
              __end_of_main ECBE              __CFG_OSC$HSPLL 000000           __end_of_LCD_RIGHT FF07  
                    ??_main 006E               ___fttol@sign1 0034               __activetblptr 000002  
      __size_of__tdiv_to_l_ 0132          SD_Command@response 000B                   ??_SD_ACMD 0011  
                    _ACMD22 FEF1                      _ACMD23 FEF0                      _ACMD41 FEEF  
                    _ADCON0 000FC2                      _ADCON1 000FC1            ___llmod@dividend 000E  
                    ?_scale 0024            ___awdiv@dividend 0007                      ?_putch 0001  
          __end_of___ftpack DB5C            __end_of___lltoft D734            __end_of___lwtoft D590  
                    _OSCCON 000FD3                      _SDCard 0080                      _SSPBUF 000FC9  
            __CFG_XINST$OFF 000000            __end_of__powers_ FEA2                      ___ftge DA1E  
                    ___wmul D5B4                   ??___awdiv 000B                   ??___ftadd 0034  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___ftdiv 0012  
                 ??___ftneg 0004                   ??___lldiv 0009                   ??___ftmul 001B  
                 ??___llmod 0016                   ??___ftsub 0040                   ??___fttol 002F  
                    _initSD ECBE                      _fround E230                      clear_0 D516  
          ___awdiv@quotient 000D             ___awmod@divisor 0003             ___awmod@counter 0005  
                 ??_lcdInst 0003                      _printf F4CE       ___ftmul@f3_as_product 001F  
                 ??_initLCD 0004         __size_of_SD_Command 0090           __end_of_STOP_TRAN FEEA  
                 ??_isdigit 0001                ?_spiTransfer 0001                __mediumconst FE52  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_spiInit 0001                   ??_spiSend 0003                  __accesstop 0080  
   __end_of__initialization D520                  ___ftadd@f1 002E                  ___ftadd@f2 0031  
                ___ftge@ff1 0001                  ___ftge@ff2 0004               __end_of_CMD10 FEFF  
             __end_of_CMD12 FEFE               __end_of_CMD13 FEFD               __end_of_CMD16 FEFC  
             __end_of_CMD24 FEF9               __end_of_CMD32 FEF7               __end_of_CMD17 FEFB  
             __end_of_CMD25 FEF8               __end_of_CMD33 FEF6               __end_of_CMD18 FEFA  
             __end_of_CMD38 FEF5               __end_of_CMD55 FEF4               __end_of_CMD58 FEF3  
             ___rparam_used 000001                  ___ftdiv@f1 000C                  ___ftdiv@f2 000F  
                ___ftdiv@f3 0016                  ___ftneg@f1 0001                  ___ftmul@f1 0015  
                ___ftmul@f2 0018                  ___ftsub@f1 003A                  ___ftsub@f2 003D  
                ___fttol@f1 002B              __pcstackCOMRAM 0001                  ___lltoft@c 0009  
             __end_of_scale E866               __end_of_putch D510           _START_BLOCK_TOKEN FEEA  
                ___lwtoft@c 0009          __size_of_lcdNibble 007E                  __div_to_l_ DE2A  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                     ??_putch 0003                  __pbssBANK0 0080  
             __div_to_l_@f1 0001               __div_to_l_@f2 0004                     ?___ftge 0001  
                   ?___wmul 000F   __end_of_START_BLOCK_TOKEN FEEB                     ?_initSD 0001  
                   _CMD0CRC FF03                     ?_fround 0024                     _CMD8CRC FF00  
                 ?___ftpack 0001                     ?_printf 0040                   ?___lltoft 0009  
                 ?___lwtoft 0009                     _SD_ACMD D612                     _OSCTUNE 000F9B  
 spiTransfer@byteToTransfer 0002        lcd@LCDinterruptState 007B                     _SSPCON1 000FC6  
                   _SSPSTAT 000FC7                ??_SD_Command 0008           __end_of_lcdNibble D888  
        initSD@tempSize_802 005B           __end_of__npowers_ FEC9                     __Hparam 0000  
                _scale$1465 0027                     __Lparam 0000             __size_of___ftge 0090  
                   ___awdiv D90A                     ___ftadd E084                     ___awmod D79A  
                   ___ftdiv DB5C                     ___ftneg D590                     ___lldiv D888  
           __size_of___wmul 0026                     ___ftmul DC42                     ___llmod D734  
                   ___ftsub D64C                     ___fttol DD36             __size_of_initSD 0810  
                   __pcinit D510                  ??___ftpack 0006             __size_of_fround 0246  
                   __ramtop 1000                     _lcdInst D4E8                  ??___lltoft 000D  
                   __ptext0 E866                     __ptext1 F4CE                     __ptext2 E476  
                   __ptext3 D4FC                     __ptext4 D52A                     __ptext5 E230  
                   __ptext6 D5B4                     __ptext7 D79A                     __ptext8 D90A  
                   __ptext9 DF52             __size_of_printf 0984                  ??___lwtoft 000C  
                   _initLCD D68C           __end_of_hexpowers FEE9                 ?__div_to_l_ 0001  
                   _dpowers FE53          __end_of_SD_Command DA1E                     _isdigit D52A  
          ___awmod@dividend 0001                   _LCD_RIGHT FF06                     _spiInit D5DA  
                   _spiSend D4DE                     main@PNM 0076        __size_of_spiTransfer 0024  
      end_of_initialization D520                     initSD@i 0060       __end_of_R1_IDLE_STATE FEEE  
     __end_of_LCD_SIZE_HORZ FF09       __end_of_LCD_SIZE_VERT FF08               __Lmediumconst FE52  
           ___lldiv@divisor 0005             ___lldiv@counter 000D                     printf@c 006D  
                   printf@f 0040                  _spiReceive D4D6                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007              spiInit@divider 0001  
                 _TRISCbits 000F94                   _TRISEbits 000F96                   _STOP_TRAN FEE9  
               SD_Command@n 000C              __end_of_ACMD22 FEF2              __end_of_ACMD23 FEF1  
            __end_of_ACMD41 FEF0                 ___ftdiv@exp 0019         __size_of__div_to_l_ 0128  
               ___ftmul@exp 001E              __end_of___ftge DAAE              __end_of___wmul D5DA  
         initSD@last_OSCCON 0045              __end_of_initSD F4CE              __end_of_fround E476  
            __end_of_printf FE52         start_initialization D510         __end_of__tdiv_to_l_ E084  
__end_of_R1_ILLEGAL_COMMAND FEED             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___ftge 0007                 ?_spiReceive 0001                    ??___wmul 0013  
          __CFG_LPT1OSC$OFF 000000                    ??_initSD 003A                    ??_fround 0027  
                  ??_printf 004C                  fround@prec 002D           __size_of___ftpack 00AE  
         __size_of___lltoft 005C                 __pbssCOMRAM 007B           __size_of___lwtoft 0024  
                  ?_SD_ACMD 000D                _isdigit$1087 0002           __CFG_CCP2MX$PORTC 000000  
             __pmediumconst FE52                  SD_ACMD@cmd 0011                  SD_ACMD@arg 000D  
                 _lcdNibble D80A                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___ftdiv 000C                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 000E  
                  ?___ftsub 003A                   __npowers_ FEA2                    ?___fttol 002B  
                  ?_lcdInst 0001                 __tdiv_to_l_ DF52                ??__div_to_l_ 0007  
                  ?_initLCD 0001                    ?_isdigit 0001                    ?_spiInit 0001  
                  ?_spiSend 0001                   _hexpowers FEC9              __size_of_scale 03F0  
       __size_of_spiReceive 0008              __size_of_putch 0014                    _LCD_LEFT FF05  
            ___wmul@product 0013                    _LATDbits 000F8C                    _LATEbits 000F8D  
                spiSend@val 0003          __end_of__div_to_l_ DF52            __CFG_WDTPS$32768 000000  
                ?_lcdNibble 0001           ___wmul@multiplier 000F               lcdNibble@data 0002  
                printf@flag 005E               lcdNibble@temp 0001                  printf@fval 0068  
             ??_spiTransfer 0001                  printf@prec 006B                   main@month 0075  
            _LCD_HORZ_LIMIT FF0A            __size_of_SD_ACMD 003A                    __Hrparam 0000  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000            __size_of___awdiv 0084  
          __size_of___ftadd 01AC            __size_of___awmod 0070            __size_of___ftdiv 00E6  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack DAAE                 _fround$1463 002A                 _fround$1464 0027  
                  ___lltoft D6D8                    ___lwtoft D56C            __size_of_lcdInst 0014  
          __size_of_initLCD 004C      __end_of_LCD_HORZ_LIMIT FF0B            __size_of_isdigit 001E  
                  __ptext10 DE2A                    __ptext11 D734                    __ptext20 D6D8  
                  __ptext12 D888                    __ptext21 DD36                    __ptext13 D64C  
                  __ptext30 D68C                    __ptext22 DC42                    __ptext14 E084  
                  __ptext31 D4E8                    __ptext23 DB5C                    __ptext15 D590  
                  __ptext32 D80A                    __ptext24 DAAE                    __ptext16 DA1E  
                  __ptext25 D612                    __ptext17 ECBE                    __ptext26 D98E  
                  __ptext18 D5DA                    __ptext27 D4DE                    __ptext19 D56C  
                  __ptext28 D4D6                    __ptext29 D548            __size_of_spiInit 0038  
          __size_of_spiSend 000A                    __powers_ FE7B         __end_of_START_BLOCK FEEC  
            _LCD_VERT_LIMIT FF09         __end_of_spiTransfer D56C               __size_of_main 0458  
        _R1_ILLEGAL_COMMAND FEEC                ??_spiReceive 0003                 ??_lcdNibble 0001  
                 printf@idx 0057                   printf@len 0058                   printf@exp 005C  
                 printf@val 0064                    main@year 0073                   putch@data 0003  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2      __end_of_LCD_VERT_LIMIT FF0A  
                  isdigit@c 0003                    scale@scl 002A          __end_of_spiReceive D4DE  
          __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A  
             _R1_IDLE_STATE FEED               _LCD_SIZE_HORZ FF08               _LCD_SIZE_VERT FF07  
          ___lldiv@dividend 0001                  _OSCCONbits 000FD3                    printf@ap 005A  
                  printf@cp 0055              _R1_READY_STATE FEEE                 lcdInst@data 0003  
              ?__tdiv_to_l_ 0001                 _printf$1466 0052                 _START_BLOCK FEEB  
          ___lldiv@quotient 0009                 _spiTransfer D548                 _SSPCON1bits 000FC6  
                _SD_Command D98E  
