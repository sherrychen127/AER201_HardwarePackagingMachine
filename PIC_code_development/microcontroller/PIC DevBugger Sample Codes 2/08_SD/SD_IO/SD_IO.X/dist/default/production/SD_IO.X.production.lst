

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Sep 19 02:19:22 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4620 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	smallconst
    84  001000                     __psmallconst:
    85                           	opt stack 0
    86  001000  00                 	db	0
    87  001001                     _dpowers:
    88                           	opt stack 0
    89  001001  0001               	dw	1
    90  001003  0000               	dw	0
    91  001005  000A               	dw	10
    92  001007  0000               	dw	0
    93  001009  0064               	dw	100
    94  00100B  0000               	dw	0
    95  00100D  03E8               	dw	1000
    96  00100F  0000               	dw	0
    97  001011  2710               	dw	10000
    98  001013  0000               	dw	0
    99  001015  86A0               	dw	34464
   100  001017  0001               	dw	1
   101  001019  4240               	dw	16960
   102  00101B  000F               	dw	15
   103  00101D  9680               	dw	38528
   104  00101F  0098               	dw	152
   105  001021  E100               	dw	57600
   106  001023  05F5               	dw	1525
   107  001025  CA00               	dw	51712
   108  001027  3B9A               	dw	15258
   109  001029                     __end_of_dpowers:
   110                           	opt stack 0
   111  001029                     _LCD_LEFT:
   112                           	opt stack 0
   113  001029  00                 	db	0
   114  00102A                     __end_of_LCD_LEFT:
   115                           	opt stack 0
   116  00102A                     _LCD_RIGHT:
   117                           	opt stack 0
   118  00102A  01                 	db	1
   119  00102B                     __end_of_LCD_RIGHT:
   120                           	opt stack 0
   121  00102B                     _LCD_SIZE_VERT:
   122                           	opt stack 0
   123  00102B  02                 	db	2
   124  00102C                     __end_of_LCD_SIZE_VERT:
   125                           	opt stack 0
   126  00102C                     _LCD_SIZE_HORZ:
   127                           	opt stack 0
   128  00102C  10                 	db	16
   129  00102D                     __end_of_LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  00102D                     _LCD_VERT_LIMIT:
   132                           	opt stack 0
   133  00102D  02                 	db	2
   134  00102E                     __end_of_LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  00102E                     _LCD_HORZ_LIMIT:
   137                           	opt stack 0
   138  00102E  28                 	db	40
   139  00102F                     __end_of_LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  00102F                     _STOP_TRAN:
   142                           	opt stack 0
   143  00102F  FD                 	db	253
   144  001030                     __end_of_STOP_TRAN:
   145                           	opt stack 0
   146  001030                     _START_BLOCK_TOKEN:
   147                           	opt stack 0
   148  001030  FC                 	db	252
   149  001031                     __end_of_START_BLOCK_TOKEN:
   150                           	opt stack 0
   151  001031                     _START_BLOCK:
   152                           	opt stack 0
   153  001031  FE                 	db	254
   154  001032                     __end_of_START_BLOCK:
   155                           	opt stack 0
   156  001032                     _R1_ILLEGAL_COMMAND:
   157                           	opt stack 0
   158  001032  04                 	db	4
   159  001033                     __end_of_R1_ILLEGAL_COMMAND:
   160                           	opt stack 0
   161  001033                     _R1_IDLE_STATE:
   162                           	opt stack 0
   163  001033  01                 	db	1
   164  001034                     __end_of_R1_IDLE_STATE:
   165                           	opt stack 0
   166  001034                     _R1_READY_STATE:
   167                           	opt stack 0
   168  001034  00                 	db	0
   169  001035                     __end_of_R1_READY_STATE:
   170                           	opt stack 0
   171  001035                     _ACMD41:
   172                           	opt stack 0
   173  001035  29                 	db	41
   174  001036                     __end_of_ACMD41:
   175                           	opt stack 0
   176  001036                     _ACMD23:
   177                           	opt stack 0
   178  001036  17                 	db	23
   179  001037                     __end_of_ACMD23:
   180                           	opt stack 0
   181  001037                     _ACMD22:
   182                           	opt stack 0
   183  001037  16                 	db	22
   184  001038                     __end_of_ACMD22:
   185                           	opt stack 0
   186  001038                     _CMD58:
   187                           	opt stack 0
   188  001038  3A                 	db	58
   189  001039                     __end_of_CMD58:
   190                           	opt stack 0
   191  001039                     _CMD55:
   192                           	opt stack 0
   193  001039  37                 	db	55
   194  00103A                     __end_of_CMD55:
   195                           	opt stack 0
   196  00103A                     _CMD38:
   197                           	opt stack 0
   198  00103A  26                 	db	38
   199  00103B                     __end_of_CMD38:
   200                           	opt stack 0
   201  00103B                     _CMD33:
   202                           	opt stack 0
   203  00103B  21                 	db	33
   204  00103C                     __end_of_CMD33:
   205                           	opt stack 0
   206  00103C                     _CMD32:
   207                           	opt stack 0
   208  00103C  20                 	db	32
   209  00103D                     __end_of_CMD32:
   210                           	opt stack 0
   211  00103D                     _CMD25:
   212                           	opt stack 0
   213  00103D  19                 	db	25
   214  00103E                     __end_of_CMD25:
   215                           	opt stack 0
   216  00103E                     _CMD24:
   217                           	opt stack 0
   218  00103E  18                 	db	24
   219  00103F                     __end_of_CMD24:
   220                           	opt stack 0
   221  00103F                     _CMD18:
   222                           	opt stack 0
   223  00103F  12                 	db	18
   224  001040                     __end_of_CMD18:
   225                           	opt stack 0
   226  001040                     _CMD17:
   227                           	opt stack 0
   228  001040  11                 	db	17
   229  001041                     __end_of_CMD17:
   230                           	opt stack 0
   231  001041                     _CMD16:
   232                           	opt stack 0
   233  001041  10                 	db	16
   234  001042                     __end_of_CMD16:
   235                           	opt stack 0
   236  001042                     _CMD13:
   237                           	opt stack 0
   238  001042  0D                 	db	13
   239  001043                     __end_of_CMD13:
   240                           	opt stack 0
   241  001043                     _CMD12:
   242                           	opt stack 0
   243  001043  0C                 	db	12
   244  001044                     __end_of_CMD12:
   245                           	opt stack 0
   246  001044                     _CMD10:
   247                           	opt stack 0
   248  001044  0A                 	db	10
   249  001045                     __end_of_CMD10:
   250                           	opt stack 0
   251  001045                     _CMD9:
   252                           	opt stack 0
   253  001045  09                 	db	9
   254  001046                     __end_of_CMD9:
   255                           	opt stack 0
   256  001046                     _CMD8CRC:
   257                           	opt stack 0
   258  001046  87                 	db	135
   259  001047                     __end_of_CMD8CRC:
   260                           	opt stack 0
   261  001047                     _CMD8:
   262                           	opt stack 0
   263  001047  08                 	db	8
   264  001048                     __end_of_CMD8:
   265                           	opt stack 0
   266  001048                     _CMD1:
   267                           	opt stack 0
   268  001048  01                 	db	1
   269  001049                     __end_of_CMD1:
   270                           	opt stack 0
   271  001049                     _CMD0CRC:
   272                           	opt stack 0
   273  001049  95                 	db	149
   274  00104A                     __end_of_CMD0CRC:
   275                           	opt stack 0
   276  00104A                     _CMD0:
   277                           	opt stack 0
   278  00104A  00                 	db	0
   279  00104B                     __end_of_CMD0:
   280                           	opt stack 0
   281  0000                     _TRISCbits	set	3988
   282  0000                     _SSPSTAT	set	4039
   283  0000                     _SSPSTATbits	set	4039
   284  0000                     _SSPBUF	set	4041
   285  0000                     _SSPCON1	set	4038
   286  0000                     _TRISEbits	set	3990
   287  0000                     _OSCCONbits	set	4051
   288  0000                     _OSCTUNEbits	set	3995
   289  0000                     _OSCTUNE	set	3995
   290  0000                     _OSCCON	set	4051
   291  0000                     _INTCONbits	set	4082
   292  0000                     _LATDbits	set	3980
   293  0000                     _LATEbits	set	3981
   294  0000                     _SSPCON1bits	set	4038
   295  0000                     _ADCON1	set	4033
   296  0000                     _ADCON0	set	4034
   297  0000                     _TRISE	set	3990
   298  0000                     _TRISD	set	3989
   299  0000                     _TRISC	set	3988
   300  0000                     _TRISB	set	3987
   301  0000                     _TRISA	set	3986
   302  0000                     _LATE	set	3981
   303  0000                     _LATD	set	3980
   304  0000                     _LATC	set	3979
   305  0000                     _LATB	set	3978
   306  0000                     _LATA	set	3977
   307  0000                     _SSPIF	set	31987
   308  00104B                     STR_9:
   309  00104B  52                 	db	82	;'R'
   310  00104C  65                 	db	101	;'e'
   311  00104D  61                 	db	97	;'a'
   312  00104E  64                 	db	100	;'d'
   313  00104F  69                 	db	105	;'i'
   314  001050  6E                 	db	110	;'n'
   315  001051  67                 	db	103	;'g'
   316  001052  20                 	db	32
   317  001053  73                 	db	115	;'s'
   318  001054  65                 	db	101	;'e'
   319  001055  63                 	db	99	;'c'
   320  001056  74                 	db	116	;'t'
   321  001057  6F                 	db	111	;'o'
   322  001058  72                 	db	114	;'r'
   323  001059  20                 	db	32
   324  00105A  30                 	db	48	;'0'
   325  00105B  00                 	db	0
   326  00105C                     STR_12:
   327  00105C  52                 	db	82	;'R'
   328  00105D  65                 	db	101	;'e'
   329  00105E  61                 	db	97	;'a'
   330  00105F  64                 	db	100	;'d'
   331  001060  69                 	db	105	;'i'
   332  001061  6E                 	db	110	;'n'
   333  001062  67                 	db	103	;'g'
   334  001063  20                 	db	32
   335  001064  73                 	db	115	;'s'
   336  001065  65                 	db	101	;'e'
   337  001066  63                 	db	99	;'c'
   338  001067  74                 	db	116	;'t'
   339  001068  6F                 	db	111	;'o'
   340  001069  72                 	db	114	;'r'
   341  00106A  73                 	db	115	;'s'
   342  00106B  00                 	db	0
   343  00106C                     STR_4:
   344  00106C  77                 	db	119	;'w'
   345  00106D  72                 	db	114	;'r'
   346  00106E  69                 	db	105	;'i'
   347  00106F  74                 	db	116	;'t'
   348  001070  65                 	db	101	;'e'
   349  001071  20                 	db	32
   350  001072  66                 	db	102	;'f'
   351  001073  69                 	db	105	;'i'
   352  001074  6E                 	db	110	;'n'
   353  001075  69                 	db	105	;'i'
   354  001076  73                 	db	115	;'s'
   355  001077  68                 	db	104	;'h'
   356  001078  65                 	db	101	;'e'
   357  001079  64                 	db	100	;'d'
   358  00107A  00                 	db	0
   359  00107B                     STR_1:
   360  00107B  49                 	db	73	;'I'
   361  00107C  6E                 	db	110	;'n'
   362  00107D  69                 	db	105	;'i'
   363  00107E  74                 	db	116	;'t'
   364  00107F  20                 	db	32
   365  001080  73                 	db	115	;'s'
   366  001081  75                 	db	117	;'u'
   367  001082  63                 	db	99	;'c'
   368  001083  63                 	db	99	;'c'
   369  001084  65                 	db	101	;'e'
   370  001085  73                 	db	115	;'s'
   371  001086  73                 	db	115	;'s'
   372  001087  21                 	db	33
   373  001088  00                 	db	0
   374  001089                     STR_5:
   375  001089  4D                 	db	77	;'M'
   376  00108A  42                 	db	66	;'B'
   377  00108B  57                 	db	87	;'W'
   378  00108C  20                 	db	32
   379  00108D  53                 	db	83	;'S'
   380  00108E  74                 	db	116	;'t'
   381  00108F  61                 	db	97	;'a'
   382  001090  72                 	db	114	;'r'
   383  001091  74                 	db	116	;'t'
   384  001092  2E                 	db	46
   385  001093  2E                 	db	46
   386  001094  2E                 	db	46
   387  001095  00                 	db	0
   388  001096                     STR_3:
   389  001096  53                 	db	83	;'S'
   390  001097  69                 	db	105	;'i'
   391  001098  6E                 	db	110	;'n'
   392  001099  67                 	db	103	;'g'
   393  00109A  6C                 	db	108	;'l'
   394  00109B  65                 	db	101	;'e'
   395  00109C  20                 	db	32
   396  00109D  62                 	db	98	;'b'
   397  00109E  6C                 	db	108	;'l'
   398  00109F  6F                 	db	111	;'o'
   399  0010A0  63                 	db	99	;'c'
   400  0010A1  6B                 	db	107	;'k'
   401  0010A2  00                 	db	0
   402  0010A3                     STR_2:
   403  0010A3  49                 	db	73	;'I'
   404  0010A4  6E                 	db	110	;'n'
   405  0010A5  69                 	db	105	;'i'
   406  0010A6  74                 	db	116	;'t'
   407  0010A7  20                 	db	32
   408  0010A8  66                 	db	102	;'f'
   409  0010A9  61                 	db	97	;'a'
   410  0010AA  69                 	db	105	;'i'
   411  0010AB  6C                 	db	108	;'l'
   412  0010AC  65                 	db	101	;'e'
   413  0010AD  64                 	db	100	;'d'
   414  0010AE  00                 	db	0
   415  0010AF                     STR_7:
   416  0010AF  44                 	db	68	;'D'
   417  0010B0  6F                 	db	111	;'o'
   418  0010B1  6E                 	db	110	;'n'
   419  0010B2  65                 	db	101	;'e'
   420  0010B3  20                 	db	32
   421  0010B4  4D                 	db	77	;'M'
   422  0010B5  42                 	db	66	;'B'
   423  0010B6  57                 	db	87	;'W'
   424  0010B7  21                 	db	33
   425  0010B8  00                 	db	0
   426  0010B9                     STR_14:
   427  0010B9  53                 	db	83	;'S'
   428  0010BA  65                 	db	101	;'e'
   429  0010BB  63                 	db	99	;'c'
   430  0010BC  20                 	db	32
   431  0010BD  25                 	db	37
   432  0010BE  64                 	db	100	;'d'
   433  0010BF  2D                 	db	45
   434  0010C0  25                 	db	37
   435  0010C1  64                 	db	100	;'d'
   436  0010C2  00                 	db	0
   437  0010C3                     STR_6:
   438  0010C3  44                 	db	68	;'D'
   439  0010C4  6F                 	db	111	;'o'
   440  0010C5  6E                 	db	110	;'n'
   441  0010C6  65                 	db	101	;'e'
   442  0010C7  3A                 	db	58	;':'
   443  0010C8  20                 	db	32
   444  0010C9  25                 	db	37
   445  0010CA  6C                 	db	108	;'l'
   446  0010CB  75                 	db	117	;'u'
   447  0010CC  00                 	db	0
   448  0010CD                     STR_11:
   449  0010CD  46                 	db	70	;'F'
   450  0010CE  61                 	db	97	;'a'
   451  0010CF  69                 	db	105	;'i'
   452  0010D0  6C                 	db	108	;'l'
   453  0010D1  75                 	db	117	;'u'
   454  0010D2  72                 	db	114	;'r'
   455  0010D3  65                 	db	101	;'e'
   456  0010D4  21                 	db	33
   457  0010D5  00                 	db	0
   458  0010D6                     STR_13:
   459  0010D6  25                 	db	37
   460  0010D7  64                 	db	100	;'d'
   461  0010D8  2D                 	db	45
   462  0010D9  25                 	db	37
   463  0010DA  64                 	db	100	;'d'
   464  0010DB  2E                 	db	46
   465  0010DC  2E                 	db	46
   466  0010DD  2E                 	db	46
   467  0010DE  00                 	db	0
   468  0010DF                     STR_8:
   469  0010DF  44                 	db	68	;'D'
   470  0010E0  6F                 	db	111	;'o'
   471  0010E1  6E                 	db	110	;'n'
   472  0010E2  65                 	db	101	;'e'
   473  0010E3  20                 	db	32
   474  0010E4  25                 	db	37
   475  0010E5  6C                 	db	108	;'l'
   476  0010E6  75                 	db	117	;'u'
   477  0010E7  00                 	db	0
   478  0010E8                     STR_10:
   479  0010E8  41                 	db	65	;'A'
   480  0010E9  76                 	db	118	;'v'
   481  0010EA  67                 	db	103	;'g'
   482  0010EB  3A                 	db	58	;':'
   483  0010EC  20                 	db	32
   484  0010ED  25                 	db	37
   485  0010EE  64                 	db	100	;'d'
   486  0010EF  00                 	db	0
   487  0000                     
   488                           ; #config settings
   489  0010F0  00                 	db	0	; dummy byte at the end
   490  0000                     
   491                           	psect	cinit
   492  002CE2                     __pcinit:
   493                           	opt stack 0
   494  002CE2                     start_initialization:
   495                           	opt stack 0
   496  002CE2                     __initialization:
   497                           	opt stack 0
   498                           
   499                           ; Clear objects allocated to BIGRAM (1024 bytes)
   500  002CE2  EE0B  F080         	lfsr	0,__pbssBIGRAM
   501  002CE6  EE14 F000          	lfsr	1,1024
   502  002CEA                     clear_0:
   503  002CEA  6AEE               	clrf	postinc0,c
   504  002CEC  50E5               	movf	postdec1,w,c
   505  002CEE  50E1               	movf	fsr1l,w,c
   506  002CF0  E1FC               	bnz	clear_0
   507  002CF2  50E2               	movf	fsr1h,w,c
   508  002CF4  E1FA               	bnz	clear_0
   509                           
   510                           ; Clear objects allocated to BANK0 (46 bytes)
   511  002CF6  EE00  F080         	lfsr	0,__pbssBANK0
   512  002CFA  0E2E               	movlw	46
   513  002CFC                     clear_1:
   514  002CFC  6AEE               	clrf	postinc0,c
   515  002CFE  06E8               	decf	wreg,f,c
   516  002D00  E1FD               	bnz	clear_1
   517                           
   518                           ; Clear objects allocated to COMRAM (18 bytes)
   519  002D02  EE00  F06E         	lfsr	0,__pbssCOMRAM
   520  002D06  0E12               	movlw	18
   521  002D08                     clear_2:
   522  002D08  6AEE               	clrf	postinc0,c
   523  002D0A  06E8               	decf	wreg,f,c
   524  002D0C  E1FD               	bnz	clear_2
   525  002D0E                     end_of_initialization:
   526                           	opt stack 0
   527  002D0E                     __end_of__initialization:
   528                           	opt stack 0
   529  002D0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   530  002D10  6EF8               	movwf	tblptru,c
   531  002D12  0100               	movlb	0
   532  002D14  EF81  F00C         	goto	_main	;jump to C main() function
   533                           tblptru	equ	0xFF8
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1h	equ	0xFE2
   538                           fsr1l	equ	0xFE1
   539                           
   540                           	psect	bssCOMRAM
   541  00006E                     __pbssCOMRAM:
   542                           	opt stack 0
   543  00006E                     initSD@F3023:
   544                           	opt stack 0
   545  00006E                     	ds	16
   546  00007E                     lcd@LCDinterruptState:
   547                           	opt stack 0
   548  00007E                     	ds	1
   549  00007F                     	ds	1
   550                           tblptru	equ	0xFF8
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           postdec1	equ	0xFE5
   554                           fsr1h	equ	0xFE2
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	bssBANK0
   558  000080                     __pbssBANK0:
   559                           	opt stack 0
   560  000080                     _SDCard:
   561                           	opt stack 0
   562  000080                     	ds	46
   563                           tblptru	equ	0xFF8
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1h	equ	0xFE2
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	bssBIGRAM
   571  000B80                     __pbssBIGRAM:
   572                           	opt stack 0
   573  000B80                     main@readBuffer:
   574                           	opt stack 0
   575  000B80                     	ds	512
   576  000D80                     _writeBuffer:
   577                           	opt stack 0
   578  000D80                     	ds	512
   579                           tblptru	equ	0xFF8
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           postdec1	equ	0xFE5
   583                           fsr1h	equ	0xFE2
   584                           fsr1l	equ	0xFE1
   585                           
   586                           	psect	cstackCOMRAM
   587  000001                     __pcstackCOMRAM:
   588                           	opt stack 0
   589  000001                     ??_spiTransfer:
   590  000001                     ?___ftpack:
   591                           	opt stack 0
   592  000001                     ?___lldiv:
   593                           	opt stack 0
   594  000001                     lcdNibble@temp:
   595                           	opt stack 0
   596  000001                     spiInit@divider:
   597                           	opt stack 0
   598  000001                     ___ftpack@arg:
   599                           	opt stack 0
   600  000001                     ___lldiv@dividend:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x0
   604  000001                     	ds	1
   605  000002                     lcdNibble@data:
   606                           	opt stack 0
   607  000002                     spiTransfer@byteToTransfer:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     lcdInst@data:
   613                           	opt stack 0
   614  000003                     putch@data:
   615                           	opt stack 0
   616  000003                     spiSend@val:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x2
   620  000003                     	ds	1
   621  000004                     ??_initLCD:
   622  000004                     lcd_shift_cursor@direction:
   623                           	opt stack 0
   624  000004                     SD_SendDummyBytes@numBytes:
   625                           	opt stack 0
   626  000004                     ___ftpack@exp:
   627                           	opt stack 0
   628  000004                     SD_MBR_Receive@bufReceive:
   629                           	opt stack 0
   630  000004                     SD_Command@arg:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x3
   634  000004                     	ds	1
   635  000005                     lcd_shift_cursor@numChars:
   636                           	opt stack 0
   637  000005                     SD_SendDummyBytes@n:
   638                           	opt stack 0
   639  000005                     ___ftpack@sign:
   640                           	opt stack 0
   641  000005                     ___lldiv@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x4
   645  000005                     	ds	1
   646  000006                     ??_SD_MBR_Receive:
   647  000006                     ??___ftpack:
   648  000006                     lcd_shift_cursor@n:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x5
   652  000006                     	ds	1
   653  000007                     lcd_set_cursor@y:
   654                           	opt stack 0
   655  000007                     SD_MBR_Receive@i:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x6
   659  000007                     	ds	1
   660  000008                     ??_lcd_set_cursor:
   661  000008                     SD_Command@ptr:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     ?___lltoft:
   667                           	opt stack 0
   668  000009                     ?___lwtoft:
   669                           	opt stack 0
   670  000009                     lcd_set_cursor@i:
   671                           	opt stack 0
   672  000009                     ___lwtoft@c:
   673                           	opt stack 0
   674  000009                     ___lldiv@quotient:
   675                           	opt stack 0
   676  000009                     ___lltoft@c:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x8
   680  000009                     	ds	1
   681  00000A                     lcd_set_cursor@x:
   682                           	opt stack 0
   683  00000A                     SD_Command@cmd:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x9
   687  00000A                     	ds	1
   688  00000B                     SD_Command@response:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0xA
   692  00000B                     	ds	1
   693  00000C                     ?___ftdiv:
   694                           	opt stack 0
   695  00000C                     SD_Command@n:
   696                           	opt stack 0
   697  00000C                     ___ftdiv@f1:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0xB
   701  00000C                     	ds	1
   702  00000D                     ??___lltoft:
   703  00000D                     ___lldiv@counter:
   704                           	opt stack 0
   705  00000D                     SD_MBW_Send@arrWrite:
   706                           	opt stack 0
   707  00000D                     SD_ACMD@arg:
   708                           	opt stack 0
   709  00000D                     SD_SingleBlockWrite@block:
   710                           	opt stack 0
   711  00000D                     SD_SingleBlockRead@block:
   712                           	opt stack 0
   713  00000D                     SD_MBR_Start@startBlock:
   714                           	opt stack 0
   715  00000D                     SD_EraseBlocks@firstBlock:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0xC
   719  00000D                     	ds	1
   720  00000E                     ?___llmod:
   721                           	opt stack 0
   722  00000E                     average@array:
   723                           	opt stack 0
   724  00000E                     ___llmod@dividend:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0xD
   728  00000E                     	ds	1
   729  00000F                     SD_MBW_Send@status:
   730                           	opt stack 0
   731  00000F                     ___ftdiv@f2:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0xE
   735  00000F                     	ds	1
   736  000010                     SD_MBW_Send@response:
   737                           	opt stack 0
   738  000010                     average@numElements:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0xF
   742  000010                     	ds	1
   743  000011                     ??_SD_MBR_Start:
   744  000011                     SD_ACMD@cmd:
   745                           	opt stack 0
   746  000011                     ___lltoft@exp:
   747                           	opt stack 0
   748  000011                     SD_SingleBlockWrite@arr:
   749                           	opt stack 0
   750  000011                     SD_MBW_Send@i:
   751                           	opt stack 0
   752  000011                     SD_SingleBlockRead@buf:
   753                           	opt stack 0
   754  000011                     SD_EraseBlocks@lastBlock:
   755                           	opt stack 0
   756                           
   757                           ; 4 bytes @ 0x10
   758  000011                     	ds	1
   759  000012                     ??___ftdiv:
   760  000012                     ??_average:
   761  000012                     ?___ftmul:
   762                           	opt stack 0
   763  000012                     SD_MBR_Start@response:
   764                           	opt stack 0
   765  000012                     ___ftmul@f1:
   766                           	opt stack 0
   767  000012                     SD_MBW_Start@startBlock:
   768                           	opt stack 0
   769  000012                     ___llmod@divisor:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x11
   773  000012                     	ds	1
   774  000013                     ??_SD_SingleBlockWrite:
   775  000013                     ??_SD_SingleBlockRead:
   776  000013                     average@sum:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x12
   780  000013                     	ds	1
   781  000014                     SD_SingleBlockWrite@response:
   782                           	opt stack 0
   783  000014                     SD_SingleBlockRead@i:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x13
   787  000014                     	ds	1
   788  000015                     ___ftdiv@cntr:
   789                           	opt stack 0
   790  000015                     SD_SingleBlockWrite@i:
   791                           	opt stack 0
   792  000015                     ___ftmul@f2:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x14
   796  000015                     	ds	1
   797  000016                     SD_SingleBlockRead@response:
   798                           	opt stack 0
   799  000016                     ___llmod@counter:
   800                           	opt stack 0
   801  000016                     ___ftdiv@f3:
   802                           	opt stack 0
   803  000016                     SD_MBW_Start@numBlocks:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x15
   807  000016                     	ds	1
   808  000017                     average@n:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x16
   812  000017                     	ds	1
   813  000018                     ??___ftmul:
   814                           
   815                           ; 1 bytes @ 0x17
   816  000018                     	ds	1
   817  000019                     ?_printf:
   818                           	opt stack 0
   819  000019                     ___ftdiv@exp:
   820                           	opt stack 0
   821  000019                     printf@f:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x18
   825  000019                     	ds	1
   826  00001A                     ??_SD_MBW_Start:
   827  00001A                     ___ftdiv@sign:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x19
   831  00001A                     	ds	1
   832  00001B                     ___ftmul@exp:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x1A
   836  00001B                     	ds	1
   837  00001C                     ___ftmul@f3_as_product:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x1B
   841  00001C                     	ds	3
   842  00001F                     ??_printf:
   843  00001F                     ___ftmul@cntr:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x1E
   847  00001F                     	ds	1
   848  000020                     ___ftmul@sign:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x1F
   852  000020                     	ds	1
   853  000021                     ?___fttol:
   854                           	opt stack 0
   855  000021                     printf@prec:
   856                           	opt stack 0
   857  000021                     ___fttol@f1:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x20
   861  000021                     	ds	2
   862  000023                     printf@val:
   863                           	opt stack 0
   864                           
   865                           ; 4 bytes @ 0x22
   866  000023                     	ds	2
   867  000025                     ??___fttol:
   868                           
   869                           ; 1 bytes @ 0x24
   870  000025                     	ds	2
   871  000027                     printf@ap:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x26
   875  000027                     	ds	2
   876  000029                     printf@flag:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x28
   880  000029                     	ds	1
   881  00002A                     printf@c:
   882                           	opt stack 0
   883  00002A                     ___fttol@sign1:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x29
   887  00002A                     	ds	1
   888  00002B                     ___fttol@lval:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x2A
   892  00002B                     	ds	4
   893  00002F                     ___fttol@exp1:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x2E
   897  00002F                     	ds	1
   898  000030                     ??_initSD:
   899                           
   900                           ; 1 bytes @ 0x2F
   901  000030                     	ds	7
   902  000037                     initSD@argument:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x36
   906  000037                     	ds	4
   907  00003B                     initSD@last_OSCCON:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x3A
   911  00003B                     	ds	1
   912  00003C                     initSD@last_OSCTUNE:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x3B
   916  00003C                     	ds	1
   917  00003D                     initSD@tempSize:
   918                           	opt stack 0
   919                           
   920                           ; 4 bytes @ 0x3C
   921  00003D                     	ds	4
   922  000041                     initSD@arr_response:
   923                           	opt stack 0
   924                           
   925                           ; 16 bytes @ 0x40
   926  000041                     	ds	16
   927  000051                     initSD@tempSize_689:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x50
   931  000051                     	ds	4
   932  000055                     initSD@response:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x54
   936  000055                     	ds	1
   937  000056                     initSD@i:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x55
   941  000056                     	ds	1
   942  000057                     ??_main:
   943                           
   944                           ; 1 bytes @ 0x56
   945  000057                     	ds	12
   946  000063                     main@avg:
   947                           	opt stack 0
   948                           
   949                           ; 4 bytes @ 0x62
   950  000063                     	ds	4
   951  000067                     main@numWrites:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x66
   955  000067                     	ds	2
   956  000069                     main@firstBlock:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x68
   960  000069                     	ds	1
   961  00006A                     main@i:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x69
   965  00006A                     	ds	4
   966                           tblptru	equ	0xFF8
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1h	equ	0xFE2
   971                           fsr1l	equ	0xFE1
   972                           
   973 ;;
   974 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   975 ;;
   976 ;; *************** function _main *****************
   977 ;; Defined at:
   978 ;;		line 50 in file "main.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  i               4  105[COMRAM] unsigned long 
   983 ;;  avg             4   98[COMRAM] unsigned long 
   984 ;;  numWrites       2  102[COMRAM] unsigned short 
   985 ;;  firstBlock      1  104[COMRAM] unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;Total ram usage:       23 bytes
  1000 ;; Hardware stack levels required when called:    5
  1001 ;; This function calls:
  1002 ;;		_SD_EraseBlocks
  1003 ;;		_SD_MBR_Receive
  1004 ;;		_SD_MBR_Start
  1005 ;;		_SD_MBR_Stop
  1006 ;;		_SD_MBW_Send
  1007 ;;		_SD_MBW_Start
  1008 ;;		_SD_MBW_Stop
  1009 ;;		_SD_SingleBlockRead
  1010 ;;		_SD_SingleBlockWrite
  1011 ;;		___lldiv
  1012 ;;		___llmod
  1013 ;;		_average
  1014 ;;		_initLCD
  1015 ;;		_initSD
  1016 ;;		_lcdInst
  1017 ;;		_lcd_set_cursor
  1018 ;;		_printf
  1019 ;;		_spiReceive
  1020 ;; This function is called by:
  1021 ;;		Startup code after reset
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text0
  1026  001902                     __ptext0:
  1027                           	opt stack 0
  1028  001902                     _main:
  1029                           	opt stack 26
  1030                           
  1031                           ;main.c: 56: LATA = 0x00;
  1032                           
  1033                           ;incstack = 0
  1034  001902  0E00               	movlw	0
  1035  001904  6E89               	movwf	3977,c	;volatile
  1036                           
  1037                           ;main.c: 57: LATB = 0x00;
  1038  001906  0E00               	movlw	0
  1039  001908  6E8A               	movwf	3978,c	;volatile
  1040                           
  1041                           ;main.c: 58: LATC = 0x00;
  1042  00190A  0E00               	movlw	0
  1043  00190C  6E8B               	movwf	3979,c	;volatile
  1044                           
  1045                           ;main.c: 59: LATD = 0x00;
  1046  00190E  0E00               	movlw	0
  1047  001910  6E8C               	movwf	3980,c	;volatile
  1048                           
  1049                           ;main.c: 60: LATE = 0x00;
  1050  001912  0E00               	movlw	0
  1051  001914  6E8D               	movwf	3981,c	;volatile
  1052                           
  1053                           ;main.c: 64: TRISA = 0xFF;
  1054  001916  6892               	setf	3986,c	;volatile
  1055                           
  1056                           ;main.c: 65: TRISB = 0xFF;
  1057  001918  6893               	setf	3987,c	;volatile
  1058                           
  1059                           ;main.c: 66: TRISC = 0b10000000;
  1060  00191A  0E80               	movlw	128
  1061  00191C  6E94               	movwf	3988,c	;volatile
  1062                           
  1063                           ;main.c: 70: TRISD = 0x00;
  1064  00191E  0E00               	movlw	0
  1065  001920  6E95               	movwf	3989,c	;volatile
  1066                           
  1067                           ;main.c: 71: TRISE = 0b00000100;
  1068  001922  0E04               	movlw	4
  1069  001924  6E96               	movwf	3990,c	;volatile
  1070                           
  1071                           ;main.c: 78: ADCON0 = 0x00;
  1072  001926  0E00               	movlw	0
  1073  001928  6EC2               	movwf	4034,c	;volatile
  1074                           
  1075                           ;main.c: 79: ADCON1 = 0b00001111;
  1076  00192A  0E0F               	movlw	15
  1077  00192C  6EC1               	movwf	4033,c	;volatile
  1078                           
  1079                           ;main.c: 83: initLCD();
  1080  00192E  ECF2  F015         	call	_initLCD	;wreg free
  1081                           
  1082                           ;main.c: 84: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1083  001932  0E0C               	movlw	12
  1084  001934  EC00  F017         	call	_lcdInst
  1085                           
  1086                           ;main.c: 87: initSD();
  1087  001938  EC79  F008         	call	_initSD	;wreg free
  1088                           
  1089                           ;main.c: 88: if(SDCard.init){
  1090  00193C  0100               	movlb	0	; () banked
  1091  00193E  519B               	movf	(_SDCard+27)& (0+255),w,b
  1092  001940  B4D8               	btfsc	status,2,c
  1093  001942  D007               	goto	l3283
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;main.c: 89: printf("Init success!");
  1097  001944  0E7B               	movlw	low STR_1
  1098  001946  6E19               	movwf	printf@f,c
  1099  001948  0E10               	movlw	high STR_1
  1100  00194A  6E1A               	movwf	printf@f+1,c
  1101  00194C  EC88  F00F         	call	_printf	;wreg free
  1102                           
  1103                           ;main.c: 90: }
  1104  001950  D007               	goto	l3285
  1105  001952                     l3283:
  1106                           
  1107                           ;main.c: 91: else{
  1108                           ;main.c: 92: printf("Init failed");
  1109  001952  0EA3               	movlw	low STR_2
  1110  001954  6E19               	movwf	printf@f,c
  1111  001956  0E10               	movlw	high STR_2
  1112  001958  6E1A               	movwf	printf@f+1,c
  1113  00195A  EC88  F00F         	call	_printf	;wreg free
  1114  00195E                     l147:
  1115  00195E  D7FF               	goto	l147
  1116  001960                     l3285:
  1117                           
  1118                           ;main.c: 94: }
  1119                           ;main.c: 95: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1120  001960  0E33               	movlw	51
  1121  001962  6E58               	movwf	(??_main+1)& (0+255),c
  1122  001964  0EBB               	movlw	187
  1123  001966  6E57               	movwf	??_main& (0+255),c
  1124  001968  0EE0               	movlw	224
  1125  00196A                     u2937:
  1126  00196A  2EE8               	decfsz	wreg,f,c
  1127  00196C  D7FE               	bra	u2937
  1128  00196E  2E57               	decfsz	??_main& (0+255),f,c
  1129  001970  D7FC               	bra	u2937
  1130  001972  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1131  001974  D7FA               	bra	u2937
  1132                           
  1133                           ;main.c: 100: static unsigned char readBuffer[512] = {0};
  1134                           ;main.c: 102: unsigned long i;
  1135                           ;main.c: 112: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1136  001976  8AC6               	bsf	4038,5,c	;volatile
  1137  001978  948D               	bcf	3981,2,c	;volatile
  1138                           
  1139                           ;main.c: 113: SD_EraseBlocks(0, 0);
  1140  00197A  0E00               	movlw	0
  1141  00197C  6E0D               	movwf	SD_EraseBlocks@firstBlock,c
  1142  00197E  0E00               	movlw	0
  1143  001980  6E0E               	movwf	SD_EraseBlocks@firstBlock+1,c
  1144  001982  0E00               	movlw	0
  1145  001984  6E0F               	movwf	SD_EraseBlocks@firstBlock+2,c
  1146  001986  0E00               	movlw	0
  1147  001988  6E10               	movwf	SD_EraseBlocks@firstBlock+3,c
  1148  00198A  0E00               	movlw	0
  1149  00198C  6E11               	movwf	SD_EraseBlocks@lastBlock,c
  1150  00198E  0E00               	movlw	0
  1151  001990  6E12               	movwf	SD_EraseBlocks@lastBlock+1,c
  1152  001992  0E00               	movlw	0
  1153  001994  6E13               	movwf	SD_EraseBlocks@lastBlock+2,c
  1154  001996  0E00               	movlw	0
  1155  001998  6E14               	movwf	SD_EraseBlocks@lastBlock+3,c
  1156  00199A  EC22  F014         	call	_SD_EraseBlocks	;wreg free
  1157  00199E                     l3293:
  1158  00199E  EC0F  F017         	call	_spiReceive	;wreg free
  1159  0019A2  0AFF               	xorlw	255
  1160  0019A4  A4D8               	btfss	status,2,c
  1161  0019A6  D7FB               	goto	l3293
  1162                           
  1163                           ;main.c: 117: for(i = 0; i < 512; i++){
  1164  0019A8  0E00               	movlw	0
  1165  0019AA  6E6A               	movwf	main@i,c
  1166  0019AC  0E00               	movlw	0
  1167  0019AE  6E6B               	movwf	main@i+1,c
  1168  0019B0  0E00               	movlw	0
  1169  0019B2  6E6C               	movwf	main@i+2,c
  1170  0019B4  0E00               	movlw	0
  1171  0019B6  6E6D               	movwf	main@i+3,c
  1172  0019B8                     l3297:
  1173  0019B8  506D               	movf	main@i+3,w,c
  1174  0019BA  106C               	iorwf	main@i+2,w,c
  1175  0019BC  E113               	bnz	l3307
  1176  0019BE  0E02               	movlw	2
  1177  0019C0  5C6B               	subwf	main@i+1,w,c
  1178  0019C2  B0D8               	btfsc	status,0,c
  1179  0019C4  D00F               	goto	l3307
  1180                           
  1181                           ;main.c: 118: writeBuffer[i] = i & 0xFF;
  1182  0019C6  0E80               	movlw	low _writeBuffer
  1183  0019C8  246A               	addwf	main@i,w,c
  1184  0019CA  6ED9               	movwf	fsr2l,c
  1185  0019CC  0E0D               	movlw	high _writeBuffer
  1186  0019CE  206B               	addwfc	main@i+1,w,c
  1187  0019D0  6EDA               	movwf	fsr2h,c
  1188  0019D2  C06A  FFDF         	movff	main@i,indf2
  1189  0019D6  0E01               	movlw	1
  1190  0019D8  266A               	addwf	main@i,f,c
  1191  0019DA  0E00               	movlw	0
  1192  0019DC  226B               	addwfc	main@i+1,f,c
  1193  0019DE  226C               	addwfc	main@i+2,f,c
  1194  0019E0  226D               	addwfc	main@i+3,f,c
  1195  0019E2  D7EA               	goto	l3297
  1196  0019E4                     l3307:
  1197  0019E4  0E00               	movlw	0
  1198  0019E6  6E0D               	movwf	SD_SingleBlockWrite@block,c
  1199  0019E8  0E00               	movlw	0
  1200  0019EA  6E0E               	movwf	SD_SingleBlockWrite@block+1,c
  1201  0019EC  0E00               	movlw	0
  1202  0019EE  6E0F               	movwf	SD_SingleBlockWrite@block+2,c
  1203  0019F0  0E00               	movlw	0
  1204  0019F2  6E10               	movwf	SD_SingleBlockWrite@block+3,c
  1205  0019F4  0E80               	movlw	low _writeBuffer
  1206  0019F6  6E11               	movwf	SD_SingleBlockWrite@arr,c
  1207  0019F8  0E0D               	movlw	high _writeBuffer
  1208  0019FA  6E12               	movwf	SD_SingleBlockWrite@arr+1,c
  1209  0019FC  EC71  F012         	call	_SD_SingleBlockWrite	;wreg free
  1210  001A00  0900               	iorlw	0
  1211  001A02  B4D8               	btfsc	status,2,c
  1212  001A04  D7EF               	goto	l3307
  1213                           
  1214                           ;main.c: 123: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1215  001A06  0E01               	movlw	1
  1216  001A08  EC00  F017         	call	_lcdInst
  1217  001A0C  0EC3               	movlw	195
  1218  001A0E  6E57               	movwf	??_main& (0+255),c
  1219  001A10  0ECD               	movlw	205
  1220  001A12                     u2947:
  1221  001A12  2EE8               	decfsz	wreg,f,c
  1222  001A14  D7FE               	bra	u2947
  1223  001A16  2E57               	decfsz	??_main& (0+255),f,c
  1224  001A18  D7FC               	bra	u2947
  1225  001A1A  F000               	nop	
  1226  001A1C  0E80               	movlw	128
  1227  001A1E  EC00  F017         	call	_lcdInst
  1228  001A22  0E41               	movlw	65
  1229  001A24  6E57               	movwf	??_main& (0+255),c
  1230  001A26  0EEE               	movlw	238
  1231  001A28                     u2957:
  1232  001A28  2EE8               	decfsz	wreg,f,c
  1233  001A2A  D7FE               	bra	u2957
  1234  001A2C  2E57               	decfsz	??_main& (0+255),f,c
  1235  001A2E  D7FC               	bra	u2957
  1236  001A30  D000               	nop2	
  1237                           
  1238                           ;main.c: 124: printf("Single block");
  1239  001A32  0E96               	movlw	low STR_3
  1240  001A34  6E19               	movwf	printf@f,c
  1241  001A36  0E10               	movlw	high STR_3
  1242  001A38  6E1A               	movwf	printf@f+1,c
  1243  001A3A  EC88  F00F         	call	_printf	;wreg free
  1244                           
  1245                           ;main.c: 125: lcdInst(0xC0);;
  1246  001A3E  0EC0               	movlw	192
  1247  001A40  EC00  F017         	call	_lcdInst
  1248                           
  1249                           ;main.c: 126: printf("write finished");
  1250  001A44  0E6C               	movlw	low STR_4
  1251  001A46  6E19               	movwf	printf@f,c
  1252  001A48  0E10               	movlw	high STR_4
  1253  001A4A  6E1A               	movwf	printf@f+1,c
  1254  001A4C  EC88  F00F         	call	_printf	;wreg free
  1255                           
  1256                           ;main.c: 127: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1257  001A50  0E33               	movlw	51
  1258  001A52  6E58               	movwf	(??_main+1)& (0+255),c
  1259  001A54  0EBB               	movlw	187
  1260  001A56  6E57               	movwf	??_main& (0+255),c
  1261  001A58  0EE0               	movlw	224
  1262  001A5A                     u2967:
  1263  001A5A  2EE8               	decfsz	wreg,f,c
  1264  001A5C  D7FE               	bra	u2967
  1265  001A5E  2E57               	decfsz	??_main& (0+255),f,c
  1266  001A60  D7FC               	bra	u2967
  1267  001A62  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1268  001A64  D7FA               	bra	u2967
  1269                           
  1270                           ;main.c: 147: unsigned char firstBlock = 1;
  1271  001A66  0E01               	movlw	1
  1272  001A68  6E69               	movwf	main@firstBlock,c
  1273                           
  1274                           ;main.c: 148: unsigned short numWrites = 1000;
  1275  001A6A  0E03               	movlw	3
  1276  001A6C  6E68               	movwf	main@numWrites+1,c
  1277  001A6E  0EE8               	movlw	232
  1278  001A70  6E67               	movwf	main@numWrites,c
  1279                           
  1280                           ;main.c: 151: for(i = 0; i < 512; i++){
  1281  001A72  0E00               	movlw	0
  1282  001A74  6E6A               	movwf	main@i,c
  1283  001A76  0E00               	movlw	0
  1284  001A78  6E6B               	movwf	main@i+1,c
  1285  001A7A  0E00               	movlw	0
  1286  001A7C  6E6C               	movwf	main@i+2,c
  1287  001A7E  0E00               	movlw	0
  1288  001A80  6E6D               	movwf	main@i+3,c
  1289  001A82                     l3329:
  1290  001A82  506D               	movf	main@i+3,w,c
  1291  001A84  106C               	iorwf	main@i+2,w,c
  1292  001A86  E113               	bnz	l3339
  1293  001A88  0E02               	movlw	2
  1294  001A8A  5C6B               	subwf	main@i+1,w,c
  1295  001A8C  B0D8               	btfsc	status,0,c
  1296  001A8E  D00F               	goto	l3339
  1297                           
  1298                           ;main.c: 152: writeBuffer[i] = 0x34;
  1299  001A90  0E80               	movlw	low _writeBuffer
  1300  001A92  246A               	addwf	main@i,w,c
  1301  001A94  6ED9               	movwf	fsr2l,c
  1302  001A96  0E0D               	movlw	high _writeBuffer
  1303  001A98  206B               	addwfc	main@i+1,w,c
  1304  001A9A  6EDA               	movwf	fsr2h,c
  1305  001A9C  0E34               	movlw	52
  1306  001A9E  6EDF               	movwf	indf2,c
  1307  001AA0  0E01               	movlw	1
  1308  001AA2  266A               	addwf	main@i,f,c
  1309  001AA4  0E00               	movlw	0
  1310  001AA6  226B               	addwfc	main@i+1,f,c
  1311  001AA8  226C               	addwfc	main@i+2,f,c
  1312  001AAA  226D               	addwfc	main@i+3,f,c
  1313  001AAC  D7EA               	goto	l3329
  1314  001AAE                     l3339:
  1315                           
  1316                           ;main.c: 153: }
  1317                           ;main.c: 155: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1318  001AAE  0E01               	movlw	1
  1319  001AB0  EC00  F017         	call	_lcdInst
  1320  001AB4  0EC3               	movlw	195
  1321  001AB6  6E57               	movwf	??_main& (0+255),c
  1322  001AB8  0ECD               	movlw	205
  1323  001ABA                     u2977:
  1324  001ABA  2EE8               	decfsz	wreg,f,c
  1325  001ABC  D7FE               	bra	u2977
  1326  001ABE  2E57               	decfsz	??_main& (0+255),f,c
  1327  001AC0  D7FC               	bra	u2977
  1328  001AC2  F000               	nop	
  1329  001AC4  0E80               	movlw	128
  1330  001AC6  EC00  F017         	call	_lcdInst
  1331  001ACA  0E41               	movlw	65
  1332  001ACC  6E57               	movwf	??_main& (0+255),c
  1333  001ACE  0EEE               	movlw	238
  1334  001AD0                     u2987:
  1335  001AD0  2EE8               	decfsz	wreg,f,c
  1336  001AD2  D7FE               	bra	u2987
  1337  001AD4  2E57               	decfsz	??_main& (0+255),f,c
  1338  001AD6  D7FC               	bra	u2987
  1339  001AD8  D000               	nop2	
  1340                           
  1341                           ;main.c: 156: printf("MBW Start...");
  1342  001ADA  0E89               	movlw	low STR_5
  1343  001ADC  6E19               	movwf	printf@f,c
  1344  001ADE  0E10               	movlw	high STR_5
  1345  001AE0  6E1A               	movwf	printf@f+1,c
  1346  001AE2  EC88  F00F         	call	_printf	;wreg free
  1347                           
  1348                           ;main.c: 157: SD_MBW_Start(firstBlock, numWrites);
  1349  001AE6  5069               	movf	main@firstBlock,w,c
  1350  001AE8  6E12               	movwf	SD_MBW_Start@startBlock,c
  1351  001AEA  6A13               	clrf	SD_MBW_Start@startBlock+1,c
  1352  001AEC  6A14               	clrf	SD_MBW_Start@startBlock+2,c
  1353  001AEE  6A15               	clrf	SD_MBW_Start@startBlock+3,c
  1354  001AF0  C067  F016         	movff	main@numWrites,SD_MBW_Start@numBlocks
  1355  001AF4  C068  F017         	movff	main@numWrites+1,SD_MBW_Start@numBlocks+1
  1356  001AF8  6A18               	clrf	SD_MBW_Start@numBlocks+2,c
  1357  001AFA  6A19               	clrf	SD_MBW_Start@numBlocks+3,c
  1358  001AFC  ECE7  F014         	call	_SD_MBW_Start	;wreg free
  1359                           
  1360                           ;main.c: 159: for(i = 0; i < numWrites; i++){
  1361  001B00  0E00               	movlw	0
  1362  001B02  6E6A               	movwf	main@i,c
  1363  001B04  0E00               	movlw	0
  1364  001B06  6E6B               	movwf	main@i+1,c
  1365  001B08  0E00               	movlw	0
  1366  001B0A  6E6C               	movwf	main@i+2,c
  1367  001B0C  0E00               	movlw	0
  1368  001B0E  6E6D               	movwf	main@i+3,c
  1369  001B10  D03A               	goto	l3363
  1370  001B12                     l3351:
  1371                           
  1372                           ;main.c: 161: if(!SD_MBW_Send(writeBuffer)){
  1373  001B12  0E80               	movlw	low _writeBuffer
  1374  001B14  6E0D               	movwf	SD_MBW_Send@arrWrite,c
  1375  001B16  0E0D               	movlw	high _writeBuffer
  1376  001B18  6E0E               	movwf	SD_MBW_Send@arrWrite+1,c
  1377  001B1A  EC88  F010         	call	_SD_MBW_Send	;wreg free
  1378  001B1E  0900               	iorlw	0
  1379  001B20  B4D8               	btfsc	status,2,c
  1380  001B22  D041               	goto	l3365
  1381                           
  1382                           ;main.c: 163: }
  1383                           ;main.c: 164: if(i % 100 == 0){
  1384                           
  1385                           ;main.c: 162: break;
  1386  001B24  C06A  F00E         	movff	main@i,___llmod@dividend
  1387  001B28  C06B  F00F         	movff	main@i+1,___llmod@dividend+1
  1388  001B2C  C06C  F010         	movff	main@i+2,___llmod@dividend+2
  1389  001B30  C06D  F011         	movff	main@i+3,___llmod@dividend+3
  1390  001B34  0E64               	movlw	100
  1391  001B36  6E12               	movwf	___llmod@divisor,c
  1392  001B38  0E00               	movlw	0
  1393  001B3A  6E13               	movwf	___llmod@divisor+1,c
  1394  001B3C  0E00               	movlw	0
  1395  001B3E  6E14               	movwf	___llmod@divisor+2,c
  1396  001B40  0E00               	movlw	0
  1397  001B42  6E15               	movwf	___llmod@divisor+3,c
  1398  001B44  EC91  F015         	call	___llmod	;wreg free
  1399  001B48  500E               	movf	?___llmod,w,c
  1400  001B4A  100F               	iorwf	?___llmod+1,w,c
  1401  001B4C  1010               	iorwf	?___llmod+2,w,c
  1402  001B4E  1011               	iorwf	?___llmod+3,w,c
  1403  001B50  A4D8               	btfss	status,2,c
  1404  001B52  D013               	goto	l3361
  1405                           
  1406                           ;main.c: 166: lcd_set_cursor(0, 1);
  1407  001B54  0E01               	movlw	1
  1408  001B56  6E07               	movwf	lcd_set_cursor@y,c
  1409  001B58  0E00               	movlw	0
  1410  001B5A  EC18  F016         	call	_lcd_set_cursor
  1411                           
  1412                           ;main.c: 167: printf("Done: %lu", i);
  1413  001B5E  0EC3               	movlw	low STR_6
  1414  001B60  6E19               	movwf	printf@f,c
  1415  001B62  0E10               	movlw	high STR_6
  1416  001B64  6E1A               	movwf	printf@f+1,c
  1417  001B66  C06A  F01B         	movff	main@i,?_printf+2
  1418  001B6A  C06B  F01C         	movff	main@i+1,?_printf+3
  1419  001B6E  C06C  F01D         	movff	main@i+2,?_printf+4
  1420  001B72  C06D  F01E         	movff	main@i+3,?_printf+5
  1421  001B76  EC88  F00F         	call	_printf	;wreg free
  1422  001B7A                     l3361:
  1423  001B7A  0E01               	movlw	1
  1424  001B7C  266A               	addwf	main@i,f,c
  1425  001B7E  0E00               	movlw	0
  1426  001B80  226B               	addwfc	main@i+1,f,c
  1427  001B82  226C               	addwfc	main@i+2,f,c
  1428  001B84  226D               	addwfc	main@i+3,f,c
  1429  001B86                     l3363:
  1430  001B86  5067               	movf	main@numWrites,w,c
  1431  001B88  6E57               	movwf	??_main& (0+255),c
  1432  001B8A  5068               	movf	main@numWrites+1,w,c
  1433  001B8C  6E58               	movwf	(??_main+1)& (0+255),c
  1434  001B8E  6A59               	clrf	(??_main+2)& (0+255),c
  1435  001B90  6A5A               	clrf	(??_main+3)& (0+255),c
  1436  001B92  5057               	movf	??_main,w,c
  1437  001B94  5C6A               	subwf	main@i,w,c
  1438  001B96  5058               	movf	??_main+1,w,c
  1439  001B98  586B               	subwfb	main@i+1,w,c
  1440  001B9A  5059               	movf	??_main+2,w,c
  1441  001B9C  586C               	subwfb	main@i+2,w,c
  1442  001B9E  505A               	movf	??_main+3,w,c
  1443  001BA0  586D               	subwfb	main@i+3,w,c
  1444  001BA2  A0D8               	btfss	status,0,c
  1445  001BA4  D7B6               	goto	l3351
  1446  001BA6                     l3365:
  1447                           
  1448                           ;main.c: 168: }
  1449                           ;main.c: 169: }
  1450                           ;main.c: 170: SD_MBW_Stop();
  1451  001BA6  EC8C  F016         	call	_SD_MBW_Stop	;wreg free
  1452                           
  1453                           ;main.c: 171: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1454  001BAA  848D               	bsf	3981,2,c	;volatile
  1455  001BAC  9AC6               	bcf	4038,5,c	;volatile
  1456                           
  1457                           ;main.c: 172: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1458  001BAE  0E01               	movlw	1
  1459  001BB0  EC00  F017         	call	_lcdInst
  1460  001BB4  0EC3               	movlw	195
  1461  001BB6  6E57               	movwf	??_main& (0+255),c
  1462  001BB8  0ECD               	movlw	205
  1463  001BBA                     u2997:
  1464  001BBA  2EE8               	decfsz	wreg,f,c
  1465  001BBC  D7FE               	bra	u2997
  1466  001BBE  2E57               	decfsz	??_main& (0+255),f,c
  1467  001BC0  D7FC               	bra	u2997
  1468  001BC2  F000               	nop	
  1469                           
  1470                           ;main.c: 173: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1471  001BC4  0E80               	movlw	128
  1472  001BC6  EC00  F017         	call	_lcdInst
  1473  001BCA  0E41               	movlw	65
  1474  001BCC  6E57               	movwf	??_main& (0+255),c
  1475  001BCE  0EEE               	movlw	238
  1476  001BD0                     u3007:
  1477  001BD0  2EE8               	decfsz	wreg,f,c
  1478  001BD2  D7FE               	bra	u3007
  1479  001BD4  2E57               	decfsz	??_main& (0+255),f,c
  1480  001BD6  D7FC               	bra	u3007
  1481  001BD8  D000               	nop2	
  1482                           
  1483                           ;main.c: 174: printf("Done MBW!");
  1484  001BDA  0EAF               	movlw	low STR_7
  1485  001BDC  6E19               	movwf	printf@f,c
  1486  001BDE  0E10               	movlw	high STR_7
  1487  001BE0  6E1A               	movwf	printf@f+1,c
  1488  001BE2  EC88  F00F         	call	_printf	;wreg free
  1489                           
  1490                           ;main.c: 175: lcdInst(0xC0);;
  1491  001BE6  0EC0               	movlw	192
  1492  001BE8  EC00  F017         	call	_lcdInst
  1493                           
  1494                           ;main.c: 176: printf("Done %lu", i);
  1495  001BEC  0EDF               	movlw	low STR_8
  1496  001BEE  6E19               	movwf	printf@f,c
  1497  001BF0  0E10               	movlw	high STR_8
  1498  001BF2  6E1A               	movwf	printf@f+1,c
  1499  001BF4  C06A  F01B         	movff	main@i,?_printf+2
  1500  001BF8  C06B  F01C         	movff	main@i+1,?_printf+3
  1501  001BFC  C06C  F01D         	movff	main@i+2,?_printf+4
  1502  001C00  C06D  F01E         	movff	main@i+3,?_printf+5
  1503  001C04  EC88  F00F         	call	_printf	;wreg free
  1504                           
  1505                           ;main.c: 177: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1506  001C08  0E33               	movlw	51
  1507  001C0A  6E58               	movwf	(??_main+1)& (0+255),c
  1508  001C0C  0EBB               	movlw	187
  1509  001C0E  6E57               	movwf	??_main& (0+255),c
  1510  001C10  0EE0               	movlw	224
  1511  001C12                     u3017:
  1512  001C12  2EE8               	decfsz	wreg,f,c
  1513  001C14  D7FE               	bra	u3017
  1514  001C16  2E57               	decfsz	??_main& (0+255),f,c
  1515  001C18  D7FC               	bra	u3017
  1516  001C1A  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1517  001C1C  D7FA               	bra	u3017
  1518                           
  1519                           ;main.c: 182: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1520  001C1E  8AC6               	bsf	4038,5,c	;volatile
  1521  001C20  948D               	bcf	3981,2,c	;volatile
  1522                           
  1523                           ;main.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1524  001C22  0E01               	movlw	1
  1525  001C24  EC00  F017         	call	_lcdInst
  1526  001C28  0EC3               	movlw	195
  1527  001C2A  6E57               	movwf	??_main& (0+255),c
  1528  001C2C  0ECD               	movlw	205
  1529  001C2E                     u3027:
  1530  001C2E  2EE8               	decfsz	wreg,f,c
  1531  001C30  D7FE               	bra	u3027
  1532  001C32  2E57               	decfsz	??_main& (0+255),f,c
  1533  001C34  D7FC               	bra	u3027
  1534  001C36  F000               	nop	
  1535  001C38  0E80               	movlw	128
  1536  001C3A  EC00  F017         	call	_lcdInst
  1537  001C3E  0E41               	movlw	65
  1538  001C40  6E57               	movwf	??_main& (0+255),c
  1539  001C42  0EEE               	movlw	238
  1540  001C44                     u3037:
  1541  001C44  2EE8               	decfsz	wreg,f,c
  1542  001C46  D7FE               	bra	u3037
  1543  001C48  2E57               	decfsz	??_main& (0+255),f,c
  1544  001C4A  D7FC               	bra	u3037
  1545  001C4C  D000               	nop2	
  1546                           
  1547                           ;main.c: 191: printf("Reading sector 0");
  1548  001C4E  0E4B               	movlw	low STR_9
  1549  001C50  6E19               	movwf	printf@f,c
  1550  001C52  0E10               	movlw	high STR_9
  1551  001C54  6E1A               	movwf	printf@f+1,c
  1552  001C56  EC88  F00F         	call	_printf	;wreg free
  1553                           
  1554                           ;main.c: 192: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1555  001C5A  0E33               	movlw	51
  1556  001C5C  6E58               	movwf	(??_main+1)& (0+255),c
  1557  001C5E  0EBB               	movlw	187
  1558  001C60  6E57               	movwf	??_main& (0+255),c
  1559  001C62  0EE0               	movlw	224
  1560  001C64                     u3047:
  1561  001C64  2EE8               	decfsz	wreg,f,c
  1562  001C66  D7FE               	bra	u3047
  1563  001C68  2E57               	decfsz	??_main& (0+255),f,c
  1564  001C6A  D7FC               	bra	u3047
  1565  001C6C  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1566  001C6E  D7FA               	bra	u3047
  1567                           
  1568                           ;main.c: 195: if(SD_SingleBlockRead(0, readBuffer)){
  1569  001C70  0E00               	movlw	0
  1570  001C72  6E0D               	movwf	SD_SingleBlockRead@block,c
  1571  001C74  0E00               	movlw	0
  1572  001C76  6E0E               	movwf	SD_SingleBlockRead@block+1,c
  1573  001C78  0E00               	movlw	0
  1574  001C7A  6E0F               	movwf	SD_SingleBlockRead@block+2,c
  1575  001C7C  0E00               	movlw	0
  1576  001C7E  6E10               	movwf	SD_SingleBlockRead@block+3,c
  1577  001C80  0E80               	movlw	low main@readBuffer
  1578  001C82  6E11               	movwf	SD_SingleBlockRead@buf,c
  1579  001C84  0E0B               	movlw	high main@readBuffer
  1580  001C86  6E12               	movwf	SD_SingleBlockRead@buf+1,c
  1581  001C88  ECE0  F012         	call	_SD_SingleBlockRead	;wreg free
  1582  001C8C  0900               	iorlw	0
  1583  001C8E  B4D8               	btfsc	status,2,c
  1584  001C90  D018               	goto	l3409
  1585                           
  1586                           ;main.c: 196: lcdInst(0xC0);;
  1587  001C92  0EC0               	movlw	192
  1588  001C94  EC00  F017         	call	_lcdInst
  1589                           
  1590                           ;main.c: 197: printf("Avg: %d", average(readBuffer, 512));
  1591  001C98  0EE8               	movlw	low STR_10
  1592  001C9A  6E19               	movwf	printf@f,c
  1593  001C9C  0E10               	movlw	high STR_10
  1594  001C9E  6E1A               	movwf	printf@f+1,c
  1595  001CA0  0E80               	movlw	low main@readBuffer
  1596  001CA2  6E0E               	movwf	average@array,c
  1597  001CA4  0E0B               	movlw	high main@readBuffer
  1598  001CA6  6E0F               	movwf	average@array+1,c
  1599  001CA8  0E02               	movlw	2
  1600  001CAA  6E11               	movwf	average@numElements+1,c
  1601  001CAC  0E00               	movlw	0
  1602  001CAE  6E10               	movwf	average@numElements,c
  1603  001CB0  EC5C  F015         	call	_average	;wreg free
  1604  001CB4  6E57               	movwf	??_main& (0+255),c
  1605  001CB6  5057               	movf	??_main,w,c
  1606  001CB8  6E1B               	movwf	?_printf+2,c
  1607  001CBA  6A1C               	clrf	?_printf+3,c
  1608  001CBC  EC88  F00F         	call	_printf	;wreg free
  1609                           
  1610                           ;main.c: 198: }
  1611  001CC0  D009               	goto	l3413
  1612  001CC2                     l3409:
  1613                           
  1614                           ;main.c: 199: else{
  1615                           ;main.c: 201: lcdInst(0xC0);;
  1616  001CC2  0EC0               	movlw	192
  1617  001CC4  EC00  F017         	call	_lcdInst
  1618                           
  1619                           ;main.c: 202: printf("Failure!");
  1620  001CC8  0ECD               	movlw	low STR_11
  1621  001CCA  6E19               	movwf	printf@f,c
  1622  001CCC  0E10               	movlw	high STR_11
  1623  001CCE  6E1A               	movwf	printf@f+1,c
  1624  001CD0  EC88  F00F         	call	_printf	;wreg free
  1625  001CD4                     l3413:
  1626                           
  1627                           ;main.c: 203: }
  1628                           ;main.c: 204: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1629  001CD4  0E33               	movlw	51
  1630  001CD6  6E58               	movwf	(??_main+1)& (0+255),c
  1631  001CD8  0EBB               	movlw	187
  1632  001CDA  6E57               	movwf	??_main& (0+255),c
  1633  001CDC  0EE0               	movlw	224
  1634  001CDE                     u3057:
  1635  001CDE  2EE8               	decfsz	wreg,f,c
  1636  001CE0  D7FE               	bra	u3057
  1637  001CE2  2E57               	decfsz	??_main& (0+255),f,c
  1638  001CE4  D7FC               	bra	u3057
  1639  001CE6  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1640  001CE8  D7FA               	bra	u3057
  1641                           
  1642                           ;main.c: 227: unsigned long avg = 0;
  1643  001CEA  0E00               	movlw	0
  1644  001CEC  6E63               	movwf	main@avg,c
  1645  001CEE  0E00               	movlw	0
  1646  001CF0  6E64               	movwf	main@avg+1,c
  1647  001CF2  0E00               	movlw	0
  1648  001CF4  6E65               	movwf	main@avg+2,c
  1649  001CF6  0E00               	movlw	0
  1650  001CF8  6E66               	movwf	main@avg+3,c
  1651                           
  1652                           ;main.c: 231: SD_MBR_Start(SDCard.write.MBW_startBlock);
  1653  001CFA  C0A0  F00D         	movff	_SDCard+32,SD_MBR_Start@startBlock
  1654  001CFE  C0A1  F00E         	movff	_SDCard+33,SD_MBR_Start@startBlock+1
  1655  001D02  C0A2  F00F         	movff	_SDCard+34,SD_MBR_Start@startBlock+2
  1656  001D06  C0A3  F010         	movff	_SDCard+35,SD_MBR_Start@startBlock+3
  1657  001D0A  EC26  F015         	call	_SD_MBR_Start	;wreg free
  1658                           
  1659                           ;main.c: 233: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1660  001D0E  0E01               	movlw	1
  1661  001D10  EC00  F017         	call	_lcdInst
  1662  001D14  0EC3               	movlw	195
  1663  001D16  6E57               	movwf	??_main& (0+255),c
  1664  001D18  0ECD               	movlw	205
  1665  001D1A                     u3067:
  1666  001D1A  2EE8               	decfsz	wreg,f,c
  1667  001D1C  D7FE               	bra	u3067
  1668  001D1E  2E57               	decfsz	??_main& (0+255),f,c
  1669  001D20  D7FC               	bra	u3067
  1670  001D22  F000               	nop	
  1671  001D24  0E80               	movlw	128
  1672  001D26  EC00  F017         	call	_lcdInst
  1673  001D2A  0E41               	movlw	65
  1674  001D2C  6E57               	movwf	??_main& (0+255),c
  1675  001D2E  0EEE               	movlw	238
  1676  001D30                     u3077:
  1677  001D30  2EE8               	decfsz	wreg,f,c
  1678  001D32  D7FE               	bra	u3077
  1679  001D34  2E57               	decfsz	??_main& (0+255),f,c
  1680  001D36  D7FC               	bra	u3077
  1681  001D38  D000               	nop2	
  1682                           
  1683                           ;main.c: 234: printf("Reading sectors");
  1684  001D3A  0E5C               	movlw	low STR_12
  1685  001D3C  6E19               	movwf	printf@f,c
  1686  001D3E  0E10               	movlw	high STR_12
  1687  001D40  6E1A               	movwf	printf@f+1,c
  1688  001D42  EC88  F00F         	call	_printf	;wreg free
  1689                           
  1690                           ;main.c: 235: lcdInst(0xC0);;
  1691  001D46  0EC0               	movlw	192
  1692  001D48  EC00  F017         	call	_lcdInst
  1693                           
  1694                           ;main.c: 236: printf("%d-%d...", firstBlock, firstBlock + numWrites - 1);
  1695  001D4C  0ED6               	movlw	low STR_13
  1696  001D4E  6E19               	movwf	printf@f,c
  1697  001D50  0E10               	movlw	high STR_13
  1698  001D52  6E1A               	movwf	printf@f+1,c
  1699  001D54  C069  F01B         	movff	main@firstBlock,?_printf+2
  1700  001D58  6A1C               	clrf	?_printf+3,c
  1701  001D5A  5069               	movf	main@firstBlock,w,c
  1702  001D5C  2467               	addwf	main@numWrites,w,c
  1703  001D5E  6E57               	movwf	??_main& (0+255),c
  1704  001D60  0E00               	movlw	0
  1705  001D62  2068               	addwfc	main@numWrites+1,w,c
  1706  001D64  6E58               	movwf	(??_main+1)& (0+255),c
  1707  001D66  0EFF               	movlw	255
  1708  001D68  2457               	addwf	??_main,w,c
  1709  001D6A  6E1D               	movwf	?_printf+4,c
  1710  001D6C  0EFF               	movlw	255
  1711  001D6E  2058               	addwfc	??_main+1,w,c
  1712  001D70  6E1E               	movwf	?_printf+5,c
  1713  001D72  EC88  F00F         	call	_printf	;wreg free
  1714                           
  1715                           ;main.c: 238: for(i = 0;
  1716  001D76  0E00               	movlw	0
  1717  001D78  6E6A               	movwf	main@i,c
  1718  001D7A  0E00               	movlw	0
  1719  001D7C  6E6B               	movwf	main@i+1,c
  1720  001D7E  0E00               	movlw	0
  1721  001D80  6E6C               	movwf	main@i+2,c
  1722  001D82  0E00               	movlw	0
  1723  001D84  6E6D               	movwf	main@i+3,c
  1724                           
  1725                           ;main.c: 239: i < SDCard.write.lastBlockWritten - SDCard.write.MBW_startBlock + 1;
  1726                           ;main.c: 240: i++)
  1727  001D86  D01D               	goto	l3441
  1728  001D88                     l3435:
  1729                           
  1730                           ;main.c: 241: {
  1731                           ;main.c: 243: SD_MBR_Receive(readBuffer);
  1732  001D88  0E80               	movlw	low main@readBuffer
  1733  001D8A  6E04               	movwf	SD_MBR_Receive@bufReceive,c
  1734  001D8C  0E0B               	movlw	high main@readBuffer
  1735  001D8E  6E05               	movwf	SD_MBR_Receive@bufReceive+1,c
  1736  001D90  ECDD  F013         	call	_SD_MBR_Receive	;wreg free
  1737                           
  1738                           ;main.c: 247: avg += average(readBuffer, 512);
  1739  001D94  0E80               	movlw	low main@readBuffer
  1740  001D96  6E0E               	movwf	average@array,c
  1741  001D98  0E0B               	movlw	high main@readBuffer
  1742  001D9A  6E0F               	movwf	average@array+1,c
  1743  001D9C  0E02               	movlw	2
  1744  001D9E  6E11               	movwf	average@numElements+1,c
  1745  001DA0  0E00               	movlw	0
  1746  001DA2  6E10               	movwf	average@numElements,c
  1747  001DA4  EC5C  F015         	call	_average	;wreg free
  1748  001DA8  6E57               	movwf	??_main& (0+255),c
  1749  001DAA  5057               	movf	??_main,w,c
  1750  001DAC  2663               	addwf	main@avg,f,c
  1751  001DAE  0E00               	movlw	0
  1752  001DB0  2264               	addwfc	main@avg+1,f,c
  1753  001DB2  2265               	addwfc	main@avg+2,f,c
  1754  001DB4  2266               	addwfc	main@avg+3,f,c
  1755  001DB6  0E01               	movlw	1
  1756  001DB8  266A               	addwf	main@i,f,c
  1757  001DBA  0E00               	movlw	0
  1758  001DBC  226B               	addwfc	main@i+1,f,c
  1759  001DBE  226C               	addwfc	main@i+2,f,c
  1760  001DC0  226D               	addwfc	main@i+3,f,c
  1761  001DC2                     l3441:
  1762  001DC2  C0A0  F057         	movff	_SDCard+32,??_main
  1763  001DC6  C0A1  F058         	movff	_SDCard+33,??_main+1
  1764  001DCA  C0A2  F059         	movff	_SDCard+34,??_main+2
  1765  001DCE  C0A3  F05A         	movff	_SDCard+35,??_main+3
  1766  001DD2  1E57               	comf	??_main,f,c
  1767  001DD4  1E58               	comf	??_main+1,f,c
  1768  001DD6  1E59               	comf	??_main+2,f,c
  1769  001DD8  1E5A               	comf	??_main+3,f,c
  1770  001DDA  2A57               	incf	??_main,f,c
  1771  001DDC  0E00               	movlw	0
  1772  001DDE  2258               	addwfc	??_main+1,f,c
  1773  001DE0  2259               	addwfc	??_main+2,f,c
  1774  001DE2  225A               	addwfc	??_main+3,f,c
  1775  001DE4  0100               	movlb	0	; () banked
  1776  001DE6  519C               	movf	(_SDCard+28)& (0+255),w,b
  1777  001DE8  2457               	addwf	??_main,w,c
  1778  001DEA  6E5B               	movwf	(??_main+4)& (0+255),c
  1779  001DEC  0100               	movlb	0	; () banked
  1780  001DEE  519D               	movf	(_SDCard+29)& (0+255),w,b
  1781  001DF0  2058               	addwfc	??_main+1,w,c
  1782  001DF2  6E5C               	movwf	(??_main+5)& (0+255),c
  1783  001DF4  0100               	movlb	0	; () banked
  1784  001DF6  519E               	movf	(_SDCard+30)& (0+255),w,b
  1785  001DF8  2059               	addwfc	??_main+2,w,c
  1786  001DFA  6E5D               	movwf	(??_main+6)& (0+255),c
  1787  001DFC  0100               	movlb	0	; () banked
  1788  001DFE  519F               	movf	(_SDCard+31)& (0+255),w,b
  1789  001E00  205A               	addwfc	??_main+3,w,c
  1790  001E02  6E5E               	movwf	(??_main+7)& (0+255),c
  1791  001E04  0E01               	movlw	1
  1792  001E06  245B               	addwf	??_main+4,w,c
  1793  001E08  6E5F               	movwf	(??_main+8)& (0+255),c
  1794  001E0A  0E00               	movlw	0
  1795  001E0C  205C               	addwfc	??_main+5,w,c
  1796  001E0E  6E60               	movwf	(??_main+9)& (0+255),c
  1797  001E10  0E00               	movlw	0
  1798  001E12  205D               	addwfc	??_main+6,w,c
  1799  001E14  6E61               	movwf	(??_main+10)& (0+255),c
  1800  001E16  0E00               	movlw	0
  1801  001E18  205E               	addwfc	??_main+7,w,c
  1802  001E1A  6E62               	movwf	(??_main+11)& (0+255),c
  1803  001E1C  505F               	movf	??_main+8,w,c
  1804  001E1E  5C6A               	subwf	main@i,w,c
  1805  001E20  5060               	movf	??_main+9,w,c
  1806  001E22  586B               	subwfb	main@i+1,w,c
  1807  001E24  5061               	movf	??_main+10,w,c
  1808  001E26  586C               	subwfb	main@i+2,w,c
  1809  001E28  5062               	movf	??_main+11,w,c
  1810  001E2A  586D               	subwfb	main@i+3,w,c
  1811  001E2C  A0D8               	btfss	status,0,c
  1812  001E2E  D7AC               	goto	l3435
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;main.c: 248: }
  1816                           ;main.c: 249: SD_MBR_Stop();
  1817                           
  1818                           ; BSR set to: 0
  1819  001E30  ECA4  F016         	call	_SD_MBR_Stop	;wreg free
  1820                           
  1821                           ;main.c: 253: avg /= (SDCard.read.lastBlockRead - SDCard.read.MBR_startBlock);
  1822  001E34  C063  F001         	movff	main@avg,___lldiv@dividend
  1823  001E38  C064  F002         	movff	main@avg+1,___lldiv@dividend+1
  1824  001E3C  C065  F003         	movff	main@avg+2,___lldiv@dividend+2
  1825  001E40  C066  F004         	movff	main@avg+3,___lldiv@dividend+3
  1826  001E44  C0A9  F057         	movff	_SDCard+41,??_main
  1827  001E48  C0AA  F058         	movff	_SDCard+42,??_main+1
  1828  001E4C  C0AB  F059         	movff	_SDCard+43,??_main+2
  1829  001E50  C0AC  F05A         	movff	_SDCard+44,??_main+3
  1830  001E54  1E57               	comf	??_main,f,c
  1831  001E56  1E58               	comf	??_main+1,f,c
  1832  001E58  1E59               	comf	??_main+2,f,c
  1833  001E5A  1E5A               	comf	??_main+3,f,c
  1834  001E5C  2A57               	incf	??_main,f,c
  1835  001E5E  0E00               	movlw	0
  1836  001E60  2258               	addwfc	??_main+1,f,c
  1837  001E62  2259               	addwfc	??_main+2,f,c
  1838  001E64  225A               	addwfc	??_main+3,f,c
  1839  001E66  0100               	movlb	0	; () banked
  1840  001E68  51A5               	movf	(_SDCard+37)& (0+255),w,b
  1841  001E6A  2457               	addwf	??_main,w,c
  1842  001E6C  6E05               	movwf	___lldiv@divisor,c
  1843  001E6E  0100               	movlb	0	; () banked
  1844  001E70  51A6               	movf	(_SDCard+38)& (0+255),w,b
  1845  001E72  2058               	addwfc	??_main+1,w,c
  1846  001E74  6E06               	movwf	___lldiv@divisor+1,c
  1847  001E76  0100               	movlb	0	; () banked
  1848  001E78  51A7               	movf	(_SDCard+39)& (0+255),w,b
  1849  001E7A  2059               	addwfc	??_main+2,w,c
  1850  001E7C  6E07               	movwf	___lldiv@divisor+2,c
  1851  001E7E  0100               	movlb	0	; () banked
  1852  001E80  51A8               	movf	(_SDCard+40)& (0+255),w,b
  1853  001E82  205A               	addwfc	??_main+3,w,c
  1854  001E84  6E08               	movwf	___lldiv@divisor+3,c
  1855  001E86  EC67  F014         	call	___lldiv	;wreg free
  1856  001E8A  C001  F063         	movff	?___lldiv,main@avg
  1857  001E8E  C002  F064         	movff	?___lldiv+1,main@avg+1
  1858  001E92  C003  F065         	movff	?___lldiv+2,main@avg+2
  1859  001E96  C004  F066         	movff	?___lldiv+3,main@avg+3
  1860                           
  1861                           ;main.c: 255: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1862  001E9A  848D               	bsf	3981,2,c	;volatile
  1863  001E9C  9AC6               	bcf	4038,5,c	;volatile
  1864                           
  1865                           ;main.c: 257: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1866  001E9E  0E01               	movlw	1
  1867  001EA0  EC00  F017         	call	_lcdInst
  1868  001EA4  0EC3               	movlw	195
  1869  001EA6  6E57               	movwf	??_main& (0+255),c
  1870  001EA8  0ECD               	movlw	205
  1871  001EAA                     u3087:
  1872  001EAA  2EE8               	decfsz	wreg,f,c
  1873  001EAC  D7FE               	bra	u3087
  1874  001EAE  2E57               	decfsz	??_main& (0+255),f,c
  1875  001EB0  D7FC               	bra	u3087
  1876  001EB2  F000               	nop	
  1877  001EB4  0E80               	movlw	128
  1878  001EB6  EC00  F017         	call	_lcdInst
  1879  001EBA  0E41               	movlw	65
  1880  001EBC  6E57               	movwf	??_main& (0+255),c
  1881  001EBE  0EEE               	movlw	238
  1882  001EC0                     u3097:
  1883  001EC0  2EE8               	decfsz	wreg,f,c
  1884  001EC2  D7FE               	bra	u3097
  1885  001EC4  2E57               	decfsz	??_main& (0+255),f,c
  1886  001EC6  D7FC               	bra	u3097
  1887  001EC8  D000               	nop2	
  1888                           
  1889                           ;main.c: 258: printf("Sec %d-%d", (int)firstBlock, (int)(firstBlock + numWrites - 1));
  1890  001ECA  0EB9               	movlw	low STR_14
  1891  001ECC  6E19               	movwf	printf@f,c
  1892  001ECE  0E10               	movlw	high STR_14
  1893  001ED0  6E1A               	movwf	printf@f+1,c
  1894  001ED2  C069  F01B         	movff	main@firstBlock,?_printf+2
  1895  001ED6  6A1C               	clrf	?_printf+3,c
  1896  001ED8  5069               	movf	main@firstBlock,w,c
  1897  001EDA  2467               	addwf	main@numWrites,w,c
  1898  001EDC  6E57               	movwf	??_main& (0+255),c
  1899  001EDE  0E00               	movlw	0
  1900  001EE0  2068               	addwfc	main@numWrites+1,w,c
  1901  001EE2  6E58               	movwf	(??_main+1)& (0+255),c
  1902  001EE4  0EFF               	movlw	255
  1903  001EE6  2457               	addwf	??_main,w,c
  1904  001EE8  6E1D               	movwf	?_printf+4,c
  1905  001EEA  0EFF               	movlw	255
  1906  001EEC  2058               	addwfc	??_main+1,w,c
  1907  001EEE  6E1E               	movwf	?_printf+5,c
  1908  001EF0  EC88  F00F         	call	_printf	;wreg free
  1909                           
  1910                           ;main.c: 259: lcdInst(0xC0);;
  1911  001EF4  0EC0               	movlw	192
  1912  001EF6  EC00  F017         	call	_lcdInst
  1913                           
  1914                           ;main.c: 260: printf("Avg: %d", (int)avg);
  1915  001EFA  0EE8               	movlw	low STR_10
  1916  001EFC  6E19               	movwf	printf@f,c
  1917  001EFE  0E10               	movlw	high STR_10
  1918  001F00  6E1A               	movwf	printf@f+1,c
  1919  001F02  C063  F01B         	movff	main@avg,?_printf+2
  1920  001F06  C064  F01C         	movff	main@avg+1,?_printf+3
  1921  001F0A  EC88  F00F         	call	_printf	;wreg free
  1922  001F0E                     l172:
  1923  001F0E  D7FF               	goto	l172
  1924  001F10                     __end_of_main:
  1925                           	opt stack 0
  1926                           tblptru	equ	0xFF8
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           postdec1	equ	0xFE5
  1930                           fsr1h	equ	0xFE2
  1931                           fsr1l	equ	0xFE1
  1932                           indf2	equ	0xFDF
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _printf *****************
  1938 ;; Defined at:
  1939 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1942 ;;		 -> STR_15(8), STR_14(10), STR_13(9), STR_12(16), 
  1943 ;;		 -> STR_11(9), STR_10(8), STR_9(17), STR_8(9), 
  1944 ;;		 -> STR_7(10), STR_6(10), STR_5(13), STR_4(15), 
  1945 ;;		 -> STR_3(13), STR_2(12), STR_1(14), 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  val             4   34[COMRAM] unsigned long 
  1948 ;;  tmpval          4    0        struct .
  1949 ;;  cp              3    0        PTR const unsigned char 
  1950 ;;  ap              2   38[COMRAM] PTR void [1]
  1951 ;;		 -> ?_printf(2), 
  1952 ;;  prec            2   32[COMRAM] int 
  1953 ;;  len             2    0        unsigned int 
  1954 ;;  c               1   41[COMRAM] char 
  1955 ;;  flag            1   40[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  2   24[COMRAM] int 
  1958 ;; Registers used:
  1959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;Total ram usage:       18 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    2
  1972 ;; This function calls:
  1973 ;;		___lldiv
  1974 ;;		___llmod
  1975 ;;		_putch
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text1
  1982  001F10                     __ptext1:
  1983                           	opt stack 0
  1984  001F10                     _printf:
  1985                           	opt stack 28
  1986                           
  1987                           ;doprnt.c: 466: va_list ap;
  1988                           ;doprnt.c: 499: signed char c;
  1989                           ;doprnt.c: 504: int prec;
  1990                           ;doprnt.c: 508: unsigned char flag;
  1991                           ;doprnt.c: 523: union {
  1992                           ;doprnt.c: 524: unsigned long vd;
  1993                           ;doprnt.c: 525: double integ;
  1994                           ;doprnt.c: 526: } tmpval;
  1995                           ;doprnt.c: 528: unsigned long val;
  1996                           ;doprnt.c: 529: unsigned len;
  1997                           ;doprnt.c: 530: const char * cp;
  1998                           ;doprnt.c: 533: *ap = __va_start();
  1999                           
  2000                           ;incstack = 0
  2001  001F10  0E1B               	movlw	low (?_printf+2)
  2002  001F12  6E27               	movwf	printf@ap,c
  2003  001F14  0E00               	movlw	high (?_printf+2)
  2004  001F16  6E28               	movwf	printf@ap+1,c
  2005                           
  2006                           ;doprnt.c: 536: while(c = *f++) {
  2007  001F18  D0EE               	goto	l3033
  2008  001F1A                     l2969:
  2009                           
  2010                           ;doprnt.c: 538: if(c != '%')
  2011  001F1A  0E25               	movlw	37
  2012  001F1C  182A               	xorwf	printf@c,w,c
  2013  001F1E  B4D8               	btfsc	status,2,c
  2014  001F20  D004               	goto	l2973
  2015                           
  2016                           ;doprnt.c: 540: {
  2017                           ;doprnt.c: 541: (putch(c) );
  2018  001F22  502A               	movf	printf@c,w,c
  2019  001F24  ECF6  F016         	call	_putch
  2020                           
  2021                           ;doprnt.c: 542: continue;
  2022  001F28  D0E6               	goto	l3033
  2023  001F2A                     l2973:
  2024                           
  2025                           ;doprnt.c: 543: }
  2026                           ;doprnt.c: 548: flag = 0;
  2027  001F2A  0E00               	movlw	0
  2028  001F2C  6E29               	movwf	printf@flag,c
  2029                           
  2030                           ;doprnt.c: 635: switch(c = *f++) {
  2031                           
  2032                           ;doprnt.c: 633: loop:
  2033  001F2E  D004               	goto	l2981
  2034  001F30                     l2975:
  2035                           
  2036                           ;doprnt.c: 643: flag |= 0x10;
  2037  001F30  8829               	bsf	printf@flag,4,c
  2038                           
  2039                           ;doprnt.c: 644: goto loop;
  2040  001F32  D002               	goto	l2981
  2041  001F34                     l2977:
  2042                           
  2043                           ;doprnt.c: 818: flag |= 0x40;
  2044  001F34  8C29               	bsf	printf@flag,6,c
  2045                           
  2046                           ;doprnt.c: 822: }
  2047                           
  2048                           ;doprnt.c: 819: break;
  2049  001F36  D01A               	goto	l541
  2050  001F38                     l2981:
  2051  001F38  C019  FFF6         	movff	printf@f,tblptrl
  2052  001F3C  C01A  FFF7         	movff	printf@f+1,tblptrh
  2053  001F40  4A19               	infsnz	printf@f,f,c
  2054  001F42  2A1A               	incf	printf@f+1,f,c
  2055  001F44                     	if	0	;tblptru may be non-zero
  2056  001F44                     	endif
  2057  001F44                     	if	0	;tblptru may be non-zero
  2058  001F44                     	endif
  2059  001F44  0008               	tblrd		*
  2060  001F46  CFF5 F02A          	movff	tablat,printf@c
  2061  001F4A  502A               	movf	printf@c,w,c
  2062                           
  2063                           ; Switch size 1, requested type "space"
  2064                           ; Number of cases is 5, Range of values is 0 to 117
  2065                           ; switch strategies available:
  2066                           ; Name         Instructions Cycles
  2067                           ; simple_byte           16     9 (average)
  2068                           ;	Chosen strategy is simple_byte
  2069  001F4C  0A00               	xorlw	0	; case 0
  2070  001F4E  B4D8               	btfsc	status,2,c
  2071  001F50  0012               	return	
  2072  001F52  0A64               	xorlw	100	; case 100
  2073  001F54  B4D8               	btfsc	status,2,c
  2074  001F56  D00A               	goto	l541
  2075  001F58  0A0D               	xorlw	13	; case 105
  2076  001F5A  B4D8               	btfsc	status,2,c
  2077  001F5C  D007               	goto	l541
  2078  001F5E  0A05               	xorlw	5	; case 108
  2079  001F60  B4D8               	btfsc	status,2,c
  2080  001F62  D7E6               	goto	l2975
  2081  001F64  0A19               	xorlw	25	; case 117
  2082  001F66  B4D8               	btfsc	status,2,c
  2083  001F68  D7E5               	goto	l2977
  2084  001F6A  D0C5               	goto	l3033
  2085  001F6C                     l541:
  2086                           
  2087                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2088  001F6C  BC29               	btfsc	printf@flag,6,c
  2089  001F6E  D02E               	goto	l544
  2090                           
  2091                           ;doprnt.c: 1253: {
  2092                           ;doprnt.c: 1255: if(flag & 0x10)
  2093  001F70  A829               	btfss	printf@flag,4,c
  2094  001F72  D00E               	goto	l2989
  2095                           
  2096                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2097  001F74  C027  FFD9         	movff	printf@ap,fsr2l
  2098  001F78  C028  FFDA         	movff	printf@ap+1,fsr2h
  2099  001F7C  CFDE F023          	movff	postinc2,printf@val
  2100  001F80  CFDE F024          	movff	postinc2,printf@val+1
  2101  001F84  CFDE F025          	movff	postinc2,printf@val+2
  2102  001F88  CFDE F026          	movff	postinc2,printf@val+3
  2103  001F8C  0E04               	movlw	4
  2104  001F8E  D00E               	goto	L1
  2105  001F90                     l2989:
  2106                           
  2107                           ;doprnt.c: 1257: else
  2108                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2109  001F90  C027  FFD9         	movff	printf@ap,fsr2l
  2110  001F94  C028  FFDA         	movff	printf@ap+1,fsr2h
  2111  001F98  CFDE F023          	movff	postinc2,printf@val
  2112  001F9C  CFDD F024          	movff	postdec2,printf@val+1
  2113  001FA0  0E00               	movlw	0
  2114  001FA2  BE24               	btfsc	printf@val+1,7,c
  2115  001FA4  0EFF               	movlw	-1
  2116  001FA6  6E25               	movwf	printf@val+2,c
  2117  001FA8  6E26               	movwf	printf@val+3,c
  2118  001FAA  0E02               	movlw	2
  2119  001FAC                     L1:
  2120  001FAC  2627               	addwf	printf@ap,f,c
  2121  001FAE  0E00               	movlw	0
  2122  001FB0  2228               	addwfc	printf@ap+1,f,c
  2123                           
  2124                           ;doprnt.c: 1261: if((long)val < 0) {
  2125  001FB2  AE26               	btfss	printf@val+3,7,c
  2126  001FB4  D02D               	goto	l3007
  2127                           
  2128                           ;doprnt.c: 1262: flag |= 0x03;
  2129  001FB6  0E03               	movlw	3
  2130  001FB8  1229               	iorwf	printf@flag,f,c
  2131                           
  2132                           ;doprnt.c: 1263: val = -val;
  2133  001FBA  1E26               	comf	printf@val+3,f,c
  2134  001FBC  1E25               	comf	printf@val+2,f,c
  2135  001FBE  1E24               	comf	printf@val+1,f,c
  2136  001FC0  6C23               	negf	printf@val,c
  2137  001FC2  0E00               	movlw	0
  2138  001FC4  2224               	addwfc	printf@val+1,f,c
  2139  001FC6  2225               	addwfc	printf@val+2,f,c
  2140  001FC8  2226               	addwfc	printf@val+3,f,c
  2141                           
  2142                           ;doprnt.c: 1264: }
  2143                           ;doprnt.c: 1266: }
  2144  001FCA  D022               	goto	l3007
  2145  001FCC                     l544:
  2146                           
  2147                           ;doprnt.c: 1268: else
  2148                           ;doprnt.c: 1273: {
  2149                           ;doprnt.c: 1281: if(flag & 0x10)
  2150  001FCC  A829               	btfss	printf@flag,4,c
  2151  001FCE  D00E               	goto	l3003
  2152                           
  2153                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2154  001FD0  C027  FFD9         	movff	printf@ap,fsr2l
  2155  001FD4  C028  FFDA         	movff	printf@ap+1,fsr2h
  2156  001FD8  CFDE F023          	movff	postinc2,printf@val
  2157  001FDC  CFDE F024          	movff	postinc2,printf@val+1
  2158  001FE0  CFDE F025          	movff	postinc2,printf@val+2
  2159  001FE4  CFDE F026          	movff	postinc2,printf@val+3
  2160  001FE8  0E04               	movlw	4
  2161  001FEA  D00F               	goto	L2
  2162  001FEC                     l3003:
  2163                           
  2164                           ;doprnt.c: 1283: else
  2165                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2166  001FEC  C027  FFD9         	movff	printf@ap,fsr2l
  2167  001FF0  C028  FFDA         	movff	printf@ap+1,fsr2h
  2168  001FF4  CFDE F01F          	movff	postinc2,??_printf
  2169  001FF8  CFDD F020          	movff	postdec2,??_printf+1
  2170  001FFC  C01F  F023         	movff	??_printf,printf@val
  2171  002000  C020  F024         	movff	??_printf+1,printf@val+1
  2172  002004  6A25               	clrf	printf@val+2,c
  2173  002006  6A26               	clrf	printf@val+3,c
  2174  002008  0E02               	movlw	2
  2175  00200A                     L2:
  2176  00200A  2627               	addwf	printf@ap,f,c
  2177  00200C  0E00               	movlw	0
  2178  00200E  2228               	addwfc	printf@ap+1,f,c
  2179  002010                     l3007:
  2180                           
  2181                           ;doprnt.c: 1287: }
  2182                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2183  002010  0E01               	movlw	1
  2184  002012  6E2A               	movwf	printf@c,c
  2185  002014                     l3009:
  2186  002014  0E0A               	movlw	10
  2187  002016  182A               	xorwf	printf@c,w,c
  2188  002018  B4D8               	btfsc	status,2,c
  2189  00201A  D018               	goto	l3021
  2190                           
  2191                           ;doprnt.c: 1306: if(val < dpowers[c])
  2192  00201C  502A               	movf	printf@c,w,c
  2193  00201E  0D04               	mullw	4
  2194  002020  0E01               	movlw	low _dpowers
  2195  002022  24F3               	addwf	prodl,w,c
  2196  002024  6EF6               	movwf	tblptrl,c
  2197  002026  0E10               	movlw	high _dpowers
  2198  002028  20F4               	addwfc	prodh,w,c
  2199  00202A  6EF7               	movwf	tblptrh,c
  2200  00202C                     	if	0	;There are less than 3 active tblptr bytes
  2201  00202C                     	endif
  2202  00202C  0009               	tblrd		*+
  2203  00202E  50F5               	movf	tablat,w,c
  2204  002030  5C23               	subwf	printf@val,w,c
  2205  002032  0009               	tblrd		*+
  2206  002034  50F5               	movf	tablat,w,c
  2207  002036  5824               	subwfb	printf@val+1,w,c
  2208  002038  0009               	tblrd		*+
  2209  00203A  50F5               	movf	tablat,w,c
  2210  00203C  5825               	subwfb	printf@val+2,w,c
  2211  00203E  0009               	tblrd		*+
  2212  002040  50F5               	movf	tablat,w,c
  2213  002042  5826               	subwfb	printf@val+3,w,c
  2214  002044  A0D8               	btfss	status,0,c
  2215  002046  D002               	goto	l3021
  2216                           
  2217                           ;doprnt.c: 1307: break;
  2218  002048  2A2A               	incf	printf@c,f,c
  2219  00204A  D7E4               	goto	l3009
  2220  00204C                     l3021:
  2221                           
  2222                           ;doprnt.c: 1422: {
  2223                           ;doprnt.c: 1438: if(flag & 0x03)
  2224  00204C  C029  F01F         	movff	printf@flag,??_printf
  2225  002050  0E03               	movlw	3
  2226  002052  161F               	andwf	??_printf,f,c
  2227  002054  B4D8               	btfsc	status,2,c
  2228  002056  D003               	goto	l3025
  2229                           
  2230                           ;doprnt.c: 1439: (putch('-') );
  2231  002058  0E2D               	movlw	45
  2232  00205A  ECF6  F016         	call	_putch
  2233  00205E                     l3025:
  2234                           
  2235                           ;doprnt.c: 1469: }
  2236                           ;doprnt.c: 1472: prec = c;
  2237  00205E  502A               	movf	printf@c,w,c
  2238  002060  6E21               	movwf	printf@prec,c
  2239  002062  6A22               	clrf	printf@prec+1,c
  2240  002064  BE21               	btfsc	printf@prec,7,c
  2241  002066  0622               	decf	printf@prec+1,f,c
  2242                           
  2243                           ;doprnt.c: 1474: while(prec--) {
  2244  002068  D03E               	goto	l3031
  2245  00206A                     l3027:
  2246                           
  2247                           ;doprnt.c: 1478: {
  2248                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2249  00206A  C021  F01F         	movff	printf@prec,??_printf
  2250  00206E  C022  F020         	movff	printf@prec+1,??_printf+1
  2251  002072  90D8               	bcf	status,0,c
  2252  002074  361F               	rlcf	??_printf,f,c
  2253  002076  3620               	rlcf	??_printf+1,f,c
  2254  002078  90D8               	bcf	status,0,c
  2255  00207A  361F               	rlcf	??_printf,f,c
  2256  00207C  3620               	rlcf	??_printf+1,f,c
  2257  00207E  0E01               	movlw	low _dpowers
  2258  002080  241F               	addwf	??_printf,w,c
  2259  002082  6EF6               	movwf	tblptrl,c
  2260  002084  0E10               	movlw	high _dpowers
  2261  002086  2020               	addwfc	??_printf+1,w,c
  2262  002088  6EF7               	movwf	tblptrh,c
  2263  00208A                     	if	0	;There are less than 3 active tblptr bytes
  2264  00208A                     	endif
  2265  00208A  0009               	tblrd		*+
  2266  00208C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2267  002090  0009               	tblrd		*+
  2268  002092  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2269  002096  0009               	tblrd		*+
  2270  002098  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2271  00209C  000A               	tblrd		*-
  2272  00209E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2273  0020A2  C023  F001         	movff	printf@val,___lldiv@dividend
  2274  0020A6  C024  F002         	movff	printf@val+1,___lldiv@dividend+1
  2275  0020AA  C025  F003         	movff	printf@val+2,___lldiv@dividend+2
  2276  0020AE  C026  F004         	movff	printf@val+3,___lldiv@dividend+3
  2277  0020B2  EC67  F014         	call	___lldiv	;wreg free
  2278  0020B6  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2279  0020BA  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2280  0020BE  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2281  0020C2  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2282  0020C6  0E0A               	movlw	10
  2283  0020C8  6E12               	movwf	___llmod@divisor,c
  2284  0020CA  0E00               	movlw	0
  2285  0020CC  6E13               	movwf	___llmod@divisor+1,c
  2286  0020CE  0E00               	movlw	0
  2287  0020D0  6E14               	movwf	___llmod@divisor+2,c
  2288  0020D2  0E00               	movlw	0
  2289  0020D4  6E15               	movwf	___llmod@divisor+3,c
  2290  0020D6  EC91  F015         	call	___llmod	;wreg free
  2291  0020DA  500E               	movf	?___llmod,w,c
  2292  0020DC  0F30               	addlw	48
  2293  0020DE  6E2A               	movwf	printf@c,c
  2294                           
  2295                           ;doprnt.c: 1523: }
  2296                           ;doprnt.c: 1524: (putch(c) );
  2297  0020E0  502A               	movf	printf@c,w,c
  2298  0020E2  ECF6  F016         	call	_putch
  2299  0020E6                     l3031:
  2300  0020E6  0621               	decf	printf@prec,f,c
  2301  0020E8  A0D8               	btfss	status,0,c
  2302  0020EA  0622               	decf	printf@prec+1,f,c
  2303  0020EC  2821               	incf	printf@prec,w,c
  2304  0020EE  E1BD               	bnz	l3027
  2305  0020F0  2822               	incf	printf@prec+1,w,c
  2306  0020F2  A4D8               	btfss	status,2,c
  2307  0020F4  D7BA               	goto	l3027
  2308  0020F6                     l3033:
  2309  0020F6  C019  FFF6         	movff	printf@f,tblptrl
  2310  0020FA  C01A  FFF7         	movff	printf@f+1,tblptrh
  2311  0020FE  4A19               	infsnz	printf@f,f,c
  2312  002100  2A1A               	incf	printf@f+1,f,c
  2313  002102                     	if	0	;tblptru may be non-zero
  2314  002102                     	endif
  2315  002102                     	if	0	;tblptru may be non-zero
  2316  002102                     	endif
  2317  002102  0008               	tblrd		*
  2318  002104  CFF5 F02A          	movff	tablat,printf@c
  2319  002108  502A               	movf	printf@c,w,c
  2320  00210A  B4D8               	btfsc	status,2,c
  2321  00210C  0012               	return	
  2322  00210E  D705               	goto	l2969
  2323  002110                     __end_of_printf:
  2324                           	opt stack 0
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _putch *****************
  2344 ;; Defined at:
  2345 ;;		line 24 in file "lcd.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  data            1    wreg     unsigned char 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  data            1    2[COMRAM] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;Total ram usage:        1 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    1
  2366 ;; This function calls:
  2367 ;;		_lcdNibble
  2368 ;; This function is called by:
  2369 ;;		_printf
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text2
  2374  002DEC                     __ptext2:
  2375                           	opt stack 0
  2376  002DEC                     _putch:
  2377                           	opt stack 28
  2378                           
  2379                           ;incstack = 0
  2380                           ;putch@data stored from wreg
  2381  002DEC  6E03               	movwf	putch@data,c
  2382                           
  2383                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2384  002DEE  848C               	bsf	3980,2,c	;volatile
  2385                           
  2386                           ;lcd.c: 33: lcdNibble(data);
  2387  002DF0  5003               	movf	putch@data,w,c
  2388  002DF2  ECA8  F014         	call	_lcdNibble
  2389                           
  2390                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2391  002DF6  0EC8               	movlw	200
  2392  002DF8                     u3107:
  2393  002DF8  D000               	nop2	
  2394  002DFA  2EE8               	decfsz	wreg,f,c
  2395  002DFC  D7FD               	bra	u3107
  2396  002DFE  0012               	return		;funcret
  2397  002E00                     __end_of_putch:
  2398                           	opt stack 0
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           postinc0	equ	0xFEE
  2406                           wreg	equ	0xFE8
  2407                           postdec1	equ	0xFE5
  2408                           fsr1h	equ	0xFE2
  2409                           fsr1l	equ	0xFE1
  2410                           indf2	equ	0xFDF
  2411                           postinc2	equ	0xFDE
  2412                           postdec2	equ	0xFDD
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function ___llmod *****************
  2418 ;; Defined at:
  2419 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  dividend        4   13[COMRAM] unsigned long 
  2422 ;;  divisor         4   17[COMRAM] unsigned long 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  counter         1   21[COMRAM] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  4   13[COMRAM] unsigned long 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2, status,0
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2434 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;Total ram usage:        9 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;;		_printf
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text3
  2449  002B22                     __ptext3:
  2450                           	opt stack 0
  2451  002B22                     ___llmod:
  2452                           	opt stack 29
  2453                           
  2454                           ;incstack = 0
  2455  002B22  5012               	movf	___llmod@divisor,w,c
  2456  002B24  1013               	iorwf	___llmod@divisor+1,w,c
  2457  002B26  1014               	iorwf	___llmod@divisor+2,w,c
  2458  002B28  1015               	iorwf	___llmod@divisor+3,w,c
  2459  002B2A  B4D8               	btfsc	status,2,c
  2460  002B2C  D024               	goto	l919
  2461  002B2E  0E01               	movlw	1
  2462  002B30  6E16               	movwf	___llmod@counter,c
  2463  002B32  D006               	goto	l2673
  2464  002B34                     l2671:
  2465  002B34  90D8               	bcf	status,0,c
  2466  002B36  3612               	rlcf	___llmod@divisor,f,c
  2467  002B38  3613               	rlcf	___llmod@divisor+1,f,c
  2468  002B3A  3614               	rlcf	___llmod@divisor+2,f,c
  2469  002B3C  3615               	rlcf	___llmod@divisor+3,f,c
  2470  002B3E  2A16               	incf	___llmod@counter,f,c
  2471  002B40                     l2673:
  2472  002B40  AE15               	btfss	___llmod@divisor+3,7,c
  2473  002B42  D7F8               	goto	l2671
  2474  002B44                     l2675:
  2475  002B44  5012               	movf	___llmod@divisor,w,c
  2476  002B46  5C0E               	subwf	___llmod@dividend,w,c
  2477  002B48  5013               	movf	___llmod@divisor+1,w,c
  2478  002B4A  580F               	subwfb	___llmod@dividend+1,w,c
  2479  002B4C  5014               	movf	___llmod@divisor+2,w,c
  2480  002B4E  5810               	subwfb	___llmod@dividend+2,w,c
  2481  002B50  5015               	movf	___llmod@divisor+3,w,c
  2482  002B52  5811               	subwfb	___llmod@dividend+3,w,c
  2483  002B54  A0D8               	btfss	status,0,c
  2484  002B56  D008               	goto	l2679
  2485  002B58  5012               	movf	___llmod@divisor,w,c
  2486  002B5A  5E0E               	subwf	___llmod@dividend,f,c
  2487  002B5C  5013               	movf	___llmod@divisor+1,w,c
  2488  002B5E  5A0F               	subwfb	___llmod@dividend+1,f,c
  2489  002B60  5014               	movf	___llmod@divisor+2,w,c
  2490  002B62  5A10               	subwfb	___llmod@dividend+2,f,c
  2491  002B64  5015               	movf	___llmod@divisor+3,w,c
  2492  002B66  5A11               	subwfb	___llmod@dividend+3,f,c
  2493  002B68                     l2679:
  2494  002B68  90D8               	bcf	status,0,c
  2495  002B6A  3215               	rrcf	___llmod@divisor+3,f,c
  2496  002B6C  3214               	rrcf	___llmod@divisor+2,f,c
  2497  002B6E  3213               	rrcf	___llmod@divisor+1,f,c
  2498  002B70  3212               	rrcf	___llmod@divisor,f,c
  2499  002B72  2E16               	decfsz	___llmod@counter,f,c
  2500  002B74  D7E7               	goto	l2675
  2501  002B76                     l919:
  2502  002B76  C00E  F00E         	movff	___llmod@dividend,?___llmod
  2503  002B7A  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  2504  002B7E  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  2505  002B82  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  2506  002B86  0012               	return		;funcret
  2507  002B88                     __end_of___llmod:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           postinc0	equ	0xFEE
  2516                           wreg	equ	0xFE8
  2517                           postdec1	equ	0xFE5
  2518                           fsr1h	equ	0xFE2
  2519                           fsr1l	equ	0xFE1
  2520                           indf2	equ	0xFDF
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function _lcd_set_cursor *****************
  2528 ;; Defined at:
  2529 ;;		line 80 in file "lcd.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  x               1    wreg     unsigned char 
  2532 ;;  y               1    6[COMRAM] unsigned char 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  x               1    9[COMRAM] unsigned char 
  2535 ;;  i               1    8[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        4 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    3
  2552 ;; This function calls:
  2553 ;;		_lcdInst
  2554 ;;		_lcd_shift_cursor
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text4
  2561  002C30                     __ptext4:
  2562                           	opt stack 0
  2563  002C30                     _lcd_set_cursor:
  2564                           	opt stack 27
  2565                           
  2566                           ;incstack = 0
  2567                           ;lcd_set_cursor@x stored from wreg
  2568  002C30  6E0A               	movwf	lcd_set_cursor@x,c
  2569                           
  2570                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2571  002C32  0E80               	movlw	128
  2572  002C34  EC00  F017         	call	_lcdInst
  2573  002C38  0E41               	movlw	65
  2574  002C3A  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  2575  002C3C  0EEE               	movlw	238
  2576  002C3E                     u3117:
  2577  002C3E  2EE8               	decfsz	wreg,f,c
  2578  002C40  D7FE               	bra	u3117
  2579  002C42  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  2580  002C44  D7FC               	bra	u3117
  2581  002C46  D000               	nop2	
  2582                           
  2583                           ;lcd.c: 91: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  2584  002C48  0E00               	movlw	0
  2585  002C4A  6E09               	movwf	lcd_set_cursor@i,c
  2586  002C4C  D004               	goto	l3165
  2587  002C4E                     l3161:
  2588  002C4E  0EC0               	movlw	192
  2589  002C50  EC00  F017         	call	_lcdInst
  2590  002C54  2A09               	incf	lcd_set_cursor@i,f,c
  2591  002C56                     l3165:
  2592  002C56  5007               	movf	lcd_set_cursor@y,w,c
  2593  002C58  5C09               	subwf	lcd_set_cursor@i,w,c
  2594  002C5A  A0D8               	btfss	status,0,c
  2595  002C5C  D7F8               	goto	l3161
  2596                           
  2597                           ;lcd.c: 92: if(x > 0){
  2598  002C5E  500A               	movf	lcd_set_cursor@x,w,c
  2599  002C60  B4D8               	btfsc	status,2,c
  2600  002C62  0012               	return	
  2601                           
  2602                           ;lcd.c: 93: lcd_shift_cursor(x, 1);
  2603  002C64  0E01               	movlw	1
  2604  002C66  6E04               	movwf	lcd_shift_cursor@direction,c
  2605  002C68  500A               	movf	lcd_set_cursor@x,w,c
  2606  002C6A  ECDC  F016         	call	_lcd_shift_cursor
  2607  002C6E  0012               	return	
  2608  002C70                     __end_of_lcd_set_cursor:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           postdec1	equ	0xFE5
  2619                           fsr1h	equ	0xFE2
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           postdec2	equ	0xFDD
  2624                           fsr2h	equ	0xFDA
  2625                           fsr2l	equ	0xFD9
  2626                           status	equ	0xFD8
  2627                           
  2628 ;; *************** function _lcd_shift_cursor *****************
  2629 ;; Defined at:
  2630 ;;		line 97 in file "lcd.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  numChars        1    wreg     unsigned char 
  2633 ;;  direction       1    3[COMRAM] unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  numChars        1    4[COMRAM] unsigned char 
  2636 ;;  n               1    5[COMRAM] unsigned char 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;Total ram usage:        3 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    2
  2653 ;; This function calls:
  2654 ;;		_lcdInst
  2655 ;; This function is called by:
  2656 ;;		_lcd_set_cursor
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text5
  2661  002DB8                     __ptext5:
  2662                           	opt stack 0
  2663  002DB8                     _lcd_shift_cursor:
  2664                           	opt stack 27
  2665                           
  2666                           ;incstack = 0
  2667                           ;lcd_shift_cursor@numChars stored from wreg
  2668  002DB8  6E05               	movwf	lcd_shift_cursor@numChars,c
  2669                           
  2670                           ;lcd.c: 109: for(unsigned char n = numChars; n > 0; n--){
  2671  002DBA  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  2672  002DBE                     l2469:
  2673  002DBE  5006               	movf	lcd_shift_cursor@n,w,c
  2674  002DC0  B4D8               	btfsc	status,2,c
  2675  002DC2  0012               	return	
  2676                           
  2677                           ;lcd.c: 110: lcdInst((unsigned char)(0x10 | (direction << 2)));
  2678  002DC4  4404               	rlncf	lcd_shift_cursor@direction,w,c
  2679  002DC6  46E8               	rlncf	wreg,f,c
  2680  002DC8  0BFC               	andlw	252
  2681  002DCA  0910               	iorlw	16
  2682  002DCC  EC00  F017         	call	_lcdInst
  2683  002DD0  0606               	decf	lcd_shift_cursor@n,f,c
  2684  002DD2  D7F5               	goto	l2469
  2685  002DD4                     __end_of_lcd_shift_cursor:
  2686                           	opt stack 0
  2687                           tblptru	equ	0xFF8
  2688                           tblptrh	equ	0xFF7
  2689                           tblptrl	equ	0xFF6
  2690                           tablat	equ	0xFF5
  2691                           prodh	equ	0xFF4
  2692                           prodl	equ	0xFF3
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           fsr1h	equ	0xFE2
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _initSD *****************
  2706 ;; Defined at:
  2707 ;;		line 458 in file "SD_PIC.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  tempSize        4   80[COMRAM] unsigned long 
  2712 ;;  tempSize        4   60[COMRAM] unsigned long 
  2713 ;;  arr_response   16   64[COMRAM] unsigned char [16]
  2714 ;;  argument        4   54[COMRAM] unsigned long 
  2715 ;;  i               1   85[COMRAM] unsigned char 
  2716 ;;  response        1   84[COMRAM] unsigned char 
  2717 ;;  last_OSCTUNE    1   59[COMRAM] unsigned char 
  2718 ;;  last_OSCCON     1   58[COMRAM] unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:       39 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    4
  2735 ;; This function calls:
  2736 ;;		_SD_ACMD
  2737 ;;		_SD_Command
  2738 ;;		___ftdiv
  2739 ;;		___ftmul
  2740 ;;		___fttol
  2741 ;;		___lltoft
  2742 ;;		___lwtoft
  2743 ;;		_spiInit
  2744 ;;		_spiReceive
  2745 ;;		_spiSend
  2746 ;; This function is called by:
  2747 ;;		_main
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text6
  2752  0010F2                     __ptext6:
  2753                           	opt stack 0
  2754  0010F2                     _initSD:
  2755                           	opt stack 26
  2756                           
  2757                           ;SD_PIC.c: 467: unsigned char last_OSCCON = OSCCON;
  2758                           
  2759                           ;incstack = 0
  2760  0010F2  CFD3 F03B          	movff	4051,initSD@last_OSCCON	;volatile
  2761                           
  2762                           ;SD_PIC.c: 468: unsigned char last_OSCTUNE = OSCTUNE;
  2763  0010F6  CF9B F03C          	movff	3995,initSD@last_OSCTUNE	;volatile
  2764                           
  2765                           ;SD_PIC.c: 469: unsigned char response;
  2766                           ;SD_PIC.c: 470: unsigned char i;
  2767                           ;SD_PIC.c: 471: unsigned char arr_response[16] = {0};
  2768  0010FA  EE20  F06E         	lfsr	2,initSD@F3023
  2769  0010FE  EE10  F041         	lfsr	1,initSD@arr_response
  2770  001102  0E0F               	movlw	15
  2771  001104                     u1941:
  2772  001104  CFDB FFE3          	movff	plusw2,plusw1
  2773  001108  06E8               	decf	wreg,f,c
  2774  00110A  E2FC               	bc	u1941
  2775                           
  2776                           ;SD_PIC.c: 478: OSCTUNEbits.TUN = 0b000000;
  2777  00110C  909B               	bcf	3995,0,c	;volatile
  2778  00110E  929B               	bcf	3995,1,c	;volatile
  2779  001110  949B               	bcf	3995,2,c	;volatile
  2780  001112  969B               	bcf	3995,3,c	;volatile
  2781  001114  989B               	bcf	3995,4,c	;volatile
  2782                           
  2783                           ;SD_PIC.c: 479: OSCCONbits.IRCF = 0b110;
  2784  001116  50D3               	movf	4051,w,c	;volatile
  2785  001118  0B8F               	andlw	-113
  2786  00111A  0960               	iorlw	96
  2787  00111C  6ED3               	movwf	4051,c	;volatile
  2788                           
  2789                           ;SD_PIC.c: 480: OSCCONbits.SCS = 0b11;
  2790  00111E  0E03               	movlw	3
  2791  001120  12D3               	iorwf	4051,f,c	;volatile
  2792                           
  2793                           ;SD_PIC.c: 481: OSCTUNEbits.PLLEN = 1;
  2794  001122  8C9B               	bsf	3995,6,c	;volatile
  2795                           
  2796                           ;SD_PIC.c: 484: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  2797  001124  D004               	goto	l2739
  2798  001126                     l2737:
  2799  001126  0E42               	movlw	66
  2800  001128                     u3127:
  2801  001128  2EE8               	decfsz	wreg,f,c
  2802  00112A  D7FE               	bra	u3127
  2803  00112C  D000               	nop2	
  2804  00112E                     l2739:
  2805  00112E  A4D3               	btfss	4051,2,c	;volatile
  2806  001130  D7FA               	goto	l2737
  2807                           
  2808                           ;SD_PIC.c: 487: spiInit(64);
  2809  001132  0E40               	movlw	64
  2810  001134  EC55  F016         	call	_spiInit
  2811                           
  2812                           ;SD_PIC.c: 491: _delay((unsigned long)((20)*(40000000/4000.0)));
  2813  001138  0E02               	movlw	2
  2814  00113A  6E31               	movwf	(??_initSD+1)& (0+255),c
  2815  00113C  0E04               	movlw	4
  2816  00113E  6E30               	movwf	??_initSD& (0+255),c
  2817  001140  0EBA               	movlw	186
  2818  001142                     u3137:
  2819  001142  2EE8               	decfsz	wreg,f,c
  2820  001144  D7FE               	bra	u3137
  2821  001146  2E30               	decfsz	??_initSD& (0+255),f,c
  2822  001148  D7FC               	bra	u3137
  2823  00114A  2E31               	decfsz	(??_initSD+1)& (0+255),f,c
  2824  00114C  D7FA               	bra	u3137
  2825  00114E  D000               	nop2	
  2826                           
  2827                           ;SD_PIC.c: 494: LATEbits.LATE2 = 1;
  2828  001150  848D               	bsf	3981,2,c	;volatile
  2829                           
  2830                           ;SD_PIC.c: 495: TRISEbits.TRISE2 = 0;
  2831  001152  9496               	bcf	3990,2,c	;volatile
  2832                           
  2833                           ;SD_PIC.c: 498: for(i = 0; i < 10; i++){
  2834  001154  0E00               	movlw	0
  2835  001156  6E56               	movwf	initSD@i,c
  2836  001158                     l2751:
  2837  001158  0E09               	movlw	9
  2838  00115A  6456               	cpfsgt	initSD@i,c
  2839  00115C  D001               	goto	l2755
  2840  00115E  D005               	goto	l437
  2841  001160                     l2755:
  2842                           
  2843                           ;SD_PIC.c: 499: spiSend(0xFF);
  2844  001160  0EFF               	movlw	255
  2845  001162  EC0A  F017         	call	_spiSend
  2846  001166  2A56               	incf	initSD@i,f,c
  2847  001168  D7F7               	goto	l2751
  2848  00116A                     l437:
  2849                           
  2850                           ;SD_PIC.c: 500: }
  2851                           ;SD_PIC.c: 502: LATEbits.LATE2 = 0;
  2852  00116A  948D               	bcf	3981,2,c	;volatile
  2853  00116C                     l2761:
  2854  00116C  0E00               	movlw	0
  2855  00116E  6E04               	movwf	SD_Command@arg,c
  2856  001170  0E00               	movlw	0
  2857  001172  6E05               	movwf	SD_Command@arg+1,c
  2858  001174  0E00               	movlw	0
  2859  001176  6E06               	movwf	SD_Command@arg+2,c
  2860  001178  0E00               	movlw	0
  2861  00117A  6E07               	movwf	SD_Command@arg+3,c
  2862  00117C  0E4A               	movlw	low _CMD0
  2863  00117E  6EF6               	movwf	tblptrl,c
  2864  001180                     	if	1	;There is more than 1 active tblptr byte
  2865  001180  0E10               	movlw	high _CMD0
  2866  001182  6EF7               	movwf	tblptrh,c
  2867  001184                     	endif
  2868  001184                     	if	0	;There are less than 3 active tblptr bytes
  2869  001184                     	endif
  2870  001184  0008               	tblrd		*
  2871  001186  50F5               	movf	tablat,w,c
  2872  001188  EC95  F013         	call	_SD_Command
  2873  00118C  6E30               	movwf	??_initSD& (0+255),c
  2874  00118E  0E33               	movlw	low _R1_IDLE_STATE
  2875  001190  6EF6               	movwf	tblptrl,c
  2876  001192                     	if	1	;There is more than 1 active tblptr byte
  2877  001192  0E10               	movlw	high _R1_IDLE_STATE
  2878  001194  6EF7               	movwf	tblptrh,c
  2879  001196                     	endif
  2880  001196                     	if	0	;There are less than 3 active tblptr bytes
  2881  001196                     	endif
  2882  001196  0008               	tblrd		*
  2883  001198  50F5               	movf	tablat,w,c
  2884  00119A  1830               	xorwf	??_initSD,w,c
  2885  00119C  A4D8               	btfss	status,2,c
  2886  00119E  D7E6               	goto	l2761
  2887  0011A0                     l2763:
  2888                           
  2889                           ;SD_PIC.c: 516: response = SD_Command(CMD8, 0x01AA);
  2890  0011A0  0EAA               	movlw	170
  2891  0011A2  6E04               	movwf	SD_Command@arg,c
  2892  0011A4  0E01               	movlw	1
  2893  0011A6  6E05               	movwf	SD_Command@arg+1,c
  2894  0011A8  0E00               	movlw	0
  2895  0011AA  6E06               	movwf	SD_Command@arg+2,c
  2896  0011AC  0E00               	movlw	0
  2897  0011AE  6E07               	movwf	SD_Command@arg+3,c
  2898  0011B0  0E47               	movlw	low _CMD8
  2899  0011B2  6EF6               	movwf	tblptrl,c
  2900  0011B4                     	if	1	;There is more than 1 active tblptr byte
  2901  0011B4  0E10               	movlw	high _CMD8
  2902  0011B6  6EF7               	movwf	tblptrh,c
  2903  0011B8                     	endif
  2904  0011B8                     	if	0	;There are less than 3 active tblptr bytes
  2905  0011B8                     	endif
  2906  0011B8  0008               	tblrd		*
  2907  0011BA  50F5               	movf	tablat,w,c
  2908  0011BC  EC95  F013         	call	_SD_Command
  2909  0011C0  6E55               	movwf	initSD@response,c
  2910                           
  2911                           ;SD_PIC.c: 519: LATEbits.LATE2 = 0;
  2912  0011C2  948D               	bcf	3981,2,c	;volatile
  2913                           
  2914                           ;SD_PIC.c: 520: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  2915  0011C4  0E00               	movlw	0
  2916  0011C6  6E56               	movwf	initSD@i,c
  2917  0011C8                     l2769:
  2918  0011C8  0E03               	movlw	3
  2919  0011CA  6456               	cpfsgt	initSD@i,c
  2920  0011CC  D001               	goto	l2773
  2921  0011CE  D00D               	goto	l443
  2922  0011D0                     l2773:
  2923  0011D0  5056               	movf	initSD@i,w,c
  2924  0011D2  0D01               	mullw	1
  2925  0011D4  0E41               	movlw	low initSD@arr_response
  2926  0011D6  24F3               	addwf	prodl,w,c
  2927  0011D8  6ED9               	movwf	fsr2l,c
  2928  0011DA  0E00               	movlw	high initSD@arr_response
  2929  0011DC  20F4               	addwfc	prodh,w,c
  2930  0011DE  6EDA               	movwf	fsr2h,c
  2931  0011E0  EC0F  F017         	call	_spiReceive	;wreg free
  2932  0011E4  6EDF               	movwf	indf2,c
  2933  0011E6  2A56               	incf	initSD@i,f,c
  2934  0011E8  D7EF               	goto	l2769
  2935  0011EA                     l443:
  2936                           
  2937                           ;SD_PIC.c: 521: LATEbits.LATE2 = 1;
  2938  0011EA  848D               	bsf	3981,2,c	;volatile
  2939                           
  2940                           ;SD_PIC.c: 523: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2941  0011EC  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  2942  0011EE  6EF6               	movwf	tblptrl,c
  2943  0011F0                     	if	1	;There is more than 1 active tblptr byte
  2944  0011F0  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2945  0011F2  6EF7               	movwf	tblptrh,c
  2946  0011F4                     	endif
  2947  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  2948  0011F4                     	endif
  2949  0011F4  0008               	tblrd		*
  2950  0011F6  CFF5 F030          	movff	tablat,??_initSD
  2951  0011FA  5055               	movf	initSD@response,w,c
  2952  0011FC  1430               	andwf	??_initSD,w,c
  2953  0011FE  6E31               	movwf	(??_initSD+1)& (0+255),c
  2954  001200  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  2955  001202  6EF6               	movwf	tblptrl,c
  2956  001204                     	if	1	;There is more than 1 active tblptr byte
  2957  001204  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2958  001206  6EF7               	movwf	tblptrh,c
  2959  001208                     	endif
  2960  001208                     	if	0	;There are less than 3 active tblptr bytes
  2961  001208                     	endif
  2962  001208  0008               	tblrd		*
  2963  00120A  50F5               	movf	tablat,w,c
  2964  00120C  1831               	xorwf	??_initSD+1,w,c
  2965  00120E  A4D8               	btfss	status,2,c
  2966  001210  D02C               	goto	l2805
  2967                           
  2968                           ;SD_PIC.c: 526: SDCard.SDversion = 1;
  2969  001212  0E01               	movlw	1
  2970  001214  0100               	movlb	0	; () banked
  2971  001216  6F80               	movwf	_SDCard& (0+255),b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;SD_PIC.c: 529: SD_Command(CMD58, 0);
  2975  001218  0E00               	movlw	0
  2976  00121A  6E04               	movwf	SD_Command@arg,c
  2977  00121C  0E00               	movlw	0
  2978  00121E  6E05               	movwf	SD_Command@arg+1,c
  2979  001220  0E00               	movlw	0
  2980  001222  6E06               	movwf	SD_Command@arg+2,c
  2981  001224  0E00               	movlw	0
  2982  001226  6E07               	movwf	SD_Command@arg+3,c
  2983  001228  0E38               	movlw	low _CMD58
  2984  00122A  6EF6               	movwf	tblptrl,c
  2985  00122C                     	if	1	;There is more than 1 active tblptr byte
  2986  00122C  0E10               	movlw	high _CMD58
  2987  00122E  6EF7               	movwf	tblptrh,c
  2988  001230                     	endif
  2989  001230                     	if	0	;There are less than 3 active tblptr bytes
  2990  001230                     	endif
  2991  001230  0008               	tblrd		*
  2992  001232  50F5               	movf	tablat,w,c
  2993  001234  EC95  F013         	call	_SD_Command
  2994                           
  2995                           ;SD_PIC.c: 530: LATEbits.LATE2 = 0;
  2996  001238  948D               	bcf	3981,2,c	;volatile
  2997                           
  2998                           ;SD_PIC.c: 531: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  2999  00123A  0E00               	movlw	0
  3000  00123C  6E56               	movwf	initSD@i,c
  3001  00123E                     l2789:
  3002  00123E  0E03               	movlw	3
  3003  001240  6456               	cpfsgt	initSD@i,c
  3004  001242  D001               	goto	l2793
  3005  001244  D00D               	goto	l446
  3006  001246                     l2793:
  3007  001246  5056               	movf	initSD@i,w,c
  3008  001248  0D01               	mullw	1
  3009  00124A  0E41               	movlw	low initSD@arr_response
  3010  00124C  24F3               	addwf	prodl,w,c
  3011  00124E  6ED9               	movwf	fsr2l,c
  3012  001250  0E00               	movlw	high initSD@arr_response
  3013  001252  20F4               	addwfc	prodh,w,c
  3014  001254  6EDA               	movwf	fsr2h,c
  3015  001256  EC0F  F017         	call	_spiReceive	;wreg free
  3016  00125A  6EDF               	movwf	indf2,c
  3017  00125C  2A56               	incf	initSD@i,f,c
  3018  00125E  D7EF               	goto	l2789
  3019  001260                     l446:
  3020                           
  3021                           ;SD_PIC.c: 532: LATEbits.LATE2 = 1;
  3022  001260  848D               	bsf	3981,2,c	;volatile
  3023                           
  3024                           ;SD_PIC.c: 534: if(arr_response[2] != 0x01){
  3025  001262  0443               	decf	initSD@arr_response+2,w,c
  3026  001264  A4D8               	btfss	status,2,c
  3027  001266  0012               	return	
  3028  001268  D012               	goto	l2815
  3029  00126A                     l2805:
  3030                           
  3031                           ;SD_PIC.c: 540: else if(response == R1_IDLE_STATE){
  3032  00126A  0E33               	movlw	low _R1_IDLE_STATE
  3033  00126C  6EF6               	movwf	tblptrl,c
  3034  00126E                     	if	1	;There is more than 1 active tblptr byte
  3035  00126E  0E10               	movlw	high _R1_IDLE_STATE
  3036  001270  6EF7               	movwf	tblptrh,c
  3037  001272                     	endif
  3038  001272                     	if	0	;There are less than 3 active tblptr bytes
  3039  001272                     	endif
  3040  001272  0008               	tblrd		*
  3041  001274  50F5               	movf	tablat,w,c
  3042  001276  6255               	cpfseq	initSD@response,c
  3043  001278  D793               	goto	l2763
  3044                           
  3045                           ;SD_PIC.c: 541: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  3046  00127A  0443               	decf	initSD@arr_response+2,w,c
  3047  00127C  A4D8               	btfss	status,2,c
  3048  00127E  0012               	return	
  3049  001280  0EAA               	movlw	170
  3050  001282  1844               	xorwf	initSD@arr_response+3,w,c
  3051  001284  A4D8               	btfss	status,2,c
  3052  001286  0012               	return	
  3053                           
  3054                           ;SD_PIC.c: 544: SDCard.SDversion = 2;
  3055  001288  0E02               	movlw	2
  3056  00128A  0100               	movlb	0	; () banked
  3057  00128C  6F80               	movwf	_SDCard& (0+255),b
  3058  00128E                     l2815:
  3059                           
  3060                           ;SD_PIC.c: 550: }
  3061                           ;SD_PIC.c: 551: }
  3062                           ;SD_PIC.c: 552: }
  3063                           ;SD_PIC.c: 561: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  3064  00128E  0100               	movlb	0	; () banked
  3065  001290  0580               	decf	_SDCard& (0+255),w,b
  3066  001292  B4D8               	btfsc	status,2,c
  3067  001294  D008               	goto	l2819
  3068                           
  3069                           ; BSR set to: 0
  3070  001296  0E00               	movlw	0
  3071  001298  6E37               	movwf	initSD@argument,c
  3072  00129A  0E00               	movlw	0
  3073  00129C  6E38               	movwf	initSD@argument+1,c
  3074  00129E  0E00               	movlw	0
  3075  0012A0  6E39               	movwf	initSD@argument+2,c
  3076  0012A2  0E40               	movlw	64
  3077  0012A4  D007               	goto	L3
  3078  0012A6                     l2819:
  3079                           
  3080                           ; BSR set to: 0
  3081  0012A6  0E00               	movlw	0
  3082  0012A8  6E37               	movwf	initSD@argument,c
  3083  0012AA  0E00               	movlw	0
  3084  0012AC  6E38               	movwf	initSD@argument+1,c
  3085  0012AE  0E00               	movlw	0
  3086  0012B0  6E39               	movwf	initSD@argument+2,c
  3087  0012B2  0E00               	movlw	0
  3088  0012B4                     L3:
  3089  0012B4  6E3A               	movwf	initSD@argument+3,c
  3090  0012B6                     l2821:
  3091                           
  3092                           ;SD_PIC.c: 564: response = SD_ACMD(ACMD41, argument);
  3093  0012B6  C037  F00D         	movff	initSD@argument,SD_ACMD@arg
  3094  0012BA  C038  F00E         	movff	initSD@argument+1,SD_ACMD@arg+1
  3095  0012BE  C039  F00F         	movff	initSD@argument+2,SD_ACMD@arg+2
  3096  0012C2  C03A  F010         	movff	initSD@argument+3,SD_ACMD@arg+3
  3097  0012C6  0E35               	movlw	low _ACMD41
  3098  0012C8  6EF6               	movwf	tblptrl,c
  3099  0012CA                     	if	1	;There is more than 1 active tblptr byte
  3100  0012CA  0E10               	movlw	high _ACMD41
  3101  0012CC  6EF7               	movwf	tblptrh,c
  3102  0012CE                     	endif
  3103  0012CE                     	if	0	;There are less than 3 active tblptr bytes
  3104  0012CE                     	endif
  3105  0012CE  0008               	tblrd		*
  3106  0012D0  50F5               	movf	tablat,w,c
  3107  0012D2  EC38  F016         	call	_SD_ACMD
  3108  0012D6  6E55               	movwf	initSD@response,c
  3109                           
  3110                           ;SD_PIC.c: 565: }while((response != R1_READY_STATE) && ((response & R1_ILLEGAL_COMMAND) 
      +                          != R1_ILLEGAL_COMMAND));
  3111  0012D8  0E34               	movlw	low _R1_READY_STATE
  3112  0012DA  6EF6               	movwf	tblptrl,c
  3113  0012DC                     	if	1	;There is more than 1 active tblptr byte
  3114  0012DC  0E10               	movlw	high _R1_READY_STATE
  3115  0012DE  6EF7               	movwf	tblptrh,c
  3116  0012E0                     	endif
  3117  0012E0                     	if	0	;There are less than 3 active tblptr bytes
  3118  0012E0                     	endif
  3119  0012E0  0008               	tblrd		*
  3120  0012E2  50F5               	movf	tablat,w,c
  3121  0012E4  1855               	xorwf	initSD@response,w,c
  3122  0012E6  B4D8               	btfsc	status,2,c
  3123  0012E8  D013               	goto	l2827
  3124  0012EA  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  3125  0012EC  6EF6               	movwf	tblptrl,c
  3126  0012EE                     	if	1	;There is more than 1 active tblptr byte
  3127  0012EE  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3128  0012F0  6EF7               	movwf	tblptrh,c
  3129  0012F2                     	endif
  3130  0012F2                     	if	0	;There are less than 3 active tblptr bytes
  3131  0012F2                     	endif
  3132  0012F2  0008               	tblrd		*
  3133  0012F4  CFF5 F030          	movff	tablat,??_initSD
  3134  0012F8  5055               	movf	initSD@response,w,c
  3135  0012FA  1430               	andwf	??_initSD,w,c
  3136  0012FC  6E31               	movwf	(??_initSD+1)& (0+255),c
  3137  0012FE  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  3138  001300  6EF6               	movwf	tblptrl,c
  3139  001302                     	if	1	;There is more than 1 active tblptr byte
  3140  001302  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3141  001304  6EF7               	movwf	tblptrh,c
  3142  001306                     	endif
  3143  001306                     	if	0	;There are less than 3 active tblptr bytes
  3144  001306                     	endif
  3145  001306  0008               	tblrd		*
  3146  001308  50F5               	movf	tablat,w,c
  3147  00130A  1831               	xorwf	??_initSD+1,w,c
  3148  00130C  A4D8               	btfss	status,2,c
  3149  00130E  D7D3               	goto	l2821
  3150  001310                     l2827:
  3151                           
  3152                           ;SD_PIC.c: 570: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  3153  001310  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  3154  001312  6EF6               	movwf	tblptrl,c
  3155  001314                     	if	1	;There is more than 1 active tblptr byte
  3156  001314  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3157  001316  6EF7               	movwf	tblptrh,c
  3158  001318                     	endif
  3159  001318                     	if	0	;There are less than 3 active tblptr bytes
  3160  001318                     	endif
  3161  001318  0008               	tblrd		*
  3162  00131A  CFF5 F030          	movff	tablat,??_initSD
  3163  00131E  5055               	movf	initSD@response,w,c
  3164  001320  1430               	andwf	??_initSD,w,c
  3165  001322  6E31               	movwf	(??_initSD+1)& (0+255),c
  3166  001324  0E32               	movlw	low _R1_ILLEGAL_COMMAND
  3167  001326  6EF6               	movwf	tblptrl,c
  3168  001328                     	if	1	;There is more than 1 active tblptr byte
  3169  001328  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3170  00132A  6EF7               	movwf	tblptrh,c
  3171  00132C                     	endif
  3172  00132C                     	if	0	;There are less than 3 active tblptr bytes
  3173  00132C                     	endif
  3174  00132C  0008               	tblrd		*
  3175  00132E  50F5               	movf	tablat,w,c
  3176  001330  1831               	xorwf	??_initSD+1,w,c
  3177  001332  A4D8               	btfss	status,2,c
  3178  001334  D01C               	goto	l2839
  3179                           
  3180                           ;SD_PIC.c: 571: if(SDCard.SDversion == 1){
  3181  001336  0100               	movlb	0	; () banked
  3182  001338  0580               	decf	_SDCard& (0+255),w,b
  3183  00133A  A4D8               	btfss	status,2,c
  3184  00133C  D014               	goto	l2835
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;SD_PIC.c: 573: SDCard.Type = 2;
  3188  00133E  0E02               	movlw	2
  3189  001340  0100               	movlb	0	; () banked
  3190  001342  6F81               	movwf	(_SDCard+1)& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;SD_PIC.c: 574: SD_Command(CMD1, 0);
  3194  001344  0E00               	movlw	0
  3195  001346  6E04               	movwf	SD_Command@arg,c
  3196  001348  0E00               	movlw	0
  3197  00134A  6E05               	movwf	SD_Command@arg+1,c
  3198  00134C  0E00               	movlw	0
  3199  00134E  6E06               	movwf	SD_Command@arg+2,c
  3200  001350  0E00               	movlw	0
  3201  001352  6E07               	movwf	SD_Command@arg+3,c
  3202  001354  0E48               	movlw	low _CMD1
  3203  001356  6EF6               	movwf	tblptrl,c
  3204  001358                     	if	1	;There is more than 1 active tblptr byte
  3205  001358  0E10               	movlw	high _CMD1
  3206  00135A  6EF7               	movwf	tblptrh,c
  3207  00135C                     	endif
  3208  00135C                     	if	0	;There are less than 3 active tblptr bytes
  3209  00135C                     	endif
  3210  00135C  0008               	tblrd		*
  3211  00135E  50F5               	movf	tablat,w,c
  3212  001360  EC95  F013         	call	_SD_Command
  3213                           
  3214                           ;SD_PIC.c: 575: }
  3215  001364  D004               	goto	l2839
  3216  001366                     l2835:
  3217                           
  3218                           ;SD_PIC.c: 576: else{
  3219                           ;SD_PIC.c: 578: SDCard.init = 0;
  3220  001366  0E00               	movlw	0
  3221  001368  0100               	movlb	0	; () banked
  3222  00136A  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;SD_PIC.c: 579: return;
  3226  00136C  0012               	return	
  3227  00136E                     l2839:
  3228                           
  3229                           ;SD_PIC.c: 580: }
  3230                           ;SD_PIC.c: 581: }
  3231                           ;SD_PIC.c: 583: if(SDCard.Type != 2){
  3232  00136E  0E02               	movlw	2
  3233  001370  0100               	movlb	0	; () banked
  3234  001372  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  3235  001374  B4D8               	btfsc	status,2,c
  3236  001376  D027               	goto	l2859
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;SD_PIC.c: 586: SD_Command(CMD58, 0);
  3240  001378  0E00               	movlw	0
  3241  00137A  6E04               	movwf	SD_Command@arg,c
  3242  00137C  0E00               	movlw	0
  3243  00137E  6E05               	movwf	SD_Command@arg+1,c
  3244  001380  0E00               	movlw	0
  3245  001382  6E06               	movwf	SD_Command@arg+2,c
  3246  001384  0E00               	movlw	0
  3247  001386  6E07               	movwf	SD_Command@arg+3,c
  3248  001388  0E38               	movlw	low _CMD58
  3249  00138A  6EF6               	movwf	tblptrl,c
  3250  00138C                     	if	1	;There is more than 1 active tblptr byte
  3251  00138C  0E10               	movlw	high _CMD58
  3252  00138E  6EF7               	movwf	tblptrh,c
  3253  001390                     	endif
  3254  001390                     	if	0	;There are less than 3 active tblptr bytes
  3255  001390                     	endif
  3256  001390  0008               	tblrd		*
  3257  001392  50F5               	movf	tablat,w,c
  3258  001394  EC95  F013         	call	_SD_Command
  3259                           
  3260                           ;SD_PIC.c: 589: LATEbits.LATE2 = 0;
  3261  001398  948D               	bcf	3981,2,c	;volatile
  3262                           
  3263                           ;SD_PIC.c: 590: SDCard.Type = (unsigned char)((spiReceive() & 0xC0) == 0xC0);
  3264  00139A  EC0F  F017         	call	_spiReceive	;wreg free
  3265  00139E  0BC0               	andlw	192
  3266  0013A0  0AC0               	xorlw	192
  3267  0013A2  A4D8               	btfss	status,2,c
  3268  0013A4  D002               	goto	u2140
  3269  0013A6  0E01               	movlw	1
  3270  0013A8  D001               	goto	u2150
  3271  0013AA                     u2140:
  3272  0013AA  0E00               	movlw	0
  3273  0013AC                     u2150:
  3274  0013AC  0100               	movlb	0	; () banked
  3275  0013AE  6F81               	movwf	(_SDCard+1)& (0+255),b
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;SD_PIC.c: 594: for(i = 0; i < 3; i++){ spiReceive(); }
  3279  0013B0  0E00               	movlw	0
  3280  0013B2  6E56               	movwf	initSD@i,c
  3281  0013B4                     l2849:
  3282                           
  3283                           ; BSR set to: 0
  3284  0013B4  0E02               	movlw	2
  3285  0013B6  6456               	cpfsgt	initSD@i,c
  3286  0013B8  D001               	goto	l2853
  3287  0013BA  D004               	goto	l468
  3288  0013BC                     l2853:
  3289  0013BC  EC0F  F017         	call	_spiReceive	;wreg free
  3290  0013C0  2A56               	incf	initSD@i,f,c
  3291  0013C2  D7F8               	goto	l2849
  3292  0013C4                     l468:
  3293                           
  3294                           ;SD_PIC.c: 595: LATEbits.LATE2 = 1;
  3295  0013C4  848D               	bsf	3981,2,c	;volatile
  3296  0013C6                     l2859:
  3297  0013C6  0E00               	movlw	0
  3298  0013C8  6E04               	movwf	SD_Command@arg,c
  3299  0013CA  0E02               	movlw	2
  3300  0013CC  6E05               	movwf	SD_Command@arg+1,c
  3301  0013CE  0E00               	movlw	0
  3302  0013D0  6E06               	movwf	SD_Command@arg+2,c
  3303  0013D2  0E00               	movlw	0
  3304  0013D4  6E07               	movwf	SD_Command@arg+3,c
  3305  0013D6  0E41               	movlw	low _CMD16
  3306  0013D8  6EF6               	movwf	tblptrl,c
  3307  0013DA                     	if	1	;There is more than 1 active tblptr byte
  3308  0013DA  0E10               	movlw	high _CMD16
  3309  0013DC  6EF7               	movwf	tblptrh,c
  3310  0013DE                     	endif
  3311  0013DE                     	if	0	;There are less than 3 active tblptr bytes
  3312  0013DE                     	endif
  3313  0013DE  0008               	tblrd		*
  3314  0013E0  50F5               	movf	tablat,w,c
  3315  0013E2  EC95  F013         	call	_SD_Command
  3316  0013E6  6E30               	movwf	??_initSD& (0+255),c
  3317  0013E8  0E34               	movlw	low _R1_READY_STATE
  3318  0013EA  6EF6               	movwf	tblptrl,c
  3319  0013EC                     	if	1	;There is more than 1 active tblptr byte
  3320  0013EC  0E10               	movlw	high _R1_READY_STATE
  3321  0013EE  6EF7               	movwf	tblptrh,c
  3322  0013F0                     	endif
  3323  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  3324  0013F0                     	endif
  3325  0013F0  0008               	tblrd		*
  3326  0013F2  50F5               	movf	tablat,w,c
  3327  0013F4  1830               	xorwf	??_initSD,w,c
  3328  0013F6  A4D8               	btfss	status,2,c
  3329  0013F8  D7E6               	goto	l2859
  3330                           
  3331                           ;SD_PIC.c: 600: SDCard.blockSize = 512;
  3332  0013FA  0E02               	movlw	2
  3333  0013FC  0100               	movlb	0	; () banked
  3334  0013FE  6F93               	movwf	(_SDCard+19)& (0+255),b
  3335  001400  0E00               	movlw	0
  3336  001402  6F92               	movwf	(_SDCard+18)& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;SD_PIC.c: 603: SD_Command(CMD9, 0);
  3340  001404  0E00               	movlw	0
  3341  001406  6E04               	movwf	SD_Command@arg,c
  3342  001408  0E00               	movlw	0
  3343  00140A  6E05               	movwf	SD_Command@arg+1,c
  3344  00140C  0E00               	movlw	0
  3345  00140E  6E06               	movwf	SD_Command@arg+2,c
  3346  001410  0E00               	movlw	0
  3347  001412  6E07               	movwf	SD_Command@arg+3,c
  3348  001414  0E45               	movlw	low _CMD9
  3349  001416  6EF6               	movwf	tblptrl,c
  3350  001418                     	if	1	;There is more than 1 active tblptr byte
  3351  001418  0E10               	movlw	high _CMD9
  3352  00141A  6EF7               	movwf	tblptrh,c
  3353  00141C                     	endif
  3354  00141C                     	if	0	;There are less than 3 active tblptr bytes
  3355  00141C                     	endif
  3356  00141C  0008               	tblrd		*
  3357  00141E  50F5               	movf	tablat,w,c
  3358  001420  EC95  F013         	call	_SD_Command
  3359                           
  3360                           ;SD_PIC.c: 604: LATEbits.LATE2 = 0;
  3361  001424  948D               	bcf	3981,2,c	;volatile
  3362  001426                     l2867:
  3363  001426  EC0F  F017         	call	_spiReceive	;wreg free
  3364  00142A  6E30               	movwf	??_initSD& (0+255),c
  3365  00142C  0E31               	movlw	low _START_BLOCK
  3366  00142E  6EF6               	movwf	tblptrl,c
  3367  001430                     	if	1	;There is more than 1 active tblptr byte
  3368  001430  0E10               	movlw	high _START_BLOCK
  3369  001432  6EF7               	movwf	tblptrh,c
  3370  001434                     	endif
  3371  001434                     	if	0	;There are less than 3 active tblptr bytes
  3372  001434                     	endif
  3373  001434  0008               	tblrd		*
  3374  001436  50F5               	movf	tablat,w,c
  3375  001438  1830               	xorwf	??_initSD,w,c
  3376  00143A  A4D8               	btfss	status,2,c
  3377  00143C  D7F4               	goto	l2867
  3378                           
  3379                           ;SD_PIC.c: 606: for(i = 0; i < 16; i++){
  3380  00143E  0E00               	movlw	0
  3381  001440  6E56               	movwf	initSD@i,c
  3382  001442                     l2871:
  3383  001442  0E0F               	movlw	15
  3384  001444  6456               	cpfsgt	initSD@i,c
  3385  001446  D001               	goto	l2875
  3386  001448  D00D               	goto	l2881
  3387  00144A                     l2875:
  3388                           
  3389                           ;SD_PIC.c: 607: arr_response[i] = spiReceive();
  3390  00144A  5056               	movf	initSD@i,w,c
  3391  00144C  0D01               	mullw	1
  3392  00144E  0E41               	movlw	low initSD@arr_response
  3393  001450  24F3               	addwf	prodl,w,c
  3394  001452  6ED9               	movwf	fsr2l,c
  3395  001454  0E00               	movlw	high initSD@arr_response
  3396  001456  20F4               	addwfc	prodh,w,c
  3397  001458  6EDA               	movwf	fsr2h,c
  3398  00145A  EC0F  F017         	call	_spiReceive	;wreg free
  3399  00145E  6EDF               	movwf	indf2,c
  3400  001460  2A56               	incf	initSD@i,f,c
  3401  001462  D7EF               	goto	l2871
  3402  001464                     l2881:
  3403                           
  3404                           ;SD_PIC.c: 608: }
  3405                           ;SD_PIC.c: 609: spiReceive();
  3406  001464  EC0F  F017         	call	_spiReceive	;wreg free
  3407                           
  3408                           ;SD_PIC.c: 610: spiReceive();
  3409  001468  EC0F  F017         	call	_spiReceive	;wreg free
  3410                           
  3411                           ;SD_PIC.c: 611: LATEbits.LATE2 = 1;
  3412  00146C  848D               	bsf	3981,2,c	;volatile
  3413                           
  3414                           ;SD_PIC.c: 613: if(SDCard.SDversion == 2){
  3415  00146E  0E02               	movlw	2
  3416  001470  0100               	movlb	0	; () banked
  3417  001472  1980               	xorwf	_SDCard& (0+255),w,b
  3418  001474  A4D8               	btfss	status,2,c
  3419  001476  D06C               	goto	l2893
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;SD_PIC.c: 619: unsigned long tempSize = arr_response[9] + 1UL;
  3423  001478  0E01               	movlw	1
  3424  00147A  244A               	addwf	initSD@arr_response+9,w,c
  3425  00147C  6E3D               	movwf	initSD@tempSize,c
  3426  00147E  6A3E               	clrf	initSD@tempSize+1,c
  3427  001480  0E00               	movlw	0
  3428  001482  223E               	addwfc	initSD@tempSize+1,f,c
  3429  001484  6A3F               	clrf	initSD@tempSize+2,c
  3430  001486  0E00               	movlw	0
  3431  001488  223F               	addwfc	initSD@tempSize+2,f,c
  3432  00148A  6A40               	clrf	initSD@tempSize+3,c
  3433  00148C  0E00               	movlw	0
  3434  00148E  2240               	addwfc	initSD@tempSize+3,f,c
  3435                           
  3436                           ;SD_PIC.c: 620: tempSize |= (unsigned long)(arr_response[8] << 8);
  3437  001490  5049               	movf	initSD@arr_response+8,w,c
  3438  001492  6E31               	movwf	(??_initSD+1)& (0+255),c
  3439  001494  6A30               	clrf	??_initSD& (0+255),c
  3440  001496  C030  F032         	movff	??_initSD,??_initSD+2
  3441  00149A  C031  F033         	movff	??_initSD+1,??_initSD+3
  3442  00149E  0E00               	movlw	0
  3443  0014A0  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3444  0014A2  0EFF               	movlw	255
  3445  0014A4  6E34               	movwf	(??_initSD+4)& (0+255),c
  3446  0014A6  6E35               	movwf	(??_initSD+5)& (0+255),c
  3447  0014A8  5032               	movf	??_initSD+2,w,c
  3448  0014AA  123D               	iorwf	initSD@tempSize,f,c
  3449  0014AC  5033               	movf	??_initSD+3,w,c
  3450  0014AE  123E               	iorwf	initSD@tempSize+1,f,c
  3451  0014B0  5034               	movf	??_initSD+4,w,c
  3452  0014B2  123F               	iorwf	initSD@tempSize+2,f,c
  3453  0014B4  5035               	movf	??_initSD+5,w,c
  3454  0014B6  1240               	iorwf	initSD@tempSize+3,f,c
  3455                           
  3456                           ;SD_PIC.c: 621: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  3457  0014B8  C048  F030         	movff	initSD@arr_response+7,??_initSD
  3458  0014BC  0E3F               	movlw	63
  3459  0014BE  1630               	andwf	??_initSD,f,c
  3460  0014C0  C030  F031         	movff	??_initSD,??_initSD+1
  3461  0014C4  6A32               	clrf	(??_initSD+2)& (0+255),c
  3462  0014C6  6A33               	clrf	(??_initSD+3)& (0+255),c
  3463  0014C8  6A34               	clrf	(??_initSD+4)& (0+255),c
  3464  0014CA  C032  F034         	movff	??_initSD+2,??_initSD+4
  3465  0014CE  C031  F033         	movff	??_initSD+1,??_initSD+3
  3466  0014D2  6A32               	clrf	??_initSD+2,c
  3467  0014D4  6A31               	clrf	??_initSD+1,c
  3468  0014D6  5031               	movf	??_initSD+1,w,c
  3469  0014D8  123D               	iorwf	initSD@tempSize,f,c
  3470  0014DA  5032               	movf	??_initSD+2,w,c
  3471  0014DC  123E               	iorwf	initSD@tempSize+1,f,c
  3472  0014DE  5033               	movf	??_initSD+3,w,c
  3473  0014E0  123F               	iorwf	initSD@tempSize+2,f,c
  3474  0014E2  5034               	movf	??_initSD+4,w,c
  3475  0014E4  1240               	iorwf	initSD@tempSize+3,f,c
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;SD_PIC.c: 622: SDCard.size = tempSize * 0.524288;
  3479  0014E6  C03D  F009         	movff	initSD@tempSize,___lltoft@c
  3480  0014EA  C03E  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  3481  0014EE  C03F  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  3482  0014F2  C040  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  3483  0014F6  ECC4  F015         	call	___lltoft	;wreg free
  3484  0014FA  C009  F012         	movff	?___lltoft,___ftmul@f1
  3485  0014FE  C00A  F013         	movff	?___lltoft+1,___ftmul@f1+1
  3486  001502  C00B  F014         	movff	?___lltoft+2,___ftmul@f1+2
  3487  001506  0E38               	movlw	56
  3488  001508  6E15               	movwf	___ftmul@f2,c
  3489  00150A  0E06               	movlw	6
  3490  00150C  6E16               	movwf	___ftmul@f2+1,c
  3491  00150E  0E3F               	movlw	63
  3492  001510  6E17               	movwf	___ftmul@f2+2,c
  3493  001512  EC84  F011         	call	___ftmul	;wreg free
  3494  001516  C012  F098         	movff	?___ftmul,_SDCard+24
  3495  00151A  C013  F099         	movff	?___ftmul+1,_SDCard+25
  3496  00151E  C014  F09A         	movff	?___ftmul+2,_SDCard+26
  3497                           
  3498                           ;SD_PIC.c: 623: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  3499  001522  0E00               	movlw	0
  3500  001524  6E15               	movwf	___ftmul@f2,c
  3501  001526  0E00               	movlw	0
  3502  001528  6E16               	movwf	___ftmul@f2+1,c
  3503  00152A  0E45               	movlw	69
  3504  00152C  6E17               	movwf	___ftmul@f2+2,c
  3505  00152E  C098  F012         	movff	_SDCard+24,___ftmul@f1
  3506  001532  C099  F013         	movff	_SDCard+25,___ftmul@f1+1
  3507  001536  C09A  F014         	movff	_SDCard+26,___ftmul@f1+2
  3508  00153A  EC84  F011         	call	___ftmul	;wreg free
  3509  00153E  C012  F021         	movff	?___ftmul,___fttol@f1
  3510  001542  C013  F022         	movff	?___ftmul+1,___fttol@f1+1
  3511  001546  C014  F023         	movff	?___ftmul+2,___fttol@f1+2
  3512  00154A  EC0A  F011         	call	___fttol	;wreg free
  3513  00154E  D0BE               	goto	L4
  3514  001550                     l2893:
  3515                           
  3516                           ;SD_PIC.c: 625: else{
  3517                           ;SD_PIC.c: 633: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  3518  001550  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3519  001554  0E03               	movlw	3
  3520  001556  1630               	andwf	??_initSD,f,c
  3521  001558  C030  F031         	movff	??_initSD,??_initSD+1
  3522  00155C  6A32               	clrf	(??_initSD+2)& (0+255),c
  3523  00155E  6A33               	clrf	(??_initSD+3)& (0+255),c
  3524  001560  6A34               	clrf	(??_initSD+4)& (0+255),c
  3525  001562  0E04               	movlw	4
  3526  001564                     u2235:
  3527  001564  90D8               	bcf	status,0,c
  3528  001566  3631               	rlcf	??_initSD+1,f,c
  3529  001568  3632               	rlcf	??_initSD+2,f,c
  3530  00156A  3633               	rlcf	??_initSD+3,f,c
  3531  00156C  3634               	rlcf	??_initSD+4,f,c
  3532  00156E  2EE8               	decfsz	wreg,f,c
  3533  001570  D7F9               	goto	u2235
  3534  001572  C031  F051         	movff	??_initSD+1,initSD@tempSize_689
  3535  001576  C032  F052         	movff	??_initSD+2,initSD@tempSize_689+1
  3536  00157A  C033  F053         	movff	??_initSD+3,initSD@tempSize_689+2
  3537  00157E  C034  F054         	movff	??_initSD+4,initSD@tempSize_689+3
  3538                           
  3539                           ;SD_PIC.c: 634: tempSize |= (unsigned long)(arr_response[7] << 2);
  3540  001582  5048               	movf	initSD@arr_response+7,w,c
  3541  001584  6E30               	movwf	??_initSD& (0+255),c
  3542  001586  6A31               	clrf	(??_initSD+1)& (0+255),c
  3543  001588  90D8               	bcf	status,0,c
  3544  00158A  3630               	rlcf	??_initSD,f,c
  3545  00158C  3631               	rlcf	??_initSD+1,f,c
  3546  00158E  90D8               	bcf	status,0,c
  3547  001590  3630               	rlcf	??_initSD,f,c
  3548  001592  3631               	rlcf	??_initSD+1,f,c
  3549  001594  C030  F032         	movff	??_initSD,??_initSD+2
  3550  001598  C031  F033         	movff	??_initSD+1,??_initSD+3
  3551  00159C  0E00               	movlw	0
  3552  00159E  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3553  0015A0  0EFF               	movlw	255
  3554  0015A2  6E34               	movwf	(??_initSD+4)& (0+255),c
  3555  0015A4  6E35               	movwf	(??_initSD+5)& (0+255),c
  3556  0015A6  5032               	movf	??_initSD+2,w,c
  3557  0015A8  1251               	iorwf	initSD@tempSize_689,f,c
  3558  0015AA  5033               	movf	??_initSD+3,w,c
  3559  0015AC  1252               	iorwf	initSD@tempSize_689+1,f,c
  3560  0015AE  5034               	movf	??_initSD+4,w,c
  3561  0015B0  1253               	iorwf	initSD@tempSize_689+2,f,c
  3562  0015B2  5035               	movf	??_initSD+5,w,c
  3563  0015B4  1254               	iorwf	initSD@tempSize_689+3,f,c
  3564                           
  3565                           ;SD_PIC.c: 635: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  3566  0015B6  C049  F030         	movff	initSD@arr_response+8,??_initSD
  3567  0015BA  90D8               	bcf	status,0,c
  3568  0015BC  3230               	rrcf	??_initSD,f,c
  3569  0015BE  90D8               	bcf	status,0,c
  3570  0015C0  3230               	rrcf	??_initSD,f,c
  3571  0015C2  0E30               	movlw	48
  3572  0015C4  1630               	andwf	??_initSD,f,c
  3573  0015C6  0E01               	movlw	1
  3574  0015C8  2430               	addwf	??_initSD,w,c
  3575  0015CA  6E31               	movwf	(??_initSD+1)& (0+255),c
  3576  0015CC  6A32               	clrf	(??_initSD+2)& (0+255),c
  3577  0015CE  0E00               	movlw	0
  3578  0015D0  2232               	addwfc	(??_initSD+2)& (0+255),f,c
  3579  0015D2  6A33               	clrf	(??_initSD+3)& (0+255),c
  3580  0015D4  0E00               	movlw	0
  3581  0015D6  2233               	addwfc	(??_initSD+3)& (0+255),f,c
  3582  0015D8  6A34               	clrf	(??_initSD+4)& (0+255),c
  3583  0015DA  0E00               	movlw	0
  3584  0015DC  2234               	addwfc	(??_initSD+4)& (0+255),f,c
  3585  0015DE  5031               	movf	??_initSD+1,w,c
  3586  0015E0  1251               	iorwf	initSD@tempSize_689,f,c
  3587  0015E2  5032               	movf	??_initSD+2,w,c
  3588  0015E4  1252               	iorwf	initSD@tempSize_689+1,f,c
  3589  0015E6  5033               	movf	??_initSD+3,w,c
  3590  0015E8  1253               	iorwf	initSD@tempSize_689+2,f,c
  3591  0015EA  5034               	movf	??_initSD+4,w,c
  3592  0015EC  1254               	iorwf	initSD@tempSize_689+3,f,c
  3593                           
  3594                           ;SD_PIC.c: 636: tempSize = tempSize << (((unsigned long) ((arr_response[9] & 0x03) << 1)
      +                           | (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  3595  0015EE  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3596  0015F2  0E03               	movlw	3
  3597  0015F4  1630               	andwf	??_initSD,f,c
  3598  0015F6  6A31               	clrf	(??_initSD+1)& (0+255),c
  3599  0015F8  AE4B               	btfss	initSD@arr_response+10,7,c
  3600  0015FA  D001               	bra	u2245
  3601  0015FC  2A31               	incf	(??_initSD+1)& (0+255),f,c
  3602  0015FE                     u2245:
  3603  0015FE  3031               	rrcf	??_initSD+1,w,c
  3604  001600  3430               	rlcf	??_initSD,w,c
  3605  001602  6E32               	movwf	(??_initSD+2)& (0+255),c
  3606  001604  0E02               	movlw	2
  3607  001606  2632               	addwf	??_initSD+2,f,c
  3608  001608  C051  F033         	movff	initSD@tempSize_689,??_initSD+3
  3609  00160C  C052  F034         	movff	initSD@tempSize_689+1,??_initSD+4
  3610  001610  C053  F035         	movff	initSD@tempSize_689+2,??_initSD+5
  3611  001614  C054  F036         	movff	initSD@tempSize_689+3,??_initSD+6
  3612  001618  2A32               	incf	??_initSD+2,f,c
  3613  00161A  D005               	goto	u2250
  3614  00161C                     u2255:
  3615  00161C  90D8               	bcf	status,0,c
  3616  00161E  3633               	rlcf	??_initSD+3,f,c
  3617  001620  3634               	rlcf	??_initSD+4,f,c
  3618  001622  3635               	rlcf	??_initSD+5,f,c
  3619  001624  3636               	rlcf	??_initSD+6,f,c
  3620  001626                     u2250:
  3621  001626  2E32               	decfsz	??_initSD+2,f,c
  3622  001628  D7F9               	goto	u2255
  3623  00162A  C033  F051         	movff	??_initSD+3,initSD@tempSize_689
  3624  00162E  C034  F052         	movff	??_initSD+4,initSD@tempSize_689+1
  3625  001632  C035  F053         	movff	??_initSD+5,initSD@tempSize_689+2
  3626  001636  C036  F054         	movff	??_initSD+6,initSD@tempSize_689+3
  3627                           
  3628                           ;SD_PIC.c: 639: tempSize = tempSize << ((unsigned long) (arr_response[5] & 0x0F));
  3629  00163A  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3630  00163E  0E0F               	movlw	15
  3631  001640  1630               	andwf	??_initSD,f,c
  3632  001642  C051  F031         	movff	initSD@tempSize_689,??_initSD+1
  3633  001646  C052  F032         	movff	initSD@tempSize_689+1,??_initSD+2
  3634  00164A  C053  F033         	movff	initSD@tempSize_689+2,??_initSD+3
  3635  00164E  C054  F034         	movff	initSD@tempSize_689+3,??_initSD+4
  3636  001652  2A30               	incf	??_initSD,f,c
  3637  001654  D005               	goto	u2260
  3638  001656                     u2265:
  3639  001656  90D8               	bcf	status,0,c
  3640  001658  3631               	rlcf	??_initSD+1,f,c
  3641  00165A  3632               	rlcf	??_initSD+2,f,c
  3642  00165C  3633               	rlcf	??_initSD+3,f,c
  3643  00165E  3634               	rlcf	??_initSD+4,f,c
  3644  001660                     u2260:
  3645  001660  2E30               	decfsz	??_initSD,f,c
  3646  001662  D7F9               	goto	u2265
  3647  001664  C031  F051         	movff	??_initSD+1,initSD@tempSize_689
  3648  001668  C032  F052         	movff	??_initSD+2,initSD@tempSize_689+1
  3649  00166C  C033  F053         	movff	??_initSD+3,initSD@tempSize_689+2
  3650  001670  C034  F054         	movff	??_initSD+4,initSD@tempSize_689+3
  3651                           
  3652                           ;SD_PIC.c: 641: SDCard.size = (unsigned long)tempSize;
  3653  001674  C051  F009         	movff	initSD@tempSize_689,___lltoft@c
  3654  001678  C052  F00A         	movff	initSD@tempSize_689+1,___lltoft@c+1
  3655  00167C  C053  F00B         	movff	initSD@tempSize_689+2,___lltoft@c+2
  3656  001680  C054  F00C         	movff	initSD@tempSize_689+3,___lltoft@c+3
  3657  001684  ECC4  F015         	call	___lltoft	;wreg free
  3658  001688  C009  F098         	movff	?___lltoft,_SDCard+24
  3659  00168C  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  3660  001690  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  3661                           
  3662                           ;SD_PIC.c: 642: SDCard.numBlocks = (unsigned long)(SDCard.size/SDCard.blockSize);
  3663  001694  C092  F009         	movff	_SDCard+18,___lwtoft@c
  3664  001698  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  3665  00169C  ECB8  F016         	call	___lwtoft	;wreg free
  3666  0016A0  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  3667  0016A4  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  3668  0016A8  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  3669  0016AC  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  3670  0016B0  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  3671  0016B4  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  3672  0016B8  ECFE  F011         	call	___ftdiv	;wreg free
  3673  0016BC  C00C  F021         	movff	?___ftdiv,___fttol@f1
  3674  0016C0  C00D  F022         	movff	?___ftdiv+1,___fttol@f1+1
  3675  0016C4  C00E  F023         	movff	?___ftdiv+2,___fttol@f1+2
  3676  0016C8  EC0A  F011         	call	___fttol	;wreg free
  3677  0016CC                     L4:
  3678  0016CC  C021  F094         	movff	?___fttol,_SDCard+20
  3679  0016D0  C022  F095         	movff	?___fttol+1,_SDCard+21
  3680  0016D4  C023  F096         	movff	?___fttol+2,_SDCard+22
  3681  0016D8  C024  F097         	movff	?___fttol+3,_SDCard+23
  3682                           
  3683                           ;SD_PIC.c: 643: }
  3684                           ;SD_PIC.c: 646: SD_Command(CMD10, 0);
  3685  0016DC  0E00               	movlw	0
  3686  0016DE  6E04               	movwf	SD_Command@arg,c
  3687  0016E0  0E00               	movlw	0
  3688  0016E2  6E05               	movwf	SD_Command@arg+1,c
  3689  0016E4  0E00               	movlw	0
  3690  0016E6  6E06               	movwf	SD_Command@arg+2,c
  3691  0016E8  0E00               	movlw	0
  3692  0016EA  6E07               	movwf	SD_Command@arg+3,c
  3693  0016EC  0E44               	movlw	low _CMD10
  3694  0016EE  6EF6               	movwf	tblptrl,c
  3695  0016F0                     	if	1	;There is more than 1 active tblptr byte
  3696  0016F0  0E10               	movlw	high _CMD10
  3697  0016F2  6EF7               	movwf	tblptrh,c
  3698  0016F4                     	endif
  3699  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  3700  0016F4                     	endif
  3701  0016F4  0008               	tblrd		*
  3702  0016F6  50F5               	movf	tablat,w,c
  3703  0016F8  EC95  F013         	call	_SD_Command
  3704                           
  3705                           ;SD_PIC.c: 648: LATEbits.LATE2 = 0;
  3706  0016FC  948D               	bcf	3981,2,c	;volatile
  3707  0016FE                     l2903:
  3708                           
  3709                           ;SD_PIC.c: 652: response = spiReceive();
  3710  0016FE  EC0F  F017         	call	_spiReceive	;wreg free
  3711  001702  6E55               	movwf	initSD@response,c
  3712                           
  3713                           ;SD_PIC.c: 653: }while(response != START_BLOCK);
  3714  001704  0E31               	movlw	low _START_BLOCK
  3715  001706  6EF6               	movwf	tblptrl,c
  3716  001708                     	if	1	;There is more than 1 active tblptr byte
  3717  001708  0E10               	movlw	high _START_BLOCK
  3718  00170A  6EF7               	movwf	tblptrh,c
  3719  00170C                     	endif
  3720  00170C                     	if	0	;There are less than 3 active tblptr bytes
  3721  00170C                     	endif
  3722  00170C  0008               	tblrd		*
  3723  00170E  50F5               	movf	tablat,w,c
  3724  001710  6255               	cpfseq	initSD@response,c
  3725  001712  D7F5               	goto	l2903
  3726                           
  3727                           ;SD_PIC.c: 655: for(i = 0; i < 16; i++){
  3728  001714  0E00               	movlw	0
  3729  001716  6E56               	movwf	initSD@i,c
  3730  001718                     l2909:
  3731  001718  0E0F               	movlw	15
  3732  00171A  6456               	cpfsgt	initSD@i,c
  3733  00171C  D001               	goto	l2913
  3734  00171E  D00D               	goto	l2919
  3735  001720                     l2913:
  3736                           
  3737                           ;SD_PIC.c: 656: arr_response[i] = spiReceive();
  3738  001720  5056               	movf	initSD@i,w,c
  3739  001722  0D01               	mullw	1
  3740  001724  0E41               	movlw	low initSD@arr_response
  3741  001726  24F3               	addwf	prodl,w,c
  3742  001728  6ED9               	movwf	fsr2l,c
  3743  00172A  0E00               	movlw	high initSD@arr_response
  3744  00172C  20F4               	addwfc	prodh,w,c
  3745  00172E  6EDA               	movwf	fsr2h,c
  3746  001730  EC0F  F017         	call	_spiReceive	;wreg free
  3747  001734  6EDF               	movwf	indf2,c
  3748  001736  2A56               	incf	initSD@i,f,c
  3749  001738  D7EF               	goto	l2909
  3750  00173A                     l2919:
  3751                           
  3752                           ;SD_PIC.c: 657: }
  3753                           ;SD_PIC.c: 658: spiReceive();
  3754  00173A  EC0F  F017         	call	_spiReceive	;wreg free
  3755                           
  3756                           ;SD_PIC.c: 659: spiReceive();
  3757  00173E  EC0F  F017         	call	_spiReceive	;wreg free
  3758                           
  3759                           ;SD_PIC.c: 660: LATEbits.LATE2 = 1;
  3760  001742  848D               	bsf	3981,2,c	;volatile
  3761                           
  3762                           ;SD_PIC.c: 662: SDCard.MID = arr_response[0];
  3763  001744  C041  F082         	movff	initSD@arr_response,_SDCard+2
  3764                           
  3765                           ;SD_PIC.c: 663: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  3766  001748  5042               	movf	initSD@arr_response+1,w,c
  3767  00174A  6E30               	movwf	??_initSD& (0+255),c
  3768  00174C  5043               	movf	initSD@arr_response+2,w,c
  3769  00174E  0100               	movlb	0	; () banked
  3770  001750  6F83               	movwf	(_SDCard+3)& (0+255),b
  3771  001752  C030  F084         	movff	??_initSD,_SDCard+4
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;SD_PIC.c: 664: SDCard.PHMH = arr_response[3];
  3775  001756  C044  F089         	movff	initSD@arr_response+3,_SDCard+9
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;SD_PIC.c: 668: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  3779  00175A  C045  F030         	movff	initSD@arr_response+4,??_initSD
  3780  00175E  6A31               	clrf	(??_initSD+1)& (0+255),c
  3781  001760  6A32               	clrf	(??_initSD+2)& (0+255),c
  3782  001762  6A33               	clrf	(??_initSD+3)& (0+255),c
  3783  001764  C030  F033         	movff	??_initSD,??_initSD+3
  3784  001768  6A32               	clrf	??_initSD+2,c
  3785  00176A  6A31               	clrf	??_initSD+1,c
  3786  00176C  6A30               	clrf	??_initSD,c
  3787  00176E  C030  F085         	movff	??_initSD,_SDCard+5
  3788  001772  C031  F086         	movff	??_initSD+1,_SDCard+6
  3789  001776  C032  F087         	movff	??_initSD+2,_SDCard+7
  3790  00177A  C033  F088         	movff	??_initSD+3,_SDCard+8
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;SD_PIC.c: 669: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  3794  00177E  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3795  001782  6A31               	clrf	(??_initSD+1)& (0+255),c
  3796  001784  6A32               	clrf	(??_initSD+2)& (0+255),c
  3797  001786  6A33               	clrf	(??_initSD+3)& (0+255),c
  3798  001788  C031  F033         	movff	??_initSD+1,??_initSD+3
  3799  00178C  C030  F032         	movff	??_initSD,??_initSD+2
  3800  001790  6A31               	clrf	??_initSD+1,c
  3801  001792  6A30               	clrf	??_initSD,c
  3802  001794  5030               	movf	??_initSD,w,c
  3803  001796  0100               	movlb	0	; () banked
  3804  001798  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3805  00179A  5031               	movf	??_initSD+1,w,c
  3806  00179C  0100               	movlb	0	; () banked
  3807  00179E  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3808  0017A0  5032               	movf	??_initSD+2,w,c
  3809  0017A2  0100               	movlb	0	; () banked
  3810  0017A4  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3811  0017A6  5033               	movf	??_initSD+3,w,c
  3812  0017A8  0100               	movlb	0	; () banked
  3813  0017AA  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;SD_PIC.c: 670: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  3817  0017AC  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3818  0017B0  6A31               	clrf	(??_initSD+1)& (0+255),c
  3819  0017B2  6A32               	clrf	(??_initSD+2)& (0+255),c
  3820  0017B4  6A33               	clrf	(??_initSD+3)& (0+255),c
  3821  0017B6  C032  F033         	movff	??_initSD+2,??_initSD+3
  3822  0017BA  C031  F032         	movff	??_initSD+1,??_initSD+2
  3823  0017BE  C030  F031         	movff	??_initSD,??_initSD+1
  3824  0017C2  6A30               	clrf	??_initSD,c
  3825  0017C4  5030               	movf	??_initSD,w,c
  3826  0017C6  0100               	movlb	0	; () banked
  3827  0017C8  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3828  0017CA  5031               	movf	??_initSD+1,w,c
  3829  0017CC  0100               	movlb	0	; () banked
  3830  0017CE  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3831  0017D0  5032               	movf	??_initSD+2,w,c
  3832  0017D2  0100               	movlb	0	; () banked
  3833  0017D4  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3834  0017D6  5033               	movf	??_initSD+3,w,c
  3835  0017D8  0100               	movlb	0	; () banked
  3836  0017DA  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;SD_PIC.c: 671: SDCard.PHML |= (unsigned long)arr_response[7];
  3840  0017DC  5048               	movf	initSD@arr_response+7,w,c
  3841  0017DE  0100               	movlb	0	; () banked
  3842  0017E0  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;SD_PIC.c: 673: SDCard.PRV = arr_response[8];
  3846  0017E2  C049  F08A         	movff	initSD@arr_response+8,_SDCard+10
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;SD_PIC.c: 677: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  3850  0017E6  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3851  0017EA  6A31               	clrf	(??_initSD+1)& (0+255),c
  3852  0017EC  6A32               	clrf	(??_initSD+2)& (0+255),c
  3853  0017EE  6A33               	clrf	(??_initSD+3)& (0+255),c
  3854  0017F0  C030  F033         	movff	??_initSD,??_initSD+3
  3855  0017F4  6A32               	clrf	??_initSD+2,c
  3856  0017F6  6A31               	clrf	??_initSD+1,c
  3857  0017F8  6A30               	clrf	??_initSD,c
  3858  0017FA  C030  F08B         	movff	??_initSD,_SDCard+11
  3859  0017FE  C031  F08C         	movff	??_initSD+1,_SDCard+12
  3860  001802  C032  F08D         	movff	??_initSD+2,_SDCard+13
  3861  001806  C033  F08E         	movff	??_initSD+3,_SDCard+14
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;SD_PIC.c: 678: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  3865  00180A  C04B  F030         	movff	initSD@arr_response+10,??_initSD
  3866  00180E  6A31               	clrf	(??_initSD+1)& (0+255),c
  3867  001810  6A32               	clrf	(??_initSD+2)& (0+255),c
  3868  001812  6A33               	clrf	(??_initSD+3)& (0+255),c
  3869  001814  C031  F033         	movff	??_initSD+1,??_initSD+3
  3870  001818  C030  F032         	movff	??_initSD,??_initSD+2
  3871  00181C  6A31               	clrf	??_initSD+1,c
  3872  00181E  6A30               	clrf	??_initSD,c
  3873  001820  5030               	movf	??_initSD,w,c
  3874  001822  0100               	movlb	0	; () banked
  3875  001824  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3876  001826  5031               	movf	??_initSD+1,w,c
  3877  001828  0100               	movlb	0	; () banked
  3878  00182A  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3879  00182C  5032               	movf	??_initSD+2,w,c
  3880  00182E  0100               	movlb	0	; () banked
  3881  001830  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3882  001832  5033               	movf	??_initSD+3,w,c
  3883  001834  0100               	movlb	0	; () banked
  3884  001836  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;SD_PIC.c: 679: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  3888  001838  C04C  F030         	movff	initSD@arr_response+11,??_initSD
  3889  00183C  6A31               	clrf	(??_initSD+1)& (0+255),c
  3890  00183E  6A32               	clrf	(??_initSD+2)& (0+255),c
  3891  001840  6A33               	clrf	(??_initSD+3)& (0+255),c
  3892  001842  C032  F033         	movff	??_initSD+2,??_initSD+3
  3893  001846  C031  F032         	movff	??_initSD+1,??_initSD+2
  3894  00184A  C030  F031         	movff	??_initSD,??_initSD+1
  3895  00184E  6A30               	clrf	??_initSD,c
  3896  001850  5030               	movf	??_initSD,w,c
  3897  001852  0100               	movlb	0	; () banked
  3898  001854  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3899  001856  5031               	movf	??_initSD+1,w,c
  3900  001858  0100               	movlb	0	; () banked
  3901  00185A  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3902  00185C  5032               	movf	??_initSD+2,w,c
  3903  00185E  0100               	movlb	0	; () banked
  3904  001860  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3905  001862  5033               	movf	??_initSD+3,w,c
  3906  001864  0100               	movlb	0	; () banked
  3907  001866  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;SD_PIC.c: 680: SDCard.PSN |= (unsigned long)arr_response[12];
  3911  001868  504D               	movf	initSD@arr_response+12,w,c
  3912  00186A  0100               	movlb	0	; () banked
  3913  00186C  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;SD_PIC.c: 682: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  3917                           ;SD_PIC.c: 683: (arr_response[14]);
  3918  00186E  504E               	movf	initSD@arr_response+13,w,c
  3919  001870  0B0F               	andlw	15
  3920  001872  6E30               	movwf	??_initSD& (0+255),c
  3921  001874  504F               	movf	initSD@arr_response+14,w,c
  3922  001876  0100               	movlb	0	; () banked
  3923  001878  6F8F               	movwf	(_SDCard+15)& (0+255),b
  3924  00187A  C030  F090         	movff	??_initSD,_SDCard+16
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;SD_PIC.c: 684: SDCard.CRC = arr_response[15] & 0xFE;
  3928  00187E  5050               	movf	initSD@arr_response+15,w,c
  3929  001880  0BFE               	andlw	254
  3930  001882  0100               	movlb	0	; () banked
  3931  001884  6F91               	movwf	(_SDCard+17)& (0+255),b
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;SD_PIC.c: 687: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  3935  001886  848D               	bsf	3981,2,c	;volatile
  3936                           
  3937                           ; BSR set to: 0
  3938  001888  9AC6               	bcf	4038,5,c	;volatile
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;SD_PIC.c: 688: SSPCON1 = 0b00010000;
  3942  00188A  0E10               	movlw	16
  3943  00188C  6EC6               	movwf	4038,c	;volatile
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;SD_PIC.c: 689: OSCCON = last_OSCCON;
  3947  00188E  C03B  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;SD_PIC.c: 690: OSCTUNE = last_OSCTUNE;
  3951  001892  C03C  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  3952                           
  3953                           ;SD_PIC.c: 693: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  3954  001896  D004               	goto	l2963
  3955  001898                     l2961:
  3956  001898  0E42               	movlw	66
  3957  00189A                     u3147:
  3958  00189A  2EE8               	decfsz	wreg,f,c
  3959  00189C  D7FE               	bra	u3147
  3960  00189E  D000               	nop2	
  3961  0018A0                     l2963:
  3962  0018A0  A4D3               	btfss	4051,2,c	;volatile
  3963  0018A2  D7FA               	goto	l2961
  3964                           
  3965                           ;SD_PIC.c: 696: SSPCON1bits.SSPEN = 1;
  3966  0018A4  8AC6               	bsf	4038,5,c	;volatile
  3967                           
  3968                           ;SD_PIC.c: 699: SDCard.write.MBW_flag_first = 1;
  3969  0018A6  0E01               	movlw	1
  3970  0018A8  0100               	movlb	0	; () banked
  3971  0018AA  6FA4               	movwf	(_SDCard+36)& (0+255),b
  3972                           
  3973                           ;SD_PIC.c: 700: SDCard.write.MBW_startBlock = 0;
  3974  0018AC  0E00               	movlw	0
  3975  0018AE  0100               	movlb	0	; () banked
  3976  0018B0  6FA0               	movwf	(_SDCard+32)& (0+255),b
  3977  0018B2  0E00               	movlw	0
  3978  0018B4  6FA1               	movwf	(_SDCard+33)& (0+255),b
  3979  0018B6  0E00               	movlw	0
  3980  0018B8  6FA2               	movwf	(_SDCard+34)& (0+255),b
  3981  0018BA  0E00               	movlw	0
  3982  0018BC  6FA3               	movwf	(_SDCard+35)& (0+255),b
  3983                           
  3984                           ;SD_PIC.c: 701: SDCard.write.lastBlockWritten = 0;
  3985  0018BE  0E00               	movlw	0
  3986  0018C0  0100               	movlb	0	; () banked
  3987  0018C2  6F9C               	movwf	(_SDCard+28)& (0+255),b
  3988  0018C4  0E00               	movlw	0
  3989  0018C6  6F9D               	movwf	(_SDCard+29)& (0+255),b
  3990  0018C8  0E00               	movlw	0
  3991  0018CA  6F9E               	movwf	(_SDCard+30)& (0+255),b
  3992  0018CC  0E00               	movlw	0
  3993  0018CE  6F9F               	movwf	(_SDCard+31)& (0+255),b
  3994                           
  3995                           ;SD_PIC.c: 702: SDCard.read.MBR_flag_first = 1;
  3996  0018D0  0E01               	movlw	1
  3997  0018D2  0100               	movlb	0	; () banked
  3998  0018D4  6FAD               	movwf	(_SDCard+45)& (0+255),b
  3999                           
  4000                           ;SD_PIC.c: 703: SDCard.read.MBR_startBlock = 0;
  4001  0018D6  0E00               	movlw	0
  4002  0018D8  0100               	movlb	0	; () banked
  4003  0018DA  6FA9               	movwf	(_SDCard+41)& (0+255),b
  4004  0018DC  0E00               	movlw	0
  4005  0018DE  6FAA               	movwf	(_SDCard+42)& (0+255),b
  4006  0018E0  0E00               	movlw	0
  4007  0018E2  6FAB               	movwf	(_SDCard+43)& (0+255),b
  4008  0018E4  0E00               	movlw	0
  4009  0018E6  6FAC               	movwf	(_SDCard+44)& (0+255),b
  4010                           
  4011                           ;SD_PIC.c: 704: SDCard.read.lastBlockRead = 0;
  4012  0018E8  0E00               	movlw	0
  4013  0018EA  0100               	movlb	0	; () banked
  4014  0018EC  6FA5               	movwf	(_SDCard+37)& (0+255),b
  4015  0018EE  0E00               	movlw	0
  4016  0018F0  6FA6               	movwf	(_SDCard+38)& (0+255),b
  4017  0018F2  0E00               	movlw	0
  4018  0018F4  6FA7               	movwf	(_SDCard+39)& (0+255),b
  4019  0018F6  0E00               	movlw	0
  4020  0018F8  6FA8               	movwf	(_SDCard+40)& (0+255),b
  4021                           
  4022                           ;SD_PIC.c: 707: SDCard.init = 1;
  4023  0018FA  0E01               	movlw	1
  4024  0018FC  0100               	movlb	0	; () banked
  4025  0018FE  6F9B               	movwf	(_SDCard+27)& (0+255),b
  4026  001900  0012               	return		;funcret
  4027  001902                     __end_of_initSD:
  4028                           	opt stack 0
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           plusw1	equ	0xFE3
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           postinc2	equ	0xFDE
  4043                           postdec2	equ	0xFDD
  4044                           plusw2	equ	0xFDB
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _spiInit *****************
  4050 ;; Defined at:
  4051 ;;		line 54 in file "SPI_PIC.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  divider         1    wreg     unsigned char 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  divider         1    0[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      void 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;Total ram usage:        1 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_initSD
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text7
  4079  002CAA                     __ptext7:
  4080                           	opt stack 0
  4081  002CAA                     _spiInit:
  4082                           	opt stack 29
  4083                           
  4084                           ;incstack = 0
  4085                           ;spiInit@divider stored from wreg
  4086  002CAA  6E01               	movwf	spiInit@divider,c
  4087                           
  4088                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  4089  002CAC  9AC6               	bcf	4038,5,c	;volatile
  4090                           
  4091                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  4092  002CAE  0E00               	movlw	0
  4093  002CB0  6EC7               	movwf	4039,c	;volatile
  4094                           
  4095                           ;SPI_PIC.c: 71: switch(divider){
  4096  002CB2  D007               	goto	l2503
  4097  002CB4                     l2497:
  4098                           
  4099                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  4100  002CB4  0E11               	movlw	17
  4101  002CB6  D003               	goto	L7
  4102  002CB8                     l2499:
  4103                           
  4104                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  4105  002CB8  0E12               	movlw	18
  4106  002CBA  D001               	goto	L7
  4107  002CBC                     l2501:
  4108                           
  4109                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  4110  002CBC  0E10               	movlw	16
  4111  002CBE                     L7:
  4112  002CBE  6EC6               	movwf	4038,c	;volatile
  4113                           
  4114                           ;SPI_PIC.c: 83: }
  4115  002CC0  D00B               	goto	l516
  4116  002CC2                     l2503:
  4117  002CC2  5001               	movf	spiInit@divider,w,c
  4118                           
  4119                           ; Switch size 1, requested type "space"
  4120                           ; Number of cases is 3, Range of values is 4 to 64
  4121                           ; switch strategies available:
  4122                           ; Name         Instructions Cycles
  4123                           ; simple_byte           10     6 (average)
  4124                           ;	Chosen strategy is simple_byte
  4125  002CC4  0A04               	xorlw	4	; case 4
  4126  002CC6  B4D8               	btfsc	status,2,c
  4127  002CC8  D7F9               	goto	l2501
  4128  002CCA  0A14               	xorlw	20	; case 16
  4129  002CCC  B4D8               	btfsc	status,2,c
  4130  002CCE  D7F2               	goto	l2497
  4131  002CD0  0A50               	xorlw	80	; case 64
  4132  002CD2  B4D8               	btfsc	status,2,c
  4133  002CD4  D7F1               	goto	l2499
  4134  002CD6  D7F2               	goto	l2501
  4135  002CD8                     l516:
  4136                           
  4137                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  4138  002CD8  9A94               	bcf	3988,5,c	;volatile
  4139                           
  4140                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  4141  002CDA  8894               	bsf	3988,4,c	;volatile
  4142                           
  4143                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  4144  002CDC  9694               	bcf	3988,3,c	;volatile
  4145                           
  4146                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  4147  002CDE  8AC6               	bsf	4038,5,c	;volatile
  4148  002CE0  0012               	return		;funcret
  4149  002CE2                     __end_of_spiInit:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           postdec1	equ	0xFE5
  4160                           plusw1	equ	0xFE3
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           plusw2	equ	0xFDB
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function ___lwtoft *****************
  4172 ;; Defined at:
  4173 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  c               2    8[COMRAM] unsigned int 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  3    8[COMRAM] float 
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        3 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    1
  4194 ;; This function calls:
  4195 ;;		___ftpack
  4196 ;; This function is called by:
  4197 ;;		_initSD
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text8
  4202  002D70                     __ptext8:
  4203                           	opt stack 0
  4204  002D70                     ___lwtoft:
  4205                           	opt stack 28
  4206                           
  4207                           ;incstack = 0
  4208  002D70  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4209  002D74  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4210  002D78  6A03               	clrf	___ftpack@arg+2,c
  4211  002D7A  0E8E               	movlw	142
  4212  002D7C  6E04               	movwf	___ftpack@exp,c
  4213  002D7E  0E00               	movlw	0
  4214  002D80  6E05               	movwf	___ftpack@sign,c
  4215  002D82  EC3E  F013         	call	___ftpack	;wreg free
  4216  002D86  C001  F009         	movff	?___ftpack,?___lwtoft
  4217  002D8A  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4218  002D8E  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4219  002D92  0012               	return	
  4220  002D94                     __end_of___lwtoft:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           postinc0	equ	0xFEE
  4229                           wreg	equ	0xFE8
  4230                           postdec1	equ	0xFE5
  4231                           plusw1	equ	0xFE3
  4232                           fsr1h	equ	0xFE2
  4233                           fsr1l	equ	0xFE1
  4234                           indf2	equ	0xFDF
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           plusw2	equ	0xFDB
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function ___lltoft *****************
  4243 ;; Defined at:
  4244 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  c               4    8[COMRAM] unsigned long 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  exp             1   16[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  3    8[COMRAM] float 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        9 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    1
  4265 ;; This function calls:
  4266 ;;		___ftpack
  4267 ;; This function is called by:
  4268 ;;		_initSD
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text9
  4273  002B88                     __ptext9:
  4274                           	opt stack 0
  4275  002B88                     ___lltoft:
  4276                           	opt stack 28
  4277                           
  4278                           ;incstack = 0
  4279  002B88  0E8E               	movlw	142
  4280  002B8A  6E11               	movwf	___lltoft@exp,c
  4281  002B8C  D006               	goto	l2687
  4282  002B8E                     l2685:
  4283  002B8E  90D8               	bcf	status,0,c
  4284  002B90  320C               	rrcf	___lltoft@c+3,f,c
  4285  002B92  320B               	rrcf	___lltoft@c+2,f,c
  4286  002B94  320A               	rrcf	___lltoft@c+1,f,c
  4287  002B96  3209               	rrcf	___lltoft@c,f,c
  4288  002B98  2A11               	incf	___lltoft@exp,f,c
  4289  002B9A                     l2687:
  4290  002B9A  0E00               	movlw	0
  4291  002B9C  1409               	andwf	___lltoft@c,w,c
  4292  002B9E  6E0D               	movwf	??___lltoft& (0+255),c
  4293  002BA0  0E00               	movlw	0
  4294  002BA2  140A               	andwf	___lltoft@c+1,w,c
  4295  002BA4  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4296  002BA6  0E00               	movlw	0
  4297  002BA8  140B               	andwf	___lltoft@c+2,w,c
  4298  002BAA  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4299  002BAC  0EFF               	movlw	255
  4300  002BAE  140C               	andwf	___lltoft@c+3,w,c
  4301  002BB0  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4302  002BB2  500D               	movf	??___lltoft,w,c
  4303  002BB4  100E               	iorwf	??___lltoft+1,w,c
  4304  002BB6  100F               	iorwf	??___lltoft+2,w,c
  4305  002BB8  1010               	iorwf	??___lltoft+3,w,c
  4306  002BBA  A4D8               	btfss	status,2,c
  4307  002BBC  D7E8               	goto	l2685
  4308  002BBE  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4309  002BC2  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4310  002BC6  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4311  002BCA  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4312  002BCE  0E00               	movlw	0
  4313  002BD0  6E05               	movwf	___ftpack@sign,c
  4314  002BD2  EC3E  F013         	call	___ftpack	;wreg free
  4315  002BD6  C001  F009         	movff	?___ftpack,?___lltoft
  4316  002BDA  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4317  002BDE  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4318  002BE2  0012               	return	
  4319  002BE4                     __end_of___lltoft:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           plusw1	equ	0xFE3
  4331                           fsr1h	equ	0xFE2
  4332                           fsr1l	equ	0xFE1
  4333                           indf2	equ	0xFDF
  4334                           postinc2	equ	0xFDE
  4335                           postdec2	equ	0xFDD
  4336                           plusw2	equ	0xFDB
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function ___fttol *****************
  4342 ;; Defined at:
  4343 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  f1              3   32[COMRAM] float 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  lval            4   42[COMRAM] unsigned long 
  4348 ;;  exp1            1   46[COMRAM] unsigned char 
  4349 ;;  sign1           1   41[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  4   32[COMRAM] long 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:       15 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_initSD
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text10
  4373  002214                     __ptext10:
  4374                           	opt stack 0
  4375  002214                     ___fttol:
  4376                           	opt stack 29
  4377                           
  4378                           ;incstack = 0
  4379  002214  C023  F025         	movff	___fttol@f1+2,??___fttol
  4380  002218  6A26               	clrf	(??___fttol+1)& (0+255),c
  4381  00221A  6A27               	clrf	(??___fttol+2)& (0+255),c
  4382  00221C  3422               	rlcf	___fttol@f1+1,w,c
  4383  00221E  3625               	rlcf	??___fttol& (0+255),f,c
  4384  002220  E301               	bnc	u1781
  4385  002222  8026               	bsf	(??___fttol+1)& (0+255),0,c
  4386  002224                     u1781:
  4387  002224  5025               	movf	??___fttol,w,c
  4388  002226  6E2F               	movwf	___fttol@exp1,c
  4389  002228  502F               	movf	___fttol@exp1,w,c
  4390  00222A  A4D8               	btfss	status,2,c
  4391  00222C  D009               	goto	l2605
  4392  00222E  0E00               	movlw	0
  4393  002230  6E21               	movwf	?___fttol,c
  4394  002232  0E00               	movlw	0
  4395  002234  6E22               	movwf	?___fttol+1,c
  4396  002236  0E00               	movlw	0
  4397  002238  6E23               	movwf	?___fttol+2,c
  4398  00223A  0E00               	movlw	0
  4399  00223C  6E24               	movwf	?___fttol+3,c
  4400  00223E  0012               	return	
  4401  002240                     l2605:
  4402  002240  0E17               	movlw	23
  4403  002242  6E25               	movwf	??___fttol& (0+255),c
  4404  002244  C021  F026         	movff	___fttol@f1,??___fttol+1
  4405  002248  C022  F027         	movff	___fttol@f1+1,??___fttol+2
  4406  00224C  C023  F028         	movff	___fttol@f1+2,??___fttol+3
  4407  002250  2825               	incf	??___fttol,w,c
  4408  002252  6E29               	movwf	(??___fttol+4)& (0+255),c
  4409  002254  D004               	goto	u1800
  4410  002256                     u1805:
  4411  002256  90D8               	bcf	status,0,c
  4412  002258  3228               	rrcf	??___fttol+3,f,c
  4413  00225A  3227               	rrcf	??___fttol+2,f,c
  4414  00225C  3226               	rrcf	??___fttol+1,f,c
  4415  00225E                     u1800:
  4416  00225E  2E29               	decfsz	(??___fttol+4)& (0+255),f,c
  4417  002260  D7FA               	goto	u1805
  4418  002262  5026               	movf	??___fttol+1,w,c
  4419  002264  6E2A               	movwf	___fttol@sign1,c
  4420  002266  8E22               	bsf	___fttol@f1+1,7,c
  4421  002268  0EFF               	movlw	255
  4422  00226A  1621               	andwf	___fttol@f1,f,c
  4423  00226C  0EFF               	movlw	255
  4424  00226E  1622               	andwf	___fttol@f1+1,f,c
  4425  002270  0E00               	movlw	0
  4426  002272  1623               	andwf	___fttol@f1+2,f,c
  4427  002274  5021               	movf	___fttol@f1,w,c
  4428  002276  6E2B               	movwf	___fttol@lval,c
  4429  002278  5022               	movf	___fttol@f1+1,w,c
  4430  00227A  6E2C               	movwf	___fttol@lval+1,c
  4431  00227C  5023               	movf	___fttol@f1+2,w,c
  4432  00227E  6E2D               	movwf	___fttol@lval+2,c
  4433  002280  6A2E               	clrf	___fttol@lval+3,c
  4434  002282  0E8E               	movlw	142
  4435  002284  5E2F               	subwf	___fttol@exp1,f,c
  4436  002286  AE2F               	btfss	___fttol@exp1,7,c
  4437  002288  D016               	goto	l2627
  4438  00228A  502F               	movf	___fttol@exp1,w,c
  4439  00228C  0A80               	xorlw	128
  4440  00228E  0F8F               	addlw	143
  4441  002290  B0D8               	btfsc	status,0,c
  4442  002292  D009               	goto	l2623
  4443  002294  0E00               	movlw	0
  4444  002296  6E21               	movwf	?___fttol,c
  4445  002298  0E00               	movlw	0
  4446  00229A  6E22               	movwf	?___fttol+1,c
  4447  00229C  0E00               	movlw	0
  4448  00229E  6E23               	movwf	?___fttol+2,c
  4449  0022A0  0E00               	movlw	0
  4450  0022A2  6E24               	movwf	?___fttol+3,c
  4451  0022A4  0012               	return	
  4452  0022A6                     l2623:
  4453  0022A6  90D8               	bcf	status,0,c
  4454  0022A8  322E               	rrcf	___fttol@lval+3,f,c
  4455  0022AA  322D               	rrcf	___fttol@lval+2,f,c
  4456  0022AC  322C               	rrcf	___fttol@lval+1,f,c
  4457  0022AE  322B               	rrcf	___fttol@lval,f,c
  4458  0022B0  3E2F               	incfsz	___fttol@exp1,f,c
  4459  0022B2  D7F9               	goto	l2623
  4460  0022B4  D015               	goto	l2637
  4461  0022B6                     l2627:
  4462  0022B6  0E17               	movlw	23
  4463  0022B8  642F               	cpfsgt	___fttol@exp1,c
  4464  0022BA  D00F               	goto	l2635
  4465  0022BC  0E00               	movlw	0
  4466  0022BE  6E21               	movwf	?___fttol,c
  4467  0022C0  0E00               	movlw	0
  4468  0022C2  6E22               	movwf	?___fttol+1,c
  4469  0022C4  0E00               	movlw	0
  4470  0022C6  6E23               	movwf	?___fttol+2,c
  4471  0022C8  0E00               	movlw	0
  4472  0022CA  6E24               	movwf	?___fttol+3,c
  4473  0022CC  0012               	return	
  4474  0022CE                     l2633:
  4475  0022CE  90D8               	bcf	status,0,c
  4476  0022D0  362B               	rlcf	___fttol@lval,f,c
  4477  0022D2  362C               	rlcf	___fttol@lval+1,f,c
  4478  0022D4  362D               	rlcf	___fttol@lval+2,f,c
  4479  0022D6  362E               	rlcf	___fttol@lval+3,f,c
  4480  0022D8  062F               	decf	___fttol@exp1,f,c
  4481  0022DA                     l2635:
  4482  0022DA  502F               	movf	___fttol@exp1,w,c
  4483  0022DC  A4D8               	btfss	status,2,c
  4484  0022DE  D7F7               	goto	l2633
  4485  0022E0                     l2637:
  4486  0022E0  502A               	movf	___fttol@sign1,w,c
  4487  0022E2  B4D8               	btfsc	status,2,c
  4488  0022E4  D008               	goto	l2641
  4489  0022E6  1E2E               	comf	___fttol@lval+3,f,c
  4490  0022E8  1E2D               	comf	___fttol@lval+2,f,c
  4491  0022EA  1E2C               	comf	___fttol@lval+1,f,c
  4492  0022EC  6C2B               	negf	___fttol@lval,c
  4493  0022EE  0E00               	movlw	0
  4494  0022F0  222C               	addwfc	___fttol@lval+1,f,c
  4495  0022F2  222D               	addwfc	___fttol@lval+2,f,c
  4496  0022F4  222E               	addwfc	___fttol@lval+3,f,c
  4497  0022F6                     l2641:
  4498  0022F6  C02B  F021         	movff	___fttol@lval,?___fttol
  4499  0022FA  C02C  F022         	movff	___fttol@lval+1,?___fttol+1
  4500  0022FE  C02D  F023         	movff	___fttol@lval+2,?___fttol+2
  4501  002302  C02E  F024         	movff	___fttol@lval+3,?___fttol+3
  4502  002306  0012               	return	
  4503  002308                     __end_of___fttol:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postdec1	equ	0xFE5
  4514                           plusw1	equ	0xFE3
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           plusw2	equ	0xFDB
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function ___ftmul *****************
  4526 ;; Defined at:
  4527 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  f1              3   17[COMRAM] float 
  4530 ;;  f2              3   20[COMRAM] float 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  f3_as_produc    3   27[COMRAM] unsigned um
  4533 ;;  sign            1   31[COMRAM] unsigned char 
  4534 ;;  cntr            1   30[COMRAM] unsigned char 
  4535 ;;  exp             1   26[COMRAM] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  3   17[COMRAM] float 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4545 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;Total ram usage:       15 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    1
  4552 ;; This function calls:
  4553 ;;		___ftpack
  4554 ;; This function is called by:
  4555 ;;		_initSD
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text11
  4560  002308                     __ptext11:
  4561                           	opt stack 0
  4562  002308                     ___ftmul:
  4563                           	opt stack 28
  4564                           
  4565                           ;incstack = 0
  4566  002308  C014  F018         	movff	___ftmul@f1+2,??___ftmul
  4567  00230C  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4568  00230E  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4569  002310  3413               	rlcf	___ftmul@f1+1,w,c
  4570  002312  3618               	rlcf	??___ftmul& (0+255),f,c
  4571  002314  E301               	bnc	u1721
  4572  002316  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4573  002318                     u1721:
  4574  002318  5018               	movf	??___ftmul,w,c
  4575  00231A  6E1B               	movwf	___ftmul@exp,c
  4576  00231C  501B               	movf	___ftmul@exp,w,c
  4577  00231E  A4D8               	btfss	status,2,c
  4578  002320  D007               	goto	l2557
  4579  002322  0E00               	movlw	0
  4580  002324  6E12               	movwf	?___ftmul,c
  4581  002326  0E00               	movlw	0
  4582  002328  6E13               	movwf	?___ftmul+1,c
  4583  00232A  0E00               	movlw	0
  4584  00232C  6E14               	movwf	?___ftmul+2,c
  4585  00232E  0012               	return	
  4586  002330                     l2557:
  4587  002330  C017  F018         	movff	___ftmul@f2+2,??___ftmul
  4588  002334  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4589  002336  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4590  002338  3416               	rlcf	___ftmul@f2+1,w,c
  4591  00233A  3618               	rlcf	??___ftmul& (0+255),f,c
  4592  00233C  E301               	bnc	u1741
  4593  00233E  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4594  002340                     u1741:
  4595  002340  5018               	movf	??___ftmul,w,c
  4596  002342  6E20               	movwf	___ftmul@sign,c
  4597  002344  5020               	movf	___ftmul@sign,w,c
  4598  002346  A4D8               	btfss	status,2,c
  4599  002348  D007               	goto	l2563
  4600  00234A  0E00               	movlw	0
  4601  00234C  6E12               	movwf	?___ftmul,c
  4602  00234E  0E00               	movlw	0
  4603  002350  6E13               	movwf	?___ftmul+1,c
  4604  002352  0E00               	movlw	0
  4605  002354  6E14               	movwf	?___ftmul+2,c
  4606  002356  0012               	return	
  4607  002358                     l2563:
  4608  002358  5020               	movf	___ftmul@sign,w,c
  4609  00235A  0F7B               	addlw	123
  4610  00235C  261B               	addwf	___ftmul@exp,f,c
  4611  00235E  C014  F020         	movff	___ftmul@f1+2,___ftmul@sign
  4612  002362  5017               	movf	___ftmul@f2+2,w,c
  4613  002364  1A20               	xorwf	___ftmul@sign,f,c
  4614  002366  0E80               	movlw	128
  4615  002368  1620               	andwf	___ftmul@sign,f,c
  4616  00236A  8E13               	bsf	___ftmul@f1+1,7,c
  4617  00236C  8E16               	bsf	___ftmul@f2+1,7,c
  4618  00236E  0EFF               	movlw	255
  4619  002370  1615               	andwf	___ftmul@f2,f,c
  4620  002372  0EFF               	movlw	255
  4621  002374  1616               	andwf	___ftmul@f2+1,f,c
  4622  002376  0E00               	movlw	0
  4623  002378  1617               	andwf	___ftmul@f2+2,f,c
  4624  00237A  0E00               	movlw	0
  4625  00237C  6E1C               	movwf	___ftmul@f3_as_product,c
  4626  00237E  0E00               	movlw	0
  4627  002380  6E1D               	movwf	___ftmul@f3_as_product+1,c
  4628  002382  0E00               	movlw	0
  4629  002384  6E1E               	movwf	___ftmul@f3_as_product+2,c
  4630  002386  0E07               	movlw	7
  4631  002388  6E1F               	movwf	___ftmul@cntr,c
  4632  00238A                     l2577:
  4633  00238A  A012               	btfss	___ftmul@f1,0,c
  4634  00238C  D006               	goto	l2581
  4635  00238E  5015               	movf	___ftmul@f2,w,c
  4636  002390  261C               	addwf	___ftmul@f3_as_product,f,c
  4637  002392  5016               	movf	___ftmul@f2+1,w,c
  4638  002394  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4639  002396  5017               	movf	___ftmul@f2+2,w,c
  4640  002398  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4641  00239A                     l2581:
  4642  00239A  90D8               	bcf	status,0,c
  4643  00239C  3214               	rrcf	___ftmul@f1+2,f,c
  4644  00239E  3213               	rrcf	___ftmul@f1+1,f,c
  4645  0023A0  3212               	rrcf	___ftmul@f1,f,c
  4646  0023A2  90D8               	bcf	status,0,c
  4647  0023A4  3615               	rlcf	___ftmul@f2,f,c
  4648  0023A6  3616               	rlcf	___ftmul@f2+1,f,c
  4649  0023A8  3617               	rlcf	___ftmul@f2+2,f,c
  4650  0023AA  2E1F               	decfsz	___ftmul@cntr,f,c
  4651  0023AC  D7EE               	goto	l2577
  4652  0023AE  0E09               	movlw	9
  4653  0023B0  6E1F               	movwf	___ftmul@cntr,c
  4654  0023B2                     l2587:
  4655  0023B2  A012               	btfss	___ftmul@f1,0,c
  4656  0023B4  D006               	goto	l2591
  4657  0023B6  5015               	movf	___ftmul@f2,w,c
  4658  0023B8  261C               	addwf	___ftmul@f3_as_product,f,c
  4659  0023BA  5016               	movf	___ftmul@f2+1,w,c
  4660  0023BC  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4661  0023BE  5017               	movf	___ftmul@f2+2,w,c
  4662  0023C0  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4663  0023C2                     l2591:
  4664  0023C2  90D8               	bcf	status,0,c
  4665  0023C4  3214               	rrcf	___ftmul@f1+2,f,c
  4666  0023C6  3213               	rrcf	___ftmul@f1+1,f,c
  4667  0023C8  3212               	rrcf	___ftmul@f1,f,c
  4668  0023CA  90D8               	bcf	status,0,c
  4669  0023CC  321E               	rrcf	___ftmul@f3_as_product+2,f,c
  4670  0023CE  321D               	rrcf	___ftmul@f3_as_product+1,f,c
  4671  0023D0  321C               	rrcf	___ftmul@f3_as_product,f,c
  4672  0023D2  2E1F               	decfsz	___ftmul@cntr,f,c
  4673  0023D4  D7EE               	goto	l2587
  4674  0023D6  C01C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4675  0023DA  C01D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4676  0023DE  C01E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4677  0023E2  C01B  F004         	movff	___ftmul@exp,___ftpack@exp
  4678  0023E6  C020  F005         	movff	___ftmul@sign,___ftpack@sign
  4679  0023EA  EC3E  F013         	call	___ftpack	;wreg free
  4680  0023EE  C001  F012         	movff	?___ftpack,?___ftmul
  4681  0023F2  C002  F013         	movff	?___ftpack+1,?___ftmul+1
  4682  0023F6  C003  F014         	movff	?___ftpack+2,?___ftmul+2
  4683  0023FA  0012               	return	
  4684  0023FC                     __end_of___ftmul:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           postinc0	equ	0xFEE
  4693                           wreg	equ	0xFE8
  4694                           postdec1	equ	0xFE5
  4695                           plusw1	equ	0xFE3
  4696                           fsr1h	equ	0xFE2
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           plusw2	equ	0xFDB
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function ___ftdiv *****************
  4707 ;; Defined at:
  4708 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  f1              3   11[COMRAM] float 
  4711 ;;  f2              3   14[COMRAM] float 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  f3              3   21[COMRAM] float 
  4714 ;;  sign            1   25[COMRAM] unsigned char 
  4715 ;;  exp             1   24[COMRAM] unsigned char 
  4716 ;;  cntr            1   20[COMRAM] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  3   11[COMRAM] float 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4726 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;Total ram usage:       15 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    1
  4733 ;; This function calls:
  4734 ;;		___ftpack
  4735 ;; This function is called by:
  4736 ;;		_initSD
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text12
  4741  0023FC                     __ptext12:
  4742                           	opt stack 0
  4743  0023FC                     ___ftdiv:
  4744                           	opt stack 28
  4745                           
  4746                           ;incstack = 0
  4747  0023FC  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  4748  002400  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4749  002402  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4750  002404  340D               	rlcf	___ftdiv@f1+1,w,c
  4751  002406  3612               	rlcf	??___ftdiv& (0+255),f,c
  4752  002408  E301               	bnc	u1671
  4753  00240A  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4754  00240C                     u1671:
  4755  00240C  5012               	movf	??___ftdiv,w,c
  4756  00240E  6E19               	movwf	___ftdiv@exp,c
  4757  002410  5019               	movf	___ftdiv@exp,w,c
  4758  002412  A4D8               	btfss	status,2,c
  4759  002414  D007               	goto	l2511
  4760  002416  0E00               	movlw	0
  4761  002418  6E0C               	movwf	?___ftdiv,c
  4762  00241A  0E00               	movlw	0
  4763  00241C  6E0D               	movwf	?___ftdiv+1,c
  4764  00241E  0E00               	movlw	0
  4765  002420  6E0E               	movwf	?___ftdiv+2,c
  4766  002422  0012               	return	
  4767  002424                     l2511:
  4768  002424  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  4769  002428  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4770  00242A  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4771  00242C  3410               	rlcf	___ftdiv@f2+1,w,c
  4772  00242E  3612               	rlcf	??___ftdiv& (0+255),f,c
  4773  002430  E301               	bnc	u1691
  4774  002432  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4775  002434                     u1691:
  4776  002434  5012               	movf	??___ftdiv,w,c
  4777  002436  6E1A               	movwf	___ftdiv@sign,c
  4778  002438  501A               	movf	___ftdiv@sign,w,c
  4779  00243A  A4D8               	btfss	status,2,c
  4780  00243C  D007               	goto	l2517
  4781  00243E  0E00               	movlw	0
  4782  002440  6E0C               	movwf	?___ftdiv,c
  4783  002442  0E00               	movlw	0
  4784  002444  6E0D               	movwf	?___ftdiv+1,c
  4785  002446  0E00               	movlw	0
  4786  002448  6E0E               	movwf	?___ftdiv+2,c
  4787  00244A  0012               	return	
  4788  00244C                     l2517:
  4789  00244C  0E00               	movlw	0
  4790  00244E  6E16               	movwf	___ftdiv@f3,c
  4791  002450  0E00               	movlw	0
  4792  002452  6E17               	movwf	___ftdiv@f3+1,c
  4793  002454  0E00               	movlw	0
  4794  002456  6E18               	movwf	___ftdiv@f3+2,c
  4795  002458  501A               	movf	___ftdiv@sign,w,c
  4796  00245A  0F89               	addlw	137
  4797  00245C  5E19               	subwf	___ftdiv@exp,f,c
  4798  00245E  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4799  002462  5011               	movf	___ftdiv@f2+2,w,c
  4800  002464  1A1A               	xorwf	___ftdiv@sign,f,c
  4801  002466  0E80               	movlw	128
  4802  002468  161A               	andwf	___ftdiv@sign,f,c
  4803  00246A  8E0D               	bsf	___ftdiv@f1+1,7,c
  4804  00246C  0EFF               	movlw	255
  4805  00246E  160C               	andwf	___ftdiv@f1,f,c
  4806  002470  0EFF               	movlw	255
  4807  002472  160D               	andwf	___ftdiv@f1+1,f,c
  4808  002474  0E00               	movlw	0
  4809  002476  160E               	andwf	___ftdiv@f1+2,f,c
  4810  002478  8E10               	bsf	___ftdiv@f2+1,7,c
  4811  00247A  0EFF               	movlw	255
  4812  00247C  160F               	andwf	___ftdiv@f2,f,c
  4813  00247E  0EFF               	movlw	255
  4814  002480  1610               	andwf	___ftdiv@f2+1,f,c
  4815  002482  0E00               	movlw	0
  4816  002484  1611               	andwf	___ftdiv@f2+2,f,c
  4817  002486  0E18               	movlw	24
  4818  002488  6E15               	movwf	___ftdiv@cntr,c
  4819  00248A                     l2537:
  4820  00248A  90D8               	bcf	status,0,c
  4821  00248C  3616               	rlcf	___ftdiv@f3,f,c
  4822  00248E  3617               	rlcf	___ftdiv@f3+1,f,c
  4823  002490  3618               	rlcf	___ftdiv@f3+2,f,c
  4824  002492  500F               	movf	___ftdiv@f2,w,c
  4825  002494  5C0C               	subwf	___ftdiv@f1,w,c
  4826  002496  5010               	movf	___ftdiv@f2+1,w,c
  4827  002498  580D               	subwfb	___ftdiv@f1+1,w,c
  4828  00249A  5011               	movf	___ftdiv@f2+2,w,c
  4829  00249C  580E               	subwfb	___ftdiv@f1+2,w,c
  4830  00249E  A0D8               	btfss	status,0,c
  4831  0024A0  D007               	goto	l842
  4832  0024A2  500F               	movf	___ftdiv@f2,w,c
  4833  0024A4  5E0C               	subwf	___ftdiv@f1,f,c
  4834  0024A6  5010               	movf	___ftdiv@f2+1,w,c
  4835  0024A8  5A0D               	subwfb	___ftdiv@f1+1,f,c
  4836  0024AA  5011               	movf	___ftdiv@f2+2,w,c
  4837  0024AC  5A0E               	subwfb	___ftdiv@f1+2,f,c
  4838  0024AE  8016               	bsf	___ftdiv@f3,0,c
  4839  0024B0                     l842:
  4840  0024B0  90D8               	bcf	status,0,c
  4841  0024B2  360C               	rlcf	___ftdiv@f1,f,c
  4842  0024B4  360D               	rlcf	___ftdiv@f1+1,f,c
  4843  0024B6  360E               	rlcf	___ftdiv@f1+2,f,c
  4844  0024B8  2E15               	decfsz	___ftdiv@cntr,f,c
  4845  0024BA  D7E7               	goto	l2537
  4846  0024BC  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  4847  0024C0  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4848  0024C4  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4849  0024C8  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  4850  0024CC  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  4851  0024D0  EC3E  F013         	call	___ftpack	;wreg free
  4852  0024D4  C001  F00C         	movff	?___ftpack,?___ftdiv
  4853  0024D8  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  4854  0024DC  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  4855  0024E0  0012               	return	
  4856  0024E2                     __end_of___ftdiv:
  4857                           	opt stack 0
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           plusw1	equ	0xFE3
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           plusw2	equ	0xFDB
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function ___ftpack *****************
  4879 ;; Defined at:
  4880 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  arg             3    0[COMRAM] unsigned um
  4883 ;;  exp             1    3[COMRAM] unsigned char 
  4884 ;;  sign            1    4[COMRAM] unsigned char 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  3    0[COMRAM] float 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4896 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:        8 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		___ftdiv
  4906 ;;		___ftmul
  4907 ;;		___lltoft
  4908 ;;		___lwtoft
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text13
  4913  00267C                     __ptext13:
  4914                           	opt stack 0
  4915  00267C                     ___ftpack:
  4916                           	opt stack 28
  4917                           
  4918                           ;incstack = 0
  4919  00267C  5004               	movf	___ftpack@exp,w,c
  4920  00267E  B4D8               	btfsc	status,2,c
  4921  002680  D005               	goto	l2429
  4922  002682  5001               	movf	___ftpack@arg,w,c
  4923  002684  1002               	iorwf	___ftpack@arg+1,w,c
  4924  002686  1003               	iorwf	___ftpack@arg+2,w,c
  4925  002688  A4D8               	btfss	status,2,c
  4926  00268A  D00C               	goto	l2435
  4927  00268C                     l2429:
  4928  00268C  0E00               	movlw	0
  4929  00268E  6E01               	movwf	?___ftpack,c
  4930  002690  0E00               	movlw	0
  4931  002692  6E02               	movwf	?___ftpack+1,c
  4932  002694  0E00               	movlw	0
  4933  002696  6E03               	movwf	?___ftpack+2,c
  4934  002698  0012               	return	
  4935  00269A                     l2433:
  4936  00269A  2A04               	incf	___ftpack@exp,f,c
  4937  00269C  90D8               	bcf	status,0,c
  4938  00269E  3203               	rrcf	___ftpack@arg+2,f,c
  4939  0026A0  3202               	rrcf	___ftpack@arg+1,f,c
  4940  0026A2  3201               	rrcf	___ftpack@arg,f,c
  4941  0026A4                     l2435:
  4942  0026A4  0E00               	movlw	0
  4943  0026A6  1401               	andwf	___ftpack@arg,w,c
  4944  0026A8  6E06               	movwf	??___ftpack& (0+255),c
  4945  0026AA  0E00               	movlw	0
  4946  0026AC  1402               	andwf	___ftpack@arg+1,w,c
  4947  0026AE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4948  0026B0  0EFE               	movlw	254
  4949  0026B2  1403               	andwf	___ftpack@arg+2,w,c
  4950  0026B4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4951  0026B6  5006               	movf	??___ftpack,w,c
  4952  0026B8  1007               	iorwf	??___ftpack+1,w,c
  4953  0026BA  1008               	iorwf	??___ftpack+2,w,c
  4954  0026BC  B4D8               	btfsc	status,2,c
  4955  0026BE  D00C               	goto	l2441
  4956  0026C0  D7EC               	goto	l2433
  4957  0026C2                     l2437:
  4958  0026C2  2A04               	incf	___ftpack@exp,f,c
  4959  0026C4  0E01               	movlw	1
  4960  0026C6  2601               	addwf	___ftpack@arg,f,c
  4961  0026C8  0E00               	movlw	0
  4962  0026CA  2202               	addwfc	___ftpack@arg+1,f,c
  4963  0026CC  0E00               	movlw	0
  4964  0026CE  2203               	addwfc	___ftpack@arg+2,f,c
  4965  0026D0  90D8               	bcf	status,0,c
  4966  0026D2  3203               	rrcf	___ftpack@arg+2,f,c
  4967  0026D4  3202               	rrcf	___ftpack@arg+1,f,c
  4968  0026D6  3201               	rrcf	___ftpack@arg,f,c
  4969  0026D8                     l2441:
  4970  0026D8  0E00               	movlw	0
  4971  0026DA  1401               	andwf	___ftpack@arg,w,c
  4972  0026DC  6E06               	movwf	??___ftpack& (0+255),c
  4973  0026DE  0E00               	movlw	0
  4974  0026E0  1402               	andwf	___ftpack@arg+1,w,c
  4975  0026E2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4976  0026E4  0EFF               	movlw	255
  4977  0026E6  1403               	andwf	___ftpack@arg+2,w,c
  4978  0026E8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4979  0026EA  5006               	movf	??___ftpack,w,c
  4980  0026EC  1007               	iorwf	??___ftpack+1,w,c
  4981  0026EE  1008               	iorwf	??___ftpack+2,w,c
  4982  0026F0  B4D8               	btfsc	status,2,c
  4983  0026F2  D006               	goto	l2445
  4984  0026F4  D7E6               	goto	l2437
  4985  0026F6                     l2443:
  4986  0026F6  0604               	decf	___ftpack@exp,f,c
  4987  0026F8  90D8               	bcf	status,0,c
  4988  0026FA  3601               	rlcf	___ftpack@arg,f,c
  4989  0026FC  3602               	rlcf	___ftpack@arg+1,f,c
  4990  0026FE  3603               	rlcf	___ftpack@arg+2,f,c
  4991  002700                     l2445:
  4992  002700  BE02               	btfsc	___ftpack@arg+1,7,c
  4993  002702  D003               	goto	l784
  4994  002704  0E02               	movlw	2
  4995  002706  6004               	cpfslt	___ftpack@exp,c
  4996  002708  D7F6               	goto	l2443
  4997  00270A                     l784:
  4998  00270A  A004               	btfss	___ftpack@exp,0,c
  4999  00270C  9E02               	bcf	___ftpack@arg+1,7,c
  5000  00270E  90D8               	bcf	status,0,c
  5001  002710  3204               	rrcf	___ftpack@exp,f,c
  5002  002712  5004               	movf	___ftpack@exp,w,c
  5003  002714  1203               	iorwf	___ftpack@arg+2,f,c
  5004  002716  5005               	movf	___ftpack@sign,w,c
  5005  002718  A4D8               	btfss	status,2,c
  5006  00271A  8E03               	bsf	___ftpack@arg+2,7,c
  5007  00271C  C001  F001         	movff	___ftpack@arg,?___ftpack
  5008  002720  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5009  002724  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5010  002728  0012               	return	
  5011  00272A                     __end_of___ftpack:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           postdec1	equ	0xFE5
  5022                           plusw1	equ	0xFE3
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           postinc2	equ	0xFDE
  5027                           postdec2	equ	0xFDD
  5028                           plusw2	equ	0xFDB
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _initLCD *****************
  5034 ;; Defined at:
  5035 ;;		line 60 in file "lcd.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        1 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    2
  5056 ;; This function calls:
  5057 ;;		_lcdInst
  5058 ;; This function is called by:
  5059 ;;		_main
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text14
  5064  002BE4                     __ptext14:
  5065                           	opt stack 0
  5066  002BE4                     _initLCD:
  5067                           	opt stack 28
  5068                           
  5069                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5070                           
  5071                           ;incstack = 0
  5072  002BE4  0EC3               	movlw	195
  5073  002BE6  6E04               	movwf	??_initLCD& (0+255),c
  5074  002BE8  0ECD               	movlw	205
  5075  002BEA                     u3157:
  5076  002BEA  2EE8               	decfsz	wreg,f,c
  5077  002BEC  D7FE               	bra	u3157
  5078  002BEE  2E04               	decfsz	??_initLCD& (0+255),f,c
  5079  002BF0  D7FC               	bra	u3157
  5080  002BF2  F000               	nop	
  5081                           
  5082                           ;lcd.c: 69: lcdInst(0b00110011);
  5083  002BF4  0E33               	movlw	51
  5084  002BF6  EC00  F017         	call	_lcdInst
  5085                           
  5086                           ;lcd.c: 70: lcdInst(0b00110010);
  5087  002BFA  0E32               	movlw	50
  5088  002BFC  EC00  F017         	call	_lcdInst
  5089                           
  5090                           ;lcd.c: 71: lcdInst(0b00101000);
  5091  002C00  0E28               	movlw	40
  5092  002C02  EC00  F017         	call	_lcdInst
  5093                           
  5094                           ;lcd.c: 72: lcdInst(0b00001111);
  5095  002C06  0E0F               	movlw	15
  5096  002C08  EC00  F017         	call	_lcdInst
  5097                           
  5098                           ;lcd.c: 73: lcdInst(0b00000110);
  5099  002C0C  0E06               	movlw	6
  5100  002C0E  EC00  F017         	call	_lcdInst
  5101                           
  5102                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5103  002C12  0E01               	movlw	1
  5104  002C14  EC00  F017         	call	_lcdInst
  5105  002C18  0EC3               	movlw	195
  5106  002C1A  6E04               	movwf	??_initLCD& (0+255),c
  5107  002C1C  0ECD               	movlw	205
  5108  002C1E                     u3167:
  5109  002C1E  2EE8               	decfsz	wreg,f,c
  5110  002C20  D7FE               	bra	u3167
  5111  002C22  2E04               	decfsz	??_initLCD& (0+255),f,c
  5112  002C24  D7FC               	bra	u3167
  5113  002C26  F000               	nop	
  5114                           
  5115                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5116  002C28  0E0F               	movlw	15
  5117  002C2A  EC00  F017         	call	_lcdInst
  5118  002C2E  0012               	return		;funcret
  5119  002C30                     __end_of_initLCD:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           prodh	equ	0xFF4
  5126                           prodl	equ	0xFF3
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           postdec1	equ	0xFE5
  5130                           plusw1	equ	0xFE3
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           indf2	equ	0xFDF
  5134                           postinc2	equ	0xFDE
  5135                           postdec2	equ	0xFDD
  5136                           plusw2	equ	0xFDB
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _lcdInst *****************
  5142 ;; Defined at:
  5143 ;;		line 11 in file "lcd.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  data            1    wreg     unsigned char 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  data            1    2[COMRAM] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;Total ram usage:        1 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    1
  5164 ;; This function calls:
  5165 ;;		_lcdNibble
  5166 ;; This function is called by:
  5167 ;;		_main
  5168 ;;		_initLCD
  5169 ;;		_lcd_set_cursor
  5170 ;;		_lcd_shift_cursor
  5171 ;;		_lcd_shift_display
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text15
  5176  002E00                     __ptext15:
  5177                           	opt stack 0
  5178  002E00                     _lcdInst:
  5179                           	opt stack 27
  5180                           
  5181                           ;incstack = 0
  5182                           ;lcdInst@data stored from wreg
  5183  002E00  6E03               	movwf	lcdInst@data,c
  5184                           
  5185                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5186  002E02  948C               	bcf	3980,2,c	;volatile
  5187                           
  5188                           ;lcd.c: 20: lcdNibble(data);
  5189  002E04  5003               	movf	lcdInst@data,w,c
  5190  002E06  ECA8  F014         	call	_lcdNibble
  5191                           
  5192                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5193  002E0A  0EC8               	movlw	200
  5194  002E0C                     u3177:
  5195  002E0C  D000               	nop2	
  5196  002E0E  2EE8               	decfsz	wreg,f,c
  5197  002E10  D7FD               	bra	u3177
  5198  002E12  0012               	return		;funcret
  5199  002E14                     __end_of_lcdInst:
  5200                           	opt stack 0
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           prodh	equ	0xFF4
  5206                           prodl	equ	0xFF3
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           postdec1	equ	0xFE5
  5210                           plusw1	equ	0xFE3
  5211                           fsr1h	equ	0xFE2
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           plusw2	equ	0xFDB
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function _lcdNibble *****************
  5222 ;; Defined at:
  5223 ;;		line 37 in file "lcd.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  data            1    wreg     unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  data            1    1[COMRAM] unsigned char 
  5228 ;;  temp            1    0[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;Total ram usage:        2 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_lcdInst
  5248 ;;		_putch
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text16
  5253  002950                     __ptext16:
  5254                           	opt stack 0
  5255  002950                     _lcdNibble:
  5256                           	opt stack 28
  5257                           
  5258                           ;incstack = 0
  5259                           ;lcdNibble@data stored from wreg
  5260  002950  6E02               	movwf	lcdNibble@data,c
  5261                           
  5262                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5263  002952  5002               	movf	lcdNibble@data,w,c
  5264  002954  0BF0               	andlw	240
  5265  002956  6E01               	movwf	lcdNibble@temp,c
  5266                           
  5267                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5268  002958  508C               	movf	3980,w,c	;volatile
  5269  00295A  0B0F               	andlw	15
  5270  00295C  6E8C               	movwf	3980,c	;volatile
  5271                           
  5272                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5273  00295E  5001               	movf	lcdNibble@temp,w,c
  5274  002960  108C               	iorwf	3980,w,c	;volatile
  5275  002962  6E8C               	movwf	3980,c	;volatile
  5276                           
  5277                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5278  002964  0E00               	movlw	0
  5279  002966  BEF2               	btfsc	intcon,7,c	;volatile
  5280  002968  0E01               	movlw	1
  5281  00296A  6E7E               	movwf	lcd@LCDinterruptState,c
  5282  00296C  9EF2               	bcf	intcon,7,c	;volatile
  5283  00296E  868C               	bsf	3980,3,c	;volatile
  5284  002970  0E53               	movlw	83
  5285  002972                     u3187:
  5286  002972  2EE8               	decfsz	wreg,f,c
  5287  002974  D7FE               	bra	u3187
  5288  002976  F000               	nop	
  5289  002978  968C               	bcf	3980,3,c	;volatile
  5290  00297A  0EC8               	movlw	200
  5291  00297C                     u3197:
  5292  00297C  D000               	nop2	
  5293  00297E  2EE8               	decfsz	wreg,f,c
  5294  002980  D7FD               	bra	u3197
  5295  002982  B07E               	btfsc	lcd@LCDinterruptState,0,c
  5296  002984  D002               	bra	u1495
  5297  002986  9EF2               	bcf	intcon,7,c	;volatile
  5298  002988  D001               	bra	u1496
  5299  00298A                     u1495:
  5300  00298A  8EF2               	bsf	intcon,7,c	;volatile
  5301  00298C                     u1496:
  5302                           
  5303                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5304  00298C  3802               	swapf	lcdNibble@data,w,c
  5305  00298E  0BF0               	andlw	240
  5306  002990  6E02               	movwf	lcdNibble@data,c
  5307                           
  5308                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5309  002992  5002               	movf	lcdNibble@data,w,c
  5310  002994  0BF0               	andlw	240
  5311  002996  6E01               	movwf	lcdNibble@temp,c
  5312                           
  5313                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5314  002998  508C               	movf	3980,w,c	;volatile
  5315  00299A  0B0F               	andlw	15
  5316  00299C  6E8C               	movwf	3980,c	;volatile
  5317                           
  5318                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5319  00299E  5001               	movf	lcdNibble@temp,w,c
  5320  0029A0  108C               	iorwf	3980,w,c	;volatile
  5321  0029A2  6E8C               	movwf	3980,c	;volatile
  5322                           
  5323                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5324  0029A4  0E00               	movlw	0
  5325  0029A6  BEF2               	btfsc	intcon,7,c	;volatile
  5326  0029A8  0E01               	movlw	1
  5327  0029AA  6E7E               	movwf	lcd@LCDinterruptState,c
  5328  0029AC  9EF2               	bcf	intcon,7,c	;volatile
  5329  0029AE  868C               	bsf	3980,3,c	;volatile
  5330  0029B0  0E53               	movlw	83
  5331  0029B2                     u3207:
  5332  0029B2  2EE8               	decfsz	wreg,f,c
  5333  0029B4  D7FE               	bra	u3207
  5334  0029B6  F000               	nop	
  5335  0029B8  968C               	bcf	3980,3,c	;volatile
  5336  0029BA  0EC8               	movlw	200
  5337  0029BC                     u3217:
  5338  0029BC  D000               	nop2	
  5339  0029BE  2EE8               	decfsz	wreg,f,c
  5340  0029C0  D7FD               	bra	u3217
  5341  0029C2  B07E               	btfsc	lcd@LCDinterruptState,0,c
  5342  0029C4  D002               	bra	u1505
  5343  0029C6  9EF2               	bcf	intcon,7,c	;volatile
  5344  0029C8  D001               	bra	u1506
  5345  0029CA                     u1505:
  5346  0029CA  8EF2               	bsf	intcon,7,c	;volatile
  5347  0029CC                     u1506:
  5348  0029CC  0012               	return		;funcret
  5349  0029CE                     __end_of_lcdNibble:
  5350                           	opt stack 0
  5351                           tblptru	equ	0xFF8
  5352                           tblptrh	equ	0xFF7
  5353                           tblptrl	equ	0xFF6
  5354                           tablat	equ	0xFF5
  5355                           prodh	equ	0xFF4
  5356                           prodl	equ	0xFF3
  5357                           intcon	equ	0xFF2
  5358                           postinc0	equ	0xFEE
  5359                           wreg	equ	0xFE8
  5360                           postdec1	equ	0xFE5
  5361                           plusw1	equ	0xFE3
  5362                           fsr1h	equ	0xFE2
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           plusw2	equ	0xFDB
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _average *****************
  5373 ;; Defined at:
  5374 ;;		line 31 in file "main.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  array           2   13[COMRAM] PTR unsigned char 
  5377 ;;		 -> main@readBuffer(512), 
  5378 ;;  numElements     2   15[COMRAM] unsigned short 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  sum             4   18[COMRAM] unsigned long 
  5381 ;;  n               2   22[COMRAM] unsigned short 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      unsigned char 
  5384 ;; Registers used:
  5385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;Total ram usage:       11 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    1
  5398 ;; This function calls:
  5399 ;;		___lldiv
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text17
  5406  002AB8                     __ptext17:
  5407                           	opt stack 0
  5408  002AB8                     _average:
  5409                           	opt stack 29
  5410                           
  5411                           ;main.c: 41: unsigned short n = 0;
  5412                           
  5413                           ;incstack = 0
  5414  002AB8  0E00               	movlw	0
  5415  002ABA  6E18               	movwf	average@n+1,c
  5416  002ABC  0E00               	movlw	0
  5417  002ABE  6E17               	movwf	average@n,c
  5418                           
  5419                           ;main.c: 42: unsigned long sum = 0;
  5420  002AC0  0E00               	movlw	0
  5421  002AC2  6E13               	movwf	average@sum,c
  5422  002AC4  0E00               	movlw	0
  5423  002AC6  6E14               	movwf	average@sum+1,c
  5424  002AC8  0E00               	movlw	0
  5425  002ACA  6E15               	movwf	average@sum+2,c
  5426  002ACC  0E00               	movlw	0
  5427  002ACE  6E16               	movwf	average@sum+3,c
  5428                           
  5429                           ;main.c: 43: while(n < numElements){
  5430  002AD0  D010               	goto	l2703
  5431  002AD2                     l2699:
  5432                           
  5433                           ;main.c: 44: sum += array[n];
  5434  002AD2  5017               	movf	average@n,w,c
  5435  002AD4  240E               	addwf	average@array,w,c
  5436  002AD6  6ED9               	movwf	fsr2l,c
  5437  002AD8  5018               	movf	average@n+1,w,c
  5438  002ADA  200F               	addwfc	average@array+1,w,c
  5439  002ADC  6EDA               	movwf	fsr2h,c
  5440  002ADE  50DF               	movf	indf2,w,c
  5441  002AE0  6E12               	movwf	??_average& (0+255),c
  5442  002AE2  5012               	movf	??_average,w,c
  5443  002AE4  2613               	addwf	average@sum,f,c
  5444  002AE6  0E00               	movlw	0
  5445  002AE8  2214               	addwfc	average@sum+1,f,c
  5446  002AEA  2215               	addwfc	average@sum+2,f,c
  5447  002AEC  2216               	addwfc	average@sum+3,f,c
  5448                           
  5449                           ;main.c: 45: n++;
  5450  002AEE  4A17               	infsnz	average@n,f,c
  5451  002AF0  2A18               	incf	average@n+1,f,c
  5452  002AF2                     l2703:
  5453  002AF2  5010               	movf	average@numElements,w,c
  5454  002AF4  5C17               	subwf	average@n,w,c
  5455  002AF6  5011               	movf	average@numElements+1,w,c
  5456  002AF8  5818               	subwfb	average@n+1,w,c
  5457  002AFA  A0D8               	btfss	status,0,c
  5458  002AFC  D7EA               	goto	l2699
  5459                           
  5460                           ;main.c: 46: }
  5461                           ;main.c: 47: return sum / numElements;
  5462  002AFE  C013  F001         	movff	average@sum,___lldiv@dividend
  5463  002B02  C014  F002         	movff	average@sum+1,___lldiv@dividend+1
  5464  002B06  C015  F003         	movff	average@sum+2,___lldiv@dividend+2
  5465  002B0A  C016  F004         	movff	average@sum+3,___lldiv@dividend+3
  5466  002B0E  C010  F005         	movff	average@numElements,___lldiv@divisor
  5467  002B12  C011  F006         	movff	average@numElements+1,___lldiv@divisor+1
  5468  002B16  6A07               	clrf	___lldiv@divisor+2,c
  5469  002B18  6A08               	clrf	___lldiv@divisor+3,c
  5470  002B1A  EC67  F014         	call	___lldiv	;wreg free
  5471  002B1E  5001               	movf	?___lldiv,w,c
  5472  002B20  0012               	return	
  5473  002B22                     __end_of_average:
  5474                           	opt stack 0
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           postdec1	equ	0xFE5
  5485                           plusw1	equ	0xFE3
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           plusw2	equ	0xFDB
  5492                           fsr2h	equ	0xFDA
  5493                           fsr2l	equ	0xFD9
  5494                           status	equ	0xFD8
  5495                           
  5496 ;; *************** function ___lldiv *****************
  5497 ;; Defined at:
  5498 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  dividend        4    0[COMRAM] unsigned long 
  5501 ;;  divisor         4    4[COMRAM] unsigned long 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  quotient        4    8[COMRAM] unsigned long 
  5504 ;;  counter         1   12[COMRAM] unsigned char 
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  4    0[COMRAM] unsigned long 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2, status,0
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5514 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;Total ram usage:       13 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_average
  5524 ;;		_main
  5525 ;;		_printf
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text18
  5530  0028CE                     __ptext18:
  5531                           	opt stack 0
  5532  0028CE                     ___lldiv:
  5533                           	opt stack 29
  5534                           
  5535                           ;incstack = 0
  5536  0028CE  0E00               	movlw	0
  5537  0028D0  6E09               	movwf	___lldiv@quotient,c
  5538  0028D2  0E00               	movlw	0
  5539  0028D4  6E0A               	movwf	___lldiv@quotient+1,c
  5540  0028D6  0E00               	movlw	0
  5541  0028D8  6E0B               	movwf	___lldiv@quotient+2,c
  5542  0028DA  0E00               	movlw	0
  5543  0028DC  6E0C               	movwf	___lldiv@quotient+3,c
  5544  0028DE  5005               	movf	___lldiv@divisor,w,c
  5545  0028E0  1006               	iorwf	___lldiv@divisor+1,w,c
  5546  0028E2  1007               	iorwf	___lldiv@divisor+2,w,c
  5547  0028E4  1008               	iorwf	___lldiv@divisor+3,w,c
  5548  0028E6  B4D8               	btfsc	status,2,c
  5549  0028E8  D02A               	goto	l909
  5550  0028EA  0E01               	movlw	1
  5551  0028EC  6E0D               	movwf	___lldiv@counter,c
  5552  0028EE  D006               	goto	l2653
  5553  0028F0                     l2651:
  5554  0028F0  90D8               	bcf	status,0,c
  5555  0028F2  3605               	rlcf	___lldiv@divisor,f,c
  5556  0028F4  3606               	rlcf	___lldiv@divisor+1,f,c
  5557  0028F6  3607               	rlcf	___lldiv@divisor+2,f,c
  5558  0028F8  3608               	rlcf	___lldiv@divisor+3,f,c
  5559  0028FA  2A0D               	incf	___lldiv@counter,f,c
  5560  0028FC                     l2653:
  5561  0028FC  AE08               	btfss	___lldiv@divisor+3,7,c
  5562  0028FE  D7F8               	goto	l2651
  5563  002900                     l2655:
  5564  002900  90D8               	bcf	status,0,c
  5565  002902  3609               	rlcf	___lldiv@quotient,f,c
  5566  002904  360A               	rlcf	___lldiv@quotient+1,f,c
  5567  002906  360B               	rlcf	___lldiv@quotient+2,f,c
  5568  002908  360C               	rlcf	___lldiv@quotient+3,f,c
  5569  00290A  5005               	movf	___lldiv@divisor,w,c
  5570  00290C  5C01               	subwf	___lldiv@dividend,w,c
  5571  00290E  5006               	movf	___lldiv@divisor+1,w,c
  5572  002910  5802               	subwfb	___lldiv@dividend+1,w,c
  5573  002912  5007               	movf	___lldiv@divisor+2,w,c
  5574  002914  5803               	subwfb	___lldiv@dividend+2,w,c
  5575  002916  5008               	movf	___lldiv@divisor+3,w,c
  5576  002918  5804               	subwfb	___lldiv@dividend+3,w,c
  5577  00291A  A0D8               	btfss	status,0,c
  5578  00291C  D009               	goto	l2663
  5579  00291E  5005               	movf	___lldiv@divisor,w,c
  5580  002920  5E01               	subwf	___lldiv@dividend,f,c
  5581  002922  5006               	movf	___lldiv@divisor+1,w,c
  5582  002924  5A02               	subwfb	___lldiv@dividend+1,f,c
  5583  002926  5007               	movf	___lldiv@divisor+2,w,c
  5584  002928  5A03               	subwfb	___lldiv@dividend+2,f,c
  5585  00292A  5008               	movf	___lldiv@divisor+3,w,c
  5586  00292C  5A04               	subwfb	___lldiv@dividend+3,f,c
  5587  00292E  8009               	bsf	___lldiv@quotient,0,c
  5588  002930                     l2663:
  5589  002930  90D8               	bcf	status,0,c
  5590  002932  3208               	rrcf	___lldiv@divisor+3,f,c
  5591  002934  3207               	rrcf	___lldiv@divisor+2,f,c
  5592  002936  3206               	rrcf	___lldiv@divisor+1,f,c
  5593  002938  3205               	rrcf	___lldiv@divisor,f,c
  5594  00293A  2E0D               	decfsz	___lldiv@counter,f,c
  5595  00293C  D7E1               	goto	l2655
  5596  00293E                     l909:
  5597  00293E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5598  002942  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5599  002946  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5600  00294A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5601  00294E  0012               	return		;funcret
  5602  002950                     __end_of___lldiv:
  5603                           	opt stack 0
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           prodh	equ	0xFF4
  5609                           prodl	equ	0xFF3
  5610                           intcon	equ	0xFF2
  5611                           postinc0	equ	0xFEE
  5612                           wreg	equ	0xFE8
  5613                           postdec1	equ	0xFE5
  5614                           plusw1	equ	0xFE3
  5615                           fsr1h	equ	0xFE2
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           plusw2	equ	0xFDB
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _SD_SingleBlockWrite *****************
  5626 ;; Defined at:
  5627 ;;		line 104 in file "SD_PIC.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  block           4   12[COMRAM] unsigned long 
  5630 ;;  arr             2   16[COMRAM] PTR unsigned char 
  5631 ;;		 -> writeBuffer(512), 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  i               2   20[COMRAM] unsigned short 
  5634 ;;  response        1   19[COMRAM] unsigned char 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      unsigned char 
  5637 ;; Registers used:
  5638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5644 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;Total ram usage:       10 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    3
  5651 ;; This function calls:
  5652 ;;		_SD_Command
  5653 ;;		_SD_SendDummyBytes
  5654 ;;		_spiReceive
  5655 ;;		_spiSend
  5656 ;;		_spiTransfer
  5657 ;; This function is called by:
  5658 ;;		_main
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           	psect	text19
  5663  0024E2                     __ptext19:
  5664                           	opt stack 0
  5665  0024E2                     _SD_SingleBlockWrite:
  5666                           	opt stack 27
  5667                           
  5668                           ;SD_PIC.c: 118: if(SDCard.Type == 0){ block <<= 9; }
  5669                           
  5670                           ;incstack = 0
  5671  0024E2  0100               	movlb	0	; () banked
  5672  0024E4  5181               	movf	(_SDCard+1)& (0+255),w,b
  5673  0024E6  A4D8               	btfss	status,2,c
  5674  0024E8  D008               	goto	l3049
  5675                           
  5676                           ; BSR set to: 0
  5677  0024EA  0E09               	movlw	9
  5678  0024EC                     u2465:
  5679  0024EC  90D8               	bcf	status,0,c
  5680  0024EE  360D               	rlcf	SD_SingleBlockWrite@block,f,c
  5681  0024F0  360E               	rlcf	SD_SingleBlockWrite@block+1,f,c
  5682  0024F2  360F               	rlcf	SD_SingleBlockWrite@block+2,f,c
  5683  0024F4  3610               	rlcf	SD_SingleBlockWrite@block+3,f,c
  5684  0024F6  2EE8               	decfsz	wreg,f,c
  5685  0024F8  D7F9               	goto	u2465
  5686  0024FA                     l3049:
  5687  0024FA  C00D  F004         	movff	SD_SingleBlockWrite@block,SD_Command@arg
  5688  0024FE  C00E  F005         	movff	SD_SingleBlockWrite@block+1,SD_Command@arg+1
  5689  002502  C00F  F006         	movff	SD_SingleBlockWrite@block+2,SD_Command@arg+2
  5690  002506  C010  F007         	movff	SD_SingleBlockWrite@block+3,SD_Command@arg+3
  5691  00250A  0E3E               	movlw	low _CMD24
  5692  00250C  6EF6               	movwf	tblptrl,c
  5693  00250E                     	if	1	;There is more than 1 active tblptr byte
  5694  00250E  0E10               	movlw	high _CMD24
  5695  002510  6EF7               	movwf	tblptrh,c
  5696  002512                     	endif
  5697  002512                     	if	0	;There are less than 3 active tblptr bytes
  5698  002512                     	endif
  5699  002512  0008               	tblrd		*
  5700  002514  50F5               	movf	tablat,w,c
  5701  002516  EC95  F013         	call	_SD_Command
  5702  00251A  6E13               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5703  00251C  0E34               	movlw	low _R1_READY_STATE
  5704  00251E  6EF6               	movwf	tblptrl,c
  5705  002520                     	if	1	;There is more than 1 active tblptr byte
  5706  002520  0E10               	movlw	high _R1_READY_STATE
  5707  002522  6EF7               	movwf	tblptrh,c
  5708  002524                     	endif
  5709  002524                     	if	0	;There are less than 3 active tblptr bytes
  5710  002524                     	endif
  5711  002524  0008               	tblrd		*
  5712  002526  50F5               	movf	tablat,w,c
  5713  002528  1813               	xorwf	??_SD_SingleBlockWrite,w,c
  5714  00252A  A4D8               	btfss	status,2,c
  5715  00252C  D7E6               	goto	l3049
  5716                           
  5717                           ;SD_PIC.c: 124: LATEbits.LATE2 = 0;
  5718  00252E  948D               	bcf	3981,2,c	;volatile
  5719                           
  5720                           ;SD_PIC.c: 125: spiSend(START_BLOCK);
  5721  002530  0E31               	movlw	low _START_BLOCK
  5722  002532  6EF6               	movwf	tblptrl,c
  5723  002534                     	if	1	;There is more than 1 active tblptr byte
  5724  002534  0E10               	movlw	high _START_BLOCK
  5725  002536  6EF7               	movwf	tblptrh,c
  5726  002538                     	endif
  5727  002538                     	if	0	;There are less than 3 active tblptr bytes
  5728  002538                     	endif
  5729  002538  0008               	tblrd		*
  5730  00253A  50F5               	movf	tablat,w,c
  5731  00253C  EC0A  F017         	call	_spiSend
  5732                           
  5733                           ;SD_PIC.c: 128: for(unsigned short i = 0; i < 512; i++){
  5734  002540  0E00               	movlw	0
  5735  002542  6E16               	movwf	SD_SingleBlockWrite@i+1,c
  5736  002544  0E00               	movlw	0
  5737  002546  6E15               	movwf	SD_SingleBlockWrite@i,c
  5738  002548                     l3055:
  5739  002548  0E02               	movlw	2
  5740  00254A  5C16               	subwf	SD_SingleBlockWrite@i+1,w,c
  5741  00254C  B0D8               	btfsc	status,0,c
  5742  00254E  D00C               	goto	l3065
  5743                           
  5744                           ;SD_PIC.c: 129: spiTransfer(arr[i]);
  5745  002550  5015               	movf	SD_SingleBlockWrite@i,w,c
  5746  002552  2411               	addwf	SD_SingleBlockWrite@arr,w,c
  5747  002554  6ED9               	movwf	fsr2l,c
  5748  002556  5016               	movf	SD_SingleBlockWrite@i+1,w,c
  5749  002558  2012               	addwfc	SD_SingleBlockWrite@arr+1,w,c
  5750  00255A  6EDA               	movwf	fsr2h,c
  5751  00255C  50DF               	movf	indf2,w,c
  5752  00255E  ECCA  F016         	call	_spiTransfer
  5753  002562  4A15               	infsnz	SD_SingleBlockWrite@i,f,c
  5754  002564  2A16               	incf	SD_SingleBlockWrite@i+1,f,c
  5755  002566  D7F0               	goto	l3055
  5756  002568                     l3065:
  5757                           
  5758                           ;SD_PIC.c: 130: }
  5759                           ;SD_PIC.c: 133: SD_SendDummyBytes(2);
  5760  002568  0E02               	movlw	2
  5761  00256A  ECEA  F016         	call	_SD_SendDummyBytes
  5762                           
  5763                           ;SD_PIC.c: 136: unsigned char response = (spiReceive() >> 1) & 0x0F;
  5764  00256E  EC0F  F017         	call	_spiReceive	;wreg free
  5765  002572  6E13               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5766  002574  90D8               	bcf	status,0,c
  5767  002576  3013               	rrcf	??_SD_SingleBlockWrite,w,c
  5768  002578  0B0F               	andlw	15
  5769  00257A  6E14               	movwf	SD_SingleBlockWrite@response,c
  5770                           
  5771                           ;SD_PIC.c: 137: LATEbits.LATE2 = 1;
  5772  00257C  848D               	bsf	3981,2,c	;volatile
  5773                           
  5774                           ;SD_PIC.c: 138: switch(response){
  5775  00257E  D015               	goto	l3089
  5776  002580                     l348:
  5777                           
  5778                           ;SD_PIC.c: 143: SDCard.write.lastBlockWritten = block;
  5779  002580  C00D  F09C         	movff	SD_SingleBlockWrite@block,_SDCard+28
  5780  002584  C00E  F09D         	movff	SD_SingleBlockWrite@block+1,_SDCard+29
  5781  002588  C00F  F09E         	movff	SD_SingleBlockWrite@block+2,_SDCard+30
  5782  00258C  C010  F09F         	movff	SD_SingleBlockWrite@block+3,_SDCard+31
  5783  002590                     l3069:
  5784  002590  EC0F  F017         	call	_spiReceive	;wreg free
  5785  002594  0900               	iorlw	0
  5786  002596  B4D8               	btfsc	status,2,c
  5787  002598  D7FB               	goto	l3069
  5788                           
  5789                           ;SD_PIC.c: 147: return 1;
  5790  00259A  0E01               	movlw	1
  5791  00259C  0012               	return	
  5792  00259E                     l3075:
  5793                           
  5794                           ;SD_PIC.c: 150: return 0;
  5795  00259E  0E00               	movlw	0
  5796  0025A0  0012               	return	
  5797  0025A2                     l3079:
  5798                           
  5799                           ;SD_PIC.c: 153: return 0;
  5800  0025A2  0E00               	movlw	0
  5801  0025A4  0012               	return	
  5802  0025A6                     l3083:
  5803                           
  5804                           ;SD_PIC.c: 155: return 0;
  5805  0025A6  0E00               	movlw	0
  5806                           
  5807                           ;SD_PIC.c: 156: }
  5808  0025A8  0012               	return	
  5809  0025AA                     l3089:
  5810  0025AA  5014               	movf	SD_SingleBlockWrite@response,w,c
  5811                           
  5812                           ; Switch size 1, requested type "space"
  5813                           ; Number of cases is 3, Range of values is 2 to 6
  5814                           ; switch strategies available:
  5815                           ; Name         Instructions Cycles
  5816                           ; simple_byte           10     6 (average)
  5817                           ;	Chosen strategy is simple_byte
  5818  0025AC  0A02               	xorlw	2	; case 2
  5819  0025AE  B4D8               	btfsc	status,2,c
  5820  0025B0  D7E7               	goto	l348
  5821  0025B2  0A07               	xorlw	7	; case 5
  5822  0025B4  B4D8               	btfsc	status,2,c
  5823  0025B6  D7F3               	goto	l3075
  5824  0025B8  0A03               	xorlw	3	; case 6
  5825  0025BA  B4D8               	btfsc	status,2,c
  5826  0025BC  D7F2               	goto	l3079
  5827  0025BE  D7F3               	goto	l3083
  5828  0025C0                     __end_of_SD_SingleBlockWrite:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           intcon	equ	0xFF2
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           plusw1	equ	0xFE3
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           plusw2	equ	0xFDB
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _SD_SingleBlockRead *****************
  5852 ;; Defined at:
  5853 ;;		line 278 in file "SD_PIC.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  block           4   12[COMRAM] unsigned long 
  5856 ;;  buf             2   16[COMRAM] PTR unsigned char 
  5857 ;;		 -> main@readBuffer(512), 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  i               2   19[COMRAM] unsigned short 
  5860 ;;  response        1   21[COMRAM] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      unsigned char 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5870 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;Total ram usage:       10 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    3
  5877 ;; This function calls:
  5878 ;;		_SD_Command
  5879 ;;		_spiReceive
  5880 ;;		_spiSend
  5881 ;; This function is called by:
  5882 ;;		_main
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text20
  5887  0025C0                     __ptext20:
  5888                           	opt stack 0
  5889  0025C0                     _SD_SingleBlockRead:
  5890                           	opt stack 27
  5891                           
  5892                           ;SD_PIC.c: 293: if(SDCard.Type == 0){ block <<= 9; }
  5893                           
  5894                           ;incstack = 0
  5895  0025C0  0100               	movlb	0	; () banked
  5896  0025C2  5181               	movf	(_SDCard+1)& (0+255),w,b
  5897  0025C4  A4D8               	btfss	status,2,c
  5898  0025C6  D008               	goto	l3185
  5899                           
  5900                           ; BSR set to: 0
  5901  0025C8  0E09               	movlw	9
  5902  0025CA                     u2645:
  5903  0025CA  90D8               	bcf	status,0,c
  5904  0025CC  360D               	rlcf	SD_SingleBlockRead@block,f,c
  5905  0025CE  360E               	rlcf	SD_SingleBlockRead@block+1,f,c
  5906  0025D0  360F               	rlcf	SD_SingleBlockRead@block+2,f,c
  5907  0025D2  3610               	rlcf	SD_SingleBlockRead@block+3,f,c
  5908  0025D4  2EE8               	decfsz	wreg,f,c
  5909  0025D6  D7F9               	goto	u2645
  5910  0025D8                     l3185:
  5911                           
  5912                           ;SD_PIC.c: 299: response = SD_Command(CMD17, block);
  5913  0025D8  C00D  F004         	movff	SD_SingleBlockRead@block,SD_Command@arg
  5914  0025DC  C00E  F005         	movff	SD_SingleBlockRead@block+1,SD_Command@arg+1
  5915  0025E0  C00F  F006         	movff	SD_SingleBlockRead@block+2,SD_Command@arg+2
  5916  0025E4  C010  F007         	movff	SD_SingleBlockRead@block+3,SD_Command@arg+3
  5917  0025E8  0E40               	movlw	low _CMD17
  5918  0025EA  6EF6               	movwf	tblptrl,c
  5919  0025EC                     	if	1	;There is more than 1 active tblptr byte
  5920  0025EC  0E10               	movlw	high _CMD17
  5921  0025EE  6EF7               	movwf	tblptrh,c
  5922  0025F0                     	endif
  5923  0025F0                     	if	0	;There are less than 3 active tblptr bytes
  5924  0025F0                     	endif
  5925  0025F0  0008               	tblrd		*
  5926  0025F2  50F5               	movf	tablat,w,c
  5927  0025F4  EC95  F013         	call	_SD_Command
  5928  0025F8  6E16               	movwf	SD_SingleBlockRead@response,c
  5929                           
  5930                           ;SD_PIC.c: 300: if((response & 0x0F) != 0){
  5931  0025FA  C016  F013         	movff	SD_SingleBlockRead@response,??_SD_SingleBlockRead
  5932  0025FE  0E0F               	movlw	15
  5933  002600  1613               	andwf	??_SD_SingleBlockRead,f,c
  5934  002602  B4D8               	btfsc	status,2,c
  5935  002604  D002               	goto	l3193
  5936                           
  5937                           ;SD_PIC.c: 306: return 0;
  5938  002606  0E00               	movlw	0
  5939  002608  0012               	return	
  5940  00260A                     l3193:
  5941                           
  5942                           ;SD_PIC.c: 307: }
  5943                           ;SD_PIC.c: 308: }while(response != R1_READY_STATE);
  5944  00260A  0E34               	movlw	low _R1_READY_STATE
  5945  00260C  6EF6               	movwf	tblptrl,c
  5946  00260E                     	if	1	;There is more than 1 active tblptr byte
  5947  00260E  0E10               	movlw	high _R1_READY_STATE
  5948  002610  6EF7               	movwf	tblptrh,c
  5949  002612                     	endif
  5950  002612                     	if	0	;There are less than 3 active tblptr bytes
  5951  002612                     	endif
  5952  002612  0008               	tblrd		*
  5953  002614  50F5               	movf	tablat,w,c
  5954  002616  6216               	cpfseq	SD_SingleBlockRead@response,c
  5955  002618  D7DF               	goto	l3185
  5956                           
  5957                           ;SD_PIC.c: 311: LATEbits.LATE2 = 0;
  5958  00261A  948D               	bcf	3981,2,c	;volatile
  5959  00261C                     l3195:
  5960                           
  5961                           ;SD_PIC.c: 313: response = spiReceive();
  5962  00261C  EC0F  F017         	call	_spiReceive	;wreg free
  5963  002620  6E16               	movwf	SD_SingleBlockRead@response,c
  5964                           
  5965                           ;SD_PIC.c: 314: }while(response != START_BLOCK);
  5966  002622  0E31               	movlw	low _START_BLOCK
  5967  002624  6EF6               	movwf	tblptrl,c
  5968  002626                     	if	1	;There is more than 1 active tblptr byte
  5969  002626  0E10               	movlw	high _START_BLOCK
  5970  002628  6EF7               	movwf	tblptrh,c
  5971  00262A                     	endif
  5972  00262A                     	if	0	;There are less than 3 active tblptr bytes
  5973  00262A                     	endif
  5974  00262A  0008               	tblrd		*
  5975  00262C  50F5               	movf	tablat,w,c
  5976  00262E  6216               	cpfseq	SD_SingleBlockRead@response,c
  5977  002630  D7F5               	goto	l3195
  5978                           
  5979                           ;SD_PIC.c: 317: for(unsigned short i = 0; i < 512; i++){
  5980  002632  0E00               	movlw	0
  5981  002634  6E15               	movwf	SD_SingleBlockRead@i+1,c
  5982  002636  0E00               	movlw	0
  5983  002638  6E14               	movwf	SD_SingleBlockRead@i,c
  5984  00263A                     l3201:
  5985  00263A  0E02               	movlw	2
  5986  00263C  5C15               	subwf	SD_SingleBlockRead@i+1,w,c
  5987  00263E  B0D8               	btfsc	status,0,c
  5988  002640  D00C               	goto	l3211
  5989                           
  5990                           ;SD_PIC.c: 318: buf[i] = spiReceive();
  5991  002642  5014               	movf	SD_SingleBlockRead@i,w,c
  5992  002644  2411               	addwf	SD_SingleBlockRead@buf,w,c
  5993  002646  6ED9               	movwf	fsr2l,c
  5994  002648  5015               	movf	SD_SingleBlockRead@i+1,w,c
  5995  00264A  2012               	addwfc	SD_SingleBlockRead@buf+1,w,c
  5996  00264C  6EDA               	movwf	fsr2h,c
  5997  00264E  EC0F  F017         	call	_spiReceive	;wreg free
  5998  002652  6EDF               	movwf	indf2,c
  5999  002654  4A14               	infsnz	SD_SingleBlockRead@i,f,c
  6000  002656  2A15               	incf	SD_SingleBlockRead@i+1,f,c
  6001  002658  D7F0               	goto	l3201
  6002  00265A                     l3211:
  6003                           
  6004                           ;SD_PIC.c: 319: }
  6005                           ;SD_PIC.c: 322: spiSend(0xFF);
  6006  00265A  0EFF               	movlw	255
  6007  00265C  EC0A  F017         	call	_spiSend
  6008                           
  6009                           ;SD_PIC.c: 323: spiSend(0xFF);
  6010  002660  0EFF               	movlw	255
  6011  002662  EC0A  F017         	call	_spiSend
  6012                           
  6013                           ;SD_PIC.c: 324: LATEbits.LATE2 = 1;
  6014  002666  848D               	bsf	3981,2,c	;volatile
  6015                           
  6016                           ;SD_PIC.c: 327: SDCard.read.lastBlockRead = block;
  6017  002668  C00D  F0A5         	movff	SD_SingleBlockRead@block,_SDCard+37
  6018  00266C  C00E  F0A6         	movff	SD_SingleBlockRead@block+1,_SDCard+38
  6019  002670  C00F  F0A7         	movff	SD_SingleBlockRead@block+2,_SDCard+39
  6020  002674  C010  F0A8         	movff	SD_SingleBlockRead@block+3,_SDCard+40
  6021                           
  6022                           ;SD_PIC.c: 329: return 1;
  6023  002678  0E01               	movlw	1
  6024  00267A  0012               	return	
  6025  00267C                     __end_of_SD_SingleBlockRead:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           postdec1	equ	0xFE5
  6037                           plusw1	equ	0xFE3
  6038                           fsr1h	equ	0xFE2
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           postinc2	equ	0xFDE
  6042                           postdec2	equ	0xFDD
  6043                           plusw2	equ	0xFDB
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function _SD_MBW_Stop *****************
  6049 ;; Defined at:
  6050 ;;		line 253 in file "SD_PIC.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, tblptrl, tblptrh, tblptru, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    2
  6071 ;; This function calls:
  6072 ;;		_spiReceive
  6073 ;;		_spiSend
  6074 ;; This function is called by:
  6075 ;;		_main
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text21
  6080  002D18                     __ptext21:
  6081                           	opt stack 0
  6082  002D18                     _SD_MBW_Stop:
  6083                           	opt stack 28
  6084                           
  6085                           ;SD_PIC.c: 263: LATEbits.LATE2 = 0;
  6086                           
  6087                           ;incstack = 0
  6088  002D18  948D               	bcf	3981,2,c	;volatile
  6089  002D1A                     l3173:
  6090  002D1A  EC0F  F017         	call	_spiReceive	;wreg free
  6091  002D1E  0AFF               	xorlw	255
  6092  002D20  A4D8               	btfss	status,2,c
  6093  002D22  D7FB               	goto	l3173
  6094                           
  6095                           ;SD_PIC.c: 267: spiSend(STOP_TRAN);
  6096  002D24  0E2F               	movlw	low _STOP_TRAN
  6097  002D26  6EF6               	movwf	tblptrl,c
  6098  002D28                     	if	1	;There is more than 1 active tblptr byte
  6099  002D28  0E10               	movlw	high _STOP_TRAN
  6100  002D2A  6EF7               	movwf	tblptrh,c
  6101  002D2C                     	endif
  6102  002D2C                     	if	0	;There are less than 3 active tblptr bytes
  6103  002D2C                     	endif
  6104  002D2C  0008               	tblrd		*
  6105  002D2E  50F5               	movf	tablat,w,c
  6106  002D30  EC0A  F017         	call	_spiSend
  6107  002D34                     l3177:
  6108  002D34  EC0F  F017         	call	_spiReceive	;wreg free
  6109  002D38  0900               	iorlw	0
  6110  002D3A  B4D8               	btfsc	status,2,c
  6111  002D3C  D7FB               	goto	l3177
  6112                           
  6113                           ;SD_PIC.c: 271: LATEbits.LATE2 = 1;
  6114  002D3E  848D               	bsf	3981,2,c	;volatile
  6115                           
  6116                           ;SD_PIC.c: 274: SDCard.write.MBW_flag_first = 1;
  6117  002D40  0E01               	movlw	1
  6118  002D42  0100               	movlb	0	; () banked
  6119  002D44  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6120                           
  6121                           ; BSR set to: 0
  6122  002D46  0012               	return		;funcret
  6123  002D48                     __end_of_SD_MBW_Stop:
  6124                           	opt stack 0
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           intcon	equ	0xFF2
  6132                           postinc0	equ	0xFEE
  6133                           wreg	equ	0xFE8
  6134                           postdec1	equ	0xFE5
  6135                           plusw1	equ	0xFE3
  6136                           fsr1h	equ	0xFE2
  6137                           fsr1l	equ	0xFE1
  6138                           indf2	equ	0xFDF
  6139                           postinc2	equ	0xFDE
  6140                           postdec2	equ	0xFDD
  6141                           plusw2	equ	0xFDB
  6142                           fsr2h	equ	0xFDA
  6143                           fsr2l	equ	0xFD9
  6144                           status	equ	0xFD8
  6145                           
  6146 ;; *************** function _SD_MBW_Start *****************
  6147 ;; Defined at:
  6148 ;;		line 159 in file "SD_PIC.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  startBlock      4   17[COMRAM] unsigned long 
  6151 ;;  numBlocks       4   21[COMRAM] unsigned long 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6163 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;Total ram usage:        9 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    4
  6170 ;; This function calls:
  6171 ;;		_SD_ACMD
  6172 ;;		_SD_Command
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text22
  6179  0029CE                     __ptext22:
  6180                           	opt stack 0
  6181  0029CE                     _SD_MBW_Start:
  6182                           	opt stack 26
  6183                           
  6184                           ;SD_PIC.c: 173: if(SDCard.Type == 0){ startBlock <<= 9; }
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;incstack = 0
  6188  0029CE  0100               	movlb	0	; () banked
  6189  0029D0  5181               	movf	(_SDCard+1)& (0+255),w,b
  6190  0029D2  A4D8               	btfss	status,2,c
  6191  0029D4  D008               	goto	l3095
  6192                           
  6193                           ; BSR set to: 0
  6194  0029D6  0E09               	movlw	9
  6195  0029D8                     u2525:
  6196  0029D8  90D8               	bcf	status,0,c
  6197  0029DA  3612               	rlcf	SD_MBW_Start@startBlock,f,c
  6198  0029DC  3613               	rlcf	SD_MBW_Start@startBlock+1,f,c
  6199  0029DE  3614               	rlcf	SD_MBW_Start@startBlock+2,f,c
  6200  0029E0  3615               	rlcf	SD_MBW_Start@startBlock+3,f,c
  6201  0029E2  2EE8               	decfsz	wreg,f,c
  6202  0029E4  D7F9               	goto	u2525
  6203  0029E6                     l3095:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;SD_PIC.c: 176: SD_ACMD(ACMD23, numBlocks);
  6207  0029E6  C016  F00D         	movff	SD_MBW_Start@numBlocks,SD_ACMD@arg
  6208  0029EA  C017  F00E         	movff	SD_MBW_Start@numBlocks+1,SD_ACMD@arg+1
  6209  0029EE  C018  F00F         	movff	SD_MBW_Start@numBlocks+2,SD_ACMD@arg+2
  6210  0029F2  C019  F010         	movff	SD_MBW_Start@numBlocks+3,SD_ACMD@arg+3
  6211  0029F6  0E36               	movlw	low _ACMD23
  6212  0029F8  6EF6               	movwf	tblptrl,c
  6213  0029FA                     	if	1	;There is more than 1 active tblptr byte
  6214  0029FA  0E10               	movlw	high _ACMD23
  6215  0029FC  6EF7               	movwf	tblptrh,c
  6216  0029FE                     	endif
  6217  0029FE                     	if	0	;There are less than 3 active tblptr bytes
  6218  0029FE                     	endif
  6219  0029FE  0008               	tblrd		*
  6220  002A00  50F5               	movf	tablat,w,c
  6221  002A02  EC38  F016         	call	_SD_ACMD
  6222  002A06                     l3097:
  6223  002A06  C012  F004         	movff	SD_MBW_Start@startBlock,SD_Command@arg
  6224  002A0A  C013  F005         	movff	SD_MBW_Start@startBlock+1,SD_Command@arg+1
  6225  002A0E  C014  F006         	movff	SD_MBW_Start@startBlock+2,SD_Command@arg+2
  6226  002A12  C015  F007         	movff	SD_MBW_Start@startBlock+3,SD_Command@arg+3
  6227  002A16  0E3D               	movlw	low _CMD25
  6228  002A18  6EF6               	movwf	tblptrl,c
  6229  002A1A                     	if	1	;There is more than 1 active tblptr byte
  6230  002A1A  0E10               	movlw	high _CMD25
  6231  002A1C  6EF7               	movwf	tblptrh,c
  6232  002A1E                     	endif
  6233  002A1E                     	if	0	;There are less than 3 active tblptr bytes
  6234  002A1E                     	endif
  6235  002A1E  0008               	tblrd		*
  6236  002A20  50F5               	movf	tablat,w,c
  6237  002A22  EC95  F013         	call	_SD_Command
  6238  002A26  6E1A               	movwf	??_SD_MBW_Start& (0+255),c
  6239  002A28  0E34               	movlw	low _R1_READY_STATE
  6240  002A2A  6EF6               	movwf	tblptrl,c
  6241  002A2C                     	if	1	;There is more than 1 active tblptr byte
  6242  002A2C  0E10               	movlw	high _R1_READY_STATE
  6243  002A2E  6EF7               	movwf	tblptrh,c
  6244  002A30                     	endif
  6245  002A30                     	if	0	;There are less than 3 active tblptr bytes
  6246  002A30                     	endif
  6247  002A30  0008               	tblrd		*
  6248  002A32  50F5               	movf	tablat,w,c
  6249  002A34  181A               	xorwf	??_SD_MBW_Start,w,c
  6250  002A36  A4D8               	btfss	status,2,c
  6251  002A38  D7E6               	goto	l3097
  6252                           
  6253                           ;SD_PIC.c: 182: SDCard.write.MBW_startBlock = startBlock;
  6254  002A3A  C012  F0A0         	movff	SD_MBW_Start@startBlock,_SDCard+32
  6255  002A3E  C013  F0A1         	movff	SD_MBW_Start@startBlock+1,_SDCard+33
  6256  002A42  C014  F0A2         	movff	SD_MBW_Start@startBlock+2,_SDCard+34
  6257  002A46  C015  F0A3         	movff	SD_MBW_Start@startBlock+3,_SDCard+35
  6258  002A4A  0012               	return		;funcret
  6259  002A4C                     __end_of_SD_MBW_Start:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           intcon	equ	0xFF2
  6268                           postinc0	equ	0xFEE
  6269                           wreg	equ	0xFE8
  6270                           postdec1	equ	0xFE5
  6271                           plusw1	equ	0xFE3
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _SD_ACMD *****************
  6283 ;; Defined at:
  6284 ;;		line 88 in file "SD_PIC.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  cmd             1    wreg     unsigned char 
  6287 ;;  arg             4   12[COMRAM] unsigned long 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  cmd             1   16[COMRAM] unsigned char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      unsigned char 
  6292 ;; Registers used:
  6293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;Total ram usage:        5 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    3
  6306 ;; This function calls:
  6307 ;;		_SD_Command
  6308 ;; This function is called by:
  6309 ;;		_SD_MBW_Start
  6310 ;;		_initSD
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text23
  6315  002C70                     __ptext23:
  6316                           	opt stack 0
  6317  002C70                     _SD_ACMD:
  6318                           	opt stack 26
  6319                           
  6320                           ;incstack = 0
  6321                           ;SD_ACMD@cmd stored from wreg
  6322  002C70  6E11               	movwf	SD_ACMD@cmd,c
  6323                           
  6324                           ;SD_PIC.c: 99: SD_Command(CMD55, 0);
  6325  002C72  0E00               	movlw	0
  6326  002C74  6E04               	movwf	SD_Command@arg,c
  6327  002C76  0E00               	movlw	0
  6328  002C78  6E05               	movwf	SD_Command@arg+1,c
  6329  002C7A  0E00               	movlw	0
  6330  002C7C  6E06               	movwf	SD_Command@arg+2,c
  6331  002C7E  0E00               	movlw	0
  6332  002C80  6E07               	movwf	SD_Command@arg+3,c
  6333  002C82  0E39               	movlw	low _CMD55
  6334  002C84  6EF6               	movwf	tblptrl,c
  6335  002C86                     	if	1	;There is more than 1 active tblptr byte
  6336  002C86  0E10               	movlw	high _CMD55
  6337  002C88  6EF7               	movwf	tblptrh,c
  6338  002C8A                     	endif
  6339  002C8A                     	if	0	;There are less than 3 active tblptr bytes
  6340  002C8A                     	endif
  6341  002C8A  0008               	tblrd		*
  6342  002C8C  50F5               	movf	tablat,w,c
  6343  002C8E  EC95  F013         	call	_SD_Command
  6344                           
  6345                           ;SD_PIC.c: 100: return SD_Command(cmd, arg);
  6346  002C92  C00D  F004         	movff	SD_ACMD@arg,SD_Command@arg
  6347  002C96  C00E  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  6348  002C9A  C00F  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  6349  002C9E  C010  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  6350  002CA2  5011               	movf	SD_ACMD@cmd,w,c
  6351  002CA4  EC95  F013         	call	_SD_Command
  6352  002CA8  0012               	return	
  6353  002CAA                     __end_of_SD_ACMD:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           plusw1	equ	0xFE3
  6366                           fsr1h	equ	0xFE2
  6367                           fsr1l	equ	0xFE1
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           plusw2	equ	0xFDB
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _SD_MBW_Send *****************
  6377 ;; Defined at:
  6378 ;;		line 185 in file "SD_PIC.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  arrWrite        2   12[COMRAM] PTR unsigned char 
  6381 ;;		 -> writeBuffer(512), 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  i               2   16[COMRAM] unsigned short 
  6384 ;;  response        1   15[COMRAM] unsigned char 
  6385 ;;  status          1   14[COMRAM] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      unsigned char 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;Total ram usage:        6 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    3
  6402 ;; This function calls:
  6403 ;;		_SD_Command
  6404 ;;		_SD_SendDummyBytes
  6405 ;;		_spiReceive
  6406 ;;		_spiSend
  6407 ;;		_spiTransfer
  6408 ;; This function is called by:
  6409 ;;		_main
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text24
  6414  002110                     __ptext24:
  6415                           	opt stack 0
  6416  002110                     _SD_MBW_Send:
  6417                           	opt stack 27
  6418                           
  6419                           ;SD_PIC.c: 201: unsigned short i = 0;
  6420                           
  6421                           ;incstack = 0
  6422  002110  0E00               	movlw	0
  6423  002112  6E12               	movwf	SD_MBW_Send@i+1,c
  6424  002114  0E00               	movlw	0
  6425  002116  6E11               	movwf	SD_MBW_Send@i,c
  6426                           
  6427                           ;SD_PIC.c: 202: unsigned char response = 0;
  6428  002118  0E00               	movlw	0
  6429  00211A  6E10               	movwf	SD_MBW_Send@response,c
  6430                           
  6431                           ;SD_PIC.c: 203: unsigned char status = 0;
  6432  00211C  0E00               	movlw	0
  6433  00211E  6E0F               	movwf	SD_MBW_Send@status,c
  6434                           
  6435                           ;SD_PIC.c: 205: LATEbits.LATE2 = 0;
  6436  002120  948D               	bcf	3981,2,c	;volatile
  6437  002122                     l3103:
  6438  002122  EC0F  F017         	call	_spiReceive	;wreg free
  6439  002126  0AFF               	xorlw	255
  6440  002128  A4D8               	btfss	status,2,c
  6441  00212A  D7FB               	goto	l3103
  6442                           
  6443                           ;SD_PIC.c: 209: spiSend(START_BLOCK_TOKEN);
  6444  00212C  0E30               	movlw	low _START_BLOCK_TOKEN
  6445  00212E  6EF6               	movwf	tblptrl,c
  6446  002130                     	if	1	;There is more than 1 active tblptr byte
  6447  002130  0E10               	movlw	high _START_BLOCK_TOKEN
  6448  002132  6EF7               	movwf	tblptrh,c
  6449  002134                     	endif
  6450  002134                     	if	0	;There are less than 3 active tblptr bytes
  6451  002134                     	endif
  6452  002134  0008               	tblrd		*
  6453  002136  50F5               	movf	tablat,w,c
  6454  002138  EC0A  F017         	call	_spiSend
  6455                           
  6456                           ;SD_PIC.c: 212: for(i = 0; i < 512; i++){
  6457  00213C  0E00               	movlw	0
  6458  00213E  6E12               	movwf	SD_MBW_Send@i+1,c
  6459  002140  0E00               	movlw	0
  6460  002142  6E11               	movwf	SD_MBW_Send@i,c
  6461  002144                     l3109:
  6462  002144  0E02               	movlw	2
  6463  002146  5C12               	subwf	SD_MBW_Send@i+1,w,c
  6464  002148  B0D8               	btfsc	status,0,c
  6465  00214A  D00D               	goto	l3119
  6466                           
  6467                           ;SD_PIC.c: 213: response = spiTransfer(arrWrite[i]);
  6468  00214C  5011               	movf	SD_MBW_Send@i,w,c
  6469  00214E  240D               	addwf	SD_MBW_Send@arrWrite,w,c
  6470  002150  6ED9               	movwf	fsr2l,c
  6471  002152  5012               	movf	SD_MBW_Send@i+1,w,c
  6472  002154  200E               	addwfc	SD_MBW_Send@arrWrite+1,w,c
  6473  002156  6EDA               	movwf	fsr2h,c
  6474  002158  50DF               	movf	indf2,w,c
  6475  00215A  ECCA  F016         	call	_spiTransfer
  6476  00215E  6E10               	movwf	SD_MBW_Send@response,c
  6477  002160  4A11               	infsnz	SD_MBW_Send@i,f,c
  6478  002162  2A12               	incf	SD_MBW_Send@i+1,f,c
  6479  002164  D7EF               	goto	l3109
  6480  002166                     l3119:
  6481                           
  6482                           ;SD_PIC.c: 214: }
  6483                           ;SD_PIC.c: 217: SD_SendDummyBytes(2);
  6484  002166  0E02               	movlw	2
  6485  002168  ECEA  F016         	call	_SD_SendDummyBytes
  6486  00216C                     l371:
  6487                           
  6488                           ;SD_PIC.c: 221: response = spiReceive() & 0x1F;
  6489  00216C  EC0F  F017         	call	_spiReceive	;wreg free
  6490  002170  0B1F               	andlw	31
  6491  002172  6E10               	movwf	SD_MBW_Send@response,c
  6492                           
  6493                           ;SD_PIC.c: 222: }while(response == 0x1F);
  6494  002174  0E1F               	movlw	31
  6495  002176  1810               	xorwf	SD_MBW_Send@response,w,c
  6496  002178  B4D8               	btfsc	status,2,c
  6497  00217A  D7F8               	goto	l371
  6498                           
  6499                           ;SD_PIC.c: 223: LATEbits.LATE2 = 1;
  6500  00217C  848D               	bsf	3981,2,c	;volatile
  6501                           
  6502                           ;SD_PIC.c: 225: switch(response){
  6503  00217E  D03F               	goto	l3153
  6504  002180                     l3123:
  6505                           
  6506                           ;SD_PIC.c: 230: if(SDCard.write.MBW_flag_first){
  6507  002180  0100               	movlb	0	; () banked
  6508  002182  51A4               	movf	(_SDCard+36)& (0+255),w,b
  6509  002184  B4D8               	btfsc	status,2,c
  6510  002186  D00C               	goto	l3129
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;SD_PIC.c: 232: SDCard.write.lastBlockWritten = SDCard.write.MBW_startBlock;
  6514  002188  C0A0  F09C         	movff	_SDCard+32,_SDCard+28
  6515  00218C  C0A1  F09D         	movff	_SDCard+33,_SDCard+29
  6516  002190  C0A2  F09E         	movff	_SDCard+34,_SDCard+30
  6517  002194  C0A3  F09F         	movff	_SDCard+35,_SDCard+31
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;SD_PIC.c: 233: SDCard.write.MBW_flag_first = 0;
  6521  002198  0E00               	movlw	0
  6522  00219A  0100               	movlb	0	; () banked
  6523  00219C  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6524                           
  6525                           ;SD_PIC.c: 234: }
  6526  00219E  D007               	goto	l3131
  6527  0021A0                     l3129:
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;SD_PIC.c: 235: else{
  6531                           ;SD_PIC.c: 236: SDCard.write.lastBlockWritten++;
  6532  0021A0  0E01               	movlw	1
  6533  0021A2  0100               	movlb	0	; () banked
  6534  0021A4  279C               	addwf	(_SDCard+28)& (0+255),f,b
  6535  0021A6  0E00               	movlw	0
  6536  0021A8  239D               	addwfc	(_SDCard+29)& (0+255),f,b
  6537  0021AA  239E               	addwfc	(_SDCard+30)& (0+255),f,b
  6538  0021AC  239F               	addwfc	(_SDCard+31)& (0+255),f,b
  6539  0021AE                     l3131:
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;SD_PIC.c: 237: }
  6543                           ;SD_PIC.c: 239: return 1;
  6544  0021AE  0E01               	movlw	1
  6545                           
  6546                           ; BSR set to: 0
  6547  0021B0  0012               	return	
  6548  0021B2                     l3135:
  6549                           
  6550                           ;SD_PIC.c: 242: SD_Command(CMD12, 0);
  6551  0021B2  0E00               	movlw	0
  6552  0021B4  6E04               	movwf	SD_Command@arg,c
  6553  0021B6  0E00               	movlw	0
  6554  0021B8  6E05               	movwf	SD_Command@arg+1,c
  6555  0021BA  0E00               	movlw	0
  6556  0021BC  6E06               	movwf	SD_Command@arg+2,c
  6557  0021BE  0E00               	movlw	0
  6558  0021C0  6E07               	movwf	SD_Command@arg+3,c
  6559  0021C2  0E43               	movlw	low _CMD12
  6560  0021C4  6EF6               	movwf	tblptrl,c
  6561  0021C6                     	if	1	;There is more than 1 active tblptr byte
  6562  0021C6  0E10               	movlw	high _CMD12
  6563  0021C8  6EF7               	movwf	tblptrh,c
  6564  0021CA                     	endif
  6565  0021CA                     	if	0	;There are less than 3 active tblptr bytes
  6566  0021CA                     	endif
  6567  0021CA  0008               	tblrd		*
  6568  0021CC  50F5               	movf	tablat,w,c
  6569  0021CE  EC95  F013         	call	_SD_Command
  6570                           
  6571                           ;SD_PIC.c: 243: return 0;
  6572  0021D2  0E00               	movlw	0
  6573  0021D4  0012               	return	
  6574  0021D6                     l3141:
  6575                           
  6576                           ;SD_PIC.c: 246: SD_Command(CMD12, 0);
  6577  0021D6  0E00               	movlw	0
  6578  0021D8  6E04               	movwf	SD_Command@arg,c
  6579  0021DA  0E00               	movlw	0
  6580  0021DC  6E05               	movwf	SD_Command@arg+1,c
  6581  0021DE  0E00               	movlw	0
  6582  0021E0  6E06               	movwf	SD_Command@arg+2,c
  6583  0021E2  0E00               	movlw	0
  6584  0021E4  6E07               	movwf	SD_Command@arg+3,c
  6585  0021E6  0E43               	movlw	low _CMD12
  6586  0021E8  6EF6               	movwf	tblptrl,c
  6587  0021EA                     	if	1	;There is more than 1 active tblptr byte
  6588  0021EA  0E10               	movlw	high _CMD12
  6589  0021EC  6EF7               	movwf	tblptrh,c
  6590  0021EE                     	endif
  6591  0021EE                     	if	0	;There are less than 3 active tblptr bytes
  6592  0021EE                     	endif
  6593  0021EE  0008               	tblrd		*
  6594  0021F0  50F5               	movf	tablat,w,c
  6595  0021F2  EC95  F013         	call	_SD_Command
  6596                           
  6597                           ;SD_PIC.c: 247: return 0;
  6598  0021F6  0E00               	movlw	0
  6599  0021F8  0012               	return	
  6600  0021FA                     l3147:
  6601                           
  6602                           ;SD_PIC.c: 249: return 0;
  6603  0021FA  0E00               	movlw	0
  6604                           
  6605                           ;SD_PIC.c: 250: }
  6606  0021FC  0012               	return	
  6607  0021FE                     l3153:
  6608  0021FE  5010               	movf	SD_MBW_Send@response,w,c
  6609                           
  6610                           ; Switch size 1, requested type "space"
  6611                           ; Number of cases is 3, Range of values is 5 to 13
  6612                           ; switch strategies available:
  6613                           ; Name         Instructions Cycles
  6614                           ; simple_byte           10     6 (average)
  6615                           ;	Chosen strategy is simple_byte
  6616  002200  0A05               	xorlw	5	; case 5
  6617  002202  B4D8               	btfsc	status,2,c
  6618  002204  D7BD               	goto	l3123
  6619  002206  0A0E               	xorlw	14	; case 11
  6620  002208  B4D8               	btfsc	status,2,c
  6621  00220A  D7D3               	goto	l3135
  6622  00220C  0A06               	xorlw	6	; case 13
  6623  00220E  B4D8               	btfsc	status,2,c
  6624  002210  D7E2               	goto	l3141
  6625  002212  D7F3               	goto	l3147
  6626  002214                     __end_of_SD_MBW_Send:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           postdec1	equ	0xFE5
  6638                           plusw1	equ	0xFE3
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           plusw2	equ	0xFDB
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function _SD_SendDummyBytes *****************
  6650 ;; Defined at:
  6651 ;;		line 16 in file "SD_PIC.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  numBytes        1    wreg     unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  numBytes        1    3[COMRAM] unsigned char 
  6656 ;;  n               1    4[COMRAM] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;Total ram usage:        2 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    2
  6673 ;; This function calls:
  6674 ;;		_spiSend
  6675 ;; This function is called by:
  6676 ;;		_SD_SingleBlockWrite
  6677 ;;		_SD_MBW_Send
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text25
  6682  002DD4                     __ptext25:
  6683                           	opt stack 0
  6684  002DD4                     _SD_SendDummyBytes:
  6685                           	opt stack 27
  6686                           
  6687                           ;incstack = 0
  6688                           ;SD_SendDummyBytes@numBytes stored from wreg
  6689  002DD4  6E04               	movwf	SD_SendDummyBytes@numBytes,c
  6690                           
  6691                           ;SD_PIC.c: 25: unsigned char n = numBytes;
  6692  002DD6  C004  F005         	movff	SD_SendDummyBytes@numBytes,SD_SendDummyBytes@n
  6693                           
  6694                           ;SD_PIC.c: 26: while(n > 0){
  6695  002DDA  D004               	goto	l2485
  6696  002DDC                     l2481:
  6697                           
  6698                           ;SD_PIC.c: 27: spiSend(0xFF);
  6699  002DDC  0EFF               	movlw	255
  6700  002DDE  EC0A  F017         	call	_spiSend
  6701                           
  6702                           ;SD_PIC.c: 28: n--;
  6703  002DE2  0605               	decf	SD_SendDummyBytes@n,f,c
  6704  002DE4                     l2485:
  6705  002DE4  5005               	movf	SD_SendDummyBytes@n,w,c
  6706  002DE6  B4D8               	btfsc	status,2,c
  6707  002DE8  0012               	return	
  6708  002DEA  D7F8               	goto	l2481
  6709  002DEC                     __end_of_SD_SendDummyBytes:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           postinc0	equ	0xFEE
  6719                           wreg	equ	0xFE8
  6720                           postdec1	equ	0xFE5
  6721                           plusw1	equ	0xFE3
  6722                           fsr1h	equ	0xFE2
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           plusw2	equ	0xFDB
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function _SD_MBR_Stop *****************
  6733 ;; Defined at:
  6734 ;;		line 411 in file "SD_PIC.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    3
  6755 ;; This function calls:
  6756 ;;		_SD_Command
  6757 ;; This function is called by:
  6758 ;;		_main
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text26
  6763  002D48                     __ptext26:
  6764                           	opt stack 0
  6765  002D48                     _SD_MBR_Stop:
  6766                           	opt stack 27
  6767                           
  6768                           ;SD_PIC.c: 422: SD_Command(CMD12, 0);
  6769                           
  6770                           ;incstack = 0
  6771  002D48  0E00               	movlw	0
  6772  002D4A  6E04               	movwf	SD_Command@arg,c
  6773  002D4C  0E00               	movlw	0
  6774  002D4E  6E05               	movwf	SD_Command@arg+1,c
  6775  002D50  0E00               	movlw	0
  6776  002D52  6E06               	movwf	SD_Command@arg+2,c
  6777  002D54  0E00               	movlw	0
  6778  002D56  6E07               	movwf	SD_Command@arg+3,c
  6779  002D58  0E43               	movlw	low _CMD12
  6780  002D5A  6EF6               	movwf	tblptrl,c
  6781  002D5C                     	if	1	;There is more than 1 active tblptr byte
  6782  002D5C  0E10               	movlw	high _CMD12
  6783  002D5E  6EF7               	movwf	tblptrh,c
  6784  002D60                     	endif
  6785  002D60                     	if	0	;There are less than 3 active tblptr bytes
  6786  002D60                     	endif
  6787  002D60  0008               	tblrd		*
  6788  002D62  50F5               	movf	tablat,w,c
  6789  002D64  EC95  F013         	call	_SD_Command
  6790                           
  6791                           ;SD_PIC.c: 425: SDCard.read.MBR_flag_first = 1;
  6792  002D68  0E01               	movlw	1
  6793  002D6A  0100               	movlb	0	; () banked
  6794  002D6C  6FAD               	movwf	(_SDCard+45)& (0+255),b
  6795                           
  6796                           ; BSR set to: 0
  6797  002D6E  0012               	return		;funcret
  6798  002D70                     __end_of_SD_MBR_Stop:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           postinc0	equ	0xFEE
  6808                           wreg	equ	0xFE8
  6809                           postdec1	equ	0xFE5
  6810                           plusw1	equ	0xFE3
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           plusw2	equ	0xFDB
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _SD_MBR_Start *****************
  6822 ;; Defined at:
  6823 ;;		line 332 in file "SD_PIC.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  startBlock      4   12[COMRAM] unsigned long 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  response        1   17[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;Total ram usage:        6 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    3
  6844 ;; This function calls:
  6845 ;;		_SD_Command
  6846 ;; This function is called by:
  6847 ;;		_main
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text27
  6852  002A4C                     __ptext27:
  6853                           	opt stack 0
  6854  002A4C                     _SD_MBR_Start:
  6855                           	opt stack 27
  6856                           
  6857                           ;SD_PIC.c: 342: unsigned char response = 0;
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;incstack = 0
  6861  002A4C  0E00               	movlw	0
  6862  002A4E  6E12               	movwf	SD_MBR_Start@response,c
  6863                           
  6864                           ;SD_PIC.c: 348: if(SDCard.Type == 0){ startBlock <<= 9; }
  6865  002A50  0100               	movlb	0	; () banked
  6866  002A52  5181               	movf	(_SDCard+1)& (0+255),w,b
  6867  002A54  A4D8               	btfss	status,2,c
  6868  002A56  D008               	goto	l3225
  6869                           
  6870                           ; BSR set to: 0
  6871  002A58  0E09               	movlw	9
  6872  002A5A                     u2715:
  6873  002A5A  90D8               	bcf	status,0,c
  6874  002A5C  360D               	rlcf	SD_MBR_Start@startBlock,f,c
  6875  002A5E  360E               	rlcf	SD_MBR_Start@startBlock+1,f,c
  6876  002A60  360F               	rlcf	SD_MBR_Start@startBlock+2,f,c
  6877  002A62  3610               	rlcf	SD_MBR_Start@startBlock+3,f,c
  6878  002A64  2EE8               	decfsz	wreg,f,c
  6879  002A66  D7F9               	goto	u2715
  6880  002A68                     l3225:
  6881                           
  6882                           ;SD_PIC.c: 353: response = SD_Command(CMD18, startBlock);
  6883  002A68  C00D  F004         	movff	SD_MBR_Start@startBlock,SD_Command@arg
  6884  002A6C  C00E  F005         	movff	SD_MBR_Start@startBlock+1,SD_Command@arg+1
  6885  002A70  C00F  F006         	movff	SD_MBR_Start@startBlock+2,SD_Command@arg+2
  6886  002A74  C010  F007         	movff	SD_MBR_Start@startBlock+3,SD_Command@arg+3
  6887  002A78  0E3F               	movlw	low _CMD18
  6888  002A7A  6EF6               	movwf	tblptrl,c
  6889  002A7C                     	if	1	;There is more than 1 active tblptr byte
  6890  002A7C  0E10               	movlw	high _CMD18
  6891  002A7E  6EF7               	movwf	tblptrh,c
  6892  002A80                     	endif
  6893  002A80                     	if	0	;There are less than 3 active tblptr bytes
  6894  002A80                     	endif
  6895  002A80  0008               	tblrd		*
  6896  002A82  50F5               	movf	tablat,w,c
  6897  002A84  EC95  F013         	call	_SD_Command
  6898  002A88  6E12               	movwf	SD_MBR_Start@response,c
  6899                           
  6900                           ;SD_PIC.c: 354: if(response & 0x0F){
  6901  002A8A  C012  F011         	movff	SD_MBR_Start@response,??_SD_MBR_Start
  6902  002A8E  0E0F               	movlw	15
  6903  002A90  1611               	andwf	??_SD_MBR_Start,f,c
  6904  002A92  A4D8               	btfss	status,2,c
  6905  002A94  0012               	return	
  6906                           
  6907                           ;SD_PIC.c: 361: }
  6908                           ;SD_PIC.c: 362: }while(response != R1_READY_STATE);
  6909                           
  6910                           ;SD_PIC.c: 360: return 0;
  6911                           ;	Return value of _SD_MBR_Start is never used
  6912  002A96  0E34               	movlw	low _R1_READY_STATE
  6913  002A98  6EF6               	movwf	tblptrl,c
  6914  002A9A                     	if	1	;There is more than 1 active tblptr byte
  6915  002A9A  0E10               	movlw	high _R1_READY_STATE
  6916  002A9C  6EF7               	movwf	tblptrh,c
  6917  002A9E                     	endif
  6918  002A9E                     	if	0	;There are less than 3 active tblptr bytes
  6919  002A9E                     	endif
  6920  002A9E  0008               	tblrd		*
  6921  002AA0  50F5               	movf	tablat,w,c
  6922  002AA2  6212               	cpfseq	SD_MBR_Start@response,c
  6923  002AA4  D7E1               	goto	l3225
  6924                           
  6925                           ;SD_PIC.c: 365: SDCard.read.MBR_startBlock = startBlock;
  6926  002AA6  C00D  F0A9         	movff	SD_MBR_Start@startBlock,_SDCard+41
  6927  002AAA  C00E  F0AA         	movff	SD_MBR_Start@startBlock+1,_SDCard+42
  6928  002AAE  C00F  F0AB         	movff	SD_MBR_Start@startBlock+2,_SDCard+43
  6929  002AB2  C010  F0AC         	movff	SD_MBR_Start@startBlock+3,_SDCard+44
  6930                           
  6931                           ;SD_PIC.c: 367: return 1;
  6932                           ;	Return value of _SD_MBR_Start is never used
  6933  002AB6  0012               	return		;funcret
  6934  002AB8                     __end_of_SD_MBR_Start:
  6935                           	opt stack 0
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           postinc0	equ	0xFEE
  6944                           wreg	equ	0xFE8
  6945                           postdec1	equ	0xFE5
  6946                           plusw1	equ	0xFE3
  6947                           fsr1h	equ	0xFE2
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           postinc2	equ	0xFDE
  6951                           postdec2	equ	0xFDD
  6952                           plusw2	equ	0xFDB
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _SD_MBR_Receive *****************
  6958 ;; Defined at:
  6959 ;;		line 370 in file "SD_PIC.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;  bufReceive      2    3[COMRAM] PTR unsigned char 
  6962 ;;		 -> main@readBuffer(512), 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  i               2    6[COMRAM] unsigned short 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;Total ram usage:        5 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    2
  6981 ;; This function calls:
  6982 ;;		_spiReceive
  6983 ;;		_spiSend
  6984 ;; This function is called by:
  6985 ;;		_main
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text28
  6990  0027BA                     __ptext28:
  6991                           	opt stack 0
  6992  0027BA                     _SD_MBR_Receive:
  6993                           	opt stack 28
  6994  0027BA                     l3235:
  6995  0027BA  EC0F  F017         	call	_spiReceive	;wreg free
  6996  0027BE  0900               	iorlw	0
  6997  0027C0  B4D8               	btfsc	status,2,c
  6998  0027C2  D7FB               	goto	l3235
  6999                           
  7000                           ;SD_PIC.c: 386: LATEbits.LATE2 = 0;
  7001  0027C4  948D               	bcf	3981,2,c	;volatile
  7002  0027C6                     l3237:
  7003  0027C6  EC0F  F017         	call	_spiReceive	;wreg free
  7004  0027CA  6E06               	movwf	??_SD_MBR_Receive& (0+255),c
  7005  0027CC  0E31               	movlw	low _START_BLOCK
  7006  0027CE  6EF6               	movwf	tblptrl,c
  7007  0027D0                     	if	1	;There is more than 1 active tblptr byte
  7008  0027D0  0E10               	movlw	high _START_BLOCK
  7009  0027D2  6EF7               	movwf	tblptrh,c
  7010  0027D4                     	endif
  7011  0027D4                     	if	0	;There are less than 3 active tblptr bytes
  7012  0027D4                     	endif
  7013  0027D4  0008               	tblrd		*
  7014  0027D6  50F5               	movf	tablat,w,c
  7015  0027D8  1806               	xorwf	??_SD_MBR_Receive,w,c
  7016  0027DA  A4D8               	btfss	status,2,c
  7017  0027DC  D7F4               	goto	l3237
  7018                           
  7019                           ;SD_PIC.c: 392: for(unsigned short i = 0; i < 512; i++){
  7020  0027DE  0E00               	movlw	0
  7021  0027E0  6E08               	movwf	SD_MBR_Receive@i+1,c
  7022  0027E2  0E00               	movlw	0
  7023  0027E4  6E07               	movwf	SD_MBR_Receive@i,c
  7024  0027E6                     l3241:
  7025  0027E6  0E02               	movlw	2
  7026  0027E8  5C08               	subwf	SD_MBR_Receive@i+1,w,c
  7027  0027EA  B0D8               	btfsc	status,0,c
  7028  0027EC  D00C               	goto	l3251
  7029                           
  7030                           ;SD_PIC.c: 393: bufReceive[i] = spiReceive();
  7031  0027EE  5007               	movf	SD_MBR_Receive@i,w,c
  7032  0027F0  2404               	addwf	SD_MBR_Receive@bufReceive,w,c
  7033  0027F2  6ED9               	movwf	fsr2l,c
  7034  0027F4  5008               	movf	SD_MBR_Receive@i+1,w,c
  7035  0027F6  2005               	addwfc	SD_MBR_Receive@bufReceive+1,w,c
  7036  0027F8  6EDA               	movwf	fsr2h,c
  7037  0027FA  EC0F  F017         	call	_spiReceive	;wreg free
  7038  0027FE  6EDF               	movwf	indf2,c
  7039  002800  4A07               	infsnz	SD_MBR_Receive@i,f,c
  7040  002802  2A08               	incf	SD_MBR_Receive@i+1,f,c
  7041  002804  D7F0               	goto	l3241
  7042  002806                     l3251:
  7043                           
  7044                           ;SD_PIC.c: 394: }
  7045                           ;SD_PIC.c: 397: spiSend(0xFF);
  7046  002806  0EFF               	movlw	255
  7047  002808  EC0A  F017         	call	_spiSend
  7048                           
  7049                           ;SD_PIC.c: 398: spiSend(0xFF);
  7050  00280C  0EFF               	movlw	255
  7051  00280E  EC0A  F017         	call	_spiSend
  7052                           
  7053                           ;SD_PIC.c: 399: LATEbits.LATE2 = 1;
  7054  002812  848D               	bsf	3981,2,c	;volatile
  7055                           
  7056                           ;SD_PIC.c: 402: if(SDCard.read.MBR_flag_first){
  7057  002814  0100               	movlb	0	; () banked
  7058  002816  51AD               	movf	(_SDCard+45)& (0+255),w,b
  7059  002818  B4D8               	btfsc	status,2,c
  7060  00281A  D00C               	goto	l3261
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;SD_PIC.c: 403: SDCard.read.lastBlockRead = SDCard.read.MBR_startBlock;
  7064  00281C  C0A9  F0A5         	movff	_SDCard+41,_SDCard+37
  7065  002820  C0AA  F0A6         	movff	_SDCard+42,_SDCard+38
  7066  002824  C0AB  F0A7         	movff	_SDCard+43,_SDCard+39
  7067  002828  C0AC  F0A8         	movff	_SDCard+44,_SDCard+40
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;SD_PIC.c: 404: SDCard.read.MBR_flag_first = 0;
  7071  00282C  0E00               	movlw	0
  7072  00282E  0100               	movlb	0	; () banked
  7073  002830  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7074                           
  7075                           ;SD_PIC.c: 405: }
  7076  002832  0012               	return	
  7077  002834                     l3261:
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;SD_PIC.c: 406: else{
  7081                           ;SD_PIC.c: 407: SDCard.read.lastBlockRead++;
  7082  002834  0E01               	movlw	1
  7083  002836  0100               	movlb	0	; () banked
  7084  002838  27A5               	addwf	(_SDCard+37)& (0+255),f,b
  7085  00283A  0E00               	movlw	0
  7086  00283C  23A6               	addwfc	(_SDCard+38)& (0+255),f,b
  7087  00283E  23A7               	addwfc	(_SDCard+39)& (0+255),f,b
  7088  002840  23A8               	addwfc	(_SDCard+40)& (0+255),f,b
  7089  002842  0012               	return	
  7090  002844                     __end_of_SD_MBR_Receive:
  7091                           	opt stack 0
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           intcon	equ	0xFF2
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           postdec1	equ	0xFE5
  7102                           plusw1	equ	0xFE3
  7103                           fsr1h	equ	0xFE2
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           plusw2	equ	0xFDB
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _SD_EraseBlocks *****************
  7114 ;; Defined at:
  7115 ;;		line 429 in file "SD_PIC.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  firstBlock      4   12[COMRAM] unsigned long 
  7118 ;;  lastBlock       4   16[COMRAM] unsigned long 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7130 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;Total ram usage:        8 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    3
  7137 ;; This function calls:
  7138 ;;		_SD_Command
  7139 ;; This function is called by:
  7140 ;;		_main
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           	psect	text29
  7145  002844                     __ptext29:
  7146                           	opt stack 0
  7147  002844                     _SD_EraseBlocks:
  7148                           	opt stack 27
  7149                           
  7150                           ;SD_PIC.c: 445: if(SDCard.Type == 0){ firstBlock <<= 9; lastBlock <<= 9; }
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;incstack = 0
  7154  002844  0100               	movlb	0	; () banked
  7155  002846  5181               	movf	(_SDCard+1)& (0+255),w,b
  7156  002848  A4D8               	btfss	status,2,c
  7157  00284A  D010               	goto	l3039
  7158                           
  7159                           ; BSR set to: 0
  7160  00284C  0E09               	movlw	9
  7161  00284E                     u2435:
  7162  00284E  90D8               	bcf	status,0,c
  7163  002850  360D               	rlcf	SD_EraseBlocks@firstBlock,f,c
  7164  002852  360E               	rlcf	SD_EraseBlocks@firstBlock+1,f,c
  7165  002854  360F               	rlcf	SD_EraseBlocks@firstBlock+2,f,c
  7166  002856  3610               	rlcf	SD_EraseBlocks@firstBlock+3,f,c
  7167  002858  2EE8               	decfsz	wreg,f,c
  7168  00285A  D7F9               	goto	u2435
  7169  00285C  0E09               	movlw	9
  7170  00285E                     u2445:
  7171  00285E  90D8               	bcf	status,0,c
  7172  002860  3611               	rlcf	SD_EraseBlocks@lastBlock,f,c
  7173  002862  3612               	rlcf	SD_EraseBlocks@lastBlock+1,f,c
  7174  002864  3613               	rlcf	SD_EraseBlocks@lastBlock+2,f,c
  7175  002866  3614               	rlcf	SD_EraseBlocks@lastBlock+3,f,c
  7176  002868  2EE8               	decfsz	wreg,f,c
  7177  00286A  D7F9               	goto	u2445
  7178  00286C                     l3039:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;SD_PIC.c: 448: SD_Command(CMD32, firstBlock);
  7182  00286C  C00D  F004         	movff	SD_EraseBlocks@firstBlock,SD_Command@arg
  7183  002870  C00E  F005         	movff	SD_EraseBlocks@firstBlock+1,SD_Command@arg+1
  7184  002874  C00F  F006         	movff	SD_EraseBlocks@firstBlock+2,SD_Command@arg+2
  7185  002878  C010  F007         	movff	SD_EraseBlocks@firstBlock+3,SD_Command@arg+3
  7186  00287C  0E3C               	movlw	low _CMD32
  7187  00287E  6EF6               	movwf	tblptrl,c
  7188  002880                     	if	1	;There is more than 1 active tblptr byte
  7189  002880  0E10               	movlw	high _CMD32
  7190  002882  6EF7               	movwf	tblptrh,c
  7191  002884                     	endif
  7192  002884                     	if	0	;There are less than 3 active tblptr bytes
  7193  002884                     	endif
  7194  002884  0008               	tblrd		*
  7195  002886  50F5               	movf	tablat,w,c
  7196  002888  EC95  F013         	call	_SD_Command
  7197                           
  7198                           ;SD_PIC.c: 451: SD_Command(CMD33, lastBlock);
  7199  00288C  C011  F004         	movff	SD_EraseBlocks@lastBlock,SD_Command@arg
  7200  002890  C012  F005         	movff	SD_EraseBlocks@lastBlock+1,SD_Command@arg+1
  7201  002894  C013  F006         	movff	SD_EraseBlocks@lastBlock+2,SD_Command@arg+2
  7202  002898  C014  F007         	movff	SD_EraseBlocks@lastBlock+3,SD_Command@arg+3
  7203  00289C  0E3B               	movlw	low _CMD33
  7204  00289E  6EF6               	movwf	tblptrl,c
  7205  0028A0                     	if	1	;There is more than 1 active tblptr byte
  7206  0028A0  0E10               	movlw	high _CMD33
  7207  0028A2  6EF7               	movwf	tblptrh,c
  7208  0028A4                     	endif
  7209  0028A4                     	if	0	;There are less than 3 active tblptr bytes
  7210  0028A4                     	endif
  7211  0028A4  0008               	tblrd		*
  7212  0028A6  50F5               	movf	tablat,w,c
  7213  0028A8  EC95  F013         	call	_SD_Command
  7214                           
  7215                           ;SD_PIC.c: 454: SD_Command(CMD38, 0);
  7216  0028AC  0E00               	movlw	0
  7217  0028AE  6E04               	movwf	SD_Command@arg,c
  7218  0028B0  0E00               	movlw	0
  7219  0028B2  6E05               	movwf	SD_Command@arg+1,c
  7220  0028B4  0E00               	movlw	0
  7221  0028B6  6E06               	movwf	SD_Command@arg+2,c
  7222  0028B8  0E00               	movlw	0
  7223  0028BA  6E07               	movwf	SD_Command@arg+3,c
  7224  0028BC  0E3A               	movlw	low _CMD38
  7225  0028BE  6EF6               	movwf	tblptrl,c
  7226  0028C0                     	if	1	;There is more than 1 active tblptr byte
  7227  0028C0  0E10               	movlw	high _CMD38
  7228  0028C2  6EF7               	movwf	tblptrh,c
  7229  0028C4                     	endif
  7230  0028C4                     	if	0	;There are less than 3 active tblptr bytes
  7231  0028C4                     	endif
  7232  0028C4  0008               	tblrd		*
  7233  0028C6  50F5               	movf	tablat,w,c
  7234  0028C8  EC95  F013         	call	_SD_Command
  7235  0028CC  0012               	return		;funcret
  7236  0028CE                     __end_of_SD_EraseBlocks:
  7237                           	opt stack 0
  7238                           tblptru	equ	0xFF8
  7239                           tblptrh	equ	0xFF7
  7240                           tblptrl	equ	0xFF6
  7241                           tablat	equ	0xFF5
  7242                           prodh	equ	0xFF4
  7243                           prodl	equ	0xFF3
  7244                           intcon	equ	0xFF2
  7245                           postinc0	equ	0xFEE
  7246                           wreg	equ	0xFE8
  7247                           postdec1	equ	0xFE5
  7248                           plusw1	equ	0xFE3
  7249                           fsr1h	equ	0xFE2
  7250                           fsr1l	equ	0xFE1
  7251                           indf2	equ	0xFDF
  7252                           postinc2	equ	0xFDE
  7253                           postdec2	equ	0xFDD
  7254                           plusw2	equ	0xFDB
  7255                           fsr2h	equ	0xFDA
  7256                           fsr2l	equ	0xFD9
  7257                           status	equ	0xFD8
  7258                           
  7259 ;; *************** function _SD_Command *****************
  7260 ;; Defined at:
  7261 ;;		line 32 in file "SD_PIC.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  cmd             1    wreg     unsigned char 
  7264 ;;  arg             4    3[COMRAM] unsigned long 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  cmd             1    9[COMRAM] unsigned char 
  7267 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  7268 ;;		 -> SD_Command@arg(4), 
  7269 ;;  n               1   11[COMRAM] unsigned char 
  7270 ;;  response        1   10[COMRAM] unsigned char 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      unsigned char 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:        9 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    2
  7287 ;; This function calls:
  7288 ;;		_spiReceive
  7289 ;;		_spiSend
  7290 ;; This function is called by:
  7291 ;;		_SD_ACMD
  7292 ;;		_SD_SingleBlockWrite
  7293 ;;		_SD_MBW_Start
  7294 ;;		_SD_MBW_Send
  7295 ;;		_SD_SingleBlockRead
  7296 ;;		_SD_MBR_Start
  7297 ;;		_SD_MBR_Stop
  7298 ;;		_SD_EraseBlocks
  7299 ;;		_initSD
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text30
  7304  00272A                     __ptext30:
  7305                           	opt stack 0
  7306  00272A                     _SD_Command:
  7307                           	opt stack 27
  7308                           
  7309                           ;incstack = 0
  7310                           ;SD_Command@cmd stored from wreg
  7311  00272A  6E0A               	movwf	SD_Command@cmd,c
  7312                           
  7313                           ;SD_PIC.c: 42: unsigned char response;
  7314                           ;SD_PIC.c: 43: unsigned char n = 0;
  7315  00272C  0E00               	movlw	0
  7316  00272E  6E0C               	movwf	SD_Command@n,c
  7317                           
  7318                           ;SD_PIC.c: 46: LATEbits.LATE2 = 0;
  7319  002730  948D               	bcf	3981,2,c	;volatile
  7320  002732                     l2391:
  7321  002732  EC0F  F017         	call	_spiReceive	;wreg free
  7322  002736  0AFF               	xorlw	255
  7323  002738  A4D8               	btfss	status,2,c
  7324  00273A  D7FB               	goto	l2391
  7325                           
  7326                           ;SD_PIC.c: 54: spiSend(cmd | 0x40U);
  7327  00273C  500A               	movf	SD_Command@cmd,w,c
  7328  00273E  0940               	iorlw	64
  7329  002740  EC0A  F017         	call	_spiSend
  7330                           
  7331                           ;SD_PIC.c: 58: unsigned char* ptr = (unsigned char*)&arg + sizeof(unsigned long) - 1;
  7332  002744  0E07               	movlw	low (SD_Command@arg+3)
  7333  002746  6E08               	movwf	SD_Command@ptr,c
  7334  002748  0E00               	movlw	high (SD_Command@arg+3)
  7335  00274A  6E09               	movwf	SD_Command@ptr+1,c
  7336                           
  7337                           ;SD_PIC.c: 59: while(n < 4){
  7338  00274C  D00B               	goto	l2403
  7339  00274E                     l2397:
  7340                           
  7341                           ;SD_PIC.c: 60: spiSend(*ptr);
  7342  00274E  C008  FFD9         	movff	SD_Command@ptr,fsr2l
  7343  002752  C009  FFDA         	movff	SD_Command@ptr+1,fsr2h
  7344  002756  50DF               	movf	indf2,w,c
  7345  002758  EC0A  F017         	call	_spiSend
  7346                           
  7347                           ;SD_PIC.c: 61: ptr--;
  7348  00275C  0608               	decf	SD_Command@ptr,f,c
  7349  00275E  A0D8               	btfss	status,0,c
  7350  002760  0609               	decf	SD_Command@ptr+1,f,c
  7351                           
  7352                           ;SD_PIC.c: 62: n++;
  7353  002762  2A0C               	incf	SD_Command@n,f,c
  7354  002764                     l2403:
  7355  002764  0E03               	movlw	3
  7356  002766  640C               	cpfsgt	SD_Command@n,c
  7357  002768  D7F2               	goto	l2397
  7358                           
  7359                           ;SD_PIC.c: 63: }
  7360                           ;SD_PIC.c: 68: if(cmd == CMD8){
  7361  00276A  0E47               	movlw	low _CMD8
  7362  00276C  6EF6               	movwf	tblptrl,c
  7363  00276E                     	if	1	;There is more than 1 active tblptr byte
  7364  00276E  0E10               	movlw	high _CMD8
  7365  002770  6EF7               	movwf	tblptrh,c
  7366  002772                     	endif
  7367  002772                     	if	0	;There are less than 3 active tblptr bytes
  7368  002772                     	endif
  7369  002772  0008               	tblrd		*
  7370  002774  50F5               	movf	tablat,w,c
  7371  002776  620A               	cpfseq	SD_Command@cmd,c
  7372  002778  D009               	goto	l2409
  7373                           
  7374                           ;SD_PIC.c: 69: spiSend(CMD8CRC);
  7375  00277A  0E46               	movlw	low _CMD8CRC
  7376  00277C  6EF6               	movwf	tblptrl,c
  7377  00277E                     	if	1	;There is more than 1 active tblptr byte
  7378  00277E  0E10               	movlw	high _CMD8CRC
  7379  002780  6EF7               	movwf	tblptrh,c
  7380  002782                     	endif
  7381  002782                     	if	0	;There are less than 3 active tblptr bytes
  7382  002782                     	endif
  7383  002782  0008               	tblrd		*
  7384  002784  50F5               	movf	tablat,w,c
  7385  002786  EC0A  F017         	call	_spiSend
  7386                           
  7387                           ;SD_PIC.c: 70: }
  7388  00278A  D008               	goto	l2411
  7389  00278C                     l2409:
  7390                           
  7391                           ;SD_PIC.c: 71: else{
  7392                           ;SD_PIC.c: 72: spiSend(CMD0CRC);
  7393  00278C  0E49               	movlw	low _CMD0CRC
  7394  00278E  6EF6               	movwf	tblptrl,c
  7395  002790                     	if	1	;There is more than 1 active tblptr byte
  7396  002790  0E10               	movlw	high _CMD0CRC
  7397  002792  6EF7               	movwf	tblptrh,c
  7398  002794                     	endif
  7399  002794                     	if	0	;There are less than 3 active tblptr bytes
  7400  002794                     	endif
  7401  002794  0008               	tblrd		*
  7402  002796  50F5               	movf	tablat,w,c
  7403  002798  EC0A  F017         	call	_spiSend
  7404  00279C                     l2411:
  7405                           
  7406                           ;SD_PIC.c: 73: }
  7407                           ;SD_PIC.c: 76: n = 0;
  7408  00279C  0E00               	movlw	0
  7409  00279E  6E0C               	movwf	SD_Command@n,c
  7410  0027A0                     l2413:
  7411                           
  7412                           ;SD_PIC.c: 78: response = spiReceive();
  7413  0027A0  EC0F  F017         	call	_spiReceive	;wreg free
  7414  0027A4  6E0B               	movwf	SD_Command@response,c
  7415                           
  7416                           ;SD_PIC.c: 79: n++;
  7417  0027A6  2A0C               	incf	SD_Command@n,f,c
  7418                           
  7419                           ;SD_PIC.c: 80: }while((n < 8) && (response == 0xFF));
  7420  0027A8  0E08               	movlw	8
  7421  0027AA  600C               	cpfslt	SD_Command@n,c
  7422  0027AC  D003               	goto	l334
  7423  0027AE  280B               	incf	SD_Command@response,w,c
  7424  0027B0  B4D8               	btfsc	status,2,c
  7425  0027B2  D7F6               	goto	l2413
  7426  0027B4                     l334:
  7427                           
  7428                           ;SD_PIC.c: 83: LATEbits.LATE2 = 1;
  7429  0027B4  848D               	bsf	3981,2,c	;volatile
  7430                           
  7431                           ;SD_PIC.c: 85: return response;
  7432  0027B6  500B               	movf	SD_Command@response,w,c
  7433  0027B8  0012               	return	
  7434  0027BA                     __end_of_SD_Command:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           postinc0	equ	0xFEE
  7444                           wreg	equ	0xFE8
  7445                           postdec1	equ	0xFE5
  7446                           plusw1	equ	0xFE3
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           plusw2	equ	0xFDB
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _spiSend *****************
  7458 ;; Defined at:
  7459 ;;		line 33 in file "SPI_PIC.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  val             1    wreg     unsigned char 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  val             1    2[COMRAM] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        1 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    1
  7480 ;; This function calls:
  7481 ;;		_spiTransfer
  7482 ;; This function is called by:
  7483 ;;		_SD_SendDummyBytes
  7484 ;;		_SD_Command
  7485 ;;		_SD_SingleBlockWrite
  7486 ;;		_SD_MBW_Send
  7487 ;;		_SD_MBW_Stop
  7488 ;;		_SD_SingleBlockRead
  7489 ;;		_SD_MBR_Receive
  7490 ;;		_initSD
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	text31
  7495  002E14                     __ptext31:
  7496                           	opt stack 0
  7497  002E14                     _spiSend:
  7498                           	opt stack 28
  7499                           
  7500                           ;incstack = 0
  7501                           ;spiSend@val stored from wreg
  7502  002E14  6E03               	movwf	spiSend@val,c
  7503                           
  7504                           ;SPI_PIC.c: 41: spiTransfer(val);
  7505  002E16  5003               	movf	spiSend@val,w,c
  7506  002E18  ECCA  F016         	call	_spiTransfer
  7507  002E1C  0012               	return		;funcret
  7508  002E1E                     __end_of_spiSend:
  7509                           	opt stack 0
  7510                           tblptru	equ	0xFF8
  7511                           tblptrh	equ	0xFF7
  7512                           tblptrl	equ	0xFF6
  7513                           tablat	equ	0xFF5
  7514                           prodh	equ	0xFF4
  7515                           prodl	equ	0xFF3
  7516                           intcon	equ	0xFF2
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           postdec1	equ	0xFE5
  7520                           plusw1	equ	0xFE3
  7521                           fsr1h	equ	0xFE2
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           plusw2	equ	0xFDB
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _spiReceive *****************
  7532 ;; Defined at:
  7533 ;;		line 44 in file "SPI_PIC.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      unsigned char 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    1
  7554 ;; This function calls:
  7555 ;;		_spiTransfer
  7556 ;; This function is called by:
  7557 ;;		_main
  7558 ;;		_SD_Command
  7559 ;;		_SD_SingleBlockWrite
  7560 ;;		_SD_MBW_Send
  7561 ;;		_SD_MBW_Stop
  7562 ;;		_SD_SingleBlockRead
  7563 ;;		_SD_MBR_Receive
  7564 ;;		_initSD
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text32
  7569  002E1E                     __ptext32:
  7570                           	opt stack 0
  7571  002E1E                     _spiReceive:
  7572                           	opt stack 29
  7573                           
  7574                           ;SPI_PIC.c: 51: return spiTransfer(0xFF);
  7575                           
  7576                           ;incstack = 0
  7577  002E1E  0EFF               	movlw	255
  7578  002E20  ECCA  F016         	call	_spiTransfer
  7579  002E24  0012               	return	
  7580  002E26                     __end_of_spiReceive:
  7581                           	opt stack 0
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           postdec1	equ	0xFE5
  7592                           plusw1	equ	0xFE3
  7593                           fsr1h	equ	0xFE2
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           plusw2	equ	0xFDB
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _spiTransfer *****************
  7604 ;; Defined at:
  7605 ;;		line 12 in file "SPI_PIC.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  byteToTransf    1    wreg     unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      unsigned char 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;Total ram usage:        2 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_SD_SingleBlockWrite
  7629 ;;		_SD_MBW_Send
  7630 ;;		_spiSend
  7631 ;;		_spiReceive
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text33
  7636  002D94                     __ptext33:
  7637                           	opt stack 0
  7638  002D94                     _spiTransfer:
  7639                           	opt stack 29
  7640                           
  7641                           ;incstack = 0
  7642                           ;spiTransfer@byteToTransfer stored from wreg
  7643  002D94  6E02               	movwf	spiTransfer@byteToTransfer,c
  7644                           
  7645                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  7646  002D96  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  7647  002D9A                     l2331:
  7648  002D9A  B69E               	btfsc	3998,3,c	;volatile
  7649  002D9C  D002               	goto	u1470
  7650  002D9E  0E01               	movlw	1
  7651  002DA0  D001               	goto	u1472
  7652  002DA2                     u1470:
  7653  002DA2  0E00               	movlw	0
  7654  002DA4                     u1472:
  7655  002DA4  6E01               	movwf	??_spiTransfer& (0+255),c
  7656  002DA6  B0C7               	btfsc	4039,0,c	;volatile
  7657  002DA8  D002               	goto	u1480
  7658  002DAA  0E01               	movlw	1
  7659  002DAC  D001               	goto	u1482
  7660  002DAE                     u1480:
  7661  002DAE  0E00               	movlw	0
  7662  002DB0                     u1482:
  7663  002DB0  1001               	iorwf	??_spiTransfer,w,c
  7664  002DB2  E1F3               	bnz	l2331
  7665                           
  7666                           ;SPI_PIC.c: 30: return SSPBUF;
  7667  002DB4  50C9               	movf	4041,w,c	;volatile
  7668  002DB6  0012               	return	
  7669  002DB8                     __end_of_spiTransfer:
  7670                           	opt stack 0
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodh	equ	0xFF4
  7676                           prodl	equ	0xFF3
  7677                           intcon	equ	0xFF2
  7678                           postinc0	equ	0xFEE
  7679                           wreg	equ	0xFE8
  7680                           postdec1	equ	0xFE5
  7681                           plusw1	equ	0xFE3
  7682                           fsr1h	equ	0xFE2
  7683                           fsr1l	equ	0xFE1
  7684                           indf2	equ	0xFDF
  7685                           postinc2	equ	0xFDE
  7686                           postdec2	equ	0xFDD
  7687                           plusw2	equ	0xFDB
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           intcon	equ	0xFF2
  7698                           postinc0	equ	0xFEE
  7699                           wreg	equ	0xFE8
  7700                           postdec1	equ	0xFE5
  7701                           plusw1	equ	0xFE3
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           plusw2	equ	0xFDB
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712                           	psect	rparam
  7713  0000                     tblptru	equ	0xFF8
  7714                           tblptrh	equ	0xFF7
  7715                           tblptrl	equ	0xFF6
  7716                           tablat	equ	0xFF5
  7717                           prodh	equ	0xFF4
  7718                           prodl	equ	0xFF3
  7719                           intcon	equ	0xFF2
  7720                           postinc0	equ	0xFEE
  7721                           wreg	equ	0xFE8
  7722                           postdec1	equ	0xFE5
  7723                           plusw1	equ	0xFE3
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    74
    Data        0
    BSS         1088
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     127
    BANK0           128      0      46
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[9]), STR_12(CODE[16]), 
		 -> STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[17]), STR_8(CODE[9]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[15]), 
		 -> STR_3(CODE[13]), STR_2(CODE[12]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    SD_MBR_Receive@bufReceive	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_SingleBlockRead@buf	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_MBW_Send@arrWrite	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    SD_SingleBlockWrite@arr	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    SD_Command@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> SD_Command@arg(COMRAM[4]), 

    average@array	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 


Critical Paths under _main in COMRAM

    _main->_initSD
    _printf->_average
    _putch->_lcdNibble
    ___llmod->___lldiv
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lltoft
    ___ftdiv->___lwtoft
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _average->___lldiv
    _SD_SingleBlockWrite->_SD_Command
    _SD_SingleBlockRead->_SD_Command
    _SD_MBW_Stop->_spiSend
    _SD_MBW_Start->_SD_ACMD
    _SD_ACMD->_SD_Command
    _SD_MBW_Send->_SD_Command
    _SD_SendDummyBytes->_spiSend
    _SD_MBR_Stop->_SD_Command
    _SD_MBR_Start->_SD_Command
    _SD_MBR_Receive->_spiSend
    _SD_EraseBlocks->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   40104
                                             86 COMRAM    23    23      0
                     _SD_EraseBlocks
                     _SD_MBR_Receive
                       _SD_MBR_Start
                        _SD_MBR_Stop
                        _SD_MBW_Send
                       _SD_MBW_Start
                        _SD_MBW_Stop
                 _SD_SingleBlockRead
                _SD_SingleBlockWrite
                            ___lldiv
                            ___llmod
                            _average
                            _initLCD
                             _initSD
                            _lcdInst
                     _lcd_set_cursor
                             _printf
                         _spiReceive
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2882
                                             24 COMRAM    18    12      6
                            ___lldiv
                            ___llmod
                            _average (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     463
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       4     3      1     602
                                              6 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initSD                                              39    39      0   17130
                                             47 COMRAM    39    39      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2687
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     404
                                             32 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3222
                                             17 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3024
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _average                                             11     7      4    1058
                                             13 COMRAM    11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockWrite                                 10     4      6    2258
                                             12 COMRAM    10     4      6
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockRead                                  10     4      6    2191
                                             12 COMRAM    10     4      6
                         _SD_Command
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Stop                                          0     0      0      66
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Start                                         9     1      8    3955
                                             17 COMRAM     9     1      8
                            _SD_ACMD
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1966
                                             12 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Send                                          6     4      2    2163
                                             12 COMRAM     6     4      2
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _SD_SendDummyBytes                                    2     2      0      90
                                              3 COMRAM     2     2      0
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Stop                                          0     0      0    1770
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Start                                         6     2      4    1937
                                             12 COMRAM     6     2      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Receive                                       5     3      2     232
                                              3 COMRAM     5     3      2
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_EraseBlocks                                       8     0      8    1968
                                             12 COMRAM     8     0      8
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           9     5      4    1770
                                              3 COMRAM     9     5      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SD_EraseBlocks
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Receive
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_MBR_Start
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Stop
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Send
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   _SD_MBW_Start
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Stop
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockRead
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockWrite
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   ___lldiv
   ___llmod
     ___lldiv (ARG)
   _average
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _lcdNibble
   _lcd_set_cursor
     _lcdInst
       _lcdNibble
     _lcd_shift_cursor
       _lcdInst
         _lcdNibble
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _average (ARG)
       ___lldiv
     _putch (ARG)
       _lcdNibble
   _spiReceive
     _spiTransfer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     400      37       25.8%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      2E       5       35.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      34        0.0%
DATA                 0      0     4AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Sep 19 02:19:22 2017

      __end_of_R1_READY_STATE 1035                   _SSPSTATbits 000FC7                   __CFG_CPD$ON 000000  
          initSD@arr_response 0041                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                         l147 195E                           l172 1F0E                           l334 27B4  
                         l371 216C                           l443 11EA                           l348 2580  
                         l516 2CD8                           l437 116A                           l541 1F6C  
                         l446 1260                           l544 1FCC                           l468 13C4  
                         l842 24B0                           l909 293E                           l919 2B76  
                         l784 270A                  __CFG_CPB$OFF 000000               __end_of_CMD0CRC 104A  
             __end_of_CMD8CRC 1047                           prod 000FF3                           wreg 000FE8  
          SD_SendDummyBytes@n 0005                 SD_Command@cmd 000A                 SD_Command@arg 0004  
               SD_Command@ptr 0008               ?_lcd_set_cursor 0007                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 0015                  ___ftdiv@sign 001A                  __CFG_WDT$OFF 000000  
                        l3003 1FEC                          l3021 204C                          l3103 2122  
                        l3031 20E6                          l3007 2010                          l3201 263A  
                        l3025 205E                          l3009 2014                          l3033 20F6  
                        l2331 2D9A                          l2411 279C                          l2403 2764  
                        l3131 21AE                          l3123 2180                          l3211 265A  
                        l3027 206A                          l2413 27A0                          l3141 21D6  
                        l3109 2144                          l2501 2CBC                          l3039 286C  
                        l3135 21B2                          l3119 2166                          l3055 2548  
                        l2511 2424                          l2503 2CC2                          l2409 278C  
                        l3241 27E6                          l3225 2A68                          l3129 21A0  
                        l3153 21FE                          l3065 2568                          l3049 24FA  
                        l2441 26D8                          l2433 269A                          l3161 2C4E  
                        l3251 2806                          l3235 27BA                          l3147 21FA  
                        l3083 25A6                          l3075 259E                          l2443 26F6  
                        l2435 26A4                          l3307 19E4                          l3261 2834  
                        l3237 27C6                          l3173 2D1A                          l3069 2590  
                        l2445 2700                          l2437 26C2                          l2429 268C  
                        l2517 244C                          l2605 2240                          l3165 2C56  
                        l3413 1CD4                          l2391 2732                          l3095 29E6  
                        l3079 25A2                          l2703 2AF2                          l2623 22A6  
                        l3351 1B12                          l2481 2DDC                          l3097 2A06  
                        l3177 2D34                          l3193 260A                          l3185 25D8  
                        l3089 25AA                          l2537 248A                          l2641 22F6  
                        l2633 22CE                          l3441 1DC2                          l3409 1CC2  
                        l3361 1B7A                          l3329 1A82                          l3195 261C  
                        l2651 28F0                          l2563 2358                          l2635 22DA  
                        l2627 22B6                          l3435 1D88                          l3363 1B86  
                        l3339 1AAE                          l3283 1952                          l2397 274E  
                        l2485 2DE4                          l2653 28FC                          l2581 239A  
                        l2557 2330                          l2637 22E0                          l2821 12B6  
                        l2805 126A                          l2469 2DBE                          l3365 1BA6  
                        l3293 199E                          l3285 1960                          l2663 2930  
                        l2655 2900                          l2591 23C2                          l2903 16FE  
                        l2815 128E                          l2751 1158                          l2671 2B34  
                        l2577 238A                          l2497 2CB4                          l2913 1720  
                        l2761 116C                          l2737 1126                          l2673 2B40  
                        l3297 19B8                          l2587 23B2                          l2499 2CB8  
                        l2835 1366                          l2827 1310                          l2819 12A6  
                        l2763 11A0                          l2755 1160                          l2739 112E  
                        l2675 2B44                          l2685 2B8E                          l2909 1718  
                        l2853 13BC                          l2773 11D0                          l2687 2B9A  
                        l2919 173A                          l2871 1442                          l2839 136E  
                        l2679 2B68                          l2961 1898                          l2881 1464  
                        l2849 13B4                          l2793 1246                          l2769 11C8  
                        l2699 2AD2                          l2963 18A0                          l2875 144A  
                        l2867 1426                          l2859 13C6                          l2893 1550  
                        l2789 123E                          l2981 1F38                          l2973 1F2A  
                        l2975 1F30                          l2977 1F34                          l2969 1F1A  
                        l2989 1F90                          _CMD0 104A                          _CMD1 1048  
                        _CMD8 1047                          _CMD9 1045                          STR_1 107B  
                        STR_2 10A3                          STR_3 1096                          STR_4 106C  
                        STR_5 1089                          STR_6 10C3                          STR_7 10AF  
                        STR_8 10DF                          STR_9 104B        SD_MBR_Start@startBlock 000D  
                        u2140 13AA                          _LATA 000F89                          u2150 13AC  
                        _LATB 000F8A                          u3007 1BD0                          _LATC 000F8B  
                        _LATD 000F8C                          u1505 29CA                          u3017 1C12  
                        _LATE 000F8D                          u1506 29CC                          u2250 1626  
                        u2235 1564                          u3107 2DF8                          u3027 1C2E  
                        u2260 1660                          u2245 15FE                          u3117 2C3E  
                        u3037 1C44                          u1470 2DA2                          u3207 29B2  
                        u2255 161C                          u3127 1128                          u3047 1C64  
                        u1480 2DAE                          u1472 2DA4                          u1800 225E  
                        u3217 29BC                          u1721 2318                          u2265 1656  
                        u3137 1142                          u3057 1CDE                          u1482 2DB0  
                        u2435 284E                          u3147 189A                          u3067 1D1A  
                        u2445 285E                          u2525 29D8                          u3157 2BEA  
                        u1741 2340                          u1805 2256                          u3077 1D30  
                        u1495 298A                          u3167 2C1E                          u1671 240C  
                        u3087 1EAA                          u1496 298C                          u2465 24EC  
                        u3177 2E0C                          u3097 1EC0                          u2715 2A5A  
                        u3187 2972                          u1691 2434                          u2645 25CA  
                        u3197 297C                          u1781 2224                          u1941 1104  
                        u2937 196A                          u2947 1A12                          u2957 1A28  
                        u2967 1A5A                          u2977 1ABA                          u2987 1AD0  
                        u2997 1BBA               __end_of_SD_ACMD 2CAA                          _main 1902  
                ___ftpack@arg 0001                  ___ftpack@exp 0004                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9           SD_SingleBlockRead@i 0014                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
                average@array 000E                initSD@argument 0037                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 001F                  ___param_bank 000000                  ___ftmul@sign 0020  
            __end_of_LCD_LEFT 102A                  ___fttol@exp1 002F   __size_of_SD_SingleBlockRead 00BC  
                ___fttol@lval 002B                   _writeBuffer 0D80                         ?_main 0001  
                       _CMD10 1044                         _CMD12 1043                         _CMD13 1042  
                       _CMD16 1041                         _CMD24 103E                         _CMD32 103C  
                       _CMD17 1040                         _CMD25 103D                         _CMD33 103B  
                       _CMD18 103F                         _CMD38 103A                         _CMD55 1039  
                       _CMD58 1038                         STR_10 10E8                         STR_11 10CD  
                       STR_12 105C                         STR_13 10D6                         STR_14 10B9  
                       STR_15 10E8                initSD@tempSize 003D               __end_of___ftdiv 24E2  
             __end_of___lldiv 2950               __end_of___ftmul 23FC               __end_of___llmod 2B88  
             __end_of___fttol 2308                initSD@response 0055                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                         _SSPIF 007CF3            initSD@last_OSCTUNE 003C  
    SD_SingleBlockWrite@block 000D                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0011               __end_of_lcdInst 2E14                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000            average@numElements 0010               __end_of_average 2B22  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 2C30                __CFG_EBTRB$OFF 000000               __end_of_dpowers 1029  
               ___ftpack@sign 0005                         _putch 2DEC                         main@i 006A  
                 initSD@F3023 006E               __end_of_spiInit 2CE2                         tablat 000FF5  
             __end_of_spiSend 2E1E             _LCDinterruptState 007F                         plusw1 000FE3  
                       plusw2 000FDB                   ?_SD_Command 0004                         status 000FD8  
              __CFG_PBADEN$ON 000000                  __end_of_CMD0 104B                  __end_of_CMD1 1049  
                __end_of_CMD8 1048                  __end_of_CMD9 1046          SD_SingleBlockWrite@i 0015  
             __initialization 2CE2                  __end_of_main 1F10      SD_MBR_Receive@bufReceive 0004  
           ?_lcd_shift_cursor 0004                __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT 102B  
                      ??_main 0057                 ___fttol@sign1 002A              ??_SD_EraseBlocks 0015  
          ??_lcd_shift_cursor 0005                 __activetblptr 000002  __size_of_SD_SingleBlockWrite 00DE  
          SD_Command@response 000B                     ??_SD_ACMD 0011                        _ACMD22 1037  
                      _ACMD23 1036                        _ACMD41 1035                        _ADCON0 000FC2  
                      _ADCON1 000FC1              ___llmod@dividend 000E                        ?_putch 0001  
            __end_of___ftpack 272A              __end_of___lltoft 2BE4              __end_of___lwtoft 2D94  
                      _OSCCON 000FD3                        _SDCard 0080                        _SSPBUF 000FC9  
                ?_SD_MBR_Stop 0001                  ?_SD_MBW_Send 000D                  ?_SD_MBW_Stop 0001  
     __size_of_SD_MBR_Receive 008A                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___ftdiv 0012                     ??___lldiv 0009                     ??___ftmul 0018  
                   ??___llmod 0016                     ??___fttol 0025                        _initSD 10F2  
                      clear_0 2CEA                        clear_1 2CFC                        clear_2 2D08  
                   ??_lcdInst 0003                        _printf 1F10                 main@numWrites 0067  
                   ??_average 0012         ___ftmul@f3_as_product 001C                     ??_initLCD 0004  
         __size_of_SD_Command 0090             __end_of_STOP_TRAN 1030         SD_SingleBlockRead@buf 0011  
                ?_spiTransfer 0001                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_spiInit 0001  
                   ??_spiSend 0003                    __accesstop 0080       __end_of__initialization 2D0E  
        SD_MBR_Start@response 0012                 __end_of_CMD10 1045                 __end_of_CMD12 1044  
               __end_of_CMD13 1043                 __end_of_CMD16 1042                 __end_of_CMD24 103F  
               __end_of_CMD32 103D                 __end_of_CMD17 1041                 __end_of_CMD25 103E  
               __end_of_CMD33 103C                 __end_of_CMD18 1040                 __end_of_CMD38 103B  
               __end_of_CMD55 103A                 __end_of_CMD58 1039                 ___rparam_used 000001  
                  ___ftdiv@f1 000C                    ___ftdiv@f2 000F                    ___ftdiv@f3 0016  
                  ___ftmul@f1 0012                    ___ftmul@f2 0015                    ___fttol@f1 0021  
              __pcstackCOMRAM 0001                    ___lltoft@c 0009                 __end_of_putch 2E00  
           _START_BLOCK_TOKEN 1030                    ___lwtoft@c 0009      SD_EraseBlocks@firstBlock 000D  
            ??_lcd_set_cursor 0008            __size_of_lcdNibble 007E                       ??_putch 0003  
                  __pbssBANK0 0080     __end_of_START_BLOCK_TOKEN 1031                       ?_initSD 0001  
                     _CMD0CRC 1049             _SD_SendDummyBytes 2DD4                       _CMD8CRC 1046  
                   ?___ftpack 0001                       ?_printf 0019                     ?___lltoft 0009  
              main@firstBlock 0069                     ?___lwtoft 0009            ?_SD_SendDummyBytes 0001  
                     _SD_ACMD 2C70                       _OSCTUNE 000F9B     spiTransfer@byteToTransfer 0002  
              main@readBuffer 0B80           ??_SD_SendDummyBytes 0004          lcd@LCDinterruptState 007E  
                     _SSPCON1 000FC6                       _SSPSTAT 000FC7                 ?_SD_MBR_Start 000D  
                ??_SD_Command 0008                 ?_SD_MBW_Start 0012           _SD_SingleBlockWrite 24E2  
           __end_of_lcdNibble 29CE                _SD_MBR_Receive 27BA            initSD@tempSize_689 0051  
                     __Hparam 0000                       __Lparam 0000    __end_of_SD_SingleBlockRead 267C  
        __size_of_SD_MBR_Stop 0028          __size_of_SD_MBW_Send 0104          __size_of_SD_MBW_Stop 0030  
   __end_of_SD_SendDummyBytes 2DEC                       ___ftdiv 23FC                       ___lldiv 28CE  
                     ___ftmul 2308                       ___llmod 2B22                       ___fttol 2214  
                __psmallconst 1000               __size_of_initSD 0810                       __pcinit 2CE2  
                  ??___ftpack 0006                       __ramtop 1000                       _lcdInst 2E00  
                  ??___lltoft 000D                       __ptext0 1902                       __ptext1 1F10  
                     __ptext2 2DEC                       __ptext3 2B22                       __ptext4 2C30  
                     __ptext5 2DB8                       __ptext6 10F2                       __ptext7 2CAA  
                     __ptext8 2D70                       __ptext9 2B88               __size_of_printf 0200  
                     _average 2AB8                    ??___lwtoft 000C          ?_SD_SingleBlockWrite 000D  
                     _initLCD 2BE4                       _dpowers 1001            __end_of_SD_Command 27BA  
                   _LCD_RIGHT 102A                       _spiInit 2CAA                       _spiSend 2E14  
        __size_of_spiTransfer 0024                       main@avg 0063     __size_of_lcd_shift_cursor 001C  
        end_of_initialization 2D0E                ??_SD_MBR_Start 0011                       initSD@i 0056  
       __end_of_R1_IDLE_STATE 1034         __end_of_LCD_SIZE_HORZ 102D         __end_of_LCD_SIZE_VERT 102C  
   SD_SendDummyBytes@numBytes 0004                ??_SD_MBW_Start 001A                 __Lmediumconst 0000  
      __end_of_SD_MBR_Receive 2844               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                     printf@c 002A                       printf@f 0019    SD_SingleBlockRead@response 0016  
                  _spiReceive 2E1E                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE         ??_SD_SingleBlockWrite 0013  
              spiInit@divider 0001                     _TRISCbits 000F94                     _TRISEbits 000F96  
                   _STOP_TRAN 102F                   SD_Command@n 000C                __end_of_ACMD22 1038  
              __end_of_ACMD23 1037                __end_of_ACMD41 1036                    average@sum 0013  
             ?_SD_MBR_Receive 0004                   ___ftdiv@exp 0019     lcd_shift_cursor@direction 0004  
      SD_SingleBlockWrite@arr 0011                   ___ftmul@exp 001B    __size_of_SD_SendDummyBytes 0018  
           initSD@last_OSCCON 003B                __end_of_initSD 1902                __end_of_printf 2110  
         start_initialization 2CE2    __end_of_R1_ILLEGAL_COMMAND 1033       __size_of_SD_EraseBlocks 008A  
             ___llmod@divisor 0012               ___llmod@counter 0016                   ?_spiReceive 0001  
            __CFG_LPT1OSC$OFF 000000                      ??_initSD 0030          __end_of_SD_MBR_Start 2AB8  
                    ??_printf 001F          __end_of_SD_MBW_Start 2A4C             __size_of___ftpack 00AE  
                 __pbssBIGRAM 0B80             __size_of___lltoft 005C                   __pbssCOMRAM 006E  
           __size_of___lwtoft 0024                      ?_SD_ACMD 000D              _lcd_shift_cursor 2DB8  
     SD_EraseBlocks@lastBlock 0011               SD_MBR_Receive@i 0007             __CFG_CCP2MX$PORTC 000000  
                  SD_ACMD@cmd 0011                    SD_ACMD@arg 000D                     _lcdNibble 2950  
                    ?___ftdiv 000C                      ?___lldiv 0001                      ?___ftmul 0012  
                    ?___llmod 000E                      ?___fttol 0021                      ?_lcdInst 0001  
                    ?_average 000E                      ?_initLCD 0001                   __smallconst 1000  
          _SD_SingleBlockRead 25C0                      ?_spiInit 0001                      ?_spiSend 0001  
         ?_SD_SingleBlockRead 000D           __size_of_spiReceive 0008                __size_of_putch 0014  
                    _LCD_LEFT 1029       __size_of_lcd_set_cursor 0040                      _LATDbits 000F8C  
                    _LATEbits 000F8D                 ??_SD_MBR_Stop 000D                 ??_SD_MBW_Send 000F  
               ??_SD_MBW_Stop 0004               lcd_set_cursor@i 0009               lcd_set_cursor@x 000A  
             lcd_set_cursor@y 0007                    spiSend@val 0003              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001          ??_SD_SingleBlockRead 0013   SD_SingleBlockWrite@response 0014  
               lcdNibble@data 0002                    printf@flag 0029                 lcdNibble@temp 0001  
               ??_spiTransfer 0001                    printf@prec 0021                _LCD_HORZ_LIMIT 102E  
            ??_SD_MBR_Receive 0006              __size_of_SD_ACMD 003A                _SD_EraseBlocks 2844  
                    __Hrparam 0000                      __Lrparam 0000         __size_of_SD_MBR_Start 006C  
          __CFG_BOREN$SBORDIS 000000   __end_of_SD_SingleBlockWrite 25C0         __size_of_SD_MBW_Start 007E  
         __end_of_SD_MBR_Stop 2D70           __end_of_SD_MBW_Send 2214           __end_of_SD_MBW_Stop 2D48  
            __size_of___ftdiv 00E6              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___fttol 00F4                      ___ftpack 267C  
                    ___lltoft 2B88                      ___lwtoft 2D70              __size_of_lcdInst 0014  
            __size_of_average 006A              __size_of_initLCD 004C        __end_of_LCD_HORZ_LIMIT 102F  
      __end_of_SD_EraseBlocks 28CE                      __ptext10 2214                      __ptext11 2308  
                    __ptext20 25C0                      __ptext12 23FC                      __ptext21 2D18  
                    __ptext13 267C                      __ptext30 272A                      __ptext22 29CE  
                    __ptext14 2BE4                      __ptext31 2E14                      __ptext23 2C70  
                    __ptext15 2E00                      __ptext32 2E1E                      __ptext24 2110  
                    __ptext16 2950                      __ptext33 2D94                      __ptext25 2DD4  
                    __ptext17 2AB8                      __ptext26 2D48                      __ptext18 28CE  
                    __ptext27 2A4C                      __ptext19 24E2                      __ptext28 27BA  
                    __ptext29 2844              __size_of_spiInit 0038              __size_of_spiSend 000A  
         __end_of_START_BLOCK 1032                _LCD_VERT_LIMIT 102D                  SD_MBW_Send@i 0011  
         __end_of_spiTransfer 2DB8                  _SD_MBR_Start 2A4C                 __size_of_main 060E  
                _SD_MBW_Start 29CE            _R1_ILLEGAL_COMMAND 1032                  ??_spiReceive 0003  
                 ??_lcdNibble 0001      __end_of_lcd_shift_cursor 2DD4        SD_MBW_Start@startBlock 0012  
                    average@n 0017                     printf@val 0023             lcd_shift_cursor@n 0006  
                   putch@data 0003                   _OSCTUNEbits 000F9B                    _INTCONbits 000FF2  
      __end_of_LCD_VERT_LIMIT 102E               ?_SD_EraseBlocks 000D       SD_SingleBlockRead@block 000D  
       SD_MBW_Start@numBlocks 0016                _lcd_set_cursor 2C30            __end_of_spiReceive 2E26  
               _R1_IDLE_STATE 1033                 _LCD_SIZE_HORZ 102C                 _LCD_SIZE_VERT 102B  
            ___lldiv@dividend 0001           SD_MBW_Send@arrWrite 000D                   _SD_MBR_Stop 2D48  
                 _SD_MBW_Send 2110                   _SD_MBW_Stop 2D18                    _OSCCONbits 000FD3  
                    printf@ap 0027                _R1_READY_STATE 1034                   lcdInst@data 0003  
         SD_MBW_Send@response 0010                   _START_BLOCK 1031              ___lldiv@quotient 0009  
                 _spiTransfer 2D94                   _SSPCON1bits 000FC6        __end_of_lcd_set_cursor 2C70  
                  _SD_Command 272A      lcd_shift_cursor@numChars 0005             SD_MBW_Send@status 000F  
