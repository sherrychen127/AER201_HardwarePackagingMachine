

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Jan 07 23:13:07 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71  0000                     
    72                           ; Version 1.43
    73                           ; Generated 25/07/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4620 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataCOMRAM
   108  00CB76                     __pidataCOMRAM:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _UART
   112  00CB76  CE                 	db	low _uart
   113  00CB77  00                 	db	high _uart
   114                           
   115                           	psect	idataBANK0
   116  00CBA5                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for testUART@F3249
   120  00CBA5  48                 	db	72
   121  00CBA6  65                 	db	101
   122  00CBA7  6C                 	db	108
   123  00CBA8  6C                 	db	108
   124  00CBA9  6F                 	db	111
   125  00CBAA  20                 	db	32
   126  00CBAB  77                 	db	119
   127  00CBAC  6F                 	db	111
   128  00CBAD  72                 	db	114
   129  00CBAE  6C                 	db	108
   130  00CBAF  64                 	db	100
   131  00CBB0  21                 	db	33
   132  00CBB1  00                 	db	0
   133                           
   134                           	psect	mediumconst
   135  00FE5E                     __pmediumconst:
   136                           	opt stack 0
   137  00FE5E  00                 	db	0
   138  00FE5F                     _dpowers:
   139                           	opt stack 0
   140  00FE5F  0001               	dw	1
   141  00FE61  0000               	dw	0
   142  00FE63  000A               	dw	10
   143  00FE65  0000               	dw	0
   144  00FE67  0064               	dw	100
   145  00FE69  0000               	dw	0
   146  00FE6B  03E8               	dw	1000
   147  00FE6D  0000               	dw	0
   148  00FE6F  2710               	dw	10000
   149  00FE71  0000               	dw	0
   150  00FE73  86A0               	dw	34464
   151  00FE75  0001               	dw	1
   152  00FE77  4240               	dw	16960
   153  00FE79  000F               	dw	15
   154  00FE7B  9680               	dw	38528
   155  00FE7D  0098               	dw	152
   156  00FE7F  E100               	dw	57600
   157  00FE81  05F5               	dw	1525
   158  00FE83  CA00               	dw	51712
   159  00FE85  3B9A               	dw	15258
   160  00FE87                     __end_of_dpowers:
   161                           	opt stack 0
   162  00FE87                     __powers_:
   163                           	opt stack 0
   164  00FE87  00                 	db	0
   165  00FE88  80                 	db	128
   166  00FE89  3F                 	db	63
   167  00FE8A  00                 	db	0
   168  00FE8B  20                 	db	32
   169  00FE8C  41                 	db	65
   170  00FE8D  00                 	db	0
   171  00FE8E  C8                 	db	200
   172  00FE8F  42                 	db	66
   173  00FE90  00                 	db	0
   174  00FE91  7A                 	db	122
   175  00FE92  44                 	db	68
   176  00FE93  40                 	db	64
   177  00FE94  1C                 	db	28
   178  00FE95  46                 	db	70
   179  00FE96  50                 	db	80
   180  00FE97  C3                 	db	195
   181  00FE98  47                 	db	71
   182  00FE99  24                 	db	36
   183  00FE9A  74                 	db	116
   184  00FE9B  49                 	db	73
   185  00FE9C  97                 	db	151
   186  00FE9D  18                 	db	24
   187  00FE9E  4B                 	db	75
   188  00FE9F  BC                 	db	188
   189  00FEA0  BE                 	db	190
   190  00FEA1  4C                 	db	76
   191  00FEA2  6B                 	db	107
   192  00FEA3  6E                 	db	110
   193  00FEA4  4E                 	db	78
   194  00FEA5  03                 	db	3
   195  00FEA6  15                 	db	21
   196  00FEA7  50                 	db	80
   197  00FEA8  79                 	db	121
   198  00FEA9  AD                 	db	173
   199  00FEAA  60                 	db	96
   200  00FEAB  F3                 	db	243
   201  00FEAC  49                 	db	73
   202  00FEAD  71                 	db	113
   203  00FEAE                     __end_of__powers_:
   204                           	opt stack 0
   205  00FEAE                     __npowers_:
   206                           	opt stack 0
   207  00FEAE  00                 	db	0
   208  00FEAF  80                 	db	128
   209  00FEB0  3F                 	db	63
   210  00FEB1  CD                 	db	205
   211  00FEB2  CC                 	db	204
   212  00FEB3  3D                 	db	61
   213  00FEB4  D7                 	db	215
   214  00FEB5  23                 	db	35
   215  00FEB6  3C                 	db	60
   216  00FEB7  12                 	db	18
   217  00FEB8  83                 	db	131
   218  00FEB9  3A                 	db	58
   219  00FEBA  B7                 	db	183
   220  00FEBB  D1                 	db	209
   221  00FEBC  38                 	db	56
   222  00FEBD  C6                 	db	198
   223  00FEBE  27                 	db	39
   224  00FEBF  37                 	db	55
   225  00FEC0  38                 	db	56
   226  00FEC1  86                 	db	134
   227  00FEC2  35                 	db	53
   228  00FEC3  C0                 	db	192
   229  00FEC4  D6                 	db	214
   230  00FEC5  33                 	db	51
   231  00FEC6  CC                 	db	204
   232  00FEC7  2B                 	db	43
   233  00FEC8  32                 	db	50
   234  00FEC9  70                 	db	112
   235  00FECA  89                 	db	137
   236  00FECB  30                 	db	48
   237  00FECC  E7                 	db	231
   238  00FECD  DB                 	db	219
   239  00FECE  2E                 	db	46
   240  00FECF  E5                 	db	229
   241  00FED0  3C                 	db	60
   242  00FED1  1E                 	db	30
   243  00FED2  42                 	db	66
   244  00FED3  A2                 	db	162
   245  00FED4  0D                 	db	13
   246  00FED5                     __end_of__npowers_:
   247                           	opt stack 0
   248  00FED5                     _hexpowers:
   249                           	opt stack 0
   250  00FED5  0001               	dw	1
   251  00FED7  0000               	dw	0
   252  00FED9  0010               	dw	16
   253  00FEDB  0000               	dw	0
   254  00FEDD  0100               	dw	256
   255  00FEDF  0000               	dw	0
   256  00FEE1  1000               	dw	4096
   257  00FEE3  0000               	dw	0
   258  00FEE5  0000               	dw	0
   259  00FEE7  0001               	dw	1
   260  00FEE9  0000               	dw	0
   261  00FEEB  0010               	dw	16
   262  00FEED  0000               	dw	0
   263  00FEEF  0100               	dw	256
   264  00FEF1  0000               	dw	0
   265  00FEF3  1000               	dw	4096
   266  00FEF5                     __end_of_hexpowers:
   267                           	opt stack 0
   268  00FEF5                     _happynewyear:
   269                           	opt stack 0
   270  00FEF5  45                 	db	69
   271  00FEF6  59                 	db	89
   272  00FEF7  23                 	db	35
   273  00FEF8  00                 	db	0
   274  00FEF9  31                 	db	49
   275  00FEFA  12                 	db	18
   276  00FEFB  17                 	db	23
   277  00FEFC                     __end_of_happynewyear:
   278                           	opt stack 0
   279  00FEFC                     _VIOLET:
   280                           	opt stack 0
   281  00FEFC  00D3               	dw	211
   282  00FEFE  0094               	dw	148
   283  00FF00                     __end_of_VIOLET:
   284                           	opt stack 0
   285  00FF00                     _INDIGO:
   286                           	opt stack 0
   287  00FF00  0082               	dw	130
   288  00FF02  004B               	dw	75
   289  00FF04                     __end_of_INDIGO:
   290                           	opt stack 0
   291  00FF04                     _BLUE:
   292                           	opt stack 0
   293  00FF04  00FF               	dw	255
   294  00FF06  0000               	dw	0
   295  00FF08                     __end_of_BLUE:
   296                           	opt stack 0
   297  00FF08                     _GREEN:
   298                           	opt stack 0
   299  00FF08  FF00               	dw	65280
   300  00FF0A  0000               	dw	0
   301  00FF0C                     __end_of_GREEN:
   302                           	opt stack 0
   303  00FF0C                     _YELLOW:
   304                           	opt stack 0
   305  00FF0C  FF00               	dw	65280
   306  00FF0E  00FF               	dw	255
   307  00FF10                     __end_of_YELLOW:
   308                           	opt stack 0
   309  00FF10                     _ORANGE:
   310                           	opt stack 0
   311  00FF10  8C00               	dw	35840
   312  00FF12  00FF               	dw	255
   313  00FF14                     __end_of_ORANGE:
   314                           	opt stack 0
   315  00FF14                     _RED:
   316                           	opt stack 0
   317  00FF14  0000               	dw	0
   318  00FF16  00FF               	dw	255
   319  00FF18                     __end_of_RED:
   320                           	opt stack 0
   321  00FF18                     _WHITE:
   322                           	opt stack 0
   323  00FF18  FFFF               	dw	65535
   324  00FF1A  00FF               	dw	255
   325  00FF1C                     __end_of_WHITE:
   326                           	opt stack 0
   327  00FF1C                     _GREY:
   328                           	opt stack 0
   329  00FF1C  8080               	dw	32896
   330  00FF1E  0080               	dw	128
   331  00FF20                     __end_of_GREY:
   332                           	opt stack 0
   333  00FF20                     _BLACK:
   334                           	opt stack 0
   335  00FF20  0000               	dw	0
   336  00FF22  0000               	dw	0
   337  00FF24                     __end_of_BLACK:
   338                           	opt stack 0
   339  00FF24  C7                 	db	199
   340  00FF25                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   341                           	opt stack 0
   342  00FF25                     GLCD_PIC@INST_VMCTR1:
   343                           	opt stack 0
   344  00FF25  C5                 	db	197
   345  00FF26                     __end_ofGLCD_PIC@INST_VMCTR1:
   346                           	opt stack 0
   347  00FF26                     GLCD_PIC@INST_PWCTR5:
   348                           	opt stack 0
   349  00FF26  C4                 	db	196
   350  00FF27                     __end_ofGLCD_PIC@INST_PWCTR5:
   351                           	opt stack 0
   352  00FF27                     GLCD_PIC@INST_PWCTR4:
   353                           	opt stack 0
   354  00FF27  C3                 	db	195
   355  00FF28                     __end_ofGLCD_PIC@INST_PWCTR4:
   356                           	opt stack 0
   357  00FF28                     GLCD_PIC@INST_PWCTR3:
   358                           	opt stack 0
   359  00FF28  C2                 	db	194
   360  00FF29                     __end_ofGLCD_PIC@INST_PWCTR3:
   361                           	opt stack 0
   362  00FF29                     GLCD_PIC@INST_PWCTR2:
   363                           	opt stack 0
   364  00FF29  C1                 	db	193
   365  00FF2A                     __end_ofGLCD_PIC@INST_PWCTR2:
   366                           	opt stack 0
   367  00FF2A                     GLCD_PIC@INST_PWCTR1:
   368                           	opt stack 0
   369  00FF2A  C0                 	db	192
   370  00FF2B                     __end_ofGLCD_PIC@INST_PWCTR1:
   371                           	opt stack 0
   372  00FF2B                     GLCD_PIC@INST_INVCTR:
   373                           	opt stack 0
   374  00FF2B  B4                 	db	180
   375  00FF2C                     __end_ofGLCD_PIC@INST_INVCTR:
   376                           	opt stack 0
   377  00FF2C                     GLCD_PIC@INST_FRMCTR3:
   378                           	opt stack 0
   379  00FF2C  B3                 	db	179
   380  00FF2D                     __end_ofGLCD_PIC@INST_FRMCTR3:
   381                           	opt stack 0
   382  00FF2D                     GLCD_PIC@INST_FRMCTR2:
   383                           	opt stack 0
   384  00FF2D  B2                 	db	178
   385  00FF2E                     __end_ofGLCD_PIC@INST_FRMCTR2:
   386                           	opt stack 0
   387  00FF2E                     GLCD_PIC@INST_FRMCTR1:
   388                           	opt stack 0
   389  00FF2E  B1                 	db	177
   390  00FF2F                     __end_ofGLCD_PIC@INST_FRMCTR1:
   391                           	opt stack 0
   392  00FF2F                     GLCD_PIC@INST_COLMOD:
   393                           	opt stack 0
   394  00FF2F  3A                 	db	58
   395  00FF30                     __end_ofGLCD_PIC@INST_COLMOD:
   396                           	opt stack 0
   397  00FF30  39                 	db	57
   398  00FF31                     __end_ofGLCD_PIC@INST_IDMON:
   399                           	opt stack 0
   400  00FF31                     GLCD_PIC@INST_IDMOFF:
   401                           	opt stack 0
   402  00FF31  38                 	db	56
   403  00FF32                     __end_ofGLCD_PIC@INST_IDMOFF:
   404                           	opt stack 0
   405  00FF32                     GLCD_PIC@INST_MADCTL:
   406                           	opt stack 0
   407  00FF32  36                 	db	54
   408  00FF33                     __end_ofGLCD_PIC@INST_MADCTL:
   409                           	opt stack 0
   410  00FF33  35                 	db	53
   411  00FF34                     __end_ofGLCD_PIC@INST_TEON:
   412                           	opt stack 0
   413  00FF34  34                 	db	52
   414  00FF35                     __end_ofGLCD_PIC@INST_TEOFF:
   415                           	opt stack 0
   416  00FF35  30                 	db	48
   417  00FF36                     __end_ofGLCD_PIC@INST_PTLAR:
   418                           	opt stack 0
   419  00FF36                     GLCD_PIC@INST_RAMWR:
   420                           	opt stack 0
   421  00FF36  2C                 	db	44
   422  00FF37                     __end_ofGLCD_PIC@INST_RAMWR:
   423                           	opt stack 0
   424  00FF37                     GLCD_PIC@INST_RASET:
   425                           	opt stack 0
   426  00FF37  2B                 	db	43
   427  00FF38                     __end_ofGLCD_PIC@INST_RASET:
   428                           	opt stack 0
   429  00FF38                     GLCD_PIC@INST_CASET:
   430                           	opt stack 0
   431  00FF38  2A                 	db	42
   432  00FF39                     __end_ofGLCD_PIC@INST_CASET:
   433                           	opt stack 0
   434  00FF39                     GLCD_PIC@INST_DISPON:
   435                           	opt stack 0
   436  00FF39  29                 	db	41
   437  00FF3A                     __end_ofGLCD_PIC@INST_DISPON:
   438                           	opt stack 0
   439  00FF3A  28                 	db	40
   440  00FF3B                     __end_ofGLCD_PIC@INST_DISPOFF:
   441                           	opt stack 0
   442  00FF3B                     GLCD_PIC@INST_GAMSET:
   443                           	opt stack 0
   444  00FF3B  26                 	db	38
   445  00FF3C                     __end_ofGLCD_PIC@INST_GAMSET:
   446                           	opt stack 0
   447  00FF3C  21                 	db	33
   448  00FF3D                     __end_ofGLCD_PIC@INST_INVON:
   449                           	opt stack 0
   450  00FF3D                     GLCD_PIC@INST_INVOFF:
   451                           	opt stack 0
   452  00FF3D  20                 	db	32
   453  00FF3E                     __end_ofGLCD_PIC@INST_INVOFF:
   454                           	opt stack 0
   455  00FF3E                     GLCD_PIC@INST_NORON:
   456                           	opt stack 0
   457  00FF3E  13                 	db	19
   458  00FF3F                     __end_ofGLCD_PIC@INST_NORON:
   459                           	opt stack 0
   460  00FF3F  12                 	db	18
   461  00FF40                     __end_ofGLCD_PIC@INST_PTLON:
   462                           	opt stack 0
   463  00FF40                     GLCD_PIC@INST_SLPOUT:
   464                           	opt stack 0
   465  00FF40  11                 	db	17
   466  00FF41                     __end_ofGLCD_PIC@INST_SLPOUT:
   467                           	opt stack 0
   468  00FF41  10                 	db	16
   469  00FF42                     __end_ofGLCD_PIC@INST_SLPIN:
   470                           	opt stack 0
   471  00FF42                     GLCD_PIC@INST_SWRESET:
   472                           	opt stack 0
   473  00FF42  01                 	db	1
   474  00FF43                     __end_ofGLCD_PIC@INST_SWRESET:
   475                           	opt stack 0
   476  00FF43  00                 	db	0
   477  00FF44                     __end_ofGLCD_PIC@INST_NOP:
   478                           	opt stack 0
   479  00FF44  C7                 	db	199
   480  00FF45                     __end_of_INST_VMOFCTR2:
   481                           	opt stack 0
   482  00FF45  C5                 	db	197
   483  00FF46                     __end_of_INST_VMCTR1:
   484                           	opt stack 0
   485  00FF46  C4                 	db	196
   486  00FF47                     __end_of_INST_PWCTR5:
   487                           	opt stack 0
   488  00FF47  C3                 	db	195
   489  00FF48                     __end_of_INST_PWCTR4:
   490                           	opt stack 0
   491  00FF48  C2                 	db	194
   492  00FF49                     __end_of_INST_PWCTR3:
   493                           	opt stack 0
   494  00FF49  C1                 	db	193
   495  00FF4A                     __end_of_INST_PWCTR2:
   496                           	opt stack 0
   497  00FF4A  C0                 	db	192
   498  00FF4B                     __end_of_INST_PWCTR1:
   499                           	opt stack 0
   500  00FF4B  B4                 	db	180
   501  00FF4C                     __end_of_INST_INVCTR:
   502                           	opt stack 0
   503  00FF4C  B3                 	db	179
   504  00FF4D                     __end_of_INST_FRMCTR3:
   505                           	opt stack 0
   506  00FF4D  B2                 	db	178
   507  00FF4E                     __end_of_INST_FRMCTR2:
   508                           	opt stack 0
   509  00FF4E  B1                 	db	177
   510  00FF4F                     __end_of_INST_FRMCTR1:
   511                           	opt stack 0
   512  00FF4F  3A                 	db	58
   513  00FF50                     __end_of_INST_COLMOD:
   514                           	opt stack 0
   515  00FF50  39                 	db	57
   516  00FF51                     __end_of_INST_IDMON:
   517                           	opt stack 0
   518  00FF51  38                 	db	56
   519  00FF52                     __end_of_INST_IDMOFF:
   520                           	opt stack 0
   521  00FF52  36                 	db	54
   522  00FF53                     __end_of_INST_MADCTL:
   523                           	opt stack 0
   524  00FF53  35                 	db	53
   525  00FF54                     __end_of_INST_TEON:
   526                           	opt stack 0
   527  00FF54  34                 	db	52
   528  00FF55                     __end_of_INST_TEOFF:
   529                           	opt stack 0
   530  00FF55  30                 	db	48
   531  00FF56                     __end_of_INST_PTLAR:
   532                           	opt stack 0
   533  00FF56  2C                 	db	44
   534  00FF57                     __end_of_INST_RAMWR:
   535                           	opt stack 0
   536  00FF57  2B                 	db	43
   537  00FF58                     __end_of_INST_RASET:
   538                           	opt stack 0
   539  00FF58  2A                 	db	42
   540  00FF59                     __end_of_INST_CASET:
   541                           	opt stack 0
   542  00FF59  29                 	db	41
   543  00FF5A                     __end_of_INST_DISPON:
   544                           	opt stack 0
   545  00FF5A  28                 	db	40
   546  00FF5B                     __end_of_INST_DISPOFF:
   547                           	opt stack 0
   548  00FF5B  26                 	db	38
   549  00FF5C                     __end_of_INST_GAMSET:
   550                           	opt stack 0
   551  00FF5C  21                 	db	33
   552  00FF5D                     __end_of_INST_INVON:
   553                           	opt stack 0
   554  00FF5D  20                 	db	32
   555  00FF5E                     __end_of_INST_INVOFF:
   556                           	opt stack 0
   557  00FF5E  13                 	db	19
   558  00FF5F                     __end_of_INST_NORON:
   559                           	opt stack 0
   560  00FF5F  12                 	db	18
   561  00FF60                     __end_of_INST_PTLON:
   562                           	opt stack 0
   563  00FF60  11                 	db	17
   564  00FF61                     __end_of_INST_SLPOUT:
   565                           	opt stack 0
   566  00FF61  10                 	db	16
   567  00FF62                     __end_of_INST_SLPIN:
   568                           	opt stack 0
   569  00FF62  01                 	db	1
   570  00FF63                     __end_of_INST_SWRESET:
   571                           	opt stack 0
   572  00FF63  00                 	db	0
   573  00FF64                     __end_of_INST_NOP:
   574                           	opt stack 0
   575  00FF64                     _GLCD_SIZE_VERT:
   576                           	opt stack 0
   577  00FF64  80                 	db	128
   578  00FF65                     __end_of_GLCD_SIZE_VERT:
   579                           	opt stack 0
   580  00FF65                     _GLCD_SIZE_HORZ:
   581                           	opt stack 0
   582  00FF65  80                 	db	128
   583  00FF66                     __end_of_GLCD_SIZE_HORZ:
   584                           	opt stack 0
   585  00FF66                     _GLCD_ADDRESSABLE_SIZE_VERT:
   586                           	opt stack 0
   587  00FF66  A0                 	db	160
   588  00FF67                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   589                           	opt stack 0
   590  00FF67                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   591                           	opt stack 0
   592  00FF67  80                 	db	128
   593  00FF68                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   594                           	opt stack 0
   595  00FF68                     _LCD_LEFT:
   596                           	opt stack 0
   597  00FF68  00                 	db	0
   598  00FF69                     __end_of_LCD_LEFT:
   599                           	opt stack 0
   600  00FF69                     _LCD_RIGHT:
   601                           	opt stack 0
   602  00FF69  01                 	db	1
   603  00FF6A                     __end_of_LCD_RIGHT:
   604                           	opt stack 0
   605  00FF6A                     _LCD_SIZE_VERT:
   606                           	opt stack 0
   607  00FF6A  02                 	db	2
   608  00FF6B                     __end_of_LCD_SIZE_VERT:
   609                           	opt stack 0
   610  00FF6B                     _LCD_SIZE_HORZ:
   611                           	opt stack 0
   612  00FF6B  10                 	db	16
   613  00FF6C                     __end_of_LCD_SIZE_HORZ:
   614                           	opt stack 0
   615  00FF6C                     _LCD_VERT_LIMIT:
   616                           	opt stack 0
   617  00FF6C  02                 	db	2
   618  00FF6D                     __end_of_LCD_VERT_LIMIT:
   619                           	opt stack 0
   620  00FF6D                     _LCD_HORZ_LIMIT:
   621                           	opt stack 0
   622  00FF6D  28                 	db	40
   623  00FF6E                     __end_of_LCD_HORZ_LIMIT:
   624                           	opt stack 0
   625  00FF6E                     _STOP_TRAN:
   626                           	opt stack 0
   627  00FF6E  FD                 	db	253
   628  00FF6F                     __end_of_STOP_TRAN:
   629                           	opt stack 0
   630  00FF6F                     _START_BLOCK_TOKEN:
   631                           	opt stack 0
   632  00FF6F  FC                 	db	252
   633  00FF70                     __end_of_START_BLOCK_TOKEN:
   634                           	opt stack 0
   635  00FF70                     _START_BLOCK:
   636                           	opt stack 0
   637  00FF70  FE                 	db	254
   638  00FF71                     __end_of_START_BLOCK:
   639                           	opt stack 0
   640  00FF71                     _R1_ILLEGAL_COMMAND:
   641                           	opt stack 0
   642  00FF71  04                 	db	4
   643  00FF72                     __end_of_R1_ILLEGAL_COMMAND:
   644                           	opt stack 0
   645  00FF72                     _R1_IDLE_STATE:
   646                           	opt stack 0
   647  00FF72  01                 	db	1
   648  00FF73                     __end_of_R1_IDLE_STATE:
   649                           	opt stack 0
   650  00FF73                     _R1_READY_STATE:
   651                           	opt stack 0
   652  00FF73  00                 	db	0
   653  00FF74                     __end_of_R1_READY_STATE:
   654                           	opt stack 0
   655  00FF74                     _ACMD41:
   656                           	opt stack 0
   657  00FF74  29                 	db	41
   658  00FF75                     __end_of_ACMD41:
   659                           	opt stack 0
   660  00FF75                     _ACMD23:
   661                           	opt stack 0
   662  00FF75  17                 	db	23
   663  00FF76                     __end_of_ACMD23:
   664                           	opt stack 0
   665  00FF76                     _ACMD22:
   666                           	opt stack 0
   667  00FF76  16                 	db	22
   668  00FF77                     __end_of_ACMD22:
   669                           	opt stack 0
   670  00FF77                     _CMD58:
   671                           	opt stack 0
   672  00FF77  3A                 	db	58
   673  00FF78                     __end_of_CMD58:
   674                           	opt stack 0
   675  00FF78                     _CMD55:
   676                           	opt stack 0
   677  00FF78  37                 	db	55
   678  00FF79                     __end_of_CMD55:
   679                           	opt stack 0
   680  00FF79                     _CMD38:
   681                           	opt stack 0
   682  00FF79  26                 	db	38
   683  00FF7A                     __end_of_CMD38:
   684                           	opt stack 0
   685  00FF7A                     _CMD33:
   686                           	opt stack 0
   687  00FF7A  21                 	db	33
   688  00FF7B                     __end_of_CMD33:
   689                           	opt stack 0
   690  00FF7B                     _CMD32:
   691                           	opt stack 0
   692  00FF7B  20                 	db	32
   693  00FF7C                     __end_of_CMD32:
   694                           	opt stack 0
   695  00FF7C                     _CMD25:
   696                           	opt stack 0
   697  00FF7C  19                 	db	25
   698  00FF7D                     __end_of_CMD25:
   699                           	opt stack 0
   700  00FF7D                     _CMD24:
   701                           	opt stack 0
   702  00FF7D  18                 	db	24
   703  00FF7E                     __end_of_CMD24:
   704                           	opt stack 0
   705  00FF7E                     _CMD18:
   706                           	opt stack 0
   707  00FF7E  12                 	db	18
   708  00FF7F                     __end_of_CMD18:
   709                           	opt stack 0
   710  00FF7F                     _CMD17:
   711                           	opt stack 0
   712  00FF7F  11                 	db	17
   713  00FF80                     __end_of_CMD17:
   714                           	opt stack 0
   715  00FF80                     _CMD16:
   716                           	opt stack 0
   717  00FF80  10                 	db	16
   718  00FF81                     __end_of_CMD16:
   719                           	opt stack 0
   720  00FF81                     _CMD13:
   721                           	opt stack 0
   722  00FF81  0D                 	db	13
   723  00FF82                     __end_of_CMD13:
   724                           	opt stack 0
   725  00FF82                     _CMD12:
   726                           	opt stack 0
   727  00FF82  0C                 	db	12
   728  00FF83                     __end_of_CMD12:
   729                           	opt stack 0
   730  00FF83                     _CMD10:
   731                           	opt stack 0
   732  00FF83  0A                 	db	10
   733  00FF84                     __end_of_CMD10:
   734                           	opt stack 0
   735  00FF84                     _CMD9:
   736                           	opt stack 0
   737  00FF84  09                 	db	9
   738  00FF85                     __end_of_CMD9:
   739                           	opt stack 0
   740  00FF85                     _CMD8CRC:
   741                           	opt stack 0
   742  00FF85  87                 	db	135
   743  00FF86                     __end_of_CMD8CRC:
   744                           	opt stack 0
   745  00FF86                     _CMD8:
   746                           	opt stack 0
   747  00FF86  08                 	db	8
   748  00FF87                     __end_of_CMD8:
   749                           	opt stack 0
   750  00FF87                     _CMD1:
   751                           	opt stack 0
   752  00FF87  01                 	db	1
   753  00FF88                     __end_of_CMD1:
   754                           	opt stack 0
   755  00FF88                     _CMD0CRC:
   756                           	opt stack 0
   757  00FF88  95                 	db	149
   758  00FF89                     __end_of_CMD0CRC:
   759                           	opt stack 0
   760  00FF89                     _CMD0:
   761                           	opt stack 0
   762  00FF89  00                 	db	0
   763  00FF8A                     __end_of_CMD0:
   764                           	opt stack 0
   765  0000                     _TRISDbits	set	3989
   766  0000                     _ADRESL	set	4035
   767  0000                     _ADRESH	set	4036
   768  0000                     _ADCON0bits	set	4034
   769  0000                     _ADCON2	set	4032
   770  0000                     _CMCONbits	set	4020
   771  0000                     _CVRCON	set	4021
   772  0000                     _ADCON2bits	set	4032
   773  0000                     _ADCON1	set	4033
   774  0000                     _ADCON0	set	4034
   775  0000                     _TRISE	set	3990
   776  0000                     _TRISD	set	3989
   777  0000                     _TRISC	set	3988
   778  0000                     _TRISB	set	3987
   779  0000                     _TRISA	set	3986
   780  0000                     _LATE	set	3981
   781  0000                     _LATC	set	3979
   782  0000                     _LATB	set	3978
   783  0000                     _LATA	set	3977
   784  0000                     _PORTB	set	3969
   785  0000                     _PORTBbits	set	3969
   786  0000                     _LATD	set	3980
   787  0000                     _LATDbits	set	3980
   788  0000                     _SPBRG	set	4015
   789  0000                     _RCREG	set	4014
   790  0000                     _RCSTAbits	set	4011
   791  0000                     _TXREG	set	4013
   792  0000                     _INTCONbits	set	4082
   793  0000                     _TXSTAbits	set	4012
   794  0000                     _SSPSTATbits	set	4039
   795  0000                     _TRISEbits	set	3990
   796  0000                     _OSCCONbits	set	4051
   797  0000                     _OSCTUNEbits	set	3995
   798  0000                     _OSCTUNE	set	3995
   799  0000                     _OSCCON	set	4051
   800  0000                     _LATEbits	set	3981
   801  0000                     _SSPBUF	set	4041
   802  0000                     _SSPCON2bits	set	4037
   803  0000                     _SSPADD	set	4040
   804  0000                     _SSPCON2	set	4037
   805  0000                     _SSPCON1	set	4038
   806  0000                     _SSPSTAT	set	4039
   807  0000                     _TRISCbits	set	3988
   808  0000                     _SSPCON1bits	set	4038
   809  0000                     _ADON	set	32272
   810  0000                     _TRISC7	set	31911
   811  0000                     _TRISC6	set	31910
   812  0000                     _RCIE	set	31981
   813  0000                     _RCIF	set	31989
   814  0000                     _TXIE	set	31980
   815  0000                     _TRMT	set	32097
   816  0000                     _TXIF	set	31988
   817  0000                     _SSPIF	set	31987
   818  00FF8A                     STR_9:
   819  00FF8A  30                 	db	48	;'0'
   820  00FF8B  31                 	db	49	;'1'
   821  00FF8C  32                 	db	50	;'2'
   822  00FF8D  33                 	db	51	;'3'
   823  00FF8E  34                 	db	52	;'4'
   824  00FF8F  35                 	db	53	;'5'
   825  00FF90  36                 	db	54	;'6'
   826  00FF91  37                 	db	55	;'7'
   827  00FF92  38                 	db	56	;'8'
   828  00FF93  39                 	db	57	;'9'
   829  00FF94  61                 	db	97	;'a'
   830  00FF95  62                 	db	98	;'b'
   831  00FF96  63                 	db	99	;'c'
   832  00FF97  64                 	db	100	;'d'
   833  00FF98  65                 	db	101	;'e'
   834  00FF99  66                 	db	102	;'f'
   835  00FF9A  00                 	db	0
   836  00FF9B                     STR_5:
   837  00FF9B  53                 	db	83	;'S'
   838  00FF9C  44                 	db	68	;'D'
   839  00FF9D  20                 	db	32
   840  00FF9E  43                 	db	67	;'C'
   841  00FF9F  61                 	db	97	;'a'
   842  00FFA0  72                 	db	114	;'r'
   843  00FFA1  64                 	db	100	;'d'
   844  00FFA2  20                 	db	32
   845  00FFA3  73                 	db	115	;'s'
   846  00FFA4  75                 	db	117	;'u'
   847  00FFA5  63                 	db	99	;'c'
   848  00FFA6  63                 	db	99	;'c'
   849  00FFA7  65                 	db	101	;'e'
   850  00FFA8  73                 	db	115	;'s'
   851  00FFA9  73                 	db	115	;'s'
   852  00FFAA  21                 	db	33
   853  00FFAB  00                 	db	0
   854  00FFAC                     STR_3:
   855  00FFAC  25                 	db	37
   856  00FFAD  30                 	db	48	;'0'
   857  00FFAE  32                 	db	50	;'2'
   858  00FFAF  78                 	db	120	;'x'
   859  00FFB0  2F                 	db	47
   860  00FFB1  25                 	db	37
   861  00FFB2  30                 	db	48	;'0'
   862  00FFB3  32                 	db	50	;'2'
   863  00FFB4  78                 	db	120	;'x'
   864  00FFB5  2F                 	db	47
   865  00FFB6  25                 	db	37
   866  00FFB7  30                 	db	48	;'0'
   867  00FFB8  32                 	db	50	;'2'
   868  00FFB9  78                 	db	120	;'x'
   869  00FFBA  00                 	db	0
   870  00FFBB                     STR_4:
   871  00FFBB  25                 	db	37
   872  00FFBC  30                 	db	48	;'0'
   873  00FFBD  32                 	db	50	;'2'
   874  00FFBE  78                 	db	120	;'x'
   875  00FFBF  3A                 	db	58	;':'
   876  00FFC0  25                 	db	37
   877  00FFC1  30                 	db	48	;'0'
   878  00FFC2  32                 	db	50	;'2'
   879  00FFC3  78                 	db	120	;'x'
   880  00FFC4  3A                 	db	58	;':'
   881  00FFC5  25                 	db	37
   882  00FFC6  30                 	db	48	;'0'
   883  00FFC7  32                 	db	50	;'2'
   884  00FFC8  78                 	db	120	;'x'
   885  00FFC9  00                 	db	0
   886  00FFCA                     STR_2:
   887  00FFCA  50                 	db	80	;'P'
   888  00FFCB  72                 	db	114	;'r'
   889  00FFCC  65                 	db	101	;'e'
   890  00FFCD  73                 	db	115	;'s'
   891  00FFCE  73                 	db	115	;'s'
   892  00FFCF  20                 	db	32
   893  00FFD0  61                 	db	97	;'a'
   894  00FFD1  20                 	db	32
   895  00FFD2  6B                 	db	107	;'k'
   896  00FFD3  65                 	db	101	;'e'
   897  00FFD4  79                 	db	121	;'y'
   898  00FFD5  00                 	db	0
   899  00FFD6                     STR_1:
   900  00FFD6  42                 	db	66	;'B'
   901  00FFD7  4F                 	db	79	;'O'
   902  00FFD8  41                 	db	65	;'A'
   903  00FFD9  52                 	db	82	;'R'
   904  00FFDA  44                 	db	68	;'D'
   905  00FFDB  20                 	db	32
   906  00FFDC  54                 	db	84	;'T'
   907  00FFDD  45                 	db	69	;'E'
   908  00FFDE  53                 	db	83	;'S'
   909  00FFDF  54                 	db	84	;'T'
   910  00FFE0  00                 	db	0
   911  00FFE1                     STR_7:
   912  00FFE1  52                 	db	82	;'R'
   913  00FFE2  41                 	db	65	;'A'
   914  00FFE3  32                 	db	50	;'2'
   915  00FFE4  3A                 	db	58	;':'
   916  00FFE5  20                 	db	32
   917  00FFE6  25                 	db	37
   918  00FFE7  2E                 	db	46
   919  00FFE8  33                 	db	51	;'3'
   920  00FFE9  78                 	db	120	;'x'
   921  00FFEA  00                 	db	0
   922  00FFEB                     STR_8:
   923  00FFEB  52                 	db	82	;'R'
   924  00FFEC  41                 	db	65	;'A'
   925  00FFED  33                 	db	51	;'3'
   926  00FFEE  3A                 	db	58	;':'
   927  00FFEF  20                 	db	32
   928  00FFF0  25                 	db	37
   929  00FFF1  2E                 	db	46
   930  00FFF2  33                 	db	51	;'3'
   931  00FFF3  78                 	db	120	;'x'
   932  00FFF4  00                 	db	0
   933  00FFF5                     STR_6:
   934  00FFF5  53                 	db	83	;'S'
   935  00FFF6  69                 	db	105	;'i'
   936  00FFF7  7A                 	db	122	;'z'
   937  00FFF8  65                 	db	101	;'e'
   938  00FFF9  3A                 	db	58	;':'
   939  00FFFA  20                 	db	32
   940  00FFFB  25                 	db	37
   941  00FFFC  66                 	db	102	;'f'
   942  00FFFD  00                 	db	0
   943                           
   944                           ; #config settings
   945  00FFFE  00                 	db	0	; dummy byte at the end
   946  0000                     
   947                           	psect	cinit
   948  00CEA2                     __pcinit:
   949                           	opt stack 0
   950  00CEA2                     start_initialization:
   951                           	opt stack 0
   952  00CEA2                     __initialization:
   953                           	opt stack 0
   954                           
   955                           ; Initialize objects allocated to BANK0 (13 bytes)
   956                           ; load TBLPTR registers with __pidataBANK0
   957  00CEA2  0EA5               	movlw	low __pidataBANK0
   958  00CEA4  6EF6               	movwf	tblptrl,c
   959  00CEA6  0ECB               	movlw	high __pidataBANK0
   960  00CEA8  6EF7               	movwf	tblptrh,c
   961  00CEAA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   962  00CEAC  6EF8               	movwf	tblptru,c
   963  00CEAE  EE00  F0DA         	lfsr	0,__pdataBANK0
   964  00CEB2  EE10 F00D          	lfsr	1,13
   965  00CEB6                     copy_data0:
   966  00CEB6  0009               	tblrd		*+
   967  00CEB8  CFF5 FFEE          	movff	tablat,postinc0
   968  00CEBC  50E5               	movf	postdec1,w,c
   969  00CEBE  50E1               	movf	fsr1l,w,c
   970  00CEC0  E1FA               	bnz	copy_data0
   971                           
   972                           ; Initialize objects allocated to COMRAM (2 bytes)
   973                           ; load TBLPTR registers with __pidataCOMRAM
   974  00CEC2  0E76               	movlw	low __pidataCOMRAM
   975  00CEC4  6EF6               	movwf	tblptrl,c
   976  00CEC6  0ECB               	movlw	high __pidataCOMRAM
   977  00CEC8  6EF7               	movwf	tblptrh,c
   978  00CECA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   979  00CECC  6EF8               	movwf	tblptru,c
   980  00CECE  0009               	tblrd		*+	;fetch initializer
   981  00CED0  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   982  00CED4  0009               	tblrd		*+	;fetch initializer
   983  00CED6  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
   984                           
   985                           ; Clear objects allocated to BANK0 (90 bytes)
   986  00CEDA  EE00  F080         	lfsr	0,__pbssBANK0
   987  00CEDE  0E5A               	movlw	90
   988  00CEE0                     clear_0:
   989  00CEE0  6AEE               	clrf	postinc0,c
   990  00CEE2  06E8               	decf	wreg,f,c
   991  00CEE4  E1FD               	bnz	clear_0
   992                           
   993                           ; Clear objects allocated to COMRAM (11 bytes)
   994  00CEE6  EE00  F06F         	lfsr	0,__pbssCOMRAM
   995  00CEEA  0E0B               	movlw	11
   996  00CEEC                     clear_1:
   997  00CEEC  6AEE               	clrf	postinc0,c
   998  00CEEE  06E8               	decf	wreg,f,c
   999  00CEF0  E1FD               	bnz	clear_1
  1000  00CEF2                     end_of_initialization:
  1001                           	opt stack 0
  1002  00CEF2                     __end_of__initialization:
  1003                           	opt stack 0
  1004  00CEF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1005  00CEF4  6EF8               	movwf	tblptru,c
  1006  00CEF6  0100               	movlb	0
  1007  00CEF8  EF26  F06D         	goto	_main	;jump to C main() function
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           
  1017                           	psect	bssCOMRAM
  1018  00006F                     __pbssCOMRAM:
  1019                           	opt stack 0
  1020  00006F                     _time:
  1021                           	opt stack 0
  1022  00006F                     	ds	7
  1023  000076                     _MADCTLbits:
  1024                           	opt stack 0
  1025  000076                     	ds	1
  1026  000077                     	ds	1
  1027  000078                     _LCDinterruptState:
  1028                           	opt stack 0
  1029  000078                     	ds	1
  1030  000079                     _UARTinterruptState:
  1031                           	opt stack 0
  1032  000079                     	ds	1
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	dataCOMRAM
  1043  00007A                     __pdataCOMRAM:
  1044                           	opt stack 0
  1045  00007A                     _UART:
  1046                           	opt stack 0
  1047  00007A                     	ds	2
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	bssBANK0
  1058  000080                     __pbssBANK0:
  1059                           	opt stack 0
  1060  000080                     _SDCard:
  1061                           	opt stack 0
  1062  000080                     	ds	46
  1063  0000AE                     initSD@F3023:
  1064                           	opt stack 0
  1065  0000AE                     	ds	16
  1066  0000BE                     _arr_dataRX:
  1067                           	opt stack 0
  1068  0000BE                     	ds	16
  1069  0000CE                     _uart:
  1070                           	opt stack 0
  1071  0000CE                     	ds	12
  1072                           tblptru	equ	0xFF8
  1073                           tblptrh	equ	0xFF7
  1074                           tblptrl	equ	0xFF6
  1075                           tablat	equ	0xFF5
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           postdec1	equ	0xFE5
  1079                           fsr1l	equ	0xFE1
  1080                           
  1081                           	psect	dataBANK0
  1082  0000DA                     __pdataBANK0:
  1083                           	opt stack 0
  1084  0000DA                     testUART@F3249:
  1085                           	opt stack 0
  1086  0000DA                     	ds	13
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096                           	psect	cstackCOMRAM
  1097  000001                     __pcstackCOMRAM:
  1098                           	opt stack 0
  1099  000001                     ??_spiTransfer:
  1100  000001                     ??_testIO:
  1101  000001                     ??_isdigit:
  1102  000001                     ??_I2C_Master_Wait:
  1103  000001                     ?_readADC:
  1104                           	opt stack 0
  1105  000001                     ?___awmod:
  1106                           	opt stack 0
  1107  000001                     ?___ftpack:
  1108                           	opt stack 0
  1109  000001                     ?___ftneg:
  1110                           	opt stack 0
  1111  000001                     ?__tdiv_to_l_:
  1112                           	opt stack 0
  1113  000001                     ?__div_to_l_:
  1114                           	opt stack 0
  1115  000001                     ?___aldiv:
  1116                           	opt stack 0
  1117  000001                     ?___lldiv:
  1118                           	opt stack 0
  1119  000001                     ?___llmod:
  1120                           	opt stack 0
  1121  000001                     spiInit@divider:
  1122                           	opt stack 0
  1123  000001                     lcdNibble@temp:
  1124                           	opt stack 0
  1125  000001                     getKey@key:
  1126                           	opt stack 0
  1127  000001                     uartTransmitBlocking@data:
  1128                           	opt stack 0
  1129  000001                     ___awmod@dividend:
  1130                           	opt stack 0
  1131  000001                     __div_to_l_@f1:
  1132                           	opt stack 0
  1133  000001                     ___ftpack@arg:
  1134                           	opt stack 0
  1135  000001                     __tdiv_to_l_@f1:
  1136                           	opt stack 0
  1137  000001                     ___ftge@ff1:
  1138                           	opt stack 0
  1139  000001                     ___ftneg@f1:
  1140                           	opt stack 0
  1141  000001                     ___aldiv@dividend:
  1142                           	opt stack 0
  1143  000001                     ___lldiv@dividend:
  1144                           	opt stack 0
  1145  000001                     ___llmod@dividend:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0x0
  1149  000001                     	ds	1
  1150  000002                     I2C_Master_Read@ackBit:
  1151                           	opt stack 0
  1152  000002                     spiTransfer@byteToTransfer:
  1153                           	opt stack 0
  1154  000002                     lcdNibble@data:
  1155                           	opt stack 0
  1156  000002                     _isdigit$2008:
  1157                           	opt stack 0
  1158  000002                     I2C_Master_Write@byteToWrite:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1
  1162  000002                     	ds	1
  1163  000003                     ??_readADC:
  1164  000003                     I2C_Master_Read@receivedByte:
  1165                           	opt stack 0
  1166  000003                     spiSend@val:
  1167                           	opt stack 0
  1168  000003                     uartTransmitBlocking@numBytes:
  1169                           	opt stack 0
  1170  000003                     lcdInst@data:
  1171                           	opt stack 0
  1172  000003                     putch@data:
  1173                           	opt stack 0
  1174  000003                     testIO@temp:
  1175                           	opt stack 0
  1176  000003                     isdigit@c:
  1177                           	opt stack 0
  1178  000003                     ___awmod@divisor:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x2
  1182  000003                     	ds	1
  1183  000004                     ??_uartTransmitBlocking:
  1184  000004                     ??_initLCD:
  1185  000004                     testIO@i:
  1186                           	opt stack 0
  1187  000004                     glcdTransfer@cmd:
  1188                           	opt stack 0
  1189  000004                     ___ftpack@exp:
  1190                           	opt stack 0
  1191  000004                     __div_to_l_@f2:
  1192                           	opt stack 0
  1193  000004                     __tdiv_to_l_@f2:
  1194                           	opt stack 0
  1195  000004                     ___ftge@ff2:
  1196                           	opt stack 0
  1197  000004                     SD_Command@arg:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x3
  1201  000004                     	ds	1
  1202  000005                     ??_glcdTransfer:
  1203  000005                     uartTransmitBlocking@numTransmits:
  1204                           	opt stack 0
  1205  000005                     readADC@channel:
  1206                           	opt stack 0
  1207  000005                     ___awmod@counter:
  1208                           	opt stack 0
  1209  000005                     ___ftpack@sign:
  1210                           	opt stack 0
  1211  000005                     ___aldiv@divisor:
  1212                           	opt stack 0
  1213  000005                     ___lldiv@divisor:
  1214                           	opt stack 0
  1215  000005                     ___llmod@divisor:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x4
  1219  000005                     	ds	1
  1220  000006                     ??___ftpack:
  1221  000006                     glcdTransfer@byte:
  1222                           	opt stack 0
  1223  000006                     ___awmod@sign:
  1224                           	opt stack 0
  1225  000006                     testUART@message:
  1226                           	opt stack 0
  1227                           
  1228                           ; 13 bytes @ 0x5
  1229  000006                     	ds	1
  1230  000007                     ??__tdiv_to_l_:
  1231  000007                     ??___ftge:
  1232  000007                     ?___awdiv:
  1233                           	opt stack 0
  1234  000007                     glcdSetCOLMOD@numBitsPerPixel:
  1235                           	opt stack 0
  1236  000007                     ___awdiv@dividend:
  1237                           	opt stack 0
  1238  000007                     __div_to_l_@quot:
  1239                           	opt stack 0
  1240                           
  1241                           ; 4 bytes @ 0x6
  1242  000007                     	ds	1
  1243  000008                     SD_Command@ptr:
  1244                           	opt stack 0
  1245  000008                     glcdSetCOLMOD@rawData:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x7
  1249  000008                     	ds	1
  1250  000009                     ?___lltoft:
  1251                           	opt stack 0
  1252  000009                     ?___lwtoft:
  1253                           	opt stack 0
  1254  000009                     ___aldiv@counter:
  1255                           	opt stack 0
  1256  000009                     ___llmod@counter:
  1257                           	opt stack 0
  1258  000009                     ___awdiv@divisor:
  1259                           	opt stack 0
  1260  000009                     ___lwtoft@c:
  1261                           	opt stack 0
  1262  000009                     ___lldiv@quotient:
  1263                           	opt stack 0
  1264  000009                     ___lltoft@c:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0x8
  1268  000009                     	ds	1
  1269  00000A                     SD_Command@cmd:
  1270                           	opt stack 0
  1271  00000A                     ___aldiv@sign:
  1272                           	opt stack 0
  1273  00000A                     __tdiv_to_l_@quot:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x9
  1277  00000A                     	ds	1
  1278  00000B                     SD_Command@response:
  1279                           	opt stack 0
  1280  00000B                     ___awdiv@counter:
  1281                           	opt stack 0
  1282  00000B                     __div_to_l_@cntr:
  1283                           	opt stack 0
  1284  00000B                     ___aldiv@quotient:
  1285                           	opt stack 0
  1286                           
  1287                           ; 4 bytes @ 0xA
  1288  00000B                     	ds	1
  1289  00000C                     ?___ftdiv:
  1290                           	opt stack 0
  1291  00000C                     SD_Command@n:
  1292                           	opt stack 0
  1293  00000C                     ___awdiv@sign:
  1294                           	opt stack 0
  1295  00000C                     __div_to_l_@exp1:
  1296                           	opt stack 0
  1297  00000C                     ___ftdiv@f1:
  1298                           	opt stack 0
  1299                           
  1300                           ; 3 bytes @ 0xB
  1301  00000C                     	ds	1
  1302  00000D                     ??___lltoft:
  1303  00000D                     ___lldiv@counter:
  1304                           	opt stack 0
  1305  00000D                     ___awdiv@quotient:
  1306                           	opt stack 0
  1307  00000D                     SD_ACMD@arg:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0xC
  1311  00000D                     	ds	1
  1312  00000E                     __tdiv_to_l_@cntr:
  1313                           	opt stack 0
  1314  00000E                     I2C_Master_Init@clockFreq:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0xD
  1318  00000E                     	ds	1
  1319  00000F                     ?___wmul:
  1320                           	opt stack 0
  1321  00000F                     __tdiv_to_l_@exp1:
  1322                           	opt stack 0
  1323  00000F                     ___wmul@multiplier:
  1324                           	opt stack 0
  1325  00000F                     ___ftdiv@f2:
  1326                           	opt stack 0
  1327  00000F                     UART_Init@baud:
  1328                           	opt stack 0
  1329                           
  1330                           ; 4 bytes @ 0xE
  1331  00000F                     	ds	2
  1332  000011                     SD_ACMD@cmd:
  1333                           	opt stack 0
  1334  000011                     ___lltoft@exp:
  1335                           	opt stack 0
  1336  000011                     ___wmul@multiplicand:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x10
  1340  000011                     	ds	1
  1341  000012                     ??___ftdiv:
  1342  000012                     ??_I2C_Master_Init:
  1343                           
  1344                           ; 1 bytes @ 0x11
  1345  000012                     	ds	1
  1346  000013                     ??_UART_Init:
  1347  000013                     ___wmul@product:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x12
  1351  000013                     	ds	2
  1352  000015                     ?___ftmul:
  1353                           	opt stack 0
  1354  000015                     glcdDrawRectangle@XE:
  1355                           	opt stack 0
  1356  000015                     ___ftdiv@cntr:
  1357                           	opt stack 0
  1358  000015                     ___ftmul@f1:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x14
  1362  000015                     	ds	1
  1363  000016                     testRTCSet@i:
  1364                           	opt stack 0
  1365  000016                     glcdDrawRectangle@YS:
  1366                           	opt stack 0
  1367  000016                     ___ftdiv@f3:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x15
  1371  000016                     	ds	1
  1372  000017                     glcdDrawRectangle@YE:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x16
  1376  000017                     	ds	1
  1377  000018                     ___ftmul@f2:
  1378                           	opt stack 0
  1379  000018                     glcdDrawRectangle@color:
  1380                           	opt stack 0
  1381                           
  1382                           ; 4 bytes @ 0x17
  1383  000018                     	ds	1
  1384  000019                     ___ftdiv@exp:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x18
  1388  000019                     	ds	1
  1389  00001A                     ___ftdiv@sign:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x19
  1393  00001A                     	ds	1
  1394  00001B                     ??___ftmul:
  1395                           
  1396                           ; 1 bytes @ 0x1A
  1397  00001B                     	ds	1
  1398  00001C                     ??_glcdDrawRectangle:
  1399                           
  1400                           ; 1 bytes @ 0x1B
  1401  00001C                     	ds	2
  1402  00001E                     ___ftmul@exp:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x1D
  1406  00001E                     	ds	1
  1407  00001F                     ___ftmul@f3_as_product:
  1408                           	opt stack 0
  1409                           
  1410                           ; 3 bytes @ 0x1E
  1411  00001F                     	ds	1
  1412  000020                     glcdDrawRectangle@numLoops:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x1F
  1416  000020                     	ds	2
  1417  000022                     ___ftmul@cntr:
  1418                           	opt stack 0
  1419  000022                     glcdDrawRectangle@i:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x21
  1423  000022                     	ds	1
  1424  000023                     ___ftmul@sign:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x22
  1428  000023                     	ds	1
  1429  000024                     ?_fround:
  1430                           	opt stack 0
  1431  000024                     ?_scale:
  1432                           	opt stack 0
  1433  000024                     glcdDrawRectangle@colorData:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x23
  1437  000024                     	ds	3
  1438  000027                     glcdDrawRectangle@XS:
  1439                           	opt stack 0
  1440  000027                     _fround$2423:
  1441                           	opt stack 0
  1442  000027                     _scale$2424:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x26
  1446  000027                     	ds	1
  1447  000028                     ??_initGLCD:
  1448                           
  1449                           ; 1 bytes @ 0x27
  1450  000028                     	ds	2
  1451  00002A                     scale@scl:
  1452                           	opt stack 0
  1453  00002A                     _fround$2422:
  1454                           	opt stack 0
  1455                           
  1456                           ; 3 bytes @ 0x29
  1457  00002A                     	ds	1
  1458  00002B                     ?___fttol:
  1459                           	opt stack 0
  1460  00002B                     ___fttol@f1:
  1461                           	opt stack 0
  1462                           
  1463                           ; 3 bytes @ 0x2A
  1464  00002B                     	ds	2
  1465  00002D                     fround@prec:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x2C
  1469  00002D                     	ds	1
  1470  00002E                     ?___ftadd:
  1471                           	opt stack 0
  1472  00002E                     ___ftadd@f1:
  1473                           	opt stack 0
  1474                           
  1475                           ; 3 bytes @ 0x2D
  1476  00002E                     	ds	1
  1477  00002F                     ??___fttol:
  1478                           
  1479                           ; 1 bytes @ 0x2E
  1480  00002F                     	ds	2
  1481  000031                     ___ftadd@f2:
  1482                           	opt stack 0
  1483                           
  1484                           ; 3 bytes @ 0x30
  1485  000031                     	ds	3
  1486  000034                     ??___ftadd:
  1487  000034                     ___fttol@sign1:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x33
  1491  000034                     	ds	1
  1492  000035                     ___fttol@lval:
  1493                           	opt stack 0
  1494                           
  1495                           ; 4 bytes @ 0x34
  1496  000035                     	ds	2
  1497  000037                     ___ftadd@sign:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x36
  1501  000037                     	ds	1
  1502  000038                     ___ftadd@exp2:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x37
  1506  000038                     	ds	1
  1507  000039                     ___ftadd@exp1:
  1508                           	opt stack 0
  1509  000039                     ___fttol@exp1:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x38
  1513  000039                     	ds	1
  1514  00003A                     ??_initSD:
  1515  00003A                     ?___ftsub:
  1516                           	opt stack 0
  1517  00003A                     ___ftsub@f1:
  1518                           	opt stack 0
  1519                           
  1520                           ; 3 bytes @ 0x39
  1521  00003A                     	ds	3
  1522  00003D                     ___ftsub@f2:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x3C
  1526  00003D                     	ds	3
  1527  000040                     ?_printf:
  1528                           	opt stack 0
  1529  000040                     printf@f:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x3F
  1533  000040                     	ds	1
  1534  000041                     initSD@argument:
  1535                           	opt stack 0
  1536                           
  1537                           ; 4 bytes @ 0x40
  1538  000041                     	ds	4
  1539  000045                     initSD@last_OSCCON:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x44
  1543  000045                     	ds	1
  1544  000046                     initSD@last_OSCTUNE:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0x45
  1548  000046                     	ds	1
  1549  000047                     initSD@tempSize:
  1550                           	opt stack 0
  1551                           
  1552                           ; 4 bytes @ 0x46
  1553  000047                     	ds	1
  1554  000048                     ??_printf:
  1555                           
  1556                           ; 1 bytes @ 0x47
  1557  000048                     	ds	3
  1558  00004B                     initSD@arr_response:
  1559                           	opt stack 0
  1560                           
  1561                           ; 16 bytes @ 0x4A
  1562  00004B                     	ds	3
  1563  00004E                     _printf$2425:
  1564                           	opt stack 0
  1565                           
  1566                           ; 3 bytes @ 0x4D
  1567  00004E                     	ds	3
  1568  000051                     printf@idx:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x50
  1572  000051                     	ds	1
  1573  000052                     printf@ap:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x51
  1577  000052                     	ds	2
  1578  000054                     printf@val:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x53
  1582  000054                     	ds	4
  1583  000058                     printf@tmpval:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x57
  1587  000058                     	ds	3
  1588  00005B                     initSD@tempSize_446:
  1589                           	opt stack 0
  1590                           
  1591                           ; 4 bytes @ 0x5A
  1592  00005B                     	ds	1
  1593  00005C                     printf@exp:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x5B
  1597  00005C                     	ds	2
  1598  00005E                     printf@flag:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x5D
  1602  00005E                     	ds	1
  1603  00005F                     initSD@response:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x5E
  1607  00005F                     	ds	1
  1608  000060                     initSD@i:
  1609                           	opt stack 0
  1610  000060                     printf@width:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x5F
  1614  000060                     	ds	2
  1615  000062                     printf@fval:
  1616                           	opt stack 0
  1617                           
  1618                           ; 3 bytes @ 0x61
  1619  000062                     	ds	3
  1620  000065                     printf@prec:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x64
  1624  000065                     	ds	2
  1625  000067                     printf@c:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x66
  1629  000067                     	ds	1
  1630  000068                     ??_testRTCGet:
  1631  000068                     ??_testSDCard:
  1632  000068                     ??_testA2D:
  1633                           
  1634                           ; 1 bytes @ 0x67
  1635  000068                     	ds	1
  1636  000069                     testRTCGet@i_1523:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x68
  1640  000069                     	ds	2
  1641  00006B                     testRTCGet@i:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x6A
  1645  00006B                     	ds	1
  1646  00006C                     ??_main:
  1647                           
  1648                           ; 1 bytes @ 0x6B
  1649  00006C                     	ds	2
  1650  00006E                     main@state:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0x6D
  1654  00006E                     	ds	1
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           
  1664 ;;
  1665 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1666 ;;
  1667 ;; *************** function _main *****************
  1668 ;; Defined at:
  1669 ;;		line 77 in file "main.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  state           1  109[COMRAM] enum E3192
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:        3 bytes
  1688 ;; Hardware stack levels required when called:    6
  1689 ;; This function calls:
  1690 ;;		_UART_Init
  1691 ;;		_getKey
  1692 ;;		_initLCD
  1693 ;;		_lcdInst
  1694 ;;		_printf
  1695 ;;		_testA2D
  1696 ;;		_testGLCD
  1697 ;;		_testIO
  1698 ;;		_testRTCGet
  1699 ;;		_testRTCSet
  1700 ;;		_testSDCard
  1701 ;;		_testUART
  1702 ;; This function is called by:
  1703 ;;		Startup code after reset
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text0
  1708  00DA4C                     __ptext0:
  1709                           	opt stack 0
  1710  00DA4C                     _main:
  1711                           	opt stack 25
  1712                           
  1713                           ;main.c: 83: LATA = 0x00;
  1714                           
  1715                           ;incstack = 0
  1716  00DA4C  0E00               	movlw	0
  1717  00DA4E  6E89               	movwf	3977,c	;volatile
  1718                           
  1719                           ;main.c: 84: LATB = 0x00;
  1720  00DA50  0E00               	movlw	0
  1721  00DA52  6E8A               	movwf	3978,c	;volatile
  1722                           
  1723                           ;main.c: 85: LATC = 0x00;
  1724  00DA54  0E00               	movlw	0
  1725  00DA56  6E8B               	movwf	3979,c	;volatile
  1726                           
  1727                           ;main.c: 86: LATD = 0x00;
  1728  00DA58  0E00               	movlw	0
  1729  00DA5A  6E8C               	movwf	3980,c	;volatile
  1730                           
  1731                           ;main.c: 87: LATE = 0x00;
  1732  00DA5C  0E00               	movlw	0
  1733  00DA5E  6E8D               	movwf	3981,c	;volatile
  1734                           
  1735                           ;main.c: 91: TRISA = 0b11111111;
  1736  00DA60  6892               	setf	3986,c	;volatile
  1737                           
  1738                           ;main.c: 92: TRISB = 0b11110010;
  1739  00DA62  0EF2               	movlw	242
  1740  00DA64  6E93               	movwf	3987,c	;volatile
  1741                           
  1742                           ;main.c: 93: TRISC = 0b10000000;
  1743  00DA66  0E80               	movlw	128
  1744  00DA68  6E94               	movwf	3988,c	;volatile
  1745                           
  1746                           ;main.c: 97: TRISD = 0b00000001;
  1747  00DA6A  0E01               	movlw	1
  1748  00DA6C  6E95               	movwf	3989,c	;volatile
  1749                           
  1750                           ;main.c: 103: TRISE = 0b00000100;
  1751  00DA6E  0E04               	movlw	4
  1752  00DA70  6E96               	movwf	3990,c	;volatile
  1753                           
  1754                           ;main.c: 110: ADCON0 = 0x00;
  1755  00DA72  0E00               	movlw	0
  1756  00DA74  6EC2               	movwf	4034,c	;volatile
  1757                           
  1758                           ;main.c: 111: ADCON1 = 0x0F;
  1759  00DA76  0E0F               	movlw	15
  1760  00DA78  6EC1               	movwf	4033,c	;volatile
  1761                           
  1762                           ;main.c: 112: ADCON2bits.ADFM = 1;
  1763  00DA7A  8EC0               	bsf	4032,7,c	;volatile
  1764                           
  1765                           ;main.c: 114: CVRCON = 0x00;
  1766  00DA7C  0E00               	movlw	0
  1767  00DA7E  6EB5               	movwf	4021,c	;volatile
  1768                           
  1769                           ;main.c: 115: CMCONbits.CIS = 0;
  1770  00DA80  96B4               	bcf	4020,3,c	;volatile
  1771                           
  1772                           ;main.c: 116: ADCON2 = 0b10110001;
  1773  00DA82  0EB1               	movlw	177
  1774  00DA84  6EC0               	movwf	4032,c	;volatile
  1775                           
  1776                           ;main.c: 120: initLCD();
  1777  00DA86  EC03  F067         	call	_initLCD	;wreg free
  1778                           
  1779                           ;main.c: 121: UART_Init(9600);
  1780  00DA8A  0E80               	movlw	128
  1781  00DA8C  6E0F               	movwf	UART_Init@baud,c
  1782  00DA8E  0E25               	movlw	37
  1783  00DA90  6E10               	movwf	UART_Init@baud+1,c
  1784  00DA92  0E00               	movlw	0
  1785  00DA94  6E11               	movwf	UART_Init@baud+2,c
  1786  00DA96  0E00               	movlw	0
  1787  00DA98  6E12               	movwf	UART_Init@baud+3,c
  1788  00DA9A  EC9D  F069         	call	_UART_Init	;wreg free
  1789  00DA9E                     
  1790                           ;main.c: 129: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1791  00DA9E  0E01               	movlw	1
  1792  00DAA0  ECEC  F065         	call	_lcdInst
  1793  00DAA4  0EC3               	movlw	195
  1794  00DAA6  6E6C               	movwf	??_main& (0+255),c
  1795  00DAA8  0ECD               	movlw	205
  1796  00DAAA                     u5867:
  1797  00DAAA  2EE8               	decfsz	wreg,f,c
  1798  00DAAC  D7FE               	bra	u5867
  1799  00DAAE  2E6C               	decfsz	??_main& (0+255),f,c
  1800  00DAB0  D7FC               	bra	u5867
  1801  00DAB2  F000               	nop	
  1802                           
  1803                           ;main.c: 130: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1804  00DAB4  0E80               	movlw	128
  1805  00DAB6  ECEC  F065         	call	_lcdInst
  1806  00DABA  0E41               	movlw	65
  1807  00DABC  6E6C               	movwf	??_main& (0+255),c
  1808  00DABE  0EEE               	movlw	238
  1809  00DAC0                     u5877:
  1810  00DAC0  2EE8               	decfsz	wreg,f,c
  1811  00DAC2  D7FE               	bra	u5877
  1812  00DAC4  2E6C               	decfsz	??_main& (0+255),f,c
  1813  00DAC6  D7FC               	bra	u5877
  1814  00DAC8  D000               	nop2	
  1815                           
  1816                           ;main.c: 131: printf("BOARD TEST");
  1817  00DACA  0ED6               	movlw	low STR_1
  1818  00DACC  6E40               	movwf	printf@f,c
  1819  00DACE  0EFF               	movlw	high STR_1
  1820  00DAD0  6E41               	movwf	printf@f+1,c
  1821  00DAD2  EC72  F07A         	call	_printf	;wreg free
  1822                           
  1823                           ;main.c: 132: lcdInst(0xC0);;
  1824  00DAD6  0EC0               	movlw	192
  1825  00DAD8  ECEC  F065         	call	_lcdInst
  1826                           
  1827                           ;main.c: 133: printf("Press a key");
  1828  00DADC  0ECA               	movlw	low STR_2
  1829  00DADE  6E40               	movwf	printf@f,c
  1830  00DAE0  0EFF               	movlw	high STR_2
  1831  00DAE2  6E41               	movwf	printf@f+1,c
  1832  00DAE4  EC72  F07A         	call	_printf	;wreg free
  1833                           
  1834                           ;main.c: 134: _delay((unsigned long)((250)*(40000000/4000.0)));
  1835  00DAE8  0E0D               	movlw	13
  1836  00DAEA  6E6D               	movwf	(??_main+1)& (0+255),c
  1837  00DAEC  0EAF               	movlw	175
  1838  00DAEE  6E6C               	movwf	??_main& (0+255),c
  1839  00DAF0  0EB6               	movlw	182
  1840  00DAF2                     u5887:
  1841  00DAF2  2EE8               	decfsz	wreg,f,c
  1842  00DAF4  D7FE               	bra	u5887
  1843  00DAF6  2E6C               	decfsz	??_main& (0+255),f,c
  1844  00DAF8  D7FC               	bra	u5887
  1845  00DAFA  2E6D               	decfsz	(??_main+1)& (0+255),f,c
  1846  00DAFC  D7FA               	bra	u5887
  1847  00DAFE  D000               	nop2	
  1848                           
  1849                           ;main.c: 137: state = getKey();
  1850  00DB00  ECE2  F065         	call	_getKey	;wreg free
  1851  00DB04  6E6E               	movwf	main@state,c
  1852                           
  1853                           ;main.c: 140: switch(state){
  1854  00DB06  D015               	goto	l749
  1855  00DB08                     
  1856                           ;main.c: 142: testRTCSet();
  1857  00DB08  EC0A  F068         	call	_testRTCSet	;wreg free
  1858                           
  1859                           ;main.c: 143: continue;
  1860  00DB0C  D7C8               	goto	l748
  1861  00DB0E                     
  1862                           ;main.c: 145: testRTCGet();
  1863  00DB0E  ECB0  F06D         	call	_testRTCGet	;wreg free
  1864                           
  1865                           ;main.c: 146: continue;
  1866  00DB12  D7C5               	goto	l748
  1867  00DB14                     
  1868                           ;main.c: 148: testGLCD();
  1869  00DB14  EC6E  F068         	call	_testGLCD	;wreg free
  1870                           
  1871                           ;main.c: 149: continue;
  1872  00DB18  D7C2               	goto	l748
  1873  00DB1A                     
  1874                           ;main.c: 151: testSDCard();
  1875  00DB1A  ECDA  F067         	call	_testSDCard	;wreg free
  1876                           
  1877                           ;main.c: 152: continue;
  1878  00DB1E  D7BF               	goto	l748
  1879  00DB20                     
  1880                           ;main.c: 154: testIO();
  1881  00DB20  EC70  F06F         	call	_testIO	;wreg free
  1882                           
  1883                           ;main.c: 155: continue;
  1884  00DB24  D7BC               	goto	l748
  1885  00DB26                     
  1886                           ;main.c: 157: testUART();
  1887  00DB26  EC57  F066         	call	_testUART	;wreg free
  1888                           
  1889                           ;main.c: 158: continue;
  1890  00DB2A  D7B9               	goto	l748
  1891  00DB2C                     
  1892                           ;main.c: 160: testA2D();
  1893  00DB2C  ECE0  F069         	call	_testA2D	;wreg free
  1894                           
  1895                           ;main.c: 164: }
  1896                           
  1897                           ;main.c: 163: break;
  1898                           
  1899                           ;main.c: 162: default:
  1900                           
  1901                           ;main.c: 161: continue;
  1902  00DB30  D7B6               	goto	l748
  1903  00DB32                     l749:
  1904  00DB32  506E               	movf	main@state,w,c
  1905                           
  1906                           ; Switch size 1, requested type "space"
  1907                           ; Number of cases is 7, Range of values is 0 to 7
  1908                           ; switch strategies available:
  1909                           ; Name         Instructions Cycles
  1910                           ; simple_byte           22    12 (average)
  1911                           ;	Chosen strategy is simple_byte
  1912  00DB34  0A00               	xorlw	0	; case 0
  1913  00DB36  B4D8               	btfsc	status,2,c
  1914  00DB38  D7E7               	goto	l750
  1915  00DB3A  0A01               	xorlw	1	; case 1
  1916  00DB3C  B4D8               	btfsc	status,2,c
  1917  00DB3E  D7E7               	goto	l752
  1918  00DB40  0A03               	xorlw	3	; case 2
  1919  00DB42  B4D8               	btfsc	status,2,c
  1920  00DB44  D7E7               	goto	l753
  1921  00DB46  0A06               	xorlw	6	; case 4
  1922  00DB48  B4D8               	btfsc	status,2,c
  1923  00DB4A  D7E7               	goto	l754
  1924  00DB4C  0A01               	xorlw	1	; case 5
  1925  00DB4E  B4D8               	btfsc	status,2,c
  1926  00DB50  D7E7               	goto	l755
  1927  00DB52  0A03               	xorlw	3	; case 6
  1928  00DB54  B4D8               	btfsc	status,2,c
  1929  00DB56  D7E7               	goto	l756
  1930  00DB58  0A01               	xorlw	1	; case 7
  1931  00DB5A  B4D8               	btfsc	status,2,c
  1932  00DB5C  D7E7               	goto	l757
  1933  00DB5E  D79F               	goto	l748
  1934  00DB60                     __end_of_main:
  1935                           	opt stack 0
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _testUART *****************
  1947 ;; Defined at:
  1948 ;;		line 361 in file "main.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  message        13    5[COMRAM] unsigned char [13]
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;Total ram usage:       13 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    1
  1969 ;; This function calls:
  1970 ;;		_uartTransmitBlocking
  1971 ;; This function is called by:
  1972 ;;		_main
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text1
  1977  00CCAE                     __ptext1:
  1978                           	opt stack 0
  1979  00CCAE                     _testUART:
  1980                           	opt stack 29
  1981                           
  1982                           ;main.c: 370: char message[] = "Hello world!";
  1983                           
  1984                           ;incstack = 0
  1985  00CCAE  EE20  F0DA         	lfsr	2,testUART@F3249
  1986  00CCB2  EE10  F006         	lfsr	1,testUART@message
  1987  00CCB6  0E0C               	movlw	12
  1988  00CCB8                     u5331:
  1989  00CCB8  CFDB FFE3          	movff	plusw2,plusw1
  1990  00CCBC  06E8               	decf	wreg,f,c
  1991  00CCBE  E2FC               	bc	u5331
  1992                           
  1993                           ;main.c: 371: uartTransmitBlocking(message, sizeof(message));
  1994  00CCC0  0E06               	movlw	low testUART@message
  1995  00CCC2  6E01               	movwf	uartTransmitBlocking@data,c
  1996  00CCC4  0E00               	movlw	high testUART@message
  1997  00CCC6  6E02               	movwf	uartTransmitBlocking@data+1,c
  1998  00CCC8  0E0D               	movlw	13
  1999  00CCCA  6E03               	movwf	uartTransmitBlocking@numBytes,c
  2000  00CCCC  ECB5  F06A         	call	_uartTransmitBlocking	;wreg free
  2001  00CCD0  0012               	return		;funcret
  2002  00CCD2                     __end_of_testUART:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           postdec1	equ	0xFE5
  2011                           plusw1	equ	0xFE3
  2012                           fsr1l	equ	0xFE1
  2013                           plusw2	equ	0xFDB
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _uartTransmitBlocking *****************
  2017 ;; Defined at:
  2018 ;;		line 22 in file "UART_PIC.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  data            2    0[COMRAM] PTR unsigned char 
  2021 ;;		 -> testUART@message(13), 
  2022 ;;  numBytes        1    2[COMRAM] unsigned char 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  numTransmits    1    4[COMRAM] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;Total ram usage:        5 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_testUART
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text2
  2048  00D56A                     __ptext2:
  2049                           	opt stack 0
  2050  00D56A                     _uartTransmitBlocking:
  2051                           	opt stack 29
  2052                           
  2053                           ;UART_PIC.c: 36: while(UART -> _stateTX == UART_STATE_BUSY){ continue; }
  2054                           
  2055                           ;incstack = 0
  2056  00D56A  EE20 F008          	lfsr	2,8
  2057  00D56E  507A               	movf	_UART,w,c
  2058  00D570  26D9               	addwf	fsr2l,f,c
  2059  00D572  507B               	movf	_UART+1,w,c
  2060  00D574  22DA               	addwfc	fsr2h,f,c
  2061  00D576  50DF               	movf	indf2,w,c
  2062  00D578  B4D8               	btfsc	status,2,c
  2063  00D57A  D7F7               	goto	_uartTransmitBlocking
  2064                           
  2065                           ;UART_PIC.c: 39: UART -> _stateTX = UART_STATE_BUSY;
  2066  00D57C  EE20 F008          	lfsr	2,8
  2067  00D580  507A               	movf	_UART,w,c
  2068  00D582  26D9               	addwf	fsr2l,f,c
  2069  00D584  507B               	movf	_UART+1,w,c
  2070  00D586  22DA               	addwfc	fsr2h,f,c
  2071  00D588  0E00               	movlw	0
  2072  00D58A  6EDF               	movwf	indf2,c
  2073                           
  2074                           ;UART_PIC.c: 42: unsigned char numTransmits = 0;
  2075  00D58C  0E00               	movlw	0
  2076  00D58E  6E05               	movwf	uartTransmitBlocking@numTransmits,c
  2077                           
  2078                           ;UART_PIC.c: 45: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(40000000/4000.0)));;
  2079  00D590  8AAC               	bsf	4012,5,c	;volatile
  2080  00D592  0E41               	movlw	65
  2081  00D594  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
  2082  00D596  0EEE               	movlw	238
  2083  00D598                     u5897:
  2084  00D598  2EE8               	decfsz	wreg,f,c
  2085  00D59A  D7FE               	bra	u5897
  2086  00D59C  2E04               	decfsz	??_uartTransmitBlocking& (0+255),f,c
  2087  00D59E  D7FC               	bra	u5897
  2088  00D5A0  D000               	nop2	
  2089                           
  2090                           ;UART_PIC.c: 48: while(numTransmits < numBytes){
  2091  00D5A2  D023               	goto	l374
  2092  00D5A4                     l5065:
  2093  00D5A4  B2AC               	btfsc	4012,1,c	;volatile
  2094  00D5A6  D002               	goto	u4550
  2095  00D5A8  0E01               	movlw	1
  2096  00D5AA  D001               	goto	u4552
  2097  00D5AC                     u4550:
  2098  00D5AC  0E00               	movlw	0
  2099  00D5AE                     u4552:
  2100  00D5AE  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
  2101  00D5B0  B89E               	btfsc	3998,4,c	;volatile
  2102  00D5B2  D002               	goto	u4560
  2103  00D5B4  0E01               	movlw	1
  2104  00D5B6  D001               	goto	u4562
  2105  00D5B8                     u4560:
  2106  00D5B8  0E00               	movlw	0
  2107  00D5BA                     u4562:
  2108  00D5BA  1004               	iorwf	??_uartTransmitBlocking,w,c
  2109  00D5BC  E1F3               	bnz	l5065
  2110                           
  2111                           ;UART_PIC.c: 53: __nop();
  2112  00D5BE  F000               	nop	
  2113                           
  2114                           ;UART_PIC.c: 56: UARTinterruptState = INTCONbits.GIE;
  2115  00D5C0  0E00               	movlw	0
  2116  00D5C2  BEF2               	btfsc	intcon,7,c	;volatile
  2117  00D5C4  0E01               	movlw	1
  2118  00D5C6  6E79               	movwf	_UARTinterruptState,c	;volatile
  2119                           
  2120                           ;UART_PIC.c: 57: (INTCONbits.GIE = 0);
  2121  00D5C8  9EF2               	bcf	intcon,7,c	;volatile
  2122                           
  2123                           ;UART_PIC.c: 58: TXREG = data[numTransmits];
  2124  00D5CA  5005               	movf	uartTransmitBlocking@numTransmits,w,c
  2125  00D5CC  0D01               	mullw	1
  2126  00D5CE  50F3               	movf	prodl,w,c
  2127  00D5D0  2401               	addwf	uartTransmitBlocking@data,w,c
  2128  00D5D2  6ED9               	movwf	fsr2l,c
  2129  00D5D4  50F4               	movf	prodh,w,c
  2130  00D5D6  2002               	addwfc	uartTransmitBlocking@data+1,w,c
  2131  00D5D8  6EDA               	movwf	fsr2h,c
  2132  00D5DA  50DF               	movf	indf2,w,c
  2133  00D5DC  6EAD               	movwf	4013,c	;volatile
  2134                           
  2135                           ;UART_PIC.c: 59: INTCONbits.GIE = UARTinterruptState;
  2136  00D5DE  B079               	btfsc	_UARTinterruptState,0,c	;volatile
  2137  00D5E0  D002               	bra	u4575
  2138  00D5E2  9EF2               	bcf	intcon,7,c	;volatile
  2139  00D5E4  D001               	bra	u4576
  2140  00D5E6                     u4575:
  2141  00D5E6  8EF2               	bsf	intcon,7,c	;volatile
  2142  00D5E8                     u4576:
  2143                           
  2144                           ;UART_PIC.c: 61: numTransmits++;
  2145  00D5E8  2A05               	incf	uartTransmitBlocking@numTransmits,f,c
  2146  00D5EA                     l374:
  2147  00D5EA  5003               	movf	uartTransmitBlocking@numBytes,w,c
  2148  00D5EC  5C05               	subwf	uartTransmitBlocking@numTransmits,w,c
  2149  00D5EE  A0D8               	btfss	status,0,c
  2150  00D5F0  D7D9               	goto	l375
  2151                           
  2152                           ;UART_PIC.c: 65: }
  2153                           ;UART_PIC.c: 68: UART -> _stateTX = UART_STATE_READY;
  2154  00D5F2  EE20 F008          	lfsr	2,8
  2155  00D5F6  507A               	movf	_UART,w,c
  2156  00D5F8  26D9               	addwf	fsr2l,f,c
  2157  00D5FA  507B               	movf	_UART+1,w,c
  2158  00D5FC  22DA               	addwfc	fsr2h,f,c
  2159  00D5FE  0E01               	movlw	1
  2160  00D600  6EDF               	movwf	indf2,c
  2161  00D602  0012               	return		;funcret
  2162  00D604                     __end_of_uartTransmitBlocking:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           tblptrh	equ	0xFF7
  2166                           tblptrl	equ	0xFF6
  2167                           tablat	equ	0xFF5
  2168                           prodh	equ	0xFF4
  2169                           prodl	equ	0xFF3
  2170                           intcon	equ	0xFF2
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postdec1	equ	0xFE5
  2174                           plusw1	equ	0xFE3
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _testSDCard *****************
  2183 ;; Defined at:
  2184 ;;		line 248 in file "main.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;Total ram usage:        1 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    5
  2205 ;; This function calls:
  2206 ;;		_initSD
  2207 ;;		_lcdInst
  2208 ;;		_printf
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text3
  2215  00CFB4                     __ptext3:
  2216                           	opt stack 0
  2217  00CFB4                     _testSDCard:
  2218                           	opt stack 25
  2219                           
  2220                           ;main.c: 260: initSD();
  2221                           
  2222                           ;incstack = 0
  2223  00CFB4  EC6A  F076         	call	_initSD	;wreg free
  2224                           
  2225                           ;main.c: 261: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2226  00CFB8  0E01               	movlw	1
  2227  00CFBA  ECEC  F065         	call	_lcdInst
  2228  00CFBE  0EC3               	movlw	195
  2229  00CFC0  6E68               	movwf	??_testSDCard& (0+255),c
  2230  00CFC2  0ECD               	movlw	205
  2231  00CFC4                     u5907:
  2232  00CFC4  2EE8               	decfsz	wreg,f,c
  2233  00CFC6  D7FE               	bra	u5907
  2234  00CFC8  2E68               	decfsz	??_testSDCard& (0+255),f,c
  2235  00CFCA  D7FC               	bra	u5907
  2236  00CFCC  F000               	nop	
  2237                           
  2238                           ;main.c: 262: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2239  00CFCE  0E80               	movlw	128
  2240  00CFD0  ECEC  F065         	call	_lcdInst
  2241  00CFD4  0E41               	movlw	65
  2242  00CFD6  6E68               	movwf	??_testSDCard& (0+255),c
  2243  00CFD8  0EEE               	movlw	238
  2244  00CFDA                     u5917:
  2245  00CFDA  2EE8               	decfsz	wreg,f,c
  2246  00CFDC  D7FE               	bra	u5917
  2247  00CFDE  2E68               	decfsz	??_testSDCard& (0+255),f,c
  2248  00CFE0  D7FC               	bra	u5917
  2249  00CFE2  D000               	nop2	
  2250                           
  2251                           ;main.c: 263: printf("SD Card success!");
  2252  00CFE4  0E9B               	movlw	low STR_5
  2253  00CFE6  6E40               	movwf	printf@f,c
  2254  00CFE8  0EFF               	movlw	high STR_5
  2255  00CFEA  6E41               	movwf	printf@f+1,c
  2256  00CFEC  EC72  F07A         	call	_printf	;wreg free
  2257                           
  2258                           ;main.c: 264: lcdInst(0xC0);;
  2259  00CFF0  0EC0               	movlw	192
  2260  00CFF2  ECEC  F065         	call	_lcdInst
  2261                           
  2262                           ;main.c: 265: printf("Size: %f", SDCard.size);
  2263  00CFF6  0EF5               	movlw	low STR_6
  2264  00CFF8  6E40               	movwf	printf@f,c
  2265  00CFFA  0EFF               	movlw	high STR_6
  2266  00CFFC  6E41               	movwf	printf@f+1,c
  2267  00CFFE  C098  F042         	movff	_SDCard+24,?_printf+2
  2268  00D002  C099  F043         	movff	_SDCard+25,?_printf+3
  2269  00D006  C09A  F044         	movff	_SDCard+26,?_printf+4
  2270  00D00A  EC72  F07A         	call	_printf	;wreg free
  2271  00D00E  B281               	btfsc	3969,1,c	;volatile
  2272  00D010  0012               	return	
  2273  00D012  D7FD               	goto	l787
  2274  00D014                     __end_of_testSDCard:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           postdec1	equ	0xFE5
  2286                           plusw1	equ	0xFE3
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           plusw2	equ	0xFDB
  2290                           fsr2h	equ	0xFDA
  2291                           fsr2l	equ	0xFD9
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _initSD *****************
  2295 ;; Defined at:
  2296 ;;		line 458 in file "SD_PIC.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  tempSize        4   90[COMRAM] unsigned long 
  2301 ;;  tempSize        4   70[COMRAM] unsigned long 
  2302 ;;  arr_response   16   74[COMRAM] unsigned char [16]
  2303 ;;  argument        4   64[COMRAM] unsigned long 
  2304 ;;  i               1   95[COMRAM] unsigned char 
  2305 ;;  response        1   94[COMRAM] unsigned char 
  2306 ;;  last_OSCTUNE    1   69[COMRAM] unsigned char 
  2307 ;;  last_OSCCON     1   68[COMRAM] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;Total ram usage:       39 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    4
  2324 ;; This function calls:
  2325 ;;		_SD_ACMD
  2326 ;;		_SD_Command
  2327 ;;		___ftdiv
  2328 ;;		___ftmul
  2329 ;;		___fttol
  2330 ;;		___lltoft
  2331 ;;		___lwtoft
  2332 ;;		_spiInit
  2333 ;;		_spiReceive
  2334 ;;		_spiSend
  2335 ;; This function is called by:
  2336 ;;		_testSDCard
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text4
  2341  00ECD4                     __ptext4:
  2342                           	opt stack 0
  2343  00ECD4                     _initSD:
  2344                           	opt stack 25
  2345                           
  2346                           ;SD_PIC.c: 467: unsigned char last_OSCCON = OSCCON;
  2347                           
  2348                           ;incstack = 0
  2349  00ECD4  CFD3 F045          	movff	4051,initSD@last_OSCCON	;volatile
  2350                           
  2351                           ;SD_PIC.c: 468: unsigned char last_OSCTUNE = OSCTUNE;
  2352  00ECD8  CF9B F046          	movff	3995,initSD@last_OSCTUNE	;volatile
  2353                           
  2354                           ;SD_PIC.c: 469: unsigned char response;
  2355                           ;SD_PIC.c: 470: unsigned char i;
  2356                           ;SD_PIC.c: 471: unsigned char arr_response[16] = {0};
  2357  00ECDC  EE20  F0AE         	lfsr	2,initSD@F3023
  2358  00ECE0  EE10  F04B         	lfsr	1,initSD@arr_response
  2359  00ECE4  0E0F               	movlw	15
  2360  00ECE6                     u4171:
  2361  00ECE6  CFDB FFE3          	movff	plusw2,plusw1
  2362  00ECEA  06E8               	decf	wreg,f,c
  2363  00ECEC  E2FC               	bc	u4171
  2364                           
  2365                           ;SD_PIC.c: 478: OSCTUNEbits.TUN = 0b000000;
  2366  00ECEE  909B               	bcf	3995,0,c	;volatile
  2367  00ECF0  929B               	bcf	3995,1,c	;volatile
  2368  00ECF2  949B               	bcf	3995,2,c	;volatile
  2369  00ECF4  969B               	bcf	3995,3,c	;volatile
  2370  00ECF6  989B               	bcf	3995,4,c	;volatile
  2371                           
  2372                           ;SD_PIC.c: 479: OSCCONbits.IRCF = 0b110;
  2373  00ECF8  50D3               	movf	4051,w,c	;volatile
  2374  00ECFA  0B8F               	andlw	-113
  2375  00ECFC  0960               	iorlw	96
  2376  00ECFE  6ED3               	movwf	4051,c	;volatile
  2377                           
  2378                           ;SD_PIC.c: 480: OSCCONbits.SCS = 0b11;
  2379  00ED00  0E03               	movlw	3
  2380  00ED02  12D3               	iorwf	4051,f,c	;volatile
  2381                           
  2382                           ;SD_PIC.c: 481: OSCTUNEbits.PLLEN = 1;
  2383  00ED04  8C9B               	bsf	3995,6,c	;volatile
  2384                           
  2385                           ;SD_PIC.c: 484: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  2386  00ED06  D004               	goto	l243
  2387  00ED08  0E42               	movlw	66
  2388  00ED0A                     u5927:
  2389  00ED0A  2EE8               	decfsz	wreg,f,c
  2390  00ED0C  D7FE               	bra	u5927
  2391  00ED0E  D000               	nop2	
  2392  00ED10                     l243:
  2393  00ED10  A4D3               	btfss	4051,2,c	;volatile
  2394  00ED12  D7FA               	goto	l244
  2395                           
  2396                           ;SD_PIC.c: 487: spiInit(64);
  2397  00ED14  0E40               	movlw	64
  2398  00ED16  ECAA  F066         	call	_spiInit
  2399                           
  2400                           ;SD_PIC.c: 491: _delay((unsigned long)((20)*(40000000/4000.0)));
  2401  00ED1A  0E02               	movlw	2
  2402  00ED1C  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2403  00ED1E  0E04               	movlw	4
  2404  00ED20  6E3A               	movwf	??_initSD& (0+255),c
  2405  00ED22  0EBA               	movlw	186
  2406  00ED24                     u5937:
  2407  00ED24  2EE8               	decfsz	wreg,f,c
  2408  00ED26  D7FE               	bra	u5937
  2409  00ED28  2E3A               	decfsz	??_initSD& (0+255),f,c
  2410  00ED2A  D7FC               	bra	u5937
  2411  00ED2C  2E3B               	decfsz	(??_initSD+1)& (0+255),f,c
  2412  00ED2E  D7FA               	bra	u5937
  2413  00ED30  D000               	nop2	
  2414                           
  2415                           ;SD_PIC.c: 494: LATEbits.LATE2 = 1;
  2416  00ED32  848D               	bsf	3981,2,c	;volatile
  2417                           
  2418                           ;SD_PIC.c: 495: TRISEbits.TRISE2 = 0;
  2419  00ED34  9496               	bcf	3990,2,c	;volatile
  2420                           
  2421                           ;SD_PIC.c: 498: for(i = 0; i < 10; i++){
  2422  00ED36  0E00               	movlw	0
  2423  00ED38  6E60               	movwf	initSD@i,c
  2424  00ED3A                     l4837:
  2425  00ED3A  0E09               	movlw	9
  2426  00ED3C  6460               	cpfsgt	initSD@i,c
  2427  00ED3E  D001               	goto	l246
  2428  00ED40  D005               	goto	u4200
  2429  00ED42                     l246:
  2430                           
  2431                           ;SD_PIC.c: 499: spiSend(0xFF);
  2432  00ED42  0EFF               	movlw	255
  2433  00ED44  ECC8  F065         	call	_spiSend
  2434  00ED48  2A60               	incf	initSD@i,f,c
  2435  00ED4A  D7F7               	goto	l4837
  2436  00ED4C                     u4200:
  2437                           
  2438                           ;SD_PIC.c: 500: }
  2439                           ;SD_PIC.c: 502: LATEbits.LATE2 = 0;
  2440  00ED4C  948D               	bcf	3981,2,c	;volatile
  2441  00ED4E  0E00               	movlw	0
  2442  00ED50  6E04               	movwf	SD_Command@arg,c
  2443  00ED52  0E00               	movlw	0
  2444  00ED54  6E05               	movwf	SD_Command@arg+1,c
  2445  00ED56  0E00               	movlw	0
  2446  00ED58  6E06               	movwf	SD_Command@arg+2,c
  2447  00ED5A  0E00               	movlw	0
  2448  00ED5C  6E07               	movwf	SD_Command@arg+3,c
  2449  00ED5E  0E89               	movlw	low _CMD0
  2450  00ED60  6EF6               	movwf	tblptrl,c
  2451  00ED62                     	if	1	;There is more than 1 active tblptr byte
  2452  00ED62  0EFF               	movlw	high _CMD0
  2453  00ED64  6EF7               	movwf	tblptrh,c
  2454  00ED66                     	endif
  2455  00ED66                     	if	0	;There are less than 3 active tblptr bytes
  2456  00ED66                     	endif
  2457  00ED66  0008               	tblrd		*
  2458  00ED68  50F5               	movf	tablat,w,c
  2459  00ED6A  EC6D  F06A         	call	_SD_Command
  2460  00ED6E  6E3A               	movwf	??_initSD& (0+255),c
  2461  00ED70  0E72               	movlw	low _R1_IDLE_STATE
  2462  00ED72  6EF6               	movwf	tblptrl,c
  2463  00ED74                     	if	1	;There is more than 1 active tblptr byte
  2464  00ED74  0EFF               	movlw	high _R1_IDLE_STATE
  2465  00ED76  6EF7               	movwf	tblptrh,c
  2466  00ED78                     	endif
  2467  00ED78                     	if	0	;There are less than 3 active tblptr bytes
  2468  00ED78                     	endif
  2469  00ED78  0008               	tblrd		*
  2470  00ED7A  50F5               	movf	tablat,w,c
  2471  00ED7C  183A               	xorwf	??_initSD,w,c
  2472  00ED7E  A4D8               	btfss	status,2,c
  2473  00ED80  D7E6               	goto	l249
  2474  00ED82                     u4210:
  2475                           
  2476                           ;SD_PIC.c: 516: response = SD_Command(CMD8, 0x01AA);
  2477                           
  2478                           ;SD_PIC.c: 515: while(1){
  2479  00ED82  0EAA               	movlw	170
  2480  00ED84  6E04               	movwf	SD_Command@arg,c
  2481  00ED86  0E01               	movlw	1
  2482  00ED88  6E05               	movwf	SD_Command@arg+1,c
  2483  00ED8A  0E00               	movlw	0
  2484  00ED8C  6E06               	movwf	SD_Command@arg+2,c
  2485  00ED8E  0E00               	movlw	0
  2486  00ED90  6E07               	movwf	SD_Command@arg+3,c
  2487  00ED92  0E86               	movlw	low _CMD8
  2488  00ED94  6EF6               	movwf	tblptrl,c
  2489  00ED96                     	if	1	;There is more than 1 active tblptr byte
  2490  00ED96  0EFF               	movlw	high _CMD8
  2491  00ED98  6EF7               	movwf	tblptrh,c
  2492  00ED9A                     	endif
  2493  00ED9A                     	if	0	;There are less than 3 active tblptr bytes
  2494  00ED9A                     	endif
  2495  00ED9A  0008               	tblrd		*
  2496  00ED9C  50F5               	movf	tablat,w,c
  2497  00ED9E  EC6D  F06A         	call	_SD_Command
  2498  00EDA2  6E5F               	movwf	initSD@response,c
  2499                           
  2500                           ;SD_PIC.c: 519: LATEbits.LATE2 = 0;
  2501  00EDA4  948D               	bcf	3981,2,c	;volatile
  2502                           
  2503                           ;SD_PIC.c: 520: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  2504  00EDA6  0E00               	movlw	0
  2505  00EDA8  6E60               	movwf	initSD@i,c
  2506  00EDAA                     l4855:
  2507  00EDAA  0E03               	movlw	3
  2508  00EDAC  6460               	cpfsgt	initSD@i,c
  2509  00EDAE  D001               	goto	l252
  2510  00EDB0  D00D               	goto	u4230
  2511  00EDB2                     l252:
  2512  00EDB2  5060               	movf	initSD@i,w,c
  2513  00EDB4  0D01               	mullw	1
  2514  00EDB6  0E4B               	movlw	low initSD@arr_response
  2515  00EDB8  24F3               	addwf	prodl,w,c
  2516  00EDBA  6ED9               	movwf	fsr2l,c
  2517  00EDBC  0E00               	movlw	high initSD@arr_response
  2518  00EDBE  20F4               	addwfc	prodh,w,c
  2519  00EDC0  6EDA               	movwf	fsr2h,c
  2520  00EDC2  ECC4  F065         	call	_spiReceive	;wreg free
  2521  00EDC6  6EDF               	movwf	indf2,c
  2522  00EDC8  2A60               	incf	initSD@i,f,c
  2523  00EDCA  D7EF               	goto	l4855
  2524  00EDCC                     u4230:
  2525                           
  2526                           ;SD_PIC.c: 521: LATEbits.LATE2 = 1;
  2527  00EDCC  848D               	bsf	3981,2,c	;volatile
  2528                           
  2529                           ;SD_PIC.c: 523: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2530  00EDCE  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2531  00EDD0  6EF6               	movwf	tblptrl,c
  2532  00EDD2                     	if	1	;There is more than 1 active tblptr byte
  2533  00EDD2  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2534  00EDD4  6EF7               	movwf	tblptrh,c
  2535  00EDD6                     	endif
  2536  00EDD6                     	if	0	;There are less than 3 active tblptr bytes
  2537  00EDD6                     	endif
  2538  00EDD6  0008               	tblrd		*
  2539  00EDD8  CFF5 F03A          	movff	tablat,??_initSD
  2540  00EDDC  505F               	movf	initSD@response,w,c
  2541  00EDDE  143A               	andwf	??_initSD,w,c
  2542  00EDE0  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2543  00EDE2  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2544  00EDE4  6EF6               	movwf	tblptrl,c
  2545  00EDE6                     	if	1	;There is more than 1 active tblptr byte
  2546  00EDE6  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2547  00EDE8  6EF7               	movwf	tblptrh,c
  2548  00EDEA                     	endif
  2549  00EDEA                     	if	0	;There are less than 3 active tblptr bytes
  2550  00EDEA                     	endif
  2551  00EDEA  0008               	tblrd		*
  2552  00EDEC  50F5               	movf	tablat,w,c
  2553  00EDEE  183B               	xorwf	??_initSD+1,w,c
  2554  00EDF0  A4D8               	btfss	status,2,c
  2555  00EDF2  D02C               	goto	l254
  2556                           
  2557                           ;SD_PIC.c: 526: SDCard.SDversion = 1;
  2558  00EDF4  0E01               	movlw	1
  2559  00EDF6  0100               	movlb	0	; () banked
  2560  00EDF8  6F80               	movwf	_SDCard& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;SD_PIC.c: 529: SD_Command(CMD58, 0);
  2564  00EDFA  0E00               	movlw	0
  2565  00EDFC  6E04               	movwf	SD_Command@arg,c
  2566  00EDFE  0E00               	movlw	0
  2567  00EE00  6E05               	movwf	SD_Command@arg+1,c
  2568  00EE02  0E00               	movlw	0
  2569  00EE04  6E06               	movwf	SD_Command@arg+2,c
  2570  00EE06  0E00               	movlw	0
  2571  00EE08  6E07               	movwf	SD_Command@arg+3,c
  2572  00EE0A  0E77               	movlw	low _CMD58
  2573  00EE0C  6EF6               	movwf	tblptrl,c
  2574  00EE0E                     	if	1	;There is more than 1 active tblptr byte
  2575  00EE0E  0EFF               	movlw	high _CMD58
  2576  00EE10  6EF7               	movwf	tblptrh,c
  2577  00EE12                     	endif
  2578  00EE12                     	if	0	;There are less than 3 active tblptr bytes
  2579  00EE12                     	endif
  2580  00EE12  0008               	tblrd		*
  2581  00EE14  50F5               	movf	tablat,w,c
  2582  00EE16  EC6D  F06A         	call	_SD_Command
  2583                           
  2584                           ;SD_PIC.c: 530: LATEbits.LATE2 = 0;
  2585  00EE1A  948D               	bcf	3981,2,c	;volatile
  2586                           
  2587                           ;SD_PIC.c: 531: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  2588  00EE1C  0E00               	movlw	0
  2589  00EE1E  6E60               	movwf	initSD@i,c
  2590  00EE20                     l4875:
  2591  00EE20  0E03               	movlw	3
  2592  00EE22  6460               	cpfsgt	initSD@i,c
  2593  00EE24  D001               	goto	l255
  2594  00EE26  D00D               	goto	u4260
  2595  00EE28                     l255:
  2596  00EE28  5060               	movf	initSD@i,w,c
  2597  00EE2A  0D01               	mullw	1
  2598  00EE2C  0E4B               	movlw	low initSD@arr_response
  2599  00EE2E  24F3               	addwf	prodl,w,c
  2600  00EE30  6ED9               	movwf	fsr2l,c
  2601  00EE32  0E00               	movlw	high initSD@arr_response
  2602  00EE34  20F4               	addwfc	prodh,w,c
  2603  00EE36  6EDA               	movwf	fsr2h,c
  2604  00EE38  ECC4  F065         	call	_spiReceive	;wreg free
  2605  00EE3C  6EDF               	movwf	indf2,c
  2606  00EE3E  2A60               	incf	initSD@i,f,c
  2607  00EE40  D7EF               	goto	l4875
  2608  00EE42                     u4260:
  2609                           
  2610                           ;SD_PIC.c: 532: LATEbits.LATE2 = 1;
  2611  00EE42  848D               	bsf	3981,2,c	;volatile
  2612                           
  2613                           ;SD_PIC.c: 534: if(arr_response[2] != 0x01){
  2614  00EE44  044D               	decf	initSD@arr_response+2,w,c
  2615  00EE46  A4D8               	btfss	status,2,c
  2616  00EE48  0012               	return	
  2617  00EE4A  D012               	goto	l259
  2618  00EE4C                     l254:
  2619                           
  2620                           ;SD_PIC.c: 540: else if(response == R1_IDLE_STATE){
  2621  00EE4C  0E72               	movlw	low _R1_IDLE_STATE
  2622  00EE4E  6EF6               	movwf	tblptrl,c
  2623  00EE50                     	if	1	;There is more than 1 active tblptr byte
  2624  00EE50  0EFF               	movlw	high _R1_IDLE_STATE
  2625  00EE52  6EF7               	movwf	tblptrh,c
  2626  00EE54                     	endif
  2627  00EE54                     	if	0	;There are less than 3 active tblptr bytes
  2628  00EE54                     	endif
  2629  00EE54  0008               	tblrd		*
  2630  00EE56  50F5               	movf	tablat,w,c
  2631  00EE58  625F               	cpfseq	initSD@response,c
  2632  00EE5A  D793               	goto	u4210
  2633                           
  2634                           ;SD_PIC.c: 541: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  2635  00EE5C  044D               	decf	initSD@arr_response+2,w,c
  2636  00EE5E  A4D8               	btfss	status,2,c
  2637  00EE60  0012               	return	
  2638  00EE62  0EAA               	movlw	170
  2639  00EE64  184E               	xorwf	initSD@arr_response+3,w,c
  2640  00EE66  A4D8               	btfss	status,2,c
  2641  00EE68  0012               	return	
  2642                           
  2643                           ;SD_PIC.c: 544: SDCard.SDversion = 2;
  2644  00EE6A  0E02               	movlw	2
  2645  00EE6C  0100               	movlb	0	; () banked
  2646  00EE6E  6F80               	movwf	_SDCard& (0+255),b
  2647  00EE70                     l259:
  2648                           
  2649                           ;SD_PIC.c: 550: }
  2650                           ;SD_PIC.c: 551: }
  2651                           ;SD_PIC.c: 552: }
  2652                           ;SD_PIC.c: 561: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  2653                           
  2654                           ; BSR set to: 0
  2655  00EE70  0100               	movlb	0	; () banked
  2656  00EE72  0580               	decf	_SDCard& (0+255),w,b
  2657  00EE74  B4D8               	btfsc	status,2,c
  2658  00EE76  D008               	goto	l266
  2659                           
  2660                           ; BSR set to: 0
  2661  00EE78  0E00               	movlw	0
  2662  00EE7A  6E41               	movwf	initSD@argument,c
  2663  00EE7C  0E00               	movlw	0
  2664  00EE7E  6E42               	movwf	initSD@argument+1,c
  2665  00EE80  0E00               	movlw	0
  2666  00EE82  6E43               	movwf	initSD@argument+2,c
  2667  00EE84  0E40               	movlw	64
  2668  00EE86  D007               	goto	L1
  2669  00EE88                     l266:
  2670                           
  2671                           ; BSR set to: 0
  2672                           
  2673                           ; BSR set to: 0
  2674  00EE88  0E00               	movlw	0
  2675  00EE8A  6E41               	movwf	initSD@argument,c
  2676  00EE8C  0E00               	movlw	0
  2677  00EE8E  6E42               	movwf	initSD@argument+1,c
  2678  00EE90  0E00               	movlw	0
  2679  00EE92  6E43               	movwf	initSD@argument+2,c
  2680  00EE94  0E00               	movlw	0
  2681  00EE96                     L1:
  2682  00EE96  6E44               	movwf	initSD@argument+3,c
  2683  00EE98                     
  2684                           ;SD_PIC.c: 564: response = SD_ACMD(ACMD41, argument);
  2685                           
  2686                           ; BSR set to: 0
  2687                           
  2688                           ;SD_PIC.c: 563: do{
  2689                           
  2690                           ; BSR set to: 0
  2691  00EE98  C041  F00D         	movff	initSD@argument,SD_ACMD@arg
  2692  00EE9C  C042  F00E         	movff	initSD@argument+1,SD_ACMD@arg+1
  2693  00EEA0  C043  F00F         	movff	initSD@argument+2,SD_ACMD@arg+2
  2694  00EEA4  C044  F010         	movff	initSD@argument+3,SD_ACMD@arg+3
  2695  00EEA8  0E74               	movlw	low _ACMD41
  2696  00EEAA  6EF6               	movwf	tblptrl,c
  2697  00EEAC                     	if	1	;There is more than 1 active tblptr byte
  2698  00EEAC  0EFF               	movlw	high _ACMD41
  2699  00EEAE  6EF7               	movwf	tblptrh,c
  2700  00EEB0                     	endif
  2701  00EEB0                     	if	0	;There are less than 3 active tblptr bytes
  2702  00EEB0                     	endif
  2703  00EEB0  0008               	tblrd		*
  2704  00EEB2  50F5               	movf	tablat,w,c
  2705  00EEB4  ECC6  F066         	call	_SD_ACMD
  2706  00EEB8  6E5F               	movwf	initSD@response,c
  2707                           
  2708                           ;SD_PIC.c: 565: }while((response != R1_READY_STATE) && ((response & R1_ILLEGAL_COMMAND) 
      +                          != R1_ILLEGAL_COMMAND));
  2709  00EEBA  0E73               	movlw	low _R1_READY_STATE
  2710  00EEBC  6EF6               	movwf	tblptrl,c
  2711  00EEBE                     	if	1	;There is more than 1 active tblptr byte
  2712  00EEBE  0EFF               	movlw	high _R1_READY_STATE
  2713  00EEC0  6EF7               	movwf	tblptrh,c
  2714  00EEC2                     	endif
  2715  00EEC2                     	if	0	;There are less than 3 active tblptr bytes
  2716  00EEC2                     	endif
  2717  00EEC2  0008               	tblrd		*
  2718  00EEC4  50F5               	movf	tablat,w,c
  2719  00EEC6  185F               	xorwf	initSD@response,w,c
  2720  00EEC8  B4D8               	btfsc	status,2,c
  2721  00EECA  D013               	goto	u4330
  2722  00EECC  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2723  00EECE  6EF6               	movwf	tblptrl,c
  2724  00EED0                     	if	1	;There is more than 1 active tblptr byte
  2725  00EED0  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2726  00EED2  6EF7               	movwf	tblptrh,c
  2727  00EED4                     	endif
  2728  00EED4                     	if	0	;There are less than 3 active tblptr bytes
  2729  00EED4                     	endif
  2730  00EED4  0008               	tblrd		*
  2731  00EED6  CFF5 F03A          	movff	tablat,??_initSD
  2732  00EEDA  505F               	movf	initSD@response,w,c
  2733  00EEDC  143A               	andwf	??_initSD,w,c
  2734  00EEDE  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2735  00EEE0  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2736  00EEE2  6EF6               	movwf	tblptrl,c
  2737  00EEE4                     	if	1	;There is more than 1 active tblptr byte
  2738  00EEE4  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2739  00EEE6  6EF7               	movwf	tblptrh,c
  2740  00EEE8                     	endif
  2741  00EEE8                     	if	0	;There are less than 3 active tblptr bytes
  2742  00EEE8                     	endif
  2743  00EEE8  0008               	tblrd		*
  2744  00EEEA  50F5               	movf	tablat,w,c
  2745  00EEEC  183B               	xorwf	??_initSD+1,w,c
  2746  00EEEE  A4D8               	btfss	status,2,c
  2747  00EEF0  D7D3               	goto	l268
  2748  00EEF2                     u4330:
  2749                           
  2750                           ;SD_PIC.c: 570: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2751  00EEF2  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2752  00EEF4  6EF6               	movwf	tblptrl,c
  2753  00EEF6                     	if	1	;There is more than 1 active tblptr byte
  2754  00EEF6  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2755  00EEF8  6EF7               	movwf	tblptrh,c
  2756  00EEFA                     	endif
  2757  00EEFA                     	if	0	;There are less than 3 active tblptr bytes
  2758  00EEFA                     	endif
  2759  00EEFA  0008               	tblrd		*
  2760  00EEFC  CFF5 F03A          	movff	tablat,??_initSD
  2761  00EF00  505F               	movf	initSD@response,w,c
  2762  00EF02  143A               	andwf	??_initSD,w,c
  2763  00EF04  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2764  00EF06  0E71               	movlw	low _R1_ILLEGAL_COMMAND
  2765  00EF08  6EF6               	movwf	tblptrl,c
  2766  00EF0A                     	if	1	;There is more than 1 active tblptr byte
  2767  00EF0A  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2768  00EF0C  6EF7               	movwf	tblptrh,c
  2769  00EF0E                     	endif
  2770  00EF0E                     	if	0	;There are less than 3 active tblptr bytes
  2771  00EF0E                     	endif
  2772  00EF0E  0008               	tblrd		*
  2773  00EF10  50F5               	movf	tablat,w,c
  2774  00EF12  183B               	xorwf	??_initSD+1,w,c
  2775  00EF14  A4D8               	btfss	status,2,c
  2776  00EF16  D01C               	goto	l275
  2777                           
  2778                           ;SD_PIC.c: 571: if(SDCard.SDversion == 1){
  2779  00EF18  0100               	movlb	0	; () banked
  2780  00EF1A  0580               	decf	_SDCard& (0+255),w,b
  2781  00EF1C  A4D8               	btfss	status,2,c
  2782  00EF1E  D014               	goto	l274
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;SD_PIC.c: 573: SDCard.Type = 2;
  2786  00EF20  0E02               	movlw	2
  2787  00EF22  0100               	movlb	0	; () banked
  2788  00EF24  6F81               	movwf	(_SDCard+1)& (0+255),b
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;SD_PIC.c: 574: SD_Command(CMD1, 0);
  2792  00EF26  0E00               	movlw	0
  2793  00EF28  6E04               	movwf	SD_Command@arg,c
  2794  00EF2A  0E00               	movlw	0
  2795  00EF2C  6E05               	movwf	SD_Command@arg+1,c
  2796  00EF2E  0E00               	movlw	0
  2797  00EF30  6E06               	movwf	SD_Command@arg+2,c
  2798  00EF32  0E00               	movlw	0
  2799  00EF34  6E07               	movwf	SD_Command@arg+3,c
  2800  00EF36  0E87               	movlw	low _CMD1
  2801  00EF38  6EF6               	movwf	tblptrl,c
  2802  00EF3A                     	if	1	;There is more than 1 active tblptr byte
  2803  00EF3A  0EFF               	movlw	high _CMD1
  2804  00EF3C  6EF7               	movwf	tblptrh,c
  2805  00EF3E                     	endif
  2806  00EF3E                     	if	0	;There are less than 3 active tblptr bytes
  2807  00EF3E                     	endif
  2808  00EF3E  0008               	tblrd		*
  2809  00EF40  50F5               	movf	tablat,w,c
  2810  00EF42  EC6D  F06A         	call	_SD_Command
  2811                           
  2812                           ;SD_PIC.c: 575: }
  2813  00EF46  D004               	goto	l275
  2814  00EF48                     l274:
  2815                           
  2816                           ;SD_PIC.c: 576: else{
  2817                           ;SD_PIC.c: 578: SDCard.init = 0;
  2818  00EF48  0E00               	movlw	0
  2819  00EF4A  0100               	movlb	0	; () banked
  2820  00EF4C  6F9B               	movwf	(_SDCard+27)& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;SD_PIC.c: 579: return;
  2824  00EF4E  0012               	return	
  2825  00EF50                     l275:
  2826                           
  2827                           ;SD_PIC.c: 580: }
  2828                           ;SD_PIC.c: 581: }
  2829                           ;SD_PIC.c: 583: if(SDCard.Type != 2){
  2830                           
  2831                           ; BSR set to: 0
  2832                           
  2833                           ; BSR set to: 0
  2834  00EF50  0E02               	movlw	2
  2835  00EF52  0100               	movlb	0	; () banked
  2836  00EF54  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  2837  00EF56  B4D8               	btfsc	status,2,c
  2838  00EF58  D027               	goto	l276
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;SD_PIC.c: 586: SD_Command(CMD58, 0);
  2842  00EF5A  0E00               	movlw	0
  2843  00EF5C  6E04               	movwf	SD_Command@arg,c
  2844  00EF5E  0E00               	movlw	0
  2845  00EF60  6E05               	movwf	SD_Command@arg+1,c
  2846  00EF62  0E00               	movlw	0
  2847  00EF64  6E06               	movwf	SD_Command@arg+2,c
  2848  00EF66  0E00               	movlw	0
  2849  00EF68  6E07               	movwf	SD_Command@arg+3,c
  2850  00EF6A  0E77               	movlw	low _CMD58
  2851  00EF6C  6EF6               	movwf	tblptrl,c
  2852  00EF6E                     	if	1	;There is more than 1 active tblptr byte
  2853  00EF6E  0EFF               	movlw	high _CMD58
  2854  00EF70  6EF7               	movwf	tblptrh,c
  2855  00EF72                     	endif
  2856  00EF72                     	if	0	;There are less than 3 active tblptr bytes
  2857  00EF72                     	endif
  2858  00EF72  0008               	tblrd		*
  2859  00EF74  50F5               	movf	tablat,w,c
  2860  00EF76  EC6D  F06A         	call	_SD_Command
  2861                           
  2862                           ;SD_PIC.c: 589: LATEbits.LATE2 = 0;
  2863  00EF7A  948D               	bcf	3981,2,c	;volatile
  2864                           
  2865                           ;SD_PIC.c: 590: SDCard.Type = (unsigned char)((spiReceive() & 0xC0) == 0xC0);
  2866  00EF7C  ECC4  F065         	call	_spiReceive	;wreg free
  2867  00EF80  0BC0               	andlw	192
  2868  00EF82  0AC0               	xorlw	192
  2869  00EF84  A4D8               	btfss	status,2,c
  2870  00EF86  D002               	goto	u4370
  2871  00EF88  0E01               	movlw	1
  2872  00EF8A  D001               	goto	u4380
  2873  00EF8C                     u4370:
  2874  00EF8C  0E00               	movlw	0
  2875  00EF8E                     u4380:
  2876  00EF8E  0100               	movlb	0	; () banked
  2877  00EF90  6F81               	movwf	(_SDCard+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;SD_PIC.c: 594: for(i = 0; i < 3; i++){ spiReceive(); }
  2881  00EF92  0E00               	movlw	0
  2882  00EF94  6E60               	movwf	initSD@i,c
  2883  00EF96                     l4935:
  2884                           
  2885                           ; BSR set to: 0
  2886  00EF96  0E02               	movlw	2
  2887  00EF98  6460               	cpfsgt	initSD@i,c
  2888  00EF9A  D001               	goto	l277
  2889  00EF9C  D004               	goto	u4400
  2890  00EF9E                     l277:
  2891                           
  2892                           ; BSR set to: 0
  2893  00EF9E  ECC4  F065         	call	_spiReceive	;wreg free
  2894  00EFA2  2A60               	incf	initSD@i,f,c
  2895  00EFA4  D7F8               	goto	l4935
  2896  00EFA6                     u4400:
  2897                           
  2898                           ;SD_PIC.c: 595: LATEbits.LATE2 = 1;
  2899  00EFA6  848D               	bsf	3981,2,c	;volatile
  2900  00EFA8                     l276:
  2901                           
  2902                           ;SD_PIC.c: 596: }
  2903                           ;SD_PIC.c: 599: while(SD_Command(CMD16, 512) != R1_READY_STATE){ continue; }
  2904  00EFA8  0E00               	movlw	0
  2905  00EFAA  6E04               	movwf	SD_Command@arg,c
  2906  00EFAC  0E02               	movlw	2
  2907  00EFAE  6E05               	movwf	SD_Command@arg+1,c
  2908  00EFB0  0E00               	movlw	0
  2909  00EFB2  6E06               	movwf	SD_Command@arg+2,c
  2910  00EFB4  0E00               	movlw	0
  2911  00EFB6  6E07               	movwf	SD_Command@arg+3,c
  2912  00EFB8  0E80               	movlw	low _CMD16
  2913  00EFBA  6EF6               	movwf	tblptrl,c
  2914  00EFBC                     	if	1	;There is more than 1 active tblptr byte
  2915  00EFBC  0EFF               	movlw	high _CMD16
  2916  00EFBE  6EF7               	movwf	tblptrh,c
  2917  00EFC0                     	endif
  2918  00EFC0                     	if	0	;There are less than 3 active tblptr bytes
  2919  00EFC0                     	endif
  2920  00EFC0  0008               	tblrd		*
  2921  00EFC2  50F5               	movf	tablat,w,c
  2922  00EFC4  EC6D  F06A         	call	_SD_Command
  2923  00EFC8  6E3A               	movwf	??_initSD& (0+255),c
  2924  00EFCA  0E73               	movlw	low _R1_READY_STATE
  2925  00EFCC  6EF6               	movwf	tblptrl,c
  2926  00EFCE                     	if	1	;There is more than 1 active tblptr byte
  2927  00EFCE  0EFF               	movlw	high _R1_READY_STATE
  2928  00EFD0  6EF7               	movwf	tblptrh,c
  2929  00EFD2                     	endif
  2930  00EFD2                     	if	0	;There are less than 3 active tblptr bytes
  2931  00EFD2                     	endif
  2932  00EFD2  0008               	tblrd		*
  2933  00EFD4  50F5               	movf	tablat,w,c
  2934  00EFD6  183A               	xorwf	??_initSD,w,c
  2935  00EFD8  A4D8               	btfss	status,2,c
  2936  00EFDA  D7E6               	goto	l276
  2937                           
  2938                           ;SD_PIC.c: 600: SDCard.blockSize = 512;
  2939  00EFDC  0E02               	movlw	2
  2940  00EFDE  0100               	movlb	0	; () banked
  2941  00EFE0  6F93               	movwf	(_SDCard+19)& (0+255),b
  2942  00EFE2  0E00               	movlw	0
  2943  00EFE4  6F92               	movwf	(_SDCard+18)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;SD_PIC.c: 603: SD_Command(CMD9, 0);
  2947  00EFE6  0E00               	movlw	0
  2948  00EFE8  6E04               	movwf	SD_Command@arg,c
  2949  00EFEA  0E00               	movlw	0
  2950  00EFEC  6E05               	movwf	SD_Command@arg+1,c
  2951  00EFEE  0E00               	movlw	0
  2952  00EFF0  6E06               	movwf	SD_Command@arg+2,c
  2953  00EFF2  0E00               	movlw	0
  2954  00EFF4  6E07               	movwf	SD_Command@arg+3,c
  2955  00EFF6  0E84               	movlw	low _CMD9
  2956  00EFF8  6EF6               	movwf	tblptrl,c
  2957  00EFFA                     	if	1	;There is more than 1 active tblptr byte
  2958  00EFFA  0EFF               	movlw	high _CMD9
  2959  00EFFC  6EF7               	movwf	tblptrh,c
  2960  00EFFE                     	endif
  2961  00EFFE                     	if	0	;There are less than 3 active tblptr bytes
  2962  00EFFE                     	endif
  2963  00EFFE  0008               	tblrd		*
  2964  00F000  50F5               	movf	tablat,w,c
  2965  00F002  EC6D  F06A         	call	_SD_Command
  2966                           
  2967                           ;SD_PIC.c: 604: LATEbits.LATE2 = 0;
  2968  00F006  948D               	bcf	3981,2,c	;volatile
  2969  00F008  ECC4  F065         	call	_spiReceive	;wreg free
  2970  00F00C  6E3A               	movwf	??_initSD& (0+255),c
  2971  00F00E  0E70               	movlw	low _START_BLOCK
  2972  00F010  6EF6               	movwf	tblptrl,c
  2973  00F012                     	if	1	;There is more than 1 active tblptr byte
  2974  00F012  0EFF               	movlw	high _START_BLOCK
  2975  00F014  6EF7               	movwf	tblptrh,c
  2976  00F016                     	endif
  2977  00F016                     	if	0	;There are less than 3 active tblptr bytes
  2978  00F016                     	endif
  2979  00F016  0008               	tblrd		*
  2980  00F018  50F5               	movf	tablat,w,c
  2981  00F01A  183A               	xorwf	??_initSD,w,c
  2982  00F01C  A4D8               	btfss	status,2,c
  2983  00F01E  D7F4               	goto	l283
  2984                           
  2985                           ;SD_PIC.c: 606: for(i = 0; i < 16; i++){
  2986  00F020  0E00               	movlw	0
  2987  00F022  6E60               	movwf	initSD@i,c
  2988  00F024                     l4957:
  2989  00F024  0E0F               	movlw	15
  2990  00F026  6460               	cpfsgt	initSD@i,c
  2991  00F028  D001               	goto	l285
  2992  00F02A  D00D               	goto	u4440
  2993  00F02C                     l285:
  2994                           
  2995                           ;SD_PIC.c: 607: arr_response[i] = spiReceive();
  2996  00F02C  5060               	movf	initSD@i,w,c
  2997  00F02E  0D01               	mullw	1
  2998  00F030  0E4B               	movlw	low initSD@arr_response
  2999  00F032  24F3               	addwf	prodl,w,c
  3000  00F034  6ED9               	movwf	fsr2l,c
  3001  00F036  0E00               	movlw	high initSD@arr_response
  3002  00F038  20F4               	addwfc	prodh,w,c
  3003  00F03A  6EDA               	movwf	fsr2h,c
  3004  00F03C  ECC4  F065         	call	_spiReceive	;wreg free
  3005  00F040  6EDF               	movwf	indf2,c
  3006  00F042  2A60               	incf	initSD@i,f,c
  3007  00F044  D7EF               	goto	l4957
  3008  00F046                     u4440:
  3009                           
  3010                           ;SD_PIC.c: 608: }
  3011                           ;SD_PIC.c: 609: spiReceive();
  3012  00F046  ECC4  F065         	call	_spiReceive	;wreg free
  3013                           
  3014                           ;SD_PIC.c: 610: spiReceive();
  3015  00F04A  ECC4  F065         	call	_spiReceive	;wreg free
  3016                           
  3017                           ;SD_PIC.c: 611: LATEbits.LATE2 = 1;
  3018  00F04E  848D               	bsf	3981,2,c	;volatile
  3019                           
  3020                           ;SD_PIC.c: 613: if(SDCard.SDversion == 2){
  3021  00F050  0E02               	movlw	2
  3022  00F052  0100               	movlb	0	; () banked
  3023  00F054  1980               	xorwf	_SDCard& (0+255),w,b
  3024  00F056  A4D8               	btfss	status,2,c
  3025  00F058  D06C               	goto	l287
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;SD_PIC.c: 619: unsigned long tempSize = arr_response[9] + 1UL;
  3029  00F05A  0E01               	movlw	1
  3030  00F05C  2454               	addwf	initSD@arr_response+9,w,c
  3031  00F05E  6E47               	movwf	initSD@tempSize,c
  3032  00F060  6A48               	clrf	initSD@tempSize+1,c
  3033  00F062  0E00               	movlw	0
  3034  00F064  2248               	addwfc	initSD@tempSize+1,f,c
  3035  00F066  6A49               	clrf	initSD@tempSize+2,c
  3036  00F068  0E00               	movlw	0
  3037  00F06A  2249               	addwfc	initSD@tempSize+2,f,c
  3038  00F06C  6A4A               	clrf	initSD@tempSize+3,c
  3039  00F06E  0E00               	movlw	0
  3040  00F070  224A               	addwfc	initSD@tempSize+3,f,c
  3041                           
  3042                           ;SD_PIC.c: 620: tempSize |= (unsigned long)(arr_response[8] << 8);
  3043  00F072  5053               	movf	initSD@arr_response+8,w,c
  3044  00F074  6E3B               	movwf	(??_initSD+1)& (0+255),c
  3045  00F076  6A3A               	clrf	??_initSD& (0+255),c
  3046  00F078  C03A  F03C         	movff	??_initSD,??_initSD+2
  3047  00F07C  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3048  00F080  0E00               	movlw	0
  3049  00F082  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  3050  00F084  0EFF               	movlw	255
  3051  00F086  6E3E               	movwf	(??_initSD+4)& (0+255),c
  3052  00F088  6E3F               	movwf	(??_initSD+5)& (0+255),c
  3053  00F08A  503C               	movf	??_initSD+2,w,c
  3054  00F08C  1247               	iorwf	initSD@tempSize,f,c
  3055  00F08E  503D               	movf	??_initSD+3,w,c
  3056  00F090  1248               	iorwf	initSD@tempSize+1,f,c
  3057  00F092  503E               	movf	??_initSD+4,w,c
  3058  00F094  1249               	iorwf	initSD@tempSize+2,f,c
  3059  00F096  503F               	movf	??_initSD+5,w,c
  3060  00F098  124A               	iorwf	initSD@tempSize+3,f,c
  3061                           
  3062                           ;SD_PIC.c: 621: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  3063  00F09A  C052  F03A         	movff	initSD@arr_response+7,??_initSD
  3064  00F09E  0E3F               	movlw	63
  3065  00F0A0  163A               	andwf	??_initSD,f,c
  3066  00F0A2  C03A  F03B         	movff	??_initSD,??_initSD+1
  3067  00F0A6  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3068  00F0A8  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3069  00F0AA  6A3E               	clrf	(??_initSD+4)& (0+255),c
  3070  00F0AC  C03C  F03E         	movff	??_initSD+2,??_initSD+4
  3071  00F0B0  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3072  00F0B4  6A3C               	clrf	??_initSD+2,c
  3073  00F0B6  6A3B               	clrf	??_initSD+1,c
  3074  00F0B8  503B               	movf	??_initSD+1,w,c
  3075  00F0BA  1247               	iorwf	initSD@tempSize,f,c
  3076  00F0BC  503C               	movf	??_initSD+2,w,c
  3077  00F0BE  1248               	iorwf	initSD@tempSize+1,f,c
  3078  00F0C0  503D               	movf	??_initSD+3,w,c
  3079  00F0C2  1249               	iorwf	initSD@tempSize+2,f,c
  3080  00F0C4  503E               	movf	??_initSD+4,w,c
  3081  00F0C6  124A               	iorwf	initSD@tempSize+3,f,c
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;SD_PIC.c: 622: SDCard.size = tempSize * 0.524288;
  3085  00F0C8  C047  F009         	movff	initSD@tempSize,___lltoft@c
  3086  00F0CC  C048  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  3087  00F0D0  C049  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  3088  00F0D4  C04A  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  3089  00F0D8  EC7E  F067         	call	___lltoft	;wreg free
  3090  00F0DC  C009  F015         	movff	?___lltoft,___ftmul@f1
  3091  00F0E0  C00A  F016         	movff	?___lltoft+1,___ftmul@f1+1
  3092  00F0E4  C00B  F017         	movff	?___lltoft+2,___ftmul@f1+2
  3093  00F0E8  0E38               	movlw	56
  3094  00F0EA  6E18               	movwf	___ftmul@f2,c
  3095  00F0EC  0E06               	movlw	6
  3096  00F0EE  6E19               	movwf	___ftmul@f2+1,c
  3097  00F0F0  0E3F               	movlw	63
  3098  00F0F2  6E1A               	movwf	___ftmul@f2+2,c
  3099  00F0F4  ECAC  F06C         	call	___ftmul	;wreg free
  3100  00F0F8  C015  F098         	movff	?___ftmul,_SDCard+24
  3101  00F0FC  C016  F099         	movff	?___ftmul+1,_SDCard+25
  3102  00F100  C017  F09A         	movff	?___ftmul+2,_SDCard+26
  3103                           
  3104                           ;SD_PIC.c: 623: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  3105  00F104  0E00               	movlw	0
  3106  00F106  6E18               	movwf	___ftmul@f2,c
  3107  00F108  0E00               	movlw	0
  3108  00F10A  6E19               	movwf	___ftmul@f2+1,c
  3109  00F10C  0E45               	movlw	69
  3110  00F10E  6E1A               	movwf	___ftmul@f2+2,c
  3111  00F110  C098  F015         	movff	_SDCard+24,___ftmul@f1
  3112  00F114  C099  F016         	movff	_SDCard+25,___ftmul@f1+1
  3113  00F118  C09A  F017         	movff	_SDCard+26,___ftmul@f1+2
  3114  00F11C  ECAC  F06C         	call	___ftmul	;wreg free
  3115  00F120  C015  F02B         	movff	?___ftmul,___fttol@f1
  3116  00F124  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  3117  00F128  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  3118  00F12C  EC32  F06C         	call	___fttol	;wreg free
  3119  00F130  D0BE               	goto	L2
  3120  00F132                     l287:
  3121                           
  3122                           ;SD_PIC.c: 625: else{
  3123                           ;SD_PIC.c: 633: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  3124  00F132  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  3125  00F136  0E03               	movlw	3
  3126  00F138  163A               	andwf	??_initSD,f,c
  3127  00F13A  C03A  F03B         	movff	??_initSD,??_initSD+1
  3128  00F13E  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3129  00F140  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3130  00F142  6A3E               	clrf	(??_initSD+4)& (0+255),c
  3131  00F144  0E04               	movlw	4
  3132  00F146                     u4465:
  3133  00F146  90D8               	bcf	status,0,c
  3134  00F148  363B               	rlcf	??_initSD+1,f,c
  3135  00F14A  363C               	rlcf	??_initSD+2,f,c
  3136  00F14C  363D               	rlcf	??_initSD+3,f,c
  3137  00F14E  363E               	rlcf	??_initSD+4,f,c
  3138  00F150  2EE8               	decfsz	wreg,f,c
  3139  00F152  D7F9               	goto	u4465
  3140  00F154  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_446
  3141  00F158  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_446+1
  3142  00F15C  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_446+2
  3143  00F160  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_446+3
  3144                           
  3145                           ;SD_PIC.c: 634: tempSize |= (unsigned long)(arr_response[7] << 2);
  3146  00F164  5052               	movf	initSD@arr_response+7,w,c
  3147  00F166  6E3A               	movwf	??_initSD& (0+255),c
  3148  00F168  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3149  00F16A  90D8               	bcf	status,0,c
  3150  00F16C  363A               	rlcf	??_initSD,f,c
  3151  00F16E  363B               	rlcf	??_initSD+1,f,c
  3152  00F170  90D8               	bcf	status,0,c
  3153  00F172  363A               	rlcf	??_initSD,f,c
  3154  00F174  363B               	rlcf	??_initSD+1,f,c
  3155  00F176  C03A  F03C         	movff	??_initSD,??_initSD+2
  3156  00F17A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3157  00F17E  0E00               	movlw	0
  3158  00F180  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  3159  00F182  0EFF               	movlw	255
  3160  00F184  6E3E               	movwf	(??_initSD+4)& (0+255),c
  3161  00F186  6E3F               	movwf	(??_initSD+5)& (0+255),c
  3162  00F188  503C               	movf	??_initSD+2,w,c
  3163  00F18A  125B               	iorwf	initSD@tempSize_446,f,c
  3164  00F18C  503D               	movf	??_initSD+3,w,c
  3165  00F18E  125C               	iorwf	initSD@tempSize_446+1,f,c
  3166  00F190  503E               	movf	??_initSD+4,w,c
  3167  00F192  125D               	iorwf	initSD@tempSize_446+2,f,c
  3168  00F194  503F               	movf	??_initSD+5,w,c
  3169  00F196  125E               	iorwf	initSD@tempSize_446+3,f,c
  3170                           
  3171                           ;SD_PIC.c: 635: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  3172  00F198  C053  F03A         	movff	initSD@arr_response+8,??_initSD
  3173  00F19C  90D8               	bcf	status,0,c
  3174  00F19E  323A               	rrcf	??_initSD,f,c
  3175  00F1A0  90D8               	bcf	status,0,c
  3176  00F1A2  323A               	rrcf	??_initSD,f,c
  3177  00F1A4  0E30               	movlw	48
  3178  00F1A6  163A               	andwf	??_initSD,f,c
  3179  00F1A8  0E01               	movlw	1
  3180  00F1AA  243A               	addwf	??_initSD,w,c
  3181  00F1AC  6E3B               	movwf	(??_initSD+1)& (0+255),c
  3182  00F1AE  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3183  00F1B0  0E00               	movlw	0
  3184  00F1B2  223C               	addwfc	(??_initSD+2)& (0+255),f,c
  3185  00F1B4  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3186  00F1B6  0E00               	movlw	0
  3187  00F1B8  223D               	addwfc	(??_initSD+3)& (0+255),f,c
  3188  00F1BA  6A3E               	clrf	(??_initSD+4)& (0+255),c
  3189  00F1BC  0E00               	movlw	0
  3190  00F1BE  223E               	addwfc	(??_initSD+4)& (0+255),f,c
  3191  00F1C0  503B               	movf	??_initSD+1,w,c
  3192  00F1C2  125B               	iorwf	initSD@tempSize_446,f,c
  3193  00F1C4  503C               	movf	??_initSD+2,w,c
  3194  00F1C6  125C               	iorwf	initSD@tempSize_446+1,f,c
  3195  00F1C8  503D               	movf	??_initSD+3,w,c
  3196  00F1CA  125D               	iorwf	initSD@tempSize_446+2,f,c
  3197  00F1CC  503E               	movf	??_initSD+4,w,c
  3198  00F1CE  125E               	iorwf	initSD@tempSize_446+3,f,c
  3199                           
  3200                           ;SD_PIC.c: 636: tempSize = tempSize << (((unsigned long) ((arr_response[9] & 0x03) << 1)
      +                           | (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  3201  00F1D0  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  3202  00F1D4  0E03               	movlw	3
  3203  00F1D6  163A               	andwf	??_initSD,f,c
  3204  00F1D8  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3205  00F1DA  AE55               	btfss	initSD@arr_response+10,7,c
  3206  00F1DC  D001               	bra	u4475
  3207  00F1DE  2A3B               	incf	(??_initSD+1)& (0+255),f,c
  3208  00F1E0                     u4475:
  3209  00F1E0  303B               	rrcf	??_initSD+1,w,c
  3210  00F1E2  343A               	rlcf	??_initSD,w,c
  3211  00F1E4  6E3C               	movwf	(??_initSD+2)& (0+255),c
  3212  00F1E6  0E02               	movlw	2
  3213  00F1E8  263C               	addwf	??_initSD+2,f,c
  3214  00F1EA  C05B  F03D         	movff	initSD@tempSize_446,??_initSD+3
  3215  00F1EE  C05C  F03E         	movff	initSD@tempSize_446+1,??_initSD+4
  3216  00F1F2  C05D  F03F         	movff	initSD@tempSize_446+2,??_initSD+5
  3217  00F1F6  C05E  F040         	movff	initSD@tempSize_446+3,??_initSD+6
  3218  00F1FA  2A3C               	incf	??_initSD+2,f,c
  3219  00F1FC  D005               	goto	u4480
  3220  00F1FE                     u4485:
  3221  00F1FE  90D8               	bcf	status,0,c
  3222  00F200  363D               	rlcf	??_initSD+3,f,c
  3223  00F202  363E               	rlcf	??_initSD+4,f,c
  3224  00F204  363F               	rlcf	??_initSD+5,f,c
  3225  00F206  3640               	rlcf	??_initSD+6,f,c
  3226  00F208                     u4480:
  3227  00F208  2E3C               	decfsz	??_initSD+2,f,c
  3228  00F20A  D7F9               	goto	u4485
  3229  00F20C  C03D  F05B         	movff	??_initSD+3,initSD@tempSize_446
  3230  00F210  C03E  F05C         	movff	??_initSD+4,initSD@tempSize_446+1
  3231  00F214  C03F  F05D         	movff	??_initSD+5,initSD@tempSize_446+2
  3232  00F218  C040  F05E         	movff	??_initSD+6,initSD@tempSize_446+3
  3233                           
  3234                           ;SD_PIC.c: 639: tempSize = tempSize << ((unsigned long) (arr_response[5] & 0x0F));
  3235  00F21C  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  3236  00F220  0E0F               	movlw	15
  3237  00F222  163A               	andwf	??_initSD,f,c
  3238  00F224  C05B  F03B         	movff	initSD@tempSize_446,??_initSD+1
  3239  00F228  C05C  F03C         	movff	initSD@tempSize_446+1,??_initSD+2
  3240  00F22C  C05D  F03D         	movff	initSD@tempSize_446+2,??_initSD+3
  3241  00F230  C05E  F03E         	movff	initSD@tempSize_446+3,??_initSD+4
  3242  00F234  2A3A               	incf	??_initSD,f,c
  3243  00F236  D005               	goto	u4490
  3244  00F238                     u4495:
  3245  00F238  90D8               	bcf	status,0,c
  3246  00F23A  363B               	rlcf	??_initSD+1,f,c
  3247  00F23C  363C               	rlcf	??_initSD+2,f,c
  3248  00F23E  363D               	rlcf	??_initSD+3,f,c
  3249  00F240  363E               	rlcf	??_initSD+4,f,c
  3250  00F242                     u4490:
  3251  00F242  2E3A               	decfsz	??_initSD,f,c
  3252  00F244  D7F9               	goto	u4495
  3253  00F246  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_446
  3254  00F24A  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_446+1
  3255  00F24E  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_446+2
  3256  00F252  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_446+3
  3257                           
  3258                           ;SD_PIC.c: 641: SDCard.size = (unsigned long)tempSize;
  3259  00F256  C05B  F009         	movff	initSD@tempSize_446,___lltoft@c
  3260  00F25A  C05C  F00A         	movff	initSD@tempSize_446+1,___lltoft@c+1
  3261  00F25E  C05D  F00B         	movff	initSD@tempSize_446+2,___lltoft@c+2
  3262  00F262  C05E  F00C         	movff	initSD@tempSize_446+3,___lltoft@c+3
  3263  00F266  EC7E  F067         	call	___lltoft	;wreg free
  3264  00F26A  C009  F098         	movff	?___lltoft,_SDCard+24
  3265  00F26E  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  3266  00F272  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  3267                           
  3268                           ;SD_PIC.c: 642: SDCard.numBlocks = (unsigned long)(SDCard.size/SDCard.blockSize);
  3269  00F276  C092  F009         	movff	_SDCard+18,___lwtoft@c
  3270  00F27A  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  3271  00F27E  EC45  F066         	call	___lwtoft	;wreg free
  3272  00F282  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  3273  00F286  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  3274  00F28A  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  3275  00F28E  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  3276  00F292  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  3277  00F296  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  3278  00F29A  ECBF  F06B         	call	___ftdiv	;wreg free
  3279  00F29E  C00C  F02B         	movff	?___ftdiv,___fttol@f1
  3280  00F2A2  C00D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  3281  00F2A6  C00E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  3282  00F2AA  EC32  F06C         	call	___fttol	;wreg free
  3283  00F2AE                     L2:
  3284  00F2AE  C02B  F094         	movff	?___fttol,_SDCard+20
  3285  00F2B2  C02C  F095         	movff	?___fttol+1,_SDCard+21
  3286  00F2B6  C02D  F096         	movff	?___fttol+2,_SDCard+22
  3287  00F2BA  C02E  F097         	movff	?___fttol+3,_SDCard+23
  3288                           
  3289                           ;SD_PIC.c: 643: }
  3290                           ;SD_PIC.c: 646: SD_Command(CMD10, 0);
  3291  00F2BE  0E00               	movlw	0
  3292  00F2C0  6E04               	movwf	SD_Command@arg,c
  3293  00F2C2  0E00               	movlw	0
  3294  00F2C4  6E05               	movwf	SD_Command@arg+1,c
  3295  00F2C6  0E00               	movlw	0
  3296  00F2C8  6E06               	movwf	SD_Command@arg+2,c
  3297  00F2CA  0E00               	movlw	0
  3298  00F2CC  6E07               	movwf	SD_Command@arg+3,c
  3299  00F2CE  0E83               	movlw	low _CMD10
  3300  00F2D0  6EF6               	movwf	tblptrl,c
  3301  00F2D2                     	if	1	;There is more than 1 active tblptr byte
  3302  00F2D2  0EFF               	movlw	high _CMD10
  3303  00F2D4  6EF7               	movwf	tblptrh,c
  3304  00F2D6                     	endif
  3305  00F2D6                     	if	0	;There are less than 3 active tblptr bytes
  3306  00F2D6                     	endif
  3307  00F2D6  0008               	tblrd		*
  3308  00F2D8  50F5               	movf	tablat,w,c
  3309  00F2DA  EC6D  F06A         	call	_SD_Command
  3310                           
  3311                           ;SD_PIC.c: 648: LATEbits.LATE2 = 0;
  3312  00F2DE  948D               	bcf	3981,2,c	;volatile
  3313  00F2E0                     
  3314                           ;SD_PIC.c: 652: response = spiReceive();
  3315  00F2E0  ECC4  F065         	call	_spiReceive	;wreg free
  3316  00F2E4  6E5F               	movwf	initSD@response,c
  3317                           
  3318                           ;SD_PIC.c: 653: }while(response != START_BLOCK);
  3319  00F2E6  0E70               	movlw	low _START_BLOCK
  3320  00F2E8  6EF6               	movwf	tblptrl,c
  3321  00F2EA                     	if	1	;There is more than 1 active tblptr byte
  3322  00F2EA  0EFF               	movlw	high _START_BLOCK
  3323  00F2EC  6EF7               	movwf	tblptrh,c
  3324  00F2EE                     	endif
  3325  00F2EE                     	if	0	;There are less than 3 active tblptr bytes
  3326  00F2EE                     	endif
  3327  00F2EE  0008               	tblrd		*
  3328  00F2F0  50F5               	movf	tablat,w,c
  3329  00F2F2  625F               	cpfseq	initSD@response,c
  3330  00F2F4  D7F5               	goto	l289
  3331                           
  3332                           ;SD_PIC.c: 655: for(i = 0; i < 16; i++){
  3333  00F2F6  0E00               	movlw	0
  3334  00F2F8  6E60               	movwf	initSD@i,c
  3335  00F2FA                     l4995:
  3336  00F2FA  0E0F               	movlw	15
  3337  00F2FC  6460               	cpfsgt	initSD@i,c
  3338  00F2FE  D001               	goto	l291
  3339  00F300  D00D               	goto	u4520
  3340  00F302                     l291:
  3341                           
  3342                           ;SD_PIC.c: 656: arr_response[i] = spiReceive();
  3343  00F302  5060               	movf	initSD@i,w,c
  3344  00F304  0D01               	mullw	1
  3345  00F306  0E4B               	movlw	low initSD@arr_response
  3346  00F308  24F3               	addwf	prodl,w,c
  3347  00F30A  6ED9               	movwf	fsr2l,c
  3348  00F30C  0E00               	movlw	high initSD@arr_response
  3349  00F30E  20F4               	addwfc	prodh,w,c
  3350  00F310  6EDA               	movwf	fsr2h,c
  3351  00F312  ECC4  F065         	call	_spiReceive	;wreg free
  3352  00F316  6EDF               	movwf	indf2,c
  3353  00F318  2A60               	incf	initSD@i,f,c
  3354  00F31A  D7EF               	goto	l4995
  3355  00F31C                     u4520:
  3356                           
  3357                           ;SD_PIC.c: 657: }
  3358                           ;SD_PIC.c: 658: spiReceive();
  3359  00F31C  ECC4  F065         	call	_spiReceive	;wreg free
  3360                           
  3361                           ;SD_PIC.c: 659: spiReceive();
  3362  00F320  ECC4  F065         	call	_spiReceive	;wreg free
  3363                           
  3364                           ;SD_PIC.c: 660: LATEbits.LATE2 = 1;
  3365  00F324  848D               	bsf	3981,2,c	;volatile
  3366                           
  3367                           ;SD_PIC.c: 662: SDCard.MID = arr_response[0];
  3368  00F326  C04B  F082         	movff	initSD@arr_response,_SDCard+2
  3369                           
  3370                           ;SD_PIC.c: 663: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  3371  00F32A  504C               	movf	initSD@arr_response+1,w,c
  3372  00F32C  6E3A               	movwf	??_initSD& (0+255),c
  3373  00F32E  504D               	movf	initSD@arr_response+2,w,c
  3374  00F330  0100               	movlb	0	; () banked
  3375  00F332  6F83               	movwf	(_SDCard+3)& (0+255),b
  3376  00F334  C03A  F084         	movff	??_initSD,_SDCard+4
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;SD_PIC.c: 664: SDCard.PHMH = arr_response[3];
  3380  00F338  C04E  F089         	movff	initSD@arr_response+3,_SDCard+9
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;SD_PIC.c: 668: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  3384  00F33C  C04F  F03A         	movff	initSD@arr_response+4,??_initSD
  3385  00F340  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3386  00F342  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3387  00F344  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3388  00F346  C03A  F03D         	movff	??_initSD,??_initSD+3
  3389  00F34A  6A3C               	clrf	??_initSD+2,c
  3390  00F34C  6A3B               	clrf	??_initSD+1,c
  3391  00F34E  6A3A               	clrf	??_initSD,c
  3392  00F350  C03A  F085         	movff	??_initSD,_SDCard+5
  3393  00F354  C03B  F086         	movff	??_initSD+1,_SDCard+6
  3394  00F358  C03C  F087         	movff	??_initSD+2,_SDCard+7
  3395  00F35C  C03D  F088         	movff	??_initSD+3,_SDCard+8
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;SD_PIC.c: 669: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  3399  00F360  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  3400  00F364  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3401  00F366  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3402  00F368  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3403  00F36A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3404  00F36E  C03A  F03C         	movff	??_initSD,??_initSD+2
  3405  00F372  6A3B               	clrf	??_initSD+1,c
  3406  00F374  6A3A               	clrf	??_initSD,c
  3407  00F376  503A               	movf	??_initSD,w,c
  3408  00F378  0100               	movlb	0	; () banked
  3409  00F37A  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3410  00F37C  503B               	movf	??_initSD+1,w,c
  3411  00F37E  0100               	movlb	0	; () banked
  3412  00F380  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3413  00F382  503C               	movf	??_initSD+2,w,c
  3414  00F384  0100               	movlb	0	; () banked
  3415  00F386  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3416  00F388  503D               	movf	??_initSD+3,w,c
  3417  00F38A  0100               	movlb	0	; () banked
  3418  00F38C  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;SD_PIC.c: 670: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  3422  00F38E  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  3423  00F392  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3424  00F394  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3425  00F396  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3426  00F398  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  3427  00F39C  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  3428  00F3A0  C03A  F03B         	movff	??_initSD,??_initSD+1
  3429  00F3A4  6A3A               	clrf	??_initSD,c
  3430  00F3A6  503A               	movf	??_initSD,w,c
  3431  00F3A8  0100               	movlb	0	; () banked
  3432  00F3AA  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3433  00F3AC  503B               	movf	??_initSD+1,w,c
  3434  00F3AE  0100               	movlb	0	; () banked
  3435  00F3B0  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3436  00F3B2  503C               	movf	??_initSD+2,w,c
  3437  00F3B4  0100               	movlb	0	; () banked
  3438  00F3B6  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3439  00F3B8  503D               	movf	??_initSD+3,w,c
  3440  00F3BA  0100               	movlb	0	; () banked
  3441  00F3BC  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;SD_PIC.c: 671: SDCard.PHML |= (unsigned long)arr_response[7];
  3445  00F3BE  5052               	movf	initSD@arr_response+7,w,c
  3446  00F3C0  0100               	movlb	0	; () banked
  3447  00F3C2  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;SD_PIC.c: 673: SDCard.PRV = arr_response[8];
  3451  00F3C4  C053  F08A         	movff	initSD@arr_response+8,_SDCard+10
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;SD_PIC.c: 677: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  3455  00F3C8  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  3456  00F3CC  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3457  00F3CE  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3458  00F3D0  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3459  00F3D2  C03A  F03D         	movff	??_initSD,??_initSD+3
  3460  00F3D6  6A3C               	clrf	??_initSD+2,c
  3461  00F3D8  6A3B               	clrf	??_initSD+1,c
  3462  00F3DA  6A3A               	clrf	??_initSD,c
  3463  00F3DC  C03A  F08B         	movff	??_initSD,_SDCard+11
  3464  00F3E0  C03B  F08C         	movff	??_initSD+1,_SDCard+12
  3465  00F3E4  C03C  F08D         	movff	??_initSD+2,_SDCard+13
  3466  00F3E8  C03D  F08E         	movff	??_initSD+3,_SDCard+14
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;SD_PIC.c: 678: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  3470  00F3EC  C055  F03A         	movff	initSD@arr_response+10,??_initSD
  3471  00F3F0  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3472  00F3F2  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3473  00F3F4  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3474  00F3F6  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3475  00F3FA  C03A  F03C         	movff	??_initSD,??_initSD+2
  3476  00F3FE  6A3B               	clrf	??_initSD+1,c
  3477  00F400  6A3A               	clrf	??_initSD,c
  3478  00F402  503A               	movf	??_initSD,w,c
  3479  00F404  0100               	movlb	0	; () banked
  3480  00F406  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3481  00F408  503B               	movf	??_initSD+1,w,c
  3482  00F40A  0100               	movlb	0	; () banked
  3483  00F40C  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3484  00F40E  503C               	movf	??_initSD+2,w,c
  3485  00F410  0100               	movlb	0	; () banked
  3486  00F412  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3487  00F414  503D               	movf	??_initSD+3,w,c
  3488  00F416  0100               	movlb	0	; () banked
  3489  00F418  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;SD_PIC.c: 679: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  3493  00F41A  C056  F03A         	movff	initSD@arr_response+11,??_initSD
  3494  00F41E  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3495  00F420  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3496  00F422  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3497  00F424  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  3498  00F428  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  3499  00F42C  C03A  F03B         	movff	??_initSD,??_initSD+1
  3500  00F430  6A3A               	clrf	??_initSD,c
  3501  00F432  503A               	movf	??_initSD,w,c
  3502  00F434  0100               	movlb	0	; () banked
  3503  00F436  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3504  00F438  503B               	movf	??_initSD+1,w,c
  3505  00F43A  0100               	movlb	0	; () banked
  3506  00F43C  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3507  00F43E  503C               	movf	??_initSD+2,w,c
  3508  00F440  0100               	movlb	0	; () banked
  3509  00F442  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3510  00F444  503D               	movf	??_initSD+3,w,c
  3511  00F446  0100               	movlb	0	; () banked
  3512  00F448  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;SD_PIC.c: 680: SDCard.PSN |= (unsigned long)arr_response[12];
  3516  00F44A  5057               	movf	initSD@arr_response+12,w,c
  3517  00F44C  0100               	movlb	0	; () banked
  3518  00F44E  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;SD_PIC.c: 682: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  3522                           ;SD_PIC.c: 683: (arr_response[14]);
  3523  00F450  5058               	movf	initSD@arr_response+13,w,c
  3524  00F452  0B0F               	andlw	15
  3525  00F454  6E3A               	movwf	??_initSD& (0+255),c
  3526  00F456  5059               	movf	initSD@arr_response+14,w,c
  3527  00F458  0100               	movlb	0	; () banked
  3528  00F45A  6F8F               	movwf	(_SDCard+15)& (0+255),b
  3529  00F45C  C03A  F090         	movff	??_initSD,_SDCard+16
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;SD_PIC.c: 684: SDCard.CRC = arr_response[15] & 0xFE;
  3533  00F460  505A               	movf	initSD@arr_response+15,w,c
  3534  00F462  0BFE               	andlw	254
  3535  00F464  0100               	movlb	0	; () banked
  3536  00F466  6F91               	movwf	(_SDCard+17)& (0+255),b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;SD_PIC.c: 687: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  3540  00F468  848D               	bsf	3981,2,c	;volatile
  3541                           
  3542                           ; BSR set to: 0
  3543  00F46A  9AC6               	bcf	4038,5,c	;volatile
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;SD_PIC.c: 688: SSPCON1 = 0b00010000;
  3547  00F46C  0E10               	movlw	16
  3548  00F46E  6EC6               	movwf	4038,c	;volatile
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;SD_PIC.c: 689: OSCCON = last_OSCCON;
  3552  00F470  C045  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;SD_PIC.c: 690: OSCTUNE = last_OSCTUNE;
  3556  00F474  C046  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  3557                           
  3558                           ;SD_PIC.c: 693: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  3559  00F478  D004               	goto	l293
  3560  00F47A                     
  3561                           ; BSR set to: 0
  3562  00F47A  0E42               	movlw	66
  3563  00F47C                     u5947:
  3564  00F47C  2EE8               	decfsz	wreg,f,c
  3565  00F47E  D7FE               	bra	u5947
  3566  00F480  D000               	nop2	
  3567  00F482                     l293:
  3568  00F482  A4D3               	btfss	4051,2,c	;volatile
  3569  00F484  D7FA               	goto	l294
  3570                           
  3571                           ;SD_PIC.c: 696: SSPCON1bits.SSPEN = 1;
  3572  00F486  8AC6               	bsf	4038,5,c	;volatile
  3573                           
  3574                           ;SD_PIC.c: 699: SDCard.write.MBW_flag_first = 1;
  3575  00F488  0E01               	movlw	1
  3576  00F48A  0100               	movlb	0	; () banked
  3577  00F48C  6FA4               	movwf	(_SDCard+36)& (0+255),b
  3578                           
  3579                           ;SD_PIC.c: 700: SDCard.write.MBW_startBlock = 0;
  3580  00F48E  0E00               	movlw	0
  3581  00F490  0100               	movlb	0	; () banked
  3582  00F492  6FA0               	movwf	(_SDCard+32)& (0+255),b
  3583  00F494  0E00               	movlw	0
  3584  00F496  6FA1               	movwf	(_SDCard+33)& (0+255),b
  3585  00F498  0E00               	movlw	0
  3586  00F49A  6FA2               	movwf	(_SDCard+34)& (0+255),b
  3587  00F49C  0E00               	movlw	0
  3588  00F49E  6FA3               	movwf	(_SDCard+35)& (0+255),b
  3589                           
  3590                           ;SD_PIC.c: 701: SDCard.write.lastBlockWritten = 0;
  3591  00F4A0  0E00               	movlw	0
  3592  00F4A2  0100               	movlb	0	; () banked
  3593  00F4A4  6F9C               	movwf	(_SDCard+28)& (0+255),b
  3594  00F4A6  0E00               	movlw	0
  3595  00F4A8  6F9D               	movwf	(_SDCard+29)& (0+255),b
  3596  00F4AA  0E00               	movlw	0
  3597  00F4AC  6F9E               	movwf	(_SDCard+30)& (0+255),b
  3598  00F4AE  0E00               	movlw	0
  3599  00F4B0  6F9F               	movwf	(_SDCard+31)& (0+255),b
  3600                           
  3601                           ;SD_PIC.c: 702: SDCard.read.MBR_flag_first = 1;
  3602  00F4B2  0E01               	movlw	1
  3603  00F4B4  0100               	movlb	0	; () banked
  3604  00F4B6  6FAD               	movwf	(_SDCard+45)& (0+255),b
  3605                           
  3606                           ;SD_PIC.c: 703: SDCard.read.MBR_startBlock = 0;
  3607  00F4B8  0E00               	movlw	0
  3608  00F4BA  0100               	movlb	0	; () banked
  3609  00F4BC  6FA9               	movwf	(_SDCard+41)& (0+255),b
  3610  00F4BE  0E00               	movlw	0
  3611  00F4C0  6FAA               	movwf	(_SDCard+42)& (0+255),b
  3612  00F4C2  0E00               	movlw	0
  3613  00F4C4  6FAB               	movwf	(_SDCard+43)& (0+255),b
  3614  00F4C6  0E00               	movlw	0
  3615  00F4C8  6FAC               	movwf	(_SDCard+44)& (0+255),b
  3616                           
  3617                           ;SD_PIC.c: 704: SDCard.read.lastBlockRead = 0;
  3618  00F4CA  0E00               	movlw	0
  3619  00F4CC  0100               	movlb	0	; () banked
  3620  00F4CE  6FA5               	movwf	(_SDCard+37)& (0+255),b
  3621  00F4D0  0E00               	movlw	0
  3622  00F4D2  6FA6               	movwf	(_SDCard+38)& (0+255),b
  3623  00F4D4  0E00               	movlw	0
  3624  00F4D6  6FA7               	movwf	(_SDCard+39)& (0+255),b
  3625  00F4D8  0E00               	movlw	0
  3626  00F4DA  6FA8               	movwf	(_SDCard+40)& (0+255),b
  3627                           
  3628                           ;SD_PIC.c: 707: SDCard.init = 1;
  3629  00F4DC  0E01               	movlw	1
  3630  00F4DE  0100               	movlb	0	; () banked
  3631  00F4E0  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3632  00F4E2  0012               	return		;funcret
  3633  00F4E4                     __end_of_initSD:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           plusw1	equ	0xFE3
  3646                           fsr1l	equ	0xFE1
  3647                           indf2	equ	0xFDF
  3648                           plusw2	equ	0xFDB
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function ___lwtoft *****************
  3654 ;; Defined at:
  3655 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  c               2    8[COMRAM] unsigned int 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  3    8[COMRAM] float 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:        3 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    1
  3676 ;; This function calls:
  3677 ;;		___ftpack
  3678 ;; This function is called by:
  3679 ;;		_initSD
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text5
  3684  00CC8A                     __ptext5:
  3685                           	opt stack 0
  3686  00CC8A                     ___lwtoft:
  3687                           	opt stack 27
  3688                           
  3689                           ;incstack = 0
  3690  00CC8A  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3691  00CC8E  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3692  00CC92  6A03               	clrf	___ftpack@arg+2,c
  3693  00CC94  0E8E               	movlw	142
  3694  00CC96  6E04               	movwf	___ftpack@exp,c
  3695  00CC98  0E00               	movlw	0
  3696  00CC9A  6E05               	movwf	___ftpack@sign,c
  3697  00CC9C  EC02  F06B         	call	___ftpack	;wreg free
  3698  00CCA0  C001  F009         	movff	?___ftpack,?___lwtoft
  3699  00CCA4  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3700  00CCA8  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3701  00CCAC  0012               	return	
  3702  00CCAE                     __end_of___lwtoft:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           intcon	equ	0xFF2
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           plusw1	equ	0xFE3
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           plusw2	equ	0xFDB
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8
  3721                           
  3722 ;; *************** function ___ftdiv *****************
  3723 ;; Defined at:
  3724 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  f1              3   11[COMRAM] float 
  3727 ;;  f2              3   14[COMRAM] float 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  f3              3   21[COMRAM] float 
  3730 ;;  sign            1   25[COMRAM] unsigned char 
  3731 ;;  exp             1   24[COMRAM] unsigned char 
  3732 ;;  cntr            1   20[COMRAM] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  3   11[COMRAM] float 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3742 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:       15 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    1
  3749 ;; This function calls:
  3750 ;;		___ftpack
  3751 ;; This function is called by:
  3752 ;;		_initSD
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text6
  3757  00D77E                     __ptext6:
  3758                           	opt stack 0
  3759  00D77E                     ___ftdiv:
  3760                           	opt stack 27
  3761                           
  3762                           ;incstack = 0
  3763  00D77E  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  3764  00D782  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  3765  00D784  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  3766  00D786  340D               	rlcf	___ftdiv@f1+1,w,c
  3767  00D788  3612               	rlcf	??___ftdiv& (0+255),f,c
  3768  00D78A  E301               	bnc	u3911
  3769  00D78C  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  3770  00D78E                     u3911:
  3771  00D78E  5012               	movf	??___ftdiv,w,c
  3772  00D790  6E19               	movwf	___ftdiv@exp,c
  3773  00D792  5019               	movf	___ftdiv@exp,w,c
  3774  00D794  A4D8               	btfss	status,2,c
  3775  00D796  D007               	goto	l1406
  3776  00D798  0E00               	movlw	0
  3777  00D79A  6E0C               	movwf	?___ftdiv,c
  3778  00D79C  0E00               	movlw	0
  3779  00D79E  6E0D               	movwf	?___ftdiv+1,c
  3780  00D7A0  0E00               	movlw	0
  3781  00D7A2  6E0E               	movwf	?___ftdiv+2,c
  3782  00D7A4  0012               	return	
  3783  00D7A6                     l1406:
  3784  00D7A6  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  3785  00D7AA  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  3786  00D7AC  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  3787  00D7AE  3410               	rlcf	___ftdiv@f2+1,w,c
  3788  00D7B0  3612               	rlcf	??___ftdiv& (0+255),f,c
  3789  00D7B2  E301               	bnc	u3931
  3790  00D7B4  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  3791  00D7B6                     u3931:
  3792  00D7B6  5012               	movf	??___ftdiv,w,c
  3793  00D7B8  6E1A               	movwf	___ftdiv@sign,c
  3794  00D7BA  501A               	movf	___ftdiv@sign,w,c
  3795  00D7BC  A4D8               	btfss	status,2,c
  3796  00D7BE  D007               	goto	l1408
  3797  00D7C0  0E00               	movlw	0
  3798  00D7C2  6E0C               	movwf	?___ftdiv,c
  3799  00D7C4  0E00               	movlw	0
  3800  00D7C6  6E0D               	movwf	?___ftdiv+1,c
  3801  00D7C8  0E00               	movlw	0
  3802  00D7CA  6E0E               	movwf	?___ftdiv+2,c
  3803  00D7CC  0012               	return	
  3804  00D7CE                     l1408:
  3805  00D7CE  0E00               	movlw	0
  3806  00D7D0  6E16               	movwf	___ftdiv@f3,c
  3807  00D7D2  0E00               	movlw	0
  3808  00D7D4  6E17               	movwf	___ftdiv@f3+1,c
  3809  00D7D6  0E00               	movlw	0
  3810  00D7D8  6E18               	movwf	___ftdiv@f3+2,c
  3811  00D7DA  501A               	movf	___ftdiv@sign,w,c
  3812  00D7DC  0F89               	addlw	137
  3813  00D7DE  5E19               	subwf	___ftdiv@exp,f,c
  3814  00D7E0  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  3815  00D7E4  5011               	movf	___ftdiv@f2+2,w,c
  3816  00D7E6  1A1A               	xorwf	___ftdiv@sign,f,c
  3817  00D7E8  0E80               	movlw	128
  3818  00D7EA  161A               	andwf	___ftdiv@sign,f,c
  3819  00D7EC  8E0D               	bsf	___ftdiv@f1+1,7,c
  3820  00D7EE  0EFF               	movlw	255
  3821  00D7F0  160C               	andwf	___ftdiv@f1,f,c
  3822  00D7F2  0EFF               	movlw	255
  3823  00D7F4  160D               	andwf	___ftdiv@f1+1,f,c
  3824  00D7F6  0E00               	movlw	0
  3825  00D7F8  160E               	andwf	___ftdiv@f1+2,f,c
  3826  00D7FA  8E10               	bsf	___ftdiv@f2+1,7,c
  3827  00D7FC  0EFF               	movlw	255
  3828  00D7FE  160F               	andwf	___ftdiv@f2,f,c
  3829  00D800  0EFF               	movlw	255
  3830  00D802  1610               	andwf	___ftdiv@f2+1,f,c
  3831  00D804  0E00               	movlw	0
  3832  00D806  1611               	andwf	___ftdiv@f2+2,f,c
  3833  00D808  0E18               	movlw	24
  3834  00D80A  6E15               	movwf	___ftdiv@cntr,c
  3835  00D80C  90D8               	bcf	status,0,c
  3836  00D80E  3616               	rlcf	___ftdiv@f3,f,c
  3837  00D810  3617               	rlcf	___ftdiv@f3+1,f,c
  3838  00D812  3618               	rlcf	___ftdiv@f3+2,f,c
  3839  00D814  500F               	movf	___ftdiv@f2,w,c
  3840  00D816  5C0C               	subwf	___ftdiv@f1,w,c
  3841  00D818  5010               	movf	___ftdiv@f2+1,w,c
  3842  00D81A  580D               	subwfb	___ftdiv@f1+1,w,c
  3843  00D81C  5011               	movf	___ftdiv@f2+2,w,c
  3844  00D81E  580E               	subwfb	___ftdiv@f1+2,w,c
  3845  00D820  A0D8               	btfss	status,0,c
  3846  00D822  D007               	goto	l1410
  3847  00D824  500F               	movf	___ftdiv@f2,w,c
  3848  00D826  5E0C               	subwf	___ftdiv@f1,f,c
  3849  00D828  5010               	movf	___ftdiv@f2+1,w,c
  3850  00D82A  5A0D               	subwfb	___ftdiv@f1+1,f,c
  3851  00D82C  5011               	movf	___ftdiv@f2+2,w,c
  3852  00D82E  5A0E               	subwfb	___ftdiv@f1+2,f,c
  3853  00D830  8016               	bsf	___ftdiv@f3,0,c
  3854  00D832                     l1410:
  3855  00D832  90D8               	bcf	status,0,c
  3856  00D834  360C               	rlcf	___ftdiv@f1,f,c
  3857  00D836  360D               	rlcf	___ftdiv@f1+1,f,c
  3858  00D838  360E               	rlcf	___ftdiv@f1+2,f,c
  3859  00D83A  2E15               	decfsz	___ftdiv@cntr,f,c
  3860  00D83C  D7E7               	goto	l1409
  3861  00D83E  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  3862  00D842  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3863  00D846  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3864  00D84A  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  3865  00D84E  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  3866  00D852  EC02  F06B         	call	___ftpack	;wreg free
  3867  00D856  C001  F00C         	movff	?___ftpack,?___ftdiv
  3868  00D85A  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  3869  00D85E  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  3870  00D862  0012               	return	
  3871  00D864                     __end_of___ftdiv:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postdec1	equ	0xFE5
  3883                           plusw1	equ	0xFE3
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           plusw2	equ	0xFDB
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _SD_ACMD *****************
  3892 ;; Defined at:
  3893 ;;		line 88 in file "SD_PIC.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  cmd             1    wreg     unsigned char 
  3896 ;;  arg             4   12[COMRAM] unsigned long 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  cmd             1   16[COMRAM] unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      unsigned char 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;Total ram usage:        5 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    3
  3915 ;; This function calls:
  3916 ;;		_SD_Command
  3917 ;; This function is called by:
  3918 ;;		_initSD
  3919 ;;		_SD_MBW_Start
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text7
  3924  00CD8C                     __ptext7:
  3925                           	opt stack 0
  3926  00CD8C                     _SD_ACMD:
  3927                           	opt stack 25
  3928                           
  3929                           ;incstack = 0
  3930                           ;SD_ACMD@cmd stored from wreg
  3931  00CD8C  6E11               	movwf	SD_ACMD@cmd,c
  3932                           
  3933                           ;SD_PIC.c: 99: SD_Command(CMD55, 0);
  3934  00CD8E  0E00               	movlw	0
  3935  00CD90  6E04               	movwf	SD_Command@arg,c
  3936  00CD92  0E00               	movlw	0
  3937  00CD94  6E05               	movwf	SD_Command@arg+1,c
  3938  00CD96  0E00               	movlw	0
  3939  00CD98  6E06               	movwf	SD_Command@arg+2,c
  3940  00CD9A  0E00               	movlw	0
  3941  00CD9C  6E07               	movwf	SD_Command@arg+3,c
  3942  00CD9E  0E78               	movlw	low _CMD55
  3943  00CDA0  6EF6               	movwf	tblptrl,c
  3944  00CDA2                     	if	1	;There is more than 1 active tblptr byte
  3945  00CDA2  0EFF               	movlw	high _CMD55
  3946  00CDA4  6EF7               	movwf	tblptrh,c
  3947  00CDA6                     	endif
  3948  00CDA6                     	if	0	;There are less than 3 active tblptr bytes
  3949  00CDA6                     	endif
  3950  00CDA6  0008               	tblrd		*
  3951  00CDA8  50F5               	movf	tablat,w,c
  3952  00CDAA  EC6D  F06A         	call	_SD_Command
  3953                           
  3954                           ;SD_PIC.c: 100: return SD_Command(cmd, arg);
  3955  00CDAE  C00D  F004         	movff	SD_ACMD@arg,SD_Command@arg
  3956  00CDB2  C00E  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  3957  00CDB6  C00F  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  3958  00CDBA  C010  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  3959  00CDBE  5011               	movf	SD_ACMD@cmd,w,c
  3960  00CDC0  EC6D  F06A         	call	_SD_Command
  3961  00CDC4  0012               	return	
  3962  00CDC6                     __end_of_SD_ACMD:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           postdec1	equ	0xFE5
  3974                           plusw1	equ	0xFE3
  3975                           fsr1l	equ	0xFE1
  3976                           indf2	equ	0xFDF
  3977                           plusw2	equ	0xFDB
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982 ;; *************** function _SD_Command *****************
  3983 ;; Defined at:
  3984 ;;		line 32 in file "SD_PIC.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  cmd             1    wreg     unsigned char 
  3987 ;;  arg             4    3[COMRAM] unsigned long 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  cmd             1    9[COMRAM] unsigned char 
  3990 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  3991 ;;		 -> SD_Command@arg(4), 
  3992 ;;  n               1   11[COMRAM] unsigned char 
  3993 ;;  response        1   10[COMRAM] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      unsigned char 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;Total ram usage:        9 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    2
  4010 ;; This function calls:
  4011 ;;		_spiReceive
  4012 ;;		_spiSend
  4013 ;; This function is called by:
  4014 ;;		_SD_ACMD
  4015 ;;		_initSD
  4016 ;;		_SD_SingleBlockWrite
  4017 ;;		_SD_MBW_Start
  4018 ;;		_SD_MBW_Send
  4019 ;;		_SD_SingleBlockRead
  4020 ;;		_SD_MBR_Start
  4021 ;;		_SD_MBR_Stop
  4022 ;;		_SD_EraseBlocks
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text8
  4027  00D4DA                     __ptext8:
  4028                           	opt stack 0
  4029  00D4DA                     _SD_Command:
  4030                           	opt stack 26
  4031                           
  4032                           ;incstack = 0
  4033                           ;SD_Command@cmd stored from wreg
  4034  00D4DA  6E0A               	movwf	SD_Command@cmd,c
  4035                           
  4036                           ;SD_PIC.c: 42: unsigned char response;
  4037                           ;SD_PIC.c: 43: unsigned char n = 0;
  4038  00D4DC  0E00               	movlw	0
  4039  00D4DE  6E0C               	movwf	SD_Command@n,c
  4040                           
  4041                           ;SD_PIC.c: 46: LATEbits.LATE2 = 0;
  4042  00D4E0  948D               	bcf	3981,2,c	;volatile
  4043  00D4E2  ECC4  F065         	call	_spiReceive	;wreg free
  4044  00D4E6  0AFF               	xorlw	255
  4045  00D4E8  A4D8               	btfss	status,2,c
  4046  00D4EA  D7FB               	goto	l134
  4047                           
  4048                           ;SD_PIC.c: 54: spiSend(cmd | 0x40U);
  4049  00D4EC  500A               	movf	SD_Command@cmd,w,c
  4050  00D4EE  0940               	iorlw	64
  4051  00D4F0  ECC8  F065         	call	_spiSend
  4052                           
  4053                           ;SD_PIC.c: 58: unsigned char* ptr = (unsigned char*)&arg + sizeof(unsigned long) - 1;
  4054  00D4F4  0E07               	movlw	low (SD_Command@arg+3)
  4055  00D4F6  6E08               	movwf	SD_Command@ptr,c
  4056  00D4F8  0E00               	movlw	high (SD_Command@arg+3)
  4057  00D4FA  6E09               	movwf	SD_Command@ptr+1,c
  4058                           
  4059                           ;SD_PIC.c: 59: while(n < 4){
  4060  00D4FC  D00B               	goto	l136
  4061  00D4FE                     
  4062                           ;SD_PIC.c: 60: spiSend(*ptr);
  4063  00D4FE  C008  FFD9         	movff	SD_Command@ptr,fsr2l
  4064  00D502  C009  FFDA         	movff	SD_Command@ptr+1,fsr2h
  4065  00D506  50DF               	movf	indf2,w,c
  4066  00D508  ECC8  F065         	call	_spiSend
  4067                           
  4068                           ;SD_PIC.c: 61: ptr--;
  4069  00D50C  0608               	decf	SD_Command@ptr,f,c
  4070  00D50E  A0D8               	btfss	status,0,c
  4071  00D510  0609               	decf	SD_Command@ptr+1,f,c
  4072                           
  4073                           ;SD_PIC.c: 62: n++;
  4074  00D512  2A0C               	incf	SD_Command@n,f,c
  4075  00D514                     l136:
  4076  00D514  0E03               	movlw	3
  4077  00D516  640C               	cpfsgt	SD_Command@n,c
  4078  00D518  D7F2               	goto	l137
  4079                           
  4080                           ;SD_PIC.c: 63: }
  4081                           ;SD_PIC.c: 68: if(cmd == CMD8){
  4082  00D51A  0E86               	movlw	low _CMD8
  4083  00D51C  6EF6               	movwf	tblptrl,c
  4084  00D51E                     	if	1	;There is more than 1 active tblptr byte
  4085  00D51E  0EFF               	movlw	high _CMD8
  4086  00D520  6EF7               	movwf	tblptrh,c
  4087  00D522                     	endif
  4088  00D522                     	if	0	;There are less than 3 active tblptr bytes
  4089  00D522                     	endif
  4090  00D522  0008               	tblrd		*
  4091  00D524  50F5               	movf	tablat,w,c
  4092  00D526  620A               	cpfseq	SD_Command@cmd,c
  4093  00D528  D009               	goto	l139
  4094                           
  4095                           ;SD_PIC.c: 69: spiSend(CMD8CRC);
  4096  00D52A  0E85               	movlw	low _CMD8CRC
  4097  00D52C  6EF6               	movwf	tblptrl,c
  4098  00D52E                     	if	1	;There is more than 1 active tblptr byte
  4099  00D52E  0EFF               	movlw	high _CMD8CRC
  4100  00D530  6EF7               	movwf	tblptrh,c
  4101  00D532                     	endif
  4102  00D532                     	if	0	;There are less than 3 active tblptr bytes
  4103  00D532                     	endif
  4104  00D532  0008               	tblrd		*
  4105  00D534  50F5               	movf	tablat,w,c
  4106  00D536  ECC8  F065         	call	_spiSend
  4107                           
  4108                           ;SD_PIC.c: 70: }
  4109  00D53A  D008               	goto	l140
  4110  00D53C                     l139:
  4111                           
  4112                           ;SD_PIC.c: 71: else{
  4113                           ;SD_PIC.c: 72: spiSend(CMD0CRC);
  4114  00D53C  0E88               	movlw	low _CMD0CRC
  4115  00D53E  6EF6               	movwf	tblptrl,c
  4116  00D540                     	if	1	;There is more than 1 active tblptr byte
  4117  00D540  0EFF               	movlw	high _CMD0CRC
  4118  00D542  6EF7               	movwf	tblptrh,c
  4119  00D544                     	endif
  4120  00D544                     	if	0	;There are less than 3 active tblptr bytes
  4121  00D544                     	endif
  4122  00D544  0008               	tblrd		*
  4123  00D546  50F5               	movf	tablat,w,c
  4124  00D548  ECC8  F065         	call	_spiSend
  4125  00D54C                     l140:
  4126                           
  4127                           ;SD_PIC.c: 73: }
  4128                           ;SD_PIC.c: 76: n = 0;
  4129  00D54C  0E00               	movlw	0
  4130  00D54E  6E0C               	movwf	SD_Command@n,c
  4131  00D550                     
  4132                           ;SD_PIC.c: 78: response = spiReceive();
  4133  00D550  ECC4  F065         	call	_spiReceive	;wreg free
  4134  00D554  6E0B               	movwf	SD_Command@response,c
  4135                           
  4136                           ;SD_PIC.c: 79: n++;
  4137  00D556  2A0C               	incf	SD_Command@n,f,c
  4138                           
  4139                           ;SD_PIC.c: 80: }while((n < 8) && (response == 0xFF));
  4140  00D558  0E08               	movlw	8
  4141  00D55A  600C               	cpfslt	SD_Command@n,c
  4142  00D55C  D003               	goto	u3150
  4143  00D55E  280B               	incf	SD_Command@response,w,c
  4144  00D560  B4D8               	btfsc	status,2,c
  4145  00D562  D7F6               	goto	l141
  4146  00D564                     u3150:
  4147                           
  4148                           ;SD_PIC.c: 83: LATEbits.LATE2 = 1;
  4149  00D564  848D               	bsf	3981,2,c	;volatile
  4150                           
  4151                           ;SD_PIC.c: 85: return response;
  4152  00D566  500B               	movf	SD_Command@response,w,c
  4153  00D568  0012               	return	
  4154  00D56A                     __end_of_SD_Command:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           plusw1	equ	0xFE3
  4167                           fsr1l	equ	0xFE1
  4168                           indf2	equ	0xFDF
  4169                           plusw2	equ	0xFDB
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _spiReceive *****************
  4175 ;; Defined at:
  4176 ;;		line 44 in file "SPI_PIC.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      unsigned char 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;Total ram usage:        0 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    1
  4197 ;; This function calls:
  4198 ;;		_spiTransfer
  4199 ;; This function is called by:
  4200 ;;		_SD_Command
  4201 ;;		_initSD
  4202 ;;		_SD_SingleBlockWrite
  4203 ;;		_SD_MBW_Send
  4204 ;;		_SD_MBW_Stop
  4205 ;;		_SD_SingleBlockRead
  4206 ;;		_SD_MBR_Receive
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text9
  4211  00CB88                     __ptext9:
  4212                           	opt stack 0
  4213  00CB88                     _spiReceive:
  4214                           	opt stack 27
  4215                           
  4216                           ;SPI_PIC.c: 51: return spiTransfer(0xFF);
  4217                           
  4218                           ;incstack = 0
  4219  00CB88  0EFF               	movlw	255
  4220  00CB8A  EC21  F066         	call	_spiTransfer
  4221  00CB8E  0012               	return	
  4222  00CB90                     __end_of_spiReceive:
  4223                           	opt stack 0
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           plusw1	equ	0xFE3
  4235                           fsr1l	equ	0xFE1
  4236                           indf2	equ	0xFDF
  4237                           plusw2	equ	0xFDB
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _testRTCSet *****************
  4243 ;; Defined at:
  4244 ;;		line 168 in file "main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  i               1   21[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        1 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    2
  4265 ;; This function calls:
  4266 ;;		_I2C_Master_Init
  4267 ;;		_I2C_Master_Start
  4268 ;;		_I2C_Master_Stop
  4269 ;;		_I2C_Master_Write
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text10
  4276  00D014                     __ptext10:
  4277                           	opt stack 0
  4278  00D014                     _testRTCSet:
  4279                           	opt stack 28
  4280                           
  4281                           ;main.c: 177: I2C_Master_Init(100000);
  4282                           
  4283                           ;incstack = 0
  4284  00D014  0EA0               	movlw	160
  4285  00D016  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  4286  00D018  0E86               	movlw	134
  4287  00D01A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  4288  00D01C  0E01               	movlw	1
  4289  00D01E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  4290  00D020  0E00               	movlw	0
  4291  00D022  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  4292  00D024  ECAC  F067         	call	_I2C_Master_Init	;wreg free
  4293                           
  4294                           ;main.c: 178: I2C_Master_Start();
  4295  00D028  ECBC  F065         	call	_I2C_Master_Start	;wreg free
  4296                           
  4297                           ;main.c: 179: I2C_Master_Write(0b11010000);
  4298  00D02C  0E00               	movlw	0
  4299  00D02E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4300  00D030  0ED0               	movlw	208
  4301  00D032  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4302  00D034  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4303                           
  4304                           ;main.c: 180: I2C_Master_Write(0x00);
  4305  00D038  0E00               	movlw	0
  4306  00D03A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4307  00D03C  0E00               	movlw	0
  4308  00D03E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4309  00D040  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4310                           
  4311                           ;main.c: 183: for(unsigned char i = 0; i < 7; i++){
  4312  00D044  0E00               	movlw	0
  4313  00D046  6E16               	movwf	testRTCSet@i,c
  4314  00D048                     l5595:
  4315  00D048  0E06               	movlw	6
  4316  00D04A  6416               	cpfsgt	testRTCSet@i,c
  4317  00D04C  D001               	goto	l764
  4318  00D04E  D010               	goto	u5250
  4319  00D050                     l764:
  4320                           
  4321                           ;main.c: 184: I2C_Master_Write(happynewyear[i]);
  4322  00D050  5016               	movf	testRTCSet@i,w,c
  4323  00D052  0D01               	mullw	1
  4324  00D054  0EF5               	movlw	low _happynewyear
  4325  00D056  24F3               	addwf	prodl,w,c
  4326  00D058  6EF6               	movwf	tblptrl,c
  4327  00D05A  0EFE               	movlw	high _happynewyear
  4328  00D05C  20F4               	addwfc	prodh,w,c
  4329  00D05E  6EF7               	movwf	tblptrh,c
  4330  00D060                     	if	0	;There are less than 3 active tblptr bytes
  4331  00D060                     	endif
  4332  00D060  0008               	tblrd		*
  4333  00D062  50F5               	movf	tablat,w,c
  4334  00D064  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4335  00D066  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  4336  00D068  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4337  00D06C  2A16               	incf	testRTCSet@i,f,c
  4338  00D06E  D7EC               	goto	l5595
  4339  00D070                     u5250:
  4340                           
  4341                           ;main.c: 185: }
  4342                           ;main.c: 187: I2C_Master_Stop();
  4343  00D070  ECC0  F065         	call	_I2C_Master_Stop	;wreg free
  4344  00D074  0012               	return		;funcret
  4345  00D076                     __end_of_testRTCSet:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           postinc0	equ	0xFEE
  4355                           wreg	equ	0xFE8
  4356                           postdec1	equ	0xFE5
  4357                           plusw1	equ	0xFE3
  4358                           fsr1l	equ	0xFE1
  4359                           indf2	equ	0xFDF
  4360                           plusw2	equ	0xFDB
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _testRTCGet *****************
  4366 ;; Defined at:
  4367 ;;		line 190 in file "main.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  i               2  104[COMRAM] int 
  4372 ;;  i               1  106[COMRAM] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;Total ram usage:        4 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    4
  4389 ;; This function calls:
  4390 ;;		_I2C_Master_Init
  4391 ;;		_I2C_Master_Read
  4392 ;;		_I2C_Master_Start
  4393 ;;		_I2C_Master_Stop
  4394 ;;		_I2C_Master_Write
  4395 ;;		_lcdInst
  4396 ;;		_printf
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text11
  4403  00DB60                     __ptext11:
  4404                           	opt stack 0
  4405  00DB60                     _testRTCGet:
  4406                           	opt stack 26
  4407                           
  4408                           ;main.c: 201: I2C_Master_Init(100000);
  4409                           
  4410                           ;incstack = 0
  4411  00DB60  0EA0               	movlw	160
  4412  00DB62  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  4413  00DB64  0E86               	movlw	134
  4414  00DB66  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  4415  00DB68  0E01               	movlw	1
  4416  00DB6A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  4417  00DB6C  0E00               	movlw	0
  4418  00DB6E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  4419  00DB70  ECAC  F067         	call	_I2C_Master_Init	;wreg free
  4420  00DB74                     l769:
  4421                           
  4422                           ;main.c: 203: I2C_Master_Start();
  4423  00DB74  ECBC  F065         	call	_I2C_Master_Start	;wreg free
  4424                           
  4425                           ;main.c: 204: I2C_Master_Write(0b11010000);
  4426  00DB78  0E00               	movlw	0
  4427  00DB7A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4428  00DB7C  0ED0               	movlw	208
  4429  00DB7E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4430  00DB80  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4431                           
  4432                           ;main.c: 205: I2C_Master_Write(0x00);
  4433  00DB84  0E00               	movlw	0
  4434  00DB86  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4435  00DB88  0E00               	movlw	0
  4436  00DB8A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4437  00DB8C  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4438                           
  4439                           ;main.c: 206: I2C_Master_Stop();
  4440  00DB90  ECC0  F065         	call	_I2C_Master_Stop	;wreg free
  4441                           
  4442                           ;main.c: 209: I2C_Master_Start();
  4443  00DB94  ECBC  F065         	call	_I2C_Master_Start	;wreg free
  4444                           
  4445                           ;main.c: 210: I2C_Master_Write(0b11010001);
  4446  00DB98  0E00               	movlw	0
  4447  00DB9A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4448  00DB9C  0ED1               	movlw	209
  4449  00DB9E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4450  00DBA0  ECCD  F065         	call	_I2C_Master_Write	;wreg free
  4451                           
  4452                           ;main.c: 211: for(unsigned char i = 0; i < 6; i++){
  4453  00DBA4  0E00               	movlw	0
  4454  00DBA6  6E6B               	movwf	testRTCGet@i,c
  4455  00DBA8                     l5611:
  4456  00DBA8  0E05               	movlw	5
  4457  00DBAA  646B               	cpfsgt	testRTCGet@i,c
  4458  00DBAC  D001               	goto	l770
  4459  00DBAE  D00E               	goto	u5270
  4460  00DBB0                     l770:
  4461                           
  4462                           ;main.c: 212: time[i] = I2C_Master_Read(0);
  4463  00DBB0  506B               	movf	testRTCGet@i,w,c
  4464  00DBB2  0D01               	mullw	1
  4465  00DBB4  0E6F               	movlw	low _time
  4466  00DBB6  24F3               	addwf	prodl,w,c
  4467  00DBB8  6ED9               	movwf	fsr2l,c
  4468  00DBBA  0E00               	movlw	high _time
  4469  00DBBC  20F4               	addwfc	prodh,w,c
  4470  00DBBE  6EDA               	movwf	fsr2h,c
  4471  00DBC0  0E00               	movlw	0
  4472  00DBC2  EC33  F066         	call	_I2C_Master_Read
  4473  00DBC6  6EDF               	movwf	indf2,c
  4474  00DBC8  2A6B               	incf	testRTCGet@i,f,c
  4475  00DBCA  D7EE               	goto	l5611
  4476  00DBCC                     u5270:
  4477                           
  4478                           ;main.c: 213: }
  4479                           ;main.c: 214: time[6] = I2C_Master_Read(1);
  4480  00DBCC  0E01               	movlw	1
  4481  00DBCE  EC33  F066         	call	_I2C_Master_Read
  4482  00DBD2  6E75               	movwf	_time+6,c
  4483                           
  4484                           ;main.c: 215: I2C_Master_Stop();
  4485  00DBD4  ECC0  F065         	call	_I2C_Master_Stop	;wreg free
  4486                           
  4487                           ;main.c: 218: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4488  00DBD8  0E01               	movlw	1
  4489  00DBDA  ECEC  F065         	call	_lcdInst
  4490  00DBDE  0EC3               	movlw	195
  4491  00DBE0  6E68               	movwf	??_testRTCGet& (0+255),c
  4492  00DBE2  0ECD               	movlw	205
  4493  00DBE4                     u5957:
  4494  00DBE4  2EE8               	decfsz	wreg,f,c
  4495  00DBE6  D7FE               	bra	u5957
  4496  00DBE8  2E68               	decfsz	??_testRTCGet& (0+255),f,c
  4497  00DBEA  D7FC               	bra	u5957
  4498  00DBEC  F000               	nop	
  4499                           
  4500                           ;main.c: 219: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4501  00DBEE  0E80               	movlw	128
  4502  00DBF0  ECEC  F065         	call	_lcdInst
  4503  00DBF4  0E41               	movlw	65
  4504  00DBF6  6E68               	movwf	??_testRTCGet& (0+255),c
  4505  00DBF8  0EEE               	movlw	238
  4506  00DBFA                     u5967:
  4507  00DBFA  2EE8               	decfsz	wreg,f,c
  4508  00DBFC  D7FE               	bra	u5967
  4509  00DBFE  2E68               	decfsz	??_testRTCGet& (0+255),f,c
  4510  00DC00  D7FC               	bra	u5967
  4511  00DC02  D000               	nop2	
  4512                           
  4513                           ;main.c: 220: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  4514  00DC04  0EAC               	movlw	low STR_3
  4515  00DC06  6E40               	movwf	printf@f,c
  4516  00DC08  0EFF               	movlw	high STR_3
  4517  00DC0A  6E41               	movwf	printf@f+1,c
  4518  00DC0C  C075  F042         	movff	_time+6,?_printf+2
  4519  00DC10  6A43               	clrf	?_printf+3,c
  4520  00DC12  C074  F044         	movff	_time+5,?_printf+4
  4521  00DC16  6A45               	clrf	?_printf+5,c
  4522  00DC18  C073  F046         	movff	_time+4,?_printf+6
  4523  00DC1C  6A47               	clrf	?_printf+7,c
  4524  00DC1E  EC72  F07A         	call	_printf	;wreg free
  4525                           
  4526                           ;main.c: 221: lcdInst(0xC0);;
  4527  00DC22  0EC0               	movlw	192
  4528  00DC24  ECEC  F065         	call	_lcdInst
  4529                           
  4530                           ;main.c: 222: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4531  00DC28  0EBB               	movlw	low STR_4
  4532  00DC2A  6E40               	movwf	printf@f,c
  4533  00DC2C  0EFF               	movlw	high STR_4
  4534  00DC2E  6E41               	movwf	printf@f+1,c
  4535  00DC30  C071  F042         	movff	_time+2,?_printf+2
  4536  00DC34  6A43               	clrf	?_printf+3,c
  4537  00DC36  C070  F044         	movff	_time+1,?_printf+4
  4538  00DC3A  6A45               	clrf	?_printf+5,c
  4539  00DC3C  C06F  F046         	movff	_time,?_printf+6
  4540  00DC40  6A47               	clrf	?_printf+7,c
  4541  00DC42  EC72  F07A         	call	_printf	;wreg free
  4542                           
  4543                           ;main.c: 225: for(int i = 0; i < 100; i++){
  4544  00DC46  0E00               	movlw	0
  4545  00DC48  6E6A               	movwf	testRTCGet@i_1523+1,c
  4546  00DC4A  0E00               	movlw	0
  4547  00DC4C  6E69               	movwf	testRTCGet@i_1523,c
  4548  00DC4E  BE6A               	btfsc	testRTCGet@i_1523+1,7,c
  4549  00DC50  D006               	goto	l772
  4550  00DC52  506A               	movf	testRTCGet@i_1523+1,w,c
  4551  00DC54  E18F               	bnz	l769
  4552  00DC56  0E64               	movlw	100
  4553  00DC58  5C69               	subwf	testRTCGet@i_1523,w,c
  4554  00DC5A  B0D8               	btfsc	status,0,c
  4555  00DC5C  D78B               	goto	l769
  4556  00DC5E                     l772:
  4557                           
  4558                           ;main.c: 226: _delay((unsigned long)((10)*(40000000/4000.0)));
  4559  00DC5E  0E82               	movlw	130
  4560  00DC60  6E68               	movwf	??_testRTCGet& (0+255),c
  4561  00DC62  0EDE               	movlw	222
  4562  00DC64                     u5977:
  4563  00DC64  2EE8               	decfsz	wreg,f,c
  4564  00DC66  D7FE               	bra	u5977
  4565  00DC68  2E68               	decfsz	??_testRTCGet& (0+255),f,c
  4566  00DC6A  D7FC               	bra	u5977
  4567                           
  4568                           ;main.c: 227: if(PORTBbits.RB1 == 1){
  4569  00DC6C  A281               	btfss	3969,1,c	;volatile
  4570  00DC6E  D003               	goto	l774
  4571  00DC70                     u5290:
  4572                           
  4573                           ;main.c: 228: while(PORTBbits.RB1 == 1){ continue; }
  4574  00DC70  A281               	btfss	3969,1,c	;volatile
  4575  00DC72  0012               	return	
  4576  00DC74  D7FD               	goto	u5290
  4577  00DC76                     l774:
  4578  00DC76  4A69               	infsnz	testRTCGet@i_1523,f,c
  4579  00DC78  2A6A               	incf	testRTCGet@i_1523+1,f,c
  4580  00DC7A  BE6A               	btfsc	testRTCGet@i_1523+1,7,c
  4581  00DC7C  D7F0               	goto	l772
  4582  00DC7E  506A               	movf	testRTCGet@i_1523+1,w,c
  4583  00DC80  E101               	bnz	u5310
  4584  00DC82  D7E9               	goto	L3
  4585  00DC84                     u5310:
  4586  00DC84  D777               	goto	l769
  4587  00DC86                     __end_of_testRTCGet:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           postdec1	equ	0xFE5
  4599                           plusw1	equ	0xFE3
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           plusw2	equ	0xFDB
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _I2C_Master_Write *****************
  4608 ;; Defined at:
  4609 ;;		line 108 in file "I2C.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;Total ram usage:        2 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    1
  4630 ;; This function calls:
  4631 ;;		_I2C_Master_Wait
  4632 ;; This function is called by:
  4633 ;;		_testRTCSet
  4634 ;;		_testRTCGet
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text12
  4639  00CB9A                     __ptext12:
  4640                           	opt stack 0
  4641  00CB9A                     _I2C_Master_Write:
  4642                           	opt stack 28
  4643                           
  4644                           ;I2C.c: 116: I2C_Master_Wait();
  4645                           
  4646                           ;incstack = 0
  4647  00CB9A  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4648                           
  4649                           ;I2C.c: 117: SSPBUF = byteToWrite;
  4650  00CB9E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4651  00CBA2  0012               	return		;funcret
  4652  00CBA4                     __end_of_I2C_Master_Write:
  4653                           	opt stack 0
  4654                           tblptru	equ	0xFF8
  4655                           tblptrh	equ	0xFF7
  4656                           tblptrl	equ	0xFF6
  4657                           tablat	equ	0xFF5
  4658                           prodh	equ	0xFF4
  4659                           prodl	equ	0xFF3
  4660                           intcon	equ	0xFF2
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           plusw1	equ	0xFE3
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           plusw2	equ	0xFDB
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _I2C_Master_Stop *****************
  4673 ;; Defined at:
  4674 ;;		line 95 in file "I2C.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      void 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;Total ram usage:        0 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    1
  4695 ;; This function calls:
  4696 ;;		_I2C_Master_Wait
  4697 ;; This function is called by:
  4698 ;;		_testRTCSet
  4699 ;;		_testRTCGet
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text13
  4704  00CB80                     __ptext13:
  4705                           	opt stack 0
  4706  00CB80                     _I2C_Master_Stop:
  4707                           	opt stack 28
  4708                           
  4709                           ;I2C.c: 104: I2C_Master_Wait();
  4710                           
  4711                           ;incstack = 0
  4712  00CB80  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4713                           
  4714                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  4715  00CB84  84C5               	bsf	4037,2,c	;volatile
  4716  00CB86  0012               	return		;funcret
  4717  00CB88                     __end_of_I2C_Master_Stop:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           postdec1	equ	0xFE5
  4729                           plusw1	equ	0xFE3
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           plusw2	equ	0xFDB
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _I2C_Master_Start *****************
  4738 ;; Defined at:
  4739 ;;		line 69 in file "I2C.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;Total ram usage:        0 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    1
  4760 ;; This function calls:
  4761 ;;		_I2C_Master_Wait
  4762 ;; This function is called by:
  4763 ;;		_testRTCSet
  4764 ;;		_testRTCGet
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text14
  4769  00CB78                     __ptext14:
  4770                           	opt stack 0
  4771  00CB78                     _I2C_Master_Start:
  4772                           	opt stack 28
  4773                           
  4774                           ;I2C.c: 78: I2C_Master_Wait();
  4775                           
  4776                           ;incstack = 0
  4777  00CB78  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4778                           
  4779                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  4780  00CB7C  80C5               	bsf	4037,0,c	;volatile
  4781  00CB7E  0012               	return		;funcret
  4782  00CB80                     __end_of_I2C_Master_Start:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           postinc0	equ	0xFEE
  4792                           wreg	equ	0xFE8
  4793                           postdec1	equ	0xFE5
  4794                           plusw1	equ	0xFE3
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           plusw2	equ	0xFDB
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function _I2C_Master_Read *****************
  4803 ;; Defined at:
  4804 ;;		line 120 in file "I2C.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  ackBit          1    wreg     unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  ackBit          1    1[COMRAM] unsigned char 
  4809 ;;  receivedByte    1    2[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      unsigned char 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;Total ram usage:        2 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    1
  4826 ;; This function calls:
  4827 ;;		_I2C_Master_Wait
  4828 ;; This function is called by:
  4829 ;;		_testRTCGet
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text15
  4834  00CC66                     __ptext15:
  4835                           	opt stack 0
  4836  00CC66                     _I2C_Master_Read:
  4837                           	opt stack 28
  4838                           
  4839                           ;incstack = 0
  4840                           ;I2C_Master_Read@ackBit stored from wreg
  4841  00CC66  6E02               	movwf	I2C_Master_Read@ackBit,c
  4842                           
  4843                           ;I2C.c: 130: unsigned char receivedByte;
  4844                           ;I2C.c: 132: I2C_Master_Wait();
  4845  00CC68  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4846                           
  4847                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  4848  00CC6C  86C5               	bsf	4037,3,c	;volatile
  4849                           
  4850                           ;I2C.c: 135: I2C_Master_Wait();
  4851  00CC6E  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4852                           
  4853                           ;I2C.c: 136: receivedByte = SSPBUF;
  4854  00CC72  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  4855                           
  4856                           ;I2C.c: 138: I2C_Master_Wait();
  4857  00CC76  ECD9  F065         	call	_I2C_Master_Wait	;wreg free
  4858                           
  4859                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  4860  00CC7A  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  4861  00CC7C  D002               	bra	u1195
  4862  00CC7E  9AC5               	bcf	4037,5,c	;volatile
  4863  00CC80  D001               	bra	u1196
  4864  00CC82                     u1195:
  4865  00CC82  8AC5               	bsf	4037,5,c	;volatile
  4866  00CC84                     u1196:
  4867                           
  4868                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  4869  00CC84  88C5               	bsf	4037,4,c	;volatile
  4870                           
  4871                           ;I2C.c: 142: return receivedByte;
  4872  00CC86  5003               	movf	I2C_Master_Read@receivedByte,w,c
  4873  00CC88  0012               	return	
  4874  00CC8A                     __end_of_I2C_Master_Read:
  4875                           	opt stack 0
  4876                           tblptru	equ	0xFF8
  4877                           tblptrh	equ	0xFF7
  4878                           tblptrl	equ	0xFF6
  4879                           tablat	equ	0xFF5
  4880                           prodh	equ	0xFF4
  4881                           prodl	equ	0xFF3
  4882                           intcon	equ	0xFF2
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           plusw1	equ	0xFE3
  4887                           fsr1l	equ	0xFE1
  4888                           indf2	equ	0xFDF
  4889                           plusw2	equ	0xFDB
  4890                           fsr2h	equ	0xFDA
  4891                           fsr2l	equ	0xFD9
  4892                           status	equ	0xFD8
  4893                           
  4894 ;; *************** function _I2C_Master_Wait *****************
  4895 ;; Defined at:
  4896 ;;		line 51 in file "I2C.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;		None
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      void 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;Total ram usage:        1 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		_I2C_Master_Start
  4920 ;;		_I2C_Master_Stop
  4921 ;;		_I2C_Master_Write
  4922 ;;		_I2C_Master_Read
  4923 ;;		_I2C_Master_RepeatedStart
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text16
  4928  00CBB2                     __ptext16:
  4929                           	opt stack 0
  4930  00CBB2                     _I2C_Master_Wait:
  4931                           	opt stack 28
  4932                           
  4933                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4934                           
  4935                           ;incstack = 0
  4936  00CBB2  B4C7               	btfsc	4039,2,c	;volatile
  4937  00CBB4  D7FE               	goto	_I2C_Master_Wait
  4938  00CBB6  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4939  00CBBA  0E1F               	movlw	31
  4940  00CBBC  1601               	andwf	??_I2C_Master_Wait,f,c
  4941  00CBBE  B4D8               	btfsc	status,2,c
  4942  00CBC0  0012               	return	
  4943  00CBC2  D7F7               	goto	_I2C_Master_Wait
  4944  00CBC4                     __end_of_I2C_Master_Wait:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           plusw1	equ	0xFE3
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           plusw2	equ	0xFDB
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _I2C_Master_Init *****************
  4965 ;; Defined at:
  4966 ;;		line 14 in file "I2C.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;		None
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        8 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    1
  4987 ;; This function calls:
  4988 ;;		___lldiv
  4989 ;; This function is called by:
  4990 ;;		_testRTCSet
  4991 ;;		_testRTCGet
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text17
  4996  00CF58                     __ptext17:
  4997                           	opt stack 0
  4998  00CF58                     _I2C_Master_Init:
  4999                           	opt stack 28
  5000                           
  5001                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5002                           
  5003                           ;incstack = 0
  5004  00CF58  9AC6               	bcf	4038,5,c	;volatile
  5005                           
  5006                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5007  00CF5A  8694               	bsf	3988,3,c	;volatile
  5008                           
  5009                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5010  00CF5C  8894               	bsf	3988,4,c	;volatile
  5011                           
  5012                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5013  00CF5E  0E80               	movlw	128
  5014  00CF60  6EC7               	movwf	4039,c	;volatile
  5015                           
  5016                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5017  00CF62  0E28               	movlw	40
  5018  00CF64  6EC6               	movwf	4038,c	;volatile
  5019                           
  5020                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5021  00CF66  0E00               	movlw	0
  5022  00CF68  6EC5               	movwf	4037,c	;volatile
  5023                           
  5024                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5025  00CF6A  0E00               	movlw	0
  5026  00CF6C  6E01               	movwf	___lldiv@dividend,c
  5027  00CF6E  0E5A               	movlw	90
  5028  00CF70  6E02               	movwf	___lldiv@dividend+1,c
  5029  00CF72  0E62               	movlw	98
  5030  00CF74  6E03               	movwf	___lldiv@dividend+2,c
  5031  00CF76  0E02               	movlw	2
  5032  00CF78  6E04               	movwf	___lldiv@dividend+3,c
  5033  00CF7A  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5034  00CF7E  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5035  00CF82  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5036  00CF86  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5037  00CF8A  0E02               	movlw	2
  5038  00CF8C                     u4165:
  5039  00CF8C  90D8               	bcf	status,0,c
  5040  00CF8E  3612               	rlcf	??_I2C_Master_Init,f,c
  5041  00CF90  3613               	rlcf	??_I2C_Master_Init+1,f,c
  5042  00CF92  3614               	rlcf	??_I2C_Master_Init+2,f,c
  5043  00CF94  3615               	rlcf	??_I2C_Master_Init+3,f,c
  5044  00CF96  2EE8               	decfsz	wreg,f,c
  5045  00CF98  D7F9               	goto	u4165
  5046  00CF9A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  5047  00CF9E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5048  00CFA2  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5049  00CFA6  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5050  00CFAA  EC1A  F069         	call	___lldiv	;wreg free
  5051  00CFAE  0401               	decf	?___lldiv,w,c
  5052  00CFB0  6EC8               	movwf	4040,c	;volatile
  5053  00CFB2  0012               	return		;funcret
  5054  00CFB4                     __end_of_I2C_Master_Init:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           postdec1	equ	0xFE5
  5066                           plusw1	equ	0xFE3
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           plusw2	equ	0xFDB
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _testIO *****************
  5075 ;; Defined at:
  5076 ;;		line 270 in file "main.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  i               1    3[COMRAM] unsigned char 
  5081 ;;  temp            1    2[COMRAM] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, status,2, status,0
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:        4 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text18
  5105  00DEE0                     __ptext18:
  5106                           	opt stack 0
  5107  00DEE0                     _testIO:
  5108                           	opt stack 30
  5109                           
  5110                           ;main.c: 287: _delay((unsigned long)((5)*(40000000/4000.0))); TXSTAbits.TXEN = 0;;
  5111                           
  5112                           ;incstack = 0
  5113  00DEE0  0E41               	movlw	65
  5114  00DEE2  6E01               	movwf	??_testIO& (0+255),c
  5115  00DEE4  0EEE               	movlw	238
  5116  00DEE6                     u5987:
  5117  00DEE6  2EE8               	decfsz	wreg,f,c
  5118  00DEE8  D7FE               	bra	u5987
  5119  00DEEA  2E01               	decfsz	??_testIO& (0+255),f,c
  5120  00DEEC  D7FC               	bra	u5987
  5121  00DEEE  D000               	nop2	
  5122  00DEF0  9AAC               	bcf	4012,5,c	;volatile
  5123                           
  5124                           ;main.c: 288: RCSTAbits.CREN = 0;
  5125  00DEF2  98AB               	bcf	4011,4,c	;volatile
  5126                           
  5127                           ;main.c: 289: RCSTAbits.SPEN = 0;
  5128  00DEF4  9EAB               	bcf	4011,7,c	;volatile
  5129                           
  5130                           ;main.c: 297: SSPCON1bits.SSPEN = 0;
  5131  00DEF6  9AC6               	bcf	4038,5,c	;volatile
  5132                           
  5133                           ;main.c: 300: LATA = 0x00;
  5134  00DEF8  0E00               	movlw	0
  5135  00DEFA  6E89               	movwf	3977,c	;volatile
  5136                           
  5137                           ;main.c: 301: LATB = 0x00;
  5138  00DEFC  0E00               	movlw	0
  5139  00DEFE  6E8A               	movwf	3978,c	;volatile
  5140                           
  5141                           ;main.c: 302: LATC = 0x00;
  5142  00DF00  0E00               	movlw	0
  5143  00DF02  6E8B               	movwf	3979,c	;volatile
  5144                           
  5145                           ;main.c: 303: LATD = 0x00;
  5146  00DF04  0E00               	movlw	0
  5147  00DF06  6E8C               	movwf	3980,c	;volatile
  5148                           
  5149                           ;main.c: 304: LATE = 0x00;
  5150  00DF08  0E00               	movlw	0
  5151  00DF0A  6E8D               	movwf	3981,c	;volatile
  5152                           
  5153                           ;main.c: 305: TRISA = 0x00;
  5154  00DF0C  0E00               	movlw	0
  5155  00DF0E  6E92               	movwf	3986,c	;volatile
  5156                           
  5157                           ;main.c: 306: TRISB = 0x00;
  5158  00DF10  0E00               	movlw	0
  5159  00DF12  6E93               	movwf	3987,c	;volatile
  5160                           
  5161                           ;main.c: 307: TRISC = 0x00;
  5162  00DF14  0E00               	movlw	0
  5163  00DF16  6E94               	movwf	3988,c	;volatile
  5164                           
  5165                           ;main.c: 308: TRISD = 0x00;
  5166  00DF18  0E00               	movlw	0
  5167  00DF1A  6E95               	movwf	3989,c	;volatile
  5168                           
  5169                           ;main.c: 309: TRISE = 0x00;
  5170  00DF1C  0E00               	movlw	0
  5171  00DF1E  6E96               	movwf	3990,c	;volatile
  5172  00DF20                     
  5173                           ;main.c: 312: unsigned char i = 0;
  5174  00DF20  0E00               	movlw	0
  5175  00DF22  6E04               	movwf	testIO@i,c
  5176                           
  5177                           ;main.c: 313: unsigned char temp = 0x00;
  5178  00DF24  0E00               	movlw	0
  5179  00DF26  6E03               	movwf	testIO@temp,c
  5180                           
  5181                           ;main.c: 315: temp = 1 << 7;
  5182  00DF28  0E80               	movlw	128
  5183  00DF2A  6E03               	movwf	testIO@temp,c
  5184                           
  5185                           ;main.c: 318: for (i = 0; i < 8; i++){
  5186  00DF2C  0E00               	movlw	0
  5187  00DF2E  6E04               	movwf	testIO@i,c
  5188  00DF30                     l3535:
  5189  00DF30  0E07               	movlw	7
  5190  00DF32  6404               	cpfsgt	testIO@i,c
  5191  00DF34  D001               	goto	l793
  5192  00DF36  D012               	goto	u2390
  5193  00DF38                     l793:
  5194                           
  5195                           ;main.c: 319: LATA = temp;
  5196  00DF38  C003  FF89         	movff	testIO@temp,3977	;volatile
  5197                           
  5198                           ;main.c: 320: temp >>= 1;
  5199  00DF3C  90D8               	bcf	status,0,c
  5200  00DF3E  3203               	rrcf	testIO@temp,f,c
  5201                           
  5202                           ;main.c: 321: _delay((unsigned long)((500)*(40000000/4000.0)));
  5203  00DF40  0E1A               	movlw	26
  5204  00DF42  6E02               	movwf	(??_testIO+1)& (0+255),c
  5205  00DF44  0E5E               	movlw	94
  5206  00DF46  6E01               	movwf	??_testIO& (0+255),c
  5207  00DF48  0E6E               	movlw	110
  5208  00DF4A                     u5997:
  5209  00DF4A  2EE8               	decfsz	wreg,f,c
  5210  00DF4C  D7FE               	bra	u5997
  5211  00DF4E  2E01               	decfsz	??_testIO& (0+255),f,c
  5212  00DF50  D7FC               	bra	u5997
  5213  00DF52  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5214  00DF54  D7FA               	bra	u5997
  5215  00DF56  D000               	nop2	
  5216  00DF58  2A04               	incf	testIO@i,f,c
  5217  00DF5A  D7EA               	goto	l3535
  5218  00DF5C                     u2390:
  5219                           
  5220                           ;main.c: 322: }
  5221                           ;main.c: 323: LATA = 0x00;
  5222  00DF5C  0E00               	movlw	0
  5223  00DF5E  6E89               	movwf	3977,c	;volatile
  5224                           
  5225                           ;main.c: 326: temp = 1 << 7;
  5226  00DF60  0E80               	movlw	128
  5227  00DF62  6E03               	movwf	testIO@temp,c
  5228                           
  5229                           ;main.c: 327: for (i = 0; i < 8; i++){
  5230  00DF64  0E00               	movlw	0
  5231  00DF66  6E04               	movwf	testIO@i,c
  5232  00DF68                     l3547:
  5233  00DF68  0E07               	movlw	7
  5234  00DF6A  6404               	cpfsgt	testIO@i,c
  5235  00DF6C  D001               	goto	l795
  5236  00DF6E  D012               	goto	u2410
  5237  00DF70                     l795:
  5238                           
  5239                           ;main.c: 328: LATB = temp;
  5240  00DF70  C003  FF8A         	movff	testIO@temp,3978	;volatile
  5241                           
  5242                           ;main.c: 329: temp >>= 1;
  5243  00DF74  90D8               	bcf	status,0,c
  5244  00DF76  3203               	rrcf	testIO@temp,f,c
  5245                           
  5246                           ;main.c: 330: _delay((unsigned long)((500)*(40000000/4000.0)));
  5247  00DF78  0E1A               	movlw	26
  5248  00DF7A  6E02               	movwf	(??_testIO+1)& (0+255),c
  5249  00DF7C  0E5E               	movlw	94
  5250  00DF7E  6E01               	movwf	??_testIO& (0+255),c
  5251  00DF80  0E6E               	movlw	110
  5252  00DF82                     u6007:
  5253  00DF82  2EE8               	decfsz	wreg,f,c
  5254  00DF84  D7FE               	bra	u6007
  5255  00DF86  2E01               	decfsz	??_testIO& (0+255),f,c
  5256  00DF88  D7FC               	bra	u6007
  5257  00DF8A  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5258  00DF8C  D7FA               	bra	u6007
  5259  00DF8E  D000               	nop2	
  5260  00DF90  2A04               	incf	testIO@i,f,c
  5261  00DF92  D7EA               	goto	l3547
  5262  00DF94                     u2410:
  5263                           
  5264                           ;main.c: 331: }
  5265                           ;main.c: 332: LATB = 0x00;
  5266  00DF94  0E00               	movlw	0
  5267  00DF96  6E8A               	movwf	3978,c	;volatile
  5268                           
  5269                           ;main.c: 334: temp = 1 << 7;
  5270  00DF98  0E80               	movlw	128
  5271  00DF9A  6E03               	movwf	testIO@temp,c
  5272                           
  5273                           ;main.c: 335: for (i = 0; i < 8; i++){
  5274  00DF9C  0E00               	movlw	0
  5275  00DF9E  6E04               	movwf	testIO@i,c
  5276  00DFA0                     l3559:
  5277  00DFA0  0E07               	movlw	7
  5278  00DFA2  6404               	cpfsgt	testIO@i,c
  5279  00DFA4  D001               	goto	l797
  5280  00DFA6  D012               	goto	u2430
  5281  00DFA8                     l797:
  5282                           
  5283                           ;main.c: 336: LATC = temp;
  5284  00DFA8  C003  FF8B         	movff	testIO@temp,3979	;volatile
  5285                           
  5286                           ;main.c: 337: temp >>= 1;
  5287  00DFAC  90D8               	bcf	status,0,c
  5288  00DFAE  3203               	rrcf	testIO@temp,f,c
  5289                           
  5290                           ;main.c: 338: _delay((unsigned long)((500)*(40000000/4000.0)));
  5291  00DFB0  0E1A               	movlw	26
  5292  00DFB2  6E02               	movwf	(??_testIO+1)& (0+255),c
  5293  00DFB4  0E5E               	movlw	94
  5294  00DFB6  6E01               	movwf	??_testIO& (0+255),c
  5295  00DFB8  0E6E               	movlw	110
  5296  00DFBA                     u6017:
  5297  00DFBA  2EE8               	decfsz	wreg,f,c
  5298  00DFBC  D7FE               	bra	u6017
  5299  00DFBE  2E01               	decfsz	??_testIO& (0+255),f,c
  5300  00DFC0  D7FC               	bra	u6017
  5301  00DFC2  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5302  00DFC4  D7FA               	bra	u6017
  5303  00DFC6  D000               	nop2	
  5304  00DFC8  2A04               	incf	testIO@i,f,c
  5305  00DFCA  D7EA               	goto	l3559
  5306  00DFCC                     u2430:
  5307                           
  5308                           ;main.c: 339: }
  5309                           ;main.c: 340: LATC = 0x00;
  5310  00DFCC  0E00               	movlw	0
  5311  00DFCE  6E8B               	movwf	3979,c	;volatile
  5312                           
  5313                           ;main.c: 342: temp = 1 << 7;
  5314  00DFD0  0E80               	movlw	128
  5315  00DFD2  6E03               	movwf	testIO@temp,c
  5316                           
  5317                           ;main.c: 343: for (i = 0; i < 8; i++){
  5318  00DFD4  0E00               	movlw	0
  5319  00DFD6  6E04               	movwf	testIO@i,c
  5320  00DFD8                     l3571:
  5321  00DFD8  0E07               	movlw	7
  5322  00DFDA  6404               	cpfsgt	testIO@i,c
  5323  00DFDC  D001               	goto	l799
  5324  00DFDE  D012               	goto	u2450
  5325  00DFE0                     l799:
  5326                           
  5327                           ;main.c: 344: LATD = temp;
  5328  00DFE0  C003  FF8C         	movff	testIO@temp,3980	;volatile
  5329                           
  5330                           ;main.c: 345: temp >>= 1;
  5331  00DFE4  90D8               	bcf	status,0,c
  5332  00DFE6  3203               	rrcf	testIO@temp,f,c
  5333                           
  5334                           ;main.c: 346: _delay((unsigned long)((500)*(40000000/4000.0)));
  5335  00DFE8  0E1A               	movlw	26
  5336  00DFEA  6E02               	movwf	(??_testIO+1)& (0+255),c
  5337  00DFEC  0E5E               	movlw	94
  5338  00DFEE  6E01               	movwf	??_testIO& (0+255),c
  5339  00DFF0  0E6E               	movlw	110
  5340  00DFF2                     u6027:
  5341  00DFF2  2EE8               	decfsz	wreg,f,c
  5342  00DFF4  D7FE               	bra	u6027
  5343  00DFF6  2E01               	decfsz	??_testIO& (0+255),f,c
  5344  00DFF8  D7FC               	bra	u6027
  5345  00DFFA  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5346  00DFFC  D7FA               	bra	u6027
  5347  00DFFE  D000               	nop2	
  5348  00E000  2A04               	incf	testIO@i,f,c
  5349  00E002  D7EA               	goto	l3571
  5350  00E004                     u2450:
  5351                           
  5352                           ;main.c: 347: }
  5353                           ;main.c: 348: LATD = 0x00;
  5354  00E004  0E00               	movlw	0
  5355  00E006  6E8C               	movwf	3980,c	;volatile
  5356                           
  5357                           ;main.c: 351: temp = 1 << 2;
  5358  00E008  0E04               	movlw	4
  5359  00E00A  6E03               	movwf	testIO@temp,c
  5360                           
  5361                           ;main.c: 352: for (i = 0; i < 3; i++){
  5362  00E00C  0E00               	movlw	0
  5363  00E00E  6E04               	movwf	testIO@i,c
  5364  00E010                     l3583:
  5365  00E010  0E02               	movlw	2
  5366  00E012  6404               	cpfsgt	testIO@i,c
  5367  00E014  D001               	goto	l801
  5368  00E016  D012               	goto	u2470
  5369  00E018                     l801:
  5370                           
  5371                           ;main.c: 353: LATE = temp;
  5372  00E018  C003  FF8D         	movff	testIO@temp,3981	;volatile
  5373                           
  5374                           ;main.c: 354: temp >>= 1;
  5375  00E01C  90D8               	bcf	status,0,c
  5376  00E01E  3203               	rrcf	testIO@temp,f,c
  5377                           
  5378                           ;main.c: 355: _delay((unsigned long)((500)*(40000000/4000.0)));
  5379  00E020  0E1A               	movlw	26
  5380  00E022  6E02               	movwf	(??_testIO+1)& (0+255),c
  5381  00E024  0E5E               	movlw	94
  5382  00E026  6E01               	movwf	??_testIO& (0+255),c
  5383  00E028  0E6E               	movlw	110
  5384  00E02A                     u6037:
  5385  00E02A  2EE8               	decfsz	wreg,f,c
  5386  00E02C  D7FE               	bra	u6037
  5387  00E02E  2E01               	decfsz	??_testIO& (0+255),f,c
  5388  00E030  D7FC               	bra	u6037
  5389  00E032  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5390  00E034  D7FA               	bra	u6037
  5391  00E036  D000               	nop2	
  5392  00E038  2A04               	incf	testIO@i,f,c
  5393  00E03A  D7EA               	goto	l3583
  5394  00E03C                     u2470:
  5395                           
  5396                           ;main.c: 356: }
  5397                           ;main.c: 357: LATE = 0x00;
  5398  00E03C  0E00               	movlw	0
  5399  00E03E  6E8D               	movwf	3981,c	;volatile
  5400  00E040  D76F               	goto	l792
  5401  00E042                     __end_of_testIO:
  5402                           	opt stack 0
  5403                           tblptru	equ	0xFF8
  5404                           tblptrh	equ	0xFF7
  5405                           tblptrl	equ	0xFF6
  5406                           tablat	equ	0xFF5
  5407                           prodh	equ	0xFF4
  5408                           prodl	equ	0xFF3
  5409                           intcon	equ	0xFF2
  5410                           postinc0	equ	0xFEE
  5411                           wreg	equ	0xFE8
  5412                           postdec1	equ	0xFE5
  5413                           plusw1	equ	0xFE3
  5414                           fsr1l	equ	0xFE1
  5415                           indf2	equ	0xFDF
  5416                           plusw2	equ	0xFDB
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _testGLCD *****************
  5422 ;; Defined at:
  5423 ;;		line 235 in file "main.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    5
  5444 ;; This function calls:
  5445 ;;		_glcdDrawRectangle
  5446 ;;		_initGLCD
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text19
  5453  00D0DC                     __ptext19:
  5454                           	opt stack 0
  5455  00D0DC                     _testGLCD:
  5456                           	opt stack 25
  5457                           
  5458                           ;main.c: 243: initGLCD();
  5459                           
  5460                           ;incstack = 0
  5461  00D0DC  ECE0  F072         	call	_initGLCD	;wreg free
  5462                           
  5463                           ;main.c: 244: glcdDrawRectangle(0, 64, 0, 128, RED);
  5464  00D0E0  0E40               	movlw	64
  5465  00D0E2  6E15               	movwf	glcdDrawRectangle@XE,c
  5466  00D0E4  0E00               	movlw	0
  5467  00D0E6  6E16               	movwf	glcdDrawRectangle@YS,c
  5468  00D0E8  0E80               	movlw	128
  5469  00D0EA  6E17               	movwf	glcdDrawRectangle@YE,c
  5470  00D0EC  0E14               	movlw	low _RED
  5471  00D0EE  6EF6               	movwf	tblptrl,c
  5472  00D0F0                     	if	1	;There is more than 1 active tblptr byte
  5473  00D0F0  0EFF               	movlw	high _RED
  5474  00D0F2  6EF7               	movwf	tblptrh,c
  5475  00D0F4                     	endif
  5476  00D0F4                     	if	0	;There are less than 3 active tblptr bytes
  5477  00D0F4                     	endif
  5478  00D0F4  0009               	tblrd		*+
  5479  00D0F6  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  5480  00D0FA  0009               	tblrd		*+
  5481  00D0FC  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  5482  00D100  0009               	tblrd		*+
  5483  00D102  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  5484  00D106  000A               	tblrd		*-
  5485  00D108  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  5486  00D10C  0E00               	movlw	0
  5487  00D10E  EC21  F070         	call	_glcdDrawRectangle
  5488                           
  5489                           ;main.c: 245: glcdDrawRectangle(64, 128, 0, 128, VIOLET);
  5490  00D112  0E80               	movlw	128
  5491  00D114  6E15               	movwf	glcdDrawRectangle@XE,c
  5492  00D116  0E00               	movlw	0
  5493  00D118  6E16               	movwf	glcdDrawRectangle@YS,c
  5494  00D11A  0E80               	movlw	128
  5495  00D11C  6E17               	movwf	glcdDrawRectangle@YE,c
  5496  00D11E  0EFC               	movlw	low _VIOLET
  5497  00D120  6EF6               	movwf	tblptrl,c
  5498  00D122                     	if	1	;There is more than 1 active tblptr byte
  5499  00D122  0EFE               	movlw	high _VIOLET
  5500  00D124  6EF7               	movwf	tblptrh,c
  5501  00D126                     	endif
  5502  00D126                     	if	0	;There are less than 3 active tblptr bytes
  5503  00D126                     	endif
  5504  00D126  0009               	tblrd		*+
  5505  00D128  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  5506  00D12C  0009               	tblrd		*+
  5507  00D12E  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  5508  00D132  0009               	tblrd		*+
  5509  00D134  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  5510  00D138  000A               	tblrd		*-
  5511  00D13A  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  5512  00D13E  0E40               	movlw	64
  5513  00D140  EC21  F070         	call	_glcdDrawRectangle
  5514  00D144  0012               	return		;funcret
  5515  00D146                     __end_of_testGLCD:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           postdec1	equ	0xFE5
  5527                           plusw1	equ	0xFE3
  5528                           fsr1l	equ	0xFE1
  5529                           indf2	equ	0xFDF
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _initGLCD *****************
  5536 ;; Defined at:
  5537 ;;		line 238 in file "GLCD_PIC_V1.1.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;Total ram usage:        2 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    4
  5558 ;; This function calls:
  5559 ;;		_glcdDrawRectangle
  5560 ;;		_glcdSetCOLMOD
  5561 ;;		_glcdTransfer
  5562 ;;		_spiInit
  5563 ;; This function is called by:
  5564 ;;		_testGLCD
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text20
  5569  00E5C0                     __ptext20:
  5570                           	opt stack 0
  5571  00E5C0                     _initGLCD:
  5572                           	opt stack 25
  5573                           
  5574                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
  5575                           
  5576                           ;incstack = 0
  5577  00E5C0  808C               	bsf	3980,0,c	;volatile
  5578                           
  5579                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
  5580  00E5C2  828C               	bsf	3980,1,c	;volatile
  5581                           
  5582                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
  5583  00E5C4  9095               	bcf	3989,0,c	;volatile
  5584                           
  5585                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
  5586  00E5C6  9295               	bcf	3989,1,c	;volatile
  5587                           
  5588                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
  5589  00E5C8  0E04               	movlw	4
  5590  00E5CA  ECAA  F066         	call	_spiInit
  5591                           
  5592                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(40000000/4000.0)));
  5593  00E5CE  0E02               	movlw	2
  5594  00E5D0  6E29               	movwf	(??_initGLCD+1)& (0+255),c
  5595  00E5D2  0E04               	movlw	4
  5596  00E5D4  6E28               	movwf	??_initGLCD& (0+255),c
  5597  00E5D6  0EBA               	movlw	186
  5598  00E5D8                     u6047:
  5599  00E5D8  2EE8               	decfsz	wreg,f,c
  5600  00E5DA  D7FE               	bra	u6047
  5601  00E5DC  2E28               	decfsz	??_initGLCD& (0+255),f,c
  5602  00E5DE  D7FC               	bra	u6047
  5603  00E5E0  2E29               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5604  00E5E2  D7FA               	bra	u6047
  5605  00E5E4  D000               	nop2	
  5606                           
  5607                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
  5608  00E5E6  0E01               	movlw	1
  5609  00E5E8  6E04               	movwf	glcdTransfer@cmd,c
  5610  00E5EA  0E42               	movlw	low GLCD_PIC@INST_SWRESET
  5611  00E5EC  6EF6               	movwf	tblptrl,c
  5612  00E5EE                     	if	1	;There is more than 1 active tblptr byte
  5613  00E5EE  0EFF               	movlw	high GLCD_PIC@INST_SWRESET
  5614  00E5F0  6EF7               	movwf	tblptrh,c
  5615  00E5F2                     	endif
  5616  00E5F2                     	if	0	;There are less than 3 active tblptr bytes
  5617  00E5F2                     	endif
  5618  00E5F2  0008               	tblrd		*
  5619  00E5F4  50F5               	movf	tablat,w,c
  5620  00E5F6  EC7C  F066         	call	_glcdTransfer
  5621  00E5FA  0E07               	movlw	7
  5622  00E5FC  6E29               	movwf	(??_initGLCD+1)& (0+255),c
  5623  00E5FE  0E99               	movlw	153
  5624  00E600  6E28               	movwf	??_initGLCD& (0+255),c
  5625  00E602  0E49               	movlw	73
  5626  00E604                     u6057:
  5627  00E604  2EE8               	decfsz	wreg,f,c
  5628  00E606  D7FE               	bra	u6057
  5629  00E608  2E28               	decfsz	??_initGLCD& (0+255),f,c
  5630  00E60A  D7FC               	bra	u6057
  5631  00E60C  2E29               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5632  00E60E  D7FA               	bra	u6057
  5633  00E610  F000               	nop	
  5634                           
  5635                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
  5636  00E612  0E01               	movlw	1
  5637  00E614  6E04               	movwf	glcdTransfer@cmd,c
  5638  00E616  0E40               	movlw	low GLCD_PIC@INST_SLPOUT
  5639  00E618  6EF6               	movwf	tblptrl,c
  5640  00E61A                     	if	1	;There is more than 1 active tblptr byte
  5641  00E61A  0EFF               	movlw	high GLCD_PIC@INST_SLPOUT
  5642  00E61C  6EF7               	movwf	tblptrh,c
  5643  00E61E                     	endif
  5644  00E61E                     	if	0	;There are less than 3 active tblptr bytes
  5645  00E61E                     	endif
  5646  00E61E  0008               	tblrd		*
  5647  00E620  50F5               	movf	tablat,w,c
  5648  00E622  EC7C  F066         	call	_glcdTransfer
  5649  00E626  0E07               	movlw	7
  5650  00E628  6E29               	movwf	(??_initGLCD+1)& (0+255),c
  5651  00E62A  0E99               	movlw	153
  5652  00E62C  6E28               	movwf	??_initGLCD& (0+255),c
  5653  00E62E  0E49               	movlw	73
  5654  00E630                     u6067:
  5655  00E630  2EE8               	decfsz	wreg,f,c
  5656  00E632  D7FE               	bra	u6067
  5657  00E634  2E28               	decfsz	??_initGLCD& (0+255),f,c
  5658  00E636  D7FC               	bra	u6067
  5659  00E638  2E29               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5660  00E63A  D7FA               	bra	u6067
  5661  00E63C  F000               	nop	
  5662                           
  5663                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  5664  00E63E  0E01               	movlw	1
  5665  00E640  6E04               	movwf	glcdTransfer@cmd,c
  5666  00E642  0E2E               	movlw	low GLCD_PIC@INST_FRMCTR1
  5667  00E644  6EF6               	movwf	tblptrl,c
  5668  00E646                     	if	1	;There is more than 1 active tblptr byte
  5669  00E646  0EFF               	movlw	high GLCD_PIC@INST_FRMCTR1
  5670  00E648  6EF7               	movwf	tblptrh,c
  5671  00E64A                     	endif
  5672  00E64A                     	if	0	;There are less than 3 active tblptr bytes
  5673  00E64A                     	endif
  5674  00E64A  0008               	tblrd		*
  5675  00E64C  50F5               	movf	tablat,w,c
  5676  00E64E  EC7C  F066         	call	_glcdTransfer
  5677                           
  5678                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
  5679  00E652  0E00               	movlw	0
  5680  00E654  6E04               	movwf	glcdTransfer@cmd,c
  5681  00E656  0E00               	movlw	0
  5682  00E658  EC7C  F066         	call	_glcdTransfer
  5683                           
  5684                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
  5685  00E65C  0E00               	movlw	0
  5686  00E65E  6E04               	movwf	glcdTransfer@cmd,c
  5687  00E660  0E06               	movlw	6
  5688  00E662  EC7C  F066         	call	_glcdTransfer
  5689                           
  5690                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
  5691  00E666  0E00               	movlw	0
  5692  00E668  6E04               	movwf	glcdTransfer@cmd,c
  5693  00E66A  0E03               	movlw	3
  5694  00E66C  EC7C  F066         	call	_glcdTransfer
  5695                           
  5696                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  5697  00E670  0E01               	movlw	1
  5698  00E672  6E04               	movwf	glcdTransfer@cmd,c
  5699  00E674  0E2D               	movlw	low GLCD_PIC@INST_FRMCTR2
  5700  00E676  6EF6               	movwf	tblptrl,c
  5701  00E678                     	if	1	;There is more than 1 active tblptr byte
  5702  00E678  0EFF               	movlw	high GLCD_PIC@INST_FRMCTR2
  5703  00E67A  6EF7               	movwf	tblptrh,c
  5704  00E67C                     	endif
  5705  00E67C                     	if	0	;There are less than 3 active tblptr bytes
  5706  00E67C                     	endif
  5707  00E67C  0008               	tblrd		*
  5708  00E67E  50F5               	movf	tablat,w,c
  5709  00E680  EC7C  F066         	call	_glcdTransfer
  5710                           
  5711                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
  5712  00E684  0E00               	movlw	0
  5713  00E686  6E04               	movwf	glcdTransfer@cmd,c
  5714  00E688  0E01               	movlw	1
  5715  00E68A  EC7C  F066         	call	_glcdTransfer
  5716                           
  5717                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
  5718  00E68E  0E00               	movlw	0
  5719  00E690  6E04               	movwf	glcdTransfer@cmd,c
  5720  00E692  0E2C               	movlw	44
  5721  00E694  EC7C  F066         	call	_glcdTransfer
  5722                           
  5723                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
  5724  00E698  0E00               	movlw	0
  5725  00E69A  6E04               	movwf	glcdTransfer@cmd,c
  5726  00E69C  0E2D               	movlw	45
  5727  00E69E  EC7C  F066         	call	_glcdTransfer
  5728                           
  5729                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  5730  00E6A2  0E01               	movlw	1
  5731  00E6A4  6E04               	movwf	glcdTransfer@cmd,c
  5732  00E6A6  0E2C               	movlw	low GLCD_PIC@INST_FRMCTR3
  5733  00E6A8  6EF6               	movwf	tblptrl,c
  5734  00E6AA                     	if	1	;There is more than 1 active tblptr byte
  5735  00E6AA  0EFF               	movlw	high GLCD_PIC@INST_FRMCTR3
  5736  00E6AC  6EF7               	movwf	tblptrh,c
  5737  00E6AE                     	endif
  5738  00E6AE                     	if	0	;There are less than 3 active tblptr bytes
  5739  00E6AE                     	endif
  5740  00E6AE  0008               	tblrd		*
  5741  00E6B0  50F5               	movf	tablat,w,c
  5742  00E6B2  EC7C  F066         	call	_glcdTransfer
  5743                           
  5744                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
  5745  00E6B6  0E00               	movlw	0
  5746  00E6B8  6E04               	movwf	glcdTransfer@cmd,c
  5747  00E6BA  0E01               	movlw	1
  5748  00E6BC  EC7C  F066         	call	_glcdTransfer
  5749                           
  5750                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
  5751  00E6C0  0E00               	movlw	0
  5752  00E6C2  6E04               	movwf	glcdTransfer@cmd,c
  5753  00E6C4  0E2C               	movlw	44
  5754  00E6C6  EC7C  F066         	call	_glcdTransfer
  5755                           
  5756                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  5757  00E6CA  0E00               	movlw	0
  5758  00E6CC  6E04               	movwf	glcdTransfer@cmd,c
  5759  00E6CE  0E2D               	movlw	45
  5760  00E6D0  EC7C  F066         	call	_glcdTransfer
  5761                           
  5762                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  5763  00E6D4  0E01               	movlw	1
  5764  00E6D6  6E04               	movwf	glcdTransfer@cmd,c
  5765  00E6D8  0E2B               	movlw	low GLCD_PIC@INST_INVCTR
  5766  00E6DA  6EF6               	movwf	tblptrl,c
  5767  00E6DC                     	if	1	;There is more than 1 active tblptr byte
  5768  00E6DC  0EFF               	movlw	high GLCD_PIC@INST_INVCTR
  5769  00E6DE  6EF7               	movwf	tblptrh,c
  5770  00E6E0                     	endif
  5771  00E6E0                     	if	0	;There are less than 3 active tblptr bytes
  5772  00E6E0                     	endif
  5773  00E6E0  0008               	tblrd		*
  5774  00E6E2  50F5               	movf	tablat,w,c
  5775  00E6E4  EC7C  F066         	call	_glcdTransfer
  5776                           
  5777                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  5778  00E6E8  0E00               	movlw	0
  5779  00E6EA  6E04               	movwf	glcdTransfer@cmd,c
  5780  00E6EC  0E00               	movlw	0
  5781  00E6EE  EC7C  F066         	call	_glcdTransfer
  5782                           
  5783                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  5784  00E6F2  0E01               	movlw	1
  5785  00E6F4  6E04               	movwf	glcdTransfer@cmd,c
  5786  00E6F6  0E2A               	movlw	low GLCD_PIC@INST_PWCTR1
  5787  00E6F8  6EF6               	movwf	tblptrl,c
  5788  00E6FA                     	if	1	;There is more than 1 active tblptr byte
  5789  00E6FA  0EFF               	movlw	high GLCD_PIC@INST_PWCTR1
  5790  00E6FC  6EF7               	movwf	tblptrh,c
  5791  00E6FE                     	endif
  5792  00E6FE                     	if	0	;There are less than 3 active tblptr bytes
  5793  00E6FE                     	endif
  5794  00E6FE  0008               	tblrd		*
  5795  00E700  50F5               	movf	tablat,w,c
  5796  00E702  EC7C  F066         	call	_glcdTransfer
  5797                           
  5798                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  5799  00E706  0E00               	movlw	0
  5800  00E708  6E04               	movwf	glcdTransfer@cmd,c
  5801  00E70A  0EA2               	movlw	162
  5802  00E70C  EC7C  F066         	call	_glcdTransfer
  5803                           
  5804                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  5805  00E710  0E00               	movlw	0
  5806  00E712  6E04               	movwf	glcdTransfer@cmd,c
  5807  00E714  0E02               	movlw	2
  5808  00E716  EC7C  F066         	call	_glcdTransfer
  5809                           
  5810                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  5811  00E71A  0E00               	movlw	0
  5812  00E71C  6E04               	movwf	glcdTransfer@cmd,c
  5813  00E71E  0E84               	movlw	132
  5814  00E720  EC7C  F066         	call	_glcdTransfer
  5815                           
  5816                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  5817  00E724  0E01               	movlw	1
  5818  00E726  6E04               	movwf	glcdTransfer@cmd,c
  5819  00E728  0E29               	movlw	low GLCD_PIC@INST_PWCTR2
  5820  00E72A  6EF6               	movwf	tblptrl,c
  5821  00E72C                     	if	1	;There is more than 1 active tblptr byte
  5822  00E72C  0EFF               	movlw	high GLCD_PIC@INST_PWCTR2
  5823  00E72E  6EF7               	movwf	tblptrh,c
  5824  00E730                     	endif
  5825  00E730                     	if	0	;There are less than 3 active tblptr bytes
  5826  00E730                     	endif
  5827  00E730  0008               	tblrd		*
  5828  00E732  50F5               	movf	tablat,w,c
  5829  00E734  EC7C  F066         	call	_glcdTransfer
  5830                           
  5831                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  5832  00E738  0E00               	movlw	0
  5833  00E73A  6E04               	movwf	glcdTransfer@cmd,c
  5834  00E73C  0EC5               	movlw	197
  5835  00E73E  EC7C  F066         	call	_glcdTransfer
  5836                           
  5837                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  5838  00E742  0E01               	movlw	1
  5839  00E744  6E04               	movwf	glcdTransfer@cmd,c
  5840  00E746  0E28               	movlw	low GLCD_PIC@INST_PWCTR3
  5841  00E748  6EF6               	movwf	tblptrl,c
  5842  00E74A                     	if	1	;There is more than 1 active tblptr byte
  5843  00E74A  0EFF               	movlw	high GLCD_PIC@INST_PWCTR3
  5844  00E74C  6EF7               	movwf	tblptrh,c
  5845  00E74E                     	endif
  5846  00E74E                     	if	0	;There are less than 3 active tblptr bytes
  5847  00E74E                     	endif
  5848  00E74E  0008               	tblrd		*
  5849  00E750  50F5               	movf	tablat,w,c
  5850  00E752  EC7C  F066         	call	_glcdTransfer
  5851                           
  5852                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  5853  00E756  0E00               	movlw	0
  5854  00E758  6E04               	movwf	glcdTransfer@cmd,c
  5855  00E75A  0E0A               	movlw	10
  5856  00E75C  EC7C  F066         	call	_glcdTransfer
  5857                           
  5858                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  5859  00E760  0E00               	movlw	0
  5860  00E762  6E04               	movwf	glcdTransfer@cmd,c
  5861  00E764  0E00               	movlw	0
  5862  00E766  EC7C  F066         	call	_glcdTransfer
  5863                           
  5864                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  5865  00E76A  0E01               	movlw	1
  5866  00E76C  6E04               	movwf	glcdTransfer@cmd,c
  5867  00E76E  0E27               	movlw	low GLCD_PIC@INST_PWCTR4
  5868  00E770  6EF6               	movwf	tblptrl,c
  5869  00E772                     	if	1	;There is more than 1 active tblptr byte
  5870  00E772  0EFF               	movlw	high GLCD_PIC@INST_PWCTR4
  5871  00E774  6EF7               	movwf	tblptrh,c
  5872  00E776                     	endif
  5873  00E776                     	if	0	;There are less than 3 active tblptr bytes
  5874  00E776                     	endif
  5875  00E776  0008               	tblrd		*
  5876  00E778  50F5               	movf	tablat,w,c
  5877  00E77A  EC7C  F066         	call	_glcdTransfer
  5878                           
  5879                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  5880  00E77E  0E00               	movlw	0
  5881  00E780  6E04               	movwf	glcdTransfer@cmd,c
  5882  00E782  0E8A               	movlw	138
  5883  00E784  EC7C  F066         	call	_glcdTransfer
  5884                           
  5885                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  5886  00E788  0E00               	movlw	0
  5887  00E78A  6E04               	movwf	glcdTransfer@cmd,c
  5888  00E78C  0E2A               	movlw	42
  5889  00E78E  EC7C  F066         	call	_glcdTransfer
  5890                           
  5891                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  5892  00E792  0E01               	movlw	1
  5893  00E794  6E04               	movwf	glcdTransfer@cmd,c
  5894  00E796  0E26               	movlw	low GLCD_PIC@INST_PWCTR5
  5895  00E798  6EF6               	movwf	tblptrl,c
  5896  00E79A                     	if	1	;There is more than 1 active tblptr byte
  5897  00E79A  0EFF               	movlw	high GLCD_PIC@INST_PWCTR5
  5898  00E79C  6EF7               	movwf	tblptrh,c
  5899  00E79E                     	endif
  5900  00E79E                     	if	0	;There are less than 3 active tblptr bytes
  5901  00E79E                     	endif
  5902  00E79E  0008               	tblrd		*
  5903  00E7A0  50F5               	movf	tablat,w,c
  5904  00E7A2  EC7C  F066         	call	_glcdTransfer
  5905                           
  5906                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  5907  00E7A6  0E00               	movlw	0
  5908  00E7A8  6E04               	movwf	glcdTransfer@cmd,c
  5909  00E7AA  0E8A               	movlw	138
  5910  00E7AC  EC7C  F066         	call	_glcdTransfer
  5911                           
  5912                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  5913  00E7B0  0E00               	movlw	0
  5914  00E7B2  6E04               	movwf	glcdTransfer@cmd,c
  5915  00E7B4  0E2A               	movlw	42
  5916  00E7B6  EC7C  F066         	call	_glcdTransfer
  5917                           
  5918                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  5919  00E7BA  0E01               	movlw	1
  5920  00E7BC  6E04               	movwf	glcdTransfer@cmd,c
  5921  00E7BE  0E25               	movlw	low GLCD_PIC@INST_VMCTR1
  5922  00E7C0  6EF6               	movwf	tblptrl,c
  5923  00E7C2                     	if	1	;There is more than 1 active tblptr byte
  5924  00E7C2  0EFF               	movlw	high GLCD_PIC@INST_VMCTR1
  5925  00E7C4  6EF7               	movwf	tblptrh,c
  5926  00E7C6                     	endif
  5927  00E7C6                     	if	0	;There are less than 3 active tblptr bytes
  5928  00E7C6                     	endif
  5929  00E7C6  0008               	tblrd		*
  5930  00E7C8  50F5               	movf	tablat,w,c
  5931  00E7CA  EC7C  F066         	call	_glcdTransfer
  5932                           
  5933                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  5934  00E7CE  0E00               	movlw	0
  5935  00E7D0  6E04               	movwf	glcdTransfer@cmd,c
  5936  00E7D2  0E3C               	movlw	60
  5937  00E7D4  EC7C  F066         	call	_glcdTransfer
  5938                           
  5939                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  5940  00E7D8  0E01               	movlw	1
  5941  00E7DA  6E04               	movwf	glcdTransfer@cmd,c
  5942  00E7DC  0E3D               	movlw	low GLCD_PIC@INST_INVOFF
  5943  00E7DE  6EF6               	movwf	tblptrl,c
  5944  00E7E0                     	if	1	;There is more than 1 active tblptr byte
  5945  00E7E0  0EFF               	movlw	high GLCD_PIC@INST_INVOFF
  5946  00E7E2  6EF7               	movwf	tblptrh,c
  5947  00E7E4                     	endif
  5948  00E7E4                     	if	0	;There are less than 3 active tblptr bytes
  5949  00E7E4                     	endif
  5950  00E7E4  0008               	tblrd		*
  5951  00E7E6  50F5               	movf	tablat,w,c
  5952  00E7E8  EC7C  F066         	call	_glcdTransfer
  5953                           
  5954                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  5955  00E7EC  0E12               	movlw	18
  5956  00E7EE  EC29  F067         	call	_glcdSetCOLMOD
  5957                           
  5958                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  5959  00E7F2  0E01               	movlw	1
  5960  00E7F4  6E04               	movwf	glcdTransfer@cmd,c
  5961  00E7F6  0E3B               	movlw	low GLCD_PIC@INST_GAMSET
  5962  00E7F8  6EF6               	movwf	tblptrl,c
  5963  00E7FA                     	if	1	;There is more than 1 active tblptr byte
  5964  00E7FA  0EFF               	movlw	high GLCD_PIC@INST_GAMSET
  5965  00E7FC  6EF7               	movwf	tblptrh,c
  5966  00E7FE                     	endif
  5967  00E7FE                     	if	0	;There are less than 3 active tblptr bytes
  5968  00E7FE                     	endif
  5969  00E7FE  0008               	tblrd		*
  5970  00E800  50F5               	movf	tablat,w,c
  5971  00E802  EC7C  F066         	call	_glcdTransfer
  5972                           
  5973                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  5974  00E806  0E00               	movlw	0
  5975  00E808  6E04               	movwf	glcdTransfer@cmd,c
  5976  00E80A  0E01               	movlw	1
  5977  00E80C  EC7C  F066         	call	_glcdTransfer
  5978                           
  5979                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  5980  00E810  0E01               	movlw	1
  5981  00E812  6E04               	movwf	glcdTransfer@cmd,c
  5982  00E814  0E31               	movlw	low GLCD_PIC@INST_IDMOFF
  5983  00E816  6EF6               	movwf	tblptrl,c
  5984  00E818                     	if	1	;There is more than 1 active tblptr byte
  5985  00E818  0EFF               	movlw	high GLCD_PIC@INST_IDMOFF
  5986  00E81A  6EF7               	movwf	tblptrh,c
  5987  00E81C                     	endif
  5988  00E81C                     	if	0	;There are less than 3 active tblptr bytes
  5989  00E81C                     	endif
  5990  00E81C  0008               	tblrd		*
  5991  00E81E  50F5               	movf	tablat,w,c
  5992  00E820  EC7C  F066         	call	_glcdTransfer
  5993                           
  5994                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  5995  00E824  0E01               	movlw	1
  5996  00E826  6E04               	movwf	glcdTransfer@cmd,c
  5997  00E828  0E3E               	movlw	low GLCD_PIC@INST_NORON
  5998  00E82A  6EF6               	movwf	tblptrl,c
  5999  00E82C                     	if	1	;There is more than 1 active tblptr byte
  6000  00E82C  0EFF               	movlw	high GLCD_PIC@INST_NORON
  6001  00E82E  6EF7               	movwf	tblptrh,c
  6002  00E830                     	endif
  6003  00E830                     	if	0	;There are less than 3 active tblptr bytes
  6004  00E830                     	endif
  6005  00E830  0008               	tblrd		*
  6006  00E832  50F5               	movf	tablat,w,c
  6007  00E834  EC7C  F066         	call	_glcdTransfer
  6008                           
  6009                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  6010  00E838  8C76               	bsf	_MADCTLbits,6,c
  6011                           
  6012                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  6013  00E83A  8E76               	bsf	_MADCTLbits,7,c
  6014                           
  6015                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  6016  00E83C  8A76               	bsf	_MADCTLbits,5,c
  6017                           
  6018                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  6019  00E83E  9876               	bcf	_MADCTLbits,4,c
  6020                           
  6021                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  6022  00E840  9676               	bcf	_MADCTLbits,3,c
  6023                           
  6024                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  6025  00E842  9476               	bcf	_MADCTLbits,2,c
  6026                           
  6027                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  6028  00E844  0E01               	movlw	1
  6029  00E846  6E04               	movwf	glcdTransfer@cmd,c
  6030  00E848  0E32               	movlw	low GLCD_PIC@INST_MADCTL
  6031  00E84A  6EF6               	movwf	tblptrl,c
  6032  00E84C                     	if	1	;There is more than 1 active tblptr byte
  6033  00E84C  0EFF               	movlw	high GLCD_PIC@INST_MADCTL
  6034  00E84E  6EF7               	movwf	tblptrh,c
  6035  00E850                     	endif
  6036  00E850                     	if	0	;There are less than 3 active tblptr bytes
  6037  00E850                     	endif
  6038  00E850  0008               	tblrd		*
  6039  00E852  50F5               	movf	tablat,w,c
  6040  00E854  EC7C  F066         	call	_glcdTransfer
  6041  00E858  0E00               	movlw	0
  6042  00E85A  6E04               	movwf	glcdTransfer@cmd,c
  6043  00E85C  5076               	movf	_MADCTLbits,w,c
  6044  00E85E  EC7C  F066         	call	_glcdTransfer
  6045                           
  6046                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  6047  00E862  0E65               	movlw	low _GLCD_SIZE_HORZ
  6048  00E864  6EF6               	movwf	tblptrl,c
  6049  00E866                     	if	1	;There is more than 1 active tblptr byte
  6050  00E866  0EFF               	movlw	high _GLCD_SIZE_HORZ
  6051  00E868  6EF7               	movwf	tblptrh,c
  6052  00E86A                     	endif
  6053  00E86A                     	if	0	;There are less than 3 active tblptr bytes
  6054  00E86A                     	endif
  6055  00E86A  0008               	tblrd		*
  6056  00E86C  CFF5 F015          	movff	tablat,glcdDrawRectangle@XE
  6057  00E870  0E00               	movlw	0
  6058  00E872  6E16               	movwf	glcdDrawRectangle@YS,c
  6059  00E874  0E64               	movlw	low _GLCD_SIZE_VERT
  6060  00E876  6EF6               	movwf	tblptrl,c
  6061  00E878                     	if	1	;There is more than 1 active tblptr byte
  6062  00E878  0EFF               	movlw	high _GLCD_SIZE_VERT
  6063  00E87A  6EF7               	movwf	tblptrh,c
  6064  00E87C                     	endif
  6065  00E87C                     	if	0	;There are less than 3 active tblptr bytes
  6066  00E87C                     	endif
  6067  00E87C  0008               	tblrd		*
  6068  00E87E  CFF5 F017          	movff	tablat,glcdDrawRectangle@YE
  6069  00E882  0E20               	movlw	low _BLACK
  6070  00E884  6EF6               	movwf	tblptrl,c
  6071  00E886                     	if	1	;There is more than 1 active tblptr byte
  6072  00E886  0EFF               	movlw	high _BLACK
  6073  00E888  6EF7               	movwf	tblptrh,c
  6074  00E88A                     	endif
  6075  00E88A                     	if	0	;There are less than 3 active tblptr bytes
  6076  00E88A                     	endif
  6077  00E88A  0009               	tblrd		*+
  6078  00E88C  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  6079  00E890  0009               	tblrd		*+
  6080  00E892  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  6081  00E896  0009               	tblrd		*+
  6082  00E898  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  6083  00E89C  000A               	tblrd		*-
  6084  00E89E  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  6085  00E8A2  0E00               	movlw	0
  6086  00E8A4  EC21  F070         	call	_glcdDrawRectangle
  6087                           
  6088                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  6089  00E8A8  0E01               	movlw	1
  6090  00E8AA  6E04               	movwf	glcdTransfer@cmd,c
  6091  00E8AC  0E39               	movlw	low GLCD_PIC@INST_DISPON
  6092  00E8AE  6EF6               	movwf	tblptrl,c
  6093  00E8B0                     	if	1	;There is more than 1 active tblptr byte
  6094  00E8B0  0EFF               	movlw	high GLCD_PIC@INST_DISPON
  6095  00E8B2  6EF7               	movwf	tblptrh,c
  6096  00E8B4                     	endif
  6097  00E8B4                     	if	0	;There are less than 3 active tblptr bytes
  6098  00E8B4                     	endif
  6099  00E8B4  0008               	tblrd		*
  6100  00E8B6  50F5               	movf	tablat,w,c
  6101  00E8B8  EC7C  F066         	call	_glcdTransfer
  6102                           
  6103                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(40000000/4000.0)));
  6104  00E8BC  0E82               	movlw	130
  6105  00E8BE  6E28               	movwf	??_initGLCD& (0+255),c
  6106  00E8C0  0EDE               	movlw	222
  6107  00E8C2                     u6077:
  6108  00E8C2  2EE8               	decfsz	wreg,f,c
  6109  00E8C4  D7FE               	bra	u6077
  6110  00E8C6  2E28               	decfsz	??_initGLCD& (0+255),f,c
  6111  00E8C8  D7FC               	bra	u6077
  6112  00E8CA  0012               	return		;funcret
  6113  00E8CC                     __end_of_initGLCD:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           plusw1	equ	0xFE3
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           plusw2	equ	0xFDB
  6129                           fsr2h	equ	0xFDA
  6130                           fsr2l	equ	0xFD9
  6131                           status	equ	0xFD8
  6132                           
  6133 ;; *************** function _spiInit *****************
  6134 ;; Defined at:
  6135 ;;		line 54 in file "SPI_PIC.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;  divider         1    wreg     unsigned char 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  divider         1    0[COMRAM] unsigned char 
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;Total ram usage:        1 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_initSD
  6159 ;;		_initGLCD
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text21
  6164  00CD54                     __ptext21:
  6165                           	opt stack 0
  6166  00CD54                     _spiInit:
  6167                           	opt stack 28
  6168                           
  6169                           ;incstack = 0
  6170                           ;spiInit@divider stored from wreg
  6171  00CD54  6E01               	movwf	spiInit@divider,c
  6172                           
  6173                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  6174  00CD56  9AC6               	bcf	4038,5,c	;volatile
  6175                           
  6176                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  6177  00CD58  0E00               	movlw	0
  6178  00CD5A  6EC7               	movwf	4039,c	;volatile
  6179                           
  6180                           ;SPI_PIC.c: 71: switch(divider){
  6181  00CD5C  D007               	goto	l324
  6182  00CD5E                     
  6183                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  6184  00CD5E  0E11               	movlw	17
  6185  00CD60  D003               	goto	L6
  6186  00CD62                     
  6187                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  6188  00CD62  0E12               	movlw	18
  6189  00CD64  D001               	goto	L6
  6190  00CD66                     
  6191                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  6192  00CD66  0E10               	movlw	16
  6193  00CD68                     L6:
  6194  00CD68  6EC6               	movwf	4038,c	;volatile
  6195                           
  6196                           ;SPI_PIC.c: 83: }
  6197  00CD6A  D00B               	goto	l326
  6198  00CD6C                     l324:
  6199  00CD6C  5001               	movf	spiInit@divider,w,c
  6200                           
  6201                           ; Switch size 1, requested type "space"
  6202                           ; Number of cases is 3, Range of values is 4 to 64
  6203                           ; switch strategies available:
  6204                           ; Name         Instructions Cycles
  6205                           ; simple_byte           10     6 (average)
  6206                           ;	Chosen strategy is simple_byte
  6207  00CD6E  0A04               	xorlw	4	; case 4
  6208  00CD70  B4D8               	btfsc	status,2,c
  6209  00CD72  D7F9               	goto	l329
  6210  00CD74  0A14               	xorlw	20	; case 16
  6211  00CD76  B4D8               	btfsc	status,2,c
  6212  00CD78  D7F2               	goto	l327
  6213  00CD7A  0A50               	xorlw	80	; case 64
  6214  00CD7C  B4D8               	btfsc	status,2,c
  6215  00CD7E  D7F1               	goto	l328
  6216  00CD80  D7F2               	goto	l329
  6217  00CD82                     l326:
  6218                           
  6219                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  6220  00CD82  9A94               	bcf	3988,5,c	;volatile
  6221                           
  6222                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  6223  00CD84  8894               	bsf	3988,4,c	;volatile
  6224                           
  6225                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  6226  00CD86  9694               	bcf	3988,3,c	;volatile
  6227                           
  6228                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  6229  00CD88  8AC6               	bsf	4038,5,c	;volatile
  6230  00CD8A  0012               	return		;funcret
  6231  00CD8C                     __end_of_spiInit:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           postinc0	equ	0xFEE
  6241                           wreg	equ	0xFE8
  6242                           postdec1	equ	0xFE5
  6243                           plusw1	equ	0xFE3
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           plusw2	equ	0xFDB
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _glcdSetCOLMOD *****************
  6252 ;; Defined at:
  6253 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  numBitsPerPi    1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  6258 ;;  rawData         2    7[COMRAM] unsigned short 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;Total ram usage:        3 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    3
  6275 ;; This function calls:
  6276 ;;		_glcdTransfer
  6277 ;; This function is called by:
  6278 ;;		_initGLCD
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text22
  6283  00CE52                     __ptext22:
  6284                           	opt stack 0
  6285  00CE52                     _glcdSetCOLMOD:
  6286                           	opt stack 25
  6287                           
  6288                           ;incstack = 0
  6289                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  6290  00CE52  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  6291                           
  6292                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  6293                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  6294  00CE54  D00D               	goto	l952
  6295  00CE56                     
  6296                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  6297  00CE56  0E00               	movlw	0
  6298  00CE58  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6299  00CE5A  0E03               	movlw	3
  6300  00CE5C  D003               	goto	L8
  6301  00CE5E                     
  6302                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  6303  00CE5E  0E00               	movlw	0
  6304  00CE60  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6305  00CE62  0E05               	movlw	5
  6306  00CE64                     L8:
  6307  00CE64  6E08               	movwf	glcdSetCOLMOD@rawData,c
  6308                           
  6309                           ;GLCD_PIC_V1.1.c: 186: break;
  6310  00CE66  D00D               	goto	l954
  6311  00CE68                     
  6312                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  6313  00CE68  0E00               	movlw	0
  6314  00CE6A  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6315  00CE6C  0E06               	movlw	6
  6316  00CE6E  D7FA               	goto	L8
  6317  00CE70                     l952:
  6318  00CE70  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  6319                           
  6320                           ; Switch size 1, requested type "space"
  6321                           ; Number of cases is 3, Range of values is 12 to 18
  6322                           ; switch strategies available:
  6323                           ; Name         Instructions Cycles
  6324                           ; simple_byte           10     6 (average)
  6325                           ;	Chosen strategy is simple_byte
  6326  00CE72  0A0C               	xorlw	12	; case 12
  6327  00CE74  B4D8               	btfsc	status,2,c
  6328  00CE76  D7EF               	goto	l953
  6329  00CE78  0A1C               	xorlw	28	; case 16
  6330  00CE7A  B4D8               	btfsc	status,2,c
  6331  00CE7C  D7F0               	goto	l955
  6332  00CE7E  0A02               	xorlw	2	; case 18
  6333  00CE80  D7F3               	goto	l957
  6334  00CE82                     l954:
  6335                           
  6336                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  6337  00CE82  0E01               	movlw	1
  6338  00CE84  6E04               	movwf	glcdTransfer@cmd,c
  6339  00CE86  0E2F               	movlw	low GLCD_PIC@INST_COLMOD
  6340  00CE88  6EF6               	movwf	tblptrl,c
  6341  00CE8A                     	if	1	;There is more than 1 active tblptr byte
  6342  00CE8A  0EFF               	movlw	high GLCD_PIC@INST_COLMOD
  6343  00CE8C  6EF7               	movwf	tblptrh,c
  6344  00CE8E                     	endif
  6345  00CE8E                     	if	0	;There are less than 3 active tblptr bytes
  6346  00CE8E                     	endif
  6347  00CE8E  0008               	tblrd		*
  6348  00CE90  50F5               	movf	tablat,w,c
  6349  00CE92  EC7C  F066         	call	_glcdTransfer
  6350                           
  6351                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  6352  00CE96  0E00               	movlw	0
  6353  00CE98  6E04               	movwf	glcdTransfer@cmd,c
  6354  00CE9A  5008               	movf	glcdSetCOLMOD@rawData,w,c
  6355  00CE9C  EC7C  F066         	call	_glcdTransfer
  6356  00CEA0  0012               	return		;funcret
  6357  00CEA2                     __end_of_glcdSetCOLMOD:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           intcon	equ	0xFF2
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           postdec1	equ	0xFE5
  6369                           plusw1	equ	0xFE3
  6370                           fsr1l	equ	0xFE1
  6371                           indf2	equ	0xFDF
  6372                           plusw2	equ	0xFDB
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _glcdDrawRectangle *****************
  6378 ;; Defined at:
  6379 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  XS              1    wreg     unsigned char 
  6382 ;;  XE              1   20[COMRAM] unsigned char 
  6383 ;;  YS              1   21[COMRAM] unsigned char 
  6384 ;;  YE              1   22[COMRAM] unsigned char 
  6385 ;;  color           4   23[COMRAM] unsigned long 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  XS              1   38[COMRAM] unsigned char 
  6388 ;;  i               2   33[COMRAM] unsigned short 
  6389 ;;  colorData       3   35[COMRAM] unsigned char [3]
  6390 ;;  numLoops        2   31[COMRAM] unsigned short 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      void 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6400 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;Total ram usage:       19 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    3
  6407 ;; This function calls:
  6408 ;;		___wmul
  6409 ;;		_glcdTransfer
  6410 ;;		_spiSend
  6411 ;; This function is called by:
  6412 ;;		_testGLCD
  6413 ;;		_initGLCD
  6414 ;;		_glcdDrawPixel
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text23
  6419  00E042                     __ptext23:
  6420                           	opt stack 0
  6421  00E042                     _glcdDrawRectangle:
  6422                           	opt stack 25
  6423                           
  6424                           ;incstack = 0
  6425                           ;glcdDrawRectangle@XS stored from wreg
  6426  00E042  6E27               	movwf	glcdDrawRectangle@XS,c
  6427                           
  6428                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  6429  00E044  BC76               	btfsc	_MADCTLbits,6,c
  6430  00E046  AA76               	btfss	_MADCTLbits,5,c
  6431  00E048  D005               	goto	l933
  6432                           
  6433                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  6434  00E04A  0E03               	movlw	3
  6435  00E04C  2616               	addwf	glcdDrawRectangle@YS,f,c
  6436                           
  6437                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  6438  00E04E  0E03               	movlw	3
  6439  00E050  2617               	addwf	glcdDrawRectangle@YE,f,c
  6440  00E052  D015               	goto	l4369
  6441  00E054                     l933:
  6442                           
  6443                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  6444  00E054  AE76               	btfss	_MADCTLbits,7,c
  6445  00E056  D008               	goto	l935
  6446                           
  6447                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  6448  00E058  0E02               	movlw	2
  6449  00E05A  2616               	addwf	glcdDrawRectangle@YS,f,c
  6450                           
  6451                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  6452  00E05C  0E02               	movlw	2
  6453  00E05E  2617               	addwf	glcdDrawRectangle@YE,f,c
  6454                           
  6455                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  6456  00E060  0E03               	movlw	3
  6457  00E062  2627               	addwf	glcdDrawRectangle@XS,f,c
  6458                           
  6459                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  6460  00E064  0E03               	movlw	3
  6461  00E066  D00E               	goto	L10
  6462  00E068                     l935:
  6463                           
  6464                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  6465  00E068  AC76               	btfss	_MADCTLbits,6,c
  6466  00E06A  D007               	goto	l937
  6467                           
  6468                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  6469  00E06C  0E02               	movlw	2
  6470  00E06E  2616               	addwf	glcdDrawRectangle@YS,f,c
  6471                           
  6472                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  6473  00E070  0E02               	movlw	2
  6474  00E072  2617               	addwf	glcdDrawRectangle@YE,f,c
  6475                           
  6476                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  6477  00E074  2A27               	incf	glcdDrawRectangle@XS,f,c
  6478                           
  6479                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  6480  00E076  2A15               	incf	glcdDrawRectangle@XE,f,c
  6481                           
  6482                           ;GLCD_PIC_V1.1.c: 78: }
  6483  00E078  D006               	goto	l938
  6484  00E07A                     l937:
  6485                           
  6486                           ;GLCD_PIC_V1.1.c: 79: else{
  6487                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  6488  00E07A  2A16               	incf	glcdDrawRectangle@YS,f,c
  6489                           
  6490                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  6491  00E07C  2A17               	incf	glcdDrawRectangle@YE,f,c
  6492  00E07E                     l4369:
  6493                           
  6494                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  6495  00E07E  0E02               	movlw	2
  6496  00E080  2627               	addwf	glcdDrawRectangle@XS,f,c
  6497                           
  6498                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  6499  00E082  0E02               	movlw	2
  6500  00E084                     L10:
  6501  00E084  2615               	addwf	glcdDrawRectangle@XE,f,c
  6502  00E086                     l938:
  6503                           
  6504                           ;GLCD_PIC_V1.1.c: 85: }
  6505                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  6506  00E086  0E01               	movlw	1
  6507  00E088  6E04               	movwf	glcdTransfer@cmd,c
  6508  00E08A  0E37               	movlw	low GLCD_PIC@INST_RASET
  6509  00E08C  6EF6               	movwf	tblptrl,c
  6510  00E08E                     	if	1	;There is more than 1 active tblptr byte
  6511  00E08E  0EFF               	movlw	high GLCD_PIC@INST_RASET
  6512  00E090  6EF7               	movwf	tblptrh,c
  6513  00E092                     	endif
  6514  00E092                     	if	0	;There are less than 3 active tblptr bytes
  6515  00E092                     	endif
  6516  00E092  0008               	tblrd		*
  6517  00E094  50F5               	movf	tablat,w,c
  6518  00E096  EC7C  F066         	call	_glcdTransfer
  6519                           
  6520                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  6521  00E09A  0E00               	movlw	0
  6522  00E09C  6E04               	movwf	glcdTransfer@cmd,c
  6523  00E09E  0E00               	movlw	0
  6524  00E0A0  EC7C  F066         	call	_glcdTransfer
  6525                           
  6526                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  6527  00E0A4  0E00               	movlw	0
  6528  00E0A6  6E04               	movwf	glcdTransfer@cmd,c
  6529  00E0A8  5027               	movf	glcdDrawRectangle@XS,w,c
  6530  00E0AA  EC7C  F066         	call	_glcdTransfer
  6531                           
  6532                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  6533  00E0AE  0E00               	movlw	0
  6534  00E0B0  6E04               	movwf	glcdTransfer@cmd,c
  6535  00E0B2  0E00               	movlw	0
  6536  00E0B4  EC7C  F066         	call	_glcdTransfer
  6537                           
  6538                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  6539  00E0B8  0E00               	movlw	0
  6540  00E0BA  6E04               	movwf	glcdTransfer@cmd,c
  6541  00E0BC  0415               	decf	glcdDrawRectangle@XE,w,c
  6542  00E0BE  EC7C  F066         	call	_glcdTransfer
  6543                           
  6544                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  6545  00E0C2  0E01               	movlw	1
  6546  00E0C4  6E04               	movwf	glcdTransfer@cmd,c
  6547  00E0C6  0E38               	movlw	low GLCD_PIC@INST_CASET
  6548  00E0C8  6EF6               	movwf	tblptrl,c
  6549  00E0CA                     	if	1	;There is more than 1 active tblptr byte
  6550  00E0CA  0EFF               	movlw	high GLCD_PIC@INST_CASET
  6551  00E0CC  6EF7               	movwf	tblptrh,c
  6552  00E0CE                     	endif
  6553  00E0CE                     	if	0	;There are less than 3 active tblptr bytes
  6554  00E0CE                     	endif
  6555  00E0CE  0008               	tblrd		*
  6556  00E0D0  50F5               	movf	tablat,w,c
  6557  00E0D2  EC7C  F066         	call	_glcdTransfer
  6558                           
  6559                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  6560  00E0D6  0E00               	movlw	0
  6561  00E0D8  6E04               	movwf	glcdTransfer@cmd,c
  6562  00E0DA  0E00               	movlw	0
  6563  00E0DC  EC7C  F066         	call	_glcdTransfer
  6564                           
  6565                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  6566  00E0E0  0E00               	movlw	0
  6567  00E0E2  6E04               	movwf	glcdTransfer@cmd,c
  6568  00E0E4  5016               	movf	glcdDrawRectangle@YS,w,c
  6569  00E0E6  EC7C  F066         	call	_glcdTransfer
  6570                           
  6571                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  6572  00E0EA  0E00               	movlw	0
  6573  00E0EC  6E04               	movwf	glcdTransfer@cmd,c
  6574  00E0EE  0E00               	movlw	0
  6575  00E0F0  EC7C  F066         	call	_glcdTransfer
  6576                           
  6577                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  6578  00E0F4  0E00               	movlw	0
  6579  00E0F6  6E04               	movwf	glcdTransfer@cmd,c
  6580  00E0F8  0417               	decf	glcdDrawRectangle@YE,w,c
  6581  00E0FA  EC7C  F066         	call	_glcdTransfer
  6582                           
  6583                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  6584  00E0FE  0E01               	movlw	1
  6585  00E100  6E04               	movwf	glcdTransfer@cmd,c
  6586  00E102  0E36               	movlw	low GLCD_PIC@INST_RAMWR
  6587  00E104  6EF6               	movwf	tblptrl,c
  6588  00E106                     	if	1	;There is more than 1 active tblptr byte
  6589  00E106  0EFF               	movlw	high GLCD_PIC@INST_RAMWR
  6590  00E108  6EF7               	movwf	tblptrh,c
  6591  00E10A                     	endif
  6592  00E10A                     	if	0	;There are less than 3 active tblptr bytes
  6593  00E10A                     	endif
  6594  00E10A  0008               	tblrd		*
  6595  00E10C  50F5               	movf	tablat,w,c
  6596  00E10E  EC7C  F066         	call	_glcdTransfer
  6597                           
  6598                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  6599  00E112  5027               	movf	glcdDrawRectangle@XS,w,c
  6600  00E114  1815               	xorwf	glcdDrawRectangle@XE,w,c
  6601  00E116  A4D8               	btfss	status,2,c
  6602  00E118  D014               	goto	l939
  6603  00E11A  5016               	movf	glcdDrawRectangle@YS,w,c
  6604  00E11C  1817               	xorwf	glcdDrawRectangle@YE,w,c
  6605  00E11E  A4D8               	btfss	status,2,c
  6606  00E120  D010               	goto	l939
  6607                           
  6608                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  6609  00E122  0E00               	movlw	0
  6610  00E124  6E04               	movwf	glcdTransfer@cmd,c
  6611  00E126  5018               	movf	glcdDrawRectangle@color,w,c
  6612  00E128  EC7C  F066         	call	_glcdTransfer
  6613                           
  6614                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  6615  00E12C  0E00               	movlw	0
  6616  00E12E  6E04               	movwf	glcdTransfer@cmd,c
  6617  00E130  5019               	movf	glcdDrawRectangle@color+1,w,c
  6618  00E132  EC7C  F066         	call	_glcdTransfer
  6619                           
  6620                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  6621  00E136  0E00               	movlw	0
  6622  00E138  6E04               	movwf	glcdTransfer@cmd,c
  6623  00E13A  501A               	movf	glcdDrawRectangle@color+2,w,c
  6624  00E13C  EC7C  F066         	call	_glcdTransfer
  6625                           
  6626                           ;GLCD_PIC_V1.1.c: 117: }
  6627  00E140  0012               	return	
  6628  00E142                     l939:
  6629                           
  6630                           ;GLCD_PIC_V1.1.c: 118: else{
  6631                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  6632  00E142  5027               	movf	glcdDrawRectangle@XS,w,c
  6633  00E144  6E1C               	movwf	??_glcdDrawRectangle& (0+255),c
  6634  00E146  6A1D               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  6635  00E148  1E1C               	comf	??_glcdDrawRectangle,f,c
  6636  00E14A  1E1D               	comf	??_glcdDrawRectangle+1,f,c
  6637  00E14C  4A1C               	infsnz	??_glcdDrawRectangle,f,c
  6638  00E14E  2A1D               	incf	??_glcdDrawRectangle+1,f,c
  6639  00E150  5015               	movf	glcdDrawRectangle@XE,w,c
  6640  00E152  241C               	addwf	??_glcdDrawRectangle,w,c
  6641  00E154  6E0F               	movwf	___wmul@multiplier,c
  6642  00E156  0E00               	movlw	0
  6643  00E158  201D               	addwfc	??_glcdDrawRectangle+1,w,c
  6644  00E15A  6E10               	movwf	___wmul@multiplier+1,c
  6645  00E15C  5016               	movf	glcdDrawRectangle@YS,w,c
  6646  00E15E  6E1E               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  6647  00E160  6A1F               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  6648  00E162  1E1E               	comf	??_glcdDrawRectangle+2,f,c
  6649  00E164  1E1F               	comf	??_glcdDrawRectangle+3,f,c
  6650  00E166  4A1E               	infsnz	??_glcdDrawRectangle+2,f,c
  6651  00E168  2A1F               	incf	??_glcdDrawRectangle+3,f,c
  6652  00E16A  5017               	movf	glcdDrawRectangle@YE,w,c
  6653  00E16C  241E               	addwf	??_glcdDrawRectangle+2,w,c
  6654  00E16E  6E11               	movwf	___wmul@multiplicand,c
  6655  00E170  0E00               	movlw	0
  6656  00E172  201F               	addwfc	??_glcdDrawRectangle+3,w,c
  6657  00E174  6E12               	movwf	___wmul@multiplicand+1,c
  6658  00E176  EC69  F066         	call	___wmul	;wreg free
  6659  00E17A  C00F  F020         	movff	?___wmul,glcdDrawRectangle@numLoops
  6660  00E17E  C010  F021         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  6661                           
  6662                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  6663                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  6664  00E182  C018  F024         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  6665                           
  6666                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  6667  00E186  C019  F025         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  6668                           
  6669                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  6670  00E18A  C01A  F026         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  6671                           
  6672                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  6673  00E18E  908C               	bcf	3980,0,c	;volatile
  6674                           
  6675                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  6676  00E190  828C               	bsf	3980,1,c	;volatile
  6677                           
  6678                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  6679  00E192  0E00               	movlw	0
  6680  00E194  6E23               	movwf	glcdDrawRectangle@i+1,c
  6681  00E196  0E00               	movlw	0
  6682  00E198  6E22               	movwf	glcdDrawRectangle@i,c
  6683  00E19A  D00B               	goto	l941
  6684  00E19C                     
  6685                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  6686  00E19C  5024               	movf	glcdDrawRectangle@colorData,w,c
  6687  00E19E  ECC8  F065         	call	_spiSend
  6688                           
  6689                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  6690  00E1A2  5025               	movf	glcdDrawRectangle@colorData+1,w,c
  6691  00E1A4  ECC8  F065         	call	_spiSend
  6692                           
  6693                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  6694  00E1A8  5026               	movf	glcdDrawRectangle@colorData+2,w,c
  6695  00E1AA  ECC8  F065         	call	_spiSend
  6696  00E1AE  4A22               	infsnz	glcdDrawRectangle@i,f,c
  6697  00E1B0  2A23               	incf	glcdDrawRectangle@i+1,f,c
  6698  00E1B2                     l941:
  6699  00E1B2  5020               	movf	glcdDrawRectangle@numLoops,w,c
  6700  00E1B4  5C22               	subwf	glcdDrawRectangle@i,w,c
  6701  00E1B6  5021               	movf	glcdDrawRectangle@numLoops+1,w,c
  6702  00E1B8  5823               	subwfb	glcdDrawRectangle@i+1,w,c
  6703  00E1BA  A0D8               	btfss	status,0,c
  6704  00E1BC  D7EF               	goto	l942
  6705                           
  6706                           ;GLCD_PIC_V1.1.c: 142: }
  6707                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  6708  00E1BE  808C               	bsf	3980,0,c	;volatile
  6709  00E1C0  0012               	return	
  6710  00E1C2                     __end_of_glcdDrawRectangle:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           postinc0	equ	0xFEE
  6720                           wreg	equ	0xFE8
  6721                           postdec1	equ	0xFE5
  6722                           plusw1	equ	0xFE3
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           plusw2	equ	0xFDB
  6726                           fsr2h	equ	0xFDA
  6727                           fsr2l	equ	0xFD9
  6728                           status	equ	0xFD8
  6729                           
  6730 ;; *************** function _glcdTransfer *****************
  6731 ;; Defined at:
  6732 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  byte            1    wreg     unsigned char 
  6735 ;;  cmd             1    3[COMRAM] unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  byte            1    5[COMRAM] unsigned char 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        3 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    2
  6754 ;; This function calls:
  6755 ;;		_spiSend
  6756 ;; This function is called by:
  6757 ;;		_glcdDrawRectangle
  6758 ;;		_glcdSetCOLMOD
  6759 ;;		_initGLCD
  6760 ;;		_glcdSetOrigin
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text24
  6765  00CCF8                     __ptext24:
  6766                           	opt stack 0
  6767  00CCF8                     _glcdTransfer:
  6768                           	opt stack 26
  6769                           
  6770                           ;incstack = 0
  6771                           ;glcdTransfer@byte stored from wreg
  6772  00CCF8  6E06               	movwf	glcdTransfer@byte,c
  6773                           
  6774                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  6775  00CCFA  0404               	decf	glcdTransfer@cmd,w,c
  6776  00CCFC  B4D8               	btfsc	status,2,c
  6777  00CCFE  D003               	goto	u3180
  6778  00CD00  6A05               	clrf	??_glcdTransfer& (0+255),c
  6779  00CD02  2A05               	incf	??_glcdTransfer& (0+255),f,c
  6780  00CD04  D001               	goto	u3198
  6781  00CD06                     u3180:
  6782  00CD06  6A05               	clrf	??_glcdTransfer& (0+255),c
  6783  00CD08                     u3198:
  6784  00CD08  4605               	rlncf	??_glcdTransfer,f,c
  6785  00CD0A  508C               	movf	3980,w,c	;volatile
  6786  00CD0C  1805               	xorwf	??_glcdTransfer,w,c
  6787  00CD0E  0BFD               	andlw	-3
  6788  00CD10  1805               	xorwf	??_glcdTransfer,w,c
  6789  00CD12  6E8C               	movwf	3980,c	;volatile
  6790                           
  6791                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  6792  00CD14  908C               	bcf	3980,0,c	;volatile
  6793                           
  6794                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  6795  00CD16  5006               	movf	glcdTransfer@byte,w,c
  6796  00CD18  ECC8  F065         	call	_spiSend
  6797                           
  6798                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  6799  00CD1C  808C               	bsf	3980,0,c	;volatile
  6800  00CD1E  0012               	return		;funcret
  6801  00CD20                     __end_of_glcdTransfer:
  6802                           	opt stack 0
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           postinc0	equ	0xFEE
  6811                           wreg	equ	0xFE8
  6812                           postdec1	equ	0xFE5
  6813                           plusw1	equ	0xFE3
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           plusw2	equ	0xFDB
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _spiSend *****************
  6822 ;; Defined at:
  6823 ;;		line 33 in file "SPI_PIC.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  val             1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  val             1    2[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;Total ram usage:        1 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    1
  6844 ;; This function calls:
  6845 ;;		_spiTransfer
  6846 ;; This function is called by:
  6847 ;;		_SD_Command
  6848 ;;		_initSD
  6849 ;;		_glcdTransfer
  6850 ;;		_glcdDrawRectangle
  6851 ;;		_SD_SendDummyBytes
  6852 ;;		_SD_SingleBlockWrite
  6853 ;;		_SD_MBW_Send
  6854 ;;		_SD_MBW_Stop
  6855 ;;		_SD_SingleBlockRead
  6856 ;;		_SD_MBR_Receive
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text25
  6861  00CB90                     __ptext25:
  6862                           	opt stack 0
  6863  00CB90                     _spiSend:
  6864                           	opt stack 27
  6865                           
  6866                           ;incstack = 0
  6867                           ;spiSend@val stored from wreg
  6868  00CB90  6E03               	movwf	spiSend@val,c
  6869                           
  6870                           ;SPI_PIC.c: 41: spiTransfer(val);
  6871  00CB92  5003               	movf	spiSend@val,w,c
  6872  00CB94  EC21  F066         	call	_spiTransfer
  6873  00CB98  0012               	return		;funcret
  6874  00CB9A                     __end_of_spiSend:
  6875                           	opt stack 0
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           intcon	equ	0xFF2
  6883                           postinc0	equ	0xFEE
  6884                           wreg	equ	0xFE8
  6885                           postdec1	equ	0xFE5
  6886                           plusw1	equ	0xFE3
  6887                           fsr1l	equ	0xFE1
  6888                           indf2	equ	0xFDF
  6889                           plusw2	equ	0xFDB
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _spiTransfer *****************
  6895 ;; Defined at:
  6896 ;;		line 12 in file "SPI_PIC.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  byteToTransf    1    wreg     unsigned char 
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      unsigned char 
  6903 ;; Registers used:
  6904 ;;		wreg, status,2
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;Total ram usage:        2 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_spiSend
  6920 ;;		_spiReceive
  6921 ;;		_SD_SingleBlockWrite
  6922 ;;		_SD_MBW_Send
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text26
  6927  00CC42                     __ptext26:
  6928                           	opt stack 0
  6929  00CC42                     _spiTransfer:
  6930                           	opt stack 27
  6931                           
  6932                           ;incstack = 0
  6933                           ;spiTransfer@byteToTransfer stored from wreg
  6934  00CC42  6E02               	movwf	spiTransfer@byteToTransfer,c
  6935                           
  6936                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  6937  00CC44  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  6938  00CC48                     l3993:
  6939  00CC48  B69E               	btfsc	3998,3,c	;volatile
  6940  00CC4A  D002               	goto	u3010
  6941  00CC4C  0E01               	movlw	1
  6942  00CC4E  D001               	goto	u3012
  6943  00CC50                     u3010:
  6944  00CC50  0E00               	movlw	0
  6945  00CC52                     u3012:
  6946  00CC52  6E01               	movwf	??_spiTransfer& (0+255),c
  6947  00CC54  B0C7               	btfsc	4039,0,c	;volatile
  6948  00CC56  D002               	goto	u3020
  6949  00CC58  0E01               	movlw	1
  6950  00CC5A  D001               	goto	u3022
  6951  00CC5C                     u3020:
  6952  00CC5C  0E00               	movlw	0
  6953  00CC5E                     u3022:
  6954  00CC5E  1001               	iorwf	??_spiTransfer,w,c
  6955  00CC60  E1F3               	bnz	l3993
  6956                           
  6957                           ;SPI_PIC.c: 30: return SSPBUF;
  6958  00CC62  50C9               	movf	4041,w,c	;volatile
  6959  00CC64  0012               	return	
  6960  00CC66                     __end_of_spiTransfer:
  6961                           	opt stack 0
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           postinc0	equ	0xFEE
  6970                           wreg	equ	0xFE8
  6971                           postdec1	equ	0xFE5
  6972                           plusw1	equ	0xFE3
  6973                           fsr1l	equ	0xFE1
  6974                           indf2	equ	0xFDF
  6975                           plusw2	equ	0xFDB
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980 ;; *************** function _testA2D *****************
  6981 ;; Defined at:
  6982 ;;		line 374 in file "main.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;		None
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;		None
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    4
  7003 ;; This function calls:
  7004 ;;		_lcdInst
  7005 ;;		_printf
  7006 ;;		_readADC
  7007 ;; This function is called by:
  7008 ;;		_main
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text27
  7013  00D3C0                     __ptext27:
  7014                           	opt stack 0
  7015  00D3C0                     _testA2D:
  7016                           	opt stack 26
  7017                           
  7018                           ;main.c: 385: ADCON1 = 0x0B;
  7019                           
  7020                           ;incstack = 0
  7021  00D3C0  0E0B               	movlw	11
  7022  00D3C2  6EC1               	movwf	4033,c	;volatile
  7023  00D3C4                     
  7024                           ;main.c: 387: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7025  00D3C4  0E01               	movlw	1
  7026  00D3C6  ECEC  F065         	call	_lcdInst
  7027  00D3CA  0EC3               	movlw	195
  7028  00D3CC  6E68               	movwf	??_testA2D& (0+255),c
  7029  00D3CE  0ECD               	movlw	205
  7030  00D3D0                     u6087:
  7031  00D3D0  2EE8               	decfsz	wreg,f,c
  7032  00D3D2  D7FE               	bra	u6087
  7033  00D3D4  2E68               	decfsz	??_testA2D& (0+255),f,c
  7034  00D3D6  D7FC               	bra	u6087
  7035  00D3D8  F000               	nop	
  7036                           
  7037                           ;main.c: 388: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7038  00D3DA  0E80               	movlw	128
  7039  00D3DC  ECEC  F065         	call	_lcdInst
  7040  00D3E0  0E41               	movlw	65
  7041  00D3E2  6E68               	movwf	??_testA2D& (0+255),c
  7042  00D3E4  0EEE               	movlw	238
  7043  00D3E6                     u6097:
  7044  00D3E6  2EE8               	decfsz	wreg,f,c
  7045  00D3E8  D7FE               	bra	u6097
  7046  00D3EA  2E68               	decfsz	??_testA2D& (0+255),f,c
  7047  00D3EC  D7FC               	bra	u6097
  7048  00D3EE  D000               	nop2	
  7049                           
  7050                           ;main.c: 389: printf("RA2: %.3x", readADC(2));
  7051  00D3F0  0EE1               	movlw	low STR_7
  7052  00D3F2  6E40               	movwf	printf@f,c
  7053  00D3F4  0EFF               	movlw	high STR_7
  7054  00D3F6  6E41               	movwf	printf@f+1,c
  7055  00D3F8  0E02               	movlw	2
  7056  00D3FA  EC90  F066         	call	_readADC
  7057  00D3FE  C001  F042         	movff	?_readADC,?_printf+2
  7058  00D402  C002  F043         	movff	?_readADC+1,?_printf+3
  7059  00D406  EC72  F07A         	call	_printf	;wreg free
  7060                           
  7061                           ;main.c: 390: lcdInst(0xC0);;
  7062  00D40A  0EC0               	movlw	192
  7063  00D40C  ECEC  F065         	call	_lcdInst
  7064                           
  7065                           ;main.c: 391: printf("RA3: %.3x", readADC(3));
  7066  00D410  0EEB               	movlw	low STR_8
  7067  00D412  6E40               	movwf	printf@f,c
  7068  00D414  0EFF               	movlw	high STR_8
  7069  00D416  6E41               	movwf	printf@f+1,c
  7070  00D418  0E03               	movlw	3
  7071  00D41A  EC90  F066         	call	_readADC
  7072  00D41E  C001  F042         	movff	?_readADC,?_printf+2
  7073  00D422  C002  F043         	movff	?_readADC+1,?_printf+3
  7074  00D426  EC72  F07A         	call	_printf	;wreg free
  7075                           
  7076                           ;main.c: 392: _delay((unsigned long)((100)*(40000000/4000.0)));
  7077  00D42A  0E06               	movlw	6
  7078  00D42C  6E69               	movwf	(??_testA2D+1)& (0+255),c
  7079  00D42E  0E13               	movlw	19
  7080  00D430  6E68               	movwf	??_testA2D& (0+255),c
  7081  00D432  0EAE               	movlw	174
  7082  00D434                     u6107:
  7083  00D434  2EE8               	decfsz	wreg,f,c
  7084  00D436  D7FE               	bra	u6107
  7085  00D438  2E68               	decfsz	??_testA2D& (0+255),f,c
  7086  00D43A  D7FC               	bra	u6107
  7087  00D43C  2E69               	decfsz	(??_testA2D+1)& (0+255),f,c
  7088  00D43E  D7FA               	bra	u6107
  7089                           
  7090                           ;main.c: 393: if(PORTBbits.RB1 == 1){ break; }
  7091  00D440  A281               	btfss	3969,1,c	;volatile
  7092  00D442  D7C0               	goto	l813
  7093                           
  7094                           ;main.c: 394: }
  7095                           ;main.c: 395: ADCON1 = 0x0F;
  7096  00D444  0E0F               	movlw	15
  7097  00D446  6EC1               	movwf	4033,c	;volatile
  7098  00D448  0012               	return		;funcret
  7099  00D44A                     __end_of_testA2D:
  7100                           	opt stack 0
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           postdec1	equ	0xFE5
  7111                           plusw1	equ	0xFE3
  7112                           fsr1l	equ	0xFE1
  7113                           indf2	equ	0xFDF
  7114                           plusw2	equ	0xFDB
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _readADC *****************
  7120 ;; Defined at:
  7121 ;;		line 399 in file "main.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  channel         1    wreg     unsigned char 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  channel         1    4[COMRAM] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  2    0[COMRAM] unsigned short 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:        5 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_testA2D
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text28
  7149  00CD20                     __ptext28:
  7150                           	opt stack 0
  7151  00CD20                     _readADC:
  7152                           	opt stack 29
  7153                           
  7154                           ;incstack = 0
  7155                           ;readADC@channel stored from wreg
  7156  00CD20  6E05               	movwf	readADC@channel,c
  7157                           
  7158                           ;main.c: 408: ADCON0 = (channel & 0x0F) << 2;
  7159  00CD22  C005  F003         	movff	readADC@channel,??_readADC
  7160  00CD26  0E0F               	movlw	15
  7161  00CD28  1603               	andwf	??_readADC,f,c
  7162  00CD2A  90D8               	bcf	status,0,c
  7163  00CD2C  3603               	rlcf	??_readADC,f,c
  7164  00CD2E  90D8               	bcf	status,0,c
  7165  00CD30  3403               	rlcf	??_readADC,w,c
  7166  00CD32  6EC2               	movwf	4034,c	;volatile
  7167                           
  7168                           ;main.c: 409: ADON = 1;
  7169  00CD34  80C2               	bsf	4034,0,c	;volatile
  7170                           
  7171                           ;main.c: 410: ADCON0bits.GO = 1;
  7172  00CD36  82C2               	bsf	4034,1,c	;volatile
  7173  00CD38  B2C2               	btfsc	4034,1,c	;volatile
  7174  00CD3A  D7FE               	goto	l821
  7175                           
  7176                           ;main.c: 412: return (ADRESH << 8) | ADRESL;
  7177  00CD3C  50C3               	movf	4035,w,c	;volatile
  7178  00CD3E  CFC4 F003          	movff	4036,??_readADC	;volatile
  7179  00CD42  6A04               	clrf	(??_readADC+1)& (0+255),c
  7180  00CD44  C003  F004         	movff	??_readADC,??_readADC+1
  7181  00CD48  6A03               	clrf	??_readADC,c
  7182  00CD4A  1003               	iorwf	??_readADC,w,c
  7183  00CD4C  6E01               	movwf	?_readADC,c
  7184  00CD4E  5004               	movf	??_readADC+1,w,c
  7185  00CD50  6E02               	movwf	?_readADC+1,c
  7186  00CD52  0012               	return	
  7187  00CD54                     __end_of_readADC:
  7188                           	opt stack 0
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           postdec1	equ	0xFE5
  7199                           plusw1	equ	0xFE3
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           plusw2	equ	0xFDB
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _printf *****************
  7208 ;; Defined at:
  7209 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  f               2   63[COMRAM] PTR const unsigned char 
  7212 ;;		 -> STR_8(10), STR_7(10), STR_6(9), STR_5(17), 
  7213 ;;		 -> STR_4(15), STR_3(15), STR_2(12), STR_1(11), 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  idx             1   80[COMRAM] unsigned char 
  7216 ;;  tmpval          4   87[COMRAM] struct .
  7217 ;;  val             4   83[COMRAM] unsigned long 
  7218 ;;  fval            3   97[COMRAM] unsigned long 
  7219 ;;  cp              3    0        PTR const unsigned char 
  7220 ;;  prec            2  100[COMRAM] int 
  7221 ;;  width           2   95[COMRAM] int 
  7222 ;;  flag            2   93[COMRAM] unsigned short 
  7223 ;;  exp             2   91[COMRAM] int 
  7224 ;;  ap              2   81[COMRAM] PTR void [1]
  7225 ;;		 -> ?_printf(2), 
  7226 ;;  len             2    0        unsigned int 
  7227 ;;  c               1  102[COMRAM] char 
  7228 ;;  d               1    0        unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  2   63[COMRAM] int 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7238 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;Total ram usage:       40 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    3
  7245 ;; This function calls:
  7246 ;;		___awdiv
  7247 ;;		___ftadd
  7248 ;;		___ftge
  7249 ;;		___ftmul
  7250 ;;		___ftneg
  7251 ;;		___ftsub
  7252 ;;		___fttol
  7253 ;;		___lldiv
  7254 ;;		___llmod
  7255 ;;		___lltoft
  7256 ;;		___wmul
  7257 ;;		__div_to_l_
  7258 ;;		__tdiv_to_l_
  7259 ;;		_fround
  7260 ;;		_isdigit
  7261 ;;		_putch
  7262 ;;		_scale
  7263 ;; This function is called by:
  7264 ;;		_main
  7265 ;;		_testRTCGet
  7266 ;;		_testSDCard
  7267 ;;		_testA2D
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text29
  7272  00F4E4                     __ptext29:
  7273                           	opt stack 0
  7274  00F4E4                     _printf:
  7275                           	opt stack 26
  7276                           
  7277                           ;doprnt.c: 466: va_list ap;
  7278                           ;doprnt.c: 499: signed char c;
  7279                           ;doprnt.c: 501: int width;
  7280                           ;doprnt.c: 504: int prec;
  7281                           ;doprnt.c: 508: unsigned short flag;
  7282                           ;doprnt.c: 515: char d;
  7283                           ;doprnt.c: 516: double fval;
  7284                           ;doprnt.c: 517: int exp;
  7285                           ;doprnt.c: 523: union {
  7286                           ;doprnt.c: 524: unsigned long vd;
  7287                           ;doprnt.c: 525: double integ;
  7288                           ;doprnt.c: 526: } tmpval;
  7289                           ;doprnt.c: 528: unsigned long val;
  7290                           ;doprnt.c: 529: unsigned len;
  7291                           ;doprnt.c: 530: const char * cp;
  7292                           ;doprnt.c: 533: *ap = __va_start();
  7293                           
  7294                           ;incstack = 0
  7295  00F4E4  0E42               	movlw	low (?_printf+2)
  7296  00F4E6  6E52               	movwf	printf@ap,c
  7297  00F4E8  0E00               	movlw	high (?_printf+2)
  7298  00F4EA  6E53               	movwf	printf@ap+1,c
  7299                           
  7300                           ;doprnt.c: 536: while(c = *f++) {
  7301  00F4EC  EF21  F07F         	goto	u5130
  7302  00F4F0                     
  7303                           ;doprnt.c: 538: if(c != '%')
  7304  00F4F0  0E25               	movlw	37
  7305  00F4F2  1867               	xorwf	printf@c,w,c
  7306  00F4F4  B4D8               	btfsc	status,2,c
  7307  00F4F6  D005               	goto	l1012
  7308                           
  7309                           ;doprnt.c: 540: {
  7310                           ;doprnt.c: 541: (putch(c) );
  7311  00F4F8  5067               	movf	printf@c,w,c
  7312  00F4FA  ECF6  F065         	call	_putch
  7313                           
  7314                           ;doprnt.c: 542: continue;
  7315  00F4FE  EF21  F07F         	goto	u5130
  7316  00F502                     l1012:
  7317                           
  7318                           ;doprnt.c: 543: }
  7319                           ;doprnt.c: 546: width = 0;
  7320  00F502  0E00               	movlw	0
  7321  00F504  6E61               	movwf	printf@width+1,c
  7322  00F506  0E00               	movlw	0
  7323  00F508  6E60               	movwf	printf@width,c
  7324                           
  7325                           ;doprnt.c: 548: flag = 0;
  7326  00F50A  0E00               	movlw	0
  7327  00F50C  6E5F               	movwf	printf@flag+1,c
  7328  00F50E  0E00               	movlw	0
  7329  00F510  6E5E               	movwf	printf@flag,c
  7330                           
  7331                           ;doprnt.c: 551: switch(*f) {
  7332                           
  7333                           ;doprnt.c: 550: for(;;) {
  7334  00F512  D003               	goto	l1014
  7335  00F514                     
  7336                           ;doprnt.c: 580: flag |= 0x04;
  7337  00F514  845E               	bsf	printf@flag,2,c
  7338                           
  7339                           ;doprnt.c: 581: f++;
  7340  00F516  4A40               	infsnz	printf@f,f,c
  7341  00F518  2A41               	incf	printf@f+1,f,c
  7342  00F51A                     l1014:
  7343  00F51A  C040  FFF6         	movff	printf@f,tblptrl
  7344  00F51E  C041  FFF7         	movff	printf@f+1,tblptrh
  7345  00F522                     	if	0	;tblptru may be non-zero
  7346  00F522                     	endif
  7347  00F522                     	if	0	;tblptru may be non-zero
  7348  00F522                     	endif
  7349  00F522  0008               	tblrd		*
  7350  00F524  50F5               	movf	tablat,w,c
  7351                           
  7352                           ; Switch size 1, requested type "space"
  7353                           ; Number of cases is 1, Range of values is 48 to 48
  7354                           ; switch strategies available:
  7355                           ; Name         Instructions Cycles
  7356                           ; simple_byte            4     3 (average)
  7357                           ;	Chosen strategy is simple_byte
  7358  00F526  0A30               	xorlw	48	; case 48
  7359  00F528  B4D8               	btfsc	status,2,c
  7360  00F52A  D7F4               	goto	l1015
  7361                           
  7362                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7363                           
  7364                           ;doprnt.c: 586: }
  7365                           
  7366                           ;doprnt.c: 585: break;
  7367  00F52C  C040  FFF6         	movff	printf@f,tblptrl
  7368  00F530  C041  FFF7         	movff	printf@f+1,tblptrh
  7369  00F534                     	if	0	;tblptru may be non-zero
  7370  00F534                     	endif
  7371  00F534                     	if	0	;tblptru may be non-zero
  7372  00F534                     	endif
  7373  00F534  0008               	tblrd		*
  7374  00F536  50F5               	movf	tablat,w,c
  7375  00F538  EC00  F066         	call	_isdigit
  7376  00F53C  A0D8               	btfss	status,0,c
  7377  00F53E  D032               	goto	u4610
  7378                           
  7379                           ;doprnt.c: 598: width = 0;
  7380  00F540  0E00               	movlw	0
  7381  00F542  6E61               	movwf	printf@width+1,c
  7382  00F544  0E00               	movlw	0
  7383  00F546  6E60               	movwf	printf@width,c
  7384  00F548                     
  7385                           ;doprnt.c: 600: width *= 10;
  7386  00F548  C060  F00F         	movff	printf@width,___wmul@multiplier
  7387  00F54C  C061  F010         	movff	printf@width+1,___wmul@multiplier+1
  7388  00F550  0E00               	movlw	0
  7389  00F552  6E12               	movwf	___wmul@multiplicand+1,c
  7390  00F554  0E0A               	movlw	10
  7391  00F556  6E11               	movwf	___wmul@multiplicand,c
  7392  00F558  EC69  F066         	call	___wmul	;wreg free
  7393  00F55C  C00F  F060         	movff	?___wmul,printf@width
  7394  00F560  C010  F061         	movff	?___wmul+1,printf@width+1
  7395                           
  7396                           ;doprnt.c: 601: width += *f++ - '0';
  7397  00F564  0ED0               	movlw	208
  7398  00F566  6E48               	movwf	??_printf& (0+255),c
  7399  00F568  0EFF               	movlw	255
  7400  00F56A  6E49               	movwf	(??_printf+1)& (0+255),c
  7401  00F56C  C040  FFF6         	movff	printf@f,tblptrl
  7402  00F570  C041  FFF7         	movff	printf@f+1,tblptrh
  7403  00F574                     	if	0	;tblptru may be non-zero
  7404  00F574                     	endif
  7405  00F574                     	if	0	;tblptru may be non-zero
  7406  00F574                     	endif
  7407  00F574  0008               	tblrd		*
  7408  00F576  50F5               	movf	tablat,w,c
  7409  00F578  6E4A               	movwf	(??_printf+2)& (0+255),c
  7410  00F57A  6A4B               	clrf	(??_printf+3)& (0+255),c
  7411  00F57C  5048               	movf	??_printf,w,c
  7412  00F57E  264A               	addwf	??_printf+2,f,c
  7413  00F580  5049               	movf	??_printf+1,w,c
  7414  00F582  224B               	addwfc	??_printf+3,f,c
  7415  00F584  504A               	movf	??_printf+2,w,c
  7416  00F586  2660               	addwf	printf@width,f,c
  7417  00F588  504B               	movf	??_printf+3,w,c
  7418  00F58A  2261               	addwfc	printf@width+1,f,c
  7419  00F58C  4A40               	infsnz	printf@f,f,c
  7420  00F58E  2A41               	incf	printf@f+1,f,c
  7421                           
  7422                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7423  00F590  C040  FFF6         	movff	printf@f,tblptrl
  7424  00F594  C041  FFF7         	movff	printf@f+1,tblptrh
  7425  00F598                     	if	0	;tblptru may be non-zero
  7426  00F598                     	endif
  7427  00F598                     	if	0	;tblptru may be non-zero
  7428  00F598                     	endif
  7429  00F598  0008               	tblrd		*
  7430  00F59A  50F5               	movf	tablat,w,c
  7431  00F59C  EC00  F066         	call	_isdigit
  7432  00F5A0  B0D8               	btfsc	status,0,c
  7433  00F5A2  D7D2               	goto	l1020
  7434  00F5A4                     u4610:
  7435                           
  7436                           ;doprnt.c: 608: }
  7437                           ;doprnt.c: 611: if(*f == '.') {
  7438  00F5A4  C040  FFF6         	movff	printf@f,tblptrl
  7439  00F5A8  C041  FFF7         	movff	printf@f+1,tblptrh
  7440  00F5AC                     	if	0	;tblptru may be non-zero
  7441  00F5AC                     	endif
  7442  00F5AC                     	if	0	;tblptru may be non-zero
  7443  00F5AC                     	endif
  7444  00F5AC  0008               	tblrd		*
  7445  00F5AE  50F5               	movf	tablat,w,c
  7446  00F5B0  0A2E               	xorlw	46
  7447  00F5B2  A4D8               	btfss	status,2,c
  7448  00F5B4  D02E               	goto	l1022
  7449                           
  7450                           ;doprnt.c: 612: flag |= 0x4000;
  7451  00F5B6  8C5F               	bsf	printf@flag+1,6,c
  7452                           
  7453                           ;doprnt.c: 613: f++;
  7454  00F5B8  4A40               	infsnz	printf@f,f,c
  7455  00F5BA  2A41               	incf	printf@f+1,f,c
  7456                           
  7457                           ;doprnt.c: 620: {
  7458                           ;doprnt.c: 621: prec = 0;
  7459  00F5BC  0E00               	movlw	0
  7460  00F5BE  6E66               	movwf	printf@prec+1,c
  7461  00F5C0  0E00               	movlw	0
  7462  00F5C2  6E65               	movwf	printf@prec,c
  7463                           
  7464                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7465  00F5C4  D01B               	goto	l1023
  7466  00F5C6                     
  7467                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7468  00F5C6  C065  F00F         	movff	printf@prec,___wmul@multiplier
  7469  00F5CA  C066  F010         	movff	printf@prec+1,___wmul@multiplier+1
  7470  00F5CE  0E00               	movlw	0
  7471  00F5D0  6E12               	movwf	___wmul@multiplicand+1,c
  7472  00F5D2  0E0A               	movlw	10
  7473  00F5D4  6E11               	movwf	___wmul@multiplicand,c
  7474  00F5D6  EC69  F066         	call	___wmul	;wreg free
  7475  00F5DA  C040  FFF6         	movff	printf@f,tblptrl
  7476  00F5DE  C041  FFF7         	movff	printf@f+1,tblptrh
  7477  00F5E2                     	if	0	;tblptru may be non-zero
  7478  00F5E2                     	endif
  7479  00F5E2                     	if	0	;tblptru may be non-zero
  7480  00F5E2                     	endif
  7481  00F5E2  0008               	tblrd		*
  7482  00F5E4  50F5               	movf	tablat,w,c
  7483  00F5E6  260F               	addwf	?___wmul,f,c
  7484  00F5E8  0E00               	movlw	0
  7485  00F5EA  2210               	addwfc	?___wmul+1,f,c
  7486  00F5EC  0ED0               	movlw	208
  7487  00F5EE  240F               	addwf	?___wmul,w,c
  7488  00F5F0  6E65               	movwf	printf@prec,c
  7489  00F5F2  0EFF               	movlw	255
  7490  00F5F4  2010               	addwfc	?___wmul+1,w,c
  7491  00F5F6  6E66               	movwf	printf@prec+1,c
  7492  00F5F8  4A40               	infsnz	printf@f,f,c
  7493  00F5FA  2A41               	incf	printf@f+1,f,c
  7494  00F5FC                     l1023:
  7495  00F5FC  C040  FFF6         	movff	printf@f,tblptrl
  7496  00F600  C041  FFF7         	movff	printf@f+1,tblptrh
  7497  00F604                     	if	0	;tblptru may be non-zero
  7498  00F604                     	endif
  7499  00F604                     	if	0	;tblptru may be non-zero
  7500  00F604                     	endif
  7501  00F604  0008               	tblrd		*
  7502  00F606  50F5               	movf	tablat,w,c
  7503  00F608  EC00  F066         	call	_isdigit
  7504  00F60C  A0D8               	btfss	status,0,c
  7505  00F60E  D009               	goto	l1027
  7506  00F610  D7DA               	goto	l1024
  7507  00F612                     l1022:
  7508                           
  7509                           ;doprnt.c: 626: prec = 0;
  7510  00F612  0E00               	movlw	0
  7511  00F614  6E66               	movwf	printf@prec+1,c
  7512  00F616  0E00               	movlw	0
  7513  00F618  6E65               	movwf	printf@prec,c
  7514                           
  7515                           ;doprnt.c: 628: flag |= 0x1000;
  7516  00F61A  885F               	bsf	printf@flag+1,4,c
  7517                           
  7518                           ;doprnt.c: 630: }
  7519                           ;doprnt.c: 635: switch(c = *f++) {
  7520  00F61C  D002               	goto	l1027
  7521  00F61E                     
  7522                           ;doprnt.c: 663: flag |= 0x400;
  7523  00F61E  845F               	bsf	printf@flag+1,2,c
  7524                           
  7525                           ;doprnt.c: 723: break;
  7526                           
  7527                           ;doprnt.c: 718: case 'x':
  7528                           
  7529                           ;doprnt.c: 664: break;
  7530  00F620  D013               	goto	l1031
  7531  00F622                     l1027:
  7532  00F622  C040  FFF6         	movff	printf@f,tblptrl
  7533  00F626  C041  FFF7         	movff	printf@f+1,tblptrh
  7534  00F62A  4A40               	infsnz	printf@f,f,c
  7535  00F62C  2A41               	incf	printf@f+1,f,c
  7536  00F62E                     	if	0	;tblptru may be non-zero
  7537  00F62E                     	endif
  7538  00F62E                     	if	0	;tblptru may be non-zero
  7539  00F62E                     	endif
  7540  00F62E  0008               	tblrd		*
  7541  00F630  CFF5 F067          	movff	tablat,printf@c
  7542  00F634  5067               	movf	printf@c,w,c
  7543                           
  7544                           ; Switch size 1, requested type "space"
  7545                           ; Number of cases is 3, Range of values is 0 to 120
  7546                           ; switch strategies available:
  7547                           ; Name         Instructions Cycles
  7548                           ; simple_byte           10     6 (average)
  7549                           ;	Chosen strategy is simple_byte
  7550  00F636  0A00               	xorlw	0	; case 0
  7551  00F638  B4D8               	btfsc	status,2,c
  7552  00F63A  0012               	return	
  7553  00F63C  0A66               	xorlw	102	; case 102
  7554  00F63E  B4D8               	btfsc	status,2,c
  7555  00F640  D7EE               	goto	l1030
  7556  00F642  0A1E               	xorlw	30	; case 120
  7557  00F644  A4D8               	btfss	status,2,c
  7558  00F646  D3FD               	goto	u5130
  7559  00F648                     l1031:
  7560                           
  7561                           ;doprnt.c: 825: if(flag & (0x700)) {
  7562  00F648  0E07               	movlw	7
  7563  00F64A  145F               	andwf	printf@flag+1,w,c
  7564  00F64C  B4D8               	btfsc	status,2,c
  7565  00F64E  D2EE               	goto	l1034
  7566                           
  7567                           ;doprnt.c: 827: if(flag & 0x1000)
  7568  00F650  A85F               	btfss	printf@flag+1,4,c
  7569  00F652  D004               	goto	l1035
  7570                           
  7571                           ;doprnt.c: 829: prec = 6;
  7572  00F654  0E00               	movlw	0
  7573  00F656  6E66               	movwf	printf@prec+1,c
  7574  00F658  0E06               	movlw	6
  7575  00F65A  6E65               	movwf	printf@prec,c
  7576  00F65C                     l1035:
  7577                           
  7578                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7579  00F65C  C052  FFD9         	movff	printf@ap,fsr2l
  7580  00F660  C053  FFDA         	movff	printf@ap+1,fsr2h
  7581  00F664  CFDE F062          	movff	postinc2,printf@fval
  7582  00F668  CFDE F063          	movff	postinc2,printf@fval+1
  7583  00F66C  CFDD F064          	movff	postdec2,printf@fval+2
  7584  00F670  0E03               	movlw	3
  7585  00F672  2652               	addwf	printf@ap,f,c
  7586  00F674  0E00               	movlw	0
  7587  00F676  2253               	addwfc	printf@ap+1,f,c
  7588                           
  7589                           ;doprnt.c: 831: if(fval < 0.0) {
  7590  00F678  AE64               	btfss	printf@fval+2,7,c
  7591  00F67A  D010               	goto	l1036
  7592                           
  7593                           ;doprnt.c: 832: fval = -fval;
  7594  00F67C  C062  F001         	movff	printf@fval,___ftneg@f1
  7595  00F680  C063  F002         	movff	printf@fval+1,___ftneg@f1+1
  7596  00F684  C064  F003         	movff	printf@fval+2,___ftneg@f1+2
  7597  00F688  EC0F  F066         	call	___ftneg	;wreg free
  7598  00F68C  C001  F062         	movff	?___ftneg,printf@fval
  7599  00F690  C002  F063         	movff	?___ftneg+1,printf@fval+1
  7600  00F694  C003  F064         	movff	?___ftneg+2,printf@fval+2
  7601                           
  7602                           ;doprnt.c: 833: flag |= 0x03;
  7603  00F698  0E03               	movlw	3
  7604  00F69A  125E               	iorwf	printf@flag,f,c
  7605  00F69C                     l1036:
  7606                           
  7607                           ;doprnt.c: 834: }
  7608                           ;doprnt.c: 835: exp = 0;
  7609  00F69C  0E00               	movlw	0
  7610  00F69E  6E5D               	movwf	printf@exp+1,c
  7611  00F6A0  0E00               	movlw	0
  7612  00F6A2  6E5C               	movwf	printf@exp,c
  7613                           
  7614                           ;doprnt.c: 836: if( fval!=0) {
  7615  00F6A4  5062               	movf	printf@fval,w,c
  7616  00F6A6  1063               	iorwf	printf@fval+1,w,c
  7617  00F6A8  1064               	iorwf	printf@fval+2,w,c
  7618  00F6AA  B4D8               	btfsc	status,2,c
  7619  00F6AC  D083               	goto	l1041
  7620                           
  7621                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7622  00F6AE  0E82               	movlw	130
  7623  00F6B0  6E48               	movwf	??_printf& (0+255),c
  7624  00F6B2  0EFF               	movlw	255
  7625  00F6B4  6E49               	movwf	(??_printf+1)& (0+255),c
  7626  00F6B6  C062  F04A         	movff	printf@fval,??_printf+2
  7627  00F6BA  C063  F04B         	movff	printf@fval+1,??_printf+3
  7628  00F6BE  C064  F04C         	movff	printf@fval+2,??_printf+4
  7629  00F6C2  C065  F04D         	movff	printf@fval+3,??_printf+5
  7630  00F6C6  0E10               	movlw	16
  7631  00F6C8  D005               	goto	u4680
  7632  00F6CA                     u4685:
  7633  00F6CA  90D8               	bcf	status,0,c
  7634  00F6CC  324D               	rrcf	??_printf+5,f,c
  7635  00F6CE  324C               	rrcf	??_printf+4,f,c
  7636  00F6D0  324B               	rrcf	??_printf+3,f,c
  7637  00F6D2  324A               	rrcf	??_printf+2,f,c
  7638  00F6D4                     u4680:
  7639  00F6D4  2EE8               	decfsz	wreg,f,c
  7640  00F6D6  D7F9               	goto	u4685
  7641  00F6D8  504A               	movf	??_printf+2,w,c
  7642  00F6DA  2448               	addwf	??_printf,w,c
  7643  00F6DC  6E5C               	movwf	printf@exp,c
  7644  00F6DE  0E00               	movlw	0
  7645  00F6E0  2049               	addwfc	??_printf+1,w,c
  7646  00F6E2  6E5D               	movwf	printf@exp+1,c
  7647                           
  7648                           ;doprnt.c: 838: exp--;
  7649  00F6E4  065C               	decf	printf@exp,f,c
  7650  00F6E6  A0D8               	btfss	status,0,c
  7651  00F6E8  065D               	decf	printf@exp+1,f,c
  7652                           
  7653                           ;doprnt.c: 839: exp *= 3;
  7654  00F6EA  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  7655  00F6EE  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  7656  00F6F2  0E00               	movlw	0
  7657  00F6F4  6E12               	movwf	___wmul@multiplicand+1,c
  7658  00F6F6  0E03               	movlw	3
  7659  00F6F8  6E11               	movwf	___wmul@multiplicand,c
  7660  00F6FA  EC69  F066         	call	___wmul	;wreg free
  7661  00F6FE  C00F  F05C         	movff	?___wmul,printf@exp
  7662  00F702  C010  F05D         	movff	?___wmul+1,printf@exp+1
  7663                           
  7664                           ;doprnt.c: 840: exp /= 10;
  7665  00F706  C05C  F007         	movff	printf@exp,___awdiv@dividend
  7666  00F70A  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  7667  00F70E  0E00               	movlw	0
  7668  00F710  6E0A               	movwf	___awdiv@divisor+1,c
  7669  00F712  0E0A               	movlw	10
  7670  00F714  6E09               	movwf	___awdiv@divisor,c
  7671  00F716  EC5B  F069         	call	___awdiv	;wreg free
  7672  00F71A  C007  F05C         	movff	?___awdiv,printf@exp
  7673  00F71E  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  7674                           
  7675                           ;doprnt.c: 841: if(exp < 0)
  7676  00F722  AE5D               	btfss	printf@exp+1,7,c
  7677  00F724  D003               	goto	l1038
  7678                           
  7679                           ;doprnt.c: 842: exp--;
  7680  00F726  065C               	decf	printf@exp,f,c
  7681  00F728  A0D8               	btfss	status,0,c
  7682  00F72A  065D               	decf	printf@exp+1,f,c
  7683  00F72C                     l1038:
  7684                           
  7685                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7686  00F72C  505C               	movf	printf@exp,w,c
  7687  00F72E  0800               	sublw	0
  7688  00F730  EC66  F074         	call	_scale
  7689  00F734  C024  F058         	movff	?_scale,printf@tmpval
  7690  00F738  C025  F059         	movff	?_scale+1,printf@tmpval+1
  7691  00F73C  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  7692                           
  7693                           ;doprnt.c: 847: tmpval.integ *= fval;
  7694  00F740  C058  F015         	movff	printf@tmpval,___ftmul@f1
  7695  00F744  C059  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  7696  00F748  C05A  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  7697  00F74C  C062  F018         	movff	printf@fval,___ftmul@f2
  7698  00F750  C063  F019         	movff	printf@fval+1,___ftmul@f2+1
  7699  00F754  C064  F01A         	movff	printf@fval+2,___ftmul@f2+2
  7700  00F758  ECAC  F06C         	call	___ftmul	;wreg free
  7701  00F75C  C015  F058         	movff	?___ftmul,printf@tmpval
  7702  00F760  C016  F059         	movff	?___ftmul+1,printf@tmpval+1
  7703  00F764  C017  F05A         	movff	?___ftmul+2,printf@tmpval+2
  7704                           
  7705                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7706  00F768  C058  F001         	movff	printf@tmpval,___ftge@ff1
  7707  00F76C  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  7708  00F770  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  7709  00F774  0E00               	movlw	0
  7710  00F776  6E04               	movwf	___ftge@ff2,c
  7711  00F778  0E80               	movlw	128
  7712  00F77A  6E05               	movwf	___ftge@ff2+1,c
  7713  00F77C  0E3F               	movlw	63
  7714  00F77E  6E06               	movwf	___ftge@ff2+2,c
  7715  00F780  EC25  F06A         	call	___ftge	;wreg free
  7716  00F784  B0D8               	btfsc	status,0,c
  7717  00F786  D004               	goto	l1039
  7718                           
  7719                           ;doprnt.c: 849: exp--;
  7720  00F788  065C               	decf	printf@exp,f,c
  7721  00F78A  A0D8               	btfss	status,0,c
  7722  00F78C  065D               	decf	printf@exp+1,f,c
  7723  00F78E  D012               	goto	l1041
  7724  00F790                     l1039:
  7725                           
  7726                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7727  00F790  C058  F001         	movff	printf@tmpval,___ftge@ff1
  7728  00F794  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  7729  00F798  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  7730  00F79C  0E00               	movlw	0
  7731  00F79E  6E04               	movwf	___ftge@ff2,c
  7732  00F7A0  0E20               	movlw	32
  7733  00F7A2  6E05               	movwf	___ftge@ff2+1,c
  7734  00F7A4  0E41               	movlw	65
  7735  00F7A6  6E06               	movwf	___ftge@ff2+2,c
  7736  00F7A8  EC25  F06A         	call	___ftge	;wreg free
  7737  00F7AC  A0D8               	btfss	status,0,c
  7738  00F7AE  D002               	goto	l1041
  7739                           
  7740                           ;doprnt.c: 851: exp++;
  7741  00F7B0  4A5C               	infsnz	printf@exp,f,c
  7742  00F7B2  2A5D               	incf	printf@exp+1,f,c
  7743  00F7B4                     l1041:
  7744                           
  7745                           ;doprnt.c: 852: }
  7746                           ;doprnt.c: 1112: if(prec <= 12)
  7747  00F7B4  BE66               	btfsc	printf@prec+1,7,c
  7748  00F7B6  D006               	goto	u4720
  7749  00F7B8  5066               	movf	printf@prec+1,w,c
  7750  00F7BA  E11B               	bnz	l5183
  7751  00F7BC  0E0D               	movlw	13
  7752  00F7BE  5C65               	subwf	printf@prec,w,c
  7753  00F7C0  B0D8               	btfsc	status,0,c
  7754  00F7C2  D017               	goto	l1042
  7755  00F7C4                     u4720:
  7756                           
  7757                           ;doprnt.c: 1113: fval += fround(prec);
  7758  00F7C4  C062  F02E         	movff	printf@fval,___ftadd@f1
  7759  00F7C8  C063  F02F         	movff	printf@fval+1,___ftadd@f1+1
  7760  00F7CC  C064  F030         	movff	printf@fval+2,___ftadd@f1+2
  7761  00F7D0  5065               	movf	printf@prec,w,c
  7762  00F7D2  ECB7  F071         	call	_fround
  7763  00F7D6  C024  F031         	movff	?_fround,___ftadd@f2
  7764  00F7DA  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  7765  00F7DE  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  7766  00F7E2  ECE1  F070         	call	___ftadd	;wreg free
  7767  00F7E6  C02E  F062         	movff	?___ftadd,printf@fval
  7768  00F7EA  C02F  F063         	movff	?___ftadd+1,printf@fval+1
  7769  00F7EE  C030  F064         	movff	?___ftadd+2,printf@fval+2
  7770  00F7F2                     l1042:
  7771  00F7F2                     l5183:
  7772                           
  7773                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7774  00F7F2  BE5D               	btfsc	printf@exp+1,7,c
  7775  00F7F4  D006               	goto	u4730
  7776  00F7F6  505D               	movf	printf@exp+1,w,c
  7777  00F7F8  E11E               	bnz	l5191
  7778  00F7FA  0E0A               	movlw	10
  7779  00F7FC  5C5C               	subwf	printf@exp,w,c
  7780  00F7FE  B0D8               	btfsc	status,0,c
  7781  00F800  D01A               	goto	u4760
  7782  00F802                     u4730:
  7783  00F802  5062               	movf	printf@fval,w,c
  7784  00F804  1063               	iorwf	printf@fval+1,w,c
  7785  00F806  1064               	iorwf	printf@fval+2,w,c
  7786  00F808  B4D8               	btfsc	status,2,c
  7787  00F80A  D051               	goto	l1043
  7788  00F80C  C062  F02B         	movff	printf@fval,___fttol@f1
  7789  00F810  C063  F02C         	movff	printf@fval+1,___fttol@f1+1
  7790  00F814  C064  F02D         	movff	printf@fval+2,___fttol@f1+2
  7791  00F818  EC32  F06C         	call	___fttol	;wreg free
  7792  00F81C  502B               	movf	?___fttol,w,c
  7793  00F81E  102C               	iorwf	?___fttol+1,w,c
  7794  00F820  102D               	iorwf	?___fttol+2,w,c
  7795  00F822  102E               	iorwf	?___fttol+3,w,c
  7796  00F824  B4D8               	btfsc	status,2,c
  7797  00F826  BE5D               	btfsc	printf@exp+1,7,c
  7798  00F828  D042               	goto	l1043
  7799  00F82A  505D               	movf	printf@exp+1,w,c
  7800  00F82C  E104               	bnz	l5191
  7801  00F82E  0E02               	movlw	2
  7802  00F830  5C5C               	subwf	printf@exp,w,c
  7803  00F832  A0D8               	btfss	status,0,c
  7804  00F834  D03C               	goto	l1043
  7805  00F836                     u4760:
  7806  00F836                     l5191:
  7807                           
  7808                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7809  00F836  C058  F001         	movff	printf@tmpval,___ftge@ff1
  7810  00F83A  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  7811  00F83E  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  7812  00F842  0E70               	movlw	112
  7813  00F844  6E04               	movwf	___ftge@ff2,c
  7814  00F846  0E89               	movlw	137
  7815  00F848  6E05               	movwf	___ftge@ff2+1,c
  7816  00F84A  0E40               	movlw	64
  7817  00F84C  6E06               	movwf	___ftge@ff2+2,c
  7818  00F84E  EC25  F06A         	call	___ftge	;wreg free
  7819  00F852  B0D8               	btfsc	status,0,c
  7820  00F854  D002               	goto	l1046
  7821                           
  7822                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7823  00F856  0EF7               	movlw	247
  7824  00F858  D001               	goto	L11
  7825  00F85A                     l1046:
  7826                           
  7827                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7828  00F85A  0EF8               	movlw	248
  7829  00F85C                     L11:
  7830  00F85C  265C               	addwf	printf@exp,f,c
  7831  00F85E  0EFF               	movlw	255
  7832  00F860  225D               	addwfc	printf@exp+1,f,c
  7833                           
  7834                           ;doprnt.c: 1124: }
  7835                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7836  00F862  505C               	movf	printf@exp,w,c
  7837  00F864  EC66  F074         	call	_scale
  7838  00F868  C024  F058         	movff	?_scale,printf@tmpval
  7839  00F86C  C025  F059         	movff	?_scale+1,printf@tmpval+1
  7840  00F870  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  7841                           
  7842                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7843  00F874  C062  F001         	movff	printf@fval,__tdiv_to_l_@f1
  7844  00F878  C063  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7845  00F87C  C064  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7846  00F880  C058  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  7847  00F884  C059  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7848  00F888  C05A  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7849  00F88C  ECD7  F06E         	call	__tdiv_to_l_	;wreg free
  7850  00F890  C001  F054         	movff	?__tdiv_to_l_,printf@val
  7851  00F894  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  7852  00F898  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  7853  00F89C  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  7854                           
  7855                           ;doprnt.c: 1129: fval = 0.0;
  7856  00F8A0  0E00               	movlw	0
  7857  00F8A2  6E62               	movwf	printf@fval,c
  7858  00F8A4  0E00               	movlw	0
  7859  00F8A6  6E63               	movwf	printf@fval+1,c
  7860  00F8A8  0E00               	movlw	0
  7861  00F8AA  6E64               	movwf	printf@fval+2,c
  7862                           
  7863                           ;doprnt.c: 1130: } else {
  7864  00F8AC  D032               	goto	l1052
  7865  00F8AE                     l1043:
  7866                           
  7867                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7868  00F8AE  C062  F02B         	movff	printf@fval,___fttol@f1
  7869  00F8B2  C063  F02C         	movff	printf@fval+1,___fttol@f1+1
  7870  00F8B6  C064  F02D         	movff	printf@fval+2,___fttol@f1+2
  7871  00F8BA  EC32  F06C         	call	___fttol	;wreg free
  7872  00F8BE  C02B  F054         	movff	?___fttol,printf@val
  7873  00F8C2  C02C  F055         	movff	?___fttol+1,printf@val+1
  7874  00F8C6  C02D  F056         	movff	?___fttol+2,printf@val+2
  7875  00F8CA  C02E  F057         	movff	?___fttol+3,printf@val+3
  7876                           
  7877                           ;doprnt.c: 1132: fval -= (double)val;
  7878  00F8CE  C062  F03A         	movff	printf@fval,___ftsub@f1
  7879  00F8D2  C063  F03B         	movff	printf@fval+1,___ftsub@f1+1
  7880  00F8D6  C064  F03C         	movff	printf@fval+2,___ftsub@f1+2
  7881  00F8DA  C054  F009         	movff	printf@val,___lltoft@c
  7882  00F8DE  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  7883  00F8E2  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  7884  00F8E6  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  7885  00F8EA  EC7E  F067         	call	___lltoft	;wreg free
  7886  00F8EE  C009  F03D         	movff	?___lltoft,___ftsub@f2
  7887  00F8F2  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  7888  00F8F6  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  7889  00F8FA  ECE3  F066         	call	___ftsub	;wreg free
  7890  00F8FE  C03A  F062         	movff	?___ftsub,printf@fval
  7891  00F902  C03B  F063         	movff	?___ftsub+1,printf@fval+1
  7892  00F906  C03C  F064         	movff	?___ftsub+2,printf@fval+2
  7893                           
  7894                           ;doprnt.c: 1133: exp = 0;
  7895  00F90A  0E00               	movlw	0
  7896  00F90C  6E5D               	movwf	printf@exp+1,c
  7897  00F90E  0E00               	movlw	0
  7898  00F910  6E5C               	movwf	printf@exp,c
  7899  00F912                     l1052:
  7900                           
  7901                           ;doprnt.c: 1134: }
  7902                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7903  00F912  0E01               	movlw	1
  7904  00F914  6E67               	movwf	printf@c,c
  7905  00F916                     l5211:
  7906  00F916  0E0A               	movlw	10
  7907  00F918  1867               	xorwf	printf@c,w,c
  7908  00F91A  B4D8               	btfsc	status,2,c
  7909  00F91C  D018               	goto	u4800
  7910                           
  7911                           ;doprnt.c: 1137: if(val < dpowers[c])
  7912  00F91E  5067               	movf	printf@c,w,c
  7913  00F920  0D04               	mullw	4
  7914  00F922  0E5F               	movlw	low _dpowers
  7915  00F924  24F3               	addwf	prodl,w,c
  7916  00F926  6EF6               	movwf	tblptrl,c
  7917  00F928  0EFE               	movlw	high _dpowers
  7918  00F92A  20F4               	addwfc	prodh,w,c
  7919  00F92C  6EF7               	movwf	tblptrh,c
  7920  00F92E                     	if	0	;There are less than 3 active tblptr bytes
  7921  00F92E                     	endif
  7922  00F92E  0009               	tblrd		*+
  7923  00F930  50F5               	movf	tablat,w,c
  7924  00F932  5C54               	subwf	printf@val,w,c
  7925  00F934  0009               	tblrd		*+
  7926  00F936  50F5               	movf	tablat,w,c
  7927  00F938  5855               	subwfb	printf@val+1,w,c
  7928  00F93A  0009               	tblrd		*+
  7929  00F93C  50F5               	movf	tablat,w,c
  7930  00F93E  5856               	subwfb	printf@val+2,w,c
  7931  00F940  0009               	tblrd		*+
  7932  00F942  50F5               	movf	tablat,w,c
  7933  00F944  5857               	subwfb	printf@val+3,w,c
  7934  00F946  A0D8               	btfss	status,0,c
  7935  00F948  D002               	goto	u4800
  7936                           
  7937                           ;doprnt.c: 1138: break;
  7938  00F94A  2A67               	incf	printf@c,f,c
  7939  00F94C  D7E4               	goto	l5211
  7940  00F94E                     u4800:
  7941                           
  7942                           ;doprnt.c: 1142: width -= prec + c + exp;
  7943  00F94E  C067  F048         	movff	printf@c,??_printf
  7944  00F952  6A49               	clrf	(??_printf+1)& (0+255),c
  7945  00F954  BE48               	btfsc	??_printf& (0+255),7,c
  7946  00F956  0649               	decf	(??_printf+1)& (0+255),f,c
  7947  00F958  5065               	movf	printf@prec,w,c
  7948  00F95A  2648               	addwf	??_printf,f,c
  7949  00F95C  5066               	movf	printf@prec+1,w,c
  7950  00F95E  2249               	addwfc	??_printf+1,f,c
  7951  00F960  505C               	movf	printf@exp,w,c
  7952  00F962  2648               	addwf	??_printf,f,c
  7953  00F964  505D               	movf	printf@exp+1,w,c
  7954  00F966  2249               	addwfc	??_printf+1,f,c
  7955  00F968  5048               	movf	??_printf,w,c
  7956  00F96A  5E60               	subwf	printf@width,f,c
  7957  00F96C  5049               	movf	??_printf+1,w,c
  7958  00F96E  5A61               	subwfb	printf@width+1,f,c
  7959                           
  7960                           ;doprnt.c: 1143: if(
  7961                           ;doprnt.c: 1147: prec)
  7962  00F970  5065               	movf	printf@prec,w,c
  7963  00F972  1066               	iorwf	printf@prec+1,w,c
  7964  00F974  B4D8               	btfsc	status,2,c
  7965  00F976  D003               	goto	l1056
  7966                           
  7967                           ;doprnt.c: 1148: width--;
  7968  00F978  0660               	decf	printf@width,f,c
  7969  00F97A  A0D8               	btfss	status,0,c
  7970  00F97C  0661               	decf	printf@width+1,f,c
  7971  00F97E                     l1056:
  7972                           
  7973                           ;doprnt.c: 1149: if(flag & 0x03)
  7974  00F97E  0E03               	movlw	3
  7975  00F980  145E               	andwf	printf@flag,w,c
  7976  00F982  6E48               	movwf	??_printf& (0+255),c
  7977  00F984  0E00               	movlw	0
  7978  00F986  145F               	andwf	printf@flag+1,w,c
  7979  00F988  6E49               	movwf	(??_printf+1)& (0+255),c
  7980  00F98A  5048               	movf	??_printf,w,c
  7981  00F98C  1049               	iorwf	??_printf+1,w,c
  7982  00F98E  B4D8               	btfsc	status,2,c
  7983  00F990  D003               	goto	l1057
  7984                           
  7985                           ;doprnt.c: 1150: width--;
  7986  00F992  0660               	decf	printf@width,f,c
  7987  00F994  A0D8               	btfss	status,0,c
  7988  00F996  0661               	decf	printf@width+1,f,c
  7989  00F998                     l1057:
  7990                           
  7991                           ;doprnt.c: 1153: if(flag & 0x04) {
  7992  00F998  A45E               	btfss	printf@flag,2,c
  7993  00F99A  D022               	goto	l1064
  7994                           
  7995                           ;doprnt.c: 1157: if(flag & 0x03)
  7996  00F99C  0E03               	movlw	3
  7997  00F99E  145E               	andwf	printf@flag,w,c
  7998  00F9A0  6E48               	movwf	??_printf& (0+255),c
  7999  00F9A2  0E00               	movlw	0
  8000  00F9A4  145F               	andwf	printf@flag+1,w,c
  8001  00F9A6  6E49               	movwf	(??_printf+1)& (0+255),c
  8002  00F9A8  5048               	movf	??_printf,w,c
  8003  00F9AA  1049               	iorwf	??_printf+1,w,c
  8004  00F9AC  B4D8               	btfsc	status,2,c
  8005  00F9AE  D00A               	goto	l1060
  8006                           
  8007                           ;doprnt.c: 1159: (putch('-') );
  8008  00F9B0  0E2D               	movlw	45
  8009  00F9B2  ECF6  F065         	call	_putch
  8010                           
  8011                           ;doprnt.c: 1168: while(width > 0) {
  8012  00F9B6  D006               	goto	l1060
  8013  00F9B8                     l5237:
  8014                           
  8015                           ;doprnt.c: 1169: (putch('0') );
  8016  00F9B8  0E30               	movlw	48
  8017  00F9BA  ECF6  F065         	call	_putch
  8018                           
  8019                           ;doprnt.c: 1170: width--;
  8020  00F9BE  0660               	decf	printf@width,f,c
  8021  00F9C0  A0D8               	btfss	status,0,c
  8022  00F9C2  0661               	decf	printf@width+1,f,c
  8023  00F9C4                     l1060:
  8024  00F9C4  BE61               	btfsc	printf@width+1,7,c
  8025  00F9C6  D065               	goto	l1068
  8026  00F9C8  5061               	movf	printf@width+1,w,c
  8027  00F9CA  E1F6               	bnz	l5237
  8028  00F9CC  0460               	decf	printf@width,w,c
  8029  00F9CE  A0D8               	btfss	status,0,c
  8030  00F9D0  D060               	goto	l1068
  8031  00F9D2  D7F2               	goto	l1061
  8032  00F9D4                     l5243:
  8033                           
  8034                           ;doprnt.c: 1181: (putch(' ') );
  8035  00F9D4  0E20               	movlw	32
  8036  00F9D6  ECF6  F065         	call	_putch
  8037                           
  8038                           ;doprnt.c: 1182: width--;
  8039  00F9DA  0660               	decf	printf@width,f,c
  8040  00F9DC  A0D8               	btfss	status,0,c
  8041  00F9DE  0661               	decf	printf@width+1,f,c
  8042  00F9E0                     l1064:
  8043  00F9E0  BE61               	btfsc	printf@width+1,7,c
  8044  00F9E2  D005               	goto	u4860
  8045  00F9E4  5061               	movf	printf@width+1,w,c
  8046  00F9E6  E1F6               	bnz	l5243
  8047  00F9E8  0460               	decf	printf@width,w,c
  8048  00F9EA  B0D8               	btfsc	status,0,c
  8049  00F9EC  D7F3               	goto	l1065
  8050  00F9EE                     u4860:
  8051                           
  8052                           ;doprnt.c: 1183: }
  8053                           ;doprnt.c: 1188: if(flag & 0x03)
  8054  00F9EE  0E03               	movlw	3
  8055  00F9F0  145E               	andwf	printf@flag,w,c
  8056  00F9F2  6E48               	movwf	??_printf& (0+255),c
  8057  00F9F4  0E00               	movlw	0
  8058  00F9F6  145F               	andwf	printf@flag+1,w,c
  8059  00F9F8  6E49               	movwf	(??_printf+1)& (0+255),c
  8060  00F9FA  5048               	movf	??_printf,w,c
  8061  00F9FC  1049               	iorwf	??_printf+1,w,c
  8062  00F9FE  B4D8               	btfsc	status,2,c
  8063  00FA00  D048               	goto	l1068
  8064                           
  8065                           ;doprnt.c: 1190: (putch('-') );
  8066  00FA02  0E2D               	movlw	45
  8067  00FA04  ECF6  F065         	call	_putch
  8068                           
  8069                           ;doprnt.c: 1195: }
  8070                           ;doprnt.c: 1196: while(c--) {
  8071  00FA08  D044               	goto	l1068
  8072  00FA0A                     
  8073                           ;doprnt.c: 1200: {
  8074                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8075  00FA0A  C054  F001         	movff	printf@val,___lldiv@dividend
  8076  00FA0E  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8077  00FA12  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8078  00FA16  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8079  00FA1A  5067               	movf	printf@c,w,c
  8080  00FA1C  0D04               	mullw	4
  8081  00FA1E  0E5F               	movlw	low _dpowers
  8082  00FA20  24F3               	addwf	prodl,w,c
  8083  00FA22  6EF6               	movwf	tblptrl,c
  8084  00FA24  0EFE               	movlw	high _dpowers
  8085  00FA26  20F4               	addwfc	prodh,w,c
  8086  00FA28  6EF7               	movwf	tblptrh,c
  8087  00FA2A                     	if	0	;There are less than 3 active tblptr bytes
  8088  00FA2A                     	endif
  8089  00FA2A  0009               	tblrd		*+
  8090  00FA2C  CFF5 F005          	movff	tablat,___lldiv@divisor
  8091  00FA30  0009               	tblrd		*+
  8092  00FA32  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8093  00FA36  0009               	tblrd		*+
  8094  00FA38  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8095  00FA3C  000A               	tblrd		*-
  8096  00FA3E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8097  00FA42  EC1A  F069         	call	___lldiv	;wreg free
  8098  00FA46  C001  F058         	movff	?___lldiv,printf@tmpval
  8099  00FA4A  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  8100  00FA4E  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  8101  00FA52  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  8102                           
  8103                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8104  00FA56  C058  F001         	movff	printf@tmpval,___llmod@dividend
  8105  00FA5A  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8106  00FA5E  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8107  00FA62  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8108  00FA66  0E0A               	movlw	10
  8109  00FA68  6E05               	movwf	___llmod@divisor,c
  8110  00FA6A  0E00               	movlw	0
  8111  00FA6C  6E06               	movwf	___llmod@divisor+1,c
  8112  00FA6E  0E00               	movlw	0
  8113  00FA70  6E07               	movwf	___llmod@divisor+2,c
  8114  00FA72  0E00               	movlw	0
  8115  00FA74  6E08               	movwf	___llmod@divisor+3,c
  8116  00FA76  EC3B  F068         	call	___llmod	;wreg free
  8117  00FA7A  C001  F058         	movff	?___llmod,printf@tmpval
  8118  00FA7E  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  8119  00FA82  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  8120  00FA86  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  8121                           
  8122                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8123  00FA8A  5058               	movf	printf@tmpval,w,c
  8124  00FA8C  0F30               	addlw	48
  8125  00FA8E  ECF6  F065         	call	_putch
  8126  00FA92                     l1068:
  8127  00FA92  0667               	decf	printf@c,f,c
  8128  00FA94  2867               	incf	printf@c,w,c
  8129  00FA96  B4D8               	btfsc	status,2,c
  8130  00FA98  D007               	goto	l1071
  8131  00FA9A  D7B7               	goto	l1069
  8132  00FA9C                     l5261:
  8133                           
  8134                           ;doprnt.c: 1208: (putch('0') );
  8135  00FA9C  0E30               	movlw	48
  8136  00FA9E  ECF6  F065         	call	_putch
  8137                           
  8138                           ;doprnt.c: 1209: exp--;
  8139  00FAA2  065C               	decf	printf@exp,f,c
  8140  00FAA4  A0D8               	btfss	status,0,c
  8141  00FAA6  065D               	decf	printf@exp+1,f,c
  8142  00FAA8                     l1071:
  8143  00FAA8  BE5D               	btfsc	printf@exp+1,7,c
  8144  00FAAA  D005               	goto	u4890
  8145  00FAAC  505D               	movf	printf@exp+1,w,c
  8146  00FAAE  E1F6               	bnz	l5261
  8147  00FAB0  045C               	decf	printf@exp,w,c
  8148  00FAB2  B0D8               	btfsc	status,0,c
  8149  00FAB4  D7F3               	goto	l1072
  8150  00FAB6                     u4890:
  8151                           
  8152                           ;doprnt.c: 1210: }
  8153                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8154  00FAB6  BE66               	btfsc	printf@prec+1,7,c
  8155  00FAB8  D009               	goto	l1074
  8156  00FABA  5066               	movf	printf@prec+1,w,c
  8157  00FABC  E104               	bnz	u4900
  8158  00FABE  0E09               	movlw	9
  8159  00FAC0  5C65               	subwf	printf@prec,w,c
  8160  00FAC2  A0D8               	btfss	status,0,c
  8161  00FAC4  D003               	goto	l1074
  8162  00FAC6                     u4900:
  8163                           
  8164                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8165  00FAC6  0E08               	movlw	8
  8166  00FAC8  6E67               	movwf	printf@c,c
  8167  00FACA  D002               	goto	l1075
  8168  00FACC                     l1074:
  8169                           
  8170                           ;doprnt.c: 1213: else
  8171                           ;doprnt.c: 1214: c = prec;
  8172  00FACC  C065  F067         	movff	printf@prec,printf@c
  8173  00FAD0                     l1075:
  8174                           
  8175                           ;doprnt.c: 1215: prec -= c;
  8176  00FAD0  5067               	movf	printf@c,w,c
  8177  00FAD2  5E65               	subwf	printf@prec,f,c
  8178  00FAD4  0E00               	movlw	0
  8179  00FAD6  BE67               	btfsc	printf@c,7,c
  8180  00FAD8  0EFF               	movlw	255
  8181  00FADA  5A66               	subwfb	printf@prec+1,f,c
  8182                           
  8183                           ;doprnt.c: 1219: if(c)
  8184  00FADC  5067               	movf	printf@c,w,c
  8185  00FADE  B4D8               	btfsc	status,2,c
  8186  00FAE0  D003               	goto	l1076
  8187                           
  8188                           ;doprnt.c: 1221: (putch('.') );
  8189  00FAE2  0E2E               	movlw	46
  8190  00FAE4  ECF6  F065         	call	_putch
  8191  00FAE8                     l1076:
  8192                           
  8193                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8194  00FAE8  5067               	movf	printf@c,w,c
  8195  00FAEA  EC66  F074         	call	_scale
  8196  00FAEE  C024  F04E         	movff	?_scale,_printf$2425
  8197  00FAF2  C025  F04F         	movff	?_scale+1,_printf$2425+1
  8198  00FAF6  C026  F050         	movff	?_scale+2,_printf$2425+2
  8199                           
  8200                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8201  00FAFA  C062  F018         	movff	printf@fval,___ftmul@f2
  8202  00FAFE  C063  F019         	movff	printf@fval+1,___ftmul@f2+1
  8203  00FB02  C064  F01A         	movff	printf@fval+2,___ftmul@f2+2
  8204  00FB06  C04E  F015         	movff	_printf$2425,___ftmul@f1
  8205  00FB0A  C04F  F016         	movff	_printf$2425+1,___ftmul@f1+1
  8206  00FB0E  C050  F017         	movff	_printf$2425+2,___ftmul@f1+2
  8207  00FB12  ECAC  F06C         	call	___ftmul	;wreg free
  8208  00FB16  C015  F02B         	movff	?___ftmul,___fttol@f1
  8209  00FB1A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  8210  00FB1E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  8211  00FB22  EC32  F06C         	call	___fttol	;wreg free
  8212  00FB26  C02B  F054         	movff	?___fttol,printf@val
  8213  00FB2A  C02C  F055         	movff	?___fttol+1,printf@val+1
  8214  00FB2E  C02D  F056         	movff	?___fttol+2,printf@val+2
  8215  00FB32  C02E  F057         	movff	?___fttol+3,printf@val+3
  8216                           
  8217                           ;doprnt.c: 1228: while(c--) {
  8218  00FB36  D06A               	goto	l1077
  8219  00FB38                     
  8220                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8221  00FB38  C054  F001         	movff	printf@val,___lldiv@dividend
  8222  00FB3C  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8223  00FB40  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8224  00FB44  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8225  00FB48  5067               	movf	printf@c,w,c
  8226  00FB4A  0D04               	mullw	4
  8227  00FB4C  0E5F               	movlw	low _dpowers
  8228  00FB4E  24F3               	addwf	prodl,w,c
  8229  00FB50  6EF6               	movwf	tblptrl,c
  8230  00FB52  0EFE               	movlw	high _dpowers
  8231  00FB54  20F4               	addwfc	prodh,w,c
  8232  00FB56  6EF7               	movwf	tblptrh,c
  8233  00FB58                     	if	0	;There are less than 3 active tblptr bytes
  8234  00FB58                     	endif
  8235  00FB58  0009               	tblrd		*+
  8236  00FB5A  CFF5 F005          	movff	tablat,___lldiv@divisor
  8237  00FB5E  0009               	tblrd		*+
  8238  00FB60  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8239  00FB64  0009               	tblrd		*+
  8240  00FB66  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8241  00FB6A  000A               	tblrd		*-
  8242  00FB6C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8243  00FB70  EC1A  F069         	call	___lldiv	;wreg free
  8244  00FB74  C001  F058         	movff	?___lldiv,printf@tmpval
  8245  00FB78  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  8246  00FB7C  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  8247  00FB80  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  8248                           
  8249                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8250  00FB84  C058  F001         	movff	printf@tmpval,___llmod@dividend
  8251  00FB88  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8252  00FB8C  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8253  00FB90  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8254  00FB94  0E0A               	movlw	10
  8255  00FB96  6E05               	movwf	___llmod@divisor,c
  8256  00FB98  0E00               	movlw	0
  8257  00FB9A  6E06               	movwf	___llmod@divisor+1,c
  8258  00FB9C  0E00               	movlw	0
  8259  00FB9E  6E07               	movwf	___llmod@divisor+2,c
  8260  00FBA0  0E00               	movlw	0
  8261  00FBA2  6E08               	movwf	___llmod@divisor+3,c
  8262  00FBA4  EC3B  F068         	call	___llmod	;wreg free
  8263  00FBA8  C001  F058         	movff	?___llmod,printf@tmpval
  8264  00FBAC  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  8265  00FBB0  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  8266  00FBB4  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  8267                           
  8268                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  8269  00FBB8  5058               	movf	printf@tmpval,w,c
  8270  00FBBA  0F30               	addlw	48
  8271  00FBBC  ECF6  F065         	call	_putch
  8272                           
  8273                           ;doprnt.c: 1232: val %= dpowers[c];
  8274  00FBC0  C054  F001         	movff	printf@val,___llmod@dividend
  8275  00FBC4  C055  F002         	movff	printf@val+1,___llmod@dividend+1
  8276  00FBC8  C056  F003         	movff	printf@val+2,___llmod@dividend+2
  8277  00FBCC  C057  F004         	movff	printf@val+3,___llmod@dividend+3
  8278  00FBD0  5067               	movf	printf@c,w,c
  8279  00FBD2  0D04               	mullw	4
  8280  00FBD4  0E5F               	movlw	low _dpowers
  8281  00FBD6  24F3               	addwf	prodl,w,c
  8282  00FBD8  6EF6               	movwf	tblptrl,c
  8283  00FBDA  0EFE               	movlw	high _dpowers
  8284  00FBDC  20F4               	addwfc	prodh,w,c
  8285  00FBDE  6EF7               	movwf	tblptrh,c
  8286  00FBE0                     	if	0	;There are less than 3 active tblptr bytes
  8287  00FBE0                     	endif
  8288  00FBE0  0009               	tblrd		*+
  8289  00FBE2  CFF5 F005          	movff	tablat,___llmod@divisor
  8290  00FBE6  0009               	tblrd		*+
  8291  00FBE8  CFF5 F006          	movff	tablat,___llmod@divisor+1
  8292  00FBEC  0009               	tblrd		*+
  8293  00FBEE  CFF5 F007          	movff	tablat,___llmod@divisor+2
  8294  00FBF2  000A               	tblrd		*-
  8295  00FBF4  CFF5 F008          	movff	tablat,___llmod@divisor+3
  8296  00FBF8  EC3B  F068         	call	___llmod	;wreg free
  8297  00FBFC  C001  F054         	movff	?___llmod,printf@val
  8298  00FC00  C002  F055         	movff	?___llmod+1,printf@val+1
  8299  00FC04  C003  F056         	movff	?___llmod+2,printf@val+2
  8300  00FC08  C004  F057         	movff	?___llmod+3,printf@val+3
  8301  00FC0C                     l1077:
  8302  00FC0C  0667               	decf	printf@c,f,c
  8303  00FC0E  2867               	incf	printf@c,w,c
  8304  00FC10  B4D8               	btfsc	status,2,c
  8305  00FC12  D007               	goto	l1080
  8306  00FC14  D791               	goto	l1078
  8307  00FC16                     
  8308                           ;doprnt.c: 1236: (putch('0') );
  8309  00FC16  0E30               	movlw	48
  8310  00FC18  ECF6  F065         	call	_putch
  8311                           
  8312                           ;doprnt.c: 1237: prec--;
  8313  00FC1C  0665               	decf	printf@prec,f,c
  8314  00FC1E  A0D8               	btfss	status,0,c
  8315  00FC20  0666               	decf	printf@prec+1,f,c
  8316  00FC22                     l1080:
  8317  00FC22  5065               	movf	printf@prec,w,c
  8318  00FC24  1066               	iorwf	printf@prec+1,w,c
  8319  00FC26  B4D8               	btfsc	status,2,c
  8320  00FC28  D10C               	goto	u5130
  8321  00FC2A  D7F5               	goto	l1081
  8322  00FC2C                     l1034:
  8323                           
  8324                           ;doprnt.c: 1246: }
  8325                           ;doprnt.c: 1273: {
  8326                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8327  00FC2C  C052  FFD9         	movff	printf@ap,fsr2l
  8328  00FC30  C053  FFDA         	movff	printf@ap+1,fsr2h
  8329  00FC34  CFDE F048          	movff	postinc2,??_printf
  8330  00FC38  CFDD F049          	movff	postdec2,??_printf+1
  8331  00FC3C  C048  F054         	movff	??_printf,printf@val
  8332  00FC40  C049  F055         	movff	??_printf+1,printf@val+1
  8333  00FC44  6A56               	clrf	printf@val+2,c
  8334  00FC46  6A57               	clrf	printf@val+3,c
  8335  00FC48  0E02               	movlw	2
  8336  00FC4A  2652               	addwf	printf@ap,f,c
  8337  00FC4C  0E00               	movlw	0
  8338  00FC4E  2253               	addwfc	printf@ap+1,f,c
  8339                           
  8340                           ;doprnt.c: 1287: }
  8341                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8342  00FC50  5065               	movf	printf@prec,w,c
  8343  00FC52  1066               	iorwf	printf@prec+1,w,c
  8344  00FC54  A4D8               	btfss	status,2,c
  8345  00FC56  D008               	goto	l1083
  8346  00FC58  5054               	movf	printf@val,w,c
  8347  00FC5A  1055               	iorwf	printf@val+1,w,c
  8348  00FC5C  1056               	iorwf	printf@val+2,w,c
  8349  00FC5E  1057               	iorwf	printf@val+3,w,c
  8350  00FC60  A4D8               	btfss	status,2,c
  8351  00FC62  D002               	goto	l1083
  8352                           
  8353                           ;doprnt.c: 1291: prec++;
  8354  00FC64  4A65               	infsnz	printf@prec,f,c
  8355  00FC66  2A66               	incf	printf@prec+1,f,c
  8356  00FC68                     l1083:
  8357                           
  8358                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8359  00FC68  0E01               	movlw	1
  8360  00FC6A  6E67               	movwf	printf@c,c
  8361  00FC6C                     l5307:
  8362  00FC6C  0E08               	movlw	8
  8363  00FC6E  1867               	xorwf	printf@c,w,c
  8364  00FC70  B4D8               	btfsc	status,2,c
  8365  00FC72  D018               	goto	u4980
  8366                           
  8367                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8368  00FC74  5067               	movf	printf@c,w,c
  8369  00FC76  0D04               	mullw	4
  8370  00FC78  0ED5               	movlw	low _hexpowers
  8371  00FC7A  24F3               	addwf	prodl,w,c
  8372  00FC7C  6EF6               	movwf	tblptrl,c
  8373  00FC7E  0EFE               	movlw	high _hexpowers
  8374  00FC80  20F4               	addwfc	prodh,w,c
  8375  00FC82  6EF7               	movwf	tblptrh,c
  8376  00FC84                     	if	0	;There are less than 3 active tblptr bytes
  8377  00FC84                     	endif
  8378  00FC84  0009               	tblrd		*+
  8379  00FC86  50F5               	movf	tablat,w,c
  8380  00FC88  5C54               	subwf	printf@val,w,c
  8381  00FC8A  0009               	tblrd		*+
  8382  00FC8C  50F5               	movf	tablat,w,c
  8383  00FC8E  5855               	subwfb	printf@val+1,w,c
  8384  00FC90  0009               	tblrd		*+
  8385  00FC92  50F5               	movf	tablat,w,c
  8386  00FC94  5856               	subwfb	printf@val+2,w,c
  8387  00FC96  0009               	tblrd		*+
  8388  00FC98  50F5               	movf	tablat,w,c
  8389  00FC9A  5857               	subwfb	printf@val+3,w,c
  8390  00FC9C  A0D8               	btfss	status,0,c
  8391  00FC9E  D002               	goto	u4980
  8392                           
  8393                           ;doprnt.c: 1318: break;
  8394  00FCA0  2A67               	incf	printf@c,f,c
  8395  00FCA2  D7E4               	goto	l5307
  8396  00FCA4                     u4980:
  8397                           
  8398                           ;doprnt.c: 1339: if(c < prec)
  8399  00FCA4  0E80               	movlw	128
  8400  00FCA6  BE67               	btfsc	printf@c,7,c
  8401  00FCA8  0E7F               	movlw	127
  8402  00FCAA  6E48               	movwf	??_printf& (0+255),c
  8403  00FCAC  5065               	movf	printf@prec,w,c
  8404  00FCAE  5C67               	subwf	printf@c,w,c
  8405  00FCB0  5066               	movf	printf@prec+1,w,c
  8406  00FCB2  0A80               	xorlw	128
  8407  00FCB4  5848               	subwfb	??_printf& (0+255),w,c
  8408  00FCB6  B0D8               	btfsc	status,0,c
  8409  00FCB8  D003               	goto	l1087
  8410                           
  8411                           ;doprnt.c: 1340: c = prec;
  8412  00FCBA  C065  F067         	movff	printf@prec,printf@c
  8413  00FCBE  D010               	goto	l1089
  8414  00FCC0                     l1087:
  8415                           
  8416                           ;doprnt.c: 1341: else if(prec < c)
  8417  00FCC0  5066               	movf	printf@prec+1,w,c
  8418  00FCC2  0A80               	xorlw	128
  8419  00FCC4  6E48               	movwf	??_printf& (0+255),c
  8420  00FCC6  5067               	movf	printf@c,w,c
  8421  00FCC8  5C65               	subwf	printf@prec,w,c
  8422  00FCCA  0E80               	movlw	128
  8423  00FCCC  BE67               	btfsc	printf@c,7,c
  8424  00FCCE  0E7F               	movlw	127
  8425  00FCD0  5848               	subwfb	??_printf& (0+255),w,c
  8426  00FCD2  B0D8               	btfsc	status,0,c
  8427  00FCD4  D005               	goto	l1089
  8428                           
  8429                           ;doprnt.c: 1342: prec = c;
  8430  00FCD6  5067               	movf	printf@c,w,c
  8431  00FCD8  6E65               	movwf	printf@prec,c
  8432  00FCDA  6A66               	clrf	printf@prec+1,c
  8433  00FCDC  BE65               	btfsc	printf@prec,7,c
  8434  00FCDE  0666               	decf	printf@prec+1,f,c
  8435  00FCE0                     l1089:
  8436                           
  8437                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8438  00FCE0  5060               	movf	printf@width,w,c
  8439  00FCE2  1061               	iorwf	printf@width+1,w,c
  8440  00FCE4  B4D8               	btfsc	status,2,c
  8441  00FCE6  D00D               	goto	l1090
  8442  00FCE8  0E03               	movlw	3
  8443  00FCEA  145E               	andwf	printf@flag,w,c
  8444  00FCEC  6E48               	movwf	??_printf& (0+255),c
  8445  00FCEE  0E00               	movlw	0
  8446  00FCF0  145F               	andwf	printf@flag+1,w,c
  8447  00FCF2  6E49               	movwf	(??_printf+1)& (0+255),c
  8448  00FCF4  5048               	movf	??_printf,w,c
  8449  00FCF6  1049               	iorwf	??_printf+1,w,c
  8450  00FCF8  B4D8               	btfsc	status,2,c
  8451  00FCFA  D003               	goto	l1090
  8452                           
  8453                           ;doprnt.c: 1346: width--;
  8454  00FCFC  0660               	decf	printf@width,f,c
  8455  00FCFE  A0D8               	btfss	status,0,c
  8456  00FD00  0661               	decf	printf@width+1,f,c
  8457  00FD02                     l1090:
  8458                           
  8459                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8460  00FD02  AC5F               	btfss	printf@flag+1,6,c
  8461  00FD04  D013               	goto	l1093
  8462                           
  8463                           ;doprnt.c: 1349: if(width > prec)
  8464  00FD06  5060               	movf	printf@width,w,c
  8465  00FD08  5C65               	subwf	printf@prec,w,c
  8466  00FD0A  5066               	movf	printf@prec+1,w,c
  8467  00FD0C  0A80               	xorlw	128
  8468  00FD0E  6E48               	movwf	??_printf& (0+255),c
  8469  00FD10  5061               	movf	printf@width+1,w,c
  8470  00FD12  0A80               	xorlw	128
  8471  00FD14  5848               	subwfb	??_printf& (0+255),w,c
  8472  00FD16  B0D8               	btfsc	status,0,c
  8473  00FD18  D005               	goto	l1092
  8474                           
  8475                           ;doprnt.c: 1350: width -= prec;
  8476  00FD1A  5065               	movf	printf@prec,w,c
  8477  00FD1C  5E60               	subwf	printf@width,f,c
  8478  00FD1E  5066               	movf	printf@prec+1,w,c
  8479  00FD20  5A61               	subwfb	printf@width+1,f,c
  8480  00FD22  D004               	goto	l1093
  8481  00FD24                     l1092:
  8482                           
  8483                           ;doprnt.c: 1351: else
  8484                           ;doprnt.c: 1352: width = 0;
  8485  00FD24  0E00               	movlw	0
  8486  00FD26  6E61               	movwf	printf@width+1,c
  8487  00FD28  0E00               	movlw	0
  8488  00FD2A  6E60               	movwf	printf@width,c
  8489  00FD2C                     l1093:
  8490                           
  8491                           ;doprnt.c: 1353: }
  8492                           ;doprnt.c: 1381: if(width > c)
  8493  00FD2C  0E80               	movlw	128
  8494  00FD2E  BE67               	btfsc	printf@c,7,c
  8495  00FD30  0E7F               	movlw	127
  8496  00FD32  6E48               	movwf	??_printf& (0+255),c
  8497  00FD34  5060               	movf	printf@width,w,c
  8498  00FD36  5C67               	subwf	printf@c,w,c
  8499  00FD38  5061               	movf	printf@width+1,w,c
  8500  00FD3A  0A80               	xorlw	128
  8501  00FD3C  5848               	subwfb	??_printf& (0+255),w,c
  8502  00FD3E  B0D8               	btfsc	status,0,c
  8503  00FD40  D007               	goto	l1094
  8504                           
  8505                           ;doprnt.c: 1382: width -= c;
  8506  00FD42  5067               	movf	printf@c,w,c
  8507  00FD44  5E60               	subwf	printf@width,f,c
  8508  00FD46  0E00               	movlw	0
  8509  00FD48  BE67               	btfsc	printf@c,7,c
  8510  00FD4A  0EFF               	movlw	255
  8511  00FD4C  5A61               	subwfb	printf@width+1,f,c
  8512  00FD4E  D004               	goto	l1095
  8513  00FD50                     l1094:
  8514                           
  8515                           ;doprnt.c: 1383: else
  8516                           ;doprnt.c: 1384: width = 0;
  8517  00FD50  0E00               	movlw	0
  8518  00FD52  6E61               	movwf	printf@width+1,c
  8519  00FD54  0E00               	movlw	0
  8520  00FD56  6E60               	movwf	printf@width,c
  8521  00FD58                     l1095:
  8522                           
  8523                           ;doprnt.c: 1387: if(flag & 0x04) {
  8524  00FD58  A45E               	btfss	printf@flag,2,c
  8525  00FD5A  D018               	goto	l1096
  8526                           
  8527                           ;doprnt.c: 1392: if(flag & 0x03)
  8528  00FD5C  0E03               	movlw	3
  8529  00FD5E  145E               	andwf	printf@flag,w,c
  8530  00FD60  6E48               	movwf	??_printf& (0+255),c
  8531  00FD62  0E00               	movlw	0
  8532  00FD64  145F               	andwf	printf@flag+1,w,c
  8533  00FD66  6E49               	movwf	(??_printf+1)& (0+255),c
  8534  00FD68  5048               	movf	??_printf,w,c
  8535  00FD6A  1049               	iorwf	??_printf+1,w,c
  8536  00FD6C  B4D8               	btfsc	status,2,c
  8537  00FD6E  D003               	goto	l1097
  8538                           
  8539                           ;doprnt.c: 1393: (putch('-') );
  8540  00FD70  0E2D               	movlw	45
  8541  00FD72  ECF6  F065         	call	_putch
  8542  00FD76                     l1097:
  8543                           
  8544                           ;doprnt.c: 1415: if(width)
  8545  00FD76  5060               	movf	printf@width,w,c
  8546  00FD78  1061               	iorwf	printf@width+1,w,c
  8547  00FD7A  B4D8               	btfsc	status,2,c
  8548  00FD7C  D05A               	goto	l1106
  8549                           
  8550                           ;doprnt.c: 1417: (putch('0') );
  8551                           
  8552                           ;doprnt.c: 1416: do
  8553  00FD7E  0E30               	movlw	48
  8554  00FD80  ECF6  F065         	call	_putch
  8555                           
  8556                           ;doprnt.c: 1418: while(--width);
  8557  00FD84  0660               	decf	printf@width,f,c
  8558  00FD86  A0D8               	btfss	status,0,c
  8559  00FD88  0661               	decf	printf@width+1,f,c
  8560  00FD8A  D7F5               	goto	l1097
  8561  00FD8C                     l1096:
  8562                           
  8563                           ;doprnt.c: 1422: {
  8564                           ;doprnt.c: 1424: if(width
  8565                           ;doprnt.c: 1428: )
  8566  00FD8C  5060               	movf	printf@width,w,c
  8567  00FD8E  1061               	iorwf	printf@width+1,w,c
  8568  00FD90  B4D8               	btfsc	status,2,c
  8569  00FD92  D00A               	goto	u5110
  8570  00FD94                     u5100:
  8571                           
  8572                           ;doprnt.c: 1430: (putch(' ') );
  8573                           
  8574                           ;doprnt.c: 1429: do
  8575  00FD94  0E20               	movlw	32
  8576  00FD96  ECF6  F065         	call	_putch
  8577                           
  8578                           ;doprnt.c: 1431: while(--width);
  8579  00FD9A  0660               	decf	printf@width,f,c
  8580  00FD9C  A0D8               	btfss	status,0,c
  8581  00FD9E  0661               	decf	printf@width+1,f,c
  8582  00FDA0  5060               	movf	printf@width,w,c
  8583  00FDA2  1061               	iorwf	printf@width+1,w,c
  8584  00FDA4  A4D8               	btfss	status,2,c
  8585  00FDA6  D7F6               	goto	u5100
  8586  00FDA8                     u5110:
  8587                           
  8588                           ;doprnt.c: 1438: if(flag & 0x03)
  8589  00FDA8  0E03               	movlw	3
  8590  00FDAA  145E               	andwf	printf@flag,w,c
  8591  00FDAC  6E48               	movwf	??_printf& (0+255),c
  8592  00FDAE  0E00               	movlw	0
  8593  00FDB0  145F               	andwf	printf@flag+1,w,c
  8594  00FDB2  6E49               	movwf	(??_printf+1)& (0+255),c
  8595  00FDB4  5048               	movf	??_printf,w,c
  8596  00FDB6  1049               	iorwf	??_printf+1,w,c
  8597  00FDB8  B4D8               	btfsc	status,2,c
  8598  00FDBA  D03B               	goto	l1106
  8599                           
  8600                           ;doprnt.c: 1439: (putch('-') );
  8601  00FDBC  0E2D               	movlw	45
  8602  00FDBE  ECF6  F065         	call	_putch
  8603                           
  8604                           ;doprnt.c: 1469: }
  8605                           ;doprnt.c: 1474: while(prec--) {
  8606  00FDC2  D037               	goto	l1106
  8607  00FDC4                     l5369:
  8608                           
  8609                           ;doprnt.c: 1478: {
  8610                           ;doprnt.c: 1499: {
  8611                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8612  00FDC4  C054  F001         	movff	printf@val,___lldiv@dividend
  8613  00FDC8  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8614  00FDCC  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8615  00FDD0  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8616  00FDD4  C065  F048         	movff	printf@prec,??_printf
  8617  00FDD8  C066  F049         	movff	printf@prec+1,??_printf+1
  8618  00FDDC  90D8               	bcf	status,0,c
  8619  00FDDE  3648               	rlcf	??_printf,f,c
  8620  00FDE0  3649               	rlcf	??_printf+1,f,c
  8621  00FDE2  90D8               	bcf	status,0,c
  8622  00FDE4  3648               	rlcf	??_printf,f,c
  8623  00FDE6  3649               	rlcf	??_printf+1,f,c
  8624  00FDE8  0ED5               	movlw	low _hexpowers
  8625  00FDEA  2448               	addwf	??_printf,w,c
  8626  00FDEC  6EF6               	movwf	tblptrl,c
  8627  00FDEE  0EFE               	movlw	high _hexpowers
  8628  00FDF0  2049               	addwfc	??_printf+1,w,c
  8629  00FDF2  6EF7               	movwf	tblptrh,c
  8630  00FDF4                     	if	0	;There are less than 3 active tblptr bytes
  8631  00FDF4                     	endif
  8632  00FDF4  0009               	tblrd		*+
  8633  00FDF6  CFF5 F005          	movff	tablat,___lldiv@divisor
  8634  00FDFA  0009               	tblrd		*+
  8635  00FDFC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8636  00FE00  0009               	tblrd		*+
  8637  00FE02  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8638  00FE06  000A               	tblrd		*-
  8639  00FE08  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8640  00FE0C  EC1A  F069         	call	___lldiv	;wreg free
  8641  00FE10  5001               	movf	?___lldiv,w,c
  8642  00FE12  0B0F               	andlw	15
  8643  00FE14  6E51               	movwf	printf@idx,c
  8644                           
  8645                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8646  00FE16  5051               	movf	printf@idx,w,c
  8647  00FE18  0D01               	mullw	1
  8648  00FE1A  0E8A               	movlw	low STR_9
  8649  00FE1C  24F3               	addwf	prodl,w,c
  8650  00FE1E  6EF6               	movwf	tblptrl,c
  8651  00FE20  0EFF               	movlw	high STR_9
  8652  00FE22  20F4               	addwfc	prodh,w,c
  8653  00FE24  6EF7               	movwf	tblptrh,c
  8654  00FE26                     	if	0	;There are less than 3 active tblptr bytes
  8655  00FE26                     	endif
  8656  00FE26  0008               	tblrd		*
  8657  00FE28  CFF5 F067          	movff	tablat,printf@c
  8658                           
  8659                           ;doprnt.c: 1508: }
  8660                           ;doprnt.c: 1523: }
  8661                           ;doprnt.c: 1524: (putch(c) );
  8662  00FE2C  5067               	movf	printf@c,w,c
  8663  00FE2E  ECF6  F065         	call	_putch
  8664  00FE32                     l1106:
  8665  00FE32  0665               	decf	printf@prec,f,c
  8666  00FE34  A0D8               	btfss	status,0,c
  8667  00FE36  0666               	decf	printf@prec+1,f,c
  8668  00FE38  2865               	incf	printf@prec,w,c
  8669  00FE3A  E1C4               	bnz	l5369
  8670  00FE3C  2866               	incf	printf@prec+1,w,c
  8671  00FE3E  A4D8               	btfss	status,2,c
  8672  00FE40  D7C1               	goto	l1107
  8673  00FE42                     u5130:
  8674  00FE42  C040  FFF6         	movff	printf@f,tblptrl
  8675  00FE46  C041  FFF7         	movff	printf@f+1,tblptrh
  8676  00FE4A  4A40               	infsnz	printf@f,f,c
  8677  00FE4C  2A41               	incf	printf@f+1,f,c
  8678  00FE4E                     	if	0	;tblptru may be non-zero
  8679  00FE4E                     	endif
  8680  00FE4E                     	if	0	;tblptru may be non-zero
  8681  00FE4E                     	endif
  8682  00FE4E  0008               	tblrd		*
  8683  00FE50  CFF5 F067          	movff	tablat,printf@c
  8684  00FE54  5067               	movf	printf@c,w,c
  8685  00FE56  B4D8               	btfsc	status,2,c
  8686  00FE58  0012               	return	
  8687  00FE5A  EF78  F07A         	goto	l1011
  8688  00FE5E                     __end_of_printf:
  8689                           	opt stack 0
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           postdec1	equ	0xFE5
  8700                           plusw1	equ	0xFE3
  8701                           fsr1l	equ	0xFE1
  8702                           indf2	equ	0xFDF
  8703                           postinc2	equ	0xFDE
  8704                           postdec2	equ	0xFDD
  8705                           plusw2	equ	0xFDB
  8706                           fsr2h	equ	0xFDA
  8707                           fsr2l	equ	0xFD9
  8708                           status	equ	0xFD8
  8709                           
  8710 ;; *************** function _scale *****************
  8711 ;; Defined at:
  8712 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;  scl             1    wreg     char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  scl             1   41[COMRAM] char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  3   35[COMRAM] char 
  8719 ;; Registers used:
  8720 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8726 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;Total ram usage:        7 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    2
  8733 ;; This function calls:
  8734 ;;		___awdiv
  8735 ;;		___awmod
  8736 ;;		___ftmul
  8737 ;;		___wmul
  8738 ;; This function is called by:
  8739 ;;		_printf
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text30
  8744  00E8CC                     __ptext30:
  8745                           	opt stack 0
  8746  00E8CC                     _scale:
  8747                           	opt stack 26
  8748                           
  8749                           ;incstack = 0
  8750                           ;scale@scl stored from wreg
  8751  00E8CC  6E2A               	movwf	scale@scl,c
  8752                           
  8753                           ;doprnt.c: 428: if(scl < 0) {
  8754  00E8CE  AE2A               	btfss	scale@scl,7,c
  8755  00E8D0  D101               	goto	l1000
  8756                           
  8757                           ;doprnt.c: 429: scl = -scl;
  8758  00E8D2  6C2A               	negf	scale@scl,c
  8759                           
  8760                           ;doprnt.c: 430: if(scl>=110)
  8761  00E8D4  502A               	movf	scale@scl,w,c
  8762  00E8D6  0A80               	xorlw	128
  8763  00E8D8  0F12               	addlw	-238
  8764  00E8DA  A0D8               	btfss	status,0,c
  8765  00E8DC  D091               	goto	l1001
  8766                           
  8767                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8768  00E8DE  0E00               	movlw	0
  8769  00E8E0  6E12               	movwf	___wmul@multiplicand+1,c
  8770  00E8E2  0E03               	movlw	3
  8771  00E8E4  6E11               	movwf	___wmul@multiplicand,c
  8772  00E8E6  0E00               	movlw	0
  8773  00E8E8  6E0A               	movwf	___awdiv@divisor+1,c
  8774  00E8EA  0E0A               	movlw	10
  8775  00E8EC  6E09               	movwf	___awdiv@divisor,c
  8776  00E8EE  0E00               	movlw	0
  8777  00E8F0  6E04               	movwf	___awmod@divisor+1,c
  8778  00E8F2  0E64               	movlw	100
  8779  00E8F4  6E03               	movwf	___awmod@divisor,c
  8780  00E8F6  502A               	movf	scale@scl,w,c
  8781  00E8F8  6E01               	movwf	___awmod@dividend,c
  8782  00E8FA  6A02               	clrf	___awmod@dividend+1,c
  8783  00E8FC  BE01               	btfsc	___awmod@dividend,7,c
  8784  00E8FE  0602               	decf	___awmod@dividend+1,f,c
  8785  00E900  ECA3  F068         	call	___awmod	;wreg free
  8786  00E904  C001  F007         	movff	?___awmod,___awdiv@dividend
  8787  00E908  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8788  00E90C  EC5B  F069         	call	___awdiv	;wreg free
  8789  00E910  0E09               	movlw	9
  8790  00E912  2407               	addwf	?___awdiv,w,c
  8791  00E914  6E0F               	movwf	___wmul@multiplier,c
  8792  00E916  0E00               	movlw	0
  8793  00E918  2008               	addwfc	?___awdiv+1,w,c
  8794  00E91A  6E10               	movwf	___wmul@multiplier+1,c
  8795  00E91C  EC69  F066         	call	___wmul	;wreg free
  8796  00E920  0EAE               	movlw	low __npowers_
  8797  00E922  240F               	addwf	?___wmul,w,c
  8798  00E924  6EF6               	movwf	tblptrl,c
  8799  00E926  0EFE               	movlw	high __npowers_
  8800  00E928  2010               	addwfc	?___wmul+1,w,c
  8801  00E92A  6EF7               	movwf	tblptrh,c
  8802  00E92C                     	if	0	;There are less than 3 active tblptr bytes
  8803  00E92C                     	endif
  8804  00E92C  0009               	tblrd		*+
  8805  00E92E  CFF5 F018          	movff	tablat,___ftmul@f2
  8806  00E932  0009               	tblrd		*+
  8807  00E934  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8808  00E938  000A               	tblrd		*-
  8809  00E93A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8810  00E93E  0E00               	movlw	0
  8811  00E940  6E0A               	movwf	___awdiv@divisor+1,c
  8812  00E942  0E64               	movlw	100
  8813  00E944  6E09               	movwf	___awdiv@divisor,c
  8814  00E946  502A               	movf	scale@scl,w,c
  8815  00E948  6E07               	movwf	___awdiv@dividend,c
  8816  00E94A  6A08               	clrf	___awdiv@dividend+1,c
  8817  00E94C  BE07               	btfsc	___awdiv@dividend,7,c
  8818  00E94E  0608               	decf	___awdiv@dividend+1,f,c
  8819  00E950  EC5B  F069         	call	___awdiv	;wreg free
  8820  00E954  0E12               	movlw	18
  8821  00E956  2407               	addwf	?___awdiv,w,c
  8822  00E958  6E0F               	movwf	___wmul@multiplier,c
  8823  00E95A  0E00               	movlw	0
  8824  00E95C  2008               	addwfc	?___awdiv+1,w,c
  8825  00E95E  6E10               	movwf	___wmul@multiplier+1,c
  8826  00E960  0E00               	movlw	0
  8827  00E962  6E12               	movwf	___wmul@multiplicand+1,c
  8828  00E964  0E03               	movlw	3
  8829  00E966  6E11               	movwf	___wmul@multiplicand,c
  8830  00E968  EC69  F066         	call	___wmul	;wreg free
  8831  00E96C  0EAE               	movlw	low __npowers_
  8832  00E96E  240F               	addwf	?___wmul,w,c
  8833  00E970  6EF6               	movwf	tblptrl,c
  8834  00E972  0EFE               	movlw	high __npowers_
  8835  00E974  2010               	addwfc	?___wmul+1,w,c
  8836  00E976  6EF7               	movwf	tblptrh,c
  8837  00E978                     	if	0	;There are less than 3 active tblptr bytes
  8838  00E978                     	endif
  8839  00E978  0009               	tblrd		*+
  8840  00E97A  CFF5 F015          	movff	tablat,___ftmul@f1
  8841  00E97E  0009               	tblrd		*+
  8842  00E980  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8843  00E984  000A               	tblrd		*-
  8844  00E986  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8845  00E98A  ECAC  F06C         	call	___ftmul	;wreg free
  8846  00E98E  C015  F027         	movff	?___ftmul,_scale$2424
  8847  00E992  C016  F028         	movff	?___ftmul+1,_scale$2424+1
  8848  00E996  C017  F029         	movff	?___ftmul+2,_scale$2424+2
  8849                           
  8850                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8851  00E99A  C027  F015         	movff	_scale$2424,___ftmul@f1
  8852  00E99E  C028  F016         	movff	_scale$2424+1,___ftmul@f1+1
  8853  00E9A2  C029  F017         	movff	_scale$2424+2,___ftmul@f1+2
  8854  00E9A6  0E00               	movlw	0
  8855  00E9A8  6E12               	movwf	___wmul@multiplicand+1,c
  8856  00E9AA  0E03               	movlw	3
  8857  00E9AC  6E11               	movwf	___wmul@multiplicand,c
  8858  00E9AE  0E00               	movlw	0
  8859  00E9B0  6E04               	movwf	___awmod@divisor+1,c
  8860  00E9B2  0E0A               	movlw	10
  8861  00E9B4  6E03               	movwf	___awmod@divisor,c
  8862  00E9B6  502A               	movf	scale@scl,w,c
  8863  00E9B8  6E01               	movwf	___awmod@dividend,c
  8864  00E9BA  6A02               	clrf	___awmod@dividend+1,c
  8865  00E9BC  BE01               	btfsc	___awmod@dividend,7,c
  8866  00E9BE  0602               	decf	___awmod@dividend+1,f,c
  8867  00E9C0  ECA3  F068         	call	___awmod	;wreg free
  8868  00E9C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8869  00E9C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8870  00E9CC  EC69  F066         	call	___wmul	;wreg free
  8871  00E9D0  0EAE               	movlw	low __npowers_
  8872  00E9D2  240F               	addwf	?___wmul,w,c
  8873  00E9D4  6EF6               	movwf	tblptrl,c
  8874  00E9D6  0EFE               	movlw	high __npowers_
  8875  00E9D8  2010               	addwfc	?___wmul+1,w,c
  8876  00E9DA  6EF7               	movwf	tblptrh,c
  8877  00E9DC                     	if	0	;There are less than 3 active tblptr bytes
  8878  00E9DC                     	endif
  8879  00E9DC  0009               	tblrd		*+
  8880  00E9DE  CFF5 F018          	movff	tablat,___ftmul@f2
  8881  00E9E2  0009               	tblrd		*+
  8882  00E9E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8883  00E9E8  000A               	tblrd		*-
  8884  00E9EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8885  00E9EE  ECAC  F06C         	call	___ftmul	;wreg free
  8886  00E9F2  C015  F024         	movff	?___ftmul,?_scale
  8887  00E9F6  C016  F025         	movff	?___ftmul+1,?_scale+1
  8888  00E9FA  C017  F026         	movff	?___ftmul+2,?_scale+2
  8889  00E9FE  0012               	return	
  8890  00EA00                     l1001:
  8891                           
  8892                           ;doprnt.c: 432: else if(scl > 10)
  8893  00EA00  502A               	movf	scale@scl,w,c
  8894  00EA02  0A80               	xorlw	128
  8895  00EA04  0F75               	addlw	-139
  8896  00EA06  A0D8               	btfss	status,0,c
  8897  00EA08  D053               	goto	l1004
  8898                           
  8899                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8900  00EA0A  0E00               	movlw	0
  8901  00EA0C  6E0A               	movwf	___awdiv@divisor+1,c
  8902  00EA0E  0E0A               	movlw	10
  8903  00EA10  6E09               	movwf	___awdiv@divisor,c
  8904  00EA12  502A               	movf	scale@scl,w,c
  8905  00EA14  6E07               	movwf	___awdiv@dividend,c
  8906  00EA16  6A08               	clrf	___awdiv@dividend+1,c
  8907  00EA18  BE07               	btfsc	___awdiv@dividend,7,c
  8908  00EA1A  0608               	decf	___awdiv@dividend+1,f,c
  8909  00EA1C  EC5B  F069         	call	___awdiv	;wreg free
  8910  00EA20  0E09               	movlw	9
  8911  00EA22  2407               	addwf	?___awdiv,w,c
  8912  00EA24  6E0F               	movwf	___wmul@multiplier,c
  8913  00EA26  0E00               	movlw	0
  8914  00EA28  2008               	addwfc	?___awdiv+1,w,c
  8915  00EA2A  6E10               	movwf	___wmul@multiplier+1,c
  8916  00EA2C  0E00               	movlw	0
  8917  00EA2E  6E12               	movwf	___wmul@multiplicand+1,c
  8918  00EA30  0E03               	movlw	3
  8919  00EA32  6E11               	movwf	___wmul@multiplicand,c
  8920  00EA34  EC69  F066         	call	___wmul	;wreg free
  8921  00EA38  0EAE               	movlw	low __npowers_
  8922  00EA3A  240F               	addwf	?___wmul,w,c
  8923  00EA3C  6EF6               	movwf	tblptrl,c
  8924  00EA3E  0EFE               	movlw	high __npowers_
  8925  00EA40  2010               	addwfc	?___wmul+1,w,c
  8926  00EA42  6EF7               	movwf	tblptrh,c
  8927  00EA44                     	if	0	;There are less than 3 active tblptr bytes
  8928  00EA44                     	endif
  8929  00EA44  0009               	tblrd		*+
  8930  00EA46  CFF5 F015          	movff	tablat,___ftmul@f1
  8931  00EA4A  0009               	tblrd		*+
  8932  00EA4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8933  00EA50  000A               	tblrd		*-
  8934  00EA52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8935  00EA56  0E00               	movlw	0
  8936  00EA58  6E12               	movwf	___wmul@multiplicand+1,c
  8937  00EA5A  0E03               	movlw	3
  8938  00EA5C  6E11               	movwf	___wmul@multiplicand,c
  8939  00EA5E  0E00               	movlw	0
  8940  00EA60  6E04               	movwf	___awmod@divisor+1,c
  8941  00EA62  0E0A               	movlw	10
  8942  00EA64  6E03               	movwf	___awmod@divisor,c
  8943  00EA66  502A               	movf	scale@scl,w,c
  8944  00EA68  6E01               	movwf	___awmod@dividend,c
  8945  00EA6A  6A02               	clrf	___awmod@dividend+1,c
  8946  00EA6C  BE01               	btfsc	___awmod@dividend,7,c
  8947  00EA6E  0602               	decf	___awmod@dividend+1,f,c
  8948  00EA70  ECA3  F068         	call	___awmod	;wreg free
  8949  00EA74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8950  00EA78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8951  00EA7C  EC69  F066         	call	___wmul	;wreg free
  8952  00EA80  0EAE               	movlw	low __npowers_
  8953  00EA82  240F               	addwf	?___wmul,w,c
  8954  00EA84  6EF6               	movwf	tblptrl,c
  8955  00EA86  0EFE               	movlw	high __npowers_
  8956  00EA88  2010               	addwfc	?___wmul+1,w,c
  8957  00EA8A  6EF7               	movwf	tblptrh,c
  8958  00EA8C                     	if	0	;There are less than 3 active tblptr bytes
  8959  00EA8C                     	endif
  8960  00EA8C  0009               	tblrd		*+
  8961  00EA8E  CFF5 F018          	movff	tablat,___ftmul@f2
  8962  00EA92  0009               	tblrd		*+
  8963  00EA94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8964  00EA98  000A               	tblrd		*-
  8965  00EA9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8966  00EA9E  ECAC  F06C         	call	___ftmul	;wreg free
  8967  00EAA2  C015  F024         	movff	?___ftmul,?_scale
  8968  00EAA6  C016  F025         	movff	?___ftmul+1,?_scale+1
  8969  00EAAA  C017  F026         	movff	?___ftmul+2,?_scale+2
  8970  00EAAE  0012               	return	
  8971  00EAB0                     l1004:
  8972                           
  8973                           ;doprnt.c: 434: return _npowers_[scl];
  8974  00EAB0  502A               	movf	scale@scl,w,c
  8975  00EAB2  0D03               	mullw	3
  8976  00EAB4  0EAE               	movlw	low __npowers_
  8977  00EAB6  24F3               	addwf	prodl,w,c
  8978  00EAB8  6EF6               	movwf	tblptrl,c
  8979  00EABA  0EFE               	movlw	high __npowers_
  8980  00EABC  20F4               	addwfc	prodh,w,c
  8981  00EABE  6EF7               	movwf	tblptrh,c
  8982  00EAC0                     	if	0	;There are less than 3 active tblptr bytes
  8983  00EAC0                     	endif
  8984  00EAC0  0009               	tblrd		*+
  8985  00EAC2  CFF5 F024          	movff	tablat,?_scale
  8986  00EAC6  0009               	tblrd		*+
  8987  00EAC8  CFF5 F025          	movff	tablat,?_scale+1
  8988  00EACC  000A               	tblrd		*-
  8989  00EACE  CFF5 F026          	movff	tablat,?_scale+2
  8990  00EAD2  0012               	return	
  8991  00EAD4                     l1000:
  8992                           
  8993                           ;doprnt.c: 435: }
  8994                           ;doprnt.c: 436: if(scl>=110)
  8995  00EAD4  502A               	movf	scale@scl,w,c
  8996  00EAD6  0A80               	xorlw	128
  8997  00EAD8  0F12               	addlw	-238
  8998  00EADA  A0D8               	btfss	status,0,c
  8999  00EADC  D091               	goto	l1005
  9000                           
  9001                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9002  00EADE  0E00               	movlw	0
  9003  00EAE0  6E12               	movwf	___wmul@multiplicand+1,c
  9004  00EAE2  0E03               	movlw	3
  9005  00EAE4  6E11               	movwf	___wmul@multiplicand,c
  9006  00EAE6  0E00               	movlw	0
  9007  00EAE8  6E0A               	movwf	___awdiv@divisor+1,c
  9008  00EAEA  0E0A               	movlw	10
  9009  00EAEC  6E09               	movwf	___awdiv@divisor,c
  9010  00EAEE  0E00               	movlw	0
  9011  00EAF0  6E04               	movwf	___awmod@divisor+1,c
  9012  00EAF2  0E64               	movlw	100
  9013  00EAF4  6E03               	movwf	___awmod@divisor,c
  9014  00EAF6  502A               	movf	scale@scl,w,c
  9015  00EAF8  6E01               	movwf	___awmod@dividend,c
  9016  00EAFA  6A02               	clrf	___awmod@dividend+1,c
  9017  00EAFC  BE01               	btfsc	___awmod@dividend,7,c
  9018  00EAFE  0602               	decf	___awmod@dividend+1,f,c
  9019  00EB00  ECA3  F068         	call	___awmod	;wreg free
  9020  00EB04  C001  F007         	movff	?___awmod,___awdiv@dividend
  9021  00EB08  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9022  00EB0C  EC5B  F069         	call	___awdiv	;wreg free
  9023  00EB10  0E09               	movlw	9
  9024  00EB12  2407               	addwf	?___awdiv,w,c
  9025  00EB14  6E0F               	movwf	___wmul@multiplier,c
  9026  00EB16  0E00               	movlw	0
  9027  00EB18  2008               	addwfc	?___awdiv+1,w,c
  9028  00EB1A  6E10               	movwf	___wmul@multiplier+1,c
  9029  00EB1C  EC69  F066         	call	___wmul	;wreg free
  9030  00EB20  0E87               	movlw	low __powers_
  9031  00EB22  240F               	addwf	?___wmul,w,c
  9032  00EB24  6EF6               	movwf	tblptrl,c
  9033  00EB26  0EFE               	movlw	high __powers_
  9034  00EB28  2010               	addwfc	?___wmul+1,w,c
  9035  00EB2A  6EF7               	movwf	tblptrh,c
  9036  00EB2C                     	if	0	;There are less than 3 active tblptr bytes
  9037  00EB2C                     	endif
  9038  00EB2C  0009               	tblrd		*+
  9039  00EB2E  CFF5 F018          	movff	tablat,___ftmul@f2
  9040  00EB32  0009               	tblrd		*+
  9041  00EB34  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9042  00EB38  000A               	tblrd		*-
  9043  00EB3A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9044  00EB3E  0E00               	movlw	0
  9045  00EB40  6E0A               	movwf	___awdiv@divisor+1,c
  9046  00EB42  0E64               	movlw	100
  9047  00EB44  6E09               	movwf	___awdiv@divisor,c
  9048  00EB46  502A               	movf	scale@scl,w,c
  9049  00EB48  6E07               	movwf	___awdiv@dividend,c
  9050  00EB4A  6A08               	clrf	___awdiv@dividend+1,c
  9051  00EB4C  BE07               	btfsc	___awdiv@dividend,7,c
  9052  00EB4E  0608               	decf	___awdiv@dividend+1,f,c
  9053  00EB50  EC5B  F069         	call	___awdiv	;wreg free
  9054  00EB54  0E12               	movlw	18
  9055  00EB56  2407               	addwf	?___awdiv,w,c
  9056  00EB58  6E0F               	movwf	___wmul@multiplier,c
  9057  00EB5A  0E00               	movlw	0
  9058  00EB5C  2008               	addwfc	?___awdiv+1,w,c
  9059  00EB5E  6E10               	movwf	___wmul@multiplier+1,c
  9060  00EB60  0E00               	movlw	0
  9061  00EB62  6E12               	movwf	___wmul@multiplicand+1,c
  9062  00EB64  0E03               	movlw	3
  9063  00EB66  6E11               	movwf	___wmul@multiplicand,c
  9064  00EB68  EC69  F066         	call	___wmul	;wreg free
  9065  00EB6C  0E87               	movlw	low __powers_
  9066  00EB6E  240F               	addwf	?___wmul,w,c
  9067  00EB70  6EF6               	movwf	tblptrl,c
  9068  00EB72  0EFE               	movlw	high __powers_
  9069  00EB74  2010               	addwfc	?___wmul+1,w,c
  9070  00EB76  6EF7               	movwf	tblptrh,c
  9071  00EB78                     	if	0	;There are less than 3 active tblptr bytes
  9072  00EB78                     	endif
  9073  00EB78  0009               	tblrd		*+
  9074  00EB7A  CFF5 F015          	movff	tablat,___ftmul@f1
  9075  00EB7E  0009               	tblrd		*+
  9076  00EB80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9077  00EB84  000A               	tblrd		*-
  9078  00EB86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9079  00EB8A  ECAC  F06C         	call	___ftmul	;wreg free
  9080  00EB8E  C015  F027         	movff	?___ftmul,_scale$2424
  9081  00EB92  C016  F028         	movff	?___ftmul+1,_scale$2424+1
  9082  00EB96  C017  F029         	movff	?___ftmul+2,_scale$2424+2
  9083                           
  9084                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9085  00EB9A  C027  F015         	movff	_scale$2424,___ftmul@f1
  9086  00EB9E  C028  F016         	movff	_scale$2424+1,___ftmul@f1+1
  9087  00EBA2  C029  F017         	movff	_scale$2424+2,___ftmul@f1+2
  9088  00EBA6  0E00               	movlw	0
  9089  00EBA8  6E12               	movwf	___wmul@multiplicand+1,c
  9090  00EBAA  0E03               	movlw	3
  9091  00EBAC  6E11               	movwf	___wmul@multiplicand,c
  9092  00EBAE  0E00               	movlw	0
  9093  00EBB0  6E04               	movwf	___awmod@divisor+1,c
  9094  00EBB2  0E0A               	movlw	10
  9095  00EBB4  6E03               	movwf	___awmod@divisor,c
  9096  00EBB6  502A               	movf	scale@scl,w,c
  9097  00EBB8  6E01               	movwf	___awmod@dividend,c
  9098  00EBBA  6A02               	clrf	___awmod@dividend+1,c
  9099  00EBBC  BE01               	btfsc	___awmod@dividend,7,c
  9100  00EBBE  0602               	decf	___awmod@dividend+1,f,c
  9101  00EBC0  ECA3  F068         	call	___awmod	;wreg free
  9102  00EBC4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9103  00EBC8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9104  00EBCC  EC69  F066         	call	___wmul	;wreg free
  9105  00EBD0  0E87               	movlw	low __powers_
  9106  00EBD2  240F               	addwf	?___wmul,w,c
  9107  00EBD4  6EF6               	movwf	tblptrl,c
  9108  00EBD6  0EFE               	movlw	high __powers_
  9109  00EBD8  2010               	addwfc	?___wmul+1,w,c
  9110  00EBDA  6EF7               	movwf	tblptrh,c
  9111  00EBDC                     	if	0	;There are less than 3 active tblptr bytes
  9112  00EBDC                     	endif
  9113  00EBDC  0009               	tblrd		*+
  9114  00EBDE  CFF5 F018          	movff	tablat,___ftmul@f2
  9115  00EBE2  0009               	tblrd		*+
  9116  00EBE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9117  00EBE8  000A               	tblrd		*-
  9118  00EBEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9119  00EBEE  ECAC  F06C         	call	___ftmul	;wreg free
  9120  00EBF2  C015  F024         	movff	?___ftmul,?_scale
  9121  00EBF6  C016  F025         	movff	?___ftmul+1,?_scale+1
  9122  00EBFA  C017  F026         	movff	?___ftmul+2,?_scale+2
  9123  00EBFE  0012               	return	
  9124  00EC00                     l1005:
  9125                           
  9126                           ;doprnt.c: 438: else if(scl > 10)
  9127  00EC00  502A               	movf	scale@scl,w,c
  9128  00EC02  0A80               	xorlw	128
  9129  00EC04  0F75               	addlw	-139
  9130  00EC06  A0D8               	btfss	status,0,c
  9131  00EC08  D053               	goto	l1007
  9132                           
  9133                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9134  00EC0A  0E00               	movlw	0
  9135  00EC0C  6E0A               	movwf	___awdiv@divisor+1,c
  9136  00EC0E  0E0A               	movlw	10
  9137  00EC10  6E09               	movwf	___awdiv@divisor,c
  9138  00EC12  502A               	movf	scale@scl,w,c
  9139  00EC14  6E07               	movwf	___awdiv@dividend,c
  9140  00EC16  6A08               	clrf	___awdiv@dividend+1,c
  9141  00EC18  BE07               	btfsc	___awdiv@dividend,7,c
  9142  00EC1A  0608               	decf	___awdiv@dividend+1,f,c
  9143  00EC1C  EC5B  F069         	call	___awdiv	;wreg free
  9144  00EC20  0E09               	movlw	9
  9145  00EC22  2407               	addwf	?___awdiv,w,c
  9146  00EC24  6E0F               	movwf	___wmul@multiplier,c
  9147  00EC26  0E00               	movlw	0
  9148  00EC28  2008               	addwfc	?___awdiv+1,w,c
  9149  00EC2A  6E10               	movwf	___wmul@multiplier+1,c
  9150  00EC2C  0E00               	movlw	0
  9151  00EC2E  6E12               	movwf	___wmul@multiplicand+1,c
  9152  00EC30  0E03               	movlw	3
  9153  00EC32  6E11               	movwf	___wmul@multiplicand,c
  9154  00EC34  EC69  F066         	call	___wmul	;wreg free
  9155  00EC38  0E87               	movlw	low __powers_
  9156  00EC3A  240F               	addwf	?___wmul,w,c
  9157  00EC3C  6EF6               	movwf	tblptrl,c
  9158  00EC3E  0EFE               	movlw	high __powers_
  9159  00EC40  2010               	addwfc	?___wmul+1,w,c
  9160  00EC42  6EF7               	movwf	tblptrh,c
  9161  00EC44                     	if	0	;There are less than 3 active tblptr bytes
  9162  00EC44                     	endif
  9163  00EC44  0009               	tblrd		*+
  9164  00EC46  CFF5 F015          	movff	tablat,___ftmul@f1
  9165  00EC4A  0009               	tblrd		*+
  9166  00EC4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9167  00EC50  000A               	tblrd		*-
  9168  00EC52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9169  00EC56  0E00               	movlw	0
  9170  00EC58  6E12               	movwf	___wmul@multiplicand+1,c
  9171  00EC5A  0E03               	movlw	3
  9172  00EC5C  6E11               	movwf	___wmul@multiplicand,c
  9173  00EC5E  0E00               	movlw	0
  9174  00EC60  6E04               	movwf	___awmod@divisor+1,c
  9175  00EC62  0E0A               	movlw	10
  9176  00EC64  6E03               	movwf	___awmod@divisor,c
  9177  00EC66  502A               	movf	scale@scl,w,c
  9178  00EC68  6E01               	movwf	___awmod@dividend,c
  9179  00EC6A  6A02               	clrf	___awmod@dividend+1,c
  9180  00EC6C  BE01               	btfsc	___awmod@dividend,7,c
  9181  00EC6E  0602               	decf	___awmod@dividend+1,f,c
  9182  00EC70  ECA3  F068         	call	___awmod	;wreg free
  9183  00EC74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9184  00EC78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9185  00EC7C  EC69  F066         	call	___wmul	;wreg free
  9186  00EC80  0E87               	movlw	low __powers_
  9187  00EC82  240F               	addwf	?___wmul,w,c
  9188  00EC84  6EF6               	movwf	tblptrl,c
  9189  00EC86  0EFE               	movlw	high __powers_
  9190  00EC88  2010               	addwfc	?___wmul+1,w,c
  9191  00EC8A  6EF7               	movwf	tblptrh,c
  9192  00EC8C                     	if	0	;There are less than 3 active tblptr bytes
  9193  00EC8C                     	endif
  9194  00EC8C  0009               	tblrd		*+
  9195  00EC8E  CFF5 F018          	movff	tablat,___ftmul@f2
  9196  00EC92  0009               	tblrd		*+
  9197  00EC94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9198  00EC98  000A               	tblrd		*-
  9199  00EC9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9200  00EC9E  ECAC  F06C         	call	___ftmul	;wreg free
  9201  00ECA2  C015  F024         	movff	?___ftmul,?_scale
  9202  00ECA6  C016  F025         	movff	?___ftmul+1,?_scale+1
  9203  00ECAA  C017  F026         	movff	?___ftmul+2,?_scale+2
  9204  00ECAE  0012               	return	
  9205  00ECB0                     l1007:
  9206                           
  9207                           ;doprnt.c: 440: return _powers_[scl];
  9208  00ECB0  502A               	movf	scale@scl,w,c
  9209  00ECB2  0D03               	mullw	3
  9210  00ECB4  0E87               	movlw	low __powers_
  9211  00ECB6  24F3               	addwf	prodl,w,c
  9212  00ECB8  6EF6               	movwf	tblptrl,c
  9213  00ECBA  0EFE               	movlw	high __powers_
  9214  00ECBC  20F4               	addwfc	prodh,w,c
  9215  00ECBE  6EF7               	movwf	tblptrh,c
  9216  00ECC0                     	if	0	;There are less than 3 active tblptr bytes
  9217  00ECC0                     	endif
  9218  00ECC0  0009               	tblrd		*+
  9219  00ECC2  CFF5 F024          	movff	tablat,?_scale
  9220  00ECC6  0009               	tblrd		*+
  9221  00ECC8  CFF5 F025          	movff	tablat,?_scale+1
  9222  00ECCC  000A               	tblrd		*-
  9223  00ECCE  CFF5 F026          	movff	tablat,?_scale+2
  9224  00ECD2  0012               	return	
  9225  00ECD4                     __end_of_scale:
  9226                           	opt stack 0
  9227                           tblptru	equ	0xFF8
  9228                           tblptrh	equ	0xFF7
  9229                           tblptrl	equ	0xFF6
  9230                           tablat	equ	0xFF5
  9231                           prodh	equ	0xFF4
  9232                           prodl	equ	0xFF3
  9233                           intcon	equ	0xFF2
  9234                           postinc0	equ	0xFEE
  9235                           wreg	equ	0xFE8
  9236                           postdec1	equ	0xFE5
  9237                           plusw1	equ	0xFE3
  9238                           fsr1l	equ	0xFE1
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           plusw2	equ	0xFDB
  9243                           fsr2h	equ	0xFDA
  9244                           fsr2l	equ	0xFD9
  9245                           status	equ	0xFD8
  9246                           
  9247 ;; *************** function _putch *****************
  9248 ;; Defined at:
  9249 ;;		line 24 in file "lcd.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;  data            1    wreg     unsigned char 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  data            1    2[COMRAM] unsigned char 
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, status,2, status,0, cstack
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;Total ram usage:        1 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    1
  9270 ;; This function calls:
  9271 ;;		_lcdNibble
  9272 ;; This function is called by:
  9273 ;;		_printf
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           	psect	text31
  9278  00CBEC                     __ptext31:
  9279                           	opt stack 0
  9280  00CBEC                     _putch:
  9281                           	opt stack 27
  9282                           
  9283                           ;incstack = 0
  9284                           ;putch@data stored from wreg
  9285  00CBEC  6E03               	movwf	putch@data,c
  9286                           
  9287                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9288  00CBEE  848C               	bsf	3980,2,c	;volatile
  9289                           
  9290                           ;lcd.c: 33: lcdNibble(data);
  9291  00CBF0  5003               	movf	putch@data,w,c
  9292  00CBF2  ECDB  F068         	call	_lcdNibble
  9293                           
  9294                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9295  00CBF6  0EC8               	movlw	200
  9296  00CBF8                     u6117:
  9297  00CBF8  D000               	nop2	
  9298  00CBFA  2EE8               	decfsz	wreg,f,c
  9299  00CBFC  D7FD               	bra	u6117
  9300  00CBFE  0012               	return		;funcret
  9301  00CC00                     __end_of_putch:
  9302                           	opt stack 0
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           postinc0	equ	0xFEE
  9311                           wreg	equ	0xFE8
  9312                           postdec1	equ	0xFE5
  9313                           plusw1	equ	0xFE3
  9314                           fsr1l	equ	0xFE1
  9315                           indf2	equ	0xFDF
  9316                           postinc2	equ	0xFDE
  9317                           postdec2	equ	0xFDD
  9318                           plusw2	equ	0xFDB
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function _isdigit *****************
  9324 ;; Defined at:
  9325 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  c               1    wreg     unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  c               1    2[COMRAM] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;Total ram usage:        3 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_printf
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text32
  9353  00CC00                     __ptext32:
  9354                           	opt stack 0
  9355  00CC00                     _isdigit:
  9356                           	opt stack 28
  9357                           
  9358                           ;incstack = 0
  9359                           ;isdigit@c stored from wreg
  9360  00CC00  6E03               	movwf	isdigit@c,c
  9361  00CC02  0E00               	movlw	0
  9362  00CC04  6E02               	movwf	_isdigit$2008,c
  9363  00CC06  0E3A               	movlw	58
  9364  00CC08  6003               	cpfslt	isdigit@c,c
  9365  00CC0A  D005               	goto	l1474
  9366  00CC0C  0E2F               	movlw	47
  9367  00CC0E  6403               	cpfsgt	isdigit@c,c
  9368  00CC10  D002               	goto	l1474
  9369  00CC12  0E01               	movlw	1
  9370  00CC14  6E02               	movwf	_isdigit$2008,c
  9371  00CC16                     l1474:
  9372  00CC16  C002  F001         	movff	_isdigit$2008,??_isdigit
  9373  00CC1A  3001               	rrcf	??_isdigit,w,c
  9374  00CC1C  0012               	return	
  9375  00CC1E                     __end_of_isdigit:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           postinc0	equ	0xFEE
  9385                           wreg	equ	0xFE8
  9386                           postdec1	equ	0xFE5
  9387                           plusw1	equ	0xFE3
  9388                           fsr1l	equ	0xFE1
  9389                           indf2	equ	0xFDF
  9390                           postinc2	equ	0xFDE
  9391                           postdec2	equ	0xFDD
  9392                           plusw2	equ	0xFDB
  9393                           fsr2h	equ	0xFDA
  9394                           fsr2l	equ	0xFD9
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function _fround *****************
  9398 ;; Defined at:
  9399 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  prec            1    wreg     unsigned char 
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;  prec            1   44[COMRAM] unsigned char 
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  3   35[COMRAM] unsigned char 
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;Total ram usage:       10 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    2
  9420 ;; This function calls:
  9421 ;;		___awdiv
  9422 ;;		___awmod
  9423 ;;		___ftmul
  9424 ;;		___wmul
  9425 ;; This function is called by:
  9426 ;;		_printf
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text33
  9431  00E36E                     __ptext33:
  9432                           	opt stack 0
  9433  00E36E                     _fround:
  9434                           	opt stack 26
  9435                           
  9436                           ;incstack = 0
  9437                           ;fround@prec stored from wreg
  9438  00E36E  6E2D               	movwf	fround@prec,c
  9439                           
  9440                           ;doprnt.c: 413: if(prec>=110)
  9441  00E370  0E6D               	movlw	109
  9442  00E372  642D               	cpfsgt	fround@prec,c
  9443  00E374  D09F               	goto	l994
  9444                           
  9445                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9446  00E376  0E00               	movlw	0
  9447  00E378  6E12               	movwf	___wmul@multiplicand+1,c
  9448  00E37A  0E03               	movlw	3
  9449  00E37C  6E11               	movwf	___wmul@multiplicand,c
  9450  00E37E  0E00               	movlw	0
  9451  00E380  6E0A               	movwf	___awdiv@divisor+1,c
  9452  00E382  0E0A               	movlw	10
  9453  00E384  6E09               	movwf	___awdiv@divisor,c
  9454  00E386  0E00               	movlw	0
  9455  00E388  6E04               	movwf	___awmod@divisor+1,c
  9456  00E38A  0E64               	movlw	100
  9457  00E38C  6E03               	movwf	___awmod@divisor,c
  9458  00E38E  C02D  F001         	movff	fround@prec,___awmod@dividend
  9459  00E392  6A02               	clrf	___awmod@dividend+1,c
  9460  00E394  ECA3  F068         	call	___awmod	;wreg free
  9461  00E398  C001  F007         	movff	?___awmod,___awdiv@dividend
  9462  00E39C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9463  00E3A0  EC5B  F069         	call	___awdiv	;wreg free
  9464  00E3A4  0E09               	movlw	9
  9465  00E3A6  2407               	addwf	?___awdiv,w,c
  9466  00E3A8  6E0F               	movwf	___wmul@multiplier,c
  9467  00E3AA  0E00               	movlw	0
  9468  00E3AC  2008               	addwfc	?___awdiv+1,w,c
  9469  00E3AE  6E10               	movwf	___wmul@multiplier+1,c
  9470  00E3B0  EC69  F066         	call	___wmul	;wreg free
  9471  00E3B4  0EAE               	movlw	low __npowers_
  9472  00E3B6  240F               	addwf	?___wmul,w,c
  9473  00E3B8  6EF6               	movwf	tblptrl,c
  9474  00E3BA  0EFE               	movlw	high __npowers_
  9475  00E3BC  2010               	addwfc	?___wmul+1,w,c
  9476  00E3BE  6EF7               	movwf	tblptrh,c
  9477  00E3C0                     	if	0	;There are less than 3 active tblptr bytes
  9478  00E3C0                     	endif
  9479  00E3C0  0009               	tblrd		*+
  9480  00E3C2  CFF5 F018          	movff	tablat,___ftmul@f2
  9481  00E3C6  0009               	tblrd		*+
  9482  00E3C8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9483  00E3CC  000A               	tblrd		*-
  9484  00E3CE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9485  00E3D2  0E00               	movlw	0
  9486  00E3D4  6E0A               	movwf	___awdiv@divisor+1,c
  9487  00E3D6  0E64               	movlw	100
  9488  00E3D8  6E09               	movwf	___awdiv@divisor,c
  9489  00E3DA  C02D  F007         	movff	fround@prec,___awdiv@dividend
  9490  00E3DE  6A08               	clrf	___awdiv@dividend+1,c
  9491  00E3E0  EC5B  F069         	call	___awdiv	;wreg free
  9492  00E3E4  0E12               	movlw	18
  9493  00E3E6  2407               	addwf	?___awdiv,w,c
  9494  00E3E8  6E0F               	movwf	___wmul@multiplier,c
  9495  00E3EA  0E00               	movlw	0
  9496  00E3EC  2008               	addwfc	?___awdiv+1,w,c
  9497  00E3EE  6E10               	movwf	___wmul@multiplier+1,c
  9498  00E3F0  0E00               	movlw	0
  9499  00E3F2  6E12               	movwf	___wmul@multiplicand+1,c
  9500  00E3F4  0E03               	movlw	3
  9501  00E3F6  6E11               	movwf	___wmul@multiplicand,c
  9502  00E3F8  EC69  F066         	call	___wmul	;wreg free
  9503  00E3FC  0EAE               	movlw	low __npowers_
  9504  00E3FE  240F               	addwf	?___wmul,w,c
  9505  00E400  6EF6               	movwf	tblptrl,c
  9506  00E402  0EFE               	movlw	high __npowers_
  9507  00E404  2010               	addwfc	?___wmul+1,w,c
  9508  00E406  6EF7               	movwf	tblptrh,c
  9509  00E408                     	if	0	;There are less than 3 active tblptr bytes
  9510  00E408                     	endif
  9511  00E408  0009               	tblrd		*+
  9512  00E40A  CFF5 F015          	movff	tablat,___ftmul@f1
  9513  00E40E  0009               	tblrd		*+
  9514  00E410  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9515  00E414  000A               	tblrd		*-
  9516  00E416  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9517  00E41A  ECAC  F06C         	call	___ftmul	;wreg free
  9518  00E41E  C015  F02A         	movff	?___ftmul,_fround$2422
  9519  00E422  C016  F02B         	movff	?___ftmul+1,_fround$2422+1
  9520  00E426  C017  F02C         	movff	?___ftmul+2,_fround$2422+2
  9521                           
  9522                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9523  00E42A  0E00               	movlw	0
  9524  00E42C  6E12               	movwf	___wmul@multiplicand+1,c
  9525  00E42E  0E03               	movlw	3
  9526  00E430  6E11               	movwf	___wmul@multiplicand,c
  9527  00E432  0E00               	movlw	0
  9528  00E434  6E04               	movwf	___awmod@divisor+1,c
  9529  00E436  0E0A               	movlw	10
  9530  00E438  6E03               	movwf	___awmod@divisor,c
  9531  00E43A  C02D  F001         	movff	fround@prec,___awmod@dividend
  9532  00E43E  6A02               	clrf	___awmod@dividend+1,c
  9533  00E440  ECA3  F068         	call	___awmod	;wreg free
  9534  00E444  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9535  00E448  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9536  00E44C  EC69  F066         	call	___wmul	;wreg free
  9537  00E450  0EAE               	movlw	low __npowers_
  9538  00E452  240F               	addwf	?___wmul,w,c
  9539  00E454  6EF6               	movwf	tblptrl,c
  9540  00E456  0EFE               	movlw	high __npowers_
  9541  00E458  2010               	addwfc	?___wmul+1,w,c
  9542  00E45A  6EF7               	movwf	tblptrh,c
  9543  00E45C                     	if	0	;There are less than 3 active tblptr bytes
  9544  00E45C                     	endif
  9545  00E45C  0009               	tblrd		*+
  9546  00E45E  CFF5 F018          	movff	tablat,___ftmul@f2
  9547  00E462  0009               	tblrd		*+
  9548  00E464  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9549  00E468  000A               	tblrd		*-
  9550  00E46A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9551  00E46E  C02A  F015         	movff	_fround$2422,___ftmul@f1
  9552  00E472  C02B  F016         	movff	_fround$2422+1,___ftmul@f1+1
  9553  00E476  C02C  F017         	movff	_fround$2422+2,___ftmul@f1+2
  9554  00E47A  ECAC  F06C         	call	___ftmul	;wreg free
  9555  00E47E  C015  F027         	movff	?___ftmul,_fround$2423
  9556  00E482  C016  F028         	movff	?___ftmul+1,_fround$2423+1
  9557  00E486  C017  F029         	movff	?___ftmul+2,_fround$2423+2
  9558                           
  9559                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9560  00E48A  C027  F015         	movff	_fround$2423,___ftmul@f1
  9561  00E48E  C028  F016         	movff	_fround$2423+1,___ftmul@f1+1
  9562  00E492  C029  F017         	movff	_fround$2423+2,___ftmul@f1+2
  9563  00E496  0E00               	movlw	0
  9564  00E498  6E18               	movwf	___ftmul@f2,c
  9565  00E49A  0E00               	movlw	0
  9566  00E49C  6E19               	movwf	___ftmul@f2+1,c
  9567  00E49E  0E3F               	movlw	63
  9568  00E4A0  6E1A               	movwf	___ftmul@f2+2,c
  9569  00E4A2  ECAC  F06C         	call	___ftmul	;wreg free
  9570  00E4A6  C015  F024         	movff	?___ftmul,?_fround
  9571  00E4AA  C016  F025         	movff	?___ftmul+1,?_fround+1
  9572  00E4AE  C017  F026         	movff	?___ftmul+2,?_fround+2
  9573  00E4B2  0012               	return	
  9574  00E4B4                     l994:
  9575                           
  9576                           ;doprnt.c: 415: else if(prec > 10)
  9577  00E4B4  0E0A               	movlw	10
  9578  00E4B6  642D               	cpfsgt	fround@prec,c
  9579  00E4B8  D063               	goto	l997
  9580                           
  9581                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9582  00E4BA  0E00               	movlw	0
  9583  00E4BC  6E12               	movwf	___wmul@multiplicand+1,c
  9584  00E4BE  0E03               	movlw	3
  9585  00E4C0  6E11               	movwf	___wmul@multiplicand,c
  9586  00E4C2  0E00               	movlw	0
  9587  00E4C4  6E04               	movwf	___awmod@divisor+1,c
  9588  00E4C6  0E0A               	movlw	10
  9589  00E4C8  6E03               	movwf	___awmod@divisor,c
  9590  00E4CA  C02D  F001         	movff	fround@prec,___awmod@dividend
  9591  00E4CE  6A02               	clrf	___awmod@dividend+1,c
  9592  00E4D0  ECA3  F068         	call	___awmod	;wreg free
  9593  00E4D4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9594  00E4D8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9595  00E4DC  EC69  F066         	call	___wmul	;wreg free
  9596  00E4E0  0EAE               	movlw	low __npowers_
  9597  00E4E2  240F               	addwf	?___wmul,w,c
  9598  00E4E4  6EF6               	movwf	tblptrl,c
  9599  00E4E6  0EFE               	movlw	high __npowers_
  9600  00E4E8  2010               	addwfc	?___wmul+1,w,c
  9601  00E4EA  6EF7               	movwf	tblptrh,c
  9602  00E4EC                     	if	0	;There are less than 3 active tblptr bytes
  9603  00E4EC                     	endif
  9604  00E4EC  0009               	tblrd		*+
  9605  00E4EE  CFF5 F018          	movff	tablat,___ftmul@f2
  9606  00E4F2  0009               	tblrd		*+
  9607  00E4F4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9608  00E4F8  000A               	tblrd		*-
  9609  00E4FA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9610  00E4FE  0E00               	movlw	0
  9611  00E500  6E0A               	movwf	___awdiv@divisor+1,c
  9612  00E502  0E0A               	movlw	10
  9613  00E504  6E09               	movwf	___awdiv@divisor,c
  9614  00E506  C02D  F007         	movff	fround@prec,___awdiv@dividend
  9615  00E50A  6A08               	clrf	___awdiv@dividend+1,c
  9616  00E50C  EC5B  F069         	call	___awdiv	;wreg free
  9617  00E510  0E09               	movlw	9
  9618  00E512  2407               	addwf	?___awdiv,w,c
  9619  00E514  6E0F               	movwf	___wmul@multiplier,c
  9620  00E516  0E00               	movlw	0
  9621  00E518  2008               	addwfc	?___awdiv+1,w,c
  9622  00E51A  6E10               	movwf	___wmul@multiplier+1,c
  9623  00E51C  0E00               	movlw	0
  9624  00E51E  6E12               	movwf	___wmul@multiplicand+1,c
  9625  00E520  0E03               	movlw	3
  9626  00E522  6E11               	movwf	___wmul@multiplicand,c
  9627  00E524  EC69  F066         	call	___wmul	;wreg free
  9628  00E528  0EAE               	movlw	low __npowers_
  9629  00E52A  240F               	addwf	?___wmul,w,c
  9630  00E52C  6EF6               	movwf	tblptrl,c
  9631  00E52E  0EFE               	movlw	high __npowers_
  9632  00E530  2010               	addwfc	?___wmul+1,w,c
  9633  00E532  6EF7               	movwf	tblptrh,c
  9634  00E534                     	if	0	;There are less than 3 active tblptr bytes
  9635  00E534                     	endif
  9636  00E534  0009               	tblrd		*+
  9637  00E536  CFF5 F015          	movff	tablat,___ftmul@f1
  9638  00E53A  0009               	tblrd		*+
  9639  00E53C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9640  00E540  000A               	tblrd		*-
  9641  00E542  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9642  00E546  ECAC  F06C         	call	___ftmul	;wreg free
  9643  00E54A  C015  F02A         	movff	?___ftmul,_fround$2422
  9644  00E54E  C016  F02B         	movff	?___ftmul+1,_fround$2422+1
  9645  00E552  C017  F02C         	movff	?___ftmul+2,_fround$2422+2
  9646                           
  9647                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9648  00E556  C02A  F015         	movff	_fround$2422,___ftmul@f1
  9649  00E55A  C02B  F016         	movff	_fround$2422+1,___ftmul@f1+1
  9650  00E55E  C02C  F017         	movff	_fround$2422+2,___ftmul@f1+2
  9651  00E562  0E00               	movlw	0
  9652  00E564  6E18               	movwf	___ftmul@f2,c
  9653  00E566  0E00               	movlw	0
  9654  00E568  6E19               	movwf	___ftmul@f2+1,c
  9655  00E56A  0E3F               	movlw	63
  9656  00E56C  6E1A               	movwf	___ftmul@f2+2,c
  9657  00E56E  ECAC  F06C         	call	___ftmul	;wreg free
  9658  00E572  C015  F024         	movff	?___ftmul,?_fround
  9659  00E576  C016  F025         	movff	?___ftmul+1,?_fround+1
  9660  00E57A  C017  F026         	movff	?___ftmul+2,?_fround+2
  9661  00E57E  0012               	return	
  9662  00E580                     l997:
  9663                           
  9664                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9665  00E580  502D               	movf	fround@prec,w,c
  9666  00E582  0D03               	mullw	3
  9667  00E584  0EAE               	movlw	low __npowers_
  9668  00E586  24F3               	addwf	prodl,w,c
  9669  00E588  6EF6               	movwf	tblptrl,c
  9670  00E58A  0EFE               	movlw	high __npowers_
  9671  00E58C  20F4               	addwfc	prodh,w,c
  9672  00E58E  6EF7               	movwf	tblptrh,c
  9673  00E590                     	if	0	;There are less than 3 active tblptr bytes
  9674  00E590                     	endif
  9675  00E590  0009               	tblrd		*+
  9676  00E592  CFF5 F015          	movff	tablat,___ftmul@f1
  9677  00E596  0009               	tblrd		*+
  9678  00E598  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9679  00E59C  000A               	tblrd		*-
  9680  00E59E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9681  00E5A2  0E00               	movlw	0
  9682  00E5A4  6E18               	movwf	___ftmul@f2,c
  9683  00E5A6  0E00               	movlw	0
  9684  00E5A8  6E19               	movwf	___ftmul@f2+1,c
  9685  00E5AA  0E3F               	movlw	63
  9686  00E5AC  6E1A               	movwf	___ftmul@f2+2,c
  9687  00E5AE  ECAC  F06C         	call	___ftmul	;wreg free
  9688  00E5B2  C015  F024         	movff	?___ftmul,?_fround
  9689  00E5B6  C016  F025         	movff	?___ftmul+1,?_fround+1
  9690  00E5BA  C017  F026         	movff	?___ftmul+2,?_fround+2
  9691  00E5BE  0012               	return	
  9692  00E5C0                     __end_of_fround:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           postinc0	equ	0xFEE
  9702                           wreg	equ	0xFE8
  9703                           postdec1	equ	0xFE5
  9704                           plusw1	equ	0xFE3
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           plusw2	equ	0xFDB
  9710                           fsr2h	equ	0xFDA
  9711                           fsr2l	equ	0xFD9
  9712                           status	equ	0xFD8
  9713                           
  9714 ;; *************** function ___wmul *****************
  9715 ;; Defined at:
  9716 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;  multiplier      2   14[COMRAM] unsigned int 
  9719 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;  product         2   18[COMRAM] unsigned int 
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  2   14[COMRAM] unsigned int 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2, status,0, prodl, prodh
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;Total ram usage:        6 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; This function calls:
  9738 ;;		Nothing
  9739 ;; This function is called by:
  9740 ;;		_glcdDrawRectangle
  9741 ;;		_fround
  9742 ;;		_scale
  9743 ;;		_printf
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text34
  9748  00CCD2                     __ptext34:
  9749                           	opt stack 0
  9750  00CCD2                     ___wmul:
  9751                           	opt stack 27
  9752                           
  9753                           ;incstack = 0
  9754  00CCD2  500F               	movf	___wmul@multiplier,w,c
  9755  00CCD4  0211               	mulwf	___wmul@multiplicand,c
  9756  00CCD6  CFF3 F013          	movff	prodl,___wmul@product
  9757  00CCDA  CFF4 F014          	movff	prodh,___wmul@product+1
  9758  00CCDE  500F               	movf	___wmul@multiplier,w,c
  9759  00CCE0  0212               	mulwf	___wmul@multiplicand+1,c
  9760  00CCE2  50F3               	movf	prodl,w,c
  9761  00CCE4  2614               	addwf	___wmul@product+1,f,c
  9762  00CCE6  5010               	movf	___wmul@multiplier+1,w,c
  9763  00CCE8  0211               	mulwf	___wmul@multiplicand,c
  9764  00CCEA  50F3               	movf	prodl,w,c
  9765  00CCEC  2614               	addwf	___wmul@product+1,f,c
  9766  00CCEE  C013  F00F         	movff	___wmul@product,?___wmul
  9767  00CCF2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9768  00CCF6  0012               	return	
  9769  00CCF8                     __end_of___wmul:
  9770                           	opt stack 0
  9771                           tblptru	equ	0xFF8
  9772                           tblptrh	equ	0xFF7
  9773                           tblptrl	equ	0xFF6
  9774                           tablat	equ	0xFF5
  9775                           prodh	equ	0xFF4
  9776                           prodl	equ	0xFF3
  9777                           intcon	equ	0xFF2
  9778                           postinc0	equ	0xFEE
  9779                           wreg	equ	0xFE8
  9780                           postdec1	equ	0xFE5
  9781                           plusw1	equ	0xFE3
  9782                           fsr1l	equ	0xFE1
  9783                           indf2	equ	0xFDF
  9784                           postinc2	equ	0xFDE
  9785                           postdec2	equ	0xFDD
  9786                           plusw2	equ	0xFDB
  9787                           fsr2h	equ	0xFDA
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function ___ftmul *****************
  9792 ;; Defined at:
  9793 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;  f1              3   20[COMRAM] float 
  9796 ;;  f2              3   23[COMRAM] float 
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  9799 ;;  sign            1   34[COMRAM] unsigned char 
  9800 ;;  cntr            1   33[COMRAM] unsigned char 
  9801 ;;  exp             1   29[COMRAM] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;                  3   20[COMRAM] float 
  9804 ;; Registers used:
  9805 ;;		wreg, status,2, status,0, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9811 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;Total ram usage:       15 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    1
  9818 ;; This function calls:
  9819 ;;		___ftpack
  9820 ;; This function is called by:
  9821 ;;		_initSD
  9822 ;;		_fround
  9823 ;;		_scale
  9824 ;;		_printf
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text35
  9829  00D958                     __ptext35:
  9830                           	opt stack 0
  9831  00D958                     ___ftmul:
  9832                           	opt stack 26
  9833                           
  9834                           ;incstack = 0
  9835  00D958  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  9836  00D95C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9837  00D95E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9838  00D960  3416               	rlcf	___ftmul@f1+1,w,c
  9839  00D962  361B               	rlcf	??___ftmul& (0+255),f,c
  9840  00D964  E301               	bnc	u3411
  9841  00D966  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9842  00D968                     u3411:
  9843  00D968  501B               	movf	??___ftmul,w,c
  9844  00D96A  6E1E               	movwf	___ftmul@exp,c
  9845  00D96C  501E               	movf	___ftmul@exp,w,c
  9846  00D96E  A4D8               	btfss	status,2,c
  9847  00D970  D007               	goto	l1438
  9848  00D972  0E00               	movlw	0
  9849  00D974  6E15               	movwf	?___ftmul,c
  9850  00D976  0E00               	movlw	0
  9851  00D978  6E16               	movwf	?___ftmul+1,c
  9852  00D97A  0E00               	movlw	0
  9853  00D97C  6E17               	movwf	?___ftmul+2,c
  9854  00D97E  0012               	return	
  9855  00D980                     l1438:
  9856  00D980  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  9857  00D984  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9858  00D986  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9859  00D988  3419               	rlcf	___ftmul@f2+1,w,c
  9860  00D98A  361B               	rlcf	??___ftmul& (0+255),f,c
  9861  00D98C  E301               	bnc	u3431
  9862  00D98E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9863  00D990                     u3431:
  9864  00D990  501B               	movf	??___ftmul,w,c
  9865  00D992  6E23               	movwf	___ftmul@sign,c
  9866  00D994  5023               	movf	___ftmul@sign,w,c
  9867  00D996  A4D8               	btfss	status,2,c
  9868  00D998  D007               	goto	l1440
  9869  00D99A  0E00               	movlw	0
  9870  00D99C  6E15               	movwf	?___ftmul,c
  9871  00D99E  0E00               	movlw	0
  9872  00D9A0  6E16               	movwf	?___ftmul+1,c
  9873  00D9A2  0E00               	movlw	0
  9874  00D9A4  6E17               	movwf	?___ftmul+2,c
  9875  00D9A6  0012               	return	
  9876  00D9A8                     l1440:
  9877  00D9A8  5023               	movf	___ftmul@sign,w,c
  9878  00D9AA  0F7B               	addlw	123
  9879  00D9AC  261E               	addwf	___ftmul@exp,f,c
  9880  00D9AE  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  9881  00D9B2  501A               	movf	___ftmul@f2+2,w,c
  9882  00D9B4  1A23               	xorwf	___ftmul@sign,f,c
  9883  00D9B6  0E80               	movlw	128
  9884  00D9B8  1623               	andwf	___ftmul@sign,f,c
  9885  00D9BA  8E16               	bsf	___ftmul@f1+1,7,c
  9886  00D9BC  8E19               	bsf	___ftmul@f2+1,7,c
  9887  00D9BE  0EFF               	movlw	255
  9888  00D9C0  1618               	andwf	___ftmul@f2,f,c
  9889  00D9C2  0EFF               	movlw	255
  9890  00D9C4  1619               	andwf	___ftmul@f2+1,f,c
  9891  00D9C6  0E00               	movlw	0
  9892  00D9C8  161A               	andwf	___ftmul@f2+2,f,c
  9893  00D9CA  0E00               	movlw	0
  9894  00D9CC  6E1F               	movwf	___ftmul@f3_as_product,c
  9895  00D9CE  0E00               	movlw	0
  9896  00D9D0  6E20               	movwf	___ftmul@f3_as_product+1,c
  9897  00D9D2  0E00               	movlw	0
  9898  00D9D4  6E21               	movwf	___ftmul@f3_as_product+2,c
  9899  00D9D6  0E07               	movlw	7
  9900  00D9D8  6E22               	movwf	___ftmul@cntr,c
  9901  00D9DA  A015               	btfss	___ftmul@f1,0,c
  9902  00D9DC  D006               	goto	l1442
  9903  00D9DE  5018               	movf	___ftmul@f2,w,c
  9904  00D9E0  261F               	addwf	___ftmul@f3_as_product,f,c
  9905  00D9E2  5019               	movf	___ftmul@f2+1,w,c
  9906  00D9E4  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9907  00D9E6  501A               	movf	___ftmul@f2+2,w,c
  9908  00D9E8  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9909  00D9EA                     l1442:
  9910  00D9EA  90D8               	bcf	status,0,c
  9911  00D9EC  3217               	rrcf	___ftmul@f1+2,f,c
  9912  00D9EE  3216               	rrcf	___ftmul@f1+1,f,c
  9913  00D9F0  3215               	rrcf	___ftmul@f1,f,c
  9914  00D9F2  90D8               	bcf	status,0,c
  9915  00D9F4  3618               	rlcf	___ftmul@f2,f,c
  9916  00D9F6  3619               	rlcf	___ftmul@f2+1,f,c
  9917  00D9F8  361A               	rlcf	___ftmul@f2+2,f,c
  9918  00D9FA  2E22               	decfsz	___ftmul@cntr,f,c
  9919  00D9FC  D7EE               	goto	l1441
  9920  00D9FE  0E09               	movlw	9
  9921  00DA00  6E22               	movwf	___ftmul@cntr,c
  9922  00DA02  A015               	btfss	___ftmul@f1,0,c
  9923  00DA04  D006               	goto	l1445
  9924  00DA06  5018               	movf	___ftmul@f2,w,c
  9925  00DA08  261F               	addwf	___ftmul@f3_as_product,f,c
  9926  00DA0A  5019               	movf	___ftmul@f2+1,w,c
  9927  00DA0C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9928  00DA0E  501A               	movf	___ftmul@f2+2,w,c
  9929  00DA10  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9930  00DA12                     l1445:
  9931  00DA12  90D8               	bcf	status,0,c
  9932  00DA14  3217               	rrcf	___ftmul@f1+2,f,c
  9933  00DA16  3216               	rrcf	___ftmul@f1+1,f,c
  9934  00DA18  3215               	rrcf	___ftmul@f1,f,c
  9935  00DA1A  90D8               	bcf	status,0,c
  9936  00DA1C  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  9937  00DA1E  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  9938  00DA20  321F               	rrcf	___ftmul@f3_as_product,f,c
  9939  00DA22  2E22               	decfsz	___ftmul@cntr,f,c
  9940  00DA24  D7EE               	goto	l1444
  9941  00DA26  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9942  00DA2A  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9943  00DA2E  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9944  00DA32  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  9945  00DA36  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  9946  00DA3A  EC02  F06B         	call	___ftpack	;wreg free
  9947  00DA3E  C001  F015         	movff	?___ftpack,?___ftmul
  9948  00DA42  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  9949  00DA46  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  9950  00DA4A  0012               	return	
  9951  00DA4C                     __end_of___ftmul:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           postinc0	equ	0xFEE
  9961                           wreg	equ	0xFE8
  9962                           postdec1	equ	0xFE5
  9963                           plusw1	equ	0xFE3
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           plusw2	equ	0xFDB
  9969                           fsr2h	equ	0xFDA
  9970                           fsr2l	equ	0xFD9
  9971                           status	equ	0xFD8
  9972                           
  9973 ;; *************** function ___awmod *****************
  9974 ;; Defined at:
  9975 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  dividend        2    0[COMRAM] int 
  9978 ;;  divisor         2    2[COMRAM] int 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  sign            1    5[COMRAM] unsigned char 
  9981 ;;  counter         1    4[COMRAM] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  2    0[COMRAM] int 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9994 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;Total ram usage:        6 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; This function calls:
  9998 ;;		Nothing
  9999 ;; This function is called by:
 10000 ;;		_fround
 10001 ;;		_scale
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text36
 10006  00D146                     __ptext36:
 10007                           	opt stack 0
 10008  00D146                     ___awmod:
 10009                           	opt stack 27
 10010                           
 10011                           ;incstack = 0
 10012  00D146  0E00               	movlw	0
 10013  00D148  6E06               	movwf	___awmod@sign,c
 10014  00D14A  AE02               	btfss	___awmod@dividend+1,7,c
 10015  00D14C  D006               	goto	l1291
 10016  00D14E  6C01               	negf	___awmod@dividend,c
 10017  00D150  1E02               	comf	___awmod@dividend+1,f,c
 10018  00D152  B0D8               	btfsc	status,0,c
 10019  00D154  2A02               	incf	___awmod@dividend+1,f,c
 10020  00D156  0E01               	movlw	1
 10021  00D158  6E06               	movwf	___awmod@sign,c
 10022  00D15A                     l1291:
 10023  00D15A  AE04               	btfss	___awmod@divisor+1,7,c
 10024  00D15C  D004               	goto	l1292
 10025  00D15E  6C03               	negf	___awmod@divisor,c
 10026  00D160  1E04               	comf	___awmod@divisor+1,f,c
 10027  00D162  B0D8               	btfsc	status,0,c
 10028  00D164  2A04               	incf	___awmod@divisor+1,f,c
 10029  00D166                     l1292:
 10030  00D166  5003               	movf	___awmod@divisor,w,c
 10031  00D168  1004               	iorwf	___awmod@divisor+1,w,c
 10032  00D16A  B4D8               	btfsc	status,2,c
 10033  00D16C  D018               	goto	l1299
 10034  00D16E  0E01               	movlw	1
 10035  00D170  6E05               	movwf	___awmod@counter,c
 10036  00D172  D004               	goto	l1294
 10037  00D174  90D8               	bcf	status,0,c
 10038  00D176  3603               	rlcf	___awmod@divisor,f,c
 10039  00D178  3604               	rlcf	___awmod@divisor+1,f,c
 10040  00D17A  2A05               	incf	___awmod@counter,f,c
 10041  00D17C                     l1294:
 10042  00D17C  AE04               	btfss	___awmod@divisor+1,7,c
 10043  00D17E  D7FA               	goto	l1295
 10044  00D180                     u3560:
 10045  00D180  5003               	movf	___awmod@divisor,w,c
 10046  00D182  5C01               	subwf	___awmod@dividend,w,c
 10047  00D184  5004               	movf	___awmod@divisor+1,w,c
 10048  00D186  5802               	subwfb	___awmod@dividend+1,w,c
 10049  00D188  A0D8               	btfss	status,0,c
 10050  00D18A  D004               	goto	l1298
 10051  00D18C  5003               	movf	___awmod@divisor,w,c
 10052  00D18E  5E01               	subwf	___awmod@dividend,f,c
 10053  00D190  5004               	movf	___awmod@divisor+1,w,c
 10054  00D192  5A02               	subwfb	___awmod@dividend+1,f,c
 10055  00D194                     l1298:
 10056  00D194  90D8               	bcf	status,0,c
 10057  00D196  3204               	rrcf	___awmod@divisor+1,f,c
 10058  00D198  3203               	rrcf	___awmod@divisor,f,c
 10059  00D19A  2E05               	decfsz	___awmod@counter,f,c
 10060  00D19C  D7F1               	goto	u3560
 10061  00D19E                     l1299:
 10062  00D19E  5006               	movf	___awmod@sign,w,c
 10063  00D1A0  B4D8               	btfsc	status,2,c
 10064  00D1A2  D004               	goto	l1300
 10065  00D1A4  6C01               	negf	___awmod@dividend,c
 10066  00D1A6  1E02               	comf	___awmod@dividend+1,f,c
 10067  00D1A8  B0D8               	btfsc	status,0,c
 10068  00D1AA  2A02               	incf	___awmod@dividend+1,f,c
 10069  00D1AC                     l1300:
 10070  00D1AC  C001  F001         	movff	___awmod@dividend,?___awmod
 10071  00D1B0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10072  00D1B4  0012               	return	
 10073  00D1B6                     __end_of___awmod:
 10074                           	opt stack 0
 10075                           tblptru	equ	0xFF8
 10076                           tblptrh	equ	0xFF7
 10077                           tblptrl	equ	0xFF6
 10078                           tablat	equ	0xFF5
 10079                           prodh	equ	0xFF4
 10080                           prodl	equ	0xFF3
 10081                           intcon	equ	0xFF2
 10082                           postinc0	equ	0xFEE
 10083                           wreg	equ	0xFE8
 10084                           postdec1	equ	0xFE5
 10085                           plusw1	equ	0xFE3
 10086                           fsr1l	equ	0xFE1
 10087                           indf2	equ	0xFDF
 10088                           postinc2	equ	0xFDE
 10089                           postdec2	equ	0xFDD
 10090                           plusw2	equ	0xFDB
 10091                           fsr2h	equ	0xFDA
 10092                           fsr2l	equ	0xFD9
 10093                           status	equ	0xFD8
 10094                           
 10095 ;; *************** function ___awdiv *****************
 10096 ;; Defined at:
 10097 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  dividend        2    6[COMRAM] int 
 10100 ;;  divisor         2    8[COMRAM] int 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  quotient        2   12[COMRAM] int 
 10103 ;;  sign            1   11[COMRAM] unsigned char 
 10104 ;;  counter         1   10[COMRAM] unsigned char 
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  2    6[COMRAM] int 
 10107 ;; Registers used:
 10108 ;;		wreg, status,2, status,0
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10118 ;;Total ram usage:        8 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_fround
 10124 ;;		_scale
 10125 ;;		_printf
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text37
 10130  00D2B6                     __ptext37:
 10131                           	opt stack 0
 10132  00D2B6                     ___awdiv:
 10133                           	opt stack 27
 10134                           
 10135                           ;incstack = 0
 10136  00D2B6  0E00               	movlw	0
 10137  00D2B8  6E0C               	movwf	___awdiv@sign,c
 10138  00D2BA  AE0A               	btfss	___awdiv@divisor+1,7,c
 10139  00D2BC  D006               	goto	l1278
 10140  00D2BE  6C09               	negf	___awdiv@divisor,c
 10141  00D2C0  1E0A               	comf	___awdiv@divisor+1,f,c
 10142  00D2C2  B0D8               	btfsc	status,0,c
 10143  00D2C4  2A0A               	incf	___awdiv@divisor+1,f,c
 10144  00D2C6  0E01               	movlw	1
 10145  00D2C8  6E0C               	movwf	___awdiv@sign,c
 10146  00D2CA                     l1278:
 10147  00D2CA  AE08               	btfss	___awdiv@dividend+1,7,c
 10148  00D2CC  D006               	goto	l1279
 10149  00D2CE  6C07               	negf	___awdiv@dividend,c
 10150  00D2D0  1E08               	comf	___awdiv@dividend+1,f,c
 10151  00D2D2  B0D8               	btfsc	status,0,c
 10152  00D2D4  2A08               	incf	___awdiv@dividend+1,f,c
 10153  00D2D6  0E01               	movlw	1
 10154  00D2D8  1A0C               	xorwf	___awdiv@sign,f,c
 10155  00D2DA                     l1279:
 10156  00D2DA  0E00               	movlw	0
 10157  00D2DC  6E0E               	movwf	___awdiv@quotient+1,c
 10158  00D2DE  0E00               	movlw	0
 10159  00D2E0  6E0D               	movwf	___awdiv@quotient,c
 10160  00D2E2  5009               	movf	___awdiv@divisor,w,c
 10161  00D2E4  100A               	iorwf	___awdiv@divisor+1,w,c
 10162  00D2E6  B4D8               	btfsc	status,2,c
 10163  00D2E8  D01C               	goto	l1286
 10164  00D2EA  0E01               	movlw	1
 10165  00D2EC  6E0B               	movwf	___awdiv@counter,c
 10166  00D2EE  D004               	goto	l1281
 10167  00D2F0  90D8               	bcf	status,0,c
 10168  00D2F2  3609               	rlcf	___awdiv@divisor,f,c
 10169  00D2F4  360A               	rlcf	___awdiv@divisor+1,f,c
 10170  00D2F6  2A0B               	incf	___awdiv@counter,f,c
 10171  00D2F8                     l1281:
 10172  00D2F8  AE0A               	btfss	___awdiv@divisor+1,7,c
 10173  00D2FA  D7FA               	goto	l1282
 10174  00D2FC                     u3500:
 10175  00D2FC  90D8               	bcf	status,0,c
 10176  00D2FE  360D               	rlcf	___awdiv@quotient,f,c
 10177  00D300  360E               	rlcf	___awdiv@quotient+1,f,c
 10178  00D302  5009               	movf	___awdiv@divisor,w,c
 10179  00D304  5C07               	subwf	___awdiv@dividend,w,c
 10180  00D306  500A               	movf	___awdiv@divisor+1,w,c
 10181  00D308  5808               	subwfb	___awdiv@dividend+1,w,c
 10182  00D30A  A0D8               	btfss	status,0,c
 10183  00D30C  D005               	goto	l1285
 10184  00D30E  5009               	movf	___awdiv@divisor,w,c
 10185  00D310  5E07               	subwf	___awdiv@dividend,f,c
 10186  00D312  500A               	movf	___awdiv@divisor+1,w,c
 10187  00D314  5A08               	subwfb	___awdiv@dividend+1,f,c
 10188  00D316  800D               	bsf	___awdiv@quotient,0,c
 10189  00D318                     l1285:
 10190  00D318  90D8               	bcf	status,0,c
 10191  00D31A  320A               	rrcf	___awdiv@divisor+1,f,c
 10192  00D31C  3209               	rrcf	___awdiv@divisor,f,c
 10193  00D31E  2E0B               	decfsz	___awdiv@counter,f,c
 10194  00D320  D7ED               	goto	u3500
 10195  00D322                     l1286:
 10196  00D322  500C               	movf	___awdiv@sign,w,c
 10197  00D324  B4D8               	btfsc	status,2,c
 10198  00D326  D004               	goto	l1287
 10199  00D328  6C0D               	negf	___awdiv@quotient,c
 10200  00D32A  1E0E               	comf	___awdiv@quotient+1,f,c
 10201  00D32C  B0D8               	btfsc	status,0,c
 10202  00D32E  2A0E               	incf	___awdiv@quotient+1,f,c
 10203  00D330                     l1287:
 10204  00D330  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 10205  00D334  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 10206  00D338  0012               	return	
 10207  00D33A                     __end_of___awdiv:
 10208                           	opt stack 0
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           postinc0	equ	0xFEE
 10217                           wreg	equ	0xFE8
 10218                           postdec1	equ	0xFE5
 10219                           plusw1	equ	0xFE3
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           postdec2	equ	0xFDD
 10224                           plusw2	equ	0xFDB
 10225                           fsr2h	equ	0xFDA
 10226                           fsr2l	equ	0xFD9
 10227                           status	equ	0xFD8
 10228                           
 10229 ;; *************** function __tdiv_to_l_ *****************
 10230 ;; Defined at:
 10231 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  f1              3    0[COMRAM] float 
 10234 ;;  f2              3    3[COMRAM] float 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  quot            4    9[COMRAM] unsigned long 
 10237 ;;  exp1            1   14[COMRAM] unsigned char 
 10238 ;;  cntr            1   13[COMRAM] unsigned char 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  4    0[COMRAM] unsigned long 
 10241 ;; Registers used:
 10242 ;;		wreg, status,2, status,0
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10248 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10252 ;;Total ram usage:       15 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_printf
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text38
 10262  00DDAE                     __ptext38:
 10263                           	opt stack 0
 10264  00DDAE                     __tdiv_to_l_:
 10265                           	opt stack 28
 10266                           
 10267                           ;incstack = 0
 10268  00DDAE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10269  00DDB2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10270  00DDB4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10271  00DDB6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
 10272  00DDB8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10273  00DDBA  E301               	bnc	u3751
 10274  00DDBC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10275  00DDBE                     u3751:
 10276  00DDBE  5007               	movf	??__tdiv_to_l_,w,c
 10277  00DDC0  6E0F               	movwf	__tdiv_to_l_@exp1,c
 10278  00DDC2  500F               	movf	__tdiv_to_l_@exp1,w,c
 10279  00DDC4  A4D8               	btfss	status,2,c
 10280  00DDC6  D009               	goto	l1414
 10281  00DDC8  0E00               	movlw	0
 10282  00DDCA  6E01               	movwf	?__tdiv_to_l_,c
 10283  00DDCC  0E00               	movlw	0
 10284  00DDCE  6E02               	movwf	?__tdiv_to_l_+1,c
 10285  00DDD0  0E00               	movlw	0
 10286  00DDD2  6E03               	movwf	?__tdiv_to_l_+2,c
 10287  00DDD4  0E00               	movlw	0
 10288  00DDD6  6E04               	movwf	?__tdiv_to_l_+3,c
 10289  00DDD8  0012               	return	
 10290  00DDDA                     l1414:
 10291  00DDDA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10292  00DDDE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10293  00DDE0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10294  00DDE2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
 10295  00DDE4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10296  00DDE6  E301               	bnc	u3771
 10297  00DDE8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10298  00DDEA                     u3771:
 10299  00DDEA  5007               	movf	??__tdiv_to_l_,w,c
 10300  00DDEC  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10301  00DDEE  500E               	movf	__tdiv_to_l_@cntr,w,c
 10302  00DDF0  A4D8               	btfss	status,2,c
 10303  00DDF2  D009               	goto	l1416
 10304  00DDF4  0E00               	movlw	0
 10305  00DDF6  6E01               	movwf	?__tdiv_to_l_,c
 10306  00DDF8  0E00               	movlw	0
 10307  00DDFA  6E02               	movwf	?__tdiv_to_l_+1,c
 10308  00DDFC  0E00               	movlw	0
 10309  00DDFE  6E03               	movwf	?__tdiv_to_l_+2,c
 10310  00DE00  0E00               	movlw	0
 10311  00DE02  6E04               	movwf	?__tdiv_to_l_+3,c
 10312  00DE04  0012               	return	
 10313  00DE06                     l1416:
 10314  00DE06  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 10315  00DE08  0EFF               	movlw	255
 10316  00DE0A  1601               	andwf	__tdiv_to_l_@f1,f,c
 10317  00DE0C  0EFF               	movlw	255
 10318  00DE0E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 10319  00DE10  0E00               	movlw	0
 10320  00DE12  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 10321  00DE14  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 10322  00DE16  0EFF               	movlw	255
 10323  00DE18  1604               	andwf	__tdiv_to_l_@f2,f,c
 10324  00DE1A  0EFF               	movlw	255
 10325  00DE1C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 10326  00DE1E  0E00               	movlw	0
 10327  00DE20  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 10328  00DE22  0E00               	movlw	0
 10329  00DE24  6E0A               	movwf	__tdiv_to_l_@quot,c
 10330  00DE26  0E00               	movlw	0
 10331  00DE28  6E0B               	movwf	__tdiv_to_l_@quot+1,c
 10332  00DE2A  0E00               	movlw	0
 10333  00DE2C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
 10334  00DE2E  0E00               	movlw	0
 10335  00DE30  6E0D               	movwf	__tdiv_to_l_@quot+3,c
 10336  00DE32  0E7F               	movlw	127
 10337  00DE34  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10338  00DE36  500E               	movf	__tdiv_to_l_@cntr,w,c
 10339  00DE38  0F98               	addlw	152
 10340  00DE3A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10341  00DE3C  0E18               	movlw	24
 10342  00DE3E  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10343  00DE40                     l1417:
 10344  00DE40  90D8               	bcf	status,0,c
 10345  00DE42  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10346  00DE44  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10347  00DE46  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10348  00DE48  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10349  00DE4A  5004               	movf	__tdiv_to_l_@f2,w,c
 10350  00DE4C  5C01               	subwf	__tdiv_to_l_@f1,w,c
 10351  00DE4E  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10352  00DE50  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 10353  00DE52  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10354  00DE54  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 10355  00DE56  A0D8               	btfss	status,0,c
 10356  00DE58  D007               	goto	l1418
 10357  00DE5A  5004               	movf	__tdiv_to_l_@f2,w,c
 10358  00DE5C  5E01               	subwf	__tdiv_to_l_@f1,f,c
 10359  00DE5E  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10360  00DE60  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 10361  00DE62  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10362  00DE64  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 10363  00DE66  800A               	bsf	__tdiv_to_l_@quot,0,c
 10364  00DE68                     l1418:
 10365  00DE68  90D8               	bcf	status,0,c
 10366  00DE6A  3601               	rlcf	__tdiv_to_l_@f1,f,c
 10367  00DE6C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 10368  00DE6E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 10369  00DE70  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
 10370  00DE72  D7E6               	goto	l1417
 10371  00DE74  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
 10372  00DE76  D016               	goto	l1420
 10373  00DE78  500F               	movf	__tdiv_to_l_@exp1,w,c
 10374  00DE7A  0A80               	xorlw	128
 10375  00DE7C  0F97               	addlw	151
 10376  00DE7E  B0D8               	btfsc	status,0,c
 10377  00DE80  D009               	goto	l1421
 10378  00DE82  0E00               	movlw	0
 10379  00DE84  6E01               	movwf	?__tdiv_to_l_,c
 10380  00DE86  0E00               	movlw	0
 10381  00DE88  6E02               	movwf	?__tdiv_to_l_+1,c
 10382  00DE8A  0E00               	movlw	0
 10383  00DE8C  6E03               	movwf	?__tdiv_to_l_+2,c
 10384  00DE8E  0E00               	movlw	0
 10385  00DE90  6E04               	movwf	?__tdiv_to_l_+3,c
 10386  00DE92  0012               	return	
 10387  00DE94                     l1421:
 10388  00DE94  90D8               	bcf	status,0,c
 10389  00DE96  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
 10390  00DE98  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
 10391  00DE9A  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
 10392  00DE9C  320A               	rrcf	__tdiv_to_l_@quot,f,c
 10393  00DE9E  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
 10394  00DEA0  D7F9               	goto	l1421
 10395  00DEA2  D015               	goto	u3830
 10396  00DEA4                     l1420:
 10397  00DEA4  0E17               	movlw	23
 10398  00DEA6  640F               	cpfsgt	__tdiv_to_l_@exp1,c
 10399  00DEA8  D00F               	goto	l1426
 10400  00DEAA  0E00               	movlw	0
 10401  00DEAC  6E01               	movwf	?__tdiv_to_l_,c
 10402  00DEAE  0E00               	movlw	0
 10403  00DEB0  6E02               	movwf	?__tdiv_to_l_+1,c
 10404  00DEB2  0E00               	movlw	0
 10405  00DEB4  6E03               	movwf	?__tdiv_to_l_+2,c
 10406  00DEB6  0E00               	movlw	0
 10407  00DEB8  6E04               	movwf	?__tdiv_to_l_+3,c
 10408  00DEBA  0012               	return	
 10409  00DEBC  90D8               	bcf	status,0,c
 10410  00DEBE  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10411  00DEC0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10412  00DEC2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10413  00DEC4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10414  00DEC6  060F               	decf	__tdiv_to_l_@exp1,f,c
 10415  00DEC8                     l1426:
 10416  00DEC8  500F               	movf	__tdiv_to_l_@exp1,w,c
 10417  00DECA  A4D8               	btfss	status,2,c
 10418  00DECC  D7F7               	goto	l1427
 10419  00DECE                     u3830:
 10420  00DECE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10421  00DED2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10422  00DED6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10423  00DEDA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10424  00DEDE  0012               	return		;funcret
 10425  00DEE0                     __end_of__tdiv_to_l_:
 10426                           	opt stack 0
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           prodh	equ	0xFF4
 10432                           prodl	equ	0xFF3
 10433                           intcon	equ	0xFF2
 10434                           postinc0	equ	0xFEE
 10435                           wreg	equ	0xFE8
 10436                           postdec1	equ	0xFE5
 10437                           plusw1	equ	0xFE3
 10438                           fsr1l	equ	0xFE1
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           plusw2	equ	0xFDB
 10443                           fsr2h	equ	0xFDA
 10444                           fsr2l	equ	0xFD9
 10445                           status	equ	0xFD8
 10446                           
 10447 ;; *************** function __div_to_l_ *****************
 10448 ;; Defined at:
 10449 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  f1              3    0[COMRAM] unsigned long 
 10452 ;;  f2              3    3[COMRAM] unsigned long 
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  quot            4    6[COMRAM] unsigned long 
 10455 ;;  exp1            1   11[COMRAM] unsigned char 
 10456 ;;  cntr            1   10[COMRAM] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  4    0[COMRAM] unsigned long 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10466 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;Total ram usage:       12 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_printf
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text39
 10480  00DC86                     __ptext39:
 10481                           	opt stack 0
 10482  00DC86                     __div_to_l_:
 10483                           	opt stack 28
 10484                           
 10485                           ;incstack = 0
 10486  00DC86  3403               	rlcf	__div_to_l_@f1+2,w,c
 10487  00DC88  3404               	rlcf	__div_to_l_@f1+3,w,c
 10488  00DC8A  6E0C               	movwf	__div_to_l_@exp1,c
 10489  00DC8C  500C               	movf	__div_to_l_@exp1,w,c
 10490  00DC8E  A4D8               	btfss	status,2,c
 10491  00DC90  D009               	goto	l1310
 10492  00DC92  0E00               	movlw	0
 10493  00DC94  6E01               	movwf	?__div_to_l_,c
 10494  00DC96  0E00               	movlw	0
 10495  00DC98  6E02               	movwf	?__div_to_l_+1,c
 10496  00DC9A  0E00               	movlw	0
 10497  00DC9C  6E03               	movwf	?__div_to_l_+2,c
 10498  00DC9E  0E00               	movlw	0
 10499  00DCA0  6E04               	movwf	?__div_to_l_+3,c
 10500  00DCA2  0012               	return	
 10501  00DCA4                     l1310:
 10502  00DCA4  3406               	rlcf	__div_to_l_@f2+2,w,c
 10503  00DCA6  3407               	rlcf	__div_to_l_@f2+3,w,c
 10504  00DCA8  6E0B               	movwf	__div_to_l_@cntr,c
 10505  00DCAA  500B               	movf	__div_to_l_@cntr,w,c
 10506  00DCAC  A4D8               	btfss	status,2,c
 10507  00DCAE  D009               	goto	l1312
 10508  00DCB0  0E00               	movlw	0
 10509  00DCB2  6E01               	movwf	?__div_to_l_,c
 10510  00DCB4  0E00               	movlw	0
 10511  00DCB6  6E02               	movwf	?__div_to_l_+1,c
 10512  00DCB8  0E00               	movlw	0
 10513  00DCBA  6E03               	movwf	?__div_to_l_+2,c
 10514  00DCBC  0E00               	movlw	0
 10515  00DCBE  6E04               	movwf	?__div_to_l_+3,c
 10516  00DCC0  0012               	return	
 10517  00DCC2                     l1312:
 10518  00DCC2  8E03               	bsf	__div_to_l_@f1+2,7,c
 10519  00DCC4  0EFF               	movlw	255
 10520  00DCC6  1601               	andwf	__div_to_l_@f1,f,c
 10521  00DCC8  0EFF               	movlw	255
 10522  00DCCA  1602               	andwf	__div_to_l_@f1+1,f,c
 10523  00DCCC  0EFF               	movlw	255
 10524  00DCCE  1603               	andwf	__div_to_l_@f1+2,f,c
 10525  00DCD0  0E00               	movlw	0
 10526  00DCD2  1604               	andwf	__div_to_l_@f1+3,f,c
 10527  00DCD4  8E06               	bsf	__div_to_l_@f2+2,7,c
 10528  00DCD6  0EFF               	movlw	255
 10529  00DCD8  1604               	andwf	__div_to_l_@f2,f,c
 10530  00DCDA  0EFF               	movlw	255
 10531  00DCDC  1605               	andwf	__div_to_l_@f2+1,f,c
 10532  00DCDE  0EFF               	movlw	255
 10533  00DCE0  1606               	andwf	__div_to_l_@f2+2,f,c
 10534  00DCE2  0E00               	movlw	0
 10535  00DCE4  1607               	andwf	__div_to_l_@f2+3,f,c
 10536  00DCE6  0E00               	movlw	0
 10537  00DCE8  6E07               	movwf	__div_to_l_@quot,c
 10538  00DCEA  0E00               	movlw	0
 10539  00DCEC  6E08               	movwf	__div_to_l_@quot+1,c
 10540  00DCEE  0E00               	movlw	0
 10541  00DCF0  6E09               	movwf	__div_to_l_@quot+2,c
 10542  00DCF2  0E00               	movlw	0
 10543  00DCF4  6E0A               	movwf	__div_to_l_@quot+3,c
 10544  00DCF6  0E7F               	movlw	127
 10545  00DCF8  5E0C               	subwf	__div_to_l_@exp1,f,c
 10546  00DCFA  500B               	movf	__div_to_l_@cntr,w,c
 10547  00DCFC  0FA0               	addlw	160
 10548  00DCFE  5E0C               	subwf	__div_to_l_@exp1,f,c
 10549  00DD00  0E20               	movlw	32
 10550  00DD02  6E0B               	movwf	__div_to_l_@cntr,c
 10551  00DD04  90D8               	bcf	status,0,c
 10552  00DD06  3607               	rlcf	__div_to_l_@quot,f,c
 10553  00DD08  3608               	rlcf	__div_to_l_@quot+1,f,c
 10554  00DD0A  3609               	rlcf	__div_to_l_@quot+2,f,c
 10555  00DD0C  360A               	rlcf	__div_to_l_@quot+3,f,c
 10556  00DD0E  5004               	movf	__div_to_l_@f2,w,c
 10557  00DD10  5C01               	subwf	__div_to_l_@f1,w,c
 10558  00DD12  5005               	movf	__div_to_l_@f2+1,w,c
 10559  00DD14  5802               	subwfb	__div_to_l_@f1+1,w,c
 10560  00DD16  5006               	movf	__div_to_l_@f2+2,w,c
 10561  00DD18  5803               	subwfb	__div_to_l_@f1+2,w,c
 10562  00DD1A  5007               	movf	__div_to_l_@f2+3,w,c
 10563  00DD1C  5804               	subwfb	__div_to_l_@f1+3,w,c
 10564  00DD1E  A0D8               	btfss	status,0,c
 10565  00DD20  D009               	goto	l1314
 10566  00DD22  5004               	movf	__div_to_l_@f2,w,c
 10567  00DD24  5E01               	subwf	__div_to_l_@f1,f,c
 10568  00DD26  5005               	movf	__div_to_l_@f2+1,w,c
 10569  00DD28  5A02               	subwfb	__div_to_l_@f1+1,f,c
 10570  00DD2A  5006               	movf	__div_to_l_@f2+2,w,c
 10571  00DD2C  5A03               	subwfb	__div_to_l_@f1+2,f,c
 10572  00DD2E  5007               	movf	__div_to_l_@f2+3,w,c
 10573  00DD30  5A04               	subwfb	__div_to_l_@f1+3,f,c
 10574  00DD32  8007               	bsf	__div_to_l_@quot,0,c
 10575  00DD34                     l1314:
 10576  00DD34  90D8               	bcf	status,0,c
 10577  00DD36  3601               	rlcf	__div_to_l_@f1,f,c
 10578  00DD38  3602               	rlcf	__div_to_l_@f1+1,f,c
 10579  00DD3A  3603               	rlcf	__div_to_l_@f1+2,f,c
 10580  00DD3C  3604               	rlcf	__div_to_l_@f1+3,f,c
 10581  00DD3E  2E0B               	decfsz	__div_to_l_@cntr,f,c
 10582  00DD40  D7E1               	goto	l1313
 10583  00DD42  AE0C               	btfss	__div_to_l_@exp1,7,c
 10584  00DD44  D016               	goto	l1316
 10585  00DD46  500C               	movf	__div_to_l_@exp1,w,c
 10586  00DD48  0A80               	xorlw	128
 10587  00DD4A  0F9F               	addlw	159
 10588  00DD4C  B0D8               	btfsc	status,0,c
 10589  00DD4E  D009               	goto	l1317
 10590  00DD50  0E00               	movlw	0
 10591  00DD52  6E01               	movwf	?__div_to_l_,c
 10592  00DD54  0E00               	movlw	0
 10593  00DD56  6E02               	movwf	?__div_to_l_+1,c
 10594  00DD58  0E00               	movlw	0
 10595  00DD5A  6E03               	movwf	?__div_to_l_+2,c
 10596  00DD5C  0E00               	movlw	0
 10597  00DD5E  6E04               	movwf	?__div_to_l_+3,c
 10598  00DD60  0012               	return	
 10599  00DD62                     l1317:
 10600  00DD62  90D8               	bcf	status,0,c
 10601  00DD64  320A               	rrcf	__div_to_l_@quot+3,f,c
 10602  00DD66  3209               	rrcf	__div_to_l_@quot+2,f,c
 10603  00DD68  3208               	rrcf	__div_to_l_@quot+1,f,c
 10604  00DD6A  3207               	rrcf	__div_to_l_@quot,f,c
 10605  00DD6C  3E0C               	incfsz	__div_to_l_@exp1,f,c
 10606  00DD6E  D7F9               	goto	l1317
 10607  00DD70  D015               	goto	u3900
 10608  00DD72                     l1316:
 10609  00DD72  0E1F               	movlw	31
 10610  00DD74  640C               	cpfsgt	__div_to_l_@exp1,c
 10611  00DD76  D00F               	goto	l1322
 10612  00DD78  0E00               	movlw	0
 10613  00DD7A  6E01               	movwf	?__div_to_l_,c
 10614  00DD7C  0E00               	movlw	0
 10615  00DD7E  6E02               	movwf	?__div_to_l_+1,c
 10616  00DD80  0E00               	movlw	0
 10617  00DD82  6E03               	movwf	?__div_to_l_+2,c
 10618  00DD84  0E00               	movlw	0
 10619  00DD86  6E04               	movwf	?__div_to_l_+3,c
 10620  00DD88  0012               	return	
 10621  00DD8A  90D8               	bcf	status,0,c
 10622  00DD8C  3607               	rlcf	__div_to_l_@quot,f,c
 10623  00DD8E  3608               	rlcf	__div_to_l_@quot+1,f,c
 10624  00DD90  3609               	rlcf	__div_to_l_@quot+2,f,c
 10625  00DD92  360A               	rlcf	__div_to_l_@quot+3,f,c
 10626  00DD94  060C               	decf	__div_to_l_@exp1,f,c
 10627  00DD96                     l1322:
 10628  00DD96  500C               	movf	__div_to_l_@exp1,w,c
 10629  00DD98  A4D8               	btfss	status,2,c
 10630  00DD9A  D7F7               	goto	l1323
 10631  00DD9C                     u3900:
 10632  00DD9C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
 10633  00DDA0  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10634  00DDA4  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10635  00DDA8  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10636  00DDAC  0012               	return		;funcret
 10637  00DDAE                     __end_of__div_to_l_:
 10638                           	opt stack 0
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           postinc0	equ	0xFEE
 10647                           wreg	equ	0xFE8
 10648                           postdec1	equ	0xFE5
 10649                           plusw1	equ	0xFE3
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           postdec2	equ	0xFDD
 10654                           plusw2	equ	0xFDB
 10655                           fsr2h	equ	0xFDA
 10656                           fsr2l	equ	0xFD9
 10657                           status	equ	0xFD8
 10658                           
 10659 ;; *************** function ___lltoft *****************
 10660 ;; Defined at:
 10661 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;  c               4    8[COMRAM] unsigned long 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;  exp             1   16[COMRAM] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  3    8[COMRAM] float 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2, status,0, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;Total ram usage:        9 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    1
 10682 ;; This function calls:
 10683 ;;		___ftpack
 10684 ;; This function is called by:
 10685 ;;		_initSD
 10686 ;;		_printf
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           	psect	text40
 10691  00CEFC                     __ptext40:
 10692                           	opt stack 0
 10693  00CEFC                     ___lltoft:
 10694                           	opt stack 27
 10695                           
 10696                           ;incstack = 0
 10697  00CEFC  0E8E               	movlw	142
 10698  00CEFE  6E11               	movwf	___lltoft@exp,c
 10699  00CF00  D006               	goto	l1521
 10700  00CF02  90D8               	bcf	status,0,c
 10701  00CF04  320C               	rrcf	___lltoft@c+3,f,c
 10702  00CF06  320B               	rrcf	___lltoft@c+2,f,c
 10703  00CF08  320A               	rrcf	___lltoft@c+1,f,c
 10704  00CF0A  3209               	rrcf	___lltoft@c,f,c
 10705  00CF0C  2A11               	incf	___lltoft@exp,f,c
 10706  00CF0E                     l1521:
 10707  00CF0E  0E00               	movlw	0
 10708  00CF10  1409               	andwf	___lltoft@c,w,c
 10709  00CF12  6E0D               	movwf	??___lltoft& (0+255),c
 10710  00CF14  0E00               	movlw	0
 10711  00CF16  140A               	andwf	___lltoft@c+1,w,c
 10712  00CF18  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10713  00CF1A  0E00               	movlw	0
 10714  00CF1C  140B               	andwf	___lltoft@c+2,w,c
 10715  00CF1E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10716  00CF20  0EFF               	movlw	255
 10717  00CF22  140C               	andwf	___lltoft@c+3,w,c
 10718  00CF24  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10719  00CF26  500D               	movf	??___lltoft,w,c
 10720  00CF28  100E               	iorwf	??___lltoft+1,w,c
 10721  00CF2A  100F               	iorwf	??___lltoft+2,w,c
 10722  00CF2C  1010               	iorwf	??___lltoft+3,w,c
 10723  00CF2E  A4D8               	btfss	status,2,c
 10724  00CF30  D7E8               	goto	l1522
 10725  00CF32  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10726  00CF36  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10727  00CF3A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10728  00CF3E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10729  00CF42  0E00               	movlw	0
 10730  00CF44  6E05               	movwf	___ftpack@sign,c
 10731  00CF46  EC02  F06B         	call	___ftpack	;wreg free
 10732  00CF4A  C001  F009         	movff	?___ftpack,?___lltoft
 10733  00CF4E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10734  00CF52  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10735  00CF56  0012               	return	
 10736  00CF58                     __end_of___lltoft:
 10737                           	opt stack 0
 10738                           tblptru	equ	0xFF8
 10739                           tblptrh	equ	0xFF7
 10740                           tblptrl	equ	0xFF6
 10741                           tablat	equ	0xFF5
 10742                           prodh	equ	0xFF4
 10743                           prodl	equ	0xFF3
 10744                           intcon	equ	0xFF2
 10745                           postinc0	equ	0xFEE
 10746                           wreg	equ	0xFE8
 10747                           postdec1	equ	0xFE5
 10748                           plusw1	equ	0xFE3
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           plusw2	equ	0xFDB
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function ___llmod *****************
 10759 ;; Defined at:
 10760 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  dividend        4    0[COMRAM] unsigned long 
 10763 ;;  divisor         4    4[COMRAM] unsigned long 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  counter         1    8[COMRAM] unsigned char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  4    0[COMRAM] unsigned long 
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10775 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;Total ram usage:        9 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_printf
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text41
 10789  00D076                     __ptext41:
 10790                           	opt stack 0
 10791  00D076                     ___llmod:
 10792                           	opt stack 28
 10793                           
 10794                           ;incstack = 0
 10795  00D076  5005               	movf	___llmod@divisor,w,c
 10796  00D078  1006               	iorwf	___llmod@divisor+1,w,c
 10797  00D07A  1007               	iorwf	___llmod@divisor+2,w,c
 10798  00D07C  1008               	iorwf	___llmod@divisor+3,w,c
 10799  00D07E  B4D8               	btfsc	status,2,c
 10800  00D080  D024               	goto	l1515
 10801  00D082  0E01               	movlw	1
 10802  00D084  6E09               	movwf	___llmod@counter,c
 10803  00D086  D006               	goto	l1510
 10804  00D088  90D8               	bcf	status,0,c
 10805  00D08A  3605               	rlcf	___llmod@divisor,f,c
 10806  00D08C  3606               	rlcf	___llmod@divisor+1,f,c
 10807  00D08E  3607               	rlcf	___llmod@divisor+2,f,c
 10808  00D090  3608               	rlcf	___llmod@divisor+3,f,c
 10809  00D092  2A09               	incf	___llmod@counter,f,c
 10810  00D094                     l1510:
 10811  00D094  AE08               	btfss	___llmod@divisor+3,7,c
 10812  00D096  D7F8               	goto	l1511
 10813  00D098                     u4130:
 10814  00D098  5005               	movf	___llmod@divisor,w,c
 10815  00D09A  5C01               	subwf	___llmod@dividend,w,c
 10816  00D09C  5006               	movf	___llmod@divisor+1,w,c
 10817  00D09E  5802               	subwfb	___llmod@dividend+1,w,c
 10818  00D0A0  5007               	movf	___llmod@divisor+2,w,c
 10819  00D0A2  5803               	subwfb	___llmod@dividend+2,w,c
 10820  00D0A4  5008               	movf	___llmod@divisor+3,w,c
 10821  00D0A6  5804               	subwfb	___llmod@dividend+3,w,c
 10822  00D0A8  A0D8               	btfss	status,0,c
 10823  00D0AA  D008               	goto	l1514
 10824  00D0AC  5005               	movf	___llmod@divisor,w,c
 10825  00D0AE  5E01               	subwf	___llmod@dividend,f,c
 10826  00D0B0  5006               	movf	___llmod@divisor+1,w,c
 10827  00D0B2  5A02               	subwfb	___llmod@dividend+1,f,c
 10828  00D0B4  5007               	movf	___llmod@divisor+2,w,c
 10829  00D0B6  5A03               	subwfb	___llmod@dividend+2,f,c
 10830  00D0B8  5008               	movf	___llmod@divisor+3,w,c
 10831  00D0BA  5A04               	subwfb	___llmod@dividend+3,f,c
 10832  00D0BC                     l1514:
 10833  00D0BC  90D8               	bcf	status,0,c
 10834  00D0BE  3208               	rrcf	___llmod@divisor+3,f,c
 10835  00D0C0  3207               	rrcf	___llmod@divisor+2,f,c
 10836  00D0C2  3206               	rrcf	___llmod@divisor+1,f,c
 10837  00D0C4  3205               	rrcf	___llmod@divisor,f,c
 10838  00D0C6  2E09               	decfsz	___llmod@counter,f,c
 10839  00D0C8  D7E7               	goto	u4130
 10840  00D0CA                     l1515:
 10841  00D0CA  C001  F001         	movff	___llmod@dividend,?___llmod
 10842  00D0CE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
 10843  00D0D2  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
 10844  00D0D6  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
 10845  00D0DA  0012               	return		;funcret
 10846  00D0DC                     __end_of___llmod:
 10847                           	opt stack 0
 10848                           tblptru	equ	0xFF8
 10849                           tblptrh	equ	0xFF7
 10850                           tblptrl	equ	0xFF6
 10851                           tablat	equ	0xFF5
 10852                           prodh	equ	0xFF4
 10853                           prodl	equ	0xFF3
 10854                           intcon	equ	0xFF2
 10855                           postinc0	equ	0xFEE
 10856                           wreg	equ	0xFE8
 10857                           postdec1	equ	0xFE5
 10858                           plusw1	equ	0xFE3
 10859                           fsr1l	equ	0xFE1
 10860                           indf2	equ	0xFDF
 10861                           postinc2	equ	0xFDE
 10862                           postdec2	equ	0xFDD
 10863                           plusw2	equ	0xFDB
 10864                           fsr2h	equ	0xFDA
 10865                           fsr2l	equ	0xFD9
 10866                           status	equ	0xFD8
 10867                           
 10868 ;; *************** function ___lldiv *****************
 10869 ;; Defined at:
 10870 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  dividend        4    0[COMRAM] unsigned long 
 10873 ;;  divisor         4    4[COMRAM] unsigned long 
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  quotient        4    8[COMRAM] unsigned long 
 10876 ;;  counter         1   12[COMRAM] unsigned char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  4    0[COMRAM] unsigned long 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10886 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;Total ram usage:       13 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; This function calls:
 10893 ;;		Nothing
 10894 ;; This function is called by:
 10895 ;;		_I2C_Master_Init
 10896 ;;		_printf
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           	psect	text42
 10901  00D234                     __ptext42:
 10902                           	opt stack 0
 10903  00D234                     ___lldiv:
 10904                           	opt stack 28
 10905                           
 10906                           ;incstack = 0
 10907  00D234  0E00               	movlw	0
 10908  00D236  6E09               	movwf	___lldiv@quotient,c
 10909  00D238  0E00               	movlw	0
 10910  00D23A  6E0A               	movwf	___lldiv@quotient+1,c
 10911  00D23C  0E00               	movlw	0
 10912  00D23E  6E0B               	movwf	___lldiv@quotient+2,c
 10913  00D240  0E00               	movlw	0
 10914  00D242  6E0C               	movwf	___lldiv@quotient+3,c
 10915  00D244  5005               	movf	___lldiv@divisor,w,c
 10916  00D246  1006               	iorwf	___lldiv@divisor+1,w,c
 10917  00D248  1007               	iorwf	___lldiv@divisor+2,w,c
 10918  00D24A  1008               	iorwf	___lldiv@divisor+3,w,c
 10919  00D24C  B4D8               	btfsc	status,2,c
 10920  00D24E  D02A               	goto	l1505
 10921  00D250  0E01               	movlw	1
 10922  00D252  6E0D               	movwf	___lldiv@counter,c
 10923  00D254  D006               	goto	l1500
 10924  00D256  90D8               	bcf	status,0,c
 10925  00D258  3605               	rlcf	___lldiv@divisor,f,c
 10926  00D25A  3606               	rlcf	___lldiv@divisor+1,f,c
 10927  00D25C  3607               	rlcf	___lldiv@divisor+2,f,c
 10928  00D25E  3608               	rlcf	___lldiv@divisor+3,f,c
 10929  00D260  2A0D               	incf	___lldiv@counter,f,c
 10930  00D262                     l1500:
 10931  00D262  AE08               	btfss	___lldiv@divisor+3,7,c
 10932  00D264  D7F8               	goto	l1501
 10933  00D266                     u4100:
 10934  00D266  90D8               	bcf	status,0,c
 10935  00D268  3609               	rlcf	___lldiv@quotient,f,c
 10936  00D26A  360A               	rlcf	___lldiv@quotient+1,f,c
 10937  00D26C  360B               	rlcf	___lldiv@quotient+2,f,c
 10938  00D26E  360C               	rlcf	___lldiv@quotient+3,f,c
 10939  00D270  5005               	movf	___lldiv@divisor,w,c
 10940  00D272  5C01               	subwf	___lldiv@dividend,w,c
 10941  00D274  5006               	movf	___lldiv@divisor+1,w,c
 10942  00D276  5802               	subwfb	___lldiv@dividend+1,w,c
 10943  00D278  5007               	movf	___lldiv@divisor+2,w,c
 10944  00D27A  5803               	subwfb	___lldiv@dividend+2,w,c
 10945  00D27C  5008               	movf	___lldiv@divisor+3,w,c
 10946  00D27E  5804               	subwfb	___lldiv@dividend+3,w,c
 10947  00D280  A0D8               	btfss	status,0,c
 10948  00D282  D009               	goto	l1504
 10949  00D284  5005               	movf	___lldiv@divisor,w,c
 10950  00D286  5E01               	subwf	___lldiv@dividend,f,c
 10951  00D288  5006               	movf	___lldiv@divisor+1,w,c
 10952  00D28A  5A02               	subwfb	___lldiv@dividend+1,f,c
 10953  00D28C  5007               	movf	___lldiv@divisor+2,w,c
 10954  00D28E  5A03               	subwfb	___lldiv@dividend+2,f,c
 10955  00D290  5008               	movf	___lldiv@divisor+3,w,c
 10956  00D292  5A04               	subwfb	___lldiv@dividend+3,f,c
 10957  00D294  8009               	bsf	___lldiv@quotient,0,c
 10958  00D296                     l1504:
 10959  00D296  90D8               	bcf	status,0,c
 10960  00D298  3208               	rrcf	___lldiv@divisor+3,f,c
 10961  00D29A  3207               	rrcf	___lldiv@divisor+2,f,c
 10962  00D29C  3206               	rrcf	___lldiv@divisor+1,f,c
 10963  00D29E  3205               	rrcf	___lldiv@divisor,f,c
 10964  00D2A0  2E0D               	decfsz	___lldiv@counter,f,c
 10965  00D2A2  D7E1               	goto	u4100
 10966  00D2A4                     l1505:
 10967  00D2A4  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10968  00D2A8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10969  00D2AC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10970  00D2B0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10971  00D2B4  0012               	return		;funcret
 10972  00D2B6                     __end_of___lldiv:
 10973                           	opt stack 0
 10974                           tblptru	equ	0xFF8
 10975                           tblptrh	equ	0xFF7
 10976                           tblptrl	equ	0xFF6
 10977                           tablat	equ	0xFF5
 10978                           prodh	equ	0xFF4
 10979                           prodl	equ	0xFF3
 10980                           intcon	equ	0xFF2
 10981                           postinc0	equ	0xFEE
 10982                           wreg	equ	0xFE8
 10983                           postdec1	equ	0xFE5
 10984                           plusw1	equ	0xFE3
 10985                           fsr1l	equ	0xFE1
 10986                           indf2	equ	0xFDF
 10987                           postinc2	equ	0xFDE
 10988                           postdec2	equ	0xFDD
 10989                           plusw2	equ	0xFDB
 10990                           fsr2h	equ	0xFDA
 10991                           fsr2l	equ	0xFD9
 10992                           status	equ	0xFD8
 10993                           
 10994 ;; *************** function ___fttol *****************
 10995 ;; Defined at:
 10996 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  f1              3   42[COMRAM] float 
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;  lval            4   52[COMRAM] unsigned long 
 11001 ;;  exp1            1   56[COMRAM] unsigned char 
 11002 ;;  sign1           1   51[COMRAM] unsigned char 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  4   42[COMRAM] long 
 11005 ;; Registers used:
 11006 ;;		wreg, status,2, status,0
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;Total ram usage:       15 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; This function calls:
 11019 ;;		Nothing
 11020 ;; This function is called by:
 11021 ;;		_initSD
 11022 ;;		_printf
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           	psect	text43
 11027  00D864                     __ptext43:
 11028                           	opt stack 0
 11029  00D864                     ___fttol:
 11030                           	opt stack 28
 11031                           
 11032                           ;incstack = 0
 11033  00D864  C02D  F02F         	movff	___fttol@f1+2,??___fttol
 11034  00D868  6A30               	clrf	(??___fttol+1)& (0+255),c
 11035  00D86A  6A31               	clrf	(??___fttol+2)& (0+255),c
 11036  00D86C  342C               	rlcf	___fttol@f1+1,w,c
 11037  00D86E  362F               	rlcf	??___fttol& (0+255),f,c
 11038  00D870  E301               	bnc	u4011
 11039  00D872  8030               	bsf	(??___fttol+1)& (0+255),0,c
 11040  00D874                     u4011:
 11041  00D874  502F               	movf	??___fttol,w,c
 11042  00D876  6E39               	movwf	___fttol@exp1,c
 11043  00D878  5039               	movf	___fttol@exp1,w,c
 11044  00D87A  A4D8               	btfss	status,2,c
 11045  00D87C  D009               	goto	l1459
 11046  00D87E  0E00               	movlw	0
 11047  00D880  6E2B               	movwf	?___fttol,c
 11048  00D882  0E00               	movlw	0
 11049  00D884  6E2C               	movwf	?___fttol+1,c
 11050  00D886  0E00               	movlw	0
 11051  00D888  6E2D               	movwf	?___fttol+2,c
 11052  00D88A  0E00               	movlw	0
 11053  00D88C  6E2E               	movwf	?___fttol+3,c
 11054  00D88E  0012               	return	
 11055  00D890                     l1459:
 11056  00D890  0E17               	movlw	23
 11057  00D892  6E2F               	movwf	??___fttol& (0+255),c
 11058  00D894  C02B  F030         	movff	___fttol@f1,??___fttol+1
 11059  00D898  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
 11060  00D89C  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
 11061  00D8A0  282F               	incf	??___fttol,w,c
 11062  00D8A2  6E33               	movwf	(??___fttol+4)& (0+255),c
 11063  00D8A4  D004               	goto	u4030
 11064  00D8A6                     u4035:
 11065  00D8A6  90D8               	bcf	status,0,c
 11066  00D8A8  3232               	rrcf	??___fttol+3,f,c
 11067  00D8AA  3231               	rrcf	??___fttol+2,f,c
 11068  00D8AC  3230               	rrcf	??___fttol+1,f,c
 11069  00D8AE                     u4030:
 11070  00D8AE  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
 11071  00D8B0  D7FA               	goto	u4035
 11072  00D8B2  5030               	movf	??___fttol+1,w,c
 11073  00D8B4  6E34               	movwf	___fttol@sign1,c
 11074  00D8B6  8E2C               	bsf	___fttol@f1+1,7,c
 11075  00D8B8  0EFF               	movlw	255
 11076  00D8BA  162B               	andwf	___fttol@f1,f,c
 11077  00D8BC  0EFF               	movlw	255
 11078  00D8BE  162C               	andwf	___fttol@f1+1,f,c
 11079  00D8C0  0E00               	movlw	0
 11080  00D8C2  162D               	andwf	___fttol@f1+2,f,c
 11081  00D8C4  502B               	movf	___fttol@f1,w,c
 11082  00D8C6  6E35               	movwf	___fttol@lval,c
 11083  00D8C8  502C               	movf	___fttol@f1+1,w,c
 11084  00D8CA  6E36               	movwf	___fttol@lval+1,c
 11085  00D8CC  502D               	movf	___fttol@f1+2,w,c
 11086  00D8CE  6E37               	movwf	___fttol@lval+2,c
 11087  00D8D0  6A38               	clrf	___fttol@lval+3,c
 11088  00D8D2  0E8E               	movlw	142
 11089  00D8D4  5E39               	subwf	___fttol@exp1,f,c
 11090  00D8D6  AE39               	btfss	___fttol@exp1,7,c
 11091  00D8D8  D016               	goto	l1461
 11092  00D8DA  5039               	movf	___fttol@exp1,w,c
 11093  00D8DC  0A80               	xorlw	128
 11094  00D8DE  0F8F               	addlw	143
 11095  00D8E0  B0D8               	btfsc	status,0,c
 11096  00D8E2  D009               	goto	l1462
 11097  00D8E4  0E00               	movlw	0
 11098  00D8E6  6E2B               	movwf	?___fttol,c
 11099  00D8E8  0E00               	movlw	0
 11100  00D8EA  6E2C               	movwf	?___fttol+1,c
 11101  00D8EC  0E00               	movlw	0
 11102  00D8EE  6E2D               	movwf	?___fttol+2,c
 11103  00D8F0  0E00               	movlw	0
 11104  00D8F2  6E2E               	movwf	?___fttol+3,c
 11105  00D8F4  0012               	return	
 11106  00D8F6                     l1462:
 11107  00D8F6  90D8               	bcf	status,0,c
 11108  00D8F8  3238               	rrcf	___fttol@lval+3,f,c
 11109  00D8FA  3237               	rrcf	___fttol@lval+2,f,c
 11110  00D8FC  3236               	rrcf	___fttol@lval+1,f,c
 11111  00D8FE  3235               	rrcf	___fttol@lval,f,c
 11112  00D900  3E39               	incfsz	___fttol@exp1,f,c
 11113  00D902  D7F9               	goto	l1462
 11114  00D904  D015               	goto	u4070
 11115  00D906                     l1461:
 11116  00D906  0E17               	movlw	23
 11117  00D908  6439               	cpfsgt	___fttol@exp1,c
 11118  00D90A  D00F               	goto	l1467
 11119  00D90C  0E00               	movlw	0
 11120  00D90E  6E2B               	movwf	?___fttol,c
 11121  00D910  0E00               	movlw	0
 11122  00D912  6E2C               	movwf	?___fttol+1,c
 11123  00D914  0E00               	movlw	0
 11124  00D916  6E2D               	movwf	?___fttol+2,c
 11125  00D918  0E00               	movlw	0
 11126  00D91A  6E2E               	movwf	?___fttol+3,c
 11127  00D91C  0012               	return	
 11128  00D91E  90D8               	bcf	status,0,c
 11129  00D920  3635               	rlcf	___fttol@lval,f,c
 11130  00D922  3636               	rlcf	___fttol@lval+1,f,c
 11131  00D924  3637               	rlcf	___fttol@lval+2,f,c
 11132  00D926  3638               	rlcf	___fttol@lval+3,f,c
 11133  00D928  0639               	decf	___fttol@exp1,f,c
 11134  00D92A                     l1467:
 11135  00D92A  5039               	movf	___fttol@exp1,w,c
 11136  00D92C  A4D8               	btfss	status,2,c
 11137  00D92E  D7F7               	goto	l1468
 11138  00D930                     u4070:
 11139  00D930  5034               	movf	___fttol@sign1,w,c
 11140  00D932  B4D8               	btfsc	status,2,c
 11141  00D934  D008               	goto	l1470
 11142  00D936  1E38               	comf	___fttol@lval+3,f,c
 11143  00D938  1E37               	comf	___fttol@lval+2,f,c
 11144  00D93A  1E36               	comf	___fttol@lval+1,f,c
 11145  00D93C  6C35               	negf	___fttol@lval,c
 11146  00D93E  0E00               	movlw	0
 11147  00D940  2236               	addwfc	___fttol@lval+1,f,c
 11148  00D942  2237               	addwfc	___fttol@lval+2,f,c
 11149  00D944  2238               	addwfc	___fttol@lval+3,f,c
 11150  00D946                     l1470:
 11151  00D946  C035  F02B         	movff	___fttol@lval,?___fttol
 11152  00D94A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
 11153  00D94E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
 11154  00D952  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
 11155  00D956  0012               	return	
 11156  00D958                     __end_of___fttol:
 11157                           	opt stack 0
 11158                           tblptru	equ	0xFF8
 11159                           tblptrh	equ	0xFF7
 11160                           tblptrl	equ	0xFF6
 11161                           tablat	equ	0xFF5
 11162                           prodh	equ	0xFF4
 11163                           prodl	equ	0xFF3
 11164                           intcon	equ	0xFF2
 11165                           postinc0	equ	0xFEE
 11166                           wreg	equ	0xFE8
 11167                           postdec1	equ	0xFE5
 11168                           plusw1	equ	0xFE3
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           plusw2	equ	0xFDB
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function ___ftsub *****************
 11179 ;; Defined at:
 11180 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  f1              3   57[COMRAM] float 
 11183 ;;  f2              3   60[COMRAM] float 
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;		None
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  3   57[COMRAM] float 
 11188 ;; Registers used:
 11189 ;;		wreg, status,2, status,0, cstack
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11195 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;Total ram usage:        6 bytes
 11200 ;; Hardware stack levels used:    1
 11201 ;; Hardware stack levels required when called:    2
 11202 ;; This function calls:
 11203 ;;		___ftadd
 11204 ;; This function is called by:
 11205 ;;		_printf
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           	psect	text44
 11210  00CDC6                     __ptext44:
 11211                           	opt stack 0
 11212  00CDC6                     ___ftsub:
 11213                           	opt stack 26
 11214                           
 11215                           ;incstack = 0
 11216  00CDC6  503D               	movf	___ftsub@f2,w,c
 11217  00CDC8  103E               	iorwf	___ftsub@f2+1,w,c
 11218  00CDCA  103F               	iorwf	___ftsub@f2+2,w,c
 11219  00CDCC  B4D8               	btfsc	status,2,c
 11220  00CDCE  D006               	goto	l1455
 11221  00CDD0  0E00               	movlw	0
 11222  00CDD2  1A3D               	xorwf	___ftsub@f2,f,c
 11223  00CDD4  0E00               	movlw	0
 11224  00CDD6  1A3E               	xorwf	___ftsub@f2+1,f,c
 11225  00CDD8  0E80               	movlw	128
 11226  00CDDA  1A3F               	xorwf	___ftsub@f2+2,f,c
 11227  00CDDC                     l1455:
 11228  00CDDC  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
 11229  00CDE0  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
 11230  00CDE4  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
 11231  00CDE8  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
 11232  00CDEC  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
 11233  00CDF0  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
 11234  00CDF4  ECE1  F070         	call	___ftadd	;wreg free
 11235  00CDF8  C02E  F03A         	movff	?___ftadd,?___ftsub
 11236  00CDFC  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
 11237  00CE00  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
 11238  00CE04  0012               	return	
 11239  00CE06                     __end_of___ftsub:
 11240                           	opt stack 0
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           postinc0	equ	0xFEE
 11249                           wreg	equ	0xFE8
 11250                           postdec1	equ	0xFE5
 11251                           plusw1	equ	0xFE3
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function ___ftadd *****************
 11262 ;; Defined at:
 11263 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  f1              3   45[COMRAM] float 
 11266 ;;  f2              3   48[COMRAM] float 
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  exp1            1   56[COMRAM] unsigned char 
 11269 ;;  exp2            1   55[COMRAM] unsigned char 
 11270 ;;  sign            1   54[COMRAM] unsigned char 
 11271 ;; Return value:  Size  Location     Type
 11272 ;;                  3   45[COMRAM] float 
 11273 ;; Registers used:
 11274 ;;		wreg, status,2, status,0, cstack
 11275 ;; Tracked objects:
 11276 ;;		On entry : 0/0
 11277 ;;		On exit  : 0/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11280 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;Total ram usage:       12 bytes
 11285 ;; Hardware stack levels used:    1
 11286 ;; Hardware stack levels required when called:    1
 11287 ;; This function calls:
 11288 ;;		___ftpack
 11289 ;; This function is called by:
 11290 ;;		_printf
 11291 ;;		___ftsub
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text45
 11296  00E1C2                     __ptext45:
 11297                           	opt stack 0
 11298  00E1C2                     ___ftadd:
 11299                           	opt stack 26
 11300                           
 11301                           ;incstack = 0
 11302  00E1C2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
 11303  00E1C6  6A35               	clrf	(??___ftadd+1)& (0+255),c
 11304  00E1C8  6A36               	clrf	(??___ftadd+2)& (0+255),c
 11305  00E1CA  342F               	rlcf	___ftadd@f1+1,w,c
 11306  00E1CC  3634               	rlcf	??___ftadd& (0+255),f,c
 11307  00E1CE  E301               	bnc	u3201
 11308  00E1D0  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 11309  00E1D2                     u3201:
 11310  00E1D2  5034               	movf	??___ftadd,w,c
 11311  00E1D4  6E39               	movwf	___ftadd@exp1,c
 11312  00E1D6  C033  F034         	movff	___ftadd@f2+2,??___ftadd
 11313  00E1DA  6A35               	clrf	(??___ftadd+1)& (0+255),c
 11314  00E1DC  6A36               	clrf	(??___ftadd+2)& (0+255),c
 11315  00E1DE  3432               	rlcf	___ftadd@f2+1,w,c
 11316  00E1E0  3634               	rlcf	??___ftadd& (0+255),f,c
 11317  00E1E2  E301               	bnc	u3211
 11318  00E1E4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 11319  00E1E6                     u3211:
 11320  00E1E6  5034               	movf	??___ftadd,w,c
 11321  00E1E8  6E38               	movwf	___ftadd@exp2,c
 11322  00E1EA  5039               	movf	___ftadd@exp1,w,c
 11323  00E1EC  B4D8               	btfsc	status,2,c
 11324  00E1EE  D00B               	goto	u3240
 11325  00E1F0  5038               	movf	___ftadd@exp2,w,c
 11326  00E1F2  5C39               	subwf	___ftadd@exp1,w,c
 11327  00E1F4  B0D8               	btfsc	status,0,c
 11328  00E1F6  D00E               	goto	l1373
 11329  00E1F8  5039               	movf	___ftadd@exp1,w,c
 11330  00E1FA  0800               	sublw	0
 11331  00E1FC  2438               	addwf	___ftadd@exp2,w,c
 11332  00E1FE  6E34               	movwf	??___ftadd& (0+255),c
 11333  00E200  0E18               	movlw	24
 11334  00E202  6434               	cpfsgt	??___ftadd,c
 11335  00E204  D007               	goto	l1373
 11336  00E206                     u3240:
 11337  00E206  C031  F02E         	movff	___ftadd@f2,?___ftadd
 11338  00E20A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
 11339  00E20E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
 11340  00E212  0012               	return	
 11341  00E214                     l1373:
 11342  00E214  5038               	movf	___ftadd@exp2,w,c
 11343  00E216  B4D8               	btfsc	status,2,c
 11344  00E218  D00B               	goto	u3270
 11345  00E21A  5039               	movf	___ftadd@exp1,w,c
 11346  00E21C  5C38               	subwf	___ftadd@exp2,w,c
 11347  00E21E  B0D8               	btfsc	status,0,c
 11348  00E220  D00E               	goto	l1377
 11349  00E222  5038               	movf	___ftadd@exp2,w,c
 11350  00E224  0800               	sublw	0
 11351  00E226  2439               	addwf	___ftadd@exp1,w,c
 11352  00E228  6E34               	movwf	??___ftadd& (0+255),c
 11353  00E22A  0E18               	movlw	24
 11354  00E22C  6434               	cpfsgt	??___ftadd,c
 11355  00E22E  D007               	goto	l1377
 11356  00E230                     u3270:
 11357  00E230  C02E  F02E         	movff	___ftadd@f1,?___ftadd
 11358  00E234  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
 11359  00E238  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
 11360  00E23C  0012               	return	
 11361  00E23E                     l1377:
 11362  00E23E  0E06               	movlw	6
 11363  00E240  6E37               	movwf	___ftadd@sign,c
 11364  00E242  BE30               	btfsc	___ftadd@f1+2,7,c
 11365  00E244  8E37               	bsf	___ftadd@sign,7,c
 11366  00E246  BE33               	btfsc	___ftadd@f2+2,7,c
 11367  00E248  8C37               	bsf	___ftadd@sign,6,c
 11368  00E24A  8E2F               	bsf	___ftadd@f1+1,7,c
 11369  00E24C  0EFF               	movlw	255
 11370  00E24E  162E               	andwf	___ftadd@f1,f,c
 11371  00E250  0EFF               	movlw	255
 11372  00E252  162F               	andwf	___ftadd@f1+1,f,c
 11373  00E254  0E00               	movlw	0
 11374  00E256  1630               	andwf	___ftadd@f1+2,f,c
 11375  00E258  8E32               	bsf	___ftadd@f2+1,7,c
 11376  00E25A  0EFF               	movlw	255
 11377  00E25C  1631               	andwf	___ftadd@f2,f,c
 11378  00E25E  0EFF               	movlw	255
 11379  00E260  1632               	andwf	___ftadd@f2+1,f,c
 11380  00E262  0E00               	movlw	0
 11381  00E264  1633               	andwf	___ftadd@f2+2,f,c
 11382  00E266  5038               	movf	___ftadd@exp2,w,c
 11383  00E268  5C39               	subwf	___ftadd@exp1,w,c
 11384  00E26A  B0D8               	btfsc	status,0,c
 11385  00E26C  D01B               	goto	l1382
 11386  00E26E                     u3300:
 11387  00E26E  90D8               	bcf	status,0,c
 11388  00E270  3631               	rlcf	___ftadd@f2,f,c
 11389  00E272  3632               	rlcf	___ftadd@f2+1,f,c
 11390  00E274  3633               	rlcf	___ftadd@f2+2,f,c
 11391  00E276  0638               	decf	___ftadd@exp2,f,c
 11392  00E278  5039               	movf	___ftadd@exp1,w,c
 11393  00E27A  1838               	xorwf	___ftadd@exp2,w,c
 11394  00E27C  B4D8               	btfsc	status,2,c
 11395  00E27E  D00D               	goto	l1387
 11396  00E280  0637               	decf	___ftadd@sign,f,c
 11397  00E282  C037  F034         	movff	___ftadd@sign,??___ftadd
 11398  00E286  0E07               	movlw	7
 11399  00E288  1634               	andwf	??___ftadd,f,c
 11400  00E28A  B4D8               	btfsc	status,2,c
 11401  00E28C  D006               	goto	l1387
 11402  00E28E  D7EF               	goto	u3300
 11403  00E290  90D8               	bcf	status,0,c
 11404  00E292  3230               	rrcf	___ftadd@f1+2,f,c
 11405  00E294  322F               	rrcf	___ftadd@f1+1,f,c
 11406  00E296  322E               	rrcf	___ftadd@f1,f,c
 11407  00E298  2A39               	incf	___ftadd@exp1,f,c
 11408  00E29A                     l1387:
 11409  00E29A  5038               	movf	___ftadd@exp2,w,c
 11410  00E29C  1839               	xorwf	___ftadd@exp1,w,c
 11411  00E29E  B4D8               	btfsc	status,2,c
 11412  00E2A0  D01F               	goto	u3370
 11413  00E2A2  D7F6               	goto	l1388
 11414  00E2A4                     l1382:
 11415  00E2A4  5039               	movf	___ftadd@exp1,w,c
 11416  00E2A6  5C38               	subwf	___ftadd@exp2,w,c
 11417  00E2A8  B0D8               	btfsc	status,0,c
 11418  00E2AA  D01A               	goto	u3370
 11419  00E2AC                     u3340:
 11420  00E2AC  90D8               	bcf	status,0,c
 11421  00E2AE  362E               	rlcf	___ftadd@f1,f,c
 11422  00E2B0  362F               	rlcf	___ftadd@f1+1,f,c
 11423  00E2B2  3630               	rlcf	___ftadd@f1+2,f,c
 11424  00E2B4  0639               	decf	___ftadd@exp1,f,c
 11425  00E2B6  5039               	movf	___ftadd@exp1,w,c
 11426  00E2B8  1838               	xorwf	___ftadd@exp2,w,c
 11427  00E2BA  B4D8               	btfsc	status,2,c
 11428  00E2BC  D00D               	goto	l1396
 11429  00E2BE  0637               	decf	___ftadd@sign,f,c
 11430  00E2C0  C037  F034         	movff	___ftadd@sign,??___ftadd
 11431  00E2C4  0E07               	movlw	7
 11432  00E2C6  1634               	andwf	??___ftadd,f,c
 11433  00E2C8  B4D8               	btfsc	status,2,c
 11434  00E2CA  D006               	goto	l1396
 11435  00E2CC  D7EF               	goto	u3340
 11436  00E2CE  90D8               	bcf	status,0,c
 11437  00E2D0  3233               	rrcf	___ftadd@f2+2,f,c
 11438  00E2D2  3232               	rrcf	___ftadd@f2+1,f,c
 11439  00E2D4  3231               	rrcf	___ftadd@f2,f,c
 11440  00E2D6  2A38               	incf	___ftadd@exp2,f,c
 11441  00E2D8                     l1396:
 11442  00E2D8  5038               	movf	___ftadd@exp2,w,c
 11443  00E2DA  1839               	xorwf	___ftadd@exp1,w,c
 11444  00E2DC  A4D8               	btfss	status,2,c
 11445  00E2DE  D7F7               	goto	l1397
 11446  00E2E0                     u3370:
 11447  00E2E0  AE37               	btfss	___ftadd@sign,7,c
 11448  00E2E2  D00C               	goto	l1399
 11449  00E2E4  0EFF               	movlw	255
 11450  00E2E6  1A2E               	xorwf	___ftadd@f1,f,c
 11451  00E2E8  0EFF               	movlw	255
 11452  00E2EA  1A2F               	xorwf	___ftadd@f1+1,f,c
 11453  00E2EC  0EFF               	movlw	255
 11454  00E2EE  1A30               	xorwf	___ftadd@f1+2,f,c
 11455  00E2F0  0E01               	movlw	1
 11456  00E2F2  262E               	addwf	___ftadd@f1,f,c
 11457  00E2F4  0E00               	movlw	0
 11458  00E2F6  222F               	addwfc	___ftadd@f1+1,f,c
 11459  00E2F8  0E00               	movlw	0
 11460  00E2FA  2230               	addwfc	___ftadd@f1+2,f,c
 11461  00E2FC                     l1399:
 11462  00E2FC  AC37               	btfss	___ftadd@sign,6,c
 11463  00E2FE  D00C               	goto	l1400
 11464  00E300  0EFF               	movlw	255
 11465  00E302  1A31               	xorwf	___ftadd@f2,f,c
 11466  00E304  0EFF               	movlw	255
 11467  00E306  1A32               	xorwf	___ftadd@f2+1,f,c
 11468  00E308  0EFF               	movlw	255
 11469  00E30A  1A33               	xorwf	___ftadd@f2+2,f,c
 11470  00E30C  0E01               	movlw	1
 11471  00E30E  2631               	addwf	___ftadd@f2,f,c
 11472  00E310  0E00               	movlw	0
 11473  00E312  2232               	addwfc	___ftadd@f2+1,f,c
 11474  00E314  0E00               	movlw	0
 11475  00E316  2233               	addwfc	___ftadd@f2+2,f,c
 11476  00E318                     l1400:
 11477  00E318  0E00               	movlw	0
 11478  00E31A  6E37               	movwf	___ftadd@sign,c
 11479  00E31C  502E               	movf	___ftadd@f1,w,c
 11480  00E31E  2631               	addwf	___ftadd@f2,f,c
 11481  00E320  502F               	movf	___ftadd@f1+1,w,c
 11482  00E322  2232               	addwfc	___ftadd@f2+1,f,c
 11483  00E324  5030               	movf	___ftadd@f1+2,w,c
 11484  00E326  2233               	addwfc	___ftadd@f2+2,f,c
 11485  00E328  AE33               	btfss	___ftadd@f2+2,7,c
 11486  00E32A  D00E               	goto	l1401
 11487  00E32C  0EFF               	movlw	255
 11488  00E32E  1A31               	xorwf	___ftadd@f2,f,c
 11489  00E330  0EFF               	movlw	255
 11490  00E332  1A32               	xorwf	___ftadd@f2+1,f,c
 11491  00E334  0EFF               	movlw	255
 11492  00E336  1A33               	xorwf	___ftadd@f2+2,f,c
 11493  00E338  0E01               	movlw	1
 11494  00E33A  2631               	addwf	___ftadd@f2,f,c
 11495  00E33C  0E00               	movlw	0
 11496  00E33E  2232               	addwfc	___ftadd@f2+1,f,c
 11497  00E340  0E00               	movlw	0
 11498  00E342  2233               	addwfc	___ftadd@f2+2,f,c
 11499  00E344  0E01               	movlw	1
 11500  00E346  6E37               	movwf	___ftadd@sign,c
 11501  00E348                     l1401:
 11502  00E348  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 11503  00E34C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11504  00E350  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11505  00E354  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 11506  00E358  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 11507  00E35C  EC02  F06B         	call	___ftpack	;wreg free
 11508  00E360  C001  F02E         	movff	?___ftpack,?___ftadd
 11509  00E364  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 11510  00E368  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 11511  00E36C  0012               	return	
 11512  00E36E                     __end_of___ftadd:
 11513                           	opt stack 0
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           postinc0	equ	0xFEE
 11522                           wreg	equ	0xFE8
 11523                           postdec1	equ	0xFE5
 11524                           plusw1	equ	0xFE3
 11525                           fsr1l	equ	0xFE1
 11526                           indf2	equ	0xFDF
 11527                           postinc2	equ	0xFDE
 11528                           postdec2	equ	0xFDD
 11529                           plusw2	equ	0xFDB
 11530                           fsr2h	equ	0xFDA
 11531                           fsr2l	equ	0xFD9
 11532                           status	equ	0xFD8
 11533                           
 11534 ;; *************** function ___ftpack *****************
 11535 ;; Defined at:
 11536 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;  arg             3    0[COMRAM] unsigned um
 11539 ;;  exp             1    3[COMRAM] unsigned char 
 11540 ;;  sign            1    4[COMRAM] unsigned char 
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;		None
 11543 ;; Return value:  Size  Location     Type
 11544 ;;                  3    0[COMRAM] float 
 11545 ;; Registers used:
 11546 ;;		wreg, status,2, status,0
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 0/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11552 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;Total ram usage:        8 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; This function calls:
 11559 ;;		Nothing
 11560 ;; This function is called by:
 11561 ;;		___ftadd
 11562 ;;		___ftdiv
 11563 ;;		___ftmul
 11564 ;;		___lltoft
 11565 ;;		___lwtoft
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text46
 11570  00D604                     __ptext46:
 11571                           	opt stack 0
 11572  00D604                     ___ftpack:
 11573                           	opt stack 26
 11574                           
 11575                           ;incstack = 0
 11576  00D604  5004               	movf	___ftpack@exp,w,c
 11577  00D606  B4D8               	btfsc	status,2,c
 11578  00D608  D005               	goto	u3040
 11579  00D60A  5001               	movf	___ftpack@arg,w,c
 11580  00D60C  1002               	iorwf	___ftpack@arg+1,w,c
 11581  00D60E  1003               	iorwf	___ftpack@arg+2,w,c
 11582  00D610  A4D8               	btfss	status,2,c
 11583  00D612  D00C               	goto	l1342
 11584  00D614                     u3040:
 11585  00D614  0E00               	movlw	0
 11586  00D616  6E01               	movwf	?___ftpack,c
 11587  00D618  0E00               	movlw	0
 11588  00D61A  6E02               	movwf	?___ftpack+1,c
 11589  00D61C  0E00               	movlw	0
 11590  00D61E  6E03               	movwf	?___ftpack+2,c
 11591  00D620  0012               	return	
 11592  00D622  2A04               	incf	___ftpack@exp,f,c
 11593  00D624  90D8               	bcf	status,0,c
 11594  00D626  3203               	rrcf	___ftpack@arg+2,f,c
 11595  00D628  3202               	rrcf	___ftpack@arg+1,f,c
 11596  00D62A  3201               	rrcf	___ftpack@arg,f,c
 11597  00D62C                     l1342:
 11598  00D62C  0E00               	movlw	0
 11599  00D62E  1401               	andwf	___ftpack@arg,w,c
 11600  00D630  6E06               	movwf	??___ftpack& (0+255),c
 11601  00D632  0E00               	movlw	0
 11602  00D634  1402               	andwf	___ftpack@arg+1,w,c
 11603  00D636  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11604  00D638  0EFE               	movlw	254
 11605  00D63A  1403               	andwf	___ftpack@arg+2,w,c
 11606  00D63C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11607  00D63E  5006               	movf	??___ftpack,w,c
 11608  00D640  1007               	iorwf	??___ftpack+1,w,c
 11609  00D642  1008               	iorwf	??___ftpack+2,w,c
 11610  00D644  B4D8               	btfsc	status,2,c
 11611  00D646  D00C               	goto	l1345
 11612  00D648  D7EC               	goto	l1343
 11613  00D64A  2A04               	incf	___ftpack@exp,f,c
 11614  00D64C  0E01               	movlw	1
 11615  00D64E  2601               	addwf	___ftpack@arg,f,c
 11616  00D650  0E00               	movlw	0
 11617  00D652  2202               	addwfc	___ftpack@arg+1,f,c
 11618  00D654  0E00               	movlw	0
 11619  00D656  2203               	addwfc	___ftpack@arg+2,f,c
 11620  00D658  90D8               	bcf	status,0,c
 11621  00D65A  3203               	rrcf	___ftpack@arg+2,f,c
 11622  00D65C  3202               	rrcf	___ftpack@arg+1,f,c
 11623  00D65E  3201               	rrcf	___ftpack@arg,f,c
 11624  00D660                     l1345:
 11625  00D660  0E00               	movlw	0
 11626  00D662  1401               	andwf	___ftpack@arg,w,c
 11627  00D664  6E06               	movwf	??___ftpack& (0+255),c
 11628  00D666  0E00               	movlw	0
 11629  00D668  1402               	andwf	___ftpack@arg+1,w,c
 11630  00D66A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11631  00D66C  0EFF               	movlw	255
 11632  00D66E  1403               	andwf	___ftpack@arg+2,w,c
 11633  00D670  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11634  00D672  5006               	movf	??___ftpack,w,c
 11635  00D674  1007               	iorwf	??___ftpack+1,w,c
 11636  00D676  1008               	iorwf	??___ftpack+2,w,c
 11637  00D678  B4D8               	btfsc	status,2,c
 11638  00D67A  D006               	goto	l1348
 11639  00D67C  D7E6               	goto	l1346
 11640  00D67E  0604               	decf	___ftpack@exp,f,c
 11641  00D680  90D8               	bcf	status,0,c
 11642  00D682  3601               	rlcf	___ftpack@arg,f,c
 11643  00D684  3602               	rlcf	___ftpack@arg+1,f,c
 11644  00D686  3603               	rlcf	___ftpack@arg+2,f,c
 11645  00D688                     l1348:
 11646  00D688  BE02               	btfsc	___ftpack@arg+1,7,c
 11647  00D68A  D003               	goto	u3080
 11648  00D68C  0E02               	movlw	2
 11649  00D68E  6004               	cpfslt	___ftpack@exp,c
 11650  00D690  D7F6               	goto	l1349
 11651  00D692                     u3080:
 11652  00D692  A004               	btfss	___ftpack@exp,0,c
 11653  00D694  9E02               	bcf	___ftpack@arg+1,7,c
 11654  00D696  90D8               	bcf	status,0,c
 11655  00D698  3204               	rrcf	___ftpack@exp,f,c
 11656  00D69A  5004               	movf	___ftpack@exp,w,c
 11657  00D69C  1203               	iorwf	___ftpack@arg+2,f,c
 11658  00D69E  5005               	movf	___ftpack@sign,w,c
 11659  00D6A0  A4D8               	btfss	status,2,c
 11660  00D6A2  8E03               	bsf	___ftpack@arg+2,7,c
 11661  00D6A4  C001  F001         	movff	___ftpack@arg,?___ftpack
 11662  00D6A8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11663  00D6AC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11664  00D6B0  0012               	return	
 11665  00D6B2                     __end_of___ftpack:
 11666                           	opt stack 0
 11667                           tblptru	equ	0xFF8
 11668                           tblptrh	equ	0xFF7
 11669                           tblptrl	equ	0xFF6
 11670                           tablat	equ	0xFF5
 11671                           prodh	equ	0xFF4
 11672                           prodl	equ	0xFF3
 11673                           intcon	equ	0xFF2
 11674                           postinc0	equ	0xFEE
 11675                           wreg	equ	0xFE8
 11676                           postdec1	equ	0xFE5
 11677                           plusw1	equ	0xFE3
 11678                           fsr1l	equ	0xFE1
 11679                           indf2	equ	0xFDF
 11680                           postinc2	equ	0xFDE
 11681                           postdec2	equ	0xFDD
 11682                           plusw2	equ	0xFDB
 11683                           fsr2h	equ	0xFDA
 11684                           fsr2l	equ	0xFD9
 11685                           status	equ	0xFD8
 11686                           
 11687 ;; *************** function ___ftneg *****************
 11688 ;; Defined at:
 11689 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
 11690 ;; Parameters:    Size  Location     Type
 11691 ;;  f1              3    0[COMRAM] float 
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;		None
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  3    0[COMRAM] float 
 11696 ;; Registers used:
 11697 ;;		wreg, status,2, status,0
 11698 ;; Tracked objects:
 11699 ;;		On entry : 0/0
 11700 ;;		On exit  : 0/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11703 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;Total ram usage:        3 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; This function calls:
 11710 ;;		Nothing
 11711 ;; This function is called by:
 11712 ;;		_printf
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text47
 11717  00CC1E                     __ptext47:
 11718                           	opt stack 0
 11719  00CC1E                     ___ftneg:
 11720                           	opt stack 28
 11721                           
 11722                           ;incstack = 0
 11723  00CC1E  5001               	movf	___ftneg@f1,w,c
 11724  00CC20  1002               	iorwf	___ftneg@f1+1,w,c
 11725  00CC22  1003               	iorwf	___ftneg@f1+2,w,c
 11726  00CC24  B4D8               	btfsc	status,2,c
 11727  00CC26  D006               	goto	l1449
 11728  00CC28  0E00               	movlw	0
 11729  00CC2A  1A01               	xorwf	___ftneg@f1,f,c
 11730  00CC2C  0E00               	movlw	0
 11731  00CC2E  1A02               	xorwf	___ftneg@f1+1,f,c
 11732  00CC30  0E80               	movlw	128
 11733  00CC32  1A03               	xorwf	___ftneg@f1+2,f,c
 11734  00CC34                     l1449:
 11735  00CC34  C001  F001         	movff	___ftneg@f1,?___ftneg
 11736  00CC38  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11737  00CC3C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11738  00CC40  0012               	return		;funcret
 11739  00CC42                     __end_of___ftneg:
 11740                           	opt stack 0
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           postinc0	equ	0xFEE
 11749                           wreg	equ	0xFE8
 11750                           postdec1	equ	0xFE5
 11751                           plusw1	equ	0xFE3
 11752                           fsr1l	equ	0xFE1
 11753                           indf2	equ	0xFDF
 11754                           postinc2	equ	0xFDE
 11755                           postdec2	equ	0xFDD
 11756                           plusw2	equ	0xFDB
 11757                           fsr2h	equ	0xFDA
 11758                           fsr2l	equ	0xFD9
 11759                           status	equ	0xFD8
 11760                           
 11761 ;; *************** function ___ftge *****************
 11762 ;; Defined at:
 11763 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;  ff1             3    0[COMRAM] float 
 11766 ;;  ff2             3    3[COMRAM] float 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;		None               void
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, status,0
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11778 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;Total ram usage:        9 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; This function calls:
 11785 ;;		Nothing
 11786 ;; This function is called by:
 11787 ;;		_printf
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           	psect	text48
 11792  00D44A                     __ptext48:
 11793                           	opt stack 0
 11794  00D44A                     ___ftge:
 11795                           	opt stack 28
 11796                           
 11797                           ;incstack = 0
 11798  00D44A  AE03               	btfss	___ftge@ff1+2,7,c
 11799  00D44C  D016               	goto	l1431
 11800  00D44E  C001  F007         	movff	___ftge@ff1,??___ftge
 11801  00D452  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11802  00D456  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11803  00D45A  1E07               	comf	??___ftge,f,c
 11804  00D45C  1E08               	comf	??___ftge+1,f,c
 11805  00D45E  1E09               	comf	??___ftge+2,f,c
 11806  00D460  2A07               	incf	??___ftge,f,c
 11807  00D462  0E00               	movlw	0
 11808  00D464  2208               	addwfc	??___ftge+1,f,c
 11809  00D466  2209               	addwfc	??___ftge+2,f,c
 11810  00D468  0E00               	movlw	0
 11811  00D46A  2407               	addwf	??___ftge,w,c
 11812  00D46C  6E01               	movwf	___ftge@ff1,c
 11813  00D46E  0E00               	movlw	0
 11814  00D470  2008               	addwfc	??___ftge+1,w,c
 11815  00D472  6E02               	movwf	___ftge@ff1+1,c
 11816  00D474  0E80               	movlw	128
 11817  00D476  2009               	addwfc	??___ftge+2,w,c
 11818  00D478  6E03               	movwf	___ftge@ff1+2,c
 11819  00D47A                     l1431:
 11820  00D47A  AE06               	btfss	___ftge@ff2+2,7,c
 11821  00D47C  D016               	goto	l1432
 11822  00D47E  C004  F007         	movff	___ftge@ff2,??___ftge
 11823  00D482  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11824  00D486  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11825  00D48A  1E07               	comf	??___ftge,f,c
 11826  00D48C  1E08               	comf	??___ftge+1,f,c
 11827  00D48E  1E09               	comf	??___ftge+2,f,c
 11828  00D490  2A07               	incf	??___ftge,f,c
 11829  00D492  0E00               	movlw	0
 11830  00D494  2208               	addwfc	??___ftge+1,f,c
 11831  00D496  2209               	addwfc	??___ftge+2,f,c
 11832  00D498  0E00               	movlw	0
 11833  00D49A  2407               	addwf	??___ftge,w,c
 11834  00D49C  6E04               	movwf	___ftge@ff2,c
 11835  00D49E  0E00               	movlw	0
 11836  00D4A0  2008               	addwfc	??___ftge+1,w,c
 11837  00D4A2  6E05               	movwf	___ftge@ff2+1,c
 11838  00D4A4  0E80               	movlw	128
 11839  00D4A6  2009               	addwfc	??___ftge+2,w,c
 11840  00D4A8  6E06               	movwf	___ftge@ff2+2,c
 11841  00D4AA                     l1432:
 11842  00D4AA  0E00               	movlw	0
 11843  00D4AC  1A01               	xorwf	___ftge@ff1,f,c
 11844  00D4AE  0E00               	movlw	0
 11845  00D4B0  1A02               	xorwf	___ftge@ff1+1,f,c
 11846  00D4B2  0E80               	movlw	128
 11847  00D4B4  1A03               	xorwf	___ftge@ff1+2,f,c
 11848  00D4B6  0E00               	movlw	0
 11849  00D4B8  1A04               	xorwf	___ftge@ff2,f,c
 11850  00D4BA  0E00               	movlw	0
 11851  00D4BC  1A05               	xorwf	___ftge@ff2+1,f,c
 11852  00D4BE  0E80               	movlw	128
 11853  00D4C0  1A06               	xorwf	___ftge@ff2+2,f,c
 11854  00D4C2  5004               	movf	___ftge@ff2,w,c
 11855  00D4C4  5C01               	subwf	___ftge@ff1,w,c
 11856  00D4C6  5005               	movf	___ftge@ff2+1,w,c
 11857  00D4C8  5802               	subwfb	___ftge@ff1+1,w,c
 11858  00D4CA  5006               	movf	___ftge@ff2+2,w,c
 11859  00D4CC  5803               	subwfb	___ftge@ff1+2,w,c
 11860  00D4CE  B0D8               	btfsc	status,0,c
 11861  00D4D0  D002               	goto	l3987
 11862  00D4D2  90D8               	bcf	status,0,c
 11863  00D4D4  0012               	return	
 11864  00D4D6                     l3987:
 11865  00D4D6  80D8               	bsf	status,0,c
 11866  00D4D8  0012               	return	
 11867  00D4DA                     __end_of___ftge:
 11868                           	opt stack 0
 11869                           tblptru	equ	0xFF8
 11870                           tblptrh	equ	0xFF7
 11871                           tblptrl	equ	0xFF6
 11872                           tablat	equ	0xFF5
 11873                           prodh	equ	0xFF4
 11874                           prodl	equ	0xFF3
 11875                           intcon	equ	0xFF2
 11876                           postinc0	equ	0xFEE
 11877                           wreg	equ	0xFE8
 11878                           postdec1	equ	0xFE5
 11879                           plusw1	equ	0xFE3
 11880                           fsr1l	equ	0xFE1
 11881                           indf2	equ	0xFDF
 11882                           postinc2	equ	0xFDE
 11883                           postdec2	equ	0xFDD
 11884                           plusw2	equ	0xFDB
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function _initLCD *****************
 11890 ;; Defined at:
 11891 ;;		line 60 in file "lcd.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;		None
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;		None
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  1    wreg      void 
 11898 ;; Registers used:
 11899 ;;		wreg, status,2, status,0, cstack
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;Total ram usage:        1 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    2
 11912 ;; This function calls:
 11913 ;;		_lcdInst
 11914 ;; This function is called by:
 11915 ;;		_main
 11916 ;; This function uses a non-reentrant model
 11917 ;;
 11918                           
 11919                           	psect	text49
 11920  00CE06                     __ptext49:
 11921                           	opt stack 0
 11922  00CE06                     _initLCD:
 11923                           	opt stack 28
 11924                           
 11925                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 11926                           
 11927                           ;incstack = 0
 11928  00CE06  0EC3               	movlw	195
 11929  00CE08  6E04               	movwf	??_initLCD& (0+255),c
 11930  00CE0A  0ECD               	movlw	205
 11931  00CE0C                     u6127:
 11932  00CE0C  2EE8               	decfsz	wreg,f,c
 11933  00CE0E  D7FE               	bra	u6127
 11934  00CE10  2E04               	decfsz	??_initLCD& (0+255),f,c
 11935  00CE12  D7FC               	bra	u6127
 11936  00CE14  F000               	nop	
 11937                           
 11938                           ;lcd.c: 69: lcdInst(0b00110011);
 11939  00CE16  0E33               	movlw	51
 11940  00CE18  ECEC  F065         	call	_lcdInst
 11941                           
 11942                           ;lcd.c: 70: lcdInst(0b00110010);
 11943  00CE1C  0E32               	movlw	50
 11944  00CE1E  ECEC  F065         	call	_lcdInst
 11945                           
 11946                           ;lcd.c: 71: lcdInst(0b00101000);
 11947  00CE22  0E28               	movlw	40
 11948  00CE24  ECEC  F065         	call	_lcdInst
 11949                           
 11950                           ;lcd.c: 72: lcdInst(0b00001111);
 11951  00CE28  0E0F               	movlw	15
 11952  00CE2A  ECEC  F065         	call	_lcdInst
 11953                           
 11954                           ;lcd.c: 73: lcdInst(0b00000110);
 11955  00CE2E  0E06               	movlw	6
 11956  00CE30  ECEC  F065         	call	_lcdInst
 11957                           
 11958                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11959  00CE34  0E01               	movlw	1
 11960  00CE36  ECEC  F065         	call	_lcdInst
 11961  00CE3A  0EC3               	movlw	195
 11962  00CE3C  6E04               	movwf	??_initLCD& (0+255),c
 11963  00CE3E  0ECD               	movlw	205
 11964  00CE40                     u6137:
 11965  00CE40  2EE8               	decfsz	wreg,f,c
 11966  00CE42  D7FE               	bra	u6137
 11967  00CE44  2E04               	decfsz	??_initLCD& (0+255),f,c
 11968  00CE46  D7FC               	bra	u6137
 11969  00CE48  F000               	nop	
 11970                           
 11971                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 11972  00CE4A  0E0F               	movlw	15
 11973  00CE4C  ECEC  F065         	call	_lcdInst
 11974  00CE50  0012               	return		;funcret
 11975  00CE52                     __end_of_initLCD:
 11976                           	opt stack 0
 11977                           tblptru	equ	0xFF8
 11978                           tblptrh	equ	0xFF7
 11979                           tblptrl	equ	0xFF6
 11980                           tablat	equ	0xFF5
 11981                           prodh	equ	0xFF4
 11982                           prodl	equ	0xFF3
 11983                           intcon	equ	0xFF2
 11984                           postinc0	equ	0xFEE
 11985                           wreg	equ	0xFE8
 11986                           postdec1	equ	0xFE5
 11987                           plusw1	equ	0xFE3
 11988                           fsr1l	equ	0xFE1
 11989                           indf2	equ	0xFDF
 11990                           postinc2	equ	0xFDE
 11991                           postdec2	equ	0xFDD
 11992                           plusw2	equ	0xFDB
 11993                           fsr2h	equ	0xFDA
 11994                           fsr2l	equ	0xFD9
 11995                           status	equ	0xFD8
 11996                           
 11997 ;; *************** function _lcdInst *****************
 11998 ;; Defined at:
 11999 ;;		line 11 in file "lcd.c"
 12000 ;; Parameters:    Size  Location     Type
 12001 ;;  data            1    wreg     unsigned char 
 12002 ;; Auto vars:     Size  Location     Type
 12003 ;;  data            1    2[COMRAM] unsigned char 
 12004 ;; Return value:  Size  Location     Type
 12005 ;;                  1    wreg      void 
 12006 ;; Registers used:
 12007 ;;		wreg, status,2, status,0, cstack
 12008 ;; Tracked objects:
 12009 ;;		On entry : 0/0
 12010 ;;		On exit  : 0/0
 12011 ;;		Unchanged: 0/0
 12012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;Total ram usage:        1 bytes
 12018 ;; Hardware stack levels used:    1
 12019 ;; Hardware stack levels required when called:    1
 12020 ;; This function calls:
 12021 ;;		_lcdNibble
 12022 ;; This function is called by:
 12023 ;;		_initLCD
 12024 ;;		_main
 12025 ;;		_testRTCGet
 12026 ;;		_testSDCard
 12027 ;;		_testA2D
 12028 ;;		_lcd_set_cursor
 12029 ;;		_lcd_shift_cursor
 12030 ;;		_lcd_shift_display
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           	psect	text50
 12035  00CBD8                     __ptext50:
 12036                           	opt stack 0
 12037  00CBD8                     _lcdInst:
 12038                           	opt stack 28
 12039                           
 12040                           ;incstack = 0
 12041                           ;lcdInst@data stored from wreg
 12042  00CBD8  6E03               	movwf	lcdInst@data,c
 12043                           
 12044                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12045  00CBDA  948C               	bcf	3980,2,c	;volatile
 12046                           
 12047                           ;lcd.c: 20: lcdNibble(data);
 12048  00CBDC  5003               	movf	lcdInst@data,w,c
 12049  00CBDE  ECDB  F068         	call	_lcdNibble
 12050                           
 12051                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12052  00CBE2  0EC8               	movlw	200
 12053  00CBE4                     u6147:
 12054  00CBE4  D000               	nop2	
 12055  00CBE6  2EE8               	decfsz	wreg,f,c
 12056  00CBE8  D7FD               	bra	u6147
 12057  00CBEA  0012               	return		;funcret
 12058  00CBEC                     __end_of_lcdInst:
 12059                           	opt stack 0
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           postinc0	equ	0xFEE
 12068                           wreg	equ	0xFE8
 12069                           postdec1	equ	0xFE5
 12070                           plusw1	equ	0xFE3
 12071                           fsr1l	equ	0xFE1
 12072                           indf2	equ	0xFDF
 12073                           postinc2	equ	0xFDE
 12074                           postdec2	equ	0xFDD
 12075                           plusw2	equ	0xFDB
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _lcdNibble *****************
 12081 ;; Defined at:
 12082 ;;		line 37 in file "lcd.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  data            1    wreg     unsigned char 
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  data            1    1[COMRAM] unsigned char 
 12087 ;;  temp            1    0[COMRAM] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      void 
 12090 ;; Registers used:
 12091 ;;		wreg, status,2, status,0
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        2 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_lcdInst
 12107 ;;		_putch
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text51
 12112  00D1B6                     __ptext51:
 12113                           	opt stack 0
 12114  00D1B6                     _lcdNibble:
 12115                           	opt stack 27
 12116                           
 12117                           ;incstack = 0
 12118                           ;lcdNibble@data stored from wreg
 12119  00D1B6  6E02               	movwf	lcdNibble@data,c
 12120                           
 12121                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12122  00D1B8  5002               	movf	lcdNibble@data,w,c
 12123  00D1BA  0BF0               	andlw	240
 12124  00D1BC  6E01               	movwf	lcdNibble@temp,c
 12125                           
 12126                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12127  00D1BE  508C               	movf	3980,w,c	;volatile
 12128  00D1C0  0B0F               	andlw	15
 12129  00D1C2  6E8C               	movwf	3980,c	;volatile
 12130                           
 12131                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12132  00D1C4  5001               	movf	lcdNibble@temp,w,c
 12133  00D1C6  108C               	iorwf	3980,w,c	;volatile
 12134  00D1C8  6E8C               	movwf	3980,c	;volatile
 12135                           
 12136                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12137  00D1CA  0E00               	movlw	0
 12138  00D1CC  BEF2               	btfsc	intcon,7,c	;volatile
 12139  00D1CE  0E01               	movlw	1
 12140  00D1D0  6E78               	movwf	_LCDinterruptState,c
 12141  00D1D2  9EF2               	bcf	intcon,7,c	;volatile
 12142  00D1D4  868C               	bsf	3980,3,c	;volatile
 12143  00D1D6  0E53               	movlw	83
 12144  00D1D8                     u6157:
 12145  00D1D8  2EE8               	decfsz	wreg,f,c
 12146  00D1DA  D7FE               	bra	u6157
 12147  00D1DC  F000               	nop	
 12148  00D1DE  968C               	bcf	3980,3,c	;volatile
 12149  00D1E0  0EC8               	movlw	200
 12150  00D1E2                     u6167:
 12151  00D1E2  D000               	nop2	
 12152  00D1E4  2EE8               	decfsz	wreg,f,c
 12153  00D1E6  D7FD               	bra	u6167
 12154  00D1E8  B078               	btfsc	_LCDinterruptState,0,c
 12155  00D1EA  D002               	bra	u3165
 12156  00D1EC  9EF2               	bcf	intcon,7,c	;volatile
 12157  00D1EE  D001               	bra	u3166
 12158  00D1F0                     u3165:
 12159  00D1F0  8EF2               	bsf	intcon,7,c	;volatile
 12160  00D1F2                     u3166:
 12161                           
 12162                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12163  00D1F2  3802               	swapf	lcdNibble@data,w,c
 12164  00D1F4  0BF0               	andlw	240
 12165  00D1F6  6E02               	movwf	lcdNibble@data,c
 12166                           
 12167                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12168  00D1F8  5002               	movf	lcdNibble@data,w,c
 12169  00D1FA  0BF0               	andlw	240
 12170  00D1FC  6E01               	movwf	lcdNibble@temp,c
 12171                           
 12172                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12173  00D1FE  508C               	movf	3980,w,c	;volatile
 12174  00D200  0B0F               	andlw	15
 12175  00D202  6E8C               	movwf	3980,c	;volatile
 12176                           
 12177                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12178  00D204  5001               	movf	lcdNibble@temp,w,c
 12179  00D206  108C               	iorwf	3980,w,c	;volatile
 12180  00D208  6E8C               	movwf	3980,c	;volatile
 12181                           
 12182                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12183  00D20A  0E00               	movlw	0
 12184  00D20C  BEF2               	btfsc	intcon,7,c	;volatile
 12185  00D20E  0E01               	movlw	1
 12186  00D210  6E78               	movwf	_LCDinterruptState,c
 12187  00D212  9EF2               	bcf	intcon,7,c	;volatile
 12188  00D214  868C               	bsf	3980,3,c	;volatile
 12189  00D216  0E53               	movlw	83
 12190  00D218                     u6177:
 12191  00D218  2EE8               	decfsz	wreg,f,c
 12192  00D21A  D7FE               	bra	u6177
 12193  00D21C  F000               	nop	
 12194  00D21E  968C               	bcf	3980,3,c	;volatile
 12195  00D220  0EC8               	movlw	200
 12196  00D222                     u6187:
 12197  00D222  D000               	nop2	
 12198  00D224  2EE8               	decfsz	wreg,f,c
 12199  00D226  D7FD               	bra	u6187
 12200  00D228  B078               	btfsc	_LCDinterruptState,0,c
 12201  00D22A  D002               	bra	u3175
 12202  00D22C  9EF2               	bcf	intcon,7,c	;volatile
 12203  00D22E  D001               	bra	u3176
 12204  00D230                     u3175:
 12205  00D230  8EF2               	bsf	intcon,7,c	;volatile
 12206  00D232                     u3176:
 12207  00D232  0012               	return		;funcret
 12208  00D234                     __end_of_lcdNibble:
 12209                           	opt stack 0
 12210                           tblptru	equ	0xFF8
 12211                           tblptrh	equ	0xFF7
 12212                           tblptrl	equ	0xFF6
 12213                           tablat	equ	0xFF5
 12214                           prodh	equ	0xFF4
 12215                           prodl	equ	0xFF3
 12216                           intcon	equ	0xFF2
 12217                           postinc0	equ	0xFEE
 12218                           wreg	equ	0xFE8
 12219                           postdec1	equ	0xFE5
 12220                           plusw1	equ	0xFE3
 12221                           fsr1l	equ	0xFE1
 12222                           indf2	equ	0xFDF
 12223                           postinc2	equ	0xFDE
 12224                           postdec2	equ	0xFDD
 12225                           plusw2	equ	0xFDB
 12226                           fsr2h	equ	0xFDA
 12227                           fsr2l	equ	0xFD9
 12228                           status	equ	0xFD8
 12229                           
 12230 ;; *************** function _getKey *****************
 12231 ;; Defined at:
 12232 ;;		line 54 in file "main.c"
 12233 ;; Parameters:    Size  Location     Type
 12234 ;;		None
 12235 ;; Auto vars:     Size  Location     Type
 12236 ;;  key             1    0[COMRAM] enum E3192
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  1    wreg      enum E3192
 12239 ;; Registers used:
 12240 ;;		wreg, status,2, status,0
 12241 ;; Tracked objects:
 12242 ;;		On entry : 0/0
 12243 ;;		On exit  : 0/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12250 ;;Total ram usage:        1 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; This function calls:
 12253 ;;		Nothing
 12254 ;; This function is called by:
 12255 ;;		_main
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           	psect	text52
 12260  00CBC4                     __ptext52:
 12261                           	opt stack 0
 12262  00CBC4                     _getKey:
 12263                           	opt stack 30
 12264                           
 12265                           ;main.c: 64: enum programStates key;
 12266                           ;main.c: 67: while(PORTBbits.RB1 == 0){ continue; }
 12267                           
 12268                           ;incstack = 0
 12269  00CBC4  A281               	btfss	3969,1,c	;volatile
 12270  00CBC6  D7FE               	goto	_getKey
 12271                           
 12272                           ;main.c: 69: key = (PORTB & 0xF0) >> 4;
 12273  00CBC8  3881               	swapf	3969,w,c	;volatile
 12274  00CBCA  0B0F               	andlw	15
 12275  00CBCC  0B0F               	andlw	15
 12276  00CBCE  6E01               	movwf	getKey@key,c
 12277  00CBD0  B281               	btfsc	3969,1,c	;volatile
 12278  00CBD2  D7FE               	goto	l741
 12279                           
 12280                           ;main.c: 74: return key;
 12281  00CBD4  5001               	movf	getKey@key,w,c
 12282  00CBD6  0012               	return	
 12283  00CBD8                     __end_of_getKey:
 12284                           	opt stack 0
 12285                           tblptru	equ	0xFF8
 12286                           tblptrh	equ	0xFF7
 12287                           tblptrl	equ	0xFF6
 12288                           tablat	equ	0xFF5
 12289                           prodh	equ	0xFF4
 12290                           prodl	equ	0xFF3
 12291                           intcon	equ	0xFF2
 12292                           postinc0	equ	0xFEE
 12293                           wreg	equ	0xFE8
 12294                           postdec1	equ	0xFE5
 12295                           plusw1	equ	0xFE3
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           plusw2	equ	0xFDB
 12301                           fsr2h	equ	0xFDA
 12302                           fsr2l	equ	0xFD9
 12303                           status	equ	0xFD8
 12304                           
 12305 ;; *************** function _UART_Init *****************
 12306 ;; Defined at:
 12307 ;;		line 200 in file "UART_PIC.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  baud            4   14[COMRAM] long 
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;Total ram usage:        8 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    1
 12328 ;; This function calls:
 12329 ;;		___aldiv
 12330 ;; This function is called by:
 12331 ;;		_main
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text53
 12336  00D33A                     __ptext53:
 12337                           	opt stack 0
 12338  00D33A                     _UART_Init:
 12339                           	opt stack 29
 12340                           
 12341                           ;UART_PIC.c: 213: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 12342                           
 12343                           ;incstack = 0
 12344  00D33A  0E00               	movlw	0
 12345  00D33C  6E01               	movwf	___aldiv@dividend,c
 12346  00D33E  0E5A               	movlw	90
 12347  00D340  6E02               	movwf	___aldiv@dividend+1,c
 12348  00D342  0E62               	movlw	98
 12349  00D344  6E03               	movwf	___aldiv@dividend+2,c
 12350  00D346  0E02               	movlw	2
 12351  00D348  6E04               	movwf	___aldiv@dividend+3,c
 12352  00D34A  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 12353  00D34E  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 12354  00D352  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 12355  00D356  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 12356  00D35A  0E06               	movlw	6
 12357  00D35C                     u5235:
 12358  00D35C  90D8               	bcf	status,0,c
 12359  00D35E  3613               	rlcf	??_UART_Init,f,c
 12360  00D360  3614               	rlcf	??_UART_Init+1,f,c
 12361  00D362  3615               	rlcf	??_UART_Init+2,f,c
 12362  00D364  3616               	rlcf	??_UART_Init+3,f,c
 12363  00D366  2EE8               	decfsz	wreg,f,c
 12364  00D368  D7F9               	goto	u5235
 12365  00D36A  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 12366  00D36E  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 12367  00D372  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 12368  00D376  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 12369  00D37A  EC59  F06B         	call	___aldiv	;wreg free
 12370  00D37E  0401               	decf	?___aldiv,w,c
 12371  00D380  6EAF               	movwf	4015,c	;volatile
 12372                           
 12373                           ;UART_PIC.c: 216: TXSTAbits.TX9 = 0;
 12374  00D382  9CAC               	bcf	4012,6,c	;volatile
 12375                           
 12376                           ;UART_PIC.c: 217: TXSTAbits.SYNC = 0;
 12377  00D384  98AC               	bcf	4012,4,c	;volatile
 12378                           
 12379                           ;UART_PIC.c: 218: TXSTAbits.TXEN = 1;
 12380  00D386  8AAC               	bsf	4012,5,c	;volatile
 12381                           
 12382                           ;UART_PIC.c: 221: RCSTAbits.RX9 = 0;
 12383  00D388  9CAB               	bcf	4011,6,c	;volatile
 12384                           
 12385                           ;UART_PIC.c: 222: RCSTAbits.CREN = 1;
 12386  00D38A  88AB               	bsf	4011,4,c	;volatile
 12387                           
 12388                           ;UART_PIC.c: 225: UART -> _stateTX = UART_STATE_READY;
 12389  00D38C  EE20 F008          	lfsr	2,8
 12390  00D390  507A               	movf	_UART,w,c
 12391  00D392  26D9               	addwf	fsr2l,f,c
 12392  00D394  507B               	movf	_UART+1,w,c
 12393  00D396  22DA               	addwfc	fsr2h,f,c
 12394  00D398  0E01               	movlw	1
 12395  00D39A  6EDF               	movwf	indf2,c
 12396                           
 12397                           ;UART_PIC.c: 226: UART -> _stateRX = UART_STATE_READY;
 12398  00D39C  EE20 F009          	lfsr	2,9
 12399  00D3A0  507A               	movf	_UART,w,c
 12400  00D3A2  26D9               	addwf	fsr2l,f,c
 12401  00D3A4  507B               	movf	_UART+1,w,c
 12402  00D3A6  22DA               	addwfc	fsr2h,f,c
 12403  00D3A8  0E01               	movlw	1
 12404  00D3AA  6EDF               	movwf	indf2,c
 12405                           
 12406                           ;UART_PIC.c: 229: uart._dataRX = arr_dataRX;
 12407  00D3AC  0EBE               	movlw	low _arr_dataRX
 12408  00D3AE  0100               	movlb	0	; () banked
 12409  00D3B0  6FD2               	movwf	(_uart+4)& (0+255),b	;volatile
 12410  00D3B2  0E00               	movlw	high _arr_dataRX
 12411  00D3B4  0100               	movlb	0	; () banked
 12412  00D3B6  6FD3               	movwf	(_uart+5)& (0+255),b	;volatile
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;UART_PIC.c: 232: TRISC6 = 0;
 12416  00D3B8  9C94               	bcf	3988,6,c	;volatile
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;UART_PIC.c: 233: TRISC7 = 1;
 12420  00D3BA  8E94               	bsf	3988,7,c	;volatile
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;UART_PIC.c: 236: RCSTAbits.SPEN = 1;
 12424  00D3BC  8EAB               	bsf	4011,7,c	;volatile
 12425                           
 12426                           ; BSR set to: 0
 12427  00D3BE  0012               	return		;funcret
 12428  00D3C0                     __end_of_UART_Init:
 12429                           	opt stack 0
 12430                           tblptru	equ	0xFF8
 12431                           tblptrh	equ	0xFF7
 12432                           tblptrl	equ	0xFF6
 12433                           tablat	equ	0xFF5
 12434                           prodh	equ	0xFF4
 12435                           prodl	equ	0xFF3
 12436                           intcon	equ	0xFF2
 12437                           postinc0	equ	0xFEE
 12438                           wreg	equ	0xFE8
 12439                           postdec1	equ	0xFE5
 12440                           plusw1	equ	0xFE3
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           plusw2	equ	0xFDB
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function ___aldiv *****************
 12451 ;; Defined at:
 12452 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\aldiv.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;  dividend        4    0[COMRAM] long 
 12455 ;;  divisor         4    4[COMRAM] long 
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;  quotient        4   10[COMRAM] long 
 12458 ;;  sign            1    9[COMRAM] unsigned char 
 12459 ;;  counter         1    8[COMRAM] unsigned char 
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  4    0[COMRAM] long 
 12462 ;; Registers used:
 12463 ;;		wreg, status,2, status,0
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12469 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12472 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12473 ;;Total ram usage:       14 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_UART_Init
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           	psect	text54
 12483  00D6B2                     __ptext54:
 12484                           	opt stack 0
 12485  00D6B2                     ___aldiv:
 12486                           	opt stack 29
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;incstack = 0
 12490  00D6B2  0E00               	movlw	0
 12491  00D6B4  6E0A               	movwf	___aldiv@sign,c
 12492  00D6B6  AE08               	btfss	___aldiv@divisor+3,7,c
 12493  00D6B8  D00A               	goto	l1166
 12494  00D6BA  1E08               	comf	___aldiv@divisor+3,f,c
 12495  00D6BC  1E07               	comf	___aldiv@divisor+2,f,c
 12496  00D6BE  1E06               	comf	___aldiv@divisor+1,f,c
 12497  00D6C0  6C05               	negf	___aldiv@divisor,c
 12498  00D6C2  0E00               	movlw	0
 12499  00D6C4  2206               	addwfc	___aldiv@divisor+1,f,c
 12500  00D6C6  2207               	addwfc	___aldiv@divisor+2,f,c
 12501  00D6C8  2208               	addwfc	___aldiv@divisor+3,f,c
 12502  00D6CA  0E01               	movlw	1
 12503  00D6CC  6E0A               	movwf	___aldiv@sign,c
 12504  00D6CE                     l1166:
 12505  00D6CE  AE04               	btfss	___aldiv@dividend+3,7,c
 12506  00D6D0  D00A               	goto	l1167
 12507  00D6D2  1E04               	comf	___aldiv@dividend+3,f,c
 12508  00D6D4  1E03               	comf	___aldiv@dividend+2,f,c
 12509  00D6D6  1E02               	comf	___aldiv@dividend+1,f,c
 12510  00D6D8  6C01               	negf	___aldiv@dividend,c
 12511  00D6DA  0E00               	movlw	0
 12512  00D6DC  2202               	addwfc	___aldiv@dividend+1,f,c
 12513  00D6DE  2203               	addwfc	___aldiv@dividend+2,f,c
 12514  00D6E0  2204               	addwfc	___aldiv@dividend+3,f,c
 12515  00D6E2  0E01               	movlw	1
 12516  00D6E4  1A0A               	xorwf	___aldiv@sign,f,c
 12517  00D6E6                     l1167:
 12518  00D6E6  0E00               	movlw	0
 12519  00D6E8  6E0B               	movwf	___aldiv@quotient,c
 12520  00D6EA  0E00               	movlw	0
 12521  00D6EC  6E0C               	movwf	___aldiv@quotient+1,c
 12522  00D6EE  0E00               	movlw	0
 12523  00D6F0  6E0D               	movwf	___aldiv@quotient+2,c
 12524  00D6F2  0E00               	movlw	0
 12525  00D6F4  6E0E               	movwf	___aldiv@quotient+3,c
 12526  00D6F6  5005               	movf	___aldiv@divisor,w,c
 12527  00D6F8  1006               	iorwf	___aldiv@divisor+1,w,c
 12528  00D6FA  1007               	iorwf	___aldiv@divisor+2,w,c
 12529  00D6FC  1008               	iorwf	___aldiv@divisor+3,w,c
 12530  00D6FE  B4D8               	btfsc	status,2,c
 12531  00D700  D02A               	goto	l1174
 12532  00D702  0E01               	movlw	1
 12533  00D704  6E09               	movwf	___aldiv@counter,c
 12534  00D706  D006               	goto	l1169
 12535  00D708  90D8               	bcf	status,0,c
 12536  00D70A  3605               	rlcf	___aldiv@divisor,f,c
 12537  00D70C  3606               	rlcf	___aldiv@divisor+1,f,c
 12538  00D70E  3607               	rlcf	___aldiv@divisor+2,f,c
 12539  00D710  3608               	rlcf	___aldiv@divisor+3,f,c
 12540  00D712  2A09               	incf	___aldiv@counter,f,c
 12541  00D714                     l1169:
 12542  00D714  AE08               	btfss	___aldiv@divisor+3,7,c
 12543  00D716  D7F8               	goto	l1170
 12544  00D718                     u5190:
 12545  00D718  90D8               	bcf	status,0,c
 12546  00D71A  360B               	rlcf	___aldiv@quotient,f,c
 12547  00D71C  360C               	rlcf	___aldiv@quotient+1,f,c
 12548  00D71E  360D               	rlcf	___aldiv@quotient+2,f,c
 12549  00D720  360E               	rlcf	___aldiv@quotient+3,f,c
 12550  00D722  5005               	movf	___aldiv@divisor,w,c
 12551  00D724  5C01               	subwf	___aldiv@dividend,w,c
 12552  00D726  5006               	movf	___aldiv@divisor+1,w,c
 12553  00D728  5802               	subwfb	___aldiv@dividend+1,w,c
 12554  00D72A  5007               	movf	___aldiv@divisor+2,w,c
 12555  00D72C  5803               	subwfb	___aldiv@dividend+2,w,c
 12556  00D72E  5008               	movf	___aldiv@divisor+3,w,c
 12557  00D730  5804               	subwfb	___aldiv@dividend+3,w,c
 12558  00D732  A0D8               	btfss	status,0,c
 12559  00D734  D009               	goto	l1173
 12560  00D736  5005               	movf	___aldiv@divisor,w,c
 12561  00D738  5E01               	subwf	___aldiv@dividend,f,c
 12562  00D73A  5006               	movf	___aldiv@divisor+1,w,c
 12563  00D73C  5A02               	subwfb	___aldiv@dividend+1,f,c
 12564  00D73E  5007               	movf	___aldiv@divisor+2,w,c
 12565  00D740  5A03               	subwfb	___aldiv@dividend+2,f,c
 12566  00D742  5008               	movf	___aldiv@divisor+3,w,c
 12567  00D744  5A04               	subwfb	___aldiv@dividend+3,f,c
 12568  00D746  800B               	bsf	___aldiv@quotient,0,c
 12569  00D748                     l1173:
 12570  00D748  90D8               	bcf	status,0,c
 12571  00D74A  3208               	rrcf	___aldiv@divisor+3,f,c
 12572  00D74C  3207               	rrcf	___aldiv@divisor+2,f,c
 12573  00D74E  3206               	rrcf	___aldiv@divisor+1,f,c
 12574  00D750  3205               	rrcf	___aldiv@divisor,f,c
 12575  00D752  2E09               	decfsz	___aldiv@counter,f,c
 12576  00D754  D7E1               	goto	u5190
 12577  00D756                     l1174:
 12578  00D756  500A               	movf	___aldiv@sign,w,c
 12579  00D758  B4D8               	btfsc	status,2,c
 12580  00D75A  D008               	goto	l1175
 12581  00D75C  1E0E               	comf	___aldiv@quotient+3,f,c
 12582  00D75E  1E0D               	comf	___aldiv@quotient+2,f,c
 12583  00D760  1E0C               	comf	___aldiv@quotient+1,f,c
 12584  00D762  6C0B               	negf	___aldiv@quotient,c
 12585  00D764  0E00               	movlw	0
 12586  00D766  220C               	addwfc	___aldiv@quotient+1,f,c
 12587  00D768  220D               	addwfc	___aldiv@quotient+2,f,c
 12588  00D76A  220E               	addwfc	___aldiv@quotient+3,f,c
 12589  00D76C                     l1175:
 12590  00D76C  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 12591  00D770  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 12592  00D774  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 12593  00D778  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 12594  00D77C  0012               	return	
 12595  00D77E                     __end_of___aldiv:
 12596                           	opt stack 0
 12597                           tblptru	equ	0xFF8
 12598                           tblptrh	equ	0xFF7
 12599                           tblptrl	equ	0xFF6
 12600                           tablat	equ	0xFF5
 12601                           prodh	equ	0xFF4
 12602                           prodl	equ	0xFF3
 12603                           intcon	equ	0xFF2
 12604                           postinc0	equ	0xFEE
 12605                           wreg	equ	0xFE8
 12606                           postdec1	equ	0xFE5
 12607                           plusw1	equ	0xFE3
 12608                           fsr1l	equ	0xFE1
 12609                           indf2	equ	0xFDF
 12610                           postinc2	equ	0xFDE
 12611                           postdec2	equ	0xFDD
 12612                           plusw2	equ	0xFDB
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           tblptru	equ	0xFF8
 12617                           tblptrh	equ	0xFF7
 12618                           tblptrl	equ	0xFF6
 12619                           tablat	equ	0xFF5
 12620                           prodh	equ	0xFF4
 12621                           prodl	equ	0xFF3
 12622                           intcon	equ	0xFF2
 12623                           postinc0	equ	0xFEE
 12624                           wreg	equ	0xFE8
 12625                           postdec1	equ	0xFE5
 12626                           plusw1	equ	0xFE3
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           plusw2	equ	0xFDB
 12632                           fsr2h	equ	0xFDA
 12633                           fsr2l	equ	0xFD9
 12634                           status	equ	0xFD8
 12635                           
 12636                           	psect	rparam
 12637  0000                     tblptru	equ	0xFF8
 12638                           tblptrh	equ	0xFF7
 12639                           tblptrl	equ	0xFF6
 12640                           tablat	equ	0xFF5
 12641                           prodh	equ	0xFF4
 12642                           prodl	equ	0xFF3
 12643                           intcon	equ	0xFF2
 12644                           postinc0	equ	0xFEE
 12645                           wreg	equ	0xFE8
 12646                           postdec1	equ	0xFE5
 12647                           plusw1	equ	0xFE3
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           postdec2	equ	0xFDD
 12652                           plusw2	equ	0xFDB
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8


Data Sizes:
    Strings     116
    Constant    299
    Data        15
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    110     123
    BANK0           128      0     103
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[9]), STR_5(CODE[17]), 
		 -> STR_4(CODE[15]), STR_3(CODE[15]), STR_2(CODE[12]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 13
		 -> testUART@message(COMRAM[13]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK0[12]), 

    S631$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    S631$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SD_Command@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> SD_Command@arg(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_testRTCGet
    _testUART->_uartTransmitBlocking
    _testSDCard->_printf
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _SD_ACMD->_SD_Command
    _SD_Command->_spiSend
    _spiReceive->_spiTransfer
    _testRTCSet->_I2C_Master_Init
    _testRTCGet->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _testGLCD->_initGLCD
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdDrawRectangle->___wmul
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    _testA2D->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  263598
                                            107 COMRAM     3     3      0
                          _UART_Init
                             _getKey
                            _initLCD
                            _lcdInst
                             _printf
                            _testA2D
                           _testGLCD
                             _testIO
                         _testRTCGet
                         _testRTCSet
                         _testSDCard
                           _testUART
 ---------------------------------------------------------------------------------
 (1) _testUART                                            13    13      0     266
                                              5 COMRAM    13    13      0
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _uartTransmitBlocking                                 5     2      3     242
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _testSDCard                                           1     1      0   72584
                                            103 COMRAM     1     1      0
                             _initSD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _initSD                                              39    39      0   19718
                                             57 COMRAM    39    39      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3063
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _SD_ACMD                                              5     1      4    1966
                                             12 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (3) _SD_Command                                           9     5      4    1770
                                              3 COMRAM     9     5      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _testRTCSet                                           1     1      0    1490
                                             21 COMRAM     1     1      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _testRTCGet                                           4     4      0   54432
                                            103 COMRAM     4     4      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     944
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _testIO                                               4     4      0     225
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _testGLCD                                             0     0      0   28124
                  _glcdDrawRectangle
                           _initGLCD
 ---------------------------------------------------------------------------------
 (2) _initGLCD                                             2     2      0   18669
                                             39 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (3) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _glcdSetCOLMOD                                        3     3      0    4620
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcdDrawRectangle                                   19    12      7    9455
                                             20 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _glcdTransfer                                         3     2      1    4572
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _testA2D                                              2     2      0   52888
                                            103 COMRAM     2     2      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              46    38      8   52731
                                             63 COMRAM    40    32      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                            _readADC (ARG)
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12409
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12211
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3047
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5389
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2802
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _getKey                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _getKey
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNibble
     _readADC (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _testA2D
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNibble
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readADC
   _testGLCD
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _initGLCD
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _glcdSetCOLMOD
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiInit
   _testIO
   _testRTCGet
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNibble
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _testRTCSet
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _testSDCard
     _initSD
       _SD_ACMD
         _SD_Command
           _spiReceive
             _spiTransfer
           _spiSend
             _spiTransfer
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _spiInit
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNibble
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _testUART
     _uartTransmitBlocking

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      67       5       80.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6E      7B       1       96.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E2      34        0.0%
DATA                 0      0      E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Jan 07 23:13:07 2018

            __end_of_R1_READY_STATE FF74                     testUART@message 0006  
                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                       __CFG_CPD$ON 000000                  initSD@arr_response 004B  
                      ___awdiv@sign 000C                 ___wmul@multiplicand 0011  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        ___ftadd@exp1 0039  
                      ___ftadd@exp2 0038                        ___ftadd@sign 0037  
                               l140 D54C                                 l141 D550  
                               l134 D4E2                                 l136 D514  
                               l137 D4FE                                 l139 D53C  
                               l243 ED10                                 l324 CD6C  
                               l252 EDB2                                 l244 ED08  
                               l326 CD82                                 l254 EE4C  
                               l246 ED42                                 l327 CD5E  
                               l255 EE28                                 l328 CD62  
                               l329 CD66                                 l249 ED4E  
                               l274 EF48                                 l266 EE88  
                               l291 F302                                 l283 F008  
                               l275 EF50                                 l259 EE70  
                               l276 EFA8                                 l268 EE98  
                               l293 F482                                 l285 F02C  
                               l277 EF9E                                 l294 F47A  
                               l374 D5EA                                 l287 F132  
                               l375 D5A4                                 l801 E018  
                               l289 F2E0                                 l741 CBD0  
                               l821 CD38                                 l813 D3C4  
                               l750 DB08                                 l752 DB0E  
                               l753 DB14                                 l770 DBB0  
                               l754 DB1A                                 l755 DB20  
                               l772 DC5E                                 l764 D050  
                               l756 DB26                                 l748 DA9E  
                               l941 E1B2                                 l933 E054  
                               l749 DB32                                 l757 DB2C  
                               l942 E19C                                 l774 DC76  
                               l935 E068                                 l952 CE70  
                               l792 DF20                                 l937 E07A  
                               l953 CE56                                 l793 DF38  
                               l769 DB74                                 l938 E086  
                               l954 CE82                                 l939 E142  
                               l955 CE5E                                 l795 DF70  
                               l787 D00E                                 l957 CE68  
                               l797 DFA8                                 l799 DFE0  
                               l994 E4B4                                 l997 E580  
                      __CFG_CPB$OFF 000000                                 _RED FF14  
         __end_ofGLCD_PIC@INST_TEON FF34                     __end_of_CMD0CRC FF89  
                   __end_of_CMD8CRC FF86                        ___awmod@sign 0006  
                               prod 000FF3                                 wreg 000FE8  
      uartTransmitBlocking@numBytes 0003                       SD_Command@cmd 000A  
                     SD_Command@arg 0004                       SD_Command@ptr 0008  
                      __CFG_LVP$OFF 000000                        ___ftdiv@cntr 0015  
                      ___ftdiv@sign 001A                        __CFG_WDT$OFF 000000  
                              l1000 EAD4                                l1001 EA00  
                              l1011 F4F0                                l1004 EAB0  
                              l1020 F548                                l1012 F502  
                              l1005 EC00                                l1030 F61E  
                              l1022 F612                                l1014 F51A  
                              l1007 ECB0                                l1031 F648  
                              l1023 F5FC                                l1015 F514  
                              l1024 F5C6                                l1041 F7B4  
                              l1106 FE32                                l1034 FC2C  
                              l1042 F7F2                                l1107 FDC4  
                              l1043 F8AE                                l1035 F65C  
                              l1027 F622                                l1300 D1AC  
                              l1060 F9C4                                l1052 F912  
                              l1036 F69C                                l1061 F9B8  
                              l1310 DCA4                                l1046 F85A  
                              l1038 F72C                                l1071 FAA8  
                              l1039 F790                                l1400 E318  
                              l1312 DCC2                                l1080 FC22  
                              l1072 FA9C                                l1064 F9E0  
                              l1056 F97E                                l1401 E348  
                              l1313 DD04                                l1081 FC16  
                              l1065 F9D4                                l1057 F998  
                              l1170 D708                                l1322 DD96  
                              l1314 DD34                                l1090 FD02  
                              l1074 FACC                                l1410 D832  
                              l1323 DD8A                                l1083 FC68  
                              l1075 FAD0                                l1500 D262  
                              l1316 DD72                                l1420 DEA4  
                              l1092 FD24                                l1076 FAE8  
                              l1068 FA92                                l1173 D748  
                              l1501 D256                                l1317 DD62  
                              l1421 DE94                                l1093 FD2C  
                              l1077 FC0C                                l1069 FA0A  
                              l1174 D756                                l1166 D6CE  
                              l1342 D62C                                l1510 D094  
                              l1414 DDDA                                l1094 FD50  
                              l1078 FB38                                l1406 D7A6  
                              l1175 D76C                                l1167 D6E6  
                              l1431 D47A                                l1343 D622  
                              l1511 D088                                l1095 FD58  
                              l1087 FCC0                                l1432 D4AA  
                              l1504 D296                                l1416 DE06  
                              l1440 D9A8                                l1096 FD8C  
                              l1408 D7CE                                l1169 D714  
                              l1345 D660                                l1505 D2A4  
                              l1521 CF0E                                l1417 DE40  
                              l1281 D2F8                                l1441 D9DA  
                              l1097 FD76                                l1089 FCE0  
                              l1409 D80C                                l1346 D64A  
                              l1514 D0BC                                l1522 CF02  
                              l1426 DEC8                                l1418 DE68  
                              l1282 D2F0                                l1442 D9EA  
      __end_of_uartTransmitBlocking D604                                l1515 D0CA  
                              l1427 DEBC                                l1291 D15A  
                              l1348 D688                                l1292 D166  
                              l1444 DA02                                l1349 D67E  
                              l1373 E214                                l1461 D906  
                              l1285 D318                                l1445 DA12  
                              l1382 E2A4                                l1470 D946  
                              l1462 D8F6                                l1286 D322  
                              l1278 D2CA                                l1294 D17C  
                              l1438 D980                                l1455 CDDC  
                              l1287 D330                                l1279 D2DA  
                              l1295 D174                                l1449 CC34  
                              l1377 E23E                                l1298 D194  
                              l1474 CC16                                l1387 E29A  
                              l1467 D92A                                l1459 D890  
                              l1299 D19E                                l1396 E2D8  
                              l1388 E290                                l1468 D91E  
                              l1397 E2CE                                l1399 E2FC  
                              l5211 F916                                l3535 DF30  
                              l5065 D5A4                                l5307 FC6C  
                              l5243 F9D4                                l3571 DFD8  
                              l3547 DF68                                l5261 FA9C  
                              l5237 F9B8                                l5191 F836  
                              l5183 F7F2                                l3583 E010  
                              l3559 DFA0                                l4369 E07E  
                              l5611 DBA8                                l5369 FDC4  
                              l4837 ED3A                                l4935 EF96  
                              l4855 EDAA                                l3993 CC48  
                              l3987 D4D6                                l5595 D048  
                              l4875 EE20                                l4957 F024  
                              l4995 F2FA                                _ADON 007E10  
                              _CMD0 FF89                                _CMD1 FF87  
                              _CMD8 FF86                                _CMD9 FF84  
                              STR_1 FFD6                                STR_2 FFCA  
                              STR_3 FFAC                                STR_4 FFBB  
                              STR_5 FF9B                                STR_6 FFF5  
                              STR_7 FFE1                                STR_8 FFEB  
                              STR_9 FF8A                                _BLUE FF04  
                              u3010 CC50                                u3020 CC5C  
                              u3012 CC52                                _LATA 000F89  
                              u3022 CC5E                                _LATB 000F8A  
                              _LATC 000F8B                                u3040 D614  
                              _LATD 000F8C                                u3201 E1D2  
                              _LATE 000F8D                                u2410 DF94  
                              u3211 E1E6                                u4011 D874  
                              u1195 CC82                                u3300 E26E  
                              u4100 D266                                u1196 CC84  
                              u4030 D8AE                                u2430 DFCC  
                              u3150 D564                                u3080 D692  
                              u3240 E206                                u4200 ED4C  
                              u4130 D098                                u2450 E004  
                              u4210 ED82                                u4035 D8A6  
                              u3411 D968                                u3340 E2AC  
                              u3500 D2FC                                u5100 FD94  
                              u3180 CD06                                u3165 D1F0  
                              u3166 D1F2                                u3270 E230  
                              u4070 D930                                u5110 FDA8  
                              u2470 E03C                                u2390 DF5C  
                              u4230 EDCC                                u3175 D230  
                              u3431 D990                                u3176 D232  
                              u4400 EFA6                                u3370 E2E0  
                              u5130 FE42                                u4330 EEF2  
                              u4171 ECE6                        printf@tmpval 0058  
                              _GREY FF1C                                u4260 EE42  
                              u4165 CF8C                                u3198 CD08  
                              u5310 DC84                                u6007 DF82  
                              u3560 D180                                u4520 F31C  
                              u4440 F046                                u6017 DFBA  
                              u4610 F5A4                                u5250 D070  
                              u4370 EF8C                                u5235 D35C  
                              u6107 D434                                u6027 DFF2  
                              u5331 CCB8                                u3900 DD9C  
                              u4380 EF8E                                u6117 CBF8  
                              u6037 E02A                                u5190 D718  
                              u3830 DECE                                u5270 DBCC  
                              u4550 D5AC                                u6127 CE0C  
                              u3751 DDBE                                u6047 E5D8  
                              u3911 D78E                                u4800 F94E  
                              u4720 F7C4                                u4480 F208  
                              u4560 D5B8                                u4552 D5AE  
                              u6137 CE40                                u6057 E604  
                              u4465 F146                                u4730 F802  
                              u5290 DC70                                u4490 F242  
                              u4562 D5BA                                u6147 CBE4  
                              u3771 DDEA                                u6067 E630  
                              u3931 D7B6                                u4475 F1E0  
                              _RCIE 007CED                                u4900 FAC6  
                              _RCIF 007CF5                                u6157 D1D8  
                              u6077 E8C2                                u4485 F1FE  
                              u6167 D1E2                                u6087 D3D0  
                              u4495 F238                                u4575 D5E6  
                              u4760 F836                                u4680 F6D4  
                              u4576 D5E8                                u6177 D218  
                              u6097 D3E6                                u6187 D222  
                              u4860 F9EE                                u4685 F6CA  
                              u4890 FAB6                                u5907 CFC4  
                              u4980 FCA4                                u5917 CFDA  
                              u5927 ED0A                                u5937 ED24  
                              u5947 F47C                                u5867 DAAA  
                              u5957 DBE4                                u5877 DAC0  
                              u5967 DBFA                                u5887 DAF2  
                              u5977 DC64                                u5897 D598  
                              u5987 DEE6                                u5997 DF4A  
                              _UART 007A                                _TRMT 007D61  
                              _TXIE 007CEC                                _TXIF 007CF4  
                   __end_of_SD_ACMD CDC6                                _main DA4C  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                              _time 006F                                _uart 00CE  
                              fsr2h 000FDA                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                       __CFG_IESO$OFF 000000  
                    initSD@argument 0041                       __CFG_MCLRE$ON 000000  
                      ___ftmul@cntr 0022                        ___param_bank 000000  
                      ___ftmul@sign 0023                    __end_of_LCD_LEFT FF69  
                      ___fttol@exp1 0039                        ___fttol@lval 0035  
             I2C_Master_Read@ackBit 0002                    ?_I2C_Master_Init 000E  
                  ?_I2C_Master_Read 0001                    ?_I2C_Master_Wait 0001  
                  ?_I2C_Master_Stop 0001                     __end_of___aldiv D77E  
                             ?_main 0001                               _CMD10 FF83  
                             _CMD12 FF82                               _CMD13 FF81  
                             _CMD16 FF80                               _CMD24 FF7D  
                             _CMD32 FF7B                               _CMD17 FF7F  
                             _CMD25 FF7C                               _CMD33 FF7A  
                             _CMD18 FF7E                               _CMD38 FF79  
                             _CMD55 FF78                               _CMD58 FF77  
                   __end_of___awdiv D33A                               _BLACK FF20  
                   __end_of___ftadd E36E                     __end_of___awmod D1B6  
                    initSD@tempSize 0047                     __end_of___ftdiv D864  
                   __end_of___ftneg CC42                     __end_of___lldiv D2B6  
                  __end_of_INST_NOP FF64                     __end_of___ftmul DA4C  
                   ___awdiv@divisor 0009                     __end_of___llmod D0DC  
                   __end_of___ftsub CE06                     __end_of___fttol D958  
                             _GREEN FF08                      initSD@response 005F  
                   ___awdiv@counter 000B                               _RCREG 000FAE  
                             _SPBRG 000FAF                               _PORTB 000F81  
                             _WHITE FF18                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                               _TXREG 000FAD  
                initSD@last_OSCTUNE 0046                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                      ___lltoft@exp 0011                     __end_of_lcdInst CBEC  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                  __size_of_UART_Init 0086  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                     __end_of_readADC CD54  
     __end_ofGLCD_PIC@INST_VMOFCTR2 FF25                     __end_of_initLCD CE52  
                    __CFG_EBTRB$OFF 000000                     __end_of_dpowers FE87  
                             _scale E8CC                     __end_of_isdigit CC1E  
                     ___ftpack@sign 0005                               _putch CBEC  
                       initSD@F3023 00AE                     __end_of_testA2D D44A  
                   __end_of_spiInit CD8C                               tablat 000FF5  
                   __end_of_spiSend CB9A                   _LCDinterruptState 0078  
                             plusw1 000FE3                               plusw2 000FDB  
                       ?_SD_Command 0004                               status 000FD8  
       I2C_Master_Read@receivedByte 0003                      __CFG_PBADEN$ON 000000  
                      __end_of_CMD0 FF8A                        __end_of_CMD1 FF88  
                      __end_of_CMD8 FF87                        __end_of_CMD9 FF85  
                      __end_of_BLUE FF08                        __end_of_GREY FF20  
                   __initialization CEA2                        __end_of_main DB60  
      glcdSetCOLMOD@numBitsPerPixel 0007                      __CFG_OSC$HSPLL 000000  
                 __end_of_LCD_RIGHT FF6A                              ??_main 006C  
                     ___fttol@sign1 0034                       __activetblptr 000002  
              __size_of__tdiv_to_l_ 0132                  SD_Command@response 000B  
                 ?_I2C_Master_Start 0001                   ?_I2C_Master_Write 0002  
                         ??_SD_ACMD 0011                  ??_I2C_Master_Start 0002  
                            _ACMD22 FF76                              _ACMD23 FF75  
                            _ACMD41 FF74                              _ADCON0 000FC2  
                            _ADCON1 000FC1                  ??_I2C_Master_Write 0004  
                            _ADCON2 000FC0                    ___llmod@dividend 0001  
                            ?_scale 0024                              _ADRESH 000FC4  
                            _ADRESL 000FC3                    ___awdiv@dividend 0007  
                            ?_putch 0001                    __end_of___ftpack D6B2  
                 _glcdDrawRectangle E042                   __end_of_INST_TEON FF54  
                            _INDIGO FF00                    __end_of___lltoft CF58  
                            _CVRCON 000FB5                __end_of_glcdTransfer CD20  
                  __end_of___lwtoft CCAE                              _ORANGE FF10  
                            _OSCCON 000FD3                  ?_glcdDrawRectangle 0015  
                            _SDCard 0080                              _VIOLET FEFC  
                            _SSPADD 000FC8                              _TRISC6 007CA6  
                            _TRISC7 007CA7                              _YELLOW FF0C  
                            _SSPBUF 000FC9                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0020                    __end_of__powers_ FEAE  
               ??_glcdDrawRectangle 001C                   __end_of_UART_Init D3C0  
                  testRTCGet@i_1523 0069                              ___ftge D44A  
                         ??___aldiv 0009                              ___wmul CCD2  
                  __end_of_initGLCD E8CC                           ??___awdiv 000B  
                         ??___ftadd 0034                      __CFG_STVREN$ON 000000  
                         ??___awmod 0005                           ??___ftdiv 0012  
                         ??___ftneg 0004                           ??___lldiv 0009  
                         ??___ftmul 001B                           ??___llmod 0009  
                         ??___ftsub 0040                           ??___fttol 002F  
                            _getKey CBC4                              _initSD ECD4  
              _uartTransmitBlocking D56A                              _fround E36E  
                            clear_0 CEE0                              clear_1 CEEC  
                  ___awdiv@quotient 000D                     ___awmod@divisor 0003  
          __end_ofGLCD_PIC@INST_NOP FF44                              _testIO DEE0  
                   ___awmod@counter 0005                           ??_lcdInst 0003  
                            _printf F4E4               ___ftmul@f3_as_product 001F  
                         ??_readADC 0003                           ??_initLCD 0004  
               __size_of_SD_Command 0090                    __end_of_testGLCD D146  
                 __end_of_STOP_TRAN FF6F                        __pdataCOMRAM 007A  
                         ??_isdigit 0001                    __end_of_testUART CCD2  
                      ?_spiTransfer 0001                        __mediumconst FE5E  
                         ??_testA2D 0068                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle E1C2                          __accesstop 0080  
           __end_of__initialization CEF2                          ___ftadd@f1 002E  
                        ___ftadd@f2 0031                          ___ftge@ff1 0001  
                        ___ftge@ff2 0004                       __end_of_CMD10 FF84  
                     __end_of_CMD12 FF83                       __end_of_CMD13 FF82  
                     __end_of_CMD16 FF81                       __end_of_CMD24 FF7E  
                     __end_of_CMD32 FF7C                       __end_of_CMD17 FF80  
                     __end_of_CMD25 FF7D                       __end_of_CMD33 FF7B  
                     __end_of_CMD18 FF7F                       __end_of_CMD38 FF7A  
                     __end_of_CMD55 FF79                       __end_of_CMD58 FF78  
                     __end_of_BLACK FF24                       ___rparam_used 000001  
                        ___ftdiv@f1 000C                          ___ftdiv@f2 000F  
                        ___ftdiv@f3 0016                       __end_of_GREEN FF0C  
                        ___ftneg@f1 0001                       __end_of_WHITE FF1C  
                        ___ftmul@f1 0015                          ___ftmul@f2 0018  
       __end_ofGLCD_PIC@INST_GAMSET FF3C         __end_ofGLCD_PIC@INST_COLMOD FF30  
       __end_ofGLCD_PIC@INST_MADCTL FF33         __end_ofGLCD_PIC@INST_DISPON FF3A  
       __end_ofGLCD_PIC@INST_IDMOFF FF32                          ___ftsub@f1 003A  
                        ___ftsub@f2 003D                          ___fttol@f1 002B  
              __end_of_happynewyear FEFC                      __pcstackCOMRAM 0001  
       __end_ofGLCD_PIC@INST_INVCTR FF2C         __end_ofGLCD_PIC@INST_INVOFF FF3E  
                      __pidataBANK0 CBA5                          ___lltoft@c 0009  
       __end_ofGLCD_PIC@INST_PWCTR1 FF2B         __end_ofGLCD_PIC@INST_PWCTR2 FF2A  
       __end_ofGLCD_PIC@INST_PWCTR3 FF29         __end_ofGLCD_PIC@INST_PWCTR4 FF28  
       __end_ofGLCD_PIC@INST_PWCTR5 FF27         __end_ofGLCD_PIC@INST_VMCTR1 FF26  
       __end_ofGLCD_PIC@INST_SLPOUT FF41                       __end_of_scale ECD4  
             ?_uartTransmitBlocking 0001                       __end_of_putch CC00  
                 _START_BLOCK_TOKEN FF6F                          ___lwtoft@c 0009  
                __size_of_lcdNibble 007E                          __div_to_l_ DC86  
                   __div_to_l_@exp1 000C                     __div_to_l_@cntr 000B  
                           ??_scale 0027                     __div_to_l_@quot 0007  
                           ??_putch 0003                       _INST_VMOFCTR2 FF44  
             __end_of_glcdSetCOLMOD CEA2                          __pbssBANK0 0080  
                     __div_to_l_@f1 0001                       __div_to_l_@f2 0004  
                           ?___ftge 0001                             ?___wmul 000F  
         __end_of_START_BLOCK_TOKEN FF70                             ?_getKey 0001  
                           ?_initSD 0001                             _CMD0CRC FF88  
                           ?_fround 0024                             _CMD8CRC FF85  
                glcdDrawRectangle@i 0022                  __end_of_INST_CASET FF59  
                         ?___ftpack 0001                             ?_testIO 0001  
                __end_of_INST_IDMON FF51                             ?_printf 0040  
                         ?___lltoft 0009                  __end_of_INST_INVON FF5D  
                __end_of_INST_RASET FF58                  __end_of_INST_RAMWR FF57  
                __end_of_INST_TEOFF FF55                  __end_of_INST_NORON FF5F  
                __end_of_INST_PTLAR FF56                  __end_of_INST_SLPIN FF62  
                __end_of_INST_PTLON FF60                           ?___lwtoft 0009  
                        _arr_dataRX 00BE               __size_of_glcdTransfer 0028  
                           _SD_ACMD CD8C          __size_of_glcdDrawRectangle 0180  
                           _OSCTUNE 000F9B           spiTransfer@byteToTransfer 0002  
              lcd@LCDinterruptState 0077                             _SSPCON1 000FC6  
                           _SSPCON2 000FC5                             _SSPSTAT 000FC7  
                         ?_initGLCD 0001                        ??_SD_Command 0008  
                 __end_of_lcdNibble D234                  initSD@tempSize_446 005B  
                 __end_of__npowers_ FED5                             __Hparam 0000  
                        _scale$2424 0027                      _GLCD_SIZE_HORZ FF65  
                           __Lparam 0000                      _GLCD_SIZE_VERT FF64  
                         ?_testGLCD 0001                           ?_testUART 0001  
              __end_of_INST_DISPOFF FF5B                __end_of_INST_FRMCTR1 FF4F  
              __end_of_INST_FRMCTR2 FF4E                __end_of_INST_FRMCTR3 FF4D  
                           ___aldiv D6B2              ??_uartTransmitBlocking 0004  
                   __size_of___ftge 0090                             ___awdiv D2B6  
                           ___ftadd E1C2                             ___awmod D146  
                           ___ftdiv D77E                             ___ftneg CC1E  
                           ___lldiv D234                     __size_of___wmul 0026  
                           ___ftmul D958                             ___llmod D076  
                           ___ftsub CDC6                             ___fttol D864  
                         _CMCONbits 000FB4                     __size_of_getKey 0014  
                   __size_of_initSD 0810                             __pcinit CEA2  
                        ??___ftpack 0006                     __size_of_fround 0252  
                      _glcdTransfer CCF8                             __ramtop 1000  
                           _lcdInst CBD8                          ??___lltoft 000D  
                           __ptext0 DA4C                             __ptext1 CCAE  
                           __ptext2 D56A                             __ptext3 CFB4  
                           __ptext4 ECD4                             __ptext5 CC8A  
                           __ptext6 D77E                             __ptext7 CD8C  
                           __ptext8 D4DA                             __ptext9 CB88  
                   __size_of_testIO 0162                     __size_of_printf 097A  
                        ??___lwtoft 000C                             _readADC CD20  
              __end_of_INST_SWRESET FF63                             _initLCD CE06  
                 __end_of_hexpowers FEF5                         ?__div_to_l_ 0001  
                           _dpowers FE5F                  __end_of_SD_Command D56A  
                           _isdigit CC00                    ___awmod@dividend 0001  
                  ___aldiv@dividend 0001                           _LCD_RIGHT FF69  
                           _testA2D D3C0            __size_of_I2C_Master_Init 005C  
          __size_of_I2C_Master_Read 0024                             _spiInit CD54  
          __size_of_I2C_Master_Wait 0012                             _spiSend CB90  
          __size_of_I2C_Master_Stop 0008                __size_of_spiTransfer 0024  
              end_of_initialization CEF2                         testRTCGet@i 006B  
             GLCD_PIC@INST_VMOFCTR2 FF24                             initSD@i 0060  
                        ??_initGLCD 0028               __end_of_R1_IDLE_STATE FF73  
             __end_of_LCD_SIZE_HORZ FF6C                         testRTCSet@i 0016  
             __end_of_LCD_SIZE_VERT FF6B                       __Lmediumconst FE5E  
            __end_of_GLCD_SIZE_HORZ FF66                           _INST_TEON FF53  
            __end_of_GLCD_SIZE_VERT FF65           __size_of_I2C_Master_Start 0008  
         __size_of_I2C_Master_Write 000A                     ___lldiv@divisor 0005  
                   ___lldiv@counter 000D                             testIO@i 0004  
                        ??_testGLCD 002A                          ??_testUART 0006  
                        _testSDCard CFB4                          _testRTCGet DB60  
                         _RCSTAbits 000FAB                             printf@c 0067  
                           printf@f 0040                          _testRTCSet D014  
                  ___aldiv@quotient 000B                          _spiReceive CB88  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                    __tdiv_to_l_@f1 0001                      __tdiv_to_l_@f2 0004  
                  glcdTransfer@byte 0006                           _UART_Init D33A  
                     ??__tdiv_to_l_ 0007                           _PORTBbits 000F81  
                    spiInit@divider 0001                           _TRISCbits 000F94  
                         _TRISDbits 000F95                           _TRISEbits 000F96  
                      _happynewyear FEF5                           _STOP_TRAN FF6E  
                       SD_Command@n 000C                      __end_of_ACMD22 FF77  
                    __end_of_ACMD23 FF76                      __end_of_ACMD41 FF75  
                    __end_of_INDIGO FF04                         ___ftdiv@exp 0019  
                       printf@width 0060                           _TXSTAbits 000FAC  
                    __end_of_ORANGE FF14                      __end_of_VIOLET FF00  
                    __end_of_YELLOW FF10                 __size_of__div_to_l_ 0128  
      __end_ofGLCD_PIC@INST_DISPOFF FF3B                         ___ftmul@exp 001E  
      __end_ofGLCD_PIC@INST_FRMCTR1 FF2F        __end_ofGLCD_PIC@INST_FRMCTR2 FF2E  
      __end_ofGLCD_PIC@INST_FRMCTR3 FF2D                      __end_of___ftge D4DA  
                    __end_of___wmul CCF8                   initSD@last_OSCCON 0045  
                        ?_UART_Init 000F                       __pidataCOMRAM CB76  
                    __end_of_getKey CBD8                      __end_of_initSD F4E4  
                    __end_of_fround E5C0        __end_ofGLCD_PIC@INST_SWRESET FF43  
                    __end_of_testIO E042                      __end_of_printf FE5E  
               start_initialization CEA2                         __end_of_RED FF18  
               __end_of__tdiv_to_l_ DEE0              glcdDrawRectangle@color 0018  
        __end_of_R1_ILLEGAL_COMMAND FF72                   ??_I2C_Master_Init 0012  
                 ??_I2C_Master_Read 0002                   ??_I2C_Master_Wait 0001  
                 ??_I2C_Master_Stop 0002                     ___llmod@divisor 0005  
                   ___llmod@counter 0009                         ?_testSDCard 0001  
                       ?_testRTCGet 0001                         ?_testRTCSet 0001  
                          ??___ftge 0007                         ?_spiReceive 0001  
                          ??___wmul 0013                            ??_getKey 0001  
          I2C_Master_Init@clockFreq 000E                         __pdataBANK0 00DA  
                  __CFG_LPT1OSC$OFF 000000                            ??_initSD 003A  
                          ??_fround 0027                            ??_testIO 0001  
                          ??_printf 0048    uartTransmitBlocking@numTransmits 0005  
                        fround@prec 002D  __end_of_GLCD_ADDRESSABLE_SIZE_HORZ FF68  
        _GLCD_ADDRESSABLE_SIZE_HORZ FF67                   __size_of___ftpack 00AE  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT FF67          _GLCD_ADDRESSABLE_SIZE_VERT FF66  
                 __size_of___lltoft 005C                         __pbssCOMRAM 006F  
                 __size_of___lwtoft 0024          __end_ofGLCD_PIC@INST_CASET FF39  
        __end_ofGLCD_PIC@INST_IDMON FF31                            ?_SD_ACMD 000D  
        __end_ofGLCD_PIC@INST_INVON FF3D          __end_ofGLCD_PIC@INST_RASET FF38  
        __end_ofGLCD_PIC@INST_RAMWR FF37                        _INST_DISPOFF FF5A  
        __end_ofGLCD_PIC@INST_TEOFF FF35          __end_ofGLCD_PIC@INST_NORON FF3F  
        __end_ofGLCD_PIC@INST_PTLAR FF36          __end_ofGLCD_PIC@INST_SLPIN FF42  
        __end_ofGLCD_PIC@INST_PTLON FF40                        _isdigit$2008 0002  
                      _INST_FRMCTR1 FF4E                        _INST_FRMCTR2 FF4D  
                      _INST_FRMCTR3 FF4C                   __size_of_initGLCD 030C  
                      _INST_SWRESET FF62                    _I2C_Master_Start CB78  
                  _I2C_Master_Write CB9A                   __CFG_CCP2MX$PORTC 000000  
                _UARTinterruptState 0079                       __pmediumconst FE5E  
                        SD_ACMD@cmd 0011                       UART_Init@baud 000F  
                        SD_ACMD@arg 000D                           _lcdNibble D1B6  
                          ?___aldiv 0001                            ?___awdiv 0007  
                          ?___ftadd 002E                            ?___awmod 0001  
                          ?___ftdiv 000C                   __size_of_testGLCD 006A  
                          ?___ftneg 0001                            ?___lldiv 0001  
                          ?___ftmul 0015                            ?___llmod 0001  
                          ?___ftsub 003A                           __npowers_ FEAE  
                          ?___fttol 002B                   __size_of_testUART 0024  
                       ??_UART_Init 0013              __size_of_glcdSetCOLMOD 0050  
                          ?_lcdInst 0001                         __tdiv_to_l_ DDAE  
                      ??__div_to_l_ 0007                            ?_readADC 0001  
                          ?_initLCD 0001                            ?_isdigit 0001  
               glcdDrawRectangle@XE 0015                 glcdDrawRectangle@YE 0017  
               glcdDrawRectangle@XS 0027                 glcdDrawRectangle@YS 0016  
                          ?_testA2D 0001                 __end_of_INST_GAMSET FF5C  
                          ?_spiInit 0001                 __end_of_INST_COLMOD FF50  
                          ?_spiSend 0001                 __end_of_INST_MADCTL FF53  
               __end_of_INST_DISPON FF5A                 __end_of_INST_IDMOFF FF52  
                         _hexpowers FED5                GLCD_PIC@INST_DISPOFF FF3A  
               __end_of_INST_INVCTR FF4C                 __end_of_INST_INVOFF FF5E  
               __size_of_testSDCard 0060                 __size_of_testRTCGet 0126  
               __size_of_testRTCSet 0062                      __size_of_scale 0408  
              GLCD_PIC@INST_FRMCTR1 FF2E                GLCD_PIC@INST_FRMCTR2 FF2D  
              GLCD_PIC@INST_FRMCTR3 FF2C                 __end_of_INST_PWCTR1 FF4B  
               __end_of_INST_PWCTR2 FF4A                 __end_of_INST_PWCTR3 FF49  
               __end_of_INST_PWCTR4 FF48                 __end_of_INST_PWCTR5 FF47  
               __size_of_spiReceive 0008                 __end_of_INST_VMCTR1 FF46  
               __end_of_INST_SLPOUT FF61                      __size_of_putch 0014  
                          _LCD_LEFT FF68                          testIO@temp 0003  
                   ___aldiv@divisor 0005                     ___aldiv@counter 0009  
                    ___wmul@product 0013                            _LATDbits 000F8C  
                          _LATEbits 000F8D                GLCD_PIC@INST_SWRESET FF42  
                     testUART@F3249 00DA                            _INST_NOP FF63  
                        spiSend@val 0003                           getKey@key 0001  
                __end_of__div_to_l_ DDAE                    __CFG_WDTPS$32768 000000  
                        ?_lcdNibble 0001                     glcdTransfer@cmd 0004  
     __size_of_uartTransmitBlocking 009A                          _ADCON0bits 000FC2  
                        _ADCON2bits 000FC0                   ___wmul@multiplier 000F  
                     lcdNibble@data 0002                          printf@flag 005E  
                     lcdNibble@temp 0001                          printf@fval 0062  
                     ??_spiTransfer 0001                          printf@prec 0065  
              glcdSetCOLMOD@rawData 0008                           main@state 006E  
                    _LCD_HORZ_LIMIT FF6D                    __size_of_SD_ACMD 003A  
                         copy_data0 CEB6                       _glcdSetCOLMOD CE52  
                          __Hrparam 0000                            __Lrparam 0000  
                __CFG_BOREN$SBORDIS 000000                    __size_of___aldiv 00CC  
                  __size_of___awdiv 0084                    __size_of___ftadd 01AC  
                  __size_of___awmod 0070                    __size_of___ftdiv 00E6  
                  __size_of___ftneg 0024                    __size_of___lldiv 0082  
                  __size_of___ftmul 00F4                    __size_of___llmod 0066  
                  __size_of___ftsub 0040                    __size_of___fttol 00F4  
                    readADC@channel 0005                            ___ftpack D604  
                       _INST_GAMSET FF5B                         _fround$2422 002A  
                       _fround$2423 0027                         _INST_COLMOD FF4F  
                       _INST_MADCTL FF52                         _INST_DISPON FF59  
                       _INST_IDMOFF FF51                            ___lltoft CEFC  
                          ___lwtoft CC8A                         _INST_INVCTR FF4B  
                       _INST_INVOFF FF5D                    __size_of_lcdInst 0014  
                       _INST_PWCTR1 FF4A                         _INST_PWCTR2 FF49  
                       _INST_PWCTR3 FF48                         _INST_PWCTR4 FF47  
                       _INST_PWCTR5 FF46                         _INST_VMCTR1 FF45  
                       _INST_SLPOUT FF60                     _I2C_Master_Init CF58  
                  __size_of_readADC 0034                     _I2C_Master_Read CC66  
                  __size_of_initLCD 004C                     _I2C_Master_Wait CBB2  
                   _I2C_Master_Stop CB80              __end_of_LCD_HORZ_LIMIT FF6E  
                  __size_of_isdigit 001E                    __size_of_testA2D 008A  
                          __ptext10 D014                            __ptext11 DB60  
                          __ptext20 E5C0                            __ptext12 CB9A  
                          __ptext21 CD54                            __ptext13 CB80  
                          __ptext30 E8CC                            __ptext22 CE52  
                          __ptext14 CB78                            __ptext31 CBEC  
                          __ptext23 E042                            __ptext15 CC66  
                          __ptext40 CEFC                            __ptext32 CC00  
                          __ptext24 CCF8                            __ptext16 CBB2  
                          __ptext41 D076                            __ptext33 E36E  
                          __ptext25 CB90                            __ptext17 CF58  
                          __ptext50 CBD8                            __ptext42 D234  
                          __ptext34 CCD2                            __ptext26 CC42  
                          __ptext18 DEE0                            __ptext51 D1B6  
                          __ptext43 D864                            __ptext35 D958  
                          __ptext27 D3C0                            __ptext19 D0DC  
                          __ptext52 CBC4                            __ptext44 CDC6  
                          __ptext36 D146                            __ptext28 CD20  
                          __ptext53 D33A                            __ptext45 E1C2  
                          __ptext37 D2B6                            __ptext29 F4E4  
                          __ptext54 D6B2                            __ptext46 D604  
                          __ptext38 DDAE                            __ptext47 CC1E  
                          __ptext39 DC86                            __ptext48 D44A  
                          __ptext49 CE06                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 FF45  
                          __powers_ FE87                 __end_of_START_BLOCK FF71  
                        _MADCTLbits 0076                      _LCD_VERT_LIMIT FF6C  
               __end_of_spiTransfer CC66                      ?_glcdSetCOLMOD 0001  
                          _initGLCD E5C0                 GLCD_PIC@INST_GAMSET FF3B  
               GLCD_PIC@INST_COLMOD FF2F                 GLCD_PIC@INST_MADCTL FF32  
               GLCD_PIC@INST_DISPON FF39                 GLCD_PIC@INST_IDMOFF FF31  
                     __size_of_main 0114                 GLCD_PIC@INST_INVCTR FF2B  
               GLCD_PIC@INST_INVOFF FF3D                 GLCD_PIC@INST_PWCTR1 FF2A  
               GLCD_PIC@INST_PWCTR2 FF29                 GLCD_PIC@INST_PWCTR3 FF28  
               GLCD_PIC@INST_PWCTR4 FF27                 GLCD_PIC@INST_PWCTR5 FF26  
               GLCD_PIC@INST_VMCTR1 FF25                 GLCD_PIC@INST_SLPOUT FF40  
                          _testGLCD D0DC                        ??_testSDCard 0068  
                          _testUART CCAE                        ??_testRTCGet 0068  
                _R1_ILLEGAL_COMMAND FF71                        ??_testRTCSet 0016  
                      ??_spiReceive 0003                         ??_lcdNibble 0001  
                         printf@idx 0051                           printf@exp 005C  
                         printf@val 0054         I2C_Master_Write@byteToWrite 0002  
                         putch@data 0003            __end_of_I2C_Master_Start CB80  
                       _OSCTUNEbits 000F9B            __end_of_I2C_Master_Write CBA4  
                        _INTCONbits 000FF2              __end_of_LCD_VERT_LIMIT FF6D  
                          isdigit@c 0003                            scale@scl 002A  
                        _INST_CASET FF58                  __end_of_testSDCard D014  
                        _INST_IDMON FF50                  __end_of_testRTCGet DC86  
                __end_of_testRTCSet D076                          _INST_INVON FF5C  
                        _INST_RASET FF57                          _INST_RAMWR FF56  
                        _INST_TEOFF FF54                  __end_of_spiReceive CB90  
                        _INST_NORON FF5E                    __tdiv_to_l_@exp1 000F  
                        _INST_PTLAR FF55                          _INST_SLPIN FF61  
                  __tdiv_to_l_@cntr 000E                          _INST_PTLON FF5F  
                  __tdiv_to_l_@quot 000A                       _R1_IDLE_STATE FF72  
                     _LCD_SIZE_HORZ FF6B                       _LCD_SIZE_VERT FF6A  
                  ___lldiv@dividend 0001                  GLCD_PIC@INST_CASET FF38  
                GLCD_PIC@INST_IDMON FF30                  GLCD_PIC@INST_INVON FF3C  
                GLCD_PIC@INST_RASET FF37                  GLCD_PIC@INST_RAMWR FF36  
                GLCD_PIC@INST_TEOFF FF34                  GLCD_PIC@INST_NORON FF3E  
                GLCD_PIC@INST_PTLAR FF35                          _OSCCONbits 000FD3  
                GLCD_PIC@INST_SLPIN FF41                  GLCD_PIC@INST_PTLON FF3F  
                          printf@ap 0052          glcdDrawRectangle@colorData 0024  
           __end_of_I2C_Master_Init CFB4             __end_of_I2C_Master_Read CC8A  
           __end_of_I2C_Master_Wait CBC4             __end_of_I2C_Master_Stop CB88  
                    _R1_READY_STATE FF73                         lcdInst@data 0003  
                     ?_glcdTransfer 0004                        ?__tdiv_to_l_ 0001  
                       _printf$2425 004E            uartTransmitBlocking@data 0001  
                       _START_BLOCK FF70                    ___lldiv@quotient 0009  
                       _spiTransfer CC42                   GLCD_PIC@INST_TEON FF33  
                      ___aldiv@sign 000A                         _SSPCON1bits 000FC6  
                       _SSPCON2bits 000FC5                     ??_glcdSetCOLMOD 0007  
                  GLCD_PIC@INST_NOP FF43                          _SD_Command D4DA  
