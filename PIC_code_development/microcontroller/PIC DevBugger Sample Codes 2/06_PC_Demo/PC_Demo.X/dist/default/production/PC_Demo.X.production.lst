

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Oct 28 19:50:32 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.42
    24                           ; Generated 13/04/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0014E4                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _UART
    63  0014E4  3D                 	db	low _uart
    64  0014E5  00                 	db	high _uart
    65                           
    66                           	psect	smallconst
    67  001000                     __psmallconst:
    68                           	opt stack 0
    69  001000  00                 	db	0
    70  001001                     _keys:
    71                           	opt stack 0
    72  001001  31                 	db	49
    73  001002  32                 	db	50
    74  001003  33                 	db	51
    75  001004  41                 	db	65
    76  001005  34                 	db	52
    77  001006  35                 	db	53
    78  001007  36                 	db	54
    79  001008  42                 	db	66
    80  001009  37                 	db	55
    81  00100A  38                 	db	56
    82  00100B  39                 	db	57
    83  00100C  43                 	db	67
    84  00100D  2A                 	db	42
    85  00100E  30                 	db	48
    86  00100F  23                 	db	35
    87  001010  44                 	db	68
    88  001011  00                 	db	0
    89  001012                     __end_of_keys:
    90                           	opt stack 0
    91  001012                     _LCD_LEFT:
    92                           	opt stack 0
    93  001012  00                 	db	0
    94  001013                     __end_of_LCD_LEFT:
    95                           	opt stack 0
    96  001013                     _LCD_RIGHT:
    97                           	opt stack 0
    98  001013  01                 	db	1
    99  001014                     __end_of_LCD_RIGHT:
   100                           	opt stack 0
   101  001014                     _LCD_SIZE_VERT:
   102                           	opt stack 0
   103  001014  02                 	db	2
   104  001015                     __end_of_LCD_SIZE_VERT:
   105                           	opt stack 0
   106  001015                     _LCD_SIZE_HORZ:
   107                           	opt stack 0
   108  001015  10                 	db	16
   109  001016                     __end_of_LCD_SIZE_HORZ:
   110                           	opt stack 0
   111  001016                     _LCD_VERT_LIMIT:
   112                           	opt stack 0
   113  001016  02                 	db	2
   114  001017                     __end_of_LCD_VERT_LIMIT:
   115                           	opt stack 0
   116  001017                     _LCD_HORZ_LIMIT:
   117                           	opt stack 0
   118  001017  28                 	db	40
   119  001018                     __end_of_LCD_HORZ_LIMIT:
   120                           	opt stack 0
   121  0000                     _INTCONbits	set	4082
   122  0000                     _LATDbits	set	3980
   123  0000                     _TXREG	set	4013
   124  0000                     _PORTB	set	3969
   125  0000                     _RCREG	set	4014
   126  0000                     _PORTBbits	set	3969
   127  0000                     _RCSTAbits	set	4011
   128  0000                     _TXSTAbits	set	4012
   129  0000                     _SPBRG	set	4015
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON0	set	4034
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _TRISC	set	3988
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISA	set	3986
   137  0000                     _LATE	set	3981
   138  0000                     _LATD	set	3980
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _RCIE	set	31981
   143  0000                     _TXIE	set	31980
   144  0000                     _TRMT	set	32097
   145  0000                     _TXIF	set	31988
   146  0000                     _RCIF	set	31989
   147  0000                     _TRISC7	set	31911
   148  0000                     _TRISC6	set	31910
   149                           
   150                           ; #config settings
   151  001018  00                 	db	0	; dummy byte at the end
   152  0000                     
   153                           	psect	cinit
   154  001486                     __pcinit:
   155                           	opt stack 0
   156  001486                     start_initialization:
   157                           	opt stack 0
   158  001486                     __initialization:
   159                           	opt stack 0
   160                           
   161                           ; Initialize objects allocated to COMRAM (2 bytes)
   162                           ; load TBLPTR registers with __pidataCOMRAM
   163  001486  0EE4               	movlw	low __pidataCOMRAM
   164  001488  6EF6               	movwf	tblptrl,c
   165  00148A  0E14               	movlw	high __pidataCOMRAM
   166  00148C  6EF7               	movwf	tblptrh,c
   167  00148E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   168  001490  6EF8               	movwf	tblptru,c
   169  001492  0009               	tblrd		*+	;fetch initializer
   170  001494  CFF5 F049          	movff	tablat,__pdataCOMRAM
   171  001498  0009               	tblrd		*+	;fetch initializer
   172  00149A  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   173                           
   174                           ; Clear objects allocated to COMRAM (31 bytes)
   175  00149E  EE00  F02A         	lfsr	0,__pbssCOMRAM
   176  0014A2  0E1F               	movlw	31
   177  0014A4                     clear_0:
   178  0014A4  6AEE               	clrf	postinc0,c
   179  0014A6  06E8               	decf	wreg,f,c
   180  0014A8  E1FD               	bnz	clear_0
   181  0014AA                     end_of_initialization:
   182                           	opt stack 0
   183  0014AA                     __end_of__initialization:
   184                           	opt stack 0
   185  0014AA  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  0014AC  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  0014AE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   188  0014B0  6EF8               	movwf	tblptru,c
   189  0014B2  0E10               	movlw	high __Lsmallconst
   190  0014B4  6EF7               	movwf	tblptrh,c
   191  0014B6  0100               	movlb	0
   192  0014B8  EFF5  F008         	goto	_main	;jump to C main() function
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	bssCOMRAM
   201  00002A                     __pbssCOMRAM:
   202                           	opt stack 0
   203  00002A                     lcd@LCDinterruptState:
   204                           	opt stack 0
   205  00002A                     	ds	1
   206  00002B                     _UARTinterruptState:
   207                           	opt stack 0
   208  00002B                     	ds	1
   209  00002C                     	ds	1
   210  00002D                     _arr_dataRX:
   211                           	opt stack 0
   212  00002D                     	ds	16
   213  00003D                     _uart:
   214                           	opt stack 0
   215  00003D                     	ds	12
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	dataCOMRAM
   224  000049                     __pdataCOMRAM:
   225                           	opt stack 0
   226  000049                     _UART:
   227                           	opt stack 0
   228  000049                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	cstackCOMRAM
   237  000001                     __pcstackCOMRAM:
   238                           	opt stack 0
   239  000001                     ??_interruptHandlerUART:
   240                           
   241                           ; 1 bytes @ 0x0
   242  000001                     	ds	17
   243  000012                     ?___aldiv:
   244                           	opt stack 0
   245  000012                     lcdNibble@temp:
   246                           	opt stack 0
   247  000012                     ___aldiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 4 bytes @ 0x11
   251  000012                     	ds	1
   252  000013                     lcdNibble@data:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x12
   256  000013                     	ds	1
   257  000014                     lcdInst@data:
   258                           	opt stack 0
   259  000014                     putch@data:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x13
   263  000014                     	ds	1
   264  000015                     ??_initLCD:
   265                           
   266                           ; 1 bytes @ 0x14
   267  000015                     	ds	1
   268  000016                     ___aldiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 4 bytes @ 0x15
   272  000016                     	ds	4
   273  00001A                     ___aldiv@counter:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x19
   277  00001A                     	ds	1
   278  00001B                     ___aldiv@sign:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x1A
   282  00001B                     	ds	1
   283  00001C                     ___aldiv@quotient:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x1B
   287  00001C                     	ds	4
   288  000020                     ??_main:
   289                           
   290                           ; 1 bytes @ 0x1F
   291  000020                     	ds	4
   292  000024                     main@baudRate:
   293                           	opt stack 0
   294                           
   295                           ; 4 bytes @ 0x23
   296  000024                     	ds	4
   297  000028                     main@receivedByte:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x27
   301  000028                     	ds	1
   302  000029                     main@keypress:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x28
   306  000029                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 29 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  keypress        1   40[COMRAM] unsigned char 
   324 ;;  baudRate        4   35[COMRAM] long 
   325 ;;  receivedByte    1   39[COMRAM] unsigned char 
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   339 ;;Total ram usage:       10 bytes
   340 ;; Hardware stack levels required when called:    4
   341 ;; This function calls:
   342 ;;		___aldiv
   343 ;;		_initLCD
   344 ;;		_putch
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  0011EA                     __ptext0:
   352                           	opt stack 0
   353  0011EA                     _main:
   354                           	opt stack 27
   355                           
   356                           ;main.c: 35: LATA = 0x00;
   357                           
   358                           ;incstack = 0
   359  0011EA  0E00               	movlw	0
   360  0011EC  6E89               	movwf	3977,c	;volatile
   361                           
   362                           ;main.c: 36: LATB = 0x00;
   363  0011EE  0E00               	movlw	0
   364  0011F0  6E8A               	movwf	3978,c	;volatile
   365                           
   366                           ;main.c: 37: LATC = 0x00;
   367  0011F2  0E00               	movlw	0
   368  0011F4  6E8B               	movwf	3979,c	;volatile
   369                           
   370                           ;main.c: 38: LATD = 0x00;
   371  0011F6  0E00               	movlw	0
   372  0011F8  6E8C               	movwf	3980,c	;volatile
   373                           
   374                           ;main.c: 39: LATE = 0x00;
   375  0011FA  0E00               	movlw	0
   376  0011FC  6E8D               	movwf	3981,c	;volatile
   377                           
   378                           ;main.c: 43: TRISA = 0xFF;
   379  0011FE  6892               	setf	3986,c	;volatile
   380                           
   381                           ;main.c: 44: TRISB = 0xFF;
   382  001200  6893               	setf	3987,c	;volatile
   383                           
   384                           ;main.c: 45: TRISC = 0b10000000;
   385  001202  0E80               	movlw	128
   386  001204  6E94               	movwf	3988,c	;volatile
   387                           
   388                           ;main.c: 49: TRISD = 0x00;
   389  001206  0E00               	movlw	0
   390  001208  6E95               	movwf	3989,c	;volatile
   391                           
   392                           ;main.c: 50: TRISE = 0x00;
   393  00120A  0E00               	movlw	0
   394  00120C  6E96               	movwf	3990,c	;volatile
   395                           
   396                           ;main.c: 53: ADCON0 = 0x00;
   397  00120E  0E00               	movlw	0
   398  001210  6EC2               	movwf	4034,c	;volatile
   399                           
   400                           ;main.c: 54: ADCON1 = 0b00001111;
   401  001212  0E0F               	movlw	15
   402  001214  6EC1               	movwf	4033,c	;volatile
   403                           
   404                           ;main.c: 58: initLCD();
   405  001216  EC1D  F00A         	call	_initLCD	;wreg free
   406                           
   407                           ;main.c: 62: long baudRate = 9600;
   408  00121A  0E80               	movlw	128
   409  00121C  6E24               	movwf	main@baudRate,c
   410  00121E  0E25               	movlw	37
   411  001220  6E25               	movwf	main@baudRate+1,c
   412  001222  0E00               	movlw	0
   413  001224  6E26               	movwf	main@baudRate+2,c
   414  001226  0E00               	movlw	0
   415  001228  6E27               	movwf	main@baudRate+3,c
   416                           
   417                           ;main.c: 63: SPBRG = (unsigned char)((40000000 / (64 * baudRate)) - 1);
   418  00122A  0E00               	movlw	0
   419  00122C  6E12               	movwf	___aldiv@dividend,c
   420  00122E  0E5A               	movlw	90
   421  001230  6E13               	movwf	___aldiv@dividend+1,c
   422  001232  0E62               	movlw	98
   423  001234  6E14               	movwf	___aldiv@dividend+2,c
   424  001236  0E02               	movlw	2
   425  001238  6E15               	movwf	___aldiv@dividend+3,c
   426  00123A  C024  F020         	movff	main@baudRate,??_main
   427  00123E  C025  F021         	movff	main@baudRate+1,??_main+1
   428  001242  C026  F022         	movff	main@baudRate+2,??_main+2
   429  001246  C027  F023         	movff	main@baudRate+3,??_main+3
   430  00124A  0E06               	movlw	6
   431  00124C                     u515:
   432  00124C  90D8               	bcf	status,0,c
   433  00124E  3620               	rlcf	??_main,f,c
   434  001250  3621               	rlcf	??_main+1,f,c
   435  001252  3622               	rlcf	??_main+2,f,c
   436  001254  3623               	rlcf	??_main+3,f,c
   437  001256  2EE8               	decfsz	wreg,f,c
   438  001258  D7F9               	goto	u515
   439  00125A  C020  F016         	movff	??_main,___aldiv@divisor
   440  00125E  C021  F017         	movff	??_main+1,___aldiv@divisor+1
   441  001262  C022  F018         	movff	??_main+2,___aldiv@divisor+2
   442  001266  C023  F019         	movff	??_main+3,___aldiv@divisor+3
   443  00126A  EC78  F009         	call	___aldiv	;wreg free
   444  00126E  0412               	decf	?___aldiv,w,c
   445  001270  6EAF               	movwf	4015,c	;volatile
   446                           
   447                           ;main.c: 66: TXSTAbits.TX9 = 0;
   448  001272  9CAC               	bcf	4012,6,c	;volatile
   449                           
   450                           ;main.c: 67: TXSTAbits.SYNC = 0;
   451  001274  98AC               	bcf	4012,4,c	;volatile
   452                           
   453                           ;main.c: 68: TXSTAbits.TXEN = 1;
   454  001276  8AAC               	bsf	4012,5,c	;volatile
   455                           
   456                           ;main.c: 69: _delay((unsigned long)((5)*(40000000/4000.0)));
   457  001278  0E41               	movlw	65
   458  00127A  6E20               	movwf	??_main& (0+255),c
   459  00127C  0EEE               	movlw	238
   460  00127E                     u607:
   461  00127E  2EE8               	decfsz	wreg,f,c
   462  001280  D7FE               	bra	u607
   463  001282  2E20               	decfsz	??_main& (0+255),f,c
   464  001284  D7FC               	bra	u607
   465  001286  D000               	nop2	
   466                           
   467                           ;main.c: 72: RCSTAbits.RX9 = 0;
   468  001288  9CAB               	bcf	4011,6,c	;volatile
   469                           
   470                           ;main.c: 73: RCSTAbits.CREN = 1;
   471  00128A  88AB               	bsf	4011,4,c	;volatile
   472                           
   473                           ;main.c: 76: TRISC6 = 0;
   474  00128C  9C94               	bcf	3988,6,c	;volatile
   475                           
   476                           ;main.c: 77: TRISC7 = 1;
   477  00128E  8E94               	bsf	3988,7,c	;volatile
   478                           
   479                           ;main.c: 80: RCSTAbits.SPEN = 1;
   480  001290  8EAB               	bsf	4011,7,c	;volatile
   481  001292                     l82:
   482  001292  A281               	btfss	3969,1,c	;volatile
   483  001294  BA9E               	btfsc	3998,5,c	;volatile
   484  001296  D001               	goto	l86
   485  001298  D7FC               	goto	l82
   486  00129A                     l86:
   487                           
   488                           ;main.c: 97: if(RCIF){
   489  00129A  AA9E               	btfss	3998,5,c	;volatile
   490  00129C  D00A               	goto	l1328
   491                           
   492                           ;main.c: 100: receivedByte = RCREG;
   493  00129E  CFAE F028          	movff	4014,main@receivedByte	;volatile
   494                           
   495                           ;main.c: 105: if(RCSTAbits.OERR){
   496  0012A2  A2AB               	btfss	4011,1,c	;volatile
   497  0012A4  D002               	goto	l1326
   498                           
   499                           ;main.c: 107: RCSTAbits.CREN = 0;
   500  0012A6  98AB               	bcf	4011,4,c	;volatile
   501                           
   502                           ;main.c: 108: RCSTAbits.CREN = 1;
   503  0012A8  88AB               	bsf	4011,4,c	;volatile
   504  0012AA                     l1326:
   505                           
   506                           ;main.c: 109: }
   507                           ;main.c: 110: putch(receivedByte);
   508  0012AA  5028               	movf	main@receivedByte,w,c
   509  0012AC  EC5E  F00A         	call	_putch
   510                           
   511                           ;main.c: 111: continue;
   512  0012B0  D7F0               	goto	l82
   513  0012B2                     l1328:
   514                           
   515                           ;main.c: 112: }
   516                           ;main.c: 118: unsigned char keypress = (PORTB & 0xF0) >> 4;
   517  0012B2  3881               	swapf	3969,w,c	;volatile
   518  0012B4  0B0F               	andlw	15
   519  0012B6  0B0F               	andlw	15
   520  0012B8  6E29               	movwf	main@keypress,c
   521  0012BA                     l90:
   522  0012BA  B281               	btfsc	3969,1,c	;volatile
   523  0012BC  D7FE               	goto	l90
   524  0012BE                     l1330:
   525  0012BE  B2AC               	btfsc	4012,1,c	;volatile
   526  0012C0  D002               	goto	u570
   527  0012C2  0E01               	movlw	1
   528  0012C4  D001               	goto	u572
   529  0012C6                     u570:
   530  0012C6  0E00               	movlw	0
   531  0012C8                     u572:
   532  0012C8  6E20               	movwf	??_main& (0+255),c
   533  0012CA  B89E               	btfsc	3998,4,c	;volatile
   534  0012CC  D002               	goto	u580
   535  0012CE  0E01               	movlw	1
   536  0012D0  D001               	goto	u582
   537  0012D2                     u580:
   538  0012D2  0E00               	movlw	0
   539  0012D4                     u582:
   540  0012D4  1020               	iorwf	??_main,w,c
   541  0012D6  E1F3               	bnz	l1330
   542                           
   543                           ;main.c: 129: TXREG = keys[keypress];
   544  0012D8  5029               	movf	main@keypress,w,c
   545  0012DA  0D01               	mullw	1
   546  0012DC  0E01               	movlw	low _keys
   547  0012DE  24F3               	addwf	prodl,w,c
   548  0012E0  6EF6               	movwf	tblptrl,c
   549  0012E2  0E10               	movlw	high _keys
   550  0012E4  20F4               	addwfc	prodh,w,c
   551  0012E6  6EF7               	movwf	tblptrh,c
   552  0012E8                     	if	0	;There are less than 3 active tblptr bytes
   553  0012E8                     	endif
   554  0012E8  0008               	tblrd		*
   555  0012EA  CFF5 FFAD          	movff	tablat,4013	;volatile
   556  0012EE  D7D1               	goto	l82
   557  0012F0                     __end_of_main:
   558                           	opt stack 0
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           prodh	equ	0xFF4
   564                           prodl	equ	0xFF3
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           status	equ	0xFD8
   568                           
   569 ;; *************** function _putch *****************
   570 ;; Defined at:
   571 ;;		line 24 in file "lcd.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;  data            1    wreg     unsigned char 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  data            1   19[COMRAM] unsigned char 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   588 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;Total ram usage:        1 bytes
   590 ;; Hardware stack levels used:    1
   591 ;; Hardware stack levels required when called:    2
   592 ;; This function calls:
   593 ;;		_lcdNibble
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text1
   600  0014BC                     __ptext1:
   601                           	opt stack 0
   602  0014BC                     _putch:
   603                           	opt stack 28
   604                           
   605                           ;incstack = 0
   606                           ;putch@data stored from wreg
   607  0014BC  6E14               	movwf	putch@data,c
   608                           
   609                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   610  0014BE  848C               	bsf	3980,2,c	;volatile
   611                           
   612                           ;lcd.c: 33: lcdNibble(data);
   613  0014C0  5014               	movf	putch@data,w,c
   614  0014C2  ECDE  F009         	call	_lcdNibble
   615                           
   616                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   617  0014C6  0EC8               	movlw	200
   618  0014C8                     u617:
   619  0014C8  D000               	nop2	
   620  0014CA  2EE8               	decfsz	wreg,f,c
   621  0014CC  D7FD               	bra	u617
   622  0014CE  0012               	return		;funcret
   623  0014D0                     __end_of_putch:
   624                           	opt stack 0
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           prodh	equ	0xFF4
   630                           prodl	equ	0xFF3
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           status	equ	0xFD8
   634                           
   635 ;; *************** function _initLCD *****************
   636 ;; Defined at:
   637 ;;		line 60 in file "lcd.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;Total ram usage:        1 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    3
   658 ;; This function calls:
   659 ;;		_lcdInst
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text2
   666  00143A                     __ptext2:
   667                           	opt stack 0
   668  00143A                     _initLCD:
   669                           	opt stack 27
   670                           
   671                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   672                           
   673                           ;incstack = 0
   674  00143A  0EC3               	movlw	195
   675  00143C  6E15               	movwf	??_initLCD& (0+255),c
   676  00143E  0ECD               	movlw	205
   677  001440                     u627:
   678  001440  2EE8               	decfsz	wreg,f,c
   679  001442  D7FE               	bra	u627
   680  001444  2E15               	decfsz	??_initLCD& (0+255),f,c
   681  001446  D7FC               	bra	u627
   682  001448  F000               	nop	
   683                           
   684                           ;lcd.c: 69: lcdInst(0b00110011);
   685  00144A  0E33               	movlw	51
   686  00144C  EC68  F00A         	call	_lcdInst
   687                           
   688                           ;lcd.c: 70: lcdInst(0b00110010);
   689  001450  0E32               	movlw	50
   690  001452  EC68  F00A         	call	_lcdInst
   691                           
   692                           ;lcd.c: 71: lcdInst(0b00101000);
   693  001456  0E28               	movlw	40
   694  001458  EC68  F00A         	call	_lcdInst
   695                           
   696                           ;lcd.c: 72: lcdInst(0b00001111);
   697  00145C  0E0F               	movlw	15
   698  00145E  EC68  F00A         	call	_lcdInst
   699                           
   700                           ;lcd.c: 73: lcdInst(0b00000110);
   701  001462  0E06               	movlw	6
   702  001464  EC68  F00A         	call	_lcdInst
   703                           
   704                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   705  001468  0E01               	movlw	1
   706  00146A  EC68  F00A         	call	_lcdInst
   707  00146E  0EC3               	movlw	195
   708  001470  6E15               	movwf	??_initLCD& (0+255),c
   709  001472  0ECD               	movlw	205
   710  001474                     u637:
   711  001474  2EE8               	decfsz	wreg,f,c
   712  001476  D7FE               	bra	u637
   713  001478  2E15               	decfsz	??_initLCD& (0+255),f,c
   714  00147A  D7FC               	bra	u637
   715  00147C  F000               	nop	
   716                           
   717                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   718  00147E  0E0F               	movlw	15
   719  001480  EC68  F00A         	call	_lcdInst
   720  001484  0012               	return		;funcret
   721  001486                     __end_of_initLCD:
   722                           	opt stack 0
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           prodh	equ	0xFF4
   728                           prodl	equ	0xFF3
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _lcdInst *****************
   734 ;; Defined at:
   735 ;;		line 11 in file "lcd.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  data            1    wreg     unsigned char 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  data            1   19[COMRAM] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;Total ram usage:        1 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    2
   756 ;; This function calls:
   757 ;;		_lcdNibble
   758 ;; This function is called by:
   759 ;;		_initLCD
   760 ;;		_lcd_set_cursor
   761 ;;		_lcd_shift_cursor
   762 ;;		_lcd_shift_display
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text3
   767  0014D0                     __ptext3:
   768                           	opt stack 0
   769  0014D0                     _lcdInst:
   770                           	opt stack 27
   771                           
   772                           ;incstack = 0
   773                           ;lcdInst@data stored from wreg
   774  0014D0  6E14               	movwf	lcdInst@data,c
   775                           
   776                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   777  0014D2  948C               	bcf	3980,2,c	;volatile
   778                           
   779                           ;lcd.c: 20: lcdNibble(data);
   780  0014D4  5014               	movf	lcdInst@data,w,c
   781  0014D6  ECDE  F009         	call	_lcdNibble
   782                           
   783                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   784  0014DA  0EC8               	movlw	200
   785  0014DC                     u647:
   786  0014DC  D000               	nop2	
   787  0014DE  2EE8               	decfsz	wreg,f,c
   788  0014E0  D7FD               	bra	u647
   789  0014E2  0012               	return		;funcret
   790  0014E4                     __end_of_lcdInst:
   791                           	opt stack 0
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function _lcdNibble *****************
   803 ;; Defined at:
   804 ;;		line 37 in file "lcd.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  data            1    wreg     unsigned char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  data            1   18[COMRAM] unsigned char 
   809 ;;  temp            1   17[COMRAM] unsigned char 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2, status,0
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;Total ram usage:        2 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_lcdInst
   830 ;;		_putch
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text4
   835  0013BC                     __ptext4:
   836                           	opt stack 0
   837  0013BC                     _lcdNibble:
   838                           	opt stack 28
   839                           
   840                           ;incstack = 0
   841                           ;lcdNibble@data stored from wreg
   842  0013BC  6E13               	movwf	lcdNibble@data,c
   843                           
   844                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   845  0013BE  5013               	movf	lcdNibble@data,w,c
   846  0013C0  0BF0               	andlw	240
   847  0013C2  6E12               	movwf	lcdNibble@temp,c
   848                           
   849                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   850  0013C4  508C               	movf	3980,w,c	;volatile
   851  0013C6  0B0F               	andlw	15
   852  0013C8  6E8C               	movwf	3980,c	;volatile
   853                           
   854                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   855  0013CA  5012               	movf	lcdNibble@temp,w,c
   856  0013CC  108C               	iorwf	3980,w,c	;volatile
   857  0013CE  6E8C               	movwf	3980,c	;volatile
   858                           
   859                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   860  0013D0  0E00               	movlw	0
   861  0013D2  BEF2               	btfsc	intcon,7,c	;volatile
   862  0013D4  0E01               	movlw	1
   863  0013D6  6E2A               	movwf	lcd@LCDinterruptState,c
   864  0013D8  9EF2               	bcf	intcon,7,c	;volatile
   865  0013DA  868C               	bsf	3980,3,c	;volatile
   866  0013DC  0E53               	movlw	83
   867  0013DE                     u657:
   868  0013DE  2EE8               	decfsz	wreg,f,c
   869  0013E0  D7FE               	bra	u657
   870  0013E2  F000               	nop	
   871  0013E4  968C               	bcf	3980,3,c	;volatile
   872  0013E6  0EC8               	movlw	200
   873  0013E8                     u667:
   874  0013E8  D000               	nop2	
   875  0013EA  2EE8               	decfsz	wreg,f,c
   876  0013EC  D7FD               	bra	u667
   877  0013EE  B02A               	btfsc	lcd@LCDinterruptState,0,c
   878  0013F0  D002               	bra	u15
   879  0013F2  9EF2               	bcf	intcon,7,c	;volatile
   880  0013F4  D001               	bra	u16
   881  0013F6                     u15:
   882  0013F6  8EF2               	bsf	intcon,7,c	;volatile
   883  0013F8                     u16:
   884                           
   885                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   886  0013F8  3813               	swapf	lcdNibble@data,w,c
   887  0013FA  0BF0               	andlw	240
   888  0013FC  6E13               	movwf	lcdNibble@data,c
   889                           
   890                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   891  0013FE  5013               	movf	lcdNibble@data,w,c
   892  001400  0BF0               	andlw	240
   893  001402  6E12               	movwf	lcdNibble@temp,c
   894                           
   895                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   896  001404  508C               	movf	3980,w,c	;volatile
   897  001406  0B0F               	andlw	15
   898  001408  6E8C               	movwf	3980,c	;volatile
   899                           
   900                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   901  00140A  5012               	movf	lcdNibble@temp,w,c
   902  00140C  108C               	iorwf	3980,w,c	;volatile
   903  00140E  6E8C               	movwf	3980,c	;volatile
   904                           
   905                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   906  001410  0E00               	movlw	0
   907  001412  BEF2               	btfsc	intcon,7,c	;volatile
   908  001414  0E01               	movlw	1
   909  001416  6E2A               	movwf	lcd@LCDinterruptState,c
   910  001418  9EF2               	bcf	intcon,7,c	;volatile
   911  00141A  868C               	bsf	3980,3,c	;volatile
   912  00141C  0E53               	movlw	83
   913  00141E                     u677:
   914  00141E  2EE8               	decfsz	wreg,f,c
   915  001420  D7FE               	bra	u677
   916  001422  F000               	nop	
   917  001424  968C               	bcf	3980,3,c	;volatile
   918  001426  0EC8               	movlw	200
   919  001428                     u687:
   920  001428  D000               	nop2	
   921  00142A  2EE8               	decfsz	wreg,f,c
   922  00142C  D7FD               	bra	u687
   923  00142E  B02A               	btfsc	lcd@LCDinterruptState,0,c
   924  001430  D002               	bra	u25
   925  001432  9EF2               	bcf	intcon,7,c	;volatile
   926  001434  D001               	bra	u26
   927  001436                     u25:
   928  001436  8EF2               	bsf	intcon,7,c	;volatile
   929  001438                     u26:
   930  001438  0012               	return		;funcret
   931  00143A                     __end_of_lcdNibble:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           prodh	equ	0xFF4
   938                           prodl	equ	0xFF3
   939                           intcon	equ	0xFF2
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function ___aldiv *****************
   945 ;; Defined at:
   946 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  dividend        4   17[COMRAM] long 
   949 ;;  divisor         4   21[COMRAM] long 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  quotient        4   27[COMRAM] long 
   952 ;;  sign            1   26[COMRAM] unsigned char 
   953 ;;  counter         1   25[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  4   17[COMRAM] long 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   963 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;Total ram usage:       14 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    1
   970 ;; This function calls:
   971 ;;		Nothing
   972 ;; This function is called by:
   973 ;;		_main
   974 ;;		_UART_Init
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text5
   979  0012F0                     __ptext5:
   980                           	opt stack 0
   981  0012F0                     ___aldiv:
   982                           	opt stack 29
   983                           
   984                           ;incstack = 0
   985  0012F0  0E00               	movlw	0
   986  0012F2  6E1B               	movwf	___aldiv@sign,c
   987  0012F4  AE19               	btfss	___aldiv@divisor+3,7,c
   988  0012F6  D00A               	goto	l1256
   989  0012F8  1E19               	comf	___aldiv@divisor+3,f,c
   990  0012FA  1E18               	comf	___aldiv@divisor+2,f,c
   991  0012FC  1E17               	comf	___aldiv@divisor+1,f,c
   992  0012FE  6C16               	negf	___aldiv@divisor,c
   993  001300  0E00               	movlw	0
   994  001302  2217               	addwfc	___aldiv@divisor+1,f,c
   995  001304  2218               	addwfc	___aldiv@divisor+2,f,c
   996  001306  2219               	addwfc	___aldiv@divisor+3,f,c
   997  001308  0E01               	movlw	1
   998  00130A  6E1B               	movwf	___aldiv@sign,c
   999  00130C                     l1256:
  1000  00130C  AE15               	btfss	___aldiv@dividend+3,7,c
  1001  00130E  D00A               	goto	l1262
  1002  001310  1E15               	comf	___aldiv@dividend+3,f,c
  1003  001312  1E14               	comf	___aldiv@dividend+2,f,c
  1004  001314  1E13               	comf	___aldiv@dividend+1,f,c
  1005  001316  6C12               	negf	___aldiv@dividend,c
  1006  001318  0E00               	movlw	0
  1007  00131A  2213               	addwfc	___aldiv@dividend+1,f,c
  1008  00131C  2214               	addwfc	___aldiv@dividend+2,f,c
  1009  00131E  2215               	addwfc	___aldiv@dividend+3,f,c
  1010  001320  0E01               	movlw	1
  1011  001322  1A1B               	xorwf	___aldiv@sign,f,c
  1012  001324                     l1262:
  1013  001324  0E00               	movlw	0
  1014  001326  6E1C               	movwf	___aldiv@quotient,c
  1015  001328  0E00               	movlw	0
  1016  00132A  6E1D               	movwf	___aldiv@quotient+1,c
  1017  00132C  0E00               	movlw	0
  1018  00132E  6E1E               	movwf	___aldiv@quotient+2,c
  1019  001330  0E00               	movlw	0
  1020  001332  6E1F               	movwf	___aldiv@quotient+3,c
  1021  001334  5016               	movf	___aldiv@divisor,w,c
  1022  001336  1017               	iorwf	___aldiv@divisor+1,w,c
  1023  001338  1018               	iorwf	___aldiv@divisor+2,w,c
  1024  00133A  1019               	iorwf	___aldiv@divisor+3,w,c
  1025  00133C  B4D8               	btfsc	status,2,c
  1026  00133E  D02A               	goto	l1284
  1027  001340  0E01               	movlw	1
  1028  001342  6E1A               	movwf	___aldiv@counter,c
  1029  001344  D006               	goto	l1270
  1030  001346                     l1268:
  1031  001346  90D8               	bcf	status,0,c
  1032  001348  3616               	rlcf	___aldiv@divisor,f,c
  1033  00134A  3617               	rlcf	___aldiv@divisor+1,f,c
  1034  00134C  3618               	rlcf	___aldiv@divisor+2,f,c
  1035  00134E  3619               	rlcf	___aldiv@divisor+3,f,c
  1036  001350  2A1A               	incf	___aldiv@counter,f,c
  1037  001352                     l1270:
  1038  001352  AE19               	btfss	___aldiv@divisor+3,7,c
  1039  001354  D7F8               	goto	l1268
  1040  001356                     l1272:
  1041  001356  90D8               	bcf	status,0,c
  1042  001358  361C               	rlcf	___aldiv@quotient,f,c
  1043  00135A  361D               	rlcf	___aldiv@quotient+1,f,c
  1044  00135C  361E               	rlcf	___aldiv@quotient+2,f,c
  1045  00135E  361F               	rlcf	___aldiv@quotient+3,f,c
  1046  001360  5016               	movf	___aldiv@divisor,w,c
  1047  001362  5C12               	subwf	___aldiv@dividend,w,c
  1048  001364  5017               	movf	___aldiv@divisor+1,w,c
  1049  001366  5813               	subwfb	___aldiv@dividend+1,w,c
  1050  001368  5018               	movf	___aldiv@divisor+2,w,c
  1051  00136A  5814               	subwfb	___aldiv@dividend+2,w,c
  1052  00136C  5019               	movf	___aldiv@divisor+3,w,c
  1053  00136E  5815               	subwfb	___aldiv@dividend+3,w,c
  1054  001370  A0D8               	btfss	status,0,c
  1055  001372  D009               	goto	l1280
  1056  001374  5016               	movf	___aldiv@divisor,w,c
  1057  001376  5E12               	subwf	___aldiv@dividend,f,c
  1058  001378  5017               	movf	___aldiv@divisor+1,w,c
  1059  00137A  5A13               	subwfb	___aldiv@dividend+1,f,c
  1060  00137C  5018               	movf	___aldiv@divisor+2,w,c
  1061  00137E  5A14               	subwfb	___aldiv@dividend+2,f,c
  1062  001380  5019               	movf	___aldiv@divisor+3,w,c
  1063  001382  5A15               	subwfb	___aldiv@dividend+3,f,c
  1064  001384  801C               	bsf	___aldiv@quotient,0,c
  1065  001386                     l1280:
  1066  001386  90D8               	bcf	status,0,c
  1067  001388  3219               	rrcf	___aldiv@divisor+3,f,c
  1068  00138A  3218               	rrcf	___aldiv@divisor+2,f,c
  1069  00138C  3217               	rrcf	___aldiv@divisor+1,f,c
  1070  00138E  3216               	rrcf	___aldiv@divisor,f,c
  1071  001390  2E1A               	decfsz	___aldiv@counter,f,c
  1072  001392  D7E1               	goto	l1272
  1073  001394                     l1284:
  1074  001394  501B               	movf	___aldiv@sign,w,c
  1075  001396  B4D8               	btfsc	status,2,c
  1076  001398  D008               	goto	l1288
  1077  00139A  1E1F               	comf	___aldiv@quotient+3,f,c
  1078  00139C  1E1E               	comf	___aldiv@quotient+2,f,c
  1079  00139E  1E1D               	comf	___aldiv@quotient+1,f,c
  1080  0013A0  6C1C               	negf	___aldiv@quotient,c
  1081  0013A2  0E00               	movlw	0
  1082  0013A4  221D               	addwfc	___aldiv@quotient+1,f,c
  1083  0013A6  221E               	addwfc	___aldiv@quotient+2,f,c
  1084  0013A8  221F               	addwfc	___aldiv@quotient+3,f,c
  1085  0013AA                     l1288:
  1086  0013AA  C01C  F012         	movff	___aldiv@quotient,?___aldiv
  1087  0013AE  C01D  F013         	movff	___aldiv@quotient+1,?___aldiv+1
  1088  0013B2  C01E  F014         	movff	___aldiv@quotient+2,?___aldiv+2
  1089  0013B6  C01F  F015         	movff	___aldiv@quotient+3,?___aldiv+3
  1090  0013BA  0012               	return	
  1091  0013BC                     __end_of___aldiv:
  1092                           	opt stack 0
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           prodh	equ	0xFF4
  1098                           prodl	equ	0xFF3
  1099                           intcon	equ	0xFF2
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _interruptHandlerUART *****************
  1105 ;; Defined at:
  1106 ;;		line 10 in file "interruptUART.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:       17 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; This function calls:
  1127 ;;		Nothing
  1128 ;; This function is called by:
  1129 ;;		Interrupt level 2
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	intcode
  1134  000008                     __pintcode:
  1135                           	opt stack 0
  1136  000008                     _interruptHandlerUART:
  1137                           	opt stack 27
  1138                           
  1139                           ;incstack = 0
  1140  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1141  00000A  ED0D  F008         	call	int_func,f	;refresh shadow registers
  1142                           tblptru	equ	0xFF8
  1143                           tblptrh	equ	0xFF7
  1144                           tblptrl	equ	0xFF6
  1145                           tablat	equ	0xFF5
  1146                           prodh	equ	0xFF4
  1147                           prodl	equ	0xFF3
  1148                           intcon	equ	0xFF2
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           status	equ	0xFD8
  1152                           
  1153                           	psect	intcode_body
  1154  00101A                     __pintcode_body:
  1155                           	opt stack 27
  1156  00101A                     int_func:
  1157                           	opt stack 27
  1158  00101A  0006               	pop		; remove dummy address from shadow register refresh
  1159  00101C  CFFA F004          	movff	pclath,??_interruptHandlerUART+3
  1160  001020  CFFB F005          	movff	pclatu,??_interruptHandlerUART+4
  1161  001024  CFE9 F006          	movff	fsr0l,??_interruptHandlerUART+5
  1162  001028  CFEA F007          	movff	fsr0h,??_interruptHandlerUART+6
  1163  00102C  CFE1 F008          	movff	fsr1l,??_interruptHandlerUART+7
  1164  001030  CFE2 F009          	movff	fsr1h,??_interruptHandlerUART+8
  1165  001034  CFD9 F00A          	movff	fsr2l,??_interruptHandlerUART+9
  1166  001038  CFDA F00B          	movff	fsr2h,??_interruptHandlerUART+10
  1167  00103C  CFF3 F00C          	movff	prodl,??_interruptHandlerUART+11
  1168  001040  CFF4 F00D          	movff	prodh,??_interruptHandlerUART+12
  1169  001044  CFF6 F00E          	movff	tblptrl,??_interruptHandlerUART+13
  1170  001048  CFF7 F00F          	movff	tblptrh,??_interruptHandlerUART+14
  1171  00104C  CFF8 F010          	movff	tblptru,??_interruptHandlerUART+15
  1172  001050  CFF5 F011          	movff	tablat,??_interruptHandlerUART+16
  1173                           
  1174                           ;interruptUART.c: 17: if(TXIF){
  1175  001054  A89E               	btfss	3998,4,c	;volatile
  1176  001056  D044               	goto	i2l1100
  1177                           
  1178                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
  1179  001058  0E00               	movlw	0
  1180  00105A  BEF2               	btfsc	intcon,7,c	;volatile
  1181  00105C  0E01               	movlw	1
  1182  00105E  6E2B               	movwf	_UARTinterruptState,c	;volatile
  1183                           
  1184                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
  1185  001060  9EF2               	bcf	intcon,7,c	;volatile
  1186                           
  1187                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
  1188  001062  EE20 F003          	lfsr	2,3
  1189  001066  5049               	movf	_UART,w,c
  1190  001068  26D9               	addwf	fsr2l,f,c
  1191  00106A  504A               	movf	_UART+1,w,c
  1192  00106C  22DA               	addwfc	fsr2h,f,c
  1193  00106E  50DF               	movf	indf2,w,c
  1194  001070  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1195  001072  5001               	movf	??_interruptHandlerUART,w,c
  1196  001074  0D01               	mullw	1
  1197  001076  C049  FFD9         	movff	_UART,fsr2l
  1198  00107A  C04A  FFDA         	movff	_UART+1,fsr2h
  1199  00107E  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1200  001082  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1201  001086  50F3               	movf	prodl,w,c
  1202  001088  2402               	addwf	??_interruptHandlerUART+1,w,c
  1203  00108A  6ED9               	movwf	fsr2l,c
  1204  00108C  50F4               	movf	prodh,w,c
  1205  00108E  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1206  001090  6EDA               	movwf	fsr2h,c
  1207  001092  50DF               	movf	indf2,w,c
  1208  001094  6EAD               	movwf	4013,c	;volatile
  1209                           
  1210                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
  1211  001096  B02B               	btfsc	_UARTinterruptState,0,c	;volatile
  1212  001098  D002               	bra	i2u24_45
  1213  00109A  9EF2               	bcf	intcon,7,c	;volatile
  1214  00109C  D001               	bra	i2u24_46
  1215  00109E                     i2u24_45:
  1216  00109E  8EF2               	bsf	intcon,7,c	;volatile
  1217  0010A0                     i2u24_46:
  1218                           
  1219                           ;interruptUART.c: 24: UART -> _numTransmits++;
  1220  0010A0  EE20 F003          	lfsr	2,3
  1221  0010A4  5049               	movf	_UART,w,c
  1222  0010A6  26D9               	addwf	fsr2l,f,c
  1223  0010A8  504A               	movf	_UART+1,w,c
  1224  0010AA  22DA               	addwfc	fsr2h,f,c
  1225  0010AC  2ADF               	incf	indf2,f,c
  1226                           
  1227                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
  1228  0010AE  EE20 F002          	lfsr	2,2
  1229  0010B2  5049               	movf	_UART,w,c
  1230  0010B4  26D9               	addwf	fsr2l,f,c
  1231  0010B6  504A               	movf	_UART+1,w,c
  1232  0010B8  22DA               	addwfc	fsr2h,f,c
  1233  0010BA  EE10 F003          	lfsr	1,3
  1234  0010BE  5049               	movf	_UART,w,c
  1235  0010C0  26E1               	addwf	fsr1l,f,c
  1236  0010C2  504A               	movf	_UART+1,w,c
  1237  0010C4  22E2               	addwfc	fsr1h,f,c
  1238  0010C6  50DE               	movf	postinc2,w,c
  1239  0010C8  18E6               	xorwf	postinc1,w,c
  1240  0010CA  A4D8               	btfss	status,2,c
  1241  0010CC  D009               	goto	i2l1100
  1242                           
  1243                           ;interruptUART.c: 28: TXIE = 0;
  1244  0010CE  989D               	bcf	3997,4,c	;volatile
  1245                           
  1246                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
  1247  0010D0  EE20 F008          	lfsr	2,8
  1248  0010D4  5049               	movf	_UART,w,c
  1249  0010D6  26D9               	addwf	fsr2l,f,c
  1250  0010D8  504A               	movf	_UART+1,w,c
  1251  0010DA  22DA               	addwfc	fsr2h,f,c
  1252  0010DC  0E01               	movlw	1
  1253  0010DE  6EDF               	movwf	indf2,c
  1254  0010E0                     i2l1100:
  1255                           
  1256                           ;interruptUART.c: 32: }
  1257                           ;interruptUART.c: 33: }
  1258                           ;interruptUART.c: 36: if(RCIF){
  1259  0010E0  AA9E               	btfss	3998,5,c	;volatile
  1260  0010E2  D065               	goto	i2l187
  1261                           
  1262                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
  1263  0010E4  A4AB               	btfss	4011,2,c	;volatile
  1264  0010E6  D008               	goto	i2l1106
  1265                           
  1266                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
  1267  0010E8  EE20 F00A          	lfsr	2,10
  1268  0010EC  5049               	movf	_UART,w,c
  1269  0010EE  26D9               	addwf	fsr2l,f,c
  1270  0010F0  504A               	movf	_UART+1,w,c
  1271  0010F2  22DA               	addwfc	fsr2h,f,c
  1272  0010F4  0E01               	movlw	1
  1273  0010F6  D007               	goto	L1
  1274  0010F8                     i2l1106:
  1275                           
  1276                           ;interruptUART.c: 45: else{
  1277                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
  1278  0010F8  EE20 F00A          	lfsr	2,10
  1279  0010FC  5049               	movf	_UART,w,c
  1280  0010FE  26D9               	addwf	fsr2l,f,c
  1281  001100  504A               	movf	_UART+1,w,c
  1282  001102  22DA               	addwfc	fsr2h,f,c
  1283  001104  0E00               	movlw	0
  1284  001106                     L1:
  1285  001106  6EDF               	movwf	indf2,c
  1286                           
  1287                           ;interruptUART.c: 47: }
  1288                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
  1289  001108  0E00               	movlw	0
  1290  00110A  BEF2               	btfsc	intcon,7,c	;volatile
  1291  00110C  0E01               	movlw	1
  1292  00110E  6E2B               	movwf	_UARTinterruptState,c	;volatile
  1293                           
  1294                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
  1295  001110  9EF2               	bcf	intcon,7,c	;volatile
  1296                           
  1297                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
  1298  001112  EE20 F007          	lfsr	2,7
  1299  001116  5049               	movf	_UART,w,c
  1300  001118  26D9               	addwf	fsr2l,f,c
  1301  00111A  504A               	movf	_UART+1,w,c
  1302  00111C  22DA               	addwfc	fsr2h,f,c
  1303  00111E  50DF               	movf	indf2,w,c
  1304  001120  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1305  001122  5001               	movf	??_interruptHandlerUART,w,c
  1306  001124  0D01               	mullw	1
  1307  001126  EE20 F004          	lfsr	2,4
  1308  00112A  5049               	movf	_UART,w,c
  1309  00112C  26D9               	addwf	fsr2l,f,c
  1310  00112E  504A               	movf	_UART+1,w,c
  1311  001130  22DA               	addwfc	fsr2h,f,c
  1312  001132  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1313  001136  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1314  00113A  50F3               	movf	prodl,w,c
  1315  00113C  2402               	addwf	??_interruptHandlerUART+1,w,c
  1316  00113E  6ED9               	movwf	fsr2l,c
  1317  001140  50F4               	movf	prodh,w,c
  1318  001142  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1319  001144  6EDA               	movwf	fsr2h,c
  1320  001146  CFAE FFDF          	movff	4014,indf2	;volatile
  1321                           
  1322                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
  1323  00114A  B02B               	btfsc	_UARTinterruptState,0,c	;volatile
  1324  00114C  D002               	bra	i2u28_45
  1325  00114E  9EF2               	bcf	intcon,7,c	;volatile
  1326  001150  D001               	bra	i2u28_46
  1327  001152                     i2u28_45:
  1328  001152  8EF2               	bsf	intcon,7,c	;volatile
  1329  001154                     i2u28_46:
  1330                           
  1331                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
  1332  001154  A2AB               	btfss	4011,1,c	;volatile
  1333  001156  D003               	goto	i2l1120
  1334                           
  1335                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
  1336  001158  98AB               	bcf	4011,4,c	;volatile
  1337                           
  1338                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
  1339  00115A  88AB               	bsf	4011,4,c	;volatile
  1340                           
  1341                           ;interruptUART.c: 61: }
  1342  00115C  D008               	goto	i2l185
  1343  00115E                     i2l1120:
  1344                           
  1345                           ;interruptUART.c: 62: else{
  1346                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
  1347  00115E  EE20 F00B          	lfsr	2,11
  1348  001162  5049               	movf	_UART,w,c
  1349  001164  26D9               	addwf	fsr2l,f,c
  1350  001166  504A               	movf	_UART+1,w,c
  1351  001168  22DA               	addwfc	fsr2h,f,c
  1352  00116A  0E00               	movlw	0
  1353  00116C  6EDF               	movwf	indf2,c
  1354  00116E                     i2l185:
  1355                           
  1356                           ;interruptUART.c: 64: }
  1357                           ;interruptUART.c: 66: UART -> _numReceives++;
  1358  00116E  EE20 F007          	lfsr	2,7
  1359  001172  5049               	movf	_UART,w,c
  1360  001174  26D9               	addwf	fsr2l,f,c
  1361  001176  504A               	movf	_UART+1,w,c
  1362  001178  22DA               	addwfc	fsr2h,f,c
  1363  00117A  2ADF               	incf	indf2,f,c
  1364                           
  1365                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
  1366  00117C  EE20 F006          	lfsr	2,6
  1367  001180  5049               	movf	_UART,w,c
  1368  001182  26D9               	addwf	fsr2l,f,c
  1369  001184  504A               	movf	_UART+1,w,c
  1370  001186  22DA               	addwfc	fsr2h,f,c
  1371  001188  EE10 F007          	lfsr	1,7
  1372  00118C  5049               	movf	_UART,w,c
  1373  00118E  26E1               	addwf	fsr1l,f,c
  1374  001190  504A               	movf	_UART+1,w,c
  1375  001192  22E2               	addwfc	fsr1h,f,c
  1376  001194  50DE               	movf	postinc2,w,c
  1377  001196  5CE6               	subwf	postinc1,w,c
  1378  001198  A0D8               	btfss	status,0,c
  1379  00119A  D009               	goto	i2l187
  1380                           
  1381                           ;interruptUART.c: 70: RCIE = 0;
  1382  00119C  9A9D               	bcf	3997,5,c	;volatile
  1383                           
  1384                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
  1385  00119E  EE20 F009          	lfsr	2,9
  1386  0011A2  5049               	movf	_UART,w,c
  1387  0011A4  26D9               	addwf	fsr2l,f,c
  1388  0011A6  504A               	movf	_UART+1,w,c
  1389  0011A8  22DA               	addwfc	fsr2h,f,c
  1390  0011AA  0E01               	movlw	1
  1391  0011AC  6EDF               	movwf	indf2,c
  1392  0011AE                     i2l187:
  1393  0011AE  C011  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1394  0011B2  C010  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1395  0011B6  C00F  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1396  0011BA  C00E  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1397  0011BE  C00D  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1398  0011C2  C00C  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1399  0011C6  C00B  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1400  0011CA  C00A  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1401  0011CE  C009  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1402  0011D2  C008  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1403  0011D6  C007  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1404  0011DA  C006  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1405  0011DE  C005  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1406  0011E2  C004  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1407  0011E6  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1408  0011E8  0011               	retfie		f
  1409  0011EA                     __end_of_interruptHandlerUART:
  1410                           	opt stack 0
  1411                           pclatu	equ	0xFFB
  1412                           pclath	equ	0xFFA
  1413                           tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           prodh	equ	0xFF4
  1418                           prodl	equ	0xFF3
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           fsr0h	equ	0xFEA
  1422                           fsr0l	equ	0xFE9
  1423                           wreg	equ	0xFE8
  1424                           postinc1	equ	0xFE6
  1425                           fsr1h	equ	0xFE2
  1426                           fsr1l	equ	0xFE1
  1427                           indf2	equ	0xFDF
  1428                           postinc2	equ	0xFDE
  1429                           postdec2	equ	0xFDD
  1430                           fsr2h	equ	0xFDA
  1431                           fsr2l	equ	0xFD9
  1432                           status	equ	0xFD8
  1433                           pclatu	equ	0xFFB
  1434                           pclath	equ	0xFFA
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           prodh	equ	0xFF4
  1440                           prodl	equ	0xFF3
  1441                           intcon	equ	0xFF2
  1442                           postinc0	equ	0xFEE
  1443                           fsr0h	equ	0xFEA
  1444                           fsr0l	equ	0xFE9
  1445                           wreg	equ	0xFE8
  1446                           postinc1	equ	0xFE6
  1447                           fsr1h	equ	0xFE2
  1448                           fsr1l	equ	0xFE1
  1449                           indf2	equ	0xFDF
  1450                           postinc2	equ	0xFDE
  1451                           postdec2	equ	0xFDD
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456                           	psect	rparam
  1457  0000                     pclatu	equ	0xFFB
  1458                           pclath	equ	0xFFA
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           prodh	equ	0xFF4
  1464                           prodl	equ	0xFF3
  1465                           intcon	equ	0xFF2
  1466                           postinc0	equ	0xFEE
  1467                           fsr0h	equ	0xFEA
  1468                           fsr0l	equ	0xFE9
  1469                           wreg	equ	0xFE8
  1470                           postinc1	equ	0xFE6
  1471                           fsr1h	equ	0xFE2
  1472                           fsr1l	equ	0xFE1
  1473                           indf2	equ	0xFDF
  1474                           postinc2	equ	0xFDE
  1475                           postdec2	equ	0xFDD
  1476                           fsr2h	equ	0xFDA
  1477                           fsr2l	equ	0xFD9
  1478                           status	equ	0xFD8
  1479                           
  1480                           	psect	temp
  1481  00004B                     btemp:
  1482                           	opt stack 0
  1483  00004B                     	ds	1
  1484  0000                     int$flags	set	btemp
  1485                           pclatu	equ	0xFFB
  1486                           pclath	equ	0xFFA
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           fsr0h	equ	0xFEA
  1496                           fsr0l	equ	0xFE9
  1497                           wreg	equ	0xFE8
  1498                           postinc1	equ	0xFE6
  1499                           fsr1h	equ	0xFE2
  1500                           fsr1l	equ	0xFE1
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           postdec2	equ	0xFDD
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41      74
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandlerUART in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandlerUART in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandlerUART in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandlerUART in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandlerUART in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandlerUART in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandlerUART in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandlerUART in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0     853
                                             31 COMRAM    10    10      0
                            ___aldiv
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             20 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     604
                                             17 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandlerUART                                17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _putch
     _lcdNibble

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      34        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Oct 28 19:50:32 2017

                           l90 12BA                             l82 1292                             l86 129A  
                           u15 13F6                             u16 13F8                             u25 1436  
                           u26 1438                    __CFG_CPD$ON 000000                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                   __CFG_CPB$OFF 000000                            u515 124C  
                          u607 127E                            u617 14C8                            u570 12C6  
                          u627 1440                            u580 12D2                            u572 12C8  
                          u637 1474                            u582 12D4                            u647 14DC  
                          u657 13DE                            u667 13E8                            u677 141E  
                          u687 1428                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1330 12BE                           l1270 1352  
                         l1262 1324                           l1326 12AA                           l1280 1386  
                         l1272 1356                           l1256 130C                           l1328 12B2  
                         l1268 1346                           l1284 1394                           l1288 13AA  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           _LATE 000F8D                           _RCIE 007CED  
                         _RCIF 007CF5                           _UART 0049                           _TRMT 007D61  
                         _TXIE 007CEC                           _TXIF 007CF4                           _main 11EA  
                         _keys 1001                           _uart 003D                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004B                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                   main@baudRate 0024  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000               __end_of_LCD_LEFT 1013  
              __end_of___aldiv 13BC                          ?_main 0001                          i2l185 116E  
                        i2l187 11AE                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _PORTB 000F81                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 14E4                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                   main@keypress 0029  
               __CFG_EBTR3$OFF 000000           _interruptHandlerUART 0008                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                __end_of_initLCD 1486  
               __CFG_EBTRB$OFF 000000                          _putch 14BC                          pclath 000FFA  
                        tablat 000FF5              _LCDinterruptState 002C                          status 000FD8  
               __CFG_PBADEN$ON 000000                __initialization 1486                   __end_of_main 12F0  
                 __end_of_keys 1012                 __CFG_OSC$HSPLL 000000              __end_of_LCD_RIGHT 1014  
                       ??_main 0020                  __activetblptr 000001          ?_interruptHandlerUART 0001  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         ?_putch 0001  
                       i2l1100 10E0                         i2l1120 115E                         i2l1106 10F8  
                       _TRISC6 007CA6                         _TRISC7 007CA7                 __CFG_XINST$OFF 000000  
                    ??___aldiv 001A                 __CFG_STVREN$ON 000000                         clear_0 14A4  
                    ??_lcdInst 0014                      ??_initLCD 0015                   __pdataCOMRAM 0049  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                     __accesstop 0080        __end_of__initialization 14AA  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                  __end_of_putch 14D0  
           __size_of_lcdNibble 007E         ??_interruptHandlerUART 0001                        ??_putch 0014  
                   _arr_dataRX 002D                        i2u24_45 109E                        i2u24_46 10A0  
                      i2u28_45 1152                        i2u28_46 1154           lcd@LCDinterruptState 002A  
            __end_of_lcdNibble 143A                        __Hparam 0000                        __Lparam 0000  
                      ___aldiv 12F0                   __psmallconst 1000                        __pcinit 1486  
                      __ramtop 1000                        _lcdInst 14D0                        __ptext0 11EA  
                      __ptext1 14BC                        __ptext2 143A                        __ptext3 14D0  
                      __ptext4 13BC                        __ptext5 12F0                        _initLCD 143A  
             ___aldiv@dividend 0012                      _LCD_RIGHT 1013                 __pintcode_body 101A  
         end_of_initialization 14AA          __end_of_LCD_SIZE_HORZ 1016          __end_of_LCD_SIZE_VERT 1015  
                      int_func 101A                      _RCSTAbits 000FAB               ___aldiv@quotient 001C  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      _PORTBbits 000F81                      _TXSTAbits 000FAC  
                __pidataCOMRAM 14E4            start_initialization 1486               main@receivedByte 0028  
             __CFG_LPT1OSC$OFF 000000                    __pbssCOMRAM 002A  __size_of_interruptHandlerUART 11E2  
            __CFG_CCP2MX$PORTC 000000             _UARTinterruptState 002B                      __pintcode 0008  
                    _lcdNibble 13BC                       ?___aldiv 0012                       ?_lcdInst 0001  
                     ?_initLCD 0001                    __smallconst 1000                 __size_of_putch 0014  
                     _LCD_LEFT 1012                ___aldiv@divisor 0016                ___aldiv@counter 001A  
                     _LATDbits 000F8C               __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001  
                lcdNibble@data 0013                  lcdNibble@temp 0012                 _LCD_HORZ_LIMIT 1017  
                     __Hrparam 0000                       __Lrparam 0000                   __Lsmallconst 1000  
           __CFG_BOREN$SBORDIS 000000               __size_of___aldiv 00CC               __size_of_lcdInst 0014  
             __size_of_initLCD 004C         __end_of_LCD_HORZ_LIMIT 1018                 _LCD_VERT_LIMIT 1016  
                __size_of_main 0106                    ??_lcdNibble 0012                       int$flags 004B  
                    putch@data 0014                     _INTCONbits 000FF2         __end_of_LCD_VERT_LIMIT 1017  
                     intlevel2 0000                  _LCD_SIZE_HORZ 1015                  _LCD_SIZE_VERT 1014  
 __end_of_interruptHandlerUART 11EA                    lcdInst@data 0014                   ___aldiv@sign 001B  
