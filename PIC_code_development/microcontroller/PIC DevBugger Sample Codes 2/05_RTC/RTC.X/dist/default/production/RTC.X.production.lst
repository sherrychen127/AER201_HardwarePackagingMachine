

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 15 00:39:56 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.43
    29                           ; Generated 25/07/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	smallconst
    64  001000                     __psmallconst:
    65                           	opt stack 0
    66  001000  00                 	db	0
    67  001001                     _keys:
    68                           	opt stack 0
    69  001001  31                 	db	49
    70  001002  32                 	db	50
    71  001003  33                 	db	51
    72  001004  41                 	db	65
    73  001005  34                 	db	52
    74  001006  35                 	db	53
    75  001007  36                 	db	54
    76  001008  42                 	db	66
    77  001009  37                 	db	55
    78  00100A  38                 	db	56
    79  00100B  39                 	db	57
    80  00100C  43                 	db	67
    81  00100D  2A                 	db	42
    82  00100E  30                 	db	48
    83  00100F  23                 	db	35
    84  001010  44                 	db	68
    85  001011  00                 	db	0
    86  001012                     __end_of_keys:
    87                           	opt stack 0
    88  001012                     _hexpowers:
    89                           	opt stack 0
    90  001012  0001               	dw	1
    91  001014  0010               	dw	16
    92  001016  0100               	dw	256
    93  001018  1000               	dw	4096
    94  00101A                     __end_of_hexpowers:
    95                           	opt stack 0
    96  00101A                     _happynewyear:
    97                           	opt stack 0
    98  00101A  45                 	db	69
    99  00101B  59                 	db	89
   100  00101C  23                 	db	35
   101  00101D  00                 	db	0
   102  00101E  31                 	db	49
   103  00101F  12                 	db	18
   104  001020  17                 	db	23
   105  001021                     __end_of_happynewyear:
   106                           	opt stack 0
   107  001021                     _LCD_LEFT:
   108                           	opt stack 0
   109  001021  00                 	db	0
   110  001022                     __end_of_LCD_LEFT:
   111                           	opt stack 0
   112  001022                     _LCD_RIGHT:
   113                           	opt stack 0
   114  001022  01                 	db	1
   115  001023                     __end_of_LCD_RIGHT:
   116                           	opt stack 0
   117  001023                     _LCD_SIZE_VERT:
   118                           	opt stack 0
   119  001023  02                 	db	2
   120  001024                     __end_of_LCD_SIZE_VERT:
   121                           	opt stack 0
   122  001024                     _LCD_SIZE_HORZ:
   123                           	opt stack 0
   124  001024  10                 	db	16
   125  001025                     __end_of_LCD_SIZE_HORZ:
   126                           	opt stack 0
   127  001025                     _LCD_VERT_LIMIT:
   128                           	opt stack 0
   129  001025  02                 	db	2
   130  001026                     __end_of_LCD_VERT_LIMIT:
   131                           	opt stack 0
   132  001026                     _LCD_HORZ_LIMIT:
   133                           	opt stack 0
   134  001026  28                 	db	40
   135  001027                     __end_of_LCD_HORZ_LIMIT:
   136                           	opt stack 0
   137  0000                     _LATDbits	set	3980
   138  0000                     _SSPBUF	set	4041
   139  0000                     _SSPCON2bits	set	4037
   140  0000                     _SSPADD	set	4040
   141  0000                     _SSPCON2	set	4037
   142  0000                     _SSPCON1	set	4038
   143  0000                     _SSPSTAT	set	4039
   144  0000                     _TRISCbits	set	3988
   145  0000                     _SSPCON1bits	set	4038
   146  0000                     _INTCONbits	set	4082
   147  0000                     _ADCON1	set	4033
   148  0000                     _ADCON0	set	4034
   149  0000                     _TRISE	set	3990
   150  0000                     _TRISD	set	3989
   151  0000                     _TRISC	set	3988
   152  0000                     _TRISB	set	3987
   153  0000                     _TRISA	set	3986
   154  0000                     _LATE	set	3981
   155  0000                     _LATD	set	3980
   156  0000                     _LATC	set	3979
   157  0000                     _LATB	set	3978
   158  0000                     _LATA	set	3977
   159  001027                     STR_3:
   160  001027  30                 	db	48	;'0'
   161  001028  31                 	db	49	;'1'
   162  001029  32                 	db	50	;'2'
   163  00102A  33                 	db	51	;'3'
   164  00102B  34                 	db	52	;'4'
   165  00102C  35                 	db	53	;'5'
   166  00102D  36                 	db	54	;'6'
   167  00102E  37                 	db	55	;'7'
   168  00102F  38                 	db	56	;'8'
   169  001030  39                 	db	57	;'9'
   170  001031  61                 	db	97	;'a'
   171  001032  62                 	db	98	;'b'
   172  001033  63                 	db	99	;'c'
   173  001034  64                 	db	100	;'d'
   174  001035  65                 	db	101	;'e'
   175  001036  66                 	db	102	;'f'
   176  001037  00                 	db	0
   177  001038                     STR_1:
   178  001038  25                 	db	37
   179  001039  30                 	db	48	;'0'
   180  00103A  32                 	db	50	;'2'
   181  00103B  78                 	db	120	;'x'
   182  00103C  2F                 	db	47
   183  00103D  25                 	db	37
   184  00103E  30                 	db	48	;'0'
   185  00103F  32                 	db	50	;'2'
   186  001040  78                 	db	120	;'x'
   187  001041  2F                 	db	47
   188  001042  25                 	db	37
   189  001043  30                 	db	48	;'0'
   190  001044  32                 	db	50	;'2'
   191  001045  78                 	db	120	;'x'
   192  001046  00                 	db	0
   193  001047                     STR_2:
   194  001047  25                 	db	37
   195  001048  30                 	db	48	;'0'
   196  001049  32                 	db	50	;'2'
   197  00104A  78                 	db	120	;'x'
   198  00104B  3A                 	db	58	;':'
   199  00104C  25                 	db	37
   200  00104D  30                 	db	48	;'0'
   201  00104E  32                 	db	50	;'2'
   202  00104F  78                 	db	120	;'x'
   203  001050  3A                 	db	58	;':'
   204  001051  25                 	db	37
   205  001052  30                 	db	48	;'0'
   206  001053  32                 	db	50	;'2'
   207  001054  78                 	db	120	;'x'
   208  001055  00                 	db	0
   209                           
   210                           ; #config settings
   211  001056  00                 	db	0	; dummy byte at the end
   212  0000                     
   213                           	psect	cinit
   214  001602                     __pcinit:
   215                           	opt stack 0
   216  001602                     start_initialization:
   217                           	opt stack 0
   218  001602                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Clear objects allocated to COMRAM (2 bytes)
   222  001602  6A29               	clrf	(__pbssCOMRAM+1)& (0+255),c
   223  001604  6A28               	clrf	__pbssCOMRAM& (0+255),c
   224  001606                     end_of_initialization:
   225                           	opt stack 0
   226  001606                     __end_of__initialization:
   227                           	opt stack 0
   228  001606  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001608  6EF8               	movwf	tblptru,c
   230  00160A  0100               	movlb	0
   231  00160C  EF26  F009         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           
   234                           	psect	bssCOMRAM
   235  000028                     __pbssCOMRAM:
   236                           	opt stack 0
   237  000028                     lcd@LCDinterruptState:
   238                           	opt stack 0
   239  000028                     	ds	1
   240  000029                     	ds	1
   241                           tblptru	equ	0xFF8
   242                           
   243                           	psect	cstackCOMRAM
   244  000001                     __pcstackCOMRAM:
   245                           	opt stack 0
   246  000001                     ??_isdigit:
   247  000001                     ??_I2C_Master_Wait:
   248  000001                     ?___wmul:
   249                           	opt stack 0
   250  000001                     ?___lwdiv:
   251                           	opt stack 0
   252  000001                     ?___lldiv:
   253                           	opt stack 0
   254  000001                     lcdNibble@temp:
   255                           	opt stack 0
   256  000001                     ___wmul@multiplier:
   257                           	opt stack 0
   258  000001                     ___lwdiv@dividend:
   259                           	opt stack 0
   260  000001                     ___lldiv@dividend:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0x0
   264  000001                     	ds	1
   265  000002                     I2C_Master_Read@ackBit:
   266                           	opt stack 0
   267  000002                     lcdNibble@data:
   268                           	opt stack 0
   269  000002                     _isdigit$642:
   270                           	opt stack 0
   271  000002                     I2C_Master_Write@byteToWrite:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x1
   275  000002                     	ds	1
   276  000003                     I2C_Master_Read@receivedByte:
   277                           	opt stack 0
   278  000003                     lcdInst@data:
   279                           	opt stack 0
   280  000003                     putch@data:
   281                           	opt stack 0
   282  000003                     isdigit@c:
   283                           	opt stack 0
   284  000003                     ___wmul@multiplicand:
   285                           	opt stack 0
   286  000003                     ___lwdiv@divisor:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x2
   290  000003                     	ds	1
   291  000004                     ??_initLCD:
   292  000004                     
   293                           ; 1 bytes @ 0x3
   294  000004                     	ds	1
   295  000005                     ___wmul@product:
   296                           	opt stack 0
   297  000005                     ___lwdiv@quotient:
   298                           	opt stack 0
   299  000005                     ___lldiv@divisor:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x4
   303  000005                     	ds	2
   304  000007                     ___lwdiv@counter:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x6
   308  000007                     	ds	1
   309  000008                     ?_printf:
   310                           	opt stack 0
   311  000008                     printf@f:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x7
   315  000008                     	ds	1
   316  000009                     ___lldiv@quotient:
   317                           	opt stack 0
   318                           
   319                           ; 4 bytes @ 0x8
   320  000009                     	ds	4
   321  00000D                     ___lldiv@counter:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0xC
   325  00000D                     	ds	1
   326  00000E                     I2C_Master_Init@clockFreq:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0xD
   330  00000E                     	ds	2
   331  000010                     ??_printf:
   332                           
   333                           ; 1 bytes @ 0xF
   334  000010                     	ds	2
   335  000012                     ??_I2C_Master_Init:
   336                           
   337                           ; 1 bytes @ 0x11
   338  000012                     	ds	2
   339  000014                     printf@ap:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x13
   343  000014                     	ds	2
   344  000016                     printf@idx:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x15
   348  000016                     	ds	1
   349  000017                     printf@flag:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x16
   353  000017                     	ds	1
   354  000018                     printf@val:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x17
   358  000018                     	ds	2
   359  00001A                     printf@prec:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x19
   363  00001A                     	ds	1
   364  00001B                     printf@width:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x1A
   368  00001B                     	ds	2
   369  00001D                     printf@c:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x1C
   373  00001D                     	ds	1
   374  00001E                     ??_main:
   375                           
   376                           ; 1 bytes @ 0x1D
   377  00001E                     	ds	2
   378  000020                     main@time:
   379                           	opt stack 0
   380                           
   381                           ; 7 bytes @ 0x1F
   382  000020                     	ds	7
   383  000027                     main@i:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x26
   387  000027                     	ds	1
   388                           tblptru	equ	0xFF8
   389                           
   390 ;;
   391 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   392 ;;
   393 ;; *************** function _main *****************
   394 ;; Defined at:
   395 ;;		line 43 in file "main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;  time            7   31[COMRAM] unsigned char [7]
   400 ;;  i               1   38[COMRAM] unsigned char 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   411 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   413 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   414 ;;Total ram usage:       10 bytes
   415 ;; Hardware stack levels required when called:    3
   416 ;; This function calls:
   417 ;;		_I2C_Master_Init
   418 ;;		_I2C_Master_Read
   419 ;;		_I2C_Master_Start
   420 ;;		_I2C_Master_Stop
   421 ;;		_I2C_Master_Write
   422 ;;		_initLCD
   423 ;;		_lcdInst
   424 ;;		_printf
   425 ;; This function is called by:
   426 ;;		Startup code after reset
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text0
   431  00124C                     __ptext0:
   432                           	opt stack 0
   433  00124C                     _main:
   434                           	opt stack 28
   435                           
   436                           ;main.c: 49: LATA = 0x00;
   437                           
   438                           ;incstack = 0
   439  00124C  0E00               	movlw	0
   440  00124E  6E89               	movwf	3977,c	;volatile
   441                           
   442                           ;main.c: 50: LATB = 0x00;
   443  001250  0E00               	movlw	0
   444  001252  6E8A               	movwf	3978,c	;volatile
   445                           
   446                           ;main.c: 51: LATC = 0x00;
   447  001254  0E00               	movlw	0
   448  001256  6E8B               	movwf	3979,c	;volatile
   449                           
   450                           ;main.c: 52: LATD = 0x00;
   451  001258  0E00               	movlw	0
   452  00125A  6E8C               	movwf	3980,c	;volatile
   453                           
   454                           ;main.c: 53: LATE = 0x00;
   455  00125C  0E00               	movlw	0
   456  00125E  6E8D               	movwf	3981,c	;volatile
   457                           
   458                           ;main.c: 57: TRISA = 0xFF;
   459  001260  6892               	setf	3986,c	;volatile
   460                           
   461                           ;main.c: 58: TRISB = 0xFF;
   462  001262  6893               	setf	3987,c	;volatile
   463                           
   464                           ;main.c: 59: TRISC = 0b10000000;
   465  001264  0E80               	movlw	128
   466  001266  6E94               	movwf	3988,c	;volatile
   467                           
   468                           ;main.c: 63: TRISD = 0x00;
   469  001268  0E00               	movlw	0
   470  00126A  6E95               	movwf	3989,c	;volatile
   471                           
   472                           ;main.c: 64: TRISE = 0x00;
   473  00126C  0E00               	movlw	0
   474  00126E  6E96               	movwf	3990,c	;volatile
   475                           
   476                           ;main.c: 67: ADCON0 = 0x00;
   477  001270  0E00               	movlw	0
   478  001272  6EC2               	movwf	4034,c	;volatile
   479                           
   480                           ;main.c: 68: ADCON1 = 0b00001111;
   481  001274  0E0F               	movlw	15
   482  001276  6EC1               	movwf	4033,c	;volatile
   483                           
   484                           ;main.c: 72: initLCD();
   485  001278  EC8A  F00A         	call	_initLCD	;wreg free
   486                           
   487                           ;main.c: 74: I2C_Master_Init(100000);
   488  00127C  0EA0               	movlw	160
   489  00127E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   490  001280  0E86               	movlw	134
   491  001282  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   492  001284  0E01               	movlw	1
   493  001286  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   494  001288  0E00               	movlw	0
   495  00128A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   496  00128C  EC33  F00A         	call	_I2C_Master_Init	;wreg free
   497                           
   498                           ;main.c: 75: (INTCONbits.GIE = 0);
   499  001290  9EF2               	bcf	intcon,7,c	;volatile
   500  001292                     
   501                           ;main.c: 90: I2C_Master_Start();
   502  001292  EC11  F00B         	call	_I2C_Master_Start	;wreg free
   503                           
   504                           ;main.c: 91: I2C_Master_Write(0b11010000);
   505  001296  0E00               	movlw	0
   506  001298  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   507  00129A  0ED0               	movlw	208
   508  00129C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   509  00129E  EC08  F00B         	call	_I2C_Master_Write	;wreg free
   510                           
   511                           ;main.c: 92: I2C_Master_Write(0x00);
   512  0012A2  0E00               	movlw	0
   513  0012A4  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   514  0012A6  0E00               	movlw	0
   515  0012A8  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   516  0012AA  EC08  F00B         	call	_I2C_Master_Write	;wreg free
   517                           
   518                           ;main.c: 93: I2C_Master_Stop();
   519  0012AE  EC0D  F00B         	call	_I2C_Master_Stop	;wreg free
   520                           
   521                           ;main.c: 96: I2C_Master_Start();
   522  0012B2  EC11  F00B         	call	_I2C_Master_Start	;wreg free
   523                           
   524                           ;main.c: 97: I2C_Master_Write(0b11010001);
   525  0012B6  0E00               	movlw	0
   526  0012B8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   527  0012BA  0ED1               	movlw	209
   528  0012BC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   529  0012BE  EC08  F00B         	call	_I2C_Master_Write	;wreg free
   530                           
   531                           ;main.c: 98: for(i = 0; i < 6; i++){
   532  0012C2  0E00               	movlw	0
   533  0012C4  6E27               	movwf	main@i,c
   534  0012C6                     l1363:
   535  0012C6  0E05               	movlw	5
   536  0012C8  6427               	cpfsgt	main@i,c
   537  0012CA  D001               	goto	l68
   538  0012CC  D00E               	goto	u630
   539  0012CE                     l68:
   540                           
   541                           ;main.c: 99: time[i] = I2C_Master_Read(0);
   542  0012CE  5027               	movf	main@i,w,c
   543  0012D0  0D01               	mullw	1
   544  0012D2  0E20               	movlw	low main@time
   545  0012D4  24F3               	addwf	prodl,w,c
   546  0012D6  6ED9               	movwf	fsr2l,c
   547  0012D8  0E00               	movlw	high main@time
   548  0012DA  20F4               	addwfc	prodh,w,c
   549  0012DC  6EDA               	movwf	fsr2h,c
   550  0012DE  0E00               	movlw	0
   551  0012E0  ECC3  F00A         	call	_I2C_Master_Read
   552  0012E4  6EDF               	movwf	indf2,c
   553  0012E6  2A27               	incf	main@i,f,c
   554  0012E8  D7EE               	goto	l1363
   555  0012EA                     u630:
   556                           
   557                           ;main.c: 100: }
   558                           ;main.c: 101: time[6] = I2C_Master_Read(1);
   559  0012EA  0E01               	movlw	1
   560  0012EC  ECC3  F00A         	call	_I2C_Master_Read
   561  0012F0  6E26               	movwf	main@time+6,c
   562                           
   563                           ;main.c: 102: I2C_Master_Stop();
   564  0012F2  EC0D  F00B         	call	_I2C_Master_Stop	;wreg free
   565                           
   566                           ;main.c: 105: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   567  0012F6  0E80               	movlw	128
   568  0012F8  ECEE  F00A         	call	_lcdInst
   569  0012FC  0E41               	movlw	65
   570  0012FE  6E1E               	movwf	??_main& (0+255),c
   571  001300  0EEE               	movlw	238
   572  001302                     u667:
   573  001302  2EE8               	decfsz	wreg,f,c
   574  001304  D7FE               	bra	u667
   575  001306  2E1E               	decfsz	??_main& (0+255),f,c
   576  001308  D7FC               	bra	u667
   577  00130A  D000               	nop2	
   578                           
   579                           ;main.c: 106: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
   580  00130C  0E38               	movlw	low STR_1
   581  00130E  6E08               	movwf	printf@f,c
   582  001310  0E10               	movlw	high STR_1
   583  001312  6E09               	movwf	printf@f+1,c
   584  001314  C026  F00A         	movff	main@time+6,?_printf+2
   585  001318  6A0B               	clrf	?_printf+3,c
   586  00131A  C025  F00C         	movff	main@time+5,?_printf+4
   587  00131E  6A0D               	clrf	?_printf+5,c
   588  001320  C024  F00E         	movff	main@time+4,?_printf+6
   589  001324  6A0F               	clrf	?_printf+7,c
   590  001326  EC2C  F008         	call	_printf	;wreg free
   591                           
   592                           ;main.c: 107: lcdInst(0xC0);;
   593  00132A  0EC0               	movlw	192
   594  00132C  ECEE  F00A         	call	_lcdInst
   595                           
   596                           ;main.c: 108: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
   597  001330  0E47               	movlw	low STR_2
   598  001332  6E08               	movwf	printf@f,c
   599  001334  0E10               	movlw	high STR_2
   600  001336  6E09               	movwf	printf@f+1,c
   601  001338  C022  F00A         	movff	main@time+2,?_printf+2
   602  00133C  6A0B               	clrf	?_printf+3,c
   603  00133E  C021  F00C         	movff	main@time+1,?_printf+4
   604  001342  6A0D               	clrf	?_printf+5,c
   605  001344  C020  F00E         	movff	main@time,?_printf+6
   606  001348  6A0F               	clrf	?_printf+7,c
   607  00134A  EC2C  F008         	call	_printf	;wreg free
   608                           
   609                           ;main.c: 109: _delay((unsigned long)((1000)*(40000000/4000.0)));
   610  00134E  0E33               	movlw	51
   611  001350  6E1F               	movwf	(??_main+1)& (0+255),c
   612  001352  0EBB               	movlw	187
   613  001354  6E1E               	movwf	??_main& (0+255),c
   614  001356  0EE0               	movlw	224
   615  001358                     u677:
   616  001358  2EE8               	decfsz	wreg,f,c
   617  00135A  D7FE               	bra	u677
   618  00135C  2E1E               	decfsz	??_main& (0+255),f,c
   619  00135E  D7FC               	bra	u677
   620  001360  2E1F               	decfsz	(??_main+1)& (0+255),f,c
   621  001362  D7FA               	bra	u677
   622  001364  D796               	goto	l67
   623  001366                     __end_of_main:
   624                           	opt stack 0
   625                           tblptru	equ	0xFF8
   626                           prodh	equ	0xFF4
   627                           prodl	equ	0xFF3
   628                           intcon	equ	0xFF2
   629                           wreg	equ	0xFE8
   630                           indf2	equ	0xFDF
   631                           fsr2h	equ	0xFDA
   632                           fsr2l	equ	0xFD9
   633                           
   634 ;; *************** function _printf *****************
   635 ;; Defined at:
   636 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  f               2    7[COMRAM] PTR const unsigned char 
   639 ;;		 -> STR_2(15), STR_1(15), 
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  idx             1   21[COMRAM] unsigned char 
   642 ;;  tmpval          4    0        struct .
   643 ;;  cp              3    0        PTR const unsigned char 
   644 ;;  width           2   26[COMRAM] int 
   645 ;;  val             2   23[COMRAM] unsigned int 
   646 ;;  ap              2   19[COMRAM] PTR void [1]
   647 ;;		 -> ?_printf(2), 
   648 ;;  len             2    0        unsigned int 
   649 ;;  c               1   28[COMRAM] char 
   650 ;;  prec            1   25[COMRAM] char 
   651 ;;  flag            1   22[COMRAM] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  2    7[COMRAM] int 
   654 ;; Registers used:
   655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   661 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   663 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;Total ram usage:       22 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    2
   668 ;; This function calls:
   669 ;;		___lwdiv
   670 ;;		___wmul
   671 ;;		_isdigit
   672 ;;		_putch
   673 ;; This function is called by:
   674 ;;		_main
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           	psect	text1
   679  001058                     __ptext1:
   680                           	opt stack 0
   681  001058                     _printf:
   682                           	opt stack 28
   683                           
   684                           ;doprnt.c: 466: va_list ap;
   685                           ;doprnt.c: 499: signed char c;
   686                           ;doprnt.c: 501: int width;
   687                           ;doprnt.c: 506: signed char prec;
   688                           ;doprnt.c: 508: unsigned char flag;
   689                           ;doprnt.c: 523: union {
   690                           ;doprnt.c: 524: unsigned long vd;
   691                           ;doprnt.c: 525: double integ;
   692                           ;doprnt.c: 526: } tmpval;
   693                           ;doprnt.c: 528: unsigned int val;
   694                           ;doprnt.c: 529: unsigned len;
   695                           ;doprnt.c: 530: const char * cp;
   696                           ;doprnt.c: 533: *ap = __va_start();
   697                           
   698                           ;incstack = 0
   699  001058  0E0A               	movlw	low (?_printf+2)
   700  00105A  6E14               	movwf	printf@ap,c
   701  00105C  0E00               	movlw	high (?_printf+2)
   702  00105E  6E15               	movwf	printf@ap+1,c
   703                           
   704                           ;doprnt.c: 536: while(c = *f++) {
   705  001060  D0E8               	goto	u600
   706  001062                     
   707                           ;doprnt.c: 538: if(c != '%')
   708  001062  0E25               	movlw	37
   709  001064  181D               	xorwf	printf@c,w,c
   710  001066  B4D8               	btfsc	status,2,c
   711  001068  D004               	goto	l187
   712                           
   713                           ;doprnt.c: 540: {
   714                           ;doprnt.c: 541: (putch(c) );
   715  00106A  501D               	movf	printf@c,w,c
   716  00106C  ECE4  F00A         	call	_putch
   717                           
   718                           ;doprnt.c: 542: continue;
   719  001070  D0E0               	goto	u600
   720  001072                     l187:
   721                           
   722                           ;doprnt.c: 543: }
   723                           ;doprnt.c: 546: width = 0;
   724  001072  0E00               	movlw	0
   725  001074  6E1C               	movwf	printf@width+1,c
   726  001076  0E00               	movlw	0
   727  001078  6E1B               	movwf	printf@width,c
   728                           
   729                           ;doprnt.c: 548: flag = 0;
   730  00107A  0E00               	movlw	0
   731  00107C  6E17               	movwf	printf@flag,c
   732                           
   733                           ;doprnt.c: 551: switch(*f) {
   734                           
   735                           ;doprnt.c: 550: for(;;) {
   736  00107E  D003               	goto	l189
   737  001080                     
   738                           ;doprnt.c: 580: flag |= 0x04;
   739  001080  8417               	bsf	printf@flag,2,c
   740                           
   741                           ;doprnt.c: 581: f++;
   742  001082  4A08               	infsnz	printf@f,f,c
   743  001084  2A09               	incf	printf@f+1,f,c
   744  001086                     l189:
   745  001086  C008  FFF6         	movff	printf@f,tblptrl
   746  00108A  C009  FFF7         	movff	printf@f+1,tblptrh
   747  00108E                     	if	0	;tblptru may be non-zero
   748  00108E                     	endif
   749  00108E                     	if	0	;tblptru may be non-zero
   750  00108E                     	endif
   751  00108E  0008               	tblrd		*
   752  001090  50F5               	movf	tablat,w,c
   753                           
   754                           ; Switch size 1, requested type "space"
   755                           ; Number of cases is 1, Range of values is 48 to 48
   756                           ; switch strategies available:
   757                           ; Name         Instructions Cycles
   758                           ; simple_byte            4     3 (average)
   759                           ;	Chosen strategy is simple_byte
   760  001092  0A30               	xorlw	48	; case 48
   761  001094  B4D8               	btfsc	status,2,c
   762  001096  D7F4               	goto	l190
   763                           
   764                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   765                           
   766                           ;doprnt.c: 586: }
   767                           
   768                           ;doprnt.c: 585: break;
   769  001098  C008  FFF6         	movff	printf@f,tblptrl
   770  00109C  C009  FFF7         	movff	printf@f+1,tblptrh
   771  0010A0                     	if	0	;tblptru may be non-zero
   772  0010A0                     	endif
   773  0010A0                     	if	0	;tblptru may be non-zero
   774  0010A0                     	endif
   775  0010A0  0008               	tblrd		*
   776  0010A2  50F5               	movf	tablat,w,c
   777  0010A4  ECD5  F00A         	call	_isdigit
   778  0010A8  A0D8               	btfss	status,0,c
   779  0010AA  D032               	goto	l197
   780                           
   781                           ;doprnt.c: 598: width = 0;
   782  0010AC  0E00               	movlw	0
   783  0010AE  6E1C               	movwf	printf@width+1,c
   784  0010B0  0E00               	movlw	0
   785  0010B2  6E1B               	movwf	printf@width,c
   786  0010B4                     
   787                           ;doprnt.c: 600: width *= 10;
   788  0010B4  C01B  F001         	movff	printf@width,___wmul@multiplier
   789  0010B8  C01C  F002         	movff	printf@width+1,___wmul@multiplier+1
   790  0010BC  0E00               	movlw	0
   791  0010BE  6E04               	movwf	___wmul@multiplicand+1,c
   792  0010C0  0E0A               	movlw	10
   793  0010C2  6E03               	movwf	___wmul@multiplicand,c
   794  0010C4  ECB0  F00A         	call	___wmul	;wreg free
   795  0010C8  C001  F01B         	movff	?___wmul,printf@width
   796  0010CC  C002  F01C         	movff	?___wmul+1,printf@width+1
   797                           
   798                           ;doprnt.c: 601: width += *f++ - '0';
   799  0010D0  0ED0               	movlw	208
   800  0010D2  6E10               	movwf	??_printf& (0+255),c
   801  0010D4  0EFF               	movlw	255
   802  0010D6  6E11               	movwf	(??_printf+1)& (0+255),c
   803  0010D8  C008  FFF6         	movff	printf@f,tblptrl
   804  0010DC  C009  FFF7         	movff	printf@f+1,tblptrh
   805  0010E0                     	if	0	;tblptru may be non-zero
   806  0010E0                     	endif
   807  0010E0                     	if	0	;tblptru may be non-zero
   808  0010E0                     	endif
   809  0010E0  0008               	tblrd		*
   810  0010E2  50F5               	movf	tablat,w,c
   811  0010E4  6E12               	movwf	(??_printf+2)& (0+255),c
   812  0010E6  6A13               	clrf	(??_printf+3)& (0+255),c
   813  0010E8  5010               	movf	??_printf,w,c
   814  0010EA  2612               	addwf	??_printf+2,f,c
   815  0010EC  5011               	movf	??_printf+1,w,c
   816  0010EE  2213               	addwfc	??_printf+3,f,c
   817  0010F0  5012               	movf	??_printf+2,w,c
   818  0010F2  261B               	addwf	printf@width,f,c
   819  0010F4  5013               	movf	??_printf+3,w,c
   820  0010F6  221C               	addwfc	printf@width+1,f,c
   821  0010F8  4A08               	infsnz	printf@f,f,c
   822  0010FA  2A09               	incf	printf@f+1,f,c
   823                           
   824                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   825  0010FC  C008  FFF6         	movff	printf@f,tblptrl
   826  001100  C009  FFF7         	movff	printf@f+1,tblptrh
   827  001104                     	if	0	;tblptru may be non-zero
   828  001104                     	endif
   829  001104                     	if	0	;tblptru may be non-zero
   830  001104                     	endif
   831  001104  0008               	tblrd		*
   832  001106  50F5               	movf	tablat,w,c
   833  001108  ECD5  F00A         	call	_isdigit
   834  00110C  B0D8               	btfsc	status,0,c
   835  00110E  D7D2               	goto	l195
   836  001110                     l197:
   837  001110  C008  FFF6         	movff	printf@f,tblptrl
   838  001114  C009  FFF7         	movff	printf@f+1,tblptrh
   839  001118  4A08               	infsnz	printf@f,f,c
   840  00111A  2A09               	incf	printf@f+1,f,c
   841  00111C                     	if	0	;tblptru may be non-zero
   842  00111C                     	endif
   843  00111C                     	if	0	;tblptru may be non-zero
   844  00111C                     	endif
   845  00111C  0008               	tblrd		*
   846  00111E  CFF5 F01D          	movff	tablat,printf@c
   847  001122  501D               	movf	printf@c,w,c
   848                           
   849                           ; Switch size 1, requested type "space"
   850                           ; Number of cases is 2, Range of values is 0 to 120
   851                           ; switch strategies available:
   852                           ; Name         Instructions Cycles
   853                           ; simple_byte            7     4 (average)
   854                           ;	Chosen strategy is simple_byte
   855  001124  0A00               	xorlw	0	; case 0
   856  001126  B4D8               	btfsc	status,2,c
   857  001128  0012               	return	
   858  00112A  0A78               	xorlw	120	; case 120
   859  00112C  A4D8               	btfss	status,2,c
   860  00112E  D081               	goto	u600
   861                           
   862                           ;doprnt.c: 1273: {
   863                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   864  001130  C014  FFD9         	movff	printf@ap,fsr2l
   865  001134  C015  FFDA         	movff	printf@ap+1,fsr2h
   866  001138  CFDE F018          	movff	postinc2,printf@val
   867  00113C  CFDD F019          	movff	postdec2,printf@val+1
   868  001140  0E02               	movlw	2
   869  001142  2614               	addwf	printf@ap,f,c
   870  001144  0E00               	movlw	0
   871  001146  2215               	addwfc	printf@ap+1,f,c
   872                           
   873                           ;doprnt.c: 1287: }
   874                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   875  001148  0E01               	movlw	1
   876  00114A  6E1D               	movwf	printf@c,c
   877  00114C                     l1299:
   878  00114C  0E04               	movlw	4
   879  00114E  181D               	xorwf	printf@c,w,c
   880  001150  B4D8               	btfsc	status,2,c
   881  001152  D012               	goto	u530
   882                           
   883                           ;doprnt.c: 1317: if(val < hexpowers[c])
   884  001154  501D               	movf	printf@c,w,c
   885  001156  0D02               	mullw	2
   886  001158  0E12               	movlw	low _hexpowers
   887  00115A  24F3               	addwf	prodl,w,c
   888  00115C  6EF6               	movwf	tblptrl,c
   889  00115E  0E10               	movlw	high _hexpowers
   890  001160  20F4               	addwfc	prodh,w,c
   891  001162  6EF7               	movwf	tblptrh,c
   892  001164                     	if	0	;There are less than 3 active tblptr bytes
   893  001164                     	endif
   894  001164  0009               	tblrd		*+
   895  001166  50F5               	movf	tablat,w,c
   896  001168  5C18               	subwf	printf@val,w,c
   897  00116A  0009               	tblrd		*+
   898  00116C  50F5               	movf	tablat,w,c
   899  00116E  5819               	subwfb	printf@val+1,w,c
   900  001170  A0D8               	btfss	status,0,c
   901  001172  D002               	goto	u530
   902                           
   903                           ;doprnt.c: 1318: break;
   904  001174  2A1D               	incf	printf@c,f,c
   905  001176  D7EA               	goto	l1299
   906  001178                     u530:
   907                           
   908                           ;doprnt.c: 1381: if(width > c)
   909  001178  0E80               	movlw	128
   910  00117A  BE1D               	btfsc	printf@c,7,c
   911  00117C  0E7F               	movlw	127
   912  00117E  6E10               	movwf	??_printf& (0+255),c
   913  001180  501B               	movf	printf@width,w,c
   914  001182  5C1D               	subwf	printf@c,w,c
   915  001184  501C               	movf	printf@width+1,w,c
   916  001186  0A80               	xorlw	128
   917  001188  5810               	subwfb	??_printf& (0+255),w,c
   918  00118A  B0D8               	btfsc	status,0,c
   919  00118C  D007               	goto	l206
   920                           
   921                           ;doprnt.c: 1382: width -= c;
   922  00118E  501D               	movf	printf@c,w,c
   923  001190  5E1B               	subwf	printf@width,f,c
   924  001192  0E00               	movlw	0
   925  001194  BE1D               	btfsc	printf@c,7,c
   926  001196  0EFF               	movlw	255
   927  001198  5A1C               	subwfb	printf@width+1,f,c
   928  00119A  D004               	goto	l207
   929  00119C                     l206:
   930                           
   931                           ;doprnt.c: 1383: else
   932                           ;doprnt.c: 1384: width = 0;
   933  00119C  0E00               	movlw	0
   934  00119E  6E1C               	movwf	printf@width+1,c
   935  0011A0  0E00               	movlw	0
   936  0011A2  6E1B               	movwf	printf@width,c
   937  0011A4                     l207:
   938                           
   939                           ;doprnt.c: 1387: if(flag & 0x04) {
   940  0011A4  A417               	btfss	printf@flag,2,c
   941  0011A6  D00B               	goto	l208
   942  0011A8                     
   943                           ;doprnt.c: 1415: if(width)
   944  0011A8  501B               	movf	printf@width,w,c
   945  0011AA  101C               	iorwf	printf@width+1,w,c
   946  0011AC  B4D8               	btfsc	status,2,c
   947  0011AE  D015               	goto	u590
   948                           
   949                           ;doprnt.c: 1417: (putch('0') );
   950                           
   951                           ;doprnt.c: 1416: do
   952  0011B0  0E30               	movlw	48
   953  0011B2  ECE4  F00A         	call	_putch
   954                           
   955                           ;doprnt.c: 1418: while(--width);
   956  0011B6  061B               	decf	printf@width,f,c
   957  0011B8  A0D8               	btfss	status,0,c
   958  0011BA  061C               	decf	printf@width+1,f,c
   959  0011BC  D7F5               	goto	L1
   960  0011BE                     l208:
   961                           
   962                           ;doprnt.c: 1422: {
   963                           ;doprnt.c: 1424: if(width
   964                           ;doprnt.c: 1428: )
   965  0011BE  501B               	movf	printf@width,w,c
   966  0011C0  101C               	iorwf	printf@width+1,w,c
   967  0011C2  B4D8               	btfsc	status,2,c
   968  0011C4  D00A               	goto	u590
   969  0011C6                     u580:
   970                           
   971                           ;doprnt.c: 1430: (putch(' ') );
   972                           
   973                           ;doprnt.c: 1429: do
   974  0011C6  0E20               	movlw	32
   975  0011C8  ECE4  F00A         	call	_putch
   976                           
   977                           ;doprnt.c: 1431: while(--width);
   978  0011CC  061B               	decf	printf@width,f,c
   979  0011CE  A0D8               	btfss	status,0,c
   980  0011D0  061C               	decf	printf@width+1,f,c
   981  0011D2  501B               	movf	printf@width,w,c
   982  0011D4  101C               	iorwf	printf@width+1,w,c
   983  0011D6  A4D8               	btfss	status,2,c
   984  0011D8  D7F6               	goto	u580
   985  0011DA                     u590:
   986                           
   987                           ;doprnt.c: 1469: }
   988                           ;doprnt.c: 1472: prec = c;
   989  0011DA  C01D  F01A         	movff	printf@c,printf@prec
   990                           
   991                           ;doprnt.c: 1474: while(prec--) {
   992  0011DE  D025               	goto	l216
   993  0011E0                     
   994                           ;doprnt.c: 1478: {
   995                           ;doprnt.c: 1499: {
   996                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
   997  0011E0  C018  F001         	movff	printf@val,___lwdiv@dividend
   998  0011E4  C019  F002         	movff	printf@val+1,___lwdiv@dividend+1
   999  0011E8  501A               	movf	printf@prec,w,c
  1000  0011EA  0D02               	mullw	2
  1001  0011EC  0E12               	movlw	low _hexpowers
  1002  0011EE  24F3               	addwf	prodl,w,c
  1003  0011F0  6EF6               	movwf	tblptrl,c
  1004  0011F2  0E10               	movlw	high _hexpowers
  1005  0011F4  20F4               	addwfc	prodh,w,c
  1006  0011F6  6EF7               	movwf	tblptrh,c
  1007  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  1008  0011F8                     	endif
  1009  0011F8  0009               	tblrd		*+
  1010  0011FA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1011  0011FE  000A               	tblrd		*-
  1012  001200  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1013  001204  EC61  F00A         	call	___lwdiv	;wreg free
  1014  001208  5001               	movf	?___lwdiv,w,c
  1015  00120A  0B0F               	andlw	15
  1016  00120C  6E16               	movwf	printf@idx,c
  1017                           
  1018                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1019  00120E  5016               	movf	printf@idx,w,c
  1020  001210  0D01               	mullw	1
  1021  001212  0E27               	movlw	low STR_3
  1022  001214  24F3               	addwf	prodl,w,c
  1023  001216  6EF6               	movwf	tblptrl,c
  1024  001218  0E10               	movlw	high STR_3
  1025  00121A  20F4               	addwfc	prodh,w,c
  1026  00121C  6EF7               	movwf	tblptrh,c
  1027  00121E                     	if	0	;There are less than 3 active tblptr bytes
  1028  00121E                     	endif
  1029  00121E  0008               	tblrd		*
  1030  001220  CFF5 F01D          	movff	tablat,printf@c
  1031                           
  1032                           ;doprnt.c: 1508: }
  1033                           ;doprnt.c: 1523: }
  1034                           ;doprnt.c: 1524: (putch(c) );
  1035  001224  501D               	movf	printf@c,w,c
  1036  001226  ECE4  F00A         	call	_putch
  1037  00122A                     l216:
  1038  00122A  061A               	decf	printf@prec,f,c
  1039  00122C  281A               	incf	printf@prec,w,c
  1040  00122E  A4D8               	btfss	status,2,c
  1041  001230  D7D7               	goto	l217
  1042  001232                     u600:
  1043  001232  C008  FFF6         	movff	printf@f,tblptrl
  1044  001236  C009  FFF7         	movff	printf@f+1,tblptrh
  1045  00123A  4A08               	infsnz	printf@f,f,c
  1046  00123C  2A09               	incf	printf@f+1,f,c
  1047  00123E                     	if	0	;tblptru may be non-zero
  1048  00123E                     	endif
  1049  00123E                     	if	0	;tblptru may be non-zero
  1050  00123E                     	endif
  1051  00123E  0008               	tblrd		*
  1052  001240  CFF5 F01D          	movff	tablat,printf@c
  1053  001244  501D               	movf	printf@c,w,c
  1054  001246  B4D8               	btfsc	status,2,c
  1055  001248  0012               	return	
  1056  00124A  D70B               	goto	l186
  1057  00124C                     __end_of_printf:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           wreg	equ	0xFE8
  1067                           indf2	equ	0xFDF
  1068                           postinc2	equ	0xFDE
  1069                           postdec2	equ	0xFDD
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function _putch *****************
  1075 ;; Defined at:
  1076 ;;		line 24 in file "lcd.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  data            1    wreg     unsigned char 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  data            1    2[COMRAM] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;Total ram usage:        1 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    1
  1097 ;; This function calls:
  1098 ;;		_lcdNibble
  1099 ;; This function is called by:
  1100 ;;		_printf
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text2
  1105  0015C8                     __ptext2:
  1106                           	opt stack 0
  1107  0015C8                     _putch:
  1108                           	opt stack 28
  1109                           
  1110                           ;incstack = 0
  1111                           ;putch@data stored from wreg
  1112  0015C8  6E03               	movwf	putch@data,c
  1113                           
  1114                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1115  0015CA  848C               	bsf	3980,2,c	;volatile
  1116                           
  1117                           ;lcd.c: 33: lcdNibble(data);
  1118  0015CC  5003               	movf	putch@data,w,c
  1119  0015CE  ECF4  F009         	call	_lcdNibble
  1120                           
  1121                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1122  0015D2  0EC8               	movlw	200
  1123  0015D4                     u687:
  1124  0015D4  D000               	nop2	
  1125  0015D6  2EE8               	decfsz	wreg,f,c
  1126  0015D8  D7FD               	bra	u687
  1127  0015DA  0012               	return		;funcret
  1128  0015DC                     __end_of_putch:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           prodh	equ	0xFF4
  1135                           prodl	equ	0xFF3
  1136                           intcon	equ	0xFF2
  1137                           wreg	equ	0xFE8
  1138                           indf2	equ	0xFDF
  1139                           postinc2	equ	0xFDE
  1140                           postdec2	equ	0xFDD
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function _isdigit *****************
  1146 ;; Defined at:
  1147 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  c               1    wreg     unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  c               1    2[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;		None               void
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;Total ram usage:        3 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_printf
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text3
  1175  0015AA                     __ptext3:
  1176                           	opt stack 0
  1177  0015AA                     _isdigit:
  1178                           	opt stack 29
  1179                           
  1180                           ;incstack = 0
  1181                           ;isdigit@c stored from wreg
  1182  0015AA  6E03               	movwf	isdigit@c,c
  1183  0015AC  0E00               	movlw	0
  1184  0015AE  6E02               	movwf	_isdigit$642,c
  1185  0015B0  0E3A               	movlw	58
  1186  0015B2  6003               	cpfslt	isdigit@c,c
  1187  0015B4  D005               	goto	l550
  1188  0015B6  0E2F               	movlw	47
  1189  0015B8  6403               	cpfsgt	isdigit@c,c
  1190  0015BA  D002               	goto	l550
  1191  0015BC  0E01               	movlw	1
  1192  0015BE  6E02               	movwf	_isdigit$642,c
  1193  0015C0                     l550:
  1194  0015C0  C002  F001         	movff	_isdigit$642,??_isdigit
  1195  0015C4  3001               	rrcf	??_isdigit,w,c
  1196  0015C6  0012               	return	
  1197  0015C8                     __end_of_isdigit:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           prodh	equ	0xFF4
  1204                           prodl	equ	0xFF3
  1205                           intcon	equ	0xFF2
  1206                           wreg	equ	0xFE8
  1207                           indf2	equ	0xFDF
  1208                           postinc2	equ	0xFDE
  1209                           postdec2	equ	0xFDD
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8
  1213                           
  1214 ;; *************** function ___wmul *****************
  1215 ;; Defined at:
  1216 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  multiplier      2    0[COMRAM] unsigned int 
  1219 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  product         2    4[COMRAM] unsigned int 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  2    0[COMRAM] unsigned int 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0, prodl, prodh
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1234 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1235 ;;Total ram usage:        6 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_printf
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text4
  1245  001560                     __ptext4:
  1246                           	opt stack 0
  1247  001560                     ___wmul:
  1248                           	opt stack 29
  1249                           
  1250                           ;incstack = 0
  1251  001560  5001               	movf	___wmul@multiplier,w,c
  1252  001562  0203               	mulwf	___wmul@multiplicand,c
  1253  001564  CFF3 F005          	movff	prodl,___wmul@product
  1254  001568  CFF4 F006          	movff	prodh,___wmul@product+1
  1255  00156C  5001               	movf	___wmul@multiplier,w,c
  1256  00156E  0204               	mulwf	___wmul@multiplicand+1,c
  1257  001570  50F3               	movf	prodl,w,c
  1258  001572  2606               	addwf	___wmul@product+1,f,c
  1259  001574  5002               	movf	___wmul@multiplier+1,w,c
  1260  001576  0203               	mulwf	___wmul@multiplicand,c
  1261  001578  50F3               	movf	prodl,w,c
  1262  00157A  2606               	addwf	___wmul@product+1,f,c
  1263  00157C  C005  F001         	movff	___wmul@product,?___wmul
  1264  001580  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1265  001584  0012               	return	
  1266  001586                     __end_of___wmul:
  1267                           	opt stack 0
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           prodh	equ	0xFF4
  1273                           prodl	equ	0xFF3
  1274                           intcon	equ	0xFF2
  1275                           wreg	equ	0xFE8
  1276                           indf2	equ	0xFDF
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283 ;; *************** function ___lwdiv *****************
  1284 ;; Defined at:
  1285 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  dividend        2    0[COMRAM] unsigned int 
  1288 ;;  divisor         2    2[COMRAM] unsigned int 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  quotient        2    4[COMRAM] unsigned int 
  1291 ;;  counter         1    6[COMRAM] unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2    0[COMRAM] unsigned int 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;Total ram usage:        7 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_printf
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text5
  1315  0014C2                     __ptext5:
  1316                           	opt stack 0
  1317  0014C2                     ___lwdiv:
  1318                           	opt stack 29
  1319                           
  1320                           ;incstack = 0
  1321  0014C2  0E00               	movlw	0
  1322  0014C4  6E06               	movwf	___lwdiv@quotient+1,c
  1323  0014C6  0E00               	movlw	0
  1324  0014C8  6E05               	movwf	___lwdiv@quotient,c
  1325  0014CA  5003               	movf	___lwdiv@divisor,w,c
  1326  0014CC  1004               	iorwf	___lwdiv@divisor+1,w,c
  1327  0014CE  B4D8               	btfsc	status,2,c
  1328  0014D0  D01C               	goto	l634
  1329  0014D2  0E01               	movlw	1
  1330  0014D4  6E07               	movwf	___lwdiv@counter,c
  1331  0014D6  D004               	goto	l629
  1332  0014D8  90D8               	bcf	status,0,c
  1333  0014DA  3603               	rlcf	___lwdiv@divisor,f,c
  1334  0014DC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1335  0014DE  2A07               	incf	___lwdiv@counter,f,c
  1336  0014E0                     l629:
  1337  0014E0  AE04               	btfss	___lwdiv@divisor+1,7,c
  1338  0014E2  D7FA               	goto	l630
  1339  0014E4                     u450:
  1340  0014E4  90D8               	bcf	status,0,c
  1341  0014E6  3605               	rlcf	___lwdiv@quotient,f,c
  1342  0014E8  3606               	rlcf	___lwdiv@quotient+1,f,c
  1343  0014EA  5003               	movf	___lwdiv@divisor,w,c
  1344  0014EC  5C01               	subwf	___lwdiv@dividend,w,c
  1345  0014EE  5004               	movf	___lwdiv@divisor+1,w,c
  1346  0014F0  5802               	subwfb	___lwdiv@dividend+1,w,c
  1347  0014F2  A0D8               	btfss	status,0,c
  1348  0014F4  D005               	goto	l633
  1349  0014F6  5003               	movf	___lwdiv@divisor,w,c
  1350  0014F8  5E01               	subwf	___lwdiv@dividend,f,c
  1351  0014FA  5004               	movf	___lwdiv@divisor+1,w,c
  1352  0014FC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1353  0014FE  8005               	bsf	___lwdiv@quotient,0,c
  1354  001500                     l633:
  1355  001500  90D8               	bcf	status,0,c
  1356  001502  3204               	rrcf	___lwdiv@divisor+1,f,c
  1357  001504  3203               	rrcf	___lwdiv@divisor,f,c
  1358  001506  2E07               	decfsz	___lwdiv@counter,f,c
  1359  001508  D7ED               	goto	u450
  1360  00150A                     l634:
  1361  00150A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1362  00150E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1363  001512  0012               	return		;funcret
  1364  001514                     __end_of___lwdiv:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodh	equ	0xFF4
  1371                           prodl	equ	0xFF3
  1372                           intcon	equ	0xFF2
  1373                           wreg	equ	0xFE8
  1374                           indf2	equ	0xFDF
  1375                           postinc2	equ	0xFDE
  1376                           postdec2	equ	0xFDD
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _initLCD *****************
  1382 ;; Defined at:
  1383 ;;		line 60 in file "lcd.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;Total ram usage:        1 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    2
  1404 ;; This function calls:
  1405 ;;		_lcdInst
  1406 ;; This function is called by:
  1407 ;;		_main
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text6
  1412  001514                     __ptext6:
  1413                           	opt stack 0
  1414  001514                     _initLCD:
  1415                           	opt stack 28
  1416                           
  1417                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1418                           
  1419                           ;incstack = 0
  1420  001514  0EC3               	movlw	195
  1421  001516  6E04               	movwf	??_initLCD& (0+255),c
  1422  001518  0ECD               	movlw	205
  1423  00151A                     u697:
  1424  00151A  2EE8               	decfsz	wreg,f,c
  1425  00151C  D7FE               	bra	u697
  1426  00151E  2E04               	decfsz	??_initLCD& (0+255),f,c
  1427  001520  D7FC               	bra	u697
  1428  001522  F000               	nop	
  1429                           
  1430                           ;lcd.c: 69: lcdInst(0b00110011);
  1431  001524  0E33               	movlw	51
  1432  001526  ECEE  F00A         	call	_lcdInst
  1433                           
  1434                           ;lcd.c: 70: lcdInst(0b00110010);
  1435  00152A  0E32               	movlw	50
  1436  00152C  ECEE  F00A         	call	_lcdInst
  1437                           
  1438                           ;lcd.c: 71: lcdInst(0b00101000);
  1439  001530  0E28               	movlw	40
  1440  001532  ECEE  F00A         	call	_lcdInst
  1441                           
  1442                           ;lcd.c: 72: lcdInst(0b00001111);
  1443  001536  0E0F               	movlw	15
  1444  001538  ECEE  F00A         	call	_lcdInst
  1445                           
  1446                           ;lcd.c: 73: lcdInst(0b00000110);
  1447  00153C  0E06               	movlw	6
  1448  00153E  ECEE  F00A         	call	_lcdInst
  1449                           
  1450                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1451  001542  0E01               	movlw	1
  1452  001544  ECEE  F00A         	call	_lcdInst
  1453  001548  0EC3               	movlw	195
  1454  00154A  6E04               	movwf	??_initLCD& (0+255),c
  1455  00154C  0ECD               	movlw	205
  1456  00154E                     u707:
  1457  00154E  2EE8               	decfsz	wreg,f,c
  1458  001550  D7FE               	bra	u707
  1459  001552  2E04               	decfsz	??_initLCD& (0+255),f,c
  1460  001554  D7FC               	bra	u707
  1461  001556  F000               	nop	
  1462                           
  1463                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1464  001558  0E0F               	movlw	15
  1465  00155A  ECEE  F00A         	call	_lcdInst
  1466  00155E  0012               	return		;funcret
  1467  001560                     __end_of_initLCD:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           prodh	equ	0xFF4
  1474                           prodl	equ	0xFF3
  1475                           intcon	equ	0xFF2
  1476                           wreg	equ	0xFE8
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           postdec2	equ	0xFDD
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _lcdInst *****************
  1485 ;; Defined at:
  1486 ;;		line 11 in file "lcd.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  data            1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  data            1    2[COMRAM] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;Total ram usage:        1 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    1
  1507 ;; This function calls:
  1508 ;;		_lcdNibble
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;;		_initLCD
  1512 ;;		_lcd_set_cursor
  1513 ;;		_lcd_shift_cursor
  1514 ;;		_lcd_shift_display
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text7
  1519  0015DC                     __ptext7:
  1520                           	opt stack 0
  1521  0015DC                     _lcdInst:
  1522                           	opt stack 29
  1523                           
  1524                           ;incstack = 0
  1525                           ;lcdInst@data stored from wreg
  1526  0015DC  6E03               	movwf	lcdInst@data,c
  1527                           
  1528                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1529  0015DE  948C               	bcf	3980,2,c	;volatile
  1530                           
  1531                           ;lcd.c: 20: lcdNibble(data);
  1532  0015E0  5003               	movf	lcdInst@data,w,c
  1533  0015E2  ECF4  F009         	call	_lcdNibble
  1534                           
  1535                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1536  0015E6  0EC8               	movlw	200
  1537  0015E8                     u717:
  1538  0015E8  D000               	nop2	
  1539  0015EA  2EE8               	decfsz	wreg,f,c
  1540  0015EC  D7FD               	bra	u717
  1541  0015EE  0012               	return		;funcret
  1542  0015F0                     __end_of_lcdInst:
  1543                           	opt stack 0
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           prodh	equ	0xFF4
  1549                           prodl	equ	0xFF3
  1550                           intcon	equ	0xFF2
  1551                           wreg	equ	0xFE8
  1552                           indf2	equ	0xFDF
  1553                           postinc2	equ	0xFDE
  1554                           postdec2	equ	0xFDD
  1555                           fsr2h	equ	0xFDA
  1556                           fsr2l	equ	0xFD9
  1557                           status	equ	0xFD8
  1558                           
  1559 ;; *************** function _lcdNibble *****************
  1560 ;; Defined at:
  1561 ;;		line 37 in file "lcd.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  data            1    wreg     unsigned char 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  data            1    1[COMRAM] unsigned char 
  1566 ;;  temp            1    0[COMRAM] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;Total ram usage:        2 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_lcdInst
  1586 ;;		_putch
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text8
  1591  0013E8                     __ptext8:
  1592                           	opt stack 0
  1593  0013E8                     _lcdNibble:
  1594                           	opt stack 28
  1595                           
  1596                           ;incstack = 0
  1597                           ;lcdNibble@data stored from wreg
  1598  0013E8  6E02               	movwf	lcdNibble@data,c
  1599                           
  1600                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1601  0013EA  5002               	movf	lcdNibble@data,w,c
  1602  0013EC  0BF0               	andlw	240
  1603  0013EE  6E01               	movwf	lcdNibble@temp,c
  1604                           
  1605                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1606  0013F0  508C               	movf	3980,w,c	;volatile
  1607  0013F2  0B0F               	andlw	15
  1608  0013F4  6E8C               	movwf	3980,c	;volatile
  1609                           
  1610                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1611  0013F6  5001               	movf	lcdNibble@temp,w,c
  1612  0013F8  108C               	iorwf	3980,w,c	;volatile
  1613  0013FA  6E8C               	movwf	3980,c	;volatile
  1614                           
  1615                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1616  0013FC  0E00               	movlw	0
  1617  0013FE  BEF2               	btfsc	intcon,7,c	;volatile
  1618  001400  0E01               	movlw	1
  1619  001402  6E28               	movwf	lcd@LCDinterruptState,c
  1620  001404  9EF2               	bcf	intcon,7,c	;volatile
  1621  001406  868C               	bsf	3980,3,c	;volatile
  1622  001408  0E53               	movlw	83
  1623  00140A                     u727:
  1624  00140A  2EE8               	decfsz	wreg,f,c
  1625  00140C  D7FE               	bra	u727
  1626  00140E  F000               	nop	
  1627  001410  968C               	bcf	3980,3,c	;volatile
  1628  001412  0EC8               	movlw	200
  1629  001414                     u737:
  1630  001414  D000               	nop2	
  1631  001416  2EE8               	decfsz	wreg,f,c
  1632  001418  D7FD               	bra	u737
  1633  00141A  B028               	btfsc	lcd@LCDinterruptState,0,c
  1634  00141C  D002               	bra	u15
  1635  00141E  9EF2               	bcf	intcon,7,c	;volatile
  1636  001420  D001               	bra	u16
  1637  001422                     u15:
  1638  001422  8EF2               	bsf	intcon,7,c	;volatile
  1639  001424                     u16:
  1640                           
  1641                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1642  001424  3802               	swapf	lcdNibble@data,w,c
  1643  001426  0BF0               	andlw	240
  1644  001428  6E02               	movwf	lcdNibble@data,c
  1645                           
  1646                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1647  00142A  5002               	movf	lcdNibble@data,w,c
  1648  00142C  0BF0               	andlw	240
  1649  00142E  6E01               	movwf	lcdNibble@temp,c
  1650                           
  1651                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1652  001430  508C               	movf	3980,w,c	;volatile
  1653  001432  0B0F               	andlw	15
  1654  001434  6E8C               	movwf	3980,c	;volatile
  1655                           
  1656                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1657  001436  5001               	movf	lcdNibble@temp,w,c
  1658  001438  108C               	iorwf	3980,w,c	;volatile
  1659  00143A  6E8C               	movwf	3980,c	;volatile
  1660                           
  1661                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1662  00143C  0E00               	movlw	0
  1663  00143E  BEF2               	btfsc	intcon,7,c	;volatile
  1664  001440  0E01               	movlw	1
  1665  001442  6E28               	movwf	lcd@LCDinterruptState,c
  1666  001444  9EF2               	bcf	intcon,7,c	;volatile
  1667  001446  868C               	bsf	3980,3,c	;volatile
  1668  001448  0E53               	movlw	83
  1669  00144A                     u747:
  1670  00144A  2EE8               	decfsz	wreg,f,c
  1671  00144C  D7FE               	bra	u747
  1672  00144E  F000               	nop	
  1673  001450  968C               	bcf	3980,3,c	;volatile
  1674  001452  0EC8               	movlw	200
  1675  001454                     u757:
  1676  001454  D000               	nop2	
  1677  001456  2EE8               	decfsz	wreg,f,c
  1678  001458  D7FD               	bra	u757
  1679  00145A  B028               	btfsc	lcd@LCDinterruptState,0,c
  1680  00145C  D002               	bra	u25
  1681  00145E  9EF2               	bcf	intcon,7,c	;volatile
  1682  001460  D001               	bra	u26
  1683  001462                     u25:
  1684  001462  8EF2               	bsf	intcon,7,c	;volatile
  1685  001464                     u26:
  1686  001464  0012               	return		;funcret
  1687  001466                     __end_of_lcdNibble:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           prodh	equ	0xFF4
  1694                           prodl	equ	0xFF3
  1695                           intcon	equ	0xFF2
  1696                           wreg	equ	0xFE8
  1697                           indf2	equ	0xFDF
  1698                           postinc2	equ	0xFDE
  1699                           postdec2	equ	0xFDD
  1700                           fsr2h	equ	0xFDA
  1701                           fsr2l	equ	0xFD9
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _I2C_Master_Write *****************
  1705 ;; Defined at:
  1706 ;;		line 108 in file "I2C.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;Total ram usage:        2 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    1
  1727 ;; This function calls:
  1728 ;;		_I2C_Master_Wait
  1729 ;; This function is called by:
  1730 ;;		_main
  1731 ;;		_RTC_setTime
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text9
  1736  001610                     __ptext9:
  1737                           	opt stack 0
  1738  001610                     _I2C_Master_Write:
  1739                           	opt stack 29
  1740                           
  1741                           ;I2C.c: 116: I2C_Master_Wait();
  1742                           
  1743                           ;incstack = 0
  1744  001610  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1745                           
  1746                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1747  001614  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1748  001618  0012               	return		;funcret
  1749  00161A                     __end_of_I2C_Master_Write:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           intcon	equ	0xFF2
  1758                           wreg	equ	0xFE8
  1759                           indf2	equ	0xFDF
  1760                           postinc2	equ	0xFDE
  1761                           postdec2	equ	0xFDD
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _I2C_Master_Stop *****************
  1767 ;; Defined at:
  1768 ;;		line 95 in file "I2C.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, status,2, status,0, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;Total ram usage:        0 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    1
  1789 ;; This function calls:
  1790 ;;		_I2C_Master_Wait
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;;		_RTC_setTime
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text10
  1798  00161A                     __ptext10:
  1799                           	opt stack 0
  1800  00161A                     _I2C_Master_Stop:
  1801                           	opt stack 29
  1802                           
  1803                           ;I2C.c: 104: I2C_Master_Wait();
  1804                           
  1805                           ;incstack = 0
  1806  00161A  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1807                           
  1808                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1809  00161E  84C5               	bsf	4037,2,c	;volatile
  1810  001620  0012               	return		;funcret
  1811  001622                     __end_of_I2C_Master_Stop:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           wreg	equ	0xFE8
  1821                           indf2	equ	0xFDF
  1822                           postinc2	equ	0xFDE
  1823                           postdec2	equ	0xFDD
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _I2C_Master_Start *****************
  1829 ;; Defined at:
  1830 ;;		line 69 in file "I2C.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    1
  1851 ;; This function calls:
  1852 ;;		_I2C_Master_Wait
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;;		_RTC_setTime
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text11
  1860  001622                     __ptext11:
  1861                           	opt stack 0
  1862  001622                     _I2C_Master_Start:
  1863                           	opt stack 29
  1864                           
  1865                           ;I2C.c: 78: I2C_Master_Wait();
  1866                           
  1867                           ;incstack = 0
  1868  001622  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1869                           
  1870                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1871  001626  80C5               	bsf	4037,0,c	;volatile
  1872  001628  0012               	return		;funcret
  1873  00162A                     __end_of_I2C_Master_Start:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           prodh	equ	0xFF4
  1880                           prodl	equ	0xFF3
  1881                           intcon	equ	0xFF2
  1882                           wreg	equ	0xFE8
  1883                           indf2	equ	0xFDF
  1884                           postinc2	equ	0xFDE
  1885                           postdec2	equ	0xFDD
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _I2C_Master_Read *****************
  1891 ;; Defined at:
  1892 ;;		line 120 in file "I2C.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  ackBit          1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  ackBit          1    1[COMRAM] unsigned char 
  1897 ;;  receivedByte    1    2[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      unsigned char 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;Total ram usage:        2 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    1
  1914 ;; This function calls:
  1915 ;;		_I2C_Master_Wait
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text12
  1922  001586                     __ptext12:
  1923                           	opt stack 0
  1924  001586                     _I2C_Master_Read:
  1925                           	opt stack 29
  1926                           
  1927                           ;incstack = 0
  1928                           ;I2C_Master_Read@ackBit stored from wreg
  1929  001586  6E02               	movwf	I2C_Master_Read@ackBit,c
  1930                           
  1931                           ;I2C.c: 130: unsigned char receivedByte;
  1932                           ;I2C.c: 132: I2C_Master_Wait();
  1933  001588  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1934                           
  1935                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  1936  00158C  86C5               	bsf	4037,3,c	;volatile
  1937                           
  1938                           ;I2C.c: 135: I2C_Master_Wait();
  1939  00158E  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1940                           
  1941                           ;I2C.c: 136: receivedByte = SSPBUF;
  1942  001592  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  1943                           
  1944                           ;I2C.c: 138: I2C_Master_Wait();
  1945  001596  ECF8  F00A         	call	_I2C_Master_Wait	;wreg free
  1946                           
  1947                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  1948  00159A  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  1949  00159C  D002               	bra	u145
  1950  00159E  9AC5               	bcf	4037,5,c	;volatile
  1951  0015A0  D001               	bra	u146
  1952  0015A2                     u145:
  1953  0015A2  8AC5               	bsf	4037,5,c	;volatile
  1954  0015A4                     u146:
  1955                           
  1956                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  1957  0015A4  88C5               	bsf	4037,4,c	;volatile
  1958                           
  1959                           ;I2C.c: 142: return receivedByte;
  1960  0015A6  5003               	movf	I2C_Master_Read@receivedByte,w,c
  1961  0015A8  0012               	return	
  1962  0015AA                     __end_of_I2C_Master_Read:
  1963                           	opt stack 0
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           prodh	equ	0xFF4
  1969                           prodl	equ	0xFF3
  1970                           intcon	equ	0xFF2
  1971                           wreg	equ	0xFE8
  1972                           indf2	equ	0xFDF
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _I2C_Master_Wait *****************
  1980 ;; Defined at:
  1981 ;;		line 51 in file "I2C.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, status,0
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;Total ram usage:        1 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_I2C_Master_Start
  2005 ;;		_I2C_Master_Stop
  2006 ;;		_I2C_Master_Write
  2007 ;;		_I2C_Master_Read
  2008 ;;		_I2C_Master_RepeatedStart
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text13
  2013  0015F0                     __ptext13:
  2014                           	opt stack 0
  2015  0015F0                     _I2C_Master_Wait:
  2016                           	opt stack 29
  2017                           
  2018                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2019                           
  2020                           ;incstack = 0
  2021  0015F0  B4C7               	btfsc	4039,2,c	;volatile
  2022  0015F2  D7FE               	goto	_I2C_Master_Wait
  2023  0015F4  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2024  0015F8  0E1F               	movlw	31
  2025  0015FA  1601               	andwf	??_I2C_Master_Wait,f,c
  2026  0015FC  B4D8               	btfsc	status,2,c
  2027  0015FE  0012               	return	
  2028  001600  D7F7               	goto	_I2C_Master_Wait
  2029  001602                     __end_of_I2C_Master_Wait:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           prodh	equ	0xFF4
  2036                           prodl	equ	0xFF3
  2037                           intcon	equ	0xFF2
  2038                           wreg	equ	0xFE8
  2039                           indf2	equ	0xFDF
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _I2C_Master_Init *****************
  2047 ;; Defined at:
  2048 ;;		line 14 in file "I2C.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, status,0, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;Total ram usage:        8 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    1
  2069 ;; This function calls:
  2070 ;;		___lldiv
  2071 ;; This function is called by:
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text14
  2077  001466                     __ptext14:
  2078                           	opt stack 0
  2079  001466                     _I2C_Master_Init:
  2080                           	opt stack 29
  2081                           
  2082                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2083                           
  2084                           ;incstack = 0
  2085  001466  9AC6               	bcf	4038,5,c	;volatile
  2086                           
  2087                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2088  001468  8694               	bsf	3988,3,c	;volatile
  2089                           
  2090                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2091  00146A  8894               	bsf	3988,4,c	;volatile
  2092                           
  2093                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2094  00146C  0E80               	movlw	128
  2095  00146E  6EC7               	movwf	4039,c	;volatile
  2096                           
  2097                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2098  001470  0E28               	movlw	40
  2099  001472  6EC6               	movwf	4038,c	;volatile
  2100                           
  2101                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2102  001474  0E00               	movlw	0
  2103  001476  6EC5               	movwf	4037,c	;volatile
  2104                           
  2105                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2106  001478  0E00               	movlw	0
  2107  00147A  6E01               	movwf	___lldiv@dividend,c
  2108  00147C  0E5A               	movlw	90
  2109  00147E  6E02               	movwf	___lldiv@dividend+1,c
  2110  001480  0E62               	movlw	98
  2111  001482  6E03               	movwf	___lldiv@dividend+2,c
  2112  001484  0E02               	movlw	2
  2113  001486  6E04               	movwf	___lldiv@dividend+3,c
  2114  001488  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2115  00148C  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2116  001490  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2117  001494  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2118  001498  0E02               	movlw	2
  2119  00149A                     u475:
  2120  00149A  90D8               	bcf	status,0,c
  2121  00149C  3612               	rlcf	??_I2C_Master_Init,f,c
  2122  00149E  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2123  0014A0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2124  0014A2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2125  0014A4  2EE8               	decfsz	wreg,f,c
  2126  0014A6  D7F9               	goto	u475
  2127  0014A8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2128  0014AC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2129  0014B0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2130  0014B4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2131  0014B8  ECB3  F009         	call	___lldiv	;wreg free
  2132  0014BC  0401               	decf	?___lldiv,w,c
  2133  0014BE  6EC8               	movwf	4040,c	;volatile
  2134  0014C0  0012               	return		;funcret
  2135  0014C2                     __end_of_I2C_Master_Init:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           tblptrh	equ	0xFF7
  2139                           tblptrl	equ	0xFF6
  2140                           tablat	equ	0xFF5
  2141                           prodh	equ	0xFF4
  2142                           prodl	equ	0xFF3
  2143                           intcon	equ	0xFF2
  2144                           wreg	equ	0xFE8
  2145                           indf2	equ	0xFDF
  2146                           postinc2	equ	0xFDE
  2147                           postdec2	equ	0xFDD
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function ___lldiv *****************
  2153 ;; Defined at:
  2154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  dividend        4    0[COMRAM] unsigned long 
  2157 ;;  divisor         4    4[COMRAM] unsigned long 
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  quotient        4    8[COMRAM] unsigned long 
  2160 ;;  counter         1   12[COMRAM] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  4    0[COMRAM] unsigned long 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2170 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;Total ram usage:       13 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_I2C_Master_Init
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text15
  2184  001366                     __ptext15:
  2185                           	opt stack 0
  2186  001366                     ___lldiv:
  2187                           	opt stack 29
  2188                           
  2189                           ;incstack = 0
  2190  001366  0E00               	movlw	0
  2191  001368  6E09               	movwf	___lldiv@quotient,c
  2192  00136A  0E00               	movlw	0
  2193  00136C  6E0A               	movwf	___lldiv@quotient+1,c
  2194  00136E  0E00               	movlw	0
  2195  001370  6E0B               	movwf	___lldiv@quotient+2,c
  2196  001372  0E00               	movlw	0
  2197  001374  6E0C               	movwf	___lldiv@quotient+3,c
  2198  001376  5005               	movf	___lldiv@divisor,w,c
  2199  001378  1006               	iorwf	___lldiv@divisor+1,w,c
  2200  00137A  1007               	iorwf	___lldiv@divisor+2,w,c
  2201  00137C  1008               	iorwf	___lldiv@divisor+3,w,c
  2202  00137E  B4D8               	btfsc	status,2,c
  2203  001380  D02A               	goto	l581
  2204  001382  0E01               	movlw	1
  2205  001384  6E0D               	movwf	___lldiv@counter,c
  2206  001386  D006               	goto	l576
  2207  001388  90D8               	bcf	status,0,c
  2208  00138A  3605               	rlcf	___lldiv@divisor,f,c
  2209  00138C  3606               	rlcf	___lldiv@divisor+1,f,c
  2210  00138E  3607               	rlcf	___lldiv@divisor+2,f,c
  2211  001390  3608               	rlcf	___lldiv@divisor+3,f,c
  2212  001392  2A0D               	incf	___lldiv@counter,f,c
  2213  001394                     l576:
  2214  001394  AE08               	btfss	___lldiv@divisor+3,7,c
  2215  001396  D7F8               	goto	l577
  2216  001398                     u420:
  2217  001398  90D8               	bcf	status,0,c
  2218  00139A  3609               	rlcf	___lldiv@quotient,f,c
  2219  00139C  360A               	rlcf	___lldiv@quotient+1,f,c
  2220  00139E  360B               	rlcf	___lldiv@quotient+2,f,c
  2221  0013A0  360C               	rlcf	___lldiv@quotient+3,f,c
  2222  0013A2  5005               	movf	___lldiv@divisor,w,c
  2223  0013A4  5C01               	subwf	___lldiv@dividend,w,c
  2224  0013A6  5006               	movf	___lldiv@divisor+1,w,c
  2225  0013A8  5802               	subwfb	___lldiv@dividend+1,w,c
  2226  0013AA  5007               	movf	___lldiv@divisor+2,w,c
  2227  0013AC  5803               	subwfb	___lldiv@dividend+2,w,c
  2228  0013AE  5008               	movf	___lldiv@divisor+3,w,c
  2229  0013B0  5804               	subwfb	___lldiv@dividend+3,w,c
  2230  0013B2  A0D8               	btfss	status,0,c
  2231  0013B4  D009               	goto	l580
  2232  0013B6  5005               	movf	___lldiv@divisor,w,c
  2233  0013B8  5E01               	subwf	___lldiv@dividend,f,c
  2234  0013BA  5006               	movf	___lldiv@divisor+1,w,c
  2235  0013BC  5A02               	subwfb	___lldiv@dividend+1,f,c
  2236  0013BE  5007               	movf	___lldiv@divisor+2,w,c
  2237  0013C0  5A03               	subwfb	___lldiv@dividend+2,f,c
  2238  0013C2  5008               	movf	___lldiv@divisor+3,w,c
  2239  0013C4  5A04               	subwfb	___lldiv@dividend+3,f,c
  2240  0013C6  8009               	bsf	___lldiv@quotient,0,c
  2241  0013C8                     l580:
  2242  0013C8  90D8               	bcf	status,0,c
  2243  0013CA  3208               	rrcf	___lldiv@divisor+3,f,c
  2244  0013CC  3207               	rrcf	___lldiv@divisor+2,f,c
  2245  0013CE  3206               	rrcf	___lldiv@divisor+1,f,c
  2246  0013D0  3205               	rrcf	___lldiv@divisor,f,c
  2247  0013D2  2E0D               	decfsz	___lldiv@counter,f,c
  2248  0013D4  D7E1               	goto	u420
  2249  0013D6                     l581:
  2250  0013D6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2251  0013DA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2252  0013DE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2253  0013E2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2254  0013E6  0012               	return		;funcret
  2255  0013E8                     __end_of___lldiv:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           intcon	equ	0xFF2
  2264                           wreg	equ	0xFE8
  2265                           indf2	equ	0xFDF
  2266                           postinc2	equ	0xFDE
  2267                           postdec2	equ	0xFDD
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           prodh	equ	0xFF4
  2276                           prodl	equ	0xFF3
  2277                           intcon	equ	0xFF2
  2278                           wreg	equ	0xFE8
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286                           	psect	rparam
  2287  0000                     tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon	equ	0xFF2
  2294                           wreg	equ	0xFE8
  2295                           indf2	equ	0xFDF
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    38
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      41
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2924
                                             29 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    1571
                                              7 COMRAM    22    14      8
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      29       1       32.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      29      34        0.0%
DATA                 0      0      29       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 15 00:39:56 2017

                         l67 1292                           l68 12CE                           u15 1422  
                         u16 1424                           u25 1462                           u26 1464  
                __CFG_CPD$ON 000000          ___wmul@multiplicand 0003                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l206 119C                          l207 11A4  
                        l216 122A                          l208 11BE                          l217 11E0  
                        l190 1080                          l186 1062                          l195 10B4  
                        l187 1072                          l197 1110                          l189 1086  
                        l630 14D8                          l550 15C0                          l633 1500  
                        l634 150A                          l580 13C8                          l581 13D6  
                        l629 14E0                          l576 1394                          l577 1388  
               __CFG_CPB$OFF 000000                          u145 15A2                          u146 15A4  
                        u420 1398                          u600 1232                          u450 14E4  
                        u530 1178                          u630 12EA                          u475 149A  
                        u707 154E                          u580 11C6                          u717 15E8  
                        u590 11DA                          u727 140A                          u737 1414  
                        u747 144A                          u667 1302                          u757 1454  
                        u677 1358                          u687 15D4                          u697 151A  
                        prod 000FF3                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1363 12C6                         l1299 114C  
                       STR_1 1038                         STR_2 1047                         STR_3 1027  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _main 124C  
                       _keys 1001                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
               ___param_bank 000000             __end_of_LCD_LEFT 1022        I2C_Master_Read@ackBit 0002  
           ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 13E8  
            __end_of___lwdiv 1514                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 15F0  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 1560  
             __CFG_EBTRB$OFF 000000              __end_of_isdigit 15C8                        _putch 15C8  
                      main@i 0027                        tablat 000FF5            _LCDinterruptState 0029  
                      status 000FD8  I2C_Master_Read@receivedByte 0003               __CFG_PBADEN$ON 000000  
            __initialization 1602                 __end_of_main 1366                 __end_of_keys 1012  
             __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1023                       ??_main 001E  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       ?_putch 0001                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___wmul 1560  
             __CFG_STVREN$ON 000000                    ??___lldiv 0009                    ??___lwdiv 0005  
                  ??_lcdInst 0003                       _printf 1058                    ??_initLCD 0004  
                  ??_isdigit 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1606                ___rparam_used 000001         __end_of_happynewyear 1021  
             __pcstackCOMRAM 0001                __end_of_putch 15DC           __size_of_lcdNibble 007E  
                    ??_putch 0003                      ?___wmul 0001                      ?_printf 0008  
       lcd@LCDinterruptState 0028                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7            __end_of_lcdNibble 1466                      __Hparam 0000  
                    __Lparam 0000                      ___lldiv 1366              __size_of___wmul 0026  
                    ___lwdiv 14C2                 __psmallconst 1000                      __pcinit 1602  
                    __ramtop 1000                      _lcdInst 15DC                      __ptext0 124C  
                    __ptext1 1058                      __ptext2 15C8                      __ptext3 15AA  
                    __ptext4 1560                      __ptext5 14C2                      __ptext6 1514  
                    __ptext7 15DC                      __ptext8 13E8                      __ptext9 1610  
            __size_of_printf 01F4                      _initLCD 1514            __end_of_hexpowers 101A  
                    _isdigit 15AA                    _LCD_RIGHT 1022     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 1606        __end_of_LCD_SIZE_HORZ 1025        __end_of_LCD_SIZE_VERT 1024  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 001D  
                    printf@f 0008                      postdec2 000FDD                      postinc2 000FDE  
                  _TRISCbits 000F94                 _happynewyear 101A                  printf@width 001B  
             __end_of___wmul 1586               __end_of_printf 124C          start_initialization 1602  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001  
          ??_I2C_Master_Stop 0002                     ??___wmul 0005     I2C_Master_Init@clockFreq 000E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0010                  __pbssCOMRAM 0028  
           _I2C_Master_Start 1622             _I2C_Master_Write 1610             ___lwdiv@dividend 0001  
          __CFG_CCP2MX$PORTC 000000                    _lcdNibble 13E8                     ?___lldiv 0001  
                   ?___lwdiv 0001                     ?_lcdInst 0001                     ?_initLCD 0001  
                __smallconst 1000                     ?_isdigit 0001                    _hexpowers 1012  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 1021  
             ___wmul@product 0005                     _LATDbits 000F8C             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            ___wmul@multiplier 0001                lcdNibble@data 0002  
                 printf@flag 0017                lcdNibble@temp 0001                   printf@prec 001A  
             _LCD_HORZ_LIMIT 1026                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082             __size_of___lwdiv 0052  
                _isdigit$642 0002             __size_of_lcdInst 0014              _I2C_Master_Init 1466  
            _I2C_Master_Read 1586             __size_of_initLCD 004C              _I2C_Master_Wait 15F0  
            _I2C_Master_Stop 161A       __end_of_LCD_HORZ_LIMIT 1027             __size_of_isdigit 001E  
            ___lwdiv@divisor 0003              ___lwdiv@counter 0007                     __ptext10 161A  
                   __ptext11 1622                     __ptext12 1586                     __ptext13 15F0  
                   __ptext14 1466                     __ptext15 1366               _LCD_VERT_LIMIT 1025  
              __size_of_main 011A                  ??_lcdNibble 0001                    printf@idx 0016  
                  printf@val 0018                     main@time 0020  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 162A     __end_of_I2C_Master_Write 161A  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1026                     isdigit@c 0003  
              _LCD_SIZE_HORZ 1024                _LCD_SIZE_VERT 1023             ___lldiv@dividend 0001  
                   printf@ap 0014      __end_of_I2C_Master_Init 14C2      __end_of_I2C_Master_Read 15AA  
    __end_of_I2C_Master_Wait 1602      __end_of_I2C_Master_Stop 1622                  lcdInst@data 0003  
           ___lldiv@quotient 0009                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
