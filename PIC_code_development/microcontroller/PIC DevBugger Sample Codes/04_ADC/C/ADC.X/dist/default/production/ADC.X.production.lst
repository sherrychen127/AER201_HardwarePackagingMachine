

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 11:25:29 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4620 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     _hexpowers:
    61                           	opt stack 0
    62  001001  0001               	dw	1
    63  001003  0010               	dw	16
    64  001005  0100               	dw	256
    65  001007  1000               	dw	4096
    66  001009                     __end_of_hexpowers:
    67                           	opt stack 0
    68  001009                     _LCD_LEFT:
    69                           	opt stack 0
    70  001009  00                 	db	0
    71  00100A                     __end_of_LCD_LEFT:
    72                           	opt stack 0
    73  00100A                     _LCD_RIGHT:
    74                           	opt stack 0
    75  00100A  01                 	db	1
    76  00100B                     __end_of_LCD_RIGHT:
    77                           	opt stack 0
    78  00100B                     _LCD_SIZE_VERT:
    79                           	opt stack 0
    80  00100B  02                 	db	2
    81  00100C                     __end_of_LCD_SIZE_VERT:
    82                           	opt stack 0
    83  00100C                     _LCD_SIZE_HORZ:
    84                           	opt stack 0
    85  00100C  10                 	db	16
    86  00100D                     __end_of_LCD_SIZE_HORZ:
    87                           	opt stack 0
    88  00100D                     _LCD_VERT_LIMIT:
    89                           	opt stack 0
    90  00100D  02                 	db	2
    91  00100E                     __end_of_LCD_VERT_LIMIT:
    92                           	opt stack 0
    93  00100E                     _LCD_HORZ_LIMIT:
    94                           	opt stack 0
    95  00100E  28                 	db	40
    96  00100F                     __end_of_LCD_HORZ_LIMIT:
    97                           	opt stack 0
    98  0000                     _INTCONbits	set	4082
    99  0000                     _LATDbits	set	3980
   100  0000                     _ADRESL	set	4035
   101  0000                     _ADRESH	set	4036
   102  0000                     _ADCON0bits	set	4034
   103  0000                     _ADCON2bits	set	4032
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON0	set	4034
   106  0000                     _TRISE	set	3990
   107  0000                     _TRISD	set	3989
   108  0000                     _TRISC	set	3988
   109  0000                     _TRISB	set	3987
   110  0000                     _TRISA	set	3986
   111  0000                     _LATE	set	3981
   112  0000                     _LATD	set	3980
   113  0000                     _LATC	set	3979
   114  0000                     _LATB	set	3978
   115  0000                     _LATA	set	3977
   116  0000                     _OSCCON	set	4051
   117  0000                     _ADON	set	32272
   118  00100F                     STR_3:
   119  00100F  30                 	db	48	;'0'
   120  001010  31                 	db	49	;'1'
   121  001011  32                 	db	50	;'2'
   122  001012  33                 	db	51	;'3'
   123  001013  34                 	db	52	;'4'
   124  001014  35                 	db	53	;'5'
   125  001015  36                 	db	54	;'6'
   126  001016  37                 	db	55	;'7'
   127  001017  38                 	db	56	;'8'
   128  001018  39                 	db	57	;'9'
   129  001019  61                 	db	97	;'a'
   130  00101A  62                 	db	98	;'b'
   131  00101B  63                 	db	99	;'c'
   132  00101C  64                 	db	100	;'d'
   133  00101D  65                 	db	101	;'e'
   134  00101E  66                 	db	102	;'f'
   135  00101F  00                 	db	0
   136  001020                     STR_1:
   137  001020  52                 	db	82	;'R'
   138  001021  41                 	db	65	;'A'
   139  001022  32                 	db	50	;'2'
   140  001023  3A                 	db	58	;':'
   141  001024  20                 	db	32
   142  001025  25                 	db	37
   143  001026  2E                 	db	46
   144  001027  33                 	db	51	;'3'
   145  001028  78                 	db	120	;'x'
   146  001029  00                 	db	0
   147  00102A                     STR_2:
   148  00102A  52                 	db	82	;'R'
   149  00102B  41                 	db	65	;'A'
   150  00102C  33                 	db	51	;'3'
   151  00102D  3A                 	db	58	;':'
   152  00102E  20                 	db	32
   153  00102F  25                 	db	37
   154  001030  2E                 	db	46
   155  001031  33                 	db	51	;'3'
   156  001032  78                 	db	120	;'x'
   157  001033  00                 	db	0
   158                           
   159                           ; #config settings
   160  001034  00                 	db	0	; dummy byte at the end
   161  0000                     
   162                           	psect	cinit
   163  001400                     __pcinit:
   164                           	opt stack 0
   165  001400                     start_initialization:
   166                           	opt stack 0
   167  001400                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to COMRAM (2 bytes)
   171  001400  6A18               	clrf	(__pbssCOMRAM+1)& (0+255),c
   172  001402  6A17               	clrf	__pbssCOMRAM& (0+255),c
   173  001404                     end_of_initialization:
   174                           	opt stack 0
   175  001404                     __end_of__initialization:
   176                           	opt stack 0
   177  001404  0E00               	movlw	low (__Lmediumconst shr (0+16))
   178  001406  6EF8               	movwf	tblptru,c
   179  001408  0100               	movlb	0
   180  00140A  EFDB  F008         	goto	_main	;jump to C main() function
   181                           tblptru	equ	0xFF8
   182                           
   183                           	psect	bssCOMRAM
   184  000017                     __pbssCOMRAM:
   185                           	opt stack 0
   186  000017                     lcd@LCDinterruptState:
   187                           	opt stack 0
   188  000017                     	ds	1
   189  000018                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           
   192                           	psect	cstackCOMRAM
   193  000001                     __pcstackCOMRAM:
   194                           	opt stack 0
   195  000001                     ??_isdigit:
   196  000001                     ?_readADC:
   197                           	opt stack 0
   198  000001                     ?___lwdiv:
   199                           	opt stack 0
   200  000001                     lcdNibble@temp:
   201                           	opt stack 0
   202  000001                     ___lwdiv@dividend:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x0
   206  000001                     	ds	1
   207  000002                     lcdNibble@data:
   208                           	opt stack 0
   209  000002                     _isdigit$579:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x1
   213  000002                     	ds	1
   214  000003                     ??_readADC:
   215  000003                     lcdInst@data:
   216                           	opt stack 0
   217  000003                     putch@data:
   218                           	opt stack 0
   219  000003                     isdigit@c:
   220                           	opt stack 0
   221  000003                     ___lwdiv@divisor:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x2
   225  000003                     	ds	1
   226  000004                     ??_initLCD:
   227                           
   228                           ; 1 bytes @ 0x3
   229  000004                     	ds	1
   230  000005                     readADC@channel:
   231                           	opt stack 0
   232  000005                     ___lwdiv@quotient:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x4
   236  000005                     	ds	2
   237  000007                     ___lwdiv@counter:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x6
   241  000007                     	ds	1
   242  000008                     ?_printf:
   243                           	opt stack 0
   244  000008                     printf@f:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x7
   248  000008                     	ds	4
   249  00000C                     ??_printf:
   250                           
   251                           ; 1 bytes @ 0xB
   252  00000C                     	ds	1
   253  00000D                     printf@flag:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0xC
   257  00000D                     	ds	1
   258  00000E                     printf@ap:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0xD
   262  00000E                     	ds	2
   263  000010                     printf@idx:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0xF
   267  000010                     	ds	1
   268  000011                     printf@val:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x10
   272  000011                     	ds	2
   273  000013                     printf@prec:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x12
   277  000013                     	ds	1
   278  000014                     printf@c:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x13
   282  000014                     	ds	1
   283  000015                     ??_main:
   284                           
   285                           ; 1 bytes @ 0x14
   286  000015                     	ds	2
   287                           tblptru	equ	0xFF8
   288                           
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 25 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : 0/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   312 ;;Total ram usage:        2 bytes
   313 ;; Hardware stack levels required when called:    3
   314 ;; This function calls:
   315 ;;		_initLCD
   316 ;;		_lcdInst
   317 ;;		_printf
   318 ;;		_readADC
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  0011B6                     __ptext0:
   326                           	opt stack 0
   327  0011B6                     _main:
   328                           	opt stack 28
   329                           
   330                           ;main.c: 29: OSCCON = 0xF2;
   331                           
   332                           ;incstack = 0
   333  0011B6  0EF2               	movlw	242
   334  0011B8  6ED3               	movwf	4051,c	;volatile
   335                           
   336                           ;main.c: 34: LATA = 0x00;
   337  0011BA  0E00               	movlw	0
   338  0011BC  6E89               	movwf	3977,c	;volatile
   339                           
   340                           ;main.c: 35: LATB = 0x00;
   341  0011BE  0E00               	movlw	0
   342  0011C0  6E8A               	movwf	3978,c	;volatile
   343                           
   344                           ;main.c: 36: LATC = 0x00;
   345  0011C2  0E00               	movlw	0
   346  0011C4  6E8B               	movwf	3979,c	;volatile
   347                           
   348                           ;main.c: 37: LATD = 0x00;
   349  0011C6  0E00               	movlw	0
   350  0011C8  6E8C               	movwf	3980,c	;volatile
   351                           
   352                           ;main.c: 38: LATE = 0x00;
   353  0011CA  0E00               	movlw	0
   354  0011CC  6E8D               	movwf	3981,c	;volatile
   355                           
   356                           ;main.c: 42: TRISA = 0xFF;
   357  0011CE  6892               	setf	3986,c	;volatile
   358                           
   359                           ;main.c: 43: TRISB = 0xFF;
   360  0011D0  6893               	setf	3987,c	;volatile
   361                           
   362                           ;main.c: 44: TRISC = 0x00;
   363  0011D2  0E00               	movlw	0
   364  0011D4  6E94               	movwf	3988,c	;volatile
   365                           
   366                           ;main.c: 45: TRISD = 0x00;
   367  0011D6  0E00               	movlw	0
   368  0011D8  6E95               	movwf	3989,c	;volatile
   369                           
   370                           ;main.c: 46: TRISE = 0x00;
   371  0011DA  0E00               	movlw	0
   372  0011DC  6E96               	movwf	3990,c	;volatile
   373                           
   374                           ;main.c: 49: ADCON0 = 0x00;
   375  0011DE  0E00               	movlw	0
   376  0011E0  6EC2               	movwf	4034,c	;volatile
   377                           
   378                           ;main.c: 50: ADCON1 = 0x0B;
   379  0011E2  0E0B               	movlw	11
   380  0011E4  6EC1               	movwf	4033,c	;volatile
   381                           
   382                           ;main.c: 51: ADCON2bits.ADFM = 1;
   383  0011E6  8EC0               	bsf	4032,7,c	;volatile
   384                           
   385                           ;main.c: 55: initLCD();
   386  0011E8  EC9D  F009         	call	_initLCD	;wreg free
   387  0011EC                     
   388                           ;main.c: 59: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
   389  0011EC  0E01               	movlw	1
   390  0011EE  ECF6  F009         	call	_lcdInst
   391  0011F2  0E27               	movlw	39
   392  0011F4  6E15               	movwf	??_main& (0+255),c
   393  0011F6  0EF5               	movlw	245
   394  0011F8                     u457:
   395  0011F8  2EE8               	decfsz	wreg,f,c
   396  0011FA  D7FE               	bra	u457
   397  0011FC  2E15               	decfsz	??_main& (0+255),f,c
   398  0011FE  D7FC               	bra	u457
   399  001200  F000               	nop	
   400                           
   401                           ;main.c: 60: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   402  001202  0E80               	movlw	128
   403  001204  ECF6  F009         	call	_lcdInst
   404  001208  0E0D               	movlw	13
   405  00120A  6E15               	movwf	??_main& (0+255),c
   406  00120C  0EFC               	movlw	252
   407  00120E                     u467:
   408  00120E  2EE8               	decfsz	wreg,f,c
   409  001210  D7FE               	bra	u467
   410  001212  2E15               	decfsz	??_main& (0+255),f,c
   411  001214  D7FC               	bra	u467
   412                           
   413                           ;main.c: 68: printf("RA2: %.3x", readADC(2));
   414  001216  0E20               	movlw	low STR_1
   415  001218  6E08               	movwf	printf@f,c
   416  00121A  0E10               	movlw	high STR_1
   417  00121C  6E09               	movwf	printf@f+1,c
   418  00121E  0E02               	movlw	2
   419  001220  ECC3  F009         	call	_readADC
   420  001224  C001  F00A         	movff	?_readADC,?_printf+2
   421  001228  C002  F00B         	movff	?_readADC+1,?_printf+3
   422  00122C  EC1B  F008         	call	_printf	;wreg free
   423                           
   424                           ;main.c: 69: lcdInst(0xC0);;
   425  001230  0EC0               	movlw	192
   426  001232  ECF6  F009         	call	_lcdInst
   427                           
   428                           ;main.c: 70: printf("RA3: %.3x", readADC(3));
   429  001236  0E2A               	movlw	low STR_2
   430  001238  6E08               	movwf	printf@f,c
   431  00123A  0E10               	movlw	high STR_2
   432  00123C  6E09               	movwf	printf@f+1,c
   433  00123E  0E03               	movlw	3
   434  001240  ECC3  F009         	call	_readADC
   435  001244  C001  F00A         	movff	?_readADC,?_printf+2
   436  001248  C002  F00B         	movff	?_readADC+1,?_printf+3
   437  00124C  EC1B  F008         	call	_printf	;wreg free
   438                           
   439                           ;main.c: 72: _delay((unsigned long)((100)*(8000000/4000.0)));
   440  001250  0E02               	movlw	2
   441  001252  6E16               	movwf	(??_main+1)& (0+255),c
   442  001254  0E04               	movlw	4
   443  001256  6E15               	movwf	??_main& (0+255),c
   444  001258  0EBA               	movlw	186
   445  00125A                     u477:
   446  00125A  2EE8               	decfsz	wreg,f,c
   447  00125C  D7FE               	bra	u477
   448  00125E  2E15               	decfsz	??_main& (0+255),f,c
   449  001260  D7FC               	bra	u477
   450  001262  2E16               	decfsz	(??_main+1)& (0+255),f,c
   451  001264  D7FA               	bra	u477
   452  001266  D000               	nop2	
   453  001268  D7C1               	goto	l65
   454  00126A                     __end_of_main:
   455                           	opt stack 0
   456                           tblptru	equ	0xFF8
   457                           wreg	equ	0xFE8
   458                           
   459 ;; *************** function _readADC *****************
   460 ;; Defined at:
   461 ;;		line 76 in file "main.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;  channel         1    wreg     unsigned char 
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  channel         1    4[COMRAM] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  2    0[COMRAM] unsigned short 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;Total ram usage:        5 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; This function calls:
   482 ;;		Nothing
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text1
   489  001386                     __ptext1:
   490                           	opt stack 0
   491  001386                     _readADC:
   492                           	opt stack 30
   493                           
   494                           ;incstack = 0
   495                           ;readADC@channel stored from wreg
   496  001386  6E05               	movwf	readADC@channel,c
   497                           
   498                           ;main.c: 85: ADCON0 = (channel & 0x0F) << 2;
   499  001388  C005  F003         	movff	readADC@channel,??_readADC
   500  00138C  0E0F               	movlw	15
   501  00138E  1603               	andwf	??_readADC,f,c
   502  001390  90D8               	bcf	status,0,c
   503  001392  3603               	rlcf	??_readADC,f,c
   504  001394  90D8               	bcf	status,0,c
   505  001396  3403               	rlcf	??_readADC,w,c
   506  001398  6EC2               	movwf	4034,c	;volatile
   507                           
   508                           ;main.c: 86: ADON = 1;
   509  00139A  80C2               	bsf	4034,0,c	;volatile
   510                           
   511                           ;main.c: 87: ADCON0bits.GO = 1;
   512  00139C  82C2               	bsf	4034,1,c	;volatile
   513  00139E  B2C2               	btfsc	4034,1,c	;volatile
   514  0013A0  D7FE               	goto	l72
   515                           
   516                           ;main.c: 89: return (ADRESH << 8) | ADRESL;
   517  0013A2  50C3               	movf	4035,w,c	;volatile
   518  0013A4  CFC4 F003          	movff	4036,??_readADC	;volatile
   519  0013A8  6A04               	clrf	(??_readADC+1)& (0+255),c
   520  0013AA  C003  F004         	movff	??_readADC,??_readADC+1
   521  0013AE  6A03               	clrf	??_readADC,c
   522  0013B0  1003               	iorwf	??_readADC,w,c
   523  0013B2  6E01               	movwf	?_readADC,c
   524  0013B4  5004               	movf	??_readADC+1,w,c
   525  0013B6  6E02               	movwf	?_readADC+1,c
   526  0013B8  0012               	return	
   527  0013BA                     __end_of_readADC:
   528                           	opt stack 0
   529                           tblptru	equ	0xFF8
   530                           wreg	equ	0xFE8
   531                           status	equ	0xFD8
   532                           
   533 ;; *************** function _printf *****************
   534 ;; Defined at:
   535 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  f               2    7[COMRAM] PTR const unsigned char 
   538 ;;		 -> STR_2(10), STR_1(10), 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  idx             1   15[COMRAM] unsigned char 
   541 ;;  tmpval          4    0        struct .
   542 ;;  cp              3    0        PTR const unsigned char 
   543 ;;  val             2   16[COMRAM] unsigned int 
   544 ;;  ap              2   13[COMRAM] PTR void [1]
   545 ;;		 -> ?_printf(2), 
   546 ;;  len             2    0        unsigned int 
   547 ;;  c               1   19[COMRAM] char 
   548 ;;  prec            1   18[COMRAM] char 
   549 ;;  flag            1   12[COMRAM] unsigned char 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  2    7[COMRAM] int 
   552 ;; Registers used:
   553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   560 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   562 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   563 ;;Total ram usage:       13 bytes
   564 ;; Hardware stack levels used:    1
   565 ;; Hardware stack levels required when called:    2
   566 ;; This function calls:
   567 ;;		___lwdiv
   568 ;;		_isdigit
   569 ;;		_putch
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text2
   576  001036                     __ptext2:
   577                           	opt stack 0
   578  001036                     _printf:
   579                           	opt stack 28
   580                           
   581                           ;doprnt.c: 466: va_list ap;
   582                           ;doprnt.c: 499: signed char c;
   583                           ;doprnt.c: 506: signed char prec;
   584                           ;doprnt.c: 508: unsigned char flag;
   585                           ;doprnt.c: 523: union {
   586                           ;doprnt.c: 524: unsigned long vd;
   587                           ;doprnt.c: 525: double integ;
   588                           ;doprnt.c: 526: } tmpval;
   589                           ;doprnt.c: 528: unsigned int val;
   590                           ;doprnt.c: 529: unsigned len;
   591                           ;doprnt.c: 530: const char * cp;
   592                           ;doprnt.c: 533: *ap = __va_start();
   593                           
   594                           ;incstack = 0
   595  001036  0E0A               	movlw	low (?_printf+2)
   596  001038  6E0E               	movwf	printf@ap,c
   597  00103A  0E00               	movlw	high (?_printf+2)
   598  00103C  6E0F               	movwf	printf@ap+1,c
   599                           
   600                           ;doprnt.c: 536: while(c = *f++) {
   601  00103E  D0AE               	goto	u430
   602  001040                     
   603                           ;doprnt.c: 538: if(c != '%')
   604  001040  0E25               	movlw	37
   605  001042  1814               	xorwf	printf@c,w,c
   606  001044  B4D8               	btfsc	status,2,c
   607  001046  D004               	goto	l144
   608                           
   609                           ;doprnt.c: 540: {
   610                           ;doprnt.c: 541: (putch(c) );
   611  001048  5014               	movf	printf@c,w,c
   612  00104A  ECEC  F009         	call	_putch
   613                           
   614                           ;doprnt.c: 542: continue;
   615  00104E  D0A6               	goto	u430
   616  001050                     l144:
   617                           
   618                           ;doprnt.c: 543: }
   619                           ;doprnt.c: 548: flag = 0;
   620  001050  0E00               	movlw	0
   621  001052  6E0D               	movwf	printf@flag,c
   622                           
   623                           ;doprnt.c: 611: if(*f == '.') {
   624  001054  C008  FFF6         	movff	printf@f,tblptrl
   625  001058  C009  FFF7         	movff	printf@f+1,tblptrh
   626  00105C                     	if	0	;tblptru may be non-zero
   627  00105C                     	endif
   628  00105C                     	if	0	;tblptru may be non-zero
   629  00105C                     	endif
   630  00105C  0008               	tblrd		*
   631  00105E  50F5               	movf	tablat,w,c
   632  001060  0A2E               	xorlw	46
   633  001062  A4D8               	btfss	status,2,c
   634  001064  D01F               	goto	l145
   635                           
   636                           ;doprnt.c: 613: f++;
   637  001066  4A08               	infsnz	printf@f,f,c
   638  001068  2A09               	incf	printf@f+1,f,c
   639                           
   640                           ;doprnt.c: 620: {
   641                           ;doprnt.c: 621: prec = 0;
   642  00106A  0E00               	movlw	0
   643  00106C  6E13               	movwf	printf@prec,c
   644                           
   645                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   646  00106E  D00F               	goto	l146
   647  001070                     
   648                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   649  001070  C008  FFF6         	movff	printf@f,tblptrl
   650  001074  C009  FFF7         	movff	printf@f+1,tblptrh
   651  001078                     	if	0	;tblptru may be non-zero
   652  001078                     	endif
   653  001078                     	if	0	;tblptru may be non-zero
   654  001078                     	endif
   655  001078  0008               	tblrd		*
   656  00107A  CFF5 F00C          	movff	tablat,??_printf
   657  00107E  5013               	movf	printf@prec,w,c
   658  001080  0D0A               	mullw	10
   659  001082  50F3               	movf	prodl,w,c
   660  001084  240C               	addwf	??_printf,w,c
   661  001086  0FD0               	addlw	208
   662  001088  6E13               	movwf	printf@prec,c
   663  00108A  4A08               	infsnz	printf@f,f,c
   664  00108C  2A09               	incf	printf@f+1,f,c
   665  00108E                     l146:
   666  00108E  C008  FFF6         	movff	printf@f,tblptrl
   667  001092  C009  FFF7         	movff	printf@f+1,tblptrh
   668  001096                     	if	0	;tblptru may be non-zero
   669  001096                     	endif
   670  001096                     	if	0	;tblptru may be non-zero
   671  001096                     	endif
   672  001096  0008               	tblrd		*
   673  001098  50F5               	movf	tablat,w,c
   674  00109A  ECDD  F009         	call	_isdigit
   675  00109E  A0D8               	btfss	status,0,c
   676  0010A0  D003               	goto	l150
   677  0010A2  D7E6               	goto	l147
   678  0010A4                     l145:
   679                           
   680                           ;doprnt.c: 626: prec = 0;
   681  0010A4  0E00               	movlw	0
   682  0010A6  6E13               	movwf	printf@prec,c
   683  0010A8                     l150:
   684  0010A8  C008  FFF6         	movff	printf@f,tblptrl
   685  0010AC  C009  FFF7         	movff	printf@f+1,tblptrh
   686  0010B0  4A08               	infsnz	printf@f,f,c
   687  0010B2  2A09               	incf	printf@f+1,f,c
   688  0010B4                     	if	0	;tblptru may be non-zero
   689  0010B4                     	endif
   690  0010B4                     	if	0	;tblptru may be non-zero
   691  0010B4                     	endif
   692  0010B4  0008               	tblrd		*
   693  0010B6  CFF5 F014          	movff	tablat,printf@c
   694  0010BA  5014               	movf	printf@c,w,c
   695                           
   696                           ; Switch size 1, requested type "space"
   697                           ; Number of cases is 2, Range of values is 0 to 120
   698                           ; switch strategies available:
   699                           ; Name         Instructions Cycles
   700                           ; simple_byte            7     4 (average)
   701                           ;	Chosen strategy is simple_byte
   702  0010BC  0A00               	xorlw	0	; case 0
   703  0010BE  B4D8               	btfsc	status,2,c
   704  0010C0  0012               	return	
   705  0010C2  0A78               	xorlw	120	; case 120
   706  0010C4  A4D8               	btfss	status,2,c
   707  0010C6  D06A               	goto	u430
   708                           
   709                           ;doprnt.c: 1273: {
   710                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   711  0010C8  C00E  FFD9         	movff	printf@ap,fsr2l
   712  0010CC  C00F  FFDA         	movff	printf@ap+1,fsr2h
   713  0010D0  CFDE F011          	movff	postinc2,printf@val
   714  0010D4  CFDD F012          	movff	postdec2,printf@val+1
   715  0010D8  0E02               	movlw	2
   716  0010DA  260E               	addwf	printf@ap,f,c
   717  0010DC  0E00               	movlw	0
   718  0010DE  220F               	addwfc	printf@ap+1,f,c
   719                           
   720                           ;doprnt.c: 1287: }
   721                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
   722  0010E0  5013               	movf	printf@prec,w,c
   723  0010E2  A4D8               	btfss	status,2,c
   724  0010E4  D004               	goto	l156
   725  0010E6  5011               	movf	printf@val,w,c
   726  0010E8  1012               	iorwf	printf@val+1,w,c
   727  0010EA  B4D8               	btfsc	status,2,c
   728                           
   729                           ;doprnt.c: 1291: prec++;
   730  0010EC  2A13               	incf	printf@prec,f,c
   731  0010EE                     l156:
   732                           
   733                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   734  0010EE  0E01               	movlw	1
   735  0010F0  6E14               	movwf	printf@c,c
   736  0010F2                     l1118:
   737  0010F2  0E04               	movlw	4
   738  0010F4  1814               	xorwf	printf@c,w,c
   739  0010F6  B4D8               	btfsc	status,2,c
   740  0010F8  D012               	goto	u400
   741                           
   742                           ;doprnt.c: 1317: if(val < hexpowers[c])
   743  0010FA  5014               	movf	printf@c,w,c
   744  0010FC  0D02               	mullw	2
   745  0010FE  0E01               	movlw	low _hexpowers
   746  001100  24F3               	addwf	prodl,w,c
   747  001102  6EF6               	movwf	tblptrl,c
   748  001104  0E10               	movlw	high _hexpowers
   749  001106  20F4               	addwfc	prodh,w,c
   750  001108  6EF7               	movwf	tblptrh,c
   751  00110A                     	if	0	;There are less than 3 active tblptr bytes
   752  00110A                     	endif
   753  00110A  0009               	tblrd		*+
   754  00110C  50F5               	movf	tablat,w,c
   755  00110E  5C11               	subwf	printf@val,w,c
   756  001110  0009               	tblrd		*+
   757  001112  50F5               	movf	tablat,w,c
   758  001114  5812               	subwfb	printf@val+1,w,c
   759  001116  A0D8               	btfss	status,0,c
   760  001118  D002               	goto	u400
   761                           
   762                           ;doprnt.c: 1318: break;
   763  00111A  2A14               	incf	printf@c,f,c
   764  00111C  D7EA               	goto	l1118
   765  00111E                     u400:
   766                           
   767                           ;doprnt.c: 1339: if(c < prec)
   768  00111E  5014               	movf	printf@c,w,c
   769  001120  0A80               	xorlw	128
   770  001122  6E0C               	movwf	??_printf& (0+255),c
   771  001124  5013               	movf	printf@prec,w,c
   772  001126  0A80               	xorlw	128
   773  001128  5C0C               	subwf	??_printf& (0+255),w,c
   774  00112A  B0D8               	btfsc	status,0,c
   775  00112C  D003               	goto	l160
   776                           
   777                           ;doprnt.c: 1340: c = prec;
   778  00112E  C013  F014         	movff	printf@prec,printf@c
   779  001132  D030               	goto	l163
   780  001134                     l160:
   781                           
   782                           ;doprnt.c: 1341: else if(prec < c)
   783  001134  5013               	movf	printf@prec,w,c
   784  001136  0A80               	xorlw	128
   785  001138  6E0C               	movwf	??_printf& (0+255),c
   786  00113A  5014               	movf	printf@c,w,c
   787  00113C  0A80               	xorlw	128
   788  00113E  5C0C               	subwf	??_printf& (0+255),w,c
   789  001140  B0D8               	btfsc	status,0,c
   790  001142  D028               	goto	l163
   791                           
   792                           ;doprnt.c: 1342: prec = c;
   793  001144  C014  F013         	movff	printf@c,printf@prec
   794                           
   795                           ;doprnt.c: 1422: {
   796                           ;doprnt.c: 1469: }
   797                           ;doprnt.c: 1474: while(prec--) {
   798  001148  D025               	goto	l163
   799  00114A                     
   800                           ;doprnt.c: 1478: {
   801                           ;doprnt.c: 1499: {
   802                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
   803  00114A  C011  F001         	movff	printf@val,___lwdiv@dividend
   804  00114E  C012  F002         	movff	printf@val+1,___lwdiv@dividend+1
   805  001152  5013               	movf	printf@prec,w,c
   806  001154  0D02               	mullw	2
   807  001156  0E01               	movlw	low _hexpowers
   808  001158  24F3               	addwf	prodl,w,c
   809  00115A  6EF6               	movwf	tblptrl,c
   810  00115C  0E10               	movlw	high _hexpowers
   811  00115E  20F4               	addwfc	prodh,w,c
   812  001160  6EF7               	movwf	tblptrh,c
   813  001162                     	if	0	;There are less than 3 active tblptr bytes
   814  001162                     	endif
   815  001162  0009               	tblrd		*+
   816  001164  CFF5 F003          	movff	tablat,___lwdiv@divisor
   817  001168  000A               	tblrd		*-
   818  00116A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   819  00116E  EC74  F009         	call	___lwdiv	;wreg free
   820  001172  5001               	movf	?___lwdiv,w,c
   821  001174  0B0F               	andlw	15
   822  001176  6E10               	movwf	printf@idx,c
   823                           
   824                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
   825  001178  5010               	movf	printf@idx,w,c
   826  00117A  0D01               	mullw	1
   827  00117C  0E0F               	movlw	low STR_3
   828  00117E  24F3               	addwf	prodl,w,c
   829  001180  6EF6               	movwf	tblptrl,c
   830  001182  0E10               	movlw	high STR_3
   831  001184  20F4               	addwfc	prodh,w,c
   832  001186  6EF7               	movwf	tblptrh,c
   833  001188                     	if	0	;There are less than 3 active tblptr bytes
   834  001188                     	endif
   835  001188  0008               	tblrd		*
   836  00118A  CFF5 F014          	movff	tablat,printf@c
   837                           
   838                           ;doprnt.c: 1508: }
   839                           ;doprnt.c: 1523: }
   840                           ;doprnt.c: 1524: (putch(c) );
   841  00118E  5014               	movf	printf@c,w,c
   842  001190  ECEC  F009         	call	_putch
   843  001194                     l163:
   844  001194  0613               	decf	printf@prec,f,c
   845  001196  2813               	incf	printf@prec,w,c
   846  001198  A4D8               	btfss	status,2,c
   847  00119A  D7D7               	goto	l164
   848  00119C                     u430:
   849  00119C  C008  FFF6         	movff	printf@f,tblptrl
   850  0011A0  C009  FFF7         	movff	printf@f+1,tblptrh
   851  0011A4  4A08               	infsnz	printf@f,f,c
   852  0011A6  2A09               	incf	printf@f+1,f,c
   853  0011A8                     	if	0	;tblptru may be non-zero
   854  0011A8                     	endif
   855  0011A8                     	if	0	;tblptru may be non-zero
   856  0011A8                     	endif
   857  0011A8  0008               	tblrd		*
   858  0011AA  CFF5 F014          	movff	tablat,printf@c
   859  0011AE  5014               	movf	printf@c,w,c
   860  0011B0  B4D8               	btfsc	status,2,c
   861  0011B2  0012               	return	
   862  0011B4  D745               	goto	l143
   863  0011B6                     __end_of_printf:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           prodh	equ	0xFF4
   870                           prodl	equ	0xFF3
   871                           wreg	equ	0xFE8
   872                           postinc2	equ	0xFDE
   873                           postdec2	equ	0xFDD
   874                           fsr2h	equ	0xFDA
   875                           fsr2l	equ	0xFD9
   876                           status	equ	0xFD8
   877                           
   878 ;; *************** function _putch *****************
   879 ;; Defined at:
   880 ;;		line 24 in file "lcd.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  data            1    wreg     unsigned char 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  data            1    2[COMRAM] unsigned char 
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   898 ;;Total ram usage:        1 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    1
   901 ;; This function calls:
   902 ;;		_lcdNibble
   903 ;; This function is called by:
   904 ;;		_printf
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text3
   909  0013D8                     __ptext3:
   910                           	opt stack 0
   911  0013D8                     _putch:
   912                           	opt stack 28
   913                           
   914                           ;incstack = 0
   915                           ;putch@data stored from wreg
   916  0013D8  6E03               	movwf	putch@data,c
   917                           
   918                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   919  0013DA  848C               	bsf	3980,2,c	;volatile
   920                           
   921                           ;lcd.c: 33: lcdNibble(data);
   922  0013DC  5003               	movf	putch@data,w,c
   923  0013DE  EC35  F009         	call	_lcdNibble
   924                           
   925                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   926  0013E2  0E42               	movlw	66
   927  0013E4                     u487:
   928  0013E4  2EE8               	decfsz	wreg,f,c
   929  0013E6  D7FE               	bra	u487
   930  0013E8  D000               	nop2	
   931  0013EA  0012               	return		;funcret
   932  0013EC                     __end_of_putch:
   933                           	opt stack 0
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           prodh	equ	0xFF4
   939                           prodl	equ	0xFF3
   940                           wreg	equ	0xFE8
   941                           postinc2	equ	0xFDE
   942                           postdec2	equ	0xFDD
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function _isdigit *****************
   948 ;; Defined at:
   949 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  c               1    wreg     unsigned char 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  c               1    2[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;		None               void
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;Total ram usage:        3 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_printf
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text4
   977  0013BA                     __ptext4:
   978                           	opt stack 0
   979  0013BA                     _isdigit:
   980                           	opt stack 29
   981                           
   982                           ;incstack = 0
   983                           ;isdigit@c stored from wreg
   984  0013BA  6E03               	movwf	isdigit@c,c
   985  0013BC  0E00               	movlw	0
   986  0013BE  6E02               	movwf	_isdigit$579,c
   987  0013C0  0E3A               	movlw	58
   988  0013C2  6003               	cpfslt	isdigit@c,c
   989  0013C4  D005               	goto	l497
   990  0013C6  0E2F               	movlw	47
   991  0013C8  6403               	cpfsgt	isdigit@c,c
   992  0013CA  D002               	goto	l497
   993  0013CC  0E01               	movlw	1
   994  0013CE  6E02               	movwf	_isdigit$579,c
   995  0013D0                     l497:
   996  0013D0  C002  F001         	movff	_isdigit$579,??_isdigit
   997  0013D4  3001               	rrcf	??_isdigit,w,c
   998  0013D6  0012               	return	
   999  0013D8                     __end_of_isdigit:
  1000                           	opt stack 0
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           prodh	equ	0xFF4
  1006                           prodl	equ	0xFF3
  1007                           wreg	equ	0xFE8
  1008                           postinc2	equ	0xFDE
  1009                           postdec2	equ	0xFDD
  1010                           fsr2h	equ	0xFDA
  1011                           fsr2l	equ	0xFD9
  1012                           status	equ	0xFD8
  1013                           
  1014 ;; *************** function ___lwdiv *****************
  1015 ;; Defined at:
  1016 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;  dividend        2    0[COMRAM] unsigned int 
  1019 ;;  divisor         2    2[COMRAM] unsigned int 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  quotient        2    4[COMRAM] unsigned int 
  1022 ;;  counter         1    6[COMRAM] unsigned char 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  2    0[COMRAM] unsigned int 
  1025 ;; Registers used:
  1026 ;;		wreg, status,2, status,0
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;Total ram usage:        7 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; This function calls:
  1039 ;;		Nothing
  1040 ;; This function is called by:
  1041 ;;		_printf
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text5
  1046  0012E8                     __ptext5:
  1047                           	opt stack 0
  1048  0012E8                     ___lwdiv:
  1049                           	opt stack 29
  1050                           
  1051                           ;incstack = 0
  1052  0012E8  0E00               	movlw	0
  1053  0012EA  6E06               	movwf	___lwdiv@quotient+1,c
  1054  0012EC  0E00               	movlw	0
  1055  0012EE  6E05               	movwf	___lwdiv@quotient,c
  1056  0012F0  5003               	movf	___lwdiv@divisor,w,c
  1057  0012F2  1004               	iorwf	___lwdiv@divisor+1,w,c
  1058  0012F4  B4D8               	btfsc	status,2,c
  1059  0012F6  D01C               	goto	l581
  1060  0012F8  0E01               	movlw	1
  1061  0012FA  6E07               	movwf	___lwdiv@counter,c
  1062  0012FC  D004               	goto	l576
  1063  0012FE  90D8               	bcf	status,0,c
  1064  001300  3603               	rlcf	___lwdiv@divisor,f,c
  1065  001302  3604               	rlcf	___lwdiv@divisor+1,f,c
  1066  001304  2A07               	incf	___lwdiv@counter,f,c
  1067  001306                     l576:
  1068  001306  AE04               	btfss	___lwdiv@divisor+1,7,c
  1069  001308  D7FA               	goto	l577
  1070  00130A                     u300:
  1071  00130A  90D8               	bcf	status,0,c
  1072  00130C  3605               	rlcf	___lwdiv@quotient,f,c
  1073  00130E  3606               	rlcf	___lwdiv@quotient+1,f,c
  1074  001310  5003               	movf	___lwdiv@divisor,w,c
  1075  001312  5C01               	subwf	___lwdiv@dividend,w,c
  1076  001314  5004               	movf	___lwdiv@divisor+1,w,c
  1077  001316  5802               	subwfb	___lwdiv@dividend+1,w,c
  1078  001318  A0D8               	btfss	status,0,c
  1079  00131A  D005               	goto	l580
  1080  00131C  5003               	movf	___lwdiv@divisor,w,c
  1081  00131E  5E01               	subwf	___lwdiv@dividend,f,c
  1082  001320  5004               	movf	___lwdiv@divisor+1,w,c
  1083  001322  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1084  001324  8005               	bsf	___lwdiv@quotient,0,c
  1085  001326                     l580:
  1086  001326  90D8               	bcf	status,0,c
  1087  001328  3204               	rrcf	___lwdiv@divisor+1,f,c
  1088  00132A  3203               	rrcf	___lwdiv@divisor,f,c
  1089  00132C  2E07               	decfsz	___lwdiv@counter,f,c
  1090  00132E  D7ED               	goto	u300
  1091  001330                     l581:
  1092  001330  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1093  001334  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1094  001338  0012               	return		;funcret
  1095  00133A                     __end_of___lwdiv:
  1096                           	opt stack 0
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           prodh	equ	0xFF4
  1102                           prodl	equ	0xFF3
  1103                           wreg	equ	0xFE8
  1104                           postinc2	equ	0xFDE
  1105                           postdec2	equ	0xFDD
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function _initLCD *****************
  1111 ;; Defined at:
  1112 ;;		line 60 in file "lcd.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;Total ram usage:        1 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    2
  1133 ;; This function calls:
  1134 ;;		_lcdInst
  1135 ;; This function is called by:
  1136 ;;		_main
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text6
  1141  00133A                     __ptext6:
  1142                           	opt stack 0
  1143  00133A                     _initLCD:
  1144                           	opt stack 28
  1145                           
  1146                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1147                           
  1148                           ;incstack = 0
  1149  00133A  0E27               	movlw	39
  1150  00133C  6E04               	movwf	??_initLCD& (0+255),c
  1151  00133E  0EF5               	movlw	245
  1152  001340                     u497:
  1153  001340  2EE8               	decfsz	wreg,f,c
  1154  001342  D7FE               	bra	u497
  1155  001344  2E04               	decfsz	??_initLCD& (0+255),f,c
  1156  001346  D7FC               	bra	u497
  1157  001348  F000               	nop	
  1158                           
  1159                           ;lcd.c: 69: lcdInst(0b00110011);
  1160  00134A  0E33               	movlw	51
  1161  00134C  ECF6  F009         	call	_lcdInst
  1162                           
  1163                           ;lcd.c: 70: lcdInst(0b00110010);
  1164  001350  0E32               	movlw	50
  1165  001352  ECF6  F009         	call	_lcdInst
  1166                           
  1167                           ;lcd.c: 71: lcdInst(0b00101000);
  1168  001356  0E28               	movlw	40
  1169  001358  ECF6  F009         	call	_lcdInst
  1170                           
  1171                           ;lcd.c: 72: lcdInst(0b00001111);
  1172  00135C  0E0F               	movlw	15
  1173  00135E  ECF6  F009         	call	_lcdInst
  1174                           
  1175                           ;lcd.c: 73: lcdInst(0b00000110);
  1176  001362  0E06               	movlw	6
  1177  001364  ECF6  F009         	call	_lcdInst
  1178                           
  1179                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1180  001368  0E01               	movlw	1
  1181  00136A  ECF6  F009         	call	_lcdInst
  1182  00136E  0E27               	movlw	39
  1183  001370  6E04               	movwf	??_initLCD& (0+255),c
  1184  001372  0EF5               	movlw	245
  1185  001374                     u507:
  1186  001374  2EE8               	decfsz	wreg,f,c
  1187  001376  D7FE               	bra	u507
  1188  001378  2E04               	decfsz	??_initLCD& (0+255),f,c
  1189  00137A  D7FC               	bra	u507
  1190  00137C  F000               	nop	
  1191                           
  1192                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1193  00137E  0E0F               	movlw	15
  1194  001380  ECF6  F009         	call	_lcdInst
  1195  001384  0012               	return		;funcret
  1196  001386                     __end_of_initLCD:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           prodh	equ	0xFF4
  1203                           prodl	equ	0xFF3
  1204                           wreg	equ	0xFE8
  1205                           postinc2	equ	0xFDE
  1206                           postdec2	equ	0xFDD
  1207                           fsr2h	equ	0xFDA
  1208                           fsr2l	equ	0xFD9
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _lcdInst *****************
  1212 ;; Defined at:
  1213 ;;		line 11 in file "lcd.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  data            1    wreg     unsigned char 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  data            1    2[COMRAM] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;Total ram usage:        1 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    1
  1234 ;; This function calls:
  1235 ;;		_lcdNibble
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;;		_initLCD
  1239 ;;		_lcd_set_cursor
  1240 ;;		_lcd_shift_cursor
  1241 ;;		_lcd_shift_display
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text7
  1246  0013EC                     __ptext7:
  1247                           	opt stack 0
  1248  0013EC                     _lcdInst:
  1249                           	opt stack 29
  1250                           
  1251                           ;incstack = 0
  1252                           ;lcdInst@data stored from wreg
  1253  0013EC  6E03               	movwf	lcdInst@data,c
  1254                           
  1255                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1256  0013EE  948C               	bcf	3980,2,c	;volatile
  1257                           
  1258                           ;lcd.c: 20: lcdNibble(data);
  1259  0013F0  5003               	movf	lcdInst@data,w,c
  1260  0013F2  EC35  F009         	call	_lcdNibble
  1261                           
  1262                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1263  0013F6  0E42               	movlw	66
  1264  0013F8                     u517:
  1265  0013F8  2EE8               	decfsz	wreg,f,c
  1266  0013FA  D7FE               	bra	u517
  1267  0013FC  D000               	nop2	
  1268  0013FE  0012               	return		;funcret
  1269  001400                     __end_of_lcdInst:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           prodh	equ	0xFF4
  1276                           prodl	equ	0xFF3
  1277                           wreg	equ	0xFE8
  1278                           postinc2	equ	0xFDE
  1279                           postdec2	equ	0xFDD
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function _lcdNibble *****************
  1285 ;; Defined at:
  1286 ;;		line 37 in file "lcd.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  data            1    wreg     unsigned char 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  data            1    1[COMRAM] unsigned char 
  1291 ;;  temp            1    0[COMRAM] unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;Total ram usage:        2 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_lcdInst
  1311 ;;		_putch
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text8
  1316  00126A                     __ptext8:
  1317                           	opt stack 0
  1318  00126A                     _lcdNibble:
  1319                           	opt stack 28
  1320                           
  1321                           ;incstack = 0
  1322                           ;lcdNibble@data stored from wreg
  1323  00126A  6E02               	movwf	lcdNibble@data,c
  1324                           
  1325                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1326  00126C  5002               	movf	lcdNibble@data,w,c
  1327  00126E  0BF0               	andlw	240
  1328  001270  6E01               	movwf	lcdNibble@temp,c
  1329                           
  1330                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1331  001272  508C               	movf	3980,w,c	;volatile
  1332  001274  0B0F               	andlw	15
  1333  001276  6E8C               	movwf	3980,c	;volatile
  1334                           
  1335                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1336  001278  5001               	movf	lcdNibble@temp,w,c
  1337  00127A  108C               	iorwf	3980,w,c	;volatile
  1338  00127C  6E8C               	movwf	3980,c	;volatile
  1339                           
  1340                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1341  00127E  0E00               	movlw	0
  1342  001280  BEF2               	btfsc	intcon,7,c	;volatile
  1343  001282  0E01               	movlw	1
  1344  001284  6E17               	movwf	lcd@LCDinterruptState,c
  1345  001286  9EF2               	bcf	intcon,7,c	;volatile
  1346  001288  868C               	bsf	3980,3,c	;volatile
  1347  00128A  0E10               	movlw	16
  1348  00128C                     u527:
  1349  00128C  2EE8               	decfsz	wreg,f,c
  1350  00128E  D7FE               	bra	u527
  1351  001290  D000               	nop2	
  1352  001292  968C               	bcf	3980,3,c	;volatile
  1353  001294  0E42               	movlw	66
  1354  001296                     u537:
  1355  001296  2EE8               	decfsz	wreg,f,c
  1356  001298  D7FE               	bra	u537
  1357  00129A  D000               	nop2	
  1358  00129C  B017               	btfsc	lcd@LCDinterruptState,0,c
  1359  00129E  D002               	bra	u15
  1360  0012A0  9EF2               	bcf	intcon,7,c	;volatile
  1361  0012A2  D001               	bra	u16
  1362  0012A4                     u15:
  1363  0012A4  8EF2               	bsf	intcon,7,c	;volatile
  1364  0012A6                     u16:
  1365                           
  1366                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1367  0012A6  3802               	swapf	lcdNibble@data,w,c
  1368  0012A8  0BF0               	andlw	240
  1369  0012AA  6E02               	movwf	lcdNibble@data,c
  1370                           
  1371                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1372  0012AC  5002               	movf	lcdNibble@data,w,c
  1373  0012AE  0BF0               	andlw	240
  1374  0012B0  6E01               	movwf	lcdNibble@temp,c
  1375                           
  1376                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1377  0012B2  508C               	movf	3980,w,c	;volatile
  1378  0012B4  0B0F               	andlw	15
  1379  0012B6  6E8C               	movwf	3980,c	;volatile
  1380                           
  1381                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1382  0012B8  5001               	movf	lcdNibble@temp,w,c
  1383  0012BA  108C               	iorwf	3980,w,c	;volatile
  1384  0012BC  6E8C               	movwf	3980,c	;volatile
  1385                           
  1386                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1387  0012BE  0E00               	movlw	0
  1388  0012C0  BEF2               	btfsc	intcon,7,c	;volatile
  1389  0012C2  0E01               	movlw	1
  1390  0012C4  6E17               	movwf	lcd@LCDinterruptState,c
  1391  0012C6  9EF2               	bcf	intcon,7,c	;volatile
  1392  0012C8  868C               	bsf	3980,3,c	;volatile
  1393  0012CA  0E10               	movlw	16
  1394  0012CC                     u547:
  1395  0012CC  2EE8               	decfsz	wreg,f,c
  1396  0012CE  D7FE               	bra	u547
  1397  0012D0  D000               	nop2	
  1398  0012D2  968C               	bcf	3980,3,c	;volatile
  1399  0012D4  0E42               	movlw	66
  1400  0012D6                     u557:
  1401  0012D6  2EE8               	decfsz	wreg,f,c
  1402  0012D8  D7FE               	bra	u557
  1403  0012DA  D000               	nop2	
  1404  0012DC  B017               	btfsc	lcd@LCDinterruptState,0,c
  1405  0012DE  D002               	bra	u25
  1406  0012E0  9EF2               	bcf	intcon,7,c	;volatile
  1407  0012E2  D001               	bra	u26
  1408  0012E4                     u25:
  1409  0012E4  8EF2               	bsf	intcon,7,c	;volatile
  1410  0012E6                     u26:
  1411  0012E6  0012               	return		;funcret
  1412  0012E8                     __end_of_lcdNibble:
  1413                           	opt stack 0
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           prodh	equ	0xFF4
  1419                           prodl	equ	0xFF3
  1420                           intcon	equ	0xFF2
  1421                           wreg	equ	0xFE8
  1422                           postinc2	equ	0xFDE
  1423                           postdec2	equ	0xFDD
  1424                           fsr2h	equ	0xFDA
  1425                           fsr2l	equ	0xFD9
  1426                           status	equ	0xFD8
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           wreg	equ	0xFE8
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441                           	psect	rparam
  1442  0000                     tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           prodh	equ	0xFF4
  1447                           prodl	equ	0xFF3
  1448                           intcon	equ	0xFF2
  1449                           wreg	equ	0xFE8
  1450                           postinc2	equ	0xFDE
  1451                           postdec2	equ	0xFDD
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    14
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     22      24
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1416
                                             20 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1214
                                              7 COMRAM    13     9      4
                            ___lwdiv
                            _isdigit
                              _putch
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     _isdigit
     _putch
       _lcdNibble
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     16      18       1       18.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      34        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 11:25:29 2018

                     l72 139E                       l65 11EC                       u15 12A4  
                     u16 12A6                       u25 12E4                       u26 12E6  
            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l150 10A8                      l143 1040                      l160 1134  
                    l144 1050                      l145 10A4                      l146 108E  
                    l163 1194                      l147 1070                      l164 114A  
                    l156 10EE                      l580 1326                      l581 1330  
                    l576 1306                      l577 12FE                      l497 13D0  
           __CFG_CPB$OFF 000000                      u300 130A                      u400 111E  
                    u430 119C                      u507 1374                      u517 13F8  
                    u527 128C                      u537 1296                      u457 11F8  
                    u547 12CC                      u467 120E                      u557 12D6  
                    u477 125A                      u487 13E4                      u497 1340  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1118 10F2                     _ADON 007E10                     STR_1 1020  
                   STR_2 102A                     STR_3 100F                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   _LATE 000F8D                     _main 11B6                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000         __end_of_LCD_LEFT 100A                    ?_main 0001  
        __end_of___lwdiv 133A                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1400  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_readADC 13BA  
        __end_of_initLCD 1386           __CFG_EBTRB$OFF 000000          __end_of_isdigit 13D8  
                  _putch 13D8                    tablat 000FF5        _LCDinterruptState 0018  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 1400  
           __end_of_main 126A        __end_of_LCD_RIGHT 100B                   ??_main 0015  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 0005                ??_lcdInst 0003                   _printf 1036  
              ??_readADC 0003                ??_initLCD 0004                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1404  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 13EC  
     __size_of_lcdNibble 007E                  ??_putch 0003                  ?_printf 0008  
   lcd@LCDinterruptState 0017        __end_of_lcdNibble 12E8                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 12E8             __psmallconst 1000  
                __pcinit 1400                  __ramtop 1000                  _lcdInst 13EC  
                __ptext0 11B6                  __ptext1 1386                  __ptext2 1036  
                __ptext3 13D8                  __ptext4 13BA                  __ptext5 12E8  
                __ptext6 133A                  __ptext7 13EC                  __ptext8 126A  
        __size_of_printf 0180                  _readADC 1386                  _initLCD 133A  
      __end_of_hexpowers 1009                  _isdigit 13BA                _LCD_RIGHT 100A  
   end_of_initialization 1404    __end_of_LCD_SIZE_HORZ 100D    __end_of_LCD_SIZE_VERT 100C  
          __Lmediumconst 0000                  printf@c 0014                  printf@f 0008  
                postdec2 000FDD                  postinc2 000FDE           __end_of_printf 11B6  
    start_initialization 1400         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_printf 000C              __pbssCOMRAM 0017         ___lwdiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 126A                 ?___lwdiv 0001  
               ?_lcdInst 0001                 ?_readADC 0001                 ?_initLCD 0001  
            __smallconst 1000                 ?_isdigit 0001                _hexpowers 1001  
       ___lwdiv@quotient 0005           __size_of_putch 0014                 _LCD_LEFT 1009  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0            lcdNibble@data 0002  
             printf@flag 000D            lcdNibble@temp 0001               printf@prec 0013  
         _LCD_HORZ_LIMIT 100E                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___lwdiv 0052           readADC@channel 0005  
            _isdigit$579 0002         __size_of_lcdInst 0014         __size_of_readADC 0034  
       __size_of_initLCD 004C   __end_of_LCD_HORZ_LIMIT 100F         __size_of_isdigit 001E  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007           _LCD_VERT_LIMIT 100D  
          __size_of_main 00B4              ??_lcdNibble 0001                printf@idx 0010  
              printf@val 0011                putch@data 0003               _INTCONbits 000FF2  
 __end_of_LCD_VERT_LIMIT 100E                 isdigit@c 0003            _LCD_SIZE_HORZ 100C  
          _LCD_SIZE_VERT 100B                 printf@ap 000E              lcdInst@data 0003  
