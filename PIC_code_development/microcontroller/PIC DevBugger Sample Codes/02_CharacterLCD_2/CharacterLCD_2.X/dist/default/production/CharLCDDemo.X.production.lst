

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Sep 13 23:15:45 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.42
    42                           ; Generated 13/04/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  00DD8B                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for main@F2986
    81  00DD8B  41                 	db	65
    82  00DD8C  45                 	db	69
    83  00DD8D  52                 	db	82
    84  00DD8E  32                 	db	50
    85  00DD8F  30                 	db	48
    86  00DD90  31                 	db	49
    87  00DD91  00                 	db	0
    88                           
    89                           	psect	mediumconst
    90  00FE86                     __pmediumconst:
    91                           	opt stack 0
    92  00FE86  00                 	db	0
    93  00FE87                     _dpowers:
    94                           	opt stack 0
    95  00FE87  0001               	dw	1
    96  00FE89  0000               	dw	0
    97  00FE8B  000A               	dw	10
    98  00FE8D  0000               	dw	0
    99  00FE8F  0064               	dw	100
   100  00FE91  0000               	dw	0
   101  00FE93  03E8               	dw	1000
   102  00FE95  0000               	dw	0
   103  00FE97  2710               	dw	10000
   104  00FE99  0000               	dw	0
   105  00FE9B  86A0               	dw	34464
   106  00FE9D  0001               	dw	1
   107  00FE9F  4240               	dw	16960
   108  00FEA1  000F               	dw	15
   109  00FEA3  9680               	dw	38528
   110  00FEA5  0098               	dw	152
   111  00FEA7  E100               	dw	57600
   112  00FEA9  05F5               	dw	1525
   113  00FEAB  CA00               	dw	51712
   114  00FEAD  3B9A               	dw	15258
   115  00FEAF                     __end_of_dpowers:
   116                           	opt stack 0
   117  00FEAF                     __powers_:
   118                           	opt stack 0
   119  00FEAF  00                 	db	0
   120  00FEB0  80                 	db	128
   121  00FEB1  3F                 	db	63
   122  00FEB2  00                 	db	0
   123  00FEB3  20                 	db	32
   124  00FEB4  41                 	db	65
   125  00FEB5  00                 	db	0
   126  00FEB6  C8                 	db	200
   127  00FEB7  42                 	db	66
   128  00FEB8  00                 	db	0
   129  00FEB9  7A                 	db	122
   130  00FEBA  44                 	db	68
   131  00FEBB  40                 	db	64
   132  00FEBC  1C                 	db	28
   133  00FEBD  46                 	db	70
   134  00FEBE  50                 	db	80
   135  00FEBF  C3                 	db	195
   136  00FEC0  47                 	db	71
   137  00FEC1  24                 	db	36
   138  00FEC2  74                 	db	116
   139  00FEC3  49                 	db	73
   140  00FEC4  97                 	db	151
   141  00FEC5  18                 	db	24
   142  00FEC6  4B                 	db	75
   143  00FEC7  BC                 	db	188
   144  00FEC8  BE                 	db	190
   145  00FEC9  4C                 	db	76
   146  00FECA  6B                 	db	107
   147  00FECB  6E                 	db	110
   148  00FECC  4E                 	db	78
   149  00FECD  03                 	db	3
   150  00FECE  15                 	db	21
   151  00FECF  50                 	db	80
   152  00FED0  79                 	db	121
   153  00FED1  AD                 	db	173
   154  00FED2  60                 	db	96
   155  00FED3  F3                 	db	243
   156  00FED4  49                 	db	73
   157  00FED5  71                 	db	113
   158  00FED6                     __end_of__powers_:
   159                           	opt stack 0
   160  00FED6                     __npowers_:
   161                           	opt stack 0
   162  00FED6  00                 	db	0
   163  00FED7  80                 	db	128
   164  00FED8  3F                 	db	63
   165  00FED9  CD                 	db	205
   166  00FEDA  CC                 	db	204
   167  00FEDB  3D                 	db	61
   168  00FEDC  D7                 	db	215
   169  00FEDD  23                 	db	35
   170  00FEDE  3C                 	db	60
   171  00FEDF  12                 	db	18
   172  00FEE0  83                 	db	131
   173  00FEE1  3A                 	db	58
   174  00FEE2  B7                 	db	183
   175  00FEE3  D1                 	db	209
   176  00FEE4  38                 	db	56
   177  00FEE5  C6                 	db	198
   178  00FEE6  27                 	db	39
   179  00FEE7  37                 	db	55
   180  00FEE8  38                 	db	56
   181  00FEE9  86                 	db	134
   182  00FEEA  35                 	db	53
   183  00FEEB  C0                 	db	192
   184  00FEEC  D6                 	db	214
   185  00FEED  33                 	db	51
   186  00FEEE  CC                 	db	204
   187  00FEEF  2B                 	db	43
   188  00FEF0  32                 	db	50
   189  00FEF1  70                 	db	112
   190  00FEF2  89                 	db	137
   191  00FEF3  30                 	db	48
   192  00FEF4  E7                 	db	231
   193  00FEF5  DB                 	db	219
   194  00FEF6  2E                 	db	46
   195  00FEF7  E5                 	db	229
   196  00FEF8  3C                 	db	60
   197  00FEF9  1E                 	db	30
   198  00FEFA  42                 	db	66
   199  00FEFB  A2                 	db	162
   200  00FEFC  0D                 	db	13
   201  00FEFD                     __end_of__npowers_:
   202                           	opt stack 0
   203  00FEFD                     _LCD_LEFT:
   204                           	opt stack 0
   205  00FEFD  00                 	db	0
   206  00FEFE                     __end_of_LCD_LEFT:
   207                           	opt stack 0
   208  00FEFE                     _LCD_RIGHT:
   209                           	opt stack 0
   210  00FEFE  01                 	db	1
   211  00FEFF                     __end_of_LCD_RIGHT:
   212                           	opt stack 0
   213  00FEFF                     _LCD_SIZE_VERT:
   214                           	opt stack 0
   215  00FEFF  02                 	db	2
   216  00FF00                     __end_of_LCD_SIZE_VERT:
   217                           	opt stack 0
   218  00FF00                     _LCD_SIZE_HORZ:
   219                           	opt stack 0
   220  00FF00  10                 	db	16
   221  00FF01                     __end_of_LCD_SIZE_HORZ:
   222                           	opt stack 0
   223  00FF01                     _LCD_VERT_LIMIT:
   224                           	opt stack 0
   225  00FF01  02                 	db	2
   226  00FF02                     __end_of_LCD_VERT_LIMIT:
   227                           	opt stack 0
   228  00FF02                     _LCD_HORZ_LIMIT:
   229                           	opt stack 0
   230  00FF02  28                 	db	40
   231  00FF03                     __end_of_LCD_HORZ_LIMIT:
   232                           	opt stack 0
   233  0000                     _INTCONbits	set	4082
   234  0000                     _LATDbits	set	3980
   235  0000                     _ADCON1	set	4033
   236  0000                     _ADCON0	set	4034
   237  0000                     _TRISE	set	3990
   238  0000                     _TRISD	set	3989
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISA	set	3986
   242  0000                     _LATE	set	3981
   243  0000                     _LATD	set	3980
   244  0000                     _LATC	set	3979
   245  0000                     _LATB	set	3978
   246  0000                     _LATA	set	3977
   247  00FF03                     STR_22:
   248  00FF03  48                 	db	72	;'H'
   249  00FF04  65                 	db	101	;'e'
   250  00FF05  6C                 	db	108	;'l'
   251  00FF06  6C                 	db	108	;'l'
   252  00FF07  6F                 	db	111	;'o'
   253  00FF08  20                 	db	32
   254  00FF09  77                 	db	119	;'w'
   255  00FF0A  6F                 	db	111	;'o'
   256  00FF0B  72                 	db	114	;'r'
   257  00FF0C  6C                 	db	108	;'l'
   258  00FF0D  64                 	db	100	;'d'
   259  00FF0E  21                 	db	33
   260  00FF0F  20                 	db	32
   261  00FF10  20                 	db	32
   262  00FF11  20                 	db	32
   263  00FF12  20                 	db	32
   264  00FF13  00                 	db	0
   265  00FF14                     STR_17:
   266  00FF14  63                 	db	99	;'c'
   267  00FF15  61                 	db	97	;'a'
   268  00FF16  6E                 	db	110	;'n'
   269  00FF17  20                 	db	32
   270  00FF18  62                 	db	98	;'b'
   271  00FF19  65                 	db	101	;'e'
   272  00FF1A  20                 	db	32
   273  00FF1B  73                 	db	115	;'s'
   274  00FF1C  70                 	db	112	;'p'
   275  00FF1D  65                 	db	101	;'e'
   276  00FF1E  63                 	db	99	;'c'
   277  00FF1F  69                 	db	105	;'i'
   278  00FF20  66                 	db	102	;'f'
   279  00FF21  69                 	db	105	;'i'
   280  00FF22  65                 	db	101	;'e'
   281  00FF23  64                 	db	100	;'d'
   282  00FF24  00                 	db	0
   283  00FF25                     STR_8:
   284  00FF25  43                 	db	67	;'C'
   285  00FF26  75                 	db	117	;'u'
   286  00FF27  72                 	db	114	;'r'
   287  00FF28  73                 	db	115	;'s'
   288  00FF29  6F                 	db	111	;'o'
   289  00FF2A  72                 	db	114	;'r'
   290  00FF2B  20                 	db	32
   291  00FF2C  62                 	db	98	;'b'
   292  00FF2D  6C                 	db	108	;'l'
   293  00FF2E  69                 	db	105	;'i'
   294  00FF2F  6E                 	db	110	;'n'
   295  00FF30  6B                 	db	107	;'k'
   296  00FF31  20                 	db	32
   297  00FF32  63                 	db	99	;'c'
   298  00FF33  61                 	db	97	;'a'
   299  00FF34  6E                 	db	110	;'n'
   300  00FF35  00                 	db	0
   301  00FF36                     STR_15:
   302  00FF36  6C                 	db	108	;'l'
   303  00FF37  69                 	db	105	;'i'
   304  00FF38  6B                 	db	107	;'k'
   305  00FF39  65                 	db	101	;'e'
   306  00FF3A  6C                 	db	108	;'l'
   307  00FF3B  79                 	db	121	;'y'
   308  00FF3C  20                 	db	32
   309  00FF3D  73                 	db	115	;'s'
   310  00FF3E  74                 	db	116	;'t'
   311  00FF3F  61                 	db	97	;'a'
   312  00FF40  79                 	db	121	;'y'
   313  00FF41  20                 	db	32
   314  00FF42  6F                 	db	111	;'o'
   315  00FF43  6E                 	db	110	;'n'
   316  00FF44  21                 	db	33
   317  00FF45  00                 	db	0
   318  00FF46                     STR_16:
   319  00FF46  43                 	db	67	;'C'
   320  00FF47  75                 	db	117	;'u'
   321  00FF48  72                 	db	114	;'r'
   322  00FF49  73                 	db	115	;'s'
   323  00FF4A  6F                 	db	111	;'o'
   324  00FF4B  72                 	db	114	;'r'
   325  00FF4C  20                 	db	32
   326  00FF4D  70                 	db	112	;'p'
   327  00FF4E  6F                 	db	111	;'o'
   328  00FF4F  73                 	db	115	;'s'
   329  00FF50  69                 	db	105	;'i'
   330  00FF51  74                 	db	116	;'t'
   331  00FF52  69                 	db	105	;'i'
   332  00FF53  6F                 	db	111	;'o'
   333  00FF54  6E                 	db	110	;'n'
   334  00FF55  00                 	db	0
   335  00FF56                     STR_20:
   336  00FF56  44                 	db	68	;'D'
   337  00FF57  69                 	db	105	;'i'
   338  00FF58  73                 	db	115	;'s'
   339  00FF59  70                 	db	112	;'p'
   340  00FF5A  6C                 	db	108	;'l'
   341  00FF5B  61                 	db	97	;'a'
   342  00FF5C  79                 	db	121	;'y'
   343  00FF5D  20                 	db	32
   344  00FF5E  63                 	db	99	;'c'
   345  00FF5F  61                 	db	97	;'a'
   346  00FF60  6E                 	db	110	;'n'
   347  00FF61  20                 	db	32
   348  00FF62  62                 	db	98	;'b'
   349  00FF63  65                 	db	101	;'e'
   350  00FF64  00                 	db	0
   351  00FF65                     STR_2:
   352  00FF65  54                 	db	84	;'T'
   353  00FF66  65                 	db	101	;'e'
   354  00FF67  78                 	db	120	;'x'
   355  00FF68  74                 	db	116	;'t'
   356  00FF69  20                 	db	32
   357  00FF6A  63                 	db	99	;'c'
   358  00FF6B  61                 	db	97	;'a'
   359  00FF6C  6E                 	db	110	;'n'
   360  00FF6D  20                 	db	32
   361  00FF6E  62                 	db	98	;'b'
   362  00FF6F  65                 	db	101	;'e'
   363  00FF70  20                 	db	32
   364  00FF71  6F                 	db	111	;'o'
   365  00FF72  6E                 	db	110	;'n'
   366  00FF73  00                 	db	0
   367  00FF74                     STR_3:
   368  00FF74  6D                 	db	109	;'m'
   369  00FF75  75                 	db	117	;'u'
   370  00FF76  6C                 	db	108	;'l'
   371  00FF77  74                 	db	116	;'t'
   372  00FF78  69                 	db	105	;'i'
   373  00FF79  70                 	db	112	;'p'
   374  00FF7A  6C                 	db	108	;'l'
   375  00FF7B  65                 	db	101	;'e'
   376  00FF7C  20                 	db	32
   377  00FF7D  6C                 	db	108	;'l'
   378  00FF7E  69                 	db	105	;'i'
   379  00FF7F  6E                 	db	110	;'n'
   380  00FF80  65                 	db	101	;'e'
   381  00FF81  73                 	db	115	;'s'
   382  00FF82  00                 	db	0
   383  00FF83                     STR_14:
   384  00FF83  42                 	db	66	;'B'
   385  00FF84  75                 	db	117	;'u'
   386  00FF85  74                 	db	116	;'t'
   387  00FF86  20                 	db	32
   388  00FF87  74                 	db	116	;'t'
   389  00FF88  68                 	db	104	;'h'
   390  00FF89  61                 	db	97	;'a'
   391  00FF8A  74                 	db	116	;'t'
   392  00FF8B  20                 	db	32
   393  00FF8C  77                 	db	119	;'w'
   394  00FF8D  69                 	db	105	;'i'
   395  00FF8E  6C                 	db	108	;'l'
   396  00FF8F  6C                 	db	108	;'l'
   397  00FF90  00                 	db	0
   398  00FF91                     STR_1:
   399  00FF91  48                 	db	72	;'H'
   400  00FF92  65                 	db	101	;'e'
   401  00FF93  6C                 	db	108	;'l'
   402  00FF94  6C                 	db	108	;'l'
   403  00FF95  6F                 	db	111	;'o'
   404  00FF96  20                 	db	32
   405  00FF97  77                 	db	119	;'w'
   406  00FF98  6F                 	db	111	;'o'
   407  00FF99  72                 	db	114	;'r'
   408  00FF9A  6C                 	db	108	;'l'
   409  00FF9B  64                 	db	100	;'d'
   410  00FF9C  21                 	db	33
   411  00FF9D  00                 	db	0
   412  00FF9E                     STR_4:
   413  00FF9E  49                 	db	73	;'I'
   414  00FF9F  6E                 	db	110	;'n'
   415  00FFA0  74                 	db	116	;'t'
   416  00FFA1  65                 	db	101	;'e'
   417  00FFA2  67                 	db	103	;'g'
   418  00FFA3  65                 	db	101	;'e'
   419  00FFA4  72                 	db	114	;'r'
   420  00FFA5  3A                 	db	58	;':'
   421  00FFA6  20                 	db	32
   422  00FFA7  25                 	db	37
   423  00FFA8  64                 	db	100	;'d'
   424  00FFA9  00                 	db	0
   425  00FFAA                     STR_9:
   426  00FFAA  62                 	db	98	;'b'
   427  00FFAB  65                 	db	101	;'e'
   428  00FFAC  20                 	db	32
   429  00FFAD  74                 	db	116	;'t'
   430  00FFAE  6F                 	db	111	;'o'
   431  00FFAF  67                 	db	103	;'g'
   432  00FFB0  67                 	db	103	;'g'
   433  00FFB1  6C                 	db	108	;'l'
   434  00FFB2  65                 	db	101	;'e'
   435  00FFB3  64                 	db	100	;'d'
   436  00FFB4  00                 	db	0
   437  00FFB5                     STR_10:
   438  00FFB5  41                 	db	65	;'A'
   439  00FFB6  73                 	db	115	;'s'
   440  00FFB7  20                 	db	32
   441  00FFB8  63                 	db	99	;'c'
   442  00FFB9  61                 	db	97	;'a'
   443  00FFBA  6E                 	db	110	;'n'
   444  00FFBB  20                 	db	32
   445  00FFBC  74                 	db	116	;'t'
   446  00FFBD  68                 	db	104	;'h'
   447  00FFBE  65                 	db	101	;'e'
   448  00FFBF  00                 	db	0
   449  00FFC0                     STR_7:
   450  00FFC0  43                 	db	67	;'C'
   451  00FFC1  68                 	db	104	;'h'
   452  00FFC2  61                 	db	97	;'a'
   453  00FFC3  72                 	db	114	;'r'
   454  00FFC4  5B                 	db	91	;'['
   455  00FFC5  5D                 	db	93	;']'
   456  00FFC6  3A                 	db	58	;':'
   457  00FFC7  20                 	db	32
   458  00FFC8  25                 	db	37
   459  00FFC9  73                 	db	115	;'s'
   460  00FFCA  00                 	db	0
   461  00FFCB                     STR_5:
   462  00FFCB  46                 	db	70	;'F'
   463  00FFCC  6C                 	db	108	;'l'
   464  00FFCD  6F                 	db	111	;'o'
   465  00FFCE  61                 	db	97	;'a'
   466  00FFCF  74                 	db	116	;'t'
   467  00FFD0  3A                 	db	58	;':'
   468  00FFD1  20                 	db	32
   469  00FFD2  25                 	db	37
   470  00FFD3  66                 	db	102	;'f'
   471  00FFD4  00                 	db	0
   472  00FFD5                     STR_6:
   473  00FFD5  4C                 	db	76	;'L'
   474  00FFD6  6F                 	db	111	;'o'
   475  00FFD7  6E                 	db	110	;'n'
   476  00FFD8  67                 	db	103	;'g'
   477  00FFD9  3A                 	db	58	;':'
   478  00FFDA  20                 	db	32
   479  00FFDB  25                 	db	37
   480  00FFDC  6C                 	db	108	;'l'
   481  00FFDD  75                 	db	117	;'u'
   482  00FFDE  00                 	db	0
   483  00FFDF                     STR_11:
   484  00FFDF  63                 	db	99	;'c'
   485  00FFE0  75                 	db	117	;'u'
   486  00FFE1  72                 	db	114	;'r'
   487  00FFE2  73                 	db	115	;'s'
   488  00FFE3  6F                 	db	111	;'o'
   489  00FFE4  72                 	db	114	;'r'
   490  00FFE5  21                 	db	33
   491  00FFE6  00                 	db	0
   492  00FFE7                     STR_21:
   493  00FFE7  73                 	db	115	;'s'
   494  00FFE8  68                 	db	104	;'h'
   495  00FFE9  69                 	db	105	;'i'
   496  00FFEA  66                 	db	102	;'f'
   497  00FFEB  74                 	db	116	;'t'
   498  00FFEC  65                 	db	101	;'e'
   499  00FFED  64                 	db	100	;'d'
   500  00FFEE  00                 	db	0
   501  00FFEF                     STR_13:
   502  00FFEF  64                 	db	100	;'d'
   503  00FFF0  69                 	db	105	;'i'
   504  00FFF1  73                 	db	115	;'s'
   505  00FFF2  70                 	db	112	;'p'
   506  00FFF3  6C                 	db	108	;'l'
   507  00FFF4  61                 	db	97	;'a'
   508  00FFF5  79                 	db	121	;'y'
   509  00FFF6  00                 	db	0
   510  00FFF7                     STR_23:
   511  00FFF7  28                 	db	40
   512  00FFF8  6E                 	db	110	;'n'
   513  00FFF9  75                 	db	117	;'u'
   514  00FFFA  6C                 	db	108	;'l'
   515  00FFFB  6C                 	db	108	;'l'
   516  00FFFC  29                 	db	41
   517  00FFFD  00                 	db	0
   518  0000                     
   519                           ; #config settings
   520  00FFFE  00                 	db	0	; dummy byte at the end
   521  0000                     
   522                           	psect	cinit
   523  00DE66                     __pcinit:
   524                           	opt stack 0
   525  00DE66                     start_initialization:
   526                           	opt stack 0
   527  00DE66                     __initialization:
   528                           	opt stack 0
   529                           
   530                           ; Initialize objects allocated to COMRAM (7 bytes)
   531                           ; load TBLPTR registers with __pidataCOMRAM
   532  00DE66  0E8B               	movlw	low __pidataCOMRAM
   533  00DE68  6EF6               	movwf	tblptrl,c
   534  00DE6A  0EDD               	movlw	high __pidataCOMRAM
   535  00DE6C  6EF7               	movwf	tblptrh,c
   536  00DE6E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   537  00DE70  6EF8               	movwf	tblptru,c
   538  00DE72  EE00  F075         	lfsr	0,__pdataCOMRAM
   539  00DE76  EE10 F007          	lfsr	1,7
   540  00DE7A                     copy_data0:
   541  00DE7A  0009               	tblrd		*+
   542  00DE7C  CFF5 FFEE          	movff	tablat,postinc0
   543  00DE80  50E5               	movf	postdec1,w,c
   544  00DE82  50E1               	movf	fsr1l,w,c
   545  00DE84  E1FA               	bnz	copy_data0
   546                           
   547                           ; Clear objects allocated to COMRAM (2 bytes)
   548  00DE86  6A7D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   549  00DE88  6A7C               	clrf	__pbssCOMRAM& (0+255),c
   550  00DE8A                     end_of_initialization:
   551                           	opt stack 0
   552  00DE8A                     __end_of__initialization:
   553                           	opt stack 0
   554  00DE8A  0100               	movlb	0
   555  00DE8C  EFED  F077         	goto	_main	;jump to C main() function
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           postinc0	equ	0xFEE
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	bssCOMRAM
   565  00007C                     __pbssCOMRAM:
   566                           	opt stack 0
   567  00007C                     lcd@LCDinterruptState:
   568                           	opt stack 0
   569  00007C                     	ds	1
   570  00007D                     	ds	1
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           postdec1	equ	0xFE5
   577                           fsr1l	equ	0xFE1
   578                           
   579                           	psect	dataCOMRAM
   580  000075                     __pdataCOMRAM:
   581                           	opt stack 0
   582  000075                     main@F2986:
   583                           	opt stack 0
   584  000075                     	ds	7
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	cstackCOMRAM
   594  000001                     __pcstackCOMRAM:
   595                           	opt stack 0
   596  000001                     ?___awmod:
   597                           	opt stack 0
   598  000001                     ?___ftpack:
   599                           	opt stack 0
   600  000001                     ?___ftneg:
   601                           	opt stack 0
   602  000001                     ?__tdiv_to_l_:
   603                           	opt stack 0
   604  000001                     ?__div_to_l_:
   605                           	opt stack 0
   606  000001                     ?___lldiv:
   607                           	opt stack 0
   608  000001                     lcdNibble@temp:
   609                           	opt stack 0
   610  000001                     ___lbmod@divisor:
   611                           	opt stack 0
   612  000001                     ___awmod@dividend:
   613                           	opt stack 0
   614  000001                     __div_to_l_@f1:
   615                           	opt stack 0
   616  000001                     ___ftpack@arg:
   617                           	opt stack 0
   618  000001                     __tdiv_to_l_@f1:
   619                           	opt stack 0
   620  000001                     ___ftge@ff1:
   621                           	opt stack 0
   622  000001                     ___ftneg@f1:
   623                           	opt stack 0
   624  000001                     ___lldiv@dividend:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x0
   628  000001                     	ds	1
   629  000002                     lcdNibble@data:
   630                           	opt stack 0
   631  000002                     ___lbmod@dividend:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x1
   635  000002                     	ds	1
   636  000003                     lcdInst@data:
   637                           	opt stack 0
   638  000003                     putch@data:
   639                           	opt stack 0
   640  000003                     ___lbmod@counter:
   641                           	opt stack 0
   642  000003                     ___awmod@divisor:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x2
   646  000003                     	ds	1
   647  000004                     ??_initLCD:
   648  000004                     lcd_shift_cursor@direction:
   649                           	opt stack 0
   650  000004                     lcd_shift_display@direction:
   651                           	opt stack 0
   652  000004                     ___ftpack@exp:
   653                           	opt stack 0
   654  000004                     ___lbmod@rem:
   655                           	opt stack 0
   656  000004                     __div_to_l_@f2:
   657                           	opt stack 0
   658  000004                     __tdiv_to_l_@f2:
   659                           	opt stack 0
   660  000004                     ___ftge@ff2:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x3
   664  000004                     	ds	1
   665  000005                     lcd_shift_cursor@numChars:
   666                           	opt stack 0
   667  000005                     lcd_shift_display@numChars:
   668                           	opt stack 0
   669  000005                     ___awmod@counter:
   670                           	opt stack 0
   671  000005                     ___ftpack@sign:
   672                           	opt stack 0
   673  000005                     ___lldiv@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x4
   677  000005                     	ds	1
   678  000006                     ??___ftpack:
   679  000006                     lcd_shift_cursor@n:
   680                           	opt stack 0
   681  000006                     lcd_shift_display@n:
   682                           	opt stack 0
   683  000006                     ___awmod@sign:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x5
   687  000006                     	ds	1
   688  000007                     ??__tdiv_to_l_:
   689  000007                     ??___ftge:
   690  000007                     ?___awdiv:
   691                           	opt stack 0
   692  000007                     lcd_set_cursor@y:
   693                           	opt stack 0
   694  000007                     ___awdiv@dividend:
   695                           	opt stack 0
   696  000007                     __div_to_l_@quot:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x6
   700  000007                     	ds	1
   701  000008                     ??_lcd_set_cursor:
   702                           
   703                           ; 1 bytes @ 0x7
   704  000008                     	ds	1
   705  000009                     ?___lltoft:
   706                           	opt stack 0
   707  000009                     lcd_set_cursor@x:
   708                           	opt stack 0
   709  000009                     ___awdiv@divisor:
   710                           	opt stack 0
   711  000009                     ___lldiv@quotient:
   712                           	opt stack 0
   713  000009                     ___lltoft@c:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x8
   717  000009                     	ds	1
   718  00000A                     lcd_set_cursor@i:
   719                           	opt stack 0
   720  00000A                     __tdiv_to_l_@quot:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x9
   724  00000A                     	ds	1
   725  00000B                     ___awdiv@counter:
   726                           	opt stack 0
   727  00000B                     __div_to_l_@cntr:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0xA
   731  00000B                     	ds	1
   732  00000C                     ___awdiv@sign:
   733                           	opt stack 0
   734  00000C                     __div_to_l_@exp1:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0xB
   738  00000C                     	ds	1
   739  00000D                     ??___lltoft:
   740  00000D                     ___lldiv@counter:
   741                           	opt stack 0
   742  00000D                     ___awdiv@quotient:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0xC
   746  00000D                     	ds	1
   747  00000E                     ?___llmod:
   748                           	opt stack 0
   749  00000E                     __tdiv_to_l_@cntr:
   750                           	opt stack 0
   751  00000E                     ___llmod@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0xD
   755  00000E                     	ds	1
   756  00000F                     ?___wmul:
   757                           	opt stack 0
   758  00000F                     __tdiv_to_l_@exp1:
   759                           	opt stack 0
   760  00000F                     ___wmul@multiplier:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xE
   764  00000F                     	ds	2
   765  000011                     ___lltoft@exp:
   766                           	opt stack 0
   767  000011                     ___wmul@multiplicand:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x10
   771  000011                     	ds	1
   772  000012                     ___llmod@divisor:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x11
   776  000012                     	ds	1
   777  000013                     ___wmul@product:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x12
   781  000013                     	ds	2
   782  000015                     ?___ftmul:
   783                           	opt stack 0
   784  000015                     ___ftmul@f1:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x14
   788  000015                     	ds	1
   789  000016                     ___llmod@counter:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x15
   793  000016                     	ds	2
   794  000018                     ___ftmul@f2:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x17
   798  000018                     	ds	3
   799  00001B                     ??___ftmul:
   800                           
   801                           ; 1 bytes @ 0x1A
   802  00001B                     	ds	3
   803  00001E                     ___ftmul@exp:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1D
   807  00001E                     	ds	1
   808  00001F                     ___ftmul@f3_as_product:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x1E
   812  00001F                     	ds	3
   813  000022                     ___ftmul@cntr:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x21
   817  000022                     	ds	1
   818  000023                     ___ftmul@sign:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x22
   822  000023                     	ds	1
   823  000024                     ?_fround:
   824                           	opt stack 0
   825  000024                     ?_scale:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x23
   829  000024                     	ds	3
   830  000027                     _fround$860:
   831                           	opt stack 0
   832  000027                     _scale$861:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x26
   836  000027                     	ds	3
   837  00002A                     scale@scl:
   838                           	opt stack 0
   839  00002A                     _fround$859:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x29
   843  00002A                     	ds	1
   844  00002B                     ?___fttol:
   845                           	opt stack 0
   846  00002B                     ___fttol@f1:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x2A
   850  00002B                     	ds	2
   851  00002D                     fround@prec:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x2C
   855  00002D                     	ds	1
   856  00002E                     ?___ftadd:
   857                           	opt stack 0
   858  00002E                     ___ftadd@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x2D
   862  00002E                     	ds	1
   863  00002F                     ??___fttol:
   864                           
   865                           ; 1 bytes @ 0x2E
   866  00002F                     	ds	2
   867  000031                     ___ftadd@f2:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x30
   871  000031                     	ds	3
   872  000034                     ??___ftadd:
   873  000034                     ___fttol@sign1:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x33
   877  000034                     	ds	1
   878  000035                     ___fttol@lval:
   879                           	opt stack 0
   880                           
   881                           ; 4 bytes @ 0x34
   882  000035                     	ds	2
   883  000037                     ___ftadd@sign:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x36
   887  000037                     	ds	1
   888  000038                     ___ftadd@exp2:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x37
   892  000038                     	ds	1
   893  000039                     ___ftadd@exp1:
   894                           	opt stack 0
   895  000039                     ___fttol@exp1:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x38
   899  000039                     	ds	1
   900  00003A                     ?___ftsub:
   901                           	opt stack 0
   902  00003A                     ___ftsub@f1:
   903                           	opt stack 0
   904                           
   905                           ; 3 bytes @ 0x39
   906  00003A                     	ds	3
   907  00003D                     ___ftsub@f2:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x3C
   911  00003D                     	ds	3
   912  000040                     ?_printf:
   913                           	opt stack 0
   914  000040                     printf@f:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x3F
   918  000040                     	ds	6
   919  000046                     ??_printf:
   920                           
   921                           ; 1 bytes @ 0x45
   922  000046                     	ds	6
   923  00004C                     _printf$862:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x4B
   927  00004C                     	ds	3
   928  00004F                     printf@cp:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x4E
   932  00004F                     	ds	2
   933  000051                     printf@flag:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x50
   937  000051                     	ds	2
   938  000053                     printf@ap:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x52
   942  000053                     	ds	2
   943  000055                     printf@prec:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x54
   947  000055                     	ds	2
   948  000057                     printf@exp:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x56
   952  000057                     	ds	2
   953  000059                     printf@val:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x58
   957  000059                     	ds	4
   958  00005D                     printf@tmpval:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x5C
   962  00005D                     	ds	4
   963  000061                     printf@fval:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0x60
   967  000061                     	ds	3
   968  000064                     printf@c:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x63
   972  000064                     	ds	1
   973  000065                     ??_main:
   974                           
   975                           ; 1 bytes @ 0x64
   976  000065                     	ds	2
   977  000067                     main@arr:
   978                           	opt stack 0
   979                           
   980                           ; 7 bytes @ 0x66
   981  000067                     	ds	7
   982  00006E                     main@i:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x6D
   986  00006E                     	ds	1
   987  00006F                     _main$858:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x6E
   991  00006F                     	ds	2
   992  000071                     main@i_108:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x70
   996  000071                     	ds	1
   997  000072                     main@i_110:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x71
  1001  000072                     	ds	1
  1002  000073                     main@numShifts:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x72
  1006  000073                     	ds	1
  1007  000074                     main@x:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x73
  1011  000074                     	ds	1
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 19 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  i               1  113[COMRAM] unsigned char 
  1030 ;;  i               1  112[COMRAM] unsigned char 
  1031 ;;  i               1  109[COMRAM] unsigned char 
  1032 ;;  x               1  115[COMRAM] unsigned char 
  1033 ;;  arr             7  102[COMRAM] unsigned char [7]
  1034 ;;  numShifts       1  114[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;Total ram usage:       16 bytes
  1049 ;; Hardware stack levels required when called:    4
  1050 ;; This function calls:
  1051 ;;		___awmod
  1052 ;;		___lbmod
  1053 ;;		_initLCD
  1054 ;;		_lcdInst
  1055 ;;		_lcd_set_cursor
  1056 ;;		_lcd_shift_display
  1057 ;;		_printf
  1058 ;;		_putch
  1059 ;; This function is called by:
  1060 ;;		Startup code after reset
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text0
  1065  00EFDA                     __ptext0:
  1066                           	opt stack 0
  1067  00EFDA                     _main:
  1068                           	opt stack 27
  1069                           
  1070                           ;main.c: 25: LATA = 0x00;
  1071                           
  1072                           ;incstack = 0
  1073  00EFDA  0E00               	movlw	0
  1074  00EFDC  6E89               	movwf	3977,c	;volatile
  1075                           
  1076                           ;main.c: 26: LATB = 0x00;
  1077  00EFDE  0E00               	movlw	0
  1078  00EFE0  6E8A               	movwf	3978,c	;volatile
  1079                           
  1080                           ;main.c: 27: LATC = 0x00;
  1081  00EFE2  0E00               	movlw	0
  1082  00EFE4  6E8B               	movwf	3979,c	;volatile
  1083                           
  1084                           ;main.c: 28: LATD = 0x00;
  1085  00EFE6  0E00               	movlw	0
  1086  00EFE8  6E8C               	movwf	3980,c	;volatile
  1087                           
  1088                           ;main.c: 29: LATE = 0x00;
  1089  00EFEA  0E00               	movlw	0
  1090  00EFEC  6E8D               	movwf	3981,c	;volatile
  1091                           
  1092                           ;main.c: 33: TRISA = 0xFF;
  1093  00EFEE  6892               	setf	3986,c	;volatile
  1094                           
  1095                           ;main.c: 34: TRISB = 0xFF;
  1096  00EFF0  6893               	setf	3987,c	;volatile
  1097                           
  1098                           ;main.c: 35: TRISC = 0x00;
  1099  00EFF2  0E00               	movlw	0
  1100  00EFF4  6E94               	movwf	3988,c	;volatile
  1101                           
  1102                           ;main.c: 36: TRISD = 0x00;
  1103  00EFF6  0E00               	movlw	0
  1104  00EFF8  6E95               	movwf	3989,c	;volatile
  1105                           
  1106                           ;main.c: 37: TRISE = 0x00;
  1107  00EFFA  0E00               	movlw	0
  1108  00EFFC  6E96               	movwf	3990,c	;volatile
  1109                           
  1110                           ;main.c: 40: ADCON0 = 0x00;
  1111  00EFFE  0E00               	movlw	0
  1112  00F000  6EC2               	movwf	4034,c	;volatile
  1113                           
  1114                           ;main.c: 41: ADCON1 = 0b00001111;
  1115  00F002  0E0F               	movlw	15
  1116  00F004  6EC1               	movwf	4033,c	;volatile
  1117                           
  1118                           ;main.c: 45: initLCD();
  1119  00F006  EC85  F06F         	call	_initLCD	;wreg free
  1120                           
  1121                           ;main.c: 48: printf("Hello world!");
  1122  00F00A  0E91               	movlw	low STR_1
  1123  00F00C  6E40               	movwf	printf@f,c
  1124  00F00E  0EFF               	movlw	high STR_1
  1125  00F010  6E41               	movwf	printf@f+1,c
  1126  00F012  EC42  F07B         	call	_printf	;wreg free
  1127                           
  1128                           ;main.c: 49: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1129  00F016  0E66               	movlw	102
  1130  00F018  6E66               	movwf	(??_main+1)& (0+255),c
  1131  00F01A  0E76               	movlw	118
  1132  00F01C  6E65               	movwf	??_main& (0+255),c
  1133  00F01E  0EC1               	movlw	193
  1134  00F020                     u2917:
  1135  00F020  2EE8               	decfsz	wreg,f,c
  1136  00F022  D7FE               	bra	u2917
  1137  00F024  2E65               	decfsz	??_main& (0+255),f,c
  1138  00F026  D7FC               	bra	u2917
  1139  00F028  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1140  00F02A  D7FA               	bra	u2917
  1141  00F02C  D329               	goto	L1
  1142  00F02E                     l2925:
  1143                           
  1144                           ;main.c: 54: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1145  00F02E  0E01               	movlw	1
  1146  00F030  ECC9  F06E         	call	_lcdInst
  1147  00F034  0EC3               	movlw	195
  1148  00F036  6E65               	movwf	??_main& (0+255),c
  1149  00F038  0ECD               	movlw	205
  1150  00F03A                     u2927:
  1151  00F03A  2EE8               	decfsz	wreg,f,c
  1152  00F03C  D7FE               	bra	u2927
  1153  00F03E  2E65               	decfsz	??_main& (0+255),f,c
  1154  00F040  D7FC               	bra	u2927
  1155  00F042  F000               	nop	
  1156                           
  1157                           ;main.c: 55: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1158  00F044  0E80               	movlw	128
  1159  00F046  ECC9  F06E         	call	_lcdInst
  1160  00F04A  0E41               	movlw	65
  1161  00F04C  6E65               	movwf	??_main& (0+255),c
  1162  00F04E  0EEE               	movlw	238
  1163  00F050                     u2937:
  1164  00F050  2EE8               	decfsz	wreg,f,c
  1165  00F052  D7FE               	bra	u2937
  1166  00F054  2E65               	decfsz	??_main& (0+255),f,c
  1167  00F056  D7FC               	bra	u2937
  1168  00F058  D000               	nop2	
  1169                           
  1170                           ;main.c: 56: printf("Text can be on");
  1171  00F05A  0E65               	movlw	low STR_2
  1172  00F05C  6E40               	movwf	printf@f,c
  1173  00F05E  0EFF               	movlw	high STR_2
  1174  00F060  6E41               	movwf	printf@f+1,c
  1175  00F062  EC42  F07B         	call	_printf	;wreg free
  1176                           
  1177                           ;main.c: 57: lcdInst(0xC0);;
  1178  00F066  0EC0               	movlw	192
  1179  00F068  ECC9  F06E         	call	_lcdInst
  1180                           
  1181                           ;main.c: 58: printf("multiple lines");
  1182  00F06C  0E74               	movlw	low STR_3
  1183  00F06E  6E40               	movwf	printf@f,c
  1184  00F070  0EFF               	movlw	high STR_3
  1185  00F072  6E41               	movwf	printf@f+1,c
  1186  00F074  EC42  F07B         	call	_printf	;wreg free
  1187                           
  1188                           ;main.c: 59: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1189  00F078  0E66               	movlw	102
  1190  00F07A  6E66               	movwf	(??_main+1)& (0+255),c
  1191  00F07C  0E76               	movlw	118
  1192  00F07E  6E65               	movwf	??_main& (0+255),c
  1193  00F080  0EC1               	movlw	193
  1194  00F082                     u2947:
  1195  00F082  2EE8               	decfsz	wreg,f,c
  1196  00F084  D7FE               	bra	u2947
  1197  00F086  2E65               	decfsz	??_main& (0+255),f,c
  1198  00F088  D7FC               	bra	u2947
  1199  00F08A  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1200  00F08C  D7FA               	bra	u2947
  1201  00F08E  F000               	nop	
  1202                           
  1203                           ;main.c: 62: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1204  00F090  0E01               	movlw	1
  1205  00F092  ECC9  F06E         	call	_lcdInst
  1206  00F096  0EC3               	movlw	195
  1207  00F098  6E65               	movwf	??_main& (0+255),c
  1208  00F09A  0ECD               	movlw	205
  1209  00F09C                     u2957:
  1210  00F09C  2EE8               	decfsz	wreg,f,c
  1211  00F09E  D7FE               	bra	u2957
  1212  00F0A0  2E65               	decfsz	??_main& (0+255),f,c
  1213  00F0A2  D7FC               	bra	u2957
  1214  00F0A4  F000               	nop	
  1215                           
  1216                           ;main.c: 63: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1217  00F0A6  0E80               	movlw	128
  1218  00F0A8  ECC9  F06E         	call	_lcdInst
  1219  00F0AC  0E41               	movlw	65
  1220  00F0AE  6E65               	movwf	??_main& (0+255),c
  1221  00F0B0  0EEE               	movlw	238
  1222  00F0B2                     u2967:
  1223  00F0B2  2EE8               	decfsz	wreg,f,c
  1224  00F0B4  D7FE               	bra	u2967
  1225  00F0B6  2E65               	decfsz	??_main& (0+255),f,c
  1226  00F0B8  D7FC               	bra	u2967
  1227  00F0BA  D000               	nop2	
  1228                           
  1229                           ;main.c: 64: printf("Integer: %d", 10);
  1230  00F0BC  0E9E               	movlw	low STR_4
  1231  00F0BE  6E40               	movwf	printf@f,c
  1232  00F0C0  0EFF               	movlw	high STR_4
  1233  00F0C2  6E41               	movwf	printf@f+1,c
  1234  00F0C4  0E00               	movlw	0
  1235  00F0C6  6E43               	movwf	?_printf+3,c
  1236  00F0C8  0E0A               	movlw	10
  1237  00F0CA  6E42               	movwf	?_printf+2,c
  1238  00F0CC  EC42  F07B         	call	_printf	;wreg free
  1239                           
  1240                           ;main.c: 65: lcdInst(0xC0);;
  1241  00F0D0  0EC0               	movlw	192
  1242  00F0D2  ECC9  F06E         	call	_lcdInst
  1243                           
  1244                           ;main.c: 66: printf("Float: %f", 3.14159);
  1245  00F0D6  0ECB               	movlw	low STR_5
  1246  00F0D8  6E40               	movwf	printf@f,c
  1247  00F0DA  0EFF               	movlw	high STR_5
  1248  00F0DC  6E41               	movwf	printf@f+1,c
  1249  00F0DE  0E10               	movlw	16
  1250  00F0E0  6E42               	movwf	?_printf+2,c
  1251  00F0E2  0E49               	movlw	73
  1252  00F0E4  6E43               	movwf	?_printf+3,c
  1253  00F0E6  0E40               	movlw	64
  1254  00F0E8  6E44               	movwf	?_printf+4,c
  1255  00F0EA  EC42  F07B         	call	_printf	;wreg free
  1256                           
  1257                           ;main.c: 67: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1258  00F0EE  0E66               	movlw	102
  1259  00F0F0  6E66               	movwf	(??_main+1)& (0+255),c
  1260  00F0F2  0E76               	movlw	118
  1261  00F0F4  6E65               	movwf	??_main& (0+255),c
  1262  00F0F6  0EC1               	movlw	193
  1263  00F0F8                     u2977:
  1264  00F0F8  2EE8               	decfsz	wreg,f,c
  1265  00F0FA  D7FE               	bra	u2977
  1266  00F0FC  2E65               	decfsz	??_main& (0+255),f,c
  1267  00F0FE  D7FC               	bra	u2977
  1268  00F100  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1269  00F102  D7FA               	bra	u2977
  1270  00F104  F000               	nop	
  1271                           
  1272                           ;main.c: 69: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1273  00F106  0E01               	movlw	1
  1274  00F108  ECC9  F06E         	call	_lcdInst
  1275  00F10C  0EC3               	movlw	195
  1276  00F10E  6E65               	movwf	??_main& (0+255),c
  1277  00F110  0ECD               	movlw	205
  1278  00F112                     u2987:
  1279  00F112  2EE8               	decfsz	wreg,f,c
  1280  00F114  D7FE               	bra	u2987
  1281  00F116  2E65               	decfsz	??_main& (0+255),f,c
  1282  00F118  D7FC               	bra	u2987
  1283  00F11A  F000               	nop	
  1284                           
  1285                           ;main.c: 70: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1286  00F11C  0E80               	movlw	128
  1287  00F11E  ECC9  F06E         	call	_lcdInst
  1288  00F122  0E41               	movlw	65
  1289  00F124  6E65               	movwf	??_main& (0+255),c
  1290  00F126  0EEE               	movlw	238
  1291  00F128                     u2997:
  1292  00F128  2EE8               	decfsz	wreg,f,c
  1293  00F12A  D7FE               	bra	u2997
  1294  00F12C  2E65               	decfsz	??_main& (0+255),f,c
  1295  00F12E  D7FC               	bra	u2997
  1296  00F130  D000               	nop2	
  1297                           
  1298                           ;main.c: 71: printf("Long: %lu", 4291234567);
  1299  00F132  0ED5               	movlw	low STR_6
  1300  00F134  6E40               	movwf	printf@f,c
  1301  00F136  0EFF               	movlw	high STR_6
  1302  00F138  6E41               	movwf	printf@f+1,c
  1303  00F13A  0E07               	movlw	7
  1304  00F13C  6E42               	movwf	?_printf+2,c
  1305  00F13E  0E0B               	movlw	11
  1306  00F140  6E43               	movwf	?_printf+3,c
  1307  00F142  0EC7               	movlw	199
  1308  00F144  6E44               	movwf	?_printf+4,c
  1309  00F146  0EFF               	movlw	255
  1310  00F148  6E45               	movwf	?_printf+5,c
  1311  00F14A  EC42  F07B         	call	_printf	;wreg free
  1312                           
  1313                           ;main.c: 72: lcdInst(0xC0);;
  1314  00F14E  0EC0               	movlw	192
  1315  00F150  ECC9  F06E         	call	_lcdInst
  1316                           
  1317                           ;main.c: 73: char arr[7] = "AER201\0";
  1318  00F154  EE20  F075         	lfsr	2,main@F2986
  1319  00F158  EE10  F067         	lfsr	1,main@arr
  1320  00F15C  0E06               	movlw	6
  1321  00F15E                     u2821:
  1322  00F15E  CFDB FFE3          	movff	plusw2,plusw1
  1323  00F162  06E8               	decf	wreg,f,c
  1324  00F164  E2FC               	bc	u2821
  1325                           
  1326                           ;main.c: 74: printf("Char[]: %s", arr);
  1327  00F166  0EC0               	movlw	low STR_7
  1328  00F168  6E40               	movwf	printf@f,c
  1329  00F16A  0EFF               	movlw	high STR_7
  1330  00F16C  6E41               	movwf	printf@f+1,c
  1331  00F16E  0E67               	movlw	low main@arr
  1332  00F170  6E42               	movwf	?_printf+2,c
  1333  00F172  0E00               	movlw	high main@arr
  1334  00F174  6E43               	movwf	?_printf+3,c
  1335  00F176  EC42  F07B         	call	_printf	;wreg free
  1336                           
  1337                           ;main.c: 75: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1338  00F17A  0E66               	movlw	102
  1339  00F17C  6E66               	movwf	(??_main+1)& (0+255),c
  1340  00F17E  0E76               	movlw	118
  1341  00F180  6E65               	movwf	??_main& (0+255),c
  1342  00F182  0EC1               	movlw	193
  1343  00F184                     u3007:
  1344  00F184  2EE8               	decfsz	wreg,f,c
  1345  00F186  D7FE               	bra	u3007
  1346  00F188  2E65               	decfsz	??_main& (0+255),f,c
  1347  00F18A  D7FC               	bra	u3007
  1348  00F18C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1349  00F18E  D7FA               	bra	u3007
  1350  00F190  F000               	nop	
  1351                           
  1352                           ;main.c: 78: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1353  00F192  0E01               	movlw	1
  1354  00F194  ECC9  F06E         	call	_lcdInst
  1355  00F198  0EC3               	movlw	195
  1356  00F19A  6E65               	movwf	??_main& (0+255),c
  1357  00F19C  0ECD               	movlw	205
  1358  00F19E                     u3017:
  1359  00F19E  2EE8               	decfsz	wreg,f,c
  1360  00F1A0  D7FE               	bra	u3017
  1361  00F1A2  2E65               	decfsz	??_main& (0+255),f,c
  1362  00F1A4  D7FC               	bra	u3017
  1363  00F1A6  F000               	nop	
  1364                           
  1365                           ;main.c: 79: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1366  00F1A8  0E80               	movlw	128
  1367  00F1AA  ECC9  F06E         	call	_lcdInst
  1368  00F1AE  0E41               	movlw	65
  1369  00F1B0  6E65               	movwf	??_main& (0+255),c
  1370  00F1B2  0EEE               	movlw	238
  1371  00F1B4                     u3027:
  1372  00F1B4  2EE8               	decfsz	wreg,f,c
  1373  00F1B6  D7FE               	bra	u3027
  1374  00F1B8  2E65               	decfsz	??_main& (0+255),f,c
  1375  00F1BA  D7FC               	bra	u3027
  1376  00F1BC  D000               	nop2	
  1377                           
  1378                           ;main.c: 80: printf("Cursor blink can");
  1379  00F1BE  0E25               	movlw	low STR_8
  1380  00F1C0  6E40               	movwf	printf@f,c
  1381  00F1C2  0EFF               	movlw	high STR_8
  1382  00F1C4  6E41               	movwf	printf@f+1,c
  1383  00F1C6  EC42  F07B         	call	_printf	;wreg free
  1384                           
  1385                           ;main.c: 81: lcdInst(0xC0);;
  1386  00F1CA  0EC0               	movlw	192
  1387  00F1CC  ECC9  F06E         	call	_lcdInst
  1388                           
  1389                           ;main.c: 82: printf("be toggled");
  1390  00F1D0  0EAA               	movlw	low STR_9
  1391  00F1D2  6E40               	movwf	printf@f,c
  1392  00F1D4  0EFF               	movlw	high STR_9
  1393  00F1D6  6E41               	movwf	printf@f+1,c
  1394  00F1D8  EC42  F07B         	call	_printf	;wreg free
  1395                           
  1396                           ;main.c: 83: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1397  00F1DC  0E66               	movlw	102
  1398  00F1DE  6E66               	movwf	(??_main+1)& (0+255),c
  1399  00F1E0  0E76               	movlw	118
  1400  00F1E2  6E65               	movwf	??_main& (0+255),c
  1401  00F1E4  0EC1               	movlw	193
  1402  00F1E6                     u3037:
  1403  00F1E6  2EE8               	decfsz	wreg,f,c
  1404  00F1E8  D7FE               	bra	u3037
  1405  00F1EA  2E65               	decfsz	??_main& (0+255),f,c
  1406  00F1EC  D7FC               	bra	u3037
  1407  00F1EE  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1408  00F1F0  D7FA               	bra	u3037
  1409  00F1F2  F000               	nop	
  1410                           
  1411                           ;main.c: 85: lcdInst(8 | (1 << 2) | (1 << 1)| 0);;
  1412  00F1F4  0E0E               	movlw	14
  1413  00F1F6  ECC9  F06E         	call	_lcdInst
  1414                           
  1415                           ;main.c: 86: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1416  00F1FA  0E66               	movlw	102
  1417  00F1FC  6E66               	movwf	(??_main+1)& (0+255),c
  1418  00F1FE  0E76               	movlw	118
  1419  00F200  6E65               	movwf	??_main& (0+255),c
  1420  00F202  0EC1               	movlw	193
  1421  00F204                     u3047:
  1422  00F204  2EE8               	decfsz	wreg,f,c
  1423  00F206  D7FE               	bra	u3047
  1424  00F208  2E65               	decfsz	??_main& (0+255),f,c
  1425  00F20A  D7FC               	bra	u3047
  1426  00F20C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1427  00F20E  D7FA               	bra	u3047
  1428  00F210  F000               	nop	
  1429                           
  1430                           ;main.c: 89: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1431  00F212  0E01               	movlw	1
  1432  00F214  ECC9  F06E         	call	_lcdInst
  1433  00F218  0EC3               	movlw	195
  1434  00F21A  6E65               	movwf	??_main& (0+255),c
  1435  00F21C  0ECD               	movlw	205
  1436  00F21E                     u3057:
  1437  00F21E  2EE8               	decfsz	wreg,f,c
  1438  00F220  D7FE               	bra	u3057
  1439  00F222  2E65               	decfsz	??_main& (0+255),f,c
  1440  00F224  D7FC               	bra	u3057
  1441  00F226  F000               	nop	
  1442                           
  1443                           ;main.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1444  00F228  0E80               	movlw	128
  1445  00F22A  ECC9  F06E         	call	_lcdInst
  1446  00F22E  0E41               	movlw	65
  1447  00F230  6E65               	movwf	??_main& (0+255),c
  1448  00F232  0EEE               	movlw	238
  1449  00F234                     u3067:
  1450  00F234  2EE8               	decfsz	wreg,f,c
  1451  00F236  D7FE               	bra	u3067
  1452  00F238  2E65               	decfsz	??_main& (0+255),f,c
  1453  00F23A  D7FC               	bra	u3067
  1454  00F23C  D000               	nop2	
  1455                           
  1456                           ;main.c: 91: printf("As can the");
  1457  00F23E  0EB5               	movlw	low STR_10
  1458  00F240  6E40               	movwf	printf@f,c
  1459  00F242  0EFF               	movlw	high STR_10
  1460  00F244  6E41               	movwf	printf@f+1,c
  1461  00F246  EC42  F07B         	call	_printf	;wreg free
  1462                           
  1463                           ;main.c: 92: lcdInst(0xC0);;
  1464  00F24A  0EC0               	movlw	192
  1465  00F24C  ECC9  F06E         	call	_lcdInst
  1466                           
  1467                           ;main.c: 93: printf("cursor!");
  1468  00F250  0EDF               	movlw	low STR_11
  1469  00F252  6E40               	movwf	printf@f,c
  1470  00F254  0EFF               	movlw	high STR_11
  1471  00F256  6E41               	movwf	printf@f+1,c
  1472  00F258  EC42  F07B         	call	_printf	;wreg free
  1473                           
  1474                           ;main.c: 94: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1475  00F25C  0E66               	movlw	102
  1476  00F25E  6E66               	movwf	(??_main+1)& (0+255),c
  1477  00F260  0E76               	movlw	118
  1478  00F262  6E65               	movwf	??_main& (0+255),c
  1479  00F264  0EC1               	movlw	193
  1480  00F266                     u3077:
  1481  00F266  2EE8               	decfsz	wreg,f,c
  1482  00F268  D7FE               	bra	u3077
  1483  00F26A  2E65               	decfsz	??_main& (0+255),f,c
  1484  00F26C  D7FC               	bra	u3077
  1485  00F26E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1486  00F270  D7FA               	bra	u3077
  1487  00F272  F000               	nop	
  1488                           
  1489                           ;main.c: 96: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1490  00F274  0E0C               	movlw	12
  1491  00F276  ECC9  F06E         	call	_lcdInst
  1492                           
  1493                           ;main.c: 97: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1494  00F27A  0E66               	movlw	102
  1495  00F27C  6E66               	movwf	(??_main+1)& (0+255),c
  1496  00F27E  0E76               	movlw	118
  1497  00F280  6E65               	movwf	??_main& (0+255),c
  1498  00F282  0EC1               	movlw	193
  1499  00F284                     u3087:
  1500  00F284  2EE8               	decfsz	wreg,f,c
  1501  00F286  D7FE               	bra	u3087
  1502  00F288  2E65               	decfsz	??_main& (0+255),f,c
  1503  00F28A  D7FC               	bra	u3087
  1504  00F28C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1505  00F28E  D7FA               	bra	u3087
  1506  00F290  F000               	nop	
  1507                           
  1508                           ;main.c: 100: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1509  00F292  0E01               	movlw	1
  1510  00F294  ECC9  F06E         	call	_lcdInst
  1511  00F298  0EC3               	movlw	195
  1512  00F29A  6E65               	movwf	??_main& (0+255),c
  1513  00F29C  0ECD               	movlw	205
  1514  00F29E                     u3097:
  1515  00F29E  2EE8               	decfsz	wreg,f,c
  1516  00F2A0  D7FE               	bra	u3097
  1517  00F2A2  2E65               	decfsz	??_main& (0+255),f,c
  1518  00F2A4  D7FC               	bra	u3097
  1519  00F2A6  F000               	nop	
  1520                           
  1521                           ;main.c: 101: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1522  00F2A8  0E80               	movlw	128
  1523  00F2AA  ECC9  F06E         	call	_lcdInst
  1524  00F2AE  0E41               	movlw	65
  1525  00F2B0  6E65               	movwf	??_main& (0+255),c
  1526  00F2B2  0EEE               	movlw	238
  1527  00F2B4                     u3107:
  1528  00F2B4  2EE8               	decfsz	wreg,f,c
  1529  00F2B6  D7FE               	bra	u3107
  1530  00F2B8  2E65               	decfsz	??_main& (0+255),f,c
  1531  00F2BA  D7FC               	bra	u3107
  1532  00F2BC  D000               	nop2	
  1533                           
  1534                           ;main.c: 102: printf("As can the");
  1535  00F2BE  0EB5               	movlw	low STR_10
  1536  00F2C0  6E40               	movwf	printf@f,c
  1537  00F2C2  0EFF               	movlw	high STR_10
  1538  00F2C4  6E41               	movwf	printf@f+1,c
  1539  00F2C6  EC42  F07B         	call	_printf	;wreg free
  1540                           
  1541                           ;main.c: 103: lcdInst(0xC0);;
  1542  00F2CA  0EC0               	movlw	192
  1543  00F2CC  ECC9  F06E         	call	_lcdInst
  1544                           
  1545                           ;main.c: 104: printf("display");
  1546  00F2D0  0EEF               	movlw	low STR_13
  1547  00F2D2  6E40               	movwf	printf@f,c
  1548  00F2D4  0EFF               	movlw	high STR_13
  1549  00F2D6  6E41               	movwf	printf@f+1,c
  1550  00F2D8  EC42  F07B         	call	_printf	;wreg free
  1551                           
  1552                           ;main.c: 105: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1553  00F2DC  0E66               	movlw	102
  1554  00F2DE  6E66               	movwf	(??_main+1)& (0+255),c
  1555  00F2E0  0E76               	movlw	118
  1556  00F2E2  6E65               	movwf	??_main& (0+255),c
  1557  00F2E4  0EC1               	movlw	193
  1558  00F2E6                     u3117:
  1559  00F2E6  2EE8               	decfsz	wreg,f,c
  1560  00F2E8  D7FE               	bra	u3117
  1561  00F2EA  2E65               	decfsz	??_main& (0+255),f,c
  1562  00F2EC  D7FC               	bra	u3117
  1563  00F2EE  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1564  00F2F0  D7FA               	bra	u3117
  1565  00F2F2  F000               	nop	
  1566                           
  1567                           ;main.c: 107: lcdInst(8 | (0 << 2) | (0 << 1)| 0);;
  1568  00F2F4  0E08               	movlw	8
  1569  00F2F6  ECC9  F06E         	call	_lcdInst
  1570                           
  1571                           ;main.c: 108: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1572  00F2FA  0E66               	movlw	102
  1573  00F2FC  6E66               	movwf	(??_main+1)& (0+255),c
  1574  00F2FE  0E76               	movlw	118
  1575  00F300  6E65               	movwf	??_main& (0+255),c
  1576  00F302  0EC1               	movlw	193
  1577  00F304                     u3127:
  1578  00F304  2EE8               	decfsz	wreg,f,c
  1579  00F306  D7FE               	bra	u3127
  1580  00F308  2E65               	decfsz	??_main& (0+255),f,c
  1581  00F30A  D7FC               	bra	u3127
  1582  00F30C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1583  00F30E  D7FA               	bra	u3127
  1584  00F310  F000               	nop	
  1585                           
  1586                           ;main.c: 110: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1587  00F312  0E01               	movlw	1
  1588  00F314  ECC9  F06E         	call	_lcdInst
  1589  00F318  0EC3               	movlw	195
  1590  00F31A  6E65               	movwf	??_main& (0+255),c
  1591  00F31C  0ECD               	movlw	205
  1592  00F31E                     u3137:
  1593  00F31E  2EE8               	decfsz	wreg,f,c
  1594  00F320  D7FE               	bra	u3137
  1595  00F322  2E65               	decfsz	??_main& (0+255),f,c
  1596  00F324  D7FC               	bra	u3137
  1597  00F326  F000               	nop	
  1598                           
  1599                           ;main.c: 111: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1600  00F328  0E80               	movlw	128
  1601  00F32A  ECC9  F06E         	call	_lcdInst
  1602  00F32E  0E41               	movlw	65
  1603  00F330  6E65               	movwf	??_main& (0+255),c
  1604  00F332  0EEE               	movlw	238
  1605  00F334                     u3147:
  1606  00F334  2EE8               	decfsz	wreg,f,c
  1607  00F336  D7FE               	bra	u3147
  1608  00F338  2E65               	decfsz	??_main& (0+255),f,c
  1609  00F33A  D7FC               	bra	u3147
  1610  00F33C  D000               	nop2	
  1611                           
  1612                           ;main.c: 112: printf("But that will");
  1613  00F33E  0E83               	movlw	low STR_14
  1614  00F340  6E40               	movwf	printf@f,c
  1615  00F342  0EFF               	movlw	high STR_14
  1616  00F344  6E41               	movwf	printf@f+1,c
  1617  00F346  EC42  F07B         	call	_printf	;wreg free
  1618                           
  1619                           ;main.c: 113: lcdInst(0xC0);;
  1620  00F34A  0EC0               	movlw	192
  1621  00F34C  ECC9  F06E         	call	_lcdInst
  1622                           
  1623                           ;main.c: 114: printf("likely stay on!");
  1624  00F350  0E36               	movlw	low STR_15
  1625  00F352  6E40               	movwf	printf@f,c
  1626  00F354  0EFF               	movlw	high STR_15
  1627  00F356  6E41               	movwf	printf@f+1,c
  1628  00F358  EC42  F07B         	call	_printf	;wreg free
  1629                           
  1630                           ;main.c: 115: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1631  00F35C  0E0C               	movlw	12
  1632  00F35E  ECC9  F06E         	call	_lcdInst
  1633                           
  1634                           ;main.c: 116: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1635  00F362  0E66               	movlw	102
  1636  00F364  6E66               	movwf	(??_main+1)& (0+255),c
  1637  00F366  0E76               	movlw	118
  1638  00F368  6E65               	movwf	??_main& (0+255),c
  1639  00F36A  0EC1               	movlw	193
  1640  00F36C                     u3157:
  1641  00F36C  2EE8               	decfsz	wreg,f,c
  1642  00F36E  D7FE               	bra	u3157
  1643  00F370  2E65               	decfsz	??_main& (0+255),f,c
  1644  00F372  D7FC               	bra	u3157
  1645  00F374  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1646  00F376  D7FA               	bra	u3157
  1647  00F378  F000               	nop	
  1648                           
  1649                           ;main.c: 119: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1650  00F37A  0E01               	movlw	1
  1651  00F37C  ECC9  F06E         	call	_lcdInst
  1652  00F380  0EC3               	movlw	195
  1653  00F382  6E65               	movwf	??_main& (0+255),c
  1654  00F384  0ECD               	movlw	205
  1655  00F386                     u3167:
  1656  00F386  2EE8               	decfsz	wreg,f,c
  1657  00F388  D7FE               	bra	u3167
  1658  00F38A  2E65               	decfsz	??_main& (0+255),f,c
  1659  00F38C  D7FC               	bra	u3167
  1660  00F38E  F000               	nop	
  1661                           
  1662                           ;main.c: 120: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1663  00F390  0E80               	movlw	128
  1664  00F392  ECC9  F06E         	call	_lcdInst
  1665  00F396  0E41               	movlw	65
  1666  00F398  6E65               	movwf	??_main& (0+255),c
  1667  00F39A  0EEE               	movlw	238
  1668  00F39C                     u3177:
  1669  00F39C  2EE8               	decfsz	wreg,f,c
  1670  00F39E  D7FE               	bra	u3177
  1671  00F3A0  2E65               	decfsz	??_main& (0+255),f,c
  1672  00F3A2  D7FC               	bra	u3177
  1673  00F3A4  D000               	nop2	
  1674                           
  1675                           ;main.c: 121: printf("Cursor position");
  1676  00F3A6  0E46               	movlw	low STR_16
  1677  00F3A8  6E40               	movwf	printf@f,c
  1678  00F3AA  0EFF               	movlw	high STR_16
  1679  00F3AC  6E41               	movwf	printf@f+1,c
  1680  00F3AE  EC42  F07B         	call	_printf	;wreg free
  1681                           
  1682                           ;main.c: 122: lcdInst(0xC0);;
  1683  00F3B2  0EC0               	movlw	192
  1684  00F3B4  ECC9  F06E         	call	_lcdInst
  1685                           
  1686                           ;main.c: 123: printf("can be specified");
  1687  00F3B8  0E14               	movlw	low STR_17
  1688  00F3BA  6E40               	movwf	printf@f,c
  1689  00F3BC  0EFF               	movlw	high STR_17
  1690  00F3BE  6E41               	movwf	printf@f+1,c
  1691  00F3C0  EC42  F07B         	call	_printf	;wreg free
  1692                           
  1693                           ;main.c: 124: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1694  00F3C4  0E66               	movlw	102
  1695  00F3C6  6E66               	movwf	(??_main+1)& (0+255),c
  1696  00F3C8  0E76               	movlw	118
  1697  00F3CA  6E65               	movwf	??_main& (0+255),c
  1698  00F3CC  0EC1               	movlw	193
  1699  00F3CE                     u3187:
  1700  00F3CE  2EE8               	decfsz	wreg,f,c
  1701  00F3D0  D7FE               	bra	u3187
  1702  00F3D2  2E65               	decfsz	??_main& (0+255),f,c
  1703  00F3D4  D7FC               	bra	u3187
  1704  00F3D6  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1705  00F3D8  D7FA               	bra	u3187
  1706  00F3DA  F000               	nop	
  1707                           
  1708                           ;main.c: 126: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1709  00F3DC  0E01               	movlw	1
  1710  00F3DE  ECC9  F06E         	call	_lcdInst
  1711  00F3E2  0EC3               	movlw	195
  1712  00F3E4  6E65               	movwf	??_main& (0+255),c
  1713  00F3E6  0ECD               	movlw	205
  1714  00F3E8                     u3197:
  1715  00F3E8  2EE8               	decfsz	wreg,f,c
  1716  00F3EA  D7FE               	bra	u3197
  1717  00F3EC  2E65               	decfsz	??_main& (0+255),f,c
  1718  00F3EE  D7FC               	bra	u3197
  1719  00F3F0  F000               	nop	
  1720                           
  1721                           ;main.c: 127: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1722  00F3F2  0E80               	movlw	128
  1723  00F3F4  ECC9  F06E         	call	_lcdInst
  1724  00F3F8  0E41               	movlw	65
  1725  00F3FA  6E65               	movwf	??_main& (0+255),c
  1726  00F3FC  0EEE               	movlw	238
  1727  00F3FE                     u3207:
  1728  00F3FE  2EE8               	decfsz	wreg,f,c
  1729  00F400  D7FE               	bra	u3207
  1730  00F402  2E65               	decfsz	??_main& (0+255),f,c
  1731  00F404  D7FC               	bra	u3207
  1732  00F406  D000               	nop2	
  1733                           
  1734                           ;main.c: 129: for(unsigned char x = 0; x < LCD_SIZE_HORZ; x++){
  1735  00F408  0E00               	movlw	0
  1736  00F40A  6E74               	movwf	main@x,c
  1737  00F40C                     l3079:
  1738  00F40C  0E00               	movlw	low _LCD_SIZE_HORZ
  1739  00F40E  6EF6               	movwf	tblptrl,c
  1740  00F410                     	if	1	;There is more than 1 active tblptr byte
  1741  00F410  0EFF               	movlw	high _LCD_SIZE_HORZ
  1742  00F412  6EF7               	movwf	tblptrh,c
  1743  00F414                     	endif
  1744  00F414                     	if	1	;There are 3 active tblptr bytes
  1745  00F414  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1746  00F416  6EF8               	movwf	tblptru,c
  1747  00F418                     	endif
  1748  00F418  0009               	tblrd		*+
  1749  00F41A  50F5               	movf	tablat,w,c
  1750  00F41C  5C74               	subwf	main@x,w,c
  1751  00F41E  B0D8               	btfsc	status,0,c
  1752  00F420  D076               	goto	l3103
  1753                           
  1754                           ;main.c: 130: if(x % LCD_SIZE_VERT){
  1755  00F422  0EFF               	movlw	low _LCD_SIZE_VERT
  1756  00F424  6EF6               	movwf	tblptrl,c
  1757  00F426                     	if	1	;There is more than 1 active tblptr byte
  1758  00F426  0EFE               	movlw	high _LCD_SIZE_VERT
  1759  00F428  6EF7               	movwf	tblptrh,c
  1760  00F42A                     	endif
  1761  00F42A                     	if	1	;There are 3 active tblptr bytes
  1762  00F42A  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1763  00F42C  6EF8               	movwf	tblptru,c
  1764  00F42E                     	endif
  1765  00F42E  0008               	tblrd		*
  1766  00F430  CFF5 F001          	movff	tablat,___lbmod@divisor
  1767  00F434  5074               	movf	main@x,w,c
  1768  00F436  EC1E  F06F         	call	___lbmod
  1769  00F43A  0900               	iorlw	0
  1770  00F43C  B4D8               	btfsc	status,2,c
  1771  00F43E  D033               	goto	l3091
  1772                           
  1773                           ;main.c: 131: lcd_set_cursor((unsigned char)(LCD_SIZE_HORZ - x), (unsigned char)(x % LCD
      +                          _SIZE_VERT));
  1774  00F440  0EFF               	movlw	low _LCD_SIZE_VERT
  1775  00F442  6EF6               	movwf	tblptrl,c
  1776  00F444                     	if	1	;There is more than 1 active tblptr byte
  1777  00F444  0EFE               	movlw	high _LCD_SIZE_VERT
  1778  00F446  6EF7               	movwf	tblptrh,c
  1779  00F448                     	endif
  1780  00F448                     	if	1	;There are 3 active tblptr bytes
  1781  00F448  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1782  00F44A  6EF8               	movwf	tblptru,c
  1783  00F44C                     	endif
  1784  00F44C  0008               	tblrd		*
  1785  00F44E  CFF5 F001          	movff	tablat,___lbmod@divisor
  1786  00F452  5074               	movf	main@x,w,c
  1787  00F454  EC1E  F06F         	call	___lbmod
  1788  00F458  6E07               	movwf	lcd_set_cursor@y,c
  1789  00F45A  0E00               	movlw	low _LCD_SIZE_HORZ
  1790  00F45C  6EF6               	movwf	tblptrl,c
  1791  00F45E                     	if	1	;There is more than 1 active tblptr byte
  1792  00F45E  0EFF               	movlw	high _LCD_SIZE_HORZ
  1793  00F460  6EF7               	movwf	tblptrh,c
  1794  00F462                     	endif
  1795  00F462                     	if	1	;There are 3 active tblptr bytes
  1796  00F462  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1797  00F464  6EF8               	movwf	tblptru,c
  1798  00F466                     	endif
  1799  00F466  0008               	tblrd		*
  1800  00F468  CFF5 F065          	movff	tablat,??_main
  1801  00F46C  5074               	movf	main@x,w,c
  1802  00F46E  0800               	sublw	0
  1803  00F470  2465               	addwf	??_main,w,c
  1804  00F472  EC48  F06F         	call	_lcd_set_cursor
  1805                           
  1806                           ;main.c: 133: printf("%d", x % 10);
  1807  00F476  C074  F001         	movff	main@x,___awmod@dividend
  1808  00F47A  6A02               	clrf	___awmod@dividend+1,c
  1809  00F47C  0E00               	movlw	0
  1810  00F47E  6E04               	movwf	___awmod@divisor+1,c
  1811  00F480  0E0A               	movlw	10
  1812  00F482  6E03               	movwf	___awmod@divisor,c
  1813  00F484  EC0C  F070         	call	___awmod	;wreg free
  1814  00F488  C001  F06F         	movff	?___awmod,_main$858
  1815  00F48C  C002  F070         	movff	?___awmod+1,_main$858+1
  1816                           
  1817                           ;main.c: 133: printf("%d", x % 10);
  1818  00F490  0EA7               	movlw	low (STR_4+9)
  1819  00F492  6E40               	movwf	printf@f,c
  1820  00F494  0EFF               	movlw	high (STR_4+9)
  1821  00F496  6E41               	movwf	printf@f+1,c
  1822  00F498  C06F  F042         	movff	_main$858,?_printf+2
  1823  00F49C  C070  F043         	movff	_main$858+1,?_printf+3
  1824  00F4A0  EC42  F07B         	call	_printf	;wreg free
  1825                           
  1826                           ;main.c: 134: }
  1827  00F4A4  D027               	goto	l3097
  1828  00F4A6                     l3091:
  1829                           
  1830                           ;main.c: 135: else{
  1831                           ;main.c: 136: lcd_set_cursor(x, (unsigned char)(x % LCD_SIZE_VERT));
  1832  00F4A6  0EFF               	movlw	low _LCD_SIZE_VERT
  1833  00F4A8  6EF6               	movwf	tblptrl,c
  1834  00F4AA                     	if	1	;There is more than 1 active tblptr byte
  1835  00F4AA  0EFE               	movlw	high _LCD_SIZE_VERT
  1836  00F4AC  6EF7               	movwf	tblptrh,c
  1837  00F4AE                     	endif
  1838  00F4AE                     	if	1	;There are 3 active tblptr bytes
  1839  00F4AE  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1840  00F4B0  6EF8               	movwf	tblptru,c
  1841  00F4B2                     	endif
  1842  00F4B2  0008               	tblrd		*
  1843  00F4B4  CFF5 F001          	movff	tablat,___lbmod@divisor
  1844  00F4B8  5074               	movf	main@x,w,c
  1845  00F4BA  EC1E  F06F         	call	___lbmod
  1846  00F4BE  6E07               	movwf	lcd_set_cursor@y,c
  1847  00F4C0  5074               	movf	main@x,w,c
  1848  00F4C2  EC48  F06F         	call	_lcd_set_cursor
  1849                           
  1850                           ;main.c: 137: printf("%d", x % 10);
  1851  00F4C6  C074  F001         	movff	main@x,___awmod@dividend
  1852  00F4CA  6A02               	clrf	___awmod@dividend+1,c
  1853  00F4CC  0E00               	movlw	0
  1854  00F4CE  6E04               	movwf	___awmod@divisor+1,c
  1855  00F4D0  0E0A               	movlw	10
  1856  00F4D2  6E03               	movwf	___awmod@divisor,c
  1857  00F4D4  EC0C  F070         	call	___awmod	;wreg free
  1858  00F4D8  C001  F06F         	movff	?___awmod,_main$858
  1859  00F4DC  C002  F070         	movff	?___awmod+1,_main$858+1
  1860                           
  1861                           ;main.c: 137: printf("%d", x % 10);
  1862  00F4E0  0EA7               	movlw	low (STR_4+9)
  1863  00F4E2  6E40               	movwf	printf@f,c
  1864  00F4E4  0EFF               	movlw	high (STR_4+9)
  1865  00F4E6  6E41               	movwf	printf@f+1,c
  1866  00F4E8  C06F  F042         	movff	_main$858,?_printf+2
  1867  00F4EC  C070  F043         	movff	_main$858+1,?_printf+3
  1868  00F4F0  EC42  F07B         	call	_printf	;wreg free
  1869  00F4F4                     l3097:
  1870                           
  1871                           ;main.c: 138: }
  1872                           ;main.c: 139: _delay((unsigned long)((150)*(40000000/4000.0)));
  1873  00F4F4  0E08               	movlw	8
  1874  00F4F6  6E66               	movwf	(??_main+1)& (0+255),c
  1875  00F4F8  0E9D               	movlw	157
  1876  00F4FA  6E65               	movwf	??_main& (0+255),c
  1877  00F4FC  0E06               	movlw	6
  1878  00F4FE                     u3217:
  1879  00F4FE  2EE8               	decfsz	wreg,f,c
  1880  00F500  D7FE               	bra	u3217
  1881  00F502  2E65               	decfsz	??_main& (0+255),f,c
  1882  00F504  D7FC               	bra	u3217
  1883  00F506  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1884  00F508  D7FA               	bra	u3217
  1885  00F50A  2A74               	incf	main@x,f,c
  1886  00F50C  D77F               	goto	l3079
  1887  00F50E                     l3103:
  1888                           
  1889                           ;main.c: 140: }
  1890                           ;main.c: 143: unsigned char numShifts = 0;
  1891  00F50E  0E00               	movlw	0
  1892  00F510  6E73               	movwf	main@numShifts,c
  1893                           
  1894                           ;main.c: 145: lcd_set_cursor(LCD_SIZE_HORZ + 1, 0);
  1895  00F512  0E00               	movlw	0
  1896  00F514  6E07               	movwf	lcd_set_cursor@y,c
  1897  00F516  0E00               	movlw	low _LCD_SIZE_HORZ
  1898  00F518  6EF6               	movwf	tblptrl,c
  1899  00F51A                     	if	1	;There is more than 1 active tblptr byte
  1900  00F51A  0EFF               	movlw	high _LCD_SIZE_HORZ
  1901  00F51C  6EF7               	movwf	tblptrh,c
  1902  00F51E                     	endif
  1903  00F51E                     	if	1	;There are 3 active tblptr bytes
  1904  00F51E  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1905  00F520  6EF8               	movwf	tblptru,c
  1906  00F522                     	endif
  1907  00F522  0008               	tblrd		*
  1908  00F524  CFF5 F065          	movff	tablat,??_main
  1909  00F528  2865               	incf	??_main,w,c
  1910  00F52A  EC48  F06F         	call	_lcd_set_cursor
  1911                           
  1912                           ;main.c: 146: printf("Display can be");
  1913  00F52E  0E56               	movlw	low STR_20
  1914  00F530  6E40               	movwf	printf@f,c
  1915  00F532  0EFF               	movlw	high STR_20
  1916  00F534  6E41               	movwf	printf@f+1,c
  1917  00F536  EC42  F07B         	call	_printf	;wreg free
  1918                           
  1919                           ;main.c: 147: lcd_set_cursor(LCD_SIZE_HORZ + 4, 1);
  1920  00F53A  0E01               	movlw	1
  1921  00F53C  6E07               	movwf	lcd_set_cursor@y,c
  1922  00F53E  0E00               	movlw	low _LCD_SIZE_HORZ
  1923  00F540  6EF6               	movwf	tblptrl,c
  1924  00F542                     	if	1	;There is more than 1 active tblptr byte
  1925  00F542  0EFF               	movlw	high _LCD_SIZE_HORZ
  1926  00F544  6EF7               	movwf	tblptrh,c
  1927  00F546                     	endif
  1928  00F546                     	if	1	;There are 3 active tblptr bytes
  1929  00F546  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1930  00F548  6EF8               	movwf	tblptru,c
  1931  00F54A                     	endif
  1932  00F54A  0008               	tblrd		*
  1933  00F54C  50F5               	movf	tablat,w,c
  1934  00F54E  0F04               	addlw	4
  1935  00F550  EC48  F06F         	call	_lcd_set_cursor
  1936                           
  1937                           ;main.c: 148: printf("shifted");
  1938  00F554  0EE7               	movlw	low STR_21
  1939  00F556  6E40               	movwf	printf@f,c
  1940  00F558  0EFF               	movlw	high STR_21
  1941  00F55A  6E41               	movwf	printf@f+1,c
  1942  00F55C  EC42  F07B         	call	_printf	;wreg free
  1943                           
  1944                           ;main.c: 149: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1945  00F560  0E66               	movlw	102
  1946  00F562  6E66               	movwf	(??_main+1)& (0+255),c
  1947  00F564  0E76               	movlw	118
  1948  00F566  6E65               	movwf	??_main& (0+255),c
  1949  00F568  0EC1               	movlw	193
  1950  00F56A                     u3227:
  1951  00F56A  2EE8               	decfsz	wreg,f,c
  1952  00F56C  D7FE               	bra	u3227
  1953  00F56E  2E65               	decfsz	??_main& (0+255),f,c
  1954  00F570  D7FC               	bra	u3227
  1955  00F572  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1956  00F574  D7FA               	bra	u3227
  1957  00F576  F000               	nop	
  1958                           
  1959                           ;main.c: 151: numShifts = LCD_SIZE_HORZ;
  1960  00F578  0E00               	movlw	low _LCD_SIZE_HORZ
  1961  00F57A  6EF6               	movwf	tblptrl,c
  1962  00F57C                     	if	1	;There is more than 1 active tblptr byte
  1963  00F57C  0EFF               	movlw	high _LCD_SIZE_HORZ
  1964  00F57E  6EF7               	movwf	tblptrh,c
  1965  00F580                     	endif
  1966  00F580                     	if	1	;There are 3 active tblptr bytes
  1967  00F580  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1968  00F582  6EF8               	movwf	tblptru,c
  1969  00F584                     	endif
  1970  00F584  0008               	tblrd		*
  1971  00F586  CFF5 F073          	movff	tablat,main@numShifts
  1972                           
  1973                           ;main.c: 152: for(unsigned char i = 0; i < numShifts; i++){
  1974  00F58A  0E00               	movlw	0
  1975  00F58C  6E6E               	movwf	main@i,c
  1976  00F58E  D018               	goto	l3125
  1977  00F590                     l3119:
  1978                           
  1979                           ;main.c: 153: lcd_shift_display(1, LCD_LEFT);
  1980  00F590  0EFD               	movlw	low _LCD_LEFT
  1981  00F592  6EF6               	movwf	tblptrl,c
  1982  00F594                     	if	1	;There is more than 1 active tblptr byte
  1983  00F594  0EFE               	movlw	high _LCD_LEFT
  1984  00F596  6EF7               	movwf	tblptrh,c
  1985  00F598                     	endif
  1986  00F598                     	if	1	;There are 3 active tblptr bytes
  1987  00F598  0E00               	movlw	low (_LCD_LEFT shr (0+16))
  1988  00F59A  6EF8               	movwf	tblptru,c
  1989  00F59C                     	endif
  1990  00F59C  0008               	tblrd		*
  1991  00F59E  CFF5 F004          	movff	tablat,lcd_shift_display@direction
  1992  00F5A2  0E01               	movlw	1
  1993  00F5A4  ECEB  F06E         	call	_lcd_shift_display
  1994                           
  1995                           ;main.c: 154: _delay((unsigned long)((150)*(40000000/4000.0)));
  1996  00F5A8  0E08               	movlw	8
  1997  00F5AA  6E66               	movwf	(??_main+1)& (0+255),c
  1998  00F5AC  0E9D               	movlw	157
  1999  00F5AE  6E65               	movwf	??_main& (0+255),c
  2000  00F5B0  0E06               	movlw	6
  2001  00F5B2                     u3237:
  2002  00F5B2  2EE8               	decfsz	wreg,f,c
  2003  00F5B4  D7FE               	bra	u3237
  2004  00F5B6  2E65               	decfsz	??_main& (0+255),f,c
  2005  00F5B8  D7FC               	bra	u3237
  2006  00F5BA  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2007  00F5BC  D7FA               	bra	u3237
  2008  00F5BE  2A6E               	incf	main@i,f,c
  2009  00F5C0                     l3125:
  2010  00F5C0  5073               	movf	main@numShifts,w,c
  2011  00F5C2  5C6E               	subwf	main@i,w,c
  2012  00F5C4  A0D8               	btfss	status,0,c
  2013  00F5C6  D7E4               	goto	l3119
  2014                           
  2015                           ;main.c: 155: }
  2016                           ;main.c: 156: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2017  00F5C8  0E66               	movlw	102
  2018  00F5CA  6E66               	movwf	(??_main+1)& (0+255),c
  2019  00F5CC  0E76               	movlw	118
  2020  00F5CE  6E65               	movwf	??_main& (0+255),c
  2021  00F5D0  0EC1               	movlw	193
  2022  00F5D2                     u3247:
  2023  00F5D2  2EE8               	decfsz	wreg,f,c
  2024  00F5D4  D7FE               	bra	u3247
  2025  00F5D6  2E65               	decfsz	??_main& (0+255),f,c
  2026  00F5D8  D7FC               	bra	u3247
  2027  00F5DA  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2028  00F5DC  D7FA               	bra	u3247
  2029  00F5DE  F000               	nop	
  2030                           
  2031                           ;main.c: 159: lcd_set_cursor(numShifts - 16, 1);
  2032  00F5E0  0E01               	movlw	1
  2033  00F5E2  6E07               	movwf	lcd_set_cursor@y,c
  2034  00F5E4  5073               	movf	main@numShifts,w,c
  2035  00F5E6  0FF0               	addlw	240
  2036  00F5E8  EC48  F06F         	call	_lcd_set_cursor
  2037                           
  2038                           ;main.c: 160: for(unsigned char i = numShifts; i > 0; i--){
  2039  00F5EC  C073  F071         	movff	main@numShifts,main@i_108
  2040  00F5F0                     l3133:
  2041  00F5F0  5071               	movf	main@i_108,w,c
  2042  00F5F2  B4D8               	btfsc	status,2,c
  2043  00F5F4  D005               	goto	l3143
  2044                           
  2045                           ;main.c: 161: putch(' ');
  2046  00F5F6  0E20               	movlw	32
  2047  00F5F8  ECD3  F06E         	call	_putch
  2048  00F5FC  0671               	decf	main@i_108,f,c
  2049  00F5FE  D7F8               	goto	l3133
  2050  00F600                     l3143:
  2051                           
  2052                           ;main.c: 162: }
  2053                           ;main.c: 166: lcd_set_cursor(numShifts - 16, 0);
  2054  00F600  0E00               	movlw	0
  2055  00F602  6E07               	movwf	lcd_set_cursor@y,c
  2056  00F604  5073               	movf	main@numShifts,w,c
  2057  00F606  0FF0               	addlw	240
  2058  00F608  EC48  F06F         	call	_lcd_set_cursor
  2059                           
  2060                           ;main.c: 167: printf("Hello world!    ");
  2061  00F60C  0E03               	movlw	low STR_22
  2062  00F60E  6E40               	movwf	printf@f,c
  2063  00F610  0EFF               	movlw	high STR_22
  2064  00F612  6E41               	movwf	printf@f+1,c
  2065  00F614  EC42  F07B         	call	_printf	;wreg free
  2066                           
  2067                           ;main.c: 169: for(unsigned char i = 0; i < LCD_SIZE_HORZ; i++){
  2068  00F618  0E00               	movlw	0
  2069  00F61A  6E72               	movwf	main@i_110,c
  2070  00F61C                     l3149:
  2071  00F61C  0E00               	movlw	low _LCD_SIZE_HORZ
  2072  00F61E  6EF6               	movwf	tblptrl,c
  2073  00F620                     	if	1	;There is more than 1 active tblptr byte
  2074  00F620  0EFF               	movlw	high _LCD_SIZE_HORZ
  2075  00F622  6EF7               	movwf	tblptrh,c
  2076  00F624                     	endif
  2077  00F624                     	if	1	;There are 3 active tblptr bytes
  2078  00F624  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  2079  00F626  6EF8               	movwf	tblptru,c
  2080  00F628                     	endif
  2081  00F628  0009               	tblrd		*+
  2082  00F62A  50F5               	movf	tablat,w,c
  2083  00F62C  5C72               	subwf	main@i_110,w,c
  2084  00F62E  B0D8               	btfsc	status,0,c
  2085  00F630  D019               	goto	l3161
  2086                           
  2087                           ;main.c: 170: lcd_shift_display(1, LCD_RIGHT);
  2088  00F632  0EFE               	movlw	low _LCD_RIGHT
  2089  00F634  6EF6               	movwf	tblptrl,c
  2090  00F636                     	if	1	;There is more than 1 active tblptr byte
  2091  00F636  0EFE               	movlw	high _LCD_RIGHT
  2092  00F638  6EF7               	movwf	tblptrh,c
  2093  00F63A                     	endif
  2094  00F63A                     	if	1	;There are 3 active tblptr bytes
  2095  00F63A  0E00               	movlw	low (_LCD_RIGHT shr (0+16))
  2096  00F63C  6EF8               	movwf	tblptru,c
  2097  00F63E                     	endif
  2098  00F63E  0008               	tblrd		*
  2099  00F640  CFF5 F004          	movff	tablat,lcd_shift_display@direction
  2100  00F644  0E01               	movlw	1
  2101  00F646  ECEB  F06E         	call	_lcd_shift_display
  2102                           
  2103                           ;main.c: 171: _delay((unsigned long)((150)*(40000000/4000.0)));
  2104  00F64A  0E08               	movlw	8
  2105  00F64C  6E66               	movwf	(??_main+1)& (0+255),c
  2106  00F64E  0E9D               	movlw	157
  2107  00F650  6E65               	movwf	??_main& (0+255),c
  2108  00F652  0E06               	movlw	6
  2109  00F654                     u3257:
  2110  00F654  2EE8               	decfsz	wreg,f,c
  2111  00F656  D7FE               	bra	u3257
  2112  00F658  2E65               	decfsz	??_main& (0+255),f,c
  2113  00F65A  D7FC               	bra	u3257
  2114  00F65C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2115  00F65E  D7FA               	bra	u3257
  2116  00F660  2A72               	incf	main@i_110,f,c
  2117  00F662  D7DC               	goto	l3149
  2118  00F664                     l3161:
  2119                           
  2120                           ;main.c: 172: }
  2121                           ;main.c: 173: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2122  00F664  0E0F               	movlw	15
  2123  00F666  ECC9  F06E         	call	_lcdInst
  2124                           
  2125                           ;main.c: 174: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2126  00F66A  0E66               	movlw	102
  2127  00F66C  6E66               	movwf	(??_main+1)& (0+255),c
  2128  00F66E  0E76               	movlw	118
  2129  00F670  6E65               	movwf	??_main& (0+255),c
  2130  00F672  0EC1               	movlw	193
  2131  00F674                     u3267:
  2132  00F674  2EE8               	decfsz	wreg,f,c
  2133  00F676  D7FE               	bra	u3267
  2134  00F678  2E65               	decfsz	??_main& (0+255),f,c
  2135  00F67A  D7FC               	bra	u3267
  2136  00F67C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2137  00F67E  D7FA               	bra	u3267
  2138  00F680                     L1:
  2139  00F680  F000               	nop	
  2140  00F682  D4D5               	goto	l2925
  2141  00F684                     __end_of_main:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           plusw1	equ	0xFE3
  2151                           fsr1l	equ	0xFE1
  2152                           plusw2	equ	0xFDB
  2153                           status	equ	0xFD8
  2154                           
  2155 ;; *************** function _printf *****************
  2156 ;; Defined at:
  2157 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  f               2   63[COMRAM] PTR const unsigned char 
  2160 ;;		 -> STR_22(17), STR_21(8), STR_20(15), STR_19(3), 
  2161 ;;		 -> STR_18(3), STR_17(17), STR_16(16), STR_15(16), 
  2162 ;;		 -> STR_14(14), STR_13(8), STR_12(11), STR_11(8), 
  2163 ;;		 -> STR_10(11), STR_9(11), STR_8(17), STR_7(11), 
  2164 ;;		 -> STR_6(10), STR_5(10), STR_4(12), STR_3(15), 
  2165 ;;		 -> STR_2(15), STR_1(13), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  tmpval          4   92[COMRAM] struct .
  2168 ;;  val             4   88[COMRAM] unsigned long 
  2169 ;;  fval            3   96[COMRAM] unsigned long 
  2170 ;;  exp             2   86[COMRAM] int 
  2171 ;;  prec            2   84[COMRAM] int 
  2172 ;;  ap              2   82[COMRAM] PTR void [1]
  2173 ;;		 -> ?_printf(2), 
  2174 ;;  flag            2   80[COMRAM] unsigned short 
  2175 ;;  cp              2   78[COMRAM] PTR const unsigned char 
  2176 ;;		 -> STR_23(7), main@arr(7), 
  2177 ;;  len             2    0        unsigned int 
  2178 ;;  width           2    0        int 
  2179 ;;  c               1   99[COMRAM] char 
  2180 ;;  d               1    0        unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  2   63[COMRAM] int 
  2183 ;; Registers used:
  2184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2190 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;Total ram usage:       37 bytes
  2195 ;; Hardware stack levels used:    1
  2196 ;; Hardware stack levels required when called:    3
  2197 ;; This function calls:
  2198 ;;		___awdiv
  2199 ;;		___ftadd
  2200 ;;		___ftge
  2201 ;;		___ftmul
  2202 ;;		___ftneg
  2203 ;;		___ftsub
  2204 ;;		___fttol
  2205 ;;		___lldiv
  2206 ;;		___llmod
  2207 ;;		___lltoft
  2208 ;;		___wmul
  2209 ;;		__div_to_l_
  2210 ;;		__tdiv_to_l_
  2211 ;;		_fround
  2212 ;;		_putch
  2213 ;;		_scale
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text1
  2220  00F684                     __ptext1:
  2221                           	opt stack 0
  2222  00F684                     _printf:
  2223                           	opt stack 27
  2224                           
  2225                           ;doprnt.c: 466: va_list ap;
  2226                           ;doprnt.c: 499: signed char c;
  2227                           ;doprnt.c: 501: int width;
  2228                           ;doprnt.c: 504: int prec;
  2229                           ;doprnt.c: 508: unsigned short flag;
  2230                           ;doprnt.c: 515: char d;
  2231                           ;doprnt.c: 516: double fval;
  2232                           ;doprnt.c: 517: int exp;
  2233                           ;doprnt.c: 523: union {
  2234                           ;doprnt.c: 524: unsigned long vd;
  2235                           ;doprnt.c: 525: double integ;
  2236                           ;doprnt.c: 526: } tmpval;
  2237                           ;doprnt.c: 528: unsigned long val;
  2238                           ;doprnt.c: 529: unsigned len;
  2239                           ;doprnt.c: 530: const char * cp;
  2240                           ;doprnt.c: 533: *ap = __va_start();
  2241                           
  2242                           ;incstack = 0
  2243  00F684  0E42               	movlw	low (?_printf+2)
  2244  00F686  6E53               	movwf	printf@ap,c
  2245  00F688  0E00               	movlw	high (?_printf+2)
  2246  00F68A  6E54               	movwf	printf@ap+1,c
  2247                           
  2248                           ;doprnt.c: 536: while(c = *f++) {
  2249  00F68C  D3EE               	goto	l2869
  2250  00F68E                     l2657:
  2251                           
  2252                           ;doprnt.c: 538: if(c != '%')
  2253  00F68E  0E25               	movlw	37
  2254  00F690  1864               	xorwf	printf@c,w,c
  2255  00F692  B4D8               	btfsc	status,2,c
  2256  00F694  D004               	goto	l2661
  2257                           
  2258                           ;doprnt.c: 540: {
  2259                           ;doprnt.c: 541: (putch(c) );
  2260  00F696  5064               	movf	printf@c,w,c
  2261  00F698  ECD3  F06E         	call	_putch
  2262                           
  2263                           ;doprnt.c: 542: continue;
  2264  00F69C  D3E6               	goto	l2869
  2265  00F69E                     l2661:
  2266                           
  2267                           ;doprnt.c: 543: }
  2268                           ;doprnt.c: 548: flag = 0;
  2269  00F69E  0E00               	movlw	0
  2270  00F6A0  6E52               	movwf	printf@flag+1,c
  2271  00F6A2  0E00               	movlw	0
  2272  00F6A4  6E51               	movwf	printf@flag,c
  2273                           
  2274                           ;doprnt.c: 635: switch(c = *f++) {
  2275                           
  2276                           ;doprnt.c: 633: loop:
  2277  00F6A6  D045               	goto	l2685
  2278  00F6A8                     l2663:
  2279                           
  2280                           ;doprnt.c: 643: flag |= 0x10;
  2281  00F6A8  8851               	bsf	printf@flag,4,c
  2282                           
  2283                           ;doprnt.c: 644: goto loop;
  2284  00F6AA  D043               	goto	l2685
  2285  00F6AC                     l2665:
  2286                           
  2287                           ;doprnt.c: 663: flag |= 0x400;
  2288  00F6AC  8452               	bsf	printf@flag+1,2,c
  2289                           
  2290                           ;doprnt.c: 698: case 'i':
  2291                           ;doprnt.c: 699: break;
  2292                           
  2293                           ;doprnt.c: 697: case 'd':
  2294                           
  2295                           ;doprnt.c: 664: break;
  2296  00F6AE  D062               	goto	l2687
  2297  00F6B0                     l2667:
  2298                           
  2299                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2300  00F6B0  C053  FFD9         	movff	printf@ap,fsr2l
  2301  00F6B4  C054  FFDA         	movff	printf@ap+1,fsr2h
  2302  00F6B8  CFDE F04F          	movff	postinc2,printf@cp
  2303  00F6BC  CFDD F050          	movff	postdec2,printf@cp+1
  2304  00F6C0  0E02               	movlw	2
  2305  00F6C2  2653               	addwf	printf@ap,f,c
  2306  00F6C4  0E00               	movlw	0
  2307  00F6C6  2254               	addwfc	printf@ap+1,f,c
  2308                           
  2309                           ;doprnt.c: 740: if(!cp)
  2310  00F6C8  504F               	movf	printf@cp,w,c
  2311  00F6CA  1050               	iorwf	printf@cp+1,w,c
  2312  00F6CC  A4D8               	btfss	status,2,c
  2313  00F6CE  D01A               	goto	l2679
  2314                           
  2315                           ;doprnt.c: 741: cp = "(null)";
  2316  00F6D0  0EF7               	movlw	low STR_23
  2317  00F6D2  6E4F               	movwf	printf@cp,c
  2318  00F6D4  0EFF               	movlw	high STR_23
  2319  00F6D6  6E50               	movwf	printf@cp+1,c
  2320                           
  2321                           ;doprnt.c: 777: while(*cp)
  2322  00F6D8  D015               	goto	l2679
  2323  00F6DA                     l2675:
  2324                           
  2325                           ;doprnt.c: 778: (putch(*cp++) );
  2326  00F6DA  C04F  FFF6         	movff	printf@cp,tblptrl
  2327  00F6DE  C050  FFF7         	movff	printf@cp+1,tblptrh
  2328  00F6E2  0E00               	movlw	low (__mediumconst shr (0+16))
  2329  00F6E4  6EF8               	movwf	tblptru,c
  2330  00F6E6  0E0F               	movlw	(high __ramtop+-1)
  2331  00F6E8  64F7               	cpfsgt	tblptrh,c
  2332  00F6EA  D003               	bra	u2427
  2333  00F6EC  0008               	tblrd		*
  2334  00F6EE  50F5               	movf	tablat,w,c
  2335  00F6F0  D005               	bra	u2420
  2336  00F6F2                     u2427:
  2337  00F6F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2338  00F6F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2339  00F6FA  50EF               	movf	indf0,w,c
  2340  00F6FC                     u2420:
  2341  00F6FC  ECD3  F06E         	call	_putch
  2342  00F700  4A4F               	infsnz	printf@cp,f,c
  2343  00F702  2A50               	incf	printf@cp+1,f,c
  2344  00F704                     l2679:
  2345  00F704  C04F  FFF6         	movff	printf@cp,tblptrl
  2346  00F708  C050  FFF7         	movff	printf@cp+1,tblptrh
  2347  00F70C  0E00               	movlw	low (__mediumconst shr (0+16))
  2348  00F70E  6EF8               	movwf	tblptru,c
  2349  00F710  0E0F               	movlw	(high __ramtop+-1)
  2350  00F712  64F7               	cpfsgt	tblptrh,c
  2351  00F714  D003               	bra	u2437
  2352  00F716  0008               	tblrd		*
  2353  00F718  50F5               	movf	tablat,w,c
  2354  00F71A  D005               	bra	u2430
  2355  00F71C                     u2437:
  2356  00F71C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2357  00F720  CFF7 FFEA          	movff	tblptrh,fsr0h
  2358  00F724  50EF               	movf	indf0,w,c
  2359  00F726                     u2430:
  2360  00F726  0900               	iorlw	0
  2361  00F728  B4D8               	btfsc	status,2,c
  2362  00F72A  D39F               	goto	l2869
  2363  00F72C  D7D6               	goto	l2675
  2364  00F72E                     l2681:
  2365                           
  2366                           ;doprnt.c: 818: flag |= 0x40;
  2367  00F72E  8C51               	bsf	printf@flag,6,c
  2368                           
  2369                           ;doprnt.c: 822: }
  2370                           
  2371                           ;doprnt.c: 819: break;
  2372  00F730  D021               	goto	l2687
  2373  00F732                     l2685:
  2374  00F732  C040  FFF6         	movff	printf@f,tblptrl
  2375  00F736  C041  FFF7         	movff	printf@f+1,tblptrh
  2376  00F73A  4A40               	infsnz	printf@f,f,c
  2377  00F73C  2A41               	incf	printf@f+1,f,c
  2378  00F73E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2379  00F73E  6AF8               	clrf	tblptru,c
  2380  00F740                     	endif
  2381  00F740                     	if	0	;tblptru may be non-zero
  2382  00F740                     	endif
  2383  00F740  0008               	tblrd		*
  2384  00F742  CFF5 F064          	movff	tablat,printf@c
  2385  00F746  5064               	movf	printf@c,w,c
  2386                           
  2387                           ; Switch size 1, requested type "space"
  2388                           ; Number of cases is 7, Range of values is 0 to 117
  2389                           ; switch strategies available:
  2390                           ; Name         Instructions Cycles
  2391                           ; simple_byte           22    12 (average)
  2392                           ;	Chosen strategy is simple_byte
  2393  00F748  0A00               	xorlw	0	; case 0
  2394  00F74A  B4D8               	btfsc	status,2,c
  2395  00F74C  0012               	return	
  2396  00F74E  0A64               	xorlw	100	; case 100
  2397  00F750  B4D8               	btfsc	status,2,c
  2398  00F752  D010               	goto	l2687
  2399  00F754  0A02               	xorlw	2	; case 102
  2400  00F756  B4D8               	btfsc	status,2,c
  2401  00F758  D7A9               	goto	l2665
  2402  00F75A  0A0F               	xorlw	15	; case 105
  2403  00F75C  B4D8               	btfsc	status,2,c
  2404  00F75E  D00A               	goto	l2687
  2405  00F760  0A05               	xorlw	5	; case 108
  2406  00F762  B4D8               	btfsc	status,2,c
  2407  00F764  D7A1               	goto	l2663
  2408  00F766  0A1F               	xorlw	31	; case 115
  2409  00F768  B4D8               	btfsc	status,2,c
  2410  00F76A  D7A2               	goto	l2667
  2411  00F76C  0A06               	xorlw	6	; case 117
  2412  00F76E  B4D8               	btfsc	status,2,c
  2413  00F770  D7DE               	goto	l2681
  2414  00F772  D37B               	goto	l2869
  2415  00F774                     l2687:
  2416                           
  2417                           ;doprnt.c: 825: if(flag & (0x700)) {
  2418  00F774  0E07               	movlw	7
  2419  00F776  1452               	andwf	printf@flag+1,w,c
  2420  00F778  B4D8               	btfsc	status,2,c
  2421  00F77A  D2A8               	goto	l181
  2422                           
  2423                           ;doprnt.c: 829: prec = 6;
  2424  00F77C  0E00               	movlw	0
  2425  00F77E  6E56               	movwf	printf@prec+1,c
  2426  00F780  0E06               	movlw	6
  2427  00F782  6E55               	movwf	printf@prec,c
  2428                           
  2429                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2430  00F784  C053  FFD9         	movff	printf@ap,fsr2l
  2431  00F788  C054  FFDA         	movff	printf@ap+1,fsr2h
  2432  00F78C  CFDE F061          	movff	postinc2,printf@fval
  2433  00F790  CFDE F062          	movff	postinc2,printf@fval+1
  2434  00F794  CFDD F063          	movff	postdec2,printf@fval+2
  2435  00F798  0E03               	movlw	3
  2436  00F79A  2653               	addwf	printf@ap,f,c
  2437  00F79C  0E00               	movlw	0
  2438  00F79E  2254               	addwfc	printf@ap+1,f,c
  2439                           
  2440                           ;doprnt.c: 831: if(fval < 0.0) {
  2441  00F7A0  AE63               	btfss	printf@fval+2,7,c
  2442  00F7A2  D010               	goto	l2701
  2443                           
  2444                           ;doprnt.c: 832: fval = -fval;
  2445  00F7A4  C061  F001         	movff	printf@fval,___ftneg@f1
  2446  00F7A8  C062  F002         	movff	printf@fval+1,___ftneg@f1+1
  2447  00F7AC  C063  F003         	movff	printf@fval+2,___ftneg@f1+2
  2448  00F7B0  ECF9  F06E         	call	___ftneg	;wreg free
  2449  00F7B4  C001  F061         	movff	?___ftneg,printf@fval
  2450  00F7B8  C002  F062         	movff	?___ftneg+1,printf@fval+1
  2451  00F7BC  C003  F063         	movff	?___ftneg+2,printf@fval+2
  2452                           
  2453                           ;doprnt.c: 833: flag |= 0x03;
  2454  00F7C0  0E03               	movlw	3
  2455  00F7C2  1251               	iorwf	printf@flag,f,c
  2456  00F7C4                     l2701:
  2457                           
  2458                           ;doprnt.c: 834: }
  2459                           ;doprnt.c: 835: exp = 0;
  2460  00F7C4  0E00               	movlw	0
  2461  00F7C6  6E58               	movwf	printf@exp+1,c
  2462  00F7C8  0E00               	movlw	0
  2463  00F7CA  6E57               	movwf	printf@exp,c
  2464                           
  2465                           ;doprnt.c: 836: if( fval!=0) {
  2466  00F7CC  5061               	movf	printf@fval,w,c
  2467  00F7CE  1062               	iorwf	printf@fval+1,w,c
  2468  00F7D0  1063               	iorwf	printf@fval+2,w,c
  2469  00F7D2  B4D8               	btfsc	status,2,c
  2470  00F7D4  D083               	goto	l2729
  2471                           
  2472                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2473  00F7D6  0E82               	movlw	130
  2474  00F7D8  6E46               	movwf	??_printf& (0+255),c
  2475  00F7DA  0EFF               	movlw	255
  2476  00F7DC  6E47               	movwf	(??_printf+1)& (0+255),c
  2477  00F7DE  C061  F048         	movff	printf@fval,??_printf+2
  2478  00F7E2  C062  F049         	movff	printf@fval+1,??_printf+3
  2479  00F7E6  C063  F04A         	movff	printf@fval+2,??_printf+4
  2480  00F7EA  C064  F04B         	movff	printf@fval+3,??_printf+5
  2481  00F7EE  0E10               	movlw	16
  2482  00F7F0  D005               	goto	u2480
  2483  00F7F2                     u2485:
  2484  00F7F2  90D8               	bcf	status,0,c
  2485  00F7F4  324B               	rrcf	??_printf+5,f,c
  2486  00F7F6  324A               	rrcf	??_printf+4,f,c
  2487  00F7F8  3249               	rrcf	??_printf+3,f,c
  2488  00F7FA  3248               	rrcf	??_printf+2,f,c
  2489  00F7FC                     u2480:
  2490  00F7FC  2EE8               	decfsz	wreg,f,c
  2491  00F7FE  D7F9               	goto	u2485
  2492  00F800  5048               	movf	??_printf+2,w,c
  2493  00F802  2446               	addwf	??_printf,w,c
  2494  00F804  6E57               	movwf	printf@exp,c
  2495  00F806  0E00               	movlw	0
  2496  00F808  2047               	addwfc	??_printf+1,w,c
  2497  00F80A  6E58               	movwf	printf@exp+1,c
  2498                           
  2499                           ;doprnt.c: 838: exp--;
  2500  00F80C  0657               	decf	printf@exp,f,c
  2501  00F80E  A0D8               	btfss	status,0,c
  2502  00F810  0658               	decf	printf@exp+1,f,c
  2503                           
  2504                           ;doprnt.c: 839: exp *= 3;
  2505  00F812  C057  F00F         	movff	printf@exp,___wmul@multiplier
  2506  00F816  C058  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2507  00F81A  0E00               	movlw	0
  2508  00F81C  6E12               	movwf	___wmul@multiplicand+1,c
  2509  00F81E  0E03               	movlw	3
  2510  00F820  6E11               	movwf	___wmul@multiplicand,c
  2511  00F822  EC0B  F06F         	call	___wmul	;wreg free
  2512  00F826  C00F  F057         	movff	?___wmul,printf@exp
  2513  00F82A  C010  F058         	movff	?___wmul+1,printf@exp+1
  2514                           
  2515                           ;doprnt.c: 840: exp /= 10;
  2516  00F82E  C057  F007         	movff	printf@exp,___awdiv@dividend
  2517  00F832  C058  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2518  00F836  0E00               	movlw	0
  2519  00F838  6E0A               	movwf	___awdiv@divisor+1,c
  2520  00F83A  0E0A               	movlw	10
  2521  00F83C  6E09               	movwf	___awdiv@divisor,c
  2522  00F83E  ECC4  F070         	call	___awdiv	;wreg free
  2523  00F842  C007  F057         	movff	?___awdiv,printf@exp
  2524  00F846  C008  F058         	movff	?___awdiv+1,printf@exp+1
  2525                           
  2526                           ;doprnt.c: 841: if(exp < 0)
  2527  00F84A  AE58               	btfss	printf@exp+1,7,c
  2528  00F84C  D003               	goto	l2717
  2529                           
  2530                           ;doprnt.c: 842: exp--;
  2531  00F84E  0657               	decf	printf@exp,f,c
  2532  00F850  A0D8               	btfss	status,0,c
  2533  00F852  0658               	decf	printf@exp+1,f,c
  2534  00F854                     l2717:
  2535                           
  2536                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2537  00F854  5057               	movf	printf@exp,w,c
  2538  00F856  0800               	sublw	0
  2539  00F858  ECD1  F075         	call	_scale
  2540  00F85C  C024  F05D         	movff	?_scale,printf@tmpval
  2541  00F860  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2542  00F864  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2543                           
  2544                           ;doprnt.c: 847: tmpval.integ *= fval;
  2545  00F868  C05D  F015         	movff	printf@tmpval,___ftmul@f1
  2546  00F86C  C05E  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2547  00F870  C05F  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2548  00F874  C061  F018         	movff	printf@fval,___ftmul@f2
  2549  00F878  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2550  00F87C  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2551  00F880  EC1F  F072         	call	___ftmul	;wreg free
  2552  00F884  C015  F05D         	movff	?___ftmul,printf@tmpval
  2553  00F888  C016  F05E         	movff	?___ftmul+1,printf@tmpval+1
  2554  00F88C  C017  F05F         	movff	?___ftmul+2,printf@tmpval+2
  2555                           
  2556                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2557  00F890  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2558  00F894  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2559  00F898  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2560  00F89C  0E00               	movlw	0
  2561  00F89E  6E04               	movwf	___ftge@ff2,c
  2562  00F8A0  0E80               	movlw	128
  2563  00F8A2  6E05               	movwf	___ftge@ff2+1,c
  2564  00F8A4  0E3F               	movlw	63
  2565  00F8A6  6E06               	movwf	___ftge@ff2+2,c
  2566  00F8A8  EC06  F071         	call	___ftge	;wreg free
  2567  00F8AC  B0D8               	btfsc	status,0,c
  2568  00F8AE  D004               	goto	l2725
  2569                           
  2570                           ;doprnt.c: 849: exp--;
  2571  00F8B0  0657               	decf	printf@exp,f,c
  2572  00F8B2  A0D8               	btfss	status,0,c
  2573  00F8B4  0658               	decf	printf@exp+1,f,c
  2574  00F8B6  D012               	goto	l2729
  2575  00F8B8                     l2725:
  2576                           
  2577                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2578  00F8B8  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2579  00F8BC  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2580  00F8C0  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2581  00F8C4  0E00               	movlw	0
  2582  00F8C6  6E04               	movwf	___ftge@ff2,c
  2583  00F8C8  0E20               	movlw	32
  2584  00F8CA  6E05               	movwf	___ftge@ff2+1,c
  2585  00F8CC  0E41               	movlw	65
  2586  00F8CE  6E06               	movwf	___ftge@ff2+2,c
  2587  00F8D0  EC06  F071         	call	___ftge	;wreg free
  2588  00F8D4  A0D8               	btfss	status,0,c
  2589  00F8D6  D002               	goto	l2729
  2590                           
  2591                           ;doprnt.c: 851: exp++;
  2592  00F8D8  4A57               	infsnz	printf@exp,f,c
  2593  00F8DA  2A58               	incf	printf@exp+1,f,c
  2594  00F8DC                     l2729:
  2595                           
  2596                           ;doprnt.c: 852: }
  2597                           ;doprnt.c: 1112: if(prec <= 12)
  2598  00F8DC  BE56               	btfsc	printf@prec+1,7,c
  2599  00F8DE  D006               	goto	l2731
  2600  00F8E0  5056               	movf	printf@prec+1,w,c
  2601  00F8E2  E11B               	bnz	l2733
  2602  00F8E4  0E0D               	movlw	13
  2603  00F8E6  5C55               	subwf	printf@prec,w,c
  2604  00F8E8  B0D8               	btfsc	status,0,c
  2605  00F8EA  D017               	goto	l2733
  2606  00F8EC                     l2731:
  2607                           
  2608                           ;doprnt.c: 1113: fval += fround(prec);
  2609  00F8EC  C061  F02E         	movff	printf@fval,___ftadd@f1
  2610  00F8F0  C062  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2611  00F8F4  C063  F030         	movff	printf@fval+2,___ftadd@f1+2
  2612  00F8F8  5055               	movf	printf@prec,w,c
  2613  00F8FA  EC9C  F074         	call	_fround
  2614  00F8FE  C024  F031         	movff	?_fround,___ftadd@f2
  2615  00F902  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2616  00F906  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2617  00F90A  ECC6  F073         	call	___ftadd	;wreg free
  2618  00F90E  C02E  F061         	movff	?___ftadd,printf@fval
  2619  00F912  C02F  F062         	movff	?___ftadd+1,printf@fval+1
  2620  00F916  C030  F063         	movff	?___ftadd+2,printf@fval+2
  2621  00F91A                     l2733:
  2622                           
  2623                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2624  00F91A  BE58               	btfsc	printf@exp+1,7,c
  2625  00F91C  D006               	goto	l2735
  2626  00F91E  5058               	movf	printf@exp+1,w,c
  2627  00F920  E11E               	bnz	l2741
  2628  00F922  0E0A               	movlw	10
  2629  00F924  5C57               	subwf	printf@exp,w,c
  2630  00F926  B0D8               	btfsc	status,0,c
  2631  00F928  D01A               	goto	l2741
  2632  00F92A                     l2735:
  2633  00F92A  5061               	movf	printf@fval,w,c
  2634  00F92C  1062               	iorwf	printf@fval+1,w,c
  2635  00F92E  1063               	iorwf	printf@fval+2,w,c
  2636  00F930  B4D8               	btfsc	status,2,c
  2637  00F932  D051               	goto	l2755
  2638  00F934  C061  F02B         	movff	printf@fval,___fttol@f1
  2639  00F938  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2640  00F93C  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2641  00F940  ECA5  F071         	call	___fttol	;wreg free
  2642  00F944  502B               	movf	?___fttol,w,c
  2643  00F946  102C               	iorwf	?___fttol+1,w,c
  2644  00F948  102D               	iorwf	?___fttol+2,w,c
  2645  00F94A  102E               	iorwf	?___fttol+3,w,c
  2646  00F94C  B4D8               	btfsc	status,2,c
  2647  00F94E  BE58               	btfsc	printf@exp+1,7,c
  2648  00F950  D042               	goto	l2755
  2649  00F952  5058               	movf	printf@exp+1,w,c
  2650  00F954  E104               	bnz	l2741
  2651  00F956  0E02               	movlw	2
  2652  00F958  5C57               	subwf	printf@exp,w,c
  2653  00F95A  A0D8               	btfss	status,0,c
  2654  00F95C  D03C               	goto	l2755
  2655  00F95E                     l2741:
  2656                           
  2657                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2658  00F95E  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2659  00F962  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2660  00F966  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2661  00F96A  0E70               	movlw	112
  2662  00F96C  6E04               	movwf	___ftge@ff2,c
  2663  00F96E  0E89               	movlw	137
  2664  00F970  6E05               	movwf	___ftge@ff2+1,c
  2665  00F972  0E40               	movlw	64
  2666  00F974  6E06               	movwf	___ftge@ff2+2,c
  2667  00F976  EC06  F071         	call	___ftge	;wreg free
  2668  00F97A  B0D8               	btfsc	status,0,c
  2669  00F97C  D002               	goto	l2745
  2670                           
  2671                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2672  00F97E  0EF7               	movlw	247
  2673  00F980  D001               	goto	L2
  2674  00F982                     l2745:
  2675                           
  2676                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2677  00F982  0EF8               	movlw	248
  2678  00F984                     L2:
  2679  00F984  2657               	addwf	printf@exp,f,c
  2680  00F986  0EFF               	movlw	255
  2681  00F988  2258               	addwfc	printf@exp+1,f,c
  2682                           
  2683                           ;doprnt.c: 1124: }
  2684                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2685  00F98A  5057               	movf	printf@exp,w,c
  2686  00F98C  ECD1  F075         	call	_scale
  2687  00F990  C024  F05D         	movff	?_scale,printf@tmpval
  2688  00F994  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2689  00F998  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2690                           
  2691                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2692  00F99C  C061  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2693  00F9A0  C062  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2694  00F9A4  C063  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2695  00F9A8  C05D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2696  00F9AC  C05E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2697  00F9B0  C05F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2698  00F9B4  EC2D  F073         	call	__tdiv_to_l_	;wreg free
  2699  00F9B8  C001  F059         	movff	?__tdiv_to_l_,printf@val
  2700  00F9BC  C002  F05A         	movff	?__tdiv_to_l_+1,printf@val+1
  2701  00F9C0  C003  F05B         	movff	?__tdiv_to_l_+2,printf@val+2
  2702  00F9C4  C004  F05C         	movff	?__tdiv_to_l_+3,printf@val+3
  2703                           
  2704                           ;doprnt.c: 1129: fval = 0.0;
  2705  00F9C8  0E00               	movlw	0
  2706  00F9CA  6E61               	movwf	printf@fval,c
  2707  00F9CC  0E00               	movlw	0
  2708  00F9CE  6E62               	movwf	printf@fval+1,c
  2709  00F9D0  0E00               	movlw	0
  2710  00F9D2  6E63               	movwf	printf@fval+2,c
  2711                           
  2712                           ;doprnt.c: 1130: } else {
  2713  00F9D4  D032               	goto	l2759
  2714  00F9D6                     l2755:
  2715                           
  2716                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2717  00F9D6  C061  F02B         	movff	printf@fval,___fttol@f1
  2718  00F9DA  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2719  00F9DE  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2720  00F9E2  ECA5  F071         	call	___fttol	;wreg free
  2721  00F9E6  C02B  F059         	movff	?___fttol,printf@val
  2722  00F9EA  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2723  00F9EE  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2724  00F9F2  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2725                           
  2726                           ;doprnt.c: 1132: fval -= (double)val;
  2727  00F9F6  C061  F03A         	movff	printf@fval,___ftsub@f1
  2728  00F9FA  C062  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2729  00F9FE  C063  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2730  00FA02  C059  F009         	movff	printf@val,___lltoft@c
  2731  00FA06  C05A  F00A         	movff	printf@val+1,___lltoft@c+1
  2732  00FA0A  C05B  F00B         	movff	printf@val+2,___lltoft@c+2
  2733  00FA0E  C05C  F00C         	movff	printf@val+3,___lltoft@c+3
  2734  00FA12  ECAB  F06F         	call	___lltoft	;wreg free
  2735  00FA16  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2736  00FA1A  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2737  00FA1E  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2738  00FA22  EC65  F06F         	call	___ftsub	;wreg free
  2739  00FA26  C03A  F061         	movff	?___ftsub,printf@fval
  2740  00FA2A  C03B  F062         	movff	?___ftsub+1,printf@fval+1
  2741  00FA2E  C03C  F063         	movff	?___ftsub+2,printf@fval+2
  2742                           
  2743                           ;doprnt.c: 1133: exp = 0;
  2744  00FA32  0E00               	movlw	0
  2745  00FA34  6E58               	movwf	printf@exp+1,c
  2746  00FA36  0E00               	movlw	0
  2747  00FA38  6E57               	movwf	printf@exp,c
  2748  00FA3A                     l2759:
  2749                           
  2750                           ;doprnt.c: 1134: }
  2751                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2752  00FA3A  0E01               	movlw	1
  2753  00FA3C  6E64               	movwf	printf@c,c
  2754  00FA3E                     l2761:
  2755  00FA3E  0E0A               	movlw	10
  2756  00FA40  1864               	xorwf	printf@c,w,c
  2757  00FA42  B4D8               	btfsc	status,2,c
  2758  00FA44  D01B               	goto	l2773
  2759                           
  2760                           ;doprnt.c: 1137: if(val < dpowers[c])
  2761  00FA46  5064               	movf	printf@c,w,c
  2762  00FA48  0D04               	mullw	4
  2763  00FA4A  0E87               	movlw	low _dpowers
  2764  00FA4C  24F3               	addwf	prodl,w,c
  2765  00FA4E  6EF6               	movwf	tblptrl,c
  2766  00FA50  0EFE               	movlw	high _dpowers
  2767  00FA52  20F4               	addwfc	prodh,w,c
  2768  00FA54  6EF7               	movwf	tblptrh,c
  2769  00FA56                     	if	1	;There are 3 active tblptr bytes
  2770  00FA56  6AF8               	clrf	tblptru,c
  2771  00FA58  0E00               	movlw	low (__mediumconst shr (0+16))
  2772  00FA5A  22F8               	addwfc	tblptru,f,c
  2773  00FA5C                     	endif
  2774  00FA5C  0009               	tblrd		*+
  2775  00FA5E  50F5               	movf	tablat,w,c
  2776  00FA60  5C59               	subwf	printf@val,w,c
  2777  00FA62  0009               	tblrd		*+
  2778  00FA64  50F5               	movf	tablat,w,c
  2779  00FA66  585A               	subwfb	printf@val+1,w,c
  2780  00FA68  0009               	tblrd		*+
  2781  00FA6A  50F5               	movf	tablat,w,c
  2782  00FA6C  585B               	subwfb	printf@val+2,w,c
  2783  00FA6E  0009               	tblrd		*+
  2784  00FA70  50F5               	movf	tablat,w,c
  2785  00FA72  585C               	subwfb	printf@val+3,w,c
  2786  00FA74  A0D8               	btfss	status,0,c
  2787  00FA76  D002               	goto	l2773
  2788                           
  2789                           ;doprnt.c: 1138: break;
  2790  00FA78  2A64               	incf	printf@c,f,c
  2791  00FA7A  D7E1               	goto	l2761
  2792  00FA7C                     l2773:
  2793                           
  2794                           ;doprnt.c: 1175: {
  2795                           ;doprnt.c: 1188: if(flag & 0x03)
  2796  00FA7C  0E03               	movlw	3
  2797  00FA7E  1451               	andwf	printf@flag,w,c
  2798  00FA80  6E46               	movwf	??_printf& (0+255),c
  2799  00FA82  0E00               	movlw	0
  2800  00FA84  1452               	andwf	printf@flag+1,w,c
  2801  00FA86  6E47               	movwf	(??_printf+1)& (0+255),c
  2802  00FA88  5046               	movf	??_printf,w,c
  2803  00FA8A  1047               	iorwf	??_printf+1,w,c
  2804  00FA8C  B4D8               	btfsc	status,2,c
  2805  00FA8E  D04B               	goto	l2783
  2806                           
  2807                           ;doprnt.c: 1190: (putch('-') );
  2808  00FA90  0E2D               	movlw	45
  2809  00FA92  ECD3  F06E         	call	_putch
  2810                           
  2811                           ;doprnt.c: 1195: }
  2812                           ;doprnt.c: 1196: while(c--) {
  2813  00FA96  D047               	goto	l2783
  2814  00FA98                     l2777:
  2815                           
  2816                           ;doprnt.c: 1200: {
  2817                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2818  00FA98  C059  F001         	movff	printf@val,___lldiv@dividend
  2819  00FA9C  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2820  00FAA0  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2821  00FAA4  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2822  00FAA8  5064               	movf	printf@c,w,c
  2823  00FAAA  0D04               	mullw	4
  2824  00FAAC  0E87               	movlw	low _dpowers
  2825  00FAAE  24F3               	addwf	prodl,w,c
  2826  00FAB0  6EF6               	movwf	tblptrl,c
  2827  00FAB2  0EFE               	movlw	high _dpowers
  2828  00FAB4  20F4               	addwfc	prodh,w,c
  2829  00FAB6  6EF7               	movwf	tblptrh,c
  2830  00FAB8                     	if	1	;There are 3 active tblptr bytes
  2831  00FAB8  6AF8               	clrf	tblptru,c
  2832  00FABA  0E00               	movlw	low (__mediumconst shr (0+16))
  2833  00FABC  22F8               	addwfc	tblptru,f,c
  2834  00FABE                     	endif
  2835  00FABE  0009               	tblrd		*+
  2836  00FAC0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2837  00FAC4  0009               	tblrd		*+
  2838  00FAC6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2839  00FACA  0009               	tblrd		*+
  2840  00FACC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2841  00FAD0  000A               	tblrd		*-
  2842  00FAD2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2843  00FAD6  EC83  F070         	call	___lldiv	;wreg free
  2844  00FADA  C001  F05D         	movff	?___lldiv,printf@tmpval
  2845  00FADE  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2846  00FAE2  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2847  00FAE6  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2848                           
  2849                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2850  00FAEA  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  2851  00FAEE  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2852  00FAF2  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2853  00FAF6  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2854  00FAFA  0E0A               	movlw	10
  2855  00FAFC  6E12               	movwf	___llmod@divisor,c
  2856  00FAFE  0E00               	movlw	0
  2857  00FB00  6E13               	movwf	___llmod@divisor+1,c
  2858  00FB02  0E00               	movlw	0
  2859  00FB04  6E14               	movwf	___llmod@divisor+2,c
  2860  00FB06  0E00               	movlw	0
  2861  00FB08  6E15               	movwf	___llmod@divisor+3,c
  2862  00FB0A  ECD9  F06F         	call	___llmod	;wreg free
  2863  00FB0E  C00E  F05D         	movff	?___llmod,printf@tmpval
  2864  00FB12  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  2865  00FB16  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  2866  00FB1A  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  2867                           
  2868                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2869  00FB1E  505D               	movf	printf@tmpval,w,c
  2870  00FB20  0F30               	addlw	48
  2871  00FB22  ECD3  F06E         	call	_putch
  2872  00FB26                     l2783:
  2873  00FB26  0664               	decf	printf@c,f,c
  2874  00FB28  2864               	incf	printf@c,w,c
  2875  00FB2A  B4D8               	btfsc	status,2,c
  2876  00FB2C  D007               	goto	l2789
  2877  00FB2E  D7B4               	goto	l2777
  2878  00FB30                     l2785:
  2879                           
  2880                           ;doprnt.c: 1208: (putch('0') );
  2881  00FB30  0E30               	movlw	48
  2882  00FB32  ECD3  F06E         	call	_putch
  2883                           
  2884                           ;doprnt.c: 1209: exp--;
  2885  00FB36  0657               	decf	printf@exp,f,c
  2886  00FB38  A0D8               	btfss	status,0,c
  2887  00FB3A  0658               	decf	printf@exp+1,f,c
  2888  00FB3C                     l2789:
  2889  00FB3C  BE58               	btfsc	printf@exp+1,7,c
  2890  00FB3E  D005               	goto	l2791
  2891  00FB40  5058               	movf	printf@exp+1,w,c
  2892  00FB42  E1F6               	bnz	l2785
  2893  00FB44  0457               	decf	printf@exp,w,c
  2894  00FB46  B0D8               	btfsc	status,0,c
  2895  00FB48  D7F3               	goto	l2785
  2896  00FB4A                     l2791:
  2897                           
  2898                           ;doprnt.c: 1210: }
  2899                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2900  00FB4A  BE56               	btfsc	printf@prec+1,7,c
  2901  00FB4C  D009               	goto	l209
  2902  00FB4E  5056               	movf	printf@prec+1,w,c
  2903  00FB50  E104               	bnz	u2640
  2904  00FB52  0E09               	movlw	9
  2905  00FB54  5C55               	subwf	printf@prec,w,c
  2906  00FB56  A0D8               	btfss	status,0,c
  2907  00FB58  D003               	goto	l209
  2908  00FB5A                     u2640:
  2909                           
  2910                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2911  00FB5A  0E08               	movlw	8
  2912  00FB5C  6E64               	movwf	printf@c,c
  2913  00FB5E  D002               	goto	l2795
  2914  00FB60                     l209:
  2915                           
  2916                           ;doprnt.c: 1213: else
  2917                           ;doprnt.c: 1214: c = prec;
  2918  00FB60  C055  F064         	movff	printf@prec,printf@c
  2919  00FB64                     l2795:
  2920                           
  2921                           ;doprnt.c: 1215: prec -= c;
  2922  00FB64  5064               	movf	printf@c,w,c
  2923  00FB66  5E55               	subwf	printf@prec,f,c
  2924  00FB68  0E00               	movlw	0
  2925  00FB6A  BE64               	btfsc	printf@c,7,c
  2926  00FB6C  0EFF               	movlw	255
  2927  00FB6E  5A56               	subwfb	printf@prec+1,f,c
  2928                           
  2929                           ;doprnt.c: 1219: if(c)
  2930  00FB70  5064               	movf	printf@c,w,c
  2931  00FB72  B4D8               	btfsc	status,2,c
  2932  00FB74  D003               	goto	l2801
  2933                           
  2934                           ;doprnt.c: 1221: (putch('.') );
  2935  00FB76  0E2E               	movlw	46
  2936  00FB78  ECD3  F06E         	call	_putch
  2937  00FB7C                     l2801:
  2938                           
  2939                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2940  00FB7C  5064               	movf	printf@c,w,c
  2941  00FB7E  ECD1  F075         	call	_scale
  2942  00FB82  C024  F04C         	movff	?_scale,_printf$862
  2943  00FB86  C025  F04D         	movff	?_scale+1,_printf$862+1
  2944  00FB8A  C026  F04E         	movff	?_scale+2,_printf$862+2
  2945                           
  2946                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2947  00FB8E  C061  F018         	movff	printf@fval,___ftmul@f2
  2948  00FB92  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2949  00FB96  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2950  00FB9A  C04C  F015         	movff	_printf$862,___ftmul@f1
  2951  00FB9E  C04D  F016         	movff	_printf$862+1,___ftmul@f1+1
  2952  00FBA2  C04E  F017         	movff	_printf$862+2,___ftmul@f1+2
  2953  00FBA6  EC1F  F072         	call	___ftmul	;wreg free
  2954  00FBAA  C015  F02B         	movff	?___ftmul,___fttol@f1
  2955  00FBAE  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2956  00FBB2  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2957  00FBB6  ECA5  F071         	call	___fttol	;wreg free
  2958  00FBBA  C02B  F059         	movff	?___fttol,printf@val
  2959  00FBBE  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2960  00FBC2  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2961  00FBC6  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2962                           
  2963                           ;doprnt.c: 1228: while(c--) {
  2964  00FBCA  D070               	goto	l2811
  2965  00FBCC                     l2805:
  2966                           
  2967                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2968  00FBCC  C059  F001         	movff	printf@val,___lldiv@dividend
  2969  00FBD0  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2970  00FBD4  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2971  00FBD8  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2972  00FBDC  5064               	movf	printf@c,w,c
  2973  00FBDE  0D04               	mullw	4
  2974  00FBE0  0E87               	movlw	low _dpowers
  2975  00FBE2  24F3               	addwf	prodl,w,c
  2976  00FBE4  6EF6               	movwf	tblptrl,c
  2977  00FBE6  0EFE               	movlw	high _dpowers
  2978  00FBE8  20F4               	addwfc	prodh,w,c
  2979  00FBEA  6EF7               	movwf	tblptrh,c
  2980  00FBEC                     	if	1	;There are 3 active tblptr bytes
  2981  00FBEC  6AF8               	clrf	tblptru,c
  2982  00FBEE  0E00               	movlw	low (__mediumconst shr (0+16))
  2983  00FBF0  22F8               	addwfc	tblptru,f,c
  2984  00FBF2                     	endif
  2985  00FBF2  0009               	tblrd		*+
  2986  00FBF4  CFF5 F005          	movff	tablat,___lldiv@divisor
  2987  00FBF8  0009               	tblrd		*+
  2988  00FBFA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2989  00FBFE  0009               	tblrd		*+
  2990  00FC00  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2991  00FC04  000A               	tblrd		*-
  2992  00FC06  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2993  00FC0A  EC83  F070         	call	___lldiv	;wreg free
  2994  00FC0E  C001  F05D         	movff	?___lldiv,printf@tmpval
  2995  00FC12  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2996  00FC16  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2997  00FC1A  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2998                           
  2999                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3000  00FC1E  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  3001  00FC22  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3002  00FC26  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3003  00FC2A  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3004  00FC2E  0E0A               	movlw	10
  3005  00FC30  6E12               	movwf	___llmod@divisor,c
  3006  00FC32  0E00               	movlw	0
  3007  00FC34  6E13               	movwf	___llmod@divisor+1,c
  3008  00FC36  0E00               	movlw	0
  3009  00FC38  6E14               	movwf	___llmod@divisor+2,c
  3010  00FC3A  0E00               	movlw	0
  3011  00FC3C  6E15               	movwf	___llmod@divisor+3,c
  3012  00FC3E  ECD9  F06F         	call	___llmod	;wreg free
  3013  00FC42  C00E  F05D         	movff	?___llmod,printf@tmpval
  3014  00FC46  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  3015  00FC4A  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  3016  00FC4E  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  3017                           
  3018                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3019  00FC52  505D               	movf	printf@tmpval,w,c
  3020  00FC54  0F30               	addlw	48
  3021  00FC56  ECD3  F06E         	call	_putch
  3022                           
  3023                           ;doprnt.c: 1232: val %= dpowers[c];
  3024  00FC5A  C059  F00E         	movff	printf@val,___llmod@dividend
  3025  00FC5E  C05A  F00F         	movff	printf@val+1,___llmod@dividend+1
  3026  00FC62  C05B  F010         	movff	printf@val+2,___llmod@dividend+2
  3027  00FC66  C05C  F011         	movff	printf@val+3,___llmod@dividend+3
  3028  00FC6A  5064               	movf	printf@c,w,c
  3029  00FC6C  0D04               	mullw	4
  3030  00FC6E  0E87               	movlw	low _dpowers
  3031  00FC70  24F3               	addwf	prodl,w,c
  3032  00FC72  6EF6               	movwf	tblptrl,c
  3033  00FC74  0EFE               	movlw	high _dpowers
  3034  00FC76  20F4               	addwfc	prodh,w,c
  3035  00FC78  6EF7               	movwf	tblptrh,c
  3036  00FC7A                     	if	1	;There are 3 active tblptr bytes
  3037  00FC7A  6AF8               	clrf	tblptru,c
  3038  00FC7C  0E00               	movlw	low (__mediumconst shr (0+16))
  3039  00FC7E  22F8               	addwfc	tblptru,f,c
  3040  00FC80                     	endif
  3041  00FC80  0009               	tblrd		*+
  3042  00FC82  CFF5 F012          	movff	tablat,___llmod@divisor
  3043  00FC86  0009               	tblrd		*+
  3044  00FC88  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3045  00FC8C  0009               	tblrd		*+
  3046  00FC8E  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3047  00FC92  000A               	tblrd		*-
  3048  00FC94  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3049  00FC98  ECD9  F06F         	call	___llmod	;wreg free
  3050  00FC9C  C00E  F059         	movff	?___llmod,printf@val
  3051  00FCA0  C00F  F05A         	movff	?___llmod+1,printf@val+1
  3052  00FCA4  C010  F05B         	movff	?___llmod+2,printf@val+2
  3053  00FCA8  C011  F05C         	movff	?___llmod+3,printf@val+3
  3054  00FCAC                     l2811:
  3055  00FCAC  0664               	decf	printf@c,f,c
  3056  00FCAE  2864               	incf	printf@c,w,c
  3057  00FCB0  B4D8               	btfsc	status,2,c
  3058  00FCB2  D007               	goto	l2817
  3059  00FCB4  D78B               	goto	l2805
  3060  00FCB6                     l2813:
  3061                           
  3062                           ;doprnt.c: 1236: (putch('0') );
  3063  00FCB6  0E30               	movlw	48
  3064  00FCB8  ECD3  F06E         	call	_putch
  3065                           
  3066                           ;doprnt.c: 1237: prec--;
  3067  00FCBC  0655               	decf	printf@prec,f,c
  3068  00FCBE  A0D8               	btfss	status,0,c
  3069  00FCC0  0656               	decf	printf@prec+1,f,c
  3070  00FCC2                     l2817:
  3071  00FCC2  5055               	movf	printf@prec,w,c
  3072  00FCC4  1056               	iorwf	printf@prec+1,w,c
  3073  00FCC6  B4D8               	btfsc	status,2,c
  3074  00FCC8  D0D0               	goto	l2869
  3075  00FCCA  D7F5               	goto	l2813
  3076  00FCCC                     l181:
  3077                           
  3078                           ;doprnt.c: 1246: }
  3079                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3080  00FCCC  BC51               	btfsc	printf@flag,6,c
  3081  00FCCE  D02E               	goto	l218
  3082                           
  3083                           ;doprnt.c: 1253: {
  3084                           ;doprnt.c: 1255: if(flag & 0x10)
  3085  00FCD0  A851               	btfss	printf@flag,4,c
  3086  00FCD2  D00E               	goto	l2825
  3087                           
  3088                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3089  00FCD4  C053  FFD9         	movff	printf@ap,fsr2l
  3090  00FCD8  C054  FFDA         	movff	printf@ap+1,fsr2h
  3091  00FCDC  CFDE F059          	movff	postinc2,printf@val
  3092  00FCE0  CFDE F05A          	movff	postinc2,printf@val+1
  3093  00FCE4  CFDE F05B          	movff	postinc2,printf@val+2
  3094  00FCE8  CFDE F05C          	movff	postinc2,printf@val+3
  3095  00FCEC  0E04               	movlw	4
  3096  00FCEE  D00E               	goto	L3
  3097  00FCF0                     l2825:
  3098                           
  3099                           ;doprnt.c: 1257: else
  3100                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3101  00FCF0  C053  FFD9         	movff	printf@ap,fsr2l
  3102  00FCF4  C054  FFDA         	movff	printf@ap+1,fsr2h
  3103  00FCF8  CFDE F059          	movff	postinc2,printf@val
  3104  00FCFC  CFDD F05A          	movff	postdec2,printf@val+1
  3105  00FD00  0E00               	movlw	0
  3106  00FD02  BE5A               	btfsc	printf@val+1,7,c
  3107  00FD04  0EFF               	movlw	-1
  3108  00FD06  6E5B               	movwf	printf@val+2,c
  3109  00FD08  6E5C               	movwf	printf@val+3,c
  3110  00FD0A  0E02               	movlw	2
  3111  00FD0C                     L3:
  3112  00FD0C  2653               	addwf	printf@ap,f,c
  3113  00FD0E  0E00               	movlw	0
  3114  00FD10  2254               	addwfc	printf@ap+1,f,c
  3115                           
  3116                           ;doprnt.c: 1261: if((long)val < 0) {
  3117  00FD12  AE5C               	btfss	printf@val+3,7,c
  3118  00FD14  D02D               	goto	l2843
  3119                           
  3120                           ;doprnt.c: 1262: flag |= 0x03;
  3121  00FD16  0E03               	movlw	3
  3122  00FD18  1251               	iorwf	printf@flag,f,c
  3123                           
  3124                           ;doprnt.c: 1263: val = -val;
  3125  00FD1A  1E5C               	comf	printf@val+3,f,c
  3126  00FD1C  1E5B               	comf	printf@val+2,f,c
  3127  00FD1E  1E5A               	comf	printf@val+1,f,c
  3128  00FD20  6C59               	negf	printf@val,c
  3129  00FD22  0E00               	movlw	0
  3130  00FD24  225A               	addwfc	printf@val+1,f,c
  3131  00FD26  225B               	addwfc	printf@val+2,f,c
  3132  00FD28  225C               	addwfc	printf@val+3,f,c
  3133                           
  3134                           ;doprnt.c: 1264: }
  3135                           ;doprnt.c: 1266: }
  3136  00FD2A  D022               	goto	l2843
  3137  00FD2C                     l218:
  3138                           
  3139                           ;doprnt.c: 1268: else
  3140                           ;doprnt.c: 1273: {
  3141                           ;doprnt.c: 1281: if(flag & 0x10)
  3142  00FD2C  A851               	btfss	printf@flag,4,c
  3143  00FD2E  D00E               	goto	l2839
  3144                           
  3145                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3146  00FD30  C053  FFD9         	movff	printf@ap,fsr2l
  3147  00FD34  C054  FFDA         	movff	printf@ap+1,fsr2h
  3148  00FD38  CFDE F059          	movff	postinc2,printf@val
  3149  00FD3C  CFDE F05A          	movff	postinc2,printf@val+1
  3150  00FD40  CFDE F05B          	movff	postinc2,printf@val+2
  3151  00FD44  CFDE F05C          	movff	postinc2,printf@val+3
  3152  00FD48  0E04               	movlw	4
  3153  00FD4A  D00F               	goto	L4
  3154  00FD4C                     l2839:
  3155                           
  3156                           ;doprnt.c: 1283: else
  3157                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3158  00FD4C  C053  FFD9         	movff	printf@ap,fsr2l
  3159  00FD50  C054  FFDA         	movff	printf@ap+1,fsr2h
  3160  00FD54  CFDE F046          	movff	postinc2,??_printf
  3161  00FD58  CFDD F047          	movff	postdec2,??_printf+1
  3162  00FD5C  C046  F059         	movff	??_printf,printf@val
  3163  00FD60  C047  F05A         	movff	??_printf+1,printf@val+1
  3164  00FD64  6A5B               	clrf	printf@val+2,c
  3165  00FD66  6A5C               	clrf	printf@val+3,c
  3166  00FD68  0E02               	movlw	2
  3167  00FD6A                     L4:
  3168  00FD6A  2653               	addwf	printf@ap,f,c
  3169  00FD6C  0E00               	movlw	0
  3170  00FD6E  2254               	addwfc	printf@ap+1,f,c
  3171  00FD70                     l2843:
  3172                           
  3173                           ;doprnt.c: 1287: }
  3174                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3175  00FD70  0E01               	movlw	1
  3176  00FD72  6E64               	movwf	printf@c,c
  3177  00FD74                     l2845:
  3178  00FD74  0E0A               	movlw	10
  3179  00FD76  1864               	xorwf	printf@c,w,c
  3180  00FD78  B4D8               	btfsc	status,2,c
  3181  00FD7A  D01B               	goto	l2857
  3182                           
  3183                           ;doprnt.c: 1306: if(val < dpowers[c])
  3184  00FD7C  5064               	movf	printf@c,w,c
  3185  00FD7E  0D04               	mullw	4
  3186  00FD80  0E87               	movlw	low _dpowers
  3187  00FD82  24F3               	addwf	prodl,w,c
  3188  00FD84  6EF6               	movwf	tblptrl,c
  3189  00FD86  0EFE               	movlw	high _dpowers
  3190  00FD88  20F4               	addwfc	prodh,w,c
  3191  00FD8A  6EF7               	movwf	tblptrh,c
  3192  00FD8C                     	if	1	;There are 3 active tblptr bytes
  3193  00FD8C  6AF8               	clrf	tblptru,c
  3194  00FD8E  0E00               	movlw	low (__mediumconst shr (0+16))
  3195  00FD90  22F8               	addwfc	tblptru,f,c
  3196  00FD92                     	endif
  3197  00FD92  0009               	tblrd		*+
  3198  00FD94  50F5               	movf	tablat,w,c
  3199  00FD96  5C59               	subwf	printf@val,w,c
  3200  00FD98  0009               	tblrd		*+
  3201  00FD9A  50F5               	movf	tablat,w,c
  3202  00FD9C  585A               	subwfb	printf@val+1,w,c
  3203  00FD9E  0009               	tblrd		*+
  3204  00FDA0  50F5               	movf	tablat,w,c
  3205  00FDA2  585B               	subwfb	printf@val+2,w,c
  3206  00FDA4  0009               	tblrd		*+
  3207  00FDA6  50F5               	movf	tablat,w,c
  3208  00FDA8  585C               	subwfb	printf@val+3,w,c
  3209  00FDAA  A0D8               	btfss	status,0,c
  3210  00FDAC  D002               	goto	l2857
  3211                           
  3212                           ;doprnt.c: 1307: break;
  3213  00FDAE  2A64               	incf	printf@c,f,c
  3214  00FDB0  D7E1               	goto	l2845
  3215  00FDB2                     l2857:
  3216                           
  3217                           ;doprnt.c: 1422: {
  3218                           ;doprnt.c: 1438: if(flag & 0x03)
  3219  00FDB2  0E03               	movlw	3
  3220  00FDB4  1451               	andwf	printf@flag,w,c
  3221  00FDB6  6E46               	movwf	??_printf& (0+255),c
  3222  00FDB8  0E00               	movlw	0
  3223  00FDBA  1452               	andwf	printf@flag+1,w,c
  3224  00FDBC  6E47               	movwf	(??_printf+1)& (0+255),c
  3225  00FDBE  5046               	movf	??_printf,w,c
  3226  00FDC0  1047               	iorwf	??_printf+1,w,c
  3227  00FDC2  B4D8               	btfsc	status,2,c
  3228  00FDC4  D003               	goto	l2861
  3229                           
  3230                           ;doprnt.c: 1439: (putch('-') );
  3231  00FDC6  0E2D               	movlw	45
  3232  00FDC8  ECD3  F06E         	call	_putch
  3233  00FDCC                     l2861:
  3234                           
  3235                           ;doprnt.c: 1469: }
  3236                           ;doprnt.c: 1472: prec = c;
  3237  00FDCC  5064               	movf	printf@c,w,c
  3238  00FDCE  6E55               	movwf	printf@prec,c
  3239  00FDD0  6A56               	clrf	printf@prec+1,c
  3240  00FDD2  BE55               	btfsc	printf@prec,7,c
  3241  00FDD4  0656               	decf	printf@prec+1,f,c
  3242                           
  3243                           ;doprnt.c: 1474: while(prec--) {
  3244  00FDD6  D041               	goto	l2867
  3245  00FDD8                     l2863:
  3246                           
  3247                           ;doprnt.c: 1478: {
  3248                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3249  00FDD8  C055  F046         	movff	printf@prec,??_printf
  3250  00FDDC  C056  F047         	movff	printf@prec+1,??_printf+1
  3251  00FDE0  90D8               	bcf	status,0,c
  3252  00FDE2  3646               	rlcf	??_printf,f,c
  3253  00FDE4  3647               	rlcf	??_printf+1,f,c
  3254  00FDE6  90D8               	bcf	status,0,c
  3255  00FDE8  3646               	rlcf	??_printf,f,c
  3256  00FDEA  3647               	rlcf	??_printf+1,f,c
  3257  00FDEC  0E87               	movlw	low _dpowers
  3258  00FDEE  2446               	addwf	??_printf,w,c
  3259  00FDF0  6EF6               	movwf	tblptrl,c
  3260  00FDF2  0EFE               	movlw	high _dpowers
  3261  00FDF4  2047               	addwfc	??_printf+1,w,c
  3262  00FDF6  6EF7               	movwf	tblptrh,c
  3263  00FDF8                     	if	1	;There are 3 active tblptr bytes
  3264  00FDF8  6AF8               	clrf	tblptru,c
  3265  00FDFA  0E00               	movlw	low (__mediumconst shr (0+16))
  3266  00FDFC  22F8               	addwfc	tblptru,f,c
  3267  00FDFE                     	endif
  3268  00FDFE  0009               	tblrd		*+
  3269  00FE00  CFF5 F005          	movff	tablat,___lldiv@divisor
  3270  00FE04  0009               	tblrd		*+
  3271  00FE06  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3272  00FE0A  0009               	tblrd		*+
  3273  00FE0C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3274  00FE10  000A               	tblrd		*-
  3275  00FE12  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3276  00FE16  C059  F001         	movff	printf@val,___lldiv@dividend
  3277  00FE1A  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3278  00FE1E  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3279  00FE22  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3280  00FE26  EC83  F070         	call	___lldiv	;wreg free
  3281  00FE2A  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3282  00FE2E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3283  00FE32  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3284  00FE36  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3285  00FE3A  0E0A               	movlw	10
  3286  00FE3C  6E12               	movwf	___llmod@divisor,c
  3287  00FE3E  0E00               	movlw	0
  3288  00FE40  6E13               	movwf	___llmod@divisor+1,c
  3289  00FE42  0E00               	movlw	0
  3290  00FE44  6E14               	movwf	___llmod@divisor+2,c
  3291  00FE46  0E00               	movlw	0
  3292  00FE48  6E15               	movwf	___llmod@divisor+3,c
  3293  00FE4A  ECD9  F06F         	call	___llmod	;wreg free
  3294  00FE4E  500E               	movf	?___llmod,w,c
  3295  00FE50  0F30               	addlw	48
  3296  00FE52  6E64               	movwf	printf@c,c
  3297                           
  3298                           ;doprnt.c: 1523: }
  3299                           ;doprnt.c: 1524: (putch(c) );
  3300  00FE54  5064               	movf	printf@c,w,c
  3301  00FE56  ECD3  F06E         	call	_putch
  3302  00FE5A                     l2867:
  3303  00FE5A  0655               	decf	printf@prec,f,c
  3304  00FE5C  A0D8               	btfss	status,0,c
  3305  00FE5E  0656               	decf	printf@prec+1,f,c
  3306  00FE60  2855               	incf	printf@prec,w,c
  3307  00FE62  E1BA               	bnz	l2863
  3308  00FE64  2856               	incf	printf@prec+1,w,c
  3309  00FE66  A4D8               	btfss	status,2,c
  3310  00FE68  D7B7               	goto	l2863
  3311  00FE6A                     l2869:
  3312  00FE6A  C040  FFF6         	movff	printf@f,tblptrl
  3313  00FE6E  C041  FFF7         	movff	printf@f+1,tblptrh
  3314  00FE72  4A40               	infsnz	printf@f,f,c
  3315  00FE74  2A41               	incf	printf@f+1,f,c
  3316  00FE76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3317  00FE76  6AF8               	clrf	tblptru,c
  3318  00FE78                     	endif
  3319  00FE78                     	if	0	;tblptru may be non-zero
  3320  00FE78                     	endif
  3321  00FE78  0008               	tblrd		*
  3322  00FE7A  CFF5 F064          	movff	tablat,printf@c
  3323  00FE7E  5064               	movf	printf@c,w,c
  3324  00FE80  B4D8               	btfsc	status,2,c
  3325  00FE82  0012               	return	
  3326  00FE84  D404               	goto	l2657
  3327  00FE86                     __end_of_printf:
  3328                           	opt stack 0
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           indf0	equ	0xFEF
  3336                           postinc0	equ	0xFEE
  3337                           fsr0h	equ	0xFEA
  3338                           fsr0l	equ	0xFE9
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           plusw1	equ	0xFE3
  3342                           fsr1l	equ	0xFE1
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           plusw2	equ	0xFDB
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _scale *****************
  3351 ;; Defined at:
  3352 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  scl             1    wreg     char 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  scl             1   41[COMRAM] char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  3   35[COMRAM] char 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        7 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    2
  3373 ;; This function calls:
  3374 ;;		___awdiv
  3375 ;;		___awmod
  3376 ;;		___ftmul
  3377 ;;		___wmul
  3378 ;; This function is called by:
  3379 ;;		_printf
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text2
  3384  00EBA2                     __ptext2:
  3385                           	opt stack 0
  3386  00EBA2                     _scale:
  3387                           	opt stack 27
  3388                           
  3389                           ;incstack = 0
  3390                           ;scale@scl stored from wreg
  3391  00EBA2  6E2A               	movwf	scale@scl,c
  3392                           
  3393                           ;doprnt.c: 428: if(scl < 0) {
  3394  00EBA4  AE2A               	btfss	scale@scl,7,c
  3395  00EBA6  D10D               	goto	l2381
  3396                           
  3397                           ;doprnt.c: 429: scl = -scl;
  3398  00EBA8  6C2A               	negf	scale@scl,c
  3399                           
  3400                           ;doprnt.c: 430: if(scl>=110)
  3401  00EBAA  502A               	movf	scale@scl,w,c
  3402  00EBAC  0A80               	xorlw	128
  3403  00EBAE  0F12               	addlw	-238
  3404  00EBB0  A0D8               	btfss	status,0,c
  3405  00EBB2  D09A               	goto	l2371
  3406                           
  3407                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3408  00EBB4  0E00               	movlw	0
  3409  00EBB6  6E12               	movwf	___wmul@multiplicand+1,c
  3410  00EBB8  0E03               	movlw	3
  3411  00EBBA  6E11               	movwf	___wmul@multiplicand,c
  3412  00EBBC  0E00               	movlw	0
  3413  00EBBE  6E0A               	movwf	___awdiv@divisor+1,c
  3414  00EBC0  0E0A               	movlw	10
  3415  00EBC2  6E09               	movwf	___awdiv@divisor,c
  3416  00EBC4  0E00               	movlw	0
  3417  00EBC6  6E04               	movwf	___awmod@divisor+1,c
  3418  00EBC8  0E64               	movlw	100
  3419  00EBCA  6E03               	movwf	___awmod@divisor,c
  3420  00EBCC  502A               	movf	scale@scl,w,c
  3421  00EBCE  6E01               	movwf	___awmod@dividend,c
  3422  00EBD0  6A02               	clrf	___awmod@dividend+1,c
  3423  00EBD2  BE01               	btfsc	___awmod@dividend,7,c
  3424  00EBD4  0602               	decf	___awmod@dividend+1,f,c
  3425  00EBD6  EC0C  F070         	call	___awmod	;wreg free
  3426  00EBDA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3427  00EBDE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3428  00EBE2  ECC4  F070         	call	___awdiv	;wreg free
  3429  00EBE6  0E09               	movlw	9
  3430  00EBE8  2407               	addwf	?___awdiv,w,c
  3431  00EBEA  6E0F               	movwf	___wmul@multiplier,c
  3432  00EBEC  0E00               	movlw	0
  3433  00EBEE  2008               	addwfc	?___awdiv+1,w,c
  3434  00EBF0  6E10               	movwf	___wmul@multiplier+1,c
  3435  00EBF2  EC0B  F06F         	call	___wmul	;wreg free
  3436  00EBF6  0ED6               	movlw	low __npowers_
  3437  00EBF8  240F               	addwf	?___wmul,w,c
  3438  00EBFA  6EF6               	movwf	tblptrl,c
  3439  00EBFC  0EFE               	movlw	high __npowers_
  3440  00EBFE  2010               	addwfc	?___wmul+1,w,c
  3441  00EC00  6EF7               	movwf	tblptrh,c
  3442  00EC02                     	if	1	;There are 3 active tblptr bytes
  3443  00EC02  6AF8               	clrf	tblptru,c
  3444  00EC04  0E00               	movlw	low (__mediumconst shr (0+16))
  3445  00EC06  22F8               	addwfc	tblptru,f,c
  3446  00EC08                     	endif
  3447  00EC08  0009               	tblrd		*+
  3448  00EC0A  CFF5 F018          	movff	tablat,___ftmul@f2
  3449  00EC0E  0009               	tblrd		*+
  3450  00EC10  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3451  00EC14  000A               	tblrd		*-
  3452  00EC16  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3453  00EC1A  0E00               	movlw	0
  3454  00EC1C  6E0A               	movwf	___awdiv@divisor+1,c
  3455  00EC1E  0E64               	movlw	100
  3456  00EC20  6E09               	movwf	___awdiv@divisor,c
  3457  00EC22  502A               	movf	scale@scl,w,c
  3458  00EC24  6E07               	movwf	___awdiv@dividend,c
  3459  00EC26  6A08               	clrf	___awdiv@dividend+1,c
  3460  00EC28  BE07               	btfsc	___awdiv@dividend,7,c
  3461  00EC2A  0608               	decf	___awdiv@dividend+1,f,c
  3462  00EC2C  ECC4  F070         	call	___awdiv	;wreg free
  3463  00EC30  0E12               	movlw	18
  3464  00EC32  2407               	addwf	?___awdiv,w,c
  3465  00EC34  6E0F               	movwf	___wmul@multiplier,c
  3466  00EC36  0E00               	movlw	0
  3467  00EC38  2008               	addwfc	?___awdiv+1,w,c
  3468  00EC3A  6E10               	movwf	___wmul@multiplier+1,c
  3469  00EC3C  0E00               	movlw	0
  3470  00EC3E  6E12               	movwf	___wmul@multiplicand+1,c
  3471  00EC40  0E03               	movlw	3
  3472  00EC42  6E11               	movwf	___wmul@multiplicand,c
  3473  00EC44  EC0B  F06F         	call	___wmul	;wreg free
  3474  00EC48  0ED6               	movlw	low __npowers_
  3475  00EC4A  240F               	addwf	?___wmul,w,c
  3476  00EC4C  6EF6               	movwf	tblptrl,c
  3477  00EC4E  0EFE               	movlw	high __npowers_
  3478  00EC50  2010               	addwfc	?___wmul+1,w,c
  3479  00EC52  6EF7               	movwf	tblptrh,c
  3480  00EC54                     	if	1	;There are 3 active tblptr bytes
  3481  00EC54  6AF8               	clrf	tblptru,c
  3482  00EC56  0E00               	movlw	low (__mediumconst shr (0+16))
  3483  00EC58  22F8               	addwfc	tblptru,f,c
  3484  00EC5A                     	endif
  3485  00EC5A  0009               	tblrd		*+
  3486  00EC5C  CFF5 F015          	movff	tablat,___ftmul@f1
  3487  00EC60  0009               	tblrd		*+
  3488  00EC62  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3489  00EC66  000A               	tblrd		*-
  3490  00EC68  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3491  00EC6C  EC1F  F072         	call	___ftmul	;wreg free
  3492  00EC70  C015  F027         	movff	?___ftmul,_scale$861
  3493  00EC74  C016  F028         	movff	?___ftmul+1,_scale$861+1
  3494  00EC78  C017  F029         	movff	?___ftmul+2,_scale$861+2
  3495                           
  3496                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3497  00EC7C  C027  F015         	movff	_scale$861,___ftmul@f1
  3498  00EC80  C028  F016         	movff	_scale$861+1,___ftmul@f1+1
  3499  00EC84  C029  F017         	movff	_scale$861+2,___ftmul@f1+2
  3500  00EC88  0E00               	movlw	0
  3501  00EC8A  6E12               	movwf	___wmul@multiplicand+1,c
  3502  00EC8C  0E03               	movlw	3
  3503  00EC8E  6E11               	movwf	___wmul@multiplicand,c
  3504  00EC90  0E00               	movlw	0
  3505  00EC92  6E04               	movwf	___awmod@divisor+1,c
  3506  00EC94  0E0A               	movlw	10
  3507  00EC96  6E03               	movwf	___awmod@divisor,c
  3508  00EC98  502A               	movf	scale@scl,w,c
  3509  00EC9A  6E01               	movwf	___awmod@dividend,c
  3510  00EC9C  6A02               	clrf	___awmod@dividend+1,c
  3511  00EC9E  BE01               	btfsc	___awmod@dividend,7,c
  3512  00ECA0  0602               	decf	___awmod@dividend+1,f,c
  3513  00ECA2  EC0C  F070         	call	___awmod	;wreg free
  3514  00ECA6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3515  00ECAA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3516  00ECAE  EC0B  F06F         	call	___wmul	;wreg free
  3517  00ECB2  0ED6               	movlw	low __npowers_
  3518  00ECB4  240F               	addwf	?___wmul,w,c
  3519  00ECB6  6EF6               	movwf	tblptrl,c
  3520  00ECB8  0EFE               	movlw	high __npowers_
  3521  00ECBA  2010               	addwfc	?___wmul+1,w,c
  3522  00ECBC  6EF7               	movwf	tblptrh,c
  3523  00ECBE                     	if	1	;There are 3 active tblptr bytes
  3524  00ECBE  6AF8               	clrf	tblptru,c
  3525  00ECC0  0E00               	movlw	low (__mediumconst shr (0+16))
  3526  00ECC2  22F8               	addwfc	tblptru,f,c
  3527  00ECC4                     	endif
  3528  00ECC4  0009               	tblrd		*+
  3529  00ECC6  CFF5 F018          	movff	tablat,___ftmul@f2
  3530  00ECCA  0009               	tblrd		*+
  3531  00ECCC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3532  00ECD0  000A               	tblrd		*-
  3533  00ECD2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3534  00ECD6  EC1F  F072         	call	___ftmul	;wreg free
  3535  00ECDA  C015  F024         	movff	?___ftmul,?_scale
  3536  00ECDE  C016  F025         	movff	?___ftmul+1,?_scale+1
  3537  00ECE2  C017  F026         	movff	?___ftmul+2,?_scale+2
  3538  00ECE6  0012               	return	
  3539  00ECE8                     l2371:
  3540                           
  3541                           ;doprnt.c: 432: else if(scl > 10)
  3542  00ECE8  502A               	movf	scale@scl,w,c
  3543  00ECEA  0A80               	xorlw	128
  3544  00ECEC  0F75               	addlw	-139
  3545  00ECEE  A0D8               	btfss	status,0,c
  3546  00ECF0  D053               	goto	l2377
  3547                           
  3548                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3549  00ECF2  0E00               	movlw	0
  3550  00ECF4  6E0A               	movwf	___awdiv@divisor+1,c
  3551  00ECF6  0E0A               	movlw	10
  3552  00ECF8  6E09               	movwf	___awdiv@divisor,c
  3553  00ECFA  502A               	movf	scale@scl,w,c
  3554  00ECFC  6E07               	movwf	___awdiv@dividend,c
  3555  00ECFE  6A08               	clrf	___awdiv@dividend+1,c
  3556  00ED00  BE07               	btfsc	___awdiv@dividend,7,c
  3557  00ED02  0608               	decf	___awdiv@dividend+1,f,c
  3558  00ED04  ECC4  F070         	call	___awdiv	;wreg free
  3559  00ED08  0E09               	movlw	9
  3560  00ED0A  2407               	addwf	?___awdiv,w,c
  3561  00ED0C  6E0F               	movwf	___wmul@multiplier,c
  3562  00ED0E  0E00               	movlw	0
  3563  00ED10  2008               	addwfc	?___awdiv+1,w,c
  3564  00ED12  6E10               	movwf	___wmul@multiplier+1,c
  3565  00ED14  0E00               	movlw	0
  3566  00ED16  6E12               	movwf	___wmul@multiplicand+1,c
  3567  00ED18  0E03               	movlw	3
  3568  00ED1A  6E11               	movwf	___wmul@multiplicand,c
  3569  00ED1C  EC0B  F06F         	call	___wmul	;wreg free
  3570  00ED20  0ED6               	movlw	low __npowers_
  3571  00ED22  240F               	addwf	?___wmul,w,c
  3572  00ED24  6EF6               	movwf	tblptrl,c
  3573  00ED26  0EFE               	movlw	high __npowers_
  3574  00ED28  2010               	addwfc	?___wmul+1,w,c
  3575  00ED2A  6EF7               	movwf	tblptrh,c
  3576  00ED2C                     	if	1	;There are 3 active tblptr bytes
  3577  00ED2C  6AF8               	clrf	tblptru,c
  3578  00ED2E  0E00               	movlw	low (__mediumconst shr (0+16))
  3579  00ED30  22F8               	addwfc	tblptru,f,c
  3580  00ED32                     	endif
  3581  00ED32  0009               	tblrd		*+
  3582  00ED34  CFF5 F015          	movff	tablat,___ftmul@f1
  3583  00ED38  0009               	tblrd		*+
  3584  00ED3A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3585  00ED3E  000A               	tblrd		*-
  3586  00ED40  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3587  00ED44  0E00               	movlw	0
  3588  00ED46  6E12               	movwf	___wmul@multiplicand+1,c
  3589  00ED48  0E03               	movlw	3
  3590  00ED4A  6E11               	movwf	___wmul@multiplicand,c
  3591  00ED4C  0E00               	movlw	0
  3592  00ED4E  6E04               	movwf	___awmod@divisor+1,c
  3593  00ED50  0E0A               	movlw	10
  3594  00ED52  6E03               	movwf	___awmod@divisor,c
  3595  00ED54  502A               	movf	scale@scl,w,c
  3596  00ED56  6E01               	movwf	___awmod@dividend,c
  3597  00ED58  6A02               	clrf	___awmod@dividend+1,c
  3598  00ED5A  BE01               	btfsc	___awmod@dividend,7,c
  3599  00ED5C  0602               	decf	___awmod@dividend+1,f,c
  3600  00ED5E  EC0C  F070         	call	___awmod	;wreg free
  3601  00ED62  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3602  00ED66  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3603  00ED6A  EC0B  F06F         	call	___wmul	;wreg free
  3604  00ED6E  0ED6               	movlw	low __npowers_
  3605  00ED70  240F               	addwf	?___wmul,w,c
  3606  00ED72  6EF6               	movwf	tblptrl,c
  3607  00ED74  0EFE               	movlw	high __npowers_
  3608  00ED76  2010               	addwfc	?___wmul+1,w,c
  3609  00ED78  6EF7               	movwf	tblptrh,c
  3610  00ED7A                     	if	1	;There are 3 active tblptr bytes
  3611  00ED7A  6AF8               	clrf	tblptru,c
  3612  00ED7C  0E00               	movlw	low (__mediumconst shr (0+16))
  3613  00ED7E  22F8               	addwfc	tblptru,f,c
  3614  00ED80                     	endif
  3615  00ED80  0009               	tblrd		*+
  3616  00ED82  CFF5 F018          	movff	tablat,___ftmul@f2
  3617  00ED86  0009               	tblrd		*+
  3618  00ED88  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3619  00ED8C  000A               	tblrd		*-
  3620  00ED8E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3621  00ED92  EC1F  F072         	call	___ftmul	;wreg free
  3622  00ED96  D7A1               	goto	L5
  3623  00ED98                     l2377:
  3624                           
  3625                           ;doprnt.c: 434: return _npowers_[scl];
  3626  00ED98  502A               	movf	scale@scl,w,c
  3627  00ED9A  0D03               	mullw	3
  3628  00ED9C  0ED6               	movlw	low __npowers_
  3629  00ED9E  24F3               	addwf	prodl,w,c
  3630  00EDA0  6EF6               	movwf	tblptrl,c
  3631  00EDA2  0EFE               	movlw	high __npowers_
  3632  00EDA4  20F4               	addwfc	prodh,w,c
  3633  00EDA6  6EF7               	movwf	tblptrh,c
  3634  00EDA8                     	if	1	;There are 3 active tblptr bytes
  3635  00EDA8  6AF8               	clrf	tblptru,c
  3636  00EDAA  0E00               	movlw	low (__mediumconst shr (0+16))
  3637  00EDAC  22F8               	addwfc	tblptru,f,c
  3638  00EDAE                     	endif
  3639  00EDAE  0009               	tblrd		*+
  3640  00EDB0  CFF5 F024          	movff	tablat,?_scale
  3641  00EDB4  0009               	tblrd		*+
  3642  00EDB6  CFF5 F025          	movff	tablat,?_scale+1
  3643  00EDBA  000A               	tblrd		*-
  3644  00EDBC  CFF5 F026          	movff	tablat,?_scale+2
  3645  00EDC0  0012               	return	
  3646  00EDC2                     l2381:
  3647                           
  3648                           ;doprnt.c: 435: }
  3649                           ;doprnt.c: 436: if(scl>=110)
  3650  00EDC2  502A               	movf	scale@scl,w,c
  3651  00EDC4  0A80               	xorlw	128
  3652  00EDC6  0F12               	addlw	-238
  3653  00EDC8  A0D8               	btfss	status,0,c
  3654  00EDCA  D09A               	goto	l2389
  3655                           
  3656                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3657  00EDCC  0E00               	movlw	0
  3658  00EDCE  6E12               	movwf	___wmul@multiplicand+1,c
  3659  00EDD0  0E03               	movlw	3
  3660  00EDD2  6E11               	movwf	___wmul@multiplicand,c
  3661  00EDD4  0E00               	movlw	0
  3662  00EDD6  6E0A               	movwf	___awdiv@divisor+1,c
  3663  00EDD8  0E0A               	movlw	10
  3664  00EDDA  6E09               	movwf	___awdiv@divisor,c
  3665  00EDDC  0E00               	movlw	0
  3666  00EDDE  6E04               	movwf	___awmod@divisor+1,c
  3667  00EDE0  0E64               	movlw	100
  3668  00EDE2  6E03               	movwf	___awmod@divisor,c
  3669  00EDE4  502A               	movf	scale@scl,w,c
  3670  00EDE6  6E01               	movwf	___awmod@dividend,c
  3671  00EDE8  6A02               	clrf	___awmod@dividend+1,c
  3672  00EDEA  BE01               	btfsc	___awmod@dividend,7,c
  3673  00EDEC  0602               	decf	___awmod@dividend+1,f,c
  3674  00EDEE  EC0C  F070         	call	___awmod	;wreg free
  3675  00EDF2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3676  00EDF6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3677  00EDFA  ECC4  F070         	call	___awdiv	;wreg free
  3678  00EDFE  0E09               	movlw	9
  3679  00EE00  2407               	addwf	?___awdiv,w,c
  3680  00EE02  6E0F               	movwf	___wmul@multiplier,c
  3681  00EE04  0E00               	movlw	0
  3682  00EE06  2008               	addwfc	?___awdiv+1,w,c
  3683  00EE08  6E10               	movwf	___wmul@multiplier+1,c
  3684  00EE0A  EC0B  F06F         	call	___wmul	;wreg free
  3685  00EE0E  0EAF               	movlw	low __powers_
  3686  00EE10  240F               	addwf	?___wmul,w,c
  3687  00EE12  6EF6               	movwf	tblptrl,c
  3688  00EE14  0EFE               	movlw	high __powers_
  3689  00EE16  2010               	addwfc	?___wmul+1,w,c
  3690  00EE18  6EF7               	movwf	tblptrh,c
  3691  00EE1A                     	if	1	;There are 3 active tblptr bytes
  3692  00EE1A  6AF8               	clrf	tblptru,c
  3693  00EE1C  0E00               	movlw	low (__mediumconst shr (0+16))
  3694  00EE1E  22F8               	addwfc	tblptru,f,c
  3695  00EE20                     	endif
  3696  00EE20  0009               	tblrd		*+
  3697  00EE22  CFF5 F018          	movff	tablat,___ftmul@f2
  3698  00EE26  0009               	tblrd		*+
  3699  00EE28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3700  00EE2C  000A               	tblrd		*-
  3701  00EE2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3702  00EE32  0E00               	movlw	0
  3703  00EE34  6E0A               	movwf	___awdiv@divisor+1,c
  3704  00EE36  0E64               	movlw	100
  3705  00EE38  6E09               	movwf	___awdiv@divisor,c
  3706  00EE3A  502A               	movf	scale@scl,w,c
  3707  00EE3C  6E07               	movwf	___awdiv@dividend,c
  3708  00EE3E  6A08               	clrf	___awdiv@dividend+1,c
  3709  00EE40  BE07               	btfsc	___awdiv@dividend,7,c
  3710  00EE42  0608               	decf	___awdiv@dividend+1,f,c
  3711  00EE44  ECC4  F070         	call	___awdiv	;wreg free
  3712  00EE48  0E12               	movlw	18
  3713  00EE4A  2407               	addwf	?___awdiv,w,c
  3714  00EE4C  6E0F               	movwf	___wmul@multiplier,c
  3715  00EE4E  0E00               	movlw	0
  3716  00EE50  2008               	addwfc	?___awdiv+1,w,c
  3717  00EE52  6E10               	movwf	___wmul@multiplier+1,c
  3718  00EE54  0E00               	movlw	0
  3719  00EE56  6E12               	movwf	___wmul@multiplicand+1,c
  3720  00EE58  0E03               	movlw	3
  3721  00EE5A  6E11               	movwf	___wmul@multiplicand,c
  3722  00EE5C  EC0B  F06F         	call	___wmul	;wreg free
  3723  00EE60  0EAF               	movlw	low __powers_
  3724  00EE62  240F               	addwf	?___wmul,w,c
  3725  00EE64  6EF6               	movwf	tblptrl,c
  3726  00EE66  0EFE               	movlw	high __powers_
  3727  00EE68  2010               	addwfc	?___wmul+1,w,c
  3728  00EE6A  6EF7               	movwf	tblptrh,c
  3729  00EE6C                     	if	1	;There are 3 active tblptr bytes
  3730  00EE6C  6AF8               	clrf	tblptru,c
  3731  00EE6E  0E00               	movlw	low (__mediumconst shr (0+16))
  3732  00EE70  22F8               	addwfc	tblptru,f,c
  3733  00EE72                     	endif
  3734  00EE72  0009               	tblrd		*+
  3735  00EE74  CFF5 F015          	movff	tablat,___ftmul@f1
  3736  00EE78  0009               	tblrd		*+
  3737  00EE7A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3738  00EE7E  000A               	tblrd		*-
  3739  00EE80  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3740  00EE84  EC1F  F072         	call	___ftmul	;wreg free
  3741  00EE88  C015  F027         	movff	?___ftmul,_scale$861
  3742  00EE8C  C016  F028         	movff	?___ftmul+1,_scale$861+1
  3743  00EE90  C017  F029         	movff	?___ftmul+2,_scale$861+2
  3744                           
  3745                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3746  00EE94  C027  F015         	movff	_scale$861,___ftmul@f1
  3747  00EE98  C028  F016         	movff	_scale$861+1,___ftmul@f1+1
  3748  00EE9C  C029  F017         	movff	_scale$861+2,___ftmul@f1+2
  3749  00EEA0  0E00               	movlw	0
  3750  00EEA2  6E12               	movwf	___wmul@multiplicand+1,c
  3751  00EEA4  0E03               	movlw	3
  3752  00EEA6  6E11               	movwf	___wmul@multiplicand,c
  3753  00EEA8  0E00               	movlw	0
  3754  00EEAA  6E04               	movwf	___awmod@divisor+1,c
  3755  00EEAC  0E0A               	movlw	10
  3756  00EEAE  6E03               	movwf	___awmod@divisor,c
  3757  00EEB0  502A               	movf	scale@scl,w,c
  3758  00EEB2  6E01               	movwf	___awmod@dividend,c
  3759  00EEB4  6A02               	clrf	___awmod@dividend+1,c
  3760  00EEB6  BE01               	btfsc	___awmod@dividend,7,c
  3761  00EEB8  0602               	decf	___awmod@dividend+1,f,c
  3762  00EEBA  EC0C  F070         	call	___awmod	;wreg free
  3763  00EEBE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3764  00EEC2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3765  00EEC6  EC0B  F06F         	call	___wmul	;wreg free
  3766  00EECA  0EAF               	movlw	low __powers_
  3767  00EECC  240F               	addwf	?___wmul,w,c
  3768  00EECE  6EF6               	movwf	tblptrl,c
  3769  00EED0  0EFE               	movlw	high __powers_
  3770  00EED2  2010               	addwfc	?___wmul+1,w,c
  3771  00EED4  6EF7               	movwf	tblptrh,c
  3772  00EED6                     	if	1	;There are 3 active tblptr bytes
  3773  00EED6  6AF8               	clrf	tblptru,c
  3774  00EED8  0E00               	movlw	low (__mediumconst shr (0+16))
  3775  00EEDA  22F8               	addwfc	tblptru,f,c
  3776  00EEDC                     	endif
  3777  00EEDC  0009               	tblrd		*+
  3778  00EEDE  CFF5 F018          	movff	tablat,___ftmul@f2
  3779  00EEE2  0009               	tblrd		*+
  3780  00EEE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3781  00EEE8  000A               	tblrd		*-
  3782  00EEEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3783  00EEEE  EC1F  F072         	call	___ftmul	;wreg free
  3784  00EEF2  C015  F024         	movff	?___ftmul,?_scale
  3785  00EEF6  C016  F025         	movff	?___ftmul+1,?_scale+1
  3786  00EEFA  C017  F026         	movff	?___ftmul+2,?_scale+2
  3787  00EEFE  0012               	return	
  3788  00EF00                     l2389:
  3789                           
  3790                           ;doprnt.c: 438: else if(scl > 10)
  3791  00EF00  502A               	movf	scale@scl,w,c
  3792  00EF02  0A80               	xorlw	128
  3793  00EF04  0F75               	addlw	-139
  3794  00EF06  A0D8               	btfss	status,0,c
  3795  00EF08  D053               	goto	l2395
  3796                           
  3797                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3798  00EF0A  0E00               	movlw	0
  3799  00EF0C  6E0A               	movwf	___awdiv@divisor+1,c
  3800  00EF0E  0E0A               	movlw	10
  3801  00EF10  6E09               	movwf	___awdiv@divisor,c
  3802  00EF12  502A               	movf	scale@scl,w,c
  3803  00EF14  6E07               	movwf	___awdiv@dividend,c
  3804  00EF16  6A08               	clrf	___awdiv@dividend+1,c
  3805  00EF18  BE07               	btfsc	___awdiv@dividend,7,c
  3806  00EF1A  0608               	decf	___awdiv@dividend+1,f,c
  3807  00EF1C  ECC4  F070         	call	___awdiv	;wreg free
  3808  00EF20  0E09               	movlw	9
  3809  00EF22  2407               	addwf	?___awdiv,w,c
  3810  00EF24  6E0F               	movwf	___wmul@multiplier,c
  3811  00EF26  0E00               	movlw	0
  3812  00EF28  2008               	addwfc	?___awdiv+1,w,c
  3813  00EF2A  6E10               	movwf	___wmul@multiplier+1,c
  3814  00EF2C  0E00               	movlw	0
  3815  00EF2E  6E12               	movwf	___wmul@multiplicand+1,c
  3816  00EF30  0E03               	movlw	3
  3817  00EF32  6E11               	movwf	___wmul@multiplicand,c
  3818  00EF34  EC0B  F06F         	call	___wmul	;wreg free
  3819  00EF38  0EAF               	movlw	low __powers_
  3820  00EF3A  240F               	addwf	?___wmul,w,c
  3821  00EF3C  6EF6               	movwf	tblptrl,c
  3822  00EF3E  0EFE               	movlw	high __powers_
  3823  00EF40  2010               	addwfc	?___wmul+1,w,c
  3824  00EF42  6EF7               	movwf	tblptrh,c
  3825  00EF44                     	if	1	;There are 3 active tblptr bytes
  3826  00EF44  6AF8               	clrf	tblptru,c
  3827  00EF46  0E00               	movlw	low (__mediumconst shr (0+16))
  3828  00EF48  22F8               	addwfc	tblptru,f,c
  3829  00EF4A                     	endif
  3830  00EF4A  0009               	tblrd		*+
  3831  00EF4C  CFF5 F015          	movff	tablat,___ftmul@f1
  3832  00EF50  0009               	tblrd		*+
  3833  00EF52  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3834  00EF56  000A               	tblrd		*-
  3835  00EF58  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3836  00EF5C  0E00               	movlw	0
  3837  00EF5E  6E12               	movwf	___wmul@multiplicand+1,c
  3838  00EF60  0E03               	movlw	3
  3839  00EF62  6E11               	movwf	___wmul@multiplicand,c
  3840  00EF64  0E00               	movlw	0
  3841  00EF66  6E04               	movwf	___awmod@divisor+1,c
  3842  00EF68  0E0A               	movlw	10
  3843  00EF6A  6E03               	movwf	___awmod@divisor,c
  3844  00EF6C  502A               	movf	scale@scl,w,c
  3845  00EF6E  6E01               	movwf	___awmod@dividend,c
  3846  00EF70  6A02               	clrf	___awmod@dividend+1,c
  3847  00EF72  BE01               	btfsc	___awmod@dividend,7,c
  3848  00EF74  0602               	decf	___awmod@dividend+1,f,c
  3849  00EF76  EC0C  F070         	call	___awmod	;wreg free
  3850  00EF7A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3851  00EF7E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3852  00EF82  EC0B  F06F         	call	___wmul	;wreg free
  3853  00EF86  0EAF               	movlw	low __powers_
  3854  00EF88  240F               	addwf	?___wmul,w,c
  3855  00EF8A  6EF6               	movwf	tblptrl,c
  3856  00EF8C  0EFE               	movlw	high __powers_
  3857  00EF8E  2010               	addwfc	?___wmul+1,w,c
  3858  00EF90  6EF7               	movwf	tblptrh,c
  3859  00EF92                     	if	1	;There are 3 active tblptr bytes
  3860  00EF92  6AF8               	clrf	tblptru,c
  3861  00EF94  0E00               	movlw	low (__mediumconst shr (0+16))
  3862  00EF96  22F8               	addwfc	tblptru,f,c
  3863  00EF98                     	endif
  3864  00EF98  0009               	tblrd		*+
  3865  00EF9A  CFF5 F018          	movff	tablat,___ftmul@f2
  3866  00EF9E  0009               	tblrd		*+
  3867  00EFA0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3868  00EFA4  000A               	tblrd		*-
  3869  00EFA6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3870  00EFAA  EC1F  F072         	call	___ftmul	;wreg free
  3871  00EFAE  D7A1               	goto	L6
  3872  00EFB0                     l2395:
  3873                           
  3874                           ;doprnt.c: 440: return _powers_[scl];
  3875  00EFB0  502A               	movf	scale@scl,w,c
  3876  00EFB2  0D03               	mullw	3
  3877  00EFB4  0EAF               	movlw	low __powers_
  3878  00EFB6  24F3               	addwf	prodl,w,c
  3879  00EFB8  6EF6               	movwf	tblptrl,c
  3880  00EFBA  0EFE               	movlw	high __powers_
  3881  00EFBC  20F4               	addwfc	prodh,w,c
  3882  00EFBE  6EF7               	movwf	tblptrh,c
  3883  00EFC0                     	if	1	;There are 3 active tblptr bytes
  3884  00EFC0  6AF8               	clrf	tblptru,c
  3885  00EFC2  0E00               	movlw	low (__mediumconst shr (0+16))
  3886  00EFC4  22F8               	addwfc	tblptru,f,c
  3887  00EFC6                     	endif
  3888  00EFC6  0009               	tblrd		*+
  3889  00EFC8  CFF5 F024          	movff	tablat,?_scale
  3890  00EFCC  0009               	tblrd		*+
  3891  00EFCE  CFF5 F025          	movff	tablat,?_scale+1
  3892  00EFD2  000A               	tblrd		*-
  3893  00EFD4  CFF5 F026          	movff	tablat,?_scale+2
  3894  00EFD8  0012               	return	
  3895  00EFDA                     __end_of_scale:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           indf0	equ	0xFEF
  3904                           postinc0	equ	0xFEE
  3905                           fsr0h	equ	0xFEA
  3906                           fsr0l	equ	0xFE9
  3907                           wreg	equ	0xFE8
  3908                           postdec1	equ	0xFE5
  3909                           plusw1	equ	0xFE3
  3910                           fsr1l	equ	0xFE1
  3911                           postinc2	equ	0xFDE
  3912                           postdec2	equ	0xFDD
  3913                           plusw2	equ	0xFDB
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _putch *****************
  3919 ;; Defined at:
  3920 ;;		line 24 in file "lcd.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  data            1    wreg     unsigned char 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  data            1    2[COMRAM] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:        1 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    1
  3941 ;; This function calls:
  3942 ;;		_lcdNibble
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;;		_printf
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text3
  3950  00DDA6                     __ptext3:
  3951                           	opt stack 0
  3952  00DDA6                     _putch:
  3953                           	opt stack 29
  3954                           
  3955                           ;incstack = 0
  3956                           ;putch@data stored from wreg
  3957  00DDA6  6E03               	movwf	putch@data,c
  3958                           
  3959                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3960  00DDA8  848C               	bsf	3980,2,c	;volatile
  3961                           
  3962                           ;lcd.c: 33: lcdNibble(data);
  3963  00DDAA  5003               	movf	putch@data,w,c
  3964  00DDAC  EC44  F070         	call	_lcdNibble
  3965                           
  3966                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3967  00DDB0  0EC8               	movlw	200
  3968  00DDB2                     u3277:
  3969  00DDB2  D000               	nop2	
  3970  00DDB4  2EE8               	decfsz	wreg,f,c
  3971  00DDB6  D7FD               	bra	u3277
  3972  00DDB8  0012               	return		;funcret
  3973  00DDBA                     __end_of_putch:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           indf0	equ	0xFEF
  3982                           postinc0	equ	0xFEE
  3983                           fsr0h	equ	0xFEA
  3984                           fsr0l	equ	0xFE9
  3985                           wreg	equ	0xFE8
  3986                           postdec1	equ	0xFE5
  3987                           plusw1	equ	0xFE3
  3988                           fsr1l	equ	0xFE1
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           plusw2	equ	0xFDB
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function _fround *****************
  3997 ;; Defined at:
  3998 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  prec            1    wreg     unsigned char 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  prec            1   44[COMRAM] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  3   35[COMRAM] unsigned char 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4012 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;Total ram usage:       10 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    2
  4019 ;; This function calls:
  4020 ;;		___awdiv
  4021 ;;		___awmod
  4022 ;;		___ftmul
  4023 ;;		___wmul
  4024 ;; This function is called by:
  4025 ;;		_printf
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text4
  4030  00E938                     __ptext4:
  4031                           	opt stack 0
  4032  00E938                     _fround:
  4033                           	opt stack 27
  4034                           
  4035                           ;incstack = 0
  4036                           ;fround@prec stored from wreg
  4037  00E938  6E2D               	movwf	fround@prec,c
  4038                           
  4039                           ;doprnt.c: 413: if(prec>=110)
  4040  00E93A  0E6D               	movlw	109
  4041  00E93C  642D               	cpfsgt	fround@prec,c
  4042  00E93E  D0A8               	goto	l2349
  4043                           
  4044                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4045  00E940  0E00               	movlw	0
  4046  00E942  6E12               	movwf	___wmul@multiplicand+1,c
  4047  00E944  0E03               	movlw	3
  4048  00E946  6E11               	movwf	___wmul@multiplicand,c
  4049  00E948  0E00               	movlw	0
  4050  00E94A  6E0A               	movwf	___awdiv@divisor+1,c
  4051  00E94C  0E0A               	movlw	10
  4052  00E94E  6E09               	movwf	___awdiv@divisor,c
  4053  00E950  0E00               	movlw	0
  4054  00E952  6E04               	movwf	___awmod@divisor+1,c
  4055  00E954  0E64               	movlw	100
  4056  00E956  6E03               	movwf	___awmod@divisor,c
  4057  00E958  C02D  F001         	movff	fround@prec,___awmod@dividend
  4058  00E95C  6A02               	clrf	___awmod@dividend+1,c
  4059  00E95E  EC0C  F070         	call	___awmod	;wreg free
  4060  00E962  C001  F007         	movff	?___awmod,___awdiv@dividend
  4061  00E966  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4062  00E96A  ECC4  F070         	call	___awdiv	;wreg free
  4063  00E96E  0E09               	movlw	9
  4064  00E970  2407               	addwf	?___awdiv,w,c
  4065  00E972  6E0F               	movwf	___wmul@multiplier,c
  4066  00E974  0E00               	movlw	0
  4067  00E976  2008               	addwfc	?___awdiv+1,w,c
  4068  00E978  6E10               	movwf	___wmul@multiplier+1,c
  4069  00E97A  EC0B  F06F         	call	___wmul	;wreg free
  4070  00E97E  0ED6               	movlw	low __npowers_
  4071  00E980  240F               	addwf	?___wmul,w,c
  4072  00E982  6EF6               	movwf	tblptrl,c
  4073  00E984  0EFE               	movlw	high __npowers_
  4074  00E986  2010               	addwfc	?___wmul+1,w,c
  4075  00E988  6EF7               	movwf	tblptrh,c
  4076  00E98A                     	if	1	;There are 3 active tblptr bytes
  4077  00E98A  6AF8               	clrf	tblptru,c
  4078  00E98C  0E00               	movlw	low (__mediumconst shr (0+16))
  4079  00E98E  22F8               	addwfc	tblptru,f,c
  4080  00E990                     	endif
  4081  00E990  0009               	tblrd		*+
  4082  00E992  CFF5 F018          	movff	tablat,___ftmul@f2
  4083  00E996  0009               	tblrd		*+
  4084  00E998  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4085  00E99C  000A               	tblrd		*-
  4086  00E99E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4087  00E9A2  0E00               	movlw	0
  4088  00E9A4  6E0A               	movwf	___awdiv@divisor+1,c
  4089  00E9A6  0E64               	movlw	100
  4090  00E9A8  6E09               	movwf	___awdiv@divisor,c
  4091  00E9AA  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4092  00E9AE  6A08               	clrf	___awdiv@dividend+1,c
  4093  00E9B0  ECC4  F070         	call	___awdiv	;wreg free
  4094  00E9B4  0E12               	movlw	18
  4095  00E9B6  2407               	addwf	?___awdiv,w,c
  4096  00E9B8  6E0F               	movwf	___wmul@multiplier,c
  4097  00E9BA  0E00               	movlw	0
  4098  00E9BC  2008               	addwfc	?___awdiv+1,w,c
  4099  00E9BE  6E10               	movwf	___wmul@multiplier+1,c
  4100  00E9C0  0E00               	movlw	0
  4101  00E9C2  6E12               	movwf	___wmul@multiplicand+1,c
  4102  00E9C4  0E03               	movlw	3
  4103  00E9C6  6E11               	movwf	___wmul@multiplicand,c
  4104  00E9C8  EC0B  F06F         	call	___wmul	;wreg free
  4105  00E9CC  0ED6               	movlw	low __npowers_
  4106  00E9CE  240F               	addwf	?___wmul,w,c
  4107  00E9D0  6EF6               	movwf	tblptrl,c
  4108  00E9D2  0EFE               	movlw	high __npowers_
  4109  00E9D4  2010               	addwfc	?___wmul+1,w,c
  4110  00E9D6  6EF7               	movwf	tblptrh,c
  4111  00E9D8                     	if	1	;There are 3 active tblptr bytes
  4112  00E9D8  6AF8               	clrf	tblptru,c
  4113  00E9DA  0E00               	movlw	low (__mediumconst shr (0+16))
  4114  00E9DC  22F8               	addwfc	tblptru,f,c
  4115  00E9DE                     	endif
  4116  00E9DE  0009               	tblrd		*+
  4117  00E9E0  CFF5 F015          	movff	tablat,___ftmul@f1
  4118  00E9E4  0009               	tblrd		*+
  4119  00E9E6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4120  00E9EA  000A               	tblrd		*-
  4121  00E9EC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4122  00E9F0  EC1F  F072         	call	___ftmul	;wreg free
  4123  00E9F4  C015  F02A         	movff	?___ftmul,_fround$859
  4124  00E9F8  C016  F02B         	movff	?___ftmul+1,_fround$859+1
  4125  00E9FC  C017  F02C         	movff	?___ftmul+2,_fround$859+2
  4126                           
  4127                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4128  00EA00  0E00               	movlw	0
  4129  00EA02  6E12               	movwf	___wmul@multiplicand+1,c
  4130  00EA04  0E03               	movlw	3
  4131  00EA06  6E11               	movwf	___wmul@multiplicand,c
  4132  00EA08  0E00               	movlw	0
  4133  00EA0A  6E04               	movwf	___awmod@divisor+1,c
  4134  00EA0C  0E0A               	movlw	10
  4135  00EA0E  6E03               	movwf	___awmod@divisor,c
  4136  00EA10  C02D  F001         	movff	fround@prec,___awmod@dividend
  4137  00EA14  6A02               	clrf	___awmod@dividend+1,c
  4138  00EA16  EC0C  F070         	call	___awmod	;wreg free
  4139  00EA1A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4140  00EA1E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4141  00EA22  EC0B  F06F         	call	___wmul	;wreg free
  4142  00EA26  0ED6               	movlw	low __npowers_
  4143  00EA28  240F               	addwf	?___wmul,w,c
  4144  00EA2A  6EF6               	movwf	tblptrl,c
  4145  00EA2C  0EFE               	movlw	high __npowers_
  4146  00EA2E  2010               	addwfc	?___wmul+1,w,c
  4147  00EA30  6EF7               	movwf	tblptrh,c
  4148  00EA32                     	if	1	;There are 3 active tblptr bytes
  4149  00EA32  6AF8               	clrf	tblptru,c
  4150  00EA34  0E00               	movlw	low (__mediumconst shr (0+16))
  4151  00EA36  22F8               	addwfc	tblptru,f,c
  4152  00EA38                     	endif
  4153  00EA38  0009               	tblrd		*+
  4154  00EA3A  CFF5 F018          	movff	tablat,___ftmul@f2
  4155  00EA3E  0009               	tblrd		*+
  4156  00EA40  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4157  00EA44  000A               	tblrd		*-
  4158  00EA46  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4159  00EA4A  C02A  F015         	movff	_fround$859,___ftmul@f1
  4160  00EA4E  C02B  F016         	movff	_fround$859+1,___ftmul@f1+1
  4161  00EA52  C02C  F017         	movff	_fround$859+2,___ftmul@f1+2
  4162  00EA56  EC1F  F072         	call	___ftmul	;wreg free
  4163  00EA5A  C015  F027         	movff	?___ftmul,_fround$860
  4164  00EA5E  C016  F028         	movff	?___ftmul+1,_fround$860+1
  4165  00EA62  C017  F029         	movff	?___ftmul+2,_fround$860+2
  4166                           
  4167                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4168  00EA66  C027  F015         	movff	_fround$860,___ftmul@f1
  4169  00EA6A  C028  F016         	movff	_fround$860+1,___ftmul@f1+1
  4170  00EA6E  C029  F017         	movff	_fround$860+2,___ftmul@f1+2
  4171  00EA72  0E00               	movlw	0
  4172  00EA74  6E18               	movwf	___ftmul@f2,c
  4173  00EA76  0E00               	movlw	0
  4174  00EA78  6E19               	movwf	___ftmul@f2+1,c
  4175  00EA7A  0E3F               	movlw	63
  4176  00EA7C  6E1A               	movwf	___ftmul@f2+2,c
  4177  00EA7E  EC1F  F072         	call	___ftmul	;wreg free
  4178  00EA82  C015  F024         	movff	?___ftmul,?_fround
  4179  00EA86  C016  F025         	movff	?___ftmul+1,?_fround+1
  4180  00EA8A  C017  F026         	movff	?___ftmul+2,?_fround+2
  4181  00EA8E  0012               	return	
  4182  00EA90                     l2349:
  4183                           
  4184                           ;doprnt.c: 415: else if(prec > 10)
  4185  00EA90  0E0A               	movlw	10
  4186  00EA92  642D               	cpfsgt	fround@prec,c
  4187  00EA94  D063               	goto	l2357
  4188                           
  4189                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4190  00EA96  0E00               	movlw	0
  4191  00EA98  6E12               	movwf	___wmul@multiplicand+1,c
  4192  00EA9A  0E03               	movlw	3
  4193  00EA9C  6E11               	movwf	___wmul@multiplicand,c
  4194  00EA9E  0E00               	movlw	0
  4195  00EAA0  6E04               	movwf	___awmod@divisor+1,c
  4196  00EAA2  0E0A               	movlw	10
  4197  00EAA4  6E03               	movwf	___awmod@divisor,c
  4198  00EAA6  C02D  F001         	movff	fround@prec,___awmod@dividend
  4199  00EAAA  6A02               	clrf	___awmod@dividend+1,c
  4200  00EAAC  EC0C  F070         	call	___awmod	;wreg free
  4201  00EAB0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4202  00EAB4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4203  00EAB8  EC0B  F06F         	call	___wmul	;wreg free
  4204  00EABC  0ED6               	movlw	low __npowers_
  4205  00EABE  240F               	addwf	?___wmul,w,c
  4206  00EAC0  6EF6               	movwf	tblptrl,c
  4207  00EAC2  0EFE               	movlw	high __npowers_
  4208  00EAC4  2010               	addwfc	?___wmul+1,w,c
  4209  00EAC6  6EF7               	movwf	tblptrh,c
  4210  00EAC8                     	if	1	;There are 3 active tblptr bytes
  4211  00EAC8  6AF8               	clrf	tblptru,c
  4212  00EACA  0E00               	movlw	low (__mediumconst shr (0+16))
  4213  00EACC  22F8               	addwfc	tblptru,f,c
  4214  00EACE                     	endif
  4215  00EACE  0009               	tblrd		*+
  4216  00EAD0  CFF5 F018          	movff	tablat,___ftmul@f2
  4217  00EAD4  0009               	tblrd		*+
  4218  00EAD6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4219  00EADA  000A               	tblrd		*-
  4220  00EADC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4221  00EAE0  0E00               	movlw	0
  4222  00EAE2  6E0A               	movwf	___awdiv@divisor+1,c
  4223  00EAE4  0E0A               	movlw	10
  4224  00EAE6  6E09               	movwf	___awdiv@divisor,c
  4225  00EAE8  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4226  00EAEC  6A08               	clrf	___awdiv@dividend+1,c
  4227  00EAEE  ECC4  F070         	call	___awdiv	;wreg free
  4228  00EAF2  0E09               	movlw	9
  4229  00EAF4  2407               	addwf	?___awdiv,w,c
  4230  00EAF6  6E0F               	movwf	___wmul@multiplier,c
  4231  00EAF8  0E00               	movlw	0
  4232  00EAFA  2008               	addwfc	?___awdiv+1,w,c
  4233  00EAFC  6E10               	movwf	___wmul@multiplier+1,c
  4234  00EAFE  0E00               	movlw	0
  4235  00EB00  6E12               	movwf	___wmul@multiplicand+1,c
  4236  00EB02  0E03               	movlw	3
  4237  00EB04  6E11               	movwf	___wmul@multiplicand,c
  4238  00EB06  EC0B  F06F         	call	___wmul	;wreg free
  4239  00EB0A  0ED6               	movlw	low __npowers_
  4240  00EB0C  240F               	addwf	?___wmul,w,c
  4241  00EB0E  6EF6               	movwf	tblptrl,c
  4242  00EB10  0EFE               	movlw	high __npowers_
  4243  00EB12  2010               	addwfc	?___wmul+1,w,c
  4244  00EB14  6EF7               	movwf	tblptrh,c
  4245  00EB16                     	if	1	;There are 3 active tblptr bytes
  4246  00EB16  6AF8               	clrf	tblptru,c
  4247  00EB18  0E00               	movlw	low (__mediumconst shr (0+16))
  4248  00EB1A  22F8               	addwfc	tblptru,f,c
  4249  00EB1C                     	endif
  4250  00EB1C  0009               	tblrd		*+
  4251  00EB1E  CFF5 F015          	movff	tablat,___ftmul@f1
  4252  00EB22  0009               	tblrd		*+
  4253  00EB24  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4254  00EB28  000A               	tblrd		*-
  4255  00EB2A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4256  00EB2E  EC1F  F072         	call	___ftmul	;wreg free
  4257  00EB32  C015  F02A         	movff	?___ftmul,_fround$859
  4258  00EB36  C016  F02B         	movff	?___ftmul+1,_fround$859+1
  4259  00EB3A  C017  F02C         	movff	?___ftmul+2,_fround$859+2
  4260                           
  4261                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4262  00EB3E  C02A  F015         	movff	_fround$859,___ftmul@f1
  4263  00EB42  C02B  F016         	movff	_fround$859+1,___ftmul@f1+1
  4264  00EB46  C02C  F017         	movff	_fround$859+2,___ftmul@f1+2
  4265  00EB4A  0E00               	movlw	0
  4266  00EB4C  6E18               	movwf	___ftmul@f2,c
  4267  00EB4E  0E00               	movlw	0
  4268  00EB50  6E19               	movwf	___ftmul@f2+1,c
  4269  00EB52  0E3F               	movlw	63
  4270  00EB54  6E1A               	movwf	___ftmul@f2+2,c
  4271  00EB56  EC1F  F072         	call	___ftmul	;wreg free
  4272  00EB5A  D793               	goto	L7
  4273  00EB5C                     l2357:
  4274                           
  4275                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4276  00EB5C  502D               	movf	fround@prec,w,c
  4277  00EB5E  0D03               	mullw	3
  4278  00EB60  0ED6               	movlw	low __npowers_
  4279  00EB62  24F3               	addwf	prodl,w,c
  4280  00EB64  6EF6               	movwf	tblptrl,c
  4281  00EB66  0EFE               	movlw	high __npowers_
  4282  00EB68  20F4               	addwfc	prodh,w,c
  4283  00EB6A  6EF7               	movwf	tblptrh,c
  4284  00EB6C                     	if	1	;There are 3 active tblptr bytes
  4285  00EB6C  6AF8               	clrf	tblptru,c
  4286  00EB6E  0E00               	movlw	low (__mediumconst shr (0+16))
  4287  00EB70  22F8               	addwfc	tblptru,f,c
  4288  00EB72                     	endif
  4289  00EB72  0009               	tblrd		*+
  4290  00EB74  CFF5 F015          	movff	tablat,___ftmul@f1
  4291  00EB78  0009               	tblrd		*+
  4292  00EB7A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4293  00EB7E  000A               	tblrd		*-
  4294  00EB80  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4295  00EB84  0E00               	movlw	0
  4296  00EB86  6E18               	movwf	___ftmul@f2,c
  4297  00EB88  0E00               	movlw	0
  4298  00EB8A  6E19               	movwf	___ftmul@f2+1,c
  4299  00EB8C  0E3F               	movlw	63
  4300  00EB8E  6E1A               	movwf	___ftmul@f2+2,c
  4301  00EB90  EC1F  F072         	call	___ftmul	;wreg free
  4302  00EB94  C015  F024         	movff	?___ftmul,?_fround
  4303  00EB98  C016  F025         	movff	?___ftmul+1,?_fround+1
  4304  00EB9C  C017  F026         	movff	?___ftmul+2,?_fround+2
  4305  00EBA0  0012               	return	
  4306  00EBA2                     __end_of_fround:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           indf0	equ	0xFEF
  4315                           postinc0	equ	0xFEE
  4316                           fsr0h	equ	0xFEA
  4317                           fsr0l	equ	0xFE9
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           plusw1	equ	0xFE3
  4321                           fsr1l	equ	0xFE1
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           plusw2	equ	0xFDB
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function ___wmul *****************
  4330 ;; Defined at:
  4331 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  multiplier      2   14[COMRAM] unsigned int 
  4334 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  product         2   18[COMRAM] unsigned int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  2   14[COMRAM] unsigned int 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, prodl, prodh
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        6 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_fround
  4356 ;;		_scale
  4357 ;;		_printf
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text5
  4362  00DE16                     __ptext5:
  4363                           	opt stack 0
  4364  00DE16                     ___wmul:
  4365                           	opt stack 28
  4366                           
  4367                           ;incstack = 0
  4368  00DE16  500F               	movf	___wmul@multiplier,w,c
  4369  00DE18  0211               	mulwf	___wmul@multiplicand,c
  4370  00DE1A  CFF3 F013          	movff	prodl,___wmul@product
  4371  00DE1E  CFF4 F014          	movff	prodh,___wmul@product+1
  4372  00DE22  500F               	movf	___wmul@multiplier,w,c
  4373  00DE24  0212               	mulwf	___wmul@multiplicand+1,c
  4374  00DE26  50F3               	movf	prodl,w,c
  4375  00DE28  2614               	addwf	___wmul@product+1,f,c
  4376  00DE2A  5010               	movf	___wmul@multiplier+1,w,c
  4377  00DE2C  0211               	mulwf	___wmul@multiplicand,c
  4378  00DE2E  50F3               	movf	prodl,w,c
  4379  00DE30  2614               	addwf	___wmul@product+1,f,c
  4380  00DE32  C013  F00F         	movff	___wmul@product,?___wmul
  4381  00DE36  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4382  00DE3A  0012               	return	
  4383  00DE3C                     __end_of___wmul:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           indf0	equ	0xFEF
  4392                           postinc0	equ	0xFEE
  4393                           fsr0h	equ	0xFEA
  4394                           fsr0l	equ	0xFE9
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           plusw1	equ	0xFE3
  4398                           fsr1l	equ	0xFE1
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           plusw2	equ	0xFDB
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function ___ftmul *****************
  4407 ;; Defined at:
  4408 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  f1              3   20[COMRAM] float 
  4411 ;;  f2              3   23[COMRAM] float 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4414 ;;  sign            1   34[COMRAM] unsigned char 
  4415 ;;  cntr            1   33[COMRAM] unsigned char 
  4416 ;;  exp             1   29[COMRAM] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  3   20[COMRAM] float 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:       15 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    1
  4433 ;; This function calls:
  4434 ;;		___ftpack
  4435 ;; This function is called by:
  4436 ;;		_fround
  4437 ;;		_scale
  4438 ;;		_printf
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text6
  4443  00E43E                     __ptext6:
  4444                           	opt stack 0
  4445  00E43E                     ___ftmul:
  4446                           	opt stack 27
  4447                           
  4448                           ;incstack = 0
  4449  00E43E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4450  00E442  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4451  00E444  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4452  00E446  3416               	rlcf	___ftmul@f1+1,w,c
  4453  00E448  361B               	rlcf	??___ftmul& (0+255),f,c
  4454  00E44A  E301               	bnc	u1771
  4455  00E44C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4456  00E44E                     u1771:
  4457  00E44E  501B               	movf	??___ftmul,w,c
  4458  00E450  6E1E               	movwf	___ftmul@exp,c
  4459  00E452  501E               	movf	___ftmul@exp,w,c
  4460  00E454  A4D8               	btfss	status,2,c
  4461  00E456  D007               	goto	l2199
  4462  00E458  0E00               	movlw	0
  4463  00E45A  6E15               	movwf	?___ftmul,c
  4464  00E45C  0E00               	movlw	0
  4465  00E45E  6E16               	movwf	?___ftmul+1,c
  4466  00E460  0E00               	movlw	0
  4467  00E462  6E17               	movwf	?___ftmul+2,c
  4468  00E464  0012               	return	
  4469  00E466                     l2199:
  4470  00E466  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4471  00E46A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4472  00E46C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4473  00E46E  3419               	rlcf	___ftmul@f2+1,w,c
  4474  00E470  361B               	rlcf	??___ftmul& (0+255),f,c
  4475  00E472  E301               	bnc	u1791
  4476  00E474  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4477  00E476                     u1791:
  4478  00E476  501B               	movf	??___ftmul,w,c
  4479  00E478  6E23               	movwf	___ftmul@sign,c
  4480  00E47A  5023               	movf	___ftmul@sign,w,c
  4481  00E47C  A4D8               	btfss	status,2,c
  4482  00E47E  D007               	goto	l2205
  4483  00E480  0E00               	movlw	0
  4484  00E482  6E15               	movwf	?___ftmul,c
  4485  00E484  0E00               	movlw	0
  4486  00E486  6E16               	movwf	?___ftmul+1,c
  4487  00E488  0E00               	movlw	0
  4488  00E48A  6E17               	movwf	?___ftmul+2,c
  4489  00E48C  0012               	return	
  4490  00E48E                     l2205:
  4491  00E48E  5023               	movf	___ftmul@sign,w,c
  4492  00E490  0F7B               	addlw	123
  4493  00E492  261E               	addwf	___ftmul@exp,f,c
  4494  00E494  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4495  00E498  501A               	movf	___ftmul@f2+2,w,c
  4496  00E49A  1A23               	xorwf	___ftmul@sign,f,c
  4497  00E49C  0E80               	movlw	128
  4498  00E49E  1623               	andwf	___ftmul@sign,f,c
  4499  00E4A0  8E16               	bsf	___ftmul@f1+1,7,c
  4500  00E4A2  8E19               	bsf	___ftmul@f2+1,7,c
  4501  00E4A4  0EFF               	movlw	255
  4502  00E4A6  1618               	andwf	___ftmul@f2,f,c
  4503  00E4A8  0EFF               	movlw	255
  4504  00E4AA  1619               	andwf	___ftmul@f2+1,f,c
  4505  00E4AC  0E00               	movlw	0
  4506  00E4AE  161A               	andwf	___ftmul@f2+2,f,c
  4507  00E4B0  0E00               	movlw	0
  4508  00E4B2  6E1F               	movwf	___ftmul@f3_as_product,c
  4509  00E4B4  0E00               	movlw	0
  4510  00E4B6  6E20               	movwf	___ftmul@f3_as_product+1,c
  4511  00E4B8  0E00               	movlw	0
  4512  00E4BA  6E21               	movwf	___ftmul@f3_as_product+2,c
  4513  00E4BC  0E07               	movlw	7
  4514  00E4BE  6E22               	movwf	___ftmul@cntr,c
  4515  00E4C0                     l2219:
  4516  00E4C0  A015               	btfss	___ftmul@f1,0,c
  4517  00E4C2  D006               	goto	l2223
  4518  00E4C4  5018               	movf	___ftmul@f2,w,c
  4519  00E4C6  261F               	addwf	___ftmul@f3_as_product,f,c
  4520  00E4C8  5019               	movf	___ftmul@f2+1,w,c
  4521  00E4CA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4522  00E4CC  501A               	movf	___ftmul@f2+2,w,c
  4523  00E4CE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4524  00E4D0                     l2223:
  4525  00E4D0  90D8               	bcf	status,0,c
  4526  00E4D2  3217               	rrcf	___ftmul@f1+2,f,c
  4527  00E4D4  3216               	rrcf	___ftmul@f1+1,f,c
  4528  00E4D6  3215               	rrcf	___ftmul@f1,f,c
  4529  00E4D8  90D8               	bcf	status,0,c
  4530  00E4DA  3618               	rlcf	___ftmul@f2,f,c
  4531  00E4DC  3619               	rlcf	___ftmul@f2+1,f,c
  4532  00E4DE  361A               	rlcf	___ftmul@f2+2,f,c
  4533  00E4E0  2E22               	decfsz	___ftmul@cntr,f,c
  4534  00E4E2  D7EE               	goto	l2219
  4535  00E4E4  0E09               	movlw	9
  4536  00E4E6  6E22               	movwf	___ftmul@cntr,c
  4537  00E4E8                     l2229:
  4538  00E4E8  A015               	btfss	___ftmul@f1,0,c
  4539  00E4EA  D006               	goto	l2233
  4540  00E4EC  5018               	movf	___ftmul@f2,w,c
  4541  00E4EE  261F               	addwf	___ftmul@f3_as_product,f,c
  4542  00E4F0  5019               	movf	___ftmul@f2+1,w,c
  4543  00E4F2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4544  00E4F4  501A               	movf	___ftmul@f2+2,w,c
  4545  00E4F6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4546  00E4F8                     l2233:
  4547  00E4F8  90D8               	bcf	status,0,c
  4548  00E4FA  3217               	rrcf	___ftmul@f1+2,f,c
  4549  00E4FC  3216               	rrcf	___ftmul@f1+1,f,c
  4550  00E4FE  3215               	rrcf	___ftmul@f1,f,c
  4551  00E500  90D8               	bcf	status,0,c
  4552  00E502  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4553  00E504  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4554  00E506  321F               	rrcf	___ftmul@f3_as_product,f,c
  4555  00E508  2E22               	decfsz	___ftmul@cntr,f,c
  4556  00E50A  D7EE               	goto	l2229
  4557  00E50C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4558  00E510  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4559  00E514  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4560  00E518  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4561  00E51C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4562  00E520  EC4E  F071         	call	___ftpack	;wreg free
  4563  00E524  C001  F015         	movff	?___ftpack,?___ftmul
  4564  00E528  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4565  00E52C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4566  00E530  0012               	return	
  4567  00E532                     __end_of___ftmul:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           indf0	equ	0xFEF
  4576                           postinc0	equ	0xFEE
  4577                           fsr0h	equ	0xFEA
  4578                           fsr0l	equ	0xFE9
  4579                           wreg	equ	0xFE8
  4580                           postdec1	equ	0xFE5
  4581                           plusw1	equ	0xFE3
  4582                           fsr1l	equ	0xFE1
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           plusw2	equ	0xFDB
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function ___awmod *****************
  4591 ;; Defined at:
  4592 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  dividend        2    0[COMRAM] int 
  4595 ;;  divisor         2    2[COMRAM] int 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  sign            1    5[COMRAM] unsigned char 
  4598 ;;  counter         1    4[COMRAM] unsigned char 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  2    0[COMRAM] int 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;Total ram usage:        6 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;;		_fround
  4619 ;;		_scale
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text7
  4624  00E018                     __ptext7:
  4625                           	opt stack 0
  4626  00E018                     ___awmod:
  4627                           	opt stack 28
  4628                           
  4629                           ;incstack = 0
  4630  00E018  0E00               	movlw	0
  4631  00E01A  6E06               	movwf	___awmod@sign,c
  4632  00E01C  AE02               	btfss	___awmod@dividend+1,7,c
  4633  00E01E  D006               	goto	l2293
  4634  00E020  6C01               	negf	___awmod@dividend,c
  4635  00E022  1E02               	comf	___awmod@dividend+1,f,c
  4636  00E024  B0D8               	btfsc	status,0,c
  4637  00E026  2A02               	incf	___awmod@dividend+1,f,c
  4638  00E028  0E01               	movlw	1
  4639  00E02A  6E06               	movwf	___awmod@sign,c
  4640  00E02C                     l2293:
  4641  00E02C  AE04               	btfss	___awmod@divisor+1,7,c
  4642  00E02E  D004               	goto	l2297
  4643  00E030  6C03               	negf	___awmod@divisor,c
  4644  00E032  1E04               	comf	___awmod@divisor+1,f,c
  4645  00E034  B0D8               	btfsc	status,0,c
  4646  00E036  2A04               	incf	___awmod@divisor+1,f,c
  4647  00E038                     l2297:
  4648  00E038  5003               	movf	___awmod@divisor,w,c
  4649  00E03A  1004               	iorwf	___awmod@divisor+1,w,c
  4650  00E03C  B4D8               	btfsc	status,2,c
  4651  00E03E  D018               	goto	l2313
  4652  00E040  0E01               	movlw	1
  4653  00E042  6E05               	movwf	___awmod@counter,c
  4654  00E044  D004               	goto	l2303
  4655  00E046                     l2301:
  4656  00E046  90D8               	bcf	status,0,c
  4657  00E048  3603               	rlcf	___awmod@divisor,f,c
  4658  00E04A  3604               	rlcf	___awmod@divisor+1,f,c
  4659  00E04C  2A05               	incf	___awmod@counter,f,c
  4660  00E04E                     l2303:
  4661  00E04E  AE04               	btfss	___awmod@divisor+1,7,c
  4662  00E050  D7FA               	goto	l2301
  4663  00E052                     l2305:
  4664  00E052  5003               	movf	___awmod@divisor,w,c
  4665  00E054  5C01               	subwf	___awmod@dividend,w,c
  4666  00E056  5004               	movf	___awmod@divisor+1,w,c
  4667  00E058  5802               	subwfb	___awmod@dividend+1,w,c
  4668  00E05A  A0D8               	btfss	status,0,c
  4669  00E05C  D004               	goto	l2309
  4670  00E05E  5003               	movf	___awmod@divisor,w,c
  4671  00E060  5E01               	subwf	___awmod@dividend,f,c
  4672  00E062  5004               	movf	___awmod@divisor+1,w,c
  4673  00E064  5A02               	subwfb	___awmod@dividend+1,f,c
  4674  00E066                     l2309:
  4675  00E066  90D8               	bcf	status,0,c
  4676  00E068  3204               	rrcf	___awmod@divisor+1,f,c
  4677  00E06A  3203               	rrcf	___awmod@divisor,f,c
  4678  00E06C  2E05               	decfsz	___awmod@counter,f,c
  4679  00E06E  D7F1               	goto	l2305
  4680  00E070                     l2313:
  4681  00E070  5006               	movf	___awmod@sign,w,c
  4682  00E072  B4D8               	btfsc	status,2,c
  4683  00E074  D004               	goto	l2317
  4684  00E076  6C01               	negf	___awmod@dividend,c
  4685  00E078  1E02               	comf	___awmod@dividend+1,f,c
  4686  00E07A  B0D8               	btfsc	status,0,c
  4687  00E07C  2A02               	incf	___awmod@dividend+1,f,c
  4688  00E07E                     l2317:
  4689  00E07E  C001  F001         	movff	___awmod@dividend,?___awmod
  4690  00E082  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4691  00E086  0012               	return	
  4692  00E088                     __end_of___awmod:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           indf0	equ	0xFEF
  4701                           postinc0	equ	0xFEE
  4702                           fsr0h	equ	0xFEA
  4703                           fsr0l	equ	0xFE9
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           plusw1	equ	0xFE3
  4707                           fsr1l	equ	0xFE1
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           plusw2	equ	0xFDB
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function ___awdiv *****************
  4716 ;; Defined at:
  4717 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  dividend        2    6[COMRAM] int 
  4720 ;;  divisor         2    8[COMRAM] int 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  quotient        2   12[COMRAM] int 
  4723 ;;  sign            1   11[COMRAM] unsigned char 
  4724 ;;  counter         1   10[COMRAM] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    6[COMRAM] int 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;Total ram usage:        8 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_fround
  4744 ;;		_scale
  4745 ;;		_printf
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text8
  4750  00E188                     __ptext8:
  4751                           	opt stack 0
  4752  00E188                     ___awdiv:
  4753                           	opt stack 28
  4754                           
  4755                           ;incstack = 0
  4756  00E188  0E00               	movlw	0
  4757  00E18A  6E0C               	movwf	___awdiv@sign,c
  4758  00E18C  AE0A               	btfss	___awdiv@divisor+1,7,c
  4759  00E18E  D006               	goto	l2249
  4760  00E190  6C09               	negf	___awdiv@divisor,c
  4761  00E192  1E0A               	comf	___awdiv@divisor+1,f,c
  4762  00E194  B0D8               	btfsc	status,0,c
  4763  00E196  2A0A               	incf	___awdiv@divisor+1,f,c
  4764  00E198  0E01               	movlw	1
  4765  00E19A  6E0C               	movwf	___awdiv@sign,c
  4766  00E19C                     l2249:
  4767  00E19C  AE08               	btfss	___awdiv@dividend+1,7,c
  4768  00E19E  D006               	goto	l2255
  4769  00E1A0  6C07               	negf	___awdiv@dividend,c
  4770  00E1A2  1E08               	comf	___awdiv@dividend+1,f,c
  4771  00E1A4  B0D8               	btfsc	status,0,c
  4772  00E1A6  2A08               	incf	___awdiv@dividend+1,f,c
  4773  00E1A8  0E01               	movlw	1
  4774  00E1AA  1A0C               	xorwf	___awdiv@sign,f,c
  4775  00E1AC                     l2255:
  4776  00E1AC  0E00               	movlw	0
  4777  00E1AE  6E0E               	movwf	___awdiv@quotient+1,c
  4778  00E1B0  0E00               	movlw	0
  4779  00E1B2  6E0D               	movwf	___awdiv@quotient,c
  4780  00E1B4  5009               	movf	___awdiv@divisor,w,c
  4781  00E1B6  100A               	iorwf	___awdiv@divisor+1,w,c
  4782  00E1B8  B4D8               	btfsc	status,2,c
  4783  00E1BA  D01C               	goto	l2277
  4784  00E1BC  0E01               	movlw	1
  4785  00E1BE  6E0B               	movwf	___awdiv@counter,c
  4786  00E1C0  D004               	goto	l2263
  4787  00E1C2                     l2261:
  4788  00E1C2  90D8               	bcf	status,0,c
  4789  00E1C4  3609               	rlcf	___awdiv@divisor,f,c
  4790  00E1C6  360A               	rlcf	___awdiv@divisor+1,f,c
  4791  00E1C8  2A0B               	incf	___awdiv@counter,f,c
  4792  00E1CA                     l2263:
  4793  00E1CA  AE0A               	btfss	___awdiv@divisor+1,7,c
  4794  00E1CC  D7FA               	goto	l2261
  4795  00E1CE                     l2265:
  4796  00E1CE  90D8               	bcf	status,0,c
  4797  00E1D0  360D               	rlcf	___awdiv@quotient,f,c
  4798  00E1D2  360E               	rlcf	___awdiv@quotient+1,f,c
  4799  00E1D4  5009               	movf	___awdiv@divisor,w,c
  4800  00E1D6  5C07               	subwf	___awdiv@dividend,w,c
  4801  00E1D8  500A               	movf	___awdiv@divisor+1,w,c
  4802  00E1DA  5808               	subwfb	___awdiv@dividend+1,w,c
  4803  00E1DC  A0D8               	btfss	status,0,c
  4804  00E1DE  D005               	goto	l2273
  4805  00E1E0  5009               	movf	___awdiv@divisor,w,c
  4806  00E1E2  5E07               	subwf	___awdiv@dividend,f,c
  4807  00E1E4  500A               	movf	___awdiv@divisor+1,w,c
  4808  00E1E6  5A08               	subwfb	___awdiv@dividend+1,f,c
  4809  00E1E8  800D               	bsf	___awdiv@quotient,0,c
  4810  00E1EA                     l2273:
  4811  00E1EA  90D8               	bcf	status,0,c
  4812  00E1EC  320A               	rrcf	___awdiv@divisor+1,f,c
  4813  00E1EE  3209               	rrcf	___awdiv@divisor,f,c
  4814  00E1F0  2E0B               	decfsz	___awdiv@counter,f,c
  4815  00E1F2  D7ED               	goto	l2265
  4816  00E1F4                     l2277:
  4817  00E1F4  500C               	movf	___awdiv@sign,w,c
  4818  00E1F6  B4D8               	btfsc	status,2,c
  4819  00E1F8  D004               	goto	l2281
  4820  00E1FA  6C0D               	negf	___awdiv@quotient,c
  4821  00E1FC  1E0E               	comf	___awdiv@quotient+1,f,c
  4822  00E1FE  B0D8               	btfsc	status,0,c
  4823  00E200  2A0E               	incf	___awdiv@quotient+1,f,c
  4824  00E202                     l2281:
  4825  00E202  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4826  00E206  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4827  00E20A  0012               	return	
  4828  00E20C                     __end_of___awdiv:
  4829                           	opt stack 0
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           indf0	equ	0xFEF
  4837                           postinc0	equ	0xFEE
  4838                           fsr0h	equ	0xFEA
  4839                           fsr0l	equ	0xFE9
  4840                           wreg	equ	0xFE8
  4841                           postdec1	equ	0xFE5
  4842                           plusw1	equ	0xFE3
  4843                           fsr1l	equ	0xFE1
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           plusw2	equ	0xFDB
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function __tdiv_to_l_ *****************
  4852 ;; Defined at:
  4853 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  f1              3    0[COMRAM] float 
  4856 ;;  f2              3    3[COMRAM] float 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  quot            4    9[COMRAM] unsigned long 
  4859 ;;  exp1            1   14[COMRAM] unsigned char 
  4860 ;;  cntr            1   13[COMRAM] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  4    0[COMRAM] unsigned long 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4870 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;Total ram usage:       15 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_printf
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text9
  4884  00E65A                     __ptext9:
  4885                           	opt stack 0
  4886  00E65A                     __tdiv_to_l_:
  4887                           	opt stack 29
  4888                           
  4889                           ;incstack = 0
  4890  00E65A  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4891  00E65E  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4892  00E660  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4893  00E662  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4894  00E664  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4895  00E666  E301               	bnc	u2041
  4896  00E668  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4897  00E66A                     u2041:
  4898  00E66A  5007               	movf	??__tdiv_to_l_,w,c
  4899  00E66C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4900  00E66E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4901  00E670  A4D8               	btfss	status,2,c
  4902  00E672  D009               	goto	l2405
  4903  00E674  0E00               	movlw	0
  4904  00E676  6E01               	movwf	?__tdiv_to_l_,c
  4905  00E678  0E00               	movlw	0
  4906  00E67A  6E02               	movwf	?__tdiv_to_l_+1,c
  4907  00E67C  0E00               	movlw	0
  4908  00E67E  6E03               	movwf	?__tdiv_to_l_+2,c
  4909  00E680  0E00               	movlw	0
  4910  00E682  6E04               	movwf	?__tdiv_to_l_+3,c
  4911  00E684  0012               	return	
  4912  00E686                     l2405:
  4913  00E686  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4914  00E68A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4915  00E68C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4916  00E68E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4917  00E690  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4918  00E692  E301               	bnc	u2061
  4919  00E694  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4920  00E696                     u2061:
  4921  00E696  5007               	movf	??__tdiv_to_l_,w,c
  4922  00E698  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4923  00E69A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4924  00E69C  A4D8               	btfss	status,2,c
  4925  00E69E  D009               	goto	l2411
  4926  00E6A0  0E00               	movlw	0
  4927  00E6A2  6E01               	movwf	?__tdiv_to_l_,c
  4928  00E6A4  0E00               	movlw	0
  4929  00E6A6  6E02               	movwf	?__tdiv_to_l_+1,c
  4930  00E6A8  0E00               	movlw	0
  4931  00E6AA  6E03               	movwf	?__tdiv_to_l_+2,c
  4932  00E6AC  0E00               	movlw	0
  4933  00E6AE  6E04               	movwf	?__tdiv_to_l_+3,c
  4934  00E6B0  0012               	return	
  4935  00E6B2                     l2411:
  4936  00E6B2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4937  00E6B4  0EFF               	movlw	255
  4938  00E6B6  1601               	andwf	__tdiv_to_l_@f1,f,c
  4939  00E6B8  0EFF               	movlw	255
  4940  00E6BA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4941  00E6BC  0E00               	movlw	0
  4942  00E6BE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4943  00E6C0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4944  00E6C2  0EFF               	movlw	255
  4945  00E6C4  1604               	andwf	__tdiv_to_l_@f2,f,c
  4946  00E6C6  0EFF               	movlw	255
  4947  00E6C8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4948  00E6CA  0E00               	movlw	0
  4949  00E6CC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4950  00E6CE  0E00               	movlw	0
  4951  00E6D0  6E0A               	movwf	__tdiv_to_l_@quot,c
  4952  00E6D2  0E00               	movlw	0
  4953  00E6D4  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4954  00E6D6  0E00               	movlw	0
  4955  00E6D8  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4956  00E6DA  0E00               	movlw	0
  4957  00E6DC  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4958  00E6DE  0E7F               	movlw	127
  4959  00E6E0  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4960  00E6E2  500E               	movf	__tdiv_to_l_@cntr,w,c
  4961  00E6E4  0F98               	addlw	152
  4962  00E6E6  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4963  00E6E8  0E18               	movlw	24
  4964  00E6EA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4965  00E6EC                     l540:
  4966  00E6EC  90D8               	bcf	status,0,c
  4967  00E6EE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4968  00E6F0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4969  00E6F2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4970  00E6F4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4971  00E6F6  5004               	movf	__tdiv_to_l_@f2,w,c
  4972  00E6F8  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4973  00E6FA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4974  00E6FC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4975  00E6FE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4976  00E700  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4977  00E702  A0D8               	btfss	status,0,c
  4978  00E704  D007               	goto	l541
  4979  00E706  5004               	movf	__tdiv_to_l_@f2,w,c
  4980  00E708  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4981  00E70A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4982  00E70C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4983  00E70E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4984  00E710  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4985  00E712  800A               	bsf	__tdiv_to_l_@quot,0,c
  4986  00E714                     l541:
  4987  00E714  90D8               	bcf	status,0,c
  4988  00E716  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4989  00E718  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4990  00E71A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4991  00E71C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4992  00E71E  D7E6               	goto	l540
  4993  00E720  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4994  00E722  D016               	goto	l2445
  4995  00E724  500F               	movf	__tdiv_to_l_@exp1,w,c
  4996  00E726  0A80               	xorlw	128
  4997  00E728  0F97               	addlw	151
  4998  00E72A  B0D8               	btfsc	status,0,c
  4999  00E72C  D009               	goto	l2441
  5000  00E72E  0E00               	movlw	0
  5001  00E730  6E01               	movwf	?__tdiv_to_l_,c
  5002  00E732  0E00               	movlw	0
  5003  00E734  6E02               	movwf	?__tdiv_to_l_+1,c
  5004  00E736  0E00               	movlw	0
  5005  00E738  6E03               	movwf	?__tdiv_to_l_+2,c
  5006  00E73A  0E00               	movlw	0
  5007  00E73C  6E04               	movwf	?__tdiv_to_l_+3,c
  5008  00E73E  0012               	return	
  5009  00E740                     l2441:
  5010  00E740  90D8               	bcf	status,0,c
  5011  00E742  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5012  00E744  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5013  00E746  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5014  00E748  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5015  00E74A  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5016  00E74C  D7F9               	goto	l2441
  5017  00E74E  D015               	goto	l547
  5018  00E750                     l2445:
  5019  00E750  0E17               	movlw	23
  5020  00E752  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5021  00E754  D00F               	goto	l2453
  5022  00E756  0E00               	movlw	0
  5023  00E758  6E01               	movwf	?__tdiv_to_l_,c
  5024  00E75A  0E00               	movlw	0
  5025  00E75C  6E02               	movwf	?__tdiv_to_l_+1,c
  5026  00E75E  0E00               	movlw	0
  5027  00E760  6E03               	movwf	?__tdiv_to_l_+2,c
  5028  00E762  0E00               	movlw	0
  5029  00E764  6E04               	movwf	?__tdiv_to_l_+3,c
  5030  00E766  0012               	return	
  5031  00E768                     l2451:
  5032  00E768  90D8               	bcf	status,0,c
  5033  00E76A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5034  00E76C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5035  00E76E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5036  00E770  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5037  00E772  060F               	decf	__tdiv_to_l_@exp1,f,c
  5038  00E774                     l2453:
  5039  00E774  500F               	movf	__tdiv_to_l_@exp1,w,c
  5040  00E776  A4D8               	btfss	status,2,c
  5041  00E778  D7F7               	goto	l2451
  5042  00E77A                     l547:
  5043  00E77A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5044  00E77E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5045  00E782  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5046  00E786  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5047  00E78A  0012               	return		;funcret
  5048  00E78C                     __end_of__tdiv_to_l_:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           indf0	equ	0xFEF
  5057                           postinc0	equ	0xFEE
  5058                           fsr0h	equ	0xFEA
  5059                           fsr0l	equ	0xFE9
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           plusw1	equ	0xFE3
  5063                           fsr1l	equ	0xFE1
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function __div_to_l_ *****************
  5072 ;; Defined at:
  5073 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  f1              3    0[COMRAM] unsigned long 
  5076 ;;  f2              3    3[COMRAM] unsigned long 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  quot            4    6[COMRAM] unsigned long 
  5079 ;;  exp1            1   11[COMRAM] unsigned char 
  5080 ;;  cntr            1   10[COMRAM] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  4    0[COMRAM] unsigned long 
  5083 ;; Registers used:
  5084 ;;		wreg, status,2, status,0
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5090 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;Total ram usage:       12 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_printf
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text10
  5104  00E532                     __ptext10:
  5105                           	opt stack 0
  5106  00E532                     __div_to_l_:
  5107                           	opt stack 29
  5108                           
  5109                           ;incstack = 0
  5110  00E532  3403               	rlcf	__div_to_l_@f1+2,w,c
  5111  00E534  3404               	rlcf	__div_to_l_@f1+3,w,c
  5112  00E536  6E0C               	movwf	__div_to_l_@exp1,c
  5113  00E538  500C               	movf	__div_to_l_@exp1,w,c
  5114  00E53A  A4D8               	btfss	status,2,c
  5115  00E53C  D009               	goto	l2461
  5116  00E53E  0E00               	movlw	0
  5117  00E540  6E01               	movwf	?__div_to_l_,c
  5118  00E542  0E00               	movlw	0
  5119  00E544  6E02               	movwf	?__div_to_l_+1,c
  5120  00E546  0E00               	movlw	0
  5121  00E548  6E03               	movwf	?__div_to_l_+2,c
  5122  00E54A  0E00               	movlw	0
  5123  00E54C  6E04               	movwf	?__div_to_l_+3,c
  5124  00E54E  0012               	return	
  5125  00E550                     l2461:
  5126  00E550  3406               	rlcf	__div_to_l_@f2+2,w,c
  5127  00E552  3407               	rlcf	__div_to_l_@f2+3,w,c
  5128  00E554  6E0B               	movwf	__div_to_l_@cntr,c
  5129  00E556  500B               	movf	__div_to_l_@cntr,w,c
  5130  00E558  A4D8               	btfss	status,2,c
  5131  00E55A  D009               	goto	l2467
  5132  00E55C  0E00               	movlw	0
  5133  00E55E  6E01               	movwf	?__div_to_l_,c
  5134  00E560  0E00               	movlw	0
  5135  00E562  6E02               	movwf	?__div_to_l_+1,c
  5136  00E564  0E00               	movlw	0
  5137  00E566  6E03               	movwf	?__div_to_l_+2,c
  5138  00E568  0E00               	movlw	0
  5139  00E56A  6E04               	movwf	?__div_to_l_+3,c
  5140  00E56C  0012               	return	
  5141  00E56E                     l2467:
  5142  00E56E  8E03               	bsf	__div_to_l_@f1+2,7,c
  5143  00E570  0EFF               	movlw	255
  5144  00E572  1601               	andwf	__div_to_l_@f1,f,c
  5145  00E574  0EFF               	movlw	255
  5146  00E576  1602               	andwf	__div_to_l_@f1+1,f,c
  5147  00E578  0EFF               	movlw	255
  5148  00E57A  1603               	andwf	__div_to_l_@f1+2,f,c
  5149  00E57C  0E00               	movlw	0
  5150  00E57E  1604               	andwf	__div_to_l_@f1+3,f,c
  5151  00E580  8E06               	bsf	__div_to_l_@f2+2,7,c
  5152  00E582  0EFF               	movlw	255
  5153  00E584  1604               	andwf	__div_to_l_@f2,f,c
  5154  00E586  0EFF               	movlw	255
  5155  00E588  1605               	andwf	__div_to_l_@f2+1,f,c
  5156  00E58A  0EFF               	movlw	255
  5157  00E58C  1606               	andwf	__div_to_l_@f2+2,f,c
  5158  00E58E  0E00               	movlw	0
  5159  00E590  1607               	andwf	__div_to_l_@f2+3,f,c
  5160  00E592  0E00               	movlw	0
  5161  00E594  6E07               	movwf	__div_to_l_@quot,c
  5162  00E596  0E00               	movlw	0
  5163  00E598  6E08               	movwf	__div_to_l_@quot+1,c
  5164  00E59A  0E00               	movlw	0
  5165  00E59C  6E09               	movwf	__div_to_l_@quot+2,c
  5166  00E59E  0E00               	movlw	0
  5167  00E5A0  6E0A               	movwf	__div_to_l_@quot+3,c
  5168  00E5A2  0E7F               	movlw	127
  5169  00E5A4  5E0C               	subwf	__div_to_l_@exp1,f,c
  5170  00E5A6  500B               	movf	__div_to_l_@cntr,w,c
  5171  00E5A8  0FA0               	addlw	160
  5172  00E5AA  5E0C               	subwf	__div_to_l_@exp1,f,c
  5173  00E5AC  0E20               	movlw	32
  5174  00E5AE  6E0B               	movwf	__div_to_l_@cntr,c
  5175  00E5B0                     l2481:
  5176  00E5B0  90D8               	bcf	status,0,c
  5177  00E5B2  3607               	rlcf	__div_to_l_@quot,f,c
  5178  00E5B4  3608               	rlcf	__div_to_l_@quot+1,f,c
  5179  00E5B6  3609               	rlcf	__div_to_l_@quot+2,f,c
  5180  00E5B8  360A               	rlcf	__div_to_l_@quot+3,f,c
  5181  00E5BA  5004               	movf	__div_to_l_@f2,w,c
  5182  00E5BC  5C01               	subwf	__div_to_l_@f1,w,c
  5183  00E5BE  5005               	movf	__div_to_l_@f2+1,w,c
  5184  00E5C0  5802               	subwfb	__div_to_l_@f1+1,w,c
  5185  00E5C2  5006               	movf	__div_to_l_@f2+2,w,c
  5186  00E5C4  5803               	subwfb	__div_to_l_@f1+2,w,c
  5187  00E5C6  5007               	movf	__div_to_l_@f2+3,w,c
  5188  00E5C8  5804               	subwfb	__div_to_l_@f1+3,w,c
  5189  00E5CA  A0D8               	btfss	status,0,c
  5190  00E5CC  D009               	goto	l2489
  5191  00E5CE  5004               	movf	__div_to_l_@f2,w,c
  5192  00E5D0  5E01               	subwf	__div_to_l_@f1,f,c
  5193  00E5D2  5005               	movf	__div_to_l_@f2+1,w,c
  5194  00E5D4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5195  00E5D6  5006               	movf	__div_to_l_@f2+2,w,c
  5196  00E5D8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5197  00E5DA  5007               	movf	__div_to_l_@f2+3,w,c
  5198  00E5DC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5199  00E5DE  8007               	bsf	__div_to_l_@quot,0,c
  5200  00E5E0                     l2489:
  5201  00E5E0  90D8               	bcf	status,0,c
  5202  00E5E2  3601               	rlcf	__div_to_l_@f1,f,c
  5203  00E5E4  3602               	rlcf	__div_to_l_@f1+1,f,c
  5204  00E5E6  3603               	rlcf	__div_to_l_@f1+2,f,c
  5205  00E5E8  3604               	rlcf	__div_to_l_@f1+3,f,c
  5206  00E5EA  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5207  00E5EC  D7E1               	goto	l2481
  5208  00E5EE  AE0C               	btfss	__div_to_l_@exp1,7,c
  5209  00E5F0  D016               	goto	l2505
  5210  00E5F2  500C               	movf	__div_to_l_@exp1,w,c
  5211  00E5F4  0A80               	xorlw	128
  5212  00E5F6  0F9F               	addlw	159
  5213  00E5F8  B0D8               	btfsc	status,0,c
  5214  00E5FA  D009               	goto	l2501
  5215  00E5FC  0E00               	movlw	0
  5216  00E5FE  6E01               	movwf	?__div_to_l_,c
  5217  00E600  0E00               	movlw	0
  5218  00E602  6E02               	movwf	?__div_to_l_+1,c
  5219  00E604  0E00               	movlw	0
  5220  00E606  6E03               	movwf	?__div_to_l_+2,c
  5221  00E608  0E00               	movlw	0
  5222  00E60A  6E04               	movwf	?__div_to_l_+3,c
  5223  00E60C  0012               	return	
  5224  00E60E                     l2501:
  5225  00E60E  90D8               	bcf	status,0,c
  5226  00E610  320A               	rrcf	__div_to_l_@quot+3,f,c
  5227  00E612  3209               	rrcf	__div_to_l_@quot+2,f,c
  5228  00E614  3208               	rrcf	__div_to_l_@quot+1,f,c
  5229  00E616  3207               	rrcf	__div_to_l_@quot,f,c
  5230  00E618  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5231  00E61A  D7F9               	goto	l2501
  5232  00E61C  D015               	goto	l443
  5233  00E61E                     l2505:
  5234  00E61E  0E1F               	movlw	31
  5235  00E620  640C               	cpfsgt	__div_to_l_@exp1,c
  5236  00E622  D00F               	goto	l2513
  5237  00E624  0E00               	movlw	0
  5238  00E626  6E01               	movwf	?__div_to_l_,c
  5239  00E628  0E00               	movlw	0
  5240  00E62A  6E02               	movwf	?__div_to_l_+1,c
  5241  00E62C  0E00               	movlw	0
  5242  00E62E  6E03               	movwf	?__div_to_l_+2,c
  5243  00E630  0E00               	movlw	0
  5244  00E632  6E04               	movwf	?__div_to_l_+3,c
  5245  00E634  0012               	return	
  5246  00E636                     l2511:
  5247  00E636  90D8               	bcf	status,0,c
  5248  00E638  3607               	rlcf	__div_to_l_@quot,f,c
  5249  00E63A  3608               	rlcf	__div_to_l_@quot+1,f,c
  5250  00E63C  3609               	rlcf	__div_to_l_@quot+2,f,c
  5251  00E63E  360A               	rlcf	__div_to_l_@quot+3,f,c
  5252  00E640  060C               	decf	__div_to_l_@exp1,f,c
  5253  00E642                     l2513:
  5254  00E642  500C               	movf	__div_to_l_@exp1,w,c
  5255  00E644  A4D8               	btfss	status,2,c
  5256  00E646  D7F7               	goto	l2511
  5257  00E648                     l443:
  5258  00E648  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5259  00E64C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5260  00E650  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5261  00E654  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5262  00E658  0012               	return		;funcret
  5263  00E65A                     __end_of__div_to_l_:
  5264                           	opt stack 0
  5265                           tblptru	equ	0xFF8
  5266                           tblptrh	equ	0xFF7
  5267                           tblptrl	equ	0xFF6
  5268                           tablat	equ	0xFF5
  5269                           prodh	equ	0xFF4
  5270                           prodl	equ	0xFF3
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           plusw1	equ	0xFE3
  5278                           fsr1l	equ	0xFE1
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           plusw2	equ	0xFDB
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function ___lltoft *****************
  5287 ;; Defined at:
  5288 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  c               4    8[COMRAM] unsigned long 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  exp             1   16[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  3    8[COMRAM] float 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;Total ram usage:        9 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    1
  5309 ;; This function calls:
  5310 ;;		___ftpack
  5311 ;; This function is called by:
  5312 ;;		_printf
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text11
  5317  00DF56                     __ptext11:
  5318                           	opt stack 0
  5319  00DF56                     ___lltoft:
  5320                           	opt stack 28
  5321                           
  5322                           ;incstack = 0
  5323  00DF56  0E8E               	movlw	142
  5324  00DF58  6E11               	movwf	___lltoft@exp,c
  5325  00DF5A  D006               	goto	l2633
  5326  00DF5C                     l2631:
  5327  00DF5C  90D8               	bcf	status,0,c
  5328  00DF5E  320C               	rrcf	___lltoft@c+3,f,c
  5329  00DF60  320B               	rrcf	___lltoft@c+2,f,c
  5330  00DF62  320A               	rrcf	___lltoft@c+1,f,c
  5331  00DF64  3209               	rrcf	___lltoft@c,f,c
  5332  00DF66  2A11               	incf	___lltoft@exp,f,c
  5333  00DF68                     l2633:
  5334  00DF68  0E00               	movlw	0
  5335  00DF6A  1409               	andwf	___lltoft@c,w,c
  5336  00DF6C  6E0D               	movwf	??___lltoft& (0+255),c
  5337  00DF6E  0E00               	movlw	0
  5338  00DF70  140A               	andwf	___lltoft@c+1,w,c
  5339  00DF72  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5340  00DF74  0E00               	movlw	0
  5341  00DF76  140B               	andwf	___lltoft@c+2,w,c
  5342  00DF78  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5343  00DF7A  0EFF               	movlw	255
  5344  00DF7C  140C               	andwf	___lltoft@c+3,w,c
  5345  00DF7E  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5346  00DF80  500D               	movf	??___lltoft,w,c
  5347  00DF82  100E               	iorwf	??___lltoft+1,w,c
  5348  00DF84  100F               	iorwf	??___lltoft+2,w,c
  5349  00DF86  1010               	iorwf	??___lltoft+3,w,c
  5350  00DF88  A4D8               	btfss	status,2,c
  5351  00DF8A  D7E8               	goto	l2631
  5352  00DF8C  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5353  00DF90  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5354  00DF94  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5355  00DF98  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5356  00DF9C  0E00               	movlw	0
  5357  00DF9E  6E05               	movwf	___ftpack@sign,c
  5358  00DFA0  EC4E  F071         	call	___ftpack	;wreg free
  5359  00DFA4  C001  F009         	movff	?___ftpack,?___lltoft
  5360  00DFA8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5361  00DFAC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5362  00DFB0  0012               	return	
  5363  00DFB2                     __end_of___lltoft:
  5364                           	opt stack 0
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           indf0	equ	0xFEF
  5372                           postinc0	equ	0xFEE
  5373                           fsr0h	equ	0xFEA
  5374                           fsr0l	equ	0xFE9
  5375                           wreg	equ	0xFE8
  5376                           postdec1	equ	0xFE5
  5377                           plusw1	equ	0xFE3
  5378                           fsr1l	equ	0xFE1
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           plusw2	equ	0xFDB
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function ___llmod *****************
  5387 ;; Defined at:
  5388 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  dividend        4   13[COMRAM] unsigned long 
  5391 ;;  divisor         4   17[COMRAM] unsigned long 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  counter         1   21[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  4   13[COMRAM] unsigned long 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5403 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;Total ram usage:        9 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_printf
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text12
  5417  00DFB2                     __ptext12:
  5418                           	opt stack 0
  5419  00DFB2                     ___llmod:
  5420                           	opt stack 29
  5421                           
  5422                           ;incstack = 0
  5423  00DFB2  5012               	movf	___llmod@divisor,w,c
  5424  00DFB4  1013               	iorwf	___llmod@divisor+1,w,c
  5425  00DFB6  1014               	iorwf	___llmod@divisor+2,w,c
  5426  00DFB8  1015               	iorwf	___llmod@divisor+3,w,c
  5427  00DFBA  B4D8               	btfsc	status,2,c
  5428  00DFBC  D024               	goto	l627
  5429  00DFBE  0E01               	movlw	1
  5430  00DFC0  6E16               	movwf	___llmod@counter,c
  5431  00DFC2  D006               	goto	l2619
  5432  00DFC4                     l2617:
  5433  00DFC4  90D8               	bcf	status,0,c
  5434  00DFC6  3612               	rlcf	___llmod@divisor,f,c
  5435  00DFC8  3613               	rlcf	___llmod@divisor+1,f,c
  5436  00DFCA  3614               	rlcf	___llmod@divisor+2,f,c
  5437  00DFCC  3615               	rlcf	___llmod@divisor+3,f,c
  5438  00DFCE  2A16               	incf	___llmod@counter,f,c
  5439  00DFD0                     l2619:
  5440  00DFD0  AE15               	btfss	___llmod@divisor+3,7,c
  5441  00DFD2  D7F8               	goto	l2617
  5442  00DFD4                     l2621:
  5443  00DFD4  5012               	movf	___llmod@divisor,w,c
  5444  00DFD6  5C0E               	subwf	___llmod@dividend,w,c
  5445  00DFD8  5013               	movf	___llmod@divisor+1,w,c
  5446  00DFDA  580F               	subwfb	___llmod@dividend+1,w,c
  5447  00DFDC  5014               	movf	___llmod@divisor+2,w,c
  5448  00DFDE  5810               	subwfb	___llmod@dividend+2,w,c
  5449  00DFE0  5015               	movf	___llmod@divisor+3,w,c
  5450  00DFE2  5811               	subwfb	___llmod@dividend+3,w,c
  5451  00DFE4  A0D8               	btfss	status,0,c
  5452  00DFE6  D008               	goto	l2625
  5453  00DFE8  5012               	movf	___llmod@divisor,w,c
  5454  00DFEA  5E0E               	subwf	___llmod@dividend,f,c
  5455  00DFEC  5013               	movf	___llmod@divisor+1,w,c
  5456  00DFEE  5A0F               	subwfb	___llmod@dividend+1,f,c
  5457  00DFF0  5014               	movf	___llmod@divisor+2,w,c
  5458  00DFF2  5A10               	subwfb	___llmod@dividend+2,f,c
  5459  00DFF4  5015               	movf	___llmod@divisor+3,w,c
  5460  00DFF6  5A11               	subwfb	___llmod@dividend+3,f,c
  5461  00DFF8                     l2625:
  5462  00DFF8  90D8               	bcf	status,0,c
  5463  00DFFA  3215               	rrcf	___llmod@divisor+3,f,c
  5464  00DFFC  3214               	rrcf	___llmod@divisor+2,f,c
  5465  00DFFE  3213               	rrcf	___llmod@divisor+1,f,c
  5466  00E000  3212               	rrcf	___llmod@divisor,f,c
  5467  00E002  2E16               	decfsz	___llmod@counter,f,c
  5468  00E004  D7E7               	goto	l2621
  5469  00E006                     l627:
  5470  00E006  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5471  00E00A  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5472  00E00E  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5473  00E012  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5474  00E016  0012               	return		;funcret
  5475  00E018                     __end_of___llmod:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           indf0	equ	0xFEF
  5484                           postinc0	equ	0xFEE
  5485                           fsr0h	equ	0xFEA
  5486                           fsr0l	equ	0xFE9
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           plusw1	equ	0xFE3
  5490                           fsr1l	equ	0xFE1
  5491                           postinc2	equ	0xFDE
  5492                           postdec2	equ	0xFDD
  5493                           plusw2	equ	0xFDB
  5494                           fsr2h	equ	0xFDA
  5495                           fsr2l	equ	0xFD9
  5496                           status	equ	0xFD8
  5497                           
  5498 ;; *************** function ___lldiv *****************
  5499 ;; Defined at:
  5500 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  dividend        4    0[COMRAM] unsigned long 
  5503 ;;  divisor         4    4[COMRAM] unsigned long 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  quotient        4    8[COMRAM] unsigned long 
  5506 ;;  counter         1   12[COMRAM] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  4    0[COMRAM] unsigned long 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5516 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;Total ram usage:       13 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_printf
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text13
  5530  00E106                     __ptext13:
  5531                           	opt stack 0
  5532  00E106                     ___lldiv:
  5533                           	opt stack 29
  5534                           
  5535                           ;incstack = 0
  5536  00E106  0E00               	movlw	0
  5537  00E108  6E09               	movwf	___lldiv@quotient,c
  5538  00E10A  0E00               	movlw	0
  5539  00E10C  6E0A               	movwf	___lldiv@quotient+1,c
  5540  00E10E  0E00               	movlw	0
  5541  00E110  6E0B               	movwf	___lldiv@quotient+2,c
  5542  00E112  0E00               	movlw	0
  5543  00E114  6E0C               	movwf	___lldiv@quotient+3,c
  5544  00E116  5005               	movf	___lldiv@divisor,w,c
  5545  00E118  1006               	iorwf	___lldiv@divisor+1,w,c
  5546  00E11A  1007               	iorwf	___lldiv@divisor+2,w,c
  5547  00E11C  1008               	iorwf	___lldiv@divisor+3,w,c
  5548  00E11E  B4D8               	btfsc	status,2,c
  5549  00E120  D02A               	goto	l617
  5550  00E122  0E01               	movlw	1
  5551  00E124  6E0D               	movwf	___lldiv@counter,c
  5552  00E126  D006               	goto	l2599
  5553  00E128                     l2597:
  5554  00E128  90D8               	bcf	status,0,c
  5555  00E12A  3605               	rlcf	___lldiv@divisor,f,c
  5556  00E12C  3606               	rlcf	___lldiv@divisor+1,f,c
  5557  00E12E  3607               	rlcf	___lldiv@divisor+2,f,c
  5558  00E130  3608               	rlcf	___lldiv@divisor+3,f,c
  5559  00E132  2A0D               	incf	___lldiv@counter,f,c
  5560  00E134                     l2599:
  5561  00E134  AE08               	btfss	___lldiv@divisor+3,7,c
  5562  00E136  D7F8               	goto	l2597
  5563  00E138                     l2601:
  5564  00E138  90D8               	bcf	status,0,c
  5565  00E13A  3609               	rlcf	___lldiv@quotient,f,c
  5566  00E13C  360A               	rlcf	___lldiv@quotient+1,f,c
  5567  00E13E  360B               	rlcf	___lldiv@quotient+2,f,c
  5568  00E140  360C               	rlcf	___lldiv@quotient+3,f,c
  5569  00E142  5005               	movf	___lldiv@divisor,w,c
  5570  00E144  5C01               	subwf	___lldiv@dividend,w,c
  5571  00E146  5006               	movf	___lldiv@divisor+1,w,c
  5572  00E148  5802               	subwfb	___lldiv@dividend+1,w,c
  5573  00E14A  5007               	movf	___lldiv@divisor+2,w,c
  5574  00E14C  5803               	subwfb	___lldiv@dividend+2,w,c
  5575  00E14E  5008               	movf	___lldiv@divisor+3,w,c
  5576  00E150  5804               	subwfb	___lldiv@dividend+3,w,c
  5577  00E152  A0D8               	btfss	status,0,c
  5578  00E154  D009               	goto	l2609
  5579  00E156  5005               	movf	___lldiv@divisor,w,c
  5580  00E158  5E01               	subwf	___lldiv@dividend,f,c
  5581  00E15A  5006               	movf	___lldiv@divisor+1,w,c
  5582  00E15C  5A02               	subwfb	___lldiv@dividend+1,f,c
  5583  00E15E  5007               	movf	___lldiv@divisor+2,w,c
  5584  00E160  5A03               	subwfb	___lldiv@dividend+2,f,c
  5585  00E162  5008               	movf	___lldiv@divisor+3,w,c
  5586  00E164  5A04               	subwfb	___lldiv@dividend+3,f,c
  5587  00E166  8009               	bsf	___lldiv@quotient,0,c
  5588  00E168                     l2609:
  5589  00E168  90D8               	bcf	status,0,c
  5590  00E16A  3208               	rrcf	___lldiv@divisor+3,f,c
  5591  00E16C  3207               	rrcf	___lldiv@divisor+2,f,c
  5592  00E16E  3206               	rrcf	___lldiv@divisor+1,f,c
  5593  00E170  3205               	rrcf	___lldiv@divisor,f,c
  5594  00E172  2E0D               	decfsz	___lldiv@counter,f,c
  5595  00E174  D7E1               	goto	l2601
  5596  00E176                     l617:
  5597  00E176  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5598  00E17A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5599  00E17E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5600  00E182  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5601  00E186  0012               	return		;funcret
  5602  00E188                     __end_of___lldiv:
  5603                           	opt stack 0
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           prodh	equ	0xFF4
  5609                           prodl	equ	0xFF3
  5610                           indf0	equ	0xFEF
  5611                           postinc0	equ	0xFEE
  5612                           fsr0h	equ	0xFEA
  5613                           fsr0l	equ	0xFE9
  5614                           wreg	equ	0xFE8
  5615                           postdec1	equ	0xFE5
  5616                           plusw1	equ	0xFE3
  5617                           fsr1l	equ	0xFE1
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           plusw2	equ	0xFDB
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function ___fttol *****************
  5626 ;; Defined at:
  5627 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  f1              3   42[COMRAM] float 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  lval            4   52[COMRAM] unsigned long 
  5632 ;;  exp1            1   56[COMRAM] unsigned char 
  5633 ;;  sign1           1   51[COMRAM] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  4   42[COMRAM] long 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;Total ram usage:       15 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_printf
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           	psect	text14
  5657  00E34A                     __ptext14:
  5658                           	opt stack 0
  5659  00E34A                     ___fttol:
  5660                           	opt stack 29
  5661                           
  5662                           ;incstack = 0
  5663  00E34A  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5664  00E34E  6A30               	clrf	(??___fttol+1)& (0+255),c
  5665  00E350  6A31               	clrf	(??___fttol+2)& (0+255),c
  5666  00E352  342C               	rlcf	___fttol@f1+1,w,c
  5667  00E354  362F               	rlcf	??___fttol& (0+255),f,c
  5668  00E356  E301               	bnc	u2251
  5669  00E358  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5670  00E35A                     u2251:
  5671  00E35A  502F               	movf	??___fttol,w,c
  5672  00E35C  6E39               	movwf	___fttol@exp1,c
  5673  00E35E  5039               	movf	___fttol@exp1,w,c
  5674  00E360  A4D8               	btfss	status,2,c
  5675  00E362  D009               	goto	l2551
  5676  00E364  0E00               	movlw	0
  5677  00E366  6E2B               	movwf	?___fttol,c
  5678  00E368  0E00               	movlw	0
  5679  00E36A  6E2C               	movwf	?___fttol+1,c
  5680  00E36C  0E00               	movlw	0
  5681  00E36E  6E2D               	movwf	?___fttol+2,c
  5682  00E370  0E00               	movlw	0
  5683  00E372  6E2E               	movwf	?___fttol+3,c
  5684  00E374  0012               	return	
  5685  00E376                     l2551:
  5686  00E376  0E17               	movlw	23
  5687  00E378  6E2F               	movwf	??___fttol& (0+255),c
  5688  00E37A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5689  00E37E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5690  00E382  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5691  00E386  282F               	incf	??___fttol,w,c
  5692  00E388  6E33               	movwf	(??___fttol+4)& (0+255),c
  5693  00E38A  D004               	goto	u2270
  5694  00E38C                     u2275:
  5695  00E38C  90D8               	bcf	status,0,c
  5696  00E38E  3232               	rrcf	??___fttol+3,f,c
  5697  00E390  3231               	rrcf	??___fttol+2,f,c
  5698  00E392  3230               	rrcf	??___fttol+1,f,c
  5699  00E394                     u2270:
  5700  00E394  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5701  00E396  D7FA               	goto	u2275
  5702  00E398  5030               	movf	??___fttol+1,w,c
  5703  00E39A  6E34               	movwf	___fttol@sign1,c
  5704  00E39C  8E2C               	bsf	___fttol@f1+1,7,c
  5705  00E39E  0EFF               	movlw	255
  5706  00E3A0  162B               	andwf	___fttol@f1,f,c
  5707  00E3A2  0EFF               	movlw	255
  5708  00E3A4  162C               	andwf	___fttol@f1+1,f,c
  5709  00E3A6  0E00               	movlw	0
  5710  00E3A8  162D               	andwf	___fttol@f1+2,f,c
  5711  00E3AA  502B               	movf	___fttol@f1,w,c
  5712  00E3AC  6E35               	movwf	___fttol@lval,c
  5713  00E3AE  502C               	movf	___fttol@f1+1,w,c
  5714  00E3B0  6E36               	movwf	___fttol@lval+1,c
  5715  00E3B2  502D               	movf	___fttol@f1+2,w,c
  5716  00E3B4  6E37               	movwf	___fttol@lval+2,c
  5717  00E3B6  6A38               	clrf	___fttol@lval+3,c
  5718  00E3B8  0E8E               	movlw	142
  5719  00E3BA  5E39               	subwf	___fttol@exp1,f,c
  5720  00E3BC  AE39               	btfss	___fttol@exp1,7,c
  5721  00E3BE  D016               	goto	l2573
  5722  00E3C0  5039               	movf	___fttol@exp1,w,c
  5723  00E3C2  0A80               	xorlw	128
  5724  00E3C4  0F8F               	addlw	143
  5725  00E3C6  B0D8               	btfsc	status,0,c
  5726  00E3C8  D009               	goto	l2569
  5727  00E3CA  0E00               	movlw	0
  5728  00E3CC  6E2B               	movwf	?___fttol,c
  5729  00E3CE  0E00               	movlw	0
  5730  00E3D0  6E2C               	movwf	?___fttol+1,c
  5731  00E3D2  0E00               	movlw	0
  5732  00E3D4  6E2D               	movwf	?___fttol+2,c
  5733  00E3D6  0E00               	movlw	0
  5734  00E3D8  6E2E               	movwf	?___fttol+3,c
  5735  00E3DA  0012               	return	
  5736  00E3DC                     l2569:
  5737  00E3DC  90D8               	bcf	status,0,c
  5738  00E3DE  3238               	rrcf	___fttol@lval+3,f,c
  5739  00E3E0  3237               	rrcf	___fttol@lval+2,f,c
  5740  00E3E2  3236               	rrcf	___fttol@lval+1,f,c
  5741  00E3E4  3235               	rrcf	___fttol@lval,f,c
  5742  00E3E6  3E39               	incfsz	___fttol@exp1,f,c
  5743  00E3E8  D7F9               	goto	l2569
  5744  00E3EA  D015               	goto	l2583
  5745  00E3EC                     l2573:
  5746  00E3EC  0E17               	movlw	23
  5747  00E3EE  6439               	cpfsgt	___fttol@exp1,c
  5748  00E3F0  D00F               	goto	l2581
  5749  00E3F2  0E00               	movlw	0
  5750  00E3F4  6E2B               	movwf	?___fttol,c
  5751  00E3F6  0E00               	movlw	0
  5752  00E3F8  6E2C               	movwf	?___fttol+1,c
  5753  00E3FA  0E00               	movlw	0
  5754  00E3FC  6E2D               	movwf	?___fttol+2,c
  5755  00E3FE  0E00               	movlw	0
  5756  00E400  6E2E               	movwf	?___fttol+3,c
  5757  00E402  0012               	return	
  5758  00E404                     l2579:
  5759  00E404  90D8               	bcf	status,0,c
  5760  00E406  3635               	rlcf	___fttol@lval,f,c
  5761  00E408  3636               	rlcf	___fttol@lval+1,f,c
  5762  00E40A  3637               	rlcf	___fttol@lval+2,f,c
  5763  00E40C  3638               	rlcf	___fttol@lval+3,f,c
  5764  00E40E  0639               	decf	___fttol@exp1,f,c
  5765  00E410                     l2581:
  5766  00E410  5039               	movf	___fttol@exp1,w,c
  5767  00E412  A4D8               	btfss	status,2,c
  5768  00E414  D7F7               	goto	l2579
  5769  00E416                     l2583:
  5770  00E416  5034               	movf	___fttol@sign1,w,c
  5771  00E418  B4D8               	btfsc	status,2,c
  5772  00E41A  D008               	goto	l2587
  5773  00E41C  1E38               	comf	___fttol@lval+3,f,c
  5774  00E41E  1E37               	comf	___fttol@lval+2,f,c
  5775  00E420  1E36               	comf	___fttol@lval+1,f,c
  5776  00E422  6C35               	negf	___fttol@lval,c
  5777  00E424  0E00               	movlw	0
  5778  00E426  2236               	addwfc	___fttol@lval+1,f,c
  5779  00E428  2237               	addwfc	___fttol@lval+2,f,c
  5780  00E42A  2238               	addwfc	___fttol@lval+3,f,c
  5781  00E42C                     l2587:
  5782  00E42C  C035  F02B         	movff	___fttol@lval,?___fttol
  5783  00E430  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5784  00E434  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5785  00E438  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5786  00E43C  0012               	return	
  5787  00E43E                     __end_of___fttol:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           indf0	equ	0xFEF
  5796                           postinc0	equ	0xFEE
  5797                           fsr0h	equ	0xFEA
  5798                           fsr0l	equ	0xFE9
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           plusw1	equ	0xFE3
  5802                           fsr1l	equ	0xFE1
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           plusw2	equ	0xFDB
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function ___ftsub *****************
  5811 ;; Defined at:
  5812 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  f1              3   57[COMRAM] float 
  5815 ;;  f2              3   60[COMRAM] float 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  3   57[COMRAM] float 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5827 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;Total ram usage:        6 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    2
  5834 ;; This function calls:
  5835 ;;		___ftadd
  5836 ;; This function is called by:
  5837 ;;		_printf
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text15
  5842  00DECA                     __ptext15:
  5843                           	opt stack 0
  5844  00DECA                     ___ftsub:
  5845                           	opt stack 27
  5846                           
  5847                           ;incstack = 0
  5848  00DECA  503D               	movf	___ftsub@f2,w,c
  5849  00DECC  103E               	iorwf	___ftsub@f2+1,w,c
  5850  00DECE  103F               	iorwf	___ftsub@f2+2,w,c
  5851  00DED0  B4D8               	btfsc	status,2,c
  5852  00DED2  D006               	goto	l2519
  5853  00DED4  0E00               	movlw	0
  5854  00DED6  1A3D               	xorwf	___ftsub@f2,f,c
  5855  00DED8  0E00               	movlw	0
  5856  00DEDA  1A3E               	xorwf	___ftsub@f2+1,f,c
  5857  00DEDC  0E80               	movlw	128
  5858  00DEDE  1A3F               	xorwf	___ftsub@f2+2,f,c
  5859  00DEE0                     l2519:
  5860  00DEE0  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5861  00DEE4  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5862  00DEE8  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5863  00DEEC  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5864  00DEF0  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5865  00DEF4  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5866  00DEF8  ECC6  F073         	call	___ftadd	;wreg free
  5867  00DEFC  C02E  F03A         	movff	?___ftadd,?___ftsub
  5868  00DF00  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5869  00DF04  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5870  00DF08  0012               	return	
  5871  00DF0A                     __end_of___ftsub:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           indf0	equ	0xFEF
  5880                           postinc0	equ	0xFEE
  5881                           fsr0h	equ	0xFEA
  5882                           fsr0l	equ	0xFE9
  5883                           wreg	equ	0xFE8
  5884                           postdec1	equ	0xFE5
  5885                           plusw1	equ	0xFE3
  5886                           fsr1l	equ	0xFE1
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           plusw2	equ	0xFDB
  5890                           fsr2h	equ	0xFDA
  5891                           fsr2l	equ	0xFD9
  5892                           status	equ	0xFD8
  5893                           
  5894 ;; *************** function ___ftadd *****************
  5895 ;; Defined at:
  5896 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  f1              3   45[COMRAM] float 
  5899 ;;  f2              3   48[COMRAM] float 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  exp1            1   56[COMRAM] unsigned char 
  5902 ;;  exp2            1   55[COMRAM] unsigned char 
  5903 ;;  sign            1   54[COMRAM] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  3   45[COMRAM] float 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:       12 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    1
  5920 ;; This function calls:
  5921 ;;		___ftpack
  5922 ;; This function is called by:
  5923 ;;		_printf
  5924 ;;		___ftsub
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text16
  5929  00E78C                     __ptext16:
  5930                           	opt stack 0
  5931  00E78C                     ___ftadd:
  5932                           	opt stack 27
  5933                           
  5934                           ;incstack = 0
  5935  00E78C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5936  00E790  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5937  00E792  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5938  00E794  342F               	rlcf	___ftadd@f1+1,w,c
  5939  00E796  3634               	rlcf	??___ftadd& (0+255),f,c
  5940  00E798  E301               	bnc	u1561
  5941  00E79A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5942  00E79C                     u1561:
  5943  00E79C  5034               	movf	??___ftadd,w,c
  5944  00E79E  6E39               	movwf	___ftadd@exp1,c
  5945  00E7A0  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5946  00E7A4  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5947  00E7A6  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5948  00E7A8  3432               	rlcf	___ftadd@f2+1,w,c
  5949  00E7AA  3634               	rlcf	??___ftadd& (0+255),f,c
  5950  00E7AC  E301               	bnc	u1571
  5951  00E7AE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5952  00E7B0                     u1571:
  5953  00E7B0  5034               	movf	??___ftadd,w,c
  5954  00E7B2  6E38               	movwf	___ftadd@exp2,c
  5955  00E7B4  5039               	movf	___ftadd@exp1,w,c
  5956  00E7B6  B4D8               	btfsc	status,2,c
  5957  00E7B8  D00B               	goto	l498
  5958  00E7BA  5038               	movf	___ftadd@exp2,w,c
  5959  00E7BC  5C39               	subwf	___ftadd@exp1,w,c
  5960  00E7BE  B0D8               	btfsc	status,0,c
  5961  00E7C0  D00E               	goto	l2131
  5962  00E7C2  5039               	movf	___ftadd@exp1,w,c
  5963  00E7C4  0800               	sublw	0
  5964  00E7C6  2438               	addwf	___ftadd@exp2,w,c
  5965  00E7C8  6E34               	movwf	??___ftadd& (0+255),c
  5966  00E7CA  0E18               	movlw	24
  5967  00E7CC  6434               	cpfsgt	??___ftadd,c
  5968  00E7CE  D007               	goto	l2131
  5969  00E7D0                     l498:
  5970  00E7D0  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5971  00E7D4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5972  00E7D8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5973  00E7DC  0012               	return	
  5974  00E7DE                     l2131:
  5975  00E7DE  5038               	movf	___ftadd@exp2,w,c
  5976  00E7E0  B4D8               	btfsc	status,2,c
  5977  00E7E2  D00B               	goto	l502
  5978  00E7E4  5039               	movf	___ftadd@exp1,w,c
  5979  00E7E6  5C38               	subwf	___ftadd@exp2,w,c
  5980  00E7E8  B0D8               	btfsc	status,0,c
  5981  00E7EA  D00E               	goto	l2137
  5982  00E7EC  5038               	movf	___ftadd@exp2,w,c
  5983  00E7EE  0800               	sublw	0
  5984  00E7F0  2439               	addwf	___ftadd@exp1,w,c
  5985  00E7F2  6E34               	movwf	??___ftadd& (0+255),c
  5986  00E7F4  0E18               	movlw	24
  5987  00E7F6  6434               	cpfsgt	??___ftadd,c
  5988  00E7F8  D007               	goto	l2137
  5989  00E7FA                     l502:
  5990  00E7FA  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5991  00E7FE  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5992  00E802  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5993  00E806  0012               	return	
  5994  00E808                     l2137:
  5995  00E808  0E06               	movlw	6
  5996  00E80A  6E37               	movwf	___ftadd@sign,c
  5997  00E80C  BE30               	btfsc	___ftadd@f1+2,7,c
  5998  00E80E  8E37               	bsf	___ftadd@sign,7,c
  5999  00E810  BE33               	btfsc	___ftadd@f2+2,7,c
  6000  00E812  8C37               	bsf	___ftadd@sign,6,c
  6001  00E814  8E2F               	bsf	___ftadd@f1+1,7,c
  6002  00E816  0EFF               	movlw	255
  6003  00E818  162E               	andwf	___ftadd@f1,f,c
  6004  00E81A  0EFF               	movlw	255
  6005  00E81C  162F               	andwf	___ftadd@f1+1,f,c
  6006  00E81E  0E00               	movlw	0
  6007  00E820  1630               	andwf	___ftadd@f1+2,f,c
  6008  00E822  8E32               	bsf	___ftadd@f2+1,7,c
  6009  00E824  0EFF               	movlw	255
  6010  00E826  1631               	andwf	___ftadd@f2,f,c
  6011  00E828  0EFF               	movlw	255
  6012  00E82A  1632               	andwf	___ftadd@f2+1,f,c
  6013  00E82C  0E00               	movlw	0
  6014  00E82E  1633               	andwf	___ftadd@f2+2,f,c
  6015  00E830  5038               	movf	___ftadd@exp2,w,c
  6016  00E832  5C39               	subwf	___ftadd@exp1,w,c
  6017  00E834  B0D8               	btfsc	status,0,c
  6018  00E836  D01B               	goto	l2163
  6019  00E838                     l2153:
  6020  00E838  90D8               	bcf	status,0,c
  6021  00E83A  3631               	rlcf	___ftadd@f2,f,c
  6022  00E83C  3632               	rlcf	___ftadd@f2+1,f,c
  6023  00E83E  3633               	rlcf	___ftadd@f2+2,f,c
  6024  00E840  0638               	decf	___ftadd@exp2,f,c
  6025  00E842  5039               	movf	___ftadd@exp1,w,c
  6026  00E844  1838               	xorwf	___ftadd@exp2,w,c
  6027  00E846  B4D8               	btfsc	status,2,c
  6028  00E848  D00D               	goto	l2161
  6029  00E84A  0637               	decf	___ftadd@sign,f,c
  6030  00E84C  C037  F034         	movff	___ftadd@sign,??___ftadd
  6031  00E850  0E07               	movlw	7
  6032  00E852  1634               	andwf	??___ftadd,f,c
  6033  00E854  B4D8               	btfsc	status,2,c
  6034  00E856  D006               	goto	l2161
  6035  00E858  D7EF               	goto	l2153
  6036  00E85A                     l2159:
  6037  00E85A  90D8               	bcf	status,0,c
  6038  00E85C  3230               	rrcf	___ftadd@f1+2,f,c
  6039  00E85E  322F               	rrcf	___ftadd@f1+1,f,c
  6040  00E860  322E               	rrcf	___ftadd@f1,f,c
  6041  00E862  2A39               	incf	___ftadd@exp1,f,c
  6042  00E864                     l2161:
  6043  00E864  5038               	movf	___ftadd@exp2,w,c
  6044  00E866  1839               	xorwf	___ftadd@exp1,w,c
  6045  00E868  B4D8               	btfsc	status,2,c
  6046  00E86A  D01F               	goto	l513
  6047  00E86C  D7F6               	goto	l2159
  6048  00E86E                     l2163:
  6049  00E86E  5039               	movf	___ftadd@exp1,w,c
  6050  00E870  5C38               	subwf	___ftadd@exp2,w,c
  6051  00E872  B0D8               	btfsc	status,0,c
  6052  00E874  D01A               	goto	l513
  6053  00E876                     l2165:
  6054  00E876  90D8               	bcf	status,0,c
  6055  00E878  362E               	rlcf	___ftadd@f1,f,c
  6056  00E87A  362F               	rlcf	___ftadd@f1+1,f,c
  6057  00E87C  3630               	rlcf	___ftadd@f1+2,f,c
  6058  00E87E  0639               	decf	___ftadd@exp1,f,c
  6059  00E880  5039               	movf	___ftadd@exp1,w,c
  6060  00E882  1838               	xorwf	___ftadd@exp2,w,c
  6061  00E884  B4D8               	btfsc	status,2,c
  6062  00E886  D00D               	goto	l2173
  6063  00E888  0637               	decf	___ftadd@sign,f,c
  6064  00E88A  C037  F034         	movff	___ftadd@sign,??___ftadd
  6065  00E88E  0E07               	movlw	7
  6066  00E890  1634               	andwf	??___ftadd,f,c
  6067  00E892  B4D8               	btfsc	status,2,c
  6068  00E894  D006               	goto	l2173
  6069  00E896  D7EF               	goto	l2165
  6070  00E898                     l2171:
  6071  00E898  90D8               	bcf	status,0,c
  6072  00E89A  3233               	rrcf	___ftadd@f2+2,f,c
  6073  00E89C  3232               	rrcf	___ftadd@f2+1,f,c
  6074  00E89E  3231               	rrcf	___ftadd@f2,f,c
  6075  00E8A0  2A38               	incf	___ftadd@exp2,f,c
  6076  00E8A2                     l2173:
  6077  00E8A2  5038               	movf	___ftadd@exp2,w,c
  6078  00E8A4  1839               	xorwf	___ftadd@exp1,w,c
  6079  00E8A6  A4D8               	btfss	status,2,c
  6080  00E8A8  D7F7               	goto	l2171
  6081  00E8AA                     l513:
  6082  00E8AA  AE37               	btfss	___ftadd@sign,7,c
  6083  00E8AC  D00C               	goto	l522
  6084  00E8AE  0EFF               	movlw	255
  6085  00E8B0  1A2E               	xorwf	___ftadd@f1,f,c
  6086  00E8B2  0EFF               	movlw	255
  6087  00E8B4  1A2F               	xorwf	___ftadd@f1+1,f,c
  6088  00E8B6  0EFF               	movlw	255
  6089  00E8B8  1A30               	xorwf	___ftadd@f1+2,f,c
  6090  00E8BA  0E01               	movlw	1
  6091  00E8BC  262E               	addwf	___ftadd@f1,f,c
  6092  00E8BE  0E00               	movlw	0
  6093  00E8C0  222F               	addwfc	___ftadd@f1+1,f,c
  6094  00E8C2  0E00               	movlw	0
  6095  00E8C4  2230               	addwfc	___ftadd@f1+2,f,c
  6096  00E8C6                     l522:
  6097  00E8C6  AC37               	btfss	___ftadd@sign,6,c
  6098  00E8C8  D00C               	goto	l2179
  6099  00E8CA  0EFF               	movlw	255
  6100  00E8CC  1A31               	xorwf	___ftadd@f2,f,c
  6101  00E8CE  0EFF               	movlw	255
  6102  00E8D0  1A32               	xorwf	___ftadd@f2+1,f,c
  6103  00E8D2  0EFF               	movlw	255
  6104  00E8D4  1A33               	xorwf	___ftadd@f2+2,f,c
  6105  00E8D6  0E01               	movlw	1
  6106  00E8D8  2631               	addwf	___ftadd@f2,f,c
  6107  00E8DA  0E00               	movlw	0
  6108  00E8DC  2232               	addwfc	___ftadd@f2+1,f,c
  6109  00E8DE  0E00               	movlw	0
  6110  00E8E0  2233               	addwfc	___ftadd@f2+2,f,c
  6111  00E8E2                     l2179:
  6112  00E8E2  0E00               	movlw	0
  6113  00E8E4  6E37               	movwf	___ftadd@sign,c
  6114  00E8E6  502E               	movf	___ftadd@f1,w,c
  6115  00E8E8  2631               	addwf	___ftadd@f2,f,c
  6116  00E8EA  502F               	movf	___ftadd@f1+1,w,c
  6117  00E8EC  2232               	addwfc	___ftadd@f2+1,f,c
  6118  00E8EE  5030               	movf	___ftadd@f1+2,w,c
  6119  00E8F0  2233               	addwfc	___ftadd@f2+2,f,c
  6120  00E8F2  AE33               	btfss	___ftadd@f2+2,7,c
  6121  00E8F4  D00E               	goto	l2189
  6122  00E8F6  0EFF               	movlw	255
  6123  00E8F8  1A31               	xorwf	___ftadd@f2,f,c
  6124  00E8FA  0EFF               	movlw	255
  6125  00E8FC  1A32               	xorwf	___ftadd@f2+1,f,c
  6126  00E8FE  0EFF               	movlw	255
  6127  00E900  1A33               	xorwf	___ftadd@f2+2,f,c
  6128  00E902  0E01               	movlw	1
  6129  00E904  2631               	addwf	___ftadd@f2,f,c
  6130  00E906  0E00               	movlw	0
  6131  00E908  2232               	addwfc	___ftadd@f2+1,f,c
  6132  00E90A  0E00               	movlw	0
  6133  00E90C  2233               	addwfc	___ftadd@f2+2,f,c
  6134  00E90E  0E01               	movlw	1
  6135  00E910  6E37               	movwf	___ftadd@sign,c
  6136  00E912                     l2189:
  6137  00E912  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6138  00E916  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6139  00E91A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6140  00E91E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6141  00E922  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6142  00E926  EC4E  F071         	call	___ftpack	;wreg free
  6143  00E92A  C001  F02E         	movff	?___ftpack,?___ftadd
  6144  00E92E  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6145  00E932  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6146  00E936  0012               	return	
  6147  00E938                     __end_of___ftadd:
  6148                           	opt stack 0
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           indf0	equ	0xFEF
  6156                           postinc0	equ	0xFEE
  6157                           fsr0h	equ	0xFEA
  6158                           fsr0l	equ	0xFE9
  6159                           wreg	equ	0xFE8
  6160                           postdec1	equ	0xFE5
  6161                           plusw1	equ	0xFE3
  6162                           fsr1l	equ	0xFE1
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           plusw2	equ	0xFDB
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function ___ftpack *****************
  6171 ;; Defined at:
  6172 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  arg             3    0[COMRAM] unsigned um
  6175 ;;  exp             1    3[COMRAM] unsigned char 
  6176 ;;  sign            1    4[COMRAM] unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  3    0[COMRAM] float 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6188 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;Total ram usage:        8 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		___ftadd
  6198 ;;		___ftmul
  6199 ;;		___lltoft
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text17
  6204  00E29C                     __ptext17:
  6205                           	opt stack 0
  6206  00E29C                     ___ftpack:
  6207                           	opt stack 27
  6208                           
  6209                           ;incstack = 0
  6210  00E29C  5004               	movf	___ftpack@exp,w,c
  6211  00E29E  B4D8               	btfsc	status,2,c
  6212  00E2A0  D005               	goto	l2079
  6213  00E2A2  5001               	movf	___ftpack@arg,w,c
  6214  00E2A4  1002               	iorwf	___ftpack@arg+1,w,c
  6215  00E2A6  1003               	iorwf	___ftpack@arg+2,w,c
  6216  00E2A8  A4D8               	btfss	status,2,c
  6217  00E2AA  D00C               	goto	l2085
  6218  00E2AC                     l2079:
  6219  00E2AC  0E00               	movlw	0
  6220  00E2AE  6E01               	movwf	?___ftpack,c
  6221  00E2B0  0E00               	movlw	0
  6222  00E2B2  6E02               	movwf	?___ftpack+1,c
  6223  00E2B4  0E00               	movlw	0
  6224  00E2B6  6E03               	movwf	?___ftpack+2,c
  6225  00E2B8  0012               	return	
  6226  00E2BA                     l2083:
  6227  00E2BA  2A04               	incf	___ftpack@exp,f,c
  6228  00E2BC  90D8               	bcf	status,0,c
  6229  00E2BE  3203               	rrcf	___ftpack@arg+2,f,c
  6230  00E2C0  3202               	rrcf	___ftpack@arg+1,f,c
  6231  00E2C2  3201               	rrcf	___ftpack@arg,f,c
  6232  00E2C4                     l2085:
  6233  00E2C4  0E00               	movlw	0
  6234  00E2C6  1401               	andwf	___ftpack@arg,w,c
  6235  00E2C8  6E06               	movwf	??___ftpack& (0+255),c
  6236  00E2CA  0E00               	movlw	0
  6237  00E2CC  1402               	andwf	___ftpack@arg+1,w,c
  6238  00E2CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6239  00E2D0  0EFE               	movlw	254
  6240  00E2D2  1403               	andwf	___ftpack@arg+2,w,c
  6241  00E2D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6242  00E2D6  5006               	movf	??___ftpack,w,c
  6243  00E2D8  1007               	iorwf	??___ftpack+1,w,c
  6244  00E2DA  1008               	iorwf	??___ftpack+2,w,c
  6245  00E2DC  B4D8               	btfsc	status,2,c
  6246  00E2DE  D00C               	goto	l2091
  6247  00E2E0  D7EC               	goto	l2083
  6248  00E2E2                     l2087:
  6249  00E2E2  2A04               	incf	___ftpack@exp,f,c
  6250  00E2E4  0E01               	movlw	1
  6251  00E2E6  2601               	addwf	___ftpack@arg,f,c
  6252  00E2E8  0E00               	movlw	0
  6253  00E2EA  2202               	addwfc	___ftpack@arg+1,f,c
  6254  00E2EC  0E00               	movlw	0
  6255  00E2EE  2203               	addwfc	___ftpack@arg+2,f,c
  6256  00E2F0  90D8               	bcf	status,0,c
  6257  00E2F2  3203               	rrcf	___ftpack@arg+2,f,c
  6258  00E2F4  3202               	rrcf	___ftpack@arg+1,f,c
  6259  00E2F6  3201               	rrcf	___ftpack@arg,f,c
  6260  00E2F8                     l2091:
  6261  00E2F8  0E00               	movlw	0
  6262  00E2FA  1401               	andwf	___ftpack@arg,w,c
  6263  00E2FC  6E06               	movwf	??___ftpack& (0+255),c
  6264  00E2FE  0E00               	movlw	0
  6265  00E300  1402               	andwf	___ftpack@arg+1,w,c
  6266  00E302  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6267  00E304  0EFF               	movlw	255
  6268  00E306  1403               	andwf	___ftpack@arg+2,w,c
  6269  00E308  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6270  00E30A  5006               	movf	??___ftpack,w,c
  6271  00E30C  1007               	iorwf	??___ftpack+1,w,c
  6272  00E30E  1008               	iorwf	??___ftpack+2,w,c
  6273  00E310  B4D8               	btfsc	status,2,c
  6274  00E312  D006               	goto	l2095
  6275  00E314  D7E6               	goto	l2087
  6276  00E316                     l2093:
  6277  00E316  0604               	decf	___ftpack@exp,f,c
  6278  00E318  90D8               	bcf	status,0,c
  6279  00E31A  3601               	rlcf	___ftpack@arg,f,c
  6280  00E31C  3602               	rlcf	___ftpack@arg+1,f,c
  6281  00E31E  3603               	rlcf	___ftpack@arg+2,f,c
  6282  00E320                     l2095:
  6283  00E320  BE02               	btfsc	___ftpack@arg+1,7,c
  6284  00E322  D003               	goto	l475
  6285  00E324  0E02               	movlw	2
  6286  00E326  6004               	cpfslt	___ftpack@exp,c
  6287  00E328  D7F6               	goto	l2093
  6288  00E32A                     l475:
  6289  00E32A  A004               	btfss	___ftpack@exp,0,c
  6290  00E32C  9E02               	bcf	___ftpack@arg+1,7,c
  6291  00E32E  90D8               	bcf	status,0,c
  6292  00E330  3204               	rrcf	___ftpack@exp,f,c
  6293  00E332  5004               	movf	___ftpack@exp,w,c
  6294  00E334  1203               	iorwf	___ftpack@arg+2,f,c
  6295  00E336  5005               	movf	___ftpack@sign,w,c
  6296  00E338  A4D8               	btfss	status,2,c
  6297  00E33A  8E03               	bsf	___ftpack@arg+2,7,c
  6298  00E33C  C001  F001         	movff	___ftpack@arg,?___ftpack
  6299  00E340  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6300  00E344  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6301  00E348  0012               	return	
  6302  00E34A                     __end_of___ftpack:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           indf0	equ	0xFEF
  6311                           postinc0	equ	0xFEE
  6312                           fsr0h	equ	0xFEA
  6313                           fsr0l	equ	0xFE9
  6314                           wreg	equ	0xFE8
  6315                           postdec1	equ	0xFE5
  6316                           plusw1	equ	0xFE3
  6317                           fsr1l	equ	0xFE1
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           plusw2	equ	0xFDB
  6321                           fsr2h	equ	0xFDA
  6322                           fsr2l	equ	0xFD9
  6323                           status	equ	0xFD8
  6324                           
  6325 ;; *************** function ___ftneg *****************
  6326 ;; Defined at:
  6327 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  f1              3    0[COMRAM] float 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;		None
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  3    0[COMRAM] float 
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6341 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;Total ram usage:        3 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_printf
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text18
  6355  00DDF2                     __ptext18:
  6356                           	opt stack 0
  6357  00DDF2                     ___ftneg:
  6358                           	opt stack 29
  6359                           
  6360                           ;incstack = 0
  6361  00DDF2  5001               	movf	___ftneg@f1,w,c
  6362  00DDF4  1002               	iorwf	___ftneg@f1+1,w,c
  6363  00DDF6  1003               	iorwf	___ftneg@f1+2,w,c
  6364  00DDF8  B4D8               	btfsc	status,2,c
  6365  00DDFA  D006               	goto	l572
  6366  00DDFC  0E00               	movlw	0
  6367  00DDFE  1A01               	xorwf	___ftneg@f1,f,c
  6368  00DE00  0E00               	movlw	0
  6369  00DE02  1A02               	xorwf	___ftneg@f1+1,f,c
  6370  00DE04  0E80               	movlw	128
  6371  00DE06  1A03               	xorwf	___ftneg@f1+2,f,c
  6372  00DE08                     l572:
  6373  00DE08  C001  F001         	movff	___ftneg@f1,?___ftneg
  6374  00DE0C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6375  00DE10  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6376  00DE14  0012               	return		;funcret
  6377  00DE16                     __end_of___ftneg:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodh	equ	0xFF4
  6384                           prodl	equ	0xFF3
  6385                           indf0	equ	0xFEF
  6386                           postinc0	equ	0xFEE
  6387                           fsr0h	equ	0xFEA
  6388                           fsr0l	equ	0xFE9
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           plusw1	equ	0xFE3
  6392                           fsr1l	equ	0xFE1
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           plusw2	equ	0xFDB
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function ___ftge *****************
  6401 ;; Defined at:
  6402 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  ff1             3    0[COMRAM] float 
  6405 ;;  ff2             3    3[COMRAM] float 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;		None               void
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6417 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;Total ram usage:        9 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_printf
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text19
  6431  00E20C                     __ptext19:
  6432                           	opt stack 0
  6433  00E20C                     ___ftge:
  6434                           	opt stack 29
  6435                           
  6436                           ;incstack = 0
  6437  00E20C  AE03               	btfss	___ftge@ff1+2,7,c
  6438  00E20E  D016               	goto	l2527
  6439  00E210  C001  F007         	movff	___ftge@ff1,??___ftge
  6440  00E214  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6441  00E218  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6442  00E21C  1E07               	comf	??___ftge,f,c
  6443  00E21E  1E08               	comf	??___ftge+1,f,c
  6444  00E220  1E09               	comf	??___ftge+2,f,c
  6445  00E222  2A07               	incf	??___ftge,f,c
  6446  00E224  0E00               	movlw	0
  6447  00E226  2208               	addwfc	??___ftge+1,f,c
  6448  00E228  2209               	addwfc	??___ftge+2,f,c
  6449  00E22A  0E00               	movlw	0
  6450  00E22C  2407               	addwf	??___ftge,w,c
  6451  00E22E  6E01               	movwf	___ftge@ff1,c
  6452  00E230  0E00               	movlw	0
  6453  00E232  2008               	addwfc	??___ftge+1,w,c
  6454  00E234  6E02               	movwf	___ftge@ff1+1,c
  6455  00E236  0E80               	movlw	128
  6456  00E238  2009               	addwfc	??___ftge+2,w,c
  6457  00E23A  6E03               	movwf	___ftge@ff1+2,c
  6458  00E23C                     l2527:
  6459  00E23C  AE06               	btfss	___ftge@ff2+2,7,c
  6460  00E23E  D016               	goto	l2531
  6461  00E240  C004  F007         	movff	___ftge@ff2,??___ftge
  6462  00E244  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6463  00E248  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6464  00E24C  1E07               	comf	??___ftge,f,c
  6465  00E24E  1E08               	comf	??___ftge+1,f,c
  6466  00E250  1E09               	comf	??___ftge+2,f,c
  6467  00E252  2A07               	incf	??___ftge,f,c
  6468  00E254  0E00               	movlw	0
  6469  00E256  2208               	addwfc	??___ftge+1,f,c
  6470  00E258  2209               	addwfc	??___ftge+2,f,c
  6471  00E25A  0E00               	movlw	0
  6472  00E25C  2407               	addwf	??___ftge,w,c
  6473  00E25E  6E04               	movwf	___ftge@ff2,c
  6474  00E260  0E00               	movlw	0
  6475  00E262  2008               	addwfc	??___ftge+1,w,c
  6476  00E264  6E05               	movwf	___ftge@ff2+1,c
  6477  00E266  0E80               	movlw	128
  6478  00E268  2009               	addwfc	??___ftge+2,w,c
  6479  00E26A  6E06               	movwf	___ftge@ff2+2,c
  6480  00E26C                     l2531:
  6481  00E26C  0E00               	movlw	0
  6482  00E26E  1A01               	xorwf	___ftge@ff1,f,c
  6483  00E270  0E00               	movlw	0
  6484  00E272  1A02               	xorwf	___ftge@ff1+1,f,c
  6485  00E274  0E80               	movlw	128
  6486  00E276  1A03               	xorwf	___ftge@ff1+2,f,c
  6487  00E278  0E00               	movlw	0
  6488  00E27A  1A04               	xorwf	___ftge@ff2,f,c
  6489  00E27C  0E00               	movlw	0
  6490  00E27E  1A05               	xorwf	___ftge@ff2+1,f,c
  6491  00E280  0E80               	movlw	128
  6492  00E282  1A06               	xorwf	___ftge@ff2+2,f,c
  6493  00E284  5004               	movf	___ftge@ff2,w,c
  6494  00E286  5C01               	subwf	___ftge@ff1,w,c
  6495  00E288  5005               	movf	___ftge@ff2+1,w,c
  6496  00E28A  5802               	subwfb	___ftge@ff1+1,w,c
  6497  00E28C  5006               	movf	___ftge@ff2+2,w,c
  6498  00E28E  5803               	subwfb	___ftge@ff1+2,w,c
  6499  00E290  B0D8               	btfsc	status,0,c
  6500  00E292  D002               	goto	l2537
  6501  00E294  90D8               	bcf	status,0,c
  6502  00E296  0012               	return	
  6503  00E298                     l2537:
  6504  00E298  80D8               	bsf	status,0,c
  6505  00E29A  0012               	return	
  6506  00E29C                     __end_of___ftge:
  6507                           	opt stack 0
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           indf0	equ	0xFEF
  6515                           postinc0	equ	0xFEE
  6516                           fsr0h	equ	0xFEA
  6517                           fsr0l	equ	0xFE9
  6518                           wreg	equ	0xFE8
  6519                           postdec1	equ	0xFE5
  6520                           plusw1	equ	0xFE3
  6521                           fsr1l	equ	0xFE1
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           plusw2	equ	0xFDB
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _lcd_shift_display *****************
  6530 ;; Defined at:
  6531 ;;		line 114 in file "lcd.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  numChars        1    wreg     unsigned char 
  6534 ;;  direction       1    3[COMRAM] unsigned char 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  numChars        1    4[COMRAM] unsigned char 
  6537 ;;  n               1    5[COMRAM] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, status,2, status,0, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6547 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;Total ram usage:        3 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    2
  6554 ;; This function calls:
  6555 ;;		_lcdInst
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text20
  6562  00DDD6                     __ptext20:
  6563                           	opt stack 0
  6564  00DDD6                     _lcd_shift_display:
  6565                           	opt stack 28
  6566                           
  6567                           ;incstack = 0
  6568                           ;lcd_shift_display@numChars stored from wreg
  6569  00DDD6  6E05               	movwf	lcd_shift_display@numChars,c
  6570                           
  6571                           ;lcd.c: 126: for(unsigned char n = numChars; n > 0; n--){
  6572  00DDD8  C005  F006         	movff	lcd_shift_display@numChars,lcd_shift_display@n
  6573  00DDDC                     l2887:
  6574  00DDDC  5006               	movf	lcd_shift_display@n,w,c
  6575  00DDDE  B4D8               	btfsc	status,2,c
  6576  00DDE0  0012               	return	
  6577                           
  6578                           ;lcd.c: 129: lcdInst((unsigned char)(0x18 | (direction << 2)));
  6579  00DDE2  4404               	rlncf	lcd_shift_display@direction,w,c
  6580  00DDE4  46E8               	rlncf	wreg,f,c
  6581  00DDE6  0BFC               	andlw	252
  6582  00DDE8  0918               	iorlw	24
  6583  00DDEA  ECC9  F06E         	call	_lcdInst
  6584  00DDEE  0606               	decf	lcd_shift_display@n,f,c
  6585  00DDF0  D7F5               	goto	l2887
  6586  00DDF2                     __end_of_lcd_shift_display:
  6587                           	opt stack 0
  6588                           tblptru	equ	0xFF8
  6589                           tblptrh	equ	0xFF7
  6590                           tblptrl	equ	0xFF6
  6591                           tablat	equ	0xFF5
  6592                           prodh	equ	0xFF4
  6593                           prodl	equ	0xFF3
  6594                           indf0	equ	0xFEF
  6595                           postinc0	equ	0xFEE
  6596                           fsr0h	equ	0xFEA
  6597                           fsr0l	equ	0xFE9
  6598                           wreg	equ	0xFE8
  6599                           postdec1	equ	0xFE5
  6600                           plusw1	equ	0xFE3
  6601                           fsr1l	equ	0xFE1
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           plusw2	equ	0xFDB
  6605                           fsr2h	equ	0xFDA
  6606                           fsr2l	equ	0xFD9
  6607                           status	equ	0xFD8
  6608                           
  6609 ;; *************** function _lcd_set_cursor *****************
  6610 ;; Defined at:
  6611 ;;		line 80 in file "lcd.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  x               1    wreg     unsigned char 
  6614 ;;  y               1    6[COMRAM] unsigned char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  x               1    8[COMRAM] unsigned char 
  6617 ;;  i               1    9[COMRAM] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:        4 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    3
  6634 ;; This function calls:
  6635 ;;		_lcdInst
  6636 ;;		_lcd_shift_cursor
  6637 ;; This function is called by:
  6638 ;;		_main
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text21
  6643  00DE90                     __ptext21:
  6644                           	opt stack 0
  6645  00DE90                     _lcd_set_cursor:
  6646                           	opt stack 27
  6647                           
  6648                           ;incstack = 0
  6649                           ;lcd_set_cursor@x stored from wreg
  6650  00DE90  6E09               	movwf	lcd_set_cursor@x,c
  6651                           
  6652                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6653  00DE92  0E80               	movlw	128
  6654  00DE94  ECC9  F06E         	call	_lcdInst
  6655  00DE98  0E41               	movlw	65
  6656  00DE9A  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  6657  00DE9C  0EEE               	movlw	238
  6658  00DE9E                     u3287:
  6659  00DE9E  2EE8               	decfsz	wreg,f,c
  6660  00DEA0  D7FE               	bra	u3287
  6661  00DEA2  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  6662  00DEA4  D7FC               	bra	u3287
  6663  00DEA6  D000               	nop2	
  6664                           
  6665                           ;lcd.c: 91: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  6666  00DEA8  0E00               	movlw	0
  6667  00DEAA  6E0A               	movwf	lcd_set_cursor@i,c
  6668  00DEAC  D004               	goto	l2881
  6669  00DEAE                     l2877:
  6670  00DEAE  0EC0               	movlw	192
  6671  00DEB0  ECC9  F06E         	call	_lcdInst
  6672  00DEB4  2A0A               	incf	lcd_set_cursor@i,f,c
  6673  00DEB6                     l2881:
  6674  00DEB6  5007               	movf	lcd_set_cursor@y,w,c
  6675  00DEB8  5C0A               	subwf	lcd_set_cursor@i,w,c
  6676  00DEBA  A0D8               	btfss	status,0,c
  6677  00DEBC  D7F8               	goto	l2877
  6678                           
  6679                           ;lcd.c: 92: lcd_shift_cursor(x, 1);
  6680  00DEBE  0E01               	movlw	1
  6681  00DEC0  6E04               	movwf	lcd_shift_cursor@direction,c
  6682  00DEC2  5009               	movf	lcd_set_cursor@x,w,c
  6683  00DEC4  ECDD  F06E         	call	_lcd_shift_cursor
  6684  00DEC8  0012               	return		;funcret
  6685  00DECA                     __end_of_lcd_set_cursor:
  6686                           	opt stack 0
  6687                           tblptru	equ	0xFF8
  6688                           tblptrh	equ	0xFF7
  6689                           tblptrl	equ	0xFF6
  6690                           tablat	equ	0xFF5
  6691                           prodh	equ	0xFF4
  6692                           prodl	equ	0xFF3
  6693                           indf0	equ	0xFEF
  6694                           postinc0	equ	0xFEE
  6695                           fsr0h	equ	0xFEA
  6696                           fsr0l	equ	0xFE9
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           plusw1	equ	0xFE3
  6700                           fsr1l	equ	0xFE1
  6701                           postinc2	equ	0xFDE
  6702                           postdec2	equ	0xFDD
  6703                           plusw2	equ	0xFDB
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function _lcd_shift_cursor *****************
  6709 ;; Defined at:
  6710 ;;		line 95 in file "lcd.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;  numChars        1    wreg     unsigned char 
  6713 ;;  direction       1    3[COMRAM] unsigned char 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  numChars        1    4[COMRAM] unsigned char 
  6716 ;;  n               1    5[COMRAM] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, status,0, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6726 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;Total ram usage:        3 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    2
  6733 ;; This function calls:
  6734 ;;		_lcdInst
  6735 ;; This function is called by:
  6736 ;;		_lcd_set_cursor
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text22
  6741  00DDBA                     __ptext22:
  6742                           	opt stack 0
  6743  00DDBA                     _lcd_shift_cursor:
  6744                           	opt stack 27
  6745                           
  6746                           ;incstack = 0
  6747                           ;lcd_shift_cursor@numChars stored from wreg
  6748  00DDBA  6E05               	movwf	lcd_shift_cursor@numChars,c
  6749                           
  6750                           ;lcd.c: 107: for(unsigned char n = numChars; n > 0; n--){
  6751  00DDBC  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  6752  00DDC0                     l2329:
  6753  00DDC0  5006               	movf	lcd_shift_cursor@n,w,c
  6754  00DDC2  B4D8               	btfsc	status,2,c
  6755  00DDC4  0012               	return	
  6756                           
  6757                           ;lcd.c: 110: lcdInst((unsigned char)(0x10 | (direction << 2)));
  6758  00DDC6  4404               	rlncf	lcd_shift_cursor@direction,w,c
  6759  00DDC8  46E8               	rlncf	wreg,f,c
  6760  00DDCA  0BFC               	andlw	252
  6761  00DDCC  0910               	iorlw	16
  6762  00DDCE  ECC9  F06E         	call	_lcdInst
  6763  00DDD2  0606               	decf	lcd_shift_cursor@n,f,c
  6764  00DDD4  D7F5               	goto	l2329
  6765  00DDD6                     __end_of_lcd_shift_cursor:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodh	equ	0xFF4
  6772                           prodl	equ	0xFF3
  6773                           indf0	equ	0xFEF
  6774                           postinc0	equ	0xFEE
  6775                           fsr0h	equ	0xFEA
  6776                           fsr0l	equ	0xFE9
  6777                           wreg	equ	0xFE8
  6778                           postdec1	equ	0xFE5
  6779                           plusw1	equ	0xFE3
  6780                           fsr1l	equ	0xFE1
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           plusw2	equ	0xFDB
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           
  6788 ;; *************** function _initLCD *****************
  6789 ;; Defined at:
  6790 ;;		line 60 in file "lcd.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;		None
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;Total ram usage:        1 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    2
  6811 ;; This function calls:
  6812 ;;		_lcdInst
  6813 ;; This function is called by:
  6814 ;;		_main
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text23
  6819  00DF0A                     __ptext23:
  6820                           	opt stack 0
  6821  00DF0A                     _initLCD:
  6822                           	opt stack 28
  6823                           
  6824                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  6825                           
  6826                           ;incstack = 0
  6827  00DF0A  0EC3               	movlw	195
  6828  00DF0C  6E04               	movwf	??_initLCD& (0+255),c
  6829  00DF0E  0ECD               	movlw	205
  6830  00DF10                     u3297:
  6831  00DF10  2EE8               	decfsz	wreg,f,c
  6832  00DF12  D7FE               	bra	u3297
  6833  00DF14  2E04               	decfsz	??_initLCD& (0+255),f,c
  6834  00DF16  D7FC               	bra	u3297
  6835  00DF18  F000               	nop	
  6836                           
  6837                           ;lcd.c: 69: lcdInst(0b00110011);
  6838  00DF1A  0E33               	movlw	51
  6839  00DF1C  ECC9  F06E         	call	_lcdInst
  6840                           
  6841                           ;lcd.c: 70: lcdInst(0b00110010);
  6842  00DF20  0E32               	movlw	50
  6843  00DF22  ECC9  F06E         	call	_lcdInst
  6844                           
  6845                           ;lcd.c: 71: lcdInst(0b00101000);
  6846  00DF26  0E28               	movlw	40
  6847  00DF28  ECC9  F06E         	call	_lcdInst
  6848                           
  6849                           ;lcd.c: 72: lcdInst(0b00001111);
  6850  00DF2C  0E0F               	movlw	15
  6851  00DF2E  ECC9  F06E         	call	_lcdInst
  6852                           
  6853                           ;lcd.c: 73: lcdInst(0b00000110);
  6854  00DF32  0E06               	movlw	6
  6855  00DF34  ECC9  F06E         	call	_lcdInst
  6856                           
  6857                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6858  00DF38  0E01               	movlw	1
  6859  00DF3A  ECC9  F06E         	call	_lcdInst
  6860  00DF3E  0EC3               	movlw	195
  6861  00DF40  6E04               	movwf	??_initLCD& (0+255),c
  6862  00DF42  0ECD               	movlw	205
  6863  00DF44                     u3307:
  6864  00DF44  2EE8               	decfsz	wreg,f,c
  6865  00DF46  D7FE               	bra	u3307
  6866  00DF48  2E04               	decfsz	??_initLCD& (0+255),f,c
  6867  00DF4A  D7FC               	bra	u3307
  6868  00DF4C  F000               	nop	
  6869                           
  6870                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6871  00DF4E  0E0F               	movlw	15
  6872  00DF50  ECC9  F06E         	call	_lcdInst
  6873  00DF54  0012               	return		;funcret
  6874  00DF56                     __end_of_initLCD:
  6875                           	opt stack 0
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           indf0	equ	0xFEF
  6883                           postinc0	equ	0xFEE
  6884                           fsr0h	equ	0xFEA
  6885                           fsr0l	equ	0xFE9
  6886                           wreg	equ	0xFE8
  6887                           postdec1	equ	0xFE5
  6888                           plusw1	equ	0xFE3
  6889                           fsr1l	equ	0xFE1
  6890                           postinc2	equ	0xFDE
  6891                           postdec2	equ	0xFDD
  6892                           plusw2	equ	0xFDB
  6893                           fsr2h	equ	0xFDA
  6894                           fsr2l	equ	0xFD9
  6895                           status	equ	0xFD8
  6896                           
  6897 ;; *************** function _lcdInst *****************
  6898 ;; Defined at:
  6899 ;;		line 11 in file "lcd.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  data            1    wreg     unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  data            1    2[COMRAM] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  1    wreg      void 
  6906 ;; Registers used:
  6907 ;;		wreg, status,2, status,0, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;Total ram usage:        1 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    1
  6920 ;; This function calls:
  6921 ;;		_lcdNibble
  6922 ;; This function is called by:
  6923 ;;		_main
  6924 ;;		_initLCD
  6925 ;;		_lcd_set_cursor
  6926 ;;		_lcd_shift_cursor
  6927 ;;		_lcd_shift_display
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text24
  6932  00DD92                     __ptext24:
  6933                           	opt stack 0
  6934  00DD92                     _lcdInst:
  6935                           	opt stack 28
  6936                           
  6937                           ;incstack = 0
  6938                           ;lcdInst@data stored from wreg
  6939  00DD92  6E03               	movwf	lcdInst@data,c
  6940                           
  6941                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6942  00DD94  948C               	bcf	3980,2,c	;volatile
  6943                           
  6944                           ;lcd.c: 20: lcdNibble(data);
  6945  00DD96  5003               	movf	lcdInst@data,w,c
  6946  00DD98  EC44  F070         	call	_lcdNibble
  6947                           
  6948                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6949  00DD9C  0EC8               	movlw	200
  6950  00DD9E                     u3317:
  6951  00DD9E  D000               	nop2	
  6952  00DDA0  2EE8               	decfsz	wreg,f,c
  6953  00DDA2  D7FD               	bra	u3317
  6954  00DDA4  0012               	return		;funcret
  6955  00DDA6                     __end_of_lcdInst:
  6956                           	opt stack 0
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           indf0	equ	0xFEF
  6964                           postinc0	equ	0xFEE
  6965                           fsr0h	equ	0xFEA
  6966                           fsr0l	equ	0xFE9
  6967                           wreg	equ	0xFE8
  6968                           postdec1	equ	0xFE5
  6969                           plusw1	equ	0xFE3
  6970                           fsr1l	equ	0xFE1
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           plusw2	equ	0xFDB
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _lcdNibble *****************
  6979 ;; Defined at:
  6980 ;;		line 37 in file "lcd.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  data            1    wreg     unsigned char 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  data            1    1[COMRAM] unsigned char 
  6985 ;;  temp            1    0[COMRAM] unsigned char 
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, status,0
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        2 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_lcdInst
  7005 ;;		_putch
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text25
  7010  00E088                     __ptext25:
  7011                           	opt stack 0
  7012  00E088                     _lcdNibble:
  7013                           	opt stack 29
  7014                           
  7015                           ;incstack = 0
  7016                           ;lcdNibble@data stored from wreg
  7017  00E088  6E02               	movwf	lcdNibble@data,c
  7018                           
  7019                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  7020  00E08A  5002               	movf	lcdNibble@data,w,c
  7021  00E08C  0BF0               	andlw	240
  7022  00E08E  6E01               	movwf	lcdNibble@temp,c
  7023                           
  7024                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  7025  00E090  508C               	movf	3980,w,c	;volatile
  7026  00E092  0B0F               	andlw	15
  7027  00E094  6E8C               	movwf	3980,c	;volatile
  7028                           
  7029                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  7030  00E096  5001               	movf	lcdNibble@temp,w,c
  7031  00E098  108C               	iorwf	3980,w,c	;volatile
  7032  00E09A  6E8C               	movwf	3980,c	;volatile
  7033                           
  7034                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7035  00E09C  0E00               	movlw	0
  7036  00E09E  BEF2               	btfsc	intcon,7,c	;volatile
  7037  00E0A0  0E01               	movlw	1
  7038  00E0A2  6E7C               	movwf	lcd@LCDinterruptState,c
  7039  00E0A4  9EF2               	bcf	intcon,7,c	;volatile
  7040  00E0A6  868C               	bsf	3980,3,c	;volatile
  7041  00E0A8  0E53               	movlw	83
  7042  00E0AA                     u3327:
  7043  00E0AA  2EE8               	decfsz	wreg,f,c
  7044  00E0AC  D7FE               	bra	u3327
  7045  00E0AE  F000               	nop	
  7046  00E0B0  968C               	bcf	3980,3,c	;volatile
  7047  00E0B2  0EC8               	movlw	200
  7048  00E0B4                     u3337:
  7049  00E0B4  D000               	nop2	
  7050  00E0B6  2EE8               	decfsz	wreg,f,c
  7051  00E0B8  D7FD               	bra	u3337
  7052  00E0BA  B07C               	btfsc	lcd@LCDinterruptState,0,c
  7053  00E0BC  D002               	bra	u1465
  7054  00E0BE  9EF2               	bcf	intcon,7,c	;volatile
  7055  00E0C0  D001               	bra	u1466
  7056  00E0C2                     u1465:
  7057  00E0C2  8EF2               	bsf	intcon,7,c	;volatile
  7058  00E0C4                     u1466:
  7059                           
  7060                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  7061  00E0C4  3802               	swapf	lcdNibble@data,w,c
  7062  00E0C6  0BF0               	andlw	240
  7063  00E0C8  6E02               	movwf	lcdNibble@data,c
  7064                           
  7065                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  7066  00E0CA  5002               	movf	lcdNibble@data,w,c
  7067  00E0CC  0BF0               	andlw	240
  7068  00E0CE  6E01               	movwf	lcdNibble@temp,c
  7069                           
  7070                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  7071  00E0D0  508C               	movf	3980,w,c	;volatile
  7072  00E0D2  0B0F               	andlw	15
  7073  00E0D4  6E8C               	movwf	3980,c	;volatile
  7074                           
  7075                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  7076  00E0D6  5001               	movf	lcdNibble@temp,w,c
  7077  00E0D8  108C               	iorwf	3980,w,c	;volatile
  7078  00E0DA  6E8C               	movwf	3980,c	;volatile
  7079                           
  7080                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7081  00E0DC  0E00               	movlw	0
  7082  00E0DE  BEF2               	btfsc	intcon,7,c	;volatile
  7083  00E0E0  0E01               	movlw	1
  7084  00E0E2  6E7C               	movwf	lcd@LCDinterruptState,c
  7085  00E0E4  9EF2               	bcf	intcon,7,c	;volatile
  7086  00E0E6  868C               	bsf	3980,3,c	;volatile
  7087  00E0E8  0E53               	movlw	83
  7088  00E0EA                     u3347:
  7089  00E0EA  2EE8               	decfsz	wreg,f,c
  7090  00E0EC  D7FE               	bra	u3347
  7091  00E0EE  F000               	nop	
  7092  00E0F0  968C               	bcf	3980,3,c	;volatile
  7093  00E0F2  0EC8               	movlw	200
  7094  00E0F4                     u3357:
  7095  00E0F4  D000               	nop2	
  7096  00E0F6  2EE8               	decfsz	wreg,f,c
  7097  00E0F8  D7FD               	bra	u3357
  7098  00E0FA  B07C               	btfsc	lcd@LCDinterruptState,0,c
  7099  00E0FC  D002               	bra	u1475
  7100  00E0FE  9EF2               	bcf	intcon,7,c	;volatile
  7101  00E100  D001               	bra	u1476
  7102  00E102                     u1475:
  7103  00E102  8EF2               	bsf	intcon,7,c	;volatile
  7104  00E104                     u1476:
  7105  00E104  0012               	return		;funcret
  7106  00E106                     __end_of_lcdNibble:
  7107                           	opt stack 0
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           intcon	equ	0xFF2
  7115                           indf0	equ	0xFEF
  7116                           postinc0	equ	0xFEE
  7117                           fsr0h	equ	0xFEA
  7118                           fsr0l	equ	0xFE9
  7119                           wreg	equ	0xFE8
  7120                           postdec1	equ	0xFE5
  7121                           plusw1	equ	0xFE3
  7122                           fsr1l	equ	0xFE1
  7123                           postinc2	equ	0xFDE
  7124                           postdec2	equ	0xFDD
  7125                           plusw2	equ	0xFDB
  7126                           fsr2h	equ	0xFDA
  7127                           fsr2l	equ	0xFD9
  7128                           status	equ	0xFD8
  7129                           
  7130 ;; *************** function ___lbmod *****************
  7131 ;; Defined at:
  7132 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbmod.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  dividend        1    wreg     unsigned char 
  7135 ;;  divisor         1    0[COMRAM] unsigned char 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;  dividend        1    1[COMRAM] unsigned char 
  7138 ;;  rem             1    3[COMRAM] unsigned char 
  7139 ;;  counter         1    2[COMRAM] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      unsigned char 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7149 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;Total ram usage:        4 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_main
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           	psect	text26
  7163  00DE3C                     __ptext26:
  7164                           	opt stack 0
  7165  00DE3C                     ___lbmod:
  7166                           	opt stack 30
  7167                           
  7168                           ;incstack = 0
  7169                           ;___lbmod@dividend stored from wreg
  7170  00DE3C  6E02               	movwf	___lbmod@dividend,c
  7171  00DE3E  0E08               	movlw	8
  7172  00DE40  6E03               	movwf	___lbmod@counter,c
  7173  00DE42  0E00               	movlw	0
  7174  00DE44  6E04               	movwf	___lbmod@rem,c
  7175  00DE46                     l2899:
  7176  00DE46  90D8               	bcf	status,0,c
  7177  00DE48  3402               	rlcf	___lbmod@dividend,w,c
  7178  00DE4A  3404               	rlcf	___lbmod@rem,w,c
  7179  00DE4C  6E04               	movwf	___lbmod@rem,c
  7180  00DE4E  90D8               	bcf	status,0,c
  7181  00DE50  3602               	rlcf	___lbmod@dividend,f,c
  7182  00DE52  5001               	movf	___lbmod@divisor,w,c
  7183  00DE54  5C04               	subwf	___lbmod@rem,w,c
  7184  00DE56  A0D8               	btfss	status,0,c
  7185  00DE58  D002               	goto	l2907
  7186  00DE5A  5001               	movf	___lbmod@divisor,w,c
  7187  00DE5C  5E04               	subwf	___lbmod@rem,f,c
  7188  00DE5E                     l2907:
  7189  00DE5E  2E03               	decfsz	___lbmod@counter,f,c
  7190  00DE60  D7F2               	goto	l2899
  7191  00DE62  5004               	movf	___lbmod@rem,w,c
  7192  00DE64  0012               	return	
  7193  00DE66                     __end_of___lbmod:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           indf0	equ	0xFEF
  7203                           postinc0	equ	0xFEE
  7204                           fsr0h	equ	0xFEA
  7205                           fsr0l	equ	0xFE9
  7206                           wreg	equ	0xFE8
  7207                           postdec1	equ	0xFE5
  7208                           plusw1	equ	0xFE3
  7209                           fsr1l	equ	0xFE1
  7210                           postinc2	equ	0xFDE
  7211                           postdec2	equ	0xFDD
  7212                           plusw2	equ	0xFDB
  7213                           fsr2h	equ	0xFDA
  7214                           fsr2l	equ	0xFD9
  7215                           status	equ	0xFD8
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           indf0	equ	0xFEF
  7224                           postinc0	equ	0xFEE
  7225                           fsr0h	equ	0xFEA
  7226                           fsr0l	equ	0xFE9
  7227                           wreg	equ	0xFE8
  7228                           postdec1	equ	0xFE5
  7229                           plusw1	equ	0xFE3
  7230                           fsr1l	equ	0xFE1
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           plusw2	equ	0xFDB
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238                           	psect	rparam
  7239  0000                     tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           indf0	equ	0xFEF
  7247                           postinc0	equ	0xFEE
  7248                           fsr0h	equ	0xFEA
  7249                           fsr0l	equ	0xFE9
  7250                           wreg	equ	0xFE8
  7251                           postdec1	equ	0xFE5
  7252                           plusw1	equ	0xFE3
  7253                           fsr1l	equ	0xFE1
  7254                           postinc2	equ	0xFDE
  7255                           postdec2	equ	0xFDD
  7256                           plusw2	equ	0xFDB
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8


Data Sizes:
    Strings     251
    Constant    124
    Data        7
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    116     125
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[8]), STR_20(CODE[15]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[14]), STR_13(CODE[8]), STR_12(CODE[11]), STR_11(CODE[8]), 
		 -> STR_10(CODE[11]), STR_9(CODE[11]), STR_8(CODE[17]), STR_7(CODE[11]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), main@arr(COMRAM[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_shift_display->_lcdInst
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   55230
                                            100 COMRAM    16    16      0
                            ___awmod
                            ___lbmod
                            _initLCD
                            _lcdInst
                     _lcd_set_cursor
                  _lcd_shift_display
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    36      6   50610
                                             63 COMRAM    37    31      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11875
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11677
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5007
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2572
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4042
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3697
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_shift_display                                    3     2      1     377
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       4     3      1     960
                                              6 COMRAM     4     3      1
                            ___lbmod (ARG)
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     387
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   ___lbmod
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _lcd_set_cursor
     ___lbmod (ARG)
     _lcdInst (ARG)
       _lcdNibble
     _lcd_shift_cursor (ARG)
       _lcdInst
         _lcdNibble
   _lcd_shift_display
     _lcdInst
       _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _putch
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     74      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7D      34        0.0%
DATA                 0      0      7D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Sep 13 23:15:45 2017

               __CFG_CPD$ON 000000                ___awdiv@sign 000C         ___wmul@multiplicand 0011  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037                         l209 FB60  
                       l218 FD2C                         l181 FCCC                         l502 E7FA  
                       l513 E8AA                         l522 E8C6                         l443 E648  
                       l540 E6EC                         l541 E714                         l617 E176  
                       l475 E32A                         l627 E006                         l547 E77A  
                       l572 DE08                         l498 E7D0                __CFG_CPB$OFF 000000  
              ___awmod@sign 0006                         wreg 000FE8             ?_lcd_set_cursor 0007  
              __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000                        l2131 E7DE  
                      l2301 E046                        l2205 E48E                        l2303 E04E  
                      l2223 E4D0                        l3103 F50E                        l2161 E864  
                      l2153 E838                        l2137 E808                        l2305 E052  
                      l2313 E070                        l2233 E4F8                        l2091 E2F8  
                      l2083 E2BA                        l2171 E898                        l2163 E86E  
                      l2411 E6B2                        l2219 E4C0                        l2093 E316  
                      l2085 E2C4                        l2173 E8A2                        l2165 E876  
                      l2501 E60E                        l2405 E686                        l2261 E1C2  
                      l2317 E07E                        l2309 E066                        l2229 E4E8  
                      l3133 F5F0                        l3125 F5C0                        l2095 E320  
                      l2087 E2E2                        l2079 E2AC                        l2159 E85A  
                      l2511 E636                        l2263 E1CA                        l2255 E1AC  
                      l3143 F600                        l3119 F590                        l2329 DDC0  
                      l2601 E138                        l2513 E642                        l2505 E61E  
                      l2441 E740                        l2281 E202                        l2273 E1EA  
                      l2265 E1CE                        l2249 E19C                        l3161 F664  
                      l2531 E26C                        l2179 E8E2                        l2451 E768  
                      l2371 ECE8                        l3091 F4A6                        l2189 E912  
                      l2621 DFD4                        l2461 E550                        l2453 E774  
                      l2445 E750                        l2277 E1F4                        l2293 E02C  
                      l2357 EB5C                        l2349 EA90                        l2381 EDC2  
                      l2701 F7C4                        l3149 F61C                        l2527 E23C  
                      l2519 DEE0                        l2551 E376                        l2631 DF5C  
                      l2199 E466                        l3079 F40C                        l2537 E298  
                      l2609 E168                        l2625 DFF8                        l2617 DFC4  
                      l2633 DF68                        l2481 E5B0                        l2297 E038  
                      l2377 ED98                        l2801 FB7C                        l3097 F4F4  
                      l2619 DFD0                        l2467 E56E                        l2395 EFB0  
                      l2811 FCAC                        l2731 F8EC                        l2581 E410  
                      l2573 E3EC                        l2389 EF00                        l2813 FCB6  
                      l2805 FBCC                        l2741 F95E                        l2733 F91A  
                      l2725 F8B8                        l2717 F854                        l2661 F69E  
                      l2583 E416                        l2735 F92A                        l2663 F6A8  
                      l2569 E3DC                        l2489 E5E0                        l2825 FCF0  
                      l2817 FCC2                        l2761 FA3E                        l2745 F982  
                      l2729 F8DC                        l2681 F72E                        l2665 F6AC  
                      l2657 F68E                        l2907 DE5E                        l2587 E42C  
                      l2579 E404                        l2843 FD70                        l2755 F9D6  
                      l2675 F6DA                        l2667 F6B0                        l2597 E128  
                      l2861 FDCC                        l2845 FD74                        l2773 FA7C  
                      l2685 F732                        l2925 F02E                        l2599 E134  
                      l2863 FDD8                        l2839 FD4C                        l2791 FB4A  
                      l2783 FB26                        l2759 FA3A                        l2679 F704  
                      l2687 F774                        l2881 DEB6                        l2857 FDB2  
                      l2785 FB30                        l2777 FA98                        l2867 FE5A  
                      l2795 FB64                        l2877 DEAE                        l2789 FB3C  
                      l2869 FE6A                        l2887 DDDC                        l2899 DE46  
                      STR_1 FF91                        STR_2 FF65                        STR_3 FF74  
                      STR_4 FF9E                        STR_5 FFCB                        STR_6 FFD5  
                      STR_7 FFC0                        STR_8 FF25                        STR_9 FFAA  
                      u2041 E66A                        u2061 E696                        _LATA 000F89  
                      _LATB 000F8A                        u3007 F184                        _LATC 000F8B  
                      _LATD 000F8C                        u3017 F19E                        _LATE 000F8D  
                      u2251 E35A                        u3107 F2B4                        u3027 F1B4  
                      u2420 F6FC                        u3117 F2E6                        u3037 F1E6  
                      u2270 E394                        u2430 F726                        u3207 F3FE  
                      u3127 F304                        u3047 F204                        u1465 E0C2  
                      u1561 E79C                        u3217 F4FE                        u3137 F31E  
                      u3057 F21E                        u1466 E0C4                        u1475 E102  
                      u3307 DF44                        u1571 E7B0                        u2275 E38C  
                      u2427 F6F2                        u3227 F56A                        u3147 F334  
                      u3067 F234                        u1476 E104                        u3317 DD9E  
                      u2437 F71C                        u3237 F5B2                        u3157 F36C  
                      u3077 F266                        u3327 E0AA                        u3247 F5D2  
                      u3167 F386                        u3087 F284                        u2640 FB5A  
                      u2480 F7FC                        u3337 E0B4                        u3257 F654  
                      u3177 F39C                        u3097 F29E                        u3347 E0EA  
                      u1771 E44E                        u3267 F674                        u3187 F3CE  
              printf@tmpval 005D                        u3357 E0F4                        u3277 DDB2  
                      u2485 F7F2                        u3197 F3E8                        u2821 F15E  
                      u3287 DE9E                        u1791 E476                        u3297 DF10  
                      u2917 F020                        u2927 F03A                        u2937 F050  
                      u2947 F082                        u2957 F09C                        u2967 F0B2  
                      u2977 F0F8                        u2987 F112                        u2997 F128  
                      _main EFDA                ___ftpack@arg 0001                ___ftpack@exp 0004  
                      fsr0h 000FEA                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        fsr1l 000FE1                        fsr2l 000FD9  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
             __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000                ___ftmul@cntr 0022  
              ___param_bank 000000                ___ftmul@sign 0023            __end_of_LCD_LEFT FEFE  
              ___fttol@exp1 0039                ___fttol@lval 0035                       ?_main 0001  
           __end_of___awdiv E20C             __end_of___ftadd E938                       STR_10 FFB5  
                     STR_11 FFDF                       STR_12 FFB5                       STR_20 FF56  
                     STR_13 FFEF                       STR_21 FFE7                       STR_14 FF83  
                     STR_22 FF03                       STR_23 FFF7                       STR_15 FF36  
                     STR_16 FF46                       STR_17 FF14                       STR_18 FFA7  
                     STR_19 FFA7             __end_of___awmod E088             __end_of___lbmod DE66  
           __end_of___ftneg DE16             __end_of___lldiv E188             __end_of___ftmul E532  
           ___awdiv@divisor 0009             __end_of___llmod E018             __end_of___ftsub DF0A  
           __end_of___fttol E43E             ___awdiv@counter 000B                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011             __end_of_lcdInst DDA6              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initLCD DF56              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers FEAF                       _scale EBA2               ___ftpack@sign 0005  
                     _putch DDA6                       main@i 006E                       main@x 0074  
                     tablat 000FF5           _LCDinterruptState 007D                       plusw1 000FE3  
                     plusw2 000FDB                       status 000FD8              __CFG_PBADEN$ON 000000  
           __initialization DE66                __end_of_main F684           ?_lcd_shift_cursor 0004  
            __CFG_OSC$HSPLL 000000           __end_of_LCD_RIGHT FEFF                      ??_main 0065  
             ___fttol@sign1 0034          ??_lcd_shift_cursor 0005               __activetblptr 000003  
      __size_of__tdiv_to_l_ 0132                      _ADCON0 000FC2                      _ADCON1 000FC1  
          ___llmod@dividend 000E                      ?_scale 0024            ___awdiv@dividend 0007  
                    ?_putch 0001            __end_of___ftpack E34A            __end_of___lltoft DFB2  
            __CFG_XINST$OFF 000000            __end_of__powers_ FED6                      ___ftge E20C  
                    ___wmul DE16                   ??___awdiv 000B                   ??___ftadd 0034  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___lbmod 0002  
                 ??___ftneg 0004                   ??___lldiv 0009                   ??___ftmul 001B  
                 ??___llmod 0016                   ??___ftsub 0040                   ??___fttol 002F  
                    _fround E938               main@numShifts 0073            ___awdiv@quotient 000D  
           ___awmod@divisor 0003             ___awmod@counter 0005                   ??_lcdInst 0003  
                    _printf F684       ___ftmul@f3_as_product 001F                   ??_initLCD 0004  
              __pdataCOMRAM 0075                __mediumconst FE86                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8             ___lbmod@divisor 0001  
                __accesstop 0080     __end_of__initialization DE8A             ___lbmod@counter 0003  
                ___ftadd@f1 002E                  ___ftadd@f2 0031                  ___ftge@ff1 0001  
                ___ftge@ff2 0004               ___rparam_used 000001                  ___ftneg@f1 0001  
                ___ftmul@f1 0015                  ___ftmul@f2 0018                  ___ftsub@f1 003A  
                ___ftsub@f2 003D                  ___fttol@f1 002B              __pcstackCOMRAM 0001  
                ___lltoft@c 0009               __end_of_scale EFDA           _lcd_shift_display DDD6  
             __end_of_putch DDBA          ?_lcd_shift_display 0004            ??_lcd_set_cursor 0008  
        __size_of_lcdNibble 007E                  __div_to_l_ E532         ??_lcd_shift_display 0005  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                     ??_putch 0003               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                     ?___ftge 0001   __end_of_lcd_shift_display DDF2  
                   ?___wmul 000F                     ?_fround 0024                   ?___ftpack 0001  
                   ?_printf 0040                   ?___lltoft 0009        lcd@LCDinterruptState 007C  
         __end_of_lcdNibble E106           __end_of__npowers_ FEFD                     __Hparam 0000  
                   __Lparam 0000             __size_of___ftge 0090                     ___awdiv E188  
                   ___ftadd E78C                     ___awmod E018                     ___lbmod DE3C  
                   ___ftneg DDF2                     ___lldiv E106             __size_of___wmul 0026  
                   ___ftmul E43E                     ___llmod DFB2                     ___ftsub DECA  
                   ___fttol E34A                  _fround$860 0027                  _fround$859 002A  
                   __pcinit DE66                  ??___ftpack 0006             __size_of_fround 026A  
                   __ramtop 1000                     _lcdInst DD92                  ??___lltoft 000D  
                   __ptext0 EFDA                     __ptext1 F684                     __ptext2 EBA2  
                   __ptext3 DDA6                     __ptext4 E938                     __ptext5 DE16  
                   __ptext6 E43E                     __ptext7 E018                     __ptext8 E188  
                   __ptext9 E65A             __size_of_printf 0802                     _initLCD DF0A  
               ?__div_to_l_ 0001                     _dpowers FE87            ___awmod@dividend 0001  
                 _LCD_RIGHT FEFE                     main@arr 0067   __size_of_lcd_shift_cursor 001C  
      end_of_initialization DE8A       __end_of_LCD_SIZE_HORZ FF01       __end_of_LCD_SIZE_VERT FF00  
           ___lldiv@divisor 0005             ___lldiv@counter 000D                     printf@c 0064  
                   printf@f 0040  __size_of_lcd_shift_display 001C                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
            __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004                  _printf$862 004C  
             ??__tdiv_to_l_ 0007            ___lbmod@dividend 0002                 ___lbmod@rem 0004  
 lcd_shift_cursor@direction 0004         __size_of__div_to_l_ 0128                 ___ftmul@exp 001E  
            __end_of___ftge E29C              __end_of___wmul DE3C               __pidataCOMRAM DD8B  
            __end_of_fround EBA2              __end_of_printf FE86         start_initialization DE66  
       __end_of__tdiv_to_l_ E78C             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___ftge 0007                    ??___wmul 0013            __CFG_LPT1OSC$OFF 000000  
                  ??_fround 0027                    ??_printf 0046                  fround@prec 002D  
         __size_of___ftpack 00AE           __size_of___lltoft 005C                 __pbssCOMRAM 007C  
          _lcd_shift_cursor DDBA           __CFG_CCP2MX$PORTC 000000               __pmediumconst FE86  
                 _lcdNibble E088                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___lbmod 0001                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 000E  
                  ?___ftsub 003A                   __npowers_ FED6                    ?___fttol 002B  
                  ?_lcdInst 0001                 __tdiv_to_l_ E65A                ??__div_to_l_ 0007  
                  ?_initLCD 0001   lcd_shift_display@numChars 0005                   _scale$861 0027  
            __size_of_scale 0438              __size_of_putch 0014                    _LCD_LEFT FEFD  
   __size_of_lcd_set_cursor 003A              ___wmul@product 0013                    _LATDbits 000F8C  
           lcd_set_cursor@i 000A             lcd_set_cursor@x 0009             lcd_set_cursor@y 0007  
        __end_of__div_to_l_ E65A            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
                 main@F2986 0075                   main@i_110 0072                   main@i_108 0071  
         ___wmul@multiplier 000F               lcdNibble@data 0002          lcd_shift_display@n 0006  
                printf@flag 0051               lcdNibble@temp 0001                  printf@fval 0061  
                printf@prec 0055              _LCD_HORZ_LIMIT FF02                   copy_data0 DE7A  
                  __Hrparam 0000                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
          __size_of___awdiv 0084            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___lbmod 002A            __size_of___ftneg 0024            __size_of___lldiv 0082  
          __size_of___ftmul 00F4            __size_of___llmod 0066            __size_of___ftsub 0040  
          __size_of___fttol 00F4                    ___ftpack E29C                    ___lltoft DF56  
          __size_of_lcdInst 0014            __size_of_initLCD 004C      __end_of_LCD_HORZ_LIMIT FF03  
                  _main$858 006F                    __ptext10 E532                    __ptext11 DF56  
                  __ptext20 DDD6                    __ptext12 DFB2                    __ptext21 DE90  
                  __ptext13 E106                    __ptext22 DDBA                    __ptext14 E34A  
                  __ptext23 DF0A                    __ptext15 DECA                    __ptext24 DD92  
                  __ptext16 E78C                    __ptext25 E088                    __ptext17 E29C  
                  __ptext26 DE3C                    __ptext18 DDF2                    __ptext19 E20C  
                  __powers_ FEAF              _LCD_VERT_LIMIT FF01               __size_of_main 06AA  
               ??_lcdNibble 0001    __end_of_lcd_shift_cursor DDD6                   printf@exp 0057  
                 printf@val 0059           lcd_shift_cursor@n 0006                   putch@data 0003  
                _INTCONbits 000FF2      __end_of_LCD_VERT_LIMIT FF02                    scale@scl 002A  
            _lcd_set_cursor DE90            __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A               _LCD_SIZE_HORZ FF00               _LCD_SIZE_VERT FEFF  
          ___lldiv@dividend 0001  lcd_shift_display@direction 0004                    printf@ap 0053  
                  printf@cp 004F                 lcdInst@data 0003                ?__tdiv_to_l_ 0001  
          ___lldiv@quotient 0009      __end_of_lcd_set_cursor DECA    lcd_shift_cursor@numChars 0005  
