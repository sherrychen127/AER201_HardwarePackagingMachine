

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr  8 23:53:24 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  001000                     __psmallconst:
    59                           	opt stack 0
    60  001000  00                 	db	0
    61  001001                     _VIOLET:
    62                           	opt stack 0
    63  001001  00D3               	dw	211
    64  001003  0094               	dw	148
    65  001005                     __end_of_VIOLET:
    66                           	opt stack 0
    67  001005                     _INDIGO:
    68                           	opt stack 0
    69  001005  0082               	dw	130
    70  001007  004B               	dw	75
    71  001009                     __end_of_INDIGO:
    72                           	opt stack 0
    73  001009                     _BLUE:
    74                           	opt stack 0
    75  001009  00FF               	dw	255
    76  00100B  0000               	dw	0
    77  00100D                     __end_of_BLUE:
    78                           	opt stack 0
    79  00100D                     _GREEN:
    80                           	opt stack 0
    81  00100D  FF00               	dw	65280
    82  00100F  0000               	dw	0
    83  001011                     __end_of_GREEN:
    84                           	opt stack 0
    85  001011                     _YELLOW:
    86                           	opt stack 0
    87  001011  FF00               	dw	65280
    88  001013  00FF               	dw	255
    89  001015                     __end_of_YELLOW:
    90                           	opt stack 0
    91  001015                     _ORANGE:
    92                           	opt stack 0
    93  001015  8C00               	dw	35840
    94  001017  00FF               	dw	255
    95  001019                     __end_of_ORANGE:
    96                           	opt stack 0
    97  001019                     _RED:
    98                           	opt stack 0
    99  001019  0000               	dw	0
   100  00101B  00FF               	dw	255
   101  00101D                     __end_of_RED:
   102                           	opt stack 0
   103  00101D                     _WHITE:
   104                           	opt stack 0
   105  00101D  FFFF               	dw	65535
   106  00101F  00FF               	dw	255
   107  001021                     __end_of_WHITE:
   108                           	opt stack 0
   109  001021                     _GREY:
   110                           	opt stack 0
   111  001021  8080               	dw	32896
   112  001023  0080               	dw	128
   113  001025                     __end_of_GREY:
   114                           	opt stack 0
   115  001025                     _BLACK:
   116                           	opt stack 0
   117  001025  0000               	dw	0
   118  001027  0000               	dw	0
   119  001029                     __end_of_BLACK:
   120                           	opt stack 0
   121  001029  C7                 	db	199
   122  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   123                           	opt stack 0
   124  00102A                     GLCD_PIC@INST_VMCTR1:
   125                           	opt stack 0
   126  00102A  C5                 	db	197
   127  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   128                           	opt stack 0
   129  00102B                     GLCD_PIC@INST_PWCTR5:
   130                           	opt stack 0
   131  00102B  C4                 	db	196
   132  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   133                           	opt stack 0
   134  00102C                     GLCD_PIC@INST_PWCTR4:
   135                           	opt stack 0
   136  00102C  C3                 	db	195
   137  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   138                           	opt stack 0
   139  00102D                     GLCD_PIC@INST_PWCTR3:
   140                           	opt stack 0
   141  00102D  C2                 	db	194
   142  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   143                           	opt stack 0
   144  00102E                     GLCD_PIC@INST_PWCTR2:
   145                           	opt stack 0
   146  00102E  C1                 	db	193
   147  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   148                           	opt stack 0
   149  00102F                     GLCD_PIC@INST_PWCTR1:
   150                           	opt stack 0
   151  00102F  C0                 	db	192
   152  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   153                           	opt stack 0
   154  001030                     GLCD_PIC@INST_INVCTR:
   155                           	opt stack 0
   156  001030  B4                 	db	180
   157  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   158                           	opt stack 0
   159  001031                     GLCD_PIC@INST_FRMCTR3:
   160                           	opt stack 0
   161  001031  B3                 	db	179
   162  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   163                           	opt stack 0
   164  001032                     GLCD_PIC@INST_FRMCTR2:
   165                           	opt stack 0
   166  001032  B2                 	db	178
   167  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   168                           	opt stack 0
   169  001033                     GLCD_PIC@INST_FRMCTR1:
   170                           	opt stack 0
   171  001033  B1                 	db	177
   172  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   173                           	opt stack 0
   174  001034                     GLCD_PIC@INST_COLMOD:
   175                           	opt stack 0
   176  001034  3A                 	db	58
   177  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   178                           	opt stack 0
   179  001035  39                 	db	57
   180  001036                     __end_ofGLCD_PIC@INST_IDMON:
   181                           	opt stack 0
   182  001036                     GLCD_PIC@INST_IDMOFF:
   183                           	opt stack 0
   184  001036  38                 	db	56
   185  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   186                           	opt stack 0
   187  001037                     GLCD_PIC@INST_MADCTL:
   188                           	opt stack 0
   189  001037  36                 	db	54
   190  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   191                           	opt stack 0
   192  001038  35                 	db	53
   193  001039                     __end_ofGLCD_PIC@INST_TEON:
   194                           	opt stack 0
   195  001039  34                 	db	52
   196  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   197                           	opt stack 0
   198  00103A  30                 	db	48
   199  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   200                           	opt stack 0
   201  00103B                     GLCD_PIC@INST_RAMWR:
   202                           	opt stack 0
   203  00103B  2C                 	db	44
   204  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   205                           	opt stack 0
   206  00103C                     GLCD_PIC@INST_RASET:
   207                           	opt stack 0
   208  00103C  2B                 	db	43
   209  00103D                     __end_ofGLCD_PIC@INST_RASET:
   210                           	opt stack 0
   211  00103D                     GLCD_PIC@INST_CASET:
   212                           	opt stack 0
   213  00103D  2A                 	db	42
   214  00103E                     __end_ofGLCD_PIC@INST_CASET:
   215                           	opt stack 0
   216  00103E                     GLCD_PIC@INST_DISPON:
   217                           	opt stack 0
   218  00103E  29                 	db	41
   219  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   220                           	opt stack 0
   221  00103F  28                 	db	40
   222  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   223                           	opt stack 0
   224  001040                     GLCD_PIC@INST_GAMSET:
   225                           	opt stack 0
   226  001040  26                 	db	38
   227  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   228                           	opt stack 0
   229  001041  21                 	db	33
   230  001042                     __end_ofGLCD_PIC@INST_INVON:
   231                           	opt stack 0
   232  001042                     GLCD_PIC@INST_INVOFF:
   233                           	opt stack 0
   234  001042  20                 	db	32
   235  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   236                           	opt stack 0
   237  001043                     GLCD_PIC@INST_NORON:
   238                           	opt stack 0
   239  001043  13                 	db	19
   240  001044                     __end_ofGLCD_PIC@INST_NORON:
   241                           	opt stack 0
   242  001044  12                 	db	18
   243  001045                     __end_ofGLCD_PIC@INST_PTLON:
   244                           	opt stack 0
   245  001045                     GLCD_PIC@INST_SLPOUT:
   246                           	opt stack 0
   247  001045  11                 	db	17
   248  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   249                           	opt stack 0
   250  001046  10                 	db	16
   251  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   252                           	opt stack 0
   253  001047                     GLCD_PIC@INST_SWRESET:
   254                           	opt stack 0
   255  001047  01                 	db	1
   256  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   257                           	opt stack 0
   258  001048  00                 	db	0
   259  001049                     __end_ofGLCD_PIC@INST_NOP:
   260                           	opt stack 0
   261  001049  C7                 	db	199
   262  00104A                     __end_of_INST_VMOFCTR2:
   263                           	opt stack 0
   264  00104A  C5                 	db	197
   265  00104B                     __end_of_INST_VMCTR1:
   266                           	opt stack 0
   267  00104B  C4                 	db	196
   268  00104C                     __end_of_INST_PWCTR5:
   269                           	opt stack 0
   270  00104C  C3                 	db	195
   271  00104D                     __end_of_INST_PWCTR4:
   272                           	opt stack 0
   273  00104D  C2                 	db	194
   274  00104E                     __end_of_INST_PWCTR3:
   275                           	opt stack 0
   276  00104E  C1                 	db	193
   277  00104F                     __end_of_INST_PWCTR2:
   278                           	opt stack 0
   279  00104F  C0                 	db	192
   280  001050                     __end_of_INST_PWCTR1:
   281                           	opt stack 0
   282  001050  B4                 	db	180
   283  001051                     __end_of_INST_INVCTR:
   284                           	opt stack 0
   285  001051  B3                 	db	179
   286  001052                     __end_of_INST_FRMCTR3:
   287                           	opt stack 0
   288  001052  B2                 	db	178
   289  001053                     __end_of_INST_FRMCTR2:
   290                           	opt stack 0
   291  001053  B1                 	db	177
   292  001054                     __end_of_INST_FRMCTR1:
   293                           	opt stack 0
   294  001054  3A                 	db	58
   295  001055                     __end_of_INST_COLMOD:
   296                           	opt stack 0
   297  001055  39                 	db	57
   298  001056                     __end_of_INST_IDMON:
   299                           	opt stack 0
   300  001056  38                 	db	56
   301  001057                     __end_of_INST_IDMOFF:
   302                           	opt stack 0
   303  001057  36                 	db	54
   304  001058                     __end_of_INST_MADCTL:
   305                           	opt stack 0
   306  001058  35                 	db	53
   307  001059                     __end_of_INST_TEON:
   308                           	opt stack 0
   309  001059  34                 	db	52
   310  00105A                     __end_of_INST_TEOFF:
   311                           	opt stack 0
   312  00105A  30                 	db	48
   313  00105B                     __end_of_INST_PTLAR:
   314                           	opt stack 0
   315  00105B  2C                 	db	44
   316  00105C                     __end_of_INST_RAMWR:
   317                           	opt stack 0
   318  00105C  2B                 	db	43
   319  00105D                     __end_of_INST_RASET:
   320                           	opt stack 0
   321  00105D  2A                 	db	42
   322  00105E                     __end_of_INST_CASET:
   323                           	opt stack 0
   324  00105E  29                 	db	41
   325  00105F                     __end_of_INST_DISPON:
   326                           	opt stack 0
   327  00105F  28                 	db	40
   328  001060                     __end_of_INST_DISPOFF:
   329                           	opt stack 0
   330  001060  26                 	db	38
   331  001061                     __end_of_INST_GAMSET:
   332                           	opt stack 0
   333  001061  21                 	db	33
   334  001062                     __end_of_INST_INVON:
   335                           	opt stack 0
   336  001062  20                 	db	32
   337  001063                     __end_of_INST_INVOFF:
   338                           	opt stack 0
   339  001063  13                 	db	19
   340  001064                     __end_of_INST_NORON:
   341                           	opt stack 0
   342  001064  12                 	db	18
   343  001065                     __end_of_INST_PTLON:
   344                           	opt stack 0
   345  001065  11                 	db	17
   346  001066                     __end_of_INST_SLPOUT:
   347                           	opt stack 0
   348  001066  10                 	db	16
   349  001067                     __end_of_INST_SLPIN:
   350                           	opt stack 0
   351  001067  01                 	db	1
   352  001068                     __end_of_INST_SWRESET:
   353                           	opt stack 0
   354  001068  00                 	db	0
   355  001069                     __end_of_INST_NOP:
   356                           	opt stack 0
   357  001069                     _GLCD_SIZE_VERT:
   358                           	opt stack 0
   359  001069  80                 	db	128
   360  00106A                     __end_of_GLCD_SIZE_VERT:
   361                           	opt stack 0
   362  00106A                     _GLCD_SIZE_HORZ:
   363                           	opt stack 0
   364  00106A  80                 	db	128
   365  00106B                     __end_of_GLCD_SIZE_HORZ:
   366                           	opt stack 0
   367  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   368                           	opt stack 0
   369  00106B  A0                 	db	160
   370  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   371                           	opt stack 0
   372  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   373                           	opt stack 0
   374  00106C  80                 	db	128
   375  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   376                           	opt stack 0
   377  0000                     _TRISDbits	set	3989
   378  0000                     _LATDbits	set	3980
   379  0000                     _TRISCbits	set	3988
   380  0000                     _SSPCON1	set	4038
   381  0000                     _SSPSTAT	set	4039
   382  0000                     _SSPCON1bits	set	4038
   383  0000                     _SSPSTATbits	set	4039
   384  0000                     _SSPBUF	set	4041
   385  0000                     _ADCON1	set	4033
   386  0000                     _ADCON0	set	4034
   387  0000                     _TRISE	set	3990
   388  0000                     _TRISD	set	3989
   389  0000                     _TRISC	set	3988
   390  0000                     _TRISB	set	3987
   391  0000                     _TRISA	set	3986
   392  0000                     _LATE	set	3981
   393  0000                     _LATD	set	3980
   394  0000                     _LATC	set	3979
   395  0000                     _LATB	set	3978
   396  0000                     _LATA	set	3977
   397  0000                     _SSPIF	set	31987
   398                           
   399                           ; #config settings
   400  00106D  00                 	db	0	; dummy byte at the end
   401  0000                     
   402                           	psect	cinit
   403  001758                     __pcinit:
   404                           	opt stack 0
   405  001758                     start_initialization:
   406                           	opt stack 0
   407  001758                     __initialization:
   408                           	opt stack 0
   409                           
   410                           ; Clear objects allocated to COMRAM (1 bytes)
   411  001758  6A26               	clrf	__pbssCOMRAM& (0+255),c
   412  00175A                     end_of_initialization:
   413                           	opt stack 0
   414  00175A                     __end_of__initialization:
   415                           	opt stack 0
   416  00175A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   417  00175C  6EF8               	movwf	tblptru,c
   418  00175E  0100               	movlb	0
   419  001760  EF7D  F00A         	goto	_main	;jump to C main() function
   420                           tblptru	equ	0xFF8
   421                           
   422                           	psect	bssCOMRAM
   423  000026                     __pbssCOMRAM:
   424                           	opt stack 0
   425  000026                     _MADCTLbits:
   426                           	opt stack 0
   427  000026                     	ds	1
   428                           tblptru	equ	0xFF8
   429                           
   430                           	psect	cstackCOMRAM
   431  000001                     __pcstackCOMRAM:
   432                           	opt stack 0
   433  000001                     ??_spiTransfer:
   434  000001                     ?___wmul:
   435                           	opt stack 0
   436  000001                     spiInit@divider:
   437                           	opt stack 0
   438  000001                     ___wmul@multiplier:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x0
   442  000001                     	ds	1
   443  000002                     spiTransfer@byteToTransfer:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x1
   447  000002                     	ds	1
   448  000003                     spiSend@val:
   449                           	opt stack 0
   450  000003                     ___wmul@multiplicand:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x2
   454  000003                     	ds	1
   455  000004                     glcdTransfer@cmd:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x3
   459  000004                     	ds	1
   460  000005                     ??_glcdTransfer:
   461  000005                     ___wmul@product:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x4
   465  000005                     	ds	1
   466  000006                     glcdTransfer@byte:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x5
   470  000006                     	ds	1
   471  000007                     glcdDrawRectangle@XE:
   472                           	opt stack 0
   473  000007                     glcdSetCOLMOD@numBitsPerPixel:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x6
   477  000007                     	ds	1
   478  000008                     glcdDrawRectangle@YS:
   479                           	opt stack 0
   480  000008                     glcdSetCOLMOD@rawData:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x7
   484  000008                     	ds	1
   485  000009                     glcdDrawRectangle@YE:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x8
   489  000009                     	ds	1
   490  00000A                     glcdDrawRectangle@color:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x9
   494  00000A                     	ds	4
   495  00000E                     ??_glcdDrawRectangle:
   496                           
   497                           ; 1 bytes @ 0xD
   498  00000E                     	ds	4
   499  000012                     glcdDrawRectangle@numLoops:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x11
   503  000012                     	ds	2
   504  000014                     glcdDrawRectangle@i:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x13
   508  000014                     	ds	2
   509  000016                     glcdDrawRectangle@colorData:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x15
   513  000016                     	ds	3
   514  000019                     glcdDrawRectangle@XS:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x18
   518  000019                     	ds	1
   519  00001A                     ??_initGLCD:
   520  00001A                     glcdDrawPixel@YS:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x19
   524  00001A                     	ds	1
   525  00001B                     glcdDrawPixel@color:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x1A
   529  00001B                     	ds	4
   530  00001F                     ??_glcdDrawPixel:
   531                           
   532                           ; 1 bytes @ 0x1E
   533  00001F                     	ds	1
   534  000020                     glcdDrawPixel@XS:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1F
   538  000020                     	ds	1
   539  000021                     ??_main:
   540                           
   541                           ; 1 bytes @ 0x20
   542  000021                     	ds	2
   543  000023                     main@rotation:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x22
   547  000023                     	ds	1
   548  000024                     main@x:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x23
   552  000024                     	ds	1
   553  000025                     main@y:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x24
   557  000025                     	ds	1
   558                           tblptru	equ	0xFF8
   559                           
   560 ;;
   561 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   562 ;;
   563 ;; *************** function _main *****************
   564 ;; Defined at:
   565 ;;		line 20 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  y               1   36[COMRAM] unsigned char 
   570 ;;  x               1   35[COMRAM] unsigned char 
   571 ;;  rotation        1   34[COMRAM] unsigned char 
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;Total ram usage:        5 bytes
   586 ;; Hardware stack levels required when called:    5
   587 ;; This function calls:
   588 ;;		_glcdDrawPixel
   589 ;;		_glcdDrawRectangle
   590 ;;		_initGLCD
   591 ;; This function is called by:
   592 ;;		Startup code after reset
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text0
   597  0014FA                     __ptext0:
   598                           	opt stack 0
   599  0014FA                     _main:
   600                           	opt stack 26
   601                           
   602                           ;main.c: 26: LATA = 0x00;
   603                           
   604                           ;incstack = 0
   605  0014FA  0E00               	movlw	0
   606  0014FC  6E89               	movwf	3977,c	;volatile
   607                           
   608                           ;main.c: 27: LATB = 0x00;
   609  0014FE  0E00               	movlw	0
   610  001500  6E8A               	movwf	3978,c	;volatile
   611                           
   612                           ;main.c: 28: LATC = 0x00;
   613  001502  0E00               	movlw	0
   614  001504  6E8B               	movwf	3979,c	;volatile
   615                           
   616                           ;main.c: 29: LATD = 0x00;
   617  001506  0E00               	movlw	0
   618  001508  6E8C               	movwf	3980,c	;volatile
   619                           
   620                           ;main.c: 30: LATE = 0x00;
   621  00150A  0E00               	movlw	0
   622  00150C  6E8D               	movwf	3981,c	;volatile
   623                           
   624                           ;main.c: 34: TRISA = 0xFF;
   625  00150E  6892               	setf	3986,c	;volatile
   626                           
   627                           ;main.c: 35: TRISB = 0xFF;
   628  001510  6893               	setf	3987,c	;volatile
   629                           
   630                           ;main.c: 36: TRISC = 0b10000000;
   631  001512  0E80               	movlw	128
   632  001514  6E94               	movwf	3988,c	;volatile
   633                           
   634                           ;main.c: 40: TRISD = 0b00000001;
   635  001516  0E01               	movlw	1
   636  001518  6E95               	movwf	3989,c	;volatile
   637                           
   638                           ;main.c: 46: TRISE = 0b00000100;
   639  00151A  0E04               	movlw	4
   640  00151C  6E96               	movwf	3990,c	;volatile
   641                           
   642                           ;main.c: 53: ADCON0 = 0x00;
   643  00151E  0E00               	movlw	0
   644  001520  6EC2               	movwf	4034,c	;volatile
   645                           
   646                           ;main.c: 54: ADCON1 = 0b00001111;
   647  001522  0E0F               	movlw	15
   648  001524  6EC1               	movwf	4033,c	;volatile
   649                           
   650                           ;main.c: 58: initGLCD();
   651  001526  EC37  F008         	call	_initGLCD	;wreg free
   652                           
   653                           ;main.c: 61: unsigned char rotation = 0, x = 0, y = 0;
   654  00152A  0E00               	movlw	0
   655  00152C  6E23               	movwf	main@rotation,c
   656  00152E  0E00               	movlw	0
   657  001530  6E24               	movwf	main@x,c
   658  001532  0E00               	movlw	0
   659  001534  6E25               	movwf	main@y,c
   660  001536                     l129:
   661                           
   662                           ;main.c: 66: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, RED);
   663  001536  0E6A               	movlw	low _GLCD_SIZE_HORZ
   664  001538  6EF6               	movwf	tblptrl,c
   665  00153A                     	if	1	;There is more than 1 active tblptr byte
   666  00153A  0E10               	movlw	high _GLCD_SIZE_HORZ
   667  00153C  6EF7               	movwf	tblptrh,c
   668  00153E                     	endif
   669  00153E                     	if	0	;There are less than 3 active tblptr bytes
   670  00153E                     	endif
   671  00153E  0008               	tblrd		*
   672  001540  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   673  001544  0E00               	movlw	0
   674  001546  6E08               	movwf	glcdDrawRectangle@YS,c
   675  001548  0E69               	movlw	low _GLCD_SIZE_VERT
   676  00154A  6EF6               	movwf	tblptrl,c
   677  00154C                     	if	1	;There is more than 1 active tblptr byte
   678  00154C  0E10               	movlw	high _GLCD_SIZE_VERT
   679  00154E  6EF7               	movwf	tblptrh,c
   680  001550                     	endif
   681  001550                     	if	0	;There are less than 3 active tblptr bytes
   682  001550                     	endif
   683  001550  0008               	tblrd		*
   684  001552  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   685  001556  0E19               	movlw	low _RED
   686  001558  6EF6               	movwf	tblptrl,c
   687  00155A                     	if	1	;There is more than 1 active tblptr byte
   688  00155A  0E10               	movlw	high _RED
   689  00155C  6EF7               	movwf	tblptrh,c
   690  00155E                     	endif
   691  00155E                     	if	0	;There are less than 3 active tblptr bytes
   692  00155E                     	endif
   693  00155E  0009               	tblrd		*+
   694  001560  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   695  001564  0009               	tblrd		*+
   696  001566  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   697  00156A  0009               	tblrd		*+
   698  00156C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   699  001570  000A               	tblrd		*-
   700  001572  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   701  001576  0E00               	movlw	0
   702  001578  ECBD  F009         	call	_glcdDrawRectangle
   703                           
   704                           ;main.c: 101: _delay((unsigned long)((500)*(40000000/4000.0)));
   705  00157C  0E1A               	movlw	26
   706  00157E  6E22               	movwf	(??_main+1)& (0+255),c
   707  001580  0E5E               	movlw	94
   708  001582  6E21               	movwf	??_main& (0+255),c
   709  001584  0E6E               	movlw	110
   710  001586                     u257:
   711  001586  2EE8               	decfsz	wreg,f,c
   712  001588  D7FE               	bra	u257
   713  00158A  2E21               	decfsz	??_main& (0+255),f,c
   714  00158C  D7FC               	bra	u257
   715  00158E  2E22               	decfsz	(??_main+1)& (0+255),f,c
   716  001590  D7FA               	bra	u257
   717  001592  D000               	nop2	
   718                           
   719                           ;main.c: 103: _delay((unsigned long)((500)*(40000000/4000.0)));
   720  001594  0E1A               	movlw	26
   721  001596  6E22               	movwf	(??_main+1)& (0+255),c
   722  001598  0E5E               	movlw	94
   723  00159A  6E21               	movwf	??_main& (0+255),c
   724  00159C  0E6E               	movlw	110
   725  00159E                     u267:
   726  00159E  2EE8               	decfsz	wreg,f,c
   727  0015A0  D7FE               	bra	u267
   728  0015A2  2E21               	decfsz	??_main& (0+255),f,c
   729  0015A4  D7FC               	bra	u267
   730  0015A6  2E22               	decfsz	(??_main+1)& (0+255),f,c
   731  0015A8  D7FA               	bra	u267
   732  0015AA  D000               	nop2	
   733                           
   734                           ;main.c: 109: glcdDrawPixel(0, 0, WHITE);
   735  0015AC  0E00               	movlw	0
   736  0015AE  6E1A               	movwf	glcdDrawPixel@YS,c
   737  0015B0  0E1D               	movlw	low _WHITE
   738  0015B2  6EF6               	movwf	tblptrl,c
   739  0015B4                     	if	1	;There is more than 1 active tblptr byte
   740  0015B4  0E10               	movlw	high _WHITE
   741  0015B6  6EF7               	movwf	tblptrh,c
   742  0015B8                     	endif
   743  0015B8                     	if	0	;There are less than 3 active tblptr bytes
   744  0015B8                     	endif
   745  0015B8  0009               	tblrd		*+
   746  0015BA  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
   747  0015BE  0009               	tblrd		*+
   748  0015C0  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
   749  0015C4  0009               	tblrd		*+
   750  0015C6  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
   751  0015CA  000A               	tblrd		*-
   752  0015CC  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
   753  0015D0  0E00               	movlw	0
   754  0015D2  ECF8  F00A         	call	_glcdDrawPixel
   755                           
   756                           ;main.c: 116: _delay((unsigned long)((500)*(40000000/4000.0)));
   757  0015D6  0E1A               	movlw	26
   758  0015D8  6E22               	movwf	(??_main+1)& (0+255),c
   759  0015DA  0E5E               	movlw	94
   760  0015DC  6E21               	movwf	??_main& (0+255),c
   761  0015DE  0E6E               	movlw	110
   762  0015E0                     u277:
   763  0015E0  2EE8               	decfsz	wreg,f,c
   764  0015E2  D7FE               	bra	u277
   765  0015E4  2E21               	decfsz	??_main& (0+255),f,c
   766  0015E6  D7FC               	bra	u277
   767  0015E8  2E22               	decfsz	(??_main+1)& (0+255),f,c
   768  0015EA  D7FA               	bra	u277
   769  0015EC  D000               	nop2	
   770  0015EE  D7A3               	goto	l129
   771  0015F0                     __end_of_main:
   772                           	opt stack 0
   773                           tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           wreg	equ	0xFE8
   778                           
   779 ;; *************** function _initGLCD *****************
   780 ;; Defined at:
   781 ;;		line 238 in file "GLCD_PIC_V1.1.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    4
   802 ;; This function calls:
   803 ;;		_glcdDrawRectangle
   804 ;;		_glcdSetCOLMOD
   805 ;;		_glcdTransfer
   806 ;;		_spiInit
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text1
   813  00106E                     __ptext1:
   814                           	opt stack 0
   815  00106E                     _initGLCD:
   816                           	opt stack 26
   817                           
   818                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
   819                           
   820                           ;incstack = 0
   821  00106E  808C               	bsf	3980,0,c	;volatile
   822                           
   823                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
   824  001070  828C               	bsf	3980,1,c	;volatile
   825                           
   826                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
   827  001072  9095               	bcf	3989,0,c	;volatile
   828                           
   829                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
   830  001074  9295               	bcf	3989,1,c	;volatile
   831                           
   832                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
   833  001076  0E04               	movlw	4
   834  001078  EC57  F00B         	call	_spiInit
   835                           
   836                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(40000000/4000.0)));
   837  00107C  0E02               	movlw	2
   838  00107E  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
   839  001080  0E04               	movlw	4
   840  001082  6E1A               	movwf	??_initGLCD& (0+255),c
   841  001084  0EBA               	movlw	186
   842  001086                     u287:
   843  001086  2EE8               	decfsz	wreg,f,c
   844  001088  D7FE               	bra	u287
   845  00108A  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   846  00108C  D7FC               	bra	u287
   847  00108E  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
   848  001090  D7FA               	bra	u287
   849  001092  D000               	nop2	
   850                           
   851                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
   852  001094  0E01               	movlw	1
   853  001096  6E04               	movwf	glcdTransfer@cmd,c
   854  001098  0E47               	movlw	low GLCD_PIC@INST_SWRESET
   855  00109A  6EF6               	movwf	tblptrl,c
   856  00109C                     	if	1	;There is more than 1 active tblptr byte
   857  00109C  0E10               	movlw	high GLCD_PIC@INST_SWRESET
   858  00109E  6EF7               	movwf	tblptrh,c
   859  0010A0                     	endif
   860  0010A0                     	if	0	;There are less than 3 active tblptr bytes
   861  0010A0                     	endif
   862  0010A0  0008               	tblrd		*
   863  0010A2  50F5               	movf	tablat,w,c
   864  0010A4  EC73  F00B         	call	_glcdTransfer
   865  0010A8  0E07               	movlw	7
   866  0010AA  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
   867  0010AC  0E99               	movlw	153
   868  0010AE  6E1A               	movwf	??_initGLCD& (0+255),c
   869  0010B0  0E49               	movlw	73
   870  0010B2                     u297:
   871  0010B2  2EE8               	decfsz	wreg,f,c
   872  0010B4  D7FE               	bra	u297
   873  0010B6  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   874  0010B8  D7FC               	bra	u297
   875  0010BA  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
   876  0010BC  D7FA               	bra	u297
   877  0010BE  F000               	nop	
   878                           
   879                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
   880  0010C0  0E01               	movlw	1
   881  0010C2  6E04               	movwf	glcdTransfer@cmd,c
   882  0010C4  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
   883  0010C6  6EF6               	movwf	tblptrl,c
   884  0010C8                     	if	1	;There is more than 1 active tblptr byte
   885  0010C8  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
   886  0010CA  6EF7               	movwf	tblptrh,c
   887  0010CC                     	endif
   888  0010CC                     	if	0	;There are less than 3 active tblptr bytes
   889  0010CC                     	endif
   890  0010CC  0008               	tblrd		*
   891  0010CE  50F5               	movf	tablat,w,c
   892  0010D0  EC73  F00B         	call	_glcdTransfer
   893  0010D4  0E07               	movlw	7
   894  0010D6  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
   895  0010D8  0E99               	movlw	153
   896  0010DA  6E1A               	movwf	??_initGLCD& (0+255),c
   897  0010DC  0E49               	movlw	73
   898  0010DE                     u307:
   899  0010DE  2EE8               	decfsz	wreg,f,c
   900  0010E0  D7FE               	bra	u307
   901  0010E2  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   902  0010E4  D7FC               	bra	u307
   903  0010E6  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
   904  0010E8  D7FA               	bra	u307
   905  0010EA  F000               	nop	
   906                           
   907                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
   908  0010EC  0E01               	movlw	1
   909  0010EE  6E04               	movwf	glcdTransfer@cmd,c
   910  0010F0  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
   911  0010F2  6EF6               	movwf	tblptrl,c
   912  0010F4                     	if	1	;There is more than 1 active tblptr byte
   913  0010F4  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
   914  0010F6  6EF7               	movwf	tblptrh,c
   915  0010F8                     	endif
   916  0010F8                     	if	0	;There are less than 3 active tblptr bytes
   917  0010F8                     	endif
   918  0010F8  0008               	tblrd		*
   919  0010FA  50F5               	movf	tablat,w,c
   920  0010FC  EC73  F00B         	call	_glcdTransfer
   921                           
   922                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
   923  001100  0E00               	movlw	0
   924  001102  6E04               	movwf	glcdTransfer@cmd,c
   925  001104  0E00               	movlw	0
   926  001106  EC73  F00B         	call	_glcdTransfer
   927                           
   928                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
   929  00110A  0E00               	movlw	0
   930  00110C  6E04               	movwf	glcdTransfer@cmd,c
   931  00110E  0E06               	movlw	6
   932  001110  EC73  F00B         	call	_glcdTransfer
   933                           
   934                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
   935  001114  0E00               	movlw	0
   936  001116  6E04               	movwf	glcdTransfer@cmd,c
   937  001118  0E03               	movlw	3
   938  00111A  EC73  F00B         	call	_glcdTransfer
   939                           
   940                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
   941  00111E  0E01               	movlw	1
   942  001120  6E04               	movwf	glcdTransfer@cmd,c
   943  001122  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
   944  001124  6EF6               	movwf	tblptrl,c
   945  001126                     	if	1	;There is more than 1 active tblptr byte
   946  001126  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
   947  001128  6EF7               	movwf	tblptrh,c
   948  00112A                     	endif
   949  00112A                     	if	0	;There are less than 3 active tblptr bytes
   950  00112A                     	endif
   951  00112A  0008               	tblrd		*
   952  00112C  50F5               	movf	tablat,w,c
   953  00112E  EC73  F00B         	call	_glcdTransfer
   954                           
   955                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
   956  001132  0E00               	movlw	0
   957  001134  6E04               	movwf	glcdTransfer@cmd,c
   958  001136  0E01               	movlw	1
   959  001138  EC73  F00B         	call	_glcdTransfer
   960                           
   961                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
   962  00113C  0E00               	movlw	0
   963  00113E  6E04               	movwf	glcdTransfer@cmd,c
   964  001140  0E2C               	movlw	44
   965  001142  EC73  F00B         	call	_glcdTransfer
   966                           
   967                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
   968  001146  0E00               	movlw	0
   969  001148  6E04               	movwf	glcdTransfer@cmd,c
   970  00114A  0E2D               	movlw	45
   971  00114C  EC73  F00B         	call	_glcdTransfer
   972                           
   973                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
   974  001150  0E01               	movlw	1
   975  001152  6E04               	movwf	glcdTransfer@cmd,c
   976  001154  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
   977  001156  6EF6               	movwf	tblptrl,c
   978  001158                     	if	1	;There is more than 1 active tblptr byte
   979  001158  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
   980  00115A  6EF7               	movwf	tblptrh,c
   981  00115C                     	endif
   982  00115C                     	if	0	;There are less than 3 active tblptr bytes
   983  00115C                     	endif
   984  00115C  0008               	tblrd		*
   985  00115E  50F5               	movf	tablat,w,c
   986  001160  EC73  F00B         	call	_glcdTransfer
   987                           
   988                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
   989  001164  0E00               	movlw	0
   990  001166  6E04               	movwf	glcdTransfer@cmd,c
   991  001168  0E01               	movlw	1
   992  00116A  EC73  F00B         	call	_glcdTransfer
   993                           
   994                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
   995  00116E  0E00               	movlw	0
   996  001170  6E04               	movwf	glcdTransfer@cmd,c
   997  001172  0E2C               	movlw	44
   998  001174  EC73  F00B         	call	_glcdTransfer
   999                           
  1000                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  1001  001178  0E00               	movlw	0
  1002  00117A  6E04               	movwf	glcdTransfer@cmd,c
  1003  00117C  0E2D               	movlw	45
  1004  00117E  EC73  F00B         	call	_glcdTransfer
  1005                           
  1006                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  1007  001182  0E01               	movlw	1
  1008  001184  6E04               	movwf	glcdTransfer@cmd,c
  1009  001186  0E30               	movlw	low GLCD_PIC@INST_INVCTR
  1010  001188  6EF6               	movwf	tblptrl,c
  1011  00118A                     	if	1	;There is more than 1 active tblptr byte
  1012  00118A  0E10               	movlw	high GLCD_PIC@INST_INVCTR
  1013  00118C  6EF7               	movwf	tblptrh,c
  1014  00118E                     	endif
  1015  00118E                     	if	0	;There are less than 3 active tblptr bytes
  1016  00118E                     	endif
  1017  00118E  0008               	tblrd		*
  1018  001190  50F5               	movf	tablat,w,c
  1019  001192  EC73  F00B         	call	_glcdTransfer
  1020                           
  1021                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  1022  001196  0E00               	movlw	0
  1023  001198  6E04               	movwf	glcdTransfer@cmd,c
  1024  00119A  0E00               	movlw	0
  1025  00119C  EC73  F00B         	call	_glcdTransfer
  1026                           
  1027                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  1028  0011A0  0E01               	movlw	1
  1029  0011A2  6E04               	movwf	glcdTransfer@cmd,c
  1030  0011A4  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
  1031  0011A6  6EF6               	movwf	tblptrl,c
  1032  0011A8                     	if	1	;There is more than 1 active tblptr byte
  1033  0011A8  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
  1034  0011AA  6EF7               	movwf	tblptrh,c
  1035  0011AC                     	endif
  1036  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  1037  0011AC                     	endif
  1038  0011AC  0008               	tblrd		*
  1039  0011AE  50F5               	movf	tablat,w,c
  1040  0011B0  EC73  F00B         	call	_glcdTransfer
  1041                           
  1042                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  1043  0011B4  0E00               	movlw	0
  1044  0011B6  6E04               	movwf	glcdTransfer@cmd,c
  1045  0011B8  0EA2               	movlw	162
  1046  0011BA  EC73  F00B         	call	_glcdTransfer
  1047                           
  1048                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  1049  0011BE  0E00               	movlw	0
  1050  0011C0  6E04               	movwf	glcdTransfer@cmd,c
  1051  0011C2  0E02               	movlw	2
  1052  0011C4  EC73  F00B         	call	_glcdTransfer
  1053                           
  1054                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  1055  0011C8  0E00               	movlw	0
  1056  0011CA  6E04               	movwf	glcdTransfer@cmd,c
  1057  0011CC  0E84               	movlw	132
  1058  0011CE  EC73  F00B         	call	_glcdTransfer
  1059                           
  1060                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  1061  0011D2  0E01               	movlw	1
  1062  0011D4  6E04               	movwf	glcdTransfer@cmd,c
  1063  0011D6  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  1064  0011D8  6EF6               	movwf	tblptrl,c
  1065  0011DA                     	if	1	;There is more than 1 active tblptr byte
  1066  0011DA  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  1067  0011DC  6EF7               	movwf	tblptrh,c
  1068  0011DE                     	endif
  1069  0011DE                     	if	0	;There are less than 3 active tblptr bytes
  1070  0011DE                     	endif
  1071  0011DE  0008               	tblrd		*
  1072  0011E0  50F5               	movf	tablat,w,c
  1073  0011E2  EC73  F00B         	call	_glcdTransfer
  1074                           
  1075                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  1076  0011E6  0E00               	movlw	0
  1077  0011E8  6E04               	movwf	glcdTransfer@cmd,c
  1078  0011EA  0EC5               	movlw	197
  1079  0011EC  EC73  F00B         	call	_glcdTransfer
  1080                           
  1081                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  1082  0011F0  0E01               	movlw	1
  1083  0011F2  6E04               	movwf	glcdTransfer@cmd,c
  1084  0011F4  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  1085  0011F6  6EF6               	movwf	tblptrl,c
  1086  0011F8                     	if	1	;There is more than 1 active tblptr byte
  1087  0011F8  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  1088  0011FA  6EF7               	movwf	tblptrh,c
  1089  0011FC                     	endif
  1090  0011FC                     	if	0	;There are less than 3 active tblptr bytes
  1091  0011FC                     	endif
  1092  0011FC  0008               	tblrd		*
  1093  0011FE  50F5               	movf	tablat,w,c
  1094  001200  EC73  F00B         	call	_glcdTransfer
  1095                           
  1096                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  1097  001204  0E00               	movlw	0
  1098  001206  6E04               	movwf	glcdTransfer@cmd,c
  1099  001208  0E0A               	movlw	10
  1100  00120A  EC73  F00B         	call	_glcdTransfer
  1101                           
  1102                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  1103  00120E  0E00               	movlw	0
  1104  001210  6E04               	movwf	glcdTransfer@cmd,c
  1105  001212  0E00               	movlw	0
  1106  001214  EC73  F00B         	call	_glcdTransfer
  1107                           
  1108                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  1109  001218  0E01               	movlw	1
  1110  00121A  6E04               	movwf	glcdTransfer@cmd,c
  1111  00121C  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  1112  00121E  6EF6               	movwf	tblptrl,c
  1113  001220                     	if	1	;There is more than 1 active tblptr byte
  1114  001220  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  1115  001222  6EF7               	movwf	tblptrh,c
  1116  001224                     	endif
  1117  001224                     	if	0	;There are less than 3 active tblptr bytes
  1118  001224                     	endif
  1119  001224  0008               	tblrd		*
  1120  001226  50F5               	movf	tablat,w,c
  1121  001228  EC73  F00B         	call	_glcdTransfer
  1122                           
  1123                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  1124  00122C  0E00               	movlw	0
  1125  00122E  6E04               	movwf	glcdTransfer@cmd,c
  1126  001230  0E8A               	movlw	138
  1127  001232  EC73  F00B         	call	_glcdTransfer
  1128                           
  1129                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  1130  001236  0E00               	movlw	0
  1131  001238  6E04               	movwf	glcdTransfer@cmd,c
  1132  00123A  0E2A               	movlw	42
  1133  00123C  EC73  F00B         	call	_glcdTransfer
  1134                           
  1135                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  1136  001240  0E01               	movlw	1
  1137  001242  6E04               	movwf	glcdTransfer@cmd,c
  1138  001244  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  1139  001246  6EF6               	movwf	tblptrl,c
  1140  001248                     	if	1	;There is more than 1 active tblptr byte
  1141  001248  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  1142  00124A  6EF7               	movwf	tblptrh,c
  1143  00124C                     	endif
  1144  00124C                     	if	0	;There are less than 3 active tblptr bytes
  1145  00124C                     	endif
  1146  00124C  0008               	tblrd		*
  1147  00124E  50F5               	movf	tablat,w,c
  1148  001250  EC73  F00B         	call	_glcdTransfer
  1149                           
  1150                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  1151  001254  0E00               	movlw	0
  1152  001256  6E04               	movwf	glcdTransfer@cmd,c
  1153  001258  0E8A               	movlw	138
  1154  00125A  EC73  F00B         	call	_glcdTransfer
  1155                           
  1156                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  1157  00125E  0E00               	movlw	0
  1158  001260  6E04               	movwf	glcdTransfer@cmd,c
  1159  001262  0E2A               	movlw	42
  1160  001264  EC73  F00B         	call	_glcdTransfer
  1161                           
  1162                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  1163  001268  0E01               	movlw	1
  1164  00126A  6E04               	movwf	glcdTransfer@cmd,c
  1165  00126C  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  1166  00126E  6EF6               	movwf	tblptrl,c
  1167  001270                     	if	1	;There is more than 1 active tblptr byte
  1168  001270  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  1169  001272  6EF7               	movwf	tblptrh,c
  1170  001274                     	endif
  1171  001274                     	if	0	;There are less than 3 active tblptr bytes
  1172  001274                     	endif
  1173  001274  0008               	tblrd		*
  1174  001276  50F5               	movf	tablat,w,c
  1175  001278  EC73  F00B         	call	_glcdTransfer
  1176                           
  1177                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  1178  00127C  0E00               	movlw	0
  1179  00127E  6E04               	movwf	glcdTransfer@cmd,c
  1180  001280  0E3C               	movlw	60
  1181  001282  EC73  F00B         	call	_glcdTransfer
  1182                           
  1183                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  1184  001286  0E01               	movlw	1
  1185  001288  6E04               	movwf	glcdTransfer@cmd,c
  1186  00128A  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  1187  00128C  6EF6               	movwf	tblptrl,c
  1188  00128E                     	if	1	;There is more than 1 active tblptr byte
  1189  00128E  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  1190  001290  6EF7               	movwf	tblptrh,c
  1191  001292                     	endif
  1192  001292                     	if	0	;There are less than 3 active tblptr bytes
  1193  001292                     	endif
  1194  001292  0008               	tblrd		*
  1195  001294  50F5               	movf	tablat,w,c
  1196  001296  EC73  F00B         	call	_glcdTransfer
  1197                           
  1198                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  1199  00129A  0E12               	movlw	18
  1200  00129C  EC2F  F00B         	call	_glcdSetCOLMOD
  1201                           
  1202                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  1203  0012A0  0E01               	movlw	1
  1204  0012A2  6E04               	movwf	glcdTransfer@cmd,c
  1205  0012A4  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  1206  0012A6  6EF6               	movwf	tblptrl,c
  1207  0012A8                     	if	1	;There is more than 1 active tblptr byte
  1208  0012A8  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  1209  0012AA  6EF7               	movwf	tblptrh,c
  1210  0012AC                     	endif
  1211  0012AC                     	if	0	;There are less than 3 active tblptr bytes
  1212  0012AC                     	endif
  1213  0012AC  0008               	tblrd		*
  1214  0012AE  50F5               	movf	tablat,w,c
  1215  0012B0  EC73  F00B         	call	_glcdTransfer
  1216                           
  1217                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  1218  0012B4  0E00               	movlw	0
  1219  0012B6  6E04               	movwf	glcdTransfer@cmd,c
  1220  0012B8  0E01               	movlw	1
  1221  0012BA  EC73  F00B         	call	_glcdTransfer
  1222                           
  1223                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  1224  0012BE  0E01               	movlw	1
  1225  0012C0  6E04               	movwf	glcdTransfer@cmd,c
  1226  0012C2  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  1227  0012C4  6EF6               	movwf	tblptrl,c
  1228  0012C6                     	if	1	;There is more than 1 active tblptr byte
  1229  0012C6  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  1230  0012C8  6EF7               	movwf	tblptrh,c
  1231  0012CA                     	endif
  1232  0012CA                     	if	0	;There are less than 3 active tblptr bytes
  1233  0012CA                     	endif
  1234  0012CA  0008               	tblrd		*
  1235  0012CC  50F5               	movf	tablat,w,c
  1236  0012CE  EC73  F00B         	call	_glcdTransfer
  1237                           
  1238                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  1239  0012D2  0E01               	movlw	1
  1240  0012D4  6E04               	movwf	glcdTransfer@cmd,c
  1241  0012D6  0E43               	movlw	low GLCD_PIC@INST_NORON
  1242  0012D8  6EF6               	movwf	tblptrl,c
  1243  0012DA                     	if	1	;There is more than 1 active tblptr byte
  1244  0012DA  0E10               	movlw	high GLCD_PIC@INST_NORON
  1245  0012DC  6EF7               	movwf	tblptrh,c
  1246  0012DE                     	endif
  1247  0012DE                     	if	0	;There are less than 3 active tblptr bytes
  1248  0012DE                     	endif
  1249  0012DE  0008               	tblrd		*
  1250  0012E0  50F5               	movf	tablat,w,c
  1251  0012E2  EC73  F00B         	call	_glcdTransfer
  1252                           
  1253                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  1254  0012E6  8C26               	bsf	_MADCTLbits,6,c
  1255                           
  1256                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  1257  0012E8  8E26               	bsf	_MADCTLbits,7,c
  1258                           
  1259                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  1260  0012EA  8A26               	bsf	_MADCTLbits,5,c
  1261                           
  1262                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  1263  0012EC  9826               	bcf	_MADCTLbits,4,c
  1264                           
  1265                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  1266  0012EE  9626               	bcf	_MADCTLbits,3,c
  1267                           
  1268                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  1269  0012F0  9426               	bcf	_MADCTLbits,2,c
  1270                           
  1271                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  1272  0012F2  0E01               	movlw	1
  1273  0012F4  6E04               	movwf	glcdTransfer@cmd,c
  1274  0012F6  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  1275  0012F8  6EF6               	movwf	tblptrl,c
  1276  0012FA                     	if	1	;There is more than 1 active tblptr byte
  1277  0012FA  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  1278  0012FC  6EF7               	movwf	tblptrh,c
  1279  0012FE                     	endif
  1280  0012FE                     	if	0	;There are less than 3 active tblptr bytes
  1281  0012FE                     	endif
  1282  0012FE  0008               	tblrd		*
  1283  001300  50F5               	movf	tablat,w,c
  1284  001302  EC73  F00B         	call	_glcdTransfer
  1285  001306  0E00               	movlw	0
  1286  001308  6E04               	movwf	glcdTransfer@cmd,c
  1287  00130A  5026               	movf	_MADCTLbits,w,c
  1288  00130C  EC73  F00B         	call	_glcdTransfer
  1289                           
  1290                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1291  001310  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1292  001312  6EF6               	movwf	tblptrl,c
  1293  001314                     	if	1	;There is more than 1 active tblptr byte
  1294  001314  0E10               	movlw	high _GLCD_SIZE_HORZ
  1295  001316  6EF7               	movwf	tblptrh,c
  1296  001318                     	endif
  1297  001318                     	if	0	;There are less than 3 active tblptr bytes
  1298  001318                     	endif
  1299  001318  0008               	tblrd		*
  1300  00131A  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1301  00131E  0E00               	movlw	0
  1302  001320  6E08               	movwf	glcdDrawRectangle@YS,c
  1303  001322  0E69               	movlw	low _GLCD_SIZE_VERT
  1304  001324  6EF6               	movwf	tblptrl,c
  1305  001326                     	if	1	;There is more than 1 active tblptr byte
  1306  001326  0E10               	movlw	high _GLCD_SIZE_VERT
  1307  001328  6EF7               	movwf	tblptrh,c
  1308  00132A                     	endif
  1309  00132A                     	if	0	;There are less than 3 active tblptr bytes
  1310  00132A                     	endif
  1311  00132A  0008               	tblrd		*
  1312  00132C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1313  001330  0E25               	movlw	low _BLACK
  1314  001332  6EF6               	movwf	tblptrl,c
  1315  001334                     	if	1	;There is more than 1 active tblptr byte
  1316  001334  0E10               	movlw	high _BLACK
  1317  001336  6EF7               	movwf	tblptrh,c
  1318  001338                     	endif
  1319  001338                     	if	0	;There are less than 3 active tblptr bytes
  1320  001338                     	endif
  1321  001338  0009               	tblrd		*+
  1322  00133A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1323  00133E  0009               	tblrd		*+
  1324  001340  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1325  001344  0009               	tblrd		*+
  1326  001346  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1327  00134A  000A               	tblrd		*-
  1328  00134C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1329  001350  0E00               	movlw	0
  1330  001352  ECBD  F009         	call	_glcdDrawRectangle
  1331                           
  1332                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  1333  001356  0E01               	movlw	1
  1334  001358  6E04               	movwf	glcdTransfer@cmd,c
  1335  00135A  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  1336  00135C  6EF6               	movwf	tblptrl,c
  1337  00135E                     	if	1	;There is more than 1 active tblptr byte
  1338  00135E  0E10               	movlw	high GLCD_PIC@INST_DISPON
  1339  001360  6EF7               	movwf	tblptrh,c
  1340  001362                     	endif
  1341  001362                     	if	0	;There are less than 3 active tblptr bytes
  1342  001362                     	endif
  1343  001362  0008               	tblrd		*
  1344  001364  50F5               	movf	tablat,w,c
  1345  001366  EC73  F00B         	call	_glcdTransfer
  1346                           
  1347                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(40000000/4000.0)));
  1348  00136A  0E82               	movlw	130
  1349  00136C  6E1A               	movwf	??_initGLCD& (0+255),c
  1350  00136E  0EDE               	movlw	222
  1351  001370                     u317:
  1352  001370  2EE8               	decfsz	wreg,f,c
  1353  001372  D7FE               	bra	u317
  1354  001374  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1355  001376  D7FC               	bra	u317
  1356  001378  0012               	return		;funcret
  1357  00137A                     __end_of_initGLCD:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           wreg	equ	0xFE8
  1364                           
  1365 ;; *************** function _spiInit *****************
  1366 ;; Defined at:
  1367 ;;		line 54 in file "SPI_PIC.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  divider         1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  divider         1    0[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;Total ram usage:        1 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_initGLCD
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text2
  1395  0016AE                     __ptext2:
  1396                           	opt stack 0
  1397  0016AE                     _spiInit:
  1398                           	opt stack 29
  1399                           
  1400                           ;incstack = 0
  1401                           ;spiInit@divider stored from wreg
  1402  0016AE  6E01               	movwf	spiInit@divider,c
  1403                           
  1404                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  1405  0016B0  9AC6               	bcf	4038,5,c	;volatile
  1406                           
  1407                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  1408  0016B2  0E00               	movlw	0
  1409  0016B4  6EC7               	movwf	4039,c	;volatile
  1410                           
  1411                           ;SPI_PIC.c: 71: switch(divider){
  1412  0016B6  D007               	goto	l161
  1413  0016B8                     
  1414                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  1415  0016B8  0E11               	movlw	17
  1416  0016BA  D003               	goto	L3
  1417  0016BC                     
  1418                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  1419  0016BC  0E12               	movlw	18
  1420  0016BE  D001               	goto	L3
  1421  0016C0                     
  1422                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  1423  0016C0  0E10               	movlw	16
  1424  0016C2                     L3:
  1425  0016C2  6EC6               	movwf	4038,c	;volatile
  1426                           
  1427                           ;SPI_PIC.c: 83: }
  1428  0016C4  D00B               	goto	l163
  1429  0016C6                     l161:
  1430  0016C6  5001               	movf	spiInit@divider,w,c
  1431                           
  1432                           ; Switch size 1, requested type "space"
  1433                           ; Number of cases is 3, Range of values is 4 to 64
  1434                           ; switch strategies available:
  1435                           ; Name         Instructions Cycles
  1436                           ; simple_byte           10     6 (average)
  1437                           ;	Chosen strategy is simple_byte
  1438  0016C8  0A04               	xorlw	4	; case 4
  1439  0016CA  B4D8               	btfsc	status,2,c
  1440  0016CC  D7F9               	goto	l166
  1441  0016CE  0A14               	xorlw	20	; case 16
  1442  0016D0  B4D8               	btfsc	status,2,c
  1443  0016D2  D7F2               	goto	l164
  1444  0016D4  0A50               	xorlw	80	; case 64
  1445  0016D6  B4D8               	btfsc	status,2,c
  1446  0016D8  D7F1               	goto	l165
  1447  0016DA  D7F2               	goto	l166
  1448  0016DC                     l163:
  1449                           
  1450                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  1451  0016DC  9A94               	bcf	3988,5,c	;volatile
  1452                           
  1453                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  1454  0016DE  8894               	bsf	3988,4,c	;volatile
  1455                           
  1456                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  1457  0016E0  9694               	bcf	3988,3,c	;volatile
  1458                           
  1459                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  1460  0016E2  8AC6               	bsf	4038,5,c	;volatile
  1461  0016E4  0012               	return		;funcret
  1462  0016E6                     __end_of_spiInit:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           wreg	equ	0xFE8
  1469                           status	equ	0xFD8
  1470                           
  1471 ;; *************** function _glcdSetCOLMOD *****************
  1472 ;; Defined at:
  1473 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;  numBitsPerPi    1    wreg     unsigned char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  1478 ;;  rawData         2    7[COMRAM] unsigned short 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;Total ram usage:        3 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    3
  1495 ;; This function calls:
  1496 ;;		_glcdTransfer
  1497 ;; This function is called by:
  1498 ;;		_initGLCD
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text3
  1503  00165E                     __ptext3:
  1504                           	opt stack 0
  1505  00165E                     _glcdSetCOLMOD:
  1506                           	opt stack 26
  1507                           
  1508                           ;incstack = 0
  1509                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  1510  00165E  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  1511                           
  1512                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  1513                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  1514  001660  D00D               	goto	l296
  1515  001662                     
  1516                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  1517  001662  0E00               	movlw	0
  1518  001664  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1519  001666  0E03               	movlw	3
  1520  001668  D003               	goto	L5
  1521  00166A                     
  1522                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  1523  00166A  0E00               	movlw	0
  1524  00166C  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1525  00166E  0E05               	movlw	5
  1526  001670                     L5:
  1527  001670  6E08               	movwf	glcdSetCOLMOD@rawData,c
  1528                           
  1529                           ;GLCD_PIC_V1.1.c: 186: break;
  1530  001672  D00D               	goto	l298
  1531  001674                     
  1532                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  1533  001674  0E00               	movlw	0
  1534  001676  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1535  001678  0E06               	movlw	6
  1536  00167A  D7FA               	goto	L5
  1537  00167C                     l296:
  1538  00167C  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  1539                           
  1540                           ; Switch size 1, requested type "space"
  1541                           ; Number of cases is 3, Range of values is 12 to 18
  1542                           ; switch strategies available:
  1543                           ; Name         Instructions Cycles
  1544                           ; simple_byte           10     6 (average)
  1545                           ;	Chosen strategy is simple_byte
  1546  00167E  0A0C               	xorlw	12	; case 12
  1547  001680  B4D8               	btfsc	status,2,c
  1548  001682  D7EF               	goto	l297
  1549  001684  0A1C               	xorlw	28	; case 16
  1550  001686  B4D8               	btfsc	status,2,c
  1551  001688  D7F0               	goto	l299
  1552  00168A  0A02               	xorlw	2	; case 18
  1553  00168C  D7F3               	goto	l301
  1554  00168E                     l298:
  1555                           
  1556                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  1557  00168E  0E01               	movlw	1
  1558  001690  6E04               	movwf	glcdTransfer@cmd,c
  1559  001692  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  1560  001694  6EF6               	movwf	tblptrl,c
  1561  001696                     	if	1	;There is more than 1 active tblptr byte
  1562  001696  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  1563  001698  6EF7               	movwf	tblptrh,c
  1564  00169A                     	endif
  1565  00169A                     	if	0	;There are less than 3 active tblptr bytes
  1566  00169A                     	endif
  1567  00169A  0008               	tblrd		*
  1568  00169C  50F5               	movf	tablat,w,c
  1569  00169E  EC73  F00B         	call	_glcdTransfer
  1570                           
  1571                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  1572  0016A2  0E00               	movlw	0
  1573  0016A4  6E04               	movwf	glcdTransfer@cmd,c
  1574  0016A6  5008               	movf	glcdSetCOLMOD@rawData,w,c
  1575  0016A8  EC73  F00B         	call	_glcdTransfer
  1576  0016AC  0012               	return		;funcret
  1577  0016AE                     __end_of_glcdSetCOLMOD:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           wreg	equ	0xFE8
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _glcdDrawPixel *****************
  1587 ;; Defined at:
  1588 ;;		line 147 in file "GLCD_PIC_V1.1.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  XS              1    wreg     unsigned char 
  1591 ;;  YS              1   25[COMRAM] unsigned char 
  1592 ;;  color           4   26[COMRAM] unsigned long 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  XS              1   31[COMRAM] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1604 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;Total ram usage:        7 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    4
  1611 ;; This function calls:
  1612 ;;		_glcdDrawRectangle
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text4
  1619  0015F0                     __ptext4:
  1620                           	opt stack 0
  1621  0015F0                     _glcdDrawPixel:
  1622                           	opt stack 26
  1623                           
  1624                           ;incstack = 0
  1625                           ;glcdDrawPixel@XS stored from wreg
  1626  0015F0  6E20               	movwf	glcdDrawPixel@XS,c
  1627                           
  1628                           ;GLCD_PIC_V1.1.c: 160: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  1629  0015F2  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1630  0015F4  6EF6               	movwf	tblptrl,c
  1631  0015F6                     	if	1	;There is more than 1 active tblptr byte
  1632  0015F6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1633  0015F8  6EF7               	movwf	tblptrh,c
  1634  0015FA                     	endif
  1635  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  1636  0015FA                     	endif
  1637  0015FA  0009               	tblrd		*+
  1638  0015FC  50F5               	movf	tablat,w,c
  1639  0015FE  5C20               	subwf	glcdDrawPixel@XS,w,c
  1640  001600  A0D8               	btfss	status,0,c
  1641  001602  D009               	goto	l291
  1642  001604  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1643  001606  6EF6               	movwf	tblptrl,c
  1644  001608                     	if	1	;There is more than 1 active tblptr byte
  1645  001608  0E10               	movlw	high _GLCD_SIZE_HORZ
  1646  00160A  6EF7               	movwf	tblptrh,c
  1647  00160C                     	endif
  1648  00160C                     	if	0	;There are less than 3 active tblptr bytes
  1649  00160C                     	endif
  1650  00160C  0008               	tblrd		*
  1651  00160E  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  1652  001612  041F               	decf	??_glcdDrawPixel,w,c
  1653  001614  6E20               	movwf	glcdDrawPixel@XS,c
  1654  001616                     l291:
  1655                           
  1656                           ;GLCD_PIC_V1.1.c: 161: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  1657  001616  0E69               	movlw	low _GLCD_SIZE_VERT
  1658  001618  6EF6               	movwf	tblptrl,c
  1659  00161A                     	if	1	;There is more than 1 active tblptr byte
  1660  00161A  0E10               	movlw	high _GLCD_SIZE_VERT
  1661  00161C  6EF7               	movwf	tblptrh,c
  1662  00161E                     	endif
  1663  00161E                     	if	0	;There are less than 3 active tblptr bytes
  1664  00161E                     	endif
  1665  00161E  0009               	tblrd		*+
  1666  001620  50F5               	movf	tablat,w,c
  1667  001622  5C1A               	subwf	glcdDrawPixel@YS,w,c
  1668  001624  A0D8               	btfss	status,0,c
  1669  001626  D009               	goto	l292
  1670  001628  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1671  00162A  6EF6               	movwf	tblptrl,c
  1672  00162C                     	if	1	;There is more than 1 active tblptr byte
  1673  00162C  0E10               	movlw	high _GLCD_SIZE_HORZ
  1674  00162E  6EF7               	movwf	tblptrh,c
  1675  001630                     	endif
  1676  001630                     	if	0	;There are less than 3 active tblptr bytes
  1677  001630                     	endif
  1678  001630  0008               	tblrd		*
  1679  001632  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  1680  001636  041F               	decf	??_glcdDrawPixel,w,c
  1681  001638  6E1A               	movwf	glcdDrawPixel@YS,c
  1682  00163A                     l292:
  1683                           
  1684                           ;GLCD_PIC_V1.1.c: 164: glcdDrawRectangle(XS, XS, YS, YS, color);
  1685  00163A  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  1686  00163E  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  1687  001642  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  1688  001646  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  1689  00164A  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  1690  00164E  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  1691  001652  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  1692  001656  5020               	movf	glcdDrawPixel@XS,w,c
  1693  001658  ECBD  F009         	call	_glcdDrawRectangle
  1694  00165C  0012               	return		;funcret
  1695  00165E                     __end_of_glcdDrawPixel:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           wreg	equ	0xFE8
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _glcdDrawRectangle *****************
  1705 ;; Defined at:
  1706 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  XS              1    wreg     unsigned char 
  1709 ;;  XE              1    6[COMRAM] unsigned char 
  1710 ;;  YS              1    7[COMRAM] unsigned char 
  1711 ;;  YE              1    8[COMRAM] unsigned char 
  1712 ;;  color           4    9[COMRAM] unsigned long 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  XS              1   24[COMRAM] unsigned char 
  1715 ;;  i               2   19[COMRAM] unsigned short 
  1716 ;;  colorData       3   21[COMRAM] unsigned char [3]
  1717 ;;  numLoops        2   17[COMRAM] unsigned short 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1727 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;Total ram usage:       19 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    3
  1734 ;; This function calls:
  1735 ;;		___wmul
  1736 ;;		_glcdTransfer
  1737 ;;		_spiSend
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;;		_glcdDrawPixel
  1741 ;;		_initGLCD
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text5
  1746  00137A                     __ptext5:
  1747                           	opt stack 0
  1748  00137A                     _glcdDrawRectangle:
  1749                           	opt stack 26
  1750                           
  1751                           ;incstack = 0
  1752                           ;glcdDrawRectangle@XS stored from wreg
  1753  00137A  6E19               	movwf	glcdDrawRectangle@XS,c
  1754                           
  1755                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  1756  00137C  BC26               	btfsc	_MADCTLbits,6,c
  1757  00137E  AA26               	btfss	_MADCTLbits,5,c
  1758  001380  D005               	goto	l277
  1759                           
  1760                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  1761  001382  0E03               	movlw	3
  1762  001384  2608               	addwf	glcdDrawRectangle@YS,f,c
  1763                           
  1764                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  1765  001386  0E03               	movlw	3
  1766  001388  2609               	addwf	glcdDrawRectangle@YE,f,c
  1767  00138A  D015               	goto	l1243
  1768  00138C                     l277:
  1769                           
  1770                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  1771  00138C  AE26               	btfss	_MADCTLbits,7,c
  1772  00138E  D008               	goto	l279
  1773                           
  1774                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  1775  001390  0E02               	movlw	2
  1776  001392  2608               	addwf	glcdDrawRectangle@YS,f,c
  1777                           
  1778                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  1779  001394  0E02               	movlw	2
  1780  001396  2609               	addwf	glcdDrawRectangle@YE,f,c
  1781                           
  1782                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  1783  001398  0E03               	movlw	3
  1784  00139A  2619               	addwf	glcdDrawRectangle@XS,f,c
  1785                           
  1786                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  1787  00139C  0E03               	movlw	3
  1788  00139E  D00E               	goto	L7
  1789  0013A0                     l279:
  1790                           
  1791                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  1792  0013A0  AC26               	btfss	_MADCTLbits,6,c
  1793  0013A2  D007               	goto	l281
  1794                           
  1795                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  1796  0013A4  0E02               	movlw	2
  1797  0013A6  2608               	addwf	glcdDrawRectangle@YS,f,c
  1798                           
  1799                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  1800  0013A8  0E02               	movlw	2
  1801  0013AA  2609               	addwf	glcdDrawRectangle@YE,f,c
  1802                           
  1803                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  1804  0013AC  2A19               	incf	glcdDrawRectangle@XS,f,c
  1805                           
  1806                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  1807  0013AE  2A07               	incf	glcdDrawRectangle@XE,f,c
  1808                           
  1809                           ;GLCD_PIC_V1.1.c: 78: }
  1810  0013B0  D006               	goto	l282
  1811  0013B2                     l281:
  1812                           
  1813                           ;GLCD_PIC_V1.1.c: 79: else{
  1814                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  1815  0013B2  2A08               	incf	glcdDrawRectangle@YS,f,c
  1816                           
  1817                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  1818  0013B4  2A09               	incf	glcdDrawRectangle@YE,f,c
  1819  0013B6                     l1243:
  1820                           
  1821                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  1822  0013B6  0E02               	movlw	2
  1823  0013B8  2619               	addwf	glcdDrawRectangle@XS,f,c
  1824                           
  1825                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  1826  0013BA  0E02               	movlw	2
  1827  0013BC                     L7:
  1828  0013BC  2607               	addwf	glcdDrawRectangle@XE,f,c
  1829  0013BE                     l282:
  1830                           
  1831                           ;GLCD_PIC_V1.1.c: 85: }
  1832                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  1833  0013BE  0E01               	movlw	1
  1834  0013C0  6E04               	movwf	glcdTransfer@cmd,c
  1835  0013C2  0E3C               	movlw	low GLCD_PIC@INST_RASET
  1836  0013C4  6EF6               	movwf	tblptrl,c
  1837  0013C6                     	if	1	;There is more than 1 active tblptr byte
  1838  0013C6  0E10               	movlw	high GLCD_PIC@INST_RASET
  1839  0013C8  6EF7               	movwf	tblptrh,c
  1840  0013CA                     	endif
  1841  0013CA                     	if	0	;There are less than 3 active tblptr bytes
  1842  0013CA                     	endif
  1843  0013CA  0008               	tblrd		*
  1844  0013CC  50F5               	movf	tablat,w,c
  1845  0013CE  EC73  F00B         	call	_glcdTransfer
  1846                           
  1847                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  1848  0013D2  0E00               	movlw	0
  1849  0013D4  6E04               	movwf	glcdTransfer@cmd,c
  1850  0013D6  0E00               	movlw	0
  1851  0013D8  EC73  F00B         	call	_glcdTransfer
  1852                           
  1853                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  1854  0013DC  0E00               	movlw	0
  1855  0013DE  6E04               	movwf	glcdTransfer@cmd,c
  1856  0013E0  5019               	movf	glcdDrawRectangle@XS,w,c
  1857  0013E2  EC73  F00B         	call	_glcdTransfer
  1858                           
  1859                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  1860  0013E6  0E00               	movlw	0
  1861  0013E8  6E04               	movwf	glcdTransfer@cmd,c
  1862  0013EA  0E00               	movlw	0
  1863  0013EC  EC73  F00B         	call	_glcdTransfer
  1864                           
  1865                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  1866  0013F0  0E00               	movlw	0
  1867  0013F2  6E04               	movwf	glcdTransfer@cmd,c
  1868  0013F4  0407               	decf	glcdDrawRectangle@XE,w,c
  1869  0013F6  EC73  F00B         	call	_glcdTransfer
  1870                           
  1871                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  1872  0013FA  0E01               	movlw	1
  1873  0013FC  6E04               	movwf	glcdTransfer@cmd,c
  1874  0013FE  0E3D               	movlw	low GLCD_PIC@INST_CASET
  1875  001400  6EF6               	movwf	tblptrl,c
  1876  001402                     	if	1	;There is more than 1 active tblptr byte
  1877  001402  0E10               	movlw	high GLCD_PIC@INST_CASET
  1878  001404  6EF7               	movwf	tblptrh,c
  1879  001406                     	endif
  1880  001406                     	if	0	;There are less than 3 active tblptr bytes
  1881  001406                     	endif
  1882  001406  0008               	tblrd		*
  1883  001408  50F5               	movf	tablat,w,c
  1884  00140A  EC73  F00B         	call	_glcdTransfer
  1885                           
  1886                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  1887  00140E  0E00               	movlw	0
  1888  001410  6E04               	movwf	glcdTransfer@cmd,c
  1889  001412  0E00               	movlw	0
  1890  001414  EC73  F00B         	call	_glcdTransfer
  1891                           
  1892                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  1893  001418  0E00               	movlw	0
  1894  00141A  6E04               	movwf	glcdTransfer@cmd,c
  1895  00141C  5008               	movf	glcdDrawRectangle@YS,w,c
  1896  00141E  EC73  F00B         	call	_glcdTransfer
  1897                           
  1898                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  1899  001422  0E00               	movlw	0
  1900  001424  6E04               	movwf	glcdTransfer@cmd,c
  1901  001426  0E00               	movlw	0
  1902  001428  EC73  F00B         	call	_glcdTransfer
  1903                           
  1904                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  1905  00142C  0E00               	movlw	0
  1906  00142E  6E04               	movwf	glcdTransfer@cmd,c
  1907  001430  0409               	decf	glcdDrawRectangle@YE,w,c
  1908  001432  EC73  F00B         	call	_glcdTransfer
  1909                           
  1910                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  1911  001436  0E01               	movlw	1
  1912  001438  6E04               	movwf	glcdTransfer@cmd,c
  1913  00143A  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  1914  00143C  6EF6               	movwf	tblptrl,c
  1915  00143E                     	if	1	;There is more than 1 active tblptr byte
  1916  00143E  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  1917  001440  6EF7               	movwf	tblptrh,c
  1918  001442                     	endif
  1919  001442                     	if	0	;There are less than 3 active tblptr bytes
  1920  001442                     	endif
  1921  001442  0008               	tblrd		*
  1922  001444  50F5               	movf	tablat,w,c
  1923  001446  EC73  F00B         	call	_glcdTransfer
  1924                           
  1925                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  1926  00144A  5019               	movf	glcdDrawRectangle@XS,w,c
  1927  00144C  1807               	xorwf	glcdDrawRectangle@XE,w,c
  1928  00144E  A4D8               	btfss	status,2,c
  1929  001450  D014               	goto	l283
  1930  001452  5008               	movf	glcdDrawRectangle@YS,w,c
  1931  001454  1809               	xorwf	glcdDrawRectangle@YE,w,c
  1932  001456  A4D8               	btfss	status,2,c
  1933  001458  D010               	goto	l283
  1934                           
  1935                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  1936  00145A  0E00               	movlw	0
  1937  00145C  6E04               	movwf	glcdTransfer@cmd,c
  1938  00145E  500A               	movf	glcdDrawRectangle@color,w,c
  1939  001460  EC73  F00B         	call	_glcdTransfer
  1940                           
  1941                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  1942  001464  0E00               	movlw	0
  1943  001466  6E04               	movwf	glcdTransfer@cmd,c
  1944  001468  500B               	movf	glcdDrawRectangle@color+1,w,c
  1945  00146A  EC73  F00B         	call	_glcdTransfer
  1946                           
  1947                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  1948  00146E  0E00               	movlw	0
  1949  001470  6E04               	movwf	glcdTransfer@cmd,c
  1950  001472  500C               	movf	glcdDrawRectangle@color+2,w,c
  1951  001474  EC73  F00B         	call	_glcdTransfer
  1952                           
  1953                           ;GLCD_PIC_V1.1.c: 117: }
  1954  001478  0012               	return	
  1955  00147A                     l283:
  1956                           
  1957                           ;GLCD_PIC_V1.1.c: 118: else{
  1958                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  1959  00147A  5019               	movf	glcdDrawRectangle@XS,w,c
  1960  00147C  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  1961  00147E  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  1962  001480  1E0E               	comf	??_glcdDrawRectangle,f,c
  1963  001482  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  1964  001484  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  1965  001486  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  1966  001488  5007               	movf	glcdDrawRectangle@XE,w,c
  1967  00148A  240E               	addwf	??_glcdDrawRectangle,w,c
  1968  00148C  6E01               	movwf	___wmul@multiplier,c
  1969  00148E  0E00               	movlw	0
  1970  001490  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  1971  001492  6E02               	movwf	___wmul@multiplier+1,c
  1972  001494  5008               	movf	glcdDrawRectangle@YS,w,c
  1973  001496  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  1974  001498  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  1975  00149A  1E10               	comf	??_glcdDrawRectangle+2,f,c
  1976  00149C  1E11               	comf	??_glcdDrawRectangle+3,f,c
  1977  00149E  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  1978  0014A0  2A11               	incf	??_glcdDrawRectangle+3,f,c
  1979  0014A2  5009               	movf	glcdDrawRectangle@YE,w,c
  1980  0014A4  2410               	addwf	??_glcdDrawRectangle+2,w,c
  1981  0014A6  6E03               	movwf	___wmul@multiplicand,c
  1982  0014A8  0E00               	movlw	0
  1983  0014AA  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  1984  0014AC  6E04               	movwf	___wmul@multiplicand+1,c
  1985  0014AE  EC87  F00B         	call	___wmul	;wreg free
  1986  0014B2  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  1987  0014B6  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  1988                           
  1989                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  1990                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  1991  0014BA  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  1992                           
  1993                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  1994  0014BE  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  1995                           
  1996                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  1997  0014C2  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  1998                           
  1999                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  2000  0014C6  908C               	bcf	3980,0,c	;volatile
  2001                           
  2002                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  2003  0014C8  828C               	bsf	3980,1,c	;volatile
  2004                           
  2005                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  2006  0014CA  0E00               	movlw	0
  2007  0014CC  6E15               	movwf	glcdDrawRectangle@i+1,c
  2008  0014CE  0E00               	movlw	0
  2009  0014D0  6E14               	movwf	glcdDrawRectangle@i,c
  2010  0014D2  D00B               	goto	l285
  2011  0014D4                     
  2012                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  2013  0014D4  5016               	movf	glcdDrawRectangle@colorData,w,c
  2014  0014D6  ECB2  F00B         	call	_spiSend
  2015                           
  2016                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  2017  0014DA  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  2018  0014DC  ECB2  F00B         	call	_spiSend
  2019                           
  2020                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  2021  0014E0  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  2022  0014E2  ECB2  F00B         	call	_spiSend
  2023  0014E6  4A14               	infsnz	glcdDrawRectangle@i,f,c
  2024  0014E8  2A15               	incf	glcdDrawRectangle@i+1,f,c
  2025  0014EA                     l285:
  2026  0014EA  5012               	movf	glcdDrawRectangle@numLoops,w,c
  2027  0014EC  5C14               	subwf	glcdDrawRectangle@i,w,c
  2028  0014EE  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  2029  0014F0  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  2030  0014F2  A0D8               	btfss	status,0,c
  2031  0014F4  D7EF               	goto	l286
  2032                           
  2033                           ;GLCD_PIC_V1.1.c: 142: }
  2034                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  2035  0014F6  808C               	bsf	3980,0,c	;volatile
  2036  0014F8  0012               	return	
  2037  0014FA                     __end_of_glcdDrawRectangle:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           wreg	equ	0xFE8
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _glcdTransfer *****************
  2047 ;; Defined at:
  2048 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  byte            1    wreg     unsigned char 
  2051 ;;  cmd             1    3[COMRAM] unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  byte            1    5[COMRAM] unsigned char 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:        3 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    2
  2070 ;; This function calls:
  2071 ;;		_spiSend
  2072 ;; This function is called by:
  2073 ;;		_glcdDrawRectangle
  2074 ;;		_glcdSetCOLMOD
  2075 ;;		_initGLCD
  2076 ;;		_glcdSetOrigin
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text6
  2081  0016E6                     __ptext6:
  2082                           	opt stack 0
  2083  0016E6                     _glcdTransfer:
  2084                           	opt stack 27
  2085                           
  2086                           ;incstack = 0
  2087                           ;glcdTransfer@byte stored from wreg
  2088  0016E6  6E06               	movwf	glcdTransfer@byte,c
  2089                           
  2090                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  2091  0016E8  0404               	decf	glcdTransfer@cmd,w,c
  2092  0016EA  B4D8               	btfsc	status,2,c
  2093  0016EC  D003               	goto	u140
  2094  0016EE  6A05               	clrf	??_glcdTransfer& (0+255),c
  2095  0016F0  2A05               	incf	??_glcdTransfer& (0+255),f,c
  2096  0016F2  D001               	goto	u158
  2097  0016F4                     u140:
  2098  0016F4  6A05               	clrf	??_glcdTransfer& (0+255),c
  2099  0016F6                     u158:
  2100  0016F6  4605               	rlncf	??_glcdTransfer,f,c
  2101  0016F8  508C               	movf	3980,w,c	;volatile
  2102  0016FA  1805               	xorwf	??_glcdTransfer,w,c
  2103  0016FC  0BFD               	andlw	-3
  2104  0016FE  1805               	xorwf	??_glcdTransfer,w,c
  2105  001700  6E8C               	movwf	3980,c	;volatile
  2106                           
  2107                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  2108  001702  908C               	bcf	3980,0,c	;volatile
  2109                           
  2110                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  2111  001704  5006               	movf	glcdTransfer@byte,w,c
  2112  001706  ECB2  F00B         	call	_spiSend
  2113                           
  2114                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  2115  00170A  808C               	bsf	3980,0,c	;volatile
  2116  00170C  0012               	return		;funcret
  2117  00170E                     __end_of_glcdTransfer:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           wreg	equ	0xFE8
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _spiSend *****************
  2127 ;; Defined at:
  2128 ;;		line 33 in file "SPI_PIC.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  val             1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  val             1    2[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        1 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    1
  2149 ;; This function calls:
  2150 ;;		_spiTransfer
  2151 ;; This function is called by:
  2152 ;;		_glcdTransfer
  2153 ;;		_glcdDrawRectangle
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text7
  2158  001764                     __ptext7:
  2159                           	opt stack 0
  2160  001764                     _spiSend:
  2161                           	opt stack 27
  2162                           
  2163                           ;incstack = 0
  2164                           ;spiSend@val stored from wreg
  2165  001764  6E03               	movwf	spiSend@val,c
  2166                           
  2167                           ;SPI_PIC.c: 41: spiTransfer(val);
  2168  001766  5003               	movf	spiSend@val,w,c
  2169  001768  EC9A  F00B         	call	_spiTransfer
  2170  00176C  0012               	return		;funcret
  2171  00176E                     __end_of_spiSend:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           wreg	equ	0xFE8
  2178                           status	equ	0xFD8
  2179                           
  2180 ;; *************** function _spiTransfer *****************
  2181 ;; Defined at:
  2182 ;;		line 12 in file "SPI_PIC.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  byteToTransf    1    wreg     unsigned char 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      unsigned char 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;Total ram usage:        2 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_spiSend
  2206 ;;		_spiReceive
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text8
  2211  001734                     __ptext8:
  2212                           	opt stack 0
  2213  001734                     _spiTransfer:
  2214                           	opt stack 27
  2215                           
  2216                           ;incstack = 0
  2217                           ;spiTransfer@byteToTransfer stored from wreg
  2218  001734  6E02               	movwf	spiTransfer@byteToTransfer,c
  2219                           
  2220                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  2221  001736  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  2222  00173A                     l939:
  2223  00173A  B69E               	btfsc	3998,3,c	;volatile
  2224  00173C  D002               	goto	u10
  2225  00173E  0E01               	movlw	1
  2226  001740  D001               	goto	u12
  2227  001742                     u10:
  2228  001742  0E00               	movlw	0
  2229  001744                     u12:
  2230  001744  6E01               	movwf	??_spiTransfer& (0+255),c
  2231  001746  B0C7               	btfsc	4039,0,c	;volatile
  2232  001748  D002               	goto	u20
  2233  00174A  0E01               	movlw	1
  2234  00174C  D001               	goto	u22
  2235  00174E                     u20:
  2236  00174E  0E00               	movlw	0
  2237  001750                     u22:
  2238  001750  1001               	iorwf	??_spiTransfer,w,c
  2239  001752  E1F3               	bnz	l939
  2240                           
  2241                           ;SPI_PIC.c: 30: return SSPBUF;
  2242  001754  50C9               	movf	4041,w,c	;volatile
  2243  001756  0012               	return	
  2244  001758                     __end_of_spiTransfer:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           wreg	equ	0xFE8
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function ___wmul *****************
  2254 ;; Defined at:
  2255 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  multiplier      2    0[COMRAM] unsigned int 
  2258 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  product         2    4[COMRAM] unsigned int 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  2    0[COMRAM] unsigned int 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0, prodl, prodh
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;Total ram usage:        6 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_glcdDrawRectangle
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text9
  2284  00170E                     __ptext9:
  2285                           	opt stack 0
  2286  00170E                     ___wmul:
  2287                           	opt stack 28
  2288                           
  2289                           ;incstack = 0
  2290  00170E  5001               	movf	___wmul@multiplier,w,c
  2291  001710  0203               	mulwf	___wmul@multiplicand,c
  2292  001712  CFF3 F005          	movff	prodl,___wmul@product
  2293  001716  CFF4 F006          	movff	prodh,___wmul@product+1
  2294  00171A  5001               	movf	___wmul@multiplier,w,c
  2295  00171C  0204               	mulwf	___wmul@multiplicand+1,c
  2296  00171E  50F3               	movf	prodl,w,c
  2297  001720  2606               	addwf	___wmul@product+1,f,c
  2298  001722  5002               	movf	___wmul@multiplier+1,w,c
  2299  001724  0203               	mulwf	___wmul@multiplicand,c
  2300  001726  50F3               	movf	prodl,w,c
  2301  001728  2606               	addwf	___wmul@product+1,f,c
  2302  00172A  C005  F001         	movff	___wmul@product,?___wmul
  2303  00172E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2304  001732  0012               	return	
  2305  001734                     __end_of___wmul:
  2306                           	opt stack 0
  2307                           tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           wreg	equ	0xFE8
  2314                           status	equ	0xFD8
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           wreg	equ	0xFE8
  2322                           status	equ	0xFD8
  2323                           
  2324                           	psect	rparam
  2325  0000                     tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           wreg	equ	0xFE8
  2332                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      38
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_glcdDrawPixel
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdDrawPixel->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   28651
                                             32 COMRAM     5     5      0
                      _glcdDrawPixel
                  _glcdDrawRectangle
                           _initGLCD
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   15566
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4606
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdDrawPixel                                        7     2      5    6695
                                             25 COMRAM     7     2      5
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7    6387
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4558
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      30
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _glcdDrawPixel
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     25      26       1       29.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      26      34        0.0%
DATA                 0      0      26       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr  8 23:53:24 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                                u10 1742                                  u20 174E  
                                u12 1744                                  u22 1750  
                       __CFG_CPD$ON 000000                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l301 1674  
                               l161 16C6                                 l129 1536  
                               l163 16DC                                 l164 16B8  
                               l165 16BC                                 l166 16C0  
                               l281 13B2                                 l282 13BE  
                               l283 147A                                 l291 1616  
                               l292 163A                                 l285 14EA  
                               l277 138C                                 l286 14D4  
                               l279 13A0                                 l296 167C  
                               l297 1662                                 l298 168E  
                               l299 166A                                 l939 173A  
                      __CFG_CPB$OFF 000000                                 u140 16F4  
                               u307 10DE                                 u317 1370  
                               u158 16F6                                 _RED 1019  
                               u257 1586                                 u267 159E  
                               u277 15E0                                 u287 1086  
                               u297 10B2           __end_ofGLCD_PIC@INST_TEON 1039  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l1243 13B6  
                              _BLUE 1009                                _LATA 000F89  
                              _LATB 000F8A                                _LATC 000F8B  
                              _LATD 000F8C                                _LATE 000F8D  
                              _GREY 1021                                _main 14FA  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                       __CFG_IESO$OFF 000000  
                     __CFG_MCLRE$ON 000000                        ___param_bank 000000  
                             ?_main 0001                               _BLACK 1025  
                  __end_of_INST_NOP 1069                               _GREEN 100D  
                             _WHITE 101D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
     __end_ofGLCD_PIC@INST_VMOFCTR2 102A                      __CFG_EBTRB$OFF 000000  
                             main@x 0024                               main@y 0025  
                   __end_of_spiInit 16E6                               tablat 000FF5  
                   __end_of_spiSend 176E                        main@rotation 0023  
                             status 000FD8                      __CFG_PBADEN$ON 000000  
                      __end_of_BLUE 100D                        __end_of_GREY 1025  
                   __initialization 1758                        __end_of_main 15F0  
      glcdSetCOLMOD@numBitsPerPixel 0007                      __CFG_OSC$HSPLL 000000  
                            ??_main 0021                       __activetblptr 000002  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                   glcdDrawPixel@XS 0020                     glcdDrawPixel@YS 001A  
                 _glcdDrawRectangle 137A                   __end_of_INST_TEON 1059  
                            _INDIGO 1005                __end_of_glcdTransfer 170E  
                            _ORANGE 1015                  ?_glcdDrawRectangle 0007  
                            _VIOLET 1001                              _YELLOW 1011  
                            _SSPBUF 000FC9                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0012                 ??_glcdDrawRectangle 000E  
                            ___wmul 170E                    __end_of_initGLCD 137A  
                    __CFG_STVREN$ON 000000            __end_ofGLCD_PIC@INST_NOP 1049  
                      ?_spiTransfer 0001                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_spiInit 0001  
                         ??_spiSend 0003           __end_of_glcdDrawRectangle 14FA  
                        __accesstop 0080             __end_of__initialization 175A  
                     __end_of_BLACK 1029                       ___rparam_used 000001  
                     __end_of_GREEN 1011                       __end_of_WHITE 1021  
       __end_ofGLCD_PIC@INST_GAMSET 1041         __end_ofGLCD_PIC@INST_COLMOD 1035  
       __end_ofGLCD_PIC@INST_MADCTL 1038         __end_ofGLCD_PIC@INST_DISPON 103F  
       __end_ofGLCD_PIC@INST_IDMOFF 1037                      __pcstackCOMRAM 0001  
       __end_ofGLCD_PIC@INST_INVCTR 1031         __end_ofGLCD_PIC@INST_INVOFF 1043  
       __end_ofGLCD_PIC@INST_PWCTR1 1030         __end_ofGLCD_PIC@INST_PWCTR2 102F  
       __end_ofGLCD_PIC@INST_PWCTR3 102E         __end_ofGLCD_PIC@INST_PWCTR4 102D  
       __end_ofGLCD_PIC@INST_PWCTR5 102C         __end_ofGLCD_PIC@INST_VMCTR1 102B  
       __end_ofGLCD_PIC@INST_SLPOUT 1046               __end_of_glcdDrawPixel 165E  
                     _INST_VMOFCTR2 1049               __end_of_glcdSetCOLMOD 16AE  
                           ?___wmul 0001                  glcdDrawRectangle@i 0014  
                __end_of_INST_CASET 105E                  __end_of_INST_IDMON 1056  
                __end_of_INST_INVON 1062                  __end_of_INST_RASET 105D  
                __end_of_INST_RAMWR 105C                  __end_of_INST_TEOFF 105A  
                __end_of_INST_NORON 1064                  __end_of_INST_PTLAR 105B  
                __end_of_INST_SLPIN 1067                  __end_of_INST_PTLON 1065  
             __size_of_glcdTransfer 0028          __size_of_glcdDrawRectangle 0180  
         spiTransfer@byteToTransfer 0002                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
                glcdDrawPixel@color 001B                             __Hparam 0000  
                    _GLCD_SIZE_HORZ 106A                             __Lparam 0000  
                    _GLCD_SIZE_VERT 1069                __end_of_INST_DISPOFF 1060  
              __end_of_INST_FRMCTR1 1054                __end_of_INST_FRMCTR2 1053  
              __end_of_INST_FRMCTR3 1052                     __size_of___wmul 0026  
                      __psmallconst 1000                             __pcinit 1758  
                      _glcdTransfer 16E6                             __ramtop 1000  
                           __ptext0 14FA                             __ptext1 106E  
                           __ptext2 16AE                             __ptext3 165E  
                           __ptext4 15F0                             __ptext5 137A  
                           __ptext6 16E6                             __ptext7 1764  
                           __ptext8 1734                             __ptext9 170E  
              __end_of_INST_SWRESET 1068                             _spiInit 16AE  
                           _spiSend 1764                __size_of_spiTransfer 0024  
              end_of_initialization 175A               GLCD_PIC@INST_VMOFCTR2 1029  
                        ??_initGLCD 001A                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 106B                           _INST_TEON 1058  
            __end_of_GLCD_SIZE_VERT 106A                    glcdTransfer@byte 0006  
                    spiInit@divider 0001                           _TRISCbits 000F94  
                         _TRISDbits 000F95                      __end_of_INDIGO 1009  
                    __end_of_ORANGE 1019                      __end_of_VIOLET 1005  
                    __end_of_YELLOW 1015        __end_ofGLCD_PIC@INST_DISPOFF 1040  
      __end_ofGLCD_PIC@INST_FRMCTR1 1034        __end_ofGLCD_PIC@INST_FRMCTR2 1033  
      __end_ofGLCD_PIC@INST_FRMCTR3 1032                      __end_of___wmul 1734  
      __end_ofGLCD_PIC@INST_SWRESET 1048                 start_initialization 1758  
                       __end_of_RED 101D              glcdDrawRectangle@color 000A  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D          _GLCD_ADDRESSABLE_SIZE_HORZ 106C  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C          _GLCD_ADDRESSABLE_SIZE_VERT 106B  
                       __pbssCOMRAM 0026          __end_ofGLCD_PIC@INST_CASET 103E  
        __end_ofGLCD_PIC@INST_IDMON 1036          __end_ofGLCD_PIC@INST_INVON 1042  
        __end_ofGLCD_PIC@INST_RASET 103D          __end_ofGLCD_PIC@INST_RAMWR 103C  
                      _INST_DISPOFF 105F          __end_ofGLCD_PIC@INST_TEOFF 103A  
        __end_ofGLCD_PIC@INST_NORON 1044          __end_ofGLCD_PIC@INST_PTLAR 103B  
        __end_ofGLCD_PIC@INST_SLPIN 1047          __end_ofGLCD_PIC@INST_PTLON 1045  
                      _INST_FRMCTR1 1053                        _INST_FRMCTR2 1052  
                      _INST_FRMCTR3 1051                   __size_of_initGLCD 030C  
                      _INST_SWRESET 1067              __size_of_glcdDrawPixel 006E  
                 __CFG_CCP2MX$PORTC 000000              __size_of_glcdSetCOLMOD 0050  
                       __smallconst 1000                 glcdDrawRectangle@XE 0007  
               glcdDrawRectangle@YE 0009                 glcdDrawRectangle@XS 0019  
               glcdDrawRectangle@YS 0008                 __end_of_INST_GAMSET 1061  
                          ?_spiInit 0001                 __end_of_INST_COLMOD 1055  
                          ?_spiSend 0001                 __end_of_INST_MADCTL 1058  
               __end_of_INST_DISPON 105F                 __end_of_INST_IDMOFF 1057  
              GLCD_PIC@INST_DISPOFF 103F                 __end_of_INST_INVCTR 1051  
               __end_of_INST_INVOFF 1063                GLCD_PIC@INST_FRMCTR1 1033  
              GLCD_PIC@INST_FRMCTR2 1032                GLCD_PIC@INST_FRMCTR3 1031  
               __end_of_INST_PWCTR1 1050                 __end_of_INST_PWCTR2 104F  
               __end_of_INST_PWCTR3 104E                 __end_of_INST_PWCTR4 104D  
               __end_of_INST_PWCTR5 104C                 __end_of_INST_VMCTR1 104B  
               __end_of_INST_SLPOUT 1066                      ___wmul@product 0005  
                          _LATDbits 000F8C                GLCD_PIC@INST_SWRESET 1047  
                          _INST_NOP 1068                          spiSend@val 0003  
                  __CFG_WDTPS$32768 000000                     glcdTransfer@cmd 0004  
                 ___wmul@multiplier 0001                       ??_spiTransfer 0001  
              glcdSetCOLMOD@rawData 0008                       _glcdDrawPixel 15F0  
                     _glcdSetCOLMOD 165E                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                       _INST_GAMSET 1060                         _INST_COLMOD 1054  
                       _INST_MADCTL 1057                         _INST_DISPON 105E  
                       _INST_IDMOFF 1056                         _INST_INVCTR 1050  
                       _INST_INVOFF 1062                      ?_glcdDrawPixel 001A  
                       _INST_PWCTR1 104F                         _INST_PWCTR2 104E  
                       _INST_PWCTR3 104D                         _INST_PWCTR4 104C  
                       _INST_PWCTR5 104B                         _INST_VMCTR1 104A  
                       _INST_SLPOUT 1065                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 104A  
                        _MADCTLbits 0026                 __end_of_spiTransfer 1758  
                    ?_glcdSetCOLMOD 0001                            _initGLCD 106E  
               GLCD_PIC@INST_GAMSET 1040                 GLCD_PIC@INST_COLMOD 1034  
               GLCD_PIC@INST_MADCTL 1037                 GLCD_PIC@INST_DISPON 103E  
               GLCD_PIC@INST_IDMOFF 1036                       __size_of_main 00F6  
               GLCD_PIC@INST_INVCTR 1030                 GLCD_PIC@INST_INVOFF 1042  
               GLCD_PIC@INST_PWCTR1 102F                 GLCD_PIC@INST_PWCTR2 102E  
               GLCD_PIC@INST_PWCTR3 102D                 GLCD_PIC@INST_PWCTR4 102C  
               GLCD_PIC@INST_PWCTR5 102B                 GLCD_PIC@INST_VMCTR1 102A  
               GLCD_PIC@INST_SLPOUT 1045                          _INST_CASET 105D  
                        _INST_IDMON 1055                          _INST_INVON 1061  
                        _INST_RASET 105C                          _INST_RAMWR 105B  
                        _INST_TEOFF 1059                          _INST_NORON 1063  
                        _INST_PTLAR 105A                          _INST_SLPIN 1066  
                        _INST_PTLON 1064                  GLCD_PIC@INST_CASET 103D  
                GLCD_PIC@INST_IDMON 1035                  GLCD_PIC@INST_INVON 1041  
                GLCD_PIC@INST_RASET 103C                  GLCD_PIC@INST_RAMWR 103B  
                GLCD_PIC@INST_TEOFF 1039                  GLCD_PIC@INST_NORON 1043  
                GLCD_PIC@INST_PTLAR 103A                  GLCD_PIC@INST_SLPIN 1046  
                GLCD_PIC@INST_PTLON 1044          glcdDrawRectangle@colorData 0016  
                     ?_glcdTransfer 0004                     ??_glcdDrawPixel 001F  
                       _spiTransfer 1734                   GLCD_PIC@INST_TEON 1038  
                       _SSPCON1bits 000FC6                     ??_glcdSetCOLMOD 0007  
                  GLCD_PIC@INST_NOP 1048  
