

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 11:03:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4620 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  001620                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _UART
    65  001620  14                 	db	low _uart
    66  001621  00                 	db	high _uart
    67                           
    68                           ;initializer for main@F3010
    69  001622  48                 	db	72
    70                           
    71                           	psect	smallconst
    72  001000                     __psmallconst:
    73                           	opt stack 0
    74  001000  00                 	db	0
    75  001001                     _dpowers:
    76                           	opt stack 0
    77  001001  0001               	dw	1
    78  001003  000A               	dw	10
    79  001005  0064               	dw	100
    80  001007  03E8               	dw	1000
    81  001009  2710               	dw	10000
    82  00100B                     __end_of_dpowers:
    83                           	opt stack 0
    84  00100B                     _LCD_LEFT:
    85                           	opt stack 0
    86  00100B  00                 	db	0
    87  00100C                     __end_of_LCD_LEFT:
    88                           	opt stack 0
    89  00100C                     _LCD_RIGHT:
    90                           	opt stack 0
    91  00100C  01                 	db	1
    92  00100D                     __end_of_LCD_RIGHT:
    93                           	opt stack 0
    94  00100D                     _LCD_SIZE_VERT:
    95                           	opt stack 0
    96  00100D  02                 	db	2
    97  00100E                     __end_of_LCD_SIZE_VERT:
    98                           	opt stack 0
    99  00100E                     _LCD_SIZE_HORZ:
   100                           	opt stack 0
   101  00100E  10                 	db	16
   102  00100F                     __end_of_LCD_SIZE_HORZ:
   103                           	opt stack 0
   104  00100F                     _LCD_VERT_LIMIT:
   105                           	opt stack 0
   106  00100F  02                 	db	2
   107  001010                     __end_of_LCD_VERT_LIMIT:
   108                           	opt stack 0
   109  001010                     _LCD_HORZ_LIMIT:
   110                           	opt stack 0
   111  001010  28                 	db	40
   112  001011                     __end_of_LCD_HORZ_LIMIT:
   113                           	opt stack 0
   114  0000                     _SPBRG	set	4015
   115  0000                     _RCREG	set	4014
   116  0000                     _RCSTAbits	set	4011
   117  0000                     _TXREG	set	4013
   118  0000                     _TXSTAbits	set	4012
   119  0000                     _ADCON1	set	4033
   120  0000                     _ADCON0	set	4034
   121  0000                     _TRISE	set	3990
   122  0000                     _TRISD	set	3989
   123  0000                     _TRISC	set	3988
   124  0000                     _TRISB	set	3987
   125  0000                     _TRISA	set	3986
   126  0000                     _LATE	set	3981
   127  0000                     _LATC	set	3979
   128  0000                     _LATB	set	3978
   129  0000                     _LATA	set	3977
   130  0000                     _INTCONbits	set	4082
   131  0000                     _LATD	set	3980
   132  0000                     _LATDbits	set	3980
   133  0000                     _TRISC7	set	31911
   134  0000                     _TRISC6	set	31910
   135  0000                     _RCIE	set	31981
   136  0000                     _RCIF	set	31989
   137  0000                     _TXIE	set	31980
   138  0000                     _TRMT	set	32097
   139  0000                     _TXIF	set	31988
   140  001011                     STR_2:
   141  001011  25                 	db	37
   142  001012  64                 	db	100	;'d'
   143  001013  00                 	db	0
   144  001014                     STR_1:
   145  001014  73                 	db	115	;'s'
   146  001015  00                 	db	0
   147                           
   148                           ; #config settings
   149  001016  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           	psect	cinit
   152  0015C4                     __pcinit:
   153                           	opt stack 0
   154  0015C4                     start_initialization:
   155                           	opt stack 0
   156  0015C4                     __initialization:
   157                           	opt stack 0
   158                           
   159                           ; Initialize objects allocated to COMRAM (3 bytes)
   160                           ; load TBLPTR registers with __pidataCOMRAM
   161  0015C4  0E20               	movlw	low __pidataCOMRAM
   162  0015C6  6EF6               	movwf	tblptrl,c
   163  0015C8  0E16               	movlw	high __pidataCOMRAM
   164  0015CA  6EF7               	movwf	tblptrh,c
   165  0015CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   166  0015CE  6EF8               	movwf	tblptru,c
   167  0015D0  0009               	tblrd		*+	;fetch initializer
   168  0015D2  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   169  0015D6  0009               	tblrd		*+	;fetch initializer
   170  0015D8  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   171  0015DC  0009               	tblrd		*+	;fetch initializer
   172  0015DE  CFF5 F03F          	movff	tablat,__pdataCOMRAM+2
   173                           
   174                           ; Clear objects allocated to COMRAM (31 bytes)
   175  0015E2  EE00  F001         	lfsr	0,__pbssCOMRAM
   176  0015E6  0E1F               	movlw	31
   177  0015E8                     clear_0:
   178  0015E8  6AEE               	clrf	postinc0,c
   179  0015EA  06E8               	decf	wreg,f,c
   180  0015EC  E1FD               	bnz	clear_0
   181  0015EE                     end_of_initialization:
   182                           	opt stack 0
   183  0015EE                     __end_of__initialization:
   184                           	opt stack 0
   185  0015EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   186  0015F0  6EF8               	movwf	tblptru,c
   187  0015F2  0100               	movlb	0
   188  0015F4  EF9B  F008         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	bssCOMRAM
   197  000001                     __pbssCOMRAM:
   198                           	opt stack 0
   199  000001                     _UARTinterruptState:
   200                           	opt stack 0
   201  000001                     	ds	1
   202  000002                     	ds	1
   203  000003                     _LCDinterruptState:
   204                           	opt stack 0
   205  000003                     	ds	1
   206  000004                     _arr_dataRX:
   207                           	opt stack 0
   208  000004                     	ds	16
   209  000014                     _uart:
   210                           	opt stack 0
   211  000014                     	ds	12
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           tblptrl	equ	0xFF6
   215                           tablat	equ	0xFF5
   216                           postinc0	equ	0xFEE
   217                           wreg	equ	0xFE8
   218                           
   219                           	psect	dataCOMRAM
   220  00003D                     __pdataCOMRAM:
   221                           	opt stack 0
   222  00003D                     _UART:
   223                           	opt stack 0
   224  00003D                     	ds	2
   225  00003F                     main@F3010:
   226                           	opt stack 0
   227  00003F                     	ds	1
   228                           tblptru	equ	0xFF8
   229                           tblptrh	equ	0xFF7
   230                           tblptrl	equ	0xFF6
   231                           tablat	equ	0xFF5
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	cstackCOMRAM
   236  000020                     __pcstackCOMRAM:
   237                           	opt stack 0
   238  000020                     ??_uartReceiveBlocking:
   239  000020                     ?___lwdiv:
   240                           	opt stack 0
   241  000020                     ?___aldiv:
   242                           	opt stack 0
   243  000020                     lcdNibble@temp:
   244                           	opt stack 0
   245  000020                     ___lwdiv@dividend:
   246                           	opt stack 0
   247  000020                     ___aldiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 4 bytes @ 0x0
   251  000020                     	ds	1
   252  000021                     lcdNibble@data:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x1
   256  000021                     	ds	1
   257  000022                     lcdInst@data:
   258                           	opt stack 0
   259  000022                     putch@data:
   260                           	opt stack 0
   261  000022                     uartReceiveBlocking@temp:
   262                           	opt stack 0
   263  000022                     ___lwdiv@divisor:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x2
   267  000022                     	ds	1
   268  000023                     ??_initLCD:
   269  000023                     uartReceiveBlocking@numBytes:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x3
   273  000023                     	ds	1
   274  000024                     uartReceiveBlocking@numReceives:
   275                           	opt stack 0
   276  000024                     ___lwdiv@quotient:
   277                           	opt stack 0
   278  000024                     ___aldiv@divisor:
   279                           	opt stack 0
   280                           
   281                           ; 4 bytes @ 0x4
   282  000024                     	ds	2
   283  000026                     ___lwdiv@counter:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x6
   287  000026                     	ds	1
   288  000027                     ?___lwmod:
   289                           	opt stack 0
   290  000027                     ___lwmod@dividend:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x7
   294  000027                     	ds	1
   295  000028                     ___aldiv@counter:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x8
   299  000028                     	ds	1
   300  000029                     ___aldiv@sign:
   301                           	opt stack 0
   302  000029                     ___lwmod@divisor:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306  000029                     	ds	1
   307  00002A                     ___aldiv@quotient:
   308                           	opt stack 0
   309                           
   310                           ; 4 bytes @ 0xA
   311  00002A                     	ds	1
   312  00002B                     ___lwmod@counter:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0xB
   316  00002B                     	ds	1
   317  00002C                     ?_printf:
   318                           	opt stack 0
   319  00002C                     printf@f:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xC
   323  00002C                     	ds	2
   324  00002E                     UART_Init@baud:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0xE
   328  00002E                     	ds	2
   329  000030                     ??_printf:
   330                           
   331                           ; 1 bytes @ 0x10
   332  000030                     	ds	1
   333  000031                     printf@ap:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x11
   337  000031                     	ds	1
   338  000032                     ??_UART_Init:
   339                           
   340                           ; 1 bytes @ 0x12
   341  000032                     	ds	1
   342  000033                     printf@flag:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x13
   346  000033                     	ds	1
   347  000034                     printf@prec:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x14
   351  000034                     	ds	1
   352  000035                     printf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x15
   356  000035                     	ds	2
   357  000037                     printf@c:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0x17
   361  000037                     	ds	1
   362  000038                     ??_main:
   363                           
   364                           ; 1 bytes @ 0x18
   365  000038                     	ds	3
   366  00003B                     main@arr:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x1B
   370  00003B                     	ds	1
   371  00003C                     main@i:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x1C
   375  00003C                     	ds	1
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           
   383 ;;
   384 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   385 ;;
   386 ;; *************** function _main *****************
   387 ;; Defined at:
   388 ;;		line 28 in file "main.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;		None
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  i               1   28[COMRAM] unsigned char 
   393 ;;  arr             1   27[COMRAM] unsigned char [1]
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   407 ;;Total ram usage:        5 bytes
   408 ;; Hardware stack levels required when called:    3
   409 ;; This function calls:
   410 ;;		_UART_Init
   411 ;;		_initLCD
   412 ;;		_printf
   413 ;;		_uartReceiveBlocking
   414 ;; This function is called by:
   415 ;;		Startup code after reset
   416 ;; This function uses a non-reentrant model
   417 ;;
   418                           
   419                           	psect	text0
   420  001136                     __ptext0:
   421                           	opt stack 0
   422  001136                     _main:
   423                           	opt stack 28
   424                           
   425                           ;main.c: 34: LATA = 0x00;
   426                           
   427                           ;incstack = 0
   428  001136  0E00               	movlw	0
   429  001138  6E89               	movwf	3977,c	;volatile
   430                           
   431                           ;main.c: 35: LATB = 0x00;
   432  00113A  0E00               	movlw	0
   433  00113C  6E8A               	movwf	3978,c	;volatile
   434                           
   435                           ;main.c: 36: LATC = 0x00;
   436  00113E  0E00               	movlw	0
   437  001140  6E8B               	movwf	3979,c	;volatile
   438                           
   439                           ;main.c: 37: LATD = 0x00;
   440  001142  0E00               	movlw	0
   441  001144  6E8C               	movwf	3980,c	;volatile
   442                           
   443                           ;main.c: 38: LATE = 0x00;
   444  001146  0E00               	movlw	0
   445  001148  6E8D               	movwf	3981,c	;volatile
   446                           
   447                           ;main.c: 42: TRISA = 0xFF;
   448  00114A  6892               	setf	3986,c	;volatile
   449                           
   450                           ;main.c: 43: TRISB = 0xFF;
   451  00114C  6893               	setf	3987,c	;volatile
   452                           
   453                           ;main.c: 44: TRISC = 0b10000000;
   454  00114E  0E80               	movlw	128
   455  001150  6E94               	movwf	3988,c	;volatile
   456                           
   457                           ;main.c: 48: TRISD = 0x00;
   458  001152  0E00               	movlw	0
   459  001154  6E95               	movwf	3989,c	;volatile
   460                           
   461                           ;main.c: 49: TRISE = 0x00;
   462  001156  0E00               	movlw	0
   463  001158  6E96               	movwf	3990,c	;volatile
   464                           
   465                           ;main.c: 52: ADCON0 = 0x00;
   466  00115A  0E00               	movlw	0
   467  00115C  6EC2               	movwf	4034,c	;volatile
   468                           
   469                           ;main.c: 53: ADCON1 = 0b00001111;
   470  00115E  0E0F               	movlw	15
   471  001160  6EC1               	movwf	4033,c	;volatile
   472                           
   473                           ;main.c: 59: UART_Init(9600);
   474  001162  0E80               	movlw	128
   475  001164  6E2E               	movwf	UART_Init@baud,c
   476  001166  0E25               	movlw	37
   477  001168  6E2F               	movwf	UART_Init@baud+1,c
   478  00116A  0E00               	movlw	0
   479  00116C  6E30               	movwf	UART_Init@baud+2,c
   480  00116E  0E00               	movlw	0
   481  001170  6E31               	movwf	UART_Init@baud+3,c
   482  001172  ECF2  F009         	call	_UART_Init	;wreg free
   483                           
   484                           ;main.c: 62: unsigned char arr[1] = {'H'};
   485  001176  C03F  F03B         	movff	main@F3010,main@arr
   486                           
   487                           ;main.c: 68: initLCD();
   488  00117A  EC9B  F00A         	call	_initLCD	;wreg free
   489  00117E                     
   490                           ;main.c: 70: uartReceiveBlocking(1);
   491  00117E  0E01               	movlw	1
   492  001180  EC17  F009         	call	_uartReceiveBlocking
   493                           
   494                           ;main.c: 71: for (unsigned char i = 0; i < UART->_numReceives; i ++){
   495  001184  0E00               	movlw	0
   496  001186  6E3C               	movwf	main@i,c
   497  001188  D047               	goto	l117
   498  00118A                     
   499                           ;main.c: 72: if (UART->_dataRX[i] == 'a'){
   500  00118A  503C               	movf	main@i,w,c
   501  00118C  0D01               	mullw	1
   502  00118E  EE20 F004          	lfsr	2,4
   503  001192  503D               	movf	_UART,w,c
   504  001194  26D9               	addwf	fsr2l,f,c
   505  001196  503E               	movf	_UART+1,w,c
   506  001198  22DA               	addwfc	fsr2h,f,c
   507  00119A  CFDE F038          	movff	postinc2,??_main
   508  00119E  CFDD F039          	movff	postdec2,??_main+1
   509  0011A2  50F3               	movf	prodl,w,c
   510  0011A4  2438               	addwf	??_main,w,c
   511  0011A6  6ED9               	movwf	fsr2l,c
   512  0011A8  50F4               	movf	prodh,w,c
   513  0011AA  2039               	addwfc	??_main+1,w,c
   514  0011AC  6EDA               	movwf	fsr2h,c
   515  0011AE  0E61               	movlw	97
   516  0011B0  18DE               	xorwf	postinc2,w,c
   517  0011B2  A4D8               	btfss	status,2,c
   518  0011B4  D013               	goto	l119
   519                           
   520                           ;main.c: 73: initLCD();
   521  0011B6  EC9B  F00A         	call	_initLCD	;wreg free
   522                           
   523                           ;main.c: 74: printf("s");
   524  0011BA  0E14               	movlw	low STR_1
   525  0011BC  6E2C               	movwf	printf@f,c
   526  0011BE  0E10               	movlw	high STR_1
   527  0011C0  6E2D               	movwf	printf@f+1,c
   528  0011C2  EC0C  F008         	call	_printf	;wreg free
   529                           
   530                           ;main.c: 75: _delay((unsigned long)((100)*(40000000/4000.0)));
   531  0011C6  0E06               	movlw	6
   532  0011C8  6E39               	movwf	(??_main+1)& (0+255),c
   533  0011CA  0E13               	movlw	19
   534  0011CC  6E38               	movwf	??_main& (0+255),c
   535  0011CE  0EAE               	movlw	174
   536  0011D0                     u687:
   537  0011D0  2EE8               	decfsz	wreg,f,c
   538  0011D2  D7FE               	bra	u687
   539  0011D4  2E38               	decfsz	??_main& (0+255),f,c
   540  0011D6  D7FC               	bra	u687
   541  0011D8  2E39               	decfsz	(??_main+1)& (0+255),f,c
   542  0011DA  D7FA               	bra	u687
   543  0011DC                     l119:
   544                           
   545                           ;main.c: 76: }
   546                           ;main.c: 77: printf("%d", UART->_dataRX[i]);
   547  0011DC  0E11               	movlw	low STR_2
   548  0011DE  6E2C               	movwf	printf@f,c
   549  0011E0  0E10               	movlw	high STR_2
   550  0011E2  6E2D               	movwf	printf@f+1,c
   551  0011E4  503C               	movf	main@i,w,c
   552  0011E6  0D01               	mullw	1
   553  0011E8  EE20 F004          	lfsr	2,4
   554  0011EC  503D               	movf	_UART,w,c
   555  0011EE  26D9               	addwf	fsr2l,f,c
   556  0011F0  503E               	movf	_UART+1,w,c
   557  0011F2  22DA               	addwfc	fsr2h,f,c
   558  0011F4  CFDE F038          	movff	postinc2,??_main
   559  0011F8  CFDD F039          	movff	postdec2,??_main+1
   560  0011FC  50F3               	movf	prodl,w,c
   561  0011FE  2438               	addwf	??_main,w,c
   562  001200  6ED9               	movwf	fsr2l,c
   563  001202  50F4               	movf	prodh,w,c
   564  001204  2039               	addwfc	??_main+1,w,c
   565  001206  6EDA               	movwf	fsr2h,c
   566  001208  50DF               	movf	indf2,w,c
   567  00120A  6E3A               	movwf	(??_main+2)& (0+255),c
   568  00120C  503A               	movf	??_main+2,w,c
   569  00120E  6E2E               	movwf	?_printf+2,c
   570  001210  6A2F               	clrf	?_printf+3,c
   571  001212  EC0C  F008         	call	_printf	;wreg free
   572  001216  2A3C               	incf	main@i,f,c
   573  001218                     l117:
   574  001218  EE20 F007          	lfsr	2,7
   575  00121C  503D               	movf	_UART,w,c
   576  00121E  26D9               	addwf	fsr2l,f,c
   577  001220  503E               	movf	_UART+1,w,c
   578  001222  22DA               	addwfc	fsr2h,f,c
   579  001224  50DE               	movf	postinc2,w,c
   580  001226  5C3C               	subwf	main@i,w,c
   581  001228  B0D8               	btfsc	status,0,c
   582  00122A  D7A9               	goto	l116
   583  00122C  D7AE               	goto	l118
   584  00122E                     __end_of_main:
   585                           	opt stack 0
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           prodh	equ	0xFF4
   591                           prodl	equ	0xFF3
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           indf2	equ	0xFDF
   595                           postinc2	equ	0xFDE
   596                           postdec2	equ	0xFDD
   597                           fsr2h	equ	0xFDA
   598                           fsr2l	equ	0xFD9
   599                           status	equ	0xFD8
   600                           
   601 ;; *************** function _uartReceiveBlocking *****************
   602 ;; Defined at:
   603 ;;		line 103 in file "UART_PIC.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  numBytes        1    wreg     unsigned char 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  numBytes        1    3[COMRAM] unsigned char 
   608 ;;  numReceives     1    4[COMRAM] unsigned char 
   609 ;;  temp            1    2[COMRAM] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;Total ram usage:        5 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; This function calls:
   626 ;;		Nothing
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text1
   633  00122E                     __ptext1:
   634                           	opt stack 0
   635  00122E                     _uartReceiveBlocking:
   636                           	opt stack 30
   637                           
   638                           ;incstack = 0
   639                           ;uartReceiveBlocking@numBytes stored from wreg
   640  00122E  6E23               	movwf	uartReceiveBlocking@numBytes,c
   641  001230                     
   642                           ;UART_PIC.c: 114: while(UART -> _stateRX == UART_STATE_BUSY){ continue; }
   643  001230  EE20 F009          	lfsr	2,9
   644  001234  503D               	movf	_UART,w,c
   645  001236  26D9               	addwf	fsr2l,f,c
   646  001238  503E               	movf	_UART+1,w,c
   647  00123A  22DA               	addwfc	fsr2h,f,c
   648  00123C  50DF               	movf	indf2,w,c
   649  00123E  B4D8               	btfsc	status,2,c
   650  001240  D7F7               	goto	l1028
   651                           
   652                           ;UART_PIC.c: 117: UART -> _stateRX = UART_STATE_BUSY;
   653  001242  EE20 F009          	lfsr	2,9
   654  001246  503D               	movf	_UART,w,c
   655  001248  26D9               	addwf	fsr2l,f,c
   656  00124A  503E               	movf	_UART+1,w,c
   657  00124C  22DA               	addwfc	fsr2h,f,c
   658  00124E  0E00               	movlw	0
   659  001250  6EDF               	movwf	indf2,c
   660                           
   661                           ;UART_PIC.c: 120: unsigned char numReceives = 0;
   662  001252  0E00               	movlw	0
   663  001254  6E24               	movwf	uartReceiveBlocking@numReceives,c
   664                           
   665                           ;UART_PIC.c: 121: UART -> _lastReceiveFERR = 1;
   666  001256  EE20 F00A          	lfsr	2,10
   667  00125A  503D               	movf	_UART,w,c
   668  00125C  26D9               	addwf	fsr2l,f,c
   669  00125E  503E               	movf	_UART+1,w,c
   670  001260  22DA               	addwfc	fsr2h,f,c
   671  001262  0E01               	movlw	1
   672  001264  6EDF               	movwf	indf2,c
   673                           
   674                           ;UART_PIC.c: 122: UART -> _lastReceiveOERR = 1;
   675  001266  EE20 F00B          	lfsr	2,11
   676  00126A  503D               	movf	_UART,w,c
   677  00126C  26D9               	addwf	fsr2l,f,c
   678  00126E  503E               	movf	_UART+1,w,c
   679  001270  22DA               	addwfc	fsr2h,f,c
   680  001272  0E01               	movlw	1
   681  001274  6EDF               	movwf	indf2,c
   682                           
   683                           ;UART_PIC.c: 125: RCSTAbits.CREN = 1;
   684  001276  88AB               	bsf	4011,4,c	;volatile
   685                           
   686                           ;UART_PIC.c: 126: unsigned char temp = RCREG;
   687  001278  CFAE F022          	movff	4014,uartReceiveBlocking@temp	;volatile
   688                           
   689                           ;UART_PIC.c: 129: while(numReceives < numBytes){
   690  00127C  D040               	goto	l185
   691  00127E                     
   692                           ;UART_PIC.c: 131: while(!RCIF){ continue; }
   693  00127E  AA9E               	btfss	3998,5,c	;volatile
   694  001280  D7FE               	goto	l186
   695                           
   696                           ;UART_PIC.c: 135: if(RCSTAbits.FERR){
   697  001282  A4AB               	btfss	4011,2,c	;volatile
   698  001284  D008               	goto	l190
   699                           
   700                           ;UART_PIC.c: 139: UART -> _lastReceiveFERR = 1;
   701  001286  EE20 F00A          	lfsr	2,10
   702  00128A  503D               	movf	_UART,w,c
   703  00128C  26D9               	addwf	fsr2l,f,c
   704  00128E  503E               	movf	_UART+1,w,c
   705  001290  22DA               	addwfc	fsr2h,f,c
   706  001292  0E01               	movlw	1
   707  001294  D007               	goto	L1
   708  001296                     l190:
   709                           
   710                           ;UART_PIC.c: 141: else{
   711                           ;UART_PIC.c: 142: UART -> _lastReceiveFERR = 0;
   712  001296  EE20 F00A          	lfsr	2,10
   713  00129A  503D               	movf	_UART,w,c
   714  00129C  26D9               	addwf	fsr2l,f,c
   715  00129E  503E               	movf	_UART+1,w,c
   716  0012A0  22DA               	addwfc	fsr2h,f,c
   717  0012A2  0E00               	movlw	0
   718  0012A4                     L1:
   719  0012A4  6EDF               	movwf	indf2,c
   720                           
   721                           ;UART_PIC.c: 143: }
   722                           ;UART_PIC.c: 146: UARTinterruptState = INTCONbits.GIE;
   723  0012A6  0E00               	movlw	0
   724  0012A8  BEF2               	btfsc	intcon,7,c	;volatile
   725  0012AA  0E01               	movlw	1
   726  0012AC  6E01               	movwf	_UARTinterruptState,c	;volatile
   727                           
   728                           ;UART_PIC.c: 147: (INTCONbits.GIE = 0);
   729  0012AE  9EF2               	bcf	intcon,7,c	;volatile
   730                           
   731                           ;UART_PIC.c: 148: UART -> _dataRX[numReceives] = RCREG;
   732  0012B0  5024               	movf	uartReceiveBlocking@numReceives,w,c
   733  0012B2  0D01               	mullw	1
   734  0012B4  EE20 F004          	lfsr	2,4
   735  0012B8  503D               	movf	_UART,w,c
   736  0012BA  26D9               	addwf	fsr2l,f,c
   737  0012BC  503E               	movf	_UART+1,w,c
   738  0012BE  22DA               	addwfc	fsr2h,f,c
   739  0012C0  CFDE F020          	movff	postinc2,??_uartReceiveBlocking
   740  0012C4  CFDD F021          	movff	postdec2,??_uartReceiveBlocking+1
   741  0012C8  50F3               	movf	prodl,w,c
   742  0012CA  2420               	addwf	??_uartReceiveBlocking,w,c
   743  0012CC  6ED9               	movwf	fsr2l,c
   744  0012CE  50F4               	movf	prodh,w,c
   745  0012D0  2021               	addwfc	??_uartReceiveBlocking+1,w,c
   746  0012D2  6EDA               	movwf	fsr2h,c
   747  0012D4  CFAE FFDF          	movff	4014,indf2	;volatile
   748                           
   749                           ;UART_PIC.c: 149: INTCONbits.GIE = UARTinterruptState;
   750  0012D8  B001               	btfsc	_UARTinterruptState,0,c	;volatile
   751  0012DA  D002               	bra	u195
   752  0012DC  9EF2               	bcf	intcon,7,c	;volatile
   753  0012DE  D001               	bra	u196
   754  0012E0                     u195:
   755  0012E0  8EF2               	bsf	intcon,7,c	;volatile
   756  0012E2                     u196:
   757                           
   758                           ;UART_PIC.c: 153: if(RCSTAbits.OERR){
   759  0012E2  A2AB               	btfss	4011,1,c	;volatile
   760  0012E4  D003               	goto	l192
   761                           
   762                           ;UART_PIC.c: 155: RCSTAbits.CREN = 0;
   763  0012E6  98AB               	bcf	4011,4,c	;volatile
   764                           
   765                           ;UART_PIC.c: 156: RCSTAbits.CREN = 1;
   766  0012E8  88AB               	bsf	4011,4,c	;volatile
   767                           
   768                           ;UART_PIC.c: 157: }
   769  0012EA  D008               	goto	l193
   770  0012EC                     l192:
   771                           
   772                           ;UART_PIC.c: 158: else{
   773                           ;UART_PIC.c: 159: UART -> _lastReceiveOERR = 0;
   774  0012EC  EE20 F00B          	lfsr	2,11
   775  0012F0  503D               	movf	_UART,w,c
   776  0012F2  26D9               	addwf	fsr2l,f,c
   777  0012F4  503E               	movf	_UART+1,w,c
   778  0012F6  22DA               	addwfc	fsr2h,f,c
   779  0012F8  0E00               	movlw	0
   780  0012FA  6EDF               	movwf	indf2,c
   781  0012FC                     l193:
   782                           
   783                           ;UART_PIC.c: 160: }
   784                           ;UART_PIC.c: 162: numReceives++;
   785  0012FC  2A24               	incf	uartReceiveBlocking@numReceives,f,c
   786  0012FE                     l185:
   787  0012FE  5023               	movf	uartReceiveBlocking@numBytes,w,c
   788  001300  5C24               	subwf	uartReceiveBlocking@numReceives,w,c
   789  001302  A0D8               	btfss	status,0,c
   790  001304  D7BC               	goto	l186
   791                           
   792                           ;UART_PIC.c: 163: }
   793                           ;UART_PIC.c: 166: UART -> _stateRX = UART_STATE_READY;
   794  001306  EE20 F009          	lfsr	2,9
   795  00130A  503D               	movf	_UART,w,c
   796  00130C  26D9               	addwf	fsr2l,f,c
   797  00130E  503E               	movf	_UART+1,w,c
   798  001310  22DA               	addwfc	fsr2h,f,c
   799  001312  0E01               	movlw	1
   800  001314  6EDF               	movwf	indf2,c
   801  001316  0012               	return		;funcret
   802  001318                     __end_of_uartReceiveBlocking:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           prodh	equ	0xFF4
   809                           prodl	equ	0xFF3
   810                           intcon	equ	0xFF2
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           indf2	equ	0xFDF
   814                           postinc2	equ	0xFDE
   815                           postdec2	equ	0xFDD
   816                           fsr2h	equ	0xFDA
   817                           fsr2l	equ	0xFD9
   818                           status	equ	0xFD8
   819                           
   820 ;; *************** function _printf *****************
   821 ;; Defined at:
   822 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;  f               2   12[COMRAM] PTR const unsigned char 
   825 ;;		 -> STR_2(3), STR_1(2), 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  tmpval          4    0        struct .
   828 ;;  cp              3    0        PTR const unsigned char 
   829 ;;  val             2   21[COMRAM] unsigned int 
   830 ;;  ap              2   17[COMRAM] PTR void [1]
   831 ;;		 -> ?_printf(2), 
   832 ;;  len             2    0        unsigned int 
   833 ;;  c               1   23[COMRAM] char 
   834 ;;  prec            1   20[COMRAM] char 
   835 ;;  flag            1   19[COMRAM] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2   12[COMRAM] int 
   838 ;; Registers used:
   839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   849 ;;Total ram usage:       12 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    2
   852 ;; This function calls:
   853 ;;		___lwdiv
   854 ;;		___lwmod
   855 ;;		_putch
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text2
   862  001018                     __ptext2:
   863                           	opt stack 0
   864  001018                     _printf:
   865                           	opt stack 28
   866                           
   867                           ;doprnt.c: 466: va_list ap;
   868                           ;doprnt.c: 499: signed char c;
   869                           ;doprnt.c: 506: signed char prec;
   870                           ;doprnt.c: 508: unsigned char flag;
   871                           ;doprnt.c: 523: union {
   872                           ;doprnt.c: 524: unsigned long vd;
   873                           ;doprnt.c: 525: double integ;
   874                           ;doprnt.c: 526: } tmpval;
   875                           ;doprnt.c: 528: unsigned int val;
   876                           ;doprnt.c: 529: unsigned len;
   877                           ;doprnt.c: 530: const char * cp;
   878                           ;doprnt.c: 533: *ap = __va_start();
   879                           
   880                           ;incstack = 0
   881  001018  0E2E               	movlw	low (?_printf+2)
   882  00101A  6E31               	movwf	printf@ap,c
   883  00101C  0E00               	movlw	high (?_printf+2)
   884  00101E  6E32               	movwf	printf@ap+1,c
   885                           
   886                           ;doprnt.c: 536: while(c = *f++) {
   887  001020  D07D               	goto	u640
   888  001022                     
   889                           ;doprnt.c: 538: if(c != '%')
   890  001022  0E25               	movlw	37
   891  001024  1837               	xorwf	printf@c,w,c
   892  001026  B4D8               	btfsc	status,2,c
   893  001028  D004               	goto	l217
   894                           
   895                           ;doprnt.c: 540: {
   896                           ;doprnt.c: 541: (putch(c) );
   897  00102A  5037               	movf	printf@c,w,c
   898  00102C  ECFC  F00A         	call	_putch
   899                           
   900                           ;doprnt.c: 542: continue;
   901  001030  D075               	goto	u640
   902  001032                     l217:
   903                           
   904                           ;doprnt.c: 543: }
   905                           ;doprnt.c: 548: flag = 0;
   906  001032  0E00               	movlw	0
   907  001034  6E33               	movwf	printf@flag,c
   908                           
   909                           ;doprnt.c: 822: }
   910                           
   911                           ;doprnt.c: 813: continue;
   912                           
   913                           ;doprnt.c: 802: default:
   914                           
   915                           ;doprnt.c: 698: case 'i':
   916                           ;doprnt.c: 699: break;
   917                           
   918                           ;doprnt.c: 697: case 'd':
   919                           
   920                           ;doprnt.c: 638: goto alldone;
   921                           
   922                           ;doprnt.c: 637: case 0:
   923                           
   924                           ;doprnt.c: 635: switch(c = *f++) {
   925  001036  C02C  FFF6         	movff	printf@f,tblptrl
   926  00103A  C02D  FFF7         	movff	printf@f+1,tblptrh
   927  00103E  4A2C               	infsnz	printf@f,f,c
   928  001040  2A2D               	incf	printf@f+1,f,c
   929  001042                     	if	0	;tblptru may be non-zero
   930  001042                     	endif
   931  001042                     	if	0	;tblptru may be non-zero
   932  001042                     	endif
   933  001042  0008               	tblrd		*
   934  001044  CFF5 F037          	movff	tablat,printf@c
   935  001048  5037               	movf	printf@c,w,c
   936                           
   937                           ; Switch size 1, requested type "space"
   938                           ; Number of cases is 3, Range of values is 0 to 105
   939                           ; switch strategies available:
   940                           ; Name         Instructions Cycles
   941                           ; simple_byte           10     6 (average)
   942                           ;	Chosen strategy is simple_byte
   943  00104A  0A00               	xorlw	0	; case 0
   944  00104C  B4D8               	btfsc	status,2,c
   945  00104E  0012               	return	
   946  001050  0A64               	xorlw	100	; case 100
   947  001052  B4D8               	btfsc	status,2,c
   948  001054  D003               	goto	l223
   949  001056  0A0D               	xorlw	13	; case 105
   950  001058  A4D8               	btfss	status,2,c
   951  00105A  D060               	goto	u640
   952  00105C                     l223:
   953                           
   954                           ;doprnt.c: 1253: {
   955                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   956  00105C  C031  FFD9         	movff	printf@ap,fsr2l
   957  001060  C032  FFDA         	movff	printf@ap+1,fsr2h
   958  001064  CFDE F035          	movff	postinc2,printf@val
   959  001068  CFDD F036          	movff	postdec2,printf@val+1
   960  00106C  0E02               	movlw	2
   961  00106E  2631               	addwf	printf@ap,f,c
   962  001070  0E00               	movlw	0
   963  001072  2232               	addwfc	printf@ap+1,f,c
   964                           
   965                           ;doprnt.c: 1261: if((int)val < 0) {
   966  001074  AE36               	btfss	printf@val+1,7,c
   967  001076  D006               	goto	l225
   968                           
   969                           ;doprnt.c: 1262: flag |= 0x03;
   970  001078  0E03               	movlw	3
   971  00107A  1233               	iorwf	printf@flag,f,c
   972                           
   973                           ;doprnt.c: 1263: val = -val;
   974  00107C  6C35               	negf	printf@val,c
   975  00107E  1E36               	comf	printf@val+1,f,c
   976  001080  B0D8               	btfsc	status,0,c
   977  001082  2A36               	incf	printf@val+1,f,c
   978  001084                     l225:
   979                           
   980                           ;doprnt.c: 1264: }
   981                           ;doprnt.c: 1266: }
   982                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   983  001084  0E01               	movlw	1
   984  001086  6E37               	movwf	printf@c,c
   985  001088                     l1374:
   986  001088  0E05               	movlw	5
   987  00108A  1837               	xorwf	printf@c,w,c
   988  00108C  B4D8               	btfsc	status,2,c
   989  00108E  D012               	goto	u620
   990                           
   991                           ;doprnt.c: 1306: if(val < dpowers[c])
   992  001090  5037               	movf	printf@c,w,c
   993  001092  0D02               	mullw	2
   994  001094  0E01               	movlw	low _dpowers
   995  001096  24F3               	addwf	prodl,w,c
   996  001098  6EF6               	movwf	tblptrl,c
   997  00109A  0E10               	movlw	high _dpowers
   998  00109C  20F4               	addwfc	prodh,w,c
   999  00109E  6EF7               	movwf	tblptrh,c
  1000  0010A0                     	if	0	;There are less than 3 active tblptr bytes
  1001  0010A0                     	endif
  1002  0010A0  0009               	tblrd		*+
  1003  0010A2  50F5               	movf	tablat,w,c
  1004  0010A4  5C35               	subwf	printf@val,w,c
  1005  0010A6  0009               	tblrd		*+
  1006  0010A8  50F5               	movf	tablat,w,c
  1007  0010AA  5836               	subwfb	printf@val+1,w,c
  1008  0010AC  A0D8               	btfss	status,0,c
  1009  0010AE  D002               	goto	u620
  1010                           
  1011                           ;doprnt.c: 1307: break;
  1012  0010B0  2A37               	incf	printf@c,f,c
  1013  0010B2  D7EA               	goto	l1374
  1014  0010B4                     u620:
  1015                           
  1016                           ;doprnt.c: 1422: {
  1017                           ;doprnt.c: 1438: if(flag & 0x03)
  1018  0010B4  C033  F030         	movff	printf@flag,??_printf
  1019  0010B8  0E03               	movlw	3
  1020  0010BA  1630               	andwf	??_printf,f,c
  1021  0010BC  B4D8               	btfsc	status,2,c
  1022  0010BE  D003               	goto	l229
  1023                           
  1024                           ;doprnt.c: 1439: (putch('-') );
  1025  0010C0  0E2D               	movlw	45
  1026  0010C2  ECFC  F00A         	call	_putch
  1027  0010C6                     l229:
  1028                           
  1029                           ;doprnt.c: 1469: }
  1030                           ;doprnt.c: 1472: prec = c;
  1031  0010C6  C037  F034         	movff	printf@c,printf@prec
  1032                           
  1033                           ;doprnt.c: 1474: while(prec--) {
  1034  0010CA  D024               	goto	l230
  1035  0010CC                     
  1036                           ;doprnt.c: 1478: {
  1037                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1038  0010CC  5034               	movf	printf@prec,w,c
  1039  0010CE  0D02               	mullw	2
  1040  0010D0  0E01               	movlw	low _dpowers
  1041  0010D2  24F3               	addwf	prodl,w,c
  1042  0010D4  6EF6               	movwf	tblptrl,c
  1043  0010D6  0E10               	movlw	high _dpowers
  1044  0010D8  20F4               	addwfc	prodh,w,c
  1045  0010DA  6EF7               	movwf	tblptrh,c
  1046  0010DC                     	if	0	;There are less than 3 active tblptr bytes
  1047  0010DC                     	endif
  1048  0010DC  0009               	tblrd		*+
  1049  0010DE  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1050  0010E2  000A               	tblrd		*-
  1051  0010E4  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1052  0010E8  C035  F020         	movff	printf@val,___lwdiv@dividend
  1053  0010EC  C036  F021         	movff	printf@val+1,___lwdiv@dividend+1
  1054  0010F0  EC72  F00A         	call	___lwdiv	;wreg free
  1055  0010F4  C020  F027         	movff	?___lwdiv,___lwmod@dividend
  1056  0010F8  C021  F028         	movff	?___lwdiv+1,___lwmod@dividend+1
  1057  0010FC  0E00               	movlw	0
  1058  0010FE  6E2A               	movwf	___lwmod@divisor+1,c
  1059  001100  0E0A               	movlw	10
  1060  001102  6E29               	movwf	___lwmod@divisor,c
  1061  001104  ECC1  F00A         	call	___lwmod	;wreg free
  1062  001108  5027               	movf	?___lwmod,w,c
  1063  00110A  0F30               	addlw	48
  1064  00110C  6E37               	movwf	printf@c,c
  1065                           
  1066                           ;doprnt.c: 1523: }
  1067                           ;doprnt.c: 1524: (putch(c) );
  1068  00110E  5037               	movf	printf@c,w,c
  1069  001110  ECFC  F00A         	call	_putch
  1070  001114                     l230:
  1071  001114  0634               	decf	printf@prec,f,c
  1072  001116  2834               	incf	printf@prec,w,c
  1073  001118  A4D8               	btfss	status,2,c
  1074  00111A  D7D8               	goto	l231
  1075  00111C                     u640:
  1076  00111C  C02C  FFF6         	movff	printf@f,tblptrl
  1077  001120  C02D  FFF7         	movff	printf@f+1,tblptrh
  1078  001124  4A2C               	infsnz	printf@f,f,c
  1079  001126  2A2D               	incf	printf@f+1,f,c
  1080  001128                     	if	0	;tblptru may be non-zero
  1081  001128                     	endif
  1082  001128                     	if	0	;tblptru may be non-zero
  1083  001128                     	endif
  1084  001128  0008               	tblrd		*
  1085  00112A  CFF5 F037          	movff	tablat,printf@c
  1086  00112E  5037               	movf	printf@c,w,c
  1087  001130  B4D8               	btfsc	status,2,c
  1088  001132  0012               	return	
  1089  001134  D776               	goto	l216
  1090  001136                     __end_of_printf:
  1091                           	opt stack 0
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           intcon	equ	0xFF2
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           indf2	equ	0xFDF
  1102                           postinc2	equ	0xFDE
  1103                           postdec2	equ	0xFDD
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _putch *****************
  1109 ;; Defined at:
  1110 ;;		line 24 in file "lcd.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  data            1    wreg     unsigned char 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  data            1    2[COMRAM] unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;Total ram usage:        1 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    1
  1131 ;; This function calls:
  1132 ;;		_lcdNibble
  1133 ;; This function is called by:
  1134 ;;		_printf
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text3
  1139  0015F8                     __ptext3:
  1140                           	opt stack 0
  1141  0015F8                     _putch:
  1142                           	opt stack 28
  1143                           
  1144                           ;incstack = 0
  1145                           ;putch@data stored from wreg
  1146  0015F8  6E22               	movwf	putch@data,c
  1147                           
  1148                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1149  0015FA  848C               	bsf	3980,2,c	;volatile
  1150                           
  1151                           ;lcd.c: 33: lcdNibble(data);
  1152  0015FC  5022               	movf	putch@data,w,c
  1153  0015FE  EC33  F00A         	call	_lcdNibble
  1154                           
  1155                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1156  001602  0EC8               	movlw	200
  1157  001604                     u697:
  1158  001604  D000               	nop2	
  1159  001606  2EE8               	decfsz	wreg,f,c
  1160  001608  D7FD               	bra	u697
  1161  00160A  0012               	return		;funcret
  1162  00160C                     __end_of_putch:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           indf2	equ	0xFDF
  1174                           postinc2	equ	0xFDE
  1175                           postdec2	equ	0xFDD
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           
  1180 ;; *************** function ___lwmod *****************
  1181 ;; Defined at:
  1182 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;  dividend        2    7[COMRAM] unsigned int 
  1185 ;;  divisor         2    9[COMRAM] unsigned int 
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  counter         1   11[COMRAM] unsigned char 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  2    7[COMRAM] unsigned int 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;Total ram usage:        5 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; This function calls:
  1204 ;;		Nothing
  1205 ;; This function is called by:
  1206 ;;		_printf
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text4
  1211  001582                     __ptext4:
  1212                           	opt stack 0
  1213  001582                     ___lwmod:
  1214                           	opt stack 29
  1215                           
  1216                           ;incstack = 0
  1217  001582  5029               	movf	___lwmod@divisor,w,c
  1218  001584  102A               	iorwf	___lwmod@divisor+1,w,c
  1219  001586  B4D8               	btfsc	status,2,c
  1220  001588  D018               	goto	l653
  1221  00158A  0E01               	movlw	1
  1222  00158C  6E2B               	movwf	___lwmod@counter,c
  1223  00158E  D004               	goto	l648
  1224  001590  90D8               	bcf	status,0,c
  1225  001592  3629               	rlcf	___lwmod@divisor,f,c
  1226  001594  362A               	rlcf	___lwmod@divisor+1,f,c
  1227  001596  2A2B               	incf	___lwmod@counter,f,c
  1228  001598                     l648:
  1229  001598  AE2A               	btfss	___lwmod@divisor+1,7,c
  1230  00159A  D7FA               	goto	l649
  1231  00159C                     u550:
  1232  00159C  5029               	movf	___lwmod@divisor,w,c
  1233  00159E  5C27               	subwf	___lwmod@dividend,w,c
  1234  0015A0  502A               	movf	___lwmod@divisor+1,w,c
  1235  0015A2  5828               	subwfb	___lwmod@dividend+1,w,c
  1236  0015A4  A0D8               	btfss	status,0,c
  1237  0015A6  D004               	goto	l652
  1238  0015A8  5029               	movf	___lwmod@divisor,w,c
  1239  0015AA  5E27               	subwf	___lwmod@dividend,f,c
  1240  0015AC  502A               	movf	___lwmod@divisor+1,w,c
  1241  0015AE  5A28               	subwfb	___lwmod@dividend+1,f,c
  1242  0015B0                     l652:
  1243  0015B0  90D8               	bcf	status,0,c
  1244  0015B2  322A               	rrcf	___lwmod@divisor+1,f,c
  1245  0015B4  3229               	rrcf	___lwmod@divisor,f,c
  1246  0015B6  2E2B               	decfsz	___lwmod@counter,f,c
  1247  0015B8  D7F1               	goto	u550
  1248  0015BA                     l653:
  1249  0015BA  C027  F027         	movff	___lwmod@dividend,?___lwmod
  1250  0015BE  C028  F028         	movff	___lwmod@dividend+1,?___lwmod+1
  1251  0015C2  0012               	return		;funcret
  1252  0015C4                     __end_of___lwmod:
  1253                           	opt stack 0
  1254                           tblptru	equ	0xFF8
  1255                           tblptrh	equ	0xFF7
  1256                           tblptrl	equ	0xFF6
  1257                           tablat	equ	0xFF5
  1258                           prodh	equ	0xFF4
  1259                           prodl	equ	0xFF3
  1260                           intcon	equ	0xFF2
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           indf2	equ	0xFDF
  1264                           postinc2	equ	0xFDE
  1265                           postdec2	equ	0xFDD
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function ___lwdiv *****************
  1271 ;; Defined at:
  1272 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  dividend        2    0[COMRAM] unsigned int 
  1275 ;;  divisor         2    2[COMRAM] unsigned int 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  quotient        2    4[COMRAM] unsigned int 
  1278 ;;  counter         1    6[COMRAM] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  2    0[COMRAM] unsigned int 
  1281 ;; Registers used:
  1282 ;;		wreg, status,2, status,0
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;Total ram usage:        7 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_printf
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text5
  1302  0014E4                     __ptext5:
  1303                           	opt stack 0
  1304  0014E4                     ___lwdiv:
  1305                           	opt stack 29
  1306                           
  1307                           ;incstack = 0
  1308  0014E4  0E00               	movlw	0
  1309  0014E6  6E25               	movwf	___lwdiv@quotient+1,c
  1310  0014E8  0E00               	movlw	0
  1311  0014EA  6E24               	movwf	___lwdiv@quotient,c
  1312  0014EC  5022               	movf	___lwdiv@divisor,w,c
  1313  0014EE  1023               	iorwf	___lwdiv@divisor+1,w,c
  1314  0014F0  B4D8               	btfsc	status,2,c
  1315  0014F2  D01C               	goto	l643
  1316  0014F4  0E01               	movlw	1
  1317  0014F6  6E26               	movwf	___lwdiv@counter,c
  1318  0014F8  D004               	goto	l638
  1319  0014FA  90D8               	bcf	status,0,c
  1320  0014FC  3622               	rlcf	___lwdiv@divisor,f,c
  1321  0014FE  3623               	rlcf	___lwdiv@divisor+1,f,c
  1322  001500  2A26               	incf	___lwdiv@counter,f,c
  1323  001502                     l638:
  1324  001502  AE23               	btfss	___lwdiv@divisor+1,7,c
  1325  001504  D7FA               	goto	l639
  1326  001506                     u520:
  1327  001506  90D8               	bcf	status,0,c
  1328  001508  3624               	rlcf	___lwdiv@quotient,f,c
  1329  00150A  3625               	rlcf	___lwdiv@quotient+1,f,c
  1330  00150C  5022               	movf	___lwdiv@divisor,w,c
  1331  00150E  5C20               	subwf	___lwdiv@dividend,w,c
  1332  001510  5023               	movf	___lwdiv@divisor+1,w,c
  1333  001512  5821               	subwfb	___lwdiv@dividend+1,w,c
  1334  001514  A0D8               	btfss	status,0,c
  1335  001516  D005               	goto	l642
  1336  001518  5022               	movf	___lwdiv@divisor,w,c
  1337  00151A  5E20               	subwf	___lwdiv@dividend,f,c
  1338  00151C  5023               	movf	___lwdiv@divisor+1,w,c
  1339  00151E  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1340  001520  8024               	bsf	___lwdiv@quotient,0,c
  1341  001522                     l642:
  1342  001522  90D8               	bcf	status,0,c
  1343  001524  3223               	rrcf	___lwdiv@divisor+1,f,c
  1344  001526  3222               	rrcf	___lwdiv@divisor,f,c
  1345  001528  2E26               	decfsz	___lwdiv@counter,f,c
  1346  00152A  D7ED               	goto	u520
  1347  00152C                     l643:
  1348  00152C  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
  1349  001530  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1350  001534  0012               	return		;funcret
  1351  001536                     __end_of___lwdiv:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           intcon	equ	0xFF2
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           indf2	equ	0xFDF
  1363                           postinc2	equ	0xFDE
  1364                           postdec2	equ	0xFDD
  1365                           fsr2h	equ	0xFDA
  1366                           fsr2l	equ	0xFD9
  1367                           status	equ	0xFD8
  1368                           
  1369 ;; *************** function _initLCD *****************
  1370 ;; Defined at:
  1371 ;;		line 60 in file "lcd.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;Total ram usage:        1 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    2
  1392 ;; This function calls:
  1393 ;;		_lcdInst
  1394 ;; This function is called by:
  1395 ;;		_main
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text6
  1400  001536                     __ptext6:
  1401                           	opt stack 0
  1402  001536                     _initLCD:
  1403                           	opt stack 28
  1404                           
  1405                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1406                           
  1407                           ;incstack = 0
  1408  001536  0EC3               	movlw	195
  1409  001538  6E23               	movwf	??_initLCD& (0+255),c
  1410  00153A  0ECD               	movlw	205
  1411  00153C                     u707:
  1412  00153C  2EE8               	decfsz	wreg,f,c
  1413  00153E  D7FE               	bra	u707
  1414  001540  2E23               	decfsz	??_initLCD& (0+255),f,c
  1415  001542  D7FC               	bra	u707
  1416  001544  F000               	nop	
  1417                           
  1418                           ;lcd.c: 69: lcdInst(0b00110011);
  1419  001546  0E33               	movlw	51
  1420  001548  EC06  F00B         	call	_lcdInst
  1421                           
  1422                           ;lcd.c: 70: lcdInst(0b00110010);
  1423  00154C  0E32               	movlw	50
  1424  00154E  EC06  F00B         	call	_lcdInst
  1425                           
  1426                           ;lcd.c: 71: lcdInst(0b00101000);
  1427  001552  0E28               	movlw	40
  1428  001554  EC06  F00B         	call	_lcdInst
  1429                           
  1430                           ;lcd.c: 72: lcdInst(0b00001111);
  1431  001558  0E0F               	movlw	15
  1432  00155A  EC06  F00B         	call	_lcdInst
  1433                           
  1434                           ;lcd.c: 73: lcdInst(0b00000110);
  1435  00155E  0E06               	movlw	6
  1436  001560  EC06  F00B         	call	_lcdInst
  1437                           
  1438                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1439  001564  0E01               	movlw	1
  1440  001566  EC06  F00B         	call	_lcdInst
  1441  00156A  0EC3               	movlw	195
  1442  00156C  6E23               	movwf	??_initLCD& (0+255),c
  1443  00156E  0ECD               	movlw	205
  1444  001570                     u717:
  1445  001570  2EE8               	decfsz	wreg,f,c
  1446  001572  D7FE               	bra	u717
  1447  001574  2E23               	decfsz	??_initLCD& (0+255),f,c
  1448  001576  D7FC               	bra	u717
  1449  001578  F000               	nop	
  1450                           
  1451                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1452  00157A  0E0F               	movlw	15
  1453  00157C  EC06  F00B         	call	_lcdInst
  1454  001580  0012               	return		;funcret
  1455  001582                     __end_of_initLCD:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           prodh	equ	0xFF4
  1462                           prodl	equ	0xFF3
  1463                           intcon	equ	0xFF2
  1464                           postinc0	equ	0xFEE
  1465                           wreg	equ	0xFE8
  1466                           indf2	equ	0xFDF
  1467                           postinc2	equ	0xFDE
  1468                           postdec2	equ	0xFDD
  1469                           fsr2h	equ	0xFDA
  1470                           fsr2l	equ	0xFD9
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function _lcdInst *****************
  1474 ;; Defined at:
  1475 ;;		line 11 in file "lcd.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  data            1    wreg     unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  data            1    2[COMRAM] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;Total ram usage:        1 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    1
  1496 ;; This function calls:
  1497 ;;		_lcdNibble
  1498 ;; This function is called by:
  1499 ;;		_initLCD
  1500 ;;		_lcd_set_cursor
  1501 ;;		_lcd_shift_cursor
  1502 ;;		_lcd_shift_display
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text7
  1507  00160C                     __ptext7:
  1508                           	opt stack 0
  1509  00160C                     _lcdInst:
  1510                           	opt stack 28
  1511                           
  1512                           ;incstack = 0
  1513                           ;lcdInst@data stored from wreg
  1514  00160C  6E22               	movwf	lcdInst@data,c
  1515                           
  1516                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1517  00160E  948C               	bcf	3980,2,c	;volatile
  1518                           
  1519                           ;lcd.c: 20: lcdNibble(data);
  1520  001610  5022               	movf	lcdInst@data,w,c
  1521  001612  EC33  F00A         	call	_lcdNibble
  1522                           
  1523                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1524  001616  0EC8               	movlw	200
  1525  001618                     u727:
  1526  001618  D000               	nop2	
  1527  00161A  2EE8               	decfsz	wreg,f,c
  1528  00161C  D7FD               	bra	u727
  1529  00161E  0012               	return		;funcret
  1530  001620                     __end_of_lcdInst:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           prodh	equ	0xFF4
  1537                           prodl	equ	0xFF3
  1538                           intcon	equ	0xFF2
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           indf2	equ	0xFDF
  1542                           postinc2	equ	0xFDE
  1543                           postdec2	equ	0xFDD
  1544                           fsr2h	equ	0xFDA
  1545                           fsr2l	equ	0xFD9
  1546                           status	equ	0xFD8
  1547                           
  1548 ;; *************** function _lcdNibble *****************
  1549 ;; Defined at:
  1550 ;;		line 37 in file "lcd.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  data            1    wreg     unsigned char 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  data            1    1[COMRAM] unsigned char 
  1555 ;;  temp            1    0[COMRAM] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;Total ram usage:        2 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_lcdInst
  1575 ;;		_putch
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text8
  1580  001466                     __ptext8:
  1581                           	opt stack 0
  1582  001466                     _lcdNibble:
  1583                           	opt stack 28
  1584                           
  1585                           ;incstack = 0
  1586                           ;lcdNibble@data stored from wreg
  1587  001466  6E21               	movwf	lcdNibble@data,c
  1588                           
  1589                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1590  001468  5021               	movf	lcdNibble@data,w,c
  1591  00146A  0BF0               	andlw	240
  1592  00146C  6E20               	movwf	lcdNibble@temp,c
  1593                           
  1594                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1595  00146E  508C               	movf	3980,w,c	;volatile
  1596  001470  0B0F               	andlw	15
  1597  001472  6E8C               	movwf	3980,c	;volatile
  1598                           
  1599                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1600  001474  5020               	movf	lcdNibble@temp,w,c
  1601  001476  108C               	iorwf	3980,w,c	;volatile
  1602  001478  6E8C               	movwf	3980,c	;volatile
  1603                           
  1604                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1605  00147A  0E00               	movlw	0
  1606  00147C  BEF2               	btfsc	intcon,7,c	;volatile
  1607  00147E  0E01               	movlw	1
  1608  001480  6E03               	movwf	_LCDinterruptState,c
  1609  001482  9EF2               	bcf	intcon,7,c	;volatile
  1610  001484  868C               	bsf	3980,3,c	;volatile
  1611  001486  0E53               	movlw	83
  1612  001488                     u737:
  1613  001488  2EE8               	decfsz	wreg,f,c
  1614  00148A  D7FE               	bra	u737
  1615  00148C  F000               	nop	
  1616  00148E  968C               	bcf	3980,3,c	;volatile
  1617  001490  0EC8               	movlw	200
  1618  001492                     u747:
  1619  001492  D000               	nop2	
  1620  001494  2EE8               	decfsz	wreg,f,c
  1621  001496  D7FD               	bra	u747
  1622  001498  B003               	btfsc	_LCDinterruptState,0,c
  1623  00149A  D002               	bra	u15
  1624  00149C  9EF2               	bcf	intcon,7,c	;volatile
  1625  00149E  D001               	bra	u16
  1626  0014A0                     u15:
  1627  0014A0  8EF2               	bsf	intcon,7,c	;volatile
  1628  0014A2                     u16:
  1629                           
  1630                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1631  0014A2  3821               	swapf	lcdNibble@data,w,c
  1632  0014A4  0BF0               	andlw	240
  1633  0014A6  6E21               	movwf	lcdNibble@data,c
  1634                           
  1635                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1636  0014A8  5021               	movf	lcdNibble@data,w,c
  1637  0014AA  0BF0               	andlw	240
  1638  0014AC  6E20               	movwf	lcdNibble@temp,c
  1639                           
  1640                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1641  0014AE  508C               	movf	3980,w,c	;volatile
  1642  0014B0  0B0F               	andlw	15
  1643  0014B2  6E8C               	movwf	3980,c	;volatile
  1644                           
  1645                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1646  0014B4  5020               	movf	lcdNibble@temp,w,c
  1647  0014B6  108C               	iorwf	3980,w,c	;volatile
  1648  0014B8  6E8C               	movwf	3980,c	;volatile
  1649                           
  1650                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1651  0014BA  0E00               	movlw	0
  1652  0014BC  BEF2               	btfsc	intcon,7,c	;volatile
  1653  0014BE  0E01               	movlw	1
  1654  0014C0  6E03               	movwf	_LCDinterruptState,c
  1655  0014C2  9EF2               	bcf	intcon,7,c	;volatile
  1656  0014C4  868C               	bsf	3980,3,c	;volatile
  1657  0014C6  0E53               	movlw	83
  1658  0014C8                     u757:
  1659  0014C8  2EE8               	decfsz	wreg,f,c
  1660  0014CA  D7FE               	bra	u757
  1661  0014CC  F000               	nop	
  1662  0014CE  968C               	bcf	3980,3,c	;volatile
  1663  0014D0  0EC8               	movlw	200
  1664  0014D2                     u767:
  1665  0014D2  D000               	nop2	
  1666  0014D4  2EE8               	decfsz	wreg,f,c
  1667  0014D6  D7FD               	bra	u767
  1668  0014D8  B003               	btfsc	_LCDinterruptState,0,c
  1669  0014DA  D002               	bra	u25
  1670  0014DC  9EF2               	bcf	intcon,7,c	;volatile
  1671  0014DE  D001               	bra	u26
  1672  0014E0                     u25:
  1673  0014E0  8EF2               	bsf	intcon,7,c	;volatile
  1674  0014E2                     u26:
  1675  0014E2  0012               	return		;funcret
  1676  0014E4                     __end_of_lcdNibble:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _UART_Init *****************
  1695 ;; Defined at:
  1696 ;;		line 200 in file "UART_PIC.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;  baud            4   14[COMRAM] long 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        8 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    1
  1717 ;; This function calls:
  1718 ;;		___aldiv
  1719 ;; This function is called by:
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  0013E4                     __ptext9:
  1726                           	opt stack 0
  1727  0013E4                     _UART_Init:
  1728                           	opt stack 29
  1729                           
  1730                           ;UART_PIC.c: 213: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
  1731                           
  1732                           ;incstack = 0
  1733  0013E4  0E00               	movlw	0
  1734  0013E6  6E20               	movwf	___aldiv@dividend,c
  1735  0013E8  0E5A               	movlw	90
  1736  0013EA  6E21               	movwf	___aldiv@dividend+1,c
  1737  0013EC  0E62               	movlw	98
  1738  0013EE  6E22               	movwf	___aldiv@dividend+2,c
  1739  0013F0  0E02               	movlw	2
  1740  0013F2  6E23               	movwf	___aldiv@dividend+3,c
  1741  0013F4  C02E  F032         	movff	UART_Init@baud,??_UART_Init
  1742  0013F8  C02F  F033         	movff	UART_Init@baud+1,??_UART_Init+1
  1743  0013FC  C030  F034         	movff	UART_Init@baud+2,??_UART_Init+2
  1744  001400  C031  F035         	movff	UART_Init@baud+3,??_UART_Init+3
  1745  001404  0E06               	movlw	6
  1746  001406                     u575:
  1747  001406  90D8               	bcf	status,0,c
  1748  001408  3632               	rlcf	??_UART_Init,f,c
  1749  00140A  3633               	rlcf	??_UART_Init+1,f,c
  1750  00140C  3634               	rlcf	??_UART_Init+2,f,c
  1751  00140E  3635               	rlcf	??_UART_Init+3,f,c
  1752  001410  2EE8               	decfsz	wreg,f,c
  1753  001412  D7F9               	goto	u575
  1754  001414  C032  F024         	movff	??_UART_Init,___aldiv@divisor
  1755  001418  C033  F025         	movff	??_UART_Init+1,___aldiv@divisor+1
  1756  00141C  C034  F026         	movff	??_UART_Init+2,___aldiv@divisor+2
  1757  001420  C035  F027         	movff	??_UART_Init+3,___aldiv@divisor+3
  1758  001424  EC8C  F009         	call	___aldiv	;wreg free
  1759  001428  0420               	decf	?___aldiv,w,c
  1760  00142A  6EAF               	movwf	4015,c	;volatile
  1761                           
  1762                           ;UART_PIC.c: 216: TXSTAbits.TX9 = 0;
  1763  00142C  9CAC               	bcf	4012,6,c	;volatile
  1764                           
  1765                           ;UART_PIC.c: 217: TXSTAbits.SYNC = 0;
  1766  00142E  98AC               	bcf	4012,4,c	;volatile
  1767                           
  1768                           ;UART_PIC.c: 218: TXSTAbits.TXEN = 1;
  1769  001430  8AAC               	bsf	4012,5,c	;volatile
  1770                           
  1771                           ;UART_PIC.c: 221: RCSTAbits.RX9 = 0;
  1772  001432  9CAB               	bcf	4011,6,c	;volatile
  1773                           
  1774                           ;UART_PIC.c: 222: RCSTAbits.CREN = 1;
  1775  001434  88AB               	bsf	4011,4,c	;volatile
  1776                           
  1777                           ;UART_PIC.c: 225: UART -> _stateTX = UART_STATE_READY;
  1778  001436  EE20 F008          	lfsr	2,8
  1779  00143A  503D               	movf	_UART,w,c
  1780  00143C  26D9               	addwf	fsr2l,f,c
  1781  00143E  503E               	movf	_UART+1,w,c
  1782  001440  22DA               	addwfc	fsr2h,f,c
  1783  001442  0E01               	movlw	1
  1784  001444  6EDF               	movwf	indf2,c
  1785                           
  1786                           ;UART_PIC.c: 226: UART -> _stateRX = UART_STATE_READY;
  1787  001446  EE20 F009          	lfsr	2,9
  1788  00144A  503D               	movf	_UART,w,c
  1789  00144C  26D9               	addwf	fsr2l,f,c
  1790  00144E  503E               	movf	_UART+1,w,c
  1791  001450  22DA               	addwfc	fsr2h,f,c
  1792  001452  0E01               	movlw	1
  1793  001454  6EDF               	movwf	indf2,c
  1794                           
  1795                           ;UART_PIC.c: 229: uart._dataRX = arr_dataRX;
  1796  001456  0E04               	movlw	low _arr_dataRX
  1797  001458  6E18               	movwf	_uart+4,c	;volatile
  1798  00145A  0E00               	movlw	high _arr_dataRX
  1799  00145C  6E19               	movwf	_uart+5,c	;volatile
  1800                           
  1801                           ;UART_PIC.c: 232: TRISC6 = 1;
  1802  00145E  8C94               	bsf	3988,6,c	;volatile
  1803                           
  1804                           ;UART_PIC.c: 233: TRISC7 = 0;
  1805  001460  9E94               	bcf	3988,7,c	;volatile
  1806                           
  1807                           ;UART_PIC.c: 236: RCSTAbits.SPEN = 1;
  1808  001462  8EAB               	bsf	4011,7,c	;volatile
  1809  001464  0012               	return		;funcret
  1810  001466                     __end_of_UART_Init:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           indf2	equ	0xFDF
  1822                           postinc2	equ	0xFDE
  1823                           postdec2	equ	0xFDD
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function ___aldiv *****************
  1829 ;; Defined at:
  1830 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  dividend        4    0[COMRAM] long 
  1833 ;;  divisor         4    4[COMRAM] long 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  quotient        4   10[COMRAM] long 
  1836 ;;  sign            1    9[COMRAM] unsigned char 
  1837 ;;  counter         1    8[COMRAM] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  4    0[COMRAM] long 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1847 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;Total ram usage:       14 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_UART_Init
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text10
  1861  001318                     __ptext10:
  1862                           	opt stack 0
  1863  001318                     ___aldiv:
  1864                           	opt stack 29
  1865                           
  1866                           ;incstack = 0
  1867  001318  0E00               	movlw	0
  1868  00131A  6E29               	movwf	___aldiv@sign,c
  1869  00131C  AE27               	btfss	___aldiv@divisor+3,7,c
  1870  00131E  D00A               	goto	l290
  1871  001320  1E27               	comf	___aldiv@divisor+3,f,c
  1872  001322  1E26               	comf	___aldiv@divisor+2,f,c
  1873  001324  1E25               	comf	___aldiv@divisor+1,f,c
  1874  001326  6C24               	negf	___aldiv@divisor,c
  1875  001328  0E00               	movlw	0
  1876  00132A  2225               	addwfc	___aldiv@divisor+1,f,c
  1877  00132C  2226               	addwfc	___aldiv@divisor+2,f,c
  1878  00132E  2227               	addwfc	___aldiv@divisor+3,f,c
  1879  001330  0E01               	movlw	1
  1880  001332  6E29               	movwf	___aldiv@sign,c
  1881  001334                     l290:
  1882  001334  AE23               	btfss	___aldiv@dividend+3,7,c
  1883  001336  D00A               	goto	l291
  1884  001338  1E23               	comf	___aldiv@dividend+3,f,c
  1885  00133A  1E22               	comf	___aldiv@dividend+2,f,c
  1886  00133C  1E21               	comf	___aldiv@dividend+1,f,c
  1887  00133E  6C20               	negf	___aldiv@dividend,c
  1888  001340  0E00               	movlw	0
  1889  001342  2221               	addwfc	___aldiv@dividend+1,f,c
  1890  001344  2222               	addwfc	___aldiv@dividend+2,f,c
  1891  001346  2223               	addwfc	___aldiv@dividend+3,f,c
  1892  001348  0E01               	movlw	1
  1893  00134A  1A29               	xorwf	___aldiv@sign,f,c
  1894  00134C                     l291:
  1895  00134C  0E00               	movlw	0
  1896  00134E  6E2A               	movwf	___aldiv@quotient,c
  1897  001350  0E00               	movlw	0
  1898  001352  6E2B               	movwf	___aldiv@quotient+1,c
  1899  001354  0E00               	movlw	0
  1900  001356  6E2C               	movwf	___aldiv@quotient+2,c
  1901  001358  0E00               	movlw	0
  1902  00135A  6E2D               	movwf	___aldiv@quotient+3,c
  1903  00135C  5024               	movf	___aldiv@divisor,w,c
  1904  00135E  1025               	iorwf	___aldiv@divisor+1,w,c
  1905  001360  1026               	iorwf	___aldiv@divisor+2,w,c
  1906  001362  1027               	iorwf	___aldiv@divisor+3,w,c
  1907  001364  B4D8               	btfsc	status,2,c
  1908  001366  D02A               	goto	l298
  1909  001368  0E01               	movlw	1
  1910  00136A  6E28               	movwf	___aldiv@counter,c
  1911  00136C  D006               	goto	l293
  1912  00136E  90D8               	bcf	status,0,c
  1913  001370  3624               	rlcf	___aldiv@divisor,f,c
  1914  001372  3625               	rlcf	___aldiv@divisor+1,f,c
  1915  001374  3626               	rlcf	___aldiv@divisor+2,f,c
  1916  001376  3627               	rlcf	___aldiv@divisor+3,f,c
  1917  001378  2A28               	incf	___aldiv@counter,f,c
  1918  00137A                     l293:
  1919  00137A  AE27               	btfss	___aldiv@divisor+3,7,c
  1920  00137C  D7F8               	goto	l294
  1921  00137E                     u480:
  1922  00137E  90D8               	bcf	status,0,c
  1923  001380  362A               	rlcf	___aldiv@quotient,f,c
  1924  001382  362B               	rlcf	___aldiv@quotient+1,f,c
  1925  001384  362C               	rlcf	___aldiv@quotient+2,f,c
  1926  001386  362D               	rlcf	___aldiv@quotient+3,f,c
  1927  001388  5024               	movf	___aldiv@divisor,w,c
  1928  00138A  5C20               	subwf	___aldiv@dividend,w,c
  1929  00138C  5025               	movf	___aldiv@divisor+1,w,c
  1930  00138E  5821               	subwfb	___aldiv@dividend+1,w,c
  1931  001390  5026               	movf	___aldiv@divisor+2,w,c
  1932  001392  5822               	subwfb	___aldiv@dividend+2,w,c
  1933  001394  5027               	movf	___aldiv@divisor+3,w,c
  1934  001396  5823               	subwfb	___aldiv@dividend+3,w,c
  1935  001398  A0D8               	btfss	status,0,c
  1936  00139A  D009               	goto	l297
  1937  00139C  5024               	movf	___aldiv@divisor,w,c
  1938  00139E  5E20               	subwf	___aldiv@dividend,f,c
  1939  0013A0  5025               	movf	___aldiv@divisor+1,w,c
  1940  0013A2  5A21               	subwfb	___aldiv@dividend+1,f,c
  1941  0013A4  5026               	movf	___aldiv@divisor+2,w,c
  1942  0013A6  5A22               	subwfb	___aldiv@dividend+2,f,c
  1943  0013A8  5027               	movf	___aldiv@divisor+3,w,c
  1944  0013AA  5A23               	subwfb	___aldiv@dividend+3,f,c
  1945  0013AC  802A               	bsf	___aldiv@quotient,0,c
  1946  0013AE                     l297:
  1947  0013AE  90D8               	bcf	status,0,c
  1948  0013B0  3227               	rrcf	___aldiv@divisor+3,f,c
  1949  0013B2  3226               	rrcf	___aldiv@divisor+2,f,c
  1950  0013B4  3225               	rrcf	___aldiv@divisor+1,f,c
  1951  0013B6  3224               	rrcf	___aldiv@divisor,f,c
  1952  0013B8  2E28               	decfsz	___aldiv@counter,f,c
  1953  0013BA  D7E1               	goto	u480
  1954  0013BC                     l298:
  1955  0013BC  5029               	movf	___aldiv@sign,w,c
  1956  0013BE  B4D8               	btfsc	status,2,c
  1957  0013C0  D008               	goto	l299
  1958  0013C2  1E2D               	comf	___aldiv@quotient+3,f,c
  1959  0013C4  1E2C               	comf	___aldiv@quotient+2,f,c
  1960  0013C6  1E2B               	comf	___aldiv@quotient+1,f,c
  1961  0013C8  6C2A               	negf	___aldiv@quotient,c
  1962  0013CA  0E00               	movlw	0
  1963  0013CC  222B               	addwfc	___aldiv@quotient+1,f,c
  1964  0013CE  222C               	addwfc	___aldiv@quotient+2,f,c
  1965  0013D0  222D               	addwfc	___aldiv@quotient+3,f,c
  1966  0013D2                     l299:
  1967  0013D2  C02A  F020         	movff	___aldiv@quotient,?___aldiv
  1968  0013D6  C02B  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1969  0013DA  C02C  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1970  0013DE  C02D  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1971  0013E2  0012               	return	
  1972  0013E4                     __end_of___aldiv:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodh	equ	0xFF4
  1979                           prodl	equ	0xFF3
  1980                           intcon	equ	0xFF2
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           prodh	equ	0xFF4
  1994                           prodl	equ	0xFF3
  1995                           intcon	equ	0xFF2
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           indf2	equ	0xFDF
  1999                           postinc2	equ	0xFDE
  2000                           postdec2	equ	0xFDD
  2001                           fsr2h	equ	0xFDA
  2002                           fsr2l	equ	0xFD9
  2003                           status	equ	0xFD8
  2004                           
  2005                           	psect	rparam
  2006  0000                     tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    16
    Data        3
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     29      63
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S172$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S172$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2007
                                             24 COMRAM     5     5      0
                          _UART_Init
                            _initLCD
                             _printf
                _uartReceiveBlocking
 ---------------------------------------------------------------------------------
 (1) _uartReceiveBlocking                                  5     5      0      45
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1253
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _uartReceiveBlocking

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1D      3F       1       49.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      34        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 11:03:36 2018

                            u15 14A0                              u16 14A2                              u25 14E0  
                            u26 14E2                     __CFG_CPD$ON 000000                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                             l116 117E                             l117 1218  
                           l230 1114                             l118 118A                             l231 10CC  
                           l223 105C                             l119 11DC                             l216 1022  
                           l225 1084                             l217 1032                             l229 10C6  
                           l190 1296                             l192 12EC                             l185 12FE  
                           l193 12FC                             l290 1334                             l186 127E  
                           l291 134C                             l293 137A                             l294 136E  
                           l297 13AE                             l298 13BC                             l642 1522  
                           l299 13D2                             l643 152C                             l652 15B0  
                           l653 15BA                             l638 1502                             l639 14FA  
                           l648 1598                             l649 1590                    __CFG_CPB$OFF 000000  
                           u520 1506                             u195 12E0                             u620 10B4  
                           u196 12E2                             u550 159C                             u480 137E  
                           u640 111C                             u707 153C                             u717 1570  
                           u575 1406                             u727 1618                             u737 1488  
                           u747 1492                             u757 14C8                             u767 14D2  
                           u687 11D0                             u697 1604                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l1028 1230  
                          l1374 1088                            STR_1 1014                            STR_2 1011  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            _RCIE 007CED  
                          _RCIF 007CF5                            _UART 003D                            _TRMT 007D61  
                          _TXIE 007CEC                            _TXIF 007CF4                            _main 1136  
                          _uart 0014                            fsr2h 000FDA                            indf2 000FDF  
                          fsr2l 000FD9                            prodh 000FF4                            prodl 000FF3  
                          start 0000                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                __end_of_LCD_LEFT 100C                 __end_of___aldiv 13E4  
                         ?_main 0020                 __end_of___lwdiv 1536                 __end_of___lwmod 15C4  
                         _RCREG 000FAE                           _SPBRG 000FAF                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                           _TXREG 000FAD                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdInst 1620                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000              __size_of_UART_Init 0082                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 1582  
                __CFG_EBTRB$OFF 000000                 __end_of_dpowers 100B                           _putch 15F8  
                         main@i 003C                           tablat 000FF5               _LCDinterruptState 0003  
                         status 000FD8                  __CFG_PBADEN$ON 000000                 __initialization 15C4  
                  __end_of_main 122E                  __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT 100D  
                        ??_main 0038                   __activetblptr 000002                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          ?_putch 0020                          _TRISC6 007CA6  
                        _TRISC7 007CA7                  __CFG_XINST$OFF 000000               __end_of_UART_Init 1466  
                     ??___aldiv 0028                  __CFG_STVREN$ON 000000                       ??___lwdiv 0024  
                     ??___lwmod 002B                          clear_0 15E8                       ??_lcdInst 0022  
                        _printf 1018                       ??_initLCD 0023                    __pdataCOMRAM 003D  
  __size_of_uartReceiveBlocking 00EA                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 15EE                   ___rparam_used 000001  uartReceiveBlocking@numReceives 0024  
                __pcstackCOMRAM 0020                   __end_of_putch 160C              __size_of_lcdNibble 007E  
                       ??_putch 0022                         ?_printf 002C                      _arr_dataRX 0004  
          lcd@LCDinterruptState 0002         uartReceiveBlocking@temp 0022               __end_of_lcdNibble 14E4  
                       __Hparam 0000                         __Lparam 0000                         ___aldiv 1318  
                       ___lwdiv 14E4                         ___lwmod 1582                    __psmallconst 1000  
                       __pcinit 15C4                         __ramtop 1000                         _lcdInst 160C  
                       __ptext0 1136                         __ptext1 122E                         __ptext2 1018  
                       __ptext3 15F8                         __ptext4 1582                         __ptext5 14E4  
                       __ptext6 1536                         __ptext7 160C                         __ptext8 1466  
                       __ptext9 13E4                 __size_of_printf 011E                         _initLCD 1536  
                       _dpowers 1001                ___aldiv@dividend 0020                       _LCD_RIGHT 100C  
                       main@arr 003B            end_of_initialization 15EE           __end_of_LCD_SIZE_HORZ 100F  
         __end_of_LCD_SIZE_VERT 100E                   __Lmediumconst 0000             _uartReceiveBlocking 122E  
                     _RCSTAbits 000FAB                         printf@c 0037                         printf@f 002C  
              ___aldiv@quotient 002A                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _UART_Init 13E4            ?_uartReceiveBlocking 0020  
                     _TXSTAbits 000FAC                      ?_UART_Init 002E                   __pidataCOMRAM 1620  
                __end_of_printf 1136           ??_uartReceiveBlocking 0020             start_initialization 15C4  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 0030                     __pbssCOMRAM 0001  
              ___lwdiv@dividend 0020               __CFG_CCP2MX$PORTC 000000              _UARTinterruptState 0001  
                 UART_Init@baud 002E                       _lcdNibble 1466                        ?___aldiv 0020  
                      ?___lwdiv 0020                        ?___lwmod 0027                     ??_UART_Init 0032  
                      ?_lcdInst 0020                        ?_initLCD 0020                     __smallconst 1000  
              ___lwdiv@quotient 0024                  __size_of_putch 0014     uartReceiveBlocking@numBytes 0023  
                      _LCD_LEFT 100B                 ___aldiv@divisor 0024                 ___aldiv@counter 0028  
                      _LATDbits 000F8C                __CFG_WDTPS$32768 000000                       main@F3010 003F  
                    ?_lcdNibble 0020                   lcdNibble@data 0021                      printf@flag 0033  
                 lcdNibble@temp 0020                      printf@prec 0034                  _LCD_HORZ_LIMIT 1010  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
              __size_of___aldiv 00CC                __size_of___lwdiv 0052                __size_of___lwmod 0042  
              __size_of_lcdInst 0014                __size_of_initLCD 004C          __end_of_LCD_HORZ_LIMIT 1011  
               ___lwdiv@divisor 0022                 ___lwdiv@counter 0026                        __ptext10 1318  
                _LCD_VERT_LIMIT 100F                   __size_of_main 00F8                     ??_lcdNibble 0020  
   __end_of_uartReceiveBlocking 1318                       printf@val 0035                       putch@data 0022  
                    _INTCONbits 000FF2          __end_of_LCD_VERT_LIMIT 1010                   _LCD_SIZE_HORZ 100E  
              ___lwmod@dividend 0027                   _LCD_SIZE_VERT 100D                        printf@ap 0031  
                   lcdInst@data 0022                 ___lwmod@divisor 0029                 ___lwmod@counter 002B  
                  ___aldiv@sign 0029  
