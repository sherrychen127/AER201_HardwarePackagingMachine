

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Sep 16 23:01:23 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.42
    24                           ; Generated 13/04/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0014E6                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _UART
    63  0014E6  3D                 	db	low _uart
    64  0014E7  00                 	db	high _uart
    65                           
    66                           	psect	smallconst
    67  001000                     __psmallconst:
    68                           	opt stack 0
    69  001000  00                 	db	0
    70  001001                     _keys:
    71                           	opt stack 0
    72  001001  31                 	db	49
    73  001002  32                 	db	50
    74  001003  33                 	db	51
    75  001004  41                 	db	65
    76  001005  34                 	db	52
    77  001006  35                 	db	53
    78  001007  36                 	db	54
    79  001008  42                 	db	66
    80  001009  37                 	db	55
    81  00100A  38                 	db	56
    82  00100B  39                 	db	57
    83  00100C  43                 	db	67
    84  00100D  2A                 	db	42
    85  00100E  30                 	db	48
    86  00100F  23                 	db	35
    87  001010  44                 	db	68
    88  001011  00                 	db	0
    89  001012                     __end_of_keys:
    90                           	opt stack 0
    91  001012                     _LCD_LEFT:
    92                           	opt stack 0
    93  001012  00                 	db	0
    94  001013                     __end_of_LCD_LEFT:
    95                           	opt stack 0
    96  001013                     _LCD_RIGHT:
    97                           	opt stack 0
    98  001013  01                 	db	1
    99  001014                     __end_of_LCD_RIGHT:
   100                           	opt stack 0
   101  001014                     _LCD_SIZE_VERT:
   102                           	opt stack 0
   103  001014  02                 	db	2
   104  001015                     __end_of_LCD_SIZE_VERT:
   105                           	opt stack 0
   106  001015                     _LCD_SIZE_HORZ:
   107                           	opt stack 0
   108  001015  10                 	db	16
   109  001016                     __end_of_LCD_SIZE_HORZ:
   110                           	opt stack 0
   111  001016                     _LCD_VERT_LIMIT:
   112                           	opt stack 0
   113  001016  02                 	db	2
   114  001017                     __end_of_LCD_VERT_LIMIT:
   115                           	opt stack 0
   116  001017                     _LCD_HORZ_LIMIT:
   117                           	opt stack 0
   118  001017  28                 	db	40
   119  001018                     __end_of_LCD_HORZ_LIMIT:
   120                           	opt stack 0
   121  0000                     _LATDbits	set	3980
   122  0000                     _PORTB	set	3969
   123  0000                     _PORTBbits	set	3969
   124  0000                     _TRISE	set	3990
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISA	set	3986
   129  0000                     _LATE	set	3981
   130  0000                     _LATD	set	3980
   131  0000                     _LATC	set	3979
   132  0000                     _LATB	set	3978
   133  0000                     _LATA	set	3977
   134  0000                     _TRISC7	set	31911
   135  0000                     _TRISC6	set	31910
   136  0000                     _TXREG	set	4013
   137  0000                     _RCREG	set	4014
   138  0000                     _RCSTAbits	set	4011
   139  0000                     _TXSTAbits	set	4012
   140  0000                     _SPBRG	set	4015
   141  0000                     _ADCON1	set	4033
   142  0000                     _ADCON0	set	4034
   143  0000                     _RCIE	set	31981
   144  0000                     _TXIF	set	31988
   145  0000                     _TRMT	set	32097
   146  0000                     _TXIE	set	31980
   147  0000                     _RCIF	set	31989
   148  0000                     _INTCONbits	set	4082
   149                           
   150                           ; #config settings
   151  001018  00                 	db	0	; dummy byte at the end
   152  0000                     
   153                           	psect	cinit
   154  001488                     __pcinit:
   155                           	opt stack 0
   156  001488                     start_initialization:
   157                           	opt stack 0
   158  001488                     __initialization:
   159                           	opt stack 0
   160                           
   161                           ; Initialize objects allocated to COMRAM (2 bytes)
   162                           ; load TBLPTR registers with __pidataCOMRAM
   163  001488  0EE6               	movlw	low __pidataCOMRAM
   164  00148A  6EF6               	movwf	tblptrl,c
   165  00148C  0E14               	movlw	high __pidataCOMRAM
   166  00148E  6EF7               	movwf	tblptrh,c
   167  001490  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   168  001492  6EF8               	movwf	tblptru,c
   169  001494  0009               	tblrd		*+	;fetch initializer
   170  001496  CFF5 F049          	movff	tablat,__pdataCOMRAM
   171  00149A  0009               	tblrd		*+	;fetch initializer
   172  00149C  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   173                           
   174                           ; Clear objects allocated to COMRAM (31 bytes)
   175  0014A0  EE00  F02A         	lfsr	0,__pbssCOMRAM
   176  0014A4  0E1F               	movlw	31
   177  0014A6                     clear_0:
   178  0014A6  6AEE               	clrf	postinc0,c
   179  0014A8  06E8               	decf	wreg,f,c
   180  0014AA  E1FD               	bnz	clear_0
   181  0014AC                     end_of_initialization:
   182                           	opt stack 0
   183  0014AC                     __end_of__initialization:
   184                           	opt stack 0
   185  0014AC  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  0014AE  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  0014B0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   188  0014B2  6EF8               	movwf	tblptru,c
   189  0014B4  0E10               	movlw	high __Lsmallconst
   190  0014B6  6EF7               	movwf	tblptrh,c
   191  0014B8  0100               	movlb	0
   192  0014BA  EFF5  F008         	goto	_main	;jump to C main() function
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	bssCOMRAM
   201  00002A                     __pbssCOMRAM:
   202                           	opt stack 0
   203  00002A                     lcd@LCDinterruptState:
   204                           	opt stack 0
   205  00002A                     	ds	1
   206  00002B                     _UARTinterruptState:
   207                           	opt stack 0
   208  00002B                     	ds	1
   209  00002C                     	ds	1
   210  00002D                     _arr_dataRX:
   211                           	opt stack 0
   212  00002D                     	ds	16
   213  00003D                     _uart:
   214                           	opt stack 0
   215  00003D                     	ds	12
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	dataCOMRAM
   224  000049                     __pdataCOMRAM:
   225                           	opt stack 0
   226  000049                     _UART:
   227                           	opt stack 0
   228  000049                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	cstackCOMRAM
   237  000001                     __pcstackCOMRAM:
   238                           	opt stack 0
   239  000001                     ??_interruptHandlerUART:
   240                           
   241                           ; 1 bytes @ 0x0
   242  000001                     	ds	17
   243  000012                     ?___aldiv:
   244                           	opt stack 0
   245  000012                     lcdNibble@temp:
   246                           	opt stack 0
   247  000012                     ___aldiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 4 bytes @ 0x11
   251  000012                     	ds	1
   252  000013                     lcdNibble@data:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x12
   256  000013                     	ds	1
   257  000014                     lcdInst@data:
   258                           	opt stack 0
   259  000014                     putch@data:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x13
   263  000014                     	ds	1
   264  000015                     ??_initLCD:
   265                           
   266                           ; 1 bytes @ 0x14
   267  000015                     	ds	1
   268  000016                     ___aldiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 4 bytes @ 0x15
   272  000016                     	ds	4
   273  00001A                     ___aldiv@counter:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x19
   277  00001A                     	ds	1
   278  00001B                     ___aldiv@sign:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x1A
   282  00001B                     	ds	1
   283  00001C                     ___aldiv@quotient:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x1B
   287  00001C                     	ds	4
   288  000020                     ??_main:
   289                           
   290                           ; 1 bytes @ 0x1F
   291  000020                     	ds	4
   292  000024                     main@baudRate:
   293                           	opt stack 0
   294                           
   295                           ; 4 bytes @ 0x23
   296  000024                     	ds	4
   297  000028                     main@receivedByte:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x27
   301  000028                     	ds	1
   302  000029                     main@keypress:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x28
   306  000029                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 29 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  keypress        1   40[COMRAM] unsigned char 
   324 ;;  baudRate        4   35[COMRAM] long 
   325 ;;  receivedByte    1   39[COMRAM] unsigned char 
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   339 ;;Total ram usage:       10 bytes
   340 ;; Hardware stack levels required when called:    4
   341 ;; This function calls:
   342 ;;		___aldiv
   343 ;;		_initLCD
   344 ;;		_putch
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  0011EA                     __ptext0:
   352                           	opt stack 0
   353  0011EA                     _main:
   354                           	opt stack 27
   355                           
   356                           ;main.c: 35: LATA = 0x00;
   357                           
   358                           ;incstack = 0
   359  0011EA  0E00               	movlw	0
   360  0011EC  6E89               	movwf	3977,c	;volatile
   361                           
   362                           ;main.c: 36: LATB = 0x00;
   363  0011EE  0E00               	movlw	0
   364  0011F0  6E8A               	movwf	3978,c	;volatile
   365                           
   366                           ;main.c: 37: LATC = 0x00;
   367  0011F2  0E00               	movlw	0
   368  0011F4  6E8B               	movwf	3979,c	;volatile
   369                           
   370                           ;main.c: 38: LATD = 0x00;
   371  0011F6  0E00               	movlw	0
   372  0011F8  6E8C               	movwf	3980,c	;volatile
   373                           
   374                           ;main.c: 39: LATE = 0x00;
   375  0011FA  0E00               	movlw	0
   376  0011FC  6E8D               	movwf	3981,c	;volatile
   377                           
   378                           ;main.c: 43: TRISA = 0xFF;
   379  0011FE  6892               	setf	3986,c	;volatile
   380                           
   381                           ;main.c: 44: TRISB = 0xFF;
   382  001200  6893               	setf	3987,c	;volatile
   383                           
   384                           ;main.c: 45: TRISC = 0b10000000;
   385  001202  0E80               	movlw	128
   386  001204  6E94               	movwf	3988,c	;volatile
   387                           
   388                           ;main.c: 49: TRISD = 0x00;
   389  001206  0E00               	movlw	0
   390  001208  6E95               	movwf	3989,c	;volatile
   391                           
   392                           ;main.c: 50: TRISE = 0x00;
   393  00120A  0E00               	movlw	0
   394  00120C  6E96               	movwf	3990,c	;volatile
   395                           
   396                           ;main.c: 53: ADCON0 = 0x00;
   397  00120E  0E00               	movlw	0
   398  001210  6EC2               	movwf	4034,c	;volatile
   399                           
   400                           ;main.c: 54: ADCON1 = 0b00001111;
   401  001212  0E0F               	movlw	15
   402  001214  6EC1               	movwf	4033,c	;volatile
   403                           
   404                           ;main.c: 58: initLCD();
   405  001216  EC1E  F00A         	call	_initLCD	;wreg free
   406                           
   407                           ;main.c: 62: long baudRate = 9600;
   408  00121A  0E80               	movlw	128
   409  00121C  6E24               	movwf	main@baudRate,c
   410  00121E  0E25               	movlw	37
   411  001220  6E25               	movwf	main@baudRate+1,c
   412  001222  0E00               	movlw	0
   413  001224  6E26               	movwf	main@baudRate+2,c
   414  001226  0E00               	movlw	0
   415  001228  6E27               	movwf	main@baudRate+3,c
   416                           
   417                           ;main.c: 63: SPBRG = (unsigned char)((40000000 / (64 * baudRate)) - 1);
   418  00122A  0E00               	movlw	0
   419  00122C  6E12               	movwf	___aldiv@dividend,c
   420  00122E  0E5A               	movlw	90
   421  001230  6E13               	movwf	___aldiv@dividend+1,c
   422  001232  0E62               	movlw	98
   423  001234  6E14               	movwf	___aldiv@dividend+2,c
   424  001236  0E02               	movlw	2
   425  001238  6E15               	movwf	___aldiv@dividend+3,c
   426  00123A  C024  F020         	movff	main@baudRate,??_main
   427  00123E  C025  F021         	movff	main@baudRate+1,??_main+1
   428  001242  C026  F022         	movff	main@baudRate+2,??_main+2
   429  001246  C027  F023         	movff	main@baudRate+3,??_main+3
   430  00124A  0E06               	movlw	6
   431  00124C                     u515:
   432  00124C  90D8               	bcf	status,0,c
   433  00124E  3620               	rlcf	??_main,f,c
   434  001250  3621               	rlcf	??_main+1,f,c
   435  001252  3622               	rlcf	??_main+2,f,c
   436  001254  3623               	rlcf	??_main+3,f,c
   437  001256  2EE8               	decfsz	wreg,f,c
   438  001258  D7F9               	goto	u515
   439  00125A  C020  F016         	movff	??_main,___aldiv@divisor
   440  00125E  C021  F017         	movff	??_main+1,___aldiv@divisor+1
   441  001262  C022  F018         	movff	??_main+2,___aldiv@divisor+2
   442  001266  C023  F019         	movff	??_main+3,___aldiv@divisor+3
   443  00126A  EC79  F009         	call	___aldiv	;wreg free
   444  00126E  0412               	decf	?___aldiv,w,c
   445  001270  6EAF               	movwf	4015,c	;volatile
   446                           
   447                           ;main.c: 66: TXSTAbits.TX9 = 0;
   448  001272  9CAC               	bcf	4012,6,c	;volatile
   449                           
   450                           ;main.c: 67: TXSTAbits.SYNC = 0;
   451  001274  98AC               	bcf	4012,4,c	;volatile
   452                           
   453                           ;main.c: 68: TXSTAbits.TXEN = 1;
   454  001276  8AAC               	bsf	4012,5,c	;volatile
   455                           
   456                           ;main.c: 69: _delay((unsigned long)((5)*(40000000/4000.0)));
   457  001278  0E41               	movlw	65
   458  00127A  6E20               	movwf	??_main& (0+255),c
   459  00127C  0EEE               	movlw	238
   460  00127E                     u607:
   461  00127E  2EE8               	decfsz	wreg,f,c
   462  001280  D7FE               	bra	u607
   463  001282  2E20               	decfsz	??_main& (0+255),f,c
   464  001284  D7FC               	bra	u607
   465  001286  D000               	nop2	
   466                           
   467                           ;main.c: 72: RCSTAbits.RX9 = 0;
   468  001288  9CAB               	bcf	4011,6,c	;volatile
   469                           
   470                           ;main.c: 73: RCSTAbits.CREN = 1;
   471  00128A  88AB               	bsf	4011,4,c	;volatile
   472                           
   473                           ;main.c: 76: TRISC6 = 0;
   474  00128C  9C94               	bcf	3988,6,c	;volatile
   475                           
   476                           ;main.c: 77: TRISC7 = 1;
   477  00128E  8E94               	bsf	3988,7,c	;volatile
   478                           
   479                           ;main.c: 80: RCSTAbits.SPEN = 1;
   480  001290  8EAB               	bsf	4011,7,c	;volatile
   481  001292                     l84:
   482  001292  A281               	btfss	3969,1,c	;volatile
   483  001294  BA9E               	btfsc	3998,5,c	;volatile
   484  001296  D001               	goto	l88
   485  001298  D7FC               	goto	l84
   486  00129A                     l88:
   487                           
   488                           ;main.c: 97: if(RCIF){
   489  00129A  AA9E               	btfss	3998,5,c	;volatile
   490  00129C  D00A               	goto	l1330
   491                           
   492                           ;main.c: 100: receivedByte = RCREG;
   493  00129E  CFAE F028          	movff	4014,main@receivedByte	;volatile
   494                           
   495                           ;main.c: 105: if(RCSTAbits.OERR){
   496  0012A2  A2AB               	btfss	4011,1,c	;volatile
   497  0012A4  D002               	goto	l1328
   498                           
   499                           ;main.c: 107: RCSTAbits.CREN = 0;
   500  0012A6  98AB               	bcf	4011,4,c	;volatile
   501                           
   502                           ;main.c: 108: RCSTAbits.CREN = 1;
   503  0012A8  88AB               	bsf	4011,4,c	;volatile
   504  0012AA                     l1328:
   505                           
   506                           ;main.c: 109: }
   507                           ;main.c: 110: putch(receivedByte);
   508  0012AA  5028               	movf	main@receivedByte,w,c
   509  0012AC  EC5F  F00A         	call	_putch
   510                           
   511                           ;main.c: 111: continue;
   512  0012B0  D7F0               	goto	l84
   513  0012B2                     l1330:
   514                           
   515                           ;main.c: 112: }
   516                           ;main.c: 118: unsigned char keypress = (PORTB & 0xF0) >> 4;
   517  0012B2  3881               	swapf	3969,w,c	;volatile
   518  0012B4  0B0F               	andlw	15
   519  0012B6  0B0F               	andlw	15
   520  0012B8  6E29               	movwf	main@keypress,c
   521  0012BA                     l92:
   522  0012BA  B281               	btfsc	3969,1,c	;volatile
   523  0012BC  D7FE               	goto	l92
   524  0012BE                     l1332:
   525  0012BE  B2AC               	btfsc	4012,1,c	;volatile
   526  0012C0  D002               	goto	u570
   527  0012C2  0E01               	movlw	1
   528  0012C4  D001               	goto	u572
   529  0012C6                     u570:
   530  0012C6  0E00               	movlw	0
   531  0012C8                     u572:
   532  0012C8  6E20               	movwf	??_main& (0+255),c
   533  0012CA  B89D               	btfsc	3997,4,c	;volatile
   534  0012CC  D002               	goto	u580
   535  0012CE  0E01               	movlw	1
   536  0012D0  D001               	goto	u582
   537  0012D2                     u580:
   538  0012D2  0E00               	movlw	0
   539  0012D4                     u582:
   540  0012D4  1020               	iorwf	??_main,w,c
   541  0012D6  E1F3               	bnz	l1332
   542                           
   543                           ;main.c: 127: __nop();
   544  0012D8  F000               	nop	
   545                           
   546                           ;main.c: 130: TXREG = keys[keypress];
   547  0012DA  5029               	movf	main@keypress,w,c
   548  0012DC  0D01               	mullw	1
   549  0012DE  0E01               	movlw	low _keys
   550  0012E0  24F3               	addwf	prodl,w,c
   551  0012E2  6EF6               	movwf	tblptrl,c
   552  0012E4  0E10               	movlw	high _keys
   553  0012E6  20F4               	addwfc	prodh,w,c
   554  0012E8  6EF7               	movwf	tblptrh,c
   555  0012EA                     	if	0	;There are less than 3 active tblptr bytes
   556  0012EA                     	endif
   557  0012EA  0008               	tblrd		*
   558  0012EC  CFF5 FFAD          	movff	tablat,4013	;volatile
   559  0012F0  D7D0               	goto	l84
   560  0012F2                     __end_of_main:
   561                           	opt stack 0
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           prodh	equ	0xFF4
   567                           prodl	equ	0xFF3
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           status	equ	0xFD8
   571                           
   572 ;; *************** function _putch *****************
   573 ;; Defined at:
   574 ;;		line 24 in file "lcd.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  data            1    wreg     unsigned char 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  data            1   19[COMRAM] unsigned char 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;Total ram usage:        1 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; Hardware stack levels required when called:    2
   595 ;; This function calls:
   596 ;;		_lcdNibble
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text1
   603  0014BE                     __ptext1:
   604                           	opt stack 0
   605  0014BE                     _putch:
   606                           	opt stack 28
   607                           
   608                           ;incstack = 0
   609                           ;putch@data stored from wreg
   610  0014BE  6E14               	movwf	putch@data,c
   611                           
   612                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   613  0014C0  848C               	bsf	3980,2,c	;volatile
   614                           
   615                           ;lcd.c: 33: lcdNibble(data);
   616  0014C2  5014               	movf	putch@data,w,c
   617  0014C4  ECDF  F009         	call	_lcdNibble
   618                           
   619                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   620  0014C8  0EC8               	movlw	200
   621  0014CA                     u617:
   622  0014CA  D000               	nop2	
   623  0014CC  2EE8               	decfsz	wreg,f,c
   624  0014CE  D7FD               	bra	u617
   625  0014D0  0012               	return		;funcret
   626  0014D2                     __end_of_putch:
   627                           	opt stack 0
   628                           tblptru	equ	0xFF8
   629                           tblptrh	equ	0xFF7
   630                           tblptrl	equ	0xFF6
   631                           tablat	equ	0xFF5
   632                           prodh	equ	0xFF4
   633                           prodl	equ	0xFF3
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           status	equ	0xFD8
   637                           
   638 ;; *************** function _initLCD *****************
   639 ;; Defined at:
   640 ;;		line 60 in file "lcd.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;		None
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, status,2, status,0, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   658 ;;Total ram usage:        1 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; Hardware stack levels required when called:    3
   661 ;; This function calls:
   662 ;;		_lcdInst
   663 ;; This function is called by:
   664 ;;		_main
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text2
   669  00143C                     __ptext2:
   670                           	opt stack 0
   671  00143C                     _initLCD:
   672                           	opt stack 27
   673                           
   674                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   675                           
   676                           ;incstack = 0
   677  00143C  0EC3               	movlw	195
   678  00143E  6E15               	movwf	??_initLCD& (0+255),c
   679  001440  0ECD               	movlw	205
   680  001442                     u627:
   681  001442  2EE8               	decfsz	wreg,f,c
   682  001444  D7FE               	bra	u627
   683  001446  2E15               	decfsz	??_initLCD& (0+255),f,c
   684  001448  D7FC               	bra	u627
   685  00144A  F000               	nop	
   686                           
   687                           ;lcd.c: 69: lcdInst(0b00110011);
   688  00144C  0E33               	movlw	51
   689  00144E  EC69  F00A         	call	_lcdInst
   690                           
   691                           ;lcd.c: 70: lcdInst(0b00110010);
   692  001452  0E32               	movlw	50
   693  001454  EC69  F00A         	call	_lcdInst
   694                           
   695                           ;lcd.c: 71: lcdInst(0b00101000);
   696  001458  0E28               	movlw	40
   697  00145A  EC69  F00A         	call	_lcdInst
   698                           
   699                           ;lcd.c: 72: lcdInst(0b00001111);
   700  00145E  0E0F               	movlw	15
   701  001460  EC69  F00A         	call	_lcdInst
   702                           
   703                           ;lcd.c: 73: lcdInst(0b00000110);
   704  001464  0E06               	movlw	6
   705  001466  EC69  F00A         	call	_lcdInst
   706                           
   707                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   708  00146A  0E01               	movlw	1
   709  00146C  EC69  F00A         	call	_lcdInst
   710  001470  0EC3               	movlw	195
   711  001472  6E15               	movwf	??_initLCD& (0+255),c
   712  001474  0ECD               	movlw	205
   713  001476                     u637:
   714  001476  2EE8               	decfsz	wreg,f,c
   715  001478  D7FE               	bra	u637
   716  00147A  2E15               	decfsz	??_initLCD& (0+255),f,c
   717  00147C  D7FC               	bra	u637
   718  00147E  F000               	nop	
   719                           
   720                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   721  001480  0E0F               	movlw	15
   722  001482  EC69  F00A         	call	_lcdInst
   723  001486  0012               	return		;funcret
   724  001488                     __end_of_initLCD:
   725                           	opt stack 0
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           prodh	equ	0xFF4
   731                           prodl	equ	0xFF3
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           status	equ	0xFD8
   735                           
   736 ;; *************** function _lcdInst *****************
   737 ;; Defined at:
   738 ;;		line 11 in file "lcd.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  data            1    wreg     unsigned char 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  data            1   19[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;Total ram usage:        1 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    2
   759 ;; This function calls:
   760 ;;		_lcdNibble
   761 ;; This function is called by:
   762 ;;		_initLCD
   763 ;;		_lcd_set_cursor
   764 ;;		_lcd_shift_cursor
   765 ;;		_lcd_shift_display
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text3
   770  0014D2                     __ptext3:
   771                           	opt stack 0
   772  0014D2                     _lcdInst:
   773                           	opt stack 27
   774                           
   775                           ;incstack = 0
   776                           ;lcdInst@data stored from wreg
   777  0014D2  6E14               	movwf	lcdInst@data,c
   778                           
   779                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   780  0014D4  948C               	bcf	3980,2,c	;volatile
   781                           
   782                           ;lcd.c: 20: lcdNibble(data);
   783  0014D6  5014               	movf	lcdInst@data,w,c
   784  0014D8  ECDF  F009         	call	_lcdNibble
   785                           
   786                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   787  0014DC  0EC8               	movlw	200
   788  0014DE                     u647:
   789  0014DE  D000               	nop2	
   790  0014E0  2EE8               	decfsz	wreg,f,c
   791  0014E2  D7FD               	bra	u647
   792  0014E4  0012               	return		;funcret
   793  0014E6                     __end_of_lcdInst:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           prodh	equ	0xFF4
   800                           prodl	equ	0xFF3
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           status	equ	0xFD8
   804                           
   805 ;; *************** function _lcdNibble *****************
   806 ;; Defined at:
   807 ;;		line 37 in file "lcd.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;  data            1    wreg     unsigned char 
   810 ;; Auto vars:     Size  Location     Type
   811 ;;  data            1   18[COMRAM] unsigned char 
   812 ;;  temp            1   17[COMRAM] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   826 ;;Total ram usage:        2 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_lcdInst
   833 ;;		_putch
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text4
   838  0013BE                     __ptext4:
   839                           	opt stack 0
   840  0013BE                     _lcdNibble:
   841                           	opt stack 28
   842                           
   843                           ;incstack = 0
   844                           ;lcdNibble@data stored from wreg
   845  0013BE  6E13               	movwf	lcdNibble@data,c
   846                           
   847                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   848  0013C0  5013               	movf	lcdNibble@data,w,c
   849  0013C2  0BF0               	andlw	240
   850  0013C4  6E12               	movwf	lcdNibble@temp,c
   851                           
   852                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   853  0013C6  508C               	movf	3980,w,c	;volatile
   854  0013C8  0B0F               	andlw	15
   855  0013CA  6E8C               	movwf	3980,c	;volatile
   856                           
   857                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   858  0013CC  5012               	movf	lcdNibble@temp,w,c
   859  0013CE  108C               	iorwf	3980,w,c	;volatile
   860  0013D0  6E8C               	movwf	3980,c	;volatile
   861                           
   862                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   863  0013D2  0E00               	movlw	0
   864  0013D4  BEF2               	btfsc	intcon,7,c	;volatile
   865  0013D6  0E01               	movlw	1
   866  0013D8  6E2A               	movwf	lcd@LCDinterruptState,c
   867  0013DA  9EF2               	bcf	intcon,7,c	;volatile
   868  0013DC  868C               	bsf	3980,3,c	;volatile
   869  0013DE  0E53               	movlw	83
   870  0013E0                     u657:
   871  0013E0  2EE8               	decfsz	wreg,f,c
   872  0013E2  D7FE               	bra	u657
   873  0013E4  F000               	nop	
   874  0013E6  968C               	bcf	3980,3,c	;volatile
   875  0013E8  0EC8               	movlw	200
   876  0013EA                     u667:
   877  0013EA  D000               	nop2	
   878  0013EC  2EE8               	decfsz	wreg,f,c
   879  0013EE  D7FD               	bra	u667
   880  0013F0  B02A               	btfsc	lcd@LCDinterruptState,0,c
   881  0013F2  D002               	bra	u15
   882  0013F4  9EF2               	bcf	intcon,7,c	;volatile
   883  0013F6  D001               	bra	u16
   884  0013F8                     u15:
   885  0013F8  8EF2               	bsf	intcon,7,c	;volatile
   886  0013FA                     u16:
   887                           
   888                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   889  0013FA  3813               	swapf	lcdNibble@data,w,c
   890  0013FC  0BF0               	andlw	240
   891  0013FE  6E13               	movwf	lcdNibble@data,c
   892                           
   893                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   894  001400  5013               	movf	lcdNibble@data,w,c
   895  001402  0BF0               	andlw	240
   896  001404  6E12               	movwf	lcdNibble@temp,c
   897                           
   898                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   899  001406  508C               	movf	3980,w,c	;volatile
   900  001408  0B0F               	andlw	15
   901  00140A  6E8C               	movwf	3980,c	;volatile
   902                           
   903                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   904  00140C  5012               	movf	lcdNibble@temp,w,c
   905  00140E  108C               	iorwf	3980,w,c	;volatile
   906  001410  6E8C               	movwf	3980,c	;volatile
   907                           
   908                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   909  001412  0E00               	movlw	0
   910  001414  BEF2               	btfsc	intcon,7,c	;volatile
   911  001416  0E01               	movlw	1
   912  001418  6E2A               	movwf	lcd@LCDinterruptState,c
   913  00141A  9EF2               	bcf	intcon,7,c	;volatile
   914  00141C  868C               	bsf	3980,3,c	;volatile
   915  00141E  0E53               	movlw	83
   916  001420                     u677:
   917  001420  2EE8               	decfsz	wreg,f,c
   918  001422  D7FE               	bra	u677
   919  001424  F000               	nop	
   920  001426  968C               	bcf	3980,3,c	;volatile
   921  001428  0EC8               	movlw	200
   922  00142A                     u687:
   923  00142A  D000               	nop2	
   924  00142C  2EE8               	decfsz	wreg,f,c
   925  00142E  D7FD               	bra	u687
   926  001430  B02A               	btfsc	lcd@LCDinterruptState,0,c
   927  001432  D002               	bra	u25
   928  001434  9EF2               	bcf	intcon,7,c	;volatile
   929  001436  D001               	bra	u26
   930  001438                     u25:
   931  001438  8EF2               	bsf	intcon,7,c	;volatile
   932  00143A                     u26:
   933  00143A  0012               	return		;funcret
   934  00143C                     __end_of_lcdNibble:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           prodh	equ	0xFF4
   941                           prodl	equ	0xFF3
   942                           intcon	equ	0xFF2
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function ___aldiv *****************
   948 ;; Defined at:
   949 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        4   17[COMRAM] long 
   952 ;;  divisor         4   21[COMRAM] long 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        4   27[COMRAM] long 
   955 ;;  sign            1   26[COMRAM] unsigned char 
   956 ;;  counter         1   25[COMRAM] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  4   17[COMRAM] long 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   966 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;Total ram usage:       14 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    1
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_main
   977 ;;		_UART_Init
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text5
   982  0012F2                     __ptext5:
   983                           	opt stack 0
   984  0012F2                     ___aldiv:
   985                           	opt stack 29
   986                           
   987                           ;incstack = 0
   988  0012F2  0E00               	movlw	0
   989  0012F4  6E1B               	movwf	___aldiv@sign,c
   990  0012F6  AE19               	btfss	___aldiv@divisor+3,7,c
   991  0012F8  D00A               	goto	l1258
   992  0012FA  1E19               	comf	___aldiv@divisor+3,f,c
   993  0012FC  1E18               	comf	___aldiv@divisor+2,f,c
   994  0012FE  1E17               	comf	___aldiv@divisor+1,f,c
   995  001300  6C16               	negf	___aldiv@divisor,c
   996  001302  0E00               	movlw	0
   997  001304  2217               	addwfc	___aldiv@divisor+1,f,c
   998  001306  2218               	addwfc	___aldiv@divisor+2,f,c
   999  001308  2219               	addwfc	___aldiv@divisor+3,f,c
  1000  00130A  0E01               	movlw	1
  1001  00130C  6E1B               	movwf	___aldiv@sign,c
  1002  00130E                     l1258:
  1003  00130E  AE15               	btfss	___aldiv@dividend+3,7,c
  1004  001310  D00A               	goto	l1264
  1005  001312  1E15               	comf	___aldiv@dividend+3,f,c
  1006  001314  1E14               	comf	___aldiv@dividend+2,f,c
  1007  001316  1E13               	comf	___aldiv@dividend+1,f,c
  1008  001318  6C12               	negf	___aldiv@dividend,c
  1009  00131A  0E00               	movlw	0
  1010  00131C  2213               	addwfc	___aldiv@dividend+1,f,c
  1011  00131E  2214               	addwfc	___aldiv@dividend+2,f,c
  1012  001320  2215               	addwfc	___aldiv@dividend+3,f,c
  1013  001322  0E01               	movlw	1
  1014  001324  1A1B               	xorwf	___aldiv@sign,f,c
  1015  001326                     l1264:
  1016  001326  0E00               	movlw	0
  1017  001328  6E1C               	movwf	___aldiv@quotient,c
  1018  00132A  0E00               	movlw	0
  1019  00132C  6E1D               	movwf	___aldiv@quotient+1,c
  1020  00132E  0E00               	movlw	0
  1021  001330  6E1E               	movwf	___aldiv@quotient+2,c
  1022  001332  0E00               	movlw	0
  1023  001334  6E1F               	movwf	___aldiv@quotient+3,c
  1024  001336  5016               	movf	___aldiv@divisor,w,c
  1025  001338  1017               	iorwf	___aldiv@divisor+1,w,c
  1026  00133A  1018               	iorwf	___aldiv@divisor+2,w,c
  1027  00133C  1019               	iorwf	___aldiv@divisor+3,w,c
  1028  00133E  B4D8               	btfsc	status,2,c
  1029  001340  D02A               	goto	l1286
  1030  001342  0E01               	movlw	1
  1031  001344  6E1A               	movwf	___aldiv@counter,c
  1032  001346  D006               	goto	l1272
  1033  001348                     l1270:
  1034  001348  90D8               	bcf	status,0,c
  1035  00134A  3616               	rlcf	___aldiv@divisor,f,c
  1036  00134C  3617               	rlcf	___aldiv@divisor+1,f,c
  1037  00134E  3618               	rlcf	___aldiv@divisor+2,f,c
  1038  001350  3619               	rlcf	___aldiv@divisor+3,f,c
  1039  001352  2A1A               	incf	___aldiv@counter,f,c
  1040  001354                     l1272:
  1041  001354  AE19               	btfss	___aldiv@divisor+3,7,c
  1042  001356  D7F8               	goto	l1270
  1043  001358                     l1274:
  1044  001358  90D8               	bcf	status,0,c
  1045  00135A  361C               	rlcf	___aldiv@quotient,f,c
  1046  00135C  361D               	rlcf	___aldiv@quotient+1,f,c
  1047  00135E  361E               	rlcf	___aldiv@quotient+2,f,c
  1048  001360  361F               	rlcf	___aldiv@quotient+3,f,c
  1049  001362  5016               	movf	___aldiv@divisor,w,c
  1050  001364  5C12               	subwf	___aldiv@dividend,w,c
  1051  001366  5017               	movf	___aldiv@divisor+1,w,c
  1052  001368  5813               	subwfb	___aldiv@dividend+1,w,c
  1053  00136A  5018               	movf	___aldiv@divisor+2,w,c
  1054  00136C  5814               	subwfb	___aldiv@dividend+2,w,c
  1055  00136E  5019               	movf	___aldiv@divisor+3,w,c
  1056  001370  5815               	subwfb	___aldiv@dividend+3,w,c
  1057  001372  A0D8               	btfss	status,0,c
  1058  001374  D009               	goto	l1282
  1059  001376  5016               	movf	___aldiv@divisor,w,c
  1060  001378  5E12               	subwf	___aldiv@dividend,f,c
  1061  00137A  5017               	movf	___aldiv@divisor+1,w,c
  1062  00137C  5A13               	subwfb	___aldiv@dividend+1,f,c
  1063  00137E  5018               	movf	___aldiv@divisor+2,w,c
  1064  001380  5A14               	subwfb	___aldiv@dividend+2,f,c
  1065  001382  5019               	movf	___aldiv@divisor+3,w,c
  1066  001384  5A15               	subwfb	___aldiv@dividend+3,f,c
  1067  001386  801C               	bsf	___aldiv@quotient,0,c
  1068  001388                     l1282:
  1069  001388  90D8               	bcf	status,0,c
  1070  00138A  3219               	rrcf	___aldiv@divisor+3,f,c
  1071  00138C  3218               	rrcf	___aldiv@divisor+2,f,c
  1072  00138E  3217               	rrcf	___aldiv@divisor+1,f,c
  1073  001390  3216               	rrcf	___aldiv@divisor,f,c
  1074  001392  2E1A               	decfsz	___aldiv@counter,f,c
  1075  001394  D7E1               	goto	l1274
  1076  001396                     l1286:
  1077  001396  501B               	movf	___aldiv@sign,w,c
  1078  001398  B4D8               	btfsc	status,2,c
  1079  00139A  D008               	goto	l1290
  1080  00139C  1E1F               	comf	___aldiv@quotient+3,f,c
  1081  00139E  1E1E               	comf	___aldiv@quotient+2,f,c
  1082  0013A0  1E1D               	comf	___aldiv@quotient+1,f,c
  1083  0013A2  6C1C               	negf	___aldiv@quotient,c
  1084  0013A4  0E00               	movlw	0
  1085  0013A6  221D               	addwfc	___aldiv@quotient+1,f,c
  1086  0013A8  221E               	addwfc	___aldiv@quotient+2,f,c
  1087  0013AA  221F               	addwfc	___aldiv@quotient+3,f,c
  1088  0013AC                     l1290:
  1089  0013AC  C01C  F012         	movff	___aldiv@quotient,?___aldiv
  1090  0013B0  C01D  F013         	movff	___aldiv@quotient+1,?___aldiv+1
  1091  0013B4  C01E  F014         	movff	___aldiv@quotient+2,?___aldiv+2
  1092  0013B8  C01F  F015         	movff	___aldiv@quotient+3,?___aldiv+3
  1093  0013BC  0012               	return	
  1094  0013BE                     __end_of___aldiv:
  1095                           	opt stack 0
  1096                           tblptru	equ	0xFF8
  1097                           tblptrh	equ	0xFF7
  1098                           tblptrl	equ	0xFF6
  1099                           tablat	equ	0xFF5
  1100                           prodh	equ	0xFF4
  1101                           prodl	equ	0xFF3
  1102                           intcon	equ	0xFF2
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           status	equ	0xFD8
  1106                           
  1107 ;; *************** function _interruptHandlerUART *****************
  1108 ;; Defined at:
  1109 ;;		line 10 in file "interruptUART.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;Total ram usage:       17 bytes
  1128 ;; Hardware stack levels used:    1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		Interrupt level 2
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	intcode
  1137  000008                     __pintcode:
  1138                           	opt stack 0
  1139  000008                     _interruptHandlerUART:
  1140                           	opt stack 27
  1141                           
  1142                           ;incstack = 0
  1143  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1144  00000A  ED0D  F008         	call	int_func,f	;refresh shadow registers
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           prodh	equ	0xFF4
  1150                           prodl	equ	0xFF3
  1151                           intcon	equ	0xFF2
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           status	equ	0xFD8
  1155                           
  1156                           	psect	intcode_body
  1157  00101A                     __pintcode_body:
  1158                           	opt stack 27
  1159  00101A                     int_func:
  1160                           	opt stack 27
  1161  00101A  0006               	pop		; remove dummy address from shadow register refresh
  1162  00101C  CFFA F004          	movff	pclath,??_interruptHandlerUART+3
  1163  001020  CFFB F005          	movff	pclatu,??_interruptHandlerUART+4
  1164  001024  CFE9 F006          	movff	fsr0l,??_interruptHandlerUART+5
  1165  001028  CFEA F007          	movff	fsr0h,??_interruptHandlerUART+6
  1166  00102C  CFE1 F008          	movff	fsr1l,??_interruptHandlerUART+7
  1167  001030  CFE2 F009          	movff	fsr1h,??_interruptHandlerUART+8
  1168  001034  CFD9 F00A          	movff	fsr2l,??_interruptHandlerUART+9
  1169  001038  CFDA F00B          	movff	fsr2h,??_interruptHandlerUART+10
  1170  00103C  CFF3 F00C          	movff	prodl,??_interruptHandlerUART+11
  1171  001040  CFF4 F00D          	movff	prodh,??_interruptHandlerUART+12
  1172  001044  CFF6 F00E          	movff	tblptrl,??_interruptHandlerUART+13
  1173  001048  CFF7 F00F          	movff	tblptrh,??_interruptHandlerUART+14
  1174  00104C  CFF8 F010          	movff	tblptru,??_interruptHandlerUART+15
  1175  001050  CFF5 F011          	movff	tablat,??_interruptHandlerUART+16
  1176                           
  1177                           ;interruptUART.c: 17: if(TXIF){
  1178  001054  A89E               	btfss	3998,4,c	;volatile
  1179  001056  D044               	goto	i2l1102
  1180                           
  1181                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
  1182  001058  0E00               	movlw	0
  1183  00105A  BEF2               	btfsc	intcon,7,c	;volatile
  1184  00105C  0E01               	movlw	1
  1185  00105E  6E2B               	movwf	_UARTinterruptState,c	;volatile
  1186                           
  1187                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
  1188  001060  9EF2               	bcf	intcon,7,c	;volatile
  1189                           
  1190                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
  1191  001062  EE20 F003          	lfsr	2,3
  1192  001066  5049               	movf	_UART,w,c
  1193  001068  26D9               	addwf	fsr2l,f,c
  1194  00106A  504A               	movf	_UART+1,w,c
  1195  00106C  22DA               	addwfc	fsr2h,f,c
  1196  00106E  50DF               	movf	indf2,w,c
  1197  001070  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1198  001072  5001               	movf	??_interruptHandlerUART,w,c
  1199  001074  0D01               	mullw	1
  1200  001076  C049  FFD9         	movff	_UART,fsr2l
  1201  00107A  C04A  FFDA         	movff	_UART+1,fsr2h
  1202  00107E  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1203  001082  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1204  001086  50F3               	movf	prodl,w,c
  1205  001088  2402               	addwf	??_interruptHandlerUART+1,w,c
  1206  00108A  6ED9               	movwf	fsr2l,c
  1207  00108C  50F4               	movf	prodh,w,c
  1208  00108E  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1209  001090  6EDA               	movwf	fsr2h,c
  1210  001092  50DF               	movf	indf2,w,c
  1211  001094  6EAD               	movwf	4013,c	;volatile
  1212                           
  1213                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
  1214  001096  B02B               	btfsc	_UARTinterruptState,0,c	;volatile
  1215  001098  D002               	bra	i2u24_45
  1216  00109A  9EF2               	bcf	intcon,7,c	;volatile
  1217  00109C  D001               	bra	i2u24_46
  1218  00109E                     i2u24_45:
  1219  00109E  8EF2               	bsf	intcon,7,c	;volatile
  1220  0010A0                     i2u24_46:
  1221                           
  1222                           ;interruptUART.c: 24: UART -> _numTransmits++;
  1223  0010A0  EE20 F003          	lfsr	2,3
  1224  0010A4  5049               	movf	_UART,w,c
  1225  0010A6  26D9               	addwf	fsr2l,f,c
  1226  0010A8  504A               	movf	_UART+1,w,c
  1227  0010AA  22DA               	addwfc	fsr2h,f,c
  1228  0010AC  2ADF               	incf	indf2,f,c
  1229                           
  1230                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
  1231  0010AE  EE20 F002          	lfsr	2,2
  1232  0010B2  5049               	movf	_UART,w,c
  1233  0010B4  26D9               	addwf	fsr2l,f,c
  1234  0010B6  504A               	movf	_UART+1,w,c
  1235  0010B8  22DA               	addwfc	fsr2h,f,c
  1236  0010BA  EE10 F003          	lfsr	1,3
  1237  0010BE  5049               	movf	_UART,w,c
  1238  0010C0  26E1               	addwf	fsr1l,f,c
  1239  0010C2  504A               	movf	_UART+1,w,c
  1240  0010C4  22E2               	addwfc	fsr1h,f,c
  1241  0010C6  50DE               	movf	postinc2,w,c
  1242  0010C8  18E6               	xorwf	postinc1,w,c
  1243  0010CA  A4D8               	btfss	status,2,c
  1244  0010CC  D009               	goto	i2l1102
  1245                           
  1246                           ;interruptUART.c: 28: TXIE = 0;
  1247  0010CE  989D               	bcf	3997,4,c	;volatile
  1248                           
  1249                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
  1250  0010D0  EE20 F008          	lfsr	2,8
  1251  0010D4  5049               	movf	_UART,w,c
  1252  0010D6  26D9               	addwf	fsr2l,f,c
  1253  0010D8  504A               	movf	_UART+1,w,c
  1254  0010DA  22DA               	addwfc	fsr2h,f,c
  1255  0010DC  0E01               	movlw	1
  1256  0010DE  6EDF               	movwf	indf2,c
  1257  0010E0                     i2l1102:
  1258                           
  1259                           ;interruptUART.c: 32: }
  1260                           ;interruptUART.c: 33: }
  1261                           ;interruptUART.c: 36: if(RCIF){
  1262  0010E0  AA9E               	btfss	3998,5,c	;volatile
  1263  0010E2  D065               	goto	i2l189
  1264                           
  1265                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
  1266  0010E4  A4AB               	btfss	4011,2,c	;volatile
  1267  0010E6  D008               	goto	i2l1108
  1268                           
  1269                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
  1270  0010E8  EE20 F00A          	lfsr	2,10
  1271  0010EC  5049               	movf	_UART,w,c
  1272  0010EE  26D9               	addwf	fsr2l,f,c
  1273  0010F0  504A               	movf	_UART+1,w,c
  1274  0010F2  22DA               	addwfc	fsr2h,f,c
  1275  0010F4  0E01               	movlw	1
  1276  0010F6  D007               	goto	L1
  1277  0010F8                     i2l1108:
  1278                           
  1279                           ;interruptUART.c: 45: else{
  1280                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
  1281  0010F8  EE20 F00A          	lfsr	2,10
  1282  0010FC  5049               	movf	_UART,w,c
  1283  0010FE  26D9               	addwf	fsr2l,f,c
  1284  001100  504A               	movf	_UART+1,w,c
  1285  001102  22DA               	addwfc	fsr2h,f,c
  1286  001104  0E00               	movlw	0
  1287  001106                     L1:
  1288  001106  6EDF               	movwf	indf2,c
  1289                           
  1290                           ;interruptUART.c: 47: }
  1291                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
  1292  001108  0E00               	movlw	0
  1293  00110A  BEF2               	btfsc	intcon,7,c	;volatile
  1294  00110C  0E01               	movlw	1
  1295  00110E  6E2B               	movwf	_UARTinterruptState,c	;volatile
  1296                           
  1297                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
  1298  001110  9EF2               	bcf	intcon,7,c	;volatile
  1299                           
  1300                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
  1301  001112  EE20 F007          	lfsr	2,7
  1302  001116  5049               	movf	_UART,w,c
  1303  001118  26D9               	addwf	fsr2l,f,c
  1304  00111A  504A               	movf	_UART+1,w,c
  1305  00111C  22DA               	addwfc	fsr2h,f,c
  1306  00111E  50DF               	movf	indf2,w,c
  1307  001120  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1308  001122  5001               	movf	??_interruptHandlerUART,w,c
  1309  001124  0D01               	mullw	1
  1310  001126  EE20 F004          	lfsr	2,4
  1311  00112A  5049               	movf	_UART,w,c
  1312  00112C  26D9               	addwf	fsr2l,f,c
  1313  00112E  504A               	movf	_UART+1,w,c
  1314  001130  22DA               	addwfc	fsr2h,f,c
  1315  001132  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1316  001136  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1317  00113A  50F3               	movf	prodl,w,c
  1318  00113C  2402               	addwf	??_interruptHandlerUART+1,w,c
  1319  00113E  6ED9               	movwf	fsr2l,c
  1320  001140  50F4               	movf	prodh,w,c
  1321  001142  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1322  001144  6EDA               	movwf	fsr2h,c
  1323  001146  CFAE FFDF          	movff	4014,indf2	;volatile
  1324                           
  1325                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
  1326  00114A  B02B               	btfsc	_UARTinterruptState,0,c	;volatile
  1327  00114C  D002               	bra	i2u28_45
  1328  00114E  9EF2               	bcf	intcon,7,c	;volatile
  1329  001150  D001               	bra	i2u28_46
  1330  001152                     i2u28_45:
  1331  001152  8EF2               	bsf	intcon,7,c	;volatile
  1332  001154                     i2u28_46:
  1333                           
  1334                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
  1335  001154  A2AB               	btfss	4011,1,c	;volatile
  1336  001156  D003               	goto	i2l1122
  1337                           
  1338                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
  1339  001158  98AB               	bcf	4011,4,c	;volatile
  1340                           
  1341                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
  1342  00115A  88AB               	bsf	4011,4,c	;volatile
  1343                           
  1344                           ;interruptUART.c: 61: }
  1345  00115C  D008               	goto	i2l187
  1346  00115E                     i2l1122:
  1347                           
  1348                           ;interruptUART.c: 62: else{
  1349                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
  1350  00115E  EE20 F00B          	lfsr	2,11
  1351  001162  5049               	movf	_UART,w,c
  1352  001164  26D9               	addwf	fsr2l,f,c
  1353  001166  504A               	movf	_UART+1,w,c
  1354  001168  22DA               	addwfc	fsr2h,f,c
  1355  00116A  0E00               	movlw	0
  1356  00116C  6EDF               	movwf	indf2,c
  1357  00116E                     i2l187:
  1358                           
  1359                           ;interruptUART.c: 64: }
  1360                           ;interruptUART.c: 66: UART -> _numReceives++;
  1361  00116E  EE20 F007          	lfsr	2,7
  1362  001172  5049               	movf	_UART,w,c
  1363  001174  26D9               	addwf	fsr2l,f,c
  1364  001176  504A               	movf	_UART+1,w,c
  1365  001178  22DA               	addwfc	fsr2h,f,c
  1366  00117A  2ADF               	incf	indf2,f,c
  1367                           
  1368                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
  1369  00117C  EE20 F006          	lfsr	2,6
  1370  001180  5049               	movf	_UART,w,c
  1371  001182  26D9               	addwf	fsr2l,f,c
  1372  001184  504A               	movf	_UART+1,w,c
  1373  001186  22DA               	addwfc	fsr2h,f,c
  1374  001188  EE10 F007          	lfsr	1,7
  1375  00118C  5049               	movf	_UART,w,c
  1376  00118E  26E1               	addwf	fsr1l,f,c
  1377  001190  504A               	movf	_UART+1,w,c
  1378  001192  22E2               	addwfc	fsr1h,f,c
  1379  001194  50DE               	movf	postinc2,w,c
  1380  001196  5CE6               	subwf	postinc1,w,c
  1381  001198  A0D8               	btfss	status,0,c
  1382  00119A  D009               	goto	i2l189
  1383                           
  1384                           ;interruptUART.c: 70: RCIE = 0;
  1385  00119C  9A9D               	bcf	3997,5,c	;volatile
  1386                           
  1387                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
  1388  00119E  EE20 F009          	lfsr	2,9
  1389  0011A2  5049               	movf	_UART,w,c
  1390  0011A4  26D9               	addwf	fsr2l,f,c
  1391  0011A6  504A               	movf	_UART+1,w,c
  1392  0011A8  22DA               	addwfc	fsr2h,f,c
  1393  0011AA  0E01               	movlw	1
  1394  0011AC  6EDF               	movwf	indf2,c
  1395  0011AE                     i2l189:
  1396  0011AE  C011  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1397  0011B2  C010  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1398  0011B6  C00F  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1399  0011BA  C00E  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1400  0011BE  C00D  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1401  0011C2  C00C  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1402  0011C6  C00B  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1403  0011CA  C00A  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1404  0011CE  C009  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1405  0011D2  C008  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1406  0011D6  C007  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1407  0011DA  C006  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1408  0011DE  C005  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1409  0011E2  C004  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1410  0011E6  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1411  0011E8  0011               	retfie		f
  1412  0011EA                     __end_of_interruptHandlerUART:
  1413                           	opt stack 0
  1414                           pclatu	equ	0xFFB
  1415                           pclath	equ	0xFFA
  1416                           tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           prodh	equ	0xFF4
  1421                           prodl	equ	0xFF3
  1422                           intcon	equ	0xFF2
  1423                           postinc0	equ	0xFEE
  1424                           fsr0h	equ	0xFEA
  1425                           fsr0l	equ	0xFE9
  1426                           wreg	equ	0xFE8
  1427                           postinc1	equ	0xFE6
  1428                           fsr1h	equ	0xFE2
  1429                           fsr1l	equ	0xFE1
  1430                           indf2	equ	0xFDF
  1431                           postinc2	equ	0xFDE
  1432                           postdec2	equ	0xFDD
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8
  1436                           pclatu	equ	0xFFB
  1437                           pclath	equ	0xFFA
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           prodh	equ	0xFF4
  1443                           prodl	equ	0xFF3
  1444                           intcon	equ	0xFF2
  1445                           postinc0	equ	0xFEE
  1446                           fsr0h	equ	0xFEA
  1447                           fsr0l	equ	0xFE9
  1448                           wreg	equ	0xFE8
  1449                           postinc1	equ	0xFE6
  1450                           fsr1h	equ	0xFE2
  1451                           fsr1l	equ	0xFE1
  1452                           indf2	equ	0xFDF
  1453                           postinc2	equ	0xFDE
  1454                           postdec2	equ	0xFDD
  1455                           fsr2h	equ	0xFDA
  1456                           fsr2l	equ	0xFD9
  1457                           status	equ	0xFD8
  1458                           
  1459                           	psect	rparam
  1460  0000                     pclatu	equ	0xFFB
  1461                           pclath	equ	0xFFA
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           intcon	equ	0xFF2
  1469                           postinc0	equ	0xFEE
  1470                           fsr0h	equ	0xFEA
  1471                           fsr0l	equ	0xFE9
  1472                           wreg	equ	0xFE8
  1473                           postinc1	equ	0xFE6
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           postinc2	equ	0xFDE
  1478                           postdec2	equ	0xFDD
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483                           	psect	temp
  1484  00004B                     btemp:
  1485                           	opt stack 0
  1486  00004B                     	ds	1
  1487  0000                     int$flags	set	btemp
  1488                           pclatu	equ	0xFFB
  1489                           pclath	equ	0xFFA
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodh	equ	0xFF4
  1495                           prodl	equ	0xFF3
  1496                           intcon	equ	0xFF2
  1497                           postinc0	equ	0xFEE
  1498                           fsr0h	equ	0xFEA
  1499                           fsr0l	equ	0xFE9
  1500                           wreg	equ	0xFE8
  1501                           postinc1	equ	0xFE6
  1502                           fsr1h	equ	0xFE2
  1503                           fsr1l	equ	0xFE1
  1504                           indf2	equ	0xFDF
  1505                           postinc2	equ	0xFDE
  1506                           postdec2	equ	0xFDD
  1507                           fsr2h	equ	0xFDA
  1508                           fsr2l	equ	0xFD9
  1509                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41      74
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandlerUART in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandlerUART in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandlerUART in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandlerUART in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandlerUART in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandlerUART in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandlerUART in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandlerUART in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0     853
                                             31 COMRAM    10    10      0
                            ___aldiv
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             20 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     604
                                             17 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandlerUART                                17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _putch
     _lcdNibble

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      4A       1       58.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A       6        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Sep 16 23:01:23 2017

                           l92 12BA                             l84 1292                             l88 129A  
                           u15 13F8                             u16 13FA                             u25 1438  
                           u26 143A                    __CFG_CPD$ON 000000                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                   __CFG_CPB$OFF 000000                            u515 124C  
                          u607 127E                            u617 14CA                            u570 12C6  
                          u627 1442                            u580 12D2                            u572 12C8  
                          u637 1476                            u582 12D4                            u647 14DE  
                          u657 13E0                            u667 13EA                            u677 1420  
                          u687 142A                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1330 12B2                           l1332 12BE  
                         l1270 1348                           l1272 1354                           l1264 1326  
                         l1328 12AA                           l1290 13AC                           l1282 1388  
                         l1274 1358                           l1258 130E                           l1286 1396  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           _LATE 000F8D                           _RCIE 007CED  
                         _RCIF 007CF5                           _UART 0049                           _TRMT 007D61  
                         _TXIE 007CEC                           _TXIF 007CF4                           _main 11EA  
                         _keys 1001                           _uart 003D                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004B                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                   main@baudRate 0024  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000               __end_of_LCD_LEFT 1013  
              __end_of___aldiv 13BE                          ?_main 0001                          i2l187 116E  
                        i2l189 11AE                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _PORTB 000F81                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 14E6                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                   main@keypress 0029  
               __CFG_EBTR3$OFF 000000           _interruptHandlerUART 0008                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                __end_of_initLCD 1488  
               __CFG_EBTRB$OFF 000000                          _putch 14BE                          pclath 000FFA  
                        tablat 000FF5              _LCDinterruptState 002C                          status 000FD8  
               __CFG_PBADEN$ON 000000                __initialization 1488                   __end_of_main 12F2  
                 __end_of_keys 1012                 __CFG_OSC$HSPLL 000000              __end_of_LCD_RIGHT 1014  
                       ??_main 0020                  __activetblptr 000001          ?_interruptHandlerUART 0001  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         ?_putch 0001  
                       i2l1102 10E0                         i2l1122 115E                         i2l1108 10F8  
                       _TRISC6 007CA6                         _TRISC7 007CA7                 __CFG_XINST$OFF 000000  
                    ??___aldiv 001A                 __CFG_STVREN$ON 000000                         clear_0 14A6  
                    ??_lcdInst 0014                      ??_initLCD 0015                   __pdataCOMRAM 0049  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                     __accesstop 0080        __end_of__initialization 14AC  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                  __end_of_putch 14D2  
           __size_of_lcdNibble 007E         ??_interruptHandlerUART 0001                        ??_putch 0014  
                   _arr_dataRX 002D                        i2u24_45 109E                        i2u24_46 10A0  
                      i2u28_45 1152                        i2u28_46 1154           lcd@LCDinterruptState 002A  
            __end_of_lcdNibble 143C                        __Hparam 0000                        __Lparam 0000  
                      ___aldiv 12F2                   __psmallconst 1000                        __pcinit 1488  
                      __ramtop 1000                        _lcdInst 14D2                        __ptext0 11EA  
                      __ptext1 14BE                        __ptext2 143C                        __ptext3 14D2  
                      __ptext4 13BE                        __ptext5 12F2                        _initLCD 143C  
             ___aldiv@dividend 0012                      _LCD_RIGHT 1013                 __pintcode_body 101A  
         end_of_initialization 14AC          __end_of_LCD_SIZE_HORZ 1016          __end_of_LCD_SIZE_VERT 1015  
                      int_func 101A                      _RCSTAbits 000FAB               ___aldiv@quotient 001C  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      _PORTBbits 000F81                      _TXSTAbits 000FAC  
                __pidataCOMRAM 14E6            start_initialization 1488               main@receivedByte 0028  
             __CFG_LPT1OSC$OFF 000000                    __pbssCOMRAM 002A  __size_of_interruptHandlerUART 11E2  
            __CFG_CCP2MX$PORTC 000000             _UARTinterruptState 002B                      __pintcode 0008  
                    _lcdNibble 13BE                       ?___aldiv 0012                       ?_lcdInst 0001  
                     ?_initLCD 0001                    __smallconst 1000                 __size_of_putch 0014  
                     _LCD_LEFT 1012                ___aldiv@divisor 0016                ___aldiv@counter 001A  
                     _LATDbits 000F8C               __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001  
                lcdNibble@data 0013                  lcdNibble@temp 0012                 _LCD_HORZ_LIMIT 1017  
                     __Hrparam 0000                       __Lrparam 0000                   __Lsmallconst 1000  
           __CFG_BOREN$SBORDIS 000000               __size_of___aldiv 00CC               __size_of_lcdInst 0014  
             __size_of_initLCD 004C         __end_of_LCD_HORZ_LIMIT 1018                 _LCD_VERT_LIMIT 1016  
                __size_of_main 0108                    ??_lcdNibble 0012                       int$flags 004B  
                    putch@data 0014                     _INTCONbits 000FF2         __end_of_LCD_VERT_LIMIT 1017  
                     intlevel2 0000                  _LCD_SIZE_HORZ 1015                  _LCD_SIZE_VERT 1014  
 __end_of_interruptHandlerUART 11EA                    lcdInst@data 0014                   ___aldiv@sign 001B  
