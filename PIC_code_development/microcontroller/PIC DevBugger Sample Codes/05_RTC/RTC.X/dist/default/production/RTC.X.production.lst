

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 12:05:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	smallconst
    65  001000                     __psmallconst:
    66                           	opt stack 0
    67  001000  00                 	db	0
    68  001001                     _keys:
    69                           	opt stack 0
    70  001001  31                 	db	49
    71  001002  32                 	db	50
    72  001003  33                 	db	51
    73  001004  41                 	db	65
    74  001005  34                 	db	52
    75  001006  35                 	db	53
    76  001007  36                 	db	54
    77  001008  42                 	db	66
    78  001009  37                 	db	55
    79  00100A  38                 	db	56
    80  00100B  39                 	db	57
    81  00100C  43                 	db	67
    82  00100D  2A                 	db	42
    83  00100E  30                 	db	48
    84  00100F  23                 	db	35
    85  001010  44                 	db	68
    86  001011  00                 	db	0
    87  001012                     __end_of_keys:
    88                           	opt stack 0
    89  001012                     _hexpowers:
    90                           	opt stack 0
    91  001012  0001               	dw	1
    92  001014  0010               	dw	16
    93  001016  0100               	dw	256
    94  001018  1000               	dw	4096
    95  00101A                     __end_of_hexpowers:
    96                           	opt stack 0
    97  00101A                     _happynewyear:
    98                           	opt stack 0
    99  00101A  45                 	db	69
   100  00101B  07                 	db	7
   101  00101C  12                 	db	18
   102  00101D  02                 	db	2
   103  00101E  10                 	db	16
   104  00101F  04                 	db	4
   105  001020  18                 	db	24
   106  001021                     __end_of_happynewyear:
   107                           	opt stack 0
   108  001021                     _LCD_LEFT:
   109                           	opt stack 0
   110  001021  00                 	db	0
   111  001022                     __end_of_LCD_LEFT:
   112                           	opt stack 0
   113  001022                     _LCD_RIGHT:
   114                           	opt stack 0
   115  001022  01                 	db	1
   116  001023                     __end_of_LCD_RIGHT:
   117                           	opt stack 0
   118  001023                     _LCD_SIZE_VERT:
   119                           	opt stack 0
   120  001023  02                 	db	2
   121  001024                     __end_of_LCD_SIZE_VERT:
   122                           	opt stack 0
   123  001024                     _LCD_SIZE_HORZ:
   124                           	opt stack 0
   125  001024  10                 	db	16
   126  001025                     __end_of_LCD_SIZE_HORZ:
   127                           	opt stack 0
   128  001025                     _LCD_VERT_LIMIT:
   129                           	opt stack 0
   130  001025  02                 	db	2
   131  001026                     __end_of_LCD_VERT_LIMIT:
   132                           	opt stack 0
   133  001026                     _LCD_HORZ_LIMIT:
   134                           	opt stack 0
   135  001026  28                 	db	40
   136  001027                     __end_of_LCD_HORZ_LIMIT:
   137                           	opt stack 0
   138  0000                     _LATDbits	set	3980
   139  0000                     _SSPBUF	set	4041
   140  0000                     _SSPCON2bits	set	4037
   141  0000                     _SSPADD	set	4040
   142  0000                     _SSPCON2	set	4037
   143  0000                     _SSPCON1	set	4038
   144  0000                     _SSPSTAT	set	4039
   145  0000                     _TRISCbits	set	3988
   146  0000                     _SSPCON1bits	set	4038
   147  0000                     _INTCONbits	set	4082
   148  0000                     _ADCON1	set	4033
   149  0000                     _ADCON0	set	4034
   150  0000                     _TRISE	set	3990
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISB	set	3987
   154  0000                     _TRISA	set	3986
   155  0000                     _LATE	set	3981
   156  0000                     _LATD	set	3980
   157  0000                     _LATC	set	3979
   158  0000                     _LATB	set	3978
   159  0000                     _LATA	set	3977
   160  0000                     _OSCTUNEbits	set	3995
   161  0000                     _OSCCONbits	set	4051
   162  001027                     STR_3:
   163  001027  30                 	db	48	;'0'
   164  001028  31                 	db	49	;'1'
   165  001029  32                 	db	50	;'2'
   166  00102A  33                 	db	51	;'3'
   167  00102B  34                 	db	52	;'4'
   168  00102C  35                 	db	53	;'5'
   169  00102D  36                 	db	54	;'6'
   170  00102E  37                 	db	55	;'7'
   171  00102F  38                 	db	56	;'8'
   172  001030  39                 	db	57	;'9'
   173  001031  61                 	db	97	;'a'
   174  001032  62                 	db	98	;'b'
   175  001033  63                 	db	99	;'c'
   176  001034  64                 	db	100	;'d'
   177  001035  65                 	db	101	;'e'
   178  001036  66                 	db	102	;'f'
   179  001037  00                 	db	0
   180  001038                     STR_1:
   181  001038  25                 	db	37
   182  001039  30                 	db	48	;'0'
   183  00103A  32                 	db	50	;'2'
   184  00103B  78                 	db	120	;'x'
   185  00103C  2F                 	db	47
   186  00103D  25                 	db	37
   187  00103E  30                 	db	48	;'0'
   188  00103F  32                 	db	50	;'2'
   189  001040  78                 	db	120	;'x'
   190  001041  2F                 	db	47
   191  001042  25                 	db	37
   192  001043  30                 	db	48	;'0'
   193  001044  32                 	db	50	;'2'
   194  001045  78                 	db	120	;'x'
   195  001046  00                 	db	0
   196  001047                     STR_2:
   197  001047  25                 	db	37
   198  001048  30                 	db	48	;'0'
   199  001049  32                 	db	50	;'2'
   200  00104A  78                 	db	120	;'x'
   201  00104B  3A                 	db	58	;':'
   202  00104C  25                 	db	37
   203  00104D  30                 	db	48	;'0'
   204  00104E  32                 	db	50	;'2'
   205  00104F  78                 	db	120	;'x'
   206  001050  3A                 	db	58	;':'
   207  001051  25                 	db	37
   208  001052  30                 	db	48	;'0'
   209  001053  32                 	db	50	;'2'
   210  001054  78                 	db	120	;'x'
   211  001055  00                 	db	0
   212                           
   213                           ; #config settings
   214  001056  00                 	db	0	; dummy byte at the end
   215  0000                     
   216                           	psect	cinit
   217  00165E                     __pcinit:
   218                           	opt stack 0
   219  00165E                     start_initialization:
   220                           	opt stack 0
   221  00165E                     __initialization:
   222                           	opt stack 0
   223                           
   224                           ; Clear objects allocated to COMRAM (2 bytes)
   225  00165E  6A29               	clrf	(__pbssCOMRAM+1)& (0+255),c
   226  001660  6A28               	clrf	__pbssCOMRAM& (0+255),c
   227  001662                     end_of_initialization:
   228                           	opt stack 0
   229  001662                     __end_of__initialization:
   230                           	opt stack 0
   231  001662  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  001664  6EF8               	movwf	tblptru,c
   233  001666  0100               	movlb	0
   234  001668  EF26  F009         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           
   237                           	psect	bssCOMRAM
   238  000028                     __pbssCOMRAM:
   239                           	opt stack 0
   240  000028                     lcd@LCDinterruptState:
   241                           	opt stack 0
   242  000028                     	ds	1
   243  000029                     	ds	1
   244                           tblptru	equ	0xFF8
   245                           
   246                           	psect	cstackCOMRAM
   247  000001                     __pcstackCOMRAM:
   248                           	opt stack 0
   249  000001                     ??_isdigit:
   250  000001                     ??_I2C_Master_Wait:
   251  000001                     ?___wmul:
   252                           	opt stack 0
   253  000001                     ?___lwdiv:
   254                           	opt stack 0
   255  000001                     ?___lldiv:
   256                           	opt stack 0
   257  000001                     lcdNibble@temp:
   258                           	opt stack 0
   259  000001                     ___wmul@multiplier:
   260                           	opt stack 0
   261  000001                     ___lwdiv@dividend:
   262                           	opt stack 0
   263  000001                     ___lldiv@dividend:
   264                           	opt stack 0
   265                           
   266                           ; 4 bytes @ 0x0
   267  000001                     	ds	1
   268  000002                     I2C_Master_Read@ackBit:
   269                           	opt stack 0
   270  000002                     lcdNibble@data:
   271                           	opt stack 0
   272  000002                     _isdigit$712:
   273                           	opt stack 0
   274  000002                     I2C_Master_Write@byteToWrite:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x1
   278  000002                     	ds	1
   279  000003                     I2C_Master_Read@receivedByte:
   280                           	opt stack 0
   281  000003                     lcdInst@data:
   282                           	opt stack 0
   283  000003                     putch@data:
   284                           	opt stack 0
   285  000003                     isdigit@c:
   286                           	opt stack 0
   287  000003                     ___wmul@multiplicand:
   288                           	opt stack 0
   289  000003                     ___lwdiv@divisor:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x2
   293  000003                     	ds	1
   294  000004                     ??_initLCD:
   295  000004                     RTC_setTime@i:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x3
   299  000004                     	ds	1
   300  000005                     ___wmul@product:
   301                           	opt stack 0
   302  000005                     ___lwdiv@quotient:
   303                           	opt stack 0
   304  000005                     ___lldiv@divisor:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x4
   308  000005                     	ds	2
   309  000007                     ___lwdiv@counter:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x6
   313  000007                     	ds	1
   314  000008                     ?_printf:
   315                           	opt stack 0
   316  000008                     printf@f:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x7
   320  000008                     	ds	1
   321  000009                     ___lldiv@quotient:
   322                           	opt stack 0
   323                           
   324                           ; 4 bytes @ 0x8
   325  000009                     	ds	4
   326  00000D                     ___lldiv@counter:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0xC
   330  00000D                     	ds	1
   331  00000E                     I2C_Master_Init@clockFreq:
   332                           	opt stack 0
   333                           
   334                           ; 4 bytes @ 0xD
   335  00000E                     	ds	2
   336  000010                     ??_printf:
   337                           
   338                           ; 1 bytes @ 0xF
   339  000010                     	ds	2
   340  000012                     ??_I2C_Master_Init:
   341                           
   342                           ; 1 bytes @ 0x11
   343  000012                     	ds	2
   344  000014                     printf@ap:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x13
   348  000014                     	ds	2
   349  000016                     printf@idx:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x15
   353  000016                     	ds	1
   354  000017                     printf@flag:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x16
   358  000017                     	ds	1
   359  000018                     printf@val:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x17
   363  000018                     	ds	2
   364  00001A                     printf@prec:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x19
   368  00001A                     	ds	1
   369  00001B                     printf@width:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x1A
   373  00001B                     	ds	2
   374  00001D                     printf@c:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x1C
   378  00001D                     	ds	1
   379  00001E                     ??_main:
   380                           
   381                           ; 1 bytes @ 0x1D
   382  00001E                     	ds	2
   383  000020                     main@time:
   384                           	opt stack 0
   385                           
   386                           ; 7 bytes @ 0x1F
   387  000020                     	ds	7
   388  000027                     main@i:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x26
   392  000027                     	ds	1
   393                           tblptru	equ	0xFF8
   394                           
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 43 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  time            7   31[COMRAM] unsigned char [7]
   405 ;;  i               1   38[COMRAM] unsigned char 
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   416 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   418 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   419 ;;Total ram usage:       10 bytes
   420 ;; Hardware stack levels required when called:    3
   421 ;; This function calls:
   422 ;;		_I2C_Master_Init
   423 ;;		_I2C_Master_Read
   424 ;;		_I2C_Master_Start
   425 ;;		_I2C_Master_Stop
   426 ;;		_I2C_Master_Write
   427 ;;		_RTC_setTime
   428 ;;		_initLCD
   429 ;;		_lcdInst
   430 ;;		_printf
   431 ;; This function is called by:
   432 ;;		Startup code after reset
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           	psect	text0
   437  00124C                     __ptext0:
   438                           	opt stack 0
   439  00124C                     _main:
   440                           	opt stack 28
   441                           
   442                           ;main.c: 46: OSCCONbits.IRCF2 = 1;
   443                           
   444                           ;incstack = 0
   445  00124C  8CD3               	bsf	4051,6,c	;volatile
   446                           
   447                           ;main.c: 47: OSCCONbits.IRCF1 = 1;
   448  00124E  8AD3               	bsf	4051,5,c	;volatile
   449                           
   450                           ;main.c: 48: OSCCONbits.IRCF0 = 1;
   451  001250  88D3               	bsf	4051,4,c	;volatile
   452                           
   453                           ;main.c: 49: OSCCONbits.SCS1 = 1;
   454  001252  82D3               	bsf	4051,1,c	;volatile
   455                           
   456                           ;main.c: 50: OSCTUNEbits.PLLEN = 1;
   457  001254  8C9B               	bsf	3995,6,c	;volatile
   458                           
   459                           ;main.c: 55: LATA = 0x00;
   460  001256  0E00               	movlw	0
   461  001258  6E89               	movwf	3977,c	;volatile
   462                           
   463                           ;main.c: 56: LATB = 0x00;
   464  00125A  0E00               	movlw	0
   465  00125C  6E8A               	movwf	3978,c	;volatile
   466                           
   467                           ;main.c: 57: LATC = 0x00;
   468  00125E  0E00               	movlw	0
   469  001260  6E8B               	movwf	3979,c	;volatile
   470                           
   471                           ;main.c: 58: LATD = 0x00;
   472  001262  0E00               	movlw	0
   473  001264  6E8C               	movwf	3980,c	;volatile
   474                           
   475                           ;main.c: 59: LATE = 0x00;
   476  001266  0E00               	movlw	0
   477  001268  6E8D               	movwf	3981,c	;volatile
   478                           
   479                           ;main.c: 63: TRISA = 0xFF;
   480  00126A  6892               	setf	3986,c	;volatile
   481                           
   482                           ;main.c: 64: TRISB = 0xFF;
   483  00126C  6893               	setf	3987,c	;volatile
   484                           
   485                           ;main.c: 65: TRISC = 0b10000000;
   486  00126E  0E80               	movlw	128
   487  001270  6E94               	movwf	3988,c	;volatile
   488                           
   489                           ;main.c: 69: TRISD = 0x00;
   490  001272  0E00               	movlw	0
   491  001274  6E95               	movwf	3989,c	;volatile
   492                           
   493                           ;main.c: 70: TRISE = 0x00;
   494  001276  0E00               	movlw	0
   495  001278  6E96               	movwf	3990,c	;volatile
   496                           
   497                           ;main.c: 73: ADCON0 = 0x00;
   498  00127A  0E00               	movlw	0
   499  00127C  6EC2               	movwf	4034,c	;volatile
   500                           
   501                           ;main.c: 74: ADCON1 = 0b00001111;
   502  00127E  0E0F               	movlw	15
   503  001280  6EC1               	movwf	4033,c	;volatile
   504                           
   505                           ;main.c: 78: initLCD();
   506  001282  ECB8  F00A         	call	_initLCD	;wreg free
   507                           
   508                           ;main.c: 80: I2C_Master_Init(100000);
   509  001286  0EA0               	movlw	160
   510  001288  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   511  00128A  0E86               	movlw	134
   512  00128C  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   513  00128E  0E01               	movlw	1
   514  001290  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   515  001292  0E00               	movlw	0
   516  001294  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   517  001296  EC3A  F00A         	call	_I2C_Master_Init	;wreg free
   518                           
   519                           ;main.c: 81: (INTCONbits.GIE = 0);
   520  00129A  9EF2               	bcf	intcon,7,c	;volatile
   521                           
   522                           ;main.c: 87: RTC_setTime();
   523  00129C  EC91  F00A         	call	_RTC_setTime	;wreg free
   524  0012A0                     
   525                           ;main.c: 96: I2C_Master_Start();
   526  0012A0  EC3F  F00B         	call	_I2C_Master_Start	;wreg free
   527                           
   528                           ;main.c: 97: I2C_Master_Write(0b11010000);
   529  0012A4  0E00               	movlw	0
   530  0012A6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   531  0012A8  0ED0               	movlw	208
   532  0012AA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   533  0012AC  EC36  F00B         	call	_I2C_Master_Write	;wreg free
   534                           
   535                           ;main.c: 98: I2C_Master_Write(0x00);
   536  0012B0  0E00               	movlw	0
   537  0012B2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   538  0012B4  0E00               	movlw	0
   539  0012B6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   540  0012B8  EC36  F00B         	call	_I2C_Master_Write	;wreg free
   541                           
   542                           ;main.c: 99: I2C_Master_Stop();
   543  0012BC  EC3B  F00B         	call	_I2C_Master_Stop	;wreg free
   544                           
   545                           ;main.c: 102: I2C_Master_Start();
   546  0012C0  EC3F  F00B         	call	_I2C_Master_Start	;wreg free
   547                           
   548                           ;main.c: 103: I2C_Master_Write(0b11010001);
   549  0012C4  0E00               	movlw	0
   550  0012C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   551  0012C8  0ED1               	movlw	209
   552  0012CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   553  0012CC  EC36  F00B         	call	_I2C_Master_Write	;wreg free
   554                           
   555                           ;main.c: 104: for(i = 0; i < 6; i++){
   556  0012D0  0E00               	movlw	0
   557  0012D2  6E27               	movwf	main@i,c
   558  0012D4                     l1397:
   559  0012D4  0E05               	movlw	5
   560  0012D6  6427               	cpfsgt	main@i,c
   561  0012D8  D001               	goto	l74
   562  0012DA  D00E               	goto	u650
   563  0012DC                     l74:
   564                           
   565                           ;main.c: 105: time[i] = I2C_Master_Read(0);
   566  0012DC  5027               	movf	main@i,w,c
   567  0012DE  0D01               	mullw	1
   568  0012E0  0E20               	movlw	low main@time
   569  0012E2  24F3               	addwf	prodl,w,c
   570  0012E4  6ED9               	movwf	fsr2l,c
   571  0012E6  0E00               	movlw	high main@time
   572  0012E8  20F4               	addwfc	prodh,w,c
   573  0012EA  6EDA               	movwf	fsr2h,c
   574  0012EC  0E00               	movlw	0
   575  0012EE  ECF1  F00A         	call	_I2C_Master_Read
   576  0012F2  6EDF               	movwf	indf2,c
   577  0012F4  2A27               	incf	main@i,f,c
   578  0012F6  D7EE               	goto	l1397
   579  0012F8                     u650:
   580                           
   581                           ;main.c: 106: }
   582                           ;main.c: 107: time[6] = I2C_Master_Read(1);
   583  0012F8  0E01               	movlw	1
   584  0012FA  ECF1  F00A         	call	_I2C_Master_Read
   585  0012FE  6E26               	movwf	main@time+6,c
   586                           
   587                           ;main.c: 108: I2C_Master_Stop();
   588  001300  EC3B  F00B         	call	_I2C_Master_Stop	;wreg free
   589                           
   590                           ;main.c: 112: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   591  001304  0E80               	movlw	128
   592  001306  EC1C  F00B         	call	_lcdInst
   593  00130A  0E34               	movlw	52
   594  00130C  6E1E               	movwf	??_main& (0+255),c
   595  00130E  0EF2               	movlw	242
   596  001310                     u667:
   597  001310  2EE8               	decfsz	wreg,f,c
   598  001312  D7FE               	bra	u667
   599  001314  2E1E               	decfsz	??_main& (0+255),f,c
   600  001316  D7FC               	bra	u667
   601                           
   602                           ;main.c: 113: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
   603  001318  0E38               	movlw	low STR_1
   604  00131A  6E08               	movwf	printf@f,c
   605  00131C  0E10               	movlw	high STR_1
   606  00131E  6E09               	movwf	printf@f+1,c
   607  001320  C026  F00A         	movff	main@time+6,?_printf+2
   608  001324  6A0B               	clrf	?_printf+3,c
   609  001326  C025  F00C         	movff	main@time+5,?_printf+4
   610  00132A  6A0D               	clrf	?_printf+5,c
   611  00132C  C024  F00E         	movff	main@time+4,?_printf+6
   612  001330  6A0F               	clrf	?_printf+7,c
   613  001332  EC2C  F008         	call	_printf	;wreg free
   614                           
   615                           ;main.c: 114: lcdInst(0xC0);;
   616  001336  0EC0               	movlw	192
   617  001338  EC1C  F00B         	call	_lcdInst
   618                           
   619                           ;main.c: 115: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
   620  00133C  0E47               	movlw	low STR_2
   621  00133E  6E08               	movwf	printf@f,c
   622  001340  0E10               	movlw	high STR_2
   623  001342  6E09               	movwf	printf@f+1,c
   624  001344  C022  F00A         	movff	main@time+2,?_printf+2
   625  001348  6A0B               	clrf	?_printf+3,c
   626  00134A  C021  F00C         	movff	main@time+1,?_printf+4
   627  00134E  6A0D               	clrf	?_printf+5,c
   628  001350  C020  F00E         	movff	main@time,?_printf+6
   629  001354  6A0F               	clrf	?_printf+7,c
   630  001356  EC2C  F008         	call	_printf	;wreg free
   631                           
   632                           ;main.c: 116: _delay((unsigned long)((1000)*(32000000/4000.0)));
   633  00135A  0E29               	movlw	41
   634  00135C  6E1F               	movwf	(??_main+1)& (0+255),c
   635  00135E  0E96               	movlw	150
   636  001360  6E1E               	movwf	??_main& (0+255),c
   637  001362  0E7F               	movlw	127
   638  001364                     u677:
   639  001364  2EE8               	decfsz	wreg,f,c
   640  001366  D7FE               	bra	u677
   641  001368  2E1E               	decfsz	??_main& (0+255),f,c
   642  00136A  D7FC               	bra	u677
   643  00136C  2E1F               	decfsz	(??_main+1)& (0+255),f,c
   644  00136E  D7FA               	bra	u677
   645  001370  F000               	nop	
   646  001372  D796               	goto	l73
   647  001374                     __end_of_main:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           prodh	equ	0xFF4
   651                           prodl	equ	0xFF3
   652                           intcon	equ	0xFF2
   653                           wreg	equ	0xFE8
   654                           indf2	equ	0xFDF
   655                           fsr2h	equ	0xFDA
   656                           fsr2l	equ	0xFD9
   657                           
   658 ;; *************** function _printf *****************
   659 ;; Defined at:
   660 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  f               2    7[COMRAM] PTR const unsigned char 
   663 ;;		 -> STR_2(15), STR_1(15), 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  idx             1   21[COMRAM] unsigned char 
   666 ;;  tmpval          4    0        struct .
   667 ;;  cp              3    0        PTR const unsigned char 
   668 ;;  width           2   26[COMRAM] int 
   669 ;;  val             2   23[COMRAM] unsigned int 
   670 ;;  ap              2   19[COMRAM] PTR void [1]
   671 ;;		 -> ?_printf(2), 
   672 ;;  len             2    0        unsigned int 
   673 ;;  c               1   28[COMRAM] char 
   674 ;;  prec            1   25[COMRAM] char 
   675 ;;  flag            1   22[COMRAM] unsigned char 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  2    7[COMRAM] int 
   678 ;; Registers used:
   679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   685 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;Total ram usage:       22 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    2
   692 ;; This function calls:
   693 ;;		___lwdiv
   694 ;;		___wmul
   695 ;;		_isdigit
   696 ;;		_putch
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text1
   703  001058                     __ptext1:
   704                           	opt stack 0
   705  001058                     _printf:
   706                           	opt stack 28
   707                           
   708                           ;doprnt.c: 466: va_list ap;
   709                           ;doprnt.c: 499: signed char c;
   710                           ;doprnt.c: 501: int width;
   711                           ;doprnt.c: 506: signed char prec;
   712                           ;doprnt.c: 508: unsigned char flag;
   713                           ;doprnt.c: 523: union {
   714                           ;doprnt.c: 524: unsigned long vd;
   715                           ;doprnt.c: 525: double integ;
   716                           ;doprnt.c: 526: } tmpval;
   717                           ;doprnt.c: 528: unsigned int val;
   718                           ;doprnt.c: 529: unsigned len;
   719                           ;doprnt.c: 530: const char * cp;
   720                           ;doprnt.c: 533: *ap = __va_start();
   721                           
   722                           ;incstack = 0
   723  001058  0E0A               	movlw	low (?_printf+2)
   724  00105A  6E14               	movwf	printf@ap,c
   725  00105C  0E00               	movlw	high (?_printf+2)
   726  00105E  6E15               	movwf	printf@ap+1,c
   727                           
   728                           ;doprnt.c: 536: while(c = *f++) {
   729  001060  D0E8               	goto	u620
   730  001062                     
   731                           ;doprnt.c: 538: if(c != '%')
   732  001062  0E25               	movlw	37
   733  001064  181D               	xorwf	printf@c,w,c
   734  001066  B4D8               	btfsc	status,2,c
   735  001068  D004               	goto	l193
   736                           
   737                           ;doprnt.c: 540: {
   738                           ;doprnt.c: 541: (putch(c) );
   739  00106A  501D               	movf	printf@c,w,c
   740  00106C  EC12  F00B         	call	_putch
   741                           
   742                           ;doprnt.c: 542: continue;
   743  001070  D0E0               	goto	u620
   744  001072                     l193:
   745                           
   746                           ;doprnt.c: 543: }
   747                           ;doprnt.c: 546: width = 0;
   748  001072  0E00               	movlw	0
   749  001074  6E1C               	movwf	printf@width+1,c
   750  001076  0E00               	movlw	0
   751  001078  6E1B               	movwf	printf@width,c
   752                           
   753                           ;doprnt.c: 548: flag = 0;
   754  00107A  0E00               	movlw	0
   755  00107C  6E17               	movwf	printf@flag,c
   756                           
   757                           ;doprnt.c: 551: switch(*f) {
   758                           
   759                           ;doprnt.c: 550: for(;;) {
   760  00107E  D003               	goto	l195
   761  001080                     
   762                           ;doprnt.c: 580: flag |= 0x04;
   763  001080  8417               	bsf	printf@flag,2,c
   764                           
   765                           ;doprnt.c: 581: f++;
   766  001082  4A08               	infsnz	printf@f,f,c
   767  001084  2A09               	incf	printf@f+1,f,c
   768  001086                     l195:
   769  001086  C008  FFF6         	movff	printf@f,tblptrl
   770  00108A  C009  FFF7         	movff	printf@f+1,tblptrh
   771  00108E                     	if	0	;tblptru may be non-zero
   772  00108E                     	endif
   773  00108E                     	if	0	;tblptru may be non-zero
   774  00108E                     	endif
   775  00108E  0008               	tblrd		*
   776  001090  50F5               	movf	tablat,w,c
   777                           
   778                           ; Switch size 1, requested type "space"
   779                           ; Number of cases is 1, Range of values is 48 to 48
   780                           ; switch strategies available:
   781                           ; Name         Instructions Cycles
   782                           ; simple_byte            4     3 (average)
   783                           ;	Chosen strategy is simple_byte
   784  001092  0A30               	xorlw	48	; case 48
   785  001094  B4D8               	btfsc	status,2,c
   786  001096  D7F4               	goto	l196
   787                           
   788                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   789                           
   790                           ;doprnt.c: 586: }
   791                           
   792                           ;doprnt.c: 585: break;
   793  001098  C008  FFF6         	movff	printf@f,tblptrl
   794  00109C  C009  FFF7         	movff	printf@f+1,tblptrh
   795  0010A0                     	if	0	;tblptru may be non-zero
   796  0010A0                     	endif
   797  0010A0                     	if	0	;tblptru may be non-zero
   798  0010A0                     	endif
   799  0010A0  0008               	tblrd		*
   800  0010A2  50F5               	movf	tablat,w,c
   801  0010A4  EC03  F00B         	call	_isdigit
   802  0010A8  A0D8               	btfss	status,0,c
   803  0010AA  D032               	goto	l203
   804                           
   805                           ;doprnt.c: 598: width = 0;
   806  0010AC  0E00               	movlw	0
   807  0010AE  6E1C               	movwf	printf@width+1,c
   808  0010B0  0E00               	movlw	0
   809  0010B2  6E1B               	movwf	printf@width,c
   810  0010B4                     
   811                           ;doprnt.c: 600: width *= 10;
   812  0010B4  C01B  F001         	movff	printf@width,___wmul@multiplier
   813  0010B8  C01C  F002         	movff	printf@width+1,___wmul@multiplier+1
   814  0010BC  0E00               	movlw	0
   815  0010BE  6E04               	movwf	___wmul@multiplicand+1,c
   816  0010C0  0E0A               	movlw	10
   817  0010C2  6E03               	movwf	___wmul@multiplicand,c
   818  0010C4  ECDE  F00A         	call	___wmul	;wreg free
   819  0010C8  C001  F01B         	movff	?___wmul,printf@width
   820  0010CC  C002  F01C         	movff	?___wmul+1,printf@width+1
   821                           
   822                           ;doprnt.c: 601: width += *f++ - '0';
   823  0010D0  0ED0               	movlw	208
   824  0010D2  6E10               	movwf	??_printf& (0+255),c
   825  0010D4  0EFF               	movlw	255
   826  0010D6  6E11               	movwf	(??_printf+1)& (0+255),c
   827  0010D8  C008  FFF6         	movff	printf@f,tblptrl
   828  0010DC  C009  FFF7         	movff	printf@f+1,tblptrh
   829  0010E0                     	if	0	;tblptru may be non-zero
   830  0010E0                     	endif
   831  0010E0                     	if	0	;tblptru may be non-zero
   832  0010E0                     	endif
   833  0010E0  0008               	tblrd		*
   834  0010E2  50F5               	movf	tablat,w,c
   835  0010E4  6E12               	movwf	(??_printf+2)& (0+255),c
   836  0010E6  6A13               	clrf	(??_printf+3)& (0+255),c
   837  0010E8  5010               	movf	??_printf,w,c
   838  0010EA  2612               	addwf	??_printf+2,f,c
   839  0010EC  5011               	movf	??_printf+1,w,c
   840  0010EE  2213               	addwfc	??_printf+3,f,c
   841  0010F0  5012               	movf	??_printf+2,w,c
   842  0010F2  261B               	addwf	printf@width,f,c
   843  0010F4  5013               	movf	??_printf+3,w,c
   844  0010F6  221C               	addwfc	printf@width+1,f,c
   845  0010F8  4A08               	infsnz	printf@f,f,c
   846  0010FA  2A09               	incf	printf@f+1,f,c
   847                           
   848                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   849  0010FC  C008  FFF6         	movff	printf@f,tblptrl
   850  001100  C009  FFF7         	movff	printf@f+1,tblptrh
   851  001104                     	if	0	;tblptru may be non-zero
   852  001104                     	endif
   853  001104                     	if	0	;tblptru may be non-zero
   854  001104                     	endif
   855  001104  0008               	tblrd		*
   856  001106  50F5               	movf	tablat,w,c
   857  001108  EC03  F00B         	call	_isdigit
   858  00110C  B0D8               	btfsc	status,0,c
   859  00110E  D7D2               	goto	l201
   860  001110                     l203:
   861  001110  C008  FFF6         	movff	printf@f,tblptrl
   862  001114  C009  FFF7         	movff	printf@f+1,tblptrh
   863  001118  4A08               	infsnz	printf@f,f,c
   864  00111A  2A09               	incf	printf@f+1,f,c
   865  00111C                     	if	0	;tblptru may be non-zero
   866  00111C                     	endif
   867  00111C                     	if	0	;tblptru may be non-zero
   868  00111C                     	endif
   869  00111C  0008               	tblrd		*
   870  00111E  CFF5 F01D          	movff	tablat,printf@c
   871  001122  501D               	movf	printf@c,w,c
   872                           
   873                           ; Switch size 1, requested type "space"
   874                           ; Number of cases is 2, Range of values is 0 to 120
   875                           ; switch strategies available:
   876                           ; Name         Instructions Cycles
   877                           ; simple_byte            7     4 (average)
   878                           ;	Chosen strategy is simple_byte
   879  001124  0A00               	xorlw	0	; case 0
   880  001126  B4D8               	btfsc	status,2,c
   881  001128  0012               	return	
   882  00112A  0A78               	xorlw	120	; case 120
   883  00112C  A4D8               	btfss	status,2,c
   884  00112E  D081               	goto	u620
   885                           
   886                           ;doprnt.c: 1273: {
   887                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   888  001130  C014  FFD9         	movff	printf@ap,fsr2l
   889  001134  C015  FFDA         	movff	printf@ap+1,fsr2h
   890  001138  CFDE F018          	movff	postinc2,printf@val
   891  00113C  CFDD F019          	movff	postdec2,printf@val+1
   892  001140  0E02               	movlw	2
   893  001142  2614               	addwf	printf@ap,f,c
   894  001144  0E00               	movlw	0
   895  001146  2215               	addwfc	printf@ap+1,f,c
   896                           
   897                           ;doprnt.c: 1287: }
   898                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   899  001148  0E01               	movlw	1
   900  00114A  6E1D               	movwf	printf@c,c
   901  00114C                     l1327:
   902  00114C  0E04               	movlw	4
   903  00114E  181D               	xorwf	printf@c,w,c
   904  001150  B4D8               	btfsc	status,2,c
   905  001152  D012               	goto	u550
   906                           
   907                           ;doprnt.c: 1317: if(val < hexpowers[c])
   908  001154  501D               	movf	printf@c,w,c
   909  001156  0D02               	mullw	2
   910  001158  0E12               	movlw	low _hexpowers
   911  00115A  24F3               	addwf	prodl,w,c
   912  00115C  6EF6               	movwf	tblptrl,c
   913  00115E  0E10               	movlw	high _hexpowers
   914  001160  20F4               	addwfc	prodh,w,c
   915  001162  6EF7               	movwf	tblptrh,c
   916  001164                     	if	0	;There are less than 3 active tblptr bytes
   917  001164                     	endif
   918  001164  0009               	tblrd		*+
   919  001166  50F5               	movf	tablat,w,c
   920  001168  5C18               	subwf	printf@val,w,c
   921  00116A  0009               	tblrd		*+
   922  00116C  50F5               	movf	tablat,w,c
   923  00116E  5819               	subwfb	printf@val+1,w,c
   924  001170  A0D8               	btfss	status,0,c
   925  001172  D002               	goto	u550
   926                           
   927                           ;doprnt.c: 1318: break;
   928  001174  2A1D               	incf	printf@c,f,c
   929  001176  D7EA               	goto	l1327
   930  001178                     u550:
   931                           
   932                           ;doprnt.c: 1381: if(width > c)
   933  001178  0E80               	movlw	128
   934  00117A  BE1D               	btfsc	printf@c,7,c
   935  00117C  0E7F               	movlw	127
   936  00117E  6E10               	movwf	??_printf& (0+255),c
   937  001180  501B               	movf	printf@width,w,c
   938  001182  5C1D               	subwf	printf@c,w,c
   939  001184  501C               	movf	printf@width+1,w,c
   940  001186  0A80               	xorlw	128
   941  001188  5810               	subwfb	??_printf& (0+255),w,c
   942  00118A  B0D8               	btfsc	status,0,c
   943  00118C  D007               	goto	l212
   944                           
   945                           ;doprnt.c: 1382: width -= c;
   946  00118E  501D               	movf	printf@c,w,c
   947  001190  5E1B               	subwf	printf@width,f,c
   948  001192  0E00               	movlw	0
   949  001194  BE1D               	btfsc	printf@c,7,c
   950  001196  0EFF               	movlw	255
   951  001198  5A1C               	subwfb	printf@width+1,f,c
   952  00119A  D004               	goto	l213
   953  00119C                     l212:
   954                           
   955                           ;doprnt.c: 1383: else
   956                           ;doprnt.c: 1384: width = 0;
   957  00119C  0E00               	movlw	0
   958  00119E  6E1C               	movwf	printf@width+1,c
   959  0011A0  0E00               	movlw	0
   960  0011A2  6E1B               	movwf	printf@width,c
   961  0011A4                     l213:
   962                           
   963                           ;doprnt.c: 1387: if(flag & 0x04) {
   964  0011A4  A417               	btfss	printf@flag,2,c
   965  0011A6  D00B               	goto	l214
   966  0011A8                     
   967                           ;doprnt.c: 1415: if(width)
   968  0011A8  501B               	movf	printf@width,w,c
   969  0011AA  101C               	iorwf	printf@width+1,w,c
   970  0011AC  B4D8               	btfsc	status,2,c
   971  0011AE  D015               	goto	u610
   972                           
   973                           ;doprnt.c: 1417: (putch('0') );
   974                           
   975                           ;doprnt.c: 1416: do
   976  0011B0  0E30               	movlw	48
   977  0011B2  EC12  F00B         	call	_putch
   978                           
   979                           ;doprnt.c: 1418: while(--width);
   980  0011B6  061B               	decf	printf@width,f,c
   981  0011B8  A0D8               	btfss	status,0,c
   982  0011BA  061C               	decf	printf@width+1,f,c
   983  0011BC  D7F5               	goto	L1
   984  0011BE                     l214:
   985                           
   986                           ;doprnt.c: 1422: {
   987                           ;doprnt.c: 1424: if(width
   988                           ;doprnt.c: 1428: )
   989  0011BE  501B               	movf	printf@width,w,c
   990  0011C0  101C               	iorwf	printf@width+1,w,c
   991  0011C2  B4D8               	btfsc	status,2,c
   992  0011C4  D00A               	goto	u610
   993  0011C6                     u600:
   994                           
   995                           ;doprnt.c: 1430: (putch(' ') );
   996                           
   997                           ;doprnt.c: 1429: do
   998  0011C6  0E20               	movlw	32
   999  0011C8  EC12  F00B         	call	_putch
  1000                           
  1001                           ;doprnt.c: 1431: while(--width);
  1002  0011CC  061B               	decf	printf@width,f,c
  1003  0011CE  A0D8               	btfss	status,0,c
  1004  0011D0  061C               	decf	printf@width+1,f,c
  1005  0011D2  501B               	movf	printf@width,w,c
  1006  0011D4  101C               	iorwf	printf@width+1,w,c
  1007  0011D6  A4D8               	btfss	status,2,c
  1008  0011D8  D7F6               	goto	u600
  1009  0011DA                     u610:
  1010                           
  1011                           ;doprnt.c: 1469: }
  1012                           ;doprnt.c: 1472: prec = c;
  1013  0011DA  C01D  F01A         	movff	printf@c,printf@prec
  1014                           
  1015                           ;doprnt.c: 1474: while(prec--) {
  1016  0011DE  D025               	goto	l222
  1017  0011E0                     
  1018                           ;doprnt.c: 1478: {
  1019                           ;doprnt.c: 1499: {
  1020                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1021  0011E0  C018  F001         	movff	printf@val,___lwdiv@dividend
  1022  0011E4  C019  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1023  0011E8  501A               	movf	printf@prec,w,c
  1024  0011EA  0D02               	mullw	2
  1025  0011EC  0E12               	movlw	low _hexpowers
  1026  0011EE  24F3               	addwf	prodl,w,c
  1027  0011F0  6EF6               	movwf	tblptrl,c
  1028  0011F2  0E10               	movlw	high _hexpowers
  1029  0011F4  20F4               	addwfc	prodh,w,c
  1030  0011F6  6EF7               	movwf	tblptrh,c
  1031  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  1032  0011F8                     	endif
  1033  0011F8  0009               	tblrd		*+
  1034  0011FA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1035  0011FE  000A               	tblrd		*-
  1036  001200  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1037  001204  EC68  F00A         	call	___lwdiv	;wreg free
  1038  001208  5001               	movf	?___lwdiv,w,c
  1039  00120A  0B0F               	andlw	15
  1040  00120C  6E16               	movwf	printf@idx,c
  1041                           
  1042                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1043  00120E  5016               	movf	printf@idx,w,c
  1044  001210  0D01               	mullw	1
  1045  001212  0E27               	movlw	low STR_3
  1046  001214  24F3               	addwf	prodl,w,c
  1047  001216  6EF6               	movwf	tblptrl,c
  1048  001218  0E10               	movlw	high STR_3
  1049  00121A  20F4               	addwfc	prodh,w,c
  1050  00121C  6EF7               	movwf	tblptrh,c
  1051  00121E                     	if	0	;There are less than 3 active tblptr bytes
  1052  00121E                     	endif
  1053  00121E  0008               	tblrd		*
  1054  001220  CFF5 F01D          	movff	tablat,printf@c
  1055                           
  1056                           ;doprnt.c: 1508: }
  1057                           ;doprnt.c: 1523: }
  1058                           ;doprnt.c: 1524: (putch(c) );
  1059  001224  501D               	movf	printf@c,w,c
  1060  001226  EC12  F00B         	call	_putch
  1061  00122A                     l222:
  1062  00122A  061A               	decf	printf@prec,f,c
  1063  00122C  281A               	incf	printf@prec,w,c
  1064  00122E  A4D8               	btfss	status,2,c
  1065  001230  D7D7               	goto	l223
  1066  001232                     u620:
  1067  001232  C008  FFF6         	movff	printf@f,tblptrl
  1068  001236  C009  FFF7         	movff	printf@f+1,tblptrh
  1069  00123A  4A08               	infsnz	printf@f,f,c
  1070  00123C  2A09               	incf	printf@f+1,f,c
  1071  00123E                     	if	0	;tblptru may be non-zero
  1072  00123E                     	endif
  1073  00123E                     	if	0	;tblptru may be non-zero
  1074  00123E                     	endif
  1075  00123E  0008               	tblrd		*
  1076  001240  CFF5 F01D          	movff	tablat,printf@c
  1077  001244  501D               	movf	printf@c,w,c
  1078  001246  B4D8               	btfsc	status,2,c
  1079  001248  0012               	return	
  1080  00124A  D70B               	goto	l192
  1081  00124C                     __end_of_printf:
  1082                           	opt stack 0
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           prodh	equ	0xFF4
  1088                           prodl	equ	0xFF3
  1089                           intcon	equ	0xFF2
  1090                           wreg	equ	0xFE8
  1091                           indf2	equ	0xFDF
  1092                           postinc2	equ	0xFDE
  1093                           postdec2	equ	0xFDD
  1094                           fsr2h	equ	0xFDA
  1095                           fsr2l	equ	0xFD9
  1096                           status	equ	0xFD8
  1097                           
  1098 ;; *************** function _putch *****************
  1099 ;; Defined at:
  1100 ;;		line 24 in file "lcd.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  data            1    wreg     unsigned char 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  data            1    2[COMRAM] unsigned char 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;Total ram usage:        1 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    1
  1121 ;; This function calls:
  1122 ;;		_lcdNibble
  1123 ;; This function is called by:
  1124 ;;		_printf
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text2
  1129  001624                     __ptext2:
  1130                           	opt stack 0
  1131  001624                     _putch:
  1132                           	opt stack 28
  1133                           
  1134                           ;incstack = 0
  1135                           ;putch@data stored from wreg
  1136  001624  6E03               	movwf	putch@data,c
  1137                           
  1138                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1139  001626  848C               	bsf	3980,2,c	;volatile
  1140                           
  1141                           ;lcd.c: 33: lcdNibble(data);
  1142  001628  5003               	movf	putch@data,w,c
  1143  00162A  ECFB  F009         	call	_lcdNibble
  1144                           
  1145                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1146  00162E  0EA0               	movlw	160
  1147  001630                     u687:
  1148  001630  D000               	nop2	
  1149  001632  2EE8               	decfsz	wreg,f,c
  1150  001634  D7FD               	bra	u687
  1151  001636  0012               	return		;funcret
  1152  001638                     __end_of_putch:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           intcon	equ	0xFF2
  1161                           wreg	equ	0xFE8
  1162                           indf2	equ	0xFDF
  1163                           postinc2	equ	0xFDE
  1164                           postdec2	equ	0xFDD
  1165                           fsr2h	equ	0xFDA
  1166                           fsr2l	equ	0xFD9
  1167                           status	equ	0xFD8
  1168                           
  1169 ;; *************** function _isdigit *****************
  1170 ;; Defined at:
  1171 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;  c               1    wreg     unsigned char 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  c               1    2[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;		None               void
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1189 ;;Total ram usage:        3 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_printf
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text3
  1199  001606                     __ptext3:
  1200                           	opt stack 0
  1201  001606                     _isdigit:
  1202                           	opt stack 29
  1203                           
  1204                           ;incstack = 0
  1205                           ;isdigit@c stored from wreg
  1206  001606  6E03               	movwf	isdigit@c,c
  1207  001608  0E00               	movlw	0
  1208  00160A  6E02               	movwf	_isdigit$712,c
  1209  00160C  0E3A               	movlw	58
  1210  00160E  6003               	cpfslt	isdigit@c,c
  1211  001610  D005               	goto	l556
  1212  001612  0E2F               	movlw	47
  1213  001614  6403               	cpfsgt	isdigit@c,c
  1214  001616  D002               	goto	l556
  1215  001618  0E01               	movlw	1
  1216  00161A  6E02               	movwf	_isdigit$712,c
  1217  00161C                     l556:
  1218  00161C  C002  F001         	movff	_isdigit$712,??_isdigit
  1219  001620  3001               	rrcf	??_isdigit,w,c
  1220  001622  0012               	return	
  1221  001624                     __end_of_isdigit:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           prodh	equ	0xFF4
  1228                           prodl	equ	0xFF3
  1229                           intcon	equ	0xFF2
  1230                           wreg	equ	0xFE8
  1231                           indf2	equ	0xFDF
  1232                           postinc2	equ	0xFDE
  1233                           postdec2	equ	0xFDD
  1234                           fsr2h	equ	0xFDA
  1235                           fsr2l	equ	0xFD9
  1236                           status	equ	0xFD8
  1237                           
  1238 ;; *************** function ___wmul *****************
  1239 ;; Defined at:
  1240 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  multiplier      2    0[COMRAM] unsigned int 
  1243 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  product         2    4[COMRAM] unsigned int 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  2    0[COMRAM] unsigned int 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0, prodl, prodh
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;Total ram usage:        6 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; This function calls:
  1262 ;;		Nothing
  1263 ;; This function is called by:
  1264 ;;		_printf
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text4
  1269  0015BC                     __ptext4:
  1270                           	opt stack 0
  1271  0015BC                     ___wmul:
  1272                           	opt stack 29
  1273                           
  1274                           ;incstack = 0
  1275  0015BC  5001               	movf	___wmul@multiplier,w,c
  1276  0015BE  0203               	mulwf	___wmul@multiplicand,c
  1277  0015C0  CFF3 F005          	movff	prodl,___wmul@product
  1278  0015C4  CFF4 F006          	movff	prodh,___wmul@product+1
  1279  0015C8  5001               	movf	___wmul@multiplier,w,c
  1280  0015CA  0204               	mulwf	___wmul@multiplicand+1,c
  1281  0015CC  50F3               	movf	prodl,w,c
  1282  0015CE  2606               	addwf	___wmul@product+1,f,c
  1283  0015D0  5002               	movf	___wmul@multiplier+1,w,c
  1284  0015D2  0203               	mulwf	___wmul@multiplicand,c
  1285  0015D4  50F3               	movf	prodl,w,c
  1286  0015D6  2606               	addwf	___wmul@product+1,f,c
  1287  0015D8  C005  F001         	movff	___wmul@product,?___wmul
  1288  0015DC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1289  0015E0  0012               	return	
  1290  0015E2                     __end_of___wmul:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           intcon	equ	0xFF2
  1299                           wreg	equ	0xFE8
  1300                           indf2	equ	0xFDF
  1301                           postinc2	equ	0xFDE
  1302                           postdec2	equ	0xFDD
  1303                           fsr2h	equ	0xFDA
  1304                           fsr2l	equ	0xFD9
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function ___lwdiv *****************
  1308 ;; Defined at:
  1309 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  dividend        2    0[COMRAM] unsigned int 
  1312 ;;  divisor         2    2[COMRAM] unsigned int 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  quotient        2    4[COMRAM] unsigned int 
  1315 ;;  counter         1    6[COMRAM] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  2    0[COMRAM] unsigned int 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1328 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;Total ram usage:        7 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_printf
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text5
  1339  0014D0                     __ptext5:
  1340                           	opt stack 0
  1341  0014D0                     ___lwdiv:
  1342                           	opt stack 29
  1343                           
  1344                           ;incstack = 0
  1345  0014D0  0E00               	movlw	0
  1346  0014D2  6E06               	movwf	___lwdiv@quotient+1,c
  1347  0014D4  0E00               	movlw	0
  1348  0014D6  6E05               	movwf	___lwdiv@quotient,c
  1349  0014D8  5003               	movf	___lwdiv@divisor,w,c
  1350  0014DA  1004               	iorwf	___lwdiv@divisor+1,w,c
  1351  0014DC  B4D8               	btfsc	status,2,c
  1352  0014DE  D01C               	goto	l640
  1353  0014E0  0E01               	movlw	1
  1354  0014E2  6E07               	movwf	___lwdiv@counter,c
  1355  0014E4  D004               	goto	l635
  1356  0014E6  90D8               	bcf	status,0,c
  1357  0014E8  3603               	rlcf	___lwdiv@divisor,f,c
  1358  0014EA  3604               	rlcf	___lwdiv@divisor+1,f,c
  1359  0014EC  2A07               	incf	___lwdiv@counter,f,c
  1360  0014EE                     l635:
  1361  0014EE  AE04               	btfss	___lwdiv@divisor+1,7,c
  1362  0014F0  D7FA               	goto	l636
  1363  0014F2                     u450:
  1364  0014F2  90D8               	bcf	status,0,c
  1365  0014F4  3605               	rlcf	___lwdiv@quotient,f,c
  1366  0014F6  3606               	rlcf	___lwdiv@quotient+1,f,c
  1367  0014F8  5003               	movf	___lwdiv@divisor,w,c
  1368  0014FA  5C01               	subwf	___lwdiv@dividend,w,c
  1369  0014FC  5004               	movf	___lwdiv@divisor+1,w,c
  1370  0014FE  5802               	subwfb	___lwdiv@dividend+1,w,c
  1371  001500  A0D8               	btfss	status,0,c
  1372  001502  D005               	goto	l639
  1373  001504  5003               	movf	___lwdiv@divisor,w,c
  1374  001506  5E01               	subwf	___lwdiv@dividend,f,c
  1375  001508  5004               	movf	___lwdiv@divisor+1,w,c
  1376  00150A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1377  00150C  8005               	bsf	___lwdiv@quotient,0,c
  1378  00150E                     l639:
  1379  00150E  90D8               	bcf	status,0,c
  1380  001510  3204               	rrcf	___lwdiv@divisor+1,f,c
  1381  001512  3203               	rrcf	___lwdiv@divisor,f,c
  1382  001514  2E07               	decfsz	___lwdiv@counter,f,c
  1383  001516  D7ED               	goto	u450
  1384  001518                     l640:
  1385  001518  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1386  00151C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1387  001520  0012               	return		;funcret
  1388  001522                     __end_of___lwdiv:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           prodh	equ	0xFF4
  1395                           prodl	equ	0xFF3
  1396                           intcon	equ	0xFF2
  1397                           wreg	equ	0xFE8
  1398                           indf2	equ	0xFDF
  1399                           postinc2	equ	0xFDE
  1400                           postdec2	equ	0xFDD
  1401                           fsr2h	equ	0xFDA
  1402                           fsr2l	equ	0xFD9
  1403                           status	equ	0xFD8
  1404                           
  1405 ;; *************** function _initLCD *****************
  1406 ;; Defined at:
  1407 ;;		line 60 in file "lcd.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;		None
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;		None
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      void 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;Total ram usage:        1 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    2
  1428 ;; This function calls:
  1429 ;;		_lcdInst
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text6
  1436  001570                     __ptext6:
  1437                           	opt stack 0
  1438  001570                     _initLCD:
  1439                           	opt stack 28
  1440                           
  1441                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1442                           
  1443                           ;incstack = 0
  1444  001570  0E9C               	movlw	156
  1445  001572  6E04               	movwf	??_initLCD& (0+255),c
  1446  001574  0ED7               	movlw	215
  1447  001576                     u697:
  1448  001576  2EE8               	decfsz	wreg,f,c
  1449  001578  D7FE               	bra	u697
  1450  00157A  2E04               	decfsz	??_initLCD& (0+255),f,c
  1451  00157C  D7FC               	bra	u697
  1452  00157E  F000               	nop	
  1453                           
  1454                           ;lcd.c: 69: lcdInst(0b00110011);
  1455  001580  0E33               	movlw	51
  1456  001582  EC1C  F00B         	call	_lcdInst
  1457                           
  1458                           ;lcd.c: 70: lcdInst(0b00110010);
  1459  001586  0E32               	movlw	50
  1460  001588  EC1C  F00B         	call	_lcdInst
  1461                           
  1462                           ;lcd.c: 71: lcdInst(0b00101000);
  1463  00158C  0E28               	movlw	40
  1464  00158E  EC1C  F00B         	call	_lcdInst
  1465                           
  1466                           ;lcd.c: 72: lcdInst(0b00001111);
  1467  001592  0E0F               	movlw	15
  1468  001594  EC1C  F00B         	call	_lcdInst
  1469                           
  1470                           ;lcd.c: 73: lcdInst(0b00000110);
  1471  001598  0E06               	movlw	6
  1472  00159A  EC1C  F00B         	call	_lcdInst
  1473                           
  1474                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1475  00159E  0E01               	movlw	1
  1476  0015A0  EC1C  F00B         	call	_lcdInst
  1477  0015A4  0E9C               	movlw	156
  1478  0015A6  6E04               	movwf	??_initLCD& (0+255),c
  1479  0015A8  0ED7               	movlw	215
  1480  0015AA                     u707:
  1481  0015AA  2EE8               	decfsz	wreg,f,c
  1482  0015AC  D7FE               	bra	u707
  1483  0015AE  2E04               	decfsz	??_initLCD& (0+255),f,c
  1484  0015B0  D7FC               	bra	u707
  1485  0015B2  F000               	nop	
  1486                           
  1487                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1488  0015B4  0E0F               	movlw	15
  1489  0015B6  EC1C  F00B         	call	_lcdInst
  1490  0015BA  0012               	return		;funcret
  1491  0015BC                     __end_of_initLCD:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           prodh	equ	0xFF4
  1498                           prodl	equ	0xFF3
  1499                           intcon	equ	0xFF2
  1500                           wreg	equ	0xFE8
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           postdec2	equ	0xFDD
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508 ;; *************** function _lcdInst *****************
  1509 ;; Defined at:
  1510 ;;		line 11 in file "lcd.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  data            1    wreg     unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  data            1    2[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:        1 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    1
  1531 ;; This function calls:
  1532 ;;		_lcdNibble
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;;		_initLCD
  1536 ;;		_lcd_set_cursor
  1537 ;;		_lcd_shift_cursor
  1538 ;;		_lcd_shift_display
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text7
  1543  001638                     __ptext7:
  1544                           	opt stack 0
  1545  001638                     _lcdInst:
  1546                           	opt stack 29
  1547                           
  1548                           ;incstack = 0
  1549                           ;lcdInst@data stored from wreg
  1550  001638  6E03               	movwf	lcdInst@data,c
  1551                           
  1552                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1553  00163A  948C               	bcf	3980,2,c	;volatile
  1554                           
  1555                           ;lcd.c: 20: lcdNibble(data);
  1556  00163C  5003               	movf	lcdInst@data,w,c
  1557  00163E  ECFB  F009         	call	_lcdNibble
  1558                           
  1559                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1560  001642  0EA0               	movlw	160
  1561  001644                     u717:
  1562  001644  D000               	nop2	
  1563  001646  2EE8               	decfsz	wreg,f,c
  1564  001648  D7FD               	bra	u717
  1565  00164A  0012               	return		;funcret
  1566  00164C                     __end_of_lcdInst:
  1567                           	opt stack 0
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           prodh	equ	0xFF4
  1573                           prodl	equ	0xFF3
  1574                           intcon	equ	0xFF2
  1575                           wreg	equ	0xFE8
  1576                           indf2	equ	0xFDF
  1577                           postinc2	equ	0xFDE
  1578                           postdec2	equ	0xFDD
  1579                           fsr2h	equ	0xFDA
  1580                           fsr2l	equ	0xFD9
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function _lcdNibble *****************
  1584 ;; Defined at:
  1585 ;;		line 37 in file "lcd.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  data            1    wreg     unsigned char 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  data            1    1[COMRAM] unsigned char 
  1590 ;;  temp            1    0[COMRAM] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, status,2, status,0
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;Total ram usage:        2 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_lcdInst
  1610 ;;		_putch
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text8
  1615  0013F6                     __ptext8:
  1616                           	opt stack 0
  1617  0013F6                     _lcdNibble:
  1618                           	opt stack 28
  1619                           
  1620                           ;incstack = 0
  1621                           ;lcdNibble@data stored from wreg
  1622  0013F6  6E02               	movwf	lcdNibble@data,c
  1623                           
  1624                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1625  0013F8  5002               	movf	lcdNibble@data,w,c
  1626  0013FA  0BF0               	andlw	240
  1627  0013FC  6E01               	movwf	lcdNibble@temp,c
  1628                           
  1629                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1630  0013FE  508C               	movf	3980,w,c	;volatile
  1631  001400  0B0F               	andlw	15
  1632  001402  6E8C               	movwf	3980,c	;volatile
  1633                           
  1634                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1635  001404  5001               	movf	lcdNibble@temp,w,c
  1636  001406  108C               	iorwf	3980,w,c	;volatile
  1637  001408  6E8C               	movwf	3980,c	;volatile
  1638                           
  1639                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1640  00140A  0E00               	movlw	0
  1641  00140C  BEF2               	btfsc	intcon,7,c	;volatile
  1642  00140E  0E01               	movlw	1
  1643  001410  6E28               	movwf	lcd@LCDinterruptState,c
  1644  001412  9EF2               	bcf	intcon,7,c	;volatile
  1645  001414  868C               	bsf	3980,3,c	;volatile
  1646  001416  0E42               	movlw	66
  1647  001418                     u727:
  1648  001418  2EE8               	decfsz	wreg,f,c
  1649  00141A  D7FE               	bra	u727
  1650  00141C  D000               	nop2	
  1651  00141E  968C               	bcf	3980,3,c	;volatile
  1652  001420  0EA0               	movlw	160
  1653  001422                     u737:
  1654  001422  D000               	nop2	
  1655  001424  2EE8               	decfsz	wreg,f,c
  1656  001426  D7FD               	bra	u737
  1657  001428  B028               	btfsc	lcd@LCDinterruptState,0,c
  1658  00142A  D002               	bra	u35
  1659  00142C  9EF2               	bcf	intcon,7,c	;volatile
  1660  00142E  D001               	bra	u36
  1661  001430                     u35:
  1662  001430  8EF2               	bsf	intcon,7,c	;volatile
  1663  001432                     u36:
  1664                           
  1665                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1666  001432  3802               	swapf	lcdNibble@data,w,c
  1667  001434  0BF0               	andlw	240
  1668  001436  6E02               	movwf	lcdNibble@data,c
  1669                           
  1670                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1671  001438  5002               	movf	lcdNibble@data,w,c
  1672  00143A  0BF0               	andlw	240
  1673  00143C  6E01               	movwf	lcdNibble@temp,c
  1674                           
  1675                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1676  00143E  508C               	movf	3980,w,c	;volatile
  1677  001440  0B0F               	andlw	15
  1678  001442  6E8C               	movwf	3980,c	;volatile
  1679                           
  1680                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1681  001444  5001               	movf	lcdNibble@temp,w,c
  1682  001446  108C               	iorwf	3980,w,c	;volatile
  1683  001448  6E8C               	movwf	3980,c	;volatile
  1684                           
  1685                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1686  00144A  0E00               	movlw	0
  1687  00144C  BEF2               	btfsc	intcon,7,c	;volatile
  1688  00144E  0E01               	movlw	1
  1689  001450  6E28               	movwf	lcd@LCDinterruptState,c
  1690  001452  9EF2               	bcf	intcon,7,c	;volatile
  1691  001454  868C               	bsf	3980,3,c	;volatile
  1692  001456  0E42               	movlw	66
  1693  001458                     u747:
  1694  001458  2EE8               	decfsz	wreg,f,c
  1695  00145A  D7FE               	bra	u747
  1696  00145C  D000               	nop2	
  1697  00145E  968C               	bcf	3980,3,c	;volatile
  1698  001460  0EA0               	movlw	160
  1699  001462                     u757:
  1700  001462  D000               	nop2	
  1701  001464  2EE8               	decfsz	wreg,f,c
  1702  001466  D7FD               	bra	u757
  1703  001468  B028               	btfsc	lcd@LCDinterruptState,0,c
  1704  00146A  D002               	bra	u45
  1705  00146C  9EF2               	bcf	intcon,7,c	;volatile
  1706  00146E  D001               	bra	u46
  1707  001470                     u45:
  1708  001470  8EF2               	bsf	intcon,7,c	;volatile
  1709  001472                     u46:
  1710  001472  0012               	return		;funcret
  1711  001474                     __end_of_lcdNibble:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           wreg	equ	0xFE8
  1721                           indf2	equ	0xFDF
  1722                           postinc2	equ	0xFDE
  1723                           postdec2	equ	0xFDD
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _RTC_setTime *****************
  1729 ;; Defined at:
  1730 ;;		line 120 in file "main.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  i               1    3[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:        1 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    2
  1751 ;; This function calls:
  1752 ;;		_I2C_Master_Start
  1753 ;;		_I2C_Master_Stop
  1754 ;;		_I2C_Master_Write
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text9
  1761  001522                     __ptext9:
  1762                           	opt stack 0
  1763  001522                     _RTC_setTime:
  1764                           	opt stack 28
  1765                           
  1766                           ;main.c: 128: I2C_Master_Start();
  1767                           
  1768                           ;incstack = 0
  1769  001522  EC3F  F00B         	call	_I2C_Master_Start	;wreg free
  1770                           
  1771                           ;main.c: 129: I2C_Master_Write(0b11010000);
  1772  001526  0E00               	movlw	0
  1773  001528  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1774  00152A  0ED0               	movlw	208
  1775  00152C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1776  00152E  EC36  F00B         	call	_I2C_Master_Write	;wreg free
  1777                           
  1778                           ;main.c: 130: I2C_Master_Write(0x00);
  1779  001532  0E00               	movlw	0
  1780  001534  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1781  001536  0E00               	movlw	0
  1782  001538  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1783  00153A  EC36  F00B         	call	_I2C_Master_Write	;wreg free
  1784                           
  1785                           ;main.c: 133: for(char i=0; i<7; i++){
  1786  00153E  0E00               	movlw	0
  1787  001540  6E04               	movwf	RTC_setTime@i,c
  1788  001542                     l1279:
  1789  001542  0E06               	movlw	6
  1790  001544  6404               	cpfsgt	RTC_setTime@i,c
  1791  001546  D001               	goto	l81
  1792  001548  D010               	goto	u490
  1793  00154A                     l81:
  1794                           
  1795                           ;main.c: 134: I2C_Master_Write(happynewyear[i]);
  1796  00154A  5004               	movf	RTC_setTime@i,w,c
  1797  00154C  0D01               	mullw	1
  1798  00154E  0E1A               	movlw	low _happynewyear
  1799  001550  24F3               	addwf	prodl,w,c
  1800  001552  6EF6               	movwf	tblptrl,c
  1801  001554  0E10               	movlw	high _happynewyear
  1802  001556  20F4               	addwfc	prodh,w,c
  1803  001558  6EF7               	movwf	tblptrh,c
  1804  00155A                     	if	0	;There are less than 3 active tblptr bytes
  1805  00155A                     	endif
  1806  00155A  0008               	tblrd		*
  1807  00155C  50F5               	movf	tablat,w,c
  1808  00155E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1809  001560  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  1810  001562  EC36  F00B         	call	_I2C_Master_Write	;wreg free
  1811  001566  2A04               	incf	RTC_setTime@i,f,c
  1812  001568  D7EC               	goto	l1279
  1813  00156A                     u490:
  1814                           
  1815                           ;main.c: 135: }
  1816                           ;main.c: 137: I2C_Master_Stop();
  1817  00156A  EC3B  F00B         	call	_I2C_Master_Stop	;wreg free
  1818  00156E  0012               	return		;funcret
  1819  001570                     __end_of_RTC_setTime:
  1820                           	opt stack 0
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           wreg	equ	0xFE8
  1829                           indf2	equ	0xFDF
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _I2C_Master_Write *****************
  1837 ;; Defined at:
  1838 ;;		line 108 in file "I2C.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;Total ram usage:        2 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    1
  1859 ;; This function calls:
  1860 ;;		_I2C_Master_Wait
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;;		_RTC_setTime
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text10
  1868  00166C                     __ptext10:
  1869                           	opt stack 0
  1870  00166C                     _I2C_Master_Write:
  1871                           	opt stack 28
  1872                           
  1873                           ;I2C.c: 116: I2C_Master_Wait();
  1874                           
  1875                           ;incstack = 0
  1876  00166C  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  1877                           
  1878                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1879  001670  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1880  001674  0012               	return		;funcret
  1881  001676                     __end_of_I2C_Master_Write:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           intcon	equ	0xFF2
  1890                           wreg	equ	0xFE8
  1891                           indf2	equ	0xFDF
  1892                           postinc2	equ	0xFDE
  1893                           postdec2	equ	0xFDD
  1894                           fsr2h	equ	0xFDA
  1895                           fsr2l	equ	0xFD9
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _I2C_Master_Stop *****************
  1899 ;; Defined at:
  1900 ;;		line 95 in file "I2C.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    1
  1921 ;; This function calls:
  1922 ;;		_I2C_Master_Wait
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;;		_RTC_setTime
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text11
  1930  001676                     __ptext11:
  1931                           	opt stack 0
  1932  001676                     _I2C_Master_Stop:
  1933                           	opt stack 28
  1934                           
  1935                           ;I2C.c: 104: I2C_Master_Wait();
  1936                           
  1937                           ;incstack = 0
  1938  001676  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  1939                           
  1940                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1941  00167A  84C5               	bsf	4037,2,c	;volatile
  1942  00167C  0012               	return		;funcret
  1943  00167E                     __end_of_I2C_Master_Stop:
  1944                           	opt stack 0
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodh	equ	0xFF4
  1950                           prodl	equ	0xFF3
  1951                           intcon	equ	0xFF2
  1952                           wreg	equ	0xFE8
  1953                           indf2	equ	0xFDF
  1954                           postinc2	equ	0xFDE
  1955                           postdec2	equ	0xFDD
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _I2C_Master_Start *****************
  1961 ;; Defined at:
  1962 ;;		line 69 in file "I2C.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    1
  1983 ;; This function calls:
  1984 ;;		_I2C_Master_Wait
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;;		_RTC_setTime
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text12
  1992  00167E                     __ptext12:
  1993                           	opt stack 0
  1994  00167E                     _I2C_Master_Start:
  1995                           	opt stack 28
  1996                           
  1997                           ;I2C.c: 78: I2C_Master_Wait();
  1998                           
  1999                           ;incstack = 0
  2000  00167E  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  2001                           
  2002                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2003  001682  80C5               	bsf	4037,0,c	;volatile
  2004  001684  0012               	return		;funcret
  2005  001686                     __end_of_I2C_Master_Start:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           intcon	equ	0xFF2
  2014                           wreg	equ	0xFE8
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _I2C_Master_Read *****************
  2023 ;; Defined at:
  2024 ;;		line 120 in file "I2C.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  ackBit          1    wreg     unsigned char 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  ackBit          1    1[COMRAM] unsigned char 
  2029 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      unsigned char 
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:        2 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    1
  2046 ;; This function calls:
  2047 ;;		_I2C_Master_Wait
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text13
  2054  0015E2                     __ptext13:
  2055                           	opt stack 0
  2056  0015E2                     _I2C_Master_Read:
  2057                           	opt stack 29
  2058                           
  2059                           ;incstack = 0
  2060                           ;I2C_Master_Read@ackBit stored from wreg
  2061  0015E2  6E02               	movwf	I2C_Master_Read@ackBit,c
  2062                           
  2063                           ;I2C.c: 130: unsigned char receivedByte;
  2064                           ;I2C.c: 132: I2C_Master_Wait();
  2065  0015E4  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  2066                           
  2067                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2068  0015E8  86C5               	bsf	4037,3,c	;volatile
  2069                           
  2070                           ;I2C.c: 135: I2C_Master_Wait();
  2071  0015EA  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  2072                           
  2073                           ;I2C.c: 136: receivedByte = SSPBUF;
  2074  0015EE  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2075                           
  2076                           ;I2C.c: 138: I2C_Master_Wait();
  2077  0015F2  EC26  F00B         	call	_I2C_Master_Wait	;wreg free
  2078                           
  2079                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2080  0015F6  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2081  0015F8  D002               	bra	u165
  2082  0015FA  9AC5               	bcf	4037,5,c	;volatile
  2083  0015FC  D001               	bra	u166
  2084  0015FE                     u165:
  2085  0015FE  8AC5               	bsf	4037,5,c	;volatile
  2086  001600                     u166:
  2087                           
  2088                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2089  001600  88C5               	bsf	4037,4,c	;volatile
  2090                           
  2091                           ;I2C.c: 142: return receivedByte;
  2092  001602  5003               	movf	I2C_Master_Read@receivedByte,w,c
  2093  001604  0012               	return	
  2094  001606                     __end_of_I2C_Master_Read:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           intcon	equ	0xFF2
  2103                           wreg	equ	0xFE8
  2104                           indf2	equ	0xFDF
  2105                           postinc2	equ	0xFDE
  2106                           postdec2	equ	0xFDD
  2107                           fsr2h	equ	0xFDA
  2108                           fsr2l	equ	0xFD9
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _I2C_Master_Wait *****************
  2112 ;; Defined at:
  2113 ;;		line 51 in file "I2C.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        1 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_I2C_Master_Start
  2137 ;;		_I2C_Master_Stop
  2138 ;;		_I2C_Master_Write
  2139 ;;		_I2C_Master_Read
  2140 ;;		_I2C_Master_RepeatedStart
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text14
  2145  00164C                     __ptext14:
  2146                           	opt stack 0
  2147  00164C                     _I2C_Master_Wait:
  2148                           	opt stack 28
  2149                           
  2150                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2151                           
  2152                           ;incstack = 0
  2153  00164C  B4C7               	btfsc	4039,2,c	;volatile
  2154  00164E  D7FE               	goto	_I2C_Master_Wait
  2155  001650  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2156  001654  0E1F               	movlw	31
  2157  001656  1601               	andwf	??_I2C_Master_Wait,f,c
  2158  001658  B4D8               	btfsc	status,2,c
  2159  00165A  0012               	return	
  2160  00165C  D7F7               	goto	_I2C_Master_Wait
  2161  00165E                     __end_of_I2C_Master_Wait:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           wreg	equ	0xFE8
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           postdec2	equ	0xFDD
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _I2C_Master_Init *****************
  2179 ;; Defined at:
  2180 ;;		line 14 in file "I2C.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      void 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:        8 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    1
  2201 ;; This function calls:
  2202 ;;		___lldiv
  2203 ;; This function is called by:
  2204 ;;		_main
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text15
  2209  001474                     __ptext15:
  2210                           	opt stack 0
  2211  001474                     _I2C_Master_Init:
  2212                           	opt stack 29
  2213                           
  2214                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2215                           
  2216                           ;incstack = 0
  2217  001474  9AC6               	bcf	4038,5,c	;volatile
  2218                           
  2219                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2220  001476  8694               	bsf	3988,3,c	;volatile
  2221                           
  2222                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2223  001478  8894               	bsf	3988,4,c	;volatile
  2224                           
  2225                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2226  00147A  0E80               	movlw	128
  2227  00147C  6EC7               	movwf	4039,c	;volatile
  2228                           
  2229                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2230  00147E  0E28               	movlw	40
  2231  001480  6EC6               	movwf	4038,c	;volatile
  2232                           
  2233                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2234  001482  0E00               	movlw	0
  2235  001484  6EC5               	movwf	4037,c	;volatile
  2236                           
  2237                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
  2238  001486  0E00               	movlw	0
  2239  001488  6E01               	movwf	___lldiv@dividend,c
  2240  00148A  0E48               	movlw	72
  2241  00148C  6E02               	movwf	___lldiv@dividend+1,c
  2242  00148E  0EE8               	movlw	232
  2243  001490  6E03               	movwf	___lldiv@dividend+2,c
  2244  001492  0E01               	movlw	1
  2245  001494  6E04               	movwf	___lldiv@dividend+3,c
  2246  001496  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2247  00149A  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2248  00149E  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2249  0014A2  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2250  0014A6  0E02               	movlw	2
  2251  0014A8                     u475:
  2252  0014A8  90D8               	bcf	status,0,c
  2253  0014AA  3612               	rlcf	??_I2C_Master_Init,f,c
  2254  0014AC  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2255  0014AE  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2256  0014B0  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2257  0014B2  2EE8               	decfsz	wreg,f,c
  2258  0014B4  D7F9               	goto	u475
  2259  0014B6  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2260  0014BA  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2261  0014BE  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2262  0014C2  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2263  0014C6  ECBA  F009         	call	___lldiv	;wreg free
  2264  0014CA  0401               	decf	?___lldiv,w,c
  2265  0014CC  6EC8               	movwf	4040,c	;volatile
  2266  0014CE  0012               	return		;funcret
  2267  0014D0                     __end_of_I2C_Master_Init:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           wreg	equ	0xFE8
  2277                           indf2	equ	0xFDF
  2278                           postinc2	equ	0xFDE
  2279                           postdec2	equ	0xFDD
  2280                           fsr2h	equ	0xFDA
  2281                           fsr2l	equ	0xFD9
  2282                           status	equ	0xFD8
  2283                           
  2284 ;; *************** function ___lldiv *****************
  2285 ;; Defined at:
  2286 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  dividend        4    0[COMRAM] unsigned long 
  2289 ;;  divisor         4    4[COMRAM] unsigned long 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  quotient        4    8[COMRAM] unsigned long 
  2292 ;;  counter         1   12[COMRAM] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  4    0[COMRAM] unsigned long 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2302 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;Total ram usage:       13 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		_I2C_Master_Init
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text16
  2316  001374                     __ptext16:
  2317                           	opt stack 0
  2318  001374                     ___lldiv:
  2319                           	opt stack 29
  2320                           
  2321                           ;incstack = 0
  2322  001374  0E00               	movlw	0
  2323  001376  6E09               	movwf	___lldiv@quotient,c
  2324  001378  0E00               	movlw	0
  2325  00137A  6E0A               	movwf	___lldiv@quotient+1,c
  2326  00137C  0E00               	movlw	0
  2327  00137E  6E0B               	movwf	___lldiv@quotient+2,c
  2328  001380  0E00               	movlw	0
  2329  001382  6E0C               	movwf	___lldiv@quotient+3,c
  2330  001384  5005               	movf	___lldiv@divisor,w,c
  2331  001386  1006               	iorwf	___lldiv@divisor+1,w,c
  2332  001388  1007               	iorwf	___lldiv@divisor+2,w,c
  2333  00138A  1008               	iorwf	___lldiv@divisor+3,w,c
  2334  00138C  B4D8               	btfsc	status,2,c
  2335  00138E  D02A               	goto	l587
  2336  001390  0E01               	movlw	1
  2337  001392  6E0D               	movwf	___lldiv@counter,c
  2338  001394  D006               	goto	l582
  2339  001396  90D8               	bcf	status,0,c
  2340  001398  3605               	rlcf	___lldiv@divisor,f,c
  2341  00139A  3606               	rlcf	___lldiv@divisor+1,f,c
  2342  00139C  3607               	rlcf	___lldiv@divisor+2,f,c
  2343  00139E  3608               	rlcf	___lldiv@divisor+3,f,c
  2344  0013A0  2A0D               	incf	___lldiv@counter,f,c
  2345  0013A2                     l582:
  2346  0013A2  AE08               	btfss	___lldiv@divisor+3,7,c
  2347  0013A4  D7F8               	goto	l583
  2348  0013A6                     u420:
  2349  0013A6  90D8               	bcf	status,0,c
  2350  0013A8  3609               	rlcf	___lldiv@quotient,f,c
  2351  0013AA  360A               	rlcf	___lldiv@quotient+1,f,c
  2352  0013AC  360B               	rlcf	___lldiv@quotient+2,f,c
  2353  0013AE  360C               	rlcf	___lldiv@quotient+3,f,c
  2354  0013B0  5005               	movf	___lldiv@divisor,w,c
  2355  0013B2  5C01               	subwf	___lldiv@dividend,w,c
  2356  0013B4  5006               	movf	___lldiv@divisor+1,w,c
  2357  0013B6  5802               	subwfb	___lldiv@dividend+1,w,c
  2358  0013B8  5007               	movf	___lldiv@divisor+2,w,c
  2359  0013BA  5803               	subwfb	___lldiv@dividend+2,w,c
  2360  0013BC  5008               	movf	___lldiv@divisor+3,w,c
  2361  0013BE  5804               	subwfb	___lldiv@dividend+3,w,c
  2362  0013C0  A0D8               	btfss	status,0,c
  2363  0013C2  D009               	goto	l586
  2364  0013C4  5005               	movf	___lldiv@divisor,w,c
  2365  0013C6  5E01               	subwf	___lldiv@dividend,f,c
  2366  0013C8  5006               	movf	___lldiv@divisor+1,w,c
  2367  0013CA  5A02               	subwfb	___lldiv@dividend+1,f,c
  2368  0013CC  5007               	movf	___lldiv@divisor+2,w,c
  2369  0013CE  5A03               	subwfb	___lldiv@dividend+2,f,c
  2370  0013D0  5008               	movf	___lldiv@divisor+3,w,c
  2371  0013D2  5A04               	subwfb	___lldiv@dividend+3,f,c
  2372  0013D4  8009               	bsf	___lldiv@quotient,0,c
  2373  0013D6                     l586:
  2374  0013D6  90D8               	bcf	status,0,c
  2375  0013D8  3208               	rrcf	___lldiv@divisor+3,f,c
  2376  0013DA  3207               	rrcf	___lldiv@divisor+2,f,c
  2377  0013DC  3206               	rrcf	___lldiv@divisor+1,f,c
  2378  0013DE  3205               	rrcf	___lldiv@divisor,f,c
  2379  0013E0  2E0D               	decfsz	___lldiv@counter,f,c
  2380  0013E2  D7E1               	goto	u420
  2381  0013E4                     l587:
  2382  0013E4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2383  0013E8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2384  0013EC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2385  0013F0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2386  0013F4  0012               	return		;funcret
  2387  0013F6                     __end_of___lldiv:
  2388                           	opt stack 0
  2389                           tblptru	equ	0xFF8
  2390                           tblptrh	equ	0xFF7
  2391                           tblptrl	equ	0xFF6
  2392                           tablat	equ	0xFF5
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           wreg	equ	0xFE8
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon	equ	0xFF2
  2410                           wreg	equ	0xFE8
  2411                           indf2	equ	0xFDF
  2412                           postinc2	equ	0xFDE
  2413                           postdec2	equ	0xFDD
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418                           	psect	rparam
  2419  0000                     tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           wreg	equ	0xFE8
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    38
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      41
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _RTC_setTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3470
                                             29 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                        _RTC_setTime
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    1571
                                              7 COMRAM    22    14      8
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTC_setTime                                          1     1      0     546
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _RTC_setTime
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      29       1       32.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      29      34        0.0%
DATA                 0      0      29       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 12:05:44 2018

                         l81 154A                           l73 12A0                           l74 12DC  
                __CFG_CPD$ON 000000                           u35 1430                           u36 1432  
                         u45 1470                           u46 1472          ___wmul@multiplicand 0003  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l201 10B4  
                        l203 1110                          l212 119C                          l213 11A4  
                        l222 122A                          l214 11BE                          l223 11E0  
                        l192 1062                          l193 1072                          l195 1086  
                        l196 1080                          l640 1518                          l635 14EE  
                        l636 14E6                          l556 161C                          l582 13A2  
                        l583 1396                          l639 150E                          l586 13D6  
                        l587 13E4                 __CFG_CPB$OFF 000000                          u420 13A6  
                        u165 15FE                          u166 1600                          u600 11C6  
                        u450 14F2                          u610 11DA                          u620 1232  
                        u550 1178                          u490 156A                          u650 12F8  
                        u475 14A8                          u707 15AA                          u717 1644  
                        u727 1418                          u737 1422                          u747 1458  
                        u667 1310                          u757 1462                          u677 1364  
                        u687 1630                          u697 1576                          prod 000FF3  
                        wreg 000FE8                  _RTC_setTime 1522                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1327 114C                         l1279 1542  
                       l1397 12D4                         STR_1 1038                         STR_2 1047  
                       STR_3 1027                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       _main 124C                         _keys 1001                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 1022  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 13F6              __end_of___lwdiv 1522                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 164C               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 15BC               __CFG_EBTRB$OFF 000000              __end_of_isdigit 1624  
                      _putch 1624                        main@i 0027                        tablat 000FF5  
          _LCDinterruptState 0029                        status 000FD8  I2C_Master_Read@receivedByte 0003  
             __CFG_PBADEN$ON 000000              __initialization 165E                 __end_of_main 1374  
               __end_of_keys 1012            __end_of_LCD_RIGHT 1023                       ??_main 001E  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       ?_putch 0001                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___wmul 15BC  
             __CFG_STVREN$ON 000000                    ??___lldiv 0009                    ??___lwdiv 0005  
                  ??_lcdInst 0003                       _printf 1058                    ??_initLCD 0004  
                  ??_isdigit 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1662                 RTC_setTime@i 0004                ___rparam_used 000001  
       __end_of_happynewyear 1021               __pcstackCOMRAM 0001                __end_of_putch 1638  
         __size_of_lcdNibble 007E                 ?_RTC_setTime 0001                      ??_putch 0003  
                    ?___wmul 0001                      ?_printf 0008         lcd@LCDinterruptState 0028  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 1474                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 1374              __size_of___wmul 0026                      ___lwdiv 14D0  
               __psmallconst 1000                      __pcinit 165E                      __ramtop 1000  
                    _lcdInst 1638                      __ptext0 124C                      __ptext1 1058  
                    __ptext2 1624                      __ptext3 1606                      __ptext4 15BC  
                    __ptext5 14D0                      __ptext6 1570                      __ptext7 1638  
                    __ptext8 13F6                      __ptext9 1522              __size_of_printf 01F4  
                    _initLCD 1570            __end_of_hexpowers 101A                      _isdigit 1606  
                  _LCD_RIGHT 1022     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008         end_of_initialization 1662  
      __end_of_LCD_SIZE_HORZ 1025        __end_of_LCD_SIZE_VERT 1024                __Lmediumconst 0000  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                      printf@c 001D                      printf@f 0008  
                    postdec2 000FDD                      postinc2 000FDE                    _TRISCbits 000F94  
               _happynewyear 101A         __size_of_RTC_setTime 004E                  printf@width 001B  
             __end_of___wmul 15E2               __end_of_printf 124C          start_initialization 165E  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001  
          ??_I2C_Master_Stop 0002             __CFG_OSC$INTIO67 000000                     ??___wmul 0005  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0010  
                __pbssCOMRAM 0028             _I2C_Master_Start 167E             _I2C_Master_Write 166C  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 13F6  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000                     ?_isdigit 0001  
                  _hexpowers 1012             ___lwdiv@quotient 0005               __size_of_putch 0014  
                   _LCD_LEFT 1021               ___wmul@product 0005                     _LATDbits 000F8C  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001            ___wmul@multiplier 0001  
              lcdNibble@data 0002                   printf@flag 0017                lcdNibble@temp 0001  
                 printf@prec 001A               _LCD_HORZ_LIMIT 1026                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082  
           __size_of___lwdiv 0052                  _isdigit$712 0002             __size_of_lcdInst 0014  
              ??_RTC_setTime 0004              _I2C_Master_Init 1474              _I2C_Master_Read 15E2  
           __size_of_initLCD 004C              _I2C_Master_Wait 164C              _I2C_Master_Stop 1676  
     __end_of_LCD_HORZ_LIMIT 1027             __size_of_isdigit 001E              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 166C                     __ptext11 1676  
                   __ptext12 167E                     __ptext13 15E2                     __ptext14 164C  
                   __ptext15 1474                     __ptext16 1374               _LCD_VERT_LIMIT 1025  
              __size_of_main 0128                  ??_lcdNibble 0001                    printf@idx 0016  
                  printf@val 0018                     main@time 0020  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 1686                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 1676                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1026  
                   isdigit@c 0003          __end_of_RTC_setTime 1570                _LCD_SIZE_HORZ 1024  
              _LCD_SIZE_VERT 1023             ___lldiv@dividend 0001                   _OSCCONbits 000FD3  
                   printf@ap 0014      __end_of_I2C_Master_Init 14D0      __end_of_I2C_Master_Read 1606  
    __end_of_I2C_Master_Wait 165E      __end_of_I2C_Master_Stop 167E                  lcdInst@data 0003  
           ___lldiv@quotient 0009                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
