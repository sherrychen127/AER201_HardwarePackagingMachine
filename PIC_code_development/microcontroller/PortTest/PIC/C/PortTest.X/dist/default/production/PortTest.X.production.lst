

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 13 17:08:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4620 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	smallconst
    53  001000                     __psmallconst:
    54                           	opt stack 0
    55  001000  00                 	db	0
    56  001001                     _LCD_LEFT:
    57                           	opt stack 0
    58  001001  00                 	db	0
    59  001002                     __end_of_LCD_LEFT:
    60                           	opt stack 0
    61  001002                     _LCD_RIGHT:
    62                           	opt stack 0
    63  001002  01                 	db	1
    64  001003                     __end_of_LCD_RIGHT:
    65                           	opt stack 0
    66  001003                     _LCD_SIZE_VERT:
    67                           	opt stack 0
    68  001003  02                 	db	2
    69  001004                     __end_of_LCD_SIZE_VERT:
    70                           	opt stack 0
    71  001004                     _LCD_SIZE_HORZ:
    72                           	opt stack 0
    73  001004  10                 	db	16
    74  001005                     __end_of_LCD_SIZE_HORZ:
    75                           	opt stack 0
    76  001005                     _LCD_VERT_LIMIT:
    77                           	opt stack 0
    78  001005  02                 	db	2
    79  001006                     __end_of_LCD_VERT_LIMIT:
    80                           	opt stack 0
    81  001006                     _LCD_HORZ_LIMIT:
    82                           	opt stack 0
    83  001006  28                 	db	40
    84  001007                     __end_of_LCD_HORZ_LIMIT:
    85                           	opt stack 0
    86  0000                     _INTCONbits	set	4082
    87  0000                     _LATDbits	set	3980
    88  0000                     _PORTAbits	set	3968
    89  0000                     _TRISAbits	set	3986
    90  0000                     _ADCON1	set	4033
    91  0000                     _ADCON0	set	4034
    92  0000                     _TRISE	set	3990
    93  0000                     _TRISD	set	3989
    94  0000                     _TRISC	set	3988
    95  0000                     _TRISB	set	3987
    96  0000                     _TRISA	set	3986
    97  0000                     _LATE	set	3981
    98  0000                     _LATD	set	3980
    99  0000                     _LATC	set	3979
   100  0000                     _LATB	set	3978
   101  0000                     _LATA	set	3977
   102                           
   103                           ; #config settings
   104  001007  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           	psect	cinit
   107  001134                     __pcinit:
   108                           	opt stack 0
   109  001134                     start_initialization:
   110                           	opt stack 0
   111  001134                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Clear objects allocated to COMRAM (3 bytes)
   115  001134  6A08               	clrf	(__pbssCOMRAM+2)& (0+255),c
   116  001136  6A07               	clrf	(__pbssCOMRAM+1)& (0+255),c
   117  001138  6A06               	clrf	__pbssCOMRAM& (0+255),c
   118  00113A                     end_of_initialization:
   119                           	opt stack 0
   120  00113A                     __end_of__initialization:
   121                           	opt stack 0
   122  00113A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   123  00113C  6EF8               	movwf	tblptru,c
   124  00113E  0E10               	movlw	high __Lsmallconst
   125  001140  6EF7               	movwf	tblptrh,c
   126  001142  0100               	movlb	0
   127  001144  EF43  F008         	goto	_main	;jump to C main() function
   128                           tblptru	equ	0xFF8
   129                           tblptrh	equ	0xFF7
   130                           
   131                           	psect	bssCOMRAM
   132  000006                     __pbssCOMRAM:
   133                           	opt stack 0
   134  000006                     lcd@LCDinterruptState:
   135                           	opt stack 0
   136  000006                     	ds	1
   137  000007                     _i:
   138                           	opt stack 0
   139  000007                     	ds	1
   140  000008                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           tblptrh	equ	0xFF7
   143                           
   144                           	psect	cstackCOMRAM
   145  000001                     __pcstackCOMRAM:
   146                           	opt stack 0
   147  000001                     lcdNibble@temp:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x0
   151  000001                     	ds	1
   152  000002                     lcdNibble@data:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x1
   156  000002                     	ds	1
   157  000003                     lcdInst@data:
   158                           	opt stack 0
   159  000003                     putch@data:
   160                           	opt stack 0
   161                           
   162                           ; 1 bytes @ 0x2
   163  000003                     	ds	1
   164  000004                     ??_initLCD:
   165                           
   166                           ; 1 bytes @ 0x3
   167  000004                     	ds	1
   168  000005                     ??_main:
   169                           
   170                           ; 1 bytes @ 0x4
   171  000005                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           
   175 ;;
   176 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   177 ;;
   178 ;; *************** function _main *****************
   179 ;; Defined at:
   180 ;;		line 41 in file "main.c"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;		None
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : 0/0
   191 ;;		On exit  : 0/0
   192 ;;		Unchanged: 0/0
   193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   197 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   198 ;;Total ram usage:        1 bytes
   199 ;; Hardware stack levels required when called:    3
   200 ;; This function calls:
   201 ;;		_initLCD
   202 ;;		_lcdInst
   203 ;;		_putch
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           	psect	text0
   210  001086                     __ptext0:
   211                           	opt stack 0
   212  001086                     _main:
   213                           	opt stack 28
   214                           
   215                           ;main.c: 47: LATA = 0x00;
   216                           
   217                           ;incstack = 0
   218  001086  0E00               	movlw	0
   219  001088  6E89               	movwf	3977,c	;volatile
   220                           
   221                           ;main.c: 48: LATB = 0x00;
   222  00108A  0E00               	movlw	0
   223  00108C  6E8A               	movwf	3978,c	;volatile
   224                           
   225                           ;main.c: 49: LATC = 0x00;
   226  00108E  0E00               	movlw	0
   227  001090  6E8B               	movwf	3979,c	;volatile
   228                           
   229                           ;main.c: 50: LATD = 0x00;
   230  001092  0E00               	movlw	0
   231  001094  6E8C               	movwf	3980,c	;volatile
   232                           
   233                           ;main.c: 51: LATE = 0x00;
   234  001096  0E00               	movlw	0
   235  001098  6E8D               	movwf	3981,c	;volatile
   236                           
   237                           ;main.c: 55: TRISA = 0x00;
   238  00109A  0E00               	movlw	0
   239  00109C  6E92               	movwf	3986,c	;volatile
   240                           
   241                           ;main.c: 56: TRISB = 0x00;
   242  00109E  0E00               	movlw	0
   243  0010A0  6E93               	movwf	3987,c	;volatile
   244                           
   245                           ;main.c: 57: TRISC = 0x00;
   246  0010A2  0E00               	movlw	0
   247  0010A4  6E94               	movwf	3988,c	;volatile
   248                           
   249                           ;main.c: 58: TRISD = 0x00;
   250  0010A6  0E00               	movlw	0
   251  0010A8  6E95               	movwf	3989,c	;volatile
   252                           
   253                           ;main.c: 59: TRISE = 0x00;
   254  0010AA  0E00               	movlw	0
   255  0010AC  6E96               	movwf	3990,c	;volatile
   256                           
   257                           ;main.c: 62: ADCON0 = 0x00;
   258  0010AE  0E00               	movlw	0
   259  0010B0  6EC2               	movwf	4034,c	;volatile
   260                           
   261                           ;main.c: 63: ADCON1 = 0b00001111;
   262  0010B2  0E0F               	movlw	15
   263  0010B4  6EC1               	movwf	4033,c	;volatile
   264                           
   265                           ;main.c: 72: TRISAbits.TRISA0 = 1;
   266  0010B6  8092               	bsf	3986,0,c	;volatile
   267                           
   268                           ;main.c: 87: initLCD();
   269                           
   270                           ;main.c: 74: while(1){
   271  0010B8  EC74  F008         	call	_initLCD	;wreg free
   272  0010BC                     
   273                           ;main.c: 89: {
   274                           ;main.c: 90: i = (char)(PORTAbits.RA0) +'0';
   275  0010BC  A080               	btfss	3968,0,c	;volatile
   276  0010BE  D002               	goto	u30
   277  0010C0  0E01               	movlw	1
   278  0010C2  D001               	goto	u36
   279  0010C4                     u30:
   280  0010C4  0E00               	movlw	0
   281  0010C6                     u36:
   282  0010C6  0F30               	addlw	48
   283  0010C8  6E07               	movwf	_i,c
   284                           
   285                           ;main.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   286  0010CA  0E80               	movlw	128
   287  0010CC  ECAE  F008         	call	_lcdInst
   288  0010D0  0E41               	movlw	65
   289  0010D2  6E05               	movwf	??_main& (0+255),c
   290  0010D4  0EEE               	movlw	238
   291  0010D6                     u107:
   292  0010D6  2EE8               	decfsz	wreg,f,c
   293  0010D8  D7FE               	bra	u107
   294  0010DA  2E05               	decfsz	??_main& (0+255),f,c
   295  0010DC  D7FC               	bra	u107
   296  0010DE  D000               	nop2	
   297                           
   298                           ;main.c: 92: putch(i);
   299  0010E0  5007               	movf	_i,w,c
   300  0010E2  ECA4  F008         	call	_putch
   301  0010E6  D7EA               	goto	l58
   302  0010E8                     __end_of_main:
   303                           	opt stack 0
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           wreg	equ	0xFE8
   307                           
   308 ;; *************** function _putch *****************
   309 ;; Defined at:
   310 ;;		line 24 in file "lcd.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;  data            1    wreg     unsigned char 
   313 ;; Auto vars:     Size  Location     Type
   314 ;;  data            1    2[COMRAM] unsigned char 
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2, status,0, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : 0/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   328 ;;Total ram usage:        1 bytes
   329 ;; Hardware stack levels used:    1
   330 ;; Hardware stack levels required when called:    1
   331 ;; This function calls:
   332 ;;		_lcdNibble
   333 ;; This function is called by:
   334 ;;		_main
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           	psect	text1
   339  001148                     __ptext1:
   340                           	opt stack 0
   341  001148                     _putch:
   342                           	opt stack 29
   343                           
   344                           ;incstack = 0
   345                           ;putch@data stored from wreg
   346  001148  6E03               	movwf	putch@data,c
   347                           
   348                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   349  00114A  848C               	bsf	3980,2,c	;volatile
   350                           
   351                           ;lcd.c: 33: lcdNibble(data);
   352  00114C  5003               	movf	putch@data,w,c
   353  00114E  EC04  F008         	call	_lcdNibble
   354                           
   355                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   356  001152  0EC8               	movlw	200
   357  001154                     u117:
   358  001154  D000               	nop2	
   359  001156  2EE8               	decfsz	wreg,f,c
   360  001158  D7FD               	bra	u117
   361  00115A  0012               	return		;funcret
   362  00115C                     __end_of_putch:
   363                           	opt stack 0
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           wreg	equ	0xFE8
   367                           
   368 ;; *************** function _initLCD *****************
   369 ;; Defined at:
   370 ;;		line 60 in file "lcd.c"
   371 ;; Parameters:    Size  Location     Type
   372 ;;		None
   373 ;; Auto vars:     Size  Location     Type
   374 ;;		None
   375 ;; Return value:  Size  Location     Type
   376 ;;                  1    wreg      void 
   377 ;; Registers used:
   378 ;;		wreg, status,2, status,0, cstack
   379 ;; Tracked objects:
   380 ;;		On entry : 0/0
   381 ;;		On exit  : 0/0
   382 ;;		Unchanged: 0/0
   383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;Total ram usage:        1 bytes
   389 ;; Hardware stack levels used:    1
   390 ;; Hardware stack levels required when called:    2
   391 ;; This function calls:
   392 ;;		_lcdInst
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text2
   399  0010E8                     __ptext2:
   400                           	opt stack 0
   401  0010E8                     _initLCD:
   402                           	opt stack 28
   403                           
   404                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   405                           
   406                           ;incstack = 0
   407  0010E8  0EC3               	movlw	195
   408  0010EA  6E04               	movwf	??_initLCD& (0+255),c
   409  0010EC  0ECD               	movlw	205
   410  0010EE                     u127:
   411  0010EE  2EE8               	decfsz	wreg,f,c
   412  0010F0  D7FE               	bra	u127
   413  0010F2  2E04               	decfsz	??_initLCD& (0+255),f,c
   414  0010F4  D7FC               	bra	u127
   415  0010F6  F000               	nop	
   416                           
   417                           ;lcd.c: 69: lcdInst(0b00110011);
   418  0010F8  0E33               	movlw	51
   419  0010FA  ECAE  F008         	call	_lcdInst
   420                           
   421                           ;lcd.c: 70: lcdInst(0b00110010);
   422  0010FE  0E32               	movlw	50
   423  001100  ECAE  F008         	call	_lcdInst
   424                           
   425                           ;lcd.c: 71: lcdInst(0b00101000);
   426  001104  0E28               	movlw	40
   427  001106  ECAE  F008         	call	_lcdInst
   428                           
   429                           ;lcd.c: 72: lcdInst(0b00001111);
   430  00110A  0E0F               	movlw	15
   431  00110C  ECAE  F008         	call	_lcdInst
   432                           
   433                           ;lcd.c: 73: lcdInst(0b00000110);
   434  001110  0E06               	movlw	6
   435  001112  ECAE  F008         	call	_lcdInst
   436                           
   437                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   438  001116  0E01               	movlw	1
   439  001118  ECAE  F008         	call	_lcdInst
   440  00111C  0EC3               	movlw	195
   441  00111E  6E04               	movwf	??_initLCD& (0+255),c
   442  001120  0ECD               	movlw	205
   443  001122                     u137:
   444  001122  2EE8               	decfsz	wreg,f,c
   445  001124  D7FE               	bra	u137
   446  001126  2E04               	decfsz	??_initLCD& (0+255),f,c
   447  001128  D7FC               	bra	u137
   448  00112A  F000               	nop	
   449                           
   450                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   451  00112C  0E0F               	movlw	15
   452  00112E  ECAE  F008         	call	_lcdInst
   453  001132  0012               	return		;funcret
   454  001134                     __end_of_initLCD:
   455                           	opt stack 0
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           wreg	equ	0xFE8
   459                           
   460 ;; *************** function _lcdInst *****************
   461 ;; Defined at:
   462 ;;		line 11 in file "lcd.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  data            1    wreg     unsigned char 
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  data            1    2[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, status,2, status,0, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;Total ram usage:        1 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; Hardware stack levels required when called:    1
   483 ;; This function calls:
   484 ;;		_lcdNibble
   485 ;; This function is called by:
   486 ;;		_main
   487 ;;		_initLCD
   488 ;;		_lcd_set_cursor
   489 ;;		_lcd_shift_cursor
   490 ;;		_lcd_shift_display
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           	psect	text3
   495  00115C                     __ptext3:
   496                           	opt stack 0
   497  00115C                     _lcdInst:
   498                           	opt stack 29
   499                           
   500                           ;incstack = 0
   501                           ;lcdInst@data stored from wreg
   502  00115C  6E03               	movwf	lcdInst@data,c
   503                           
   504                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   505  00115E  948C               	bcf	3980,2,c	;volatile
   506                           
   507                           ;lcd.c: 20: lcdNibble(data);
   508  001160  5003               	movf	lcdInst@data,w,c
   509  001162  EC04  F008         	call	_lcdNibble
   510                           
   511                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   512  001166  0EC8               	movlw	200
   513  001168                     u147:
   514  001168  D000               	nop2	
   515  00116A  2EE8               	decfsz	wreg,f,c
   516  00116C  D7FD               	bra	u147
   517  00116E  0012               	return		;funcret
   518  001170                     __end_of_lcdInst:
   519                           	opt stack 0
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           wreg	equ	0xFE8
   523                           
   524 ;; *************** function _lcdNibble *****************
   525 ;; Defined at:
   526 ;;		line 37 in file "lcd.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  data            1    wreg     unsigned char 
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  data            1    1[COMRAM] unsigned char 
   531 ;;  temp            1    0[COMRAM] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;Total ram usage:        2 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; This function calls:
   548 ;;		Nothing
   549 ;; This function is called by:
   550 ;;		_lcdInst
   551 ;;		_putch
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text4
   556  001008                     __ptext4:
   557                           	opt stack 0
   558  001008                     _lcdNibble:
   559                           	opt stack 29
   560                           
   561                           ;incstack = 0
   562                           ;lcdNibble@data stored from wreg
   563  001008  6E02               	movwf	lcdNibble@data,c
   564                           
   565                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   566  00100A  5002               	movf	lcdNibble@data,w,c
   567  00100C  0BF0               	andlw	240
   568  00100E  6E01               	movwf	lcdNibble@temp,c
   569                           
   570                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   571  001010  508C               	movf	3980,w,c	;volatile
   572  001012  0B0F               	andlw	15
   573  001014  6E8C               	movwf	3980,c	;volatile
   574                           
   575                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   576  001016  5001               	movf	lcdNibble@temp,w,c
   577  001018  108C               	iorwf	3980,w,c	;volatile
   578  00101A  6E8C               	movwf	3980,c	;volatile
   579                           
   580                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   581  00101C  0E00               	movlw	0
   582  00101E  BEF2               	btfsc	intcon,7,c	;volatile
   583  001020  0E01               	movlw	1
   584  001022  6E06               	movwf	lcd@LCDinterruptState,c
   585  001024  9EF2               	bcf	intcon,7,c	;volatile
   586  001026  868C               	bsf	3980,3,c	;volatile
   587  001028  0E53               	movlw	83
   588  00102A                     u157:
   589  00102A  2EE8               	decfsz	wreg,f,c
   590  00102C  D7FE               	bra	u157
   591  00102E  F000               	nop	
   592  001030  968C               	bcf	3980,3,c	;volatile
   593  001032  0EC8               	movlw	200
   594  001034                     u167:
   595  001034  D000               	nop2	
   596  001036  2EE8               	decfsz	wreg,f,c
   597  001038  D7FD               	bra	u167
   598  00103A  B006               	btfsc	lcd@LCDinterruptState,0,c
   599  00103C  D002               	bra	u15
   600  00103E  9EF2               	bcf	intcon,7,c	;volatile
   601  001040  D001               	bra	u16
   602  001042                     u15:
   603  001042  8EF2               	bsf	intcon,7,c	;volatile
   604  001044                     u16:
   605                           
   606                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   607  001044  3802               	swapf	lcdNibble@data,w,c
   608  001046  0BF0               	andlw	240
   609  001048  6E02               	movwf	lcdNibble@data,c
   610                           
   611                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   612  00104A  5002               	movf	lcdNibble@data,w,c
   613  00104C  0BF0               	andlw	240
   614  00104E  6E01               	movwf	lcdNibble@temp,c
   615                           
   616                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   617  001050  508C               	movf	3980,w,c	;volatile
   618  001052  0B0F               	andlw	15
   619  001054  6E8C               	movwf	3980,c	;volatile
   620                           
   621                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   622  001056  5001               	movf	lcdNibble@temp,w,c
   623  001058  108C               	iorwf	3980,w,c	;volatile
   624  00105A  6E8C               	movwf	3980,c	;volatile
   625                           
   626                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   627  00105C  0E00               	movlw	0
   628  00105E  BEF2               	btfsc	intcon,7,c	;volatile
   629  001060  0E01               	movlw	1
   630  001062  6E06               	movwf	lcd@LCDinterruptState,c
   631  001064  9EF2               	bcf	intcon,7,c	;volatile
   632  001066  868C               	bsf	3980,3,c	;volatile
   633  001068  0E53               	movlw	83
   634  00106A                     u177:
   635  00106A  2EE8               	decfsz	wreg,f,c
   636  00106C  D7FE               	bra	u177
   637  00106E  F000               	nop	
   638  001070  968C               	bcf	3980,3,c	;volatile
   639  001072  0EC8               	movlw	200
   640  001074                     u187:
   641  001074  D000               	nop2	
   642  001076  2EE8               	decfsz	wreg,f,c
   643  001078  D7FD               	bra	u187
   644  00107A  B006               	btfsc	lcd@LCDinterruptState,0,c
   645  00107C  D002               	bra	u25
   646  00107E  9EF2               	bcf	intcon,7,c	;volatile
   647  001080  D001               	bra	u26
   648  001082                     u25:
   649  001082  8EF2               	bsf	intcon,7,c	;volatile
   650  001084                     u26:
   651  001084  0012               	return		;funcret
   652  001086                     __end_of_lcdNibble:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           intcon	equ	0xFF2
   657                           wreg	equ	0xFE8
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           intcon	equ	0xFF2
   661                           wreg	equ	0xFE8
   662                           
   663                           	psect	rparam
   664  0000                     tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           intcon	equ	0xFF2
   667                           wreg	equ	0xFE8


Data Sizes:
    Strings     0
    Constant    6
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      5       8
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initLCD
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     270
                                              4 COMRAM     1     1      0
                            _initLCD
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _putch
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F      5       8       1        6.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       8      34        0.0%
DATA                 0      0       8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 13 17:08:02 2018

                      _i 0007                       l58 10BC                       u30 10C4  
                     u15 1042                       u16 1044                       u25 1082  
                     u26 1084              __CFG_CPD$ON 000000                       u36 10C6  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             __CFG_CPB$OFF 000000  
                    u107 10D6                      u117 1154                      u127 10EE  
                    u137 1122                      u147 1168                      u157 102A  
                    u167 1034                      u177 106A                      u187 1074  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 1086  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000         __end_of_LCD_LEFT 1002                    ?_main 0001  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 1170           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 1134           __CFG_EBTRB$OFF 000000  
                  _putch 1148        _LCDinterruptState 0008           __CFG_PBADEN$ON 000000  
        __initialization 1134             __end_of_main 10E8           __CFG_OSC$HSPLL 000000  
      __end_of_LCD_RIGHT 1003                   ??_main 0005            __activetblptr 000001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   ?_putch 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??_lcdInst 0003  
              ??_initLCD 0004             __mediumconst 0000                   tblptrh 000FF7  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 113A  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 115C  
     __size_of_lcdNibble 007E                  ??_putch 0003     lcd@LCDinterruptState 0006  
      __end_of_lcdNibble 1086                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 1000                  __pcinit 1134                  __ramtop 1000  
                _lcdInst 115C                  __ptext0 1086                  __ptext1 1148  
                __ptext2 10E8                  __ptext3 115C                  __ptext4 1008  
                _initLCD 10E8                _LCD_RIGHT 1002     end_of_initialization 113A  
  __end_of_LCD_SIZE_HORZ 1005    __end_of_LCD_SIZE_VERT 1004                _PORTAbits 000F80  
              _TRISAbits 000F92      start_initialization 1134         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0006        __CFG_CCP2MX$PORTC 000000                _lcdNibble 1008  
               ?_lcdInst 0001                 ?_initLCD 0001              __smallconst 1000  
         __size_of_putch 0014                 _LCD_LEFT 1001                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001            lcdNibble@data 0002  
          lcdNibble@temp 0001           _LCD_HORZ_LIMIT 1006                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000  
       __size_of_lcdInst 0014         __size_of_initLCD 004C   __end_of_LCD_HORZ_LIMIT 1007  
         _LCD_VERT_LIMIT 1005            __size_of_main 0062              ??_lcdNibble 0001  
              putch@data 0003               _INTCONbits 000FF2   __end_of_LCD_VERT_LIMIT 1006  
          _LCD_SIZE_HORZ 1004            _LCD_SIZE_VERT 1003              lcdInst@data 0003  
