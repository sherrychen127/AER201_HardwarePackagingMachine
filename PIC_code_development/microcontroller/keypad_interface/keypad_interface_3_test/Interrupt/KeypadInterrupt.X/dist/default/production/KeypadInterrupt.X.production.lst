

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 13:45:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	mediumconst
    77  00FEB8                     __pmediumconst:
    78                           	opt stack 0
    79  00FEB8  00                 	db	0
    80  00FEB9                     _keys:
    81                           	opt stack 0
    82  00FEB9  31                 	db	49
    83  00FEBA  32                 	db	50
    84  00FEBB  33                 	db	51
    85  00FEBC  41                 	db	65
    86  00FEBD  34                 	db	52
    87  00FEBE  35                 	db	53
    88  00FEBF  36                 	db	54
    89  00FEC0  42                 	db	66
    90  00FEC1  37                 	db	55
    91  00FEC2  38                 	db	56
    92  00FEC3  39                 	db	57
    93  00FEC4  43                 	db	67
    94  00FEC5  2A                 	db	42
    95  00FEC6  30                 	db	48
    96  00FEC7  23                 	db	35
    97  00FEC8  44                 	db	68
    98  00FEC9  00                 	db	0
    99  00FECA                     __end_of_keys:
   100                           	opt stack 0
   101  00FECA                     _dpowers:
   102                           	opt stack 0
   103  00FECA  0001               	dw	1
   104  00FECC  000A               	dw	10
   105  00FECE  0064               	dw	100
   106  00FED0  03E8               	dw	1000
   107  00FED2  2710               	dw	10000
   108  00FED4                     __end_of_dpowers:
   109                           	opt stack 0
   110  00FED4                     _LCD_LEFT:
   111                           	opt stack 0
   112  00FED4  00                 	db	0
   113  00FED5                     __end_of_LCD_LEFT:
   114                           	opt stack 0
   115  00FED5                     _LCD_RIGHT:
   116                           	opt stack 0
   117  00FED5  01                 	db	1
   118  00FED6                     __end_of_LCD_RIGHT:
   119                           	opt stack 0
   120  00FED6                     _LCD_SIZE_VERT:
   121                           	opt stack 0
   122  00FED6  02                 	db	2
   123  00FED7                     __end_of_LCD_SIZE_VERT:
   124                           	opt stack 0
   125  00FED7                     _LCD_SIZE_HORZ:
   126                           	opt stack 0
   127  00FED7  10                 	db	16
   128  00FED8                     __end_of_LCD_SIZE_HORZ:
   129                           	opt stack 0
   130  00FED8                     _LCD_VERT_LIMIT:
   131                           	opt stack 0
   132  00FED8  02                 	db	2
   133  00FED9                     __end_of_LCD_VERT_LIMIT:
   134                           	opt stack 0
   135  00FED9                     _LCD_HORZ_LIMIT:
   136                           	opt stack 0
   137  00FED9  28                 	db	40
   138  00FEDA                     __end_of_LCD_HORZ_LIMIT:
   139                           	opt stack 0
   140  00FEDA                     _strs:
   141                           	opt stack 0
   142  00FEDA  42                 	db	66
   143  00FEDB  00                 	db	0
   144  00FEDC  00                 	db	0
   145  00FEDD  00                 	db	0
   146  00FEDE  00                 	db	0
   147  00FEDF  4E                 	db	78
   148  00FEE0  00                 	db	0
   149  00FEE1  00                 	db	0
   150  00FEE2  00                 	db	0
   151  00FEE3  00                 	db	0
   152  00FEE4  53                 	db	83
   153  00FEE5  00                 	db	0
   154  00FEE6  00                 	db	0
   155  00FEE7  00                 	db	0
   156  00FEE8  00                 	db	0
   157  00FEE9  57                 	db	87
   158  00FEEA  00                 	db	0
   159  00FEEB  00                 	db	0
   160  00FEEC  00                 	db	0
   161  00FEED  00                 	db	0
   162  00FEEE  42                 	db	66
   163  00FEEF  4E                 	db	78
   164  00FEF0  00                 	db	0
   165  00FEF1  00                 	db	0
   166  00FEF2  00                 	db	0
   167  00FEF3  42                 	db	66
   168  00FEF4  53                 	db	83
   169  00FEF5  00                 	db	0
   170  00FEF6  00                 	db	0
   171  00FEF7  00                 	db	0
   172  00FEF8  42                 	db	66
   173  00FEF9  57                 	db	87
   174  00FEFA  00                 	db	0
   175  00FEFB  00                 	db	0
   176  00FEFC  00                 	db	0
   177  00FEFD  42                 	db	66
   178  00FEFE  42                 	db	66
   179  00FEFF  4E                 	db	78
   180  00FF00  00                 	db	0
   181  00FF01  00                 	db	0
   182  00FF02  42                 	db	66
   183  00FF03  42                 	db	66
   184  00FF04  53                 	db	83
   185  00FF05  00                 	db	0
   186  00FF06  00                 	db	0
   187  00FF07  42                 	db	66
   188  00FF08  42                 	db	66
   189  00FF09  57                 	db	87
   190  00FF0A  00                 	db	0
   191  00FF0B  00                 	db	0
   192  00FF0C  42                 	db	66
   193  00FF0D  4E                 	db	78
   194  00FF0E  57                 	db	87
   195  00FF0F  00                 	db	0
   196  00FF10  00                 	db	0
   197  00FF11  42                 	db	66
   198  00FF12  53                 	db	83
   199  00FF13  57                 	db	87
   200  00FF14  00                 	db	0
   201  00FF15  00                 	db	0
   202  00FF16  42                 	db	66
   203  00FF17  57                 	db	87
   204  00FF18  57                 	db	87
   205  00FF19  00                 	db	0
   206  00FF1A  00                 	db	0
   207  00FF1B  42                 	db	66
   208  00FF1C  4E                 	db	78
   209  00FF1D  57                 	db	87
   210  00FF1E  57                 	db	87
   211  00FF1F  00                 	db	0
   212  00FF20  42                 	db	66
   213  00FF21  53                 	db	83
   214  00FF22  57                 	db	87
   215  00FF23  57                 	db	87
   216  00FF24  00                 	db	0
   217  00FF25  42                 	db	66
   218  00FF26  42                 	db	66
   219  00FF27  53                 	db	83
   220  00FF28  57                 	db	87
   221  00FF29  00                 	db	0
   222  00FF2A  42                 	db	66
   223  00FF2B  42                 	db	66
   224  00FF2C  4E                 	db	78
   225  00FF2D  57                 	db	87
   226  00FF2E  00                 	db	0
   227  00FF2F  42                 	db	66
   228  00FF30  4E                 	db	78
   229  00FF31  4E                 	db	78
   230  00FF32  57                 	db	87
   231  00FF33  00                 	db	0
   232  00FF34  42                 	db	66
   233  00FF35  4E                 	db	78
   234  00FF36  4E                 	db	78
   235  00FF37  4E                 	db	78
   236  00FF38  00                 	db	0
   237  00FF39  42                 	db	66
   238  00FF3A  57                 	db	87
   239  00FF3B  57                 	db	87
   240  00FF3C  57                 	db	87
   241  00FF3D  00                 	db	0
   242  00FF3E                     __end_of_strs:
   243                           	opt stack 0
   244  0000                     _LATDbits	set	3980
   245  0000                     _PORTB	set	3969
   246  0000                     _INTCONbits	set	4082
   247  0000                     _ADCON1	set	4033
   248  0000                     _ADCON0	set	4034
   249  0000                     _TRISE	set	3990
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISA	set	3986
   254  0000                     _LATE	set	3981
   255  0000                     _LATD	set	3980
   256  0000                     _LATC	set	3979
   257  0000                     _LATB	set	3978
   258  0000                     _LATA	set	3977
   259  0000                     _INT1IF	set	32640
   260  0000                     _INT1IE	set	32643
   261  00FF3E                     STR_6:
   262  00FF3E  61                 	db	97	;'a'
   263  00FF3F  73                 	db	115	;'s'
   264  00FF40  73                 	db	115	;'s'
   265  00FF41  65                 	db	101	;'e'
   266  00FF42  6D                 	db	109	;'m'
   267  00FF43  62                 	db	98	;'b'
   268  00FF44  6C                 	db	108	;'l'
   269  00FF45  79                 	db	121	;'y'
   270  00FF46  20                 	db	32
   271  00FF47  73                 	db	115	;'s'
   272  00FF48  74                 	db	116	;'t'
   273  00FF49  65                 	db	101	;'e'
   274  00FF4A  70                 	db	112	;'p'
   275  00FF4B  3A                 	db	58	;':'
   276  00FF4C  25                 	db	37
   277  00FF4D  64                 	db	100	;'d'
   278  00FF4E  00                 	db	0
   279  00FF4F                     STR_9:
   280  00FF4F  57                 	db	87	;'W'
   281  00FF50  72                 	db	114	;'r'
   282  00FF51  6F                 	db	111	;'o'
   283  00FF52  6E                 	db	110	;'n'
   284  00FF53  67                 	db	103	;'g'
   285  00FF54  20                 	db	32
   286  00FF55  6E                 	db	110	;'n'
   287  00FF56  75                 	db	117	;'u'
   288  00FF57  6D                 	db	109	;'m'
   289  00FF58  62                 	db	98	;'b'
   290  00FF59  65                 	db	101	;'e'
   291  00FF5A  72                 	db	114	;'r'
   292  00FF5B  21                 	db	33
   293  00FF5C  20                 	db	32
   294  00FF5D  00                 	db	0
   295  00FF5E                     STR_1:
   296  00FF5E  61                 	db	97	;'a'
   297  00FF5F  73                 	db	115	;'s'
   298  00FF60  73                 	db	115	;'s'
   299  00FF61  65                 	db	101	;'e'
   300  00FF62  6D                 	db	109	;'m'
   301  00FF63  62                 	db	98	;'b'
   302  00FF64  6C                 	db	108	;'l'
   303  00FF65  79                 	db	121	;'y'
   304  00FF66  20                 	db	32
   305  00FF67  73                 	db	115	;'s'
   306  00FF68  74                 	db	116	;'t'
   307  00FF69  65                 	db	101	;'e'
   308  00FF6A  70                 	db	112	;'p'
   309  00FF6B  3A                 	db	58	;':'
   310  00FF6C  00                 	db	0
   311  00FF6D                     STR_2:
   312  00FF6D  66                 	db	102	;'f'
   313  00FF6E  61                 	db	97	;'a'
   314  00FF6F  73                 	db	115	;'s'
   315  00FF70  74                 	db	116	;'t'
   316  00FF71  65                 	db	101	;'e'
   317  00FF72  6E                 	db	110	;'n'
   318  00FF73  65                 	db	101	;'e'
   319  00FF74  72                 	db	114	;'r'
   320  00FF75  20                 	db	32
   321  00FF76  73                 	db	115	;'s'
   322  00FF77  65                 	db	101	;'e'
   323  00FF78  74                 	db	116	;'t'
   324  00FF79  3A                 	db	58	;':'
   325  00FF7A  00                 	db	0
   326  00FF7B                     STR_22:
   327  00FF7B  57                 	db	87	;'W'
   328  00FF7C  72                 	db	114	;'r'
   329  00FF7D  6F                 	db	111	;'o'
   330  00FF7E  6E                 	db	110	;'n'
   331  00FF7F  67                 	db	103	;'g'
   332  00FF80  20                 	db	32
   333  00FF81  69                 	db	105	;'i'
   334  00FF82  6E                 	db	110	;'n'
   335  00FF83  70                 	db	112	;'p'
   336  00FF84  75                 	db	117	;'u'
   337  00FF85  74                 	db	116	;'t'
   338  00FF86  00                 	db	0
   339  00FF87                     STR_17:
   340  00FF87  77                 	db	119	;'w'
   341  00FF88  72                 	db	114	;'r'
   342  00FF89  6F                 	db	111	;'o'
   343  00FF8A  6E                 	db	110	;'n'
   344  00FF8B  67                 	db	103	;'g'
   345  00FF8C  20                 	db	32
   346  00FF8D  73                 	db	115	;'s'
   347  00FF8E  65                 	db	101	;'e'
   348  00FF8F  74                 	db	116	;'t'
   349  00FF90  21                 	db	33
   350  00FF91  00                 	db	0
   351  00FF92                     STR_14:
   352  00FF92  63                 	db	99	;'c'
   353  00FF93  6F                 	db	111	;'o'
   354  00FF94  72                 	db	114	;'r'
   355  00FF95  72                 	db	114	;'r'
   356  00FF96  65                 	db	101	;'e'
   357  00FF97  63                 	db	99	;'c'
   358  00FF98  74                 	db	116	;'t'
   359  00FF99  21                 	db	33
   360  00FF9A  00                 	db	0
   361  00FF9B                     STR_23:
   362  00FF9B  54                 	db	84	;'T'
   363  00FF9C  4F                 	db	79	;'O'
   364  00FF9D  4F                 	db	79	;'O'
   365  00FF9E  20                 	db	32
   366  00FF9F  4D                 	db	77	;'M'
   367  00FFA0  41                 	db	65	;'A'
   368  00FFA1  4E                 	db	78	;'N'
   369  00FFA2  59                 	db	89	;'Y'
   370  00FFA3  00                 	db	0
   371  00FFA4                     STR_4:
   372  00FFA4  6E                 	db	110	;'n'
   373  00FFA5  75                 	db	117	;'u'
   374  00FFA6  6D                 	db	109	;'m'
   375  00FFA7  62                 	db	98	;'b'
   376  00FFA8  65                 	db	101	;'e'
   377  00FFA9  72                 	db	114	;'r'
   378  00FFAA  3A                 	db	58	;':'
   379  00FFAB  00                 	db	0
   380  00FFAC                     STR_45:
   381  00FFAC  28                 	db	40
   382  00FFAD  6E                 	db	110	;'n'
   383  00FFAE  75                 	db	117	;'u'
   384  00FFAF  6C                 	db	108	;'l'
   385  00FFB0  6C                 	db	108	;'l'
   386  00FFB1  29                 	db	41
   387  00FFB2  00                 	db	0
   388  00FFB3                     STR_20:
   389  00FFB3  77                 	db	119	;'w'
   390  00FFB4  72                 	db	114	;'r'
   391  00FFB5  6F                 	db	111	;'o'
   392  00FFB6  6E                 	db	110	;'n'
   393  00FFB7  67                 	db	103	;'g'
   394  00FFB8  21                 	db	33
   395  00FFB9  00                 	db	0
   396  00FFBA                     STR_5:
   397  00FFBA  44                 	db	68	;'D'
   398  00FFBB  6F                 	db	111	;'o'
   399  00FFBC  6E                 	db	110	;'n'
   400  00FFBD  65                 	db	101	;'e'
   401  00FFBE  21                 	db	33
   402  00FFBF  00                 	db	0
   403  00FFC0                     STR_24:
   404  00FFC0  6F                 	db	111	;'o'
   405  00FFC1  6B                 	db	107	;'k'
   406  00FFC2  61                 	db	97	;'a'
   407  00FFC3  79                 	db	121	;'y'
   408  00FFC4  21                 	db	33
   409  00FFC5  00                 	db	0
   410  00FFC6                     STR_43:
   411  00FFC6  42                 	db	66	;'B'
   412  00FFC7  4E                 	db	78	;'N'
   413  00FFC8  4E                 	db	78	;'N'
   414  00FFC9  4E                 	db	78	;'N'
   415  00FFCA  00                 	db	0
   416  00FFCB                     STR_41:
   417  00FFCB  42                 	db	66	;'B'
   418  00FFCC  42                 	db	66	;'B'
   419  00FFCD  4E                 	db	78	;'N'
   420  00FFCE  57                 	db	87	;'W'
   421  00FFCF  00                 	db	0
   422  00FFD0                     STR_42:
   423  00FFD0  42                 	db	66	;'B'
   424  00FFD1  4E                 	db	78	;'N'
   425  00FFD2  4E                 	db	78	;'N'
   426  00FFD3  57                 	db	87	;'W'
   427  00FFD4  00                 	db	0
   428  00FFD5                     STR_40:
   429  00FFD5  42                 	db	66	;'B'
   430  00FFD6  42                 	db	66	;'B'
   431  00FFD7  53                 	db	83	;'S'
   432  00FFD8  57                 	db	87	;'W'
   433  00FFD9  00                 	db	0
   434  00FFDA                     STR_38:
   435  00FFDA  42                 	db	66	;'B'
   436  00FFDB  4E                 	db	78	;'N'
   437  00FFDC  57                 	db	87	;'W'
   438  00FFDD  57                 	db	87	;'W'
   439  00FFDE  00                 	db	0
   440  00FFDF                     STR_39:
   441  00FFDF  42                 	db	66	;'B'
   442  00FFE0  53                 	db	83	;'S'
   443  00FFE1  57                 	db	87	;'W'
   444  00FFE2  57                 	db	87	;'W'
   445  00FFE3  00                 	db	0
   446  00FFE4                     STR_44:
   447  00FFE4  42                 	db	66	;'B'
   448  00FFE5  57                 	db	87	;'W'
   449  00FFE6  57                 	db	87	;'W'
   450  00FFE7  57                 	db	87	;'W'
   451  00FFE8  00                 	db	0
   452  00FFE9                     STR_32:
   453  00FFE9  42                 	db	66	;'B'
   454  00FFEA  42                 	db	66	;'B'
   455  00FFEB  4E                 	db	78	;'N'
   456  00FFEC  00                 	db	0
   457  00FFED                     STR_33:
   458  00FFED  42                 	db	66	;'B'
   459  00FFEE  42                 	db	66	;'B'
   460  00FFEF  53                 	db	83	;'S'
   461  00FFF0  00                 	db	0
   462  00FFF1                     STR_34:
   463  00FFF1  42                 	db	66	;'B'
   464  00FFF2  42                 	db	66	;'B'
   465  00FFF3  57                 	db	87	;'W'
   466  00FFF4  00                 	db	0
   467  00FFF5                     STR_37:
   468  00FFF5  42                 	db	66	;'B'
   469  00FFF6  57                 	db	87	;'W'
   470  00FFF7  57                 	db	87	;'W'
   471  00FFF8  00                 	db	0
   472  00FFF9                     STR_3:
   473  00FFF9  25                 	db	37
   474  00FFFA  73                 	db	115	;'s'
   475  00FFFB  00                 	db	0
   476  00FFFC                     STR_10:
   477  00FFFC  42                 	db	66	;'B'
   478  00FFFD  00                 	db	0
   479  0000                     
   480                           ; #config settings
   481  00FFFE  00                 	db	0	; dummy byte at the end
   482  0000                     
   483                           	psect	cinit
   484  001832                     __pcinit:
   485                           	opt stack 0
   486  001832                     start_initialization:
   487                           	opt stack 0
   488  001832                     __initialization:
   489                           	opt stack 0
   490                           
   491                           ; Clear objects allocated to BANK1 (200 bytes)
   492  001832  EE01  F000         	lfsr	0,__pbssBANK1
   493  001836  0EC8               	movlw	200
   494  001838                     clear_0:
   495  001838  6AEE               	clrf	postinc0,c
   496  00183A  06E8               	decf	wreg,f,c
   497  00183C  E1FD               	bnz	clear_0
   498                           
   499                           ; Clear objects allocated to BANK0 (65 bytes)
   500  00183E  EE00  F080         	lfsr	0,__pbssBANK0
   501  001842  0E41               	movlw	65
   502  001844                     clear_1:
   503  001844  6AEE               	clrf	postinc0,c
   504  001846  06E8               	decf	wreg,f,c
   505  001848  E1FD               	bnz	clear_1
   506                           
   507                           ; Clear objects allocated to COMRAM (35 bytes)
   508  00184A  EE00  F036         	lfsr	0,__pbssCOMRAM
   509  00184E  0E23               	movlw	35
   510  001850                     clear_2:
   511  001850  6AEE               	clrf	postinc0,c
   512  001852  06E8               	decf	wreg,f,c
   513  001854  E1FD               	bnz	clear_2
   514  001856                     end_of_initialization:
   515                           	opt stack 0
   516  001856                     __end_of__initialization:
   517                           	opt stack 0
   518  001856  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   519  001858  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   520  00185A  0100               	movlb	0
   521  00185C  EFFD  F006         	goto	_main	;jump to C main() function
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	bssCOMRAM
   526  000036                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000036                     _W:
   529                           	opt stack 0
   530  000036                     	ds	2
   531  000038                     _S:
   532                           	opt stack 0
   533  000038                     	ds	2
   534  00003A                     _N:
   535                           	opt stack 0
   536  00003A                     	ds	2
   537  00003C                     _B:
   538                           	opt stack 0
   539  00003C                     	ds	2
   540  00003E                     _prev_state:
   541                           	opt stack 0
   542  00003E                     	ds	2
   543  000040                     _total_number:
   544                           	opt stack 0
   545  000040                     	ds	2
   546  000042                     _valid:
   547                           	opt stack 0
   548  000042                     	ds	2
   549  000044                     _error:
   550                           	opt stack 0
   551  000044                     	ds	2
   552  000046                     _counter_step:
   553                           	opt stack 0
   554  000046                     	ds	2
   555  000048                     _counter:
   556                           	opt stack 0
   557  000048                     	ds	2
   558  00004A                     lcd@LCDinterruptState:
   559                           	opt stack 0
   560  00004A                     	ds	1
   561  00004B                     _temp:
   562                           	opt stack 0
   563  00004B                     	ds	1
   564  00004C                     	ds	1
   565  00004D                     _temp_set:
   566                           	opt stack 0
   567  00004D                     	ds	5
   568  000052                     _current_set2:
   569                           	opt stack 0
   570  000052                     	ds	5
   571  000057                     _number:
   572                           	opt stack 0
   573  000057                     	ds	2
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           	psect	bssBANK0
   578  000080                     __pbssBANK0:
   579                           	opt stack 0
   580  000080                     _final_number:
   581                           	opt stack 0
   582  000080                     	ds	16
   583  000090                     _assembly_step:
   584                           	opt stack 0
   585  000090                     	ds	2
   586  000092                     _state:
   587                           	opt stack 0
   588  000092                     	ds	2
   589  000094                     _final_set:
   590                           	opt stack 0
   591  000094                     	ds	40
   592  0000BC                     _current_set:
   593                           	opt stack 0
   594  0000BC                     	ds	5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	bssBANK1
   599  000100                     __pbssBANK1:
   600                           	opt stack 0
   601  000100                     _fastener:
   602                           	opt stack 0
   603  000100                     	ds	200
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackBANK0
   608  0000C1                     __pcstackBANK0:
   609                           	opt stack 0
   610  0000C1                     ?___wmul:
   611                           	opt stack 0
   612  0000C1                     ?___lwdiv:
   613                           	opt stack 0
   614  0000C1                     lcdNibble@temp:
   615                           	opt stack 0
   616  0000C1                     ___wmul@multiplier:
   617                           	opt stack 0
   618  0000C1                     ___lwdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  0000C1                     	ds	1
   623  0000C2                     lcdNibble@data:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x1
   627  0000C2                     	ds	1
   628  0000C3                     lcdInst@data:
   629                           	opt stack 0
   630  0000C3                     putch@data:
   631                           	opt stack 0
   632  0000C3                     ___wmul@multiplicand:
   633                           	opt stack 0
   634  0000C3                     ___lwdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2
   638  0000C3                     	ds	1
   639  0000C4                     ??_initLCD:
   640                           
   641                           ; 1 bytes @ 0x3
   642  0000C4                     	ds	1
   643  0000C5                     ___lwdiv@counter:
   644                           	opt stack 0
   645  0000C5                     ___wmul@product:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x4
   649  0000C5                     	ds	1
   650  0000C6                     ___lwdiv@quotient:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x5
   654  0000C6                     	ds	2
   655  0000C8                     ?___lwmod:
   656                           	opt stack 0
   657  0000C8                     ___lwmod@dividend:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x7
   661  0000C8                     	ds	2
   662  0000CA                     ___lwmod@divisor:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x9
   666  0000CA                     	ds	2
   667  0000CC                     ___lwmod@counter:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0xB
   671  0000CC                     	ds	1
   672  0000CD                     ?_printf:
   673                           	opt stack 0
   674  0000CD                     printf@f:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0xC
   678  0000CD                     	ds	4
   679  0000D1                     ??_printf:
   680                           
   681                           ; 1 bytes @ 0x10
   682  0000D1                     	ds	1
   683  0000D2                     printf@flag:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x11
   687  0000D2                     	ds	1
   688  0000D3                     printf@prec:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x12
   692  0000D3                     	ds	1
   693  0000D4                     printf@ap:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x13
   697  0000D4                     	ds	2
   698  0000D6                     printf@cp:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x15
   702  0000D6                     	ds	2
   703  0000D8                     printf@val:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x17
   707  0000D8                     	ds	2
   708  0000DA                     printf@c:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x19
   712  0000DA                     	ds	1
   713  0000DB                     ??_main:
   714                           
   715                           ; 1 bytes @ 0x1A
   716  0000DB                     	ds	2
   717  0000DD                     main@i:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x1C
   721  0000DD                     	ds	2
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           
   725                           	psect	cstackCOMRAM
   726  000001                     __pcstackCOMRAM:
   727                           	opt stack 0
   728  000001                     ?_check:
   729                           	opt stack 0
   730  000001                     ?_strcmp:
   731                           	opt stack 0
   732  000001                     ?i2___wmul:
   733                           	opt stack 0
   734  000001                     ?i2___lwdiv:
   735                           	opt stack 0
   736  000001                     i2lcdNibble@temp:
   737                           	opt stack 0
   738  000001                     strcat@to:
   739                           	opt stack 0
   740  000001                     strcmp@s1:
   741                           	opt stack 0
   742  000001                     i2___wmul@multiplier:
   743                           	opt stack 0
   744  000001                     i2___lwdiv@dividend:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x0
   748  000001                     	ds	1
   749  000002                     i2lcdNibble@data:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x1
   753  000002                     	ds	1
   754  000003                     i2lcdInst@data:
   755                           	opt stack 0
   756  000003                     i2putch@data:
   757                           	opt stack 0
   758  000003                     strcat@from:
   759                           	opt stack 0
   760  000003                     strcmp@s2:
   761                           	opt stack 0
   762  000003                     i2___wmul@multiplicand:
   763                           	opt stack 0
   764  000003                     i2___lwdiv@divisor:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x2
   768  000003                     	ds	1
   769  000004                     ??i2_initLCD:
   770                           
   771                           ; 1 bytes @ 0x3
   772  000004                     	ds	1
   773  000005                     ??_strcmp:
   774  000005                     strcat@cp:
   775                           	opt stack 0
   776  000005                     i2___wmul@product:
   777                           	opt stack 0
   778  000005                     i2___lwdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x4
   782  000005                     	ds	1
   783  000006                     strcmp@r:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x5
   787  000006                     	ds	1
   788  000007                     ??_is_valid:
   789  000007                     ?_strncmp:
   790                           	opt stack 0
   791  000007                     i2___lwdiv@counter:
   792                           	opt stack 0
   793  000007                     strcpy@to:
   794                           	opt stack 0
   795  000007                     strncmp@s1:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ?i2___lwmod:
   801                           	opt stack 0
   802  000008                     i2___lwmod@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x7
   806  000008                     	ds	1
   807  000009                     strcpy@from:
   808                           	opt stack 0
   809  000009                     strncmp@s2:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x8
   813  000009                     	ds	1
   814  00000A                     i2___lwmod@divisor:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x9
   818  00000A                     	ds	1
   819  00000B                     strcpy@cp:
   820                           	opt stack 0
   821  00000B                     strncmp@len:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0xA
   825  00000B                     	ds	1
   826  00000C                     i2___lwmod@counter:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0xB
   830  00000C                     	ds	1
   831  00000D                     ??_strncmp:
   832  00000D                     ?i2_printf:
   833                           	opt stack 0
   834  00000D                     i2printf@f:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0xC
   838  00000D                     	ds	4
   839  000011                     ??i2_printf:
   840                           
   841                           ; 1 bytes @ 0x10
   842  000011                     	ds	1
   843  000012                     i2printf@flag:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x11
   847  000012                     	ds	1
   848  000013                     i2printf@prec:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x12
   852  000013                     	ds	1
   853  000014                     i2printf@ap:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x13
   857  000014                     	ds	2
   858  000016                     i2printf@cp:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x15
   862  000016                     	ds	2
   863  000018                     i2printf@val:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x17
   867  000018                     	ds	2
   868  00001A                     i2printf@c:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x19
   872  00001A                     	ds	1
   873  00001B                     ??_interruptHandler:
   874                           
   875                           ; 1 bytes @ 0x1A
   876  00001B                     	ds	23
   877  000032                     interruptHandler@i:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x31
   881  000032                     	ds	2
   882  000034                     interruptHandler@temp:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x33
   886  000034                     	ds	1
   887  000035                     interruptHandler@keypress:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x34
   891  000035                     	ds	1
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           
   895 ;;
   896 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   897 ;;
   898 ;; *************** function _main *****************
   899 ;; Defined at:
   900 ;;		line 45 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  i               2   28[BANK0 ] int 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        4 bytes
   919 ;; Hardware stack levels required when called:    7
   920 ;; This function calls:
   921 ;;		___wmul
   922 ;;		_initLCD
   923 ;;		_lcdInst
   924 ;;		_printf
   925 ;; This function is called by:
   926 ;;		Startup code after reset
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text0
   931  000DFA                     __ptext0:
   932                           	opt stack 0
   933  000DFA                     _main:
   934                           	opt stack 24
   935                           
   936                           ;main.c: 51: LATA = 0x00;
   937                           
   938                           ;incstack = 0
   939  000DFA  0E00               	movlw	0
   940  000DFC  6E89               	movwf	3977,c	;volatile
   941                           
   942                           ;main.c: 52: LATB = 0x00;
   943  000DFE  0E00               	movlw	0
   944  000E00  6E8A               	movwf	3978,c	;volatile
   945                           
   946                           ;main.c: 53: LATC = 0x00;
   947  000E02  0E00               	movlw	0
   948  000E04  6E8B               	movwf	3979,c	;volatile
   949                           
   950                           ;main.c: 54: LATD = 0x00;
   951  000E06  0E00               	movlw	0
   952  000E08  6E8C               	movwf	3980,c	;volatile
   953                           
   954                           ;main.c: 55: LATE = 0x00;
   955  000E0A  0E00               	movlw	0
   956  000E0C  6E8D               	movwf	3981,c	;volatile
   957                           
   958                           ;main.c: 59: TRISA = 0xFF;
   959  000E0E  6892               	setf	3986,c	;volatile
   960                           
   961                           ;main.c: 60: TRISB = 0xFF;
   962  000E10  6893               	setf	3987,c	;volatile
   963                           
   964                           ;main.c: 61: TRISC = 0x00;
   965  000E12  0E00               	movlw	0
   966  000E14  6E94               	movwf	3988,c	;volatile
   967                           
   968                           ;main.c: 62: TRISD = 0x00;
   969  000E16  0E00               	movlw	0
   970  000E18  6E95               	movwf	3989,c	;volatile
   971                           
   972                           ;main.c: 63: TRISE = 0x00;
   973  000E1A  0E00               	movlw	0
   974  000E1C  6E96               	movwf	3990,c	;volatile
   975                           
   976                           ;main.c: 66: ADCON0 = 0x00;
   977  000E1E  0E00               	movlw	0
   978  000E20  6EC2               	movwf	4034,c	;volatile
   979                           
   980                           ;main.c: 67: ADCON1 = 0b00001111;
   981  000E22  0E0F               	movlw	15
   982  000E24  6EC1               	movwf	4033,c	;volatile
   983                           
   984                           ;main.c: 70: INT1IE = 1;
   985  000E26  86F0               	bsf	intcon3,3,c	;volatile
   986                           
   987                           ;main.c: 71: (INTCONbits.GIE = 1);
   988  000E28  8EF2               	bsf	intcon,7,c	;volatile
   989                           
   990                           ;main.c: 74: initLCD();
   991  000E2A  EC21  F00B         	call	_initLCD	;wreg free
   992  000E2E                     
   993                           ;main.c: 78: if (state == 0){
   994  000E2E  0100               	movlb	0	; () banked
   995  000E30  5192               	movf	_state& (0+255),w,b
   996  000E32  1193               	iorwf	(_state+1)& (0+255),w,b
   997  000E34  A4D8               	btfss	status,2,c
   998  000E36  D023               	goto	l118
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 80: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1002  000E38  0E80               	movlw	128
  1003  000E3A  EC63  F00C         	call	_lcdInst
  1004  000E3E  0E41               	movlw	65
  1005  000E40  0100               	movlb	0	; () banked
  1006  000E42  6FDB               	movwf	??_main& (0+255),b
  1007  000E44  0EEE               	movlw	238
  1008  000E46                     u2587:
  1009  000E46  2EE8               	decfsz	wreg,f,c
  1010  000E48  D7FE               	bra	u2587
  1011  000E4A  2FDB               	decfsz	??_main& (0+255),f,b
  1012  000E4C  D7FC               	bra	u2587
  1013  000E4E  F000               	nop	
  1014                           
  1015                           ;main.c: 81: printf("assembly step:");
  1016  000E50  0E5E               	movlw	low STR_1
  1017  000E52  0100               	movlb	0	; () banked
  1018  000E54  6FCD               	movwf	printf@f& (0+255),b
  1019  000E56  0EFF               	movlw	high STR_1
  1020  000E58  6FCE               	movwf	(printf@f+1)& (0+255),b
  1021  000E5A  EC18  F008         	call	_printf	;wreg free
  1022                           
  1023                           ;main.c: 83: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1024  000E5E  0E33               	movlw	51
  1025  000E60  0100               	movlb	0	; () banked
  1026  000E62  6FDC               	movwf	(??_main+1)& (0+255),b
  1027  000E64  0EBB               	movlw	187
  1028  000E66  6FDB               	movwf	??_main& (0+255),b
  1029  000E68  0EDF               	movlw	223
  1030  000E6A                     u2597:
  1031  000E6A  2EE8               	decfsz	wreg,f,c
  1032  000E6C  D7FE               	bra	u2597
  1033  000E6E  2FDB               	decfsz	??_main& (0+255),f,b
  1034  000E70  D7FC               	bra	u2597
  1035  000E72  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1036  000E74  D7FA               	bra	u2597
  1037  000E76  D000               	nop2	
  1038                           
  1039                           ;main.c: 84: lcdInst(0xC0);;
  1040  000E78  0EC0               	movlw	192
  1041  000E7A  EC63  F00C         	call	_lcdInst
  1042  000E7E                     l118:
  1043                           
  1044                           ;main.c: 88: }
  1045                           ;main.c: 90: if (state ==1){
  1046  000E7E  0100               	movlb	0	; () banked
  1047  000E80  0592               	decf	_state& (0+255),w,b
  1048  000E82  1193               	iorwf	(_state+1)& (0+255),w,b
  1049  000E84  A4D8               	btfss	status,2,c
  1050  000E86  D024               	goto	l119
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 91: initLCD();
  1054  000E88  EC21  F00B         	call	_initLCD	;wreg free
  1055                           
  1056                           ;main.c: 93: printf("fastener set:");
  1057  000E8C  0E6D               	movlw	low STR_2
  1058  000E8E  0100               	movlb	0	; () banked
  1059  000E90  6FCD               	movwf	printf@f& (0+255),b
  1060  000E92  0EFF               	movlw	high STR_2
  1061  000E94  6FCE               	movwf	(printf@f+1)& (0+255),b
  1062  000E96  EC18  F008         	call	_printf	;wreg free
  1063                           
  1064                           ;main.c: 96: lcdInst(0xC0);;
  1065  000E9A  0EC0               	movlw	192
  1066  000E9C  EC63  F00C         	call	_lcdInst
  1067                           
  1068                           ;main.c: 97: printf("%s",current_set);
  1069  000EA0  0EF9               	movlw	low STR_3
  1070  000EA2  0100               	movlb	0	; () banked
  1071  000EA4  6FCD               	movwf	printf@f& (0+255),b
  1072  000EA6  0EFF               	movlw	high STR_3
  1073  000EA8  6FCE               	movwf	(printf@f+1)& (0+255),b
  1074  000EAA  0EBC               	movlw	low _current_set
  1075  000EAC  6FCF               	movwf	(?_printf+2)& (0+255),b
  1076  000EAE  0E00               	movlw	high _current_set
  1077  000EB0  6FD0               	movwf	(?_printf+3)& (0+255),b
  1078  000EB2  EC18  F008         	call	_printf	;wreg free
  1079                           
  1080                           ;main.c: 98: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1081  000EB6  0E33               	movlw	51
  1082  000EB8  0100               	movlb	0	; () banked
  1083  000EBA  6FDC               	movwf	(??_main+1)& (0+255),b
  1084  000EBC  0EBB               	movlw	187
  1085  000EBE  6FDB               	movwf	??_main& (0+255),b
  1086  000EC0  0EDF               	movlw	223
  1087  000EC2                     u2607:
  1088  000EC2  2EE8               	decfsz	wreg,f,c
  1089  000EC4  D7FE               	bra	u2607
  1090  000EC6  2FDB               	decfsz	??_main& (0+255),f,b
  1091  000EC8  D7FC               	bra	u2607
  1092  000ECA  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1093  000ECC  D7FA               	bra	u2607
  1094  000ECE  D000               	nop2	
  1095  000ED0                     l119:
  1096                           
  1097                           ;main.c: 99: }
  1098                           ;main.c: 101: if (state == 2){
  1099  000ED0  0E02               	movlw	2
  1100  000ED2  0100               	movlb	0	; () banked
  1101  000ED4  1992               	xorwf	_state& (0+255),w,b
  1102  000ED6  1193               	iorwf	(_state+1)& (0+255),w,b
  1103  000ED8  A4D8               	btfss	status,2,c
  1104  000EDA  D016               	goto	l120
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;main.c: 102: initLCD();
  1108  000EDC  EC21  F00B         	call	_initLCD	;wreg free
  1109                           
  1110                           ;main.c: 104: printf("number:");
  1111  000EE0  0EA4               	movlw	low STR_4
  1112  000EE2  0100               	movlb	0	; () banked
  1113  000EE4  6FCD               	movwf	printf@f& (0+255),b
  1114  000EE6  0EFF               	movlw	high STR_4
  1115  000EE8  6FCE               	movwf	(printf@f+1)& (0+255),b
  1116  000EEA  EC18  F008         	call	_printf	;wreg free
  1117                           
  1118                           ;main.c: 106: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1119  000EEE  0E33               	movlw	51
  1120  000EF0  0100               	movlb	0	; () banked
  1121  000EF2  6FDC               	movwf	(??_main+1)& (0+255),b
  1122  000EF4  0EBB               	movlw	187
  1123  000EF6  6FDB               	movwf	??_main& (0+255),b
  1124  000EF8  0EDF               	movlw	223
  1125  000EFA                     u2617:
  1126  000EFA  2EE8               	decfsz	wreg,f,c
  1127  000EFC  D7FE               	bra	u2617
  1128  000EFE  2FDB               	decfsz	??_main& (0+255),f,b
  1129  000F00  D7FC               	bra	u2617
  1130  000F02  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1131  000F04  D7FA               	bra	u2617
  1132  000F06  D000               	nop2	
  1133  000F08                     l120:
  1134                           
  1135                           ;main.c: 107: }
  1136                           ;main.c: 109: if (state == 3){
  1137  000F08  0E03               	movlw	3
  1138  000F0A  0100               	movlb	0	; () banked
  1139  000F0C  1992               	xorwf	_state& (0+255),w,b
  1140  000F0E  1193               	iorwf	(_state+1)& (0+255),w,b
  1141  000F10  A4D8               	btfss	status,2,c
  1142  000F12  D78D               	goto	l117
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;main.c: 110: initLCD();
  1146  000F14  EC21  F00B         	call	_initLCD	;wreg free
  1147                           
  1148                           ;main.c: 112: printf("Done!");
  1149  000F18  0EBA               	movlw	low STR_5
  1150  000F1A  0100               	movlb	0	; () banked
  1151  000F1C  6FCD               	movwf	printf@f& (0+255),b
  1152  000F1E  0EFF               	movlw	high STR_5
  1153  000F20  6FCE               	movwf	(printf@f+1)& (0+255),b
  1154  000F22  EC18  F008         	call	_printf	;wreg free
  1155                           
  1156                           ;main.c: 113: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1157  000F26  0E66               	movlw	102
  1158  000F28  0100               	movlb	0	; () banked
  1159  000F2A  6FDC               	movwf	(??_main+1)& (0+255),b
  1160  000F2C  0E76               	movlw	118
  1161  000F2E  6FDB               	movwf	??_main& (0+255),b
  1162  000F30  0EC1               	movlw	193
  1163  000F32                     u2627:
  1164  000F32  2EE8               	decfsz	wreg,f,c
  1165  000F34  D7FE               	bra	u2627
  1166  000F36  2FDB               	decfsz	??_main& (0+255),f,b
  1167  000F38  D7FC               	bra	u2627
  1168  000F3A  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1169  000F3C  D7FA               	bra	u2627
  1170                           
  1171                           ;main.c: 114: initLCD();
  1172  000F3E  EC21  F00B         	call	_initLCD	;wreg free
  1173                           
  1174                           ;main.c: 115: printf("assembly step:%d",assembly_step);
  1175  000F42  0E3E               	movlw	low STR_6
  1176  000F44  0100               	movlb	0	; () banked
  1177  000F46  6FCD               	movwf	printf@f& (0+255),b
  1178  000F48  0EFF               	movlw	high STR_6
  1179  000F4A  6FCE               	movwf	(printf@f+1)& (0+255),b
  1180  000F4C  C090  F0CF         	movff	_assembly_step,?_printf+2
  1181  000F50  C091  F0D0         	movff	_assembly_step+1,?_printf+3
  1182  000F54  EC18  F008         	call	_printf	;wreg free
  1183                           
  1184                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1185  000F58  0E33               	movlw	51
  1186  000F5A  0100               	movlb	0	; () banked
  1187  000F5C  6FDC               	movwf	(??_main+1)& (0+255),b
  1188  000F5E  0EBB               	movlw	187
  1189  000F60  6FDB               	movwf	??_main& (0+255),b
  1190  000F62  0EDF               	movlw	223
  1191  000F64                     u2637:
  1192  000F64  2EE8               	decfsz	wreg,f,c
  1193  000F66  D7FE               	bra	u2637
  1194  000F68  2FDB               	decfsz	??_main& (0+255),f,b
  1195  000F6A  D7FC               	bra	u2637
  1196  000F6C  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1197  000F6E  D7FA               	bra	u2637
  1198  000F70  D000               	nop2	
  1199                           
  1200                           ;main.c: 117: for (int i=0; i<assembly_step; i++){
  1201  000F72  0E00               	movlw	0
  1202  000F74  0100               	movlb	0	; () banked
  1203  000F76  6FDE               	movwf	(main@i+1)& (0+255),b
  1204  000F78  0E00               	movlw	0
  1205  000F7A  6FDD               	movwf	main@i& (0+255),b
  1206  000F7C  D04E               	goto	l122
  1207  000F7E                     
  1208                           ; BSR set to: 0
  1209                           ;main.c: 119: initLCD();
  1210                           
  1211                           ; BSR set to: 0
  1212  000F7E  EC21  F00B         	call	_initLCD	;wreg free
  1213                           
  1214                           ;main.c: 121: printf("%s", final_set[i]);
  1215  000F82  0EF9               	movlw	low STR_3
  1216  000F84  0100               	movlb	0	; () banked
  1217  000F86  6FCD               	movwf	printf@f& (0+255),b
  1218  000F88  0EFF               	movlw	high STR_3
  1219  000F8A  6FCE               	movwf	(printf@f+1)& (0+255),b
  1220  000F8C  C0DD  F0C1         	movff	main@i,___wmul@multiplier
  1221  000F90  C0DE  F0C2         	movff	main@i+1,___wmul@multiplier+1
  1222  000F94  0E00               	movlw	0
  1223  000F96  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1224  000F98  0E05               	movlw	5
  1225  000F9A  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  1226  000F9C  EC30  F00C         	call	___wmul	;wreg free
  1227  000FA0  0E94               	movlw	low _final_set
  1228  000FA2  0100               	movlb	0	; () banked
  1229  000FA4  25C1               	addwf	?___wmul& (0+255),w,b
  1230  000FA6  6FCF               	movwf	(?_printf+2)& (0+255),b
  1231  000FA8  0E00               	movlw	high _final_set
  1232  000FAA  21C2               	addwfc	(?___wmul+1)& (0+255),w,b
  1233  000FAC  6FD0               	movwf	(?_printf+3)& (0+255),b
  1234  000FAE  EC18  F008         	call	_printf	;wreg free
  1235                           
  1236                           ;main.c: 122: printf("%d",final_number[i]);
  1237  000FB2  0E4C               	movlw	low (STR_6+14)
  1238  000FB4  0100               	movlb	0	; () banked
  1239  000FB6  6FCD               	movwf	printf@f& (0+255),b
  1240  000FB8  0EFF               	movlw	high (STR_6+14)
  1241  000FBA  6FCE               	movwf	(printf@f+1)& (0+255),b
  1242  000FBC  90D8               	bcf	status,0,c
  1243  000FBE  35DD               	rlcf	main@i& (0+255),w,b
  1244  000FC0  6ED9               	movwf	fsr2l,c
  1245  000FC2  35DE               	rlcf	(main@i+1)& (0+255),w,b
  1246  000FC4  6EDA               	movwf	fsr2h,c
  1247  000FC6  0E80               	movlw	low _final_number
  1248  000FC8  26D9               	addwf	fsr2l,f,c
  1249  000FCA  0E00               	movlw	high _final_number
  1250  000FCC  22DA               	addwfc	fsr2h,f,c
  1251  000FCE  CFDE F0CF          	movff	postinc2,?_printf+2
  1252  000FD2  CFDD F0D0          	movff	postdec2,?_printf+3
  1253  000FD6  EC18  F008         	call	_printf	;wreg free
  1254                           
  1255                           ;main.c: 123: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1256  000FDA  0E33               	movlw	51
  1257  000FDC  0100               	movlb	0	; () banked
  1258  000FDE  6FDC               	movwf	(??_main+1)& (0+255),b
  1259  000FE0  0EBB               	movlw	187
  1260  000FE2  6FDB               	movwf	??_main& (0+255),b
  1261  000FE4  0EDF               	movlw	223
  1262  000FE6                     u2647:
  1263  000FE6  2EE8               	decfsz	wreg,f,c
  1264  000FE8  D7FE               	bra	u2647
  1265  000FEA  2FDB               	decfsz	??_main& (0+255),f,b
  1266  000FEC  D7FC               	bra	u2647
  1267  000FEE  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1268  000FF0  D7FA               	bra	u2647
  1269  000FF2  D000               	nop2	
  1270                           
  1271                           ;main.c: 124: lcdInst(0xC0);;
  1272  000FF4  0EC0               	movlw	192
  1273  000FF6  EC63  F00C         	call	_lcdInst
  1274                           
  1275                           ;main.c: 128: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1276  000FFA  0E33               	movlw	51
  1277  000FFC  0100               	movlb	0	; () banked
  1278  000FFE  6FDC               	movwf	(??_main+1)& (0+255),b
  1279  001000  0EBB               	movlw	187
  1280  001002  6FDB               	movwf	??_main& (0+255),b
  1281  001004  0EDF               	movlw	223
  1282  001006                     u2657:
  1283  001006  2EE8               	decfsz	wreg,f,c
  1284  001008  D7FE               	bra	u2657
  1285  00100A  2FDB               	decfsz	??_main& (0+255),f,b
  1286  00100C  D7FC               	bra	u2657
  1287  00100E  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1288  001010  D7FA               	bra	u2657
  1289  001012  D000               	nop2	
  1290  001014  0100               	movlb	0	; () banked
  1291  001016  4BDD               	infsnz	main@i& (0+255),f,b
  1292  001018  2BDE               	incf	(main@i+1)& (0+255),f,b
  1293  00101A                     l122:
  1294                           
  1295                           ; BSR set to: 0
  1296  00101A  5190               	movf	_assembly_step& (0+255),w,b
  1297  00101C  5DDD               	subwf	main@i& (0+255),w,b
  1298  00101E  51DE               	movf	(main@i+1)& (0+255),w,b
  1299  001020  0A80               	xorlw	128
  1300  001022  6FDB               	movwf	??_main& (0+255),b
  1301  001024  5191               	movf	(_assembly_step+1)& (0+255),w,b
  1302  001026  0A80               	xorlw	128
  1303  001028  59DB               	subwfb	??_main& (0+255),w,b
  1304  00102A  B0D8               	btfsc	status,0,c
  1305  00102C  D700               	goto	l117
  1306  00102E  D7A7               	goto	l123
  1307  001030                     __end_of_main:
  1308                           	opt stack 0
  1309                           intcon	equ	0xFF2
  1310                           intcon3	equ	0xFF0
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postinc2	equ	0xFDE
  1314                           postdec2	equ	0xFDD
  1315                           fsr2h	equ	0xFDA
  1316                           fsr2l	equ	0xFD9
  1317                           status	equ	0xFD8
  1318                           
  1319 ;; *************** function _printf *****************
  1320 ;; Defined at:
  1321 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1324 ;;		 -> STR_24(6), STR_23(9), STR_22(12), STR_20(7), 
  1325 ;;		 -> STR_18(3), STR_17(11), STR_15(3), STR_14(9), 
  1326 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  1327 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  1328 ;;		 -> STR_1(15), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  tmpval          4    0        struct .
  1331 ;;  val             2   23[BANK0 ] unsigned int 
  1332 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  1333 ;;		 -> STR_45(7), final_set(40), current_set(5), 
  1334 ;;  ap              2   19[BANK0 ] PTR void [1]
  1335 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1336 ;;  len             2    0        unsigned int 
  1337 ;;  c               1   25[BANK0 ] char 
  1338 ;;  prec            1   18[BANK0 ] char 
  1339 ;;  flag            1   17[BANK0 ] unsigned char 
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  2   12[BANK0 ] int 
  1342 ;; Registers used:
  1343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;Total ram usage:       14 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    6
  1356 ;; This function calls:
  1357 ;;		___lwdiv
  1358 ;;		___lwmod
  1359 ;;		_putch
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text1
  1366  001030                     __ptext1:
  1367                           	opt stack 0
  1368  001030                     _printf:
  1369                           	opt stack 24
  1370                           
  1371                           ;doprnt.c: 466: va_list ap;
  1372                           ;doprnt.c: 499: signed char c;
  1373                           ;doprnt.c: 506: signed char prec;
  1374                           ;doprnt.c: 508: unsigned char flag;
  1375                           ;doprnt.c: 523: union {
  1376                           ;doprnt.c: 524: unsigned long vd;
  1377                           ;doprnt.c: 525: double integ;
  1378                           ;doprnt.c: 526: } tmpval;
  1379                           ;doprnt.c: 528: unsigned int val;
  1380                           ;doprnt.c: 529: unsigned len;
  1381                           ;doprnt.c: 530: const char * cp;
  1382                           ;doprnt.c: 533: *ap = __va_start();
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;incstack = 0
  1386  001030  0ECF               	movlw	low (?_printf+2)
  1387  001032  0100               	movlb	0	; () banked
  1388  001034  6FD4               	movwf	printf@ap& (0+255),b
  1389  001036  0E00               	movlw	high (?_printf+2)
  1390  001038  6FD5               	movwf	(printf@ap+1)& (0+255),b
  1391                           
  1392                           ;doprnt.c: 536: while(c = *f++) {
  1393  00103A  D0D0               	goto	u2450
  1394  00103C                     
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 538: if(c != '%')
  1397                           
  1398                           ; BSR set to: 0
  1399  00103C  0E25               	movlw	37
  1400  00103E  19DA               	xorwf	printf@c& (0+255),w,b
  1401  001040  B4D8               	btfsc	status,2,c
  1402  001042  D004               	goto	l290
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;doprnt.c: 540: {
  1406                           ;doprnt.c: 541: (putch(c) );
  1407  001044  51DA               	movf	printf@c& (0+255),w,b
  1408  001046  EC57  F00C         	call	_putch
  1409                           
  1410                           ;doprnt.c: 542: continue;
  1411  00104A  D0C8               	goto	u2450
  1412  00104C                     l290:
  1413                           
  1414                           ;doprnt.c: 543: }
  1415                           ;doprnt.c: 548: flag = 0;
  1416  00104C  0E00               	movlw	0
  1417  00104E  0100               	movlb	0	; () banked
  1418  001050  6FD2               	movwf	printf@flag& (0+255),b
  1419                           
  1420                           ;doprnt.c: 635: switch(c = *f++) {
  1421  001052  D040               	goto	l291
  1422  001054                     
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1425                           
  1426                           ; BSR set to: 0
  1427  001054  C0D4  FFD9         	movff	printf@ap,fsr2l
  1428  001058  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1429  00105C  CFDE F0D6          	movff	postinc2,printf@cp
  1430  001060  CFDD F0D7          	movff	postdec2,printf@cp+1
  1431                           
  1432                           ; BSR set to: 0
  1433  001064  0E02               	movlw	2
  1434  001066  27D4               	addwf	printf@ap& (0+255),f,b
  1435  001068  0E00               	movlw	0
  1436  00106A  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 740: if(!cp)
  1440  00106C  51D6               	movf	printf@cp& (0+255),w,b
  1441  00106E  11D7               	iorwf	(printf@cp+1)& (0+255),w,b
  1442  001070  A4D8               	btfss	status,2,c
  1443  001072  D01B               	goto	l299
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 741: cp = "(null)";
  1447  001074  0EAC               	movlw	low STR_45
  1448  001076  6FD6               	movwf	printf@cp& (0+255),b
  1449  001078  0EFF               	movlw	high STR_45
  1450  00107A  6FD7               	movwf	(printf@cp+1)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 777: while(*cp)
  1454  00107C  D016               	goto	l299
  1455  00107E                     
  1456                           ;doprnt.c: 778: (putch(*cp++) );
  1457                           
  1458                           ; BSR set to: 0
  1459  00107E  C0D6  FFF6         	movff	printf@cp,tblptrl
  1460  001082  C0D7  FFF7         	movff	printf@cp+1,tblptrh
  1461  001086  0E00               	movlw	low (__mediumconst shr (0+16))
  1462  001088  6EF8               	movwf	tblptru,c
  1463  00108A  0E0F               	movlw	(high __ramtop+-1)
  1464  00108C  64F7               	cpfsgt	tblptrh,c
  1465  00108E  D003               	bra	u2377
  1466  001090  0008               	tblrd		*
  1467  001092  50F5               	movf	tablat,w,c
  1468  001094  D005               	bra	u2370
  1469  001096                     u2377:
  1470  001096  CFF6 FFE9          	movff	tblptrl,fsr0l
  1471  00109A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1472  00109E  50EF               	movf	indf0,w,c
  1473  0010A0                     u2370:
  1474  0010A0  EC57  F00C         	call	_putch
  1475  0010A4  0100               	movlb	0	; () banked
  1476  0010A6  4BD6               	infsnz	printf@cp& (0+255),f,b
  1477  0010A8  2BD7               	incf	(printf@cp+1)& (0+255),f,b
  1478  0010AA                     l299:
  1479                           
  1480                           ; BSR set to: 0
  1481                           
  1482                           ; BSR set to: 0
  1483  0010AA  C0D6  FFF6         	movff	printf@cp,tblptrl
  1484  0010AE  C0D7  FFF7         	movff	printf@cp+1,tblptrh
  1485  0010B2  0E00               	movlw	low (__mediumconst shr (0+16))
  1486  0010B4  6EF8               	movwf	tblptru,c
  1487  0010B6  0E0F               	movlw	(high __ramtop+-1)
  1488  0010B8  64F7               	cpfsgt	tblptrh,c
  1489  0010BA  D003               	bra	u2387
  1490  0010BC  0008               	tblrd		*
  1491  0010BE  50F5               	movf	tablat,w,c
  1492  0010C0  D005               	bra	u2380
  1493  0010C2                     u2387:
  1494  0010C2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1495  0010C6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1496  0010CA  50EF               	movf	indf0,w,c
  1497  0010CC                     u2380:
  1498  0010CC  0900               	iorlw	0
  1499  0010CE  B4D8               	btfsc	status,2,c
  1500  0010D0  D085               	goto	u2450
  1501  0010D2  D7D5               	goto	l300
  1502  0010D4                     l291:
  1503  0010D4  C0CD  FFF6         	movff	printf@f,tblptrl
  1504  0010D8  C0CE  FFF7         	movff	printf@f+1,tblptrh
  1505  0010DC  0100               	movlb	0	; () banked
  1506  0010DE  4BCD               	infsnz	printf@f& (0+255),f,b
  1507  0010E0  2BCE               	incf	(printf@f+1)& (0+255),f,b
  1508  0010E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1509  0010E2  6AF8               	clrf	tblptru,c
  1510  0010E4                     	endif
  1511  0010E4                     	if	0	;tblptru may be non-zero
  1512  0010E4                     	endif
  1513  0010E4  0008               	tblrd		*
  1514  0010E6  CFF5 F0DA          	movff	tablat,printf@c
  1515  0010EA  51DA               	movf	printf@c& (0+255),w,b
  1516                           
  1517                           ; Switch size 1, requested type "space"
  1518                           ; Number of cases is 4, Range of values is 0 to 115
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte           13     7 (average)
  1522                           ;	Chosen strategy is simple_byte
  1523  0010EC  0A00               	xorlw	0	; case 0
  1524  0010EE  B4D8               	btfsc	status,2,c
  1525  0010F0  0012               	return	
  1526  0010F2  0A64               	xorlw	100	; case 100
  1527  0010F4  B4D8               	btfsc	status,2,c
  1528  0010F6  D007               	goto	l296
  1529  0010F8  0A0D               	xorlw	13	; case 105
  1530  0010FA  B4D8               	btfsc	status,2,c
  1531  0010FC  D004               	goto	l296
  1532  0010FE  0A1A               	xorlw	26	; case 115
  1533  001100  B4D8               	btfsc	status,2,c
  1534  001102  D7A8               	goto	l297
  1535  001104  D06B               	goto	u2450
  1536  001106                     l296:
  1537                           
  1538                           ;doprnt.c: 1253: {
  1539                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1540                           
  1541                           ; BSR set to: 0
  1542  001106  C0D4  FFD9         	movff	printf@ap,fsr2l
  1543  00110A  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1544  00110E  CFDE F0D8          	movff	postinc2,printf@val
  1545  001112  CFDD F0D9          	movff	postdec2,printf@val+1
  1546  001116  0E02               	movlw	2
  1547  001118  0100               	movlb	0	; () banked
  1548  00111A  27D4               	addwf	printf@ap& (0+255),f,b
  1549  00111C  0E00               	movlw	0
  1550  00111E  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;doprnt.c: 1261: if((int)val < 0) {
  1554  001120  AFD9               	btfss	(printf@val+1)& (0+255),7,b
  1555  001122  D006               	goto	l303
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;doprnt.c: 1262: flag |= 0x03;
  1559  001124  0E03               	movlw	3
  1560  001126  13D2               	iorwf	printf@flag& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 1263: val = -val;
  1564  001128  6DD8               	negf	printf@val& (0+255),b
  1565  00112A  1FD9               	comf	(printf@val+1)& (0+255),f,b
  1566  00112C  B0D8               	btfsc	status,0,c
  1567  00112E  2BD9               	incf	(printf@val+1)& (0+255),f,b
  1568  001130                     l303:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;doprnt.c: 1264: }
  1572                           ;doprnt.c: 1266: }
  1573                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1574                           
  1575                           ; BSR set to: 0
  1576  001130  0E01               	movlw	1
  1577  001132  6FDA               	movwf	printf@c& (0+255),b
  1578  001134                     l2992:
  1579                           
  1580                           ; BSR set to: 0
  1581  001134  0E05               	movlw	5
  1582  001136  19DA               	xorwf	printf@c& (0+255),w,b
  1583  001138  B4D8               	btfsc	status,2,c
  1584  00113A  D015               	goto	u2430
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;doprnt.c: 1306: if(val < dpowers[c])
  1588                           
  1589                           ; BSR set to: 0
  1590                           
  1591                           ; BSR set to: 0
  1592  00113C  51DA               	movf	printf@c& (0+255),w,b
  1593  00113E  0D02               	mullw	2
  1594  001140  0ECA               	movlw	low _dpowers
  1595  001142  24F3               	addwf	prodl,w,c
  1596  001144  6EF6               	movwf	tblptrl,c
  1597  001146  0EFE               	movlw	high _dpowers
  1598  001148  20F4               	addwfc	prodh,w,c
  1599  00114A  6EF7               	movwf	tblptrh,c
  1600  00114C                     	if	1	;There are 3 active tblptr bytes
  1601  00114C  6AF8               	clrf	tblptru,c
  1602  00114E  0E00               	movlw	low (__mediumconst shr (0+16))
  1603  001150  22F8               	addwfc	tblptru,f,c
  1604  001152                     	endif
  1605  001152  0009               	tblrd		*+
  1606  001154  50F5               	movf	tablat,w,c
  1607  001156  5DD8               	subwf	printf@val& (0+255),w,b
  1608  001158  0009               	tblrd		*+
  1609  00115A  50F5               	movf	tablat,w,c
  1610  00115C  59D9               	subwfb	(printf@val+1)& (0+255),w,b
  1611  00115E  A0D8               	btfss	status,0,c
  1612  001160  D002               	goto	u2430
  1613                           
  1614                           ; BSR set to: 0
  1615                           
  1616                           ; BSR set to: 0
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;doprnt.c: 1307: break;
  1620  001162  2BDA               	incf	printf@c& (0+255),f,b
  1621  001164  D7E7               	goto	l2992
  1622  001166                     u2430:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;doprnt.c: 1422: {
  1626                           ;doprnt.c: 1438: if(flag & 0x03)
  1627                           
  1628                           ; BSR set to: 0
  1629  001166  C0D2  F0D1         	movff	printf@flag,??_printf
  1630  00116A  0E03               	movlw	3
  1631  00116C  17D1               	andwf	??_printf& (0+255),f,b
  1632  00116E  B4D8               	btfsc	status,2,c
  1633  001170  D003               	goto	l307
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 1439: (putch('-') );
  1637  001172  0E2D               	movlw	45
  1638  001174  EC57  F00C         	call	_putch
  1639  001178                     l307:
  1640                           
  1641                           ;doprnt.c: 1469: }
  1642                           ;doprnt.c: 1472: prec = c;
  1643  001178  C0DA  F0D3         	movff	printf@c,printf@prec
  1644                           
  1645                           ;doprnt.c: 1474: while(prec--) {
  1646  00117C  D02A               	goto	l308
  1647  00117E                     
  1648                           ;doprnt.c: 1478: {
  1649                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1650  00117E  0100               	movlb	0	; () banked
  1651  001180  51D3               	movf	printf@prec& (0+255),w,b
  1652  001182  0D02               	mullw	2
  1653  001184  0ECA               	movlw	low _dpowers
  1654  001186  24F3               	addwf	prodl,w,c
  1655  001188  6EF6               	movwf	tblptrl,c
  1656  00118A  0EFE               	movlw	high _dpowers
  1657  00118C  20F4               	addwfc	prodh,w,c
  1658  00118E  6EF7               	movwf	tblptrh,c
  1659  001190                     	if	1	;There are 3 active tblptr bytes
  1660  001190  6AF8               	clrf	tblptru,c
  1661  001192  0E00               	movlw	low (__mediumconst shr (0+16))
  1662  001194  22F8               	addwfc	tblptru,f,c
  1663  001196                     	endif
  1664  001196  0009               	tblrd		*+
  1665  001198  CFF5 F0C3          	movff	tablat,___lwdiv@divisor
  1666  00119C  000A               	tblrd		*-
  1667  00119E  CFF5 F0C4          	movff	tablat,___lwdiv@divisor+1
  1668  0011A2  C0D8  F0C1         	movff	printf@val,___lwdiv@dividend
  1669  0011A6  C0D9  F0C2         	movff	printf@val+1,___lwdiv@dividend+1
  1670  0011AA  ECCE  F00A         	call	___lwdiv	;wreg free
  1671  0011AE  C0C1  F0C8         	movff	?___lwdiv,___lwmod@dividend
  1672  0011B2  C0C2  F0C9         	movff	?___lwdiv+1,___lwmod@dividend+1
  1673  0011B6  0E00               	movlw	0
  1674  0011B8  0100               	movlb	0	; () banked
  1675  0011BA  6FCB               	movwf	(___lwmod@divisor+1)& (0+255),b
  1676  0011BC  0E0A               	movlw	10
  1677  0011BE  6FCA               	movwf	___lwmod@divisor& (0+255),b
  1678  0011C0  ECB5  F00B         	call	___lwmod	;wreg free
  1679  0011C4  0100               	movlb	0	; () banked
  1680  0011C6  51C8               	movf	?___lwmod& (0+255),w,b
  1681  0011C8  0F30               	addlw	48
  1682  0011CA  6FDA               	movwf	printf@c& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;doprnt.c: 1523: }
  1686                           ;doprnt.c: 1524: (putch(c) );
  1687  0011CC  51DA               	movf	printf@c& (0+255),w,b
  1688  0011CE  EC57  F00C         	call	_putch
  1689  0011D2                     l308:
  1690  0011D2  0100               	movlb	0	; () banked
  1691  0011D4  07D3               	decf	printf@prec& (0+255),f,b
  1692  0011D6  29D3               	incf	printf@prec& (0+255),w,b
  1693  0011D8  A4D8               	btfss	status,2,c
  1694  0011DA  D7D1               	goto	l309
  1695  0011DC                     u2450:
  1696                           
  1697                           ; BSR set to: 0
  1698                           
  1699                           ; BSR set to: 0
  1700  0011DC  C0CD  FFF6         	movff	printf@f,tblptrl
  1701  0011E0  C0CE  FFF7         	movff	printf@f+1,tblptrh
  1702  0011E4  0100               	movlb	0	; () banked
  1703  0011E6  4BCD               	infsnz	printf@f& (0+255),f,b
  1704  0011E8  2BCE               	incf	(printf@f+1)& (0+255),f,b
  1705  0011EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1706  0011EA  6AF8               	clrf	tblptru,c
  1707  0011EC                     	endif
  1708  0011EC                     	if	0	;tblptru may be non-zero
  1709  0011EC                     	endif
  1710  0011EC  0008               	tblrd		*
  1711  0011EE  CFF5 F0DA          	movff	tablat,printf@c
  1712  0011F2  51DA               	movf	printf@c& (0+255),w,b
  1713  0011F4  B4D8               	btfsc	status,2,c
  1714  0011F6  0012               	return	
  1715  0011F8  D721               	goto	l289
  1716  0011FA                     __end_of_printf:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           intcon	equ	0xFF2
  1725                           intcon3	equ	0xFF0
  1726                           indf0	equ	0xFEF
  1727                           postinc0	equ	0xFEE
  1728                           fsr0h	equ	0xFEA
  1729                           fsr0l	equ	0xFE9
  1730                           wreg	equ	0xFE8
  1731                           postinc2	equ	0xFDE
  1732                           postdec2	equ	0xFDD
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _putch *****************
  1738 ;; Defined at:
  1739 ;;		line 24 in file "lcd.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  data            1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  data            1    2[BANK0 ] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		_lcdNibble
  1762 ;; This function is called by:
  1763 ;;		_printf
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text2
  1768  0018AE                     __ptext2:
  1769                           	opt stack 0
  1770  0018AE                     _putch:
  1771                           	opt stack 24
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;incstack = 0
  1775                           ;putch@data stored from wreg
  1776  0018AE  0100               	movlb	0	; () banked
  1777  0018B0  6FC3               	movwf	putch@data& (0+255),b
  1778                           
  1779                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1780  0018B2  848C               	bsf	3980,2,c	;volatile
  1781                           
  1782                           ;lcd.c: 33: lcdNibble(data);
  1783  0018B4  0100               	movlb	0	; () banked
  1784  0018B6  51C3               	movf	putch@data& (0+255),w,b
  1785  0018B8  EC1B  F00A         	call	_lcdNibble
  1786                           
  1787                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1788  0018BC  0EC8               	movlw	200
  1789  0018BE                     u2667:
  1790  0018BE  D000               	nop2	
  1791  0018C0  2EE8               	decfsz	wreg,f,c
  1792  0018C2  D7FD               	bra	u2667
  1793  0018C4  0012               	return		;funcret
  1794  0018C6                     __end_of_putch:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           intcon	equ	0xFF2
  1803                           intcon3	equ	0xFF0
  1804                           indf0	equ	0xFEF
  1805                           postinc0	equ	0xFEE
  1806                           fsr0h	equ	0xFEA
  1807                           fsr0l	equ	0xFE9
  1808                           wreg	equ	0xFE8
  1809                           postinc2	equ	0xFDE
  1810                           postdec2	equ	0xFDD
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function ___lwmod *****************
  1816 ;; Defined at:
  1817 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  dividend        2    7[BANK0 ] unsigned int 
  1820 ;;  divisor         2    9[BANK0 ] unsigned int 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  counter         1   11[BANK0 ] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  2    7[BANK0 ] unsigned int 
  1825 ;; Registers used:
  1826 ;;		wreg, status,2, status,0
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;Total ram usage:        5 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    4
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_printf
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text3
  1847  00176A                     __ptext3:
  1848                           	opt stack 0
  1849  00176A                     ___lwmod:
  1850                           	opt stack 25
  1851                           
  1852                           ;incstack = 0
  1853  00176A  0100               	movlb	0	; () banked
  1854  00176C  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1855  00176E  11CB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1856  001770  B4D8               	btfsc	status,2,c
  1857  001772  D018               	goto	l731
  1858                           
  1859                           ; BSR set to: 0
  1860  001774  0E01               	movlw	1
  1861  001776  6FCC               	movwf	___lwmod@counter& (0+255),b
  1862  001778  D004               	goto	l726
  1863  00177A                     
  1864                           ; BSR set to: 0
  1865                           
  1866                           ; BSR set to: 0
  1867  00177A  90D8               	bcf	status,0,c
  1868  00177C  37CA               	rlcf	___lwmod@divisor& (0+255),f,b
  1869  00177E  37CB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1870  001780  2BCC               	incf	___lwmod@counter& (0+255),f,b
  1871  001782                     l726:
  1872                           
  1873                           ; BSR set to: 0
  1874                           
  1875                           ; BSR set to: 0
  1876  001782  AFCB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1877  001784  D7FA               	goto	l727
  1878  001786                     u2330:
  1879                           
  1880                           ; BSR set to: 0
  1881                           
  1882                           ; BSR set to: 0
  1883                           
  1884                           ; BSR set to: 0
  1885  001786  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1886  001788  5DC8               	subwf	___lwmod@dividend& (0+255),w,b
  1887  00178A  51CB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1888  00178C  59C9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1889  00178E  A0D8               	btfss	status,0,c
  1890  001790  D004               	goto	l730
  1891                           
  1892                           ; BSR set to: 0
  1893  001792  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1894  001794  5FC8               	subwf	___lwmod@dividend& (0+255),f,b
  1895  001796  51CB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1896  001798  5BC9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1897  00179A                     l730:
  1898                           
  1899                           ; BSR set to: 0
  1900                           
  1901                           ; BSR set to: 0
  1902  00179A  90D8               	bcf	status,0,c
  1903  00179C  33CB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1904  00179E  33CA               	rrcf	___lwmod@divisor& (0+255),f,b
  1905                           
  1906                           ; BSR set to: 0
  1907  0017A0  2FCC               	decfsz	___lwmod@counter& (0+255),f,b
  1908  0017A2  D7F1               	goto	u2330
  1909  0017A4                     l731:
  1910                           
  1911                           ; BSR set to: 0
  1912                           
  1913                           ; BSR set to: 0
  1914  0017A4  C0C8  F0C8         	movff	___lwmod@dividend,?___lwmod
  1915  0017A8  C0C9  F0C9         	movff	___lwmod@dividend+1,?___lwmod+1
  1916                           
  1917                           ; BSR set to: 0
  1918  0017AC  0012               	return		;funcret
  1919  0017AE                     __end_of___lwmod:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon3	equ	0xFF0
  1929                           indf0	equ	0xFEF
  1930                           postinc0	equ	0xFEE
  1931                           fsr0h	equ	0xFEA
  1932                           fsr0l	equ	0xFE9
  1933                           wreg	equ	0xFE8
  1934                           postinc2	equ	0xFDE
  1935                           postdec2	equ	0xFDD
  1936                           fsr2h	equ	0xFDA
  1937                           fsr2l	equ	0xFD9
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function ___lwdiv *****************
  1941 ;; Defined at:
  1942 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  dividend        2    0[BANK0 ] unsigned int 
  1945 ;;  divisor         2    2[BANK0 ] unsigned int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  quotient        2    5[BANK0 ] unsigned int 
  1948 ;;  counter         1    4[BANK0 ] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2    0[BANK0 ] unsigned int 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        7 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    4
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_printf
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text4
  1973  00159C                     __ptext4:
  1974                           	opt stack 0
  1975  00159C                     ___lwdiv:
  1976                           	opt stack 25
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;incstack = 0
  1980  00159C  0E00               	movlw	0
  1981  00159E  0100               	movlb	0	; () banked
  1982  0015A0  6FC7               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1983  0015A2  0E00               	movlw	0
  1984  0015A4  6FC6               	movwf	___lwdiv@quotient& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987  0015A6  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  1988  0015A8  11C4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1989  0015AA  B4D8               	btfsc	status,2,c
  1990  0015AC  D01C               	goto	l721
  1991                           
  1992                           ; BSR set to: 0
  1993  0015AE  0E01               	movlw	1
  1994  0015B0  6FC5               	movwf	___lwdiv@counter& (0+255),b
  1995  0015B2  D004               	goto	l716
  1996  0015B4                     
  1997                           ; BSR set to: 0
  1998                           
  1999                           ; BSR set to: 0
  2000  0015B4  90D8               	bcf	status,0,c
  2001  0015B6  37C3               	rlcf	___lwdiv@divisor& (0+255),f,b
  2002  0015B8  37C4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2003  0015BA  2BC5               	incf	___lwdiv@counter& (0+255),f,b
  2004  0015BC                     l716:
  2005                           
  2006                           ; BSR set to: 0
  2007                           
  2008                           ; BSR set to: 0
  2009  0015BC  AFC4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2010  0015BE  D7FA               	goto	l717
  2011  0015C0                     u2300:
  2012                           
  2013                           ; BSR set to: 0
  2014                           
  2015                           ; BSR set to: 0
  2016                           
  2017                           ; BSR set to: 0
  2018  0015C0  90D8               	bcf	status,0,c
  2019  0015C2  37C6               	rlcf	___lwdiv@quotient& (0+255),f,b
  2020  0015C4  37C7               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2021                           
  2022                           ; BSR set to: 0
  2023  0015C6  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  2024  0015C8  5DC1               	subwf	___lwdiv@dividend& (0+255),w,b
  2025  0015CA  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2026  0015CC  59C2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2027  0015CE  A0D8               	btfss	status,0,c
  2028  0015D0  D005               	goto	l720
  2029                           
  2030                           ; BSR set to: 0
  2031  0015D2  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  2032  0015D4  5FC1               	subwf	___lwdiv@dividend& (0+255),f,b
  2033  0015D6  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2034  0015D8  5BC2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2035                           
  2036                           ; BSR set to: 0
  2037  0015DA  81C6               	bsf	___lwdiv@quotient& (0+255),0,b
  2038  0015DC                     l720:
  2039                           
  2040                           ; BSR set to: 0
  2041                           
  2042                           ; BSR set to: 0
  2043  0015DC  90D8               	bcf	status,0,c
  2044  0015DE  33C4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2045  0015E0  33C3               	rrcf	___lwdiv@divisor& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 0
  2048  0015E2  2FC5               	decfsz	___lwdiv@counter& (0+255),f,b
  2049  0015E4  D7ED               	goto	u2300
  2050  0015E6                     l721:
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  0015E6  C0C6  F0C1         	movff	___lwdiv@quotient,?___lwdiv
  2056  0015EA  C0C7  F0C2         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2057                           
  2058                           ; BSR set to: 0
  2059  0015EE  0012               	return		;funcret
  2060  0015F0                     __end_of___lwdiv:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           intcon	equ	0xFF2
  2069                           intcon3	equ	0xFF0
  2070                           indf0	equ	0xFEF
  2071                           postinc0	equ	0xFEE
  2072                           fsr0h	equ	0xFEA
  2073                           fsr0l	equ	0xFE9
  2074                           wreg	equ	0xFE8
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _initLCD *****************
  2082 ;; Defined at:
  2083 ;;		line 60 in file "lcd.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    6
  2104 ;; This function calls:
  2105 ;;		_lcdInst
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text5
  2112  001642                     __ptext5:
  2113                           	opt stack 0
  2114  001642                     _initLCD:
  2115                           	opt stack 24
  2116                           
  2117                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;incstack = 0
  2121  001642  0EC3               	movlw	195
  2122  001644  0100               	movlb	0	; () banked
  2123  001646  6FC4               	movwf	??_initLCD& (0+255),b
  2124  001648  0ECD               	movlw	205
  2125  00164A                     u2677:
  2126  00164A  2EE8               	decfsz	wreg,f,c
  2127  00164C  D7FE               	bra	u2677
  2128  00164E  2FC4               	decfsz	??_initLCD& (0+255),f,b
  2129  001650  D7FC               	bra	u2677
  2130                           
  2131                           ;lcd.c: 69: lcdInst(0b00110011);
  2132  001652  0E33               	movlw	51
  2133  001654  EC63  F00C         	call	_lcdInst
  2134                           
  2135                           ;lcd.c: 70: lcdInst(0b00110010);
  2136  001658  0E32               	movlw	50
  2137  00165A  EC63  F00C         	call	_lcdInst
  2138                           
  2139                           ;lcd.c: 71: lcdInst(0b00101000);
  2140  00165E  0E28               	movlw	40
  2141  001660  EC63  F00C         	call	_lcdInst
  2142                           
  2143                           ;lcd.c: 72: lcdInst(0b00001111);
  2144  001664  0E0F               	movlw	15
  2145  001666  EC63  F00C         	call	_lcdInst
  2146                           
  2147                           ;lcd.c: 73: lcdInst(0b00000110);
  2148  00166A  0E06               	movlw	6
  2149  00166C  EC63  F00C         	call	_lcdInst
  2150                           
  2151                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2152  001670  0E01               	movlw	1
  2153  001672  EC63  F00C         	call	_lcdInst
  2154  001676  0EC3               	movlw	195
  2155  001678  0100               	movlb	0	; () banked
  2156  00167A  6FC4               	movwf	??_initLCD& (0+255),b
  2157  00167C  0ECD               	movlw	205
  2158  00167E                     u2687:
  2159  00167E  2EE8               	decfsz	wreg,f,c
  2160  001680  D7FE               	bra	u2687
  2161  001682  2FC4               	decfsz	??_initLCD& (0+255),f,b
  2162  001684  D7FC               	bra	u2687
  2163                           
  2164                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2165  001686  0E0F               	movlw	15
  2166  001688  EC63  F00C         	call	_lcdInst
  2167  00168C  0012               	return		;funcret
  2168  00168E                     __end_of_initLCD:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           tblptrh	equ	0xFF7
  2172                           tblptrl	equ	0xFF6
  2173                           tablat	equ	0xFF5
  2174                           prodh	equ	0xFF4
  2175                           prodl	equ	0xFF3
  2176                           intcon	equ	0xFF2
  2177                           intcon3	equ	0xFF0
  2178                           indf0	equ	0xFEF
  2179                           postinc0	equ	0xFEE
  2180                           fsr0h	equ	0xFEA
  2181                           fsr0l	equ	0xFE9
  2182                           wreg	equ	0xFE8
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _lcdInst *****************
  2190 ;; Defined at:
  2191 ;;		line 11 in file "lcd.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  data            1    wreg     unsigned char 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  data            1    2[BANK0 ] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:        1 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    5
  2212 ;; This function calls:
  2213 ;;		_lcdNibble
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;;		_initLCD
  2217 ;;		_lcd_set_cursor
  2218 ;;		_lcd_shift_cursor
  2219 ;;		_lcd_shift_display
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text6
  2224  0018C6                     __ptext6:
  2225                           	opt stack 0
  2226  0018C6                     _lcdInst:
  2227                           	opt stack 25
  2228                           
  2229                           ;incstack = 0
  2230                           ;lcdInst@data stored from wreg
  2231  0018C6  0100               	movlb	0	; () banked
  2232  0018C8  6FC3               	movwf	lcdInst@data& (0+255),b
  2233                           
  2234                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2235  0018CA  948C               	bcf	3980,2,c	;volatile
  2236                           
  2237                           ;lcd.c: 20: lcdNibble(data);
  2238  0018CC  0100               	movlb	0	; () banked
  2239  0018CE  51C3               	movf	lcdInst@data& (0+255),w,b
  2240  0018D0  EC1B  F00A         	call	_lcdNibble
  2241                           
  2242                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2243  0018D4  0EC8               	movlw	200
  2244  0018D6                     u2697:
  2245  0018D6  D000               	nop2	
  2246  0018D8  2EE8               	decfsz	wreg,f,c
  2247  0018DA  D7FD               	bra	u2697
  2248  0018DC  0012               	return		;funcret
  2249  0018DE                     __end_of_lcdInst:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           intcon	equ	0xFF2
  2258                           intcon3	equ	0xFF0
  2259                           indf0	equ	0xFEF
  2260                           postinc0	equ	0xFEE
  2261                           fsr0h	equ	0xFEA
  2262                           fsr0l	equ	0xFE9
  2263                           wreg	equ	0xFE8
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _lcdNibble *****************
  2271 ;; Defined at:
  2272 ;;		line 37 in file "lcd.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  data            1    wreg     unsigned char 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  data            1    1[BANK0 ] unsigned char 
  2277 ;;  temp            1    0[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;Total ram usage:        2 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_lcdInst
  2298 ;;		_putch
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text7
  2303  001436                     __ptext7:
  2304                           	opt stack 0
  2305  001436                     _lcdNibble:
  2306                           	opt stack 24
  2307                           
  2308                           ;incstack = 0
  2309                           ;lcdNibble@data stored from wreg
  2310  001436  0100               	movlb	0	; () banked
  2311  001438  6FC2               	movwf	lcdNibble@data& (0+255),b
  2312                           
  2313                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2314  00143A  0100               	movlb	0	; () banked
  2315  00143C  51C2               	movf	lcdNibble@data& (0+255),w,b
  2316  00143E  0BF0               	andlw	240
  2317  001440  6FC1               	movwf	lcdNibble@temp& (0+255),b
  2318                           
  2319                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2320  001442  508C               	movf	3980,w,c	;volatile
  2321  001444  0B0F               	andlw	15
  2322  001446  6E8C               	movwf	3980,c	;volatile
  2323                           
  2324                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2325  001448  51C1               	movf	lcdNibble@temp& (0+255),w,b
  2326  00144A  108C               	iorwf	3980,w,c	;volatile
  2327  00144C  6E8C               	movwf	3980,c	;volatile
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2331  00144E  0E00               	movlw	0
  2332  001450  BEF2               	btfsc	intcon,7,c	;volatile
  2333  001452  0E01               	movlw	1
  2334  001454  6E4A               	movwf	lcd@LCDinterruptState,c
  2335                           
  2336                           ; BSR set to: 0
  2337  001456  9EF2               	bcf	intcon,7,c	;volatile
  2338                           
  2339                           ; BSR set to: 0
  2340  001458  868C               	bsf	3980,3,c	;volatile
  2341                           
  2342                           ; BSR set to: 0
  2343  00145A  0E53               	movlw	83
  2344  00145C                     u2707:
  2345  00145C  2EE8               	decfsz	wreg,f,c
  2346  00145E  D7FE               	bra	u2707
  2347  001460  F000               	nop	
  2348  001462  968C               	bcf	3980,3,c	;volatile
  2349  001464  0EC8               	movlw	200
  2350  001466                     u2717:
  2351  001466  D000               	nop2	
  2352  001468  2EE8               	decfsz	wreg,f,c
  2353  00146A  D7FD               	bra	u2717
  2354  00146C  B04A               	btfsc	lcd@LCDinterruptState,0,c
  2355  00146E  D002               	bra	u2275
  2356  001470  9EF2               	bcf	intcon,7,c	;volatile
  2357  001472  D001               	bra	u2276
  2358  001474                     u2275:
  2359  001474  8EF2               	bsf	intcon,7,c	;volatile
  2360  001476                     u2276:
  2361                           
  2362                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2363  001476  0100               	movlb	0	; () banked
  2364  001478  39C2               	swapf	lcdNibble@data& (0+255),w,b
  2365  00147A  0BF0               	andlw	240
  2366  00147C  6FC2               	movwf	lcdNibble@data& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2370  00147E  51C2               	movf	lcdNibble@data& (0+255),w,b
  2371  001480  0BF0               	andlw	240
  2372  001482  6FC1               	movwf	lcdNibble@temp& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2376  001484  508C               	movf	3980,w,c	;volatile
  2377  001486  0B0F               	andlw	15
  2378  001488  6E8C               	movwf	3980,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2382  00148A  51C1               	movf	lcdNibble@temp& (0+255),w,b
  2383  00148C  108C               	iorwf	3980,w,c	;volatile
  2384  00148E  6E8C               	movwf	3980,c	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2388  001490  0E00               	movlw	0
  2389  001492  BEF2               	btfsc	intcon,7,c	;volatile
  2390  001494  0E01               	movlw	1
  2391  001496  6E4A               	movwf	lcd@LCDinterruptState,c
  2392                           
  2393                           ; BSR set to: 0
  2394  001498  9EF2               	bcf	intcon,7,c	;volatile
  2395                           
  2396                           ; BSR set to: 0
  2397  00149A  868C               	bsf	3980,3,c	;volatile
  2398                           
  2399                           ; BSR set to: 0
  2400  00149C  0E53               	movlw	83
  2401  00149E                     u2727:
  2402  00149E  2EE8               	decfsz	wreg,f,c
  2403  0014A0  D7FE               	bra	u2727
  2404  0014A2  F000               	nop	
  2405  0014A4  968C               	bcf	3980,3,c	;volatile
  2406  0014A6  0EC8               	movlw	200
  2407  0014A8                     u2737:
  2408  0014A8  D000               	nop2	
  2409  0014AA  2EE8               	decfsz	wreg,f,c
  2410  0014AC  D7FD               	bra	u2737
  2411  0014AE  B04A               	btfsc	lcd@LCDinterruptState,0,c
  2412  0014B0  D002               	bra	u2285
  2413  0014B2  9EF2               	bcf	intcon,7,c	;volatile
  2414  0014B4  D001               	bra	u2286
  2415  0014B6                     u2285:
  2416  0014B6  8EF2               	bsf	intcon,7,c	;volatile
  2417  0014B8                     u2286:
  2418  0014B8  0012               	return		;funcret
  2419  0014BA                     __end_of_lcdNibble:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           intcon	equ	0xFF2
  2428                           intcon3	equ	0xFF0
  2429                           indf0	equ	0xFEF
  2430                           postinc0	equ	0xFEE
  2431                           fsr0h	equ	0xFEA
  2432                           fsr0l	equ	0xFE9
  2433                           wreg	equ	0xFE8
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function ___wmul *****************
  2441 ;; Defined at:
  2442 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2445 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  product         2    4[BANK0 ] unsigned int 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  2    0[BANK0 ] unsigned int 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0, prodl, prodh
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;Total ram usage:        6 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    4
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text8
  2472  001860                     __ptext8:
  2473                           	opt stack 0
  2474  001860                     ___wmul:
  2475                           	opt stack 26
  2476                           
  2477                           ;incstack = 0
  2478  001860  0100               	movlb	0	; () banked
  2479  001862  51C1               	movf	___wmul@multiplier& (0+255),w,b
  2480  001864  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  2481  001866  CFF3 F0C5          	movff	prodl,___wmul@product
  2482  00186A  CFF4 F0C6          	movff	prodh,___wmul@product+1
  2483  00186E  51C1               	movf	___wmul@multiplier& (0+255),w,b
  2484  001870  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2485  001872  50F3               	movf	prodl,w,c
  2486  001874  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  2487  001876  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2488  001878  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  2489  00187A  50F3               	movf	prodl,w,c
  2490  00187C  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  2491                           
  2492                           ; BSR set to: 0
  2493  00187E  C0C5  F0C1         	movff	___wmul@product,?___wmul
  2494  001882  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  2495  001886  0012               	return	
  2496  001888                     __end_of___wmul:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon3	equ	0xFF0
  2506                           indf0	equ	0xFEF
  2507                           postinc0	equ	0xFEE
  2508                           fsr0h	equ	0xFEA
  2509                           fsr0l	equ	0xFE9
  2510                           wreg	equ	0xFE8
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _interruptHandler *****************
  2518 ;; Defined at:
  2519 ;;		line 151 in file "main.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  i               2   49[COMRAM] int 
  2524 ;;  keypress        1   52[COMRAM] unsigned char 
  2525 ;;  temp            1   51[COMRAM] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      void 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;Total ram usage:       27 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    3
  2542 ;; This function calls:
  2543 ;;		_check
  2544 ;;		_is_valid
  2545 ;;		_strcat
  2546 ;;		_strcpy
  2547 ;;		_strncmp
  2548 ;;		i2___wmul
  2549 ;;		i2_initLCD
  2550 ;;		i2_lcdInst
  2551 ;;		i2_printf
  2552 ;;		i2_putch
  2553 ;; This function is called by:
  2554 ;;		Interrupt level 2
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	intcode
  2559  000008                     __pintcode:
  2560                           	opt stack 0
  2561  000008                     _interruptHandler:
  2562                           	opt stack 24
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;incstack = 0
  2566  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2567  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           intcon3	equ	0xFF0
  2576                           indf0	equ	0xFEF
  2577                           postinc0	equ	0xFEE
  2578                           fsr0h	equ	0xFEA
  2579                           fsr0l	equ	0xFE9
  2580                           wreg	equ	0xFE8
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587                           	psect	intcode_body
  2588  000012                     __pintcode_body:
  2589                           	opt stack 24
  2590  000012                     int_func:
  2591                           	opt stack 24
  2592  000012  0006               	pop		; remove dummy address from shadow register refresh
  2593  000014  CFFA F020          	movff	pclath,??_interruptHandler+5
  2594  000018  CFFB F021          	movff	pclatu,??_interruptHandler+6
  2595  00001C  CFE9 F022          	movff	fsr0l,??_interruptHandler+7
  2596  000020  CFEA F023          	movff	fsr0h,??_interruptHandler+8
  2597  000024  CFE1 F024          	movff	fsr1l,??_interruptHandler+9
  2598  000028  CFE2 F025          	movff	fsr1h,??_interruptHandler+10
  2599  00002C  CFD9 F026          	movff	fsr2l,??_interruptHandler+11
  2600  000030  CFDA F027          	movff	fsr2h,??_interruptHandler+12
  2601  000034  CFF3 F028          	movff	prodl,??_interruptHandler+13
  2602  000038  CFF4 F029          	movff	prodh,??_interruptHandler+14
  2603  00003C  CFF6 F02A          	movff	tblptrl,??_interruptHandler+15
  2604  000040  CFF7 F02B          	movff	tblptrh,??_interruptHandler+16
  2605  000044  CFF8 F02C          	movff	tblptru,??_interruptHandler+17
  2606  000048  CFF5 F02D          	movff	tablat,??_interruptHandler+18
  2607  00004C  C059  F02E         	movff	btemp,??_interruptHandler+19
  2608  000050  C05A  F02F         	movff	btemp+1,??_interruptHandler+20
  2609  000054  C05B  F030         	movff	btemp+2,??_interruptHandler+21
  2610  000058  C05C  F031         	movff	btemp+3,??_interruptHandler+22
  2611                           
  2612                           ;main.c: 162: if(INT1IF){
  2613  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  2614  00005E  D3DD               	goto	i2l2808
  2615                           
  2616                           ;main.c: 168: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2617  000060  3881               	swapf	3969,w,c	;volatile
  2618  000062  0B0F               	andlw	15
  2619  000064  0B0F               	andlw	15
  2620  000066  6E35               	movwf	interruptHandler@keypress,c
  2621                           
  2622                           ;main.c: 170: char temp = keys[keypress];
  2623  000068  5035               	movf	interruptHandler@keypress,w,c
  2624  00006A  0D01               	mullw	1
  2625  00006C  0EB9               	movlw	low _keys
  2626  00006E  24F3               	addwf	prodl,w,c
  2627  000070  6EF6               	movwf	tblptrl,c
  2628  000072  0EFE               	movlw	high _keys
  2629  000074  20F4               	addwfc	prodh,w,c
  2630  000076  6EF7               	movwf	tblptrh,c
  2631  000078                     	if	1	;There are 3 active tblptr bytes
  2632  000078  6AF8               	clrf	tblptru,c
  2633  00007A  0E00               	movlw	low (__mediumconst shr (0+16))
  2634  00007C  22F8               	addwfc	tblptru,f,c
  2635  00007E                     	endif
  2636  00007E  0008               	tblrd		*
  2637  000080  CFF5 F034          	movff	tablat,interruptHandler@temp
  2638                           
  2639                           ;main.c: 173: if(temp == 'A'){
  2640  000084  0E41               	movlw	65
  2641  000086  1834               	xorwf	interruptHandler@temp,w,c
  2642  000088  A4D8               	btfss	status,2,c
  2643  00008A  D005               	goto	i2l133
  2644                           
  2645                           ;main.c: 174: state = prev_state;
  2646  00008C  C03E  F092         	movff	_prev_state,_state
  2647  000090  C03F  F093         	movff	_prev_state+1,_state+1
  2648  000094  D3C1               	goto	i2l2806
  2649  000096                     i2l133:
  2650                           
  2651                           ;main.c: 177: }
  2652                           ;main.c: 181: if (state == 0){
  2653  000096  0100               	movlb	0	; () banked
  2654  000098  5192               	movf	_state& (0+255),w,b
  2655  00009A  1193               	iorwf	(_state+1)& (0+255),w,b
  2656  00009C  A4D8               	btfss	status,2,c
  2657  00009E  D0D3               	goto	i2l135
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;main.c: 183: if(temp == '4'){
  2661  0000A0  0E34               	movlw	52
  2662  0000A2  1834               	xorwf	interruptHandler@temp,w,c
  2663  0000A4  A4D8               	btfss	status,2,c
  2664  0000A6  D01F               	goto	i2l136
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 184: assembly_step = 4;
  2668  0000A8  0E00               	movlw	0
  2669  0000AA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2670  0000AC  0E04               	movlw	4
  2671  0000AE  6F90               	movwf	_assembly_step& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;main.c: 185: prev_state = state;
  2675  0000B0  C092  F03E         	movff	_state,_prev_state
  2676  0000B4  C093  F03F         	movff	_state+1,_prev_state+1
  2677                           
  2678                           ;main.c: 186: state = 1;
  2679  0000B8  0E00               	movlw	0
  2680  0000BA  6F93               	movwf	(_state+1)& (0+255),b
  2681  0000BC  0E01               	movlw	1
  2682  0000BE  6F92               	movwf	_state& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 187: lcdInst(0xC0);;
  2686  0000C0  0EC0               	movlw	192
  2687  0000C2  EC79  F00C         	call	i2_lcdInst
  2688                           
  2689                           ;main.c: 188: putch(keys[keypress]);
  2690  0000C6  5035               	movf	interruptHandler@keypress,w,c
  2691  0000C8  0D01               	mullw	1
  2692  0000CA  0EB9               	movlw	low _keys
  2693  0000CC  24F3               	addwf	prodl,w,c
  2694  0000CE  6EF6               	movwf	tblptrl,c
  2695  0000D0  0EFE               	movlw	high _keys
  2696  0000D2  20F4               	addwfc	prodh,w,c
  2697  0000D4  6EF7               	movwf	tblptrh,c
  2698  0000D6                     	if	1	;There are 3 active tblptr bytes
  2699  0000D6  6AF8               	clrf	tblptru,c
  2700  0000D8  0E00               	movlw	low (__mediumconst shr (0+16))
  2701  0000DA  22F8               	addwfc	tblptru,f,c
  2702  0000DC                     	endif
  2703  0000DC  0008               	tblrd		*
  2704  0000DE  50F5               	movf	tablat,w,c
  2705  0000E0  EC6F  F00C         	call	i2_putch
  2706                           
  2707                           ;main.c: 190: }
  2708  0000E4  D0A3               	goto	i2l145
  2709  0000E6                     i2l136:
  2710                           
  2711                           ;main.c: 191: else if(temp == '5'){
  2712  0000E6  0E35               	movlw	53
  2713  0000E8  1834               	xorwf	interruptHandler@temp,w,c
  2714  0000EA  A4D8               	btfss	status,2,c
  2715  0000EC  D020               	goto	i2l138
  2716                           
  2717                           ;main.c: 192: assembly_step = 5;
  2718  0000EE  0E00               	movlw	0
  2719  0000F0  0100               	movlb	0	; () banked
  2720  0000F2  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2721  0000F4  0E05               	movlw	5
  2722  0000F6  6F90               	movwf	_assembly_step& (0+255),b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;main.c: 193: prev_state = state;
  2726  0000F8  C092  F03E         	movff	_state,_prev_state
  2727  0000FC  C093  F03F         	movff	_state+1,_prev_state+1
  2728                           
  2729                           ;main.c: 194: state = 1;
  2730  000100  0E00               	movlw	0
  2731  000102  6F93               	movwf	(_state+1)& (0+255),b
  2732  000104  0E01               	movlw	1
  2733  000106  6F92               	movwf	_state& (0+255),b
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 195: lcdInst(0xC0);;
  2737  000108  0EC0               	movlw	192
  2738  00010A  EC79  F00C         	call	i2_lcdInst
  2739                           
  2740                           ;main.c: 196: putch(keys[keypress]);
  2741  00010E  5035               	movf	interruptHandler@keypress,w,c
  2742  000110  0D01               	mullw	1
  2743  000112  0EB9               	movlw	low _keys
  2744  000114  24F3               	addwf	prodl,w,c
  2745  000116  6EF6               	movwf	tblptrl,c
  2746  000118  0EFE               	movlw	high _keys
  2747  00011A  20F4               	addwfc	prodh,w,c
  2748  00011C  6EF7               	movwf	tblptrh,c
  2749  00011E                     	if	1	;There are 3 active tblptr bytes
  2750  00011E  6AF8               	clrf	tblptru,c
  2751  000120  0E00               	movlw	low (__mediumconst shr (0+16))
  2752  000122  22F8               	addwfc	tblptru,f,c
  2753  000124                     	endif
  2754  000124  0008               	tblrd		*
  2755  000126  50F5               	movf	tablat,w,c
  2756  000128  EC6F  F00C         	call	i2_putch
  2757                           
  2758                           ;main.c: 198: }
  2759  00012C  D07F               	goto	i2l145
  2760  00012E                     i2l138:
  2761                           
  2762                           ;main.c: 199: else if (temp == '6') {
  2763  00012E  0E36               	movlw	54
  2764  000130  1834               	xorwf	interruptHandler@temp,w,c
  2765  000132  A4D8               	btfss	status,2,c
  2766  000134  D020               	goto	i2l140
  2767                           
  2768                           ;main.c: 200: assembly_step = 6;
  2769  000136  0E00               	movlw	0
  2770  000138  0100               	movlb	0	; () banked
  2771  00013A  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2772  00013C  0E06               	movlw	6
  2773  00013E  6F90               	movwf	_assembly_step& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 201: prev_state = state;
  2777  000140  C092  F03E         	movff	_state,_prev_state
  2778  000144  C093  F03F         	movff	_state+1,_prev_state+1
  2779                           
  2780                           ;main.c: 202: state = 1;
  2781  000148  0E00               	movlw	0
  2782  00014A  6F93               	movwf	(_state+1)& (0+255),b
  2783  00014C  0E01               	movlw	1
  2784  00014E  6F92               	movwf	_state& (0+255),b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 203: lcdInst(0xC0);;
  2788  000150  0EC0               	movlw	192
  2789  000152  EC79  F00C         	call	i2_lcdInst
  2790                           
  2791                           ;main.c: 204: putch(keys[keypress]);
  2792  000156  5035               	movf	interruptHandler@keypress,w,c
  2793  000158  0D01               	mullw	1
  2794  00015A  0EB9               	movlw	low _keys
  2795  00015C  24F3               	addwf	prodl,w,c
  2796  00015E  6EF6               	movwf	tblptrl,c
  2797  000160  0EFE               	movlw	high _keys
  2798  000162  20F4               	addwfc	prodh,w,c
  2799  000164  6EF7               	movwf	tblptrh,c
  2800  000166                     	if	1	;There are 3 active tblptr bytes
  2801  000166  6AF8               	clrf	tblptru,c
  2802  000168  0E00               	movlw	low (__mediumconst shr (0+16))
  2803  00016A  22F8               	addwfc	tblptru,f,c
  2804  00016C                     	endif
  2805  00016C  0008               	tblrd		*
  2806  00016E  50F5               	movf	tablat,w,c
  2807  000170  EC6F  F00C         	call	i2_putch
  2808                           
  2809                           ;main.c: 205: }
  2810  000174  D05B               	goto	i2l145
  2811  000176                     i2l140:
  2812                           
  2813                           ;main.c: 206: else if (temp == '7'){
  2814  000176  0E37               	movlw	55
  2815  000178  1834               	xorwf	interruptHandler@temp,w,c
  2816  00017A  A4D8               	btfss	status,2,c
  2817  00017C  D020               	goto	i2l142
  2818                           
  2819                           ;main.c: 207: assembly_step = 7;
  2820  00017E  0E00               	movlw	0
  2821  000180  0100               	movlb	0	; () banked
  2822  000182  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2823  000184  0E07               	movlw	7
  2824  000186  6F90               	movwf	_assembly_step& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 208: prev_state = state;
  2828  000188  C092  F03E         	movff	_state,_prev_state
  2829  00018C  C093  F03F         	movff	_state+1,_prev_state+1
  2830                           
  2831                           ;main.c: 209: state = 1;
  2832  000190  0E00               	movlw	0
  2833  000192  6F93               	movwf	(_state+1)& (0+255),b
  2834  000194  0E01               	movlw	1
  2835  000196  6F92               	movwf	_state& (0+255),b
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;main.c: 210: lcdInst(0xC0);;
  2839  000198  0EC0               	movlw	192
  2840  00019A  EC79  F00C         	call	i2_lcdInst
  2841                           
  2842                           ;main.c: 211: putch(keys[keypress]);
  2843  00019E  5035               	movf	interruptHandler@keypress,w,c
  2844  0001A0  0D01               	mullw	1
  2845  0001A2  0EB9               	movlw	low _keys
  2846  0001A4  24F3               	addwf	prodl,w,c
  2847  0001A6  6EF6               	movwf	tblptrl,c
  2848  0001A8  0EFE               	movlw	high _keys
  2849  0001AA  20F4               	addwfc	prodh,w,c
  2850  0001AC  6EF7               	movwf	tblptrh,c
  2851  0001AE                     	if	1	;There are 3 active tblptr bytes
  2852  0001AE  6AF8               	clrf	tblptru,c
  2853  0001B0  0E00               	movlw	low (__mediumconst shr (0+16))
  2854  0001B2  22F8               	addwfc	tblptru,f,c
  2855  0001B4                     	endif
  2856  0001B4  0008               	tblrd		*
  2857  0001B6  50F5               	movf	tablat,w,c
  2858  0001B8  EC6F  F00C         	call	i2_putch
  2859                           
  2860                           ;main.c: 213: }
  2861  0001BC  D037               	goto	i2l145
  2862  0001BE                     i2l142:
  2863                           
  2864                           ;main.c: 214: else if (temp == '8'){
  2865  0001BE  0E38               	movlw	56
  2866  0001C0  1834               	xorwf	interruptHandler@temp,w,c
  2867  0001C2  A4D8               	btfss	status,2,c
  2868  0001C4  D020               	goto	i2l144
  2869                           
  2870                           ;main.c: 215: assembly_step = 8;
  2871  0001C6  0E00               	movlw	0
  2872  0001C8  0100               	movlb	0	; () banked
  2873  0001CA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2874  0001CC  0E08               	movlw	8
  2875  0001CE  6F90               	movwf	_assembly_step& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 216: prev_state = state;
  2879  0001D0  C092  F03E         	movff	_state,_prev_state
  2880  0001D4  C093  F03F         	movff	_state+1,_prev_state+1
  2881                           
  2882                           ;main.c: 217: state = 1;
  2883  0001D8  0E00               	movlw	0
  2884  0001DA  6F93               	movwf	(_state+1)& (0+255),b
  2885  0001DC  0E01               	movlw	1
  2886  0001DE  6F92               	movwf	_state& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;main.c: 218: lcdInst(0xC0);;
  2890  0001E0  0EC0               	movlw	192
  2891  0001E2  EC79  F00C         	call	i2_lcdInst
  2892                           
  2893                           ;main.c: 219: putch(keys[keypress]);
  2894  0001E6  5035               	movf	interruptHandler@keypress,w,c
  2895  0001E8  0D01               	mullw	1
  2896  0001EA  0EB9               	movlw	low _keys
  2897  0001EC  24F3               	addwf	prodl,w,c
  2898  0001EE  6EF6               	movwf	tblptrl,c
  2899  0001F0  0EFE               	movlw	high _keys
  2900  0001F2  20F4               	addwfc	prodh,w,c
  2901  0001F4  6EF7               	movwf	tblptrh,c
  2902  0001F6                     	if	1	;There are 3 active tblptr bytes
  2903  0001F6  6AF8               	clrf	tblptru,c
  2904  0001F8  0E00               	movlw	low (__mediumconst shr (0+16))
  2905  0001FA  22F8               	addwfc	tblptru,f,c
  2906  0001FC                     	endif
  2907  0001FC  0008               	tblrd		*
  2908  0001FE  50F5               	movf	tablat,w,c
  2909  000200  EC6F  F00C         	call	i2_putch
  2910                           
  2911                           ;main.c: 221: }
  2912  000204  D013               	goto	i2l145
  2913  000206                     i2l144:
  2914                           
  2915                           ;main.c: 222: else{
  2916                           ;main.c: 228: initLCD();
  2917  000206  EC47  F00B         	call	i2_initLCD	;wreg free
  2918                           
  2919                           ;main.c: 229: printf("Wrong number! ");
  2920  00020A  0E4F               	movlw	low STR_9
  2921  00020C  6E0D               	movwf	i2printf@f,c
  2922  00020E  0EFF               	movlw	high STR_9
  2923  000210  6E0E               	movwf	i2printf@f+1,c
  2924  000212  ECFD  F008         	call	i2_printf	;wreg free
  2925                           
  2926                           ;main.c: 230: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2927  000216  0E33               	movlw	51
  2928  000218  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2929  00021A  0EBB               	movlw	187
  2930  00021C  6E1B               	movwf	??_interruptHandler& (0+255),c
  2931  00021E  0EE0               	movlw	224
  2932  000220                     i2u274_47:
  2933  000220  2EE8               	decfsz	wreg,f,c
  2934  000222  D7FE               	bra	i2u274_47
  2935  000224  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2936  000226  D7FC               	bra	i2u274_47
  2937  000228  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2938  00022A  D7FA               	bra	i2u274_47
  2939  00022C                     i2l145:
  2940                           
  2941                           ;main.c: 232: }
  2942                           ;main.c: 236: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2943  00022C  0E66               	movlw	102
  2944  00022E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2945  000230  0E76               	movlw	118
  2946  000232  6E1B               	movwf	??_interruptHandler& (0+255),c
  2947  000234  0EC1               	movlw	193
  2948  000236                     i2u275_47:
  2949  000236  2EE8               	decfsz	wreg,f,c
  2950  000238  D7FE               	bra	i2u275_47
  2951  00023A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2952  00023C  D7FC               	bra	i2u275_47
  2953  00023E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2954  000240  D7FA               	bra	i2u275_47
  2955  000242  F000               	nop	
  2956  000244  D2E9               	goto	i2l2806
  2957  000246                     i2l135:
  2958                           
  2959                           ;main.c: 241: }
  2960                           ;main.c: 248: if(state == 1){
  2961  000246  0100               	movlb	0	; () banked
  2962  000248  0592               	decf	_state& (0+255),w,b
  2963  00024A  1193               	iorwf	(_state+1)& (0+255),w,b
  2964  00024C  A4D8               	btfss	status,2,c
  2965  00024E  D19B               	goto	i2l146
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 255: if (temp == 'A'){
  2969  000250  0E41               	movlw	65
  2970  000252  1834               	xorwf	interruptHandler@temp,w,c
  2971  000254  A4D8               	btfss	status,2,c
  2972  000256  D004               	goto	i2l147
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 256: state = prev_state;
  2976  000258  C03E  F092         	movff	_prev_state,_state
  2977  00025C  C03F  F093         	movff	_prev_state+1,_state+1
  2978  000260                     i2l147:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 257: }
  2982                           ;main.c: 259: if (temp == '1'){
  2983                           
  2984                           ; BSR set to: 0
  2985  000260  0E31               	movlw	49
  2986  000262  1834               	xorwf	interruptHandler@temp,w,c
  2987  000264  A4D8               	btfss	status,2,c
  2988  000266  D01C               	goto	i2l148
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 260: lcdInst(0xC0);;
  2992  000268  0EC0               	movlw	192
  2993  00026A  EC79  F00C         	call	i2_lcdInst
  2994                           
  2995                           ;main.c: 261: putch('B');
  2996  00026E  0E42               	movlw	66
  2997  000270  EC6F  F00C         	call	i2_putch
  2998                           
  2999                           ;main.c: 262: strcpy(temp_set,"B");
  3000  000274  0E4D               	movlw	low _temp_set
  3001  000276  6E07               	movwf	strcpy@to,c
  3002  000278  0E00               	movlw	high _temp_set
  3003  00027A  6E08               	movwf	strcpy@to+1,c
  3004  00027C  0EFC               	movlw	low STR_10
  3005  00027E  6E09               	movwf	strcpy@from,c
  3006  000280  0EFF               	movlw	high STR_10
  3007  000282  6E0A               	movwf	strcpy@from+1,c
  3008  000284  EC92  F00B         	call	_strcpy	;wreg free
  3009                           
  3010                           ;main.c: 263: strcat(current_set,temp_set);
  3011  000288  0EBC               	movlw	low _current_set
  3012  00028A  6E01               	movwf	strcat@to,c
  3013  00028C  0E00               	movlw	high _current_set
  3014  00028E  6E02               	movwf	strcat@to+1,c
  3015  000290  0E4D               	movlw	low _temp_set
  3016  000292  6E03               	movwf	strcat@from,c
  3017  000294  0E00               	movlw	high _temp_set
  3018  000296  6E04               	movwf	strcat@from+1,c
  3019  000298  ECF8  F00B         	call	_strcat	;wreg free
  3020                           
  3021                           ;main.c: 264: counter++;
  3022  00029C  4A48               	infsnz	_counter,f,c
  3023  00029E  2A49               	incf	_counter+1,f,c
  3024  0002A0                     i2l148:
  3025                           
  3026                           ;main.c: 265: }
  3027                           ;main.c: 267: if(temp == '2'){
  3028  0002A0  0E32               	movlw	50
  3029  0002A2  1834               	xorwf	interruptHandler@temp,w,c
  3030  0002A4  A4D8               	btfss	status,2,c
  3031  0002A6  D01C               	goto	i2l149
  3032                           
  3033                           ;main.c: 268: lcdInst(0xC0);;
  3034  0002A8  0EC0               	movlw	192
  3035  0002AA  EC79  F00C         	call	i2_lcdInst
  3036                           
  3037                           ;main.c: 269: putch('N');
  3038  0002AE  0E4E               	movlw	78
  3039  0002B0  EC6F  F00C         	call	i2_putch
  3040                           
  3041                           ;main.c: 270: strcpy(temp_set,"N");
  3042  0002B4  0E4D               	movlw	low _temp_set
  3043  0002B6  6E07               	movwf	strcpy@to,c
  3044  0002B8  0E00               	movlw	high _temp_set
  3045  0002BA  6E08               	movwf	strcpy@to+1,c
  3046  0002BC  0EEB               	movlw	low (STR_32+2)
  3047  0002BE  6E09               	movwf	strcpy@from,c
  3048  0002C0  0EFF               	movlw	high (STR_32+2)
  3049  0002C2  6E0A               	movwf	strcpy@from+1,c
  3050  0002C4  EC92  F00B         	call	_strcpy	;wreg free
  3051                           
  3052                           ;main.c: 271: strcat(current_set,temp_set);
  3053  0002C8  0EBC               	movlw	low _current_set
  3054  0002CA  6E01               	movwf	strcat@to,c
  3055  0002CC  0E00               	movlw	high _current_set
  3056  0002CE  6E02               	movwf	strcat@to+1,c
  3057  0002D0  0E4D               	movlw	low _temp_set
  3058  0002D2  6E03               	movwf	strcat@from,c
  3059  0002D4  0E00               	movlw	high _temp_set
  3060  0002D6  6E04               	movwf	strcat@from+1,c
  3061  0002D8  ECF8  F00B         	call	_strcat	;wreg free
  3062                           
  3063                           ;main.c: 272: counter++;
  3064  0002DC  4A48               	infsnz	_counter,f,c
  3065  0002DE  2A49               	incf	_counter+1,f,c
  3066  0002E0                     i2l149:
  3067                           
  3068                           ;main.c: 273: }
  3069                           ;main.c: 275: if(temp == '3'){
  3070  0002E0  0E33               	movlw	51
  3071  0002E2  1834               	xorwf	interruptHandler@temp,w,c
  3072  0002E4  A4D8               	btfss	status,2,c
  3073  0002E6  D01C               	goto	i2l150
  3074                           
  3075                           ;main.c: 276: lcdInst(0xC0);;
  3076  0002E8  0EC0               	movlw	192
  3077  0002EA  EC79  F00C         	call	i2_lcdInst
  3078                           
  3079                           ;main.c: 277: putch('S');
  3080  0002EE  0E53               	movlw	83
  3081  0002F0  EC6F  F00C         	call	i2_putch
  3082                           
  3083                           ;main.c: 279: strcpy(temp_set,"S");
  3084  0002F4  0E4D               	movlw	low _temp_set
  3085  0002F6  6E07               	movwf	strcpy@to,c
  3086  0002F8  0E00               	movlw	high _temp_set
  3087  0002FA  6E08               	movwf	strcpy@to+1,c
  3088  0002FC  0EEF               	movlw	low (STR_33+2)
  3089  0002FE  6E09               	movwf	strcpy@from,c
  3090  000300  0EFF               	movlw	high (STR_33+2)
  3091  000302  6E0A               	movwf	strcpy@from+1,c
  3092  000304  EC92  F00B         	call	_strcpy	;wreg free
  3093                           
  3094                           ;main.c: 280: strcat(current_set,temp_set);
  3095  000308  0EBC               	movlw	low _current_set
  3096  00030A  6E01               	movwf	strcat@to,c
  3097  00030C  0E00               	movlw	high _current_set
  3098  00030E  6E02               	movwf	strcat@to+1,c
  3099  000310  0E4D               	movlw	low _temp_set
  3100  000312  6E03               	movwf	strcat@from,c
  3101  000314  0E00               	movlw	high _temp_set
  3102  000316  6E04               	movwf	strcat@from+1,c
  3103  000318  ECF8  F00B         	call	_strcat	;wreg free
  3104                           
  3105                           ;main.c: 281: counter++;
  3106  00031C  4A48               	infsnz	_counter,f,c
  3107  00031E  2A49               	incf	_counter+1,f,c
  3108  000320                     i2l150:
  3109                           
  3110                           ;main.c: 282: }
  3111                           ;main.c: 283: if (temp == '4'){
  3112  000320  0E34               	movlw	52
  3113  000322  1834               	xorwf	interruptHandler@temp,w,c
  3114  000324  A4D8               	btfss	status,2,c
  3115  000326  D01C               	goto	i2l151
  3116                           
  3117                           ;main.c: 284: lcdInst(0xC0);;
  3118  000328  0EC0               	movlw	192
  3119  00032A  EC79  F00C         	call	i2_lcdInst
  3120                           
  3121                           ;main.c: 285: putch('W');
  3122  00032E  0E57               	movlw	87
  3123  000330  EC6F  F00C         	call	i2_putch
  3124                           
  3125                           ;main.c: 287: strcpy(temp_set,"W");
  3126  000334  0E4D               	movlw	low _temp_set
  3127  000336  6E07               	movwf	strcpy@to,c
  3128  000338  0E00               	movlw	high _temp_set
  3129  00033A  6E08               	movwf	strcpy@to+1,c
  3130  00033C  0EF3               	movlw	low (STR_34+2)
  3131  00033E  6E09               	movwf	strcpy@from,c
  3132  000340  0EFF               	movlw	high (STR_34+2)
  3133  000342  6E0A               	movwf	strcpy@from+1,c
  3134  000344  EC92  F00B         	call	_strcpy	;wreg free
  3135                           
  3136                           ;main.c: 288: strcat(current_set,temp_set);
  3137  000348  0EBC               	movlw	low _current_set
  3138  00034A  6E01               	movwf	strcat@to,c
  3139  00034C  0E00               	movlw	high _current_set
  3140  00034E  6E02               	movwf	strcat@to+1,c
  3141  000350  0E4D               	movlw	low _temp_set
  3142  000352  6E03               	movwf	strcat@from,c
  3143  000354  0E00               	movlw	high _temp_set
  3144  000356  6E04               	movwf	strcat@from+1,c
  3145  000358  ECF8  F00B         	call	_strcat	;wreg free
  3146                           
  3147                           ;main.c: 290: counter++;
  3148  00035C  4A48               	infsnz	_counter,f,c
  3149  00035E  2A49               	incf	_counter+1,f,c
  3150  000360                     i2l151:
  3151                           
  3152                           ;main.c: 291: }
  3153                           ;main.c: 293: if (keys[keypress] == '*'){
  3154  000360  5035               	movf	interruptHandler@keypress,w,c
  3155  000362  0D01               	mullw	1
  3156  000364  0EB9               	movlw	low _keys
  3157  000366  24F3               	addwf	prodl,w,c
  3158  000368  6EF6               	movwf	tblptrl,c
  3159  00036A  0EFE               	movlw	high _keys
  3160  00036C  20F4               	addwfc	prodh,w,c
  3161  00036E  6EF7               	movwf	tblptrh,c
  3162  000370                     	if	1	;There are 3 active tblptr bytes
  3163  000370  6AF8               	clrf	tblptru,c
  3164  000372  0E00               	movlw	low (__mediumconst shr (0+16))
  3165  000374  22F8               	addwfc	tblptru,f,c
  3166  000376                     	endif
  3167  000376  0008               	tblrd		*
  3168  000378  50F5               	movf	tablat,w,c
  3169  00037A  0A2A               	xorlw	42
  3170  00037C  A4D8               	btfss	status,2,c
  3171  00037E  D0D9               	goto	i2l152
  3172                           
  3173                           ;main.c: 296: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3174  000380  0E33               	movlw	51
  3175  000382  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3176  000384  0EBB               	movlw	187
  3177  000386  6E1B               	movwf	??_interruptHandler& (0+255),c
  3178  000388  0EE0               	movlw	224
  3179  00038A                     i2u276_47:
  3180  00038A  2EE8               	decfsz	wreg,f,c
  3181  00038C  D7FE               	bra	i2u276_47
  3182  00038E  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3183  000390  D7FC               	bra	i2u276_47
  3184  000392  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3185  000394  D7FA               	bra	i2u276_47
  3186                           
  3187                           ;main.c: 297: counter ++;
  3188  000396  4A48               	infsnz	_counter,f,c
  3189  000398  2A49               	incf	_counter+1,f,c
  3190                           
  3191                           ;main.c: 298: for (int i=0;i<20;i++){
  3192  00039A  0E00               	movlw	0
  3193  00039C  6E33               	movwf	interruptHandler@i+1,c
  3194  00039E  0E00               	movlw	0
  3195  0003A0  6E32               	movwf	interruptHandler@i,c
  3196  0003A2  BE33               	btfsc	interruptHandler@i+1,7,c
  3197  0003A4  D008               	goto	i2l153
  3198  0003A6  5033               	movf	interruptHandler@i+1,w,c
  3199  0003A8  E105               	bnz	i2u208_40
  3200  0003AA  0E14               	movlw	20
  3201  0003AC  5C32               	subwf	interruptHandler@i,w,c
  3202  0003AE  B0D8               	btfsc	status,0,c
  3203  0003B0  D088               	goto	i2u210_40
  3204  0003B2  D001               	goto	i2l153
  3205  0003B4                     i2u208_40:
  3206  0003B4  D086               	goto	i2u210_40
  3207  0003B6                     i2l153:
  3208                           
  3209                           ;main.c: 299: if (strncmp(current_set,strs[i],4) == 0){
  3210  0003B6  0EBC               	movlw	low _current_set
  3211  0003B8  6E07               	movwf	strncmp@s1,c
  3212  0003BA  0E00               	movlw	high _current_set
  3213  0003BC  6E08               	movwf	strncmp@s1+1,c
  3214  0003BE  C032  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  3215  0003C2  C033  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  3216  0003C6  0E00               	movlw	0
  3217  0003C8  6E04               	movwf	i2___wmul@multiplicand+1,c
  3218  0003CA  0E05               	movlw	5
  3219  0003CC  6E03               	movwf	i2___wmul@multiplicand,c
  3220  0003CE  EC44  F00C         	call	i2___wmul	;wreg free
  3221  0003D2  0EDA               	movlw	low _strs
  3222  0003D4  2401               	addwf	?i2___wmul,w,c
  3223  0003D6  6E09               	movwf	strncmp@s2,c
  3224  0003D8  0EFE               	movlw	high _strs
  3225  0003DA  2002               	addwfc	?i2___wmul+1,w,c
  3226  0003DC  6E0A               	movwf	strncmp@s2+1,c
  3227  0003DE  0E00               	movlw	0
  3228  0003E0  6E0C               	movwf	strncmp@len+1,c
  3229  0003E2  0E04               	movlw	4
  3230  0003E4  6E0B               	movwf	strncmp@len,c
  3231  0003E6  ECD8  F009         	call	_strncmp	;wreg free
  3232  0003EA  5007               	movf	?_strncmp,w,c
  3233  0003EC  1008               	iorwf	?_strncmp+1,w,c
  3234  0003EE  A4D8               	btfss	status,2,c
  3235  0003F0  D061               	goto	i2l155
  3236                           
  3237                           ;main.c: 300: strcpy(final_set[counter_step],current_set);
  3238  0003F2  C046  F001         	movff	_counter_step,i2___wmul@multiplier
  3239  0003F6  C047  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  3240  0003FA  0E00               	movlw	0
  3241  0003FC  6E04               	movwf	i2___wmul@multiplicand+1,c
  3242  0003FE  0E05               	movlw	5
  3243  000400  6E03               	movwf	i2___wmul@multiplicand,c
  3244  000402  EC44  F00C         	call	i2___wmul	;wreg free
  3245  000406  0E94               	movlw	low _final_set
  3246  000408  2401               	addwf	?i2___wmul,w,c
  3247  00040A  6E07               	movwf	strcpy@to,c
  3248  00040C  0E00               	movlw	high _final_set
  3249  00040E  2002               	addwfc	?i2___wmul+1,w,c
  3250  000410  6E08               	movwf	strcpy@to+1,c
  3251  000412  0EBC               	movlw	low _current_set
  3252  000414  6E09               	movwf	strcpy@from,c
  3253  000416  0E00               	movlw	high _current_set
  3254  000418  6E0A               	movwf	strcpy@from+1,c
  3255  00041A  EC92  F00B         	call	_strcpy	;wreg free
  3256                           
  3257                           ;main.c: 301: strcpy(current_set2,current_set);
  3258  00041E  0E52               	movlw	low _current_set2
  3259  000420  6E07               	movwf	strcpy@to,c
  3260  000422  0E00               	movlw	high _current_set2
  3261  000424  6E08               	movwf	strcpy@to+1,c
  3262  000426  0EBC               	movlw	low _current_set
  3263  000428  6E09               	movwf	strcpy@from,c
  3264  00042A  0E00               	movlw	high _current_set
  3265  00042C  6E0A               	movwf	strcpy@from+1,c
  3266  00042E  EC92  F00B         	call	_strcpy	;wreg free
  3267                           
  3268                           ;main.c: 304: valid = 1;
  3269  000432  0E00               	movlw	0
  3270  000434  6E43               	movwf	_valid+1,c
  3271  000436  0E01               	movlw	1
  3272  000438  6E42               	movwf	_valid,c
  3273                           
  3274                           ;main.c: 305: state = 2;
  3275  00043A  0E00               	movlw	0
  3276  00043C  0100               	movlb	0	; () banked
  3277  00043E  6F93               	movwf	(_state+1)& (0+255),b
  3278  000440  0E02               	movlw	2
  3279  000442  6F92               	movwf	_state& (0+255),b
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 307: initLCD();
  3283  000444  EC47  F00B         	call	i2_initLCD	;wreg free
  3284                           
  3285                           ;main.c: 308: printf("correct!");
  3286  000448  0E92               	movlw	low STR_14
  3287  00044A  6E0D               	movwf	i2printf@f,c
  3288  00044C  0EFF               	movlw	high STR_14
  3289  00044E  6E0E               	movwf	i2printf@f+1,c
  3290  000450  ECFD  F008         	call	i2_printf	;wreg free
  3291                           
  3292                           ;main.c: 309: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3293  000454  0E33               	movlw	51
  3294  000456  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3295  000458  0EBB               	movlw	187
  3296  00045A  6E1B               	movwf	??_interruptHandler& (0+255),c
  3297  00045C  0EE0               	movlw	224
  3298  00045E                     i2u277_47:
  3299  00045E  2EE8               	decfsz	wreg,f,c
  3300  000460  D7FE               	bra	i2u277_47
  3301  000462  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3302  000464  D7FC               	bra	i2u277_47
  3303  000466  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3304  000468  D7FA               	bra	i2u277_47
  3305                           
  3306                           ;main.c: 311: printf("%s",current_set);
  3307  00046A  0EF9               	movlw	low STR_3
  3308  00046C  6E0D               	movwf	i2printf@f,c
  3309  00046E  0EFF               	movlw	high STR_3
  3310  000470  6E0E               	movwf	i2printf@f+1,c
  3311  000472  0EBC               	movlw	low _current_set
  3312  000474  6E0F               	movwf	?i2_printf+2,c
  3313  000476  0E00               	movlw	high _current_set
  3314  000478  6E10               	movwf	?i2_printf+3,c
  3315  00047A  ECFD  F008         	call	i2_printf	;wreg free
  3316                           
  3317                           ;main.c: 313: strcpy(current_set,"");
  3318  00047E  0EBC               	movlw	low _current_set
  3319  000480  6E07               	movwf	strcpy@to,c
  3320  000482  0E00               	movlw	high _current_set
  3321  000484  6E08               	movwf	strcpy@to+1,c
  3322  000486  0E5D               	movlw	low (STR_9+14)
  3323  000488  6E09               	movwf	strcpy@from,c
  3324  00048A  0EFF               	movlw	high (STR_9+14)
  3325  00048C  6E0A               	movwf	strcpy@from+1,c
  3326  00048E  EC92  F00B         	call	_strcpy	;wreg free
  3327                           
  3328                           ;main.c: 314: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3329  000492  0E66               	movlw	102
  3330  000494  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3331  000496  0E76               	movlw	118
  3332  000498  6E1B               	movwf	??_interruptHandler& (0+255),c
  3333  00049A  0EC1               	movlw	193
  3334  00049C                     i2u278_47:
  3335  00049C  2EE8               	decfsz	wreg,f,c
  3336  00049E  D7FE               	bra	i2u278_47
  3337  0004A0  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3338  0004A2  D7FC               	bra	i2u278_47
  3339  0004A4  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3340  0004A6  D7FA               	bra	i2u278_47
  3341  0004A8  F000               	nop	
  3342                           
  3343                           ;main.c: 315: counter = 0;
  3344  0004AA  0E00               	movlw	0
  3345  0004AC  6E49               	movwf	_counter+1,c
  3346  0004AE  0E00               	movlw	0
  3347  0004B0  6E48               	movwf	_counter,c
  3348                           
  3349                           ;main.c: 316: break;
  3350  0004B2  D007               	goto	i2u210_40
  3351  0004B4                     i2l155:
  3352  0004B4  4A32               	infsnz	interruptHandler@i,f,c
  3353  0004B6  2A33               	incf	interruptHandler@i+1,f,c
  3354  0004B8  BE33               	btfsc	interruptHandler@i+1,7,c
  3355  0004BA  D77D               	goto	i2l153
  3356  0004BC  5033               	movf	interruptHandler@i+1,w,c
  3357  0004BE  E101               	bnz	i2l2690
  3358  0004C0  D774               	goto	L1
  3359  0004C2                     i2u210_40:
  3360  0004C2                     i2l2690:
  3361                           
  3362                           ;main.c: 318: }
  3363                           ;main.c: 319: }
  3364                           ;main.c: 320: if (valid != 1){
  3365  0004C2  0442               	decf	_valid,w,c
  3366  0004C4  1043               	iorwf	_valid+1,w,c
  3367  0004C6  B4D8               	btfsc	status,2,c
  3368  0004C8  D030               	goto	i2l156
  3369                           
  3370                           ;main.c: 322: initLCD();
  3371  0004CA  EC47  F00B         	call	i2_initLCD	;wreg free
  3372                           
  3373                           ;main.c: 323: printf("wrong set!");
  3374  0004CE  0E87               	movlw	low STR_17
  3375  0004D0  6E0D               	movwf	i2printf@f,c
  3376  0004D2  0EFF               	movlw	high STR_17
  3377  0004D4  6E0E               	movwf	i2printf@f+1,c
  3378  0004D6  ECFD  F008         	call	i2_printf	;wreg free
  3379                           
  3380                           ;main.c: 324: printf("%s",current_set);
  3381  0004DA  0EF9               	movlw	low STR_3
  3382  0004DC  6E0D               	movwf	i2printf@f,c
  3383  0004DE  0EFF               	movlw	high STR_3
  3384  0004E0  6E0E               	movwf	i2printf@f+1,c
  3385  0004E2  0EBC               	movlw	low _current_set
  3386  0004E4  6E0F               	movwf	?i2_printf+2,c
  3387  0004E6  0E00               	movlw	high _current_set
  3388  0004E8  6E10               	movwf	?i2_printf+3,c
  3389  0004EA  ECFD  F008         	call	i2_printf	;wreg free
  3390                           
  3391                           ;main.c: 325: strcpy(current_set,"");
  3392  0004EE  0EBC               	movlw	low _current_set
  3393  0004F0  6E07               	movwf	strcpy@to,c
  3394  0004F2  0E00               	movlw	high _current_set
  3395  0004F4  6E08               	movwf	strcpy@to+1,c
  3396  0004F6  0E5D               	movlw	low (STR_9+14)
  3397  0004F8  6E09               	movwf	strcpy@from,c
  3398  0004FA  0EFF               	movlw	high (STR_9+14)
  3399  0004FC  6E0A               	movwf	strcpy@from+1,c
  3400  0004FE  EC92  F00B         	call	_strcpy	;wreg free
  3401                           
  3402                           ;main.c: 326: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3403  000502  0E66               	movlw	102
  3404  000504  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3405  000506  0E76               	movlw	118
  3406  000508  6E1B               	movwf	??_interruptHandler& (0+255),c
  3407  00050A  0EC1               	movlw	193
  3408  00050C                     i2u279_47:
  3409  00050C  2EE8               	decfsz	wreg,f,c
  3410  00050E  D7FE               	bra	i2u279_47
  3411  000510  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3412  000512  D7FC               	bra	i2u279_47
  3413  000514  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3414  000516  D7FA               	bra	i2u279_47
  3415  000518  F000               	nop	
  3416                           
  3417                           ;main.c: 327: counter = 0;
  3418  00051A  0E00               	movlw	0
  3419  00051C  6E49               	movwf	_counter+1,c
  3420  00051E  0E00               	movlw	0
  3421  000520  6E48               	movwf	_counter,c
  3422                           
  3423                           ;main.c: 328: valid = 0;
  3424  000522  0E00               	movlw	0
  3425  000524  6E43               	movwf	_valid+1,c
  3426  000526  0E00               	movlw	0
  3427  000528  6E42               	movwf	_valid,c
  3428  00052A                     i2l156:
  3429                           
  3430                           ;main.c: 329: }
  3431                           ;main.c: 330: valid = 0;
  3432  00052A  0E00               	movlw	0
  3433  00052C  6E43               	movwf	_valid+1,c
  3434  00052E  0E00               	movlw	0
  3435  000530  6E42               	movwf	_valid,c
  3436  000532                     i2l152:
  3437                           
  3438                           ;main.c: 385: }
  3439                           ;main.c: 388: if (counter > 5){
  3440  000532  BE49               	btfsc	_counter+1,7,c
  3441  000534  D171               	goto	i2l2806
  3442  000536  5049               	movf	_counter+1,w,c
  3443  000538  E104               	bnz	i2u212_40
  3444  00053A  0E06               	movlw	6
  3445  00053C  5C48               	subwf	_counter,w,c
  3446  00053E  A0D8               	btfss	status,0,c
  3447  000540  D16B               	goto	i2l2806
  3448  000542                     i2u212_40:
  3449                           
  3450                           ;main.c: 390: initLCD();
  3451  000542  EC47  F00B         	call	i2_initLCD	;wreg free
  3452                           
  3453                           ;main.c: 391: printf("wrong!");
  3454  000546  0EB3               	movlw	low STR_20
  3455  000548  6E0D               	movwf	i2printf@f,c
  3456  00054A  0EFF               	movlw	high STR_20
  3457  00054C  6E0E               	movwf	i2printf@f+1,c
  3458  00054E  ECFD  F008         	call	i2_printf	;wreg free
  3459                           
  3460                           ;main.c: 393: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3461  000552  0E33               	movlw	51
  3462  000554  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3463  000556  0EBB               	movlw	187
  3464  000558  6E1B               	movwf	??_interruptHandler& (0+255),c
  3465  00055A  0EE0               	movlw	224
  3466  00055C                     i2u280_47:
  3467  00055C  2EE8               	decfsz	wreg,f,c
  3468  00055E  D7FE               	bra	i2u280_47
  3469  000560  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3470  000562  D7FC               	bra	i2u280_47
  3471  000564  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3472  000566  D7FA               	bra	i2u280_47
  3473                           
  3474                           ;main.c: 395: strcpy(current_set,"");
  3475  000568  0EBC               	movlw	low _current_set
  3476  00056A  6E07               	movwf	strcpy@to,c
  3477  00056C  0E00               	movlw	high _current_set
  3478  00056E  6E08               	movwf	strcpy@to+1,c
  3479  000570  0E5D               	movlw	low (STR_9+14)
  3480  000572  6E09               	movwf	strcpy@from,c
  3481  000574  0EFF               	movlw	high (STR_9+14)
  3482  000576  6E0A               	movwf	strcpy@from+1,c
  3483  000578  EC92  F00B         	call	_strcpy	;wreg free
  3484                           
  3485                           ;main.c: 398: counter = 0;
  3486  00057C  0E00               	movlw	0
  3487  00057E  6E49               	movwf	_counter+1,c
  3488  000580  0E00               	movlw	0
  3489  000582  6E48               	movwf	_counter,c
  3490  000584  D149               	goto	i2l2806
  3491  000586                     i2l146:
  3492                           
  3493                           ;main.c: 403: }
  3494                           ;main.c: 408: if (state ==2){
  3495  000586  0E02               	movlw	2
  3496  000588  0100               	movlb	0	; () banked
  3497  00058A  1992               	xorwf	_state& (0+255),w,b
  3498  00058C  1193               	iorwf	(_state+1)& (0+255),w,b
  3499  00058E  A4D8               	btfss	status,2,c
  3500  000590  D12F               	goto	i2l174
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 409: counter = 0;
  3504  000592  0E00               	movlw	0
  3505  000594  6E49               	movwf	_counter+1,c
  3506  000596  0E00               	movlw	0
  3507  000598  6E48               	movwf	_counter,c
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 411: lcdInst(0xC0);;
  3511  00059A  0EC0               	movlw	192
  3512  00059C  EC79  F00C         	call	i2_lcdInst
  3513                           
  3514                           ;main.c: 412: putch(keys[keypress]);
  3515  0005A0  5035               	movf	interruptHandler@keypress,w,c
  3516  0005A2  0D01               	mullw	1
  3517  0005A4  0EB9               	movlw	low _keys
  3518  0005A6  24F3               	addwf	prodl,w,c
  3519  0005A8  6EF6               	movwf	tblptrl,c
  3520  0005AA  0EFE               	movlw	high _keys
  3521  0005AC  20F4               	addwfc	prodh,w,c
  3522  0005AE  6EF7               	movwf	tblptrh,c
  3523  0005B0                     	if	1	;There are 3 active tblptr bytes
  3524  0005B0  6AF8               	clrf	tblptru,c
  3525  0005B2  0E00               	movlw	low (__mediumconst shr (0+16))
  3526  0005B4  22F8               	addwfc	tblptru,f,c
  3527  0005B6                     	endif
  3528  0005B6  0008               	tblrd		*
  3529  0005B8  50F5               	movf	tablat,w,c
  3530  0005BA  EC6F  F00C         	call	i2_putch
  3531                           
  3532                           ;main.c: 414: _delay((unsigned long)((500)*(40000000/4000.0)));
  3533  0005BE  0E1A               	movlw	26
  3534  0005C0  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3535  0005C2  0E5E               	movlw	94
  3536  0005C4  6E1B               	movwf	??_interruptHandler& (0+255),c
  3537  0005C6  0E6E               	movlw	110
  3538  0005C8                     i2u281_47:
  3539  0005C8  2EE8               	decfsz	wreg,f,c
  3540  0005CA  D7FE               	bra	i2u281_47
  3541  0005CC  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3542  0005CE  D7FC               	bra	i2u281_47
  3543  0005D0  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3544  0005D2  D7FA               	bra	i2u281_47
  3545  0005D4  D000               	nop2	
  3546                           
  3547                           ;main.c: 416: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  3548  0005D6  5035               	movf	interruptHandler@keypress,w,c
  3549  0005D8  0D01               	mullw	1
  3550  0005DA  0EB9               	movlw	low _keys
  3551  0005DC  24F3               	addwf	prodl,w,c
  3552  0005DE  6EF6               	movwf	tblptrl,c
  3553  0005E0  0EFE               	movlw	high _keys
  3554  0005E2  20F4               	addwfc	prodh,w,c
  3555  0005E4  6EF7               	movwf	tblptrh,c
  3556  0005E6                     	if	1	;There are 3 active tblptr bytes
  3557  0005E6  6AF8               	clrf	tblptru,c
  3558  0005E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3559  0005EA  22F8               	addwfc	tblptru,f,c
  3560  0005EC                     	endif
  3561  0005EC  0008               	tblrd		*
  3562  0005EE  50F5               	movf	tablat,w,c
  3563  0005F0  0A31               	xorlw	49
  3564  0005F2  B4D8               	btfsc	status,2,c
  3565  0005F4  D05A               	goto	i2l162
  3566  0005F6  5035               	movf	interruptHandler@keypress,w,c
  3567  0005F8  0D01               	mullw	1
  3568  0005FA  0EB9               	movlw	low _keys
  3569  0005FC  24F3               	addwf	prodl,w,c
  3570  0005FE  6EF6               	movwf	tblptrl,c
  3571  000600  0EFE               	movlw	high _keys
  3572  000602  20F4               	addwfc	prodh,w,c
  3573  000604  6EF7               	movwf	tblptrh,c
  3574  000606                     	if	1	;There are 3 active tblptr bytes
  3575  000606  6AF8               	clrf	tblptru,c
  3576  000608  0E00               	movlw	low (__mediumconst shr (0+16))
  3577  00060A  22F8               	addwfc	tblptru,f,c
  3578  00060C                     	endif
  3579  00060C  0008               	tblrd		*
  3580  00060E  50F5               	movf	tablat,w,c
  3581  000610  0A32               	xorlw	50
  3582  000612  B4D8               	btfsc	status,2,c
  3583  000614  D04A               	goto	i2l162
  3584  000616  5035               	movf	interruptHandler@keypress,w,c
  3585  000618  0D01               	mullw	1
  3586  00061A  0EB9               	movlw	low _keys
  3587  00061C  24F3               	addwf	prodl,w,c
  3588  00061E  6EF6               	movwf	tblptrl,c
  3589  000620  0EFE               	movlw	high _keys
  3590  000622  20F4               	addwfc	prodh,w,c
  3591  000624  6EF7               	movwf	tblptrh,c
  3592  000626                     	if	1	;There are 3 active tblptr bytes
  3593  000626  6AF8               	clrf	tblptru,c
  3594  000628  0E00               	movlw	low (__mediumconst shr (0+16))
  3595  00062A  22F8               	addwfc	tblptru,f,c
  3596  00062C                     	endif
  3597  00062C  0008               	tblrd		*
  3598  00062E  50F5               	movf	tablat,w,c
  3599  000630  0A33               	xorlw	51
  3600  000632  B4D8               	btfsc	status,2,c
  3601  000634  D03A               	goto	i2l162
  3602  000636  5035               	movf	interruptHandler@keypress,w,c
  3603  000638  0D01               	mullw	1
  3604  00063A  0EB9               	movlw	low _keys
  3605  00063C  24F3               	addwf	prodl,w,c
  3606  00063E  6EF6               	movwf	tblptrl,c
  3607  000640  0EFE               	movlw	high _keys
  3608  000642  20F4               	addwfc	prodh,w,c
  3609  000644  6EF7               	movwf	tblptrh,c
  3610  000646                     	if	1	;There are 3 active tblptr bytes
  3611  000646  6AF8               	clrf	tblptru,c
  3612  000648  0E00               	movlw	low (__mediumconst shr (0+16))
  3613  00064A  22F8               	addwfc	tblptru,f,c
  3614  00064C                     	endif
  3615  00064C  0008               	tblrd		*
  3616  00064E  50F5               	movf	tablat,w,c
  3617  000650  0A34               	xorlw	52
  3618  000652  B4D8               	btfsc	status,2,c
  3619  000654  D02A               	goto	i2l162
  3620  000656  D0CC               	goto	i2l174
  3621  000658                     
  3622                           ;main.c: 420: number = 1;
  3623  000658  0E00               	movlw	0
  3624  00065A  6E58               	movwf	_number+1,c
  3625  00065C  0E01               	movlw	1
  3626  00065E  D00F               	goto	L5
  3627  000660                     
  3628                           ;main.c: 423: number = 2;
  3629  000660  0E00               	movlw	0
  3630  000662  6E58               	movwf	_number+1,c
  3631  000664  0E02               	movlw	2
  3632  000666  D00B               	goto	L5
  3633  000668                     
  3634                           ;main.c: 426: number = 3;
  3635  000668  0E00               	movlw	0
  3636  00066A  6E58               	movwf	_number+1,c
  3637  00066C  0E03               	movlw	3
  3638  00066E  D007               	goto	L5
  3639  000670                     
  3640                           ;main.c: 429: number = 4;
  3641  000670  0E00               	movlw	0
  3642  000672  6E58               	movwf	_number+1,c
  3643  000674  0E04               	movlw	4
  3644  000676  D003               	goto	L5
  3645  000678                     
  3646                           ;main.c: 432: number = 5;
  3647  000678  0E00               	movlw	0
  3648  00067A  6E58               	movwf	_number+1,c
  3649  00067C  0E05               	movlw	5
  3650  00067E                     L5:
  3651  00067E  6E57               	movwf	_number,c
  3652                           
  3653                           ;main.c: 433: break;
  3654  000680  D031               	goto	i2l164
  3655  000682                     
  3656                           ;main.c: 435: initLCD();
  3657  000682  EC47  F00B         	call	i2_initLCD	;wreg free
  3658                           
  3659                           ;main.c: 436: printf("Wrong input");
  3660  000686  0E7B               	movlw	low STR_22
  3661  000688  6E0D               	movwf	i2printf@f,c
  3662  00068A  0EFF               	movlw	high STR_22
  3663  00068C  6E0E               	movwf	i2printf@f+1,c
  3664  00068E  ECFD  F008         	call	i2_printf	;wreg free
  3665                           
  3666                           ;main.c: 437: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3667  000692  0E33               	movlw	51
  3668  000694  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3669  000696  0EBB               	movlw	187
  3670  000698  6E1B               	movwf	??_interruptHandler& (0+255),c
  3671  00069A  0EE0               	movlw	224
  3672  00069C                     i2u282_47:
  3673  00069C  2EE8               	decfsz	wreg,f,c
  3674  00069E  D7FE               	bra	i2u282_47
  3675  0006A0  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3676  0006A2  D7FC               	bra	i2u282_47
  3677  0006A4  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3678  0006A6  D7FA               	bra	i2u282_47
  3679                           
  3680                           ;main.c: 438: }
  3681  0006A8  D01D               	goto	i2l164
  3682  0006AA                     i2l162:
  3683  0006AA  5035               	movf	interruptHandler@keypress,w,c
  3684  0006AC  0D01               	mullw	1
  3685  0006AE  0EB9               	movlw	low _keys
  3686  0006B0  24F3               	addwf	prodl,w,c
  3687  0006B2  6EF6               	movwf	tblptrl,c
  3688  0006B4  0EFE               	movlw	high _keys
  3689  0006B6  20F4               	addwfc	prodh,w,c
  3690  0006B8  6EF7               	movwf	tblptrh,c
  3691  0006BA                     	if	1	;There are 3 active tblptr bytes
  3692  0006BA  6AF8               	clrf	tblptru,c
  3693  0006BC  0E00               	movlw	low (__mediumconst shr (0+16))
  3694  0006BE  22F8               	addwfc	tblptru,f,c
  3695  0006C0                     	endif
  3696  0006C0  0008               	tblrd		*
  3697  0006C2  50F5               	movf	tablat,w,c
  3698                           
  3699                           ; Switch size 1, requested type "space"
  3700                           ; Number of cases is 5, Range of values is 49 to 53
  3701                           ; switch strategies available:
  3702                           ; Name         Instructions Cycles
  3703                           ; simple_byte           16     9 (average)
  3704                           ;	Chosen strategy is simple_byte
  3705  0006C4  0A31               	xorlw	49	; case 49
  3706  0006C6  B4D8               	btfsc	status,2,c
  3707  0006C8  D7C7               	goto	i2l163
  3708  0006CA  0A03               	xorlw	3	; case 50
  3709  0006CC  B4D8               	btfsc	status,2,c
  3710  0006CE  D7C8               	goto	i2l165
  3711  0006D0  0A01               	xorlw	1	; case 51
  3712  0006D2  B4D8               	btfsc	status,2,c
  3713  0006D4  D7C9               	goto	i2l166
  3714  0006D6  0A07               	xorlw	7	; case 52
  3715  0006D8  B4D8               	btfsc	status,2,c
  3716  0006DA  D7CA               	goto	i2l167
  3717  0006DC  0A01               	xorlw	1	; case 53
  3718  0006DE  B4D8               	btfsc	status,2,c
  3719  0006E0  D7CB               	goto	i2l168
  3720  0006E2  D7CF               	goto	i2l169
  3721  0006E4                     i2l164:
  3722                           
  3723                           ;main.c: 441: is_valid();
  3724  0006E4  EC33  F004         	call	_is_valid	;wreg free
  3725                           
  3726                           ;main.c: 443: if ( check() == 0){
  3727  0006E8  EC9C  F00A         	call	_check	;wreg free
  3728  0006EC  5001               	movf	?_check,w,c
  3729  0006EE  1002               	iorwf	?_check+1,w,c
  3730  0006F0  A4D8               	btfss	status,2,c
  3731  0006F2  D028               	goto	i2l170
  3732                           
  3733                           ;main.c: 444: initLCD();
  3734  0006F4  EC47  F00B         	call	i2_initLCD	;wreg free
  3735                           
  3736                           ;main.c: 445: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3737  0006F8  0E80               	movlw	128
  3738  0006FA  EC79  F00C         	call	i2_lcdInst
  3739  0006FE  0E41               	movlw	65
  3740  000700  6E1B               	movwf	??_interruptHandler& (0+255),c
  3741  000702  0EEE               	movlw	238
  3742  000704                     i2u283_47:
  3743  000704  2EE8               	decfsz	wreg,f,c
  3744  000706  D7FE               	bra	i2u283_47
  3745  000708  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3746  00070A  D7FC               	bra	i2u283_47
  3747  00070C  D000               	nop2	
  3748                           
  3749                           ;main.c: 446: printf("TOO MANY");
  3750  00070E  0E9B               	movlw	low STR_23
  3751  000710  6E0D               	movwf	i2printf@f,c
  3752  000712  0EFF               	movlw	high STR_23
  3753  000714  6E0E               	movwf	i2printf@f+1,c
  3754  000716  ECFD  F008         	call	i2_printf	;wreg free
  3755                           
  3756                           ;main.c: 448: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3757  00071A  0E33               	movlw	51
  3758  00071C  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3759  00071E  0EBB               	movlw	187
  3760  000720  6E1B               	movwf	??_interruptHandler& (0+255),c
  3761  000722  0EE0               	movlw	224
  3762  000724                     i2u284_47:
  3763  000724  2EE8               	decfsz	wreg,f,c
  3764  000726  D7FE               	bra	i2u284_47
  3765  000728  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3766  00072A  D7FC               	bra	i2u284_47
  3767  00072C  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3768  00072E  D7FA               	bra	i2u284_47
  3769                           
  3770                           ;main.c: 449: state = 2;
  3771  000730  0E00               	movlw	0
  3772  000732  0100               	movlb	0	; () banked
  3773  000734  6F93               	movwf	(_state+1)& (0+255),b
  3774  000736  0E02               	movlw	2
  3775  000738  6F92               	movwf	_state& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;main.c: 450: number = 0;
  3779  00073A  0E00               	movlw	0
  3780  00073C  6E58               	movwf	_number+1,c
  3781  00073E  0E00               	movlw	0
  3782  000740  6E57               	movwf	_number,c
  3783                           
  3784                           ;main.c: 451: }
  3785  000742  D056               	goto	i2l174
  3786  000744                     i2l170:
  3787                           
  3788                           ;main.c: 454: else if (counter_step >= assembly_step-1){
  3789                           
  3790                           ; BSR set to: 0
  3791  000744  0EFF               	movlw	255
  3792  000746  6E1B               	movwf	??_interruptHandler& (0+255),c
  3793  000748  0EFF               	movlw	255
  3794  00074A  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3795  00074C  C090  F01D         	movff	_assembly_step,??_interruptHandler+2
  3796  000750  C091  F01E         	movff	_assembly_step+1,??_interruptHandler+3
  3797  000754  501B               	movf	??_interruptHandler,w,c
  3798  000756  261D               	addwf	??_interruptHandler+2,f,c
  3799  000758  501C               	movf	??_interruptHandler+1,w,c
  3800  00075A  221E               	addwfc	??_interruptHandler+3,f,c
  3801  00075C  501D               	movf	??_interruptHandler+2,w,c
  3802  00075E  5C46               	subwf	_counter_step,w,c
  3803  000760  5047               	movf	_counter_step+1,w,c
  3804  000762  0A80               	xorlw	128
  3805  000764  6E1F               	movwf	(??_interruptHandler+4)& (0+255),c
  3806  000766  501E               	movf	??_interruptHandler+3,w,c
  3807  000768  0A80               	xorlw	128
  3808  00076A  581F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  3809  00076C  A0D8               	btfss	status,0,c
  3810  00076E  D013               	goto	i2l172
  3811                           
  3812                           ;main.c: 455: final_number[counter_step] = number;
  3813  000770  90D8               	bcf	status,0,c
  3814  000772  3446               	rlcf	_counter_step,w,c
  3815  000774  6ED9               	movwf	fsr2l,c
  3816  000776  3447               	rlcf	_counter_step+1,w,c
  3817  000778  6EDA               	movwf	fsr2h,c
  3818  00077A  0E80               	movlw	low _final_number
  3819  00077C  26D9               	addwf	fsr2l,f,c
  3820  00077E  0E00               	movlw	high _final_number
  3821  000780  22DA               	addwfc	fsr2h,f,c
  3822  000782  C057  FFDE         	movff	_number,postinc2
  3823  000786  C058  FFDD         	movff	_number+1,postdec2
  3824                           
  3825                           ;main.c: 456: state = 3;
  3826  00078A  0E00               	movlw	0
  3827  00078C  0100               	movlb	0	; () banked
  3828  00078E  6F93               	movwf	(_state+1)& (0+255),b
  3829  000790  0E03               	movlw	3
  3830  000792  6F92               	movwf	_state& (0+255),b
  3831                           
  3832                           ;main.c: 457: }
  3833  000794  D02D               	goto	i2l174
  3834  000796                     i2l172:
  3835                           
  3836                           ;main.c: 458: else if ( check() == 1){
  3837                           
  3838                           ; BSR set to: 0
  3839  000796  EC9C  F00A         	call	_check	;wreg free
  3840  00079A  0401               	decf	?_check,w,c
  3841  00079C  1002               	iorwf	?_check+1,w,c
  3842  00079E  A4D8               	btfss	status,2,c
  3843  0007A0  D027               	goto	i2l174
  3844                           
  3845                           ;main.c: 459: state = 1;
  3846  0007A2  0E00               	movlw	0
  3847  0007A4  0100               	movlb	0	; () banked
  3848  0007A6  6F93               	movwf	(_state+1)& (0+255),b
  3849  0007A8  0E01               	movlw	1
  3850  0007AA  6F92               	movwf	_state& (0+255),b
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;main.c: 460: initLCD();
  3854  0007AC  EC47  F00B         	call	i2_initLCD	;wreg free
  3855                           
  3856                           ;main.c: 461: printf("okay!");
  3857  0007B0  0EC0               	movlw	low STR_24
  3858  0007B2  6E0D               	movwf	i2printf@f,c
  3859  0007B4  0EFF               	movlw	high STR_24
  3860  0007B6  6E0E               	movwf	i2printf@f+1,c
  3861  0007B8  ECFD  F008         	call	i2_printf	;wreg free
  3862                           
  3863                           ;main.c: 462: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3864  0007BC  0E33               	movlw	51
  3865  0007BE  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3866  0007C0  0EBB               	movlw	187
  3867  0007C2  6E1B               	movwf	??_interruptHandler& (0+255),c
  3868  0007C4  0EE0               	movlw	224
  3869  0007C6                     i2u285_47:
  3870  0007C6  2EE8               	decfsz	wreg,f,c
  3871  0007C8  D7FE               	bra	i2u285_47
  3872  0007CA  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3873  0007CC  D7FC               	bra	i2u285_47
  3874  0007CE  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3875  0007D0  D7FA               	bra	i2u285_47
  3876                           
  3877                           ;main.c: 463: final_number[counter_step] = number;
  3878  0007D2  90D8               	bcf	status,0,c
  3879  0007D4  3446               	rlcf	_counter_step,w,c
  3880  0007D6  6ED9               	movwf	fsr2l,c
  3881  0007D8  3447               	rlcf	_counter_step+1,w,c
  3882  0007DA  6EDA               	movwf	fsr2h,c
  3883  0007DC  0E80               	movlw	low _final_number
  3884  0007DE  26D9               	addwf	fsr2l,f,c
  3885  0007E0  0E00               	movlw	high _final_number
  3886  0007E2  22DA               	addwfc	fsr2h,f,c
  3887  0007E4  C057  FFDE         	movff	_number,postinc2
  3888  0007E8  C058  FFDD         	movff	_number+1,postdec2
  3889                           
  3890                           ;main.c: 464: counter_step++;
  3891  0007EC  4A46               	infsnz	_counter_step,f,c
  3892  0007EE  2A47               	incf	_counter_step+1,f,c
  3893  0007F0                     i2l174:
  3894                           
  3895                           ;main.c: 465: }
  3896                           ;main.c: 468: }
  3897                           ;main.c: 470: }
  3898                           ;main.c: 477: B=0;N=0;S=0;W=0;
  3899  0007F0  0E00               	movlw	0
  3900  0007F2  6E3D               	movwf	_B+1,c
  3901  0007F4  0E00               	movlw	0
  3902  0007F6  6E3C               	movwf	_B,c
  3903  0007F8  0E00               	movlw	0
  3904  0007FA  6E3B               	movwf	_N+1,c
  3905  0007FC  0E00               	movlw	0
  3906  0007FE  6E3A               	movwf	_N,c
  3907  000800  0E00               	movlw	0
  3908  000802  6E39               	movwf	_S+1,c
  3909  000804  0E00               	movlw	0
  3910  000806  6E38               	movwf	_S,c
  3911  000808  0E00               	movlw	0
  3912  00080A  6E37               	movwf	_W+1,c
  3913  00080C  0E00               	movlw	0
  3914  00080E  6E36               	movwf	_W,c
  3915                           
  3916                           ;main.c: 478: total_number = 0;
  3917  000810  0E00               	movlw	0
  3918  000812  6E41               	movwf	_total_number+1,c
  3919  000814  0E00               	movlw	0
  3920  000816  6E40               	movwf	_total_number,c
  3921  000818                     i2l2806:
  3922                           
  3923                           ;main.c: 480: INT1IF = 0;
  3924  000818  90F0               	bcf	intcon3,0,c	;volatile
  3925  00081A                     i2l2808:
  3926                           
  3927                           ;main.c: 481: return;
  3928  00081A  C031  F05C         	movff	??_interruptHandler+22,btemp+3
  3929  00081E  C030  F05B         	movff	??_interruptHandler+21,btemp+2
  3930  000822  C02F  F05A         	movff	??_interruptHandler+20,btemp+1
  3931  000826  C02E  F059         	movff	??_interruptHandler+19,btemp
  3932  00082A  C02D  FFF5         	movff	??_interruptHandler+18,tablat
  3933  00082E  C02C  FFF8         	movff	??_interruptHandler+17,tblptru
  3934  000832  C02B  FFF7         	movff	??_interruptHandler+16,tblptrh
  3935  000836  C02A  FFF6         	movff	??_interruptHandler+15,tblptrl
  3936  00083A  C029  FFF4         	movff	??_interruptHandler+14,prodh
  3937  00083E  C028  FFF3         	movff	??_interruptHandler+13,prodl
  3938  000842  C027  FFDA         	movff	??_interruptHandler+12,fsr2h
  3939  000846  C026  FFD9         	movff	??_interruptHandler+11,fsr2l
  3940  00084A  C025  FFE2         	movff	??_interruptHandler+10,fsr1h
  3941  00084E  C024  FFE1         	movff	??_interruptHandler+9,fsr1l
  3942  000852  C023  FFEA         	movff	??_interruptHandler+8,fsr0h
  3943  000856  C022  FFE9         	movff	??_interruptHandler+7,fsr0l
  3944  00085A  C021  FFFB         	movff	??_interruptHandler+6,pclatu
  3945  00085E  C020  FFFA         	movff	??_interruptHandler+5,pclath
  3946  000862  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3947  000864  0011               	retfie		f
  3948  000866                     __end_of_interruptHandler:
  3949                           	opt stack 0
  3950                           pclatu	equ	0xFFB
  3951                           pclath	equ	0xFFA
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon3	equ	0xFF0
  3960                           indf0	equ	0xFEF
  3961                           postinc0	equ	0xFEE
  3962                           fsr0h	equ	0xFEA
  3963                           fsr0l	equ	0xFE9
  3964                           wreg	equ	0xFE8
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function i2_printf *****************
  3974 ;; Defined at:
  3975 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3978 ;;		 -> STR_24(6), STR_23(9), STR_22(12), STR_20(7), 
  3979 ;;		 -> STR_18(3), STR_17(11), STR_15(3), STR_14(9), 
  3980 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  3981 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  3982 ;;		 -> STR_1(15), 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  printf          4    0        struct .
  3985 ;;  printf          2   23[COMRAM] unsigned int 
  3986 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  3987 ;;		 -> STR_45(7), final_set(40), current_set(5), 
  3988 ;;  printf          2   19[COMRAM] PTR void [1]
  3989 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3990 ;;  printf          2    0        unsigned int 
  3991 ;;  printf          1   25[COMRAM] char 
  3992 ;;  printf          1   18[COMRAM] char 
  3993 ;;  printf          1   17[COMRAM] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  2   12[COMRAM] int 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;Total ram usage:       14 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    2
  4010 ;; This function calls:
  4011 ;;		i2___lwdiv
  4012 ;;		i2___lwmod
  4013 ;;		i2_putch
  4014 ;; This function is called by:
  4015 ;;		_interruptHandler
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text10
  4020  0011FA                     __ptext10:
  4021                           	opt stack 0
  4022  0011FA                     i2_printf:
  4023                           	opt stack 24
  4024                           
  4025                           ;doprnt.c: 466: va_list ap;
  4026                           ;doprnt.c: 499: signed char c;
  4027                           ;doprnt.c: 506: signed char prec;
  4028                           ;doprnt.c: 508: unsigned char flag;
  4029                           ;doprnt.c: 523: union {
  4030                           ;doprnt.c: 524: unsigned long vd;
  4031                           ;doprnt.c: 525: double integ;
  4032                           ;doprnt.c: 526: } tmpval;
  4033                           ;doprnt.c: 528: unsigned int val;
  4034                           ;doprnt.c: 529: unsigned len;
  4035                           ;doprnt.c: 530: const char * cp;
  4036                           ;doprnt.c: 533: *ap = __va_start();
  4037                           
  4038                           ;incstack = 0
  4039  0011FA  0E0F               	movlw	low (?i2_printf+2)
  4040  0011FC  6E14               	movwf	i2printf@ap,c
  4041  0011FE  0E00               	movlw	high (?i2_printf+2)
  4042  001200  6E15               	movwf	i2printf@ap+1,c
  4043                           
  4044                           ;doprnt.c: 536: while(c = *f++) {
  4045  001202  D0C8               	goto	i2u186_40
  4046  001204                     
  4047                           ;doprnt.c: 538: if(c != '%')
  4048  001204  0E25               	movlw	37
  4049  001206  181A               	xorwf	i2printf@c,w,c
  4050  001208  B4D8               	btfsc	status,2,c
  4051  00120A  D004               	goto	i2l290
  4052                           
  4053                           ;doprnt.c: 540: {
  4054                           ;doprnt.c: 541: (putch(c) );
  4055  00120C  501A               	movf	i2printf@c,w,c
  4056  00120E  EC6F  F00C         	call	i2_putch
  4057                           
  4058                           ;doprnt.c: 542: continue;
  4059  001212  D0C0               	goto	i2u186_40
  4060  001214                     i2l290:
  4061                           
  4062                           ;doprnt.c: 543: }
  4063                           ;doprnt.c: 548: flag = 0;
  4064  001214  0E00               	movlw	0
  4065  001216  6E12               	movwf	i2printf@flag,c
  4066                           
  4067                           ;doprnt.c: 635: switch(c = *f++) {
  4068  001218  D03F               	goto	i2l291
  4069  00121A                     
  4070                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4071  00121A  C014  FFD9         	movff	i2printf@ap,fsr2l
  4072  00121E  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4073  001222  CFDE F016          	movff	postinc2,i2printf@cp
  4074  001226  CFDD F017          	movff	postdec2,i2printf@cp+1
  4075  00122A  0E02               	movlw	2
  4076  00122C  2614               	addwf	i2printf@ap,f,c
  4077  00122E  0E00               	movlw	0
  4078  001230  2215               	addwfc	i2printf@ap+1,f,c
  4079                           
  4080                           ;doprnt.c: 740: if(!cp)
  4081  001232  5016               	movf	i2printf@cp,w,c
  4082  001234  1017               	iorwf	i2printf@cp+1,w,c
  4083  001236  A4D8               	btfss	status,2,c
  4084  001238  D01A               	goto	i2l299
  4085                           
  4086                           ;doprnt.c: 741: cp = "(null)";
  4087  00123A  0EAC               	movlw	low STR_45
  4088  00123C  6E16               	movwf	i2printf@cp,c
  4089  00123E  0EFF               	movlw	high STR_45
  4090  001240  6E17               	movwf	i2printf@cp+1,c
  4091                           
  4092                           ;doprnt.c: 777: while(*cp)
  4093  001242  D015               	goto	i2l299
  4094  001244                     
  4095                           ;doprnt.c: 778: (putch(*cp++) );
  4096  001244  C016  FFF6         	movff	i2printf@cp,tblptrl
  4097  001248  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4098  00124C  0E00               	movlw	low (__mediumconst shr (0+16))
  4099  00124E  6EF8               	movwf	tblptru,c
  4100  001250  0E0F               	movlw	(high __ramtop+-1)
  4101  001252  64F7               	cpfsgt	tblptrh,c
  4102  001254  D003               	bra	i2u178_47
  4103  001256  0008               	tblrd		*
  4104  001258  50F5               	movf	tablat,w,c
  4105  00125A  D005               	bra	i2u178_40
  4106  00125C                     i2u178_47:
  4107  00125C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4108  001260  CFF7 FFEA          	movff	tblptrh,fsr0h
  4109  001264  50EF               	movf	indf0,w,c
  4110  001266                     i2u178_40:
  4111  001266  EC6F  F00C         	call	i2_putch
  4112  00126A  4A16               	infsnz	i2printf@cp,f,c
  4113  00126C  2A17               	incf	i2printf@cp+1,f,c
  4114  00126E                     i2l299:
  4115  00126E  C016  FFF6         	movff	i2printf@cp,tblptrl
  4116  001272  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4117  001276  0E00               	movlw	low (__mediumconst shr (0+16))
  4118  001278  6EF8               	movwf	tblptru,c
  4119  00127A  0E0F               	movlw	(high __ramtop+-1)
  4120  00127C  64F7               	cpfsgt	tblptrh,c
  4121  00127E  D003               	bra	i2u179_47
  4122  001280  0008               	tblrd		*
  4123  001282  50F5               	movf	tablat,w,c
  4124  001284  D005               	bra	i2u179_40
  4125  001286                     i2u179_47:
  4126  001286  CFF6 FFE9          	movff	tblptrl,fsr0l
  4127  00128A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4128  00128E  50EF               	movf	indf0,w,c
  4129  001290                     i2u179_40:
  4130  001290  0900               	iorlw	0
  4131  001292  B4D8               	btfsc	status,2,c
  4132  001294  D07F               	goto	i2u186_40
  4133  001296  D7D6               	goto	i2l300
  4134  001298                     i2l291:
  4135  001298  C00D  FFF6         	movff	i2printf@f,tblptrl
  4136  00129C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4137  0012A0  4A0D               	infsnz	i2printf@f,f,c
  4138  0012A2  2A0E               	incf	i2printf@f+1,f,c
  4139  0012A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4140  0012A4  6AF8               	clrf	tblptru,c
  4141  0012A6                     	endif
  4142  0012A6                     	if	0	;tblptru may be non-zero
  4143  0012A6                     	endif
  4144  0012A6  0008               	tblrd		*
  4145  0012A8  CFF5 F01A          	movff	tablat,i2printf@c
  4146  0012AC  501A               	movf	i2printf@c,w,c
  4147                           
  4148                           ; Switch size 1, requested type "space"
  4149                           ; Number of cases is 4, Range of values is 0 to 115
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte           13     7 (average)
  4153                           ;	Chosen strategy is simple_byte
  4154  0012AE  0A00               	xorlw	0	; case 0
  4155  0012B0  B4D8               	btfsc	status,2,c
  4156  0012B2  0012               	return	
  4157  0012B4  0A64               	xorlw	100	; case 100
  4158  0012B6  B4D8               	btfsc	status,2,c
  4159  0012B8  D007               	goto	i2l296
  4160  0012BA  0A0D               	xorlw	13	; case 105
  4161  0012BC  B4D8               	btfsc	status,2,c
  4162  0012BE  D004               	goto	i2l296
  4163  0012C0  0A1A               	xorlw	26	; case 115
  4164  0012C2  B4D8               	btfsc	status,2,c
  4165  0012C4  D7AA               	goto	i2l297
  4166  0012C6  D066               	goto	i2u186_40
  4167  0012C8                     i2l296:
  4168                           
  4169                           ;doprnt.c: 1253: {
  4170                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4171  0012C8  C014  FFD9         	movff	i2printf@ap,fsr2l
  4172  0012CC  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4173  0012D0  CFDE F018          	movff	postinc2,i2printf@val
  4174  0012D4  CFDD F019          	movff	postdec2,i2printf@val+1
  4175  0012D8  0E02               	movlw	2
  4176  0012DA  2614               	addwf	i2printf@ap,f,c
  4177  0012DC  0E00               	movlw	0
  4178  0012DE  2215               	addwfc	i2printf@ap+1,f,c
  4179                           
  4180                           ;doprnt.c: 1261: if((int)val < 0) {
  4181  0012E0  AE19               	btfss	i2printf@val+1,7,c
  4182  0012E2  D006               	goto	i2l303
  4183                           
  4184                           ;doprnt.c: 1262: flag |= 0x03;
  4185  0012E4  0E03               	movlw	3
  4186  0012E6  1212               	iorwf	i2printf@flag,f,c
  4187                           
  4188                           ;doprnt.c: 1263: val = -val;
  4189  0012E8  6C18               	negf	i2printf@val,c
  4190  0012EA  1E19               	comf	i2printf@val+1,f,c
  4191  0012EC  B0D8               	btfsc	status,0,c
  4192  0012EE  2A19               	incf	i2printf@val+1,f,c
  4193  0012F0                     i2l303:
  4194                           
  4195                           ;doprnt.c: 1264: }
  4196                           ;doprnt.c: 1266: }
  4197                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4198  0012F0  0E01               	movlw	1
  4199  0012F2  6E1A               	movwf	i2printf@c,c
  4200  0012F4                     i2l2436:
  4201  0012F4  0E05               	movlw	5
  4202  0012F6  181A               	xorwf	i2printf@c,w,c
  4203  0012F8  B4D8               	btfsc	status,2,c
  4204  0012FA  D015               	goto	i2u184_40
  4205                           
  4206                           ;doprnt.c: 1306: if(val < dpowers[c])
  4207  0012FC  501A               	movf	i2printf@c,w,c
  4208  0012FE  0D02               	mullw	2
  4209  001300  0ECA               	movlw	low _dpowers
  4210  001302  24F3               	addwf	prodl,w,c
  4211  001304  6EF6               	movwf	tblptrl,c
  4212  001306  0EFE               	movlw	high _dpowers
  4213  001308  20F4               	addwfc	prodh,w,c
  4214  00130A  6EF7               	movwf	tblptrh,c
  4215  00130C                     	if	1	;There are 3 active tblptr bytes
  4216  00130C  6AF8               	clrf	tblptru,c
  4217  00130E  0E00               	movlw	low (__mediumconst shr (0+16))
  4218  001310  22F8               	addwfc	tblptru,f,c
  4219  001312                     	endif
  4220  001312  0009               	tblrd		*+
  4221  001314  50F5               	movf	tablat,w,c
  4222  001316  5C18               	subwf	i2printf@val,w,c
  4223  001318  0009               	tblrd		*+
  4224  00131A  50F5               	movf	tablat,w,c
  4225  00131C  5819               	subwfb	i2printf@val+1,w,c
  4226  00131E  A0D8               	btfss	status,0,c
  4227  001320  D002               	goto	i2u184_40
  4228                           
  4229                           ;doprnt.c: 1307: break;
  4230  001322  2A1A               	incf	i2printf@c,f,c
  4231  001324  D7E7               	goto	i2l2436
  4232  001326                     i2u184_40:
  4233                           
  4234                           ;doprnt.c: 1422: {
  4235                           ;doprnt.c: 1438: if(flag & 0x03)
  4236  001326  C012  F011         	movff	i2printf@flag,??i2_printf
  4237  00132A  0E03               	movlw	3
  4238  00132C  1611               	andwf	??i2_printf,f,c
  4239  00132E  B4D8               	btfsc	status,2,c
  4240  001330  D003               	goto	i2l307
  4241                           
  4242                           ;doprnt.c: 1439: (putch('-') );
  4243  001332  0E2D               	movlw	45
  4244  001334  EC6F  F00C         	call	i2_putch
  4245  001338                     i2l307:
  4246                           
  4247                           ;doprnt.c: 1469: }
  4248                           ;doprnt.c: 1472: prec = c;
  4249  001338  C01A  F013         	movff	i2printf@c,i2printf@prec
  4250                           
  4251                           ;doprnt.c: 1474: while(prec--) {
  4252  00133C  D027               	goto	i2l308
  4253  00133E                     
  4254                           ;doprnt.c: 1478: {
  4255                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4256  00133E  5013               	movf	i2printf@prec,w,c
  4257  001340  0D02               	mullw	2
  4258  001342  0ECA               	movlw	low _dpowers
  4259  001344  24F3               	addwf	prodl,w,c
  4260  001346  6EF6               	movwf	tblptrl,c
  4261  001348  0EFE               	movlw	high _dpowers
  4262  00134A  20F4               	addwfc	prodh,w,c
  4263  00134C  6EF7               	movwf	tblptrh,c
  4264  00134E                     	if	1	;There are 3 active tblptr bytes
  4265  00134E  6AF8               	clrf	tblptru,c
  4266  001350  0E00               	movlw	low (__mediumconst shr (0+16))
  4267  001352  22F8               	addwfc	tblptru,f,c
  4268  001354                     	endif
  4269  001354  0009               	tblrd		*+
  4270  001356  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4271  00135A  000A               	tblrd		*-
  4272  00135C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4273  001360  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4274  001364  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4275  001368  ECF8  F00A         	call	i2___lwdiv	;wreg free
  4276  00136C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4277  001370  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4278  001374  0E00               	movlw	0
  4279  001376  6E0B               	movwf	i2___lwmod@divisor+1,c
  4280  001378  0E0A               	movlw	10
  4281  00137A  6E0A               	movwf	i2___lwmod@divisor,c
  4282  00137C  ECD7  F00B         	call	i2___lwmod	;wreg free
  4283  001380  5008               	movf	?i2___lwmod,w,c
  4284  001382  0F30               	addlw	48
  4285  001384  6E1A               	movwf	i2printf@c,c
  4286                           
  4287                           ;doprnt.c: 1523: }
  4288                           ;doprnt.c: 1524: (putch(c) );
  4289  001386  501A               	movf	i2printf@c,w,c
  4290  001388  EC6F  F00C         	call	i2_putch
  4291  00138C                     i2l308:
  4292  00138C  0613               	decf	i2printf@prec,f,c
  4293  00138E  2813               	incf	i2printf@prec,w,c
  4294  001390  A4D8               	btfss	status,2,c
  4295  001392  D7D5               	goto	i2l309
  4296  001394                     i2u186_40:
  4297  001394  C00D  FFF6         	movff	i2printf@f,tblptrl
  4298  001398  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4299  00139C  4A0D               	infsnz	i2printf@f,f,c
  4300  00139E  2A0E               	incf	i2printf@f+1,f,c
  4301  0013A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4302  0013A0  6AF8               	clrf	tblptru,c
  4303  0013A2                     	endif
  4304  0013A2                     	if	0	;tblptru may be non-zero
  4305  0013A2                     	endif
  4306  0013A2  0008               	tblrd		*
  4307  0013A4  CFF5 F01A          	movff	tablat,i2printf@c
  4308  0013A8  501A               	movf	i2printf@c,w,c
  4309  0013AA  B4D8               	btfsc	status,2,c
  4310  0013AC  0012               	return	
  4311  0013AE  D72A               	goto	i2l289
  4312  0013B0                     __end_ofi2_printf:
  4313                           	opt stack 0
  4314                           pclatu	equ	0xFFB
  4315                           pclath	equ	0xFFA
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           intcon3	equ	0xFF0
  4324                           indf0	equ	0xFEF
  4325                           postinc0	equ	0xFEE
  4326                           fsr0h	equ	0xFEA
  4327                           fsr0l	equ	0xFE9
  4328                           wreg	equ	0xFE8
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function i2_putch *****************
  4338 ;; Defined at:
  4339 ;;		line 24 in file "lcd.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  data            1    wreg     unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  data            1    2[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        1 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    1
  4360 ;; This function calls:
  4361 ;;		i2_lcdNibble
  4362 ;; This function is called by:
  4363 ;;		_interruptHandler
  4364 ;;		i2_printf
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text11
  4369  0018DE                     __ptext11:
  4370                           	opt stack 0
  4371  0018DE                     i2_putch:
  4372                           	opt stack 25
  4373                           
  4374                           ;incstack = 0
  4375                           ;i2putch@data stored from wreg
  4376  0018DE  6E03               	movwf	i2putch@data,c
  4377                           
  4378                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4379  0018E0  848C               	bsf	3980,2,c	;volatile
  4380                           
  4381                           ;lcd.c: 33: lcdNibble(data);
  4382  0018E2  5003               	movf	i2putch@data,w,c
  4383  0018E4  EC5D  F00A         	call	i2_lcdNibble
  4384                           
  4385                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4386  0018E8  0EC8               	movlw	200
  4387  0018EA                     i2u286_47:
  4388  0018EA  D000               	nop2	
  4389  0018EC  2EE8               	decfsz	wreg,f,c
  4390  0018EE  D7FD               	bra	i2u286_47
  4391  0018F0  0012               	return		;funcret
  4392  0018F2                     __end_ofi2_putch:
  4393                           	opt stack 0
  4394                           pclatu	equ	0xFFB
  4395                           pclath	equ	0xFFA
  4396                           tblptru	equ	0xFF8
  4397                           tblptrh	equ	0xFF7
  4398                           tblptrl	equ	0xFF6
  4399                           tablat	equ	0xFF5
  4400                           prodh	equ	0xFF4
  4401                           prodl	equ	0xFF3
  4402                           intcon	equ	0xFF2
  4403                           intcon3	equ	0xFF0
  4404                           indf0	equ	0xFEF
  4405                           postinc0	equ	0xFEE
  4406                           fsr0h	equ	0xFEA
  4407                           fsr0l	equ	0xFE9
  4408                           wreg	equ	0xFE8
  4409                           fsr1h	equ	0xFE2
  4410                           fsr1l	equ	0xFE1
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function i2___lwmod *****************
  4418 ;; Defined at:
  4419 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  dividend        2    7[COMRAM] unsigned int 
  4422 ;;  divisor         2    9[COMRAM] unsigned int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  2    7[COMRAM] unsigned int 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:        5 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		i2_printf
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text12
  4448  0017AE                     __ptext12:
  4449                           	opt stack 0
  4450  0017AE                     i2___lwmod:
  4451                           	opt stack 25
  4452                           
  4453                           ;incstack = 0
  4454  0017AE  500A               	movf	i2___lwmod@divisor,w,c
  4455  0017B0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4456  0017B2  B4D8               	btfsc	status,2,c
  4457  0017B4  D018               	goto	i2l731
  4458  0017B6  0E01               	movlw	1
  4459  0017B8  6E0C               	movwf	i2___lwmod@counter,c
  4460  0017BA  D004               	goto	i2l726
  4461  0017BC  90D8               	bcf	status,0,c
  4462  0017BE  360A               	rlcf	i2___lwmod@divisor,f,c
  4463  0017C0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4464  0017C2  2A0C               	incf	i2___lwmod@counter,f,c
  4465  0017C4                     i2l726:
  4466  0017C4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4467  0017C6  D7FA               	goto	i2l727
  4468  0017C8                     i2u130_40:
  4469  0017C8  500A               	movf	i2___lwmod@divisor,w,c
  4470  0017CA  5C08               	subwf	i2___lwmod@dividend,w,c
  4471  0017CC  500B               	movf	i2___lwmod@divisor+1,w,c
  4472  0017CE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4473  0017D0  A0D8               	btfss	status,0,c
  4474  0017D2  D004               	goto	i2l730
  4475  0017D4  500A               	movf	i2___lwmod@divisor,w,c
  4476  0017D6  5E08               	subwf	i2___lwmod@dividend,f,c
  4477  0017D8  500B               	movf	i2___lwmod@divisor+1,w,c
  4478  0017DA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4479  0017DC                     i2l730:
  4480  0017DC  90D8               	bcf	status,0,c
  4481  0017DE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4482  0017E0  320A               	rrcf	i2___lwmod@divisor,f,c
  4483  0017E2  2E0C               	decfsz	i2___lwmod@counter,f,c
  4484  0017E4  D7F1               	goto	i2u130_40
  4485  0017E6                     i2l731:
  4486  0017E6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4487  0017EA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4488  0017EE  0012               	return		;funcret
  4489  0017F0                     __end_ofi2___lwmod:
  4490                           	opt stack 0
  4491                           pclatu	equ	0xFFB
  4492                           pclath	equ	0xFFA
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           intcon	equ	0xFF2
  4500                           intcon3	equ	0xFF0
  4501                           indf0	equ	0xFEF
  4502                           postinc0	equ	0xFEE
  4503                           fsr0h	equ	0xFEA
  4504                           fsr0l	equ	0xFE9
  4505                           wreg	equ	0xFE8
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function i2___lwdiv *****************
  4515 ;; Defined at:
  4516 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  dividend        2    0[COMRAM] unsigned int 
  4519 ;;  divisor         2    2[COMRAM] unsigned int 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4522 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  2    0[COMRAM] unsigned int 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;Total ram usage:        7 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		i2_printf
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text13
  4546  0015F0                     __ptext13:
  4547                           	opt stack 0
  4548  0015F0                     i2___lwdiv:
  4549                           	opt stack 25
  4550                           
  4551                           ;incstack = 0
  4552  0015F0  0E00               	movlw	0
  4553  0015F2  6E06               	movwf	i2___lwdiv@quotient+1,c
  4554  0015F4  0E00               	movlw	0
  4555  0015F6  6E05               	movwf	i2___lwdiv@quotient,c
  4556  0015F8  5003               	movf	i2___lwdiv@divisor,w,c
  4557  0015FA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4558  0015FC  B4D8               	btfsc	status,2,c
  4559  0015FE  D01C               	goto	i2l721
  4560  001600  0E01               	movlw	1
  4561  001602  6E07               	movwf	i2___lwdiv@counter,c
  4562  001604  D004               	goto	i2l716
  4563  001606  90D8               	bcf	status,0,c
  4564  001608  3603               	rlcf	i2___lwdiv@divisor,f,c
  4565  00160A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4566  00160C  2A07               	incf	i2___lwdiv@counter,f,c
  4567  00160E                     i2l716:
  4568  00160E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4569  001610  D7FA               	goto	i2l717
  4570  001612                     i2u127_40:
  4571  001612  90D8               	bcf	status,0,c
  4572  001614  3605               	rlcf	i2___lwdiv@quotient,f,c
  4573  001616  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4574  001618  5003               	movf	i2___lwdiv@divisor,w,c
  4575  00161A  5C01               	subwf	i2___lwdiv@dividend,w,c
  4576  00161C  5004               	movf	i2___lwdiv@divisor+1,w,c
  4577  00161E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4578  001620  A0D8               	btfss	status,0,c
  4579  001622  D005               	goto	i2l720
  4580  001624  5003               	movf	i2___lwdiv@divisor,w,c
  4581  001626  5E01               	subwf	i2___lwdiv@dividend,f,c
  4582  001628  5004               	movf	i2___lwdiv@divisor+1,w,c
  4583  00162A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4584  00162C  8005               	bsf	i2___lwdiv@quotient,0,c
  4585  00162E                     i2l720:
  4586  00162E  90D8               	bcf	status,0,c
  4587  001630  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4588  001632  3203               	rrcf	i2___lwdiv@divisor,f,c
  4589  001634  2E07               	decfsz	i2___lwdiv@counter,f,c
  4590  001636  D7ED               	goto	i2u127_40
  4591  001638                     i2l721:
  4592  001638  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4593  00163C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4594  001640  0012               	return		;funcret
  4595  001642                     __end_ofi2___lwdiv:
  4596                           	opt stack 0
  4597                           pclatu	equ	0xFFB
  4598                           pclath	equ	0xFFA
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           intcon3	equ	0xFF0
  4607                           indf0	equ	0xFEF
  4608                           postinc0	equ	0xFEE
  4609                           fsr0h	equ	0xFEA
  4610                           fsr0l	equ	0xFE9
  4611                           wreg	equ	0xFE8
  4612                           fsr1h	equ	0xFE2
  4613                           fsr1l	equ	0xFE1
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           fsr2h	equ	0xFDA
  4617                           fsr2l	equ	0xFD9
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function i2_initLCD *****************
  4621 ;; Defined at:
  4622 ;;		line 60 in file "lcd.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      void 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;Total ram usage:        1 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    2
  4643 ;; This function calls:
  4644 ;;		i2_lcdInst
  4645 ;; This function is called by:
  4646 ;;		_interruptHandler
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text14
  4651  00168E                     __ptext14:
  4652                           	opt stack 0
  4653  00168E                     i2_initLCD:
  4654                           	opt stack 24
  4655                           
  4656                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4657                           
  4658                           ;incstack = 0
  4659  00168E  0EC3               	movlw	195
  4660  001690  6E04               	movwf	??i2_initLCD& (0+255),c
  4661  001692  0ECD               	movlw	205
  4662  001694                     i2u287_47:
  4663  001694  2EE8               	decfsz	wreg,f,c
  4664  001696  D7FE               	bra	i2u287_47
  4665  001698  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4666  00169A  D7FC               	bra	i2u287_47
  4667  00169C  F000               	nop	
  4668                           
  4669                           ;lcd.c: 69: lcdInst(0b00110011);
  4670  00169E  0E33               	movlw	51
  4671  0016A0  EC79  F00C         	call	i2_lcdInst
  4672                           
  4673                           ;lcd.c: 70: lcdInst(0b00110010);
  4674  0016A4  0E32               	movlw	50
  4675  0016A6  EC79  F00C         	call	i2_lcdInst
  4676                           
  4677                           ;lcd.c: 71: lcdInst(0b00101000);
  4678  0016AA  0E28               	movlw	40
  4679  0016AC  EC79  F00C         	call	i2_lcdInst
  4680                           
  4681                           ;lcd.c: 72: lcdInst(0b00001111);
  4682  0016B0  0E0F               	movlw	15
  4683  0016B2  EC79  F00C         	call	i2_lcdInst
  4684                           
  4685                           ;lcd.c: 73: lcdInst(0b00000110);
  4686  0016B6  0E06               	movlw	6
  4687  0016B8  EC79  F00C         	call	i2_lcdInst
  4688                           
  4689                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4690  0016BC  0E01               	movlw	1
  4691  0016BE  EC79  F00C         	call	i2_lcdInst
  4692  0016C2  0EC3               	movlw	195
  4693  0016C4  6E04               	movwf	??i2_initLCD& (0+255),c
  4694  0016C6  0ECD               	movlw	205
  4695  0016C8                     i2u288_47:
  4696  0016C8  2EE8               	decfsz	wreg,f,c
  4697  0016CA  D7FE               	bra	i2u288_47
  4698  0016CC  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4699  0016CE  D7FC               	bra	i2u288_47
  4700  0016D0  F000               	nop	
  4701                           
  4702                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4703  0016D2  0E0F               	movlw	15
  4704  0016D4  EC79  F00C         	call	i2_lcdInst
  4705  0016D8  0012               	return		;funcret
  4706  0016DA                     __end_ofi2_initLCD:
  4707                           	opt stack 0
  4708                           pclatu	equ	0xFFB
  4709                           pclath	equ	0xFFA
  4710                           tblptru	equ	0xFF8
  4711                           tblptrh	equ	0xFF7
  4712                           tblptrl	equ	0xFF6
  4713                           tablat	equ	0xFF5
  4714                           prodh	equ	0xFF4
  4715                           prodl	equ	0xFF3
  4716                           intcon	equ	0xFF2
  4717                           intcon3	equ	0xFF0
  4718                           indf0	equ	0xFEF
  4719                           postinc0	equ	0xFEE
  4720                           fsr0h	equ	0xFEA
  4721                           fsr0l	equ	0xFE9
  4722                           wreg	equ	0xFE8
  4723                           fsr1h	equ	0xFE2
  4724                           fsr1l	equ	0xFE1
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function i2_lcdInst *****************
  4732 ;; Defined at:
  4733 ;;		line 11 in file "lcd.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  data            1    wreg     unsigned char 
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  data            1    2[COMRAM] unsigned char 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        1 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    1
  4754 ;; This function calls:
  4755 ;;		i2_lcdNibble
  4756 ;; This function is called by:
  4757 ;;		_interruptHandler
  4758 ;;		i2_initLCD
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text15
  4763  0018F2                     __ptext15:
  4764                           	opt stack 0
  4765  0018F2                     i2_lcdInst:
  4766                           	opt stack 25
  4767                           
  4768                           ;incstack = 0
  4769                           ;i2lcdInst@data stored from wreg
  4770  0018F2  6E03               	movwf	i2lcdInst@data,c
  4771                           
  4772                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4773  0018F4  948C               	bcf	3980,2,c	;volatile
  4774                           
  4775                           ;lcd.c: 20: lcdNibble(data);
  4776  0018F6  5003               	movf	i2lcdInst@data,w,c
  4777  0018F8  EC5D  F00A         	call	i2_lcdNibble
  4778                           
  4779                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4780  0018FC  0EC8               	movlw	200
  4781  0018FE                     i2u289_47:
  4782  0018FE  D000               	nop2	
  4783  001900  2EE8               	decfsz	wreg,f,c
  4784  001902  D7FD               	bra	i2u289_47
  4785  001904  0012               	return		;funcret
  4786  001906                     __end_ofi2_lcdInst:
  4787                           	opt stack 0
  4788                           pclatu	equ	0xFFB
  4789                           pclath	equ	0xFFA
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           intcon3	equ	0xFF0
  4798                           indf0	equ	0xFEF
  4799                           postinc0	equ	0xFEE
  4800                           fsr0h	equ	0xFEA
  4801                           fsr0l	equ	0xFE9
  4802                           wreg	equ	0xFE8
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function i2_lcdNibble *****************
  4812 ;; Defined at:
  4813 ;;		line 37 in file "lcd.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  data            1    wreg     unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  data            1    1[COMRAM] unsigned char 
  4818 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      void 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        2 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		i2_lcdInst
  4838 ;;		i2_putch
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text16
  4843  0014BA                     __ptext16:
  4844                           	opt stack 0
  4845  0014BA                     i2_lcdNibble:
  4846                           	opt stack 25
  4847                           
  4848                           ;incstack = 0
  4849                           ;i2lcdNibble@data stored from wreg
  4850  0014BA  6E02               	movwf	i2lcdNibble@data,c
  4851                           
  4852                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4853  0014BC  5002               	movf	i2lcdNibble@data,w,c
  4854  0014BE  0BF0               	andlw	240
  4855  0014C0  6E01               	movwf	i2lcdNibble@temp,c
  4856                           
  4857                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4858  0014C2  508C               	movf	3980,w,c	;volatile
  4859  0014C4  0B0F               	andlw	15
  4860  0014C6  6E8C               	movwf	3980,c	;volatile
  4861                           
  4862                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4863  0014C8  5001               	movf	i2lcdNibble@temp,w,c
  4864  0014CA  108C               	iorwf	3980,w,c	;volatile
  4865  0014CC  6E8C               	movwf	3980,c	;volatile
  4866                           
  4867                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4868  0014CE  0E00               	movlw	0
  4869  0014D0  BEF2               	btfsc	intcon,7,c	;volatile
  4870  0014D2  0E01               	movlw	1
  4871  0014D4  6E4A               	movwf	lcd@LCDinterruptState,c
  4872  0014D6  9EF2               	bcf	intcon,7,c	;volatile
  4873  0014D8  868C               	bsf	3980,3,c	;volatile
  4874  0014DA  0E53               	movlw	83
  4875  0014DC                     i2u290_47:
  4876  0014DC  2EE8               	decfsz	wreg,f,c
  4877  0014DE  D7FE               	bra	i2u290_47
  4878  0014E0  F000               	nop	
  4879  0014E2  968C               	bcf	3980,3,c	;volatile
  4880  0014E4  0EC8               	movlw	200
  4881  0014E6                     i2u291_47:
  4882  0014E6  D000               	nop2	
  4883  0014E8  2EE8               	decfsz	wreg,f,c
  4884  0014EA  D7FD               	bra	i2u291_47
  4885  0014EC  B04A               	btfsc	lcd@LCDinterruptState,0,c
  4886  0014EE  D002               	bra	i2u116_45
  4887  0014F0  9EF2               	bcf	intcon,7,c	;volatile
  4888  0014F2  D001               	bra	i2u116_46
  4889  0014F4                     i2u116_45:
  4890  0014F4  8EF2               	bsf	intcon,7,c	;volatile
  4891  0014F6                     i2u116_46:
  4892                           
  4893                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4894  0014F6  3802               	swapf	i2lcdNibble@data,w,c
  4895  0014F8  0BF0               	andlw	240
  4896  0014FA  6E02               	movwf	i2lcdNibble@data,c
  4897                           
  4898                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4899  0014FC  5002               	movf	i2lcdNibble@data,w,c
  4900  0014FE  0BF0               	andlw	240
  4901  001500  6E01               	movwf	i2lcdNibble@temp,c
  4902                           
  4903                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4904  001502  508C               	movf	3980,w,c	;volatile
  4905  001504  0B0F               	andlw	15
  4906  001506  6E8C               	movwf	3980,c	;volatile
  4907                           
  4908                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4909  001508  5001               	movf	i2lcdNibble@temp,w,c
  4910  00150A  108C               	iorwf	3980,w,c	;volatile
  4911  00150C  6E8C               	movwf	3980,c	;volatile
  4912                           
  4913                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4914  00150E  0E00               	movlw	0
  4915  001510  BEF2               	btfsc	intcon,7,c	;volatile
  4916  001512  0E01               	movlw	1
  4917  001514  6E4A               	movwf	lcd@LCDinterruptState,c
  4918  001516  9EF2               	bcf	intcon,7,c	;volatile
  4919  001518  868C               	bsf	3980,3,c	;volatile
  4920  00151A  0E53               	movlw	83
  4921  00151C                     i2u292_47:
  4922  00151C  2EE8               	decfsz	wreg,f,c
  4923  00151E  D7FE               	bra	i2u292_47
  4924  001520  F000               	nop	
  4925  001522  968C               	bcf	3980,3,c	;volatile
  4926  001524  0EC8               	movlw	200
  4927  001526                     i2u293_47:
  4928  001526  D000               	nop2	
  4929  001528  2EE8               	decfsz	wreg,f,c
  4930  00152A  D7FD               	bra	i2u293_47
  4931  00152C  B04A               	btfsc	lcd@LCDinterruptState,0,c
  4932  00152E  D002               	bra	i2u117_45
  4933  001530  9EF2               	bcf	intcon,7,c	;volatile
  4934  001532  D001               	bra	i2u117_46
  4935  001534                     i2u117_45:
  4936  001534  8EF2               	bsf	intcon,7,c	;volatile
  4937  001536                     i2u117_46:
  4938  001536  0012               	return		;funcret
  4939  001538                     __end_ofi2_lcdNibble:
  4940                           	opt stack 0
  4941                           pclatu	equ	0xFFB
  4942                           pclath	equ	0xFFA
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           intcon3	equ	0xFF0
  4951                           indf0	equ	0xFEF
  4952                           postinc0	equ	0xFEE
  4953                           fsr0h	equ	0xFEA
  4954                           fsr0l	equ	0xFE9
  4955                           wreg	equ	0xFE8
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _strncmp *****************
  4965 ;; Defined at:
  4966 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  4969 ;;		 -> current_set(5), 
  4970 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  4971 ;;		 -> strs(100), 
  4972 ;;  len             2   10[COMRAM] unsigned int 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  2    6[COMRAM] int 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4984 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;Total ram usage:        9 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_interruptHandler
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text17
  4998  0013B0                     __ptext17:
  4999                           	opt stack 0
  5000  0013B0                     _strncmp:
  5001                           	opt stack 26
  5002                           
  5003                           ;incstack = 0
  5004  0013B0  D035               	goto	i2l883
  5005  0013B2                     i2l2200:
  5006  0013B2  C007  FFD9         	movff	strncmp@s1,fsr2l
  5007  0013B6  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  5008  0013BA  50DF               	movf	indf2,w,c
  5009  0013BC  B4D8               	btfsc	status,2,c
  5010  0013BE  D010               	goto	i2u149_40
  5011  0013C0  C007  FFD9         	movff	strncmp@s1,fsr2l
  5012  0013C4  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  5013  0013C8  50DF               	movf	indf2,w,c
  5014  0013CA  6E0D               	movwf	??_strncmp& (0+255),c
  5015  0013CC  C009  FFF6         	movff	strncmp@s2,tblptrl
  5016  0013D0  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  5017  0013D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5018  0013D4  6AF8               	clrf	tblptru,c
  5019  0013D6                     	endif
  5020  0013D6                     	if	0	;tblptru may be non-zero
  5021  0013D6                     	endif
  5022  0013D6  0008               	tblrd		*
  5023  0013D8  50F5               	movf	tablat,w,c
  5024  0013DA  180D               	xorwf	??_strncmp,w,c
  5025  0013DC  B4D8               	btfsc	status,2,c
  5026  0013DE  D01A               	goto	i2l885
  5027  0013E0                     i2u149_40:
  5028  0013E0  C009  FFF6         	movff	strncmp@s2,tblptrl
  5029  0013E4  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  5030  0013E8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5031  0013E8  6AF8               	clrf	tblptru,c
  5032  0013EA                     	endif
  5033  0013EA                     	if	0	;tblptru may be non-zero
  5034  0013EA                     	endif
  5035  0013EA  0008               	tblrd		*
  5036  0013EC  50F5               	movf	tablat,w,c
  5037  0013EE  6E0D               	movwf	??_strncmp& (0+255),c
  5038  0013F0  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  5039  0013F2  1E0D               	comf	??_strncmp,f,c
  5040  0013F4  1E0E               	comf	??_strncmp+1,f,c
  5041  0013F6  4A0D               	infsnz	??_strncmp,f,c
  5042  0013F8  2A0E               	incf	??_strncmp+1,f,c
  5043  0013FA  C007  FFD9         	movff	strncmp@s1,fsr2l
  5044  0013FE  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  5045  001402  50DF               	movf	indf2,w,c
  5046  001404  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  5047  001406  500F               	movf	??_strncmp+2,w,c
  5048  001408  240D               	addwf	??_strncmp,w,c
  5049  00140A  6E07               	movwf	?_strncmp,c
  5050  00140C  0E00               	movlw	0
  5051  00140E  200E               	addwfc	??_strncmp+1,w,c
  5052  001410  6E08               	movwf	?_strncmp+1,c
  5053  001412  0012               	return	
  5054  001414                     i2l885:
  5055  001414  4A07               	infsnz	strncmp@s1,f,c
  5056  001416  2A08               	incf	strncmp@s1+1,f,c
  5057  001418  4A09               	infsnz	strncmp@s2,f,c
  5058  00141A  2A0A               	incf	strncmp@s2+1,f,c
  5059  00141C                     i2l883:
  5060  00141C  060B               	decf	strncmp@len,f,c
  5061  00141E  A0D8               	btfss	status,0,c
  5062  001420  060C               	decf	strncmp@len+1,f,c
  5063  001422  280B               	incf	strncmp@len,w,c
  5064  001424  E1C6               	bnz	i2l2200
  5065  001426  280C               	incf	strncmp@len+1,w,c
  5066  001428  A4D8               	btfss	status,2,c
  5067  00142A  D7C3               	goto	i2l884
  5068  00142C  0E00               	movlw	0
  5069  00142E  6E08               	movwf	?_strncmp+1,c
  5070  001430  0E00               	movlw	0
  5071  001432  6E07               	movwf	?_strncmp,c
  5072  001434  0012               	return	
  5073  001436                     __end_of_strncmp:
  5074                           	opt stack 0
  5075                           pclatu	equ	0xFFB
  5076                           pclath	equ	0xFFA
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon3	equ	0xFF0
  5085                           indf0	equ	0xFEF
  5086                           postinc0	equ	0xFEE
  5087                           fsr0h	equ	0xFEA
  5088                           fsr0l	equ	0xFE9
  5089                           wreg	equ	0xFE8
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _strcpy *****************
  5100 ;; Defined at:
  5101 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  to              2    6[COMRAM] PTR unsigned char 
  5104 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  5105 ;;  from            2    8[COMRAM] PTR const unsigned char 
  5106 ;;		 -> STR_21(1), STR_19(1), STR_16(1), STR_13(2), 
  5107 ;;		 -> STR_12(2), STR_11(2), STR_10(2), current_set(5), 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  cp              2   10[COMRAM] PTR unsigned char 
  5110 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  2    6[COMRAM] PTR unsigned char 
  5113 ;; Registers used:
  5114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;Total ram usage:        6 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_interruptHandler
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text18
  5134  001724                     __ptext18:
  5135                           	opt stack 0
  5136  001724                     _strcpy:
  5137                           	opt stack 26
  5138                           
  5139                           ;incstack = 0
  5140  001724  C007  F00B         	movff	strcpy@to,strcpy@cp
  5141  001728  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  5142  00172C  D004               	goto	i2l877
  5143  00172E  4A0B               	infsnz	strcpy@cp,f,c
  5144  001730  2A0C               	incf	strcpy@cp+1,f,c
  5145  001732  4A09               	infsnz	strcpy@from,f,c
  5146  001734  2A0A               	incf	strcpy@from+1,f,c
  5147  001736                     i2l877:
  5148  001736  C009  FFF6         	movff	strcpy@from,tblptrl
  5149  00173A  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  5150  00173E  0E00               	movlw	low (__mediumconst shr (0+16))
  5151  001740  6EF8               	movwf	tblptru,c
  5152  001742  C00B  FFD9         	movff	strcpy@cp,fsr2l
  5153  001746  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  5154  00174A  0E0F               	movlw	(high __ramtop+-1)
  5155  00174C  64F7               	cpfsgt	tblptrh,c
  5156  00174E  D003               	bra	i2u144_47
  5157  001750  0008               	tblrd		*
  5158  001752  50F5               	movf	tablat,w,c
  5159  001754  D005               	bra	i2u144_40
  5160  001756                     i2u144_47:
  5161  001756  CFF6 FFE9          	movff	tblptrl,fsr0l
  5162  00175A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5163  00175E  50EF               	movf	indf0,w,c
  5164  001760                     i2u144_40:
  5165  001760  6EDF               	movwf	indf2,c
  5166  001762  50DF               	movf	indf2,w,c
  5167  001764  B4D8               	btfsc	status,2,c
  5168  001766  0012               	return	
  5169  001768  D7E2               	goto	i2l878
  5170  00176A                     __end_of_strcpy:
  5171                           	opt stack 0
  5172                           pclatu	equ	0xFFB
  5173                           pclath	equ	0xFFA
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           prodh	equ	0xFF4
  5179                           prodl	equ	0xFF3
  5180                           intcon	equ	0xFF2
  5181                           intcon3	equ	0xFF0
  5182                           indf0	equ	0xFEF
  5183                           postinc0	equ	0xFEE
  5184                           fsr0h	equ	0xFEA
  5185                           fsr0l	equ	0xFE9
  5186                           wreg	equ	0xFE8
  5187                           fsr1h	equ	0xFE2
  5188                           fsr1l	equ	0xFE1
  5189                           indf2	equ	0xFDF
  5190                           postinc2	equ	0xFDE
  5191                           postdec2	equ	0xFDD
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _strcat *****************
  5197 ;; Defined at:
  5198 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  to              2    0[COMRAM] PTR unsigned char 
  5201 ;;		 -> current_set(5), 
  5202 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5203 ;;		 -> temp_set(5), 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5206 ;;		 -> current_set(5), 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  2    0[COMRAM] PTR unsigned char 
  5209 ;; Registers used:
  5210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;Total ram usage:        6 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; This function calls:
  5223 ;;		Nothing
  5224 ;; This function is called by:
  5225 ;;		_interruptHandler
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text19
  5230  0017F0                     __ptext19:
  5231                           	opt stack 0
  5232  0017F0                     _strcat:
  5233                           	opt stack 26
  5234                           
  5235                           ;incstack = 0
  5236  0017F0  C001  F005         	movff	strcat@to,strcat@cp
  5237  0017F4  C002  F006         	movff	strcat@to+1,strcat@cp+1
  5238  0017F8  D002               	goto	i2l860
  5239  0017FA  4A05               	infsnz	strcat@cp,f,c
  5240  0017FC  2A06               	incf	strcat@cp+1,f,c
  5241  0017FE                     i2l860:
  5242  0017FE  C005  FFD9         	movff	strcat@cp,fsr2l
  5243  001802  C006  FFDA         	movff	strcat@cp+1,fsr2h
  5244  001806  50DF               	movf	indf2,w,c
  5245  001808  B4D8               	btfsc	status,2,c
  5246  00180A  D005               	goto	i2l863
  5247  00180C  D7F6               	goto	i2l861
  5248  00180E  4A05               	infsnz	strcat@cp,f,c
  5249  001810  2A06               	incf	strcat@cp+1,f,c
  5250  001812  4A03               	infsnz	strcat@from,f,c
  5251  001814  2A04               	incf	strcat@from+1,f,c
  5252  001816                     i2l863:
  5253  001816  C003  FFD9         	movff	strcat@from,fsr2l
  5254  00181A  C004  FFDA         	movff	strcat@from+1,fsr2h
  5255  00181E  C005  FFE1         	movff	strcat@cp,fsr1l
  5256  001822  C006  FFE2         	movff	strcat@cp+1,fsr1h
  5257  001826  CFDF FFE7          	movff	indf2,indf1
  5258  00182A  50E7               	movf	indf1,w,c
  5259  00182C  B4D8               	btfsc	status,2,c
  5260  00182E  0012               	return	
  5261  001830  D7EE               	goto	i2l864
  5262  001832                     __end_of_strcat:
  5263                           	opt stack 0
  5264                           pclatu	equ	0xFFB
  5265                           pclath	equ	0xFFA
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodh	equ	0xFF4
  5271                           prodl	equ	0xFF3
  5272                           intcon	equ	0xFF2
  5273                           intcon3	equ	0xFF0
  5274                           indf0	equ	0xFEF
  5275                           postinc0	equ	0xFEE
  5276                           fsr0h	equ	0xFEA
  5277                           fsr0l	equ	0xFE9
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _is_valid *****************
  5290 ;; Defined at:
  5291 ;;		line 495 in file "main.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2   50[None  ] int 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;Total ram usage:        2 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    1
  5312 ;; This function calls:
  5313 ;;		_strcmp
  5314 ;;		i2___wmul
  5315 ;; This function is called by:
  5316 ;;		_interruptHandler
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text20
  5321  000866                     __ptext20:
  5322                           	opt stack 0
  5323  000866                     _is_valid:
  5324                           	opt stack 25
  5325                           
  5326                           ;main.c: 499: if (strcmp(current_set2,"B")==0){
  5327                           
  5328                           ;incstack = 0
  5329  000866  0E52               	movlw	low _current_set2
  5330  000868  6E01               	movwf	strcmp@s1,c
  5331  00086A  0E00               	movlw	high _current_set2
  5332  00086C  6E02               	movwf	strcmp@s1+1,c
  5333  00086E  0EFC               	movlw	low STR_10
  5334  000870  6E03               	movwf	strcmp@s2,c
  5335  000872  0EFF               	movlw	high STR_10
  5336  000874  6E04               	movwf	strcmp@s2+1,c
  5337  000876  EC6D  F00B         	call	_strcmp	;wreg free
  5338  00087A  5001               	movf	?_strcmp,w,c
  5339  00087C  1002               	iorwf	?_strcmp+1,w,c
  5340  00087E  A4D8               	btfss	status,2,c
  5341  000880  D009               	goto	i2l177
  5342                           
  5343                           ;main.c: 500: B=1*number;
  5344  000882  C057  F03C         	movff	_number,_B
  5345  000886  C058  F03D         	movff	_number+1,_B+1
  5346                           
  5347                           ;main.c: 501: total_number = 1*number;
  5348  00088A  C057  F040         	movff	_number,_total_number
  5349  00088E  C058  F041         	movff	_number+1,_total_number+1
  5350                           
  5351                           ;main.c: 503: }
  5352  000892  0012               	return	
  5353  000894                     i2l177:
  5354                           
  5355                           ;main.c: 505: else if (strcmp(current_set2,"N")==0){
  5356  000894  0E52               	movlw	low _current_set2
  5357  000896  6E01               	movwf	strcmp@s1,c
  5358  000898  0E00               	movlw	high _current_set2
  5359  00089A  6E02               	movwf	strcmp@s1+1,c
  5360  00089C  0EEB               	movlw	low (STR_32+2)
  5361  00089E  6E03               	movwf	strcmp@s2,c
  5362  0008A0  0EFF               	movlw	high (STR_32+2)
  5363  0008A2  6E04               	movwf	strcmp@s2+1,c
  5364  0008A4  EC6D  F00B         	call	_strcmp	;wreg free
  5365  0008A8  5001               	movf	?_strcmp,w,c
  5366  0008AA  1002               	iorwf	?_strcmp+1,w,c
  5367  0008AC  A4D8               	btfss	status,2,c
  5368  0008AE  D009               	goto	i2l179
  5369                           
  5370                           ;main.c: 506: N=1*number;
  5371  0008B0  C057  F03A         	movff	_number,_N
  5372  0008B4  C058  F03B         	movff	_number+1,_N+1
  5373                           
  5374                           ;main.c: 507: total_number = 1*number;
  5375  0008B8  C057  F040         	movff	_number,_total_number
  5376  0008BC  C058  F041         	movff	_number+1,_total_number+1
  5377                           
  5378                           ;main.c: 509: }
  5379  0008C0  0012               	return	
  5380  0008C2                     i2l179:
  5381                           
  5382                           ;main.c: 510: else if (strcmp(current_set2,"S")==0){
  5383  0008C2  0E52               	movlw	low _current_set2
  5384  0008C4  6E01               	movwf	strcmp@s1,c
  5385  0008C6  0E00               	movlw	high _current_set2
  5386  0008C8  6E02               	movwf	strcmp@s1+1,c
  5387  0008CA  0EEF               	movlw	low (STR_33+2)
  5388  0008CC  6E03               	movwf	strcmp@s2,c
  5389  0008CE  0EFF               	movlw	high (STR_33+2)
  5390  0008D0  6E04               	movwf	strcmp@s2+1,c
  5391  0008D2  EC6D  F00B         	call	_strcmp	;wreg free
  5392  0008D6  5001               	movf	?_strcmp,w,c
  5393  0008D8  1002               	iorwf	?_strcmp+1,w,c
  5394  0008DA  A4D8               	btfss	status,2,c
  5395  0008DC  D009               	goto	i2l181
  5396                           
  5397                           ;main.c: 511: S=1*number;
  5398  0008DE  C057  F038         	movff	_number,_S
  5399  0008E2  C058  F039         	movff	_number+1,_S+1
  5400                           
  5401                           ;main.c: 512: total_number = 1*number;
  5402  0008E6  C057  F040         	movff	_number,_total_number
  5403  0008EA  C058  F041         	movff	_number+1,_total_number+1
  5404                           
  5405                           ;main.c: 514: }
  5406  0008EE  0012               	return	
  5407  0008F0                     i2l181:
  5408                           
  5409                           ;main.c: 515: else if (strcmp(current_set2,"W")==0){
  5410  0008F0  0E52               	movlw	low _current_set2
  5411  0008F2  6E01               	movwf	strcmp@s1,c
  5412  0008F4  0E00               	movlw	high _current_set2
  5413  0008F6  6E02               	movwf	strcmp@s1+1,c
  5414  0008F8  0EF3               	movlw	low (STR_34+2)
  5415  0008FA  6E03               	movwf	strcmp@s2,c
  5416  0008FC  0EFF               	movlw	high (STR_34+2)
  5417  0008FE  6E04               	movwf	strcmp@s2+1,c
  5418  000900  EC6D  F00B         	call	_strcmp	;wreg free
  5419  000904  5001               	movf	?_strcmp,w,c
  5420  000906  1002               	iorwf	?_strcmp+1,w,c
  5421  000908  A4D8               	btfss	status,2,c
  5422  00090A  D009               	goto	i2l183
  5423                           
  5424                           ;main.c: 516: W=1*number;
  5425  00090C  C057  F036         	movff	_number,_W
  5426  000910  C058  F037         	movff	_number+1,_W+1
  5427                           
  5428                           ;main.c: 517: total_number = 1*number;
  5429  000914  C057  F040         	movff	_number,_total_number
  5430  000918  C058  F041         	movff	_number+1,_total_number+1
  5431                           
  5432                           ;main.c: 519: }
  5433  00091C  0012               	return	
  5434  00091E                     i2l183:
  5435                           
  5436                           ;main.c: 520: else if (strcmp(current_set2,"BN")==0){
  5437  00091E  0E52               	movlw	low _current_set2
  5438  000920  6E01               	movwf	strcmp@s1,c
  5439  000922  0E00               	movlw	high _current_set2
  5440  000924  6E02               	movwf	strcmp@s1+1,c
  5441  000926  0EEA               	movlw	low (STR_32+1)
  5442  000928  6E03               	movwf	strcmp@s2,c
  5443  00092A  0EFF               	movlw	high (STR_32+1)
  5444  00092C  6E04               	movwf	strcmp@s2+1,c
  5445  00092E  EC6D  F00B         	call	_strcmp	;wreg free
  5446  000932  5001               	movf	?_strcmp,w,c
  5447  000934  1002               	iorwf	?_strcmp+1,w,c
  5448  000936  A4D8               	btfss	status,2,c
  5449  000938  D00E               	goto	i2l185
  5450                           
  5451                           ;main.c: 521: B = 1*number;
  5452  00093A  C057  F03C         	movff	_number,_B
  5453  00093E  C058  F03D         	movff	_number+1,_B+1
  5454                           
  5455                           ;main.c: 523: N = 1*number;
  5456  000942  C057  F03A         	movff	_number,_N
  5457  000946  C058  F03B         	movff	_number+1,_N+1
  5458                           
  5459                           ;main.c: 524: total_number = 2*number;
  5460  00094A  90D8               	bcf	status,0,c
  5461  00094C  3457               	rlcf	_number,w,c
  5462  00094E  6E40               	movwf	_total_number,c
  5463  000950  3458               	rlcf	_number+1,w,c
  5464  000952  6E41               	movwf	_total_number+1,c
  5465                           
  5466                           ;main.c: 525: }
  5467  000954  0012               	return	
  5468  000956                     i2l185:
  5469                           
  5470                           ;main.c: 526: else if (strcmp(current_set2,"BS")==0){
  5471  000956  0E52               	movlw	low _current_set2
  5472  000958  6E01               	movwf	strcmp@s1,c
  5473  00095A  0E00               	movlw	high _current_set2
  5474  00095C  6E02               	movwf	strcmp@s1+1,c
  5475  00095E  0EEE               	movlw	low (STR_33+1)
  5476  000960  6E03               	movwf	strcmp@s2,c
  5477  000962  0EFF               	movlw	high (STR_33+1)
  5478  000964  6E04               	movwf	strcmp@s2+1,c
  5479  000966  EC6D  F00B         	call	_strcmp	;wreg free
  5480  00096A  5001               	movf	?_strcmp,w,c
  5481  00096C  1002               	iorwf	?_strcmp+1,w,c
  5482  00096E  A4D8               	btfss	status,2,c
  5483  000970  D00E               	goto	i2l187
  5484                           
  5485                           ;main.c: 527: B = 1*number;
  5486  000972  C057  F03C         	movff	_number,_B
  5487  000976  C058  F03D         	movff	_number+1,_B+1
  5488                           
  5489                           ;main.c: 529: S = 1*number;
  5490  00097A  C057  F038         	movff	_number,_S
  5491  00097E  C058  F039         	movff	_number+1,_S+1
  5492                           
  5493                           ;main.c: 530: total_number = 2*number;
  5494  000982  90D8               	bcf	status,0,c
  5495  000984  3457               	rlcf	_number,w,c
  5496  000986  6E40               	movwf	_total_number,c
  5497  000988  3458               	rlcf	_number+1,w,c
  5498  00098A  6E41               	movwf	_total_number+1,c
  5499                           
  5500                           ;main.c: 531: }
  5501  00098C  0012               	return	
  5502  00098E                     i2l187:
  5503                           
  5504                           ;main.c: 533: else if (strcmp(current_set2,"BW")==0){
  5505  00098E  0E52               	movlw	low _current_set2
  5506  000990  6E01               	movwf	strcmp@s1,c
  5507  000992  0E00               	movlw	high _current_set2
  5508  000994  6E02               	movwf	strcmp@s1+1,c
  5509  000996  0EF2               	movlw	low (STR_34+1)
  5510  000998  6E03               	movwf	strcmp@s2,c
  5511  00099A  0EFF               	movlw	high (STR_34+1)
  5512  00099C  6E04               	movwf	strcmp@s2+1,c
  5513  00099E  EC6D  F00B         	call	_strcmp	;wreg free
  5514  0009A2  5001               	movf	?_strcmp,w,c
  5515  0009A4  1002               	iorwf	?_strcmp+1,w,c
  5516  0009A6  A4D8               	btfss	status,2,c
  5517  0009A8  D00E               	goto	i2l189
  5518                           
  5519                           ;main.c: 534: B = 1*number;
  5520  0009AA  C057  F03C         	movff	_number,_B
  5521  0009AE  C058  F03D         	movff	_number+1,_B+1
  5522                           
  5523                           ;main.c: 536: W = 1*number;
  5524  0009B2  C057  F036         	movff	_number,_W
  5525  0009B6  C058  F037         	movff	_number+1,_W+1
  5526                           
  5527                           ;main.c: 537: total_number = 2*number;
  5528  0009BA  90D8               	bcf	status,0,c
  5529  0009BC  3457               	rlcf	_number,w,c
  5530  0009BE  6E40               	movwf	_total_number,c
  5531  0009C0  3458               	rlcf	_number+1,w,c
  5532  0009C2  6E41               	movwf	_total_number+1,c
  5533                           
  5534                           ;main.c: 538: }
  5535  0009C4  0012               	return	
  5536  0009C6                     i2l189:
  5537                           
  5538                           ;main.c: 539: else if (strcmp(current_set2,"BBN")==0){
  5539  0009C6  0E52               	movlw	low _current_set2
  5540  0009C8  6E01               	movwf	strcmp@s1,c
  5541  0009CA  0E00               	movlw	high _current_set2
  5542  0009CC  6E02               	movwf	strcmp@s1+1,c
  5543  0009CE  0EE9               	movlw	low STR_32
  5544  0009D0  6E03               	movwf	strcmp@s2,c
  5545  0009D2  0EFF               	movlw	high STR_32
  5546  0009D4  6E04               	movwf	strcmp@s2+1,c
  5547  0009D6  EC6D  F00B         	call	_strcmp	;wreg free
  5548  0009DA  5001               	movf	?_strcmp,w,c
  5549  0009DC  1002               	iorwf	?_strcmp+1,w,c
  5550  0009DE  A4D8               	btfss	status,2,c
  5551  0009E0  D018               	goto	i2l191
  5552                           
  5553                           ;main.c: 540: B = 2*number;
  5554  0009E2  90D8               	bcf	status,0,c
  5555  0009E4  3457               	rlcf	_number,w,c
  5556  0009E6  6E3C               	movwf	_B,c
  5557  0009E8  3458               	rlcf	_number+1,w,c
  5558  0009EA  6E3D               	movwf	_B+1,c
  5559                           
  5560                           ;main.c: 542: N = 1*number;
  5561  0009EC  C057  F03A         	movff	_number,_N
  5562  0009F0  C058  F03B         	movff	_number+1,_N+1
  5563                           
  5564                           ;main.c: 543: total_number = 3*number;
  5565  0009F4  C057  F001         	movff	_number,i2___wmul@multiplier
  5566  0009F8  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5567  0009FC  0E00               	movlw	0
  5568  0009FE  6E04               	movwf	i2___wmul@multiplicand+1,c
  5569  000A00  0E03               	movlw	3
  5570  000A02  6E03               	movwf	i2___wmul@multiplicand,c
  5571  000A04  EC44  F00C         	call	i2___wmul	;wreg free
  5572  000A08  C001  F040         	movff	?i2___wmul,_total_number
  5573  000A0C  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5574                           
  5575                           ;main.c: 544: }
  5576  000A10  0012               	return	
  5577  000A12                     i2l191:
  5578                           
  5579                           ;main.c: 545: else if (strcmp(current_set2,"BBS")==0){
  5580  000A12  0E52               	movlw	low _current_set2
  5581  000A14  6E01               	movwf	strcmp@s1,c
  5582  000A16  0E00               	movlw	high _current_set2
  5583  000A18  6E02               	movwf	strcmp@s1+1,c
  5584  000A1A  0EED               	movlw	low STR_33
  5585  000A1C  6E03               	movwf	strcmp@s2,c
  5586  000A1E  0EFF               	movlw	high STR_33
  5587  000A20  6E04               	movwf	strcmp@s2+1,c
  5588  000A22  EC6D  F00B         	call	_strcmp	;wreg free
  5589  000A26  5001               	movf	?_strcmp,w,c
  5590  000A28  1002               	iorwf	?_strcmp+1,w,c
  5591  000A2A  A4D8               	btfss	status,2,c
  5592  000A2C  D018               	goto	i2l193
  5593                           
  5594                           ;main.c: 546: B = 2*number;
  5595  000A2E  90D8               	bcf	status,0,c
  5596  000A30  3457               	rlcf	_number,w,c
  5597  000A32  6E3C               	movwf	_B,c
  5598  000A34  3458               	rlcf	_number+1,w,c
  5599  000A36  6E3D               	movwf	_B+1,c
  5600                           
  5601                           ;main.c: 548: S = 1*number;
  5602  000A38  C057  F038         	movff	_number,_S
  5603  000A3C  C058  F039         	movff	_number+1,_S+1
  5604                           
  5605                           ;main.c: 549: total_number = 3*number;
  5606  000A40  C057  F001         	movff	_number,i2___wmul@multiplier
  5607  000A44  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5608  000A48  0E00               	movlw	0
  5609  000A4A  6E04               	movwf	i2___wmul@multiplicand+1,c
  5610  000A4C  0E03               	movlw	3
  5611  000A4E  6E03               	movwf	i2___wmul@multiplicand,c
  5612  000A50  EC44  F00C         	call	i2___wmul	;wreg free
  5613  000A54  C001  F040         	movff	?i2___wmul,_total_number
  5614  000A58  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5615                           
  5616                           ;main.c: 550: }
  5617  000A5C  0012               	return	
  5618  000A5E                     i2l193:
  5619                           
  5620                           ;main.c: 551: else if (strcmp(current_set2,"BBW")==0){
  5621  000A5E  0E52               	movlw	low _current_set2
  5622  000A60  6E01               	movwf	strcmp@s1,c
  5623  000A62  0E00               	movlw	high _current_set2
  5624  000A64  6E02               	movwf	strcmp@s1+1,c
  5625  000A66  0EF1               	movlw	low STR_34
  5626  000A68  6E03               	movwf	strcmp@s2,c
  5627  000A6A  0EFF               	movlw	high STR_34
  5628  000A6C  6E04               	movwf	strcmp@s2+1,c
  5629  000A6E  EC6D  F00B         	call	_strcmp	;wreg free
  5630  000A72  5001               	movf	?_strcmp,w,c
  5631  000A74  1002               	iorwf	?_strcmp+1,w,c
  5632  000A76  A4D8               	btfss	status,2,c
  5633  000A78  D018               	goto	i2l195
  5634                           
  5635                           ;main.c: 552: B = 2*number;
  5636  000A7A  90D8               	bcf	status,0,c
  5637  000A7C  3457               	rlcf	_number,w,c
  5638  000A7E  6E3C               	movwf	_B,c
  5639  000A80  3458               	rlcf	_number+1,w,c
  5640  000A82  6E3D               	movwf	_B+1,c
  5641                           
  5642                           ;main.c: 554: W = 1*number;
  5643  000A84  C057  F036         	movff	_number,_W
  5644  000A88  C058  F037         	movff	_number+1,_W+1
  5645                           
  5646                           ;main.c: 555: total_number = 3*number;
  5647  000A8C  C057  F001         	movff	_number,i2___wmul@multiplier
  5648  000A90  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5649  000A94  0E00               	movlw	0
  5650  000A96  6E04               	movwf	i2___wmul@multiplicand+1,c
  5651  000A98  0E03               	movlw	3
  5652  000A9A  6E03               	movwf	i2___wmul@multiplicand,c
  5653  000A9C  EC44  F00C         	call	i2___wmul	;wreg free
  5654  000AA0  C001  F040         	movff	?i2___wmul,_total_number
  5655  000AA4  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5656                           
  5657                           ;main.c: 556: }
  5658  000AA8  0012               	return	
  5659  000AAA                     i2l195:
  5660                           
  5661                           ;main.c: 557: else if (strcmp(current_set2,"BNW")==0){
  5662  000AAA  0E52               	movlw	low _current_set2
  5663  000AAC  6E01               	movwf	strcmp@s1,c
  5664  000AAE  0E00               	movlw	high _current_set2
  5665  000AB0  6E02               	movwf	strcmp@s1+1,c
  5666  000AB2  0ECC               	movlw	low (STR_41+1)
  5667  000AB4  6E03               	movwf	strcmp@s2,c
  5668  000AB6  0EFF               	movlw	high (STR_41+1)
  5669  000AB8  6E04               	movwf	strcmp@s2+1,c
  5670  000ABA  EC6D  F00B         	call	_strcmp	;wreg free
  5671  000ABE  5001               	movf	?_strcmp,w,c
  5672  000AC0  1002               	iorwf	?_strcmp+1,w,c
  5673  000AC2  A4D8               	btfss	status,2,c
  5674  000AC4  D01B               	goto	i2l197
  5675                           
  5676                           ;main.c: 558: B = 1*number;
  5677  000AC6  C057  F03C         	movff	_number,_B
  5678  000ACA  C058  F03D         	movff	_number+1,_B+1
  5679                           
  5680                           ;main.c: 559: W = 1*number;
  5681  000ACE  C057  F036         	movff	_number,_W
  5682  000AD2  C058  F037         	movff	_number+1,_W+1
  5683                           
  5684                           ;main.c: 560: N = 1*number;
  5685  000AD6  C057  F03A         	movff	_number,_N
  5686  000ADA  C058  F03B         	movff	_number+1,_N+1
  5687                           
  5688                           ;main.c: 561: total_number = 3*number;
  5689  000ADE  C057  F001         	movff	_number,i2___wmul@multiplier
  5690  000AE2  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5691  000AE6  0E00               	movlw	0
  5692  000AE8  6E04               	movwf	i2___wmul@multiplicand+1,c
  5693  000AEA  0E03               	movlw	3
  5694  000AEC  6E03               	movwf	i2___wmul@multiplicand,c
  5695  000AEE  EC44  F00C         	call	i2___wmul	;wreg free
  5696  000AF2  C001  F040         	movff	?i2___wmul,_total_number
  5697  000AF6  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5698                           
  5699                           ;main.c: 562: }
  5700  000AFA  0012               	return	
  5701  000AFC                     i2l197:
  5702                           
  5703                           ;main.c: 563: else if (strcmp(current_set2,"BSW")==0){
  5704  000AFC  0E52               	movlw	low _current_set2
  5705  000AFE  6E01               	movwf	strcmp@s1,c
  5706  000B00  0E00               	movlw	high _current_set2
  5707  000B02  6E02               	movwf	strcmp@s1+1,c
  5708  000B04  0ED6               	movlw	low (STR_40+1)
  5709  000B06  6E03               	movwf	strcmp@s2,c
  5710  000B08  0EFF               	movlw	high (STR_40+1)
  5711  000B0A  6E04               	movwf	strcmp@s2+1,c
  5712  000B0C  EC6D  F00B         	call	_strcmp	;wreg free
  5713  000B10  5001               	movf	?_strcmp,w,c
  5714  000B12  1002               	iorwf	?_strcmp+1,w,c
  5715  000B14  A4D8               	btfss	status,2,c
  5716  000B16  D01B               	goto	i2l199
  5717                           
  5718                           ;main.c: 564: B = 1*number;
  5719  000B18  C057  F03C         	movff	_number,_B
  5720  000B1C  C058  F03D         	movff	_number+1,_B+1
  5721                           
  5722                           ;main.c: 565: S = 1*number;
  5723  000B20  C057  F038         	movff	_number,_S
  5724  000B24  C058  F039         	movff	_number+1,_S+1
  5725                           
  5726                           ;main.c: 566: N = 1*number;
  5727  000B28  C057  F03A         	movff	_number,_N
  5728  000B2C  C058  F03B         	movff	_number+1,_N+1
  5729                           
  5730                           ;main.c: 567: total_number = 3*number;
  5731  000B30  C057  F001         	movff	_number,i2___wmul@multiplier
  5732  000B34  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5733  000B38  0E00               	movlw	0
  5734  000B3A  6E04               	movwf	i2___wmul@multiplicand+1,c
  5735  000B3C  0E03               	movlw	3
  5736  000B3E  6E03               	movwf	i2___wmul@multiplicand,c
  5737  000B40  EC44  F00C         	call	i2___wmul	;wreg free
  5738  000B44  C001  F040         	movff	?i2___wmul,_total_number
  5739  000B48  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5740                           
  5741                           ;main.c: 568: }
  5742  000B4C  0012               	return	
  5743  000B4E                     i2l199:
  5744                           
  5745                           ;main.c: 569: else if (strcmp(current_set2,"BWW")==0){
  5746  000B4E  0E52               	movlw	low _current_set2
  5747  000B50  6E01               	movwf	strcmp@s1,c
  5748  000B52  0E00               	movlw	high _current_set2
  5749  000B54  6E02               	movwf	strcmp@s1+1,c
  5750  000B56  0EF5               	movlw	low STR_37
  5751  000B58  6E03               	movwf	strcmp@s2,c
  5752  000B5A  0EFF               	movlw	high STR_37
  5753  000B5C  6E04               	movwf	strcmp@s2+1,c
  5754  000B5E  EC6D  F00B         	call	_strcmp	;wreg free
  5755  000B62  5001               	movf	?_strcmp,w,c
  5756  000B64  1002               	iorwf	?_strcmp+1,w,c
  5757  000B66  A4D8               	btfss	status,2,c
  5758  000B68  D018               	goto	i2l201
  5759                           
  5760                           ;main.c: 570: B = 1*number;
  5761  000B6A  C057  F03C         	movff	_number,_B
  5762  000B6E  C058  F03D         	movff	_number+1,_B+1
  5763                           
  5764                           ;main.c: 571: W = 2*number;
  5765  000B72  90D8               	bcf	status,0,c
  5766  000B74  3457               	rlcf	_number,w,c
  5767  000B76  6E36               	movwf	_W,c
  5768  000B78  3458               	rlcf	_number+1,w,c
  5769  000B7A  6E37               	movwf	_W+1,c
  5770                           
  5771                           ;main.c: 572: total_number = 3*number;
  5772  000B7C  C057  F001         	movff	_number,i2___wmul@multiplier
  5773  000B80  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5774  000B84  0E00               	movlw	0
  5775  000B86  6E04               	movwf	i2___wmul@multiplicand+1,c
  5776  000B88  0E03               	movlw	3
  5777  000B8A  6E03               	movwf	i2___wmul@multiplicand,c
  5778  000B8C  EC44  F00C         	call	i2___wmul	;wreg free
  5779  000B90  C001  F040         	movff	?i2___wmul,_total_number
  5780  000B94  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5781                           
  5782                           ;main.c: 573: }
  5783  000B98  0012               	return	
  5784  000B9A                     i2l201:
  5785                           
  5786                           ;main.c: 574: else if (strcmp(current_set2,"BNWW")==0){
  5787  000B9A  0E52               	movlw	low _current_set2
  5788  000B9C  6E01               	movwf	strcmp@s1,c
  5789  000B9E  0E00               	movlw	high _current_set2
  5790  000BA0  6E02               	movwf	strcmp@s1+1,c
  5791  000BA2  0EDA               	movlw	low STR_38
  5792  000BA4  6E03               	movwf	strcmp@s2,c
  5793  000BA6  0EFF               	movlw	high STR_38
  5794  000BA8  6E04               	movwf	strcmp@s2+1,c
  5795  000BAA  EC6D  F00B         	call	_strcmp	;wreg free
  5796  000BAE  5001               	movf	?_strcmp,w,c
  5797  000BB0  1002               	iorwf	?_strcmp+1,w,c
  5798  000BB2  A4D8               	btfss	status,2,c
  5799  000BB4  D01C               	goto	i2l203
  5800                           
  5801                           ;main.c: 575: B = 1*number;
  5802  000BB6  C057  F03C         	movff	_number,_B
  5803  000BBA  C058  F03D         	movff	_number+1,_B+1
  5804                           
  5805                           ;main.c: 576: N = 1*number;
  5806  000BBE  C057  F03A         	movff	_number,_N
  5807  000BC2  C058  F03B         	movff	_number+1,_N+1
  5808                           
  5809                           ;main.c: 577: W = 2*number;
  5810  000BC6  90D8               	bcf	status,0,c
  5811  000BC8  3457               	rlcf	_number,w,c
  5812  000BCA  6E36               	movwf	_W,c
  5813  000BCC  3458               	rlcf	_number+1,w,c
  5814  000BCE  6E37               	movwf	_W+1,c
  5815                           
  5816                           ;main.c: 578: total_number = 4*number;
  5817  000BD0  C057  F007         	movff	_number,??_is_valid
  5818  000BD4  C058  F008         	movff	_number+1,??_is_valid+1
  5819  000BD8  90D8               	bcf	status,0,c
  5820  000BDA  3607               	rlcf	??_is_valid,f,c
  5821  000BDC  3608               	rlcf	??_is_valid+1,f,c
  5822  000BDE  90D8               	bcf	status,0,c
  5823  000BE0  3607               	rlcf	??_is_valid,f,c
  5824  000BE2  3608               	rlcf	??_is_valid+1,f,c
  5825  000BE4  C007  F040         	movff	??_is_valid,_total_number
  5826  000BE8  C008  F041         	movff	??_is_valid+1,_total_number+1
  5827                           
  5828                           ;main.c: 579: }
  5829  000BEC  0012               	return	
  5830  000BEE                     i2l203:
  5831                           
  5832                           ;main.c: 580: else if (strcmp(current_set2,"BSWW")==0){
  5833  000BEE  0E52               	movlw	low _current_set2
  5834  000BF0  6E01               	movwf	strcmp@s1,c
  5835  000BF2  0E00               	movlw	high _current_set2
  5836  000BF4  6E02               	movwf	strcmp@s1+1,c
  5837  000BF6  0EDF               	movlw	low STR_39
  5838  000BF8  6E03               	movwf	strcmp@s2,c
  5839  000BFA  0EFF               	movlw	high STR_39
  5840  000BFC  6E04               	movwf	strcmp@s2+1,c
  5841  000BFE  EC6D  F00B         	call	_strcmp	;wreg free
  5842  000C02  5001               	movf	?_strcmp,w,c
  5843  000C04  1002               	iorwf	?_strcmp+1,w,c
  5844  000C06  A4D8               	btfss	status,2,c
  5845  000C08  D01C               	goto	i2l205
  5846                           
  5847                           ;main.c: 581: B = 1*number;
  5848  000C0A  C057  F03C         	movff	_number,_B
  5849  000C0E  C058  F03D         	movff	_number+1,_B+1
  5850                           
  5851                           ;main.c: 582: S = 1*number;
  5852  000C12  C057  F038         	movff	_number,_S
  5853  000C16  C058  F039         	movff	_number+1,_S+1
  5854                           
  5855                           ;main.c: 583: W = 2*number;
  5856  000C1A  90D8               	bcf	status,0,c
  5857  000C1C  3457               	rlcf	_number,w,c
  5858  000C1E  6E36               	movwf	_W,c
  5859  000C20  3458               	rlcf	_number+1,w,c
  5860  000C22  6E37               	movwf	_W+1,c
  5861                           
  5862                           ;main.c: 584: total_number = 4*number;
  5863  000C24  C057  F007         	movff	_number,??_is_valid
  5864  000C28  C058  F008         	movff	_number+1,??_is_valid+1
  5865  000C2C  90D8               	bcf	status,0,c
  5866  000C2E  3607               	rlcf	??_is_valid,f,c
  5867  000C30  3608               	rlcf	??_is_valid+1,f,c
  5868  000C32  90D8               	bcf	status,0,c
  5869  000C34  3607               	rlcf	??_is_valid,f,c
  5870  000C36  3608               	rlcf	??_is_valid+1,f,c
  5871  000C38  C007  F040         	movff	??_is_valid,_total_number
  5872  000C3C  C008  F041         	movff	??_is_valid+1,_total_number+1
  5873                           
  5874                           ;main.c: 586: }
  5875  000C40  0012               	return	
  5876  000C42                     i2l205:
  5877                           
  5878                           ;main.c: 587: else if (strcmp(current_set2,"BBSW")==0){
  5879  000C42  0E52               	movlw	low _current_set2
  5880  000C44  6E01               	movwf	strcmp@s1,c
  5881  000C46  0E00               	movlw	high _current_set2
  5882  000C48  6E02               	movwf	strcmp@s1+1,c
  5883  000C4A  0ED5               	movlw	low STR_40
  5884  000C4C  6E03               	movwf	strcmp@s2,c
  5885  000C4E  0EFF               	movlw	high STR_40
  5886  000C50  6E04               	movwf	strcmp@s2+1,c
  5887  000C52  EC6D  F00B         	call	_strcmp	;wreg free
  5888  000C56  5001               	movf	?_strcmp,w,c
  5889  000C58  1002               	iorwf	?_strcmp+1,w,c
  5890  000C5A  A4D8               	btfss	status,2,c
  5891  000C5C  D01C               	goto	i2l207
  5892                           
  5893                           ;main.c: 588: B = 2*number;
  5894  000C5E  90D8               	bcf	status,0,c
  5895  000C60  3457               	rlcf	_number,w,c
  5896  000C62  6E3C               	movwf	_B,c
  5897  000C64  3458               	rlcf	_number+1,w,c
  5898  000C66  6E3D               	movwf	_B+1,c
  5899                           
  5900                           ;main.c: 589: S = 1*number;
  5901  000C68  C057  F038         	movff	_number,_S
  5902  000C6C  C058  F039         	movff	_number+1,_S+1
  5903                           
  5904                           ;main.c: 590: W = number;
  5905  000C70  C057  F036         	movff	_number,_W
  5906  000C74  C058  F037         	movff	_number+1,_W+1
  5907                           
  5908                           ;main.c: 591: total_number = 4*number;
  5909  000C78  C057  F007         	movff	_number,??_is_valid
  5910  000C7C  C058  F008         	movff	_number+1,??_is_valid+1
  5911  000C80  90D8               	bcf	status,0,c
  5912  000C82  3607               	rlcf	??_is_valid,f,c
  5913  000C84  3608               	rlcf	??_is_valid+1,f,c
  5914  000C86  90D8               	bcf	status,0,c
  5915  000C88  3607               	rlcf	??_is_valid,f,c
  5916  000C8A  3608               	rlcf	??_is_valid+1,f,c
  5917  000C8C  C007  F040         	movff	??_is_valid,_total_number
  5918  000C90  C008  F041         	movff	??_is_valid+1,_total_number+1
  5919                           
  5920                           ;main.c: 592: }
  5921  000C94  0012               	return	
  5922  000C96                     i2l207:
  5923                           
  5924                           ;main.c: 593: else if (strcmp(current_set2,"BBNW")==0){
  5925  000C96  0E52               	movlw	low _current_set2
  5926  000C98  6E01               	movwf	strcmp@s1,c
  5927  000C9A  0E00               	movlw	high _current_set2
  5928  000C9C  6E02               	movwf	strcmp@s1+1,c
  5929  000C9E  0ECB               	movlw	low STR_41
  5930  000CA0  6E03               	movwf	strcmp@s2,c
  5931  000CA2  0EFF               	movlw	high STR_41
  5932  000CA4  6E04               	movwf	strcmp@s2+1,c
  5933  000CA6  EC6D  F00B         	call	_strcmp	;wreg free
  5934  000CAA  5001               	movf	?_strcmp,w,c
  5935  000CAC  1002               	iorwf	?_strcmp+1,w,c
  5936  000CAE  A4D8               	btfss	status,2,c
  5937  000CB0  D01C               	goto	i2l209
  5938                           
  5939                           ;main.c: 594: B = 2*number;
  5940  000CB2  90D8               	bcf	status,0,c
  5941  000CB4  3457               	rlcf	_number,w,c
  5942  000CB6  6E3C               	movwf	_B,c
  5943  000CB8  3458               	rlcf	_number+1,w,c
  5944  000CBA  6E3D               	movwf	_B+1,c
  5945                           
  5946                           ;main.c: 595: N = 1*number;
  5947  000CBC  C057  F03A         	movff	_number,_N
  5948  000CC0  C058  F03B         	movff	_number+1,_N+1
  5949                           
  5950                           ;main.c: 596: W = 1*number;
  5951  000CC4  C057  F036         	movff	_number,_W
  5952  000CC8  C058  F037         	movff	_number+1,_W+1
  5953                           
  5954                           ;main.c: 597: total_number = 4*number;
  5955  000CCC  C057  F007         	movff	_number,??_is_valid
  5956  000CD0  C058  F008         	movff	_number+1,??_is_valid+1
  5957  000CD4  90D8               	bcf	status,0,c
  5958  000CD6  3607               	rlcf	??_is_valid,f,c
  5959  000CD8  3608               	rlcf	??_is_valid+1,f,c
  5960  000CDA  90D8               	bcf	status,0,c
  5961  000CDC  3607               	rlcf	??_is_valid,f,c
  5962  000CDE  3608               	rlcf	??_is_valid+1,f,c
  5963  000CE0  C007  F040         	movff	??_is_valid,_total_number
  5964  000CE4  C008  F041         	movff	??_is_valid+1,_total_number+1
  5965                           
  5966                           ;main.c: 598: }
  5967  000CE8  0012               	return	
  5968  000CEA                     i2l209:
  5969                           
  5970                           ;main.c: 599: else if (strcmp(current_set2,"BNNW")==0){
  5971  000CEA  0E52               	movlw	low _current_set2
  5972  000CEC  6E01               	movwf	strcmp@s1,c
  5973  000CEE  0E00               	movlw	high _current_set2
  5974  000CF0  6E02               	movwf	strcmp@s1+1,c
  5975  000CF2  0ED0               	movlw	low STR_42
  5976  000CF4  6E03               	movwf	strcmp@s2,c
  5977  000CF6  0EFF               	movlw	high STR_42
  5978  000CF8  6E04               	movwf	strcmp@s2+1,c
  5979  000CFA  EC6D  F00B         	call	_strcmp	;wreg free
  5980  000CFE  5001               	movf	?_strcmp,w,c
  5981  000D00  1002               	iorwf	?_strcmp+1,w,c
  5982  000D02  A4D8               	btfss	status,2,c
  5983  000D04  D01C               	goto	i2l211
  5984                           
  5985                           ;main.c: 600: B = 1*number;
  5986  000D06  C057  F03C         	movff	_number,_B
  5987  000D0A  C058  F03D         	movff	_number+1,_B+1
  5988                           
  5989                           ;main.c: 601: N = 2*number;
  5990  000D0E  90D8               	bcf	status,0,c
  5991  000D10  3457               	rlcf	_number,w,c
  5992  000D12  6E3A               	movwf	_N,c
  5993  000D14  3458               	rlcf	_number+1,w,c
  5994  000D16  6E3B               	movwf	_N+1,c
  5995                           
  5996                           ;main.c: 602: W = 1*number;
  5997  000D18  C057  F036         	movff	_number,_W
  5998  000D1C  C058  F037         	movff	_number+1,_W+1
  5999                           
  6000                           ;main.c: 603: total_number = 4*number;
  6001  000D20  C057  F007         	movff	_number,??_is_valid
  6002  000D24  C058  F008         	movff	_number+1,??_is_valid+1
  6003  000D28  90D8               	bcf	status,0,c
  6004  000D2A  3607               	rlcf	??_is_valid,f,c
  6005  000D2C  3608               	rlcf	??_is_valid+1,f,c
  6006  000D2E  90D8               	bcf	status,0,c
  6007  000D30  3607               	rlcf	??_is_valid,f,c
  6008  000D32  3608               	rlcf	??_is_valid+1,f,c
  6009  000D34  C007  F040         	movff	??_is_valid,_total_number
  6010  000D38  C008  F041         	movff	??_is_valid+1,_total_number+1
  6011                           
  6012                           ;main.c: 604: }
  6013  000D3C  0012               	return	
  6014  000D3E                     i2l211:
  6015                           
  6016                           ;main.c: 605: else if (strcmp(current_set2,"BNNN")==0){
  6017  000D3E  0E52               	movlw	low _current_set2
  6018  000D40  6E01               	movwf	strcmp@s1,c
  6019  000D42  0E00               	movlw	high _current_set2
  6020  000D44  6E02               	movwf	strcmp@s1+1,c
  6021  000D46  0EC6               	movlw	low STR_43
  6022  000D48  6E03               	movwf	strcmp@s2,c
  6023  000D4A  0EFF               	movlw	high STR_43
  6024  000D4C  6E04               	movwf	strcmp@s2+1,c
  6025  000D4E  EC6D  F00B         	call	_strcmp	;wreg free
  6026  000D52  5001               	movf	?_strcmp,w,c
  6027  000D54  1002               	iorwf	?_strcmp+1,w,c
  6028  000D56  A4D8               	btfss	status,2,c
  6029  000D58  D021               	goto	i2l213
  6030                           
  6031                           ;main.c: 606: B = 1*number;
  6032  000D5A  C057  F03C         	movff	_number,_B
  6033  000D5E  C058  F03D         	movff	_number+1,_B+1
  6034                           
  6035                           ;main.c: 607: N = 3*number;
  6036  000D62  C057  F001         	movff	_number,i2___wmul@multiplier
  6037  000D66  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  6038  000D6A  0E00               	movlw	0
  6039  000D6C  6E04               	movwf	i2___wmul@multiplicand+1,c
  6040  000D6E  0E03               	movlw	3
  6041  000D70  6E03               	movwf	i2___wmul@multiplicand,c
  6042  000D72  EC44  F00C         	call	i2___wmul	;wreg free
  6043  000D76  C001  F03A         	movff	?i2___wmul,_N
  6044  000D7A  C002  F03B         	movff	?i2___wmul+1,_N+1
  6045                           
  6046                           ;main.c: 608: total_number = 4*number;
  6047  000D7E  C057  F007         	movff	_number,??_is_valid
  6048  000D82  C058  F008         	movff	_number+1,??_is_valid+1
  6049  000D86  90D8               	bcf	status,0,c
  6050  000D88  3607               	rlcf	??_is_valid,f,c
  6051  000D8A  3608               	rlcf	??_is_valid+1,f,c
  6052  000D8C  90D8               	bcf	status,0,c
  6053  000D8E  3607               	rlcf	??_is_valid,f,c
  6054  000D90  3608               	rlcf	??_is_valid+1,f,c
  6055  000D92  C007  F040         	movff	??_is_valid,_total_number
  6056  000D96  C008  F041         	movff	??_is_valid+1,_total_number+1
  6057                           
  6058                           ;main.c: 609: }
  6059  000D9A  0012               	return	
  6060  000D9C                     i2l213:
  6061                           
  6062                           ;main.c: 610: else if (strcmp(current_set2,"BWWW")==0){
  6063  000D9C  0E52               	movlw	low _current_set2
  6064  000D9E  6E01               	movwf	strcmp@s1,c
  6065  000DA0  0E00               	movlw	high _current_set2
  6066  000DA2  6E02               	movwf	strcmp@s1+1,c
  6067  000DA4  0EE4               	movlw	low STR_44
  6068  000DA6  6E03               	movwf	strcmp@s2,c
  6069  000DA8  0EFF               	movlw	high STR_44
  6070  000DAA  6E04               	movwf	strcmp@s2+1,c
  6071  000DAC  EC6D  F00B         	call	_strcmp	;wreg free
  6072  000DB0  5001               	movf	?_strcmp,w,c
  6073  000DB2  1002               	iorwf	?_strcmp+1,w,c
  6074  000DB4  A4D8               	btfss	status,2,c
  6075  000DB6  0012               	return	
  6076                           
  6077                           ;main.c: 611: B = 1*number;
  6078  000DB8  C057  F03C         	movff	_number,_B
  6079  000DBC  C058  F03D         	movff	_number+1,_B+1
  6080                           
  6081                           ;main.c: 612: W = 3*number;
  6082  000DC0  C057  F001         	movff	_number,i2___wmul@multiplier
  6083  000DC4  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  6084  000DC8  0E00               	movlw	0
  6085  000DCA  6E04               	movwf	i2___wmul@multiplicand+1,c
  6086  000DCC  0E03               	movlw	3
  6087  000DCE  6E03               	movwf	i2___wmul@multiplicand,c
  6088  000DD0  EC44  F00C         	call	i2___wmul	;wreg free
  6089  000DD4  C001  F036         	movff	?i2___wmul,_W
  6090  000DD8  C002  F037         	movff	?i2___wmul+1,_W+1
  6091                           
  6092                           ;main.c: 613: total_number = 4*number;
  6093  000DDC  C057  F007         	movff	_number,??_is_valid
  6094  000DE0  C058  F008         	movff	_number+1,??_is_valid+1
  6095  000DE4  90D8               	bcf	status,0,c
  6096  000DE6  3607               	rlcf	??_is_valid,f,c
  6097  000DE8  3608               	rlcf	??_is_valid+1,f,c
  6098  000DEA  90D8               	bcf	status,0,c
  6099  000DEC  3607               	rlcf	??_is_valid,f,c
  6100  000DEE  3608               	rlcf	??_is_valid+1,f,c
  6101  000DF0  C007  F040         	movff	??_is_valid,_total_number
  6102  000DF4  C008  F041         	movff	??_is_valid+1,_total_number+1
  6103  000DF8  0012               	return	
  6104  000DFA                     __end_of_is_valid:
  6105                           	opt stack 0
  6106                           pclatu	equ	0xFFB
  6107                           pclath	equ	0xFFA
  6108                           tblptru	equ	0xFF8
  6109                           tblptrh	equ	0xFF7
  6110                           tblptrl	equ	0xFF6
  6111                           tablat	equ	0xFF5
  6112                           prodh	equ	0xFF4
  6113                           prodl	equ	0xFF3
  6114                           intcon	equ	0xFF2
  6115                           intcon3	equ	0xFF0
  6116                           indf0	equ	0xFEF
  6117                           postinc0	equ	0xFEE
  6118                           fsr0h	equ	0xFEA
  6119                           fsr0l	equ	0xFE9
  6120                           wreg	equ	0xFE8
  6121                           indf1	equ	0xFE7
  6122                           fsr1h	equ	0xFE2
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function i2___wmul *****************
  6132 ;; Defined at:
  6133 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  multiplier      2    0[COMRAM] unsigned int 
  6136 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  __wmul          2    4[COMRAM] unsigned int 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  2    0[COMRAM] unsigned int 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, prodl, prodh
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;Total ram usage:        6 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_interruptHandler
  6158 ;;		_is_valid
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text21
  6163  001888                     __ptext21:
  6164                           	opt stack 0
  6165  001888                     i2___wmul:
  6166                           	opt stack 26
  6167                           
  6168                           ;incstack = 0
  6169  001888  5001               	movf	i2___wmul@multiplier,w,c
  6170  00188A  0203               	mulwf	i2___wmul@multiplicand,c
  6171  00188C  CFF3 F005          	movff	prodl,i2___wmul@product
  6172  001890  CFF4 F006          	movff	prodh,i2___wmul@product+1
  6173  001894  5001               	movf	i2___wmul@multiplier,w,c
  6174  001896  0204               	mulwf	i2___wmul@multiplicand+1,c
  6175  001898  50F3               	movf	prodl,w,c
  6176  00189A  2606               	addwf	i2___wmul@product+1,f,c
  6177  00189C  5002               	movf	i2___wmul@multiplier+1,w,c
  6178  00189E  0203               	mulwf	i2___wmul@multiplicand,c
  6179  0018A0  50F3               	movf	prodl,w,c
  6180  0018A2  2606               	addwf	i2___wmul@product+1,f,c
  6181  0018A4  C005  F001         	movff	i2___wmul@product,?i2___wmul
  6182  0018A8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  6183  0018AC  0012               	return	
  6184  0018AE                     __end_ofi2___wmul:
  6185                           	opt stack 0
  6186                           pclatu	equ	0xFFB
  6187                           pclath	equ	0xFFA
  6188                           tblptru	equ	0xFF8
  6189                           tblptrh	equ	0xFF7
  6190                           tblptrl	equ	0xFF6
  6191                           tablat	equ	0xFF5
  6192                           prodh	equ	0xFF4
  6193                           prodl	equ	0xFF3
  6194                           intcon	equ	0xFF2
  6195                           intcon3	equ	0xFF0
  6196                           indf0	equ	0xFEF
  6197                           postinc0	equ	0xFEE
  6198                           fsr0h	equ	0xFEA
  6199                           fsr0l	equ	0xFE9
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           fsr1h	equ	0xFE2
  6203                           fsr1l	equ	0xFE1
  6204                           indf2	equ	0xFDF
  6205                           postinc2	equ	0xFDE
  6206                           postdec2	equ	0xFDD
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _strcmp *****************
  6212 ;; Defined at:
  6213 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  6216 ;;		 -> current_set2(5), 
  6217 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  6218 ;;		 -> STR_44(5), STR_43(5), STR_42(5), STR_41(5), 
  6219 ;;		 -> STR_40(5), STR_39(5), STR_38(5), STR_37(4), 
  6220 ;;		 -> STR_36(4), STR_35(4), STR_34(4), STR_33(4), 
  6221 ;;		 -> STR_32(4), STR_31(3), STR_30(3), STR_29(3), 
  6222 ;;		 -> STR_28(2), STR_27(2), STR_26(2), STR_25(2), 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  r               1    5[COMRAM] char 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  2    0[COMRAM] int 
  6227 ;; Registers used:
  6228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:        6 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_is_valid
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           	psect	text22
  6248  0016DA                     __ptext22:
  6249                           	opt stack 0
  6250  0016DA                     _strcmp:
  6251                           	opt stack 25
  6252                           
  6253                           ;incstack = 0
  6254  0016DA  D004               	goto	i2l869
  6255  0016DC  4A01               	infsnz	strcmp@s1,f,c
  6256  0016DE  2A02               	incf	strcmp@s1+1,f,c
  6257  0016E0  4A03               	infsnz	strcmp@s2,f,c
  6258  0016E2  2A04               	incf	strcmp@s2+1,f,c
  6259  0016E4                     i2l869:
  6260  0016E4  C001  FFD9         	movff	strcmp@s1,fsr2l
  6261  0016E8  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6262  0016EC  50DF               	movf	indf2,w,c
  6263  0016EE  6E05               	movwf	??_strcmp& (0+255),c
  6264  0016F0  C003  FFF6         	movff	strcmp@s2,tblptrl
  6265  0016F4  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  6266  0016F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6267  0016F8  6AF8               	clrf	tblptru,c
  6268  0016FA                     	endif
  6269  0016FA                     	if	0	;tblptru may be non-zero
  6270  0016FA                     	endif
  6271  0016FA  0008               	tblrd		*
  6272  0016FC  50F5               	movf	tablat,w,c
  6273  0016FE  0800               	sublw	0
  6274  001700  2405               	addwf	??_strcmp,w,c
  6275  001702  6E06               	movwf	strcmp@r,c
  6276  001704  5006               	movf	strcmp@r,w,c
  6277  001706  A4D8               	btfss	status,2,c
  6278  001708  D007               	goto	i2u119_40
  6279  00170A  C001  FFD9         	movff	strcmp@s1,fsr2l
  6280  00170E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6281  001712  50DF               	movf	indf2,w,c
  6282  001714  A4D8               	btfss	status,2,c
  6283  001716  D7E2               	goto	i2l870
  6284  001718                     i2u119_40:
  6285  001718  5006               	movf	strcmp@r,w,c
  6286  00171A  6E01               	movwf	?_strcmp,c
  6287  00171C  6A02               	clrf	?_strcmp+1,c
  6288  00171E  BE01               	btfsc	?_strcmp,7,c
  6289  001720  0602               	decf	?_strcmp+1,f,c
  6290  001722  0012               	return	
  6291  001724                     __end_of_strcmp:
  6292                           	opt stack 0
  6293                           pclatu	equ	0xFFB
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           intcon3	equ	0xFF0
  6303                           indf0	equ	0xFEF
  6304                           postinc0	equ	0xFEE
  6305                           fsr0h	equ	0xFEA
  6306                           fsr0l	equ	0xFE9
  6307                           wreg	equ	0xFE8
  6308                           indf1	equ	0xFE7
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _check *****************
  6319 ;; Defined at:
  6320 ;;		line 629 in file "main.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  2    0[COMRAM] int 
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;Total ram usage:        2 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_interruptHandler
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text23
  6348  001538                     __ptext23:
  6349                           	opt stack 0
  6350  001538                     _check:
  6351                           	opt stack 26
  6352                           
  6353                           ;main.c: 630: if (B>2||N>3||S>2||W>4||total_number >4){
  6354                           
  6355                           ;incstack = 0
  6356  001538  BE3D               	btfsc	_B+1,7,c
  6357  00153A  D006               	goto	i2u171_40
  6358  00153C  503D               	movf	_B+1,w,c
  6359  00153E  E124               	bnz	i2l2368
  6360  001540  0E03               	movlw	3
  6361  001542  5C3C               	subwf	_B,w,c
  6362  001544  B0D8               	btfsc	status,0,c
  6363  001546  D020               	goto	i2u175_40
  6364  001548                     i2u171_40:
  6365  001548  BE3B               	btfsc	_N+1,7,c
  6366  00154A  D006               	goto	i2u172_40
  6367  00154C  503B               	movf	_N+1,w,c
  6368  00154E  E11C               	bnz	i2l2368
  6369  001550  0E04               	movlw	4
  6370  001552  5C3A               	subwf	_N,w,c
  6371  001554  B0D8               	btfsc	status,0,c
  6372  001556  D018               	goto	i2u175_40
  6373  001558                     i2u172_40:
  6374  001558  BE39               	btfsc	_S+1,7,c
  6375  00155A  D006               	goto	i2u173_40
  6376  00155C  5039               	movf	_S+1,w,c
  6377  00155E  E114               	bnz	i2l2368
  6378  001560  0E03               	movlw	3
  6379  001562  5C38               	subwf	_S,w,c
  6380  001564  B0D8               	btfsc	status,0,c
  6381  001566  D010               	goto	i2u175_40
  6382  001568                     i2u173_40:
  6383  001568  BE37               	btfsc	_W+1,7,c
  6384  00156A  D006               	goto	i2u174_40
  6385  00156C  5037               	movf	_W+1,w,c
  6386  00156E  E10C               	bnz	i2l2368
  6387  001570  0E05               	movlw	5
  6388  001572  5C36               	subwf	_W,w,c
  6389  001574  B0D8               	btfsc	status,0,c
  6390  001576  D008               	goto	i2u175_40
  6391  001578                     i2u174_40:
  6392  001578  BE41               	btfsc	_total_number+1,7,c
  6393  00157A  D00B               	goto	i2l219
  6394  00157C  5041               	movf	_total_number+1,w,c
  6395  00157E  E104               	bnz	i2l2368
  6396  001580  0E05               	movlw	5
  6397  001582  5C40               	subwf	_total_number,w,c
  6398  001584  A0D8               	btfss	status,0,c
  6399  001586  D005               	goto	i2l219
  6400  001588                     i2u175_40:
  6401  001588                     i2l2368:
  6402                           
  6403                           ;main.c: 634: return 0;
  6404  001588  0E00               	movlw	0
  6405  00158A  6E02               	movwf	?_check+1,c
  6406  00158C  0E00               	movlw	0
  6407  00158E  6E01               	movwf	?_check,c
  6408  001590  0012               	return	
  6409  001592                     i2l219:
  6410                           
  6411                           ;main.c: 635: }
  6412                           ;main.c: 636: return 1;
  6413  001592  0E00               	movlw	0
  6414  001594  6E02               	movwf	?_check+1,c
  6415  001596  0E01               	movlw	1
  6416  001598  6E01               	movwf	?_check,c
  6417  00159A  0012               	return	
  6418  00159C                     __end_of_check:
  6419                           	opt stack 0
  6420                           pclatu	equ	0xFFB
  6421                           pclath	equ	0xFFA
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon3	equ	0xFF0
  6430                           indf0	equ	0xFEF
  6431                           postinc0	equ	0xFEE
  6432                           fsr0h	equ	0xFEA
  6433                           fsr0l	equ	0xFE9
  6434                           wreg	equ	0xFE8
  6435                           indf1	equ	0xFE7
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           pclatu	equ	0xFFB
  6445                           pclath	equ	0xFFA
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           intcon3	equ	0xFF0
  6454                           indf0	equ	0xFEF
  6455                           postinc0	equ	0xFEE
  6456                           fsr0h	equ	0xFEA
  6457                           fsr0l	equ	0xFE9
  6458                           wreg	equ	0xFE8
  6459                           indf1	equ	0xFE7
  6460                           fsr1h	equ	0xFE2
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           postdec2	equ	0xFDD
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469                           	psect	rparam
  6470  0000                     pclatu	equ	0xFFB
  6471                           pclath	equ	0xFFA
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           intcon3	equ	0xFF0
  6480                           indf0	equ	0xFEF
  6481                           postinc0	equ	0xFEE
  6482                           fsr0h	equ	0xFEA
  6483                           fsr0l	equ	0xFE9
  6484                           wreg	equ	0xFE8
  6485                           indf1	equ	0xFE7
  6486                           fsr1h	equ	0xFE2
  6487                           fsr1l	equ	0xFE1
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495                           	psect	temp
  6496  000059                     btemp:
  6497                           	opt stack 0
  6498  000059                     	ds	1
  6499  0000                     int$flags	set	btemp
  6500  0000                     wtemp6	set	btemp+1
  6501                           pclatu	equ	0xFFB
  6502                           pclath	equ	0xFFA
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           intcon3	equ	0xFF0
  6511                           indf0	equ	0xFEF
  6512                           postinc0	equ	0xFEE
  6513                           fsr0h	equ	0xFEA
  6514                           fsr0l	equ	0xFE9
  6515                           wreg	equ	0xFE8
  6516                           indf1	equ	0xFE7
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8


Data Sizes:
    Strings     192
    Constant    133
    Data        0
    BSS         300
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     53      88
    BANK0           128     30      95
    BANK1           256      0     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_21(CODE[1]), STR_19(CODE[1]), STR_16(CODE[1]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[5]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[4]), 
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[2]), STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(COMRAM[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_24(CODE[6]), STR_23(CODE[9]), STR_22(CODE[12]), STR_20(CODE[7]), 
		 -> STR_18(CODE[3]), STR_17(CODE[11]), STR_15(CODE[3]), STR_14(CODE[9]), 
		 -> STR_9(CODE[15]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[17]), 
		 -> STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[3]), STR_2(CODE[14]), 
		 -> STR_1(CODE[15]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_45(CODE[7]), final_set(BANK0[40]), current_set(BANK0[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4949
                                             26 BANK0      4     4      0
                             ___wmul
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    2942
                                             12 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1518
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0    9271
                                             26 COMRAM    27    27      0
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            20    16      4    1272
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    3808
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     677
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _lcdNibble

 _interruptHandler (ROOT)
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1E      5F       5       74.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     35      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17F      34        0.0%
DATA                 0      0     17F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 13:45:56 2018

                        _B 003C                          _N 003A                          _S 0038  
                        _W 0036                __CFG_CPD$ON 000000        ___wmul@multiplicand 00C3  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l120 0F08                        l122 101A                        l123 0F7E  
                      l300 107E                        l117 0E2E                        l118 0E7E  
                      l303 1130                        l119 0ED0                        l307 1178  
                      l308 11D2                        l309 117E                        l290 104C  
                      l291 10D4                        l720 15DC                        l296 1106  
                      l721 15E6                        l297 1054                        l289 103C  
                      l730 179A                        l731 17A4                        l299 10AA  
                      l716 15BC                        l717 15B4                        l726 1782  
                      l727 177A               __CFG_CPB$OFF 000000              _assembly_step 0090  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l2992 1134                       STR_1 FF5E                       STR_2 FF6D  
                     STR_3 FFF9                       STR_4 FFA4                       STR_5 FFBA  
                     STR_6 FF3E                       STR_7 FFF9                       STR_8 FF4C  
                     STR_9 FF4F                       u2300 15C0                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u2330 1786                       u2430 1166  
                     u2450 11DC                       u2370 10A0                       u2275 1474  
                     u2276 1476                       u2380 10CC                       u2285 14B6  
                     u2286 14B8                       u2607 0EC2                       u2377 1096  
                     u2617 0EFA                       u2707 145C                       u2387 10C2  
                     u2627 0F32                       u2717 1466                       u2637 0F64  
                     u2727 149E                       u2647 0FE6                       u2737 14A8  
                     u2657 1006                       u2667 18BE                       u2587 0E46  
                     u2677 164A                       u2597 0E6A                       u2687 167E  
                     u2697 18D6                       _main 0DFA   __end_of_interruptHandler 0866  
                     _keys FEB9                       _temp 004B                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0059                       _strs FEDA                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 18F2              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 14BA           __end_of_LCD_LEFT FED5               _total_number 0040  
                    ?_main 0001                      STR_10 FFFC                      STR_11 FFEB  
                    STR_12 FFEF                      STR_20 FFB3                      STR_21 FF5D  
                    STR_13 FFF3                      STR_30 FFEE                      STR_14 FF92  
                    STR_22 FF7B                      STR_31 FFF2                      STR_15 FFF9  
                    STR_23 FF9B                      STR_16 FF5D                      STR_32 FFE9  
                    STR_40 FFD5                      STR_24 FFC0                      STR_25 FFFC  
                    STR_33 FFED                      STR_41 FFCB                      STR_17 FF87  
                    STR_26 FFEB                      STR_18 FFF9                      STR_34 FFF1  
                    STR_42 FFD0                      STR_19 FF5D                      STR_27 FFEF  
                    STR_35 FFCC                      STR_43 FFC6                      STR_28 FFF3  
                    STR_36 FFD6                      STR_44 FFE4                      STR_29 FFEA  
                    STR_37 FFF5                      STR_45 FFAC                      STR_38 FFDA  
                    STR_39 FFDF            __end_of___lwdiv 15F0                      i2l201 0B9A  
          __end_of___lwmod 17AE                      i2l211 0D3E                      i2l203 0BEE  
                    i2l300 1244                      i2l140 0176                      i2l213 0D9C  
                    i2l205 0C42                      i2l133 0096                      i2l150 0320  
                    i2l142 01BE                      i2l207 0C96                      i2l303 12F0  
                    i2l151 0360                      i2l135 0246                      i2l152 0532  
                    i2l144 0206                      i2l136 00E6                      i2l209 0CEA  
                    i2l153 03B6                      i2l145 022C                      i2l170 0744  
                    i2l162 06AA                      i2l146 0586                      i2l138 012E  
                    i2l219 1592                      i2l307 1338                      i2l163 0658  
                    i2l155 04B4                      i2l147 0260                      i2l308 138C  
                    i2l172 0796                      i2l164 06E4                      i2l156 052A  
                    i2l148 02A0                      i2l181 08F0                      i2l309 133E  
                    i2l165 0660                      i2l149 02E0                      i2l174 07F0  
                    i2l166 0668                      i2l191 0A12                      i2l183 091E  
                    i2l167 0670                      i2l168 0678                      i2l193 0A5E  
                    i2l185 0956                      i2l177 0894                      i2l169 0682  
                    i2l290 1214                      i2l195 0AAA                      i2l187 098E  
                    i2l179 08C2                      i2l291 1298                      i2l197 0AFC  
                    i2l189 09C6                      i2l199 0B4E                      i2l720 162E  
                    i2l296 12C8                      i2l721 1638                      i2l297 121A  
                    i2l289 1204                      i2l730 17DC                      i2l731 17E6  
                    i2l299 126E                      i2l716 160E                      i2l717 1606  
                    i2l726 17C4                      i2l727 17BC                      i2l860 17FE  
                    i2l861 17FA                      i2l870 16DC                      i2l863 1816  
                    i2l864 180E                      i2l883 141C                      i2l884 13B2  
                    i2l869 16E4                      i2l877 1736                      i2l885 1414  
                    i2l878 172E                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 18DE             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_initLCD 168E                      _check 1538             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FED4                      _error 0044                      _valid 0042  
                    _state 0092                      _putch 18AE                      main@i 00DD  
                    pclath 000FFA                      tablat 000FF5          _LCDinterruptState 004C  
         __end_ofi2___wmul 18AE                      status 000FD8                      wtemp6 005A  
          __end_of_strncmp 1436             __CFG_PBADEN$ON 000000           __end_ofi2_printf 13B0  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 1832  
       __size_ofi2_lcdInst 0014               __end_of_main 1030               __end_of_keys FECA  
               i2printf@ap 0014                 i2printf@cp 0016               __end_of_strs FF3E  
       __size_ofi2_initLCD 004C             __CFG_OSC$HSPLL 000000          __end_of_LCD_RIGHT FED6  
                   ??_main 00DB              __activetblptr 000003                     ?_check 0001  
                   _ADCON0 000FC2                     _ADCON1 000FC1            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2200 13B2                     i2l2436 12F4  
                   i2l2368 1588                     i2l2806 0818                     i2l2808 081A  
                   i2l2690 04C2                  ??i2_putch 0003             __CFG_XINST$OFF 000000  
                   ___wmul 1860             __CFG_STVREN$ON 000000                  ??___lwdiv 00C5  
                ??___lwmod 00CC           __end_of_is_valid 0DFA                     clear_0 1838  
                   clear_1 1844                     clear_2 1850                     _number 0057  
                ??_lcdInst 00C3                     _printf 1030                     _strcat 17F0  
                   _strcmp 16DA                     _strcpy 1724                  ??_initLCD 00C4  
        __end_ofi2___lwdiv 1642               __mediumconst FEB8          __end_ofi2___lwmod 17F0  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
        __end_ofi2_lcdInst 1906                  ??_strncmp 000D          __end_ofi2_initLCD 16DA  
               __accesstop 0080    __end_of__initialization 1856              ___rparam_used 000001  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001              __end_of_check 159C  
            __end_of_putch 18C6                i2printf@val 0018                  ?i2___wmul 0001  
       __size_of_lcdNibble 0084                i2putch@data 0003                  ?i2_printf 000D  
                  ??_check 0003                    ??_putch 00C3                 __pbssBANK0 0080  
               __pbssBANK1 0100          ?_interruptHandler 0001         ??_interruptHandler 001B  
             ?i2_lcdNibble 0001                    ?___wmul 00C1                    ?_printf 00CD  
                  ?_strcat 0001                    ?_strcmp 0001                    ?_strcpy 0007  
               ??i2___wmul 0005                 ??i2_printf 0011       lcd@LCDinterruptState 004A  
                  i2_putch 18DE                  ?_is_valid 0001          __end_of_lcdNibble 14BA  
                  __Hparam 0000                    __Lparam 0000            __size_of___wmul 0028  
                  ___lwdiv 159C                    ___lwmod 176A   interruptHandler@keypress 0035  
                  __pcinit 1832                    __ramtop 1000                    _lcdInst 18C6  
                  __ptext0 0DFA                    __ptext1 1030                    __ptext2 18AE  
                  __ptext3 176A                    __ptext4 159C                    __ptext5 1642  
                  __ptext6 18C6                    __ptext7 1436                    __ptext8 1860  
          __size_of_printf 01CA            __size_of_strcat 0042            __size_of_strcmp 004A  
          __size_of_strcpy 0046                    _initLCD 1642                    _counter 0048  
                  _dpowers FECA                  _LCD_RIGHT FED5                    _strncmp 13B0  
           __pintcode_body 0012       end_of_initialization 1856      __end_of_LCD_SIZE_HORZ FED8  
    __end_of_LCD_SIZE_VERT FED7               _final_number 0080                    int_func 0012  
      i2___wmul@multiplier 0001                 ??_is_valid 0007                    printf@c 00DA  
                  printf@f 00CD                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                    strcmp@r 0006                 _prev_state 003E  
        i2___lwdiv@divisor 0003                  i2___lwdiv 15F0                  i2___lwmod 17AE  
        i2___lwdiv@counter 0007                  i2_lcdInst 18F2                  i2_initLCD 168E  
           __end_of___wmul 1888       __size_ofi2_lcdNibble 007E              i2lcdInst@data 0003  
         i2___wmul@product 0005             __end_of_printf 11FA             __end_of_strcat 1832  
           __end_of_strcmp 1724               i2printf@flag 0012             __end_of_strcpy 176A  
             i2printf@prec 0013        start_initialization 1832          __size_ofi2___wmul 0026  
                i2printf@c 001A                  i2printf@f 000D                 ?i2___lwdiv 0001  
               ?i2___lwmod 0008          __size_ofi2_printf 01B6                 ?i2_lcdInst 0001  
             _counter_step 0046                 ?i2_initLCD 0001          interruptHandler@i 0032  
                 ??___wmul 00C5           __CFG_LPT1OSC$OFF 000000                   ??_printf 00D1  
__size_of_interruptHandler 085E                   ??_strcat 0005                   ??_strcmp 0005  
                 ??_strcpy 000B                __pbssCOMRAM 0036              __pcstackBANK0 00C1  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
             _current_set2 0052          __size_of_is_valid 0594           ___lwdiv@dividend 00C1  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FEB8  
                _lcdNibble 1436                   ?___lwdiv 00C1                   ?___lwmod 00C8  
                _final_set 0094                   ?_lcdInst 0001                   ?_initLCD 0001  
           __size_of_check 0064           ___lwdiv@quotient 00C6                   ?_strncmp 0007  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 0018  
                 _LCD_LEFT FED4                ??i2_lcdInst 0003             ___wmul@product 00C5  
                 _LATDbits 000F8C                ??i2_initLCD 0004                   i2u130_40 17C8  
                 i2u210_40 04C2                   i2u212_40 0542                   i2u116_45 14F4  
                 i2u116_46 14F6                   i2u117_45 1534                   i2u117_46 1536  
                 i2u119_40 1718                   i2u127_40 1612                   i2u144_40 1760  
                 i2u208_40 03B4                   i2u144_47 1756                   i2u171_40 1548  
                 i2u172_40 1558                   i2u173_40 1568                   i2u149_40 13E0  
                 i2u174_40 1578                   i2u175_40 1588                   i2u184_40 1326  
                 i2u280_47 055C                   i2u281_47 05C8                   i2u186_40 1394  
                 i2u178_40 1266                   i2u290_47 14DC                   i2u178_47 125C  
                 i2u282_47 069C                   i2u274_47 0220                   i2u179_40 1290  
                 i2u291_47 14E6                   i2u179_47 1286                   i2u283_47 0704  
                 i2u275_47 0236                   i2u292_47 151C                   i2u284_47 0724  
                 i2u276_47 038A                   i2u293_47 1526                   i2u285_47 07C6  
                 i2u277_47 045E                   i2u286_47 18EA                   i2u278_47 049C  
                 i2u287_47 1694                   i2u279_47 050C                   i2u288_47 16C8  
                 i2u289_47 18FE           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
        ___wmul@multiplier 00C1                   i2___wmul 1888              lcdNibble@data 00C2  
               printf@flag 00D2              lcdNibble@temp 00C1                 printf@prec 00D3  
                 i2_printf 11FA             _LCD_HORZ_LIMIT FED9       interruptHandler@temp 0034  
         __size_ofi2_putch 0014                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000      i2___wmul@multiplicand 0003           __size_of___lwdiv 0054  
         __size_of___lwmod 0044           _interruptHandler 0008           __size_of_lcdInst 0018  
         __size_of_initLCD 004C                _current_set 00BC                 strcat@from 0003  
   __end_of_LCD_HORZ_LIMIT FEDA            ___lwdiv@divisor 00C3            ___lwdiv@counter 00C5  
                 __ptext10 11FA                   __ptext11 18DE                   __ptext20 0866  
                 __ptext12 17AE                   __ptext21 1888                   __ptext13 15F0  
                 __ptext22 16DA                   __ptext14 168E                   __ptext23 1538  
                 __ptext15 18F2                   __ptext16 14BA                   __ptext17 13B0  
                 __ptext18 1724                   __ptext19 17F0                   _fastener 0100  
           _LCD_VERT_LIMIT FED8           __size_of_strncmp 0086                 strcpy@from 0009  
            __size_of_main 0236                   _is_valid 0866                 strncmp@len 000B  
                 _temp_set 004D              ??i2_lcdNibble 0001                ??_lcdNibble 00C1  
                 int$flags 0059                  printf@val 00D8                  putch@data 00C3  
               _INTCONbits 000FF2     __end_of_LCD_VERT_LIMIT FED9                   intlevel2 0000  
            _LCD_SIZE_HORZ FED7           ___lwmod@dividend 00C8              _LCD_SIZE_VERT FED6  
                strncmp@s1 0007                  strncmp@s2 0009                   printf@ap 00D4  
                 printf@cp 00D6                lcdInst@data 00C3        __end_ofi2_lcdNibble 1538  
                 strcat@cp 0005                   strcat@to 0001                   strcmp@s1 0001  
                 strcmp@s2 0003            ___lwmod@divisor 00CA                   strcpy@cp 000B  
                 strcpy@to 0007            ___lwmod@counter 00CC  
