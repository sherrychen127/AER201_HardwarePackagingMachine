

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb  5 23:56:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	mediumconst
    76  00FBCC                     __pmediumconst:
    77                           	opt stack 0
    78  00FBCC  00                 	db	0
    79  00FBCD                     _keys:
    80                           	opt stack 0
    81  00FBCD  31                 	db	49
    82  00FBCE  32                 	db	50
    83  00FBCF  33                 	db	51
    84  00FBD0  41                 	db	65
    85  00FBD1  34                 	db	52
    86  00FBD2  35                 	db	53
    87  00FBD3  36                 	db	54
    88  00FBD4  42                 	db	66
    89  00FBD5  37                 	db	55
    90  00FBD6  38                 	db	56
    91  00FBD7  39                 	db	57
    92  00FBD8  43                 	db	67
    93  00FBD9  2A                 	db	42
    94  00FBDA  30                 	db	48
    95  00FBDB  23                 	db	35
    96  00FBDC  44                 	db	68
    97  00FBDD  00                 	db	0
    98  00FBDE                     __end_of_keys:
    99                           	opt stack 0
   100  00FBDE                     _dpowers:
   101                           	opt stack 0
   102  00FBDE  0001               	dw	1
   103  00FBE0  000A               	dw	10
   104  00FBE2  0064               	dw	100
   105  00FBE4  03E8               	dw	1000
   106  00FBE6  2710               	dw	10000
   107  00FBE8                     __end_of_dpowers:
   108                           	opt stack 0
   109  00FBE8                     _LCD_LEFT:
   110                           	opt stack 0
   111  00FBE8  00                 	db	0
   112  00FBE9                     __end_of_LCD_LEFT:
   113                           	opt stack 0
   114  00FBE9                     _LCD_RIGHT:
   115                           	opt stack 0
   116  00FBE9  01                 	db	1
   117  00FBEA                     __end_of_LCD_RIGHT:
   118                           	opt stack 0
   119  00FBEA                     _LCD_SIZE_VERT:
   120                           	opt stack 0
   121  00FBEA  02                 	db	2
   122  00FBEB                     __end_of_LCD_SIZE_VERT:
   123                           	opt stack 0
   124  00FBEB                     _LCD_SIZE_HORZ:
   125                           	opt stack 0
   126  00FBEB  10                 	db	16
   127  00FBEC                     __end_of_LCD_SIZE_HORZ:
   128                           	opt stack 0
   129  00FBEC                     _LCD_VERT_LIMIT:
   130                           	opt stack 0
   131  00FBEC  02                 	db	2
   132  00FBED                     __end_of_LCD_VERT_LIMIT:
   133                           	opt stack 0
   134  00FBED                     _LCD_HORZ_LIMIT:
   135                           	opt stack 0
   136  00FBED  28                 	db	40
   137  00FBEE                     __end_of_LCD_HORZ_LIMIT:
   138                           	opt stack 0
   139  00FBEE                     _strs:
   140                           	opt stack 0
   141  00FBEE  42                 	db	66
   142  00FBEF  00                 	db	0
   143  00FBF0  00                 	db	0
   144  00FBF1  00                 	db	0
   145  00FBF2  4E                 	db	78
   146  00FBF3  00                 	db	0
   147  00FBF4  00                 	db	0
   148  00FBF5  00                 	db	0
   149  00FBF6  53                 	db	83
   150  00FBF7  00                 	db	0
   151  00FBF8  00                 	db	0
   152  00FBF9  00                 	db	0
   153  00FBFA  57                 	db	87
   154  00FBFB  00                 	db	0
   155  00FBFC  00                 	db	0
   156  00FBFD  00                 	db	0
   157  00FBFE  42                 	db	66
   158  00FBFF  4E                 	db	78
   159  00FC00  00                 	db	0
   160  00FC01  00                 	db	0
   161  00FC02  42                 	db	66
   162  00FC03  53                 	db	83
   163  00FC04  00                 	db	0
   164  00FC05  00                 	db	0
   165  00FC06  42                 	db	66
   166  00FC07  57                 	db	87
   167  00FC08  00                 	db	0
   168  00FC09  00                 	db	0
   169  00FC0A  42                 	db	66
   170  00FC0B  42                 	db	66
   171  00FC0C  4E                 	db	78
   172  00FC0D  00                 	db	0
   173  00FC0E  42                 	db	66
   174  00FC0F  42                 	db	66
   175  00FC10  53                 	db	83
   176  00FC11  00                 	db	0
   177  00FC12  42                 	db	66
   178  00FC13  42                 	db	66
   179  00FC14  57                 	db	87
   180  00FC15  00                 	db	0
   181  00FC16  42                 	db	66
   182  00FC17  4E                 	db	78
   183  00FC18  57                 	db	87
   184  00FC19  00                 	db	0
   185  00FC1A  42                 	db	66
   186  00FC1B  53                 	db	83
   187  00FC1C  57                 	db	87
   188  00FC1D  00                 	db	0
   189  00FC1E  42                 	db	66
   190  00FC1F  57                 	db	87
   191  00FC20  57                 	db	87
   192  00FC21  00                 	db	0
   193  00FC22  42                 	db	66
   194  00FC23  4E                 	db	78
   195  00FC24  57                 	db	87
   196  00FC25  57                 	db	87
   197  00FC26  42                 	db	66
   198  00FC27  53                 	db	83
   199  00FC28  57                 	db	87
   200  00FC29  57                 	db	87
   201  00FC2A  42                 	db	66
   202  00FC2B  42                 	db	66
   203  00FC2C  53                 	db	83
   204  00FC2D  57                 	db	87
   205  00FC2E  42                 	db	66
   206  00FC2F  42                 	db	66
   207  00FC30  4E                 	db	78
   208  00FC31  57                 	db	87
   209  00FC32  42                 	db	66
   210  00FC33  4E                 	db	78
   211  00FC34  4E                 	db	78
   212  00FC35  57                 	db	87
   213  00FC36  42                 	db	66
   214  00FC37  4E                 	db	78
   215  00FC38  4E                 	db	78
   216  00FC39  4E                 	db	78
   217  00FC3A  42                 	db	66
   218  00FC3B  57                 	db	87
   219  00FC3C  57                 	db	87
   220  00FC3D  57                 	db	87
   221  00FC3E                     __end_of_strs:
   222                           	opt stack 0
   223  0000                     _LATDbits	set	3980
   224  0000                     _PORTB	set	3969
   225  0000                     _TRISE	set	3990
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISC	set	3988
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISA	set	3986
   230  0000                     _LATE	set	3981
   231  0000                     _LATD	set	3980
   232  0000                     _LATC	set	3979
   233  0000                     _LATB	set	3978
   234  0000                     _LATA	set	3977
   235  0000                     _ADCON1	set	4033
   236  0000                     _ADCON0	set	4034
   237  0000                     _INTCONbits	set	4082
   238  0000                     _INT1IF	set	32640
   239  0000                     _INT1IE	set	32643
   240  00FC3E                     STR_6:
   241  00FC3E  61                 	db	97	;'a'
   242  00FC3F  73                 	db	115	;'s'
   243  00FC40  73                 	db	115	;'s'
   244  00FC41  65                 	db	101	;'e'
   245  00FC42  6D                 	db	109	;'m'
   246  00FC43  62                 	db	98	;'b'
   247  00FC44  6C                 	db	108	;'l'
   248  00FC45  79                 	db	121	;'y'
   249  00FC46  20                 	db	32
   250  00FC47  73                 	db	115	;'s'
   251  00FC48  74                 	db	116	;'t'
   252  00FC49  65                 	db	101	;'e'
   253  00FC4A  70                 	db	112	;'p'
   254  00FC4B  3A                 	db	58	;':'
   255  00FC4C  25                 	db	37
   256  00FC4D  64                 	db	100	;'d'
   257  00FC4E  00                 	db	0
   258  00FC4F                     STR_9:
   259  00FC4F  57                 	db	87	;'W'
   260  00FC50  72                 	db	114	;'r'
   261  00FC51  6F                 	db	111	;'o'
   262  00FC52  6E                 	db	110	;'n'
   263  00FC53  67                 	db	103	;'g'
   264  00FC54  20                 	db	32
   265  00FC55  6E                 	db	110	;'n'
   266  00FC56  75                 	db	117	;'u'
   267  00FC57  6D                 	db	109	;'m'
   268  00FC58  62                 	db	98	;'b'
   269  00FC59  65                 	db	101	;'e'
   270  00FC5A  72                 	db	114	;'r'
   271  00FC5B  21                 	db	33
   272  00FC5C  20                 	db	32
   273  00FC5D  00                 	db	0
   274  00FC5E                     STR_1:
   275  00FC5E  61                 	db	97	;'a'
   276  00FC5F  73                 	db	115	;'s'
   277  00FC60  73                 	db	115	;'s'
   278  00FC61  65                 	db	101	;'e'
   279  00FC62  6D                 	db	109	;'m'
   280  00FC63  62                 	db	98	;'b'
   281  00FC64  6C                 	db	108	;'l'
   282  00FC65  79                 	db	121	;'y'
   283  00FC66  20                 	db	32
   284  00FC67  73                 	db	115	;'s'
   285  00FC68  74                 	db	116	;'t'
   286  00FC69  65                 	db	101	;'e'
   287  00FC6A  70                 	db	112	;'p'
   288  00FC6B  3A                 	db	58	;':'
   289  00FC6C  00                 	db	0
   290  00FC6D                     STR_2:
   291  00FC6D  66                 	db	102	;'f'
   292  00FC6E  61                 	db	97	;'a'
   293  00FC6F  73                 	db	115	;'s'
   294  00FC70  74                 	db	116	;'t'
   295  00FC71  65                 	db	101	;'e'
   296  00FC72  6E                 	db	110	;'n'
   297  00FC73  65                 	db	101	;'e'
   298  00FC74  72                 	db	114	;'r'
   299  00FC75  20                 	db	32
   300  00FC76  73                 	db	115	;'s'
   301  00FC77  65                 	db	101	;'e'
   302  00FC78  74                 	db	116	;'t'
   303  00FC79  3A                 	db	58	;':'
   304  00FC7A  00                 	db	0
   305  00FC7B                     STR_24:
   306  00FC7B  57                 	db	87	;'W'
   307  00FC7C  72                 	db	114	;'r'
   308  00FC7D  6F                 	db	111	;'o'
   309  00FC7E  6E                 	db	110	;'n'
   310  00FC7F  67                 	db	103	;'g'
   311  00FC80  20                 	db	32
   312  00FC81  69                 	db	105	;'i'
   313  00FC82  6E                 	db	110	;'n'
   314  00FC83  70                 	db	112	;'p'
   315  00FC84  75                 	db	117	;'u'
   316  00FC85  74                 	db	116	;'t'
   317  00FC86  00                 	db	0
   318  00FC87                     STR_19:
   319  00FC87  77                 	db	119	;'w'
   320  00FC88  72                 	db	114	;'r'
   321  00FC89  6F                 	db	111	;'o'
   322  00FC8A  6E                 	db	110	;'n'
   323  00FC8B  67                 	db	103	;'g'
   324  00FC8C  20                 	db	32
   325  00FC8D  73                 	db	115	;'s'
   326  00FC8E  65                 	db	101	;'e'
   327  00FC8F  74                 	db	116	;'t'
   328  00FC90  21                 	db	33
   329  00FC91  00                 	db	0
   330  00FC92                     STR_17:
   331  00FC92  63                 	db	99	;'c'
   332  00FC93  6F                 	db	111	;'o'
   333  00FC94  72                 	db	114	;'r'
   334  00FC95  72                 	db	114	;'r'
   335  00FC96  65                 	db	101	;'e'
   336  00FC97  63                 	db	99	;'c'
   337  00FC98  74                 	db	116	;'t'
   338  00FC99  21                 	db	33
   339  00FC9A  00                 	db	0
   340  00FC9B                     STR_25:
   341  00FC9B  54                 	db	84	;'T'
   342  00FC9C  4F                 	db	79	;'O'
   343  00FC9D  4F                 	db	79	;'O'
   344  00FC9E  20                 	db	32
   345  00FC9F  4D                 	db	77	;'M'
   346  00FCA0  41                 	db	65	;'A'
   347  00FCA1  4E                 	db	78	;'N'
   348  00FCA2  59                 	db	89	;'Y'
   349  00FCA3  00                 	db	0
   350  00FCA4                     STR_4:
   351  00FCA4  6E                 	db	110	;'n'
   352  00FCA5  75                 	db	117	;'u'
   353  00FCA6  6D                 	db	109	;'m'
   354  00FCA7  62                 	db	98	;'b'
   355  00FCA8  65                 	db	101	;'e'
   356  00FCA9  72                 	db	114	;'r'
   357  00FCAA  3A                 	db	58	;':'
   358  00FCAB  00                 	db	0
   359  00FCAC                     STR_47:
   360  00FCAC  28                 	db	40
   361  00FCAD  6E                 	db	110	;'n'
   362  00FCAE  75                 	db	117	;'u'
   363  00FCAF  6C                 	db	108	;'l'
   364  00FCB0  6C                 	db	108	;'l'
   365  00FCB1  29                 	db	41
   366  00FCB2  00                 	db	0
   367  00FCB3                     STR_22:
   368  00FCB3  77                 	db	119	;'w'
   369  00FCB4  72                 	db	114	;'r'
   370  00FCB5  6F                 	db	111	;'o'
   371  00FCB6  6E                 	db	110	;'n'
   372  00FCB7  67                 	db	103	;'g'
   373  00FCB8  21                 	db	33
   374  00FCB9  00                 	db	0
   375  00FCBA                     STR_5:
   376  00FCBA  44                 	db	68	;'D'
   377  00FCBB  6F                 	db	111	;'o'
   378  00FCBC  6E                 	db	110	;'n'
   379  00FCBD  65                 	db	101	;'e'
   380  00FCBE  21                 	db	33
   381  00FCBF  00                 	db	0
   382  00FCC0                     STR_26:
   383  00FCC0  6F                 	db	111	;'o'
   384  00FCC1  6B                 	db	107	;'k'
   385  00FCC2  61                 	db	97	;'a'
   386  00FCC3  79                 	db	121	;'y'
   387  00FCC4  21                 	db	33
   388  00FCC5  00                 	db	0
   389  00FCC6                     STR_45:
   390  00FCC6  42                 	db	66	;'B'
   391  00FCC7  4E                 	db	78	;'N'
   392  00FCC8  4E                 	db	78	;'N'
   393  00FCC9  4E                 	db	78	;'N'
   394  00FCCA  00                 	db	0
   395  00FCCB                     STR_43:
   396  00FCCB  42                 	db	66	;'B'
   397  00FCCC  42                 	db	66	;'B'
   398  00FCCD  4E                 	db	78	;'N'
   399  00FCCE  57                 	db	87	;'W'
   400  00FCCF  00                 	db	0
   401  00FCD0                     STR_44:
   402  00FCD0  42                 	db	66	;'B'
   403  00FCD1  4E                 	db	78	;'N'
   404  00FCD2  4E                 	db	78	;'N'
   405  00FCD3  57                 	db	87	;'W'
   406  00FCD4  00                 	db	0
   407  00FCD5                     STR_42:
   408  00FCD5  42                 	db	66	;'B'
   409  00FCD6  42                 	db	66	;'B'
   410  00FCD7  53                 	db	83	;'S'
   411  00FCD8  57                 	db	87	;'W'
   412  00FCD9  00                 	db	0
   413  00FCDA                     STR_40:
   414  00FCDA  42                 	db	66	;'B'
   415  00FCDB  4E                 	db	78	;'N'
   416  00FCDC  57                 	db	87	;'W'
   417  00FCDD  57                 	db	87	;'W'
   418  00FCDE  00                 	db	0
   419  00FCDF                     STR_41:
   420  00FCDF  42                 	db	66	;'B'
   421  00FCE0  53                 	db	83	;'S'
   422  00FCE1  57                 	db	87	;'W'
   423  00FCE2  57                 	db	87	;'W'
   424  00FCE3  00                 	db	0
   425  00FCE4                     STR_46:
   426  00FCE4  42                 	db	66	;'B'
   427  00FCE5  57                 	db	87	;'W'
   428  00FCE6  57                 	db	87	;'W'
   429  00FCE7  57                 	db	87	;'W'
   430  00FCE8  00                 	db	0
   431  00FCE9                     STR_34:
   432  00FCE9  42                 	db	66	;'B'
   433  00FCEA  42                 	db	66	;'B'
   434  00FCEB  4E                 	db	78	;'N'
   435  00FCEC  00                 	db	0
   436  00FCED                     STR_35:
   437  00FCED  42                 	db	66	;'B'
   438  00FCEE  42                 	db	66	;'B'
   439  00FCEF  53                 	db	83	;'S'
   440  00FCF0  00                 	db	0
   441  00FCF1                     STR_36:
   442  00FCF1  42                 	db	66	;'B'
   443  00FCF2  42                 	db	66	;'B'
   444  00FCF3  57                 	db	87	;'W'
   445  00FCF4  00                 	db	0
   446  00FCF5                     STR_39:
   447  00FCF5  42                 	db	66	;'B'
   448  00FCF6  57                 	db	87	;'W'
   449  00FCF7  57                 	db	87	;'W'
   450  00FCF8  00                 	db	0
   451  00FCF9                     STR_3:
   452  00FCF9  25                 	db	37
   453  00FCFA  73                 	db	115	;'s'
   454  00FCFB  00                 	db	0
   455  00FCFC                     STR_10:
   456  00FCFC  42                 	db	66	;'B'
   457  00FCFD  00                 	db	0
   458  0000                     
   459                           ; #config settings
   460  00FCFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  00180E                     __pcinit:
   464                           	opt stack 0
   465  00180E                     start_initialization:
   466                           	opt stack 0
   467  00180E                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (200 bytes)
   471  00180E  EE01  F000         	lfsr	0,__pbssBANK1
   472  001812  0EC8               	movlw	200
   473  001814                     clear_0:
   474  001814  6AEE               	clrf	postinc0,c
   475  001816  06E8               	decf	wreg,f,c
   476  001818  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (56 bytes)
   479  00181A  EE00  F080         	lfsr	0,__pbssBANK0
   480  00181E  0E38               	movlw	56
   481  001820                     clear_1:
   482  001820  6AEE               	clrf	postinc0,c
   483  001822  06E8               	decf	wreg,f,c
   484  001824  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (33 bytes)
   487  001826  EE00  F033         	lfsr	0,__pbssCOMRAM
   488  00182A  0E21               	movlw	33
   489  00182C                     clear_2:
   490  00182C  6AEE               	clrf	postinc0,c
   491  00182E  06E8               	decf	wreg,f,c
   492  001830  E1FD               	bnz	clear_2
   493  001832                     end_of_initialization:
   494                           	opt stack 0
   495  001832                     __end_of__initialization:
   496                           	opt stack 0
   497  001832  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   498  001834  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   499  001836  0100               	movlb	0
   500  001838  EFE8  F006         	goto	_main	;jump to C main() function
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           
   504                           	psect	bssCOMRAM
   505  000033                     __pbssCOMRAM:
   506                           	opt stack 0
   507  000033                     _W:
   508                           	opt stack 0
   509  000033                     	ds	2
   510  000035                     _S:
   511                           	opt stack 0
   512  000035                     	ds	2
   513  000037                     _N:
   514                           	opt stack 0
   515  000037                     	ds	2
   516  000039                     _B:
   517                           	opt stack 0
   518  000039                     	ds	2
   519  00003B                     _prev_state:
   520                           	opt stack 0
   521  00003B                     	ds	2
   522  00003D                     _total_number:
   523                           	opt stack 0
   524  00003D                     	ds	2
   525  00003F                     _valid:
   526                           	opt stack 0
   527  00003F                     	ds	2
   528  000041                     _error:
   529                           	opt stack 0
   530  000041                     	ds	2
   531  000043                     _counter_step:
   532                           	opt stack 0
   533  000043                     	ds	2
   534  000045                     _counter:
   535                           	opt stack 0
   536  000045                     	ds	2
   537  000047                     lcd@LCDinterruptState:
   538                           	opt stack 0
   539  000047                     	ds	1
   540  000048                     _temp:
   541                           	opt stack 0
   542  000048                     	ds	1
   543  000049                     	ds	1
   544  00004A                     _temp_set:
   545                           	opt stack 0
   546  00004A                     	ds	4
   547  00004E                     _current_set2:
   548                           	opt stack 0
   549  00004E                     	ds	4
   550  000052                     _number:
   551                           	opt stack 0
   552  000052                     	ds	2
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           
   556                           	psect	bssBANK0
   557  000080                     __pbssBANK0:
   558                           	opt stack 0
   559  000080                     _final_number:
   560                           	opt stack 0
   561  000080                     	ds	16
   562  000090                     _assembly_step:
   563                           	opt stack 0
   564  000090                     	ds	2
   565  000092                     _state:
   566                           	opt stack 0
   567  000092                     	ds	2
   568  000094                     _final_set:
   569                           	opt stack 0
   570  000094                     	ds	32
   571  0000B4                     _current_set:
   572                           	opt stack 0
   573  0000B4                     	ds	4
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           	psect	bssBANK1
   578  000100                     __pbssBANK1:
   579                           	opt stack 0
   580  000100                     _fastener:
   581                           	opt stack 0
   582  000100                     	ds	200
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           	psect	cstackBANK0
   587  0000B8                     __pcstackBANK0:
   588                           	opt stack 0
   589  0000B8                     ?___lwdiv:
   590                           	opt stack 0
   591  0000B8                     lcdNibble@temp:
   592                           	opt stack 0
   593  0000B8                     ___lwdiv@dividend:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x0
   597  0000B8                     	ds	1
   598  0000B9                     lcdNibble@data:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x1
   602  0000B9                     	ds	1
   603  0000BA                     lcdInst@data:
   604                           	opt stack 0
   605  0000BA                     putch@data:
   606                           	opt stack 0
   607  0000BA                     ___lwdiv@divisor:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x2
   611  0000BA                     	ds	1
   612  0000BB                     ??_initLCD:
   613                           
   614                           ; 1 bytes @ 0x3
   615  0000BB                     	ds	1
   616  0000BC                     ___lwdiv@counter:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x4
   620  0000BC                     	ds	1
   621  0000BD                     ___lwdiv@quotient:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x5
   625  0000BD                     	ds	2
   626  0000BF                     ?___lwmod:
   627                           	opt stack 0
   628  0000BF                     ___lwmod@dividend:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x7
   632  0000BF                     	ds	2
   633  0000C1                     ___lwmod@divisor:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x9
   637  0000C1                     	ds	2
   638  0000C3                     ___lwmod@counter:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0xB
   642  0000C3                     	ds	1
   643  0000C4                     ?_printf:
   644                           	opt stack 0
   645  0000C4                     printf@f:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0xC
   649  0000C4                     	ds	4
   650  0000C8                     ??_printf:
   651                           
   652                           ; 1 bytes @ 0x10
   653  0000C8                     	ds	1
   654  0000C9                     printf@flag:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x11
   658  0000C9                     	ds	1
   659  0000CA                     printf@prec:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x12
   663  0000CA                     	ds	1
   664  0000CB                     printf@ap:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x13
   668  0000CB                     	ds	2
   669  0000CD                     printf@cp:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x15
   673  0000CD                     	ds	2
   674  0000CF                     printf@val:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x17
   678  0000CF                     	ds	2
   679  0000D1                     printf@c:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x19
   683  0000D1                     	ds	1
   684  0000D2                     ??_main:
   685                           
   686                           ; 1 bytes @ 0x1A
   687  0000D2                     	ds	2
   688  0000D4                     main@i:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x1C
   692  0000D4                     	ds	2
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           
   696                           	psect	cstackCOMRAM
   697  000001                     __pcstackCOMRAM:
   698                           	opt stack 0
   699  000001                     ?_strncmp:
   700                           	opt stack 0
   701  000001                     ?_check:
   702                           	opt stack 0
   703  000001                     ?_strcmp:
   704                           	opt stack 0
   705  000001                     ?___wmul:
   706                           	opt stack 0
   707  000001                     ?i2___lwdiv:
   708                           	opt stack 0
   709  000001                     i2lcdNibble@temp:
   710                           	opt stack 0
   711  000001                     ___wmul@multiplier:
   712                           	opt stack 0
   713  000001                     strcat@to:
   714                           	opt stack 0
   715  000001                     strcmp@s1:
   716                           	opt stack 0
   717  000001                     strcpy@to:
   718                           	opt stack 0
   719  000001                     strncmp@s1:
   720                           	opt stack 0
   721  000001                     i2___lwdiv@dividend:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x0
   725  000001                     	ds	1
   726  000002                     i2lcdNibble@data:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x1
   730  000002                     	ds	1
   731  000003                     i2lcdInst@data:
   732                           	opt stack 0
   733  000003                     i2putch@data:
   734                           	opt stack 0
   735  000003                     ___wmul@multiplicand:
   736                           	opt stack 0
   737  000003                     strcat@from:
   738                           	opt stack 0
   739  000003                     strcmp@s2:
   740                           	opt stack 0
   741  000003                     strcpy@from:
   742                           	opt stack 0
   743  000003                     strncmp@s2:
   744                           	opt stack 0
   745  000003                     i2___lwdiv@divisor:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x2
   749  000003                     	ds	1
   750  000004                     ??i2_initLCD:
   751                           
   752                           ; 1 bytes @ 0x3
   753  000004                     	ds	1
   754  000005                     ??_strcmp:
   755  000005                     ___wmul@product:
   756                           	opt stack 0
   757  000005                     strcat@cp:
   758                           	opt stack 0
   759  000005                     strcpy@cp:
   760                           	opt stack 0
   761  000005                     strncmp@len:
   762                           	opt stack 0
   763  000005                     i2___lwdiv@quotient:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x4
   767  000005                     	ds	1
   768  000006                     strcmp@r:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x5
   772  000006                     	ds	1
   773  000007                     ??_strncmp:
   774  000007                     ??_is_valid:
   775  000007                     i2___lwdiv@counter:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x6
   779  000007                     	ds	1
   780  000008                     ?i2___lwmod:
   781                           	opt stack 0
   782  000008                     i2___lwmod@dividend:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x7
   786  000008                     	ds	2
   787  00000A                     i2___lwmod@divisor:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x9
   791  00000A                     	ds	2
   792  00000C                     i2___lwmod@counter:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0xB
   796  00000C                     	ds	1
   797  00000D                     ?i2_printf:
   798                           	opt stack 0
   799  00000D                     i2printf@f:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0xC
   803  00000D                     	ds	4
   804  000011                     ??i2_printf:
   805                           
   806                           ; 1 bytes @ 0x10
   807  000011                     	ds	1
   808  000012                     i2printf@flag:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x11
   812  000012                     	ds	1
   813  000013                     i2printf@prec:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x12
   817  000013                     	ds	1
   818  000014                     i2printf@ap:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x13
   822  000014                     	ds	2
   823  000016                     i2printf@cp:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x15
   827  000016                     	ds	2
   828  000018                     i2printf@val:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x17
   832  000018                     	ds	2
   833  00001A                     i2printf@c:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x19
   837  00001A                     	ds	1
   838  00001B                     ??_interruptHandler:
   839                           
   840                           ; 1 bytes @ 0x1A
   841  00001B                     	ds	20
   842  00002F                     interruptHandler@i:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x2E
   846  00002F                     	ds	2
   847  000031                     interruptHandler@temp:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x30
   851  000031                     	ds	1
   852  000032                     interruptHandler@keypress:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x31
   856  000032                     	ds	1
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           
   860 ;;
   861 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   862 ;;
   863 ;; *************** function _main *****************
   864 ;; Defined at:
   865 ;;		line 58 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  i               2   28[BANK0 ] int 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;Total ram usage:        4 bytes
   884 ;; Hardware stack levels required when called:    7
   885 ;; This function calls:
   886 ;;		_initLCD
   887 ;;		_lcdInst
   888 ;;		_printf
   889 ;; This function is called by:
   890 ;;		Startup code after reset
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text0
   895  000DD0                     __ptext0:
   896                           	opt stack 0
   897  000DD0                     _main:
   898                           	opt stack 24
   899                           
   900                           ;main.c: 64: LATA = 0x00;
   901                           
   902                           ;incstack = 0
   903  000DD0  0E00               	movlw	0
   904  000DD2  6E89               	movwf	3977,c	;volatile
   905                           
   906                           ;main.c: 65: LATB = 0x00;
   907  000DD4  0E00               	movlw	0
   908  000DD6  6E8A               	movwf	3978,c	;volatile
   909                           
   910                           ;main.c: 66: LATC = 0x00;
   911  000DD8  0E00               	movlw	0
   912  000DDA  6E8B               	movwf	3979,c	;volatile
   913                           
   914                           ;main.c: 67: LATD = 0x00;
   915  000DDC  0E00               	movlw	0
   916  000DDE  6E8C               	movwf	3980,c	;volatile
   917                           
   918                           ;main.c: 68: LATE = 0x00;
   919  000DE0  0E00               	movlw	0
   920  000DE2  6E8D               	movwf	3981,c	;volatile
   921                           
   922                           ;main.c: 72: TRISA = 0xFF;
   923  000DE4  6892               	setf	3986,c	;volatile
   924                           
   925                           ;main.c: 73: TRISB = 0xFF;
   926  000DE6  6893               	setf	3987,c	;volatile
   927                           
   928                           ;main.c: 74: TRISC = 0x00;
   929  000DE8  0E00               	movlw	0
   930  000DEA  6E94               	movwf	3988,c	;volatile
   931                           
   932                           ;main.c: 75: TRISD = 0x00;
   933  000DEC  0E00               	movlw	0
   934  000DEE  6E95               	movwf	3989,c	;volatile
   935                           
   936                           ;main.c: 76: TRISE = 0x00;
   937  000DF0  0E00               	movlw	0
   938  000DF2  6E96               	movwf	3990,c	;volatile
   939                           
   940                           ;main.c: 79: ADCON0 = 0x00;
   941  000DF4  0E00               	movlw	0
   942  000DF6  6EC2               	movwf	4034,c	;volatile
   943                           
   944                           ;main.c: 80: ADCON1 = 0b00001111;
   945  000DF8  0E0F               	movlw	15
   946  000DFA  6EC1               	movwf	4033,c	;volatile
   947                           
   948                           ;main.c: 83: INT1IE = 1;
   949  000DFC  86F0               	bsf	intcon3,3,c	;volatile
   950                           
   951                           ;main.c: 84: (INTCONbits.GIE = 1);
   952  000DFE  8EF2               	bsf	intcon,7,c	;volatile
   953                           
   954                           ;main.c: 87: initLCD();
   955  000E00  EC0F  F00B         	call	_initLCD	;wreg free
   956  000E04                     
   957                           ;main.c: 91: if (state == 0){
   958  000E04  0100               	movlb	0	; () banked
   959  000E06  5192               	movf	_state& (0+255),w,b
   960  000E08  1193               	iorwf	(_state+1)& (0+255),w,b
   961  000E0A  A4D8               	btfss	status,2,c
   962  000E0C  D023               	goto	l118
   963                           
   964                           ; BSR set to: 0
   965                           ;main.c: 93: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   966  000E0E  0E80               	movlw	128
   967  000E10  EC3D  F00C         	call	_lcdInst
   968  000E14  0E41               	movlw	65
   969  000E16  0100               	movlb	0	; () banked
   970  000E18  6FD2               	movwf	??_main& (0+255),b
   971  000E1A  0EEE               	movlw	238
   972  000E1C                     u2637:
   973  000E1C  2EE8               	decfsz	wreg,f,c
   974  000E1E  D7FE               	bra	u2637
   975  000E20  2FD2               	decfsz	??_main& (0+255),f,b
   976  000E22  D7FC               	bra	u2637
   977  000E24  F000               	nop	
   978                           
   979                           ;main.c: 94: printf("assembly step:");
   980  000E26  0E5E               	movlw	low STR_1
   981  000E28  0100               	movlb	0	; () banked
   982  000E2A  6FC4               	movwf	printf@f& (0+255),b
   983  000E2C  0EFC               	movlw	high STR_1
   984  000E2E  6FC5               	movwf	(printf@f+1)& (0+255),b
   985  000E30  EC06  F008         	call	_printf	;wreg free
   986                           
   987                           ;main.c: 96: _delay((unsigned long)((1000)*(40000000/4000.0)));
   988  000E34  0E33               	movlw	51
   989  000E36  0100               	movlb	0	; () banked
   990  000E38  6FD3               	movwf	(??_main+1)& (0+255),b
   991  000E3A  0EBB               	movlw	187
   992  000E3C  6FD2               	movwf	??_main& (0+255),b
   993  000E3E  0EDF               	movlw	223
   994  000E40                     u2647:
   995  000E40  2EE8               	decfsz	wreg,f,c
   996  000E42  D7FE               	bra	u2647
   997  000E44  2FD2               	decfsz	??_main& (0+255),f,b
   998  000E46  D7FC               	bra	u2647
   999  000E48  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1000  000E4A  D7FA               	bra	u2647
  1001  000E4C  D000               	nop2	
  1002                           
  1003                           ;main.c: 97: lcdInst(0xC0);;
  1004  000E4E  0EC0               	movlw	192
  1005  000E50  EC3D  F00C         	call	_lcdInst
  1006  000E54                     l118:
  1007                           
  1008                           ;main.c: 101: }
  1009                           ;main.c: 103: if (state ==1){
  1010  000E54  0100               	movlb	0	; () banked
  1011  000E56  0592               	decf	_state& (0+255),w,b
  1012  000E58  1193               	iorwf	(_state+1)& (0+255),w,b
  1013  000E5A  A4D8               	btfss	status,2,c
  1014  000E5C  D024               	goto	l119
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 104: initLCD();
  1018  000E5E  EC0F  F00B         	call	_initLCD	;wreg free
  1019                           
  1020                           ;main.c: 106: printf("fastener set:");
  1021  000E62  0E6D               	movlw	low STR_2
  1022  000E64  0100               	movlb	0	; () banked
  1023  000E66  6FC4               	movwf	printf@f& (0+255),b
  1024  000E68  0EFC               	movlw	high STR_2
  1025  000E6A  6FC5               	movwf	(printf@f+1)& (0+255),b
  1026  000E6C  EC06  F008         	call	_printf	;wreg free
  1027                           
  1028                           ;main.c: 109: lcdInst(0xC0);;
  1029  000E70  0EC0               	movlw	192
  1030  000E72  EC3D  F00C         	call	_lcdInst
  1031                           
  1032                           ;main.c: 110: printf("%s",current_set);
  1033  000E76  0EF9               	movlw	low STR_3
  1034  000E78  0100               	movlb	0	; () banked
  1035  000E7A  6FC4               	movwf	printf@f& (0+255),b
  1036  000E7C  0EFC               	movlw	high STR_3
  1037  000E7E  6FC5               	movwf	(printf@f+1)& (0+255),b
  1038  000E80  0EB4               	movlw	low _current_set
  1039  000E82  6FC6               	movwf	(?_printf+2)& (0+255),b
  1040  000E84  0E00               	movlw	high _current_set
  1041  000E86  6FC7               	movwf	(?_printf+3)& (0+255),b
  1042  000E88  EC06  F008         	call	_printf	;wreg free
  1043                           
  1044                           ;main.c: 111: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1045  000E8C  0E33               	movlw	51
  1046  000E8E  0100               	movlb	0	; () banked
  1047  000E90  6FD3               	movwf	(??_main+1)& (0+255),b
  1048  000E92  0EBB               	movlw	187
  1049  000E94  6FD2               	movwf	??_main& (0+255),b
  1050  000E96  0EDF               	movlw	223
  1051  000E98                     u2657:
  1052  000E98  2EE8               	decfsz	wreg,f,c
  1053  000E9A  D7FE               	bra	u2657
  1054  000E9C  2FD2               	decfsz	??_main& (0+255),f,b
  1055  000E9E  D7FC               	bra	u2657
  1056  000EA0  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1057  000EA2  D7FA               	bra	u2657
  1058  000EA4  D000               	nop2	
  1059  000EA6                     l119:
  1060                           
  1061                           ;main.c: 112: }
  1062                           ;main.c: 114: if (state == 2){
  1063  000EA6  0E02               	movlw	2
  1064  000EA8  0100               	movlb	0	; () banked
  1065  000EAA  1992               	xorwf	_state& (0+255),w,b
  1066  000EAC  1193               	iorwf	(_state+1)& (0+255),w,b
  1067  000EAE  A4D8               	btfss	status,2,c
  1068  000EB0  D016               	goto	l120
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;main.c: 115: initLCD();
  1072  000EB2  EC0F  F00B         	call	_initLCD	;wreg free
  1073                           
  1074                           ;main.c: 117: printf("number:");
  1075  000EB6  0EA4               	movlw	low STR_4
  1076  000EB8  0100               	movlb	0	; () banked
  1077  000EBA  6FC4               	movwf	printf@f& (0+255),b
  1078  000EBC  0EFC               	movlw	high STR_4
  1079  000EBE  6FC5               	movwf	(printf@f+1)& (0+255),b
  1080  000EC0  EC06  F008         	call	_printf	;wreg free
  1081                           
  1082                           ;main.c: 119: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1083  000EC4  0E33               	movlw	51
  1084  000EC6  0100               	movlb	0	; () banked
  1085  000EC8  6FD3               	movwf	(??_main+1)& (0+255),b
  1086  000ECA  0EBB               	movlw	187
  1087  000ECC  6FD2               	movwf	??_main& (0+255),b
  1088  000ECE  0EDF               	movlw	223
  1089  000ED0                     u2667:
  1090  000ED0  2EE8               	decfsz	wreg,f,c
  1091  000ED2  D7FE               	bra	u2667
  1092  000ED4  2FD2               	decfsz	??_main& (0+255),f,b
  1093  000ED6  D7FC               	bra	u2667
  1094  000ED8  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1095  000EDA  D7FA               	bra	u2667
  1096  000EDC  D000               	nop2	
  1097  000EDE                     l120:
  1098                           
  1099                           ;main.c: 120: }
  1100                           ;main.c: 122: if (state == 3){
  1101  000EDE  0E03               	movlw	3
  1102  000EE0  0100               	movlb	0	; () banked
  1103  000EE2  1992               	xorwf	_state& (0+255),w,b
  1104  000EE4  1193               	iorwf	(_state+1)& (0+255),w,b
  1105  000EE6  A4D8               	btfss	status,2,c
  1106  000EE8  D78D               	goto	l117
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;main.c: 123: initLCD();
  1110  000EEA  EC0F  F00B         	call	_initLCD	;wreg free
  1111                           
  1112                           ;main.c: 125: printf("Done!");
  1113  000EEE  0EBA               	movlw	low STR_5
  1114  000EF0  0100               	movlb	0	; () banked
  1115  000EF2  6FC4               	movwf	printf@f& (0+255),b
  1116  000EF4  0EFC               	movlw	high STR_5
  1117  000EF6  6FC5               	movwf	(printf@f+1)& (0+255),b
  1118  000EF8  EC06  F008         	call	_printf	;wreg free
  1119                           
  1120                           ;main.c: 126: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1121  000EFC  0E66               	movlw	102
  1122  000EFE  0100               	movlb	0	; () banked
  1123  000F00  6FD3               	movwf	(??_main+1)& (0+255),b
  1124  000F02  0E76               	movlw	118
  1125  000F04  6FD2               	movwf	??_main& (0+255),b
  1126  000F06  0EC1               	movlw	193
  1127  000F08                     u2677:
  1128  000F08  2EE8               	decfsz	wreg,f,c
  1129  000F0A  D7FE               	bra	u2677
  1130  000F0C  2FD2               	decfsz	??_main& (0+255),f,b
  1131  000F0E  D7FC               	bra	u2677
  1132  000F10  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1133  000F12  D7FA               	bra	u2677
  1134                           
  1135                           ;main.c: 127: initLCD();
  1136  000F14  EC0F  F00B         	call	_initLCD	;wreg free
  1137                           
  1138                           ;main.c: 128: printf("assembly step:%d",assembly_step);
  1139  000F18  0E3E               	movlw	low STR_6
  1140  000F1A  0100               	movlb	0	; () banked
  1141  000F1C  6FC4               	movwf	printf@f& (0+255),b
  1142  000F1E  0EFC               	movlw	high STR_6
  1143  000F20  6FC5               	movwf	(printf@f+1)& (0+255),b
  1144  000F22  C090  F0C6         	movff	_assembly_step,?_printf+2
  1145  000F26  C091  F0C7         	movff	_assembly_step+1,?_printf+3
  1146  000F2A  EC06  F008         	call	_printf	;wreg free
  1147                           
  1148                           ;main.c: 129: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1149  000F2E  0E33               	movlw	51
  1150  000F30  0100               	movlb	0	; () banked
  1151  000F32  6FD3               	movwf	(??_main+1)& (0+255),b
  1152  000F34  0EBB               	movlw	187
  1153  000F36  6FD2               	movwf	??_main& (0+255),b
  1154  000F38  0EDF               	movlw	223
  1155  000F3A                     u2687:
  1156  000F3A  2EE8               	decfsz	wreg,f,c
  1157  000F3C  D7FE               	bra	u2687
  1158  000F3E  2FD2               	decfsz	??_main& (0+255),f,b
  1159  000F40  D7FC               	bra	u2687
  1160  000F42  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1161  000F44  D7FA               	bra	u2687
  1162  000F46  D000               	nop2	
  1163                           
  1164                           ;main.c: 130: for (int i=0; i<8; i++){
  1165  000F48  0E00               	movlw	0
  1166  000F4A  0100               	movlb	0	; () banked
  1167  000F4C  6FD5               	movwf	(main@i+1)& (0+255),b
  1168  000F4E  0E00               	movlw	0
  1169  000F50  6FD4               	movwf	main@i& (0+255),b
  1170                           
  1171                           ; BSR set to: 0
  1172  000F52  BFD5               	btfsc	(main@i+1)& (0+255),7,b
  1173  000F54  D008               	goto	l122
  1174  000F56  51D5               	movf	(main@i+1)& (0+255),w,b
  1175  000F58  E105               	bnz	u2550
  1176  000F5A  0E08               	movlw	8
  1177  000F5C  5DD4               	subwf	main@i& (0+255),w,b
  1178  000F5E  B0D8               	btfsc	status,0,c
  1179  000F60  D751               	goto	l117
  1180  000F62  D001               	goto	l122
  1181  000F64                     u2550:
  1182                           
  1183                           ; BSR set to: 0
  1184  000F64  D74F               	goto	l117
  1185  000F66                     l122:
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 132: initLCD();
  1189                           
  1190                           ; BSR set to: 0
  1191  000F66  EC0F  F00B         	call	_initLCD	;wreg free
  1192                           
  1193                           ;main.c: 134: printf("%s", final_set[i]);
  1194  000F6A  0EF9               	movlw	low STR_3
  1195  000F6C  0100               	movlb	0	; () banked
  1196  000F6E  6FC4               	movwf	printf@f& (0+255),b
  1197  000F70  0EFC               	movlw	high STR_3
  1198  000F72  6FC5               	movwf	(printf@f+1)& (0+255),b
  1199  000F74  C0D4  F0D2         	movff	main@i,??_main
  1200  000F78  C0D5  F0D3         	movff	main@i+1,??_main+1
  1201  000F7C  90D8               	bcf	status,0,c
  1202  000F7E  37D2               	rlcf	??_main& (0+255),f,b
  1203  000F80  37D3               	rlcf	(??_main+1)& (0+255),f,b
  1204  000F82  90D8               	bcf	status,0,c
  1205  000F84  37D2               	rlcf	??_main& (0+255),f,b
  1206  000F86  37D3               	rlcf	(??_main+1)& (0+255),f,b
  1207  000F88  0E94               	movlw	low _final_set
  1208  000F8A  25D2               	addwf	??_main& (0+255),w,b
  1209  000F8C  6FC6               	movwf	(?_printf+2)& (0+255),b
  1210  000F8E  0E00               	movlw	high _final_set
  1211  000F90  21D3               	addwfc	(??_main+1)& (0+255),w,b
  1212  000F92  6FC7               	movwf	(?_printf+3)& (0+255),b
  1213  000F94  EC06  F008         	call	_printf	;wreg free
  1214                           
  1215                           ;main.c: 135: printf("%d",final_number[i]);
  1216  000F98  0E4C               	movlw	low (STR_6+14)
  1217  000F9A  0100               	movlb	0	; () banked
  1218  000F9C  6FC4               	movwf	printf@f& (0+255),b
  1219  000F9E  0EFC               	movlw	high (STR_6+14)
  1220  000FA0  6FC5               	movwf	(printf@f+1)& (0+255),b
  1221  000FA2  90D8               	bcf	status,0,c
  1222  000FA4  35D4               	rlcf	main@i& (0+255),w,b
  1223  000FA6  6ED9               	movwf	fsr2l,c
  1224  000FA8  35D5               	rlcf	(main@i+1)& (0+255),w,b
  1225  000FAA  6EDA               	movwf	fsr2h,c
  1226  000FAC  0E80               	movlw	low _final_number
  1227  000FAE  26D9               	addwf	fsr2l,f,c
  1228  000FB0  0E00               	movlw	high _final_number
  1229  000FB2  22DA               	addwfc	fsr2h,f,c
  1230  000FB4  CFDE F0C6          	movff	postinc2,?_printf+2
  1231  000FB8  CFDD F0C7          	movff	postdec2,?_printf+3
  1232  000FBC  EC06  F008         	call	_printf	;wreg free
  1233                           
  1234                           ;main.c: 136: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1235  000FC0  0E33               	movlw	51
  1236  000FC2  0100               	movlb	0	; () banked
  1237  000FC4  6FD3               	movwf	(??_main+1)& (0+255),b
  1238  000FC6  0EBB               	movlw	187
  1239  000FC8  6FD2               	movwf	??_main& (0+255),b
  1240  000FCA  0EDF               	movlw	223
  1241  000FCC                     u2697:
  1242  000FCC  2EE8               	decfsz	wreg,f,c
  1243  000FCE  D7FE               	bra	u2697
  1244  000FD0  2FD2               	decfsz	??_main& (0+255),f,b
  1245  000FD2  D7FC               	bra	u2697
  1246  000FD4  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1247  000FD6  D7FA               	bra	u2697
  1248  000FD8  D000               	nop2	
  1249                           
  1250                           ;main.c: 137: lcdInst(0xC0);;
  1251  000FDA  0EC0               	movlw	192
  1252  000FDC  EC3D  F00C         	call	_lcdInst
  1253                           
  1254                           ;main.c: 141: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1255  000FE0  0E33               	movlw	51
  1256  000FE2  0100               	movlb	0	; () banked
  1257  000FE4  6FD3               	movwf	(??_main+1)& (0+255),b
  1258  000FE6  0EBB               	movlw	187
  1259  000FE8  6FD2               	movwf	??_main& (0+255),b
  1260  000FEA  0EDF               	movlw	223
  1261  000FEC                     u2707:
  1262  000FEC  2EE8               	decfsz	wreg,f,c
  1263  000FEE  D7FE               	bra	u2707
  1264  000FF0  2FD2               	decfsz	??_main& (0+255),f,b
  1265  000FF2  D7FC               	bra	u2707
  1266  000FF4  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1267  000FF6  D7FA               	bra	u2707
  1268  000FF8  D000               	nop2	
  1269  000FFA  0100               	movlb	0	; () banked
  1270  000FFC  4BD4               	infsnz	main@i& (0+255),f,b
  1271  000FFE  2BD5               	incf	(main@i+1)& (0+255),f,b
  1272  001000  BFD5               	btfsc	(main@i+1)& (0+255),7,b
  1273  001002  D7B1               	goto	l122
  1274  001004  51D5               	movf	(main@i+1)& (0+255),w,b
  1275  001006  E101               	bnz	u2560
  1276  001008  D7A8               	goto	L1
  1277  00100A                     u2560:
  1278                           
  1279                           ; BSR set to: 0
  1280                           
  1281                           ; BSR set to: 0
  1282                           
  1283                           ; BSR set to: 0
  1284  00100A  D6FC               	goto	l117
  1285  00100C                     __end_of_main:
  1286                           	opt stack 0
  1287                           intcon	equ	0xFF2
  1288                           intcon3	equ	0xFF0
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postinc2	equ	0xFDE
  1292                           postdec2	equ	0xFDD
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _printf *****************
  1298 ;; Defined at:
  1299 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1302 ;;		 -> STR_26(6), STR_25(9), STR_24(12), STR_22(7), 
  1303 ;;		 -> STR_20(3), STR_19(11), STR_18(3), STR_17(9), 
  1304 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  1305 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  1306 ;;		 -> STR_1(15), 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  tmpval          4    0        struct .
  1309 ;;  val             2   23[BANK0 ] unsigned int 
  1310 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  1311 ;;		 -> STR_47(7), final_set(32), current_set(4), 
  1312 ;;  ap              2   19[BANK0 ] PTR void [1]
  1313 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1314 ;;  len             2    0        unsigned int 
  1315 ;;  c               1   25[BANK0 ] char 
  1316 ;;  prec            1   18[BANK0 ] char 
  1317 ;;  flag            1   17[BANK0 ] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  2   12[BANK0 ] int 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1328 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;Total ram usage:       14 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    6
  1334 ;; This function calls:
  1335 ;;		___lwdiv
  1336 ;;		___lwmod
  1337 ;;		_putch
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text1
  1344  00100C                     __ptext1:
  1345                           	opt stack 0
  1346  00100C                     _printf:
  1347                           	opt stack 24
  1348                           
  1349                           ;doprnt.c: 466: va_list ap;
  1350                           ;doprnt.c: 499: signed char c;
  1351                           ;doprnt.c: 506: signed char prec;
  1352                           ;doprnt.c: 508: unsigned char flag;
  1353                           ;doprnt.c: 523: union {
  1354                           ;doprnt.c: 524: unsigned long vd;
  1355                           ;doprnt.c: 525: double integ;
  1356                           ;doprnt.c: 526: } tmpval;
  1357                           ;doprnt.c: 528: unsigned int val;
  1358                           ;doprnt.c: 529: unsigned len;
  1359                           ;doprnt.c: 530: const char * cp;
  1360                           ;doprnt.c: 533: *ap = __va_start();
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;incstack = 0
  1364  00100C  0EC6               	movlw	low (?_printf+2)
  1365  00100E  0100               	movlb	0	; () banked
  1366  001010  6FCB               	movwf	printf@ap& (0+255),b
  1367  001012  0E00               	movlw	high (?_printf+2)
  1368  001014  6FCC               	movwf	(printf@ap+1)& (0+255),b
  1369                           
  1370                           ;doprnt.c: 536: while(c = *f++) {
  1371  001016  D0D0               	goto	u2490
  1372  001018                     
  1373                           ; BSR set to: 0
  1374                           ;doprnt.c: 538: if(c != '%')
  1375                           
  1376                           ; BSR set to: 0
  1377  001018  0E25               	movlw	37
  1378  00101A  19D1               	xorwf	printf@c& (0+255),w,b
  1379  00101C  B4D8               	btfsc	status,2,c
  1380  00101E  D004               	goto	l292
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;doprnt.c: 540: {
  1384                           ;doprnt.c: 541: (putch(c) );
  1385  001020  51D1               	movf	printf@c& (0+255),w,b
  1386  001022  EC31  F00C         	call	_putch
  1387                           
  1388                           ;doprnt.c: 542: continue;
  1389  001026  D0C8               	goto	u2490
  1390  001028                     l292:
  1391                           
  1392                           ;doprnt.c: 543: }
  1393                           ;doprnt.c: 548: flag = 0;
  1394  001028  0E00               	movlw	0
  1395  00102A  0100               	movlb	0	; () banked
  1396  00102C  6FC9               	movwf	printf@flag& (0+255),b
  1397                           
  1398                           ;doprnt.c: 635: switch(c = *f++) {
  1399  00102E  D040               	goto	l293
  1400  001030                     
  1401                           ; BSR set to: 0
  1402                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1403                           
  1404                           ; BSR set to: 0
  1405  001030  C0CB  FFD9         	movff	printf@ap,fsr2l
  1406  001034  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  1407  001038  CFDE F0CD          	movff	postinc2,printf@cp
  1408  00103C  CFDD F0CE          	movff	postdec2,printf@cp+1
  1409                           
  1410                           ; BSR set to: 0
  1411  001040  0E02               	movlw	2
  1412  001042  27CB               	addwf	printf@ap& (0+255),f,b
  1413  001044  0E00               	movlw	0
  1414  001046  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 740: if(!cp)
  1418  001048  51CD               	movf	printf@cp& (0+255),w,b
  1419  00104A  11CE               	iorwf	(printf@cp+1)& (0+255),w,b
  1420  00104C  A4D8               	btfss	status,2,c
  1421  00104E  D01B               	goto	l301
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 741: cp = "(null)";
  1425  001050  0EAC               	movlw	low STR_47
  1426  001052  6FCD               	movwf	printf@cp& (0+255),b
  1427  001054  0EFC               	movlw	high STR_47
  1428  001056  6FCE               	movwf	(printf@cp+1)& (0+255),b
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;doprnt.c: 777: while(*cp)
  1432  001058  D016               	goto	l301
  1433  00105A                     
  1434                           ;doprnt.c: 778: (putch(*cp++) );
  1435                           
  1436                           ; BSR set to: 0
  1437  00105A  C0CD  FFF6         	movff	printf@cp,tblptrl
  1438  00105E  C0CE  FFF7         	movff	printf@cp+1,tblptrh
  1439  001062  0E00               	movlw	low (__mediumconst shr (0+16))
  1440  001064  6EF8               	movwf	tblptru,c
  1441  001066  0E0F               	movlw	(high __ramtop+-1)
  1442  001068  64F7               	cpfsgt	tblptrh,c
  1443  00106A  D003               	bra	u2417
  1444  00106C  0008               	tblrd		*
  1445  00106E  50F5               	movf	tablat,w,c
  1446  001070  D005               	bra	u2410
  1447  001072                     u2417:
  1448  001072  CFF6 FFE9          	movff	tblptrl,fsr0l
  1449  001076  CFF7 FFEA          	movff	tblptrh,fsr0h
  1450  00107A  50EF               	movf	indf0,w,c
  1451  00107C                     u2410:
  1452  00107C  EC31  F00C         	call	_putch
  1453  001080  0100               	movlb	0	; () banked
  1454  001082  4BCD               	infsnz	printf@cp& (0+255),f,b
  1455  001084  2BCE               	incf	(printf@cp+1)& (0+255),f,b
  1456  001086                     l301:
  1457                           
  1458                           ; BSR set to: 0
  1459                           
  1460                           ; BSR set to: 0
  1461  001086  C0CD  FFF6         	movff	printf@cp,tblptrl
  1462  00108A  C0CE  FFF7         	movff	printf@cp+1,tblptrh
  1463  00108E  0E00               	movlw	low (__mediumconst shr (0+16))
  1464  001090  6EF8               	movwf	tblptru,c
  1465  001092  0E0F               	movlw	(high __ramtop+-1)
  1466  001094  64F7               	cpfsgt	tblptrh,c
  1467  001096  D003               	bra	u2427
  1468  001098  0008               	tblrd		*
  1469  00109A  50F5               	movf	tablat,w,c
  1470  00109C  D005               	bra	u2420
  1471  00109E                     u2427:
  1472  00109E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1473  0010A2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1474  0010A6  50EF               	movf	indf0,w,c
  1475  0010A8                     u2420:
  1476  0010A8  0900               	iorlw	0
  1477  0010AA  B4D8               	btfsc	status,2,c
  1478  0010AC  D085               	goto	u2490
  1479  0010AE  D7D5               	goto	l302
  1480  0010B0                     l293:
  1481  0010B0  C0C4  FFF6         	movff	printf@f,tblptrl
  1482  0010B4  C0C5  FFF7         	movff	printf@f+1,tblptrh
  1483  0010B8  0100               	movlb	0	; () banked
  1484  0010BA  4BC4               	infsnz	printf@f& (0+255),f,b
  1485  0010BC  2BC5               	incf	(printf@f+1)& (0+255),f,b
  1486  0010BE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1487  0010BE  6AF8               	clrf	tblptru,c
  1488  0010C0                     	endif
  1489  0010C0                     	if	0	;tblptru may be non-zero
  1490  0010C0                     	endif
  1491  0010C0  0008               	tblrd		*
  1492  0010C2  CFF5 F0D1          	movff	tablat,printf@c
  1493  0010C6  51D1               	movf	printf@c& (0+255),w,b
  1494                           
  1495                           ; Switch size 1, requested type "space"
  1496                           ; Number of cases is 4, Range of values is 0 to 115
  1497                           ; switch strategies available:
  1498                           ; Name         Instructions Cycles
  1499                           ; simple_byte           13     7 (average)
  1500                           ;	Chosen strategy is simple_byte
  1501  0010C8  0A00               	xorlw	0	; case 0
  1502  0010CA  B4D8               	btfsc	status,2,c
  1503  0010CC  0012               	return	
  1504  0010CE  0A64               	xorlw	100	; case 100
  1505  0010D0  B4D8               	btfsc	status,2,c
  1506  0010D2  D007               	goto	l298
  1507  0010D4  0A0D               	xorlw	13	; case 105
  1508  0010D6  B4D8               	btfsc	status,2,c
  1509  0010D8  D004               	goto	l298
  1510  0010DA  0A1A               	xorlw	26	; case 115
  1511  0010DC  B4D8               	btfsc	status,2,c
  1512  0010DE  D7A8               	goto	l299
  1513  0010E0  D06B               	goto	u2490
  1514  0010E2                     l298:
  1515                           
  1516                           ;doprnt.c: 1253: {
  1517                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1518                           
  1519                           ; BSR set to: 0
  1520  0010E2  C0CB  FFD9         	movff	printf@ap,fsr2l
  1521  0010E6  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  1522  0010EA  CFDE F0CF          	movff	postinc2,printf@val
  1523  0010EE  CFDD F0D0          	movff	postdec2,printf@val+1
  1524  0010F2  0E02               	movlw	2
  1525  0010F4  0100               	movlb	0	; () banked
  1526  0010F6  27CB               	addwf	printf@ap& (0+255),f,b
  1527  0010F8  0E00               	movlw	0
  1528  0010FA  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;doprnt.c: 1261: if((int)val < 0) {
  1532  0010FC  AFD0               	btfss	(printf@val+1)& (0+255),7,b
  1533  0010FE  D006               	goto	l305
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;doprnt.c: 1262: flag |= 0x03;
  1537  001100  0E03               	movlw	3
  1538  001102  13C9               	iorwf	printf@flag& (0+255),f,b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 1263: val = -val;
  1542  001104  6DCF               	negf	printf@val& (0+255),b
  1543  001106  1FD0               	comf	(printf@val+1)& (0+255),f,b
  1544  001108  B0D8               	btfsc	status,0,c
  1545  00110A  2BD0               	incf	(printf@val+1)& (0+255),f,b
  1546  00110C                     l305:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;doprnt.c: 1264: }
  1550                           ;doprnt.c: 1266: }
  1551                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1552                           
  1553                           ; BSR set to: 0
  1554  00110C  0E01               	movlw	1
  1555  00110E  6FD1               	movwf	printf@c& (0+255),b
  1556  001110                     l2978:
  1557                           
  1558                           ; BSR set to: 0
  1559  001110  0E05               	movlw	5
  1560  001112  19D1               	xorwf	printf@c& (0+255),w,b
  1561  001114  B4D8               	btfsc	status,2,c
  1562  001116  D015               	goto	u2470
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;doprnt.c: 1306: if(val < dpowers[c])
  1566                           
  1567                           ; BSR set to: 0
  1568                           
  1569                           ; BSR set to: 0
  1570  001118  51D1               	movf	printf@c& (0+255),w,b
  1571  00111A  0D02               	mullw	2
  1572  00111C  0EDE               	movlw	low _dpowers
  1573  00111E  24F3               	addwf	prodl,w,c
  1574  001120  6EF6               	movwf	tblptrl,c
  1575  001122  0EFB               	movlw	high _dpowers
  1576  001124  20F4               	addwfc	prodh,w,c
  1577  001126  6EF7               	movwf	tblptrh,c
  1578  001128                     	if	1	;There are 3 active tblptr bytes
  1579  001128  6AF8               	clrf	tblptru,c
  1580  00112A  0E00               	movlw	low (__mediumconst shr (0+16))
  1581  00112C  22F8               	addwfc	tblptru,f,c
  1582  00112E                     	endif
  1583  00112E  0009               	tblrd		*+
  1584  001130  50F5               	movf	tablat,w,c
  1585  001132  5DCF               	subwf	printf@val& (0+255),w,b
  1586  001134  0009               	tblrd		*+
  1587  001136  50F5               	movf	tablat,w,c
  1588  001138  59D0               	subwfb	(printf@val+1)& (0+255),w,b
  1589  00113A  A0D8               	btfss	status,0,c
  1590  00113C  D002               	goto	u2470
  1591                           
  1592                           ; BSR set to: 0
  1593                           
  1594                           ; BSR set to: 0
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;doprnt.c: 1307: break;
  1598  00113E  2BD1               	incf	printf@c& (0+255),f,b
  1599  001140  D7E7               	goto	l2978
  1600  001142                     u2470:
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;doprnt.c: 1422: {
  1604                           ;doprnt.c: 1438: if(flag & 0x03)
  1605                           
  1606                           ; BSR set to: 0
  1607  001142  C0C9  F0C8         	movff	printf@flag,??_printf
  1608  001146  0E03               	movlw	3
  1609  001148  17C8               	andwf	??_printf& (0+255),f,b
  1610  00114A  B4D8               	btfsc	status,2,c
  1611  00114C  D003               	goto	l309
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;doprnt.c: 1439: (putch('-') );
  1615  00114E  0E2D               	movlw	45
  1616  001150  EC31  F00C         	call	_putch
  1617  001154                     l309:
  1618                           
  1619                           ;doprnt.c: 1469: }
  1620                           ;doprnt.c: 1472: prec = c;
  1621  001154  C0D1  F0CA         	movff	printf@c,printf@prec
  1622                           
  1623                           ;doprnt.c: 1474: while(prec--) {
  1624  001158  D02A               	goto	l310
  1625  00115A                     
  1626                           ;doprnt.c: 1478: {
  1627                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1628  00115A  0100               	movlb	0	; () banked
  1629  00115C  51CA               	movf	printf@prec& (0+255),w,b
  1630  00115E  0D02               	mullw	2
  1631  001160  0EDE               	movlw	low _dpowers
  1632  001162  24F3               	addwf	prodl,w,c
  1633  001164  6EF6               	movwf	tblptrl,c
  1634  001166  0EFB               	movlw	high _dpowers
  1635  001168  20F4               	addwfc	prodh,w,c
  1636  00116A  6EF7               	movwf	tblptrh,c
  1637  00116C                     	if	1	;There are 3 active tblptr bytes
  1638  00116C  6AF8               	clrf	tblptru,c
  1639  00116E  0E00               	movlw	low (__mediumconst shr (0+16))
  1640  001170  22F8               	addwfc	tblptru,f,c
  1641  001172                     	endif
  1642  001172  0009               	tblrd		*+
  1643  001174  CFF5 F0BA          	movff	tablat,___lwdiv@divisor
  1644  001178  000A               	tblrd		*-
  1645  00117A  CFF5 F0BB          	movff	tablat,___lwdiv@divisor+1
  1646  00117E  C0CF  F0B8         	movff	printf@val,___lwdiv@dividend
  1647  001182  C0D0  F0B9         	movff	printf@val+1,___lwdiv@dividend+1
  1648  001186  ECBC  F00A         	call	___lwdiv	;wreg free
  1649  00118A  C0B8  F0BF         	movff	?___lwdiv,___lwmod@dividend
  1650  00118E  C0B9  F0C0         	movff	?___lwdiv+1,___lwmod@dividend+1
  1651  001192  0E00               	movlw	0
  1652  001194  0100               	movlb	0	; () banked
  1653  001196  6FC2               	movwf	(___lwmod@divisor+1)& (0+255),b
  1654  001198  0E0A               	movlw	10
  1655  00119A  6FC1               	movwf	___lwmod@divisor& (0+255),b
  1656  00119C  ECA3  F00B         	call	___lwmod	;wreg free
  1657  0011A0  0100               	movlb	0	; () banked
  1658  0011A2  51BF               	movf	?___lwmod& (0+255),w,b
  1659  0011A4  0F30               	addlw	48
  1660  0011A6  6FD1               	movwf	printf@c& (0+255),b
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;doprnt.c: 1523: }
  1664                           ;doprnt.c: 1524: (putch(c) );
  1665  0011A8  51D1               	movf	printf@c& (0+255),w,b
  1666  0011AA  EC31  F00C         	call	_putch
  1667  0011AE                     l310:
  1668  0011AE  0100               	movlb	0	; () banked
  1669  0011B0  07CA               	decf	printf@prec& (0+255),f,b
  1670  0011B2  29CA               	incf	printf@prec& (0+255),w,b
  1671  0011B4  A4D8               	btfss	status,2,c
  1672  0011B6  D7D1               	goto	l311
  1673  0011B8                     u2490:
  1674                           
  1675                           ; BSR set to: 0
  1676                           
  1677                           ; BSR set to: 0
  1678  0011B8  C0C4  FFF6         	movff	printf@f,tblptrl
  1679  0011BC  C0C5  FFF7         	movff	printf@f+1,tblptrh
  1680  0011C0  0100               	movlb	0	; () banked
  1681  0011C2  4BC4               	infsnz	printf@f& (0+255),f,b
  1682  0011C4  2BC5               	incf	(printf@f+1)& (0+255),f,b
  1683  0011C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1684  0011C6  6AF8               	clrf	tblptru,c
  1685  0011C8                     	endif
  1686  0011C8                     	if	0	;tblptru may be non-zero
  1687  0011C8                     	endif
  1688  0011C8  0008               	tblrd		*
  1689  0011CA  CFF5 F0D1          	movff	tablat,printf@c
  1690  0011CE  51D1               	movf	printf@c& (0+255),w,b
  1691  0011D0  B4D8               	btfsc	status,2,c
  1692  0011D2  0012               	return	
  1693  0011D4  D721               	goto	l291
  1694  0011D6                     __end_of_printf:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           intcon3	equ	0xFF0
  1704                           indf0	equ	0xFEF
  1705                           postinc0	equ	0xFEE
  1706                           fsr0h	equ	0xFEA
  1707                           fsr0l	equ	0xFE9
  1708                           wreg	equ	0xFE8
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _putch *****************
  1716 ;; Defined at:
  1717 ;;		line 24 in file "lcd.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  data            1    wreg     unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  data            1    2[BANK0 ] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        1 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    5
  1738 ;; This function calls:
  1739 ;;		_lcdNibble
  1740 ;; This function is called by:
  1741 ;;		_printf
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text2
  1746  001862                     __ptext2:
  1747                           	opt stack 0
  1748  001862                     _putch:
  1749                           	opt stack 24
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;incstack = 0
  1753                           ;putch@data stored from wreg
  1754  001862  0100               	movlb	0	; () banked
  1755  001864  6FBA               	movwf	putch@data& (0+255),b
  1756                           
  1757                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1758  001866  848C               	bsf	3980,2,c	;volatile
  1759                           
  1760                           ;lcd.c: 33: lcdNibble(data);
  1761  001868  0100               	movlb	0	; () banked
  1762  00186A  51BA               	movf	putch@data& (0+255),w,b
  1763  00186C  EC09  F00A         	call	_lcdNibble
  1764                           
  1765                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1766  001870  0EC8               	movlw	200
  1767  001872                     u2717:
  1768  001872  D000               	nop2	
  1769  001874  2EE8               	decfsz	wreg,f,c
  1770  001876  D7FD               	bra	u2717
  1771  001878  0012               	return		;funcret
  1772  00187A                     __end_of_putch:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodh	equ	0xFF4
  1779                           prodl	equ	0xFF3
  1780                           intcon	equ	0xFF2
  1781                           intcon3	equ	0xFF0
  1782                           indf0	equ	0xFEF
  1783                           postinc0	equ	0xFEE
  1784                           fsr0h	equ	0xFEA
  1785                           fsr0l	equ	0xFE9
  1786                           wreg	equ	0xFE8
  1787                           postinc2	equ	0xFDE
  1788                           postdec2	equ	0xFDD
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function ___lwmod *****************
  1794 ;; Defined at:
  1795 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  dividend        2    7[BANK0 ] unsigned int 
  1798 ;;  divisor         2    9[BANK0 ] unsigned int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  counter         1   11[BANK0 ] unsigned char 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  2    7[BANK0 ] unsigned int 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1810 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;Total ram usage:        5 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    4
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_printf
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text3
  1825  001746                     __ptext3:
  1826                           	opt stack 0
  1827  001746                     ___lwmod:
  1828                           	opt stack 25
  1829                           
  1830                           ;incstack = 0
  1831  001746  0100               	movlb	0	; () banked
  1832  001748  51C1               	movf	___lwmod@divisor& (0+255),w,b
  1833  00174A  11C2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1834  00174C  B4D8               	btfsc	status,2,c
  1835  00174E  D018               	goto	l733
  1836                           
  1837                           ; BSR set to: 0
  1838  001750  0E01               	movlw	1
  1839  001752  6FC3               	movwf	___lwmod@counter& (0+255),b
  1840  001754  D004               	goto	l728
  1841  001756                     
  1842                           ; BSR set to: 0
  1843                           
  1844                           ; BSR set to: 0
  1845  001756  90D8               	bcf	status,0,c
  1846  001758  37C1               	rlcf	___lwmod@divisor& (0+255),f,b
  1847  00175A  37C2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1848  00175C  2BC3               	incf	___lwmod@counter& (0+255),f,b
  1849  00175E                     l728:
  1850                           
  1851                           ; BSR set to: 0
  1852                           
  1853                           ; BSR set to: 0
  1854  00175E  AFC2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1855  001760  D7FA               	goto	l729
  1856  001762                     u2370:
  1857                           
  1858                           ; BSR set to: 0
  1859                           
  1860                           ; BSR set to: 0
  1861                           
  1862                           ; BSR set to: 0
  1863  001762  51C1               	movf	___lwmod@divisor& (0+255),w,b
  1864  001764  5DBF               	subwf	___lwmod@dividend& (0+255),w,b
  1865  001766  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1866  001768  59C0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1867  00176A  A0D8               	btfss	status,0,c
  1868  00176C  D004               	goto	l732
  1869                           
  1870                           ; BSR set to: 0
  1871  00176E  51C1               	movf	___lwmod@divisor& (0+255),w,b
  1872  001770  5FBF               	subwf	___lwmod@dividend& (0+255),f,b
  1873  001772  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1874  001774  5BC0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1875  001776                     l732:
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880  001776  90D8               	bcf	status,0,c
  1881  001778  33C2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1882  00177A  33C1               	rrcf	___lwmod@divisor& (0+255),f,b
  1883                           
  1884                           ; BSR set to: 0
  1885  00177C  2FC3               	decfsz	___lwmod@counter& (0+255),f,b
  1886  00177E  D7F1               	goto	u2370
  1887  001780                     l733:
  1888                           
  1889                           ; BSR set to: 0
  1890                           
  1891                           ; BSR set to: 0
  1892  001780  C0BF  F0BF         	movff	___lwmod@dividend,?___lwmod
  1893  001784  C0C0  F0C0         	movff	___lwmod@dividend+1,?___lwmod+1
  1894                           
  1895                           ; BSR set to: 0
  1896  001788  0012               	return		;funcret
  1897  00178A                     __end_of___lwmod:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           intcon3	equ	0xFF0
  1907                           indf0	equ	0xFEF
  1908                           postinc0	equ	0xFEE
  1909                           fsr0h	equ	0xFEA
  1910                           fsr0l	equ	0xFE9
  1911                           wreg	equ	0xFE8
  1912                           postinc2	equ	0xFDE
  1913                           postdec2	equ	0xFDD
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function ___lwdiv *****************
  1919 ;; Defined at:
  1920 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  dividend        2    0[BANK0 ] unsigned int 
  1923 ;;  divisor         2    2[BANK0 ] unsigned int 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  quotient        2    5[BANK0 ] unsigned int 
  1926 ;;  counter         1    4[BANK0 ] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  2    0[BANK0 ] unsigned int 
  1929 ;; Registers used:
  1930 ;;		wreg, status,2, status,0
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;Total ram usage:        7 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    4
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_printf
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text4
  1951  001578                     __ptext4:
  1952                           	opt stack 0
  1953  001578                     ___lwdiv:
  1954                           	opt stack 25
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;incstack = 0
  1958  001578  0E00               	movlw	0
  1959  00157A  0100               	movlb	0	; () banked
  1960  00157C  6FBE               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1961  00157E  0E00               	movlw	0
  1962  001580  6FBD               	movwf	___lwdiv@quotient& (0+255),b
  1963                           
  1964                           ; BSR set to: 0
  1965  001582  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  1966  001584  11BB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1967  001586  B4D8               	btfsc	status,2,c
  1968  001588  D01C               	goto	l723
  1969                           
  1970                           ; BSR set to: 0
  1971  00158A  0E01               	movlw	1
  1972  00158C  6FBC               	movwf	___lwdiv@counter& (0+255),b
  1973  00158E  D004               	goto	l718
  1974  001590                     
  1975                           ; BSR set to: 0
  1976                           
  1977                           ; BSR set to: 0
  1978  001590  90D8               	bcf	status,0,c
  1979  001592  37BA               	rlcf	___lwdiv@divisor& (0+255),f,b
  1980  001594  37BB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1981  001596  2BBC               	incf	___lwdiv@counter& (0+255),f,b
  1982  001598                     l718:
  1983                           
  1984                           ; BSR set to: 0
  1985                           
  1986                           ; BSR set to: 0
  1987  001598  AFBB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1988  00159A  D7FA               	goto	l719
  1989  00159C                     u2340:
  1990                           
  1991                           ; BSR set to: 0
  1992                           
  1993                           ; BSR set to: 0
  1994                           
  1995                           ; BSR set to: 0
  1996  00159C  90D8               	bcf	status,0,c
  1997  00159E  37BD               	rlcf	___lwdiv@quotient& (0+255),f,b
  1998  0015A0  37BE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1999                           
  2000                           ; BSR set to: 0
  2001  0015A2  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  2002  0015A4  5DB8               	subwf	___lwdiv@dividend& (0+255),w,b
  2003  0015A6  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2004  0015A8  59B9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2005  0015AA  A0D8               	btfss	status,0,c
  2006  0015AC  D005               	goto	l722
  2007                           
  2008                           ; BSR set to: 0
  2009  0015AE  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  2010  0015B0  5FB8               	subwf	___lwdiv@dividend& (0+255),f,b
  2011  0015B2  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2012  0015B4  5BB9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2013                           
  2014                           ; BSR set to: 0
  2015  0015B6  81BD               	bsf	___lwdiv@quotient& (0+255),0,b
  2016  0015B8                     l722:
  2017                           
  2018                           ; BSR set to: 0
  2019                           
  2020                           ; BSR set to: 0
  2021  0015B8  90D8               	bcf	status,0,c
  2022  0015BA  33BB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2023  0015BC  33BA               	rrcf	___lwdiv@divisor& (0+255),f,b
  2024                           
  2025                           ; BSR set to: 0
  2026  0015BE  2FBC               	decfsz	___lwdiv@counter& (0+255),f,b
  2027  0015C0  D7ED               	goto	u2340
  2028  0015C2                     l723:
  2029                           
  2030                           ; BSR set to: 0
  2031                           
  2032                           ; BSR set to: 0
  2033  0015C2  C0BD  F0B8         	movff	___lwdiv@quotient,?___lwdiv
  2034  0015C6  C0BE  F0B9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2035                           
  2036                           ; BSR set to: 0
  2037  0015CA  0012               	return		;funcret
  2038  0015CC                     __end_of___lwdiv:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           intcon	equ	0xFF2
  2047                           intcon3	equ	0xFF0
  2048                           indf0	equ	0xFEF
  2049                           postinc0	equ	0xFEE
  2050                           fsr0h	equ	0xFEA
  2051                           fsr0l	equ	0xFE9
  2052                           wreg	equ	0xFE8
  2053                           postinc2	equ	0xFDE
  2054                           postdec2	equ	0xFDD
  2055                           fsr2h	equ	0xFDA
  2056                           fsr2l	equ	0xFD9
  2057                           status	equ	0xFD8
  2058                           
  2059 ;; *************** function _initLCD *****************
  2060 ;; Defined at:
  2061 ;;		line 60 in file "lcd.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2, status,0, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;Total ram usage:        1 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    6
  2082 ;; This function calls:
  2083 ;;		_lcdInst
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text5
  2090  00161E                     __ptext5:
  2091                           	opt stack 0
  2092  00161E                     _initLCD:
  2093                           	opt stack 24
  2094                           
  2095                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;incstack = 0
  2099  00161E  0EC3               	movlw	195
  2100  001620  0100               	movlb	0	; () banked
  2101  001622  6FBB               	movwf	??_initLCD& (0+255),b
  2102  001624  0ECD               	movlw	205
  2103  001626                     u2727:
  2104  001626  2EE8               	decfsz	wreg,f,c
  2105  001628  D7FE               	bra	u2727
  2106  00162A  2FBB               	decfsz	??_initLCD& (0+255),f,b
  2107  00162C  D7FC               	bra	u2727
  2108                           
  2109                           ;lcd.c: 69: lcdInst(0b00110011);
  2110  00162E  0E33               	movlw	51
  2111  001630  EC3D  F00C         	call	_lcdInst
  2112                           
  2113                           ;lcd.c: 70: lcdInst(0b00110010);
  2114  001634  0E32               	movlw	50
  2115  001636  EC3D  F00C         	call	_lcdInst
  2116                           
  2117                           ;lcd.c: 71: lcdInst(0b00101000);
  2118  00163A  0E28               	movlw	40
  2119  00163C  EC3D  F00C         	call	_lcdInst
  2120                           
  2121                           ;lcd.c: 72: lcdInst(0b00001111);
  2122  001640  0E0F               	movlw	15
  2123  001642  EC3D  F00C         	call	_lcdInst
  2124                           
  2125                           ;lcd.c: 73: lcdInst(0b00000110);
  2126  001646  0E06               	movlw	6
  2127  001648  EC3D  F00C         	call	_lcdInst
  2128                           
  2129                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2130  00164C  0E01               	movlw	1
  2131  00164E  EC3D  F00C         	call	_lcdInst
  2132  001652  0EC3               	movlw	195
  2133  001654  0100               	movlb	0	; () banked
  2134  001656  6FBB               	movwf	??_initLCD& (0+255),b
  2135  001658  0ECD               	movlw	205
  2136  00165A                     u2737:
  2137  00165A  2EE8               	decfsz	wreg,f,c
  2138  00165C  D7FE               	bra	u2737
  2139  00165E  2FBB               	decfsz	??_initLCD& (0+255),f,b
  2140  001660  D7FC               	bra	u2737
  2141                           
  2142                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2143  001662  0E0F               	movlw	15
  2144  001664  EC3D  F00C         	call	_lcdInst
  2145  001668  0012               	return		;funcret
  2146  00166A                     __end_of_initLCD:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon3	equ	0xFF0
  2156                           indf0	equ	0xFEF
  2157                           postinc0	equ	0xFEE
  2158                           fsr0h	equ	0xFEA
  2159                           fsr0l	equ	0xFE9
  2160                           wreg	equ	0xFE8
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _lcdInst *****************
  2168 ;; Defined at:
  2169 ;;		line 11 in file "lcd.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  data            1    wreg     unsigned char 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  data            1    2[BANK0 ] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      void 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0, cstack
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;Total ram usage:        1 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    5
  2190 ;; This function calls:
  2191 ;;		_lcdNibble
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;;		_initLCD
  2195 ;;		_lcd_set_cursor
  2196 ;;		_lcd_shift_cursor
  2197 ;;		_lcd_shift_display
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text6
  2202  00187A                     __ptext6:
  2203                           	opt stack 0
  2204  00187A                     _lcdInst:
  2205                           	opt stack 25
  2206                           
  2207                           ;incstack = 0
  2208                           ;lcdInst@data stored from wreg
  2209  00187A  0100               	movlb	0	; () banked
  2210  00187C  6FBA               	movwf	lcdInst@data& (0+255),b
  2211                           
  2212                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2213  00187E  948C               	bcf	3980,2,c	;volatile
  2214                           
  2215                           ;lcd.c: 20: lcdNibble(data);
  2216  001880  0100               	movlb	0	; () banked
  2217  001882  51BA               	movf	lcdInst@data& (0+255),w,b
  2218  001884  EC09  F00A         	call	_lcdNibble
  2219                           
  2220                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2221  001888  0EC8               	movlw	200
  2222  00188A                     u2747:
  2223  00188A  D000               	nop2	
  2224  00188C  2EE8               	decfsz	wreg,f,c
  2225  00188E  D7FD               	bra	u2747
  2226  001890  0012               	return		;funcret
  2227  001892                     __end_of_lcdInst:
  2228                           	opt stack 0
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           intcon	equ	0xFF2
  2236                           intcon3	equ	0xFF0
  2237                           indf0	equ	0xFEF
  2238                           postinc0	equ	0xFEE
  2239                           fsr0h	equ	0xFEA
  2240                           fsr0l	equ	0xFE9
  2241                           wreg	equ	0xFE8
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _lcdNibble *****************
  2249 ;; Defined at:
  2250 ;;		line 37 in file "lcd.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  data            1    wreg     unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  data            1    1[BANK0 ] unsigned char 
  2255 ;;  temp            1    0[BANK0 ] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;Total ram usage:        2 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    4
  2272 ;; This function calls:
  2273 ;;		Nothing
  2274 ;; This function is called by:
  2275 ;;		_lcdInst
  2276 ;;		_putch
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text7
  2281  001412                     __ptext7:
  2282                           	opt stack 0
  2283  001412                     _lcdNibble:
  2284                           	opt stack 24
  2285                           
  2286                           ;incstack = 0
  2287                           ;lcdNibble@data stored from wreg
  2288  001412  0100               	movlb	0	; () banked
  2289  001414  6FB9               	movwf	lcdNibble@data& (0+255),b
  2290                           
  2291                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2292  001416  0100               	movlb	0	; () banked
  2293  001418  51B9               	movf	lcdNibble@data& (0+255),w,b
  2294  00141A  0BF0               	andlw	240
  2295  00141C  6FB8               	movwf	lcdNibble@temp& (0+255),b
  2296                           
  2297                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2298  00141E  508C               	movf	3980,w,c	;volatile
  2299  001420  0B0F               	andlw	15
  2300  001422  6E8C               	movwf	3980,c	;volatile
  2301                           
  2302                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2303  001424  51B8               	movf	lcdNibble@temp& (0+255),w,b
  2304  001426  108C               	iorwf	3980,w,c	;volatile
  2305  001428  6E8C               	movwf	3980,c	;volatile
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2309  00142A  0E00               	movlw	0
  2310  00142C  BEF2               	btfsc	intcon,7,c	;volatile
  2311  00142E  0E01               	movlw	1
  2312  001430  6E47               	movwf	lcd@LCDinterruptState,c
  2313                           
  2314                           ; BSR set to: 0
  2315  001432  9EF2               	bcf	intcon,7,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318  001434  868C               	bsf	3980,3,c	;volatile
  2319                           
  2320                           ; BSR set to: 0
  2321  001436  0E53               	movlw	83
  2322  001438                     u2757:
  2323  001438  2EE8               	decfsz	wreg,f,c
  2324  00143A  D7FE               	bra	u2757
  2325  00143C  F000               	nop	
  2326  00143E  968C               	bcf	3980,3,c	;volatile
  2327  001440  0EC8               	movlw	200
  2328  001442                     u2767:
  2329  001442  D000               	nop2	
  2330  001444  2EE8               	decfsz	wreg,f,c
  2331  001446  D7FD               	bra	u2767
  2332  001448  B047               	btfsc	lcd@LCDinterruptState,0,c
  2333  00144A  D002               	bra	u2315
  2334  00144C  9EF2               	bcf	intcon,7,c	;volatile
  2335  00144E  D001               	bra	u2316
  2336  001450                     u2315:
  2337  001450  8EF2               	bsf	intcon,7,c	;volatile
  2338  001452                     u2316:
  2339                           
  2340                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2341  001452  0100               	movlb	0	; () banked
  2342  001454  39B9               	swapf	lcdNibble@data& (0+255),w,b
  2343  001456  0BF0               	andlw	240
  2344  001458  6FB9               	movwf	lcdNibble@data& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2348  00145A  51B9               	movf	lcdNibble@data& (0+255),w,b
  2349  00145C  0BF0               	andlw	240
  2350  00145E  6FB8               	movwf	lcdNibble@temp& (0+255),b
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2354  001460  508C               	movf	3980,w,c	;volatile
  2355  001462  0B0F               	andlw	15
  2356  001464  6E8C               	movwf	3980,c	;volatile
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2360  001466  51B8               	movf	lcdNibble@temp& (0+255),w,b
  2361  001468  108C               	iorwf	3980,w,c	;volatile
  2362  00146A  6E8C               	movwf	3980,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2366  00146C  0E00               	movlw	0
  2367  00146E  BEF2               	btfsc	intcon,7,c	;volatile
  2368  001470  0E01               	movlw	1
  2369  001472  6E47               	movwf	lcd@LCDinterruptState,c
  2370                           
  2371                           ; BSR set to: 0
  2372  001474  9EF2               	bcf	intcon,7,c	;volatile
  2373                           
  2374                           ; BSR set to: 0
  2375  001476  868C               	bsf	3980,3,c	;volatile
  2376                           
  2377                           ; BSR set to: 0
  2378  001478  0E53               	movlw	83
  2379  00147A                     u2777:
  2380  00147A  2EE8               	decfsz	wreg,f,c
  2381  00147C  D7FE               	bra	u2777
  2382  00147E  F000               	nop	
  2383  001480  968C               	bcf	3980,3,c	;volatile
  2384  001482  0EC8               	movlw	200
  2385  001484                     u2787:
  2386  001484  D000               	nop2	
  2387  001486  2EE8               	decfsz	wreg,f,c
  2388  001488  D7FD               	bra	u2787
  2389  00148A  B047               	btfsc	lcd@LCDinterruptState,0,c
  2390  00148C  D002               	bra	u2325
  2391  00148E  9EF2               	bcf	intcon,7,c	;volatile
  2392  001490  D001               	bra	u2326
  2393  001492                     u2325:
  2394  001492  8EF2               	bsf	intcon,7,c	;volatile
  2395  001494                     u2326:
  2396  001494  0012               	return		;funcret
  2397  001496                     __end_of_lcdNibble:
  2398                           	opt stack 0
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           intcon3	equ	0xFF0
  2407                           indf0	equ	0xFEF
  2408                           postinc0	equ	0xFEE
  2409                           fsr0h	equ	0xFEA
  2410                           fsr0l	equ	0xFE9
  2411                           wreg	equ	0xFE8
  2412                           postinc2	equ	0xFDE
  2413                           postdec2	equ	0xFDD
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _interruptHandler *****************
  2419 ;; Defined at:
  2420 ;;		line 164 in file "main.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;		None
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  i               2   46[COMRAM] int 
  2425 ;;  keypress        1   49[COMRAM] unsigned char 
  2426 ;;  temp            1   48[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:       24 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    3
  2443 ;; This function calls:
  2444 ;;		_check
  2445 ;;		_is_valid
  2446 ;;		_strcat
  2447 ;;		_strcpy
  2448 ;;		_strncmp
  2449 ;;		i2_initLCD
  2450 ;;		i2_lcdInst
  2451 ;;		i2_printf
  2452 ;;		i2_putch
  2453 ;; This function is called by:
  2454 ;;		Interrupt level 2
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	intcode
  2459  000008                     __pintcode:
  2460                           	opt stack 0
  2461  000008                     _interruptHandler:
  2462                           	opt stack 24
  2463                           
  2464                           ;incstack = 0
  2465  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2466  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           intcon3	equ	0xFF0
  2475                           indf0	equ	0xFEF
  2476                           postinc0	equ	0xFEE
  2477                           fsr0h	equ	0xFEA
  2478                           fsr0l	equ	0xFE9
  2479                           wreg	equ	0xFE8
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486                           	psect	intcode_body
  2487  000012                     __pintcode_body:
  2488                           	opt stack 24
  2489  000012                     int_func:
  2490                           	opt stack 24
  2491  000012  0006               	pop		; remove dummy address from shadow register refresh
  2492  000014  CFFA F01D          	movff	pclath,??_interruptHandler+2
  2493  000018  CFFB F01E          	movff	pclatu,??_interruptHandler+3
  2494  00001C  CFE9 F01F          	movff	fsr0l,??_interruptHandler+4
  2495  000020  CFEA F020          	movff	fsr0h,??_interruptHandler+5
  2496  000024  CFE1 F021          	movff	fsr1l,??_interruptHandler+6
  2497  000028  CFE2 F022          	movff	fsr1h,??_interruptHandler+7
  2498  00002C  CFD9 F023          	movff	fsr2l,??_interruptHandler+8
  2499  000030  CFDA F024          	movff	fsr2h,??_interruptHandler+9
  2500  000034  CFF3 F025          	movff	prodl,??_interruptHandler+10
  2501  000038  CFF4 F026          	movff	prodh,??_interruptHandler+11
  2502  00003C  CFF6 F027          	movff	tblptrl,??_interruptHandler+12
  2503  000040  CFF7 F028          	movff	tblptrh,??_interruptHandler+13
  2504  000044  CFF8 F029          	movff	tblptru,??_interruptHandler+14
  2505  000048  CFF5 F02A          	movff	tablat,??_interruptHandler+15
  2506  00004C  C054  F02B         	movff	btemp,??_interruptHandler+16
  2507  000050  C055  F02C         	movff	btemp+1,??_interruptHandler+17
  2508  000054  C056  F02D         	movff	btemp+2,??_interruptHandler+18
  2509  000058  C057  F02E         	movff	btemp+3,??_interruptHandler+19
  2510                           
  2511                           ;main.c: 175: if(INT1IF){
  2512  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  2513  00005E  D3C8               	goto	i2l2794
  2514                           
  2515                           ;main.c: 181: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2516  000060  3881               	swapf	3969,w,c	;volatile
  2517  000062  0B0F               	andlw	15
  2518  000064  0B0F               	andlw	15
  2519  000066  6E32               	movwf	interruptHandler@keypress,c
  2520                           
  2521                           ;main.c: 183: char temp = keys[keypress];
  2522  000068  5032               	movf	interruptHandler@keypress,w,c
  2523  00006A  0D01               	mullw	1
  2524  00006C  0ECD               	movlw	low _keys
  2525  00006E  24F3               	addwf	prodl,w,c
  2526  000070  6EF6               	movwf	tblptrl,c
  2527  000072  0EFB               	movlw	high _keys
  2528  000074  20F4               	addwfc	prodh,w,c
  2529  000076  6EF7               	movwf	tblptrh,c
  2530  000078                     	if	1	;There are 3 active tblptr bytes
  2531  000078  6AF8               	clrf	tblptru,c
  2532  00007A  0E00               	movlw	low (__mediumconst shr (0+16))
  2533  00007C  22F8               	addwfc	tblptru,f,c
  2534  00007E                     	endif
  2535  00007E  0008               	tblrd		*
  2536  000080  CFF5 F031          	movff	tablat,interruptHandler@temp
  2537                           
  2538                           ;main.c: 186: if(temp == 'A'){
  2539  000084  0E41               	movlw	65
  2540  000086  1831               	xorwf	interruptHandler@temp,w,c
  2541  000088  A4D8               	btfss	status,2,c
  2542  00008A  D005               	goto	i2l132
  2543                           
  2544                           ;main.c: 187: state = prev_state;
  2545  00008C  C03B  F092         	movff	_prev_state,_state
  2546  000090  C03C  F093         	movff	_prev_state+1,_state+1
  2547  000094  D3AC               	goto	i2l2792
  2548  000096                     i2l132:
  2549                           
  2550                           ;main.c: 190: }
  2551                           ;main.c: 194: if (state == 0){
  2552  000096  0100               	movlb	0	; () banked
  2553  000098  5192               	movf	_state& (0+255),w,b
  2554  00009A  1193               	iorwf	(_state+1)& (0+255),w,b
  2555  00009C  A4D8               	btfss	status,2,c
  2556  00009E  D0D3               	goto	i2l134
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 196: if(temp == '4'){
  2560  0000A0  0E34               	movlw	52
  2561  0000A2  1831               	xorwf	interruptHandler@temp,w,c
  2562  0000A4  A4D8               	btfss	status,2,c
  2563  0000A6  D01F               	goto	i2l135
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 197: assembly_step = 4;
  2567  0000A8  0E00               	movlw	0
  2568  0000AA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2569  0000AC  0E04               	movlw	4
  2570  0000AE  6F90               	movwf	_assembly_step& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 198: prev_state = state;
  2574  0000B0  C092  F03B         	movff	_state,_prev_state
  2575  0000B4  C093  F03C         	movff	_state+1,_prev_state+1
  2576                           
  2577                           ;main.c: 199: state = 1;
  2578  0000B8  0E00               	movlw	0
  2579  0000BA  6F93               	movwf	(_state+1)& (0+255),b
  2580  0000BC  0E01               	movlw	1
  2581  0000BE  6F92               	movwf	_state& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 200: lcdInst(0xC0);;
  2585  0000C0  0EC0               	movlw	192
  2586  0000C2  EC53  F00C         	call	i2_lcdInst
  2587                           
  2588                           ;main.c: 201: putch(keys[keypress]);
  2589  0000C6  5032               	movf	interruptHandler@keypress,w,c
  2590  0000C8  0D01               	mullw	1
  2591  0000CA  0ECD               	movlw	low _keys
  2592  0000CC  24F3               	addwf	prodl,w,c
  2593  0000CE  6EF6               	movwf	tblptrl,c
  2594  0000D0  0EFB               	movlw	high _keys
  2595  0000D2  20F4               	addwfc	prodh,w,c
  2596  0000D4  6EF7               	movwf	tblptrh,c
  2597  0000D6                     	if	1	;There are 3 active tblptr bytes
  2598  0000D6  6AF8               	clrf	tblptru,c
  2599  0000D8  0E00               	movlw	low (__mediumconst shr (0+16))
  2600  0000DA  22F8               	addwfc	tblptru,f,c
  2601  0000DC                     	endif
  2602  0000DC  0008               	tblrd		*
  2603  0000DE  50F5               	movf	tablat,w,c
  2604  0000E0  EC49  F00C         	call	i2_putch
  2605                           
  2606                           ;main.c: 203: }
  2607  0000E4  D0A3               	goto	i2l144
  2608  0000E6                     i2l135:
  2609                           
  2610                           ;main.c: 204: else if(temp == '5'){
  2611  0000E6  0E35               	movlw	53
  2612  0000E8  1831               	xorwf	interruptHandler@temp,w,c
  2613  0000EA  A4D8               	btfss	status,2,c
  2614  0000EC  D020               	goto	i2l137
  2615                           
  2616                           ;main.c: 205: assembly_step = 5;
  2617  0000EE  0E00               	movlw	0
  2618  0000F0  0100               	movlb	0	; () banked
  2619  0000F2  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2620  0000F4  0E05               	movlw	5
  2621  0000F6  6F90               	movwf	_assembly_step& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 206: prev_state = state;
  2625  0000F8  C092  F03B         	movff	_state,_prev_state
  2626  0000FC  C093  F03C         	movff	_state+1,_prev_state+1
  2627                           
  2628                           ;main.c: 207: state = 1;
  2629  000100  0E00               	movlw	0
  2630  000102  6F93               	movwf	(_state+1)& (0+255),b
  2631  000104  0E01               	movlw	1
  2632  000106  6F92               	movwf	_state& (0+255),b
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 208: lcdInst(0xC0);;
  2636  000108  0EC0               	movlw	192
  2637  00010A  EC53  F00C         	call	i2_lcdInst
  2638                           
  2639                           ;main.c: 209: putch(keys[keypress]);
  2640  00010E  5032               	movf	interruptHandler@keypress,w,c
  2641  000110  0D01               	mullw	1
  2642  000112  0ECD               	movlw	low _keys
  2643  000114  24F3               	addwf	prodl,w,c
  2644  000116  6EF6               	movwf	tblptrl,c
  2645  000118  0EFB               	movlw	high _keys
  2646  00011A  20F4               	addwfc	prodh,w,c
  2647  00011C  6EF7               	movwf	tblptrh,c
  2648  00011E                     	if	1	;There are 3 active tblptr bytes
  2649  00011E  6AF8               	clrf	tblptru,c
  2650  000120  0E00               	movlw	low (__mediumconst shr (0+16))
  2651  000122  22F8               	addwfc	tblptru,f,c
  2652  000124                     	endif
  2653  000124  0008               	tblrd		*
  2654  000126  50F5               	movf	tablat,w,c
  2655  000128  EC49  F00C         	call	i2_putch
  2656                           
  2657                           ;main.c: 211: }
  2658  00012C  D07F               	goto	i2l144
  2659  00012E                     i2l137:
  2660                           
  2661                           ;main.c: 212: else if (temp == '6') {
  2662  00012E  0E36               	movlw	54
  2663  000130  1831               	xorwf	interruptHandler@temp,w,c
  2664  000132  A4D8               	btfss	status,2,c
  2665  000134  D020               	goto	i2l139
  2666                           
  2667                           ;main.c: 213: assembly_step = 6;
  2668  000136  0E00               	movlw	0
  2669  000138  0100               	movlb	0	; () banked
  2670  00013A  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2671  00013C  0E06               	movlw	6
  2672  00013E  6F90               	movwf	_assembly_step& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 214: prev_state = state;
  2676  000140  C092  F03B         	movff	_state,_prev_state
  2677  000144  C093  F03C         	movff	_state+1,_prev_state+1
  2678                           
  2679                           ;main.c: 215: state = 1;
  2680  000148  0E00               	movlw	0
  2681  00014A  6F93               	movwf	(_state+1)& (0+255),b
  2682  00014C  0E01               	movlw	1
  2683  00014E  6F92               	movwf	_state& (0+255),b
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 216: lcdInst(0xC0);;
  2687  000150  0EC0               	movlw	192
  2688  000152  EC53  F00C         	call	i2_lcdInst
  2689                           
  2690                           ;main.c: 217: putch(keys[keypress]);
  2691  000156  5032               	movf	interruptHandler@keypress,w,c
  2692  000158  0D01               	mullw	1
  2693  00015A  0ECD               	movlw	low _keys
  2694  00015C  24F3               	addwf	prodl,w,c
  2695  00015E  6EF6               	movwf	tblptrl,c
  2696  000160  0EFB               	movlw	high _keys
  2697  000162  20F4               	addwfc	prodh,w,c
  2698  000164  6EF7               	movwf	tblptrh,c
  2699  000166                     	if	1	;There are 3 active tblptr bytes
  2700  000166  6AF8               	clrf	tblptru,c
  2701  000168  0E00               	movlw	low (__mediumconst shr (0+16))
  2702  00016A  22F8               	addwfc	tblptru,f,c
  2703  00016C                     	endif
  2704  00016C  0008               	tblrd		*
  2705  00016E  50F5               	movf	tablat,w,c
  2706  000170  EC49  F00C         	call	i2_putch
  2707                           
  2708                           ;main.c: 218: }
  2709  000174  D05B               	goto	i2l144
  2710  000176                     i2l139:
  2711                           
  2712                           ;main.c: 219: else if (temp == '7'){
  2713  000176  0E37               	movlw	55
  2714  000178  1831               	xorwf	interruptHandler@temp,w,c
  2715  00017A  A4D8               	btfss	status,2,c
  2716  00017C  D020               	goto	i2l141
  2717                           
  2718                           ;main.c: 220: assembly_step = 7;
  2719  00017E  0E00               	movlw	0
  2720  000180  0100               	movlb	0	; () banked
  2721  000182  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2722  000184  0E07               	movlw	7
  2723  000186  6F90               	movwf	_assembly_step& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 221: prev_state = state;
  2727  000188  C092  F03B         	movff	_state,_prev_state
  2728  00018C  C093  F03C         	movff	_state+1,_prev_state+1
  2729                           
  2730                           ;main.c: 222: state = 1;
  2731  000190  0E00               	movlw	0
  2732  000192  6F93               	movwf	(_state+1)& (0+255),b
  2733  000194  0E01               	movlw	1
  2734  000196  6F92               	movwf	_state& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 223: lcdInst(0xC0);;
  2738  000198  0EC0               	movlw	192
  2739  00019A  EC53  F00C         	call	i2_lcdInst
  2740                           
  2741                           ;main.c: 224: putch(keys[keypress]);
  2742  00019E  5032               	movf	interruptHandler@keypress,w,c
  2743  0001A0  0D01               	mullw	1
  2744  0001A2  0ECD               	movlw	low _keys
  2745  0001A4  24F3               	addwf	prodl,w,c
  2746  0001A6  6EF6               	movwf	tblptrl,c
  2747  0001A8  0EFB               	movlw	high _keys
  2748  0001AA  20F4               	addwfc	prodh,w,c
  2749  0001AC  6EF7               	movwf	tblptrh,c
  2750  0001AE                     	if	1	;There are 3 active tblptr bytes
  2751  0001AE  6AF8               	clrf	tblptru,c
  2752  0001B0  0E00               	movlw	low (__mediumconst shr (0+16))
  2753  0001B2  22F8               	addwfc	tblptru,f,c
  2754  0001B4                     	endif
  2755  0001B4  0008               	tblrd		*
  2756  0001B6  50F5               	movf	tablat,w,c
  2757  0001B8  EC49  F00C         	call	i2_putch
  2758                           
  2759                           ;main.c: 226: }
  2760  0001BC  D037               	goto	i2l144
  2761  0001BE                     i2l141:
  2762                           
  2763                           ;main.c: 227: else if (temp == '8'){
  2764  0001BE  0E38               	movlw	56
  2765  0001C0  1831               	xorwf	interruptHandler@temp,w,c
  2766  0001C2  A4D8               	btfss	status,2,c
  2767  0001C4  D020               	goto	i2l143
  2768                           
  2769                           ;main.c: 228: assembly_step = 8;
  2770  0001C6  0E00               	movlw	0
  2771  0001C8  0100               	movlb	0	; () banked
  2772  0001CA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2773  0001CC  0E08               	movlw	8
  2774  0001CE  6F90               	movwf	_assembly_step& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main.c: 229: prev_state = state;
  2778  0001D0  C092  F03B         	movff	_state,_prev_state
  2779  0001D4  C093  F03C         	movff	_state+1,_prev_state+1
  2780                           
  2781                           ;main.c: 230: state = 1;
  2782  0001D8  0E00               	movlw	0
  2783  0001DA  6F93               	movwf	(_state+1)& (0+255),b
  2784  0001DC  0E01               	movlw	1
  2785  0001DE  6F92               	movwf	_state& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 231: lcdInst(0xC0);;
  2789  0001E0  0EC0               	movlw	192
  2790  0001E2  EC53  F00C         	call	i2_lcdInst
  2791                           
  2792                           ;main.c: 232: putch(keys[keypress]);
  2793  0001E6  5032               	movf	interruptHandler@keypress,w,c
  2794  0001E8  0D01               	mullw	1
  2795  0001EA  0ECD               	movlw	low _keys
  2796  0001EC  24F3               	addwf	prodl,w,c
  2797  0001EE  6EF6               	movwf	tblptrl,c
  2798  0001F0  0EFB               	movlw	high _keys
  2799  0001F2  20F4               	addwfc	prodh,w,c
  2800  0001F4  6EF7               	movwf	tblptrh,c
  2801  0001F6                     	if	1	;There are 3 active tblptr bytes
  2802  0001F6  6AF8               	clrf	tblptru,c
  2803  0001F8  0E00               	movlw	low (__mediumconst shr (0+16))
  2804  0001FA  22F8               	addwfc	tblptru,f,c
  2805  0001FC                     	endif
  2806  0001FC  0008               	tblrd		*
  2807  0001FE  50F5               	movf	tablat,w,c
  2808  000200  EC49  F00C         	call	i2_putch
  2809                           
  2810                           ;main.c: 234: }
  2811  000204  D013               	goto	i2l144
  2812  000206                     i2l143:
  2813                           
  2814                           ;main.c: 235: else{
  2815                           ;main.c: 241: initLCD();
  2816  000206  EC35  F00B         	call	i2_initLCD	;wreg free
  2817                           
  2818                           ;main.c: 242: printf("Wrong number! ");
  2819  00020A  0E4F               	movlw	low STR_9
  2820  00020C  6E0D               	movwf	i2printf@f,c
  2821  00020E  0EFC               	movlw	high STR_9
  2822  000210  6E0E               	movwf	i2printf@f+1,c
  2823  000212  ECEB  F008         	call	i2_printf	;wreg free
  2824                           
  2825                           ;main.c: 243: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2826  000216  0E33               	movlw	51
  2827  000218  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2828  00021A  0EBB               	movlw	187
  2829  00021C  6E1B               	movwf	??_interruptHandler& (0+255),c
  2830  00021E  0EE0               	movlw	224
  2831  000220                     i2u279_47:
  2832  000220  2EE8               	decfsz	wreg,f,c
  2833  000222  D7FE               	bra	i2u279_47
  2834  000224  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2835  000226  D7FC               	bra	i2u279_47
  2836  000228  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2837  00022A  D7FA               	bra	i2u279_47
  2838  00022C                     i2l144:
  2839                           
  2840                           ;main.c: 245: }
  2841                           ;main.c: 249: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2842  00022C  0E66               	movlw	102
  2843  00022E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2844  000230  0E76               	movlw	118
  2845  000232  6E1B               	movwf	??_interruptHandler& (0+255),c
  2846  000234  0EC1               	movlw	193
  2847  000236                     i2u280_47:
  2848  000236  2EE8               	decfsz	wreg,f,c
  2849  000238  D7FE               	bra	i2u280_47
  2850  00023A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2851  00023C  D7FC               	bra	i2u280_47
  2852  00023E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2853  000240  D7FA               	bra	i2u280_47
  2854  000242  F000               	nop	
  2855  000244  D2D4               	goto	i2l2792
  2856  000246                     i2l134:
  2857                           
  2858                           ;main.c: 254: }
  2859                           ;main.c: 261: if(state == 1){
  2860  000246  0100               	movlb	0	; () banked
  2861  000248  0592               	decf	_state& (0+255),w,b
  2862  00024A  1193               	iorwf	(_state+1)& (0+255),w,b
  2863  00024C  A4D8               	btfss	status,2,c
  2864  00024E  D1A4               	goto	i2l145
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 268: if (temp == 'A'){
  2868  000250  0E41               	movlw	65
  2869  000252  1831               	xorwf	interruptHandler@temp,w,c
  2870  000254  A4D8               	btfss	status,2,c
  2871  000256  D004               	goto	i2l146
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;main.c: 269: state = prev_state;
  2875  000258  C03B  F092         	movff	_prev_state,_state
  2876  00025C  C03C  F093         	movff	_prev_state+1,_state+1
  2877  000260                     i2l146:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 270: }
  2881                           ;main.c: 272: if (temp == '1'){
  2882                           
  2883                           ; BSR set to: 0
  2884  000260  0E31               	movlw	49
  2885  000262  1831               	xorwf	interruptHandler@temp,w,c
  2886  000264  A4D8               	btfss	status,2,c
  2887  000266  D01C               	goto	i2l147
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 273: lcdInst(0xC0);;
  2891  000268  0EC0               	movlw	192
  2892  00026A  EC53  F00C         	call	i2_lcdInst
  2893                           
  2894                           ;main.c: 274: putch('B');
  2895  00026E  0E42               	movlw	66
  2896  000270  EC49  F00C         	call	i2_putch
  2897                           
  2898                           ;main.c: 275: strcpy(temp_set,"B");
  2899  000274  0E4A               	movlw	low _temp_set
  2900  000276  6E01               	movwf	strcpy@to,c
  2901  000278  0E00               	movlw	high _temp_set
  2902  00027A  6E02               	movwf	strcpy@to+1,c
  2903  00027C  0EFC               	movlw	low STR_10
  2904  00027E  6E03               	movwf	strcpy@from,c
  2905  000280  0EFC               	movlw	high STR_10
  2906  000282  6E04               	movwf	strcpy@from+1,c
  2907  000284  EC80  F00B         	call	_strcpy	;wreg free
  2908                           
  2909                           ;main.c: 276: strcat(current_set,temp_set);
  2910  000288  0EB4               	movlw	low _current_set
  2911  00028A  6E01               	movwf	strcat@to,c
  2912  00028C  0E00               	movlw	high _current_set
  2913  00028E  6E02               	movwf	strcat@to+1,c
  2914  000290  0E4A               	movlw	low _temp_set
  2915  000292  6E03               	movwf	strcat@from,c
  2916  000294  0E00               	movlw	high _temp_set
  2917  000296  6E04               	movwf	strcat@from+1,c
  2918  000298  ECE6  F00B         	call	_strcat	;wreg free
  2919                           
  2920                           ;main.c: 277: counter++;
  2921  00029C  4A45               	infsnz	_counter,f,c
  2922  00029E  2A46               	incf	_counter+1,f,c
  2923  0002A0                     i2l147:
  2924                           
  2925                           ;main.c: 278: }
  2926                           ;main.c: 280: if(temp == '2'){
  2927  0002A0  0E32               	movlw	50
  2928  0002A2  1831               	xorwf	interruptHandler@temp,w,c
  2929  0002A4  A4D8               	btfss	status,2,c
  2930  0002A6  D01C               	goto	i2l148
  2931                           
  2932                           ;main.c: 281: lcdInst(0xC0);;
  2933  0002A8  0EC0               	movlw	192
  2934  0002AA  EC53  F00C         	call	i2_lcdInst
  2935                           
  2936                           ;main.c: 282: putch('N');
  2937  0002AE  0E4E               	movlw	78
  2938  0002B0  EC49  F00C         	call	i2_putch
  2939                           
  2940                           ;main.c: 283: strcpy(temp_set,"N");
  2941  0002B4  0E4A               	movlw	low _temp_set
  2942  0002B6  6E01               	movwf	strcpy@to,c
  2943  0002B8  0E00               	movlw	high _temp_set
  2944  0002BA  6E02               	movwf	strcpy@to+1,c
  2945  0002BC  0EEB               	movlw	low (STR_34+2)
  2946  0002BE  6E03               	movwf	strcpy@from,c
  2947  0002C0  0EFC               	movlw	high (STR_34+2)
  2948  0002C2  6E04               	movwf	strcpy@from+1,c
  2949  0002C4  EC80  F00B         	call	_strcpy	;wreg free
  2950                           
  2951                           ;main.c: 284: strcat(current_set,temp_set);
  2952  0002C8  0EB4               	movlw	low _current_set
  2953  0002CA  6E01               	movwf	strcat@to,c
  2954  0002CC  0E00               	movlw	high _current_set
  2955  0002CE  6E02               	movwf	strcat@to+1,c
  2956  0002D0  0E4A               	movlw	low _temp_set
  2957  0002D2  6E03               	movwf	strcat@from,c
  2958  0002D4  0E00               	movlw	high _temp_set
  2959  0002D6  6E04               	movwf	strcat@from+1,c
  2960  0002D8  ECE6  F00B         	call	_strcat	;wreg free
  2961                           
  2962                           ;main.c: 285: counter++;
  2963  0002DC  4A45               	infsnz	_counter,f,c
  2964  0002DE  2A46               	incf	_counter+1,f,c
  2965  0002E0                     i2l148:
  2966                           
  2967                           ;main.c: 286: }
  2968                           ;main.c: 288: if(temp == '3'){
  2969  0002E0  0E33               	movlw	51
  2970  0002E2  1831               	xorwf	interruptHandler@temp,w,c
  2971  0002E4  A4D8               	btfss	status,2,c
  2972  0002E6  D01C               	goto	i2l149
  2973                           
  2974                           ;main.c: 289: lcdInst(0xC0);;
  2975  0002E8  0EC0               	movlw	192
  2976  0002EA  EC53  F00C         	call	i2_lcdInst
  2977                           
  2978                           ;main.c: 290: putch('S');
  2979  0002EE  0E53               	movlw	83
  2980  0002F0  EC49  F00C         	call	i2_putch
  2981                           
  2982                           ;main.c: 292: strcpy(temp_set,"S");
  2983  0002F4  0E4A               	movlw	low _temp_set
  2984  0002F6  6E01               	movwf	strcpy@to,c
  2985  0002F8  0E00               	movlw	high _temp_set
  2986  0002FA  6E02               	movwf	strcpy@to+1,c
  2987  0002FC  0EEF               	movlw	low (STR_35+2)
  2988  0002FE  6E03               	movwf	strcpy@from,c
  2989  000300  0EFC               	movlw	high (STR_35+2)
  2990  000302  6E04               	movwf	strcpy@from+1,c
  2991  000304  EC80  F00B         	call	_strcpy	;wreg free
  2992                           
  2993                           ;main.c: 293: strcat(current_set,temp_set);
  2994  000308  0EB4               	movlw	low _current_set
  2995  00030A  6E01               	movwf	strcat@to,c
  2996  00030C  0E00               	movlw	high _current_set
  2997  00030E  6E02               	movwf	strcat@to+1,c
  2998  000310  0E4A               	movlw	low _temp_set
  2999  000312  6E03               	movwf	strcat@from,c
  3000  000314  0E00               	movlw	high _temp_set
  3001  000316  6E04               	movwf	strcat@from+1,c
  3002  000318  ECE6  F00B         	call	_strcat	;wreg free
  3003                           
  3004                           ;main.c: 294: counter++;
  3005  00031C  4A45               	infsnz	_counter,f,c
  3006  00031E  2A46               	incf	_counter+1,f,c
  3007  000320                     i2l149:
  3008                           
  3009                           ;main.c: 295: }
  3010                           ;main.c: 296: if (temp == '4'){
  3011  000320  0E34               	movlw	52
  3012  000322  1831               	xorwf	interruptHandler@temp,w,c
  3013  000324  A4D8               	btfss	status,2,c
  3014  000326  D027               	goto	i2l150
  3015                           
  3016                           ;main.c: 297: lcdInst(0xC0);;
  3017  000328  0EC0               	movlw	192
  3018  00032A  EC53  F00C         	call	i2_lcdInst
  3019                           
  3020                           ;main.c: 298: putch('W');
  3021  00032E  0E57               	movlw	87
  3022  000330  EC49  F00C         	call	i2_putch
  3023                           
  3024                           ;main.c: 300: strcpy(temp_set,"W");
  3025  000334  0E4A               	movlw	low _temp_set
  3026  000336  6E01               	movwf	strcpy@to,c
  3027  000338  0E00               	movlw	high _temp_set
  3028  00033A  6E02               	movwf	strcpy@to+1,c
  3029  00033C  0EF3               	movlw	low (STR_36+2)
  3030  00033E  6E03               	movwf	strcpy@from,c
  3031  000340  0EFC               	movlw	high (STR_36+2)
  3032  000342  6E04               	movwf	strcpy@from+1,c
  3033  000344  EC80  F00B         	call	_strcpy	;wreg free
  3034                           
  3035                           ;main.c: 301: strcat(current_set,temp_set);
  3036  000348  0EB4               	movlw	low _current_set
  3037  00034A  6E01               	movwf	strcat@to,c
  3038  00034C  0E00               	movlw	high _current_set
  3039  00034E  6E02               	movwf	strcat@to+1,c
  3040  000350  0E4A               	movlw	low _temp_set
  3041  000352  6E03               	movwf	strcat@from,c
  3042  000354  0E00               	movlw	high _temp_set
  3043  000356  6E04               	movwf	strcat@from+1,c
  3044  000358  ECE6  F00B         	call	_strcat	;wreg free
  3045                           
  3046                           ;main.c: 302: strcpy(temp_set,"");
  3047  00035C  0E4A               	movlw	low _temp_set
  3048  00035E  6E01               	movwf	strcpy@to,c
  3049  000360  0E00               	movlw	high _temp_set
  3050  000362  6E02               	movwf	strcpy@to+1,c
  3051  000364  0E5D               	movlw	low (STR_9+14)
  3052  000366  6E03               	movwf	strcpy@from,c
  3053  000368  0EFC               	movlw	high (STR_9+14)
  3054  00036A  6E04               	movwf	strcpy@from+1,c
  3055  00036C  EC80  F00B         	call	_strcpy	;wreg free
  3056                           
  3057                           ;main.c: 303: counter++;
  3058  000370  4A45               	infsnz	_counter,f,c
  3059  000372  2A46               	incf	_counter+1,f,c
  3060                           
  3061                           ;main.c: 304: }
  3062  000374  D0E7               	goto	i2l158
  3063  000376                     i2l150:
  3064                           
  3065                           ;main.c: 307: else{
  3066                           ;main.c: 308: if (keys[keypress] == '*'){
  3067  000376  5032               	movf	interruptHandler@keypress,w,c
  3068  000378  0D01               	mullw	1
  3069  00037A  0ECD               	movlw	low _keys
  3070  00037C  24F3               	addwf	prodl,w,c
  3071  00037E  6EF6               	movwf	tblptrl,c
  3072  000380  0EFB               	movlw	high _keys
  3073  000382  20F4               	addwfc	prodh,w,c
  3074  000384  6EF7               	movwf	tblptrh,c
  3075  000386                     	if	1	;There are 3 active tblptr bytes
  3076  000386  6AF8               	clrf	tblptru,c
  3077  000388  0E00               	movlw	low (__mediumconst shr (0+16))
  3078  00038A  22F8               	addwfc	tblptru,f,c
  3079  00038C                     	endif
  3080  00038C  0008               	tblrd		*
  3081  00038E  50F5               	movf	tablat,w,c
  3082  000390  0A2A               	xorlw	42
  3083  000392  A4D8               	btfss	status,2,c
  3084  000394  D0D7               	goto	i2l158
  3085                           
  3086                           ;main.c: 311: for (int i=0;i<20;i++){
  3087  000396  0E00               	movlw	0
  3088  000398  6E30               	movwf	interruptHandler@i+1,c
  3089  00039A  0E00               	movlw	0
  3090  00039C  6E2F               	movwf	interruptHandler@i,c
  3091  00039E  BE30               	btfsc	interruptHandler@i+1,7,c
  3092  0003A0  D008               	goto	i2l153
  3093  0003A2  5030               	movf	interruptHandler@i+1,w,c
  3094  0003A4  E105               	bnz	i2u211_40
  3095  0003A6  0E14               	movlw	20
  3096  0003A8  5C2F               	subwf	interruptHandler@i,w,c
  3097  0003AA  B0D8               	btfsc	status,0,c
  3098  0003AC  D097               	goto	i2u214_40
  3099  0003AE  D001               	goto	i2l153
  3100  0003B0                     i2u211_40:
  3101  0003B0  D095               	goto	i2u214_40
  3102  0003B2                     i2l153:
  3103                           
  3104                           ;main.c: 312: if (strncmp(current_set,strs[i],4) == 0){
  3105  0003B2  0EB4               	movlw	low _current_set
  3106  0003B4  6E01               	movwf	strncmp@s1,c
  3107  0003B6  0E00               	movlw	high _current_set
  3108  0003B8  6E02               	movwf	strncmp@s1+1,c
  3109  0003BA  C02F  F01B         	movff	interruptHandler@i,??_interruptHandler
  3110  0003BE  C030  F01C         	movff	interruptHandler@i+1,??_interruptHandler+1
  3111  0003C2  90D8               	bcf	status,0,c
  3112  0003C4  361B               	rlcf	??_interruptHandler,f,c
  3113  0003C6  361C               	rlcf	??_interruptHandler+1,f,c
  3114  0003C8  90D8               	bcf	status,0,c
  3115  0003CA  361B               	rlcf	??_interruptHandler,f,c
  3116  0003CC  361C               	rlcf	??_interruptHandler+1,f,c
  3117  0003CE  0EEE               	movlw	low _strs
  3118  0003D0  241B               	addwf	??_interruptHandler,w,c
  3119  0003D2  6E03               	movwf	strncmp@s2,c
  3120  0003D4  0EFB               	movlw	high _strs
  3121  0003D6  201C               	addwfc	??_interruptHandler+1,w,c
  3122  0003D8  6E04               	movwf	strncmp@s2+1,c
  3123  0003DA  0E00               	movlw	0
  3124  0003DC  6E06               	movwf	strncmp@len+1,c
  3125  0003DE  0E04               	movlw	4
  3126  0003E0  6E05               	movwf	strncmp@len,c
  3127  0003E2  ECC6  F009         	call	_strncmp	;wreg free
  3128  0003E6  5001               	movf	?_strncmp,w,c
  3129  0003E8  1002               	iorwf	?_strncmp+1,w,c
  3130  0003EA  A4D8               	btfss	status,2,c
  3131  0003EC  D06B               	goto	i2l155
  3132                           
  3133                           ;main.c: 313: strcpy(final_set[counter_step],current_set);
  3134  0003EE  C043  F01B         	movff	_counter_step,??_interruptHandler
  3135  0003F2  C044  F01C         	movff	_counter_step+1,??_interruptHandler+1
  3136  0003F6  90D8               	bcf	status,0,c
  3137  0003F8  361B               	rlcf	??_interruptHandler,f,c
  3138  0003FA  361C               	rlcf	??_interruptHandler+1,f,c
  3139  0003FC  90D8               	bcf	status,0,c
  3140  0003FE  361B               	rlcf	??_interruptHandler,f,c
  3141  000400  361C               	rlcf	??_interruptHandler+1,f,c
  3142  000402  0E94               	movlw	low _final_set
  3143  000404  241B               	addwf	??_interruptHandler,w,c
  3144  000406  6E01               	movwf	strcpy@to,c
  3145  000408  0E00               	movlw	high _final_set
  3146  00040A  201C               	addwfc	??_interruptHandler+1,w,c
  3147  00040C  6E02               	movwf	strcpy@to+1,c
  3148  00040E  0EB4               	movlw	low _current_set
  3149  000410  6E03               	movwf	strcpy@from,c
  3150  000412  0E00               	movlw	high _current_set
  3151  000414  6E04               	movwf	strcpy@from+1,c
  3152  000416  EC80  F00B         	call	_strcpy	;wreg free
  3153                           
  3154                           ;main.c: 314: strcpy(current_set2,current_set);
  3155  00041A  0E4E               	movlw	low _current_set2
  3156  00041C  6E01               	movwf	strcpy@to,c
  3157  00041E  0E00               	movlw	high _current_set2
  3158  000420  6E02               	movwf	strcpy@to+1,c
  3159  000422  0EB4               	movlw	low _current_set
  3160  000424  6E03               	movwf	strcpy@from,c
  3161  000426  0E00               	movlw	high _current_set
  3162  000428  6E04               	movwf	strcpy@from+1,c
  3163  00042A  EC80  F00B         	call	_strcpy	;wreg free
  3164                           
  3165                           ;main.c: 315: strcpy(current_set,"");
  3166  00042E  0EB4               	movlw	low _current_set
  3167  000430  6E01               	movwf	strcpy@to,c
  3168  000432  0E00               	movlw	high _current_set
  3169  000434  6E02               	movwf	strcpy@to+1,c
  3170  000436  0E5D               	movlw	low (STR_9+14)
  3171  000438  6E03               	movwf	strcpy@from,c
  3172  00043A  0EFC               	movlw	high (STR_9+14)
  3173  00043C  6E04               	movwf	strcpy@from+1,c
  3174  00043E  EC80  F00B         	call	_strcpy	;wreg free
  3175                           
  3176                           ;main.c: 316: strcpy(temp_set,"");
  3177  000442  0E4A               	movlw	low _temp_set
  3178  000444  6E01               	movwf	strcpy@to,c
  3179  000446  0E00               	movlw	high _temp_set
  3180  000448  6E02               	movwf	strcpy@to+1,c
  3181  00044A  0E5D               	movlw	low (STR_9+14)
  3182  00044C  6E03               	movwf	strcpy@from,c
  3183  00044E  0EFC               	movlw	high (STR_9+14)
  3184  000450  6E04               	movwf	strcpy@from+1,c
  3185  000452  EC80  F00B         	call	_strcpy	;wreg free
  3186                           
  3187                           ;main.c: 317: valid = 1;
  3188  000456  0E00               	movlw	0
  3189  000458  6E40               	movwf	_valid+1,c
  3190  00045A  0E01               	movlw	1
  3191  00045C  6E3F               	movwf	_valid,c
  3192                           
  3193                           ;main.c: 318: state = 2;
  3194  00045E  0E00               	movlw	0
  3195  000460  0100               	movlb	0	; () banked
  3196  000462  6F93               	movwf	(_state+1)& (0+255),b
  3197  000464  0E02               	movlw	2
  3198  000466  6F92               	movwf	_state& (0+255),b
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 320: initLCD();
  3202  000468  EC35  F00B         	call	i2_initLCD	;wreg free
  3203                           
  3204                           ;main.c: 321: printf("correct!");
  3205  00046C  0E92               	movlw	low STR_17
  3206  00046E  6E0D               	movwf	i2printf@f,c
  3207  000470  0EFC               	movlw	high STR_17
  3208  000472  6E0E               	movwf	i2printf@f+1,c
  3209  000474  ECEB  F008         	call	i2_printf	;wreg free
  3210                           
  3211                           ;main.c: 322: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3212  000478  0E33               	movlw	51
  3213  00047A  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3214  00047C  0EBB               	movlw	187
  3215  00047E  6E1B               	movwf	??_interruptHandler& (0+255),c
  3216  000480  0EE0               	movlw	224
  3217  000482                     i2u281_47:
  3218  000482  2EE8               	decfsz	wreg,f,c
  3219  000484  D7FE               	bra	i2u281_47
  3220  000486  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3221  000488  D7FC               	bra	i2u281_47
  3222  00048A  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3223  00048C  D7FA               	bra	i2u281_47
  3224                           
  3225                           ;main.c: 324: printf("%s",current_set);
  3226  00048E  0EF9               	movlw	low STR_3
  3227  000490  6E0D               	movwf	i2printf@f,c
  3228  000492  0EFC               	movlw	high STR_3
  3229  000494  6E0E               	movwf	i2printf@f+1,c
  3230  000496  0EB4               	movlw	low _current_set
  3231  000498  6E0F               	movwf	?i2_printf+2,c
  3232  00049A  0E00               	movlw	high _current_set
  3233  00049C  6E10               	movwf	?i2_printf+3,c
  3234  00049E  ECEB  F008         	call	i2_printf	;wreg free
  3235                           
  3236                           ;main.c: 325: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3237  0004A2  0E66               	movlw	102
  3238  0004A4  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3239  0004A6  0E76               	movlw	118
  3240  0004A8  6E1B               	movwf	??_interruptHandler& (0+255),c
  3241  0004AA  0EC1               	movlw	193
  3242  0004AC                     i2u282_47:
  3243  0004AC  2EE8               	decfsz	wreg,f,c
  3244  0004AE  D7FE               	bra	i2u282_47
  3245  0004B0  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3246  0004B2  D7FC               	bra	i2u282_47
  3247  0004B4  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3248  0004B6  D7FA               	bra	i2u282_47
  3249  0004B8  F000               	nop	
  3250                           
  3251                           ;main.c: 326: counter = 0;
  3252  0004BA  0E00               	movlw	0
  3253  0004BC  6E46               	movwf	_counter+1,c
  3254  0004BE  0E00               	movlw	0
  3255  0004C0  6E45               	movwf	_counter,c
  3256                           
  3257                           ;main.c: 327: break;
  3258  0004C2  D00C               	goto	i2u214_40
  3259  0004C4                     i2l155:
  3260                           
  3261                           ;main.c: 330: else if (i == 19){
  3262  0004C4  0E13               	movlw	19
  3263  0004C6  182F               	xorwf	interruptHandler@i,w,c
  3264  0004C8  1030               	iorwf	interruptHandler@i+1,w,c
  3265  0004CA  B4D8               	btfsc	status,2,c
  3266  0004CC  D007               	goto	i2u214_40
  3267                           
  3268                           ;main.c: 331: break;
  3269  0004CE  4A2F               	infsnz	interruptHandler@i,f,c
  3270  0004D0  2A30               	incf	interruptHandler@i+1,f,c
  3271  0004D2  BE30               	btfsc	interruptHandler@i+1,7,c
  3272  0004D4  D76E               	goto	i2l153
  3273  0004D6  5030               	movf	interruptHandler@i+1,w,c
  3274  0004D8  E101               	bnz	i2l2682
  3275  0004DA  D765               	goto	L2
  3276  0004DC                     i2u214_40:
  3277  0004DC                     i2l2682:
  3278                           
  3279                           ;main.c: 332: }
  3280                           ;main.c: 334: }
  3281                           ;main.c: 335: if (valid != 1){
  3282  0004DC  043F               	decf	_valid,w,c
  3283  0004DE  1040               	iorwf	_valid+1,w,c
  3284  0004E0  B4D8               	btfsc	status,2,c
  3285  0004E2  D030               	goto	i2l158
  3286                           
  3287                           ;main.c: 337: initLCD();
  3288  0004E4  EC35  F00B         	call	i2_initLCD	;wreg free
  3289                           
  3290                           ;main.c: 338: printf("wrong set!");
  3291  0004E8  0E87               	movlw	low STR_19
  3292  0004EA  6E0D               	movwf	i2printf@f,c
  3293  0004EC  0EFC               	movlw	high STR_19
  3294  0004EE  6E0E               	movwf	i2printf@f+1,c
  3295  0004F0  ECEB  F008         	call	i2_printf	;wreg free
  3296                           
  3297                           ;main.c: 339: printf("%s",current_set);
  3298  0004F4  0EF9               	movlw	low STR_3
  3299  0004F6  6E0D               	movwf	i2printf@f,c
  3300  0004F8  0EFC               	movlw	high STR_3
  3301  0004FA  6E0E               	movwf	i2printf@f+1,c
  3302  0004FC  0EB4               	movlw	low _current_set
  3303  0004FE  6E0F               	movwf	?i2_printf+2,c
  3304  000500  0E00               	movlw	high _current_set
  3305  000502  6E10               	movwf	?i2_printf+3,c
  3306  000504  ECEB  F008         	call	i2_printf	;wreg free
  3307                           
  3308                           ;main.c: 340: strcpy(current_set,"");
  3309  000508  0EB4               	movlw	low _current_set
  3310  00050A  6E01               	movwf	strcpy@to,c
  3311  00050C  0E00               	movlw	high _current_set
  3312  00050E  6E02               	movwf	strcpy@to+1,c
  3313  000510  0E5D               	movlw	low (STR_9+14)
  3314  000512  6E03               	movwf	strcpy@from,c
  3315  000514  0EFC               	movlw	high (STR_9+14)
  3316  000516  6E04               	movwf	strcpy@from+1,c
  3317  000518  EC80  F00B         	call	_strcpy	;wreg free
  3318                           
  3319                           ;main.c: 341: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3320  00051C  0E66               	movlw	102
  3321  00051E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3322  000520  0E76               	movlw	118
  3323  000522  6E1B               	movwf	??_interruptHandler& (0+255),c
  3324  000524  0EC1               	movlw	193
  3325  000526                     i2u283_47:
  3326  000526  2EE8               	decfsz	wreg,f,c
  3327  000528  D7FE               	bra	i2u283_47
  3328  00052A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3329  00052C  D7FC               	bra	i2u283_47
  3330  00052E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3331  000530  D7FA               	bra	i2u283_47
  3332  000532  F000               	nop	
  3333                           
  3334                           ;main.c: 342: counter = 0;
  3335  000534  0E00               	movlw	0
  3336  000536  6E46               	movwf	_counter+1,c
  3337  000538  0E00               	movlw	0
  3338  00053A  6E45               	movwf	_counter,c
  3339                           
  3340                           ;main.c: 343: valid = 0;
  3341  00053C  0E00               	movlw	0
  3342  00053E  6E40               	movwf	_valid+1,c
  3343  000540  0E00               	movlw	0
  3344  000542  6E3F               	movwf	_valid,c
  3345  000544                     i2l158:
  3346                           
  3347                           ;main.c: 344: }
  3348                           ;main.c: 347: }
  3349                           ;main.c: 356: }
  3350                           ;main.c: 359: if (counter > 4){
  3351  000544  BE46               	btfsc	_counter+1,7,c
  3352  000546  D153               	goto	i2l2792
  3353  000548  5046               	movf	_counter+1,w,c
  3354  00054A  E104               	bnz	i2u216_40
  3355  00054C  0E05               	movlw	5
  3356  00054E  5C45               	subwf	_counter,w,c
  3357  000550  A0D8               	btfss	status,0,c
  3358  000552  D14D               	goto	i2l2792
  3359  000554                     i2u216_40:
  3360                           
  3361                           ;main.c: 360: initLCD();
  3362  000554  EC35  F00B         	call	i2_initLCD	;wreg free
  3363                           
  3364                           ;main.c: 361: printf("wrong!");
  3365  000558  0EB3               	movlw	low STR_22
  3366  00055A  6E0D               	movwf	i2printf@f,c
  3367  00055C  0EFC               	movlw	high STR_22
  3368  00055E  6E0E               	movwf	i2printf@f+1,c
  3369  000560  ECEB  F008         	call	i2_printf	;wreg free
  3370                           
  3371                           ;main.c: 363: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3372  000564  0E33               	movlw	51
  3373  000566  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3374  000568  0EBB               	movlw	187
  3375  00056A  6E1B               	movwf	??_interruptHandler& (0+255),c
  3376  00056C  0EE0               	movlw	224
  3377  00056E                     i2u284_47:
  3378  00056E  2EE8               	decfsz	wreg,f,c
  3379  000570  D7FE               	bra	i2u284_47
  3380  000572  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3381  000574  D7FC               	bra	i2u284_47
  3382  000576  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3383  000578  D7FA               	bra	i2u284_47
  3384                           
  3385                           ;main.c: 365: strcpy(current_set,"");
  3386  00057A  0EB4               	movlw	low _current_set
  3387  00057C  6E01               	movwf	strcpy@to,c
  3388  00057E  0E00               	movlw	high _current_set
  3389  000580  6E02               	movwf	strcpy@to+1,c
  3390  000582  0E5D               	movlw	low (STR_9+14)
  3391  000584  6E03               	movwf	strcpy@from,c
  3392  000586  0EFC               	movlw	high (STR_9+14)
  3393  000588  6E04               	movwf	strcpy@from+1,c
  3394  00058A  EC80  F00B         	call	_strcpy	;wreg free
  3395                           
  3396                           ;main.c: 366: counter = 0;
  3397  00058E  0E00               	movlw	0
  3398  000590  6E46               	movwf	_counter+1,c
  3399  000592  0E00               	movlw	0
  3400  000594  6E45               	movwf	_counter,c
  3401  000596  D12B               	goto	i2l2792
  3402  000598                     i2l145:
  3403                           
  3404                           ;main.c: 371: }
  3405                           ;main.c: 376: if (state ==2){
  3406  000598  0E02               	movlw	2
  3407  00059A  0100               	movlb	0	; () banked
  3408  00059C  1992               	xorwf	_state& (0+255),w,b
  3409  00059E  1193               	iorwf	(_state+1)& (0+255),w,b
  3410  0005A0  A4D8               	btfss	status,2,c
  3411  0005A2  D111               	goto	i2l176
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 377: counter = 0;
  3415  0005A4  0E00               	movlw	0
  3416  0005A6  6E46               	movwf	_counter+1,c
  3417  0005A8  0E00               	movlw	0
  3418  0005AA  6E45               	movwf	_counter,c
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 379: lcdInst(0xC0);;
  3422  0005AC  0EC0               	movlw	192
  3423  0005AE  EC53  F00C         	call	i2_lcdInst
  3424                           
  3425                           ;main.c: 380: putch(keys[keypress]);
  3426  0005B2  5032               	movf	interruptHandler@keypress,w,c
  3427  0005B4  0D01               	mullw	1
  3428  0005B6  0ECD               	movlw	low _keys
  3429  0005B8  24F3               	addwf	prodl,w,c
  3430  0005BA  6EF6               	movwf	tblptrl,c
  3431  0005BC  0EFB               	movlw	high _keys
  3432  0005BE  20F4               	addwfc	prodh,w,c
  3433  0005C0  6EF7               	movwf	tblptrh,c
  3434  0005C2                     	if	1	;There are 3 active tblptr bytes
  3435  0005C2  6AF8               	clrf	tblptru,c
  3436  0005C4  0E00               	movlw	low (__mediumconst shr (0+16))
  3437  0005C6  22F8               	addwfc	tblptru,f,c
  3438  0005C8                     	endif
  3439  0005C8  0008               	tblrd		*
  3440  0005CA  50F5               	movf	tablat,w,c
  3441  0005CC  EC49  F00C         	call	i2_putch
  3442                           
  3443                           ;main.c: 382: _delay((unsigned long)((500)*(40000000/4000.0)));
  3444  0005D0  0E1A               	movlw	26
  3445  0005D2  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3446  0005D4  0E5E               	movlw	94
  3447  0005D6  6E1B               	movwf	??_interruptHandler& (0+255),c
  3448  0005D8  0E6E               	movlw	110
  3449  0005DA                     i2u285_47:
  3450  0005DA  2EE8               	decfsz	wreg,f,c
  3451  0005DC  D7FE               	bra	i2u285_47
  3452  0005DE  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3453  0005E0  D7FC               	bra	i2u285_47
  3454  0005E2  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3455  0005E4  D7FA               	bra	i2u285_47
  3456  0005E6  D000               	nop2	
  3457                           
  3458                           ;main.c: 384: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  3459  0005E8  5032               	movf	interruptHandler@keypress,w,c
  3460  0005EA  0D01               	mullw	1
  3461  0005EC  0ECD               	movlw	low _keys
  3462  0005EE  24F3               	addwf	prodl,w,c
  3463  0005F0  6EF6               	movwf	tblptrl,c
  3464  0005F2  0EFB               	movlw	high _keys
  3465  0005F4  20F4               	addwfc	prodh,w,c
  3466  0005F6  6EF7               	movwf	tblptrh,c
  3467  0005F8                     	if	1	;There are 3 active tblptr bytes
  3468  0005F8  6AF8               	clrf	tblptru,c
  3469  0005FA  0E00               	movlw	low (__mediumconst shr (0+16))
  3470  0005FC  22F8               	addwfc	tblptru,f,c
  3471  0005FE                     	endif
  3472  0005FE  0008               	tblrd		*
  3473  000600  50F5               	movf	tablat,w,c
  3474  000602  0A31               	xorlw	49
  3475  000604  B4D8               	btfsc	status,2,c
  3476  000606  D05A               	goto	i2l164
  3477  000608  5032               	movf	interruptHandler@keypress,w,c
  3478  00060A  0D01               	mullw	1
  3479  00060C  0ECD               	movlw	low _keys
  3480  00060E  24F3               	addwf	prodl,w,c
  3481  000610  6EF6               	movwf	tblptrl,c
  3482  000612  0EFB               	movlw	high _keys
  3483  000614  20F4               	addwfc	prodh,w,c
  3484  000616  6EF7               	movwf	tblptrh,c
  3485  000618                     	if	1	;There are 3 active tblptr bytes
  3486  000618  6AF8               	clrf	tblptru,c
  3487  00061A  0E00               	movlw	low (__mediumconst shr (0+16))
  3488  00061C  22F8               	addwfc	tblptru,f,c
  3489  00061E                     	endif
  3490  00061E  0008               	tblrd		*
  3491  000620  50F5               	movf	tablat,w,c
  3492  000622  0A32               	xorlw	50
  3493  000624  B4D8               	btfsc	status,2,c
  3494  000626  D04A               	goto	i2l164
  3495  000628  5032               	movf	interruptHandler@keypress,w,c
  3496  00062A  0D01               	mullw	1
  3497  00062C  0ECD               	movlw	low _keys
  3498  00062E  24F3               	addwf	prodl,w,c
  3499  000630  6EF6               	movwf	tblptrl,c
  3500  000632  0EFB               	movlw	high _keys
  3501  000634  20F4               	addwfc	prodh,w,c
  3502  000636  6EF7               	movwf	tblptrh,c
  3503  000638                     	if	1	;There are 3 active tblptr bytes
  3504  000638  6AF8               	clrf	tblptru,c
  3505  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  3506  00063C  22F8               	addwfc	tblptru,f,c
  3507  00063E                     	endif
  3508  00063E  0008               	tblrd		*
  3509  000640  50F5               	movf	tablat,w,c
  3510  000642  0A33               	xorlw	51
  3511  000644  B4D8               	btfsc	status,2,c
  3512  000646  D03A               	goto	i2l164
  3513  000648  5032               	movf	interruptHandler@keypress,w,c
  3514  00064A  0D01               	mullw	1
  3515  00064C  0ECD               	movlw	low _keys
  3516  00064E  24F3               	addwf	prodl,w,c
  3517  000650  6EF6               	movwf	tblptrl,c
  3518  000652  0EFB               	movlw	high _keys
  3519  000654  20F4               	addwfc	prodh,w,c
  3520  000656  6EF7               	movwf	tblptrh,c
  3521  000658                     	if	1	;There are 3 active tblptr bytes
  3522  000658  6AF8               	clrf	tblptru,c
  3523  00065A  0E00               	movlw	low (__mediumconst shr (0+16))
  3524  00065C  22F8               	addwfc	tblptru,f,c
  3525  00065E                     	endif
  3526  00065E  0008               	tblrd		*
  3527  000660  50F5               	movf	tablat,w,c
  3528  000662  0A34               	xorlw	52
  3529  000664  B4D8               	btfsc	status,2,c
  3530  000666  D02A               	goto	i2l164
  3531  000668  D0AE               	goto	i2l176
  3532  00066A                     
  3533                           ;main.c: 388: number = 1;
  3534  00066A  0E00               	movlw	0
  3535  00066C  6E53               	movwf	_number+1,c
  3536  00066E  0E01               	movlw	1
  3537  000670  D00F               	goto	L6
  3538  000672                     
  3539                           ;main.c: 391: number = 2;
  3540  000672  0E00               	movlw	0
  3541  000674  6E53               	movwf	_number+1,c
  3542  000676  0E02               	movlw	2
  3543  000678  D00B               	goto	L6
  3544  00067A                     
  3545                           ;main.c: 394: number = 3;
  3546  00067A  0E00               	movlw	0
  3547  00067C  6E53               	movwf	_number+1,c
  3548  00067E  0E03               	movlw	3
  3549  000680  D007               	goto	L6
  3550  000682                     
  3551                           ;main.c: 397: number = 4;
  3552  000682  0E00               	movlw	0
  3553  000684  6E53               	movwf	_number+1,c
  3554  000686  0E04               	movlw	4
  3555  000688  D003               	goto	L6
  3556  00068A                     
  3557                           ;main.c: 400: number = 5;
  3558  00068A  0E00               	movlw	0
  3559  00068C  6E53               	movwf	_number+1,c
  3560  00068E  0E05               	movlw	5
  3561  000690                     L6:
  3562  000690  6E52               	movwf	_number,c
  3563                           
  3564                           ;main.c: 401: break;
  3565  000692  D031               	goto	i2l166
  3566  000694                     
  3567                           ;main.c: 403: initLCD();
  3568  000694  EC35  F00B         	call	i2_initLCD	;wreg free
  3569                           
  3570                           ;main.c: 404: printf("Wrong input");
  3571  000698  0E7B               	movlw	low STR_24
  3572  00069A  6E0D               	movwf	i2printf@f,c
  3573  00069C  0EFC               	movlw	high STR_24
  3574  00069E  6E0E               	movwf	i2printf@f+1,c
  3575  0006A0  ECEB  F008         	call	i2_printf	;wreg free
  3576                           
  3577                           ;main.c: 405: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3578  0006A4  0E33               	movlw	51
  3579  0006A6  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3580  0006A8  0EBB               	movlw	187
  3581  0006AA  6E1B               	movwf	??_interruptHandler& (0+255),c
  3582  0006AC  0EE0               	movlw	224
  3583  0006AE                     i2u286_47:
  3584  0006AE  2EE8               	decfsz	wreg,f,c
  3585  0006B0  D7FE               	bra	i2u286_47
  3586  0006B2  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3587  0006B4  D7FC               	bra	i2u286_47
  3588  0006B6  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3589  0006B8  D7FA               	bra	i2u286_47
  3590                           
  3591                           ;main.c: 406: }
  3592  0006BA  D01D               	goto	i2l166
  3593  0006BC                     i2l164:
  3594  0006BC  5032               	movf	interruptHandler@keypress,w,c
  3595  0006BE  0D01               	mullw	1
  3596  0006C0  0ECD               	movlw	low _keys
  3597  0006C2  24F3               	addwf	prodl,w,c
  3598  0006C4  6EF6               	movwf	tblptrl,c
  3599  0006C6  0EFB               	movlw	high _keys
  3600  0006C8  20F4               	addwfc	prodh,w,c
  3601  0006CA  6EF7               	movwf	tblptrh,c
  3602  0006CC                     	if	1	;There are 3 active tblptr bytes
  3603  0006CC  6AF8               	clrf	tblptru,c
  3604  0006CE  0E00               	movlw	low (__mediumconst shr (0+16))
  3605  0006D0  22F8               	addwfc	tblptru,f,c
  3606  0006D2                     	endif
  3607  0006D2  0008               	tblrd		*
  3608  0006D4  50F5               	movf	tablat,w,c
  3609                           
  3610                           ; Switch size 1, requested type "space"
  3611                           ; Number of cases is 5, Range of values is 49 to 53
  3612                           ; switch strategies available:
  3613                           ; Name         Instructions Cycles
  3614                           ; simple_byte           16     9 (average)
  3615                           ;	Chosen strategy is simple_byte
  3616  0006D6  0A31               	xorlw	49	; case 49
  3617  0006D8  B4D8               	btfsc	status,2,c
  3618  0006DA  D7C7               	goto	i2l165
  3619  0006DC  0A03               	xorlw	3	; case 50
  3620  0006DE  B4D8               	btfsc	status,2,c
  3621  0006E0  D7C8               	goto	i2l167
  3622  0006E2  0A01               	xorlw	1	; case 51
  3623  0006E4  B4D8               	btfsc	status,2,c
  3624  0006E6  D7C9               	goto	i2l168
  3625  0006E8  0A07               	xorlw	7	; case 52
  3626  0006EA  B4D8               	btfsc	status,2,c
  3627  0006EC  D7CA               	goto	i2l169
  3628  0006EE  0A01               	xorlw	1	; case 53
  3629  0006F0  B4D8               	btfsc	status,2,c
  3630  0006F2  D7CB               	goto	i2l170
  3631  0006F4  D7CF               	goto	i2l171
  3632  0006F6                     i2l166:
  3633                           
  3634                           ;main.c: 409: is_valid();
  3635  0006F6  EC1E  F004         	call	_is_valid	;wreg free
  3636                           
  3637                           ;main.c: 411: if ( check() == 0){
  3638  0006FA  EC8A  F00A         	call	_check	;wreg free
  3639  0006FE  5001               	movf	?_check,w,c
  3640  000700  1002               	iorwf	?_check+1,w,c
  3641  000702  A4D8               	btfss	status,2,c
  3642  000704  D023               	goto	i2l172
  3643                           
  3644                           ;main.c: 412: initLCD();
  3645  000706  EC35  F00B         	call	i2_initLCD	;wreg free
  3646                           
  3647                           ;main.c: 413: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3648  00070A  0E80               	movlw	128
  3649  00070C  EC53  F00C         	call	i2_lcdInst
  3650  000710  0E41               	movlw	65
  3651  000712  6E1B               	movwf	??_interruptHandler& (0+255),c
  3652  000714  0EEE               	movlw	238
  3653  000716                     i2u287_47:
  3654  000716  2EE8               	decfsz	wreg,f,c
  3655  000718  D7FE               	bra	i2u287_47
  3656  00071A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3657  00071C  D7FC               	bra	i2u287_47
  3658  00071E  D000               	nop2	
  3659                           
  3660                           ;main.c: 414: printf("TOO MANY");
  3661  000720  0E9B               	movlw	low STR_25
  3662  000722  6E0D               	movwf	i2printf@f,c
  3663  000724  0EFC               	movlw	high STR_25
  3664  000726  6E0E               	movwf	i2printf@f+1,c
  3665  000728  ECEB  F008         	call	i2_printf	;wreg free
  3666                           
  3667                           ;main.c: 415: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3668  00072C  0E33               	movlw	51
  3669  00072E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3670  000730  0EBB               	movlw	187
  3671  000732  6E1B               	movwf	??_interruptHandler& (0+255),c
  3672  000734  0EE0               	movlw	224
  3673  000736                     i2u288_47:
  3674  000736  2EE8               	decfsz	wreg,f,c
  3675  000738  D7FE               	bra	i2u288_47
  3676  00073A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3677  00073C  D7FC               	bra	i2u288_47
  3678  00073E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3679  000740  D7FA               	bra	i2u288_47
  3680                           
  3681                           ;main.c: 416: state = 2;
  3682  000742  0E00               	movlw	0
  3683  000744  0100               	movlb	0	; () banked
  3684  000746  6F93               	movwf	(_state+1)& (0+255),b
  3685  000748  0E02               	movlw	2
  3686  00074A  D00E               	goto	L7
  3687  00074C                     i2l172:
  3688                           
  3689                           ;main.c: 420: else if (counter_step >= assembly_step){
  3690                           
  3691                           ; BSR set to: 0
  3692  00074C  0100               	movlb	0	; () banked
  3693  00074E  5190               	movf	_assembly_step& (0+255),w,b
  3694  000750  5C43               	subwf	_counter_step,w,c
  3695  000752  5044               	movf	_counter_step+1,w,c
  3696  000754  0A80               	xorlw	128
  3697  000756  6E1B               	movwf	??_interruptHandler& (0+255),c
  3698  000758  5191               	movf	(_assembly_step+1)& (0+255),w,b
  3699  00075A  0A80               	xorlw	128
  3700  00075C  581B               	subwfb	??_interruptHandler& (0+255),w,c
  3701  00075E  A0D8               	btfss	status,0,c
  3702  000760  D005               	goto	i2l174
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 421: state = 3;
  3706  000762  0E00               	movlw	0
  3707  000764  6F93               	movwf	(_state+1)& (0+255),b
  3708  000766  0E03               	movlw	3
  3709  000768                     L7:
  3710  000768  6F92               	movwf	_state& (0+255),b
  3711                           
  3712                           ;main.c: 422: }
  3713  00076A  D02D               	goto	i2l176
  3714  00076C                     i2l174:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;main.c: 423: else if ( check() == 1){
  3718                           
  3719                           ; BSR set to: 0
  3720  00076C  EC8A  F00A         	call	_check	;wreg free
  3721  000770  0401               	decf	?_check,w,c
  3722  000772  1002               	iorwf	?_check+1,w,c
  3723  000774  A4D8               	btfss	status,2,c
  3724  000776  D027               	goto	i2l176
  3725                           
  3726                           ;main.c: 424: state = 1;
  3727  000778  0E00               	movlw	0
  3728  00077A  0100               	movlb	0	; () banked
  3729  00077C  6F93               	movwf	(_state+1)& (0+255),b
  3730  00077E  0E01               	movlw	1
  3731  000780  6F92               	movwf	_state& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;main.c: 425: initLCD();
  3735  000782  EC35  F00B         	call	i2_initLCD	;wreg free
  3736                           
  3737                           ;main.c: 426: printf("okay!");
  3738  000786  0EC0               	movlw	low STR_26
  3739  000788  6E0D               	movwf	i2printf@f,c
  3740  00078A  0EFC               	movlw	high STR_26
  3741  00078C  6E0E               	movwf	i2printf@f+1,c
  3742  00078E  ECEB  F008         	call	i2_printf	;wreg free
  3743                           
  3744                           ;main.c: 427: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3745  000792  0E33               	movlw	51
  3746  000794  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3747  000796  0EBB               	movlw	187
  3748  000798  6E1B               	movwf	??_interruptHandler& (0+255),c
  3749  00079A  0EE0               	movlw	224
  3750  00079C                     i2u289_47:
  3751  00079C  2EE8               	decfsz	wreg,f,c
  3752  00079E  D7FE               	bra	i2u289_47
  3753  0007A0  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3754  0007A2  D7FC               	bra	i2u289_47
  3755  0007A4  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3756  0007A6  D7FA               	bra	i2u289_47
  3757                           
  3758                           ;main.c: 428: final_number[counter_step] = number;
  3759  0007A8  90D8               	bcf	status,0,c
  3760  0007AA  3443               	rlcf	_counter_step,w,c
  3761  0007AC  6ED9               	movwf	fsr2l,c
  3762  0007AE  3444               	rlcf	_counter_step+1,w,c
  3763  0007B0  6EDA               	movwf	fsr2h,c
  3764  0007B2  0E80               	movlw	low _final_number
  3765  0007B4  26D9               	addwf	fsr2l,f,c
  3766  0007B6  0E00               	movlw	high _final_number
  3767  0007B8  22DA               	addwfc	fsr2h,f,c
  3768  0007BA  C052  FFDE         	movff	_number,postinc2
  3769  0007BE  C053  FFDD         	movff	_number+1,postdec2
  3770                           
  3771                           ;main.c: 429: counter_step++;
  3772  0007C2  4A43               	infsnz	_counter_step,f,c
  3773  0007C4  2A44               	incf	_counter_step+1,f,c
  3774  0007C6                     i2l176:
  3775                           
  3776                           ;main.c: 430: }
  3777                           ;main.c: 433: }
  3778                           ;main.c: 440: }
  3779                           ;main.c: 460: B=0;N=0;S=0;W=0;
  3780  0007C6  0E00               	movlw	0
  3781  0007C8  6E3A               	movwf	_B+1,c
  3782  0007CA  0E00               	movlw	0
  3783  0007CC  6E39               	movwf	_B,c
  3784  0007CE  0E00               	movlw	0
  3785  0007D0  6E38               	movwf	_N+1,c
  3786  0007D2  0E00               	movlw	0
  3787  0007D4  6E37               	movwf	_N,c
  3788  0007D6  0E00               	movlw	0
  3789  0007D8  6E36               	movwf	_S+1,c
  3790  0007DA  0E00               	movlw	0
  3791  0007DC  6E35               	movwf	_S,c
  3792  0007DE  0E00               	movlw	0
  3793  0007E0  6E34               	movwf	_W+1,c
  3794  0007E2  0E00               	movlw	0
  3795  0007E4  6E33               	movwf	_W,c
  3796                           
  3797                           ;main.c: 461: total_number = 0;
  3798  0007E6  0E00               	movlw	0
  3799  0007E8  6E3E               	movwf	_total_number+1,c
  3800  0007EA  0E00               	movlw	0
  3801  0007EC  6E3D               	movwf	_total_number,c
  3802  0007EE                     i2l2792:
  3803                           
  3804                           ;main.c: 463: INT1IF = 0;
  3805  0007EE  90F0               	bcf	intcon3,0,c	;volatile
  3806  0007F0                     i2l2794:
  3807                           
  3808                           ;main.c: 464: return;
  3809  0007F0  C02E  F057         	movff	??_interruptHandler+19,btemp+3
  3810  0007F4  C02D  F056         	movff	??_interruptHandler+18,btemp+2
  3811  0007F8  C02C  F055         	movff	??_interruptHandler+17,btemp+1
  3812  0007FC  C02B  F054         	movff	??_interruptHandler+16,btemp
  3813  000800  C02A  FFF5         	movff	??_interruptHandler+15,tablat
  3814  000804  C029  FFF8         	movff	??_interruptHandler+14,tblptru
  3815  000808  C028  FFF7         	movff	??_interruptHandler+13,tblptrh
  3816  00080C  C027  FFF6         	movff	??_interruptHandler+12,tblptrl
  3817  000810  C026  FFF4         	movff	??_interruptHandler+11,prodh
  3818  000814  C025  FFF3         	movff	??_interruptHandler+10,prodl
  3819  000818  C024  FFDA         	movff	??_interruptHandler+9,fsr2h
  3820  00081C  C023  FFD9         	movff	??_interruptHandler+8,fsr2l
  3821  000820  C022  FFE2         	movff	??_interruptHandler+7,fsr1h
  3822  000824  C021  FFE1         	movff	??_interruptHandler+6,fsr1l
  3823  000828  C020  FFEA         	movff	??_interruptHandler+5,fsr0h
  3824  00082C  C01F  FFE9         	movff	??_interruptHandler+4,fsr0l
  3825  000830  C01E  FFFB         	movff	??_interruptHandler+3,pclatu
  3826  000834  C01D  FFFA         	movff	??_interruptHandler+2,pclath
  3827  000838  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3828  00083A  0011               	retfie		f
  3829  00083C                     __end_of_interruptHandler:
  3830                           	opt stack 0
  3831                           pclatu	equ	0xFFB
  3832                           pclath	equ	0xFFA
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           intcon	equ	0xFF2
  3840                           intcon3	equ	0xFF0
  3841                           indf0	equ	0xFEF
  3842                           postinc0	equ	0xFEE
  3843                           fsr0h	equ	0xFEA
  3844                           fsr0l	equ	0xFE9
  3845                           wreg	equ	0xFE8
  3846                           fsr1h	equ	0xFE2
  3847                           fsr1l	equ	0xFE1
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function i2_printf *****************
  3855 ;; Defined at:
  3856 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3859 ;;		 -> STR_26(6), STR_25(9), STR_24(12), STR_22(7), 
  3860 ;;		 -> STR_20(3), STR_19(11), STR_18(3), STR_17(9), 
  3861 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  3862 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  3863 ;;		 -> STR_1(15), 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  printf          4    0        struct .
  3866 ;;  printf          2   23[COMRAM] unsigned int 
  3867 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  3868 ;;		 -> STR_47(7), final_set(32), current_set(4), 
  3869 ;;  printf          2   19[COMRAM] PTR void [1]
  3870 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3871 ;;  printf          2    0        unsigned int 
  3872 ;;  printf          1   25[COMRAM] char 
  3873 ;;  printf          1   18[COMRAM] char 
  3874 ;;  printf          1   17[COMRAM] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  2   12[COMRAM] int 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;Total ram usage:       14 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    2
  3891 ;; This function calls:
  3892 ;;		i2___lwdiv
  3893 ;;		i2___lwmod
  3894 ;;		i2_putch
  3895 ;; This function is called by:
  3896 ;;		_interruptHandler
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text9
  3901  0011D6                     __ptext9:
  3902                           	opt stack 0
  3903  0011D6                     i2_printf:
  3904                           	opt stack 24
  3905                           
  3906                           ;doprnt.c: 466: va_list ap;
  3907                           ;doprnt.c: 499: signed char c;
  3908                           ;doprnt.c: 506: signed char prec;
  3909                           ;doprnt.c: 508: unsigned char flag;
  3910                           ;doprnt.c: 523: union {
  3911                           ;doprnt.c: 524: unsigned long vd;
  3912                           ;doprnt.c: 525: double integ;
  3913                           ;doprnt.c: 526: } tmpval;
  3914                           ;doprnt.c: 528: unsigned int val;
  3915                           ;doprnt.c: 529: unsigned len;
  3916                           ;doprnt.c: 530: const char * cp;
  3917                           ;doprnt.c: 533: *ap = __va_start();
  3918                           
  3919                           ;incstack = 0
  3920  0011D6  0E0F               	movlw	low (?i2_printf+2)
  3921  0011D8  6E14               	movwf	i2printf@ap,c
  3922  0011DA  0E00               	movlw	high (?i2_printf+2)
  3923  0011DC  6E15               	movwf	i2printf@ap+1,c
  3924                           
  3925                           ;doprnt.c: 536: while(c = *f++) {
  3926  0011DE  D0C8               	goto	i2u188_40
  3927  0011E0                     
  3928                           ;doprnt.c: 538: if(c != '%')
  3929  0011E0  0E25               	movlw	37
  3930  0011E2  181A               	xorwf	i2printf@c,w,c
  3931  0011E4  B4D8               	btfsc	status,2,c
  3932  0011E6  D004               	goto	i2l292
  3933                           
  3934                           ;doprnt.c: 540: {
  3935                           ;doprnt.c: 541: (putch(c) );
  3936  0011E8  501A               	movf	i2printf@c,w,c
  3937  0011EA  EC49  F00C         	call	i2_putch
  3938                           
  3939                           ;doprnt.c: 542: continue;
  3940  0011EE  D0C0               	goto	i2u188_40
  3941  0011F0                     i2l292:
  3942                           
  3943                           ;doprnt.c: 543: }
  3944                           ;doprnt.c: 548: flag = 0;
  3945  0011F0  0E00               	movlw	0
  3946  0011F2  6E12               	movwf	i2printf@flag,c
  3947                           
  3948                           ;doprnt.c: 635: switch(c = *f++) {
  3949  0011F4  D03F               	goto	i2l293
  3950  0011F6                     
  3951                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3952  0011F6  C014  FFD9         	movff	i2printf@ap,fsr2l
  3953  0011FA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3954  0011FE  CFDE F016          	movff	postinc2,i2printf@cp
  3955  001202  CFDD F017          	movff	postdec2,i2printf@cp+1
  3956  001206  0E02               	movlw	2
  3957  001208  2614               	addwf	i2printf@ap,f,c
  3958  00120A  0E00               	movlw	0
  3959  00120C  2215               	addwfc	i2printf@ap+1,f,c
  3960                           
  3961                           ;doprnt.c: 740: if(!cp)
  3962  00120E  5016               	movf	i2printf@cp,w,c
  3963  001210  1017               	iorwf	i2printf@cp+1,w,c
  3964  001212  A4D8               	btfss	status,2,c
  3965  001214  D01A               	goto	i2l301
  3966                           
  3967                           ;doprnt.c: 741: cp = "(null)";
  3968  001216  0EAC               	movlw	low STR_47
  3969  001218  6E16               	movwf	i2printf@cp,c
  3970  00121A  0EFC               	movlw	high STR_47
  3971  00121C  6E17               	movwf	i2printf@cp+1,c
  3972                           
  3973                           ;doprnt.c: 777: while(*cp)
  3974  00121E  D015               	goto	i2l301
  3975  001220                     
  3976                           ;doprnt.c: 778: (putch(*cp++) );
  3977  001220  C016  FFF6         	movff	i2printf@cp,tblptrl
  3978  001224  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  3979  001228  0E00               	movlw	low (__mediumconst shr (0+16))
  3980  00122A  6EF8               	movwf	tblptru,c
  3981  00122C  0E0F               	movlw	(high __ramtop+-1)
  3982  00122E  64F7               	cpfsgt	tblptrh,c
  3983  001230  D003               	bra	i2u180_47
  3984  001232  0008               	tblrd		*
  3985  001234  50F5               	movf	tablat,w,c
  3986  001236  D005               	bra	i2u180_40
  3987  001238                     i2u180_47:
  3988  001238  CFF6 FFE9          	movff	tblptrl,fsr0l
  3989  00123C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3990  001240  50EF               	movf	indf0,w,c
  3991  001242                     i2u180_40:
  3992  001242  EC49  F00C         	call	i2_putch
  3993  001246  4A16               	infsnz	i2printf@cp,f,c
  3994  001248  2A17               	incf	i2printf@cp+1,f,c
  3995  00124A                     i2l301:
  3996  00124A  C016  FFF6         	movff	i2printf@cp,tblptrl
  3997  00124E  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  3998  001252  0E00               	movlw	low (__mediumconst shr (0+16))
  3999  001254  6EF8               	movwf	tblptru,c
  4000  001256  0E0F               	movlw	(high __ramtop+-1)
  4001  001258  64F7               	cpfsgt	tblptrh,c
  4002  00125A  D003               	bra	i2u181_47
  4003  00125C  0008               	tblrd		*
  4004  00125E  50F5               	movf	tablat,w,c
  4005  001260  D005               	bra	i2u181_40
  4006  001262                     i2u181_47:
  4007  001262  CFF6 FFE9          	movff	tblptrl,fsr0l
  4008  001266  CFF7 FFEA          	movff	tblptrh,fsr0h
  4009  00126A  50EF               	movf	indf0,w,c
  4010  00126C                     i2u181_40:
  4011  00126C  0900               	iorlw	0
  4012  00126E  B4D8               	btfsc	status,2,c
  4013  001270  D07F               	goto	i2u188_40
  4014  001272  D7D6               	goto	i2l302
  4015  001274                     i2l293:
  4016  001274  C00D  FFF6         	movff	i2printf@f,tblptrl
  4017  001278  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4018  00127C  4A0D               	infsnz	i2printf@f,f,c
  4019  00127E  2A0E               	incf	i2printf@f+1,f,c
  4020  001280                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4021  001280  6AF8               	clrf	tblptru,c
  4022  001282                     	endif
  4023  001282                     	if	0	;tblptru may be non-zero
  4024  001282                     	endif
  4025  001282  0008               	tblrd		*
  4026  001284  CFF5 F01A          	movff	tablat,i2printf@c
  4027  001288  501A               	movf	i2printf@c,w,c
  4028                           
  4029                           ; Switch size 1, requested type "space"
  4030                           ; Number of cases is 4, Range of values is 0 to 115
  4031                           ; switch strategies available:
  4032                           ; Name         Instructions Cycles
  4033                           ; simple_byte           13     7 (average)
  4034                           ;	Chosen strategy is simple_byte
  4035  00128A  0A00               	xorlw	0	; case 0
  4036  00128C  B4D8               	btfsc	status,2,c
  4037  00128E  0012               	return	
  4038  001290  0A64               	xorlw	100	; case 100
  4039  001292  B4D8               	btfsc	status,2,c
  4040  001294  D007               	goto	i2l298
  4041  001296  0A0D               	xorlw	13	; case 105
  4042  001298  B4D8               	btfsc	status,2,c
  4043  00129A  D004               	goto	i2l298
  4044  00129C  0A1A               	xorlw	26	; case 115
  4045  00129E  B4D8               	btfsc	status,2,c
  4046  0012A0  D7AA               	goto	i2l299
  4047  0012A2  D066               	goto	i2u188_40
  4048  0012A4                     i2l298:
  4049                           
  4050                           ;doprnt.c: 1253: {
  4051                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4052  0012A4  C014  FFD9         	movff	i2printf@ap,fsr2l
  4053  0012A8  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4054  0012AC  CFDE F018          	movff	postinc2,i2printf@val
  4055  0012B0  CFDD F019          	movff	postdec2,i2printf@val+1
  4056  0012B4  0E02               	movlw	2
  4057  0012B6  2614               	addwf	i2printf@ap,f,c
  4058  0012B8  0E00               	movlw	0
  4059  0012BA  2215               	addwfc	i2printf@ap+1,f,c
  4060                           
  4061                           ;doprnt.c: 1261: if((int)val < 0) {
  4062  0012BC  AE19               	btfss	i2printf@val+1,7,c
  4063  0012BE  D006               	goto	i2l305
  4064                           
  4065                           ;doprnt.c: 1262: flag |= 0x03;
  4066  0012C0  0E03               	movlw	3
  4067  0012C2  1212               	iorwf	i2printf@flag,f,c
  4068                           
  4069                           ;doprnt.c: 1263: val = -val;
  4070  0012C4  6C18               	negf	i2printf@val,c
  4071  0012C6  1E19               	comf	i2printf@val+1,f,c
  4072  0012C8  B0D8               	btfsc	status,0,c
  4073  0012CA  2A19               	incf	i2printf@val+1,f,c
  4074  0012CC                     i2l305:
  4075                           
  4076                           ;doprnt.c: 1264: }
  4077                           ;doprnt.c: 1266: }
  4078                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4079  0012CC  0E01               	movlw	1
  4080  0012CE  6E1A               	movwf	i2printf@c,c
  4081  0012D0                     i2l2424:
  4082  0012D0  0E05               	movlw	5
  4083  0012D2  181A               	xorwf	i2printf@c,w,c
  4084  0012D4  B4D8               	btfsc	status,2,c
  4085  0012D6  D015               	goto	i2u186_40
  4086                           
  4087                           ;doprnt.c: 1306: if(val < dpowers[c])
  4088  0012D8  501A               	movf	i2printf@c,w,c
  4089  0012DA  0D02               	mullw	2
  4090  0012DC  0EDE               	movlw	low _dpowers
  4091  0012DE  24F3               	addwf	prodl,w,c
  4092  0012E0  6EF6               	movwf	tblptrl,c
  4093  0012E2  0EFB               	movlw	high _dpowers
  4094  0012E4  20F4               	addwfc	prodh,w,c
  4095  0012E6  6EF7               	movwf	tblptrh,c
  4096  0012E8                     	if	1	;There are 3 active tblptr bytes
  4097  0012E8  6AF8               	clrf	tblptru,c
  4098  0012EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4099  0012EC  22F8               	addwfc	tblptru,f,c
  4100  0012EE                     	endif
  4101  0012EE  0009               	tblrd		*+
  4102  0012F0  50F5               	movf	tablat,w,c
  4103  0012F2  5C18               	subwf	i2printf@val,w,c
  4104  0012F4  0009               	tblrd		*+
  4105  0012F6  50F5               	movf	tablat,w,c
  4106  0012F8  5819               	subwfb	i2printf@val+1,w,c
  4107  0012FA  A0D8               	btfss	status,0,c
  4108  0012FC  D002               	goto	i2u186_40
  4109                           
  4110                           ;doprnt.c: 1307: break;
  4111  0012FE  2A1A               	incf	i2printf@c,f,c
  4112  001300  D7E7               	goto	i2l2424
  4113  001302                     i2u186_40:
  4114                           
  4115                           ;doprnt.c: 1422: {
  4116                           ;doprnt.c: 1438: if(flag & 0x03)
  4117  001302  C012  F011         	movff	i2printf@flag,??i2_printf
  4118  001306  0E03               	movlw	3
  4119  001308  1611               	andwf	??i2_printf,f,c
  4120  00130A  B4D8               	btfsc	status,2,c
  4121  00130C  D003               	goto	i2l309
  4122                           
  4123                           ;doprnt.c: 1439: (putch('-') );
  4124  00130E  0E2D               	movlw	45
  4125  001310  EC49  F00C         	call	i2_putch
  4126  001314                     i2l309:
  4127                           
  4128                           ;doprnt.c: 1469: }
  4129                           ;doprnt.c: 1472: prec = c;
  4130  001314  C01A  F013         	movff	i2printf@c,i2printf@prec
  4131                           
  4132                           ;doprnt.c: 1474: while(prec--) {
  4133  001318  D027               	goto	i2l310
  4134  00131A                     
  4135                           ;doprnt.c: 1478: {
  4136                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4137  00131A  5013               	movf	i2printf@prec,w,c
  4138  00131C  0D02               	mullw	2
  4139  00131E  0EDE               	movlw	low _dpowers
  4140  001320  24F3               	addwf	prodl,w,c
  4141  001322  6EF6               	movwf	tblptrl,c
  4142  001324  0EFB               	movlw	high _dpowers
  4143  001326  20F4               	addwfc	prodh,w,c
  4144  001328  6EF7               	movwf	tblptrh,c
  4145  00132A                     	if	1	;There are 3 active tblptr bytes
  4146  00132A  6AF8               	clrf	tblptru,c
  4147  00132C  0E00               	movlw	low (__mediumconst shr (0+16))
  4148  00132E  22F8               	addwfc	tblptru,f,c
  4149  001330                     	endif
  4150  001330  0009               	tblrd		*+
  4151  001332  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4152  001336  000A               	tblrd		*-
  4153  001338  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4154  00133C  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4155  001340  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4156  001344  ECE6  F00A         	call	i2___lwdiv	;wreg free
  4157  001348  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4158  00134C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4159  001350  0E00               	movlw	0
  4160  001352  6E0B               	movwf	i2___lwmod@divisor+1,c
  4161  001354  0E0A               	movlw	10
  4162  001356  6E0A               	movwf	i2___lwmod@divisor,c
  4163  001358  ECC5  F00B         	call	i2___lwmod	;wreg free
  4164  00135C  5008               	movf	?i2___lwmod,w,c
  4165  00135E  0F30               	addlw	48
  4166  001360  6E1A               	movwf	i2printf@c,c
  4167                           
  4168                           ;doprnt.c: 1523: }
  4169                           ;doprnt.c: 1524: (putch(c) );
  4170  001362  501A               	movf	i2printf@c,w,c
  4171  001364  EC49  F00C         	call	i2_putch
  4172  001368                     i2l310:
  4173  001368  0613               	decf	i2printf@prec,f,c
  4174  00136A  2813               	incf	i2printf@prec,w,c
  4175  00136C  A4D8               	btfss	status,2,c
  4176  00136E  D7D5               	goto	i2l311
  4177  001370                     i2u188_40:
  4178  001370  C00D  FFF6         	movff	i2printf@f,tblptrl
  4179  001374  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4180  001378  4A0D               	infsnz	i2printf@f,f,c
  4181  00137A  2A0E               	incf	i2printf@f+1,f,c
  4182  00137C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4183  00137C  6AF8               	clrf	tblptru,c
  4184  00137E                     	endif
  4185  00137E                     	if	0	;tblptru may be non-zero
  4186  00137E                     	endif
  4187  00137E  0008               	tblrd		*
  4188  001380  CFF5 F01A          	movff	tablat,i2printf@c
  4189  001384  501A               	movf	i2printf@c,w,c
  4190  001386  B4D8               	btfsc	status,2,c
  4191  001388  0012               	return	
  4192  00138A  D72A               	goto	i2l291
  4193  00138C                     __end_ofi2_printf:
  4194                           	opt stack 0
  4195                           pclatu	equ	0xFFB
  4196                           pclath	equ	0xFFA
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon3	equ	0xFF0
  4205                           indf0	equ	0xFEF
  4206                           postinc0	equ	0xFEE
  4207                           fsr0h	equ	0xFEA
  4208                           fsr0l	equ	0xFE9
  4209                           wreg	equ	0xFE8
  4210                           fsr1h	equ	0xFE2
  4211                           fsr1l	equ	0xFE1
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function i2_putch *****************
  4219 ;; Defined at:
  4220 ;;		line 24 in file "lcd.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  data            1    wreg     unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  data            1    2[COMRAM] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        1 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    1
  4241 ;; This function calls:
  4242 ;;		i2_lcdNibble
  4243 ;; This function is called by:
  4244 ;;		_interruptHandler
  4245 ;;		i2_printf
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text10
  4250  001892                     __ptext10:
  4251                           	opt stack 0
  4252  001892                     i2_putch:
  4253                           	opt stack 25
  4254                           
  4255                           ;incstack = 0
  4256                           ;i2putch@data stored from wreg
  4257  001892  6E03               	movwf	i2putch@data,c
  4258                           
  4259                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4260  001894  848C               	bsf	3980,2,c	;volatile
  4261                           
  4262                           ;lcd.c: 33: lcdNibble(data);
  4263  001896  5003               	movf	i2putch@data,w,c
  4264  001898  EC4B  F00A         	call	i2_lcdNibble
  4265                           
  4266                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4267  00189C  0EC8               	movlw	200
  4268  00189E                     i2u290_47:
  4269  00189E  D000               	nop2	
  4270  0018A0  2EE8               	decfsz	wreg,f,c
  4271  0018A2  D7FD               	bra	i2u290_47
  4272  0018A4  0012               	return		;funcret
  4273  0018A6                     __end_ofi2_putch:
  4274                           	opt stack 0
  4275                           pclatu	equ	0xFFB
  4276                           pclath	equ	0xFFA
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon3	equ	0xFF0
  4285                           indf0	equ	0xFEF
  4286                           postinc0	equ	0xFEE
  4287                           fsr0h	equ	0xFEA
  4288                           fsr0l	equ	0xFE9
  4289                           wreg	equ	0xFE8
  4290                           fsr1h	equ	0xFE2
  4291                           fsr1l	equ	0xFE1
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function i2___lwmod *****************
  4299 ;; Defined at:
  4300 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  dividend        2    7[COMRAM] unsigned int 
  4303 ;;  divisor         2    9[COMRAM] unsigned int 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  2    7[COMRAM] unsigned int 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        5 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		i2_printf
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text11
  4329  00178A                     __ptext11:
  4330                           	opt stack 0
  4331  00178A                     i2___lwmod:
  4332                           	opt stack 25
  4333                           
  4334                           ;incstack = 0
  4335  00178A  500A               	movf	i2___lwmod@divisor,w,c
  4336  00178C  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4337  00178E  B4D8               	btfsc	status,2,c
  4338  001790  D018               	goto	i2l733
  4339  001792  0E01               	movlw	1
  4340  001794  6E0C               	movwf	i2___lwmod@counter,c
  4341  001796  D004               	goto	i2l728
  4342  001798  90D8               	bcf	status,0,c
  4343  00179A  360A               	rlcf	i2___lwmod@divisor,f,c
  4344  00179C  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4345  00179E  2A0C               	incf	i2___lwmod@counter,f,c
  4346  0017A0                     i2l728:
  4347  0017A0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4348  0017A2  D7FA               	goto	i2l729
  4349  0017A4                     i2u132_40:
  4350  0017A4  500A               	movf	i2___lwmod@divisor,w,c
  4351  0017A6  5C08               	subwf	i2___lwmod@dividend,w,c
  4352  0017A8  500B               	movf	i2___lwmod@divisor+1,w,c
  4353  0017AA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4354  0017AC  A0D8               	btfss	status,0,c
  4355  0017AE  D004               	goto	i2l732
  4356  0017B0  500A               	movf	i2___lwmod@divisor,w,c
  4357  0017B2  5E08               	subwf	i2___lwmod@dividend,f,c
  4358  0017B4  500B               	movf	i2___lwmod@divisor+1,w,c
  4359  0017B6  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4360  0017B8                     i2l732:
  4361  0017B8  90D8               	bcf	status,0,c
  4362  0017BA  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4363  0017BC  320A               	rrcf	i2___lwmod@divisor,f,c
  4364  0017BE  2E0C               	decfsz	i2___lwmod@counter,f,c
  4365  0017C0  D7F1               	goto	i2u132_40
  4366  0017C2                     i2l733:
  4367  0017C2  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4368  0017C6  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4369  0017CA  0012               	return		;funcret
  4370  0017CC                     __end_ofi2___lwmod:
  4371                           	opt stack 0
  4372                           pclatu	equ	0xFFB
  4373                           pclath	equ	0xFFA
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon3	equ	0xFF0
  4382                           indf0	equ	0xFEF
  4383                           postinc0	equ	0xFEE
  4384                           fsr0h	equ	0xFEA
  4385                           fsr0l	equ	0xFE9
  4386                           wreg	equ	0xFE8
  4387                           fsr1h	equ	0xFE2
  4388                           fsr1l	equ	0xFE1
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function i2___lwdiv *****************
  4396 ;; Defined at:
  4397 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  dividend        2    0[COMRAM] unsigned int 
  4400 ;;  divisor         2    2[COMRAM] unsigned int 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4403 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  2    0[COMRAM] unsigned int 
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;Total ram usage:        7 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		i2_printf
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text12
  4427  0015CC                     __ptext12:
  4428                           	opt stack 0
  4429  0015CC                     i2___lwdiv:
  4430                           	opt stack 25
  4431                           
  4432                           ;incstack = 0
  4433  0015CC  0E00               	movlw	0
  4434  0015CE  6E06               	movwf	i2___lwdiv@quotient+1,c
  4435  0015D0  0E00               	movlw	0
  4436  0015D2  6E05               	movwf	i2___lwdiv@quotient,c
  4437  0015D4  5003               	movf	i2___lwdiv@divisor,w,c
  4438  0015D6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4439  0015D8  B4D8               	btfsc	status,2,c
  4440  0015DA  D01C               	goto	i2l723
  4441  0015DC  0E01               	movlw	1
  4442  0015DE  6E07               	movwf	i2___lwdiv@counter,c
  4443  0015E0  D004               	goto	i2l718
  4444  0015E2  90D8               	bcf	status,0,c
  4445  0015E4  3603               	rlcf	i2___lwdiv@divisor,f,c
  4446  0015E6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4447  0015E8  2A07               	incf	i2___lwdiv@counter,f,c
  4448  0015EA                     i2l718:
  4449  0015EA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4450  0015EC  D7FA               	goto	i2l719
  4451  0015EE                     i2u129_40:
  4452  0015EE  90D8               	bcf	status,0,c
  4453  0015F0  3605               	rlcf	i2___lwdiv@quotient,f,c
  4454  0015F2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4455  0015F4  5003               	movf	i2___lwdiv@divisor,w,c
  4456  0015F6  5C01               	subwf	i2___lwdiv@dividend,w,c
  4457  0015F8  5004               	movf	i2___lwdiv@divisor+1,w,c
  4458  0015FA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4459  0015FC  A0D8               	btfss	status,0,c
  4460  0015FE  D005               	goto	i2l722
  4461  001600  5003               	movf	i2___lwdiv@divisor,w,c
  4462  001602  5E01               	subwf	i2___lwdiv@dividend,f,c
  4463  001604  5004               	movf	i2___lwdiv@divisor+1,w,c
  4464  001606  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4465  001608  8005               	bsf	i2___lwdiv@quotient,0,c
  4466  00160A                     i2l722:
  4467  00160A  90D8               	bcf	status,0,c
  4468  00160C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4469  00160E  3203               	rrcf	i2___lwdiv@divisor,f,c
  4470  001610  2E07               	decfsz	i2___lwdiv@counter,f,c
  4471  001612  D7ED               	goto	i2u129_40
  4472  001614                     i2l723:
  4473  001614  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4474  001618  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4475  00161C  0012               	return		;funcret
  4476  00161E                     __end_ofi2___lwdiv:
  4477                           	opt stack 0
  4478                           pclatu	equ	0xFFB
  4479                           pclath	equ	0xFFA
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           intcon3	equ	0xFF0
  4488                           indf0	equ	0xFEF
  4489                           postinc0	equ	0xFEE
  4490                           fsr0h	equ	0xFEA
  4491                           fsr0l	equ	0xFE9
  4492                           wreg	equ	0xFE8
  4493                           fsr1h	equ	0xFE2
  4494                           fsr1l	equ	0xFE1
  4495                           postinc2	equ	0xFDE
  4496                           postdec2	equ	0xFDD
  4497                           fsr2h	equ	0xFDA
  4498                           fsr2l	equ	0xFD9
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function i2_initLCD *****************
  4502 ;; Defined at:
  4503 ;;		line 60 in file "lcd.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:        1 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    2
  4524 ;; This function calls:
  4525 ;;		i2_lcdInst
  4526 ;; This function is called by:
  4527 ;;		_interruptHandler
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text13
  4532  00166A                     __ptext13:
  4533                           	opt stack 0
  4534  00166A                     i2_initLCD:
  4535                           	opt stack 24
  4536                           
  4537                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4538                           
  4539                           ;incstack = 0
  4540  00166A  0EC3               	movlw	195
  4541  00166C  6E04               	movwf	??i2_initLCD& (0+255),c
  4542  00166E  0ECD               	movlw	205
  4543  001670                     i2u291_47:
  4544  001670  2EE8               	decfsz	wreg,f,c
  4545  001672  D7FE               	bra	i2u291_47
  4546  001674  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4547  001676  D7FC               	bra	i2u291_47
  4548  001678  F000               	nop	
  4549                           
  4550                           ;lcd.c: 69: lcdInst(0b00110011);
  4551  00167A  0E33               	movlw	51
  4552  00167C  EC53  F00C         	call	i2_lcdInst
  4553                           
  4554                           ;lcd.c: 70: lcdInst(0b00110010);
  4555  001680  0E32               	movlw	50
  4556  001682  EC53  F00C         	call	i2_lcdInst
  4557                           
  4558                           ;lcd.c: 71: lcdInst(0b00101000);
  4559  001686  0E28               	movlw	40
  4560  001688  EC53  F00C         	call	i2_lcdInst
  4561                           
  4562                           ;lcd.c: 72: lcdInst(0b00001111);
  4563  00168C  0E0F               	movlw	15
  4564  00168E  EC53  F00C         	call	i2_lcdInst
  4565                           
  4566                           ;lcd.c: 73: lcdInst(0b00000110);
  4567  001692  0E06               	movlw	6
  4568  001694  EC53  F00C         	call	i2_lcdInst
  4569                           
  4570                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4571  001698  0E01               	movlw	1
  4572  00169A  EC53  F00C         	call	i2_lcdInst
  4573  00169E  0EC3               	movlw	195
  4574  0016A0  6E04               	movwf	??i2_initLCD& (0+255),c
  4575  0016A2  0ECD               	movlw	205
  4576  0016A4                     i2u292_47:
  4577  0016A4  2EE8               	decfsz	wreg,f,c
  4578  0016A6  D7FE               	bra	i2u292_47
  4579  0016A8  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4580  0016AA  D7FC               	bra	i2u292_47
  4581  0016AC  F000               	nop	
  4582                           
  4583                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4584  0016AE  0E0F               	movlw	15
  4585  0016B0  EC53  F00C         	call	i2_lcdInst
  4586  0016B4  0012               	return		;funcret
  4587  0016B6                     __end_ofi2_initLCD:
  4588                           	opt stack 0
  4589                           pclatu	equ	0xFFB
  4590                           pclath	equ	0xFFA
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           intcon3	equ	0xFF0
  4599                           indf0	equ	0xFEF
  4600                           postinc0	equ	0xFEE
  4601                           fsr0h	equ	0xFEA
  4602                           fsr0l	equ	0xFE9
  4603                           wreg	equ	0xFE8
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function i2_lcdInst *****************
  4613 ;; Defined at:
  4614 ;;		line 11 in file "lcd.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  data            1    wreg     unsigned char 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  data            1    2[COMRAM] unsigned char 
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      void 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2, status,0, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;Total ram usage:        1 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    1
  4635 ;; This function calls:
  4636 ;;		i2_lcdNibble
  4637 ;; This function is called by:
  4638 ;;		_interruptHandler
  4639 ;;		i2_initLCD
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text14
  4644  0018A6                     __ptext14:
  4645                           	opt stack 0
  4646  0018A6                     i2_lcdInst:
  4647                           	opt stack 25
  4648                           
  4649                           ;incstack = 0
  4650                           ;i2lcdInst@data stored from wreg
  4651  0018A6  6E03               	movwf	i2lcdInst@data,c
  4652                           
  4653                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4654  0018A8  948C               	bcf	3980,2,c	;volatile
  4655                           
  4656                           ;lcd.c: 20: lcdNibble(data);
  4657  0018AA  5003               	movf	i2lcdInst@data,w,c
  4658  0018AC  EC4B  F00A         	call	i2_lcdNibble
  4659                           
  4660                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4661  0018B0  0EC8               	movlw	200
  4662  0018B2                     i2u293_47:
  4663  0018B2  D000               	nop2	
  4664  0018B4  2EE8               	decfsz	wreg,f,c
  4665  0018B6  D7FD               	bra	i2u293_47
  4666  0018B8  0012               	return		;funcret
  4667  0018BA                     __end_ofi2_lcdInst:
  4668                           	opt stack 0
  4669                           pclatu	equ	0xFFB
  4670                           pclath	equ	0xFFA
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           intcon	equ	0xFF2
  4678                           intcon3	equ	0xFF0
  4679                           indf0	equ	0xFEF
  4680                           postinc0	equ	0xFEE
  4681                           fsr0h	equ	0xFEA
  4682                           fsr0l	equ	0xFE9
  4683                           wreg	equ	0xFE8
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           postinc2	equ	0xFDE
  4687                           postdec2	equ	0xFDD
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function i2_lcdNibble *****************
  4693 ;; Defined at:
  4694 ;;		line 37 in file "lcd.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  data            1    wreg     unsigned char 
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;  data            1    1[COMRAM] unsigned char 
  4699 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2, status,0
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;Total ram usage:        2 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; This function calls:
  4716 ;;		Nothing
  4717 ;; This function is called by:
  4718 ;;		i2_lcdInst
  4719 ;;		i2_putch
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text15
  4724  001496                     __ptext15:
  4725                           	opt stack 0
  4726  001496                     i2_lcdNibble:
  4727                           	opt stack 25
  4728                           
  4729                           ;incstack = 0
  4730                           ;i2lcdNibble@data stored from wreg
  4731  001496  6E02               	movwf	i2lcdNibble@data,c
  4732                           
  4733                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4734  001498  5002               	movf	i2lcdNibble@data,w,c
  4735  00149A  0BF0               	andlw	240
  4736  00149C  6E01               	movwf	i2lcdNibble@temp,c
  4737                           
  4738                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4739  00149E  508C               	movf	3980,w,c	;volatile
  4740  0014A0  0B0F               	andlw	15
  4741  0014A2  6E8C               	movwf	3980,c	;volatile
  4742                           
  4743                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4744  0014A4  5001               	movf	i2lcdNibble@temp,w,c
  4745  0014A6  108C               	iorwf	3980,w,c	;volatile
  4746  0014A8  6E8C               	movwf	3980,c	;volatile
  4747                           
  4748                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4749  0014AA  0E00               	movlw	0
  4750  0014AC  BEF2               	btfsc	intcon,7,c	;volatile
  4751  0014AE  0E01               	movlw	1
  4752  0014B0  6E47               	movwf	lcd@LCDinterruptState,c
  4753  0014B2  9EF2               	bcf	intcon,7,c	;volatile
  4754  0014B4  868C               	bsf	3980,3,c	;volatile
  4755  0014B6  0E53               	movlw	83
  4756  0014B8                     i2u294_47:
  4757  0014B8  2EE8               	decfsz	wreg,f,c
  4758  0014BA  D7FE               	bra	i2u294_47
  4759  0014BC  F000               	nop	
  4760  0014BE  968C               	bcf	3980,3,c	;volatile
  4761  0014C0  0EC8               	movlw	200
  4762  0014C2                     i2u295_47:
  4763  0014C2  D000               	nop2	
  4764  0014C4  2EE8               	decfsz	wreg,f,c
  4765  0014C6  D7FD               	bra	i2u295_47
  4766  0014C8  B047               	btfsc	lcd@LCDinterruptState,0,c
  4767  0014CA  D002               	bra	i2u118_45
  4768  0014CC  9EF2               	bcf	intcon,7,c	;volatile
  4769  0014CE  D001               	bra	i2u118_46
  4770  0014D0                     i2u118_45:
  4771  0014D0  8EF2               	bsf	intcon,7,c	;volatile
  4772  0014D2                     i2u118_46:
  4773                           
  4774                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4775  0014D2  3802               	swapf	i2lcdNibble@data,w,c
  4776  0014D4  0BF0               	andlw	240
  4777  0014D6  6E02               	movwf	i2lcdNibble@data,c
  4778                           
  4779                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4780  0014D8  5002               	movf	i2lcdNibble@data,w,c
  4781  0014DA  0BF0               	andlw	240
  4782  0014DC  6E01               	movwf	i2lcdNibble@temp,c
  4783                           
  4784                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4785  0014DE  508C               	movf	3980,w,c	;volatile
  4786  0014E0  0B0F               	andlw	15
  4787  0014E2  6E8C               	movwf	3980,c	;volatile
  4788                           
  4789                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4790  0014E4  5001               	movf	i2lcdNibble@temp,w,c
  4791  0014E6  108C               	iorwf	3980,w,c	;volatile
  4792  0014E8  6E8C               	movwf	3980,c	;volatile
  4793                           
  4794                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4795  0014EA  0E00               	movlw	0
  4796  0014EC  BEF2               	btfsc	intcon,7,c	;volatile
  4797  0014EE  0E01               	movlw	1
  4798  0014F0  6E47               	movwf	lcd@LCDinterruptState,c
  4799  0014F2  9EF2               	bcf	intcon,7,c	;volatile
  4800  0014F4  868C               	bsf	3980,3,c	;volatile
  4801  0014F6  0E53               	movlw	83
  4802  0014F8                     i2u296_47:
  4803  0014F8  2EE8               	decfsz	wreg,f,c
  4804  0014FA  D7FE               	bra	i2u296_47
  4805  0014FC  F000               	nop	
  4806  0014FE  968C               	bcf	3980,3,c	;volatile
  4807  001500  0EC8               	movlw	200
  4808  001502                     i2u297_47:
  4809  001502  D000               	nop2	
  4810  001504  2EE8               	decfsz	wreg,f,c
  4811  001506  D7FD               	bra	i2u297_47
  4812  001508  B047               	btfsc	lcd@LCDinterruptState,0,c
  4813  00150A  D002               	bra	i2u119_45
  4814  00150C  9EF2               	bcf	intcon,7,c	;volatile
  4815  00150E  D001               	bra	i2u119_46
  4816  001510                     i2u119_45:
  4817  001510  8EF2               	bsf	intcon,7,c	;volatile
  4818  001512                     i2u119_46:
  4819  001512  0012               	return		;funcret
  4820  001514                     __end_ofi2_lcdNibble:
  4821                           	opt stack 0
  4822                           pclatu	equ	0xFFB
  4823                           pclath	equ	0xFFA
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           intcon3	equ	0xFF0
  4832                           indf0	equ	0xFEF
  4833                           postinc0	equ	0xFEE
  4834                           fsr0h	equ	0xFEA
  4835                           fsr0l	equ	0xFE9
  4836                           wreg	equ	0xFE8
  4837                           fsr1h	equ	0xFE2
  4838                           fsr1l	equ	0xFE1
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function _strncmp *****************
  4846 ;; Defined at:
  4847 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  4850 ;;		 -> current_set(4), 
  4851 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  4852 ;;		 -> strs(80), 
  4853 ;;  len             2    4[COMRAM] unsigned int 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  2    0[COMRAM] int 
  4858 ;; Registers used:
  4859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4865 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;Total ram usage:        9 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_interruptHandler
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text16
  4879  00138C                     __ptext16:
  4880                           	opt stack 0
  4881  00138C                     _strncmp:
  4882                           	opt stack 26
  4883                           
  4884                           ;incstack = 0
  4885  00138C  D035               	goto	i2l885
  4886  00138E                     i2l2194:
  4887  00138E  C001  FFD9         	movff	strncmp@s1,fsr2l
  4888  001392  C002  FFDA         	movff	strncmp@s1+1,fsr2h
  4889  001396  50DF               	movf	indf2,w,c
  4890  001398  B4D8               	btfsc	status,2,c
  4891  00139A  D010               	goto	i2u151_40
  4892  00139C  C001  FFD9         	movff	strncmp@s1,fsr2l
  4893  0013A0  C002  FFDA         	movff	strncmp@s1+1,fsr2h
  4894  0013A4  50DF               	movf	indf2,w,c
  4895  0013A6  6E07               	movwf	??_strncmp& (0+255),c
  4896  0013A8  C003  FFF6         	movff	strncmp@s2,tblptrl
  4897  0013AC  C004  FFF7         	movff	strncmp@s2+1,tblptrh
  4898  0013B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4899  0013B0  6AF8               	clrf	tblptru,c
  4900  0013B2                     	endif
  4901  0013B2                     	if	0	;tblptru may be non-zero
  4902  0013B2                     	endif
  4903  0013B2  0008               	tblrd		*
  4904  0013B4  50F5               	movf	tablat,w,c
  4905  0013B6  1807               	xorwf	??_strncmp,w,c
  4906  0013B8  B4D8               	btfsc	status,2,c
  4907  0013BA  D01A               	goto	i2l887
  4908  0013BC                     i2u151_40:
  4909  0013BC  C003  FFF6         	movff	strncmp@s2,tblptrl
  4910  0013C0  C004  FFF7         	movff	strncmp@s2+1,tblptrh
  4911  0013C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4912  0013C4  6AF8               	clrf	tblptru,c
  4913  0013C6                     	endif
  4914  0013C6                     	if	0	;tblptru may be non-zero
  4915  0013C6                     	endif
  4916  0013C6  0008               	tblrd		*
  4917  0013C8  50F5               	movf	tablat,w,c
  4918  0013CA  6E07               	movwf	??_strncmp& (0+255),c
  4919  0013CC  6A08               	clrf	(??_strncmp+1)& (0+255),c
  4920  0013CE  1E07               	comf	??_strncmp,f,c
  4921  0013D0  1E08               	comf	??_strncmp+1,f,c
  4922  0013D2  4A07               	infsnz	??_strncmp,f,c
  4923  0013D4  2A08               	incf	??_strncmp+1,f,c
  4924  0013D6  C001  FFD9         	movff	strncmp@s1,fsr2l
  4925  0013DA  C002  FFDA         	movff	strncmp@s1+1,fsr2h
  4926  0013DE  50DF               	movf	indf2,w,c
  4927  0013E0  6E09               	movwf	(??_strncmp+2)& (0+255),c
  4928  0013E2  5009               	movf	??_strncmp+2,w,c
  4929  0013E4  2407               	addwf	??_strncmp,w,c
  4930  0013E6  6E01               	movwf	?_strncmp,c
  4931  0013E8  0E00               	movlw	0
  4932  0013EA  2008               	addwfc	??_strncmp+1,w,c
  4933  0013EC  6E02               	movwf	?_strncmp+1,c
  4934  0013EE  0012               	return	
  4935  0013F0                     i2l887:
  4936  0013F0  4A01               	infsnz	strncmp@s1,f,c
  4937  0013F2  2A02               	incf	strncmp@s1+1,f,c
  4938  0013F4  4A03               	infsnz	strncmp@s2,f,c
  4939  0013F6  2A04               	incf	strncmp@s2+1,f,c
  4940  0013F8                     i2l885:
  4941  0013F8  0605               	decf	strncmp@len,f,c
  4942  0013FA  A0D8               	btfss	status,0,c
  4943  0013FC  0606               	decf	strncmp@len+1,f,c
  4944  0013FE  2805               	incf	strncmp@len,w,c
  4945  001400  E1C6               	bnz	i2l2194
  4946  001402  2806               	incf	strncmp@len+1,w,c
  4947  001404  A4D8               	btfss	status,2,c
  4948  001406  D7C3               	goto	i2l886
  4949  001408  0E00               	movlw	0
  4950  00140A  6E02               	movwf	?_strncmp+1,c
  4951  00140C  0E00               	movlw	0
  4952  00140E  6E01               	movwf	?_strncmp,c
  4953  001410  0012               	return	
  4954  001412                     __end_of_strncmp:
  4955                           	opt stack 0
  4956                           pclatu	equ	0xFFB
  4957                           pclath	equ	0xFFA
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           intcon	equ	0xFF2
  4965                           intcon3	equ	0xFF0
  4966                           indf0	equ	0xFEF
  4967                           postinc0	equ	0xFEE
  4968                           fsr0h	equ	0xFEA
  4969                           fsr0l	equ	0xFE9
  4970                           wreg	equ	0xFE8
  4971                           fsr1h	equ	0xFE2
  4972                           fsr1l	equ	0xFE1
  4973                           indf2	equ	0xFDF
  4974                           postinc2	equ	0xFDE
  4975                           postdec2	equ	0xFDD
  4976                           fsr2h	equ	0xFDA
  4977                           fsr2l	equ	0xFD9
  4978                           status	equ	0xFD8
  4979                           
  4980 ;; *************** function _strcpy *****************
  4981 ;; Defined at:
  4982 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  to              2    0[COMRAM] PTR unsigned char 
  4985 ;;		 -> current_set2(4), temp_set(4), final_set(32), current_set(4), 
  4986 ;;  from            2    2[COMRAM] PTR const unsigned char 
  4987 ;;		 -> STR_23(1), STR_21(1), STR_16(1), STR_15(1), 
  4988 ;;		 -> STR_14(1), STR_13(2), STR_12(2), STR_11(2), 
  4989 ;;		 -> STR_10(2), current_set(4), 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  cp              2    4[COMRAM] PTR unsigned char 
  4992 ;;		 -> current_set2(4), temp_set(4), final_set(32), current_set(4), 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  2    0[COMRAM] PTR unsigned char 
  4995 ;; Registers used:
  4996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;Total ram usage:        6 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_interruptHandler
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           	psect	text17
  5016  001700                     __ptext17:
  5017                           	opt stack 0
  5018  001700                     _strcpy:
  5019                           	opt stack 26
  5020                           
  5021                           ;incstack = 0
  5022  001700  C001  F005         	movff	strcpy@to,strcpy@cp
  5023  001704  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5024  001708  D004               	goto	i2l879
  5025  00170A  4A05               	infsnz	strcpy@cp,f,c
  5026  00170C  2A06               	incf	strcpy@cp+1,f,c
  5027  00170E  4A03               	infsnz	strcpy@from,f,c
  5028  001710  2A04               	incf	strcpy@from+1,f,c
  5029  001712                     i2l879:
  5030  001712  C003  FFF6         	movff	strcpy@from,tblptrl
  5031  001716  C004  FFF7         	movff	strcpy@from+1,tblptrh
  5032  00171A  0E00               	movlw	low (__mediumconst shr (0+16))
  5033  00171C  6EF8               	movwf	tblptru,c
  5034  00171E  C005  FFD9         	movff	strcpy@cp,fsr2l
  5035  001722  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  5036  001726  0E0F               	movlw	(high __ramtop+-1)
  5037  001728  64F7               	cpfsgt	tblptrh,c
  5038  00172A  D003               	bra	i2u146_47
  5039  00172C  0008               	tblrd		*
  5040  00172E  50F5               	movf	tablat,w,c
  5041  001730  D005               	bra	i2u146_40
  5042  001732                     i2u146_47:
  5043  001732  CFF6 FFE9          	movff	tblptrl,fsr0l
  5044  001736  CFF7 FFEA          	movff	tblptrh,fsr0h
  5045  00173A  50EF               	movf	indf0,w,c
  5046  00173C                     i2u146_40:
  5047  00173C  6EDF               	movwf	indf2,c
  5048  00173E  50DF               	movf	indf2,w,c
  5049  001740  B4D8               	btfsc	status,2,c
  5050  001742  0012               	return	
  5051  001744  D7E2               	goto	i2l880
  5052  001746                     __end_of_strcpy:
  5053                           	opt stack 0
  5054                           pclatu	equ	0xFFB
  5055                           pclath	equ	0xFFA
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           intcon3	equ	0xFF0
  5064                           indf0	equ	0xFEF
  5065                           postinc0	equ	0xFEE
  5066                           fsr0h	equ	0xFEA
  5067                           fsr0l	equ	0xFE9
  5068                           wreg	equ	0xFE8
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _strcat *****************
  5079 ;; Defined at:
  5080 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  to              2    0[COMRAM] PTR unsigned char 
  5083 ;;		 -> current_set(4), 
  5084 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5085 ;;		 -> temp_set(4), 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5088 ;;		 -> current_set(4), 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  2    0[COMRAM] PTR unsigned char 
  5091 ;; Registers used:
  5092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;Total ram usage:        6 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		_interruptHandler
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text18
  5112  0017CC                     __ptext18:
  5113                           	opt stack 0
  5114  0017CC                     _strcat:
  5115                           	opt stack 26
  5116                           
  5117                           ;incstack = 0
  5118  0017CC  C001  F005         	movff	strcat@to,strcat@cp
  5119  0017D0  C002  F006         	movff	strcat@to+1,strcat@cp+1
  5120  0017D4  D002               	goto	i2l862
  5121  0017D6  4A05               	infsnz	strcat@cp,f,c
  5122  0017D8  2A06               	incf	strcat@cp+1,f,c
  5123  0017DA                     i2l862:
  5124  0017DA  C005  FFD9         	movff	strcat@cp,fsr2l
  5125  0017DE  C006  FFDA         	movff	strcat@cp+1,fsr2h
  5126  0017E2  50DF               	movf	indf2,w,c
  5127  0017E4  B4D8               	btfsc	status,2,c
  5128  0017E6  D005               	goto	i2l865
  5129  0017E8  D7F6               	goto	i2l863
  5130  0017EA  4A05               	infsnz	strcat@cp,f,c
  5131  0017EC  2A06               	incf	strcat@cp+1,f,c
  5132  0017EE  4A03               	infsnz	strcat@from,f,c
  5133  0017F0  2A04               	incf	strcat@from+1,f,c
  5134  0017F2                     i2l865:
  5135  0017F2  C003  FFD9         	movff	strcat@from,fsr2l
  5136  0017F6  C004  FFDA         	movff	strcat@from+1,fsr2h
  5137  0017FA  C005  FFE1         	movff	strcat@cp,fsr1l
  5138  0017FE  C006  FFE2         	movff	strcat@cp+1,fsr1h
  5139  001802  CFDF FFE7          	movff	indf2,indf1
  5140  001806  50E7               	movf	indf1,w,c
  5141  001808  B4D8               	btfsc	status,2,c
  5142  00180A  0012               	return	
  5143  00180C  D7EE               	goto	i2l866
  5144  00180E                     __end_of_strcat:
  5145                           	opt stack 0
  5146                           pclatu	equ	0xFFB
  5147                           pclath	equ	0xFFA
  5148                           tblptru	equ	0xFF8
  5149                           tblptrh	equ	0xFF7
  5150                           tblptrl	equ	0xFF6
  5151                           tablat	equ	0xFF5
  5152                           prodh	equ	0xFF4
  5153                           prodl	equ	0xFF3
  5154                           intcon	equ	0xFF2
  5155                           intcon3	equ	0xFF0
  5156                           indf0	equ	0xFEF
  5157                           postinc0	equ	0xFEE
  5158                           fsr0h	equ	0xFEA
  5159                           fsr0l	equ	0xFE9
  5160                           wreg	equ	0xFE8
  5161                           indf1	equ	0xFE7
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _is_valid *****************
  5172 ;; Defined at:
  5173 ;;		line 478 in file "main.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  2   50[None  ] int 
  5180 ;; Registers used:
  5181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        2 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    1
  5194 ;; This function calls:
  5195 ;;		___wmul
  5196 ;;		_strcmp
  5197 ;; This function is called by:
  5198 ;;		_interruptHandler
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text19
  5203  00083C                     __ptext19:
  5204                           	opt stack 0
  5205  00083C                     _is_valid:
  5206                           	opt stack 25
  5207                           
  5208                           ;main.c: 479: if (strcmp(current_set2,"B")==0){
  5209                           
  5210                           ;incstack = 0
  5211  00083C  0E4E               	movlw	low _current_set2
  5212  00083E  6E01               	movwf	strcmp@s1,c
  5213  000840  0E00               	movlw	high _current_set2
  5214  000842  6E02               	movwf	strcmp@s1+1,c
  5215  000844  0EFC               	movlw	low STR_10
  5216  000846  6E03               	movwf	strcmp@s2,c
  5217  000848  0EFC               	movlw	high STR_10
  5218  00084A  6E04               	movwf	strcmp@s2+1,c
  5219  00084C  EC5B  F00B         	call	_strcmp	;wreg free
  5220  000850  5001               	movf	?_strcmp,w,c
  5221  000852  1002               	iorwf	?_strcmp+1,w,c
  5222  000854  A4D8               	btfss	status,2,c
  5223  000856  D009               	goto	i2l179
  5224                           
  5225                           ;main.c: 480: B=1*number;
  5226  000858  C052  F039         	movff	_number,_B
  5227  00085C  C053  F03A         	movff	_number+1,_B+1
  5228                           
  5229                           ;main.c: 481: total_number = 1*number;
  5230  000860  C052  F03D         	movff	_number,_total_number
  5231  000864  C053  F03E         	movff	_number+1,_total_number+1
  5232                           
  5233                           ;main.c: 483: }
  5234  000868  0012               	return	
  5235  00086A                     i2l179:
  5236                           
  5237                           ;main.c: 485: else if (strcmp(current_set2,"N")==0){
  5238  00086A  0E4E               	movlw	low _current_set2
  5239  00086C  6E01               	movwf	strcmp@s1,c
  5240  00086E  0E00               	movlw	high _current_set2
  5241  000870  6E02               	movwf	strcmp@s1+1,c
  5242  000872  0EEB               	movlw	low (STR_34+2)
  5243  000874  6E03               	movwf	strcmp@s2,c
  5244  000876  0EFC               	movlw	high (STR_34+2)
  5245  000878  6E04               	movwf	strcmp@s2+1,c
  5246  00087A  EC5B  F00B         	call	_strcmp	;wreg free
  5247  00087E  5001               	movf	?_strcmp,w,c
  5248  000880  1002               	iorwf	?_strcmp+1,w,c
  5249  000882  A4D8               	btfss	status,2,c
  5250  000884  D009               	goto	i2l181
  5251                           
  5252                           ;main.c: 486: N=1*number;
  5253  000886  C052  F037         	movff	_number,_N
  5254  00088A  C053  F038         	movff	_number+1,_N+1
  5255                           
  5256                           ;main.c: 487: total_number = 1*number;
  5257  00088E  C052  F03D         	movff	_number,_total_number
  5258  000892  C053  F03E         	movff	_number+1,_total_number+1
  5259                           
  5260                           ;main.c: 489: }
  5261  000896  0012               	return	
  5262  000898                     i2l181:
  5263                           
  5264                           ;main.c: 490: else if (strcmp(current_set2,"S")==0){
  5265  000898  0E4E               	movlw	low _current_set2
  5266  00089A  6E01               	movwf	strcmp@s1,c
  5267  00089C  0E00               	movlw	high _current_set2
  5268  00089E  6E02               	movwf	strcmp@s1+1,c
  5269  0008A0  0EEF               	movlw	low (STR_35+2)
  5270  0008A2  6E03               	movwf	strcmp@s2,c
  5271  0008A4  0EFC               	movlw	high (STR_35+2)
  5272  0008A6  6E04               	movwf	strcmp@s2+1,c
  5273  0008A8  EC5B  F00B         	call	_strcmp	;wreg free
  5274  0008AC  5001               	movf	?_strcmp,w,c
  5275  0008AE  1002               	iorwf	?_strcmp+1,w,c
  5276  0008B0  A4D8               	btfss	status,2,c
  5277  0008B2  D009               	goto	i2l183
  5278                           
  5279                           ;main.c: 491: S=1*number;
  5280  0008B4  C052  F035         	movff	_number,_S
  5281  0008B8  C053  F036         	movff	_number+1,_S+1
  5282                           
  5283                           ;main.c: 492: total_number = 1*number;
  5284  0008BC  C052  F03D         	movff	_number,_total_number
  5285  0008C0  C053  F03E         	movff	_number+1,_total_number+1
  5286                           
  5287                           ;main.c: 494: }
  5288  0008C4  0012               	return	
  5289  0008C6                     i2l183:
  5290                           
  5291                           ;main.c: 495: else if (strcmp(current_set2,"W")==0){
  5292  0008C6  0E4E               	movlw	low _current_set2
  5293  0008C8  6E01               	movwf	strcmp@s1,c
  5294  0008CA  0E00               	movlw	high _current_set2
  5295  0008CC  6E02               	movwf	strcmp@s1+1,c
  5296  0008CE  0EF3               	movlw	low (STR_36+2)
  5297  0008D0  6E03               	movwf	strcmp@s2,c
  5298  0008D2  0EFC               	movlw	high (STR_36+2)
  5299  0008D4  6E04               	movwf	strcmp@s2+1,c
  5300  0008D6  EC5B  F00B         	call	_strcmp	;wreg free
  5301  0008DA  5001               	movf	?_strcmp,w,c
  5302  0008DC  1002               	iorwf	?_strcmp+1,w,c
  5303  0008DE  A4D8               	btfss	status,2,c
  5304  0008E0  D009               	goto	i2l185
  5305                           
  5306                           ;main.c: 496: W=1*number;
  5307  0008E2  C052  F033         	movff	_number,_W
  5308  0008E6  C053  F034         	movff	_number+1,_W+1
  5309                           
  5310                           ;main.c: 497: total_number = 1*number;
  5311  0008EA  C052  F03D         	movff	_number,_total_number
  5312  0008EE  C053  F03E         	movff	_number+1,_total_number+1
  5313                           
  5314                           ;main.c: 499: }
  5315  0008F2  0012               	return	
  5316  0008F4                     i2l185:
  5317                           
  5318                           ;main.c: 500: else if (strcmp(current_set2,"BN")==0){
  5319  0008F4  0E4E               	movlw	low _current_set2
  5320  0008F6  6E01               	movwf	strcmp@s1,c
  5321  0008F8  0E00               	movlw	high _current_set2
  5322  0008FA  6E02               	movwf	strcmp@s1+1,c
  5323  0008FC  0EEA               	movlw	low (STR_34+1)
  5324  0008FE  6E03               	movwf	strcmp@s2,c
  5325  000900  0EFC               	movlw	high (STR_34+1)
  5326  000902  6E04               	movwf	strcmp@s2+1,c
  5327  000904  EC5B  F00B         	call	_strcmp	;wreg free
  5328  000908  5001               	movf	?_strcmp,w,c
  5329  00090A  1002               	iorwf	?_strcmp+1,w,c
  5330  00090C  A4D8               	btfss	status,2,c
  5331  00090E  D00E               	goto	i2l187
  5332                           
  5333                           ;main.c: 501: B = 1*number;
  5334  000910  C052  F039         	movff	_number,_B
  5335  000914  C053  F03A         	movff	_number+1,_B+1
  5336                           
  5337                           ;main.c: 503: N = 1*number;
  5338  000918  C052  F037         	movff	_number,_N
  5339  00091C  C053  F038         	movff	_number+1,_N+1
  5340                           
  5341                           ;main.c: 504: total_number = 2*number;
  5342  000920  90D8               	bcf	status,0,c
  5343  000922  3452               	rlcf	_number,w,c
  5344  000924  6E3D               	movwf	_total_number,c
  5345  000926  3453               	rlcf	_number+1,w,c
  5346  000928  6E3E               	movwf	_total_number+1,c
  5347                           
  5348                           ;main.c: 505: }
  5349  00092A  0012               	return	
  5350  00092C                     i2l187:
  5351                           
  5352                           ;main.c: 506: else if (strcmp(current_set2,"BS")==0){
  5353  00092C  0E4E               	movlw	low _current_set2
  5354  00092E  6E01               	movwf	strcmp@s1,c
  5355  000930  0E00               	movlw	high _current_set2
  5356  000932  6E02               	movwf	strcmp@s1+1,c
  5357  000934  0EEE               	movlw	low (STR_35+1)
  5358  000936  6E03               	movwf	strcmp@s2,c
  5359  000938  0EFC               	movlw	high (STR_35+1)
  5360  00093A  6E04               	movwf	strcmp@s2+1,c
  5361  00093C  EC5B  F00B         	call	_strcmp	;wreg free
  5362  000940  5001               	movf	?_strcmp,w,c
  5363  000942  1002               	iorwf	?_strcmp+1,w,c
  5364  000944  A4D8               	btfss	status,2,c
  5365  000946  D00E               	goto	i2l189
  5366                           
  5367                           ;main.c: 507: B = 1*number;
  5368  000948  C052  F039         	movff	_number,_B
  5369  00094C  C053  F03A         	movff	_number+1,_B+1
  5370                           
  5371                           ;main.c: 509: S = 1*number;
  5372  000950  C052  F035         	movff	_number,_S
  5373  000954  C053  F036         	movff	_number+1,_S+1
  5374                           
  5375                           ;main.c: 510: total_number = 2*number;
  5376  000958  90D8               	bcf	status,0,c
  5377  00095A  3452               	rlcf	_number,w,c
  5378  00095C  6E3D               	movwf	_total_number,c
  5379  00095E  3453               	rlcf	_number+1,w,c
  5380  000960  6E3E               	movwf	_total_number+1,c
  5381                           
  5382                           ;main.c: 511: }
  5383  000962  0012               	return	
  5384  000964                     i2l189:
  5385                           
  5386                           ;main.c: 513: else if (strcmp(current_set2,"BW")==0){
  5387  000964  0E4E               	movlw	low _current_set2
  5388  000966  6E01               	movwf	strcmp@s1,c
  5389  000968  0E00               	movlw	high _current_set2
  5390  00096A  6E02               	movwf	strcmp@s1+1,c
  5391  00096C  0EF2               	movlw	low (STR_36+1)
  5392  00096E  6E03               	movwf	strcmp@s2,c
  5393  000970  0EFC               	movlw	high (STR_36+1)
  5394  000972  6E04               	movwf	strcmp@s2+1,c
  5395  000974  EC5B  F00B         	call	_strcmp	;wreg free
  5396  000978  5001               	movf	?_strcmp,w,c
  5397  00097A  1002               	iorwf	?_strcmp+1,w,c
  5398  00097C  A4D8               	btfss	status,2,c
  5399  00097E  D00E               	goto	i2l191
  5400                           
  5401                           ;main.c: 514: B = 1*number;
  5402  000980  C052  F039         	movff	_number,_B
  5403  000984  C053  F03A         	movff	_number+1,_B+1
  5404                           
  5405                           ;main.c: 516: W = 1*number;
  5406  000988  C052  F033         	movff	_number,_W
  5407  00098C  C053  F034         	movff	_number+1,_W+1
  5408                           
  5409                           ;main.c: 517: total_number = 2*number;
  5410  000990  90D8               	bcf	status,0,c
  5411  000992  3452               	rlcf	_number,w,c
  5412  000994  6E3D               	movwf	_total_number,c
  5413  000996  3453               	rlcf	_number+1,w,c
  5414  000998  6E3E               	movwf	_total_number+1,c
  5415                           
  5416                           ;main.c: 518: }
  5417  00099A  0012               	return	
  5418  00099C                     i2l191:
  5419                           
  5420                           ;main.c: 519: else if (strcmp(current_set2,"BBN")==0){
  5421  00099C  0E4E               	movlw	low _current_set2
  5422  00099E  6E01               	movwf	strcmp@s1,c
  5423  0009A0  0E00               	movlw	high _current_set2
  5424  0009A2  6E02               	movwf	strcmp@s1+1,c
  5425  0009A4  0EE9               	movlw	low STR_34
  5426  0009A6  6E03               	movwf	strcmp@s2,c
  5427  0009A8  0EFC               	movlw	high STR_34
  5428  0009AA  6E04               	movwf	strcmp@s2+1,c
  5429  0009AC  EC5B  F00B         	call	_strcmp	;wreg free
  5430  0009B0  5001               	movf	?_strcmp,w,c
  5431  0009B2  1002               	iorwf	?_strcmp+1,w,c
  5432  0009B4  A4D8               	btfss	status,2,c
  5433  0009B6  D018               	goto	i2l193
  5434                           
  5435                           ;main.c: 520: B = 2*number;
  5436  0009B8  90D8               	bcf	status,0,c
  5437  0009BA  3452               	rlcf	_number,w,c
  5438  0009BC  6E39               	movwf	_B,c
  5439  0009BE  3453               	rlcf	_number+1,w,c
  5440  0009C0  6E3A               	movwf	_B+1,c
  5441                           
  5442                           ;main.c: 522: N = 1*number;
  5443  0009C2  C052  F037         	movff	_number,_N
  5444  0009C6  C053  F038         	movff	_number+1,_N+1
  5445                           
  5446                           ;main.c: 523: total_number = 3*number;
  5447  0009CA  C052  F001         	movff	_number,___wmul@multiplier
  5448  0009CE  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5449  0009D2  0E00               	movlw	0
  5450  0009D4  6E04               	movwf	___wmul@multiplicand+1,c
  5451  0009D6  0E03               	movlw	3
  5452  0009D8  6E03               	movwf	___wmul@multiplicand,c
  5453  0009DA  EC1E  F00C         	call	___wmul	;wreg free
  5454  0009DE  C001  F03D         	movff	?___wmul,_total_number
  5455  0009E2  C002  F03E         	movff	?___wmul+1,_total_number+1
  5456                           
  5457                           ;main.c: 524: }
  5458  0009E6  0012               	return	
  5459  0009E8                     i2l193:
  5460                           
  5461                           ;main.c: 525: else if (strcmp(current_set2,"BBS")==0){
  5462  0009E8  0E4E               	movlw	low _current_set2
  5463  0009EA  6E01               	movwf	strcmp@s1,c
  5464  0009EC  0E00               	movlw	high _current_set2
  5465  0009EE  6E02               	movwf	strcmp@s1+1,c
  5466  0009F0  0EED               	movlw	low STR_35
  5467  0009F2  6E03               	movwf	strcmp@s2,c
  5468  0009F4  0EFC               	movlw	high STR_35
  5469  0009F6  6E04               	movwf	strcmp@s2+1,c
  5470  0009F8  EC5B  F00B         	call	_strcmp	;wreg free
  5471  0009FC  5001               	movf	?_strcmp,w,c
  5472  0009FE  1002               	iorwf	?_strcmp+1,w,c
  5473  000A00  A4D8               	btfss	status,2,c
  5474  000A02  D018               	goto	i2l195
  5475                           
  5476                           ;main.c: 526: B = 2*number;
  5477  000A04  90D8               	bcf	status,0,c
  5478  000A06  3452               	rlcf	_number,w,c
  5479  000A08  6E39               	movwf	_B,c
  5480  000A0A  3453               	rlcf	_number+1,w,c
  5481  000A0C  6E3A               	movwf	_B+1,c
  5482                           
  5483                           ;main.c: 528: S = 1*number;
  5484  000A0E  C052  F035         	movff	_number,_S
  5485  000A12  C053  F036         	movff	_number+1,_S+1
  5486                           
  5487                           ;main.c: 529: total_number = 3*number;
  5488  000A16  C052  F001         	movff	_number,___wmul@multiplier
  5489  000A1A  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5490  000A1E  0E00               	movlw	0
  5491  000A20  6E04               	movwf	___wmul@multiplicand+1,c
  5492  000A22  0E03               	movlw	3
  5493  000A24  6E03               	movwf	___wmul@multiplicand,c
  5494  000A26  EC1E  F00C         	call	___wmul	;wreg free
  5495  000A2A  C001  F03D         	movff	?___wmul,_total_number
  5496  000A2E  C002  F03E         	movff	?___wmul+1,_total_number+1
  5497                           
  5498                           ;main.c: 530: }
  5499  000A32  0012               	return	
  5500  000A34                     i2l195:
  5501                           
  5502                           ;main.c: 531: else if (strcmp(current_set2,"BBW")==0){
  5503  000A34  0E4E               	movlw	low _current_set2
  5504  000A36  6E01               	movwf	strcmp@s1,c
  5505  000A38  0E00               	movlw	high _current_set2
  5506  000A3A  6E02               	movwf	strcmp@s1+1,c
  5507  000A3C  0EF1               	movlw	low STR_36
  5508  000A3E  6E03               	movwf	strcmp@s2,c
  5509  000A40  0EFC               	movlw	high STR_36
  5510  000A42  6E04               	movwf	strcmp@s2+1,c
  5511  000A44  EC5B  F00B         	call	_strcmp	;wreg free
  5512  000A48  5001               	movf	?_strcmp,w,c
  5513  000A4A  1002               	iorwf	?_strcmp+1,w,c
  5514  000A4C  A4D8               	btfss	status,2,c
  5515  000A4E  D018               	goto	i2l197
  5516                           
  5517                           ;main.c: 532: B = 2*number;
  5518  000A50  90D8               	bcf	status,0,c
  5519  000A52  3452               	rlcf	_number,w,c
  5520  000A54  6E39               	movwf	_B,c
  5521  000A56  3453               	rlcf	_number+1,w,c
  5522  000A58  6E3A               	movwf	_B+1,c
  5523                           
  5524                           ;main.c: 534: W = 1*number;
  5525  000A5A  C052  F033         	movff	_number,_W
  5526  000A5E  C053  F034         	movff	_number+1,_W+1
  5527                           
  5528                           ;main.c: 535: total_number = 3*number;
  5529  000A62  C052  F001         	movff	_number,___wmul@multiplier
  5530  000A66  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5531  000A6A  0E00               	movlw	0
  5532  000A6C  6E04               	movwf	___wmul@multiplicand+1,c
  5533  000A6E  0E03               	movlw	3
  5534  000A70  6E03               	movwf	___wmul@multiplicand,c
  5535  000A72  EC1E  F00C         	call	___wmul	;wreg free
  5536  000A76  C001  F03D         	movff	?___wmul,_total_number
  5537  000A7A  C002  F03E         	movff	?___wmul+1,_total_number+1
  5538                           
  5539                           ;main.c: 536: }
  5540  000A7E  0012               	return	
  5541  000A80                     i2l197:
  5542                           
  5543                           ;main.c: 537: else if (strcmp(current_set2,"BNW")==0){
  5544  000A80  0E4E               	movlw	low _current_set2
  5545  000A82  6E01               	movwf	strcmp@s1,c
  5546  000A84  0E00               	movlw	high _current_set2
  5547  000A86  6E02               	movwf	strcmp@s1+1,c
  5548  000A88  0ECC               	movlw	low (STR_43+1)
  5549  000A8A  6E03               	movwf	strcmp@s2,c
  5550  000A8C  0EFC               	movlw	high (STR_43+1)
  5551  000A8E  6E04               	movwf	strcmp@s2+1,c
  5552  000A90  EC5B  F00B         	call	_strcmp	;wreg free
  5553  000A94  5001               	movf	?_strcmp,w,c
  5554  000A96  1002               	iorwf	?_strcmp+1,w,c
  5555  000A98  A4D8               	btfss	status,2,c
  5556  000A9A  D01B               	goto	i2l199
  5557                           
  5558                           ;main.c: 538: B = 1*number;
  5559  000A9C  C052  F039         	movff	_number,_B
  5560  000AA0  C053  F03A         	movff	_number+1,_B+1
  5561                           
  5562                           ;main.c: 539: W = 1*number;
  5563  000AA4  C052  F033         	movff	_number,_W
  5564  000AA8  C053  F034         	movff	_number+1,_W+1
  5565                           
  5566                           ;main.c: 540: N = 1*number;
  5567  000AAC  C052  F037         	movff	_number,_N
  5568  000AB0  C053  F038         	movff	_number+1,_N+1
  5569                           
  5570                           ;main.c: 541: total_number = 3*number;
  5571  000AB4  C052  F001         	movff	_number,___wmul@multiplier
  5572  000AB8  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5573  000ABC  0E00               	movlw	0
  5574  000ABE  6E04               	movwf	___wmul@multiplicand+1,c
  5575  000AC0  0E03               	movlw	3
  5576  000AC2  6E03               	movwf	___wmul@multiplicand,c
  5577  000AC4  EC1E  F00C         	call	___wmul	;wreg free
  5578  000AC8  C001  F03D         	movff	?___wmul,_total_number
  5579  000ACC  C002  F03E         	movff	?___wmul+1,_total_number+1
  5580                           
  5581                           ;main.c: 542: }
  5582  000AD0  0012               	return	
  5583  000AD2                     i2l199:
  5584                           
  5585                           ;main.c: 543: else if (strcmp(current_set2,"BSW")==0){
  5586  000AD2  0E4E               	movlw	low _current_set2
  5587  000AD4  6E01               	movwf	strcmp@s1,c
  5588  000AD6  0E00               	movlw	high _current_set2
  5589  000AD8  6E02               	movwf	strcmp@s1+1,c
  5590  000ADA  0ED6               	movlw	low (STR_42+1)
  5591  000ADC  6E03               	movwf	strcmp@s2,c
  5592  000ADE  0EFC               	movlw	high (STR_42+1)
  5593  000AE0  6E04               	movwf	strcmp@s2+1,c
  5594  000AE2  EC5B  F00B         	call	_strcmp	;wreg free
  5595  000AE6  5001               	movf	?_strcmp,w,c
  5596  000AE8  1002               	iorwf	?_strcmp+1,w,c
  5597  000AEA  A4D8               	btfss	status,2,c
  5598  000AEC  D01B               	goto	i2l201
  5599                           
  5600                           ;main.c: 544: B = 1*number;
  5601  000AEE  C052  F039         	movff	_number,_B
  5602  000AF2  C053  F03A         	movff	_number+1,_B+1
  5603                           
  5604                           ;main.c: 545: S = 1*number;
  5605  000AF6  C052  F035         	movff	_number,_S
  5606  000AFA  C053  F036         	movff	_number+1,_S+1
  5607                           
  5608                           ;main.c: 546: N = 1*number;
  5609  000AFE  C052  F037         	movff	_number,_N
  5610  000B02  C053  F038         	movff	_number+1,_N+1
  5611                           
  5612                           ;main.c: 547: total_number = 3*number;
  5613  000B06  C052  F001         	movff	_number,___wmul@multiplier
  5614  000B0A  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5615  000B0E  0E00               	movlw	0
  5616  000B10  6E04               	movwf	___wmul@multiplicand+1,c
  5617  000B12  0E03               	movlw	3
  5618  000B14  6E03               	movwf	___wmul@multiplicand,c
  5619  000B16  EC1E  F00C         	call	___wmul	;wreg free
  5620  000B1A  C001  F03D         	movff	?___wmul,_total_number
  5621  000B1E  C002  F03E         	movff	?___wmul+1,_total_number+1
  5622                           
  5623                           ;main.c: 548: }
  5624  000B22  0012               	return	
  5625  000B24                     i2l201:
  5626                           
  5627                           ;main.c: 549: else if (strcmp(current_set2,"BWW")==0){
  5628  000B24  0E4E               	movlw	low _current_set2
  5629  000B26  6E01               	movwf	strcmp@s1,c
  5630  000B28  0E00               	movlw	high _current_set2
  5631  000B2A  6E02               	movwf	strcmp@s1+1,c
  5632  000B2C  0EF5               	movlw	low STR_39
  5633  000B2E  6E03               	movwf	strcmp@s2,c
  5634  000B30  0EFC               	movlw	high STR_39
  5635  000B32  6E04               	movwf	strcmp@s2+1,c
  5636  000B34  EC5B  F00B         	call	_strcmp	;wreg free
  5637  000B38  5001               	movf	?_strcmp,w,c
  5638  000B3A  1002               	iorwf	?_strcmp+1,w,c
  5639  000B3C  A4D8               	btfss	status,2,c
  5640  000B3E  D018               	goto	i2l203
  5641                           
  5642                           ;main.c: 550: B = 1*number;
  5643  000B40  C052  F039         	movff	_number,_B
  5644  000B44  C053  F03A         	movff	_number+1,_B+1
  5645                           
  5646                           ;main.c: 551: W = 2*number;
  5647  000B48  90D8               	bcf	status,0,c
  5648  000B4A  3452               	rlcf	_number,w,c
  5649  000B4C  6E33               	movwf	_W,c
  5650  000B4E  3453               	rlcf	_number+1,w,c
  5651  000B50  6E34               	movwf	_W+1,c
  5652                           
  5653                           ;main.c: 552: total_number = 3*number;
  5654  000B52  C052  F001         	movff	_number,___wmul@multiplier
  5655  000B56  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5656  000B5A  0E00               	movlw	0
  5657  000B5C  6E04               	movwf	___wmul@multiplicand+1,c
  5658  000B5E  0E03               	movlw	3
  5659  000B60  6E03               	movwf	___wmul@multiplicand,c
  5660  000B62  EC1E  F00C         	call	___wmul	;wreg free
  5661  000B66  C001  F03D         	movff	?___wmul,_total_number
  5662  000B6A  C002  F03E         	movff	?___wmul+1,_total_number+1
  5663                           
  5664                           ;main.c: 553: }
  5665  000B6E  0012               	return	
  5666  000B70                     i2l203:
  5667                           
  5668                           ;main.c: 554: else if (strcmp(current_set2,"BNWW")==0){
  5669  000B70  0E4E               	movlw	low _current_set2
  5670  000B72  6E01               	movwf	strcmp@s1,c
  5671  000B74  0E00               	movlw	high _current_set2
  5672  000B76  6E02               	movwf	strcmp@s1+1,c
  5673  000B78  0EDA               	movlw	low STR_40
  5674  000B7A  6E03               	movwf	strcmp@s2,c
  5675  000B7C  0EFC               	movlw	high STR_40
  5676  000B7E  6E04               	movwf	strcmp@s2+1,c
  5677  000B80  EC5B  F00B         	call	_strcmp	;wreg free
  5678  000B84  5001               	movf	?_strcmp,w,c
  5679  000B86  1002               	iorwf	?_strcmp+1,w,c
  5680  000B88  A4D8               	btfss	status,2,c
  5681  000B8A  D01C               	goto	i2l205
  5682                           
  5683                           ;main.c: 555: B = 1*number;
  5684  000B8C  C052  F039         	movff	_number,_B
  5685  000B90  C053  F03A         	movff	_number+1,_B+1
  5686                           
  5687                           ;main.c: 556: N = 1*number;
  5688  000B94  C052  F037         	movff	_number,_N
  5689  000B98  C053  F038         	movff	_number+1,_N+1
  5690                           
  5691                           ;main.c: 557: W = 2*number;
  5692  000B9C  90D8               	bcf	status,0,c
  5693  000B9E  3452               	rlcf	_number,w,c
  5694  000BA0  6E33               	movwf	_W,c
  5695  000BA2  3453               	rlcf	_number+1,w,c
  5696  000BA4  6E34               	movwf	_W+1,c
  5697                           
  5698                           ;main.c: 558: total_number = 4*number;
  5699  000BA6  C052  F007         	movff	_number,??_is_valid
  5700  000BAA  C053  F008         	movff	_number+1,??_is_valid+1
  5701  000BAE  90D8               	bcf	status,0,c
  5702  000BB0  3607               	rlcf	??_is_valid,f,c
  5703  000BB2  3608               	rlcf	??_is_valid+1,f,c
  5704  000BB4  90D8               	bcf	status,0,c
  5705  000BB6  3607               	rlcf	??_is_valid,f,c
  5706  000BB8  3608               	rlcf	??_is_valid+1,f,c
  5707  000BBA  C007  F03D         	movff	??_is_valid,_total_number
  5708  000BBE  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5709                           
  5710                           ;main.c: 559: }
  5711  000BC2  0012               	return	
  5712  000BC4                     i2l205:
  5713                           
  5714                           ;main.c: 560: else if (strcmp(current_set2,"BSWW")==0){
  5715  000BC4  0E4E               	movlw	low _current_set2
  5716  000BC6  6E01               	movwf	strcmp@s1,c
  5717  000BC8  0E00               	movlw	high _current_set2
  5718  000BCA  6E02               	movwf	strcmp@s1+1,c
  5719  000BCC  0EDF               	movlw	low STR_41
  5720  000BCE  6E03               	movwf	strcmp@s2,c
  5721  000BD0  0EFC               	movlw	high STR_41
  5722  000BD2  6E04               	movwf	strcmp@s2+1,c
  5723  000BD4  EC5B  F00B         	call	_strcmp	;wreg free
  5724  000BD8  5001               	movf	?_strcmp,w,c
  5725  000BDA  1002               	iorwf	?_strcmp+1,w,c
  5726  000BDC  A4D8               	btfss	status,2,c
  5727  000BDE  D01C               	goto	i2l207
  5728                           
  5729                           ;main.c: 561: B = 1*number;
  5730  000BE0  C052  F039         	movff	_number,_B
  5731  000BE4  C053  F03A         	movff	_number+1,_B+1
  5732                           
  5733                           ;main.c: 562: S = 1*number;
  5734  000BE8  C052  F035         	movff	_number,_S
  5735  000BEC  C053  F036         	movff	_number+1,_S+1
  5736                           
  5737                           ;main.c: 563: W = 2*number;
  5738  000BF0  90D8               	bcf	status,0,c
  5739  000BF2  3452               	rlcf	_number,w,c
  5740  000BF4  6E33               	movwf	_W,c
  5741  000BF6  3453               	rlcf	_number+1,w,c
  5742  000BF8  6E34               	movwf	_W+1,c
  5743                           
  5744                           ;main.c: 564: total_number = 4*number;
  5745  000BFA  C052  F007         	movff	_number,??_is_valid
  5746  000BFE  C053  F008         	movff	_number+1,??_is_valid+1
  5747  000C02  90D8               	bcf	status,0,c
  5748  000C04  3607               	rlcf	??_is_valid,f,c
  5749  000C06  3608               	rlcf	??_is_valid+1,f,c
  5750  000C08  90D8               	bcf	status,0,c
  5751  000C0A  3607               	rlcf	??_is_valid,f,c
  5752  000C0C  3608               	rlcf	??_is_valid+1,f,c
  5753  000C0E  C007  F03D         	movff	??_is_valid,_total_number
  5754  000C12  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5755                           
  5756                           ;main.c: 566: }
  5757  000C16  0012               	return	
  5758  000C18                     i2l207:
  5759                           
  5760                           ;main.c: 567: else if (strcmp(current_set2,"BBSW")==0){
  5761  000C18  0E4E               	movlw	low _current_set2
  5762  000C1A  6E01               	movwf	strcmp@s1,c
  5763  000C1C  0E00               	movlw	high _current_set2
  5764  000C1E  6E02               	movwf	strcmp@s1+1,c
  5765  000C20  0ED5               	movlw	low STR_42
  5766  000C22  6E03               	movwf	strcmp@s2,c
  5767  000C24  0EFC               	movlw	high STR_42
  5768  000C26  6E04               	movwf	strcmp@s2+1,c
  5769  000C28  EC5B  F00B         	call	_strcmp	;wreg free
  5770  000C2C  5001               	movf	?_strcmp,w,c
  5771  000C2E  1002               	iorwf	?_strcmp+1,w,c
  5772  000C30  A4D8               	btfss	status,2,c
  5773  000C32  D01C               	goto	i2l209
  5774                           
  5775                           ;main.c: 568: B = 2*number;
  5776  000C34  90D8               	bcf	status,0,c
  5777  000C36  3452               	rlcf	_number,w,c
  5778  000C38  6E39               	movwf	_B,c
  5779  000C3A  3453               	rlcf	_number+1,w,c
  5780  000C3C  6E3A               	movwf	_B+1,c
  5781                           
  5782                           ;main.c: 569: S = 1*number;
  5783  000C3E  C052  F035         	movff	_number,_S
  5784  000C42  C053  F036         	movff	_number+1,_S+1
  5785                           
  5786                           ;main.c: 570: W = number;
  5787  000C46  C052  F033         	movff	_number,_W
  5788  000C4A  C053  F034         	movff	_number+1,_W+1
  5789                           
  5790                           ;main.c: 571: total_number = 4*number;
  5791  000C4E  C052  F007         	movff	_number,??_is_valid
  5792  000C52  C053  F008         	movff	_number+1,??_is_valid+1
  5793  000C56  90D8               	bcf	status,0,c
  5794  000C58  3607               	rlcf	??_is_valid,f,c
  5795  000C5A  3608               	rlcf	??_is_valid+1,f,c
  5796  000C5C  90D8               	bcf	status,0,c
  5797  000C5E  3607               	rlcf	??_is_valid,f,c
  5798  000C60  3608               	rlcf	??_is_valid+1,f,c
  5799  000C62  C007  F03D         	movff	??_is_valid,_total_number
  5800  000C66  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5801                           
  5802                           ;main.c: 572: }
  5803  000C6A  0012               	return	
  5804  000C6C                     i2l209:
  5805                           
  5806                           ;main.c: 573: else if (strcmp(current_set2,"BBNW")==0){
  5807  000C6C  0E4E               	movlw	low _current_set2
  5808  000C6E  6E01               	movwf	strcmp@s1,c
  5809  000C70  0E00               	movlw	high _current_set2
  5810  000C72  6E02               	movwf	strcmp@s1+1,c
  5811  000C74  0ECB               	movlw	low STR_43
  5812  000C76  6E03               	movwf	strcmp@s2,c
  5813  000C78  0EFC               	movlw	high STR_43
  5814  000C7A  6E04               	movwf	strcmp@s2+1,c
  5815  000C7C  EC5B  F00B         	call	_strcmp	;wreg free
  5816  000C80  5001               	movf	?_strcmp,w,c
  5817  000C82  1002               	iorwf	?_strcmp+1,w,c
  5818  000C84  A4D8               	btfss	status,2,c
  5819  000C86  D01C               	goto	i2l211
  5820                           
  5821                           ;main.c: 574: B = 2*number;
  5822  000C88  90D8               	bcf	status,0,c
  5823  000C8A  3452               	rlcf	_number,w,c
  5824  000C8C  6E39               	movwf	_B,c
  5825  000C8E  3453               	rlcf	_number+1,w,c
  5826  000C90  6E3A               	movwf	_B+1,c
  5827                           
  5828                           ;main.c: 575: N = 1*number;
  5829  000C92  C052  F037         	movff	_number,_N
  5830  000C96  C053  F038         	movff	_number+1,_N+1
  5831                           
  5832                           ;main.c: 576: W = 1*number;
  5833  000C9A  C052  F033         	movff	_number,_W
  5834  000C9E  C053  F034         	movff	_number+1,_W+1
  5835                           
  5836                           ;main.c: 577: total_number = 4*number;
  5837  000CA2  C052  F007         	movff	_number,??_is_valid
  5838  000CA6  C053  F008         	movff	_number+1,??_is_valid+1
  5839  000CAA  90D8               	bcf	status,0,c
  5840  000CAC  3607               	rlcf	??_is_valid,f,c
  5841  000CAE  3608               	rlcf	??_is_valid+1,f,c
  5842  000CB0  90D8               	bcf	status,0,c
  5843  000CB2  3607               	rlcf	??_is_valid,f,c
  5844  000CB4  3608               	rlcf	??_is_valid+1,f,c
  5845  000CB6  C007  F03D         	movff	??_is_valid,_total_number
  5846  000CBA  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5847                           
  5848                           ;main.c: 578: }
  5849  000CBE  0012               	return	
  5850  000CC0                     i2l211:
  5851                           
  5852                           ;main.c: 579: else if (strcmp(current_set2,"BNNW")==0){
  5853  000CC0  0E4E               	movlw	low _current_set2
  5854  000CC2  6E01               	movwf	strcmp@s1,c
  5855  000CC4  0E00               	movlw	high _current_set2
  5856  000CC6  6E02               	movwf	strcmp@s1+1,c
  5857  000CC8  0ED0               	movlw	low STR_44
  5858  000CCA  6E03               	movwf	strcmp@s2,c
  5859  000CCC  0EFC               	movlw	high STR_44
  5860  000CCE  6E04               	movwf	strcmp@s2+1,c
  5861  000CD0  EC5B  F00B         	call	_strcmp	;wreg free
  5862  000CD4  5001               	movf	?_strcmp,w,c
  5863  000CD6  1002               	iorwf	?_strcmp+1,w,c
  5864  000CD8  A4D8               	btfss	status,2,c
  5865  000CDA  D01C               	goto	i2l213
  5866                           
  5867                           ;main.c: 580: B = 1*number;
  5868  000CDC  C052  F039         	movff	_number,_B
  5869  000CE0  C053  F03A         	movff	_number+1,_B+1
  5870                           
  5871                           ;main.c: 581: N = 2*number;
  5872  000CE4  90D8               	bcf	status,0,c
  5873  000CE6  3452               	rlcf	_number,w,c
  5874  000CE8  6E37               	movwf	_N,c
  5875  000CEA  3453               	rlcf	_number+1,w,c
  5876  000CEC  6E38               	movwf	_N+1,c
  5877                           
  5878                           ;main.c: 582: W = 1*number;
  5879  000CEE  C052  F033         	movff	_number,_W
  5880  000CF2  C053  F034         	movff	_number+1,_W+1
  5881                           
  5882                           ;main.c: 583: total_number = 4*number;
  5883  000CF6  C052  F007         	movff	_number,??_is_valid
  5884  000CFA  C053  F008         	movff	_number+1,??_is_valid+1
  5885  000CFE  90D8               	bcf	status,0,c
  5886  000D00  3607               	rlcf	??_is_valid,f,c
  5887  000D02  3608               	rlcf	??_is_valid+1,f,c
  5888  000D04  90D8               	bcf	status,0,c
  5889  000D06  3607               	rlcf	??_is_valid,f,c
  5890  000D08  3608               	rlcf	??_is_valid+1,f,c
  5891  000D0A  C007  F03D         	movff	??_is_valid,_total_number
  5892  000D0E  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5893                           
  5894                           ;main.c: 584: }
  5895  000D12  0012               	return	
  5896  000D14                     i2l213:
  5897                           
  5898                           ;main.c: 585: else if (strcmp(current_set2,"BNNN")==0){
  5899  000D14  0E4E               	movlw	low _current_set2
  5900  000D16  6E01               	movwf	strcmp@s1,c
  5901  000D18  0E00               	movlw	high _current_set2
  5902  000D1A  6E02               	movwf	strcmp@s1+1,c
  5903  000D1C  0EC6               	movlw	low STR_45
  5904  000D1E  6E03               	movwf	strcmp@s2,c
  5905  000D20  0EFC               	movlw	high STR_45
  5906  000D22  6E04               	movwf	strcmp@s2+1,c
  5907  000D24  EC5B  F00B         	call	_strcmp	;wreg free
  5908  000D28  5001               	movf	?_strcmp,w,c
  5909  000D2A  1002               	iorwf	?_strcmp+1,w,c
  5910  000D2C  A4D8               	btfss	status,2,c
  5911  000D2E  D021               	goto	i2l215
  5912                           
  5913                           ;main.c: 586: B = 1*number;
  5914  000D30  C052  F039         	movff	_number,_B
  5915  000D34  C053  F03A         	movff	_number+1,_B+1
  5916                           
  5917                           ;main.c: 587: N = 3*number;
  5918  000D38  C052  F001         	movff	_number,___wmul@multiplier
  5919  000D3C  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5920  000D40  0E00               	movlw	0
  5921  000D42  6E04               	movwf	___wmul@multiplicand+1,c
  5922  000D44  0E03               	movlw	3
  5923  000D46  6E03               	movwf	___wmul@multiplicand,c
  5924  000D48  EC1E  F00C         	call	___wmul	;wreg free
  5925  000D4C  C001  F037         	movff	?___wmul,_N
  5926  000D50  C002  F038         	movff	?___wmul+1,_N+1
  5927                           
  5928                           ;main.c: 588: total_number = 4*number;
  5929  000D54  C052  F007         	movff	_number,??_is_valid
  5930  000D58  C053  F008         	movff	_number+1,??_is_valid+1
  5931  000D5C  90D8               	bcf	status,0,c
  5932  000D5E  3607               	rlcf	??_is_valid,f,c
  5933  000D60  3608               	rlcf	??_is_valid+1,f,c
  5934  000D62  90D8               	bcf	status,0,c
  5935  000D64  3607               	rlcf	??_is_valid,f,c
  5936  000D66  3608               	rlcf	??_is_valid+1,f,c
  5937  000D68  C007  F03D         	movff	??_is_valid,_total_number
  5938  000D6C  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5939                           
  5940                           ;main.c: 589: }
  5941  000D70  0012               	return	
  5942  000D72                     i2l215:
  5943                           
  5944                           ;main.c: 590: else if (strcmp(current_set2,"BWWW")==0){
  5945  000D72  0E4E               	movlw	low _current_set2
  5946  000D74  6E01               	movwf	strcmp@s1,c
  5947  000D76  0E00               	movlw	high _current_set2
  5948  000D78  6E02               	movwf	strcmp@s1+1,c
  5949  000D7A  0EE4               	movlw	low STR_46
  5950  000D7C  6E03               	movwf	strcmp@s2,c
  5951  000D7E  0EFC               	movlw	high STR_46
  5952  000D80  6E04               	movwf	strcmp@s2+1,c
  5953  000D82  EC5B  F00B         	call	_strcmp	;wreg free
  5954  000D86  5001               	movf	?_strcmp,w,c
  5955  000D88  1002               	iorwf	?_strcmp+1,w,c
  5956  000D8A  A4D8               	btfss	status,2,c
  5957  000D8C  0012               	return	
  5958                           
  5959                           ;main.c: 591: B = 1*number;
  5960  000D8E  C052  F039         	movff	_number,_B
  5961  000D92  C053  F03A         	movff	_number+1,_B+1
  5962                           
  5963                           ;main.c: 592: W = 3*number;
  5964  000D96  C052  F001         	movff	_number,___wmul@multiplier
  5965  000D9A  C053  F002         	movff	_number+1,___wmul@multiplier+1
  5966  000D9E  0E00               	movlw	0
  5967  000DA0  6E04               	movwf	___wmul@multiplicand+1,c
  5968  000DA2  0E03               	movlw	3
  5969  000DA4  6E03               	movwf	___wmul@multiplicand,c
  5970  000DA6  EC1E  F00C         	call	___wmul	;wreg free
  5971  000DAA  C001  F033         	movff	?___wmul,_W
  5972  000DAE  C002  F034         	movff	?___wmul+1,_W+1
  5973                           
  5974                           ;main.c: 593: total_number = 4*number;
  5975  000DB2  C052  F007         	movff	_number,??_is_valid
  5976  000DB6  C053  F008         	movff	_number+1,??_is_valid+1
  5977  000DBA  90D8               	bcf	status,0,c
  5978  000DBC  3607               	rlcf	??_is_valid,f,c
  5979  000DBE  3608               	rlcf	??_is_valid+1,f,c
  5980  000DC0  90D8               	bcf	status,0,c
  5981  000DC2  3607               	rlcf	??_is_valid,f,c
  5982  000DC4  3608               	rlcf	??_is_valid+1,f,c
  5983  000DC6  C007  F03D         	movff	??_is_valid,_total_number
  5984  000DCA  C008  F03E         	movff	??_is_valid+1,_total_number+1
  5985  000DCE  0012               	return	
  5986  000DD0                     __end_of_is_valid:
  5987                           	opt stack 0
  5988                           pclatu	equ	0xFFB
  5989                           pclath	equ	0xFFA
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           intcon3	equ	0xFF0
  5998                           indf0	equ	0xFEF
  5999                           postinc0	equ	0xFEE
  6000                           fsr0h	equ	0xFEA
  6001                           fsr0l	equ	0xFE9
  6002                           wreg	equ	0xFE8
  6003                           indf1	equ	0xFE7
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _strcmp *****************
  6014 ;; Defined at:
  6015 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  6018 ;;		 -> current_set2(4), 
  6019 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  6020 ;;		 -> STR_46(5), STR_45(5), STR_44(5), STR_43(5), 
  6021 ;;		 -> STR_42(5), STR_41(5), STR_40(5), STR_39(4), 
  6022 ;;		 -> STR_38(4), STR_37(4), STR_36(4), STR_35(4), 
  6023 ;;		 -> STR_34(4), STR_33(3), STR_32(3), STR_31(3), 
  6024 ;;		 -> STR_30(2), STR_29(2), STR_28(2), STR_27(2), 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  r               1    5[COMRAM] char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  2    0[COMRAM] int 
  6029 ;; Registers used:
  6030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;Total ram usage:        6 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_is_valid
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text20
  6050  0016B6                     __ptext20:
  6051                           	opt stack 0
  6052  0016B6                     _strcmp:
  6053                           	opt stack 25
  6054                           
  6055                           ;incstack = 0
  6056  0016B6  D004               	goto	i2l871
  6057  0016B8  4A01               	infsnz	strcmp@s1,f,c
  6058  0016BA  2A02               	incf	strcmp@s1+1,f,c
  6059  0016BC  4A03               	infsnz	strcmp@s2,f,c
  6060  0016BE  2A04               	incf	strcmp@s2+1,f,c
  6061  0016C0                     i2l871:
  6062  0016C0  C001  FFD9         	movff	strcmp@s1,fsr2l
  6063  0016C4  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6064  0016C8  50DF               	movf	indf2,w,c
  6065  0016CA  6E05               	movwf	??_strcmp& (0+255),c
  6066  0016CC  C003  FFF6         	movff	strcmp@s2,tblptrl
  6067  0016D0  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  6068  0016D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6069  0016D4  6AF8               	clrf	tblptru,c
  6070  0016D6                     	endif
  6071  0016D6                     	if	0	;tblptru may be non-zero
  6072  0016D6                     	endif
  6073  0016D6  0008               	tblrd		*
  6074  0016D8  50F5               	movf	tablat,w,c
  6075  0016DA  0800               	sublw	0
  6076  0016DC  2405               	addwf	??_strcmp,w,c
  6077  0016DE  6E06               	movwf	strcmp@r,c
  6078  0016E0  5006               	movf	strcmp@r,w,c
  6079  0016E2  A4D8               	btfss	status,2,c
  6080  0016E4  D007               	goto	i2u121_40
  6081  0016E6  C001  FFD9         	movff	strcmp@s1,fsr2l
  6082  0016EA  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6083  0016EE  50DF               	movf	indf2,w,c
  6084  0016F0  A4D8               	btfss	status,2,c
  6085  0016F2  D7E2               	goto	i2l872
  6086  0016F4                     i2u121_40:
  6087  0016F4  5006               	movf	strcmp@r,w,c
  6088  0016F6  6E01               	movwf	?_strcmp,c
  6089  0016F8  6A02               	clrf	?_strcmp+1,c
  6090  0016FA  BE01               	btfsc	?_strcmp,7,c
  6091  0016FC  0602               	decf	?_strcmp+1,f,c
  6092  0016FE  0012               	return	
  6093  001700                     __end_of_strcmp:
  6094                           	opt stack 0
  6095                           pclatu	equ	0xFFB
  6096                           pclath	equ	0xFFA
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodh	equ	0xFF4
  6102                           prodl	equ	0xFF3
  6103                           intcon	equ	0xFF2
  6104                           intcon3	equ	0xFF0
  6105                           indf0	equ	0xFEF
  6106                           postinc0	equ	0xFEE
  6107                           fsr0h	equ	0xFEA
  6108                           fsr0l	equ	0xFE9
  6109                           wreg	equ	0xFE8
  6110                           indf1	equ	0xFE7
  6111                           fsr1h	equ	0xFE2
  6112                           fsr1l	equ	0xFE1
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function ___wmul *****************
  6121 ;; Defined at:
  6122 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  multiplier      2    0[COMRAM] unsigned int 
  6125 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  product         2    4[COMRAM] unsigned int 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  2    0[COMRAM] unsigned int 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0, prodl, prodh
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;Total ram usage:        6 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_is_valid
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text21
  6151  00183C                     __ptext21:
  6152                           	opt stack 0
  6153  00183C                     ___wmul:
  6154                           	opt stack 25
  6155                           
  6156                           ;incstack = 0
  6157  00183C  5001               	movf	___wmul@multiplier,w,c
  6158  00183E  0203               	mulwf	___wmul@multiplicand,c
  6159  001840  CFF3 F005          	movff	prodl,___wmul@product
  6160  001844  CFF4 F006          	movff	prodh,___wmul@product+1
  6161  001848  5001               	movf	___wmul@multiplier,w,c
  6162  00184A  0204               	mulwf	___wmul@multiplicand+1,c
  6163  00184C  50F3               	movf	prodl,w,c
  6164  00184E  2606               	addwf	___wmul@product+1,f,c
  6165  001850  5002               	movf	___wmul@multiplier+1,w,c
  6166  001852  0203               	mulwf	___wmul@multiplicand,c
  6167  001854  50F3               	movf	prodl,w,c
  6168  001856  2606               	addwf	___wmul@product+1,f,c
  6169  001858  C005  F001         	movff	___wmul@product,?___wmul
  6170  00185C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6171  001860  0012               	return	
  6172  001862                     __end_of___wmul:
  6173                           	opt stack 0
  6174                           pclatu	equ	0xFFB
  6175                           pclath	equ	0xFFA
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon3	equ	0xFF0
  6184                           indf0	equ	0xFEF
  6185                           postinc0	equ	0xFEE
  6186                           fsr0h	equ	0xFEA
  6187                           fsr0l	equ	0xFE9
  6188                           wreg	equ	0xFE8
  6189                           indf1	equ	0xFE7
  6190                           fsr1h	equ	0xFE2
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _check *****************
  6200 ;; Defined at:
  6201 ;;		line 609 in file "main.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  2    0[COMRAM] int 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;Total ram usage:        2 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; This function calls:
  6222 ;;		Nothing
  6223 ;; This function is called by:
  6224 ;;		_interruptHandler
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text22
  6229  001514                     __ptext22:
  6230                           	opt stack 0
  6231  001514                     _check:
  6232                           	opt stack 26
  6233                           
  6234                           ;main.c: 610: if (B>2||N>3||S>2||W>4||total_number >4){
  6235                           
  6236                           ;incstack = 0
  6237  001514  BE3A               	btfsc	_B+1,7,c
  6238  001516  D006               	goto	i2u173_40
  6239  001518  503A               	movf	_B+1,w,c
  6240  00151A  E124               	bnz	i2l2362
  6241  00151C  0E03               	movlw	3
  6242  00151E  5C39               	subwf	_B,w,c
  6243  001520  B0D8               	btfsc	status,0,c
  6244  001522  D020               	goto	i2u177_40
  6245  001524                     i2u173_40:
  6246  001524  BE38               	btfsc	_N+1,7,c
  6247  001526  D006               	goto	i2u174_40
  6248  001528  5038               	movf	_N+1,w,c
  6249  00152A  E11C               	bnz	i2l2362
  6250  00152C  0E04               	movlw	4
  6251  00152E  5C37               	subwf	_N,w,c
  6252  001530  B0D8               	btfsc	status,0,c
  6253  001532  D018               	goto	i2u177_40
  6254  001534                     i2u174_40:
  6255  001534  BE36               	btfsc	_S+1,7,c
  6256  001536  D006               	goto	i2u175_40
  6257  001538  5036               	movf	_S+1,w,c
  6258  00153A  E114               	bnz	i2l2362
  6259  00153C  0E03               	movlw	3
  6260  00153E  5C35               	subwf	_S,w,c
  6261  001540  B0D8               	btfsc	status,0,c
  6262  001542  D010               	goto	i2u177_40
  6263  001544                     i2u175_40:
  6264  001544  BE34               	btfsc	_W+1,7,c
  6265  001546  D006               	goto	i2u176_40
  6266  001548  5034               	movf	_W+1,w,c
  6267  00154A  E10C               	bnz	i2l2362
  6268  00154C  0E05               	movlw	5
  6269  00154E  5C33               	subwf	_W,w,c
  6270  001550  B0D8               	btfsc	status,0,c
  6271  001552  D008               	goto	i2u177_40
  6272  001554                     i2u176_40:
  6273  001554  BE3E               	btfsc	_total_number+1,7,c
  6274  001556  D00B               	goto	i2l221
  6275  001558  503E               	movf	_total_number+1,w,c
  6276  00155A  E104               	bnz	i2l2362
  6277  00155C  0E05               	movlw	5
  6278  00155E  5C3D               	subwf	_total_number,w,c
  6279  001560  A0D8               	btfss	status,0,c
  6280  001562  D005               	goto	i2l221
  6281  001564                     i2u177_40:
  6282  001564                     i2l2362:
  6283                           
  6284                           ;main.c: 614: return 0;
  6285  001564  0E00               	movlw	0
  6286  001566  6E02               	movwf	?_check+1,c
  6287  001568  0E00               	movlw	0
  6288  00156A  6E01               	movwf	?_check,c
  6289  00156C  0012               	return	
  6290  00156E                     i2l221:
  6291                           
  6292                           ;main.c: 615: }
  6293                           ;main.c: 616: return 1;
  6294  00156E  0E00               	movlw	0
  6295  001570  6E02               	movwf	?_check+1,c
  6296  001572  0E01               	movlw	1
  6297  001574  6E01               	movwf	?_check,c
  6298  001576  0012               	return	
  6299  001578                     __end_of_check:
  6300                           	opt stack 0
  6301                           pclatu	equ	0xFFB
  6302                           pclath	equ	0xFFA
  6303                           tblptru	equ	0xFF8
  6304                           tblptrh	equ	0xFF7
  6305                           tblptrl	equ	0xFF6
  6306                           tablat	equ	0xFF5
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           intcon	equ	0xFF2
  6310                           intcon3	equ	0xFF0
  6311                           indf0	equ	0xFEF
  6312                           postinc0	equ	0xFEE
  6313                           fsr0h	equ	0xFEA
  6314                           fsr0l	equ	0xFE9
  6315                           wreg	equ	0xFE8
  6316                           indf1	equ	0xFE7
  6317                           fsr1h	equ	0xFE2
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           pclatu	equ	0xFFB
  6326                           pclath	equ	0xFFA
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           intcon3	equ	0xFF0
  6335                           indf0	equ	0xFEF
  6336                           postinc0	equ	0xFEE
  6337                           fsr0h	equ	0xFEA
  6338                           fsr0l	equ	0xFE9
  6339                           wreg	equ	0xFE8
  6340                           indf1	equ	0xFE7
  6341                           fsr1h	equ	0xFE2
  6342                           fsr1l	equ	0xFE1
  6343                           indf2	equ	0xFDF
  6344                           postinc2	equ	0xFDE
  6345                           postdec2	equ	0xFDD
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350                           	psect	rparam
  6351  0000                     pclatu	equ	0xFFB
  6352                           pclath	equ	0xFFA
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon3	equ	0xFF0
  6361                           indf0	equ	0xFEF
  6362                           postinc0	equ	0xFEE
  6363                           fsr0h	equ	0xFEA
  6364                           fsr0l	equ	0xFE9
  6365                           wreg	equ	0xFE8
  6366                           indf1	equ	0xFE7
  6367                           fsr1h	equ	0xFE2
  6368                           fsr1l	equ	0xFE1
  6369                           indf2	equ	0xFDF
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376                           	psect	temp
  6377  000054                     btemp:
  6378                           	opt stack 0
  6379  000054                     	ds	1
  6380  0000                     int$flags	set	btemp
  6381  0000                     wtemp6	set	btemp+1
  6382                           pclatu	equ	0xFFB
  6383                           pclath	equ	0xFFA
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           intcon	equ	0xFF2
  6391                           intcon3	equ	0xFF0
  6392                           indf0	equ	0xFEF
  6393                           postinc0	equ	0xFEE
  6394                           fsr0h	equ	0xFEA
  6395                           fsr0l	equ	0xFE9
  6396                           wreg	equ	0xFE8
  6397                           indf1	equ	0xFE7
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8


Data Sizes:
    Strings     192
    Constant    113
    Data        0
    BSS         289
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     50      83
    BANK0           128     30      86
    BANK1           256      0     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 80
		 -> strs(CODE[80]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> current_set(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_23(CODE[1]), STR_21(CODE[1]), STR_16(CODE[1]), STR_15(CODE[1]), 
		 -> STR_14(CODE[1]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), current_set(BANK0[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> current_set2(COMRAM[4]), temp_set(COMRAM[4]), final_set(BANK0[32]), current_set(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> current_set2(COMRAM[4]), temp_set(COMRAM[4]), final_set(BANK0[32]), current_set(BANK0[4]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[5]), STR_41(CODE[5]), STR_40(CODE[5]), STR_39(CODE[4]), 
		 -> STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), 
		 -> STR_34(CODE[4]), STR_33(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> current_set2(COMRAM[4]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 4
		 -> temp_set(COMRAM[4]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 4
		 -> current_set(BANK0[4]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 4
		 -> current_set(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[6]), STR_25(CODE[9]), STR_24(CODE[12]), STR_22(CODE[7]), 
		 -> STR_20(CODE[3]), STR_19(CODE[11]), STR_18(CODE[3]), STR_17(CODE[9]), 
		 -> STR_9(CODE[15]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[17]), 
		 -> STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[3]), STR_2(CODE[14]), 
		 -> STR_1(CODE[15]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_47(CODE[7]), final_set(BANK0[32]), current_set(BANK0[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 4
		 -> current_set(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> current_set2(COMRAM[4]), temp_set(COMRAM[4]), final_set(BANK0[32]), current_set(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _is_valid->___wmul
    _is_valid->_strcmp

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3462
                                             26 BANK0      4     4      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    2942
                                             12 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    24    24      0    9618
                                             26 COMRAM    24    24      0
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            20    16      4    1272
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1747
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4506
                                              6 COMRAM     2     2      0
                             ___wmul
                             _strcmp
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1375
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   _check
   _is_valid
     ___wmul
     _strcmp
   _strcat
   _strcpy
   _strncmp
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      C8       8       78.1%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1E      56       5       67.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     32      53       1       65.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     171       6        0.0%
DATA                 0      0     171       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb  5 23:56:42 2018

                        _B 0039                          _N 0037                          _S 0035  
                        _W 0033                __CFG_CPD$ON 000000        ___wmul@multiplicand 0003  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l120 0EDE                        l122 0F66                        l301 1086  
                      l117 0E04                        l310 11AE                        l302 105A  
                      l118 0E54                        l311 115A                        l119 0EA6  
                      l305 110C                        l309 1154                        l291 1018  
                      l292 1028                        l293 10B0                        l722 15B8  
                      l298 10E2                        l723 15C2                        l299 1030  
                      l732 1776                        l733 1780                        l718 1598  
                      l719 1590                        l728 175E                        l729 1756  
             __CFG_CPB$OFF 000000              _assembly_step 0090                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l2978 1110  
                     STR_1 FC5E                       STR_2 FC6D                       STR_3 FCF9  
                     STR_4 FCA4                       STR_5 FCBA                       STR_6 FC3E  
                     STR_7 FCF9                       STR_8 FC4C                       STR_9 FC4F  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u2410 107C  
                     u2315 1450                       u2316 1452                       u2340 159C  
                     u2420 10A8                       u2325 1492                       u2326 1494  
                     u2417 1072                       u2370 1762                       u2427 109E  
                     u2470 1142                       u2550 0F64                       u2560 100A  
                     u2490 11B8                       u2707 0FEC                       u2717 1872  
                     u2637 0E1C                       u2727 1626                       u2647 0E40  
                     u2737 165A                       u2657 0E98                       u2747 188A  
                     u2667 0ED0                       u2757 1438                       u2677 0F08  
                     u2767 1442                       u2687 0F3A                       u2777 147A  
                     u2697 0FCC                       u2787 1484                       _main 0DD0  
 __end_of_interruptHandler 083C                       _keys FBCD                       _temp 0048  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf1 000FE7                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0054                       _strs FBEE  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 18A6              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 1496           __end_of_LCD_LEFT FBE9  
             _total_number 003D                      ?_main 0001                      STR_10 FCFC  
                    STR_11 FCEB                      STR_12 FCEF                      STR_20 FCF9  
                    STR_21 FC5D                      STR_13 FCF3                      STR_14 FC5D  
                    STR_30 FCF3                      STR_22 FCB3                      STR_23 FC5D  
                    STR_15 FC5D                      STR_31 FCEA                      STR_16 FC5D  
                    STR_32 FCEE                      STR_40 FCDA                      STR_24 FC7B  
                    STR_33 FCF2                      STR_41 FCDF                      STR_25 FC9B  
                    STR_17 FC92                      STR_18 FCF9                      STR_34 FCE9  
                    STR_42 FCD5                      STR_26 FCC0                      STR_27 FCFC  
                    STR_35 FCED                      STR_43 FCCB                      STR_19 FC87  
                    STR_28 FCEB                      STR_36 FCF1                      STR_44 FCD0  
                    STR_29 FCEF                      STR_37 FCCC                      STR_45 FCC6  
                    STR_38 FCD6                      STR_46 FCE4                      STR_39 FCF5  
                    STR_47 FCAC            __end_of___lwdiv 15CC                      i2l201 0B24  
          __end_of___lwmod 178A                      i2l211 0CC0                      i2l203 0B70  
                    i2l132 0096                      i2l221 156E                      i2l213 0D14  
                    i2l205 0BC4                      i2l301 124A                      i2l141 01BE  
                    i2l310 1368                      i2l302 1220                      i2l150 0376  
                    i2l134 0246                      i2l215 0D72                      i2l207 0C18  
                    i2l311 131A                      i2l143 0206                      i2l135 00E6  
                    i2l144 022C                      i2l209 0C6C                      i2l305 12CC  
                    i2l145 0598                      i2l153 03B2                      i2l137 012E  
                    i2l170 068A                      i2l146 0260                      i2l171 0694  
                    i2l155 04C4                      i2l147 02A0                      i2l139 0176  
                    i2l172 074C                      i2l164 06BC                      i2l148 02E0  
                    i2l181 0898                      i2l309 1314                      i2l165 066A  
                    i2l149 0320                      i2l174 076C                      i2l166 06F6  
                    i2l158 0544                      i2l191 099C                      i2l183 08C6  
                    i2l167 0672                      i2l176 07C6                      i2l168 067A  
                    i2l193 09E8                      i2l185 08F4                      i2l169 0682  
                    i2l195 0A34                      i2l187 092C                      i2l179 086A  
                    i2l291 11E0                      i2l292 11F0                      i2l197 0A80  
                    i2l189 0964                      i2l293 1274                      i2l199 0AD2  
                    i2l722 160A                      i2l298 12A4                      i2l723 1614  
                    i2l299 11F6                      i2l732 17B8                      i2l733 17C2  
                    i2l718 15EA                      i2l719 15E2                      i2l728 17A0  
                    i2l729 1798                      i2l862 17DA                      i2l871 16C0  
                    i2l863 17D6                      i2l872 16B8                      i2l880 170A  
                    i2l865 17F2                      i2l866 17EA                      i2l885 13F8  
                    i2l886 138E                      i2l879 1712                      i2l887 13F0  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1892  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 166A  
                    _check 1514             __CFG_EBTRB$OFF 000000            __end_of_dpowers FBE8  
                    _error 0041                      _valid 003F                      _state 0092  
                    _putch 1862                      main@i 00D4                      pclath 000FFA  
                    tablat 000FF5          _LCDinterruptState 0049                      status 000FD8  
                    wtemp6 0055            __end_of_strncmp 1412             __CFG_PBADEN$ON 000000  
         __end_ofi2_printf 138C         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
          __initialization 180E         __size_ofi2_lcdInst 0014               __end_of_main 100C  
             __end_of_keys FBDE                 i2printf@ap 0014                 i2printf@cp 0016  
             __end_of_strs FC3E         __size_ofi2_initLCD 004C             __CFG_OSC$HSPLL 000000  
        __end_of_LCD_RIGHT FBEA                     ??_main 00D2              __activetblptr 000003  
                   ?_check 0001                     _ADCON0 000FC2                     _ADCON1 000FC1  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l2424 12D0  
                   i2l2362 1564                     i2l2194 138E                     i2l2682 04DC  
                   i2l2792 07EE                     i2l2794 07F0                  ??i2_putch 0003  
           __CFG_XINST$OFF 000000                     ___wmul 183C             __CFG_STVREN$ON 000000  
                ??___lwdiv 00BC                  ??___lwmod 00C3           __end_of_is_valid 0DD0  
                   clear_0 1814                     clear_1 1820                     clear_2 182C  
                   _number 0052                  ??_lcdInst 00BA                     _printf 100C  
                   _strcat 17CC                     _strcmp 16B6                     _strcpy 1700  
                ??_initLCD 00BB          __end_ofi2___lwdiv 161E               __mediumconst FBCC  
        __end_ofi2___lwmod 17CC                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8          __end_ofi2_lcdInst 18BA                  ??_strncmp 0007  
        __end_ofi2_initLCD 16B6                 __accesstop 0080    __end_of__initialization 1832  
            ___rparam_used 000001         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
            __end_of_check 1578              __end_of_putch 187A                i2printf@val 0018  
       __size_of_lcdNibble 0084                i2putch@data 0003                  ?i2_printf 000D  
                  ??_check 0003                    ??_putch 00BA                 __pbssBANK0 0080  
               __pbssBANK1 0100          ?_interruptHandler 0001         ??_interruptHandler 001B  
             ?i2_lcdNibble 0001                    ?___wmul 0001                    ?_printf 00C4  
                  ?_strcat 0001                    ?_strcmp 0001                    ?_strcpy 0001  
               ??i2_printf 0011       lcd@LCDinterruptState 0047                    i2_putch 1892  
                ?_is_valid 0001          __end_of_lcdNibble 1496                    __Hparam 0000  
                  __Lparam 0000            __size_of___wmul 0026                    ___lwdiv 1578  
                  ___lwmod 1746   interruptHandler@keypress 0032                    __pcinit 180E  
                  __ramtop 1000                    _lcdInst 187A                    __ptext0 0DD0  
                  __ptext1 100C                    __ptext2 1862                    __ptext3 1746  
                  __ptext4 1578                    __ptext5 161E                    __ptext6 187A  
                  __ptext7 1412                    __ptext9 11D6            __size_of_printf 01CA  
          __size_of_strcat 0042            __size_of_strcmp 004A            __size_of_strcpy 0046  
                  _initLCD 161E                    _counter 0045                    _dpowers FBDE  
                _LCD_RIGHT FBE9                    _strncmp 138C             __pintcode_body 0012  
     end_of_initialization 1832      __end_of_LCD_SIZE_HORZ FBEC      __end_of_LCD_SIZE_VERT FBEB  
             _final_number 0080                    int_func 0012                 ??_is_valid 0007  
                  printf@c 00D1                    printf@f 00C4                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                    strcmp@r 0006  
               _prev_state 003B          i2___lwdiv@divisor 0003                  i2___lwdiv 15CC  
                i2___lwmod 178A          i2___lwdiv@counter 0007                  i2_lcdInst 18A6  
                i2_initLCD 166A             __end_of___wmul 1862       __size_ofi2_lcdNibble 007E  
            i2lcdInst@data 0003             __end_of_printf 11D6             __end_of_strcat 180E  
           __end_of_strcmp 1700               i2printf@flag 0012             __end_of_strcpy 1746  
             i2printf@prec 0013        start_initialization 180E                  i2printf@c 001A  
                i2printf@f 000D                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 01B6                 ?i2_lcdInst 0001               _counter_step 0043  
               ?i2_initLCD 0001          interruptHandler@i 002F                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 00C8  __size_of_interruptHandler 0834  
                 ??_strcat 0005                   ??_strcmp 0005                   ??_strcpy 0005  
              __pbssCOMRAM 0033              __pcstackBANK0 00B8          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001               _current_set2 004E  
        __size_of_is_valid 0594           ___lwdiv@dividend 00B8          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FBCC                  _lcdNibble 1412  
                 ?___lwdiv 00B8                   ?___lwmod 00BF                  _final_set 0094  
                 ?_lcdInst 0001                   ?_initLCD 0001             __size_of_check 0064  
         ___lwdiv@quotient 00BD                   ?_strncmp 0001                ??i2___lwdiv 0005  
              ??i2___lwmod 000C             __size_of_putch 0018                   _LCD_LEFT FBE8  
              ??i2_lcdInst 0003             ___wmul@product 0005                   _LATDbits 000F8C  
              ??i2_initLCD 0004                   i2u121_40 16F4                   i2u211_40 03B0  
                 i2u132_40 17A4                   i2u214_40 04DC                   i2u118_45 14D0  
                 i2u118_46 14D2                   i2u151_40 13BC                   i2u119_45 1510  
                 i2u119_46 1512                   i2u216_40 0554                   i2u129_40 15EE  
                 i2u146_40 173C                   i2u146_47 1732                   i2u180_40 1242  
                 i2u180_47 1238                   i2u173_40 1524                   i2u181_40 126C  
                 i2u181_47 1262                   i2u174_40 1534                   i2u175_40 1544  
                 i2u176_40 1554                   i2u280_47 0236                   i2u177_40 1564  
                 i2u281_47 0482                   i2u186_40 1302                   i2u290_47 189E  
                 i2u282_47 04AC                   i2u291_47 1670                   i2u283_47 0526  
                 i2u188_40 1370                   i2u292_47 16A4                   i2u284_47 056E  
                 i2u293_47 18B2                   i2u285_47 05DA                   i2u294_47 14B8  
                 i2u286_47 06AE                   i2u295_47 14C2                   i2u287_47 0716  
                 i2u279_47 0220                   i2u296_47 14F8                   i2u288_47 0736  
                 i2u297_47 1502                   i2u289_47 079C           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001          ___wmul@multiplier 0001              lcdNibble@data 00B9  
               printf@flag 00C9              lcdNibble@temp 00B8                 printf@prec 00CA  
                 i2_printf 11D6             _LCD_HORZ_LIMIT FBED       interruptHandler@temp 0031  
         __size_ofi2_putch 0014                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000           __size_of___lwdiv 0054           __size_of___lwmod 0044  
         _interruptHandler 0008           __size_of_lcdInst 0018           __size_of_initLCD 004C  
              _current_set 00B4                 strcat@from 0003     __end_of_LCD_HORZ_LIMIT FBEE  
          ___lwdiv@divisor 00BA            ___lwdiv@counter 00BC                   __ptext10 1892  
                 __ptext11 178A                   __ptext20 16B6                   __ptext12 15CC  
                 __ptext21 183C                   __ptext13 166A                   __ptext22 1514  
                 __ptext14 18A6                   __ptext15 1496                   __ptext16 138C  
                 __ptext17 1700                   __ptext18 17CC                   __ptext19 083C  
                 _fastener 0100             _LCD_VERT_LIMIT FBEC           __size_of_strncmp 0086  
               strcpy@from 0003              __size_of_main 023C                   _is_valid 083C  
               strncmp@len 0005                   _temp_set 004A              ??i2_lcdNibble 0001  
              ??_lcdNibble 00B8                   int$flags 0054                  printf@val 00CF  
                putch@data 00BA                 _INTCONbits 000FF2     __end_of_LCD_VERT_LIMIT FBED  
                 intlevel2 0000              _LCD_SIZE_HORZ FBEB           ___lwmod@dividend 00BF  
            _LCD_SIZE_VERT FBEA                  strncmp@s1 0001                  strncmp@s2 0003  
                 printf@ap 00CB                   printf@cp 00CD                lcdInst@data 00BA  
      __end_ofi2_lcdNibble 1514                   strcat@cp 0005                   strcat@to 0001  
                 strcmp@s1 0001                   strcmp@s2 0003            ___lwmod@divisor 00C1  
                 strcpy@cp 0005                   strcpy@to 0001            ___lwmod@counter 00C3  
