

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 13:17:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	mediumconst
    77  00FEB8                     __pmediumconst:
    78                           	opt stack 0
    79  00FEB8  00                 	db	0
    80  00FEB9                     _keys:
    81                           	opt stack 0
    82  00FEB9  31                 	db	49
    83  00FEBA  32                 	db	50
    84  00FEBB  33                 	db	51
    85  00FEBC  41                 	db	65
    86  00FEBD  34                 	db	52
    87  00FEBE  35                 	db	53
    88  00FEBF  36                 	db	54
    89  00FEC0  42                 	db	66
    90  00FEC1  37                 	db	55
    91  00FEC2  38                 	db	56
    92  00FEC3  39                 	db	57
    93  00FEC4  43                 	db	67
    94  00FEC5  2A                 	db	42
    95  00FEC6  30                 	db	48
    96  00FEC7  23                 	db	35
    97  00FEC8  44                 	db	68
    98  00FEC9  00                 	db	0
    99  00FECA                     __end_of_keys:
   100                           	opt stack 0
   101  00FECA                     _dpowers:
   102                           	opt stack 0
   103  00FECA  0001               	dw	1
   104  00FECC  000A               	dw	10
   105  00FECE  0064               	dw	100
   106  00FED0  03E8               	dw	1000
   107  00FED2  2710               	dw	10000
   108  00FED4                     __end_of_dpowers:
   109                           	opt stack 0
   110  00FED4                     _LCD_LEFT:
   111                           	opt stack 0
   112  00FED4  00                 	db	0
   113  00FED5                     __end_of_LCD_LEFT:
   114                           	opt stack 0
   115  00FED5                     _LCD_RIGHT:
   116                           	opt stack 0
   117  00FED5  01                 	db	1
   118  00FED6                     __end_of_LCD_RIGHT:
   119                           	opt stack 0
   120  00FED6                     _LCD_SIZE_VERT:
   121                           	opt stack 0
   122  00FED6  02                 	db	2
   123  00FED7                     __end_of_LCD_SIZE_VERT:
   124                           	opt stack 0
   125  00FED7                     _LCD_SIZE_HORZ:
   126                           	opt stack 0
   127  00FED7  10                 	db	16
   128  00FED8                     __end_of_LCD_SIZE_HORZ:
   129                           	opt stack 0
   130  00FED8                     _LCD_VERT_LIMIT:
   131                           	opt stack 0
   132  00FED8  02                 	db	2
   133  00FED9                     __end_of_LCD_VERT_LIMIT:
   134                           	opt stack 0
   135  00FED9                     _LCD_HORZ_LIMIT:
   136                           	opt stack 0
   137  00FED9  28                 	db	40
   138  00FEDA                     __end_of_LCD_HORZ_LIMIT:
   139                           	opt stack 0
   140  00FEDA                     _strs:
   141                           	opt stack 0
   142  00FEDA  42                 	db	66
   143  00FEDB  00                 	db	0
   144  00FEDC  00                 	db	0
   145  00FEDD  00                 	db	0
   146  00FEDE  00                 	db	0
   147  00FEDF  4E                 	db	78
   148  00FEE0  00                 	db	0
   149  00FEE1  00                 	db	0
   150  00FEE2  00                 	db	0
   151  00FEE3  00                 	db	0
   152  00FEE4  53                 	db	83
   153  00FEE5  00                 	db	0
   154  00FEE6  00                 	db	0
   155  00FEE7  00                 	db	0
   156  00FEE8  00                 	db	0
   157  00FEE9  57                 	db	87
   158  00FEEA  00                 	db	0
   159  00FEEB  00                 	db	0
   160  00FEEC  00                 	db	0
   161  00FEED  00                 	db	0
   162  00FEEE  42                 	db	66
   163  00FEEF  4E                 	db	78
   164  00FEF0  00                 	db	0
   165  00FEF1  00                 	db	0
   166  00FEF2  00                 	db	0
   167  00FEF3  42                 	db	66
   168  00FEF4  53                 	db	83
   169  00FEF5  00                 	db	0
   170  00FEF6  00                 	db	0
   171  00FEF7  00                 	db	0
   172  00FEF8  42                 	db	66
   173  00FEF9  57                 	db	87
   174  00FEFA  00                 	db	0
   175  00FEFB  00                 	db	0
   176  00FEFC  00                 	db	0
   177  00FEFD  42                 	db	66
   178  00FEFE  42                 	db	66
   179  00FEFF  4E                 	db	78
   180  00FF00  00                 	db	0
   181  00FF01  00                 	db	0
   182  00FF02  42                 	db	66
   183  00FF03  42                 	db	66
   184  00FF04  53                 	db	83
   185  00FF05  00                 	db	0
   186  00FF06  00                 	db	0
   187  00FF07  42                 	db	66
   188  00FF08  42                 	db	66
   189  00FF09  57                 	db	87
   190  00FF0A  00                 	db	0
   191  00FF0B  00                 	db	0
   192  00FF0C  42                 	db	66
   193  00FF0D  4E                 	db	78
   194  00FF0E  57                 	db	87
   195  00FF0F  00                 	db	0
   196  00FF10  00                 	db	0
   197  00FF11  42                 	db	66
   198  00FF12  53                 	db	83
   199  00FF13  57                 	db	87
   200  00FF14  00                 	db	0
   201  00FF15  00                 	db	0
   202  00FF16  42                 	db	66
   203  00FF17  57                 	db	87
   204  00FF18  57                 	db	87
   205  00FF19  00                 	db	0
   206  00FF1A  00                 	db	0
   207  00FF1B  42                 	db	66
   208  00FF1C  4E                 	db	78
   209  00FF1D  57                 	db	87
   210  00FF1E  57                 	db	87
   211  00FF1F  00                 	db	0
   212  00FF20  42                 	db	66
   213  00FF21  53                 	db	83
   214  00FF22  57                 	db	87
   215  00FF23  57                 	db	87
   216  00FF24  00                 	db	0
   217  00FF25  42                 	db	66
   218  00FF26  42                 	db	66
   219  00FF27  53                 	db	83
   220  00FF28  57                 	db	87
   221  00FF29  00                 	db	0
   222  00FF2A  42                 	db	66
   223  00FF2B  42                 	db	66
   224  00FF2C  4E                 	db	78
   225  00FF2D  57                 	db	87
   226  00FF2E  00                 	db	0
   227  00FF2F  42                 	db	66
   228  00FF30  4E                 	db	78
   229  00FF31  4E                 	db	78
   230  00FF32  57                 	db	87
   231  00FF33  00                 	db	0
   232  00FF34  42                 	db	66
   233  00FF35  4E                 	db	78
   234  00FF36  4E                 	db	78
   235  00FF37  4E                 	db	78
   236  00FF38  00                 	db	0
   237  00FF39  42                 	db	66
   238  00FF3A  57                 	db	87
   239  00FF3B  57                 	db	87
   240  00FF3C  57                 	db	87
   241  00FF3D  00                 	db	0
   242  00FF3E                     __end_of_strs:
   243                           	opt stack 0
   244  0000                     _LATDbits	set	3980
   245  0000                     _PORTB	set	3969
   246  0000                     _INTCONbits	set	4082
   247  0000                     _ADCON1	set	4033
   248  0000                     _ADCON0	set	4034
   249  0000                     _TRISE	set	3990
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISA	set	3986
   254  0000                     _LATE	set	3981
   255  0000                     _LATD	set	3980
   256  0000                     _LATC	set	3979
   257  0000                     _LATB	set	3978
   258  0000                     _LATA	set	3977
   259  0000                     _INT1IF	set	32640
   260  0000                     _INT1IE	set	32643
   261  00FF3E                     STR_6:
   262  00FF3E  61                 	db	97	;'a'
   263  00FF3F  73                 	db	115	;'s'
   264  00FF40  73                 	db	115	;'s'
   265  00FF41  65                 	db	101	;'e'
   266  00FF42  6D                 	db	109	;'m'
   267  00FF43  62                 	db	98	;'b'
   268  00FF44  6C                 	db	108	;'l'
   269  00FF45  79                 	db	121	;'y'
   270  00FF46  20                 	db	32
   271  00FF47  73                 	db	115	;'s'
   272  00FF48  74                 	db	116	;'t'
   273  00FF49  65                 	db	101	;'e'
   274  00FF4A  70                 	db	112	;'p'
   275  00FF4B  3A                 	db	58	;':'
   276  00FF4C  25                 	db	37
   277  00FF4D  64                 	db	100	;'d'
   278  00FF4E  00                 	db	0
   279  00FF4F                     STR_9:
   280  00FF4F  57                 	db	87	;'W'
   281  00FF50  72                 	db	114	;'r'
   282  00FF51  6F                 	db	111	;'o'
   283  00FF52  6E                 	db	110	;'n'
   284  00FF53  67                 	db	103	;'g'
   285  00FF54  20                 	db	32
   286  00FF55  6E                 	db	110	;'n'
   287  00FF56  75                 	db	117	;'u'
   288  00FF57  6D                 	db	109	;'m'
   289  00FF58  62                 	db	98	;'b'
   290  00FF59  65                 	db	101	;'e'
   291  00FF5A  72                 	db	114	;'r'
   292  00FF5B  21                 	db	33
   293  00FF5C  20                 	db	32
   294  00FF5D  00                 	db	0
   295  00FF5E                     STR_1:
   296  00FF5E  61                 	db	97	;'a'
   297  00FF5F  73                 	db	115	;'s'
   298  00FF60  73                 	db	115	;'s'
   299  00FF61  65                 	db	101	;'e'
   300  00FF62  6D                 	db	109	;'m'
   301  00FF63  62                 	db	98	;'b'
   302  00FF64  6C                 	db	108	;'l'
   303  00FF65  79                 	db	121	;'y'
   304  00FF66  20                 	db	32
   305  00FF67  73                 	db	115	;'s'
   306  00FF68  74                 	db	116	;'t'
   307  00FF69  65                 	db	101	;'e'
   308  00FF6A  70                 	db	112	;'p'
   309  00FF6B  3A                 	db	58	;':'
   310  00FF6C  00                 	db	0
   311  00FF6D                     STR_2:
   312  00FF6D  66                 	db	102	;'f'
   313  00FF6E  61                 	db	97	;'a'
   314  00FF6F  73                 	db	115	;'s'
   315  00FF70  74                 	db	116	;'t'
   316  00FF71  65                 	db	101	;'e'
   317  00FF72  6E                 	db	110	;'n'
   318  00FF73  65                 	db	101	;'e'
   319  00FF74  72                 	db	114	;'r'
   320  00FF75  20                 	db	32
   321  00FF76  73                 	db	115	;'s'
   322  00FF77  65                 	db	101	;'e'
   323  00FF78  74                 	db	116	;'t'
   324  00FF79  3A                 	db	58	;':'
   325  00FF7A  00                 	db	0
   326  00FF7B                     STR_22:
   327  00FF7B  57                 	db	87	;'W'
   328  00FF7C  72                 	db	114	;'r'
   329  00FF7D  6F                 	db	111	;'o'
   330  00FF7E  6E                 	db	110	;'n'
   331  00FF7F  67                 	db	103	;'g'
   332  00FF80  20                 	db	32
   333  00FF81  69                 	db	105	;'i'
   334  00FF82  6E                 	db	110	;'n'
   335  00FF83  70                 	db	112	;'p'
   336  00FF84  75                 	db	117	;'u'
   337  00FF85  74                 	db	116	;'t'
   338  00FF86  00                 	db	0
   339  00FF87                     STR_17:
   340  00FF87  77                 	db	119	;'w'
   341  00FF88  72                 	db	114	;'r'
   342  00FF89  6F                 	db	111	;'o'
   343  00FF8A  6E                 	db	110	;'n'
   344  00FF8B  67                 	db	103	;'g'
   345  00FF8C  20                 	db	32
   346  00FF8D  73                 	db	115	;'s'
   347  00FF8E  65                 	db	101	;'e'
   348  00FF8F  74                 	db	116	;'t'
   349  00FF90  21                 	db	33
   350  00FF91  00                 	db	0
   351  00FF92                     STR_14:
   352  00FF92  63                 	db	99	;'c'
   353  00FF93  6F                 	db	111	;'o'
   354  00FF94  72                 	db	114	;'r'
   355  00FF95  72                 	db	114	;'r'
   356  00FF96  65                 	db	101	;'e'
   357  00FF97  63                 	db	99	;'c'
   358  00FF98  74                 	db	116	;'t'
   359  00FF99  21                 	db	33
   360  00FF9A  00                 	db	0
   361  00FF9B                     STR_23:
   362  00FF9B  54                 	db	84	;'T'
   363  00FF9C  4F                 	db	79	;'O'
   364  00FF9D  4F                 	db	79	;'O'
   365  00FF9E  20                 	db	32
   366  00FF9F  4D                 	db	77	;'M'
   367  00FFA0  41                 	db	65	;'A'
   368  00FFA1  4E                 	db	78	;'N'
   369  00FFA2  59                 	db	89	;'Y'
   370  00FFA3  00                 	db	0
   371  00FFA4                     STR_4:
   372  00FFA4  6E                 	db	110	;'n'
   373  00FFA5  75                 	db	117	;'u'
   374  00FFA6  6D                 	db	109	;'m'
   375  00FFA7  62                 	db	98	;'b'
   376  00FFA8  65                 	db	101	;'e'
   377  00FFA9  72                 	db	114	;'r'
   378  00FFAA  3A                 	db	58	;':'
   379  00FFAB  00                 	db	0
   380  00FFAC                     STR_45:
   381  00FFAC  28                 	db	40
   382  00FFAD  6E                 	db	110	;'n'
   383  00FFAE  75                 	db	117	;'u'
   384  00FFAF  6C                 	db	108	;'l'
   385  00FFB0  6C                 	db	108	;'l'
   386  00FFB1  29                 	db	41
   387  00FFB2  00                 	db	0
   388  00FFB3                     STR_20:
   389  00FFB3  77                 	db	119	;'w'
   390  00FFB4  72                 	db	114	;'r'
   391  00FFB5  6F                 	db	111	;'o'
   392  00FFB6  6E                 	db	110	;'n'
   393  00FFB7  67                 	db	103	;'g'
   394  00FFB8  21                 	db	33
   395  00FFB9  00                 	db	0
   396  00FFBA                     STR_5:
   397  00FFBA  44                 	db	68	;'D'
   398  00FFBB  6F                 	db	111	;'o'
   399  00FFBC  6E                 	db	110	;'n'
   400  00FFBD  65                 	db	101	;'e'
   401  00FFBE  21                 	db	33
   402  00FFBF  00                 	db	0
   403  00FFC0                     STR_24:
   404  00FFC0  6F                 	db	111	;'o'
   405  00FFC1  6B                 	db	107	;'k'
   406  00FFC2  61                 	db	97	;'a'
   407  00FFC3  79                 	db	121	;'y'
   408  00FFC4  21                 	db	33
   409  00FFC5  00                 	db	0
   410  00FFC6                     STR_43:
   411  00FFC6  42                 	db	66	;'B'
   412  00FFC7  4E                 	db	78	;'N'
   413  00FFC8  4E                 	db	78	;'N'
   414  00FFC9  4E                 	db	78	;'N'
   415  00FFCA  00                 	db	0
   416  00FFCB                     STR_41:
   417  00FFCB  42                 	db	66	;'B'
   418  00FFCC  42                 	db	66	;'B'
   419  00FFCD  4E                 	db	78	;'N'
   420  00FFCE  57                 	db	87	;'W'
   421  00FFCF  00                 	db	0
   422  00FFD0                     STR_42:
   423  00FFD0  42                 	db	66	;'B'
   424  00FFD1  4E                 	db	78	;'N'
   425  00FFD2  4E                 	db	78	;'N'
   426  00FFD3  57                 	db	87	;'W'
   427  00FFD4  00                 	db	0
   428  00FFD5                     STR_40:
   429  00FFD5  42                 	db	66	;'B'
   430  00FFD6  42                 	db	66	;'B'
   431  00FFD7  53                 	db	83	;'S'
   432  00FFD8  57                 	db	87	;'W'
   433  00FFD9  00                 	db	0
   434  00FFDA                     STR_38:
   435  00FFDA  42                 	db	66	;'B'
   436  00FFDB  4E                 	db	78	;'N'
   437  00FFDC  57                 	db	87	;'W'
   438  00FFDD  57                 	db	87	;'W'
   439  00FFDE  00                 	db	0
   440  00FFDF                     STR_39:
   441  00FFDF  42                 	db	66	;'B'
   442  00FFE0  53                 	db	83	;'S'
   443  00FFE1  57                 	db	87	;'W'
   444  00FFE2  57                 	db	87	;'W'
   445  00FFE3  00                 	db	0
   446  00FFE4                     STR_44:
   447  00FFE4  42                 	db	66	;'B'
   448  00FFE5  57                 	db	87	;'W'
   449  00FFE6  57                 	db	87	;'W'
   450  00FFE7  57                 	db	87	;'W'
   451  00FFE8  00                 	db	0
   452  00FFE9                     STR_32:
   453  00FFE9  42                 	db	66	;'B'
   454  00FFEA  42                 	db	66	;'B'
   455  00FFEB  4E                 	db	78	;'N'
   456  00FFEC  00                 	db	0
   457  00FFED                     STR_33:
   458  00FFED  42                 	db	66	;'B'
   459  00FFEE  42                 	db	66	;'B'
   460  00FFEF  53                 	db	83	;'S'
   461  00FFF0  00                 	db	0
   462  00FFF1                     STR_34:
   463  00FFF1  42                 	db	66	;'B'
   464  00FFF2  42                 	db	66	;'B'
   465  00FFF3  57                 	db	87	;'W'
   466  00FFF4  00                 	db	0
   467  00FFF5                     STR_37:
   468  00FFF5  42                 	db	66	;'B'
   469  00FFF6  57                 	db	87	;'W'
   470  00FFF7  57                 	db	87	;'W'
   471  00FFF8  00                 	db	0
   472  00FFF9                     STR_3:
   473  00FFF9  25                 	db	37
   474  00FFFA  73                 	db	115	;'s'
   475  00FFFB  00                 	db	0
   476  00FFFC                     STR_10:
   477  00FFFC  42                 	db	66	;'B'
   478  00FFFD  00                 	db	0
   479  0000                     
   480                           ; #config settings
   481  00FFFE  00                 	db	0	; dummy byte at the end
   482  0000                     
   483                           	psect	cinit
   484  00181C                     __pcinit:
   485                           	opt stack 0
   486  00181C                     start_initialization:
   487                           	opt stack 0
   488  00181C                     __initialization:
   489                           	opt stack 0
   490                           
   491                           ; Clear objects allocated to BANK1 (200 bytes)
   492  00181C  EE01  F000         	lfsr	0,__pbssBANK1
   493  001820  0EC8               	movlw	200
   494  001822                     clear_0:
   495  001822  6AEE               	clrf	postinc0,c
   496  001824  06E8               	decf	wreg,f,c
   497  001826  E1FD               	bnz	clear_0
   498                           
   499                           ; Clear objects allocated to BANK0 (65 bytes)
   500  001828  EE00  F080         	lfsr	0,__pbssBANK0
   501  00182C  0E41               	movlw	65
   502  00182E                     clear_1:
   503  00182E  6AEE               	clrf	postinc0,c
   504  001830  06E8               	decf	wreg,f,c
   505  001832  E1FD               	bnz	clear_1
   506                           
   507                           ; Clear objects allocated to COMRAM (35 bytes)
   508  001834  EE00  F036         	lfsr	0,__pbssCOMRAM
   509  001838  0E23               	movlw	35
   510  00183A                     clear_2:
   511  00183A  6AEE               	clrf	postinc0,c
   512  00183C  06E8               	decf	wreg,f,c
   513  00183E  E1FD               	bnz	clear_2
   514  001840                     end_of_initialization:
   515                           	opt stack 0
   516  001840                     __end_of__initialization:
   517                           	opt stack 0
   518  001840  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   519  001842  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   520  001844  0100               	movlb	0
   521  001846  EFF2  F006         	goto	_main	;jump to C main() function
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	bssCOMRAM
   526  000036                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000036                     _W:
   529                           	opt stack 0
   530  000036                     	ds	2
   531  000038                     _S:
   532                           	opt stack 0
   533  000038                     	ds	2
   534  00003A                     _N:
   535                           	opt stack 0
   536  00003A                     	ds	2
   537  00003C                     _B:
   538                           	opt stack 0
   539  00003C                     	ds	2
   540  00003E                     _prev_state:
   541                           	opt stack 0
   542  00003E                     	ds	2
   543  000040                     _total_number:
   544                           	opt stack 0
   545  000040                     	ds	2
   546  000042                     _valid:
   547                           	opt stack 0
   548  000042                     	ds	2
   549  000044                     _error:
   550                           	opt stack 0
   551  000044                     	ds	2
   552  000046                     _counter_step:
   553                           	opt stack 0
   554  000046                     	ds	2
   555  000048                     _counter:
   556                           	opt stack 0
   557  000048                     	ds	2
   558  00004A                     lcd@LCDinterruptState:
   559                           	opt stack 0
   560  00004A                     	ds	1
   561  00004B                     _temp:
   562                           	opt stack 0
   563  00004B                     	ds	1
   564  00004C                     	ds	1
   565  00004D                     _temp_set:
   566                           	opt stack 0
   567  00004D                     	ds	5
   568  000052                     _current_set2:
   569                           	opt stack 0
   570  000052                     	ds	5
   571  000057                     _number:
   572                           	opt stack 0
   573  000057                     	ds	2
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           	psect	bssBANK0
   578  000080                     __pbssBANK0:
   579                           	opt stack 0
   580  000080                     _final_number:
   581                           	opt stack 0
   582  000080                     	ds	16
   583  000090                     _assembly_step:
   584                           	opt stack 0
   585  000090                     	ds	2
   586  000092                     _state:
   587                           	opt stack 0
   588  000092                     	ds	2
   589  000094                     _final_set:
   590                           	opt stack 0
   591  000094                     	ds	40
   592  0000BC                     _current_set:
   593                           	opt stack 0
   594  0000BC                     	ds	5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	bssBANK1
   599  000100                     __pbssBANK1:
   600                           	opt stack 0
   601  000100                     _fastener:
   602                           	opt stack 0
   603  000100                     	ds	200
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackBANK0
   608  0000C1                     __pcstackBANK0:
   609                           	opt stack 0
   610  0000C1                     ?___wmul:
   611                           	opt stack 0
   612  0000C1                     ?___lwdiv:
   613                           	opt stack 0
   614  0000C1                     lcdNibble@temp:
   615                           	opt stack 0
   616  0000C1                     ___wmul@multiplier:
   617                           	opt stack 0
   618  0000C1                     ___lwdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  0000C1                     	ds	1
   623  0000C2                     lcdNibble@data:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x1
   627  0000C2                     	ds	1
   628  0000C3                     lcdInst@data:
   629                           	opt stack 0
   630  0000C3                     putch@data:
   631                           	opt stack 0
   632  0000C3                     ___wmul@multiplicand:
   633                           	opt stack 0
   634  0000C3                     ___lwdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2
   638  0000C3                     	ds	1
   639  0000C4                     ??_initLCD:
   640                           
   641                           ; 1 bytes @ 0x3
   642  0000C4                     	ds	1
   643  0000C5                     ___lwdiv@counter:
   644                           	opt stack 0
   645  0000C5                     ___wmul@product:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x4
   649  0000C5                     	ds	1
   650  0000C6                     ___lwdiv@quotient:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x5
   654  0000C6                     	ds	2
   655  0000C8                     ?___lwmod:
   656                           	opt stack 0
   657  0000C8                     ___lwmod@dividend:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x7
   661  0000C8                     	ds	2
   662  0000CA                     ___lwmod@divisor:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x9
   666  0000CA                     	ds	2
   667  0000CC                     ___lwmod@counter:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0xB
   671  0000CC                     	ds	1
   672  0000CD                     ?_printf:
   673                           	opt stack 0
   674  0000CD                     printf@f:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0xC
   678  0000CD                     	ds	4
   679  0000D1                     ??_printf:
   680                           
   681                           ; 1 bytes @ 0x10
   682  0000D1                     	ds	1
   683  0000D2                     printf@flag:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x11
   687  0000D2                     	ds	1
   688  0000D3                     printf@prec:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x12
   692  0000D3                     	ds	1
   693  0000D4                     printf@ap:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x13
   697  0000D4                     	ds	2
   698  0000D6                     printf@cp:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x15
   702  0000D6                     	ds	2
   703  0000D8                     printf@val:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x17
   707  0000D8                     	ds	2
   708  0000DA                     printf@c:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x19
   712  0000DA                     	ds	1
   713  0000DB                     ??_main:
   714                           
   715                           ; 1 bytes @ 0x1A
   716  0000DB                     	ds	2
   717  0000DD                     main@i:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x1C
   721  0000DD                     	ds	2
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           
   725                           	psect	cstackCOMRAM
   726  000001                     __pcstackCOMRAM:
   727                           	opt stack 0
   728  000001                     ?_check:
   729                           	opt stack 0
   730  000001                     ?_strcmp:
   731                           	opt stack 0
   732  000001                     ?i2___wmul:
   733                           	opt stack 0
   734  000001                     ?i2___lwdiv:
   735                           	opt stack 0
   736  000001                     i2lcdNibble@temp:
   737                           	opt stack 0
   738  000001                     strcat@to:
   739                           	opt stack 0
   740  000001                     strcmp@s1:
   741                           	opt stack 0
   742  000001                     i2___wmul@multiplier:
   743                           	opt stack 0
   744  000001                     i2___lwdiv@dividend:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x0
   748  000001                     	ds	1
   749  000002                     i2lcdNibble@data:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x1
   753  000002                     	ds	1
   754  000003                     i2lcdInst@data:
   755                           	opt stack 0
   756  000003                     i2putch@data:
   757                           	opt stack 0
   758  000003                     strcat@from:
   759                           	opt stack 0
   760  000003                     strcmp@s2:
   761                           	opt stack 0
   762  000003                     i2___wmul@multiplicand:
   763                           	opt stack 0
   764  000003                     i2___lwdiv@divisor:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x2
   768  000003                     	ds	1
   769  000004                     ??i2_initLCD:
   770                           
   771                           ; 1 bytes @ 0x3
   772  000004                     	ds	1
   773  000005                     ??_strcmp:
   774  000005                     strcat@cp:
   775                           	opt stack 0
   776  000005                     i2___wmul@product:
   777                           	opt stack 0
   778  000005                     i2___lwdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x4
   782  000005                     	ds	1
   783  000006                     strcmp@r:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x5
   787  000006                     	ds	1
   788  000007                     ??_is_valid:
   789  000007                     ?_strncmp:
   790                           	opt stack 0
   791  000007                     i2___lwdiv@counter:
   792                           	opt stack 0
   793  000007                     strcpy@to:
   794                           	opt stack 0
   795  000007                     strncmp@s1:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ?i2___lwmod:
   801                           	opt stack 0
   802  000008                     i2___lwmod@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x7
   806  000008                     	ds	1
   807  000009                     strcpy@from:
   808                           	opt stack 0
   809  000009                     strncmp@s2:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x8
   813  000009                     	ds	1
   814  00000A                     i2___lwmod@divisor:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x9
   818  00000A                     	ds	1
   819  00000B                     strcpy@cp:
   820                           	opt stack 0
   821  00000B                     strncmp@len:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0xA
   825  00000B                     	ds	1
   826  00000C                     i2___lwmod@counter:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0xB
   830  00000C                     	ds	1
   831  00000D                     ??_strncmp:
   832  00000D                     ?i2_printf:
   833                           	opt stack 0
   834  00000D                     i2printf@f:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0xC
   838  00000D                     	ds	4
   839  000011                     ??i2_printf:
   840                           
   841                           ; 1 bytes @ 0x10
   842  000011                     	ds	1
   843  000012                     i2printf@flag:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x11
   847  000012                     	ds	1
   848  000013                     i2printf@prec:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x12
   852  000013                     	ds	1
   853  000014                     i2printf@ap:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x13
   857  000014                     	ds	2
   858  000016                     i2printf@cp:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x15
   862  000016                     	ds	2
   863  000018                     i2printf@val:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x17
   867  000018                     	ds	2
   868  00001A                     i2printf@c:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x19
   872  00001A                     	ds	1
   873  00001B                     ??_interruptHandler:
   874                           
   875                           ; 1 bytes @ 0x1A
   876  00001B                     	ds	23
   877  000032                     interruptHandler@i:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x31
   881  000032                     	ds	2
   882  000034                     interruptHandler@temp:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x33
   886  000034                     	ds	1
   887  000035                     interruptHandler@keypress:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x34
   891  000035                     	ds	1
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           
   895 ;;
   896 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   897 ;;
   898 ;; *************** function _main *****************
   899 ;; Defined at:
   900 ;;		line 45 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  i               2   28[BANK0 ] int 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        4 bytes
   919 ;; Hardware stack levels required when called:    7
   920 ;; This function calls:
   921 ;;		___wmul
   922 ;;		_initLCD
   923 ;;		_lcdInst
   924 ;;		_printf
   925 ;; This function is called by:
   926 ;;		Startup code after reset
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text0
   931  000DE4                     __ptext0:
   932                           	opt stack 0
   933  000DE4                     _main:
   934                           	opt stack 24
   935                           
   936                           ;main.c: 51: LATA = 0x00;
   937                           
   938                           ;incstack = 0
   939  000DE4  0E00               	movlw	0
   940  000DE6  6E89               	movwf	3977,c	;volatile
   941                           
   942                           ;main.c: 52: LATB = 0x00;
   943  000DE8  0E00               	movlw	0
   944  000DEA  6E8A               	movwf	3978,c	;volatile
   945                           
   946                           ;main.c: 53: LATC = 0x00;
   947  000DEC  0E00               	movlw	0
   948  000DEE  6E8B               	movwf	3979,c	;volatile
   949                           
   950                           ;main.c: 54: LATD = 0x00;
   951  000DF0  0E00               	movlw	0
   952  000DF2  6E8C               	movwf	3980,c	;volatile
   953                           
   954                           ;main.c: 55: LATE = 0x00;
   955  000DF4  0E00               	movlw	0
   956  000DF6  6E8D               	movwf	3981,c	;volatile
   957                           
   958                           ;main.c: 59: TRISA = 0xFF;
   959  000DF8  6892               	setf	3986,c	;volatile
   960                           
   961                           ;main.c: 60: TRISB = 0xFF;
   962  000DFA  6893               	setf	3987,c	;volatile
   963                           
   964                           ;main.c: 61: TRISC = 0x00;
   965  000DFC  0E00               	movlw	0
   966  000DFE  6E94               	movwf	3988,c	;volatile
   967                           
   968                           ;main.c: 62: TRISD = 0x00;
   969  000E00  0E00               	movlw	0
   970  000E02  6E95               	movwf	3989,c	;volatile
   971                           
   972                           ;main.c: 63: TRISE = 0x00;
   973  000E04  0E00               	movlw	0
   974  000E06  6E96               	movwf	3990,c	;volatile
   975                           
   976                           ;main.c: 66: ADCON0 = 0x00;
   977  000E08  0E00               	movlw	0
   978  000E0A  6EC2               	movwf	4034,c	;volatile
   979                           
   980                           ;main.c: 67: ADCON1 = 0b00001111;
   981  000E0C  0E0F               	movlw	15
   982  000E0E  6EC1               	movwf	4033,c	;volatile
   983                           
   984                           ;main.c: 70: INT1IE = 1;
   985  000E10  86F0               	bsf	intcon3,3,c	;volatile
   986                           
   987                           ;main.c: 71: (INTCONbits.GIE = 1);
   988  000E12  8EF2               	bsf	intcon,7,c	;volatile
   989                           
   990                           ;main.c: 74: initLCD();
   991  000E14  EC16  F00B         	call	_initLCD	;wreg free
   992  000E18                     
   993                           ;main.c: 78: if (state == 0){
   994  000E18  0100               	movlb	0	; () banked
   995  000E1A  5192               	movf	_state& (0+255),w,b
   996  000E1C  1193               	iorwf	(_state+1)& (0+255),w,b
   997  000E1E  A4D8               	btfss	status,2,c
   998  000E20  D023               	goto	l118
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 80: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1002  000E22  0E80               	movlw	128
  1003  000E24  EC58  F00C         	call	_lcdInst
  1004  000E28  0E41               	movlw	65
  1005  000E2A  0100               	movlb	0	; () banked
  1006  000E2C  6FDB               	movwf	??_main& (0+255),b
  1007  000E2E  0EEE               	movlw	238
  1008  000E30                     u2607:
  1009  000E30  2EE8               	decfsz	wreg,f,c
  1010  000E32  D7FE               	bra	u2607
  1011  000E34  2FDB               	decfsz	??_main& (0+255),f,b
  1012  000E36  D7FC               	bra	u2607
  1013  000E38  F000               	nop	
  1014                           
  1015                           ;main.c: 81: printf("assembly step:");
  1016  000E3A  0E5E               	movlw	low STR_1
  1017  000E3C  0100               	movlb	0	; () banked
  1018  000E3E  6FCD               	movwf	printf@f& (0+255),b
  1019  000E40  0EFF               	movlw	high STR_1
  1020  000E42  6FCE               	movwf	(printf@f+1)& (0+255),b
  1021  000E44  EC0D  F008         	call	_printf	;wreg free
  1022                           
  1023                           ;main.c: 83: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1024  000E48  0E33               	movlw	51
  1025  000E4A  0100               	movlb	0	; () banked
  1026  000E4C  6FDC               	movwf	(??_main+1)& (0+255),b
  1027  000E4E  0EBB               	movlw	187
  1028  000E50  6FDB               	movwf	??_main& (0+255),b
  1029  000E52  0EDF               	movlw	223
  1030  000E54                     u2617:
  1031  000E54  2EE8               	decfsz	wreg,f,c
  1032  000E56  D7FE               	bra	u2617
  1033  000E58  2FDB               	decfsz	??_main& (0+255),f,b
  1034  000E5A  D7FC               	bra	u2617
  1035  000E5C  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1036  000E5E  D7FA               	bra	u2617
  1037  000E60  D000               	nop2	
  1038                           
  1039                           ;main.c: 84: lcdInst(0xC0);;
  1040  000E62  0EC0               	movlw	192
  1041  000E64  EC58  F00C         	call	_lcdInst
  1042  000E68                     l118:
  1043                           
  1044                           ;main.c: 88: }
  1045                           ;main.c: 90: if (state ==1){
  1046  000E68  0100               	movlb	0	; () banked
  1047  000E6A  0592               	decf	_state& (0+255),w,b
  1048  000E6C  1193               	iorwf	(_state+1)& (0+255),w,b
  1049  000E6E  A4D8               	btfss	status,2,c
  1050  000E70  D024               	goto	l119
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 91: initLCD();
  1054  000E72  EC16  F00B         	call	_initLCD	;wreg free
  1055                           
  1056                           ;main.c: 93: printf("fastener set:");
  1057  000E76  0E6D               	movlw	low STR_2
  1058  000E78  0100               	movlb	0	; () banked
  1059  000E7A  6FCD               	movwf	printf@f& (0+255),b
  1060  000E7C  0EFF               	movlw	high STR_2
  1061  000E7E  6FCE               	movwf	(printf@f+1)& (0+255),b
  1062  000E80  EC0D  F008         	call	_printf	;wreg free
  1063                           
  1064                           ;main.c: 96: lcdInst(0xC0);;
  1065  000E84  0EC0               	movlw	192
  1066  000E86  EC58  F00C         	call	_lcdInst
  1067                           
  1068                           ;main.c: 97: printf("%s",current_set);
  1069  000E8A  0EF9               	movlw	low STR_3
  1070  000E8C  0100               	movlb	0	; () banked
  1071  000E8E  6FCD               	movwf	printf@f& (0+255),b
  1072  000E90  0EFF               	movlw	high STR_3
  1073  000E92  6FCE               	movwf	(printf@f+1)& (0+255),b
  1074  000E94  0EBC               	movlw	low _current_set
  1075  000E96  6FCF               	movwf	(?_printf+2)& (0+255),b
  1076  000E98  0E00               	movlw	high _current_set
  1077  000E9A  6FD0               	movwf	(?_printf+3)& (0+255),b
  1078  000E9C  EC0D  F008         	call	_printf	;wreg free
  1079                           
  1080                           ;main.c: 98: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1081  000EA0  0E33               	movlw	51
  1082  000EA2  0100               	movlb	0	; () banked
  1083  000EA4  6FDC               	movwf	(??_main+1)& (0+255),b
  1084  000EA6  0EBB               	movlw	187
  1085  000EA8  6FDB               	movwf	??_main& (0+255),b
  1086  000EAA  0EDF               	movlw	223
  1087  000EAC                     u2627:
  1088  000EAC  2EE8               	decfsz	wreg,f,c
  1089  000EAE  D7FE               	bra	u2627
  1090  000EB0  2FDB               	decfsz	??_main& (0+255),f,b
  1091  000EB2  D7FC               	bra	u2627
  1092  000EB4  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1093  000EB6  D7FA               	bra	u2627
  1094  000EB8  D000               	nop2	
  1095  000EBA                     l119:
  1096                           
  1097                           ;main.c: 99: }
  1098                           ;main.c: 101: if (state == 2){
  1099  000EBA  0E02               	movlw	2
  1100  000EBC  0100               	movlb	0	; () banked
  1101  000EBE  1992               	xorwf	_state& (0+255),w,b
  1102  000EC0  1193               	iorwf	(_state+1)& (0+255),w,b
  1103  000EC2  A4D8               	btfss	status,2,c
  1104  000EC4  D016               	goto	l120
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;main.c: 102: initLCD();
  1108  000EC6  EC16  F00B         	call	_initLCD	;wreg free
  1109                           
  1110                           ;main.c: 104: printf("number:");
  1111  000ECA  0EA4               	movlw	low STR_4
  1112  000ECC  0100               	movlb	0	; () banked
  1113  000ECE  6FCD               	movwf	printf@f& (0+255),b
  1114  000ED0  0EFF               	movlw	high STR_4
  1115  000ED2  6FCE               	movwf	(printf@f+1)& (0+255),b
  1116  000ED4  EC0D  F008         	call	_printf	;wreg free
  1117                           
  1118                           ;main.c: 106: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1119  000ED8  0E33               	movlw	51
  1120  000EDA  0100               	movlb	0	; () banked
  1121  000EDC  6FDC               	movwf	(??_main+1)& (0+255),b
  1122  000EDE  0EBB               	movlw	187
  1123  000EE0  6FDB               	movwf	??_main& (0+255),b
  1124  000EE2  0EDF               	movlw	223
  1125  000EE4                     u2637:
  1126  000EE4  2EE8               	decfsz	wreg,f,c
  1127  000EE6  D7FE               	bra	u2637
  1128  000EE8  2FDB               	decfsz	??_main& (0+255),f,b
  1129  000EEA  D7FC               	bra	u2637
  1130  000EEC  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1131  000EEE  D7FA               	bra	u2637
  1132  000EF0  D000               	nop2	
  1133  000EF2                     l120:
  1134                           
  1135                           ;main.c: 107: }
  1136                           ;main.c: 109: if (state == 3){
  1137  000EF2  0E03               	movlw	3
  1138  000EF4  0100               	movlb	0	; () banked
  1139  000EF6  1992               	xorwf	_state& (0+255),w,b
  1140  000EF8  1193               	iorwf	(_state+1)& (0+255),w,b
  1141  000EFA  A4D8               	btfss	status,2,c
  1142  000EFC  D78D               	goto	l117
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;main.c: 110: initLCD();
  1146  000EFE  EC16  F00B         	call	_initLCD	;wreg free
  1147                           
  1148                           ;main.c: 112: printf("Done!");
  1149  000F02  0EBA               	movlw	low STR_5
  1150  000F04  0100               	movlb	0	; () banked
  1151  000F06  6FCD               	movwf	printf@f& (0+255),b
  1152  000F08  0EFF               	movlw	high STR_5
  1153  000F0A  6FCE               	movwf	(printf@f+1)& (0+255),b
  1154  000F0C  EC0D  F008         	call	_printf	;wreg free
  1155                           
  1156                           ;main.c: 113: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1157  000F10  0E66               	movlw	102
  1158  000F12  0100               	movlb	0	; () banked
  1159  000F14  6FDC               	movwf	(??_main+1)& (0+255),b
  1160  000F16  0E76               	movlw	118
  1161  000F18  6FDB               	movwf	??_main& (0+255),b
  1162  000F1A  0EC1               	movlw	193
  1163  000F1C                     u2647:
  1164  000F1C  2EE8               	decfsz	wreg,f,c
  1165  000F1E  D7FE               	bra	u2647
  1166  000F20  2FDB               	decfsz	??_main& (0+255),f,b
  1167  000F22  D7FC               	bra	u2647
  1168  000F24  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1169  000F26  D7FA               	bra	u2647
  1170                           
  1171                           ;main.c: 114: initLCD();
  1172  000F28  EC16  F00B         	call	_initLCD	;wreg free
  1173                           
  1174                           ;main.c: 115: printf("assembly step:%d",assembly_step);
  1175  000F2C  0E3E               	movlw	low STR_6
  1176  000F2E  0100               	movlb	0	; () banked
  1177  000F30  6FCD               	movwf	printf@f& (0+255),b
  1178  000F32  0EFF               	movlw	high STR_6
  1179  000F34  6FCE               	movwf	(printf@f+1)& (0+255),b
  1180  000F36  C090  F0CF         	movff	_assembly_step,?_printf+2
  1181  000F3A  C091  F0D0         	movff	_assembly_step+1,?_printf+3
  1182  000F3E  EC0D  F008         	call	_printf	;wreg free
  1183                           
  1184                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1185  000F42  0E33               	movlw	51
  1186  000F44  0100               	movlb	0	; () banked
  1187  000F46  6FDC               	movwf	(??_main+1)& (0+255),b
  1188  000F48  0EBB               	movlw	187
  1189  000F4A  6FDB               	movwf	??_main& (0+255),b
  1190  000F4C  0EDF               	movlw	223
  1191  000F4E                     u2657:
  1192  000F4E  2EE8               	decfsz	wreg,f,c
  1193  000F50  D7FE               	bra	u2657
  1194  000F52  2FDB               	decfsz	??_main& (0+255),f,b
  1195  000F54  D7FC               	bra	u2657
  1196  000F56  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1197  000F58  D7FA               	bra	u2657
  1198  000F5A  D000               	nop2	
  1199                           
  1200                           ;main.c: 117: for (int i=0; i<assembly_step; i++){
  1201  000F5C  0E00               	movlw	0
  1202  000F5E  0100               	movlb	0	; () banked
  1203  000F60  6FDE               	movwf	(main@i+1)& (0+255),b
  1204  000F62  0E00               	movlw	0
  1205  000F64  6FDD               	movwf	main@i& (0+255),b
  1206  000F66  D04E               	goto	l122
  1207  000F68                     
  1208                           ; BSR set to: 0
  1209                           ;main.c: 119: initLCD();
  1210                           
  1211                           ; BSR set to: 0
  1212  000F68  EC16  F00B         	call	_initLCD	;wreg free
  1213                           
  1214                           ;main.c: 121: printf("%s", final_set[i]);
  1215  000F6C  0EF9               	movlw	low STR_3
  1216  000F6E  0100               	movlb	0	; () banked
  1217  000F70  6FCD               	movwf	printf@f& (0+255),b
  1218  000F72  0EFF               	movlw	high STR_3
  1219  000F74  6FCE               	movwf	(printf@f+1)& (0+255),b
  1220  000F76  C0DD  F0C1         	movff	main@i,___wmul@multiplier
  1221  000F7A  C0DE  F0C2         	movff	main@i+1,___wmul@multiplier+1
  1222  000F7E  0E00               	movlw	0
  1223  000F80  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1224  000F82  0E05               	movlw	5
  1225  000F84  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  1226  000F86  EC25  F00C         	call	___wmul	;wreg free
  1227  000F8A  0E94               	movlw	low _final_set
  1228  000F8C  0100               	movlb	0	; () banked
  1229  000F8E  25C1               	addwf	?___wmul& (0+255),w,b
  1230  000F90  6FCF               	movwf	(?_printf+2)& (0+255),b
  1231  000F92  0E00               	movlw	high _final_set
  1232  000F94  21C2               	addwfc	(?___wmul+1)& (0+255),w,b
  1233  000F96  6FD0               	movwf	(?_printf+3)& (0+255),b
  1234  000F98  EC0D  F008         	call	_printf	;wreg free
  1235                           
  1236                           ;main.c: 122: printf("%d",final_number[i]);
  1237  000F9C  0E4C               	movlw	low (STR_6+14)
  1238  000F9E  0100               	movlb	0	; () banked
  1239  000FA0  6FCD               	movwf	printf@f& (0+255),b
  1240  000FA2  0EFF               	movlw	high (STR_6+14)
  1241  000FA4  6FCE               	movwf	(printf@f+1)& (0+255),b
  1242  000FA6  90D8               	bcf	status,0,c
  1243  000FA8  35DD               	rlcf	main@i& (0+255),w,b
  1244  000FAA  6ED9               	movwf	fsr2l,c
  1245  000FAC  35DE               	rlcf	(main@i+1)& (0+255),w,b
  1246  000FAE  6EDA               	movwf	fsr2h,c
  1247  000FB0  0E80               	movlw	low _final_number
  1248  000FB2  26D9               	addwf	fsr2l,f,c
  1249  000FB4  0E00               	movlw	high _final_number
  1250  000FB6  22DA               	addwfc	fsr2h,f,c
  1251  000FB8  CFDE F0CF          	movff	postinc2,?_printf+2
  1252  000FBC  CFDD F0D0          	movff	postdec2,?_printf+3
  1253  000FC0  EC0D  F008         	call	_printf	;wreg free
  1254                           
  1255                           ;main.c: 123: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1256  000FC4  0E33               	movlw	51
  1257  000FC6  0100               	movlb	0	; () banked
  1258  000FC8  6FDC               	movwf	(??_main+1)& (0+255),b
  1259  000FCA  0EBB               	movlw	187
  1260  000FCC  6FDB               	movwf	??_main& (0+255),b
  1261  000FCE  0EDF               	movlw	223
  1262  000FD0                     u2667:
  1263  000FD0  2EE8               	decfsz	wreg,f,c
  1264  000FD2  D7FE               	bra	u2667
  1265  000FD4  2FDB               	decfsz	??_main& (0+255),f,b
  1266  000FD6  D7FC               	bra	u2667
  1267  000FD8  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1268  000FDA  D7FA               	bra	u2667
  1269  000FDC  D000               	nop2	
  1270                           
  1271                           ;main.c: 124: lcdInst(0xC0);;
  1272  000FDE  0EC0               	movlw	192
  1273  000FE0  EC58  F00C         	call	_lcdInst
  1274                           
  1275                           ;main.c: 128: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1276  000FE4  0E33               	movlw	51
  1277  000FE6  0100               	movlb	0	; () banked
  1278  000FE8  6FDC               	movwf	(??_main+1)& (0+255),b
  1279  000FEA  0EBB               	movlw	187
  1280  000FEC  6FDB               	movwf	??_main& (0+255),b
  1281  000FEE  0EDF               	movlw	223
  1282  000FF0                     u2677:
  1283  000FF0  2EE8               	decfsz	wreg,f,c
  1284  000FF2  D7FE               	bra	u2677
  1285  000FF4  2FDB               	decfsz	??_main& (0+255),f,b
  1286  000FF6  D7FC               	bra	u2677
  1287  000FF8  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  1288  000FFA  D7FA               	bra	u2677
  1289  000FFC  D000               	nop2	
  1290  000FFE  0100               	movlb	0	; () banked
  1291  001000  4BDD               	infsnz	main@i& (0+255),f,b
  1292  001002  2BDE               	incf	(main@i+1)& (0+255),f,b
  1293  001004                     l122:
  1294                           
  1295                           ; BSR set to: 0
  1296  001004  5190               	movf	_assembly_step& (0+255),w,b
  1297  001006  5DDD               	subwf	main@i& (0+255),w,b
  1298  001008  51DE               	movf	(main@i+1)& (0+255),w,b
  1299  00100A  0A80               	xorlw	128
  1300  00100C  6FDB               	movwf	??_main& (0+255),b
  1301  00100E  5191               	movf	(_assembly_step+1)& (0+255),w,b
  1302  001010  0A80               	xorlw	128
  1303  001012  59DB               	subwfb	??_main& (0+255),w,b
  1304  001014  B0D8               	btfsc	status,0,c
  1305  001016  D700               	goto	l117
  1306  001018  D7A7               	goto	l123
  1307  00101A                     __end_of_main:
  1308                           	opt stack 0
  1309                           intcon	equ	0xFF2
  1310                           intcon3	equ	0xFF0
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postinc2	equ	0xFDE
  1314                           postdec2	equ	0xFDD
  1315                           fsr2h	equ	0xFDA
  1316                           fsr2l	equ	0xFD9
  1317                           status	equ	0xFD8
  1318                           
  1319 ;; *************** function _printf *****************
  1320 ;; Defined at:
  1321 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1324 ;;		 -> STR_24(6), STR_23(9), STR_22(12), STR_20(7), 
  1325 ;;		 -> STR_18(3), STR_17(11), STR_15(3), STR_14(9), 
  1326 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  1327 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  1328 ;;		 -> STR_1(15), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  tmpval          4    0        struct .
  1331 ;;  val             2   23[BANK0 ] unsigned int 
  1332 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  1333 ;;		 -> STR_45(7), final_set(40), current_set(5), 
  1334 ;;  ap              2   19[BANK0 ] PTR void [1]
  1335 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1336 ;;  len             2    0        unsigned int 
  1337 ;;  c               1   25[BANK0 ] char 
  1338 ;;  prec            1   18[BANK0 ] char 
  1339 ;;  flag            1   17[BANK0 ] unsigned char 
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  2   12[BANK0 ] int 
  1342 ;; Registers used:
  1343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;Total ram usage:       14 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    6
  1356 ;; This function calls:
  1357 ;;		___lwdiv
  1358 ;;		___lwmod
  1359 ;;		_putch
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text1
  1366  00101A                     __ptext1:
  1367                           	opt stack 0
  1368  00101A                     _printf:
  1369                           	opt stack 24
  1370                           
  1371                           ;doprnt.c: 466: va_list ap;
  1372                           ;doprnt.c: 499: signed char c;
  1373                           ;doprnt.c: 506: signed char prec;
  1374                           ;doprnt.c: 508: unsigned char flag;
  1375                           ;doprnt.c: 523: union {
  1376                           ;doprnt.c: 524: unsigned long vd;
  1377                           ;doprnt.c: 525: double integ;
  1378                           ;doprnt.c: 526: } tmpval;
  1379                           ;doprnt.c: 528: unsigned int val;
  1380                           ;doprnt.c: 529: unsigned len;
  1381                           ;doprnt.c: 530: const char * cp;
  1382                           ;doprnt.c: 533: *ap = __va_start();
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;incstack = 0
  1386  00101A  0ECF               	movlw	low (?_printf+2)
  1387  00101C  0100               	movlb	0	; () banked
  1388  00101E  6FD4               	movwf	printf@ap& (0+255),b
  1389  001020  0E00               	movlw	high (?_printf+2)
  1390  001022  6FD5               	movwf	(printf@ap+1)& (0+255),b
  1391                           
  1392                           ;doprnt.c: 536: while(c = *f++) {
  1393  001024  D0D0               	goto	u2470
  1394  001026                     
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 538: if(c != '%')
  1397                           
  1398                           ; BSR set to: 0
  1399  001026  0E25               	movlw	37
  1400  001028  19DA               	xorwf	printf@c& (0+255),w,b
  1401  00102A  B4D8               	btfsc	status,2,c
  1402  00102C  D004               	goto	l293
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;doprnt.c: 540: {
  1406                           ;doprnt.c: 541: (putch(c) );
  1407  00102E  51DA               	movf	printf@c& (0+255),w,b
  1408  001030  EC4C  F00C         	call	_putch
  1409                           
  1410                           ;doprnt.c: 542: continue;
  1411  001034  D0C8               	goto	u2470
  1412  001036                     l293:
  1413                           
  1414                           ;doprnt.c: 543: }
  1415                           ;doprnt.c: 548: flag = 0;
  1416  001036  0E00               	movlw	0
  1417  001038  0100               	movlb	0	; () banked
  1418  00103A  6FD2               	movwf	printf@flag& (0+255),b
  1419                           
  1420                           ;doprnt.c: 635: switch(c = *f++) {
  1421  00103C  D040               	goto	l294
  1422  00103E                     
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1425                           
  1426                           ; BSR set to: 0
  1427  00103E  C0D4  FFD9         	movff	printf@ap,fsr2l
  1428  001042  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1429  001046  CFDE F0D6          	movff	postinc2,printf@cp
  1430  00104A  CFDD F0D7          	movff	postdec2,printf@cp+1
  1431                           
  1432                           ; BSR set to: 0
  1433  00104E  0E02               	movlw	2
  1434  001050  27D4               	addwf	printf@ap& (0+255),f,b
  1435  001052  0E00               	movlw	0
  1436  001054  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 740: if(!cp)
  1440  001056  51D6               	movf	printf@cp& (0+255),w,b
  1441  001058  11D7               	iorwf	(printf@cp+1)& (0+255),w,b
  1442  00105A  A4D8               	btfss	status,2,c
  1443  00105C  D01B               	goto	l302
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 741: cp = "(null)";
  1447  00105E  0EAC               	movlw	low STR_45
  1448  001060  6FD6               	movwf	printf@cp& (0+255),b
  1449  001062  0EFF               	movlw	high STR_45
  1450  001064  6FD7               	movwf	(printf@cp+1)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 777: while(*cp)
  1454  001066  D016               	goto	l302
  1455  001068                     
  1456                           ;doprnt.c: 778: (putch(*cp++) );
  1457                           
  1458                           ; BSR set to: 0
  1459  001068  C0D6  FFF6         	movff	printf@cp,tblptrl
  1460  00106C  C0D7  FFF7         	movff	printf@cp+1,tblptrh
  1461  001070  0E00               	movlw	low (__mediumconst shr (0+16))
  1462  001072  6EF8               	movwf	tblptru,c
  1463  001074  0E0F               	movlw	(high __ramtop+-1)
  1464  001076  64F7               	cpfsgt	tblptrh,c
  1465  001078  D003               	bra	u2397
  1466  00107A  0008               	tblrd		*
  1467  00107C  50F5               	movf	tablat,w,c
  1468  00107E  D005               	bra	u2390
  1469  001080                     u2397:
  1470  001080  CFF6 FFE9          	movff	tblptrl,fsr0l
  1471  001084  CFF7 FFEA          	movff	tblptrh,fsr0h
  1472  001088  50EF               	movf	indf0,w,c
  1473  00108A                     u2390:
  1474  00108A  EC4C  F00C         	call	_putch
  1475  00108E  0100               	movlb	0	; () banked
  1476  001090  4BD6               	infsnz	printf@cp& (0+255),f,b
  1477  001092  2BD7               	incf	(printf@cp+1)& (0+255),f,b
  1478  001094                     l302:
  1479                           
  1480                           ; BSR set to: 0
  1481                           
  1482                           ; BSR set to: 0
  1483  001094  C0D6  FFF6         	movff	printf@cp,tblptrl
  1484  001098  C0D7  FFF7         	movff	printf@cp+1,tblptrh
  1485  00109C  0E00               	movlw	low (__mediumconst shr (0+16))
  1486  00109E  6EF8               	movwf	tblptru,c
  1487  0010A0  0E0F               	movlw	(high __ramtop+-1)
  1488  0010A2  64F7               	cpfsgt	tblptrh,c
  1489  0010A4  D003               	bra	u2407
  1490  0010A6  0008               	tblrd		*
  1491  0010A8  50F5               	movf	tablat,w,c
  1492  0010AA  D005               	bra	u2400
  1493  0010AC                     u2407:
  1494  0010AC  CFF6 FFE9          	movff	tblptrl,fsr0l
  1495  0010B0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1496  0010B4  50EF               	movf	indf0,w,c
  1497  0010B6                     u2400:
  1498  0010B6  0900               	iorlw	0
  1499  0010B8  B4D8               	btfsc	status,2,c
  1500  0010BA  D085               	goto	u2470
  1501  0010BC  D7D5               	goto	l303
  1502  0010BE                     l294:
  1503  0010BE  C0CD  FFF6         	movff	printf@f,tblptrl
  1504  0010C2  C0CE  FFF7         	movff	printf@f+1,tblptrh
  1505  0010C6  0100               	movlb	0	; () banked
  1506  0010C8  4BCD               	infsnz	printf@f& (0+255),f,b
  1507  0010CA  2BCE               	incf	(printf@f+1)& (0+255),f,b
  1508  0010CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1509  0010CC  6AF8               	clrf	tblptru,c
  1510  0010CE                     	endif
  1511  0010CE                     	if	0	;tblptru may be non-zero
  1512  0010CE                     	endif
  1513  0010CE  0008               	tblrd		*
  1514  0010D0  CFF5 F0DA          	movff	tablat,printf@c
  1515  0010D4  51DA               	movf	printf@c& (0+255),w,b
  1516                           
  1517                           ; Switch size 1, requested type "space"
  1518                           ; Number of cases is 4, Range of values is 0 to 115
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte           13     7 (average)
  1522                           ;	Chosen strategy is simple_byte
  1523  0010D6  0A00               	xorlw	0	; case 0
  1524  0010D8  B4D8               	btfsc	status,2,c
  1525  0010DA  0012               	return	
  1526  0010DC  0A64               	xorlw	100	; case 100
  1527  0010DE  B4D8               	btfsc	status,2,c
  1528  0010E0  D007               	goto	l299
  1529  0010E2  0A0D               	xorlw	13	; case 105
  1530  0010E4  B4D8               	btfsc	status,2,c
  1531  0010E6  D004               	goto	l299
  1532  0010E8  0A1A               	xorlw	26	; case 115
  1533  0010EA  B4D8               	btfsc	status,2,c
  1534  0010EC  D7A8               	goto	l300
  1535  0010EE  D06B               	goto	u2470
  1536  0010F0                     l299:
  1537                           
  1538                           ;doprnt.c: 1253: {
  1539                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1540                           
  1541                           ; BSR set to: 0
  1542  0010F0  C0D4  FFD9         	movff	printf@ap,fsr2l
  1543  0010F4  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1544  0010F8  CFDE F0D8          	movff	postinc2,printf@val
  1545  0010FC  CFDD F0D9          	movff	postdec2,printf@val+1
  1546  001100  0E02               	movlw	2
  1547  001102  0100               	movlb	0	; () banked
  1548  001104  27D4               	addwf	printf@ap& (0+255),f,b
  1549  001106  0E00               	movlw	0
  1550  001108  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;doprnt.c: 1261: if((int)val < 0) {
  1554  00110A  AFD9               	btfss	(printf@val+1)& (0+255),7,b
  1555  00110C  D006               	goto	l306
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;doprnt.c: 1262: flag |= 0x03;
  1559  00110E  0E03               	movlw	3
  1560  001110  13D2               	iorwf	printf@flag& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 1263: val = -val;
  1564  001112  6DD8               	negf	printf@val& (0+255),b
  1565  001114  1FD9               	comf	(printf@val+1)& (0+255),f,b
  1566  001116  B0D8               	btfsc	status,0,c
  1567  001118  2BD9               	incf	(printf@val+1)& (0+255),f,b
  1568  00111A                     l306:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;doprnt.c: 1264: }
  1572                           ;doprnt.c: 1266: }
  1573                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1574                           
  1575                           ; BSR set to: 0
  1576  00111A  0E01               	movlw	1
  1577  00111C  6FDA               	movwf	printf@c& (0+255),b
  1578  00111E                     l2995:
  1579                           
  1580                           ; BSR set to: 0
  1581  00111E  0E05               	movlw	5
  1582  001120  19DA               	xorwf	printf@c& (0+255),w,b
  1583  001122  B4D8               	btfsc	status,2,c
  1584  001124  D015               	goto	u2450
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;doprnt.c: 1306: if(val < dpowers[c])
  1588                           
  1589                           ; BSR set to: 0
  1590                           
  1591                           ; BSR set to: 0
  1592  001126  51DA               	movf	printf@c& (0+255),w,b
  1593  001128  0D02               	mullw	2
  1594  00112A  0ECA               	movlw	low _dpowers
  1595  00112C  24F3               	addwf	prodl,w,c
  1596  00112E  6EF6               	movwf	tblptrl,c
  1597  001130  0EFE               	movlw	high _dpowers
  1598  001132  20F4               	addwfc	prodh,w,c
  1599  001134  6EF7               	movwf	tblptrh,c
  1600  001136                     	if	1	;There are 3 active tblptr bytes
  1601  001136  6AF8               	clrf	tblptru,c
  1602  001138  0E00               	movlw	low (__mediumconst shr (0+16))
  1603  00113A  22F8               	addwfc	tblptru,f,c
  1604  00113C                     	endif
  1605  00113C  0009               	tblrd		*+
  1606  00113E  50F5               	movf	tablat,w,c
  1607  001140  5DD8               	subwf	printf@val& (0+255),w,b
  1608  001142  0009               	tblrd		*+
  1609  001144  50F5               	movf	tablat,w,c
  1610  001146  59D9               	subwfb	(printf@val+1)& (0+255),w,b
  1611  001148  A0D8               	btfss	status,0,c
  1612  00114A  D002               	goto	u2450
  1613                           
  1614                           ; BSR set to: 0
  1615                           
  1616                           ; BSR set to: 0
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;doprnt.c: 1307: break;
  1620  00114C  2BDA               	incf	printf@c& (0+255),f,b
  1621  00114E  D7E7               	goto	l2995
  1622  001150                     u2450:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;doprnt.c: 1422: {
  1626                           ;doprnt.c: 1438: if(flag & 0x03)
  1627                           
  1628                           ; BSR set to: 0
  1629  001150  C0D2  F0D1         	movff	printf@flag,??_printf
  1630  001154  0E03               	movlw	3
  1631  001156  17D1               	andwf	??_printf& (0+255),f,b
  1632  001158  B4D8               	btfsc	status,2,c
  1633  00115A  D003               	goto	l310
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 1439: (putch('-') );
  1637  00115C  0E2D               	movlw	45
  1638  00115E  EC4C  F00C         	call	_putch
  1639  001162                     l310:
  1640                           
  1641                           ;doprnt.c: 1469: }
  1642                           ;doprnt.c: 1472: prec = c;
  1643  001162  C0DA  F0D3         	movff	printf@c,printf@prec
  1644                           
  1645                           ;doprnt.c: 1474: while(prec--) {
  1646  001166  D02A               	goto	l311
  1647  001168                     
  1648                           ;doprnt.c: 1478: {
  1649                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1650  001168  0100               	movlb	0	; () banked
  1651  00116A  51D3               	movf	printf@prec& (0+255),w,b
  1652  00116C  0D02               	mullw	2
  1653  00116E  0ECA               	movlw	low _dpowers
  1654  001170  24F3               	addwf	prodl,w,c
  1655  001172  6EF6               	movwf	tblptrl,c
  1656  001174  0EFE               	movlw	high _dpowers
  1657  001176  20F4               	addwfc	prodh,w,c
  1658  001178  6EF7               	movwf	tblptrh,c
  1659  00117A                     	if	1	;There are 3 active tblptr bytes
  1660  00117A  6AF8               	clrf	tblptru,c
  1661  00117C  0E00               	movlw	low (__mediumconst shr (0+16))
  1662  00117E  22F8               	addwfc	tblptru,f,c
  1663  001180                     	endif
  1664  001180  0009               	tblrd		*+
  1665  001182  CFF5 F0C3          	movff	tablat,___lwdiv@divisor
  1666  001186  000A               	tblrd		*-
  1667  001188  CFF5 F0C4          	movff	tablat,___lwdiv@divisor+1
  1668  00118C  C0D8  F0C1         	movff	printf@val,___lwdiv@dividend
  1669  001190  C0D9  F0C2         	movff	printf@val+1,___lwdiv@dividend+1
  1670  001194  ECC3  F00A         	call	___lwdiv	;wreg free
  1671  001198  C0C1  F0C8         	movff	?___lwdiv,___lwmod@dividend
  1672  00119C  C0C2  F0C9         	movff	?___lwdiv+1,___lwmod@dividend+1
  1673  0011A0  0E00               	movlw	0
  1674  0011A2  0100               	movlb	0	; () banked
  1675  0011A4  6FCB               	movwf	(___lwmod@divisor+1)& (0+255),b
  1676  0011A6  0E0A               	movlw	10
  1677  0011A8  6FCA               	movwf	___lwmod@divisor& (0+255),b
  1678  0011AA  ECAA  F00B         	call	___lwmod	;wreg free
  1679  0011AE  0100               	movlb	0	; () banked
  1680  0011B0  51C8               	movf	?___lwmod& (0+255),w,b
  1681  0011B2  0F30               	addlw	48
  1682  0011B4  6FDA               	movwf	printf@c& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;doprnt.c: 1523: }
  1686                           ;doprnt.c: 1524: (putch(c) );
  1687  0011B6  51DA               	movf	printf@c& (0+255),w,b
  1688  0011B8  EC4C  F00C         	call	_putch
  1689  0011BC                     l311:
  1690  0011BC  0100               	movlb	0	; () banked
  1691  0011BE  07D3               	decf	printf@prec& (0+255),f,b
  1692  0011C0  29D3               	incf	printf@prec& (0+255),w,b
  1693  0011C2  A4D8               	btfss	status,2,c
  1694  0011C4  D7D1               	goto	l312
  1695  0011C6                     u2470:
  1696                           
  1697                           ; BSR set to: 0
  1698                           
  1699                           ; BSR set to: 0
  1700  0011C6  C0CD  FFF6         	movff	printf@f,tblptrl
  1701  0011CA  C0CE  FFF7         	movff	printf@f+1,tblptrh
  1702  0011CE  0100               	movlb	0	; () banked
  1703  0011D0  4BCD               	infsnz	printf@f& (0+255),f,b
  1704  0011D2  2BCE               	incf	(printf@f+1)& (0+255),f,b
  1705  0011D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1706  0011D4  6AF8               	clrf	tblptru,c
  1707  0011D6                     	endif
  1708  0011D6                     	if	0	;tblptru may be non-zero
  1709  0011D6                     	endif
  1710  0011D6  0008               	tblrd		*
  1711  0011D8  CFF5 F0DA          	movff	tablat,printf@c
  1712  0011DC  51DA               	movf	printf@c& (0+255),w,b
  1713  0011DE  B4D8               	btfsc	status,2,c
  1714  0011E0  0012               	return	
  1715  0011E2  D721               	goto	l292
  1716  0011E4                     __end_of_printf:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           intcon	equ	0xFF2
  1725                           intcon3	equ	0xFF0
  1726                           indf0	equ	0xFEF
  1727                           postinc0	equ	0xFEE
  1728                           fsr0h	equ	0xFEA
  1729                           fsr0l	equ	0xFE9
  1730                           wreg	equ	0xFE8
  1731                           postinc2	equ	0xFDE
  1732                           postdec2	equ	0xFDD
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _putch *****************
  1738 ;; Defined at:
  1739 ;;		line 24 in file "lcd.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  data            1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  data            1    2[BANK0 ] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		_lcdNibble
  1762 ;; This function is called by:
  1763 ;;		_printf
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text2
  1768  001898                     __ptext2:
  1769                           	opt stack 0
  1770  001898                     _putch:
  1771                           	opt stack 24
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;incstack = 0
  1775                           ;putch@data stored from wreg
  1776  001898  0100               	movlb	0	; () banked
  1777  00189A  6FC3               	movwf	putch@data& (0+255),b
  1778                           
  1779                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1780  00189C  848C               	bsf	3980,2,c	;volatile
  1781                           
  1782                           ;lcd.c: 33: lcdNibble(data);
  1783  00189E  0100               	movlb	0	; () banked
  1784  0018A0  51C3               	movf	putch@data& (0+255),w,b
  1785  0018A2  EC10  F00A         	call	_lcdNibble
  1786                           
  1787                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1788  0018A6  0EC8               	movlw	200
  1789  0018A8                     u2687:
  1790  0018A8  D000               	nop2	
  1791  0018AA  2EE8               	decfsz	wreg,f,c
  1792  0018AC  D7FD               	bra	u2687
  1793  0018AE  0012               	return		;funcret
  1794  0018B0                     __end_of_putch:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           intcon	equ	0xFF2
  1803                           intcon3	equ	0xFF0
  1804                           indf0	equ	0xFEF
  1805                           postinc0	equ	0xFEE
  1806                           fsr0h	equ	0xFEA
  1807                           fsr0l	equ	0xFE9
  1808                           wreg	equ	0xFE8
  1809                           postinc2	equ	0xFDE
  1810                           postdec2	equ	0xFDD
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function ___lwmod *****************
  1816 ;; Defined at:
  1817 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  dividend        2    7[BANK0 ] unsigned int 
  1820 ;;  divisor         2    9[BANK0 ] unsigned int 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  counter         1   11[BANK0 ] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  2    7[BANK0 ] unsigned int 
  1825 ;; Registers used:
  1826 ;;		wreg, status,2, status,0
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;Total ram usage:        5 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    4
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_printf
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text3
  1847  001754                     __ptext3:
  1848                           	opt stack 0
  1849  001754                     ___lwmod:
  1850                           	opt stack 25
  1851                           
  1852                           ;incstack = 0
  1853  001754  0100               	movlb	0	; () banked
  1854  001756  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1855  001758  11CB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1856  00175A  B4D8               	btfsc	status,2,c
  1857  00175C  D018               	goto	l734
  1858                           
  1859                           ; BSR set to: 0
  1860  00175E  0E01               	movlw	1
  1861  001760  6FCC               	movwf	___lwmod@counter& (0+255),b
  1862  001762  D004               	goto	l729
  1863  001764                     
  1864                           ; BSR set to: 0
  1865                           
  1866                           ; BSR set to: 0
  1867  001764  90D8               	bcf	status,0,c
  1868  001766  37CA               	rlcf	___lwmod@divisor& (0+255),f,b
  1869  001768  37CB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1870  00176A  2BCC               	incf	___lwmod@counter& (0+255),f,b
  1871  00176C                     l729:
  1872                           
  1873                           ; BSR set to: 0
  1874                           
  1875                           ; BSR set to: 0
  1876  00176C  AFCB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1877  00176E  D7FA               	goto	l730
  1878  001770                     u2350:
  1879                           
  1880                           ; BSR set to: 0
  1881                           
  1882                           ; BSR set to: 0
  1883                           
  1884                           ; BSR set to: 0
  1885  001770  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1886  001772  5DC8               	subwf	___lwmod@dividend& (0+255),w,b
  1887  001774  51CB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1888  001776  59C9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1889  001778  A0D8               	btfss	status,0,c
  1890  00177A  D004               	goto	l733
  1891                           
  1892                           ; BSR set to: 0
  1893  00177C  51CA               	movf	___lwmod@divisor& (0+255),w,b
  1894  00177E  5FC8               	subwf	___lwmod@dividend& (0+255),f,b
  1895  001780  51CB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1896  001782  5BC9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1897  001784                     l733:
  1898                           
  1899                           ; BSR set to: 0
  1900                           
  1901                           ; BSR set to: 0
  1902  001784  90D8               	bcf	status,0,c
  1903  001786  33CB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1904  001788  33CA               	rrcf	___lwmod@divisor& (0+255),f,b
  1905                           
  1906                           ; BSR set to: 0
  1907  00178A  2FCC               	decfsz	___lwmod@counter& (0+255),f,b
  1908  00178C  D7F1               	goto	u2350
  1909  00178E                     l734:
  1910                           
  1911                           ; BSR set to: 0
  1912                           
  1913                           ; BSR set to: 0
  1914  00178E  C0C8  F0C8         	movff	___lwmod@dividend,?___lwmod
  1915  001792  C0C9  F0C9         	movff	___lwmod@dividend+1,?___lwmod+1
  1916                           
  1917                           ; BSR set to: 0
  1918  001796  0012               	return		;funcret
  1919  001798                     __end_of___lwmod:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon3	equ	0xFF0
  1929                           indf0	equ	0xFEF
  1930                           postinc0	equ	0xFEE
  1931                           fsr0h	equ	0xFEA
  1932                           fsr0l	equ	0xFE9
  1933                           wreg	equ	0xFE8
  1934                           postinc2	equ	0xFDE
  1935                           postdec2	equ	0xFDD
  1936                           fsr2h	equ	0xFDA
  1937                           fsr2l	equ	0xFD9
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function ___lwdiv *****************
  1941 ;; Defined at:
  1942 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  dividend        2    0[BANK0 ] unsigned int 
  1945 ;;  divisor         2    2[BANK0 ] unsigned int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  quotient        2    5[BANK0 ] unsigned int 
  1948 ;;  counter         1    4[BANK0 ] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2    0[BANK0 ] unsigned int 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        7 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    4
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_printf
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text4
  1973  001586                     __ptext4:
  1974                           	opt stack 0
  1975  001586                     ___lwdiv:
  1976                           	opt stack 25
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;incstack = 0
  1980  001586  0E00               	movlw	0
  1981  001588  0100               	movlb	0	; () banked
  1982  00158A  6FC7               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1983  00158C  0E00               	movlw	0
  1984  00158E  6FC6               	movwf	___lwdiv@quotient& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987  001590  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  1988  001592  11C4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1989  001594  B4D8               	btfsc	status,2,c
  1990  001596  D01C               	goto	l724
  1991                           
  1992                           ; BSR set to: 0
  1993  001598  0E01               	movlw	1
  1994  00159A  6FC5               	movwf	___lwdiv@counter& (0+255),b
  1995  00159C  D004               	goto	l719
  1996  00159E                     
  1997                           ; BSR set to: 0
  1998                           
  1999                           ; BSR set to: 0
  2000  00159E  90D8               	bcf	status,0,c
  2001  0015A0  37C3               	rlcf	___lwdiv@divisor& (0+255),f,b
  2002  0015A2  37C4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2003  0015A4  2BC5               	incf	___lwdiv@counter& (0+255),f,b
  2004  0015A6                     l719:
  2005                           
  2006                           ; BSR set to: 0
  2007                           
  2008                           ; BSR set to: 0
  2009  0015A6  AFC4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2010  0015A8  D7FA               	goto	l720
  2011  0015AA                     u2320:
  2012                           
  2013                           ; BSR set to: 0
  2014                           
  2015                           ; BSR set to: 0
  2016                           
  2017                           ; BSR set to: 0
  2018  0015AA  90D8               	bcf	status,0,c
  2019  0015AC  37C6               	rlcf	___lwdiv@quotient& (0+255),f,b
  2020  0015AE  37C7               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2021                           
  2022                           ; BSR set to: 0
  2023  0015B0  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  2024  0015B2  5DC1               	subwf	___lwdiv@dividend& (0+255),w,b
  2025  0015B4  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2026  0015B6  59C2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2027  0015B8  A0D8               	btfss	status,0,c
  2028  0015BA  D005               	goto	l723
  2029                           
  2030                           ; BSR set to: 0
  2031  0015BC  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  2032  0015BE  5FC1               	subwf	___lwdiv@dividend& (0+255),f,b
  2033  0015C0  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2034  0015C2  5BC2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2035                           
  2036                           ; BSR set to: 0
  2037  0015C4  81C6               	bsf	___lwdiv@quotient& (0+255),0,b
  2038  0015C6                     l723:
  2039                           
  2040                           ; BSR set to: 0
  2041                           
  2042                           ; BSR set to: 0
  2043  0015C6  90D8               	bcf	status,0,c
  2044  0015C8  33C4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2045  0015CA  33C3               	rrcf	___lwdiv@divisor& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 0
  2048  0015CC  2FC5               	decfsz	___lwdiv@counter& (0+255),f,b
  2049  0015CE  D7ED               	goto	u2320
  2050  0015D0                     l724:
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  0015D0  C0C6  F0C1         	movff	___lwdiv@quotient,?___lwdiv
  2056  0015D4  C0C7  F0C2         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2057                           
  2058                           ; BSR set to: 0
  2059  0015D8  0012               	return		;funcret
  2060  0015DA                     __end_of___lwdiv:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           intcon	equ	0xFF2
  2069                           intcon3	equ	0xFF0
  2070                           indf0	equ	0xFEF
  2071                           postinc0	equ	0xFEE
  2072                           fsr0h	equ	0xFEA
  2073                           fsr0l	equ	0xFE9
  2074                           wreg	equ	0xFE8
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _initLCD *****************
  2082 ;; Defined at:
  2083 ;;		line 60 in file "lcd.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    6
  2104 ;; This function calls:
  2105 ;;		_lcdInst
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text5
  2112  00162C                     __ptext5:
  2113                           	opt stack 0
  2114  00162C                     _initLCD:
  2115                           	opt stack 24
  2116                           
  2117                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;incstack = 0
  2121  00162C  0EC3               	movlw	195
  2122  00162E  0100               	movlb	0	; () banked
  2123  001630  6FC4               	movwf	??_initLCD& (0+255),b
  2124  001632  0ECD               	movlw	205
  2125  001634                     u2697:
  2126  001634  2EE8               	decfsz	wreg,f,c
  2127  001636  D7FE               	bra	u2697
  2128  001638  2FC4               	decfsz	??_initLCD& (0+255),f,b
  2129  00163A  D7FC               	bra	u2697
  2130                           
  2131                           ;lcd.c: 69: lcdInst(0b00110011);
  2132  00163C  0E33               	movlw	51
  2133  00163E  EC58  F00C         	call	_lcdInst
  2134                           
  2135                           ;lcd.c: 70: lcdInst(0b00110010);
  2136  001642  0E32               	movlw	50
  2137  001644  EC58  F00C         	call	_lcdInst
  2138                           
  2139                           ;lcd.c: 71: lcdInst(0b00101000);
  2140  001648  0E28               	movlw	40
  2141  00164A  EC58  F00C         	call	_lcdInst
  2142                           
  2143                           ;lcd.c: 72: lcdInst(0b00001111);
  2144  00164E  0E0F               	movlw	15
  2145  001650  EC58  F00C         	call	_lcdInst
  2146                           
  2147                           ;lcd.c: 73: lcdInst(0b00000110);
  2148  001654  0E06               	movlw	6
  2149  001656  EC58  F00C         	call	_lcdInst
  2150                           
  2151                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2152  00165A  0E01               	movlw	1
  2153  00165C  EC58  F00C         	call	_lcdInst
  2154  001660  0EC3               	movlw	195
  2155  001662  0100               	movlb	0	; () banked
  2156  001664  6FC4               	movwf	??_initLCD& (0+255),b
  2157  001666  0ECD               	movlw	205
  2158  001668                     u2707:
  2159  001668  2EE8               	decfsz	wreg,f,c
  2160  00166A  D7FE               	bra	u2707
  2161  00166C  2FC4               	decfsz	??_initLCD& (0+255),f,b
  2162  00166E  D7FC               	bra	u2707
  2163                           
  2164                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2165  001670  0E0F               	movlw	15
  2166  001672  EC58  F00C         	call	_lcdInst
  2167  001676  0012               	return		;funcret
  2168  001678                     __end_of_initLCD:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           tblptrh	equ	0xFF7
  2172                           tblptrl	equ	0xFF6
  2173                           tablat	equ	0xFF5
  2174                           prodh	equ	0xFF4
  2175                           prodl	equ	0xFF3
  2176                           intcon	equ	0xFF2
  2177                           intcon3	equ	0xFF0
  2178                           indf0	equ	0xFEF
  2179                           postinc0	equ	0xFEE
  2180                           fsr0h	equ	0xFEA
  2181                           fsr0l	equ	0xFE9
  2182                           wreg	equ	0xFE8
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _lcdInst *****************
  2190 ;; Defined at:
  2191 ;;		line 11 in file "lcd.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  data            1    wreg     unsigned char 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  data            1    2[BANK0 ] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:        1 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    5
  2212 ;; This function calls:
  2213 ;;		_lcdNibble
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;;		_initLCD
  2217 ;;		_lcd_set_cursor
  2218 ;;		_lcd_shift_cursor
  2219 ;;		_lcd_shift_display
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text6
  2224  0018B0                     __ptext6:
  2225                           	opt stack 0
  2226  0018B0                     _lcdInst:
  2227                           	opt stack 25
  2228                           
  2229                           ;incstack = 0
  2230                           ;lcdInst@data stored from wreg
  2231  0018B0  0100               	movlb	0	; () banked
  2232  0018B2  6FC3               	movwf	lcdInst@data& (0+255),b
  2233                           
  2234                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2235  0018B4  948C               	bcf	3980,2,c	;volatile
  2236                           
  2237                           ;lcd.c: 20: lcdNibble(data);
  2238  0018B6  0100               	movlb	0	; () banked
  2239  0018B8  51C3               	movf	lcdInst@data& (0+255),w,b
  2240  0018BA  EC10  F00A         	call	_lcdNibble
  2241                           
  2242                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2243  0018BE  0EC8               	movlw	200
  2244  0018C0                     u2717:
  2245  0018C0  D000               	nop2	
  2246  0018C2  2EE8               	decfsz	wreg,f,c
  2247  0018C4  D7FD               	bra	u2717
  2248  0018C6  0012               	return		;funcret
  2249  0018C8                     __end_of_lcdInst:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           intcon	equ	0xFF2
  2258                           intcon3	equ	0xFF0
  2259                           indf0	equ	0xFEF
  2260                           postinc0	equ	0xFEE
  2261                           fsr0h	equ	0xFEA
  2262                           fsr0l	equ	0xFE9
  2263                           wreg	equ	0xFE8
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _lcdNibble *****************
  2271 ;; Defined at:
  2272 ;;		line 37 in file "lcd.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  data            1    wreg     unsigned char 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  data            1    1[BANK0 ] unsigned char 
  2277 ;;  temp            1    0[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;Total ram usage:        2 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_lcdInst
  2298 ;;		_putch
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text7
  2303  001420                     __ptext7:
  2304                           	opt stack 0
  2305  001420                     _lcdNibble:
  2306                           	opt stack 24
  2307                           
  2308                           ;incstack = 0
  2309                           ;lcdNibble@data stored from wreg
  2310  001420  0100               	movlb	0	; () banked
  2311  001422  6FC2               	movwf	lcdNibble@data& (0+255),b
  2312                           
  2313                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2314  001424  0100               	movlb	0	; () banked
  2315  001426  51C2               	movf	lcdNibble@data& (0+255),w,b
  2316  001428  0BF0               	andlw	240
  2317  00142A  6FC1               	movwf	lcdNibble@temp& (0+255),b
  2318                           
  2319                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2320  00142C  508C               	movf	3980,w,c	;volatile
  2321  00142E  0B0F               	andlw	15
  2322  001430  6E8C               	movwf	3980,c	;volatile
  2323                           
  2324                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2325  001432  51C1               	movf	lcdNibble@temp& (0+255),w,b
  2326  001434  108C               	iorwf	3980,w,c	;volatile
  2327  001436  6E8C               	movwf	3980,c	;volatile
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2331  001438  0E00               	movlw	0
  2332  00143A  BEF2               	btfsc	intcon,7,c	;volatile
  2333  00143C  0E01               	movlw	1
  2334  00143E  6E4A               	movwf	lcd@LCDinterruptState,c
  2335                           
  2336                           ; BSR set to: 0
  2337  001440  9EF2               	bcf	intcon,7,c	;volatile
  2338                           
  2339                           ; BSR set to: 0
  2340  001442  868C               	bsf	3980,3,c	;volatile
  2341                           
  2342                           ; BSR set to: 0
  2343  001444  0E53               	movlw	83
  2344  001446                     u2727:
  2345  001446  2EE8               	decfsz	wreg,f,c
  2346  001448  D7FE               	bra	u2727
  2347  00144A  F000               	nop	
  2348  00144C  968C               	bcf	3980,3,c	;volatile
  2349  00144E  0EC8               	movlw	200
  2350  001450                     u2737:
  2351  001450  D000               	nop2	
  2352  001452  2EE8               	decfsz	wreg,f,c
  2353  001454  D7FD               	bra	u2737
  2354  001456  B04A               	btfsc	lcd@LCDinterruptState,0,c
  2355  001458  D002               	bra	u2295
  2356  00145A  9EF2               	bcf	intcon,7,c	;volatile
  2357  00145C  D001               	bra	u2296
  2358  00145E                     u2295:
  2359  00145E  8EF2               	bsf	intcon,7,c	;volatile
  2360  001460                     u2296:
  2361                           
  2362                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2363  001460  0100               	movlb	0	; () banked
  2364  001462  39C2               	swapf	lcdNibble@data& (0+255),w,b
  2365  001464  0BF0               	andlw	240
  2366  001466  6FC2               	movwf	lcdNibble@data& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2370  001468  51C2               	movf	lcdNibble@data& (0+255),w,b
  2371  00146A  0BF0               	andlw	240
  2372  00146C  6FC1               	movwf	lcdNibble@temp& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2376  00146E  508C               	movf	3980,w,c	;volatile
  2377  001470  0B0F               	andlw	15
  2378  001472  6E8C               	movwf	3980,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2382  001474  51C1               	movf	lcdNibble@temp& (0+255),w,b
  2383  001476  108C               	iorwf	3980,w,c	;volatile
  2384  001478  6E8C               	movwf	3980,c	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2388  00147A  0E00               	movlw	0
  2389  00147C  BEF2               	btfsc	intcon,7,c	;volatile
  2390  00147E  0E01               	movlw	1
  2391  001480  6E4A               	movwf	lcd@LCDinterruptState,c
  2392                           
  2393                           ; BSR set to: 0
  2394  001482  9EF2               	bcf	intcon,7,c	;volatile
  2395                           
  2396                           ; BSR set to: 0
  2397  001484  868C               	bsf	3980,3,c	;volatile
  2398                           
  2399                           ; BSR set to: 0
  2400  001486  0E53               	movlw	83
  2401  001488                     u2747:
  2402  001488  2EE8               	decfsz	wreg,f,c
  2403  00148A  D7FE               	bra	u2747
  2404  00148C  F000               	nop	
  2405  00148E  968C               	bcf	3980,3,c	;volatile
  2406  001490  0EC8               	movlw	200
  2407  001492                     u2757:
  2408  001492  D000               	nop2	
  2409  001494  2EE8               	decfsz	wreg,f,c
  2410  001496  D7FD               	bra	u2757
  2411  001498  B04A               	btfsc	lcd@LCDinterruptState,0,c
  2412  00149A  D002               	bra	u2305
  2413  00149C  9EF2               	bcf	intcon,7,c	;volatile
  2414  00149E  D001               	bra	u2306
  2415  0014A0                     u2305:
  2416  0014A0  8EF2               	bsf	intcon,7,c	;volatile
  2417  0014A2                     u2306:
  2418  0014A2  0012               	return		;funcret
  2419  0014A4                     __end_of_lcdNibble:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           intcon	equ	0xFF2
  2428                           intcon3	equ	0xFF0
  2429                           indf0	equ	0xFEF
  2430                           postinc0	equ	0xFEE
  2431                           fsr0h	equ	0xFEA
  2432                           fsr0l	equ	0xFE9
  2433                           wreg	equ	0xFE8
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function ___wmul *****************
  2441 ;; Defined at:
  2442 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2445 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  product         2    4[BANK0 ] unsigned int 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  2    0[BANK0 ] unsigned int 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0, prodl, prodh
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;Total ram usage:        6 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    4
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text8
  2472  00184A                     __ptext8:
  2473                           	opt stack 0
  2474  00184A                     ___wmul:
  2475                           	opt stack 26
  2476                           
  2477                           ;incstack = 0
  2478  00184A  0100               	movlb	0	; () banked
  2479  00184C  51C1               	movf	___wmul@multiplier& (0+255),w,b
  2480  00184E  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  2481  001850  CFF3 F0C5          	movff	prodl,___wmul@product
  2482  001854  CFF4 F0C6          	movff	prodh,___wmul@product+1
  2483  001858  51C1               	movf	___wmul@multiplier& (0+255),w,b
  2484  00185A  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2485  00185C  50F3               	movf	prodl,w,c
  2486  00185E  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  2487  001860  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2488  001862  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  2489  001864  50F3               	movf	prodl,w,c
  2490  001866  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  2491                           
  2492                           ; BSR set to: 0
  2493  001868  C0C5  F0C1         	movff	___wmul@product,?___wmul
  2494  00186C  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  2495  001870  0012               	return	
  2496  001872                     __end_of___wmul:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon3	equ	0xFF0
  2506                           indf0	equ	0xFEF
  2507                           postinc0	equ	0xFEE
  2508                           fsr0h	equ	0xFEA
  2509                           fsr0l	equ	0xFE9
  2510                           wreg	equ	0xFE8
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _interruptHandler *****************
  2518 ;; Defined at:
  2519 ;;		line 151 in file "main.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  i               2   49[COMRAM] int 
  2524 ;;  keypress        1   52[COMRAM] unsigned char 
  2525 ;;  temp            1   51[COMRAM] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      void 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;Total ram usage:       27 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    3
  2542 ;; This function calls:
  2543 ;;		_check
  2544 ;;		_is_valid
  2545 ;;		_strcat
  2546 ;;		_strcpy
  2547 ;;		_strncmp
  2548 ;;		i2___wmul
  2549 ;;		i2_initLCD
  2550 ;;		i2_lcdInst
  2551 ;;		i2_printf
  2552 ;;		i2_putch
  2553 ;; This function is called by:
  2554 ;;		Interrupt level 2
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	intcode
  2559  000008                     __pintcode:
  2560                           	opt stack 0
  2561  000008                     _interruptHandler:
  2562                           	opt stack 24
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;incstack = 0
  2566  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2567  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           intcon3	equ	0xFF0
  2576                           indf0	equ	0xFEF
  2577                           postinc0	equ	0xFEE
  2578                           fsr0h	equ	0xFEA
  2579                           fsr0l	equ	0xFE9
  2580                           wreg	equ	0xFE8
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587                           	psect	intcode_body
  2588  000012                     __pintcode_body:
  2589                           	opt stack 24
  2590  000012                     int_func:
  2591                           	opt stack 24
  2592  000012  0006               	pop		; remove dummy address from shadow register refresh
  2593  000014  CFFA F020          	movff	pclath,??_interruptHandler+5
  2594  000018  CFFB F021          	movff	pclatu,??_interruptHandler+6
  2595  00001C  CFE9 F022          	movff	fsr0l,??_interruptHandler+7
  2596  000020  CFEA F023          	movff	fsr0h,??_interruptHandler+8
  2597  000024  CFE1 F024          	movff	fsr1l,??_interruptHandler+9
  2598  000028  CFE2 F025          	movff	fsr1h,??_interruptHandler+10
  2599  00002C  CFD9 F026          	movff	fsr2l,??_interruptHandler+11
  2600  000030  CFDA F027          	movff	fsr2h,??_interruptHandler+12
  2601  000034  CFF3 F028          	movff	prodl,??_interruptHandler+13
  2602  000038  CFF4 F029          	movff	prodh,??_interruptHandler+14
  2603  00003C  CFF6 F02A          	movff	tblptrl,??_interruptHandler+15
  2604  000040  CFF7 F02B          	movff	tblptrh,??_interruptHandler+16
  2605  000044  CFF8 F02C          	movff	tblptru,??_interruptHandler+17
  2606  000048  CFF5 F02D          	movff	tablat,??_interruptHandler+18
  2607  00004C  C059  F02E         	movff	btemp,??_interruptHandler+19
  2608  000050  C05A  F02F         	movff	btemp+1,??_interruptHandler+20
  2609  000054  C05B  F030         	movff	btemp+2,??_interruptHandler+21
  2610  000058  C05C  F031         	movff	btemp+3,??_interruptHandler+22
  2611                           
  2612                           ;main.c: 162: if(INT1IF){
  2613  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  2614  00005E  D3D2               	goto	i2l2811
  2615                           
  2616                           ;main.c: 168: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2617  000060  3881               	swapf	3969,w,c	;volatile
  2618  000062  0B0F               	andlw	15
  2619  000064  0B0F               	andlw	15
  2620  000066  6E35               	movwf	interruptHandler@keypress,c
  2621                           
  2622                           ;main.c: 170: char temp = keys[keypress];
  2623  000068  5035               	movf	interruptHandler@keypress,w,c
  2624  00006A  0D01               	mullw	1
  2625  00006C  0EB9               	movlw	low _keys
  2626  00006E  24F3               	addwf	prodl,w,c
  2627  000070  6EF6               	movwf	tblptrl,c
  2628  000072  0EFE               	movlw	high _keys
  2629  000074  20F4               	addwfc	prodh,w,c
  2630  000076  6EF7               	movwf	tblptrh,c
  2631  000078                     	if	1	;There are 3 active tblptr bytes
  2632  000078  6AF8               	clrf	tblptru,c
  2633  00007A  0E00               	movlw	low (__mediumconst shr (0+16))
  2634  00007C  22F8               	addwfc	tblptru,f,c
  2635  00007E                     	endif
  2636  00007E  0008               	tblrd		*
  2637  000080  CFF5 F034          	movff	tablat,interruptHandler@temp
  2638                           
  2639                           ;main.c: 173: if(temp == 'A'){
  2640  000084  0E41               	movlw	65
  2641  000086  1834               	xorwf	interruptHandler@temp,w,c
  2642  000088  A4D8               	btfss	status,2,c
  2643  00008A  D005               	goto	i2l133
  2644                           
  2645                           ;main.c: 174: state = prev_state;
  2646  00008C  C03E  F092         	movff	_prev_state,_state
  2647  000090  C03F  F093         	movff	_prev_state+1,_state+1
  2648  000094  D3B6               	goto	i2l2809
  2649  000096                     i2l133:
  2650                           
  2651                           ;main.c: 177: }
  2652                           ;main.c: 181: if (state == 0){
  2653  000096  0100               	movlb	0	; () banked
  2654  000098  5192               	movf	_state& (0+255),w,b
  2655  00009A  1193               	iorwf	(_state+1)& (0+255),w,b
  2656  00009C  A4D8               	btfss	status,2,c
  2657  00009E  D0D3               	goto	i2l135
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;main.c: 183: if(temp == '4'){
  2661  0000A0  0E34               	movlw	52
  2662  0000A2  1834               	xorwf	interruptHandler@temp,w,c
  2663  0000A4  A4D8               	btfss	status,2,c
  2664  0000A6  D01F               	goto	i2l136
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 184: assembly_step = 4;
  2668  0000A8  0E00               	movlw	0
  2669  0000AA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2670  0000AC  0E04               	movlw	4
  2671  0000AE  6F90               	movwf	_assembly_step& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;main.c: 185: prev_state = state;
  2675  0000B0  C092  F03E         	movff	_state,_prev_state
  2676  0000B4  C093  F03F         	movff	_state+1,_prev_state+1
  2677                           
  2678                           ;main.c: 186: state = 1;
  2679  0000B8  0E00               	movlw	0
  2680  0000BA  6F93               	movwf	(_state+1)& (0+255),b
  2681  0000BC  0E01               	movlw	1
  2682  0000BE  6F92               	movwf	_state& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 187: lcdInst(0xC0);;
  2686  0000C0  0EC0               	movlw	192
  2687  0000C2  EC6E  F00C         	call	i2_lcdInst
  2688                           
  2689                           ;main.c: 188: putch(keys[keypress]);
  2690  0000C6  5035               	movf	interruptHandler@keypress,w,c
  2691  0000C8  0D01               	mullw	1
  2692  0000CA  0EB9               	movlw	low _keys
  2693  0000CC  24F3               	addwf	prodl,w,c
  2694  0000CE  6EF6               	movwf	tblptrl,c
  2695  0000D0  0EFE               	movlw	high _keys
  2696  0000D2  20F4               	addwfc	prodh,w,c
  2697  0000D4  6EF7               	movwf	tblptrh,c
  2698  0000D6                     	if	1	;There are 3 active tblptr bytes
  2699  0000D6  6AF8               	clrf	tblptru,c
  2700  0000D8  0E00               	movlw	low (__mediumconst shr (0+16))
  2701  0000DA  22F8               	addwfc	tblptru,f,c
  2702  0000DC                     	endif
  2703  0000DC  0008               	tblrd		*
  2704  0000DE  50F5               	movf	tablat,w,c
  2705  0000E0  EC64  F00C         	call	i2_putch
  2706                           
  2707                           ;main.c: 190: }
  2708  0000E4  D0A3               	goto	i2l145
  2709  0000E6                     i2l136:
  2710                           
  2711                           ;main.c: 191: else if(temp == '5'){
  2712  0000E6  0E35               	movlw	53
  2713  0000E8  1834               	xorwf	interruptHandler@temp,w,c
  2714  0000EA  A4D8               	btfss	status,2,c
  2715  0000EC  D020               	goto	i2l138
  2716                           
  2717                           ;main.c: 192: assembly_step = 5;
  2718  0000EE  0E00               	movlw	0
  2719  0000F0  0100               	movlb	0	; () banked
  2720  0000F2  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2721  0000F4  0E05               	movlw	5
  2722  0000F6  6F90               	movwf	_assembly_step& (0+255),b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;main.c: 193: prev_state = state;
  2726  0000F8  C092  F03E         	movff	_state,_prev_state
  2727  0000FC  C093  F03F         	movff	_state+1,_prev_state+1
  2728                           
  2729                           ;main.c: 194: state = 1;
  2730  000100  0E00               	movlw	0
  2731  000102  6F93               	movwf	(_state+1)& (0+255),b
  2732  000104  0E01               	movlw	1
  2733  000106  6F92               	movwf	_state& (0+255),b
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 195: lcdInst(0xC0);;
  2737  000108  0EC0               	movlw	192
  2738  00010A  EC6E  F00C         	call	i2_lcdInst
  2739                           
  2740                           ;main.c: 196: putch(keys[keypress]);
  2741  00010E  5035               	movf	interruptHandler@keypress,w,c
  2742  000110  0D01               	mullw	1
  2743  000112  0EB9               	movlw	low _keys
  2744  000114  24F3               	addwf	prodl,w,c
  2745  000116  6EF6               	movwf	tblptrl,c
  2746  000118  0EFE               	movlw	high _keys
  2747  00011A  20F4               	addwfc	prodh,w,c
  2748  00011C  6EF7               	movwf	tblptrh,c
  2749  00011E                     	if	1	;There are 3 active tblptr bytes
  2750  00011E  6AF8               	clrf	tblptru,c
  2751  000120  0E00               	movlw	low (__mediumconst shr (0+16))
  2752  000122  22F8               	addwfc	tblptru,f,c
  2753  000124                     	endif
  2754  000124  0008               	tblrd		*
  2755  000126  50F5               	movf	tablat,w,c
  2756  000128  EC64  F00C         	call	i2_putch
  2757                           
  2758                           ;main.c: 198: }
  2759  00012C  D07F               	goto	i2l145
  2760  00012E                     i2l138:
  2761                           
  2762                           ;main.c: 199: else if (temp == '6') {
  2763  00012E  0E36               	movlw	54
  2764  000130  1834               	xorwf	interruptHandler@temp,w,c
  2765  000132  A4D8               	btfss	status,2,c
  2766  000134  D020               	goto	i2l140
  2767                           
  2768                           ;main.c: 200: assembly_step = 6;
  2769  000136  0E00               	movlw	0
  2770  000138  0100               	movlb	0	; () banked
  2771  00013A  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2772  00013C  0E06               	movlw	6
  2773  00013E  6F90               	movwf	_assembly_step& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 201: prev_state = state;
  2777  000140  C092  F03E         	movff	_state,_prev_state
  2778  000144  C093  F03F         	movff	_state+1,_prev_state+1
  2779                           
  2780                           ;main.c: 202: state = 1;
  2781  000148  0E00               	movlw	0
  2782  00014A  6F93               	movwf	(_state+1)& (0+255),b
  2783  00014C  0E01               	movlw	1
  2784  00014E  6F92               	movwf	_state& (0+255),b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 203: lcdInst(0xC0);;
  2788  000150  0EC0               	movlw	192
  2789  000152  EC6E  F00C         	call	i2_lcdInst
  2790                           
  2791                           ;main.c: 204: putch(keys[keypress]);
  2792  000156  5035               	movf	interruptHandler@keypress,w,c
  2793  000158  0D01               	mullw	1
  2794  00015A  0EB9               	movlw	low _keys
  2795  00015C  24F3               	addwf	prodl,w,c
  2796  00015E  6EF6               	movwf	tblptrl,c
  2797  000160  0EFE               	movlw	high _keys
  2798  000162  20F4               	addwfc	prodh,w,c
  2799  000164  6EF7               	movwf	tblptrh,c
  2800  000166                     	if	1	;There are 3 active tblptr bytes
  2801  000166  6AF8               	clrf	tblptru,c
  2802  000168  0E00               	movlw	low (__mediumconst shr (0+16))
  2803  00016A  22F8               	addwfc	tblptru,f,c
  2804  00016C                     	endif
  2805  00016C  0008               	tblrd		*
  2806  00016E  50F5               	movf	tablat,w,c
  2807  000170  EC64  F00C         	call	i2_putch
  2808                           
  2809                           ;main.c: 205: }
  2810  000174  D05B               	goto	i2l145
  2811  000176                     i2l140:
  2812                           
  2813                           ;main.c: 206: else if (temp == '7'){
  2814  000176  0E37               	movlw	55
  2815  000178  1834               	xorwf	interruptHandler@temp,w,c
  2816  00017A  A4D8               	btfss	status,2,c
  2817  00017C  D020               	goto	i2l142
  2818                           
  2819                           ;main.c: 207: assembly_step = 7;
  2820  00017E  0E00               	movlw	0
  2821  000180  0100               	movlb	0	; () banked
  2822  000182  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2823  000184  0E07               	movlw	7
  2824  000186  6F90               	movwf	_assembly_step& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 208: prev_state = state;
  2828  000188  C092  F03E         	movff	_state,_prev_state
  2829  00018C  C093  F03F         	movff	_state+1,_prev_state+1
  2830                           
  2831                           ;main.c: 209: state = 1;
  2832  000190  0E00               	movlw	0
  2833  000192  6F93               	movwf	(_state+1)& (0+255),b
  2834  000194  0E01               	movlw	1
  2835  000196  6F92               	movwf	_state& (0+255),b
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;main.c: 210: lcdInst(0xC0);;
  2839  000198  0EC0               	movlw	192
  2840  00019A  EC6E  F00C         	call	i2_lcdInst
  2841                           
  2842                           ;main.c: 211: putch(keys[keypress]);
  2843  00019E  5035               	movf	interruptHandler@keypress,w,c
  2844  0001A0  0D01               	mullw	1
  2845  0001A2  0EB9               	movlw	low _keys
  2846  0001A4  24F3               	addwf	prodl,w,c
  2847  0001A6  6EF6               	movwf	tblptrl,c
  2848  0001A8  0EFE               	movlw	high _keys
  2849  0001AA  20F4               	addwfc	prodh,w,c
  2850  0001AC  6EF7               	movwf	tblptrh,c
  2851  0001AE                     	if	1	;There are 3 active tblptr bytes
  2852  0001AE  6AF8               	clrf	tblptru,c
  2853  0001B0  0E00               	movlw	low (__mediumconst shr (0+16))
  2854  0001B2  22F8               	addwfc	tblptru,f,c
  2855  0001B4                     	endif
  2856  0001B4  0008               	tblrd		*
  2857  0001B6  50F5               	movf	tablat,w,c
  2858  0001B8  EC64  F00C         	call	i2_putch
  2859                           
  2860                           ;main.c: 213: }
  2861  0001BC  D037               	goto	i2l145
  2862  0001BE                     i2l142:
  2863                           
  2864                           ;main.c: 214: else if (temp == '8'){
  2865  0001BE  0E38               	movlw	56
  2866  0001C0  1834               	xorwf	interruptHandler@temp,w,c
  2867  0001C2  A4D8               	btfss	status,2,c
  2868  0001C4  D020               	goto	i2l144
  2869                           
  2870                           ;main.c: 215: assembly_step = 8;
  2871  0001C6  0E00               	movlw	0
  2872  0001C8  0100               	movlb	0	; () banked
  2873  0001CA  6F91               	movwf	(_assembly_step+1)& (0+255),b
  2874  0001CC  0E08               	movlw	8
  2875  0001CE  6F90               	movwf	_assembly_step& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 216: prev_state = state;
  2879  0001D0  C092  F03E         	movff	_state,_prev_state
  2880  0001D4  C093  F03F         	movff	_state+1,_prev_state+1
  2881                           
  2882                           ;main.c: 217: state = 1;
  2883  0001D8  0E00               	movlw	0
  2884  0001DA  6F93               	movwf	(_state+1)& (0+255),b
  2885  0001DC  0E01               	movlw	1
  2886  0001DE  6F92               	movwf	_state& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;main.c: 218: lcdInst(0xC0);;
  2890  0001E0  0EC0               	movlw	192
  2891  0001E2  EC6E  F00C         	call	i2_lcdInst
  2892                           
  2893                           ;main.c: 219: putch(keys[keypress]);
  2894  0001E6  5035               	movf	interruptHandler@keypress,w,c
  2895  0001E8  0D01               	mullw	1
  2896  0001EA  0EB9               	movlw	low _keys
  2897  0001EC  24F3               	addwf	prodl,w,c
  2898  0001EE  6EF6               	movwf	tblptrl,c
  2899  0001F0  0EFE               	movlw	high _keys
  2900  0001F2  20F4               	addwfc	prodh,w,c
  2901  0001F4  6EF7               	movwf	tblptrh,c
  2902  0001F6                     	if	1	;There are 3 active tblptr bytes
  2903  0001F6  6AF8               	clrf	tblptru,c
  2904  0001F8  0E00               	movlw	low (__mediumconst shr (0+16))
  2905  0001FA  22F8               	addwfc	tblptru,f,c
  2906  0001FC                     	endif
  2907  0001FC  0008               	tblrd		*
  2908  0001FE  50F5               	movf	tablat,w,c
  2909  000200  EC64  F00C         	call	i2_putch
  2910                           
  2911                           ;main.c: 221: }
  2912  000204  D013               	goto	i2l145
  2913  000206                     i2l144:
  2914                           
  2915                           ;main.c: 222: else{
  2916                           ;main.c: 228: initLCD();
  2917  000206  EC3C  F00B         	call	i2_initLCD	;wreg free
  2918                           
  2919                           ;main.c: 229: printf("Wrong number! ");
  2920  00020A  0E4F               	movlw	low STR_9
  2921  00020C  6E0D               	movwf	i2printf@f,c
  2922  00020E  0EFF               	movlw	high STR_9
  2923  000210  6E0E               	movwf	i2printf@f+1,c
  2924  000212  ECF2  F008         	call	i2_printf	;wreg free
  2925                           
  2926                           ;main.c: 230: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2927  000216  0E33               	movlw	51
  2928  000218  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2929  00021A  0EBB               	movlw	187
  2930  00021C  6E1B               	movwf	??_interruptHandler& (0+255),c
  2931  00021E  0EE0               	movlw	224
  2932  000220                     i2u276_47:
  2933  000220  2EE8               	decfsz	wreg,f,c
  2934  000222  D7FE               	bra	i2u276_47
  2935  000224  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2936  000226  D7FC               	bra	i2u276_47
  2937  000228  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2938  00022A  D7FA               	bra	i2u276_47
  2939  00022C                     i2l145:
  2940                           
  2941                           ;main.c: 232: }
  2942                           ;main.c: 236: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2943  00022C  0E66               	movlw	102
  2944  00022E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  2945  000230  0E76               	movlw	118
  2946  000232  6E1B               	movwf	??_interruptHandler& (0+255),c
  2947  000234  0EC1               	movlw	193
  2948  000236                     i2u277_47:
  2949  000236  2EE8               	decfsz	wreg,f,c
  2950  000238  D7FE               	bra	i2u277_47
  2951  00023A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  2952  00023C  D7FC               	bra	i2u277_47
  2953  00023E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  2954  000240  D7FA               	bra	i2u277_47
  2955  000242  F000               	nop	
  2956  000244  D2DE               	goto	i2l2809
  2957  000246                     i2l135:
  2958                           
  2959                           ;main.c: 241: }
  2960                           ;main.c: 248: if(state == 1){
  2961  000246  0100               	movlb	0	; () banked
  2962  000248  0592               	decf	_state& (0+255),w,b
  2963  00024A  1193               	iorwf	(_state+1)& (0+255),w,b
  2964  00024C  A4D8               	btfss	status,2,c
  2965  00024E  D190               	goto	i2l146
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 255: if (temp == 'A'){
  2969  000250  0E41               	movlw	65
  2970  000252  1834               	xorwf	interruptHandler@temp,w,c
  2971  000254  A4D8               	btfss	status,2,c
  2972  000256  D004               	goto	i2l147
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 256: state = prev_state;
  2976  000258  C03E  F092         	movff	_prev_state,_state
  2977  00025C  C03F  F093         	movff	_prev_state+1,_state+1
  2978  000260                     i2l147:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 257: }
  2982                           ;main.c: 259: if (temp == '1'){
  2983                           
  2984                           ; BSR set to: 0
  2985  000260  0E31               	movlw	49
  2986  000262  1834               	xorwf	interruptHandler@temp,w,c
  2987  000264  A4D8               	btfss	status,2,c
  2988  000266  D01C               	goto	i2l148
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 260: lcdInst(0xC0);;
  2992  000268  0EC0               	movlw	192
  2993  00026A  EC6E  F00C         	call	i2_lcdInst
  2994                           
  2995                           ;main.c: 261: putch('B');
  2996  00026E  0E42               	movlw	66
  2997  000270  EC64  F00C         	call	i2_putch
  2998                           
  2999                           ;main.c: 262: strcpy(temp_set,"B");
  3000  000274  0E4D               	movlw	low _temp_set
  3001  000276  6E07               	movwf	strcpy@to,c
  3002  000278  0E00               	movlw	high _temp_set
  3003  00027A  6E08               	movwf	strcpy@to+1,c
  3004  00027C  0EFC               	movlw	low STR_10
  3005  00027E  6E09               	movwf	strcpy@from,c
  3006  000280  0EFF               	movlw	high STR_10
  3007  000282  6E0A               	movwf	strcpy@from+1,c
  3008  000284  EC87  F00B         	call	_strcpy	;wreg free
  3009                           
  3010                           ;main.c: 263: strcat(current_set,temp_set);
  3011  000288  0EBC               	movlw	low _current_set
  3012  00028A  6E01               	movwf	strcat@to,c
  3013  00028C  0E00               	movlw	high _current_set
  3014  00028E  6E02               	movwf	strcat@to+1,c
  3015  000290  0E4D               	movlw	low _temp_set
  3016  000292  6E03               	movwf	strcat@from,c
  3017  000294  0E00               	movlw	high _temp_set
  3018  000296  6E04               	movwf	strcat@from+1,c
  3019  000298  ECED  F00B         	call	_strcat	;wreg free
  3020                           
  3021                           ;main.c: 264: counter++;
  3022  00029C  4A48               	infsnz	_counter,f,c
  3023  00029E  2A49               	incf	_counter+1,f,c
  3024  0002A0                     i2l148:
  3025                           
  3026                           ;main.c: 265: }
  3027                           ;main.c: 267: if(temp == '2'){
  3028  0002A0  0E32               	movlw	50
  3029  0002A2  1834               	xorwf	interruptHandler@temp,w,c
  3030  0002A4  A4D8               	btfss	status,2,c
  3031  0002A6  D01C               	goto	i2l149
  3032                           
  3033                           ;main.c: 268: lcdInst(0xC0);;
  3034  0002A8  0EC0               	movlw	192
  3035  0002AA  EC6E  F00C         	call	i2_lcdInst
  3036                           
  3037                           ;main.c: 269: putch('N');
  3038  0002AE  0E4E               	movlw	78
  3039  0002B0  EC64  F00C         	call	i2_putch
  3040                           
  3041                           ;main.c: 270: strcpy(temp_set,"N");
  3042  0002B4  0E4D               	movlw	low _temp_set
  3043  0002B6  6E07               	movwf	strcpy@to,c
  3044  0002B8  0E00               	movlw	high _temp_set
  3045  0002BA  6E08               	movwf	strcpy@to+1,c
  3046  0002BC  0EEB               	movlw	low (STR_32+2)
  3047  0002BE  6E09               	movwf	strcpy@from,c
  3048  0002C0  0EFF               	movlw	high (STR_32+2)
  3049  0002C2  6E0A               	movwf	strcpy@from+1,c
  3050  0002C4  EC87  F00B         	call	_strcpy	;wreg free
  3051                           
  3052                           ;main.c: 271: strcat(current_set,temp_set);
  3053  0002C8  0EBC               	movlw	low _current_set
  3054  0002CA  6E01               	movwf	strcat@to,c
  3055  0002CC  0E00               	movlw	high _current_set
  3056  0002CE  6E02               	movwf	strcat@to+1,c
  3057  0002D0  0E4D               	movlw	low _temp_set
  3058  0002D2  6E03               	movwf	strcat@from,c
  3059  0002D4  0E00               	movlw	high _temp_set
  3060  0002D6  6E04               	movwf	strcat@from+1,c
  3061  0002D8  ECED  F00B         	call	_strcat	;wreg free
  3062                           
  3063                           ;main.c: 272: counter++;
  3064  0002DC  4A48               	infsnz	_counter,f,c
  3065  0002DE  2A49               	incf	_counter+1,f,c
  3066  0002E0                     i2l149:
  3067                           
  3068                           ;main.c: 273: }
  3069                           ;main.c: 275: if(temp == '3'){
  3070  0002E0  0E33               	movlw	51
  3071  0002E2  1834               	xorwf	interruptHandler@temp,w,c
  3072  0002E4  A4D8               	btfss	status,2,c
  3073  0002E6  D01C               	goto	i2l150
  3074                           
  3075                           ;main.c: 276: lcdInst(0xC0);;
  3076  0002E8  0EC0               	movlw	192
  3077  0002EA  EC6E  F00C         	call	i2_lcdInst
  3078                           
  3079                           ;main.c: 277: putch('S');
  3080  0002EE  0E53               	movlw	83
  3081  0002F0  EC64  F00C         	call	i2_putch
  3082                           
  3083                           ;main.c: 279: strcpy(temp_set,"S");
  3084  0002F4  0E4D               	movlw	low _temp_set
  3085  0002F6  6E07               	movwf	strcpy@to,c
  3086  0002F8  0E00               	movlw	high _temp_set
  3087  0002FA  6E08               	movwf	strcpy@to+1,c
  3088  0002FC  0EEF               	movlw	low (STR_33+2)
  3089  0002FE  6E09               	movwf	strcpy@from,c
  3090  000300  0EFF               	movlw	high (STR_33+2)
  3091  000302  6E0A               	movwf	strcpy@from+1,c
  3092  000304  EC87  F00B         	call	_strcpy	;wreg free
  3093                           
  3094                           ;main.c: 280: strcat(current_set,temp_set);
  3095  000308  0EBC               	movlw	low _current_set
  3096  00030A  6E01               	movwf	strcat@to,c
  3097  00030C  0E00               	movlw	high _current_set
  3098  00030E  6E02               	movwf	strcat@to+1,c
  3099  000310  0E4D               	movlw	low _temp_set
  3100  000312  6E03               	movwf	strcat@from,c
  3101  000314  0E00               	movlw	high _temp_set
  3102  000316  6E04               	movwf	strcat@from+1,c
  3103  000318  ECED  F00B         	call	_strcat	;wreg free
  3104                           
  3105                           ;main.c: 281: counter++;
  3106  00031C  4A48               	infsnz	_counter,f,c
  3107  00031E  2A49               	incf	_counter+1,f,c
  3108  000320                     i2l150:
  3109                           
  3110                           ;main.c: 282: }
  3111                           ;main.c: 283: if (temp == '4'){
  3112  000320  0E34               	movlw	52
  3113  000322  1834               	xorwf	interruptHandler@temp,w,c
  3114  000324  A4D8               	btfss	status,2,c
  3115  000326  D01D               	goto	i2l151
  3116                           
  3117                           ;main.c: 284: lcdInst(0xC0);;
  3118  000328  0EC0               	movlw	192
  3119  00032A  EC6E  F00C         	call	i2_lcdInst
  3120                           
  3121                           ;main.c: 285: putch('W');
  3122  00032E  0E57               	movlw	87
  3123  000330  EC64  F00C         	call	i2_putch
  3124                           
  3125                           ;main.c: 287: strcpy(temp_set,"W");
  3126  000334  0E4D               	movlw	low _temp_set
  3127  000336  6E07               	movwf	strcpy@to,c
  3128  000338  0E00               	movlw	high _temp_set
  3129  00033A  6E08               	movwf	strcpy@to+1,c
  3130  00033C  0EF3               	movlw	low (STR_34+2)
  3131  00033E  6E09               	movwf	strcpy@from,c
  3132  000340  0EFF               	movlw	high (STR_34+2)
  3133  000342  6E0A               	movwf	strcpy@from+1,c
  3134  000344  EC87  F00B         	call	_strcpy	;wreg free
  3135                           
  3136                           ;main.c: 288: strcat(current_set,temp_set);
  3137  000348  0EBC               	movlw	low _current_set
  3138  00034A  6E01               	movwf	strcat@to,c
  3139  00034C  0E00               	movlw	high _current_set
  3140  00034E  6E02               	movwf	strcat@to+1,c
  3141  000350  0E4D               	movlw	low _temp_set
  3142  000352  6E03               	movwf	strcat@from,c
  3143  000354  0E00               	movlw	high _temp_set
  3144  000356  6E04               	movwf	strcat@from+1,c
  3145  000358  ECED  F00B         	call	_strcat	;wreg free
  3146                           
  3147                           ;main.c: 290: counter++;
  3148  00035C  4A48               	infsnz	_counter,f,c
  3149  00035E  2A49               	incf	_counter+1,f,c
  3150                           
  3151                           ;main.c: 291: }
  3152  000360  D0DD               	goto	i2l159
  3153  000362                     i2l151:
  3154                           
  3155                           ;main.c: 294: else{
  3156                           ;main.c: 295: if (keys[keypress] == '*'){
  3157  000362  5035               	movf	interruptHandler@keypress,w,c
  3158  000364  0D01               	mullw	1
  3159  000366  0EB9               	movlw	low _keys
  3160  000368  24F3               	addwf	prodl,w,c
  3161  00036A  6EF6               	movwf	tblptrl,c
  3162  00036C  0EFE               	movlw	high _keys
  3163  00036E  20F4               	addwfc	prodh,w,c
  3164  000370  6EF7               	movwf	tblptrh,c
  3165  000372                     	if	1	;There are 3 active tblptr bytes
  3166  000372  6AF8               	clrf	tblptru,c
  3167  000374  0E00               	movlw	low (__mediumconst shr (0+16))
  3168  000376  22F8               	addwfc	tblptru,f,c
  3169  000378                     	endif
  3170  000378  0008               	tblrd		*
  3171  00037A  50F5               	movf	tablat,w,c
  3172  00037C  0A2A               	xorlw	42
  3173  00037E  A4D8               	btfss	status,2,c
  3174  000380  D0CD               	goto	i2l159
  3175                           
  3176                           ;main.c: 298: for (int i=0;i<20;i++){
  3177  000382  0E00               	movlw	0
  3178  000384  6E33               	movwf	interruptHandler@i+1,c
  3179  000386  0E00               	movlw	0
  3180  000388  6E32               	movwf	interruptHandler@i,c
  3181  00038A  BE33               	btfsc	interruptHandler@i+1,7,c
  3182  00038C  D008               	goto	i2l154
  3183  00038E  5033               	movf	interruptHandler@i+1,w,c
  3184  000390  E105               	bnz	i2u209_40
  3185  000392  0E14               	movlw	20
  3186  000394  5C32               	subwf	interruptHandler@i,w,c
  3187  000396  B0D8               	btfsc	status,0,c
  3188  000398  D08D               	goto	i2u212_40
  3189  00039A  D001               	goto	i2l154
  3190  00039C                     i2u209_40:
  3191  00039C  D08B               	goto	i2u212_40
  3192  00039E                     i2l154:
  3193                           
  3194                           ;main.c: 299: if (strncmp(current_set,strs[i],5) == 0){
  3195  00039E  0EBC               	movlw	low _current_set
  3196  0003A0  6E07               	movwf	strncmp@s1,c
  3197  0003A2  0E00               	movlw	high _current_set
  3198  0003A4  6E08               	movwf	strncmp@s1+1,c
  3199  0003A6  C032  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  3200  0003AA  C033  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  3201  0003AE  0E00               	movlw	0
  3202  0003B0  6E04               	movwf	i2___wmul@multiplicand+1,c
  3203  0003B2  0E05               	movlw	5
  3204  0003B4  6E03               	movwf	i2___wmul@multiplicand,c
  3205  0003B6  EC39  F00C         	call	i2___wmul	;wreg free
  3206  0003BA  0EDA               	movlw	low _strs
  3207  0003BC  2401               	addwf	?i2___wmul,w,c
  3208  0003BE  6E09               	movwf	strncmp@s2,c
  3209  0003C0  0EFE               	movlw	high _strs
  3210  0003C2  2002               	addwfc	?i2___wmul+1,w,c
  3211  0003C4  6E0A               	movwf	strncmp@s2+1,c
  3212  0003C6  0E00               	movlw	0
  3213  0003C8  6E0C               	movwf	strncmp@len+1,c
  3214  0003CA  0E05               	movlw	5
  3215  0003CC  6E0B               	movwf	strncmp@len,c
  3216  0003CE  ECCD  F009         	call	_strncmp	;wreg free
  3217  0003D2  5007               	movf	?_strncmp,w,c
  3218  0003D4  1008               	iorwf	?_strncmp+1,w,c
  3219  0003D6  A4D8               	btfss	status,2,c
  3220  0003D8  D061               	goto	i2l156
  3221                           
  3222                           ;main.c: 300: strcpy(final_set[counter_step],current_set);
  3223  0003DA  C046  F001         	movff	_counter_step,i2___wmul@multiplier
  3224  0003DE  C047  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  3225  0003E2  0E00               	movlw	0
  3226  0003E4  6E04               	movwf	i2___wmul@multiplicand+1,c
  3227  0003E6  0E05               	movlw	5
  3228  0003E8  6E03               	movwf	i2___wmul@multiplicand,c
  3229  0003EA  EC39  F00C         	call	i2___wmul	;wreg free
  3230  0003EE  0E94               	movlw	low _final_set
  3231  0003F0  2401               	addwf	?i2___wmul,w,c
  3232  0003F2  6E07               	movwf	strcpy@to,c
  3233  0003F4  0E00               	movlw	high _final_set
  3234  0003F6  2002               	addwfc	?i2___wmul+1,w,c
  3235  0003F8  6E08               	movwf	strcpy@to+1,c
  3236  0003FA  0EBC               	movlw	low _current_set
  3237  0003FC  6E09               	movwf	strcpy@from,c
  3238  0003FE  0E00               	movlw	high _current_set
  3239  000400  6E0A               	movwf	strcpy@from+1,c
  3240  000402  EC87  F00B         	call	_strcpy	;wreg free
  3241                           
  3242                           ;main.c: 301: strcpy(current_set2,current_set);
  3243  000406  0E52               	movlw	low _current_set2
  3244  000408  6E07               	movwf	strcpy@to,c
  3245  00040A  0E00               	movlw	high _current_set2
  3246  00040C  6E08               	movwf	strcpy@to+1,c
  3247  00040E  0EBC               	movlw	low _current_set
  3248  000410  6E09               	movwf	strcpy@from,c
  3249  000412  0E00               	movlw	high _current_set
  3250  000414  6E0A               	movwf	strcpy@from+1,c
  3251  000416  EC87  F00B         	call	_strcpy	;wreg free
  3252                           
  3253                           ;main.c: 304: valid = 1;
  3254  00041A  0E00               	movlw	0
  3255  00041C  6E43               	movwf	_valid+1,c
  3256  00041E  0E01               	movlw	1
  3257  000420  6E42               	movwf	_valid,c
  3258                           
  3259                           ;main.c: 305: state = 2;
  3260  000422  0E00               	movlw	0
  3261  000424  0100               	movlb	0	; () banked
  3262  000426  6F93               	movwf	(_state+1)& (0+255),b
  3263  000428  0E02               	movlw	2
  3264  00042A  6F92               	movwf	_state& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 307: initLCD();
  3268  00042C  EC3C  F00B         	call	i2_initLCD	;wreg free
  3269                           
  3270                           ;main.c: 308: printf("correct!");
  3271  000430  0E92               	movlw	low STR_14
  3272  000432  6E0D               	movwf	i2printf@f,c
  3273  000434  0EFF               	movlw	high STR_14
  3274  000436  6E0E               	movwf	i2printf@f+1,c
  3275  000438  ECF2  F008         	call	i2_printf	;wreg free
  3276                           
  3277                           ;main.c: 309: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3278  00043C  0E33               	movlw	51
  3279  00043E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3280  000440  0EBB               	movlw	187
  3281  000442  6E1B               	movwf	??_interruptHandler& (0+255),c
  3282  000444  0EE0               	movlw	224
  3283  000446                     i2u278_47:
  3284  000446  2EE8               	decfsz	wreg,f,c
  3285  000448  D7FE               	bra	i2u278_47
  3286  00044A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3287  00044C  D7FC               	bra	i2u278_47
  3288  00044E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3289  000450  D7FA               	bra	i2u278_47
  3290                           
  3291                           ;main.c: 311: printf("%s",current_set);
  3292  000452  0EF9               	movlw	low STR_3
  3293  000454  6E0D               	movwf	i2printf@f,c
  3294  000456  0EFF               	movlw	high STR_3
  3295  000458  6E0E               	movwf	i2printf@f+1,c
  3296  00045A  0EBC               	movlw	low _current_set
  3297  00045C  6E0F               	movwf	?i2_printf+2,c
  3298  00045E  0E00               	movlw	high _current_set
  3299  000460  6E10               	movwf	?i2_printf+3,c
  3300  000462  ECF2  F008         	call	i2_printf	;wreg free
  3301                           
  3302                           ;main.c: 313: strcpy(current_set,"");
  3303  000466  0EBC               	movlw	low _current_set
  3304  000468  6E07               	movwf	strcpy@to,c
  3305  00046A  0E00               	movlw	high _current_set
  3306  00046C  6E08               	movwf	strcpy@to+1,c
  3307  00046E  0E5D               	movlw	low (STR_9+14)
  3308  000470  6E09               	movwf	strcpy@from,c
  3309  000472  0EFF               	movlw	high (STR_9+14)
  3310  000474  6E0A               	movwf	strcpy@from+1,c
  3311  000476  EC87  F00B         	call	_strcpy	;wreg free
  3312                           
  3313                           ;main.c: 314: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3314  00047A  0E66               	movlw	102
  3315  00047C  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3316  00047E  0E76               	movlw	118
  3317  000480  6E1B               	movwf	??_interruptHandler& (0+255),c
  3318  000482  0EC1               	movlw	193
  3319  000484                     i2u279_47:
  3320  000484  2EE8               	decfsz	wreg,f,c
  3321  000486  D7FE               	bra	i2u279_47
  3322  000488  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3323  00048A  D7FC               	bra	i2u279_47
  3324  00048C  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3325  00048E  D7FA               	bra	i2u279_47
  3326  000490  F000               	nop	
  3327                           
  3328                           ;main.c: 315: counter = 0;
  3329  000492  0E00               	movlw	0
  3330  000494  6E49               	movwf	_counter+1,c
  3331  000496  0E00               	movlw	0
  3332  000498  6E48               	movwf	_counter,c
  3333                           
  3334                           ;main.c: 316: break;
  3335  00049A  D00C               	goto	i2u212_40
  3336  00049C                     i2l156:
  3337                           
  3338                           ;main.c: 319: else if (i == 19){
  3339  00049C  0E13               	movlw	19
  3340  00049E  1832               	xorwf	interruptHandler@i,w,c
  3341  0004A0  1033               	iorwf	interruptHandler@i+1,w,c
  3342  0004A2  B4D8               	btfsc	status,2,c
  3343  0004A4  D007               	goto	i2u212_40
  3344                           
  3345                           ;main.c: 320: break;
  3346  0004A6  4A32               	infsnz	interruptHandler@i,f,c
  3347  0004A8  2A33               	incf	interruptHandler@i+1,f,c
  3348  0004AA  BE33               	btfsc	interruptHandler@i+1,7,c
  3349  0004AC  D778               	goto	i2l154
  3350  0004AE  5033               	movf	interruptHandler@i+1,w,c
  3351  0004B0  E101               	bnz	i2l2695
  3352  0004B2  D76F               	goto	L1
  3353  0004B4                     i2u212_40:
  3354  0004B4                     i2l2695:
  3355                           
  3356                           ;main.c: 321: }
  3357                           ;main.c: 323: }
  3358                           ;main.c: 324: if (valid != 1){
  3359  0004B4  0442               	decf	_valid,w,c
  3360  0004B6  1043               	iorwf	_valid+1,w,c
  3361  0004B8  B4D8               	btfsc	status,2,c
  3362  0004BA  D030               	goto	i2l159
  3363                           
  3364                           ;main.c: 326: initLCD();
  3365  0004BC  EC3C  F00B         	call	i2_initLCD	;wreg free
  3366                           
  3367                           ;main.c: 327: printf("wrong set!");
  3368  0004C0  0E87               	movlw	low STR_17
  3369  0004C2  6E0D               	movwf	i2printf@f,c
  3370  0004C4  0EFF               	movlw	high STR_17
  3371  0004C6  6E0E               	movwf	i2printf@f+1,c
  3372  0004C8  ECF2  F008         	call	i2_printf	;wreg free
  3373                           
  3374                           ;main.c: 328: printf("%s",current_set);
  3375  0004CC  0EF9               	movlw	low STR_3
  3376  0004CE  6E0D               	movwf	i2printf@f,c
  3377  0004D0  0EFF               	movlw	high STR_3
  3378  0004D2  6E0E               	movwf	i2printf@f+1,c
  3379  0004D4  0EBC               	movlw	low _current_set
  3380  0004D6  6E0F               	movwf	?i2_printf+2,c
  3381  0004D8  0E00               	movlw	high _current_set
  3382  0004DA  6E10               	movwf	?i2_printf+3,c
  3383  0004DC  ECF2  F008         	call	i2_printf	;wreg free
  3384                           
  3385                           ;main.c: 329: strcpy(current_set,"");
  3386  0004E0  0EBC               	movlw	low _current_set
  3387  0004E2  6E07               	movwf	strcpy@to,c
  3388  0004E4  0E00               	movlw	high _current_set
  3389  0004E6  6E08               	movwf	strcpy@to+1,c
  3390  0004E8  0E5D               	movlw	low (STR_9+14)
  3391  0004EA  6E09               	movwf	strcpy@from,c
  3392  0004EC  0EFF               	movlw	high (STR_9+14)
  3393  0004EE  6E0A               	movwf	strcpy@from+1,c
  3394  0004F0  EC87  F00B         	call	_strcpy	;wreg free
  3395                           
  3396                           ;main.c: 330: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3397  0004F4  0E66               	movlw	102
  3398  0004F6  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3399  0004F8  0E76               	movlw	118
  3400  0004FA  6E1B               	movwf	??_interruptHandler& (0+255),c
  3401  0004FC  0EC1               	movlw	193
  3402  0004FE                     i2u280_47:
  3403  0004FE  2EE8               	decfsz	wreg,f,c
  3404  000500  D7FE               	bra	i2u280_47
  3405  000502  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3406  000504  D7FC               	bra	i2u280_47
  3407  000506  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3408  000508  D7FA               	bra	i2u280_47
  3409  00050A  F000               	nop	
  3410                           
  3411                           ;main.c: 331: counter = 0;
  3412  00050C  0E00               	movlw	0
  3413  00050E  6E49               	movwf	_counter+1,c
  3414  000510  0E00               	movlw	0
  3415  000512  6E48               	movwf	_counter,c
  3416                           
  3417                           ;main.c: 332: valid = 0;
  3418  000514  0E00               	movlw	0
  3419  000516  6E43               	movwf	_valid+1,c
  3420  000518  0E00               	movlw	0
  3421  00051A  6E42               	movwf	_valid,c
  3422  00051C                     i2l159:
  3423                           
  3424                           ;main.c: 333: }
  3425                           ;main.c: 336: }
  3426                           ;main.c: 345: }
  3427                           ;main.c: 348: if (counter > 4){
  3428  00051C  BE49               	btfsc	_counter+1,7,c
  3429  00051E  D171               	goto	i2l2809
  3430  000520  5049               	movf	_counter+1,w,c
  3431  000522  E104               	bnz	i2u214_40
  3432  000524  0E05               	movlw	5
  3433  000526  5C48               	subwf	_counter,w,c
  3434  000528  A0D8               	btfss	status,0,c
  3435  00052A  D16B               	goto	i2l2809
  3436  00052C                     i2u214_40:
  3437                           
  3438                           ;main.c: 349: initLCD();
  3439  00052C  EC3C  F00B         	call	i2_initLCD	;wreg free
  3440                           
  3441                           ;main.c: 350: printf("wrong!");
  3442  000530  0EB3               	movlw	low STR_20
  3443  000532  6E0D               	movwf	i2printf@f,c
  3444  000534  0EFF               	movlw	high STR_20
  3445  000536  6E0E               	movwf	i2printf@f+1,c
  3446  000538  ECF2  F008         	call	i2_printf	;wreg free
  3447                           
  3448                           ;main.c: 352: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3449  00053C  0E33               	movlw	51
  3450  00053E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3451  000540  0EBB               	movlw	187
  3452  000542  6E1B               	movwf	??_interruptHandler& (0+255),c
  3453  000544  0EE0               	movlw	224
  3454  000546                     i2u281_47:
  3455  000546  2EE8               	decfsz	wreg,f,c
  3456  000548  D7FE               	bra	i2u281_47
  3457  00054A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3458  00054C  D7FC               	bra	i2u281_47
  3459  00054E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3460  000550  D7FA               	bra	i2u281_47
  3461                           
  3462                           ;main.c: 354: strcpy(current_set,"");
  3463  000552  0EBC               	movlw	low _current_set
  3464  000554  6E07               	movwf	strcpy@to,c
  3465  000556  0E00               	movlw	high _current_set
  3466  000558  6E08               	movwf	strcpy@to+1,c
  3467  00055A  0E5D               	movlw	low (STR_9+14)
  3468  00055C  6E09               	movwf	strcpy@from,c
  3469  00055E  0EFF               	movlw	high (STR_9+14)
  3470  000560  6E0A               	movwf	strcpy@from+1,c
  3471  000562  EC87  F00B         	call	_strcpy	;wreg free
  3472                           
  3473                           ;main.c: 357: counter = 0;
  3474  000566  0E00               	movlw	0
  3475  000568  6E49               	movwf	_counter+1,c
  3476  00056A  0E00               	movlw	0
  3477  00056C  6E48               	movwf	_counter,c
  3478  00056E  D149               	goto	i2l2809
  3479  000570                     i2l146:
  3480                           
  3481                           ;main.c: 362: }
  3482                           ;main.c: 367: if (state ==2){
  3483  000570  0E02               	movlw	2
  3484  000572  0100               	movlb	0	; () banked
  3485  000574  1992               	xorwf	_state& (0+255),w,b
  3486  000576  1193               	iorwf	(_state+1)& (0+255),w,b
  3487  000578  A4D8               	btfss	status,2,c
  3488  00057A  D12F               	goto	i2l177
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;main.c: 368: counter = 0;
  3492  00057C  0E00               	movlw	0
  3493  00057E  6E49               	movwf	_counter+1,c
  3494  000580  0E00               	movlw	0
  3495  000582  6E48               	movwf	_counter,c
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 370: lcdInst(0xC0);;
  3499  000584  0EC0               	movlw	192
  3500  000586  EC6E  F00C         	call	i2_lcdInst
  3501                           
  3502                           ;main.c: 371: putch(keys[keypress]);
  3503  00058A  5035               	movf	interruptHandler@keypress,w,c
  3504  00058C  0D01               	mullw	1
  3505  00058E  0EB9               	movlw	low _keys
  3506  000590  24F3               	addwf	prodl,w,c
  3507  000592  6EF6               	movwf	tblptrl,c
  3508  000594  0EFE               	movlw	high _keys
  3509  000596  20F4               	addwfc	prodh,w,c
  3510  000598  6EF7               	movwf	tblptrh,c
  3511  00059A                     	if	1	;There are 3 active tblptr bytes
  3512  00059A  6AF8               	clrf	tblptru,c
  3513  00059C  0E00               	movlw	low (__mediumconst shr (0+16))
  3514  00059E  22F8               	addwfc	tblptru,f,c
  3515  0005A0                     	endif
  3516  0005A0  0008               	tblrd		*
  3517  0005A2  50F5               	movf	tablat,w,c
  3518  0005A4  EC64  F00C         	call	i2_putch
  3519                           
  3520                           ;main.c: 373: _delay((unsigned long)((500)*(40000000/4000.0)));
  3521  0005A8  0E1A               	movlw	26
  3522  0005AA  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3523  0005AC  0E5E               	movlw	94
  3524  0005AE  6E1B               	movwf	??_interruptHandler& (0+255),c
  3525  0005B0  0E6E               	movlw	110
  3526  0005B2                     i2u282_47:
  3527  0005B2  2EE8               	decfsz	wreg,f,c
  3528  0005B4  D7FE               	bra	i2u282_47
  3529  0005B6  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3530  0005B8  D7FC               	bra	i2u282_47
  3531  0005BA  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3532  0005BC  D7FA               	bra	i2u282_47
  3533  0005BE  D000               	nop2	
  3534                           
  3535                           ;main.c: 375: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  3536  0005C0  5035               	movf	interruptHandler@keypress,w,c
  3537  0005C2  0D01               	mullw	1
  3538  0005C4  0EB9               	movlw	low _keys
  3539  0005C6  24F3               	addwf	prodl,w,c
  3540  0005C8  6EF6               	movwf	tblptrl,c
  3541  0005CA  0EFE               	movlw	high _keys
  3542  0005CC  20F4               	addwfc	prodh,w,c
  3543  0005CE  6EF7               	movwf	tblptrh,c
  3544  0005D0                     	if	1	;There are 3 active tblptr bytes
  3545  0005D0  6AF8               	clrf	tblptru,c
  3546  0005D2  0E00               	movlw	low (__mediumconst shr (0+16))
  3547  0005D4  22F8               	addwfc	tblptru,f,c
  3548  0005D6                     	endif
  3549  0005D6  0008               	tblrd		*
  3550  0005D8  50F5               	movf	tablat,w,c
  3551  0005DA  0A31               	xorlw	49
  3552  0005DC  B4D8               	btfsc	status,2,c
  3553  0005DE  D05A               	goto	i2l165
  3554  0005E0  5035               	movf	interruptHandler@keypress,w,c
  3555  0005E2  0D01               	mullw	1
  3556  0005E4  0EB9               	movlw	low _keys
  3557  0005E6  24F3               	addwf	prodl,w,c
  3558  0005E8  6EF6               	movwf	tblptrl,c
  3559  0005EA  0EFE               	movlw	high _keys
  3560  0005EC  20F4               	addwfc	prodh,w,c
  3561  0005EE  6EF7               	movwf	tblptrh,c
  3562  0005F0                     	if	1	;There are 3 active tblptr bytes
  3563  0005F0  6AF8               	clrf	tblptru,c
  3564  0005F2  0E00               	movlw	low (__mediumconst shr (0+16))
  3565  0005F4  22F8               	addwfc	tblptru,f,c
  3566  0005F6                     	endif
  3567  0005F6  0008               	tblrd		*
  3568  0005F8  50F5               	movf	tablat,w,c
  3569  0005FA  0A32               	xorlw	50
  3570  0005FC  B4D8               	btfsc	status,2,c
  3571  0005FE  D04A               	goto	i2l165
  3572  000600  5035               	movf	interruptHandler@keypress,w,c
  3573  000602  0D01               	mullw	1
  3574  000604  0EB9               	movlw	low _keys
  3575  000606  24F3               	addwf	prodl,w,c
  3576  000608  6EF6               	movwf	tblptrl,c
  3577  00060A  0EFE               	movlw	high _keys
  3578  00060C  20F4               	addwfc	prodh,w,c
  3579  00060E  6EF7               	movwf	tblptrh,c
  3580  000610                     	if	1	;There are 3 active tblptr bytes
  3581  000610  6AF8               	clrf	tblptru,c
  3582  000612  0E00               	movlw	low (__mediumconst shr (0+16))
  3583  000614  22F8               	addwfc	tblptru,f,c
  3584  000616                     	endif
  3585  000616  0008               	tblrd		*
  3586  000618  50F5               	movf	tablat,w,c
  3587  00061A  0A33               	xorlw	51
  3588  00061C  B4D8               	btfsc	status,2,c
  3589  00061E  D03A               	goto	i2l165
  3590  000620  5035               	movf	interruptHandler@keypress,w,c
  3591  000622  0D01               	mullw	1
  3592  000624  0EB9               	movlw	low _keys
  3593  000626  24F3               	addwf	prodl,w,c
  3594  000628  6EF6               	movwf	tblptrl,c
  3595  00062A  0EFE               	movlw	high _keys
  3596  00062C  20F4               	addwfc	prodh,w,c
  3597  00062E  6EF7               	movwf	tblptrh,c
  3598  000630                     	if	1	;There are 3 active tblptr bytes
  3599  000630  6AF8               	clrf	tblptru,c
  3600  000632  0E00               	movlw	low (__mediumconst shr (0+16))
  3601  000634  22F8               	addwfc	tblptru,f,c
  3602  000636                     	endif
  3603  000636  0008               	tblrd		*
  3604  000638  50F5               	movf	tablat,w,c
  3605  00063A  0A34               	xorlw	52
  3606  00063C  B4D8               	btfsc	status,2,c
  3607  00063E  D02A               	goto	i2l165
  3608  000640  D0CC               	goto	i2l177
  3609  000642                     
  3610                           ;main.c: 379: number = 1;
  3611  000642  0E00               	movlw	0
  3612  000644  6E58               	movwf	_number+1,c
  3613  000646  0E01               	movlw	1
  3614  000648  D00F               	goto	L5
  3615  00064A                     
  3616                           ;main.c: 382: number = 2;
  3617  00064A  0E00               	movlw	0
  3618  00064C  6E58               	movwf	_number+1,c
  3619  00064E  0E02               	movlw	2
  3620  000650  D00B               	goto	L5
  3621  000652                     
  3622                           ;main.c: 385: number = 3;
  3623  000652  0E00               	movlw	0
  3624  000654  6E58               	movwf	_number+1,c
  3625  000656  0E03               	movlw	3
  3626  000658  D007               	goto	L5
  3627  00065A                     
  3628                           ;main.c: 388: number = 4;
  3629  00065A  0E00               	movlw	0
  3630  00065C  6E58               	movwf	_number+1,c
  3631  00065E  0E04               	movlw	4
  3632  000660  D003               	goto	L5
  3633  000662                     
  3634                           ;main.c: 391: number = 5;
  3635  000662  0E00               	movlw	0
  3636  000664  6E58               	movwf	_number+1,c
  3637  000666  0E05               	movlw	5
  3638  000668                     L5:
  3639  000668  6E57               	movwf	_number,c
  3640                           
  3641                           ;main.c: 392: break;
  3642  00066A  D031               	goto	i2l167
  3643  00066C                     
  3644                           ;main.c: 394: initLCD();
  3645  00066C  EC3C  F00B         	call	i2_initLCD	;wreg free
  3646                           
  3647                           ;main.c: 395: printf("Wrong input");
  3648  000670  0E7B               	movlw	low STR_22
  3649  000672  6E0D               	movwf	i2printf@f,c
  3650  000674  0EFF               	movlw	high STR_22
  3651  000676  6E0E               	movwf	i2printf@f+1,c
  3652  000678  ECF2  F008         	call	i2_printf	;wreg free
  3653                           
  3654                           ;main.c: 396: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3655  00067C  0E33               	movlw	51
  3656  00067E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3657  000680  0EBB               	movlw	187
  3658  000682  6E1B               	movwf	??_interruptHandler& (0+255),c
  3659  000684  0EE0               	movlw	224
  3660  000686                     i2u283_47:
  3661  000686  2EE8               	decfsz	wreg,f,c
  3662  000688  D7FE               	bra	i2u283_47
  3663  00068A  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3664  00068C  D7FC               	bra	i2u283_47
  3665  00068E  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3666  000690  D7FA               	bra	i2u283_47
  3667                           
  3668                           ;main.c: 397: }
  3669  000692  D01D               	goto	i2l167
  3670  000694                     i2l165:
  3671  000694  5035               	movf	interruptHandler@keypress,w,c
  3672  000696  0D01               	mullw	1
  3673  000698  0EB9               	movlw	low _keys
  3674  00069A  24F3               	addwf	prodl,w,c
  3675  00069C  6EF6               	movwf	tblptrl,c
  3676  00069E  0EFE               	movlw	high _keys
  3677  0006A0  20F4               	addwfc	prodh,w,c
  3678  0006A2  6EF7               	movwf	tblptrh,c
  3679  0006A4                     	if	1	;There are 3 active tblptr bytes
  3680  0006A4  6AF8               	clrf	tblptru,c
  3681  0006A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3682  0006A8  22F8               	addwfc	tblptru,f,c
  3683  0006AA                     	endif
  3684  0006AA  0008               	tblrd		*
  3685  0006AC  50F5               	movf	tablat,w,c
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 5, Range of values is 49 to 53
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte           16     9 (average)
  3692                           ;	Chosen strategy is simple_byte
  3693  0006AE  0A31               	xorlw	49	; case 49
  3694  0006B0  B4D8               	btfsc	status,2,c
  3695  0006B2  D7C7               	goto	i2l166
  3696  0006B4  0A03               	xorlw	3	; case 50
  3697  0006B6  B4D8               	btfsc	status,2,c
  3698  0006B8  D7C8               	goto	i2l168
  3699  0006BA  0A01               	xorlw	1	; case 51
  3700  0006BC  B4D8               	btfsc	status,2,c
  3701  0006BE  D7C9               	goto	i2l169
  3702  0006C0  0A07               	xorlw	7	; case 52
  3703  0006C2  B4D8               	btfsc	status,2,c
  3704  0006C4  D7CA               	goto	i2l170
  3705  0006C6  0A01               	xorlw	1	; case 53
  3706  0006C8  B4D8               	btfsc	status,2,c
  3707  0006CA  D7CB               	goto	i2l171
  3708  0006CC  D7CF               	goto	i2l172
  3709  0006CE                     i2l167:
  3710                           
  3711                           ;main.c: 400: is_valid();
  3712  0006CE  EC28  F004         	call	_is_valid	;wreg free
  3713                           
  3714                           ;main.c: 402: if ( check() == 0){
  3715  0006D2  EC91  F00A         	call	_check	;wreg free
  3716  0006D6  5001               	movf	?_check,w,c
  3717  0006D8  1002               	iorwf	?_check+1,w,c
  3718  0006DA  A4D8               	btfss	status,2,c
  3719  0006DC  D028               	goto	i2l173
  3720                           
  3721                           ;main.c: 403: initLCD();
  3722  0006DE  EC3C  F00B         	call	i2_initLCD	;wreg free
  3723                           
  3724                           ;main.c: 404: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3725  0006E2  0E80               	movlw	128
  3726  0006E4  EC6E  F00C         	call	i2_lcdInst
  3727  0006E8  0E41               	movlw	65
  3728  0006EA  6E1B               	movwf	??_interruptHandler& (0+255),c
  3729  0006EC  0EEE               	movlw	238
  3730  0006EE                     i2u284_47:
  3731  0006EE  2EE8               	decfsz	wreg,f,c
  3732  0006F0  D7FE               	bra	i2u284_47
  3733  0006F2  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3734  0006F4  D7FC               	bra	i2u284_47
  3735  0006F6  D000               	nop2	
  3736                           
  3737                           ;main.c: 405: printf("TOO MANY");
  3738  0006F8  0E9B               	movlw	low STR_23
  3739  0006FA  6E0D               	movwf	i2printf@f,c
  3740  0006FC  0EFF               	movlw	high STR_23
  3741  0006FE  6E0E               	movwf	i2printf@f+1,c
  3742  000700  ECF2  F008         	call	i2_printf	;wreg free
  3743                           
  3744                           ;main.c: 407: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3745  000704  0E33               	movlw	51
  3746  000706  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3747  000708  0EBB               	movlw	187
  3748  00070A  6E1B               	movwf	??_interruptHandler& (0+255),c
  3749  00070C  0EE0               	movlw	224
  3750  00070E                     i2u285_47:
  3751  00070E  2EE8               	decfsz	wreg,f,c
  3752  000710  D7FE               	bra	i2u285_47
  3753  000712  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3754  000714  D7FC               	bra	i2u285_47
  3755  000716  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3756  000718  D7FA               	bra	i2u285_47
  3757                           
  3758                           ;main.c: 408: state = 2;
  3759  00071A  0E00               	movlw	0
  3760  00071C  0100               	movlb	0	; () banked
  3761  00071E  6F93               	movwf	(_state+1)& (0+255),b
  3762  000720  0E02               	movlw	2
  3763  000722  6F92               	movwf	_state& (0+255),b
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 409: number = 0;
  3767  000724  0E00               	movlw	0
  3768  000726  6E58               	movwf	_number+1,c
  3769  000728  0E00               	movlw	0
  3770  00072A  6E57               	movwf	_number,c
  3771                           
  3772                           ;main.c: 410: }
  3773  00072C  D056               	goto	i2l177
  3774  00072E                     i2l173:
  3775                           
  3776                           ;main.c: 413: else if (counter_step >= assembly_step-1){
  3777                           
  3778                           ; BSR set to: 0
  3779  00072E  0EFF               	movlw	255
  3780  000730  6E1B               	movwf	??_interruptHandler& (0+255),c
  3781  000732  0EFF               	movlw	255
  3782  000734  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3783  000736  C090  F01D         	movff	_assembly_step,??_interruptHandler+2
  3784  00073A  C091  F01E         	movff	_assembly_step+1,??_interruptHandler+3
  3785  00073E  501B               	movf	??_interruptHandler,w,c
  3786  000740  261D               	addwf	??_interruptHandler+2,f,c
  3787  000742  501C               	movf	??_interruptHandler+1,w,c
  3788  000744  221E               	addwfc	??_interruptHandler+3,f,c
  3789  000746  501D               	movf	??_interruptHandler+2,w,c
  3790  000748  5C46               	subwf	_counter_step,w,c
  3791  00074A  5047               	movf	_counter_step+1,w,c
  3792  00074C  0A80               	xorlw	128
  3793  00074E  6E1F               	movwf	(??_interruptHandler+4)& (0+255),c
  3794  000750  501E               	movf	??_interruptHandler+3,w,c
  3795  000752  0A80               	xorlw	128
  3796  000754  581F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  3797  000756  A0D8               	btfss	status,0,c
  3798  000758  D013               	goto	i2l175
  3799                           
  3800                           ;main.c: 414: final_number[counter_step] = number;
  3801  00075A  90D8               	bcf	status,0,c
  3802  00075C  3446               	rlcf	_counter_step,w,c
  3803  00075E  6ED9               	movwf	fsr2l,c
  3804  000760  3447               	rlcf	_counter_step+1,w,c
  3805  000762  6EDA               	movwf	fsr2h,c
  3806  000764  0E80               	movlw	low _final_number
  3807  000766  26D9               	addwf	fsr2l,f,c
  3808  000768  0E00               	movlw	high _final_number
  3809  00076A  22DA               	addwfc	fsr2h,f,c
  3810  00076C  C057  FFDE         	movff	_number,postinc2
  3811  000770  C058  FFDD         	movff	_number+1,postdec2
  3812                           
  3813                           ;main.c: 415: state = 3;
  3814  000774  0E00               	movlw	0
  3815  000776  0100               	movlb	0	; () banked
  3816  000778  6F93               	movwf	(_state+1)& (0+255),b
  3817  00077A  0E03               	movlw	3
  3818  00077C  6F92               	movwf	_state& (0+255),b
  3819                           
  3820                           ;main.c: 416: }
  3821  00077E  D02D               	goto	i2l177
  3822  000780                     i2l175:
  3823                           
  3824                           ;main.c: 417: else if ( check() == 1){
  3825                           
  3826                           ; BSR set to: 0
  3827  000780  EC91  F00A         	call	_check	;wreg free
  3828  000784  0401               	decf	?_check,w,c
  3829  000786  1002               	iorwf	?_check+1,w,c
  3830  000788  A4D8               	btfss	status,2,c
  3831  00078A  D027               	goto	i2l177
  3832                           
  3833                           ;main.c: 418: state = 1;
  3834  00078C  0E00               	movlw	0
  3835  00078E  0100               	movlb	0	; () banked
  3836  000790  6F93               	movwf	(_state+1)& (0+255),b
  3837  000792  0E01               	movlw	1
  3838  000794  6F92               	movwf	_state& (0+255),b
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;main.c: 419: initLCD();
  3842  000796  EC3C  F00B         	call	i2_initLCD	;wreg free
  3843                           
  3844                           ;main.c: 420: printf("okay!");
  3845  00079A  0EC0               	movlw	low STR_24
  3846  00079C  6E0D               	movwf	i2printf@f,c
  3847  00079E  0EFF               	movlw	high STR_24
  3848  0007A0  6E0E               	movwf	i2printf@f+1,c
  3849  0007A2  ECF2  F008         	call	i2_printf	;wreg free
  3850                           
  3851                           ;main.c: 421: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3852  0007A6  0E33               	movlw	51
  3853  0007A8  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  3854  0007AA  0EBB               	movlw	187
  3855  0007AC  6E1B               	movwf	??_interruptHandler& (0+255),c
  3856  0007AE  0EE0               	movlw	224
  3857  0007B0                     i2u286_47:
  3858  0007B0  2EE8               	decfsz	wreg,f,c
  3859  0007B2  D7FE               	bra	i2u286_47
  3860  0007B4  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  3861  0007B6  D7FC               	bra	i2u286_47
  3862  0007B8  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  3863  0007BA  D7FA               	bra	i2u286_47
  3864                           
  3865                           ;main.c: 422: final_number[counter_step] = number;
  3866  0007BC  90D8               	bcf	status,0,c
  3867  0007BE  3446               	rlcf	_counter_step,w,c
  3868  0007C0  6ED9               	movwf	fsr2l,c
  3869  0007C2  3447               	rlcf	_counter_step+1,w,c
  3870  0007C4  6EDA               	movwf	fsr2h,c
  3871  0007C6  0E80               	movlw	low _final_number
  3872  0007C8  26D9               	addwf	fsr2l,f,c
  3873  0007CA  0E00               	movlw	high _final_number
  3874  0007CC  22DA               	addwfc	fsr2h,f,c
  3875  0007CE  C057  FFDE         	movff	_number,postinc2
  3876  0007D2  C058  FFDD         	movff	_number+1,postdec2
  3877                           
  3878                           ;main.c: 423: counter_step++;
  3879  0007D6  4A46               	infsnz	_counter_step,f,c
  3880  0007D8  2A47               	incf	_counter_step+1,f,c
  3881  0007DA                     i2l177:
  3882                           
  3883                           ;main.c: 424: }
  3884                           ;main.c: 427: }
  3885                           ;main.c: 429: }
  3886                           ;main.c: 436: B=0;N=0;S=0;W=0;
  3887  0007DA  0E00               	movlw	0
  3888  0007DC  6E3D               	movwf	_B+1,c
  3889  0007DE  0E00               	movlw	0
  3890  0007E0  6E3C               	movwf	_B,c
  3891  0007E2  0E00               	movlw	0
  3892  0007E4  6E3B               	movwf	_N+1,c
  3893  0007E6  0E00               	movlw	0
  3894  0007E8  6E3A               	movwf	_N,c
  3895  0007EA  0E00               	movlw	0
  3896  0007EC  6E39               	movwf	_S+1,c
  3897  0007EE  0E00               	movlw	0
  3898  0007F0  6E38               	movwf	_S,c
  3899  0007F2  0E00               	movlw	0
  3900  0007F4  6E37               	movwf	_W+1,c
  3901  0007F6  0E00               	movlw	0
  3902  0007F8  6E36               	movwf	_W,c
  3903                           
  3904                           ;main.c: 437: total_number = 0;
  3905  0007FA  0E00               	movlw	0
  3906  0007FC  6E41               	movwf	_total_number+1,c
  3907  0007FE  0E00               	movlw	0
  3908  000800  6E40               	movwf	_total_number,c
  3909  000802                     i2l2809:
  3910                           
  3911                           ;main.c: 439: INT1IF = 0;
  3912  000802  90F0               	bcf	intcon3,0,c	;volatile
  3913  000804                     i2l2811:
  3914                           
  3915                           ;main.c: 440: return;
  3916  000804  C031  F05C         	movff	??_interruptHandler+22,btemp+3
  3917  000808  C030  F05B         	movff	??_interruptHandler+21,btemp+2
  3918  00080C  C02F  F05A         	movff	??_interruptHandler+20,btemp+1
  3919  000810  C02E  F059         	movff	??_interruptHandler+19,btemp
  3920  000814  C02D  FFF5         	movff	??_interruptHandler+18,tablat
  3921  000818  C02C  FFF8         	movff	??_interruptHandler+17,tblptru
  3922  00081C  C02B  FFF7         	movff	??_interruptHandler+16,tblptrh
  3923  000820  C02A  FFF6         	movff	??_interruptHandler+15,tblptrl
  3924  000824  C029  FFF4         	movff	??_interruptHandler+14,prodh
  3925  000828  C028  FFF3         	movff	??_interruptHandler+13,prodl
  3926  00082C  C027  FFDA         	movff	??_interruptHandler+12,fsr2h
  3927  000830  C026  FFD9         	movff	??_interruptHandler+11,fsr2l
  3928  000834  C025  FFE2         	movff	??_interruptHandler+10,fsr1h
  3929  000838  C024  FFE1         	movff	??_interruptHandler+9,fsr1l
  3930  00083C  C023  FFEA         	movff	??_interruptHandler+8,fsr0h
  3931  000840  C022  FFE9         	movff	??_interruptHandler+7,fsr0l
  3932  000844  C021  FFFB         	movff	??_interruptHandler+6,pclatu
  3933  000848  C020  FFFA         	movff	??_interruptHandler+5,pclath
  3934  00084C  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3935  00084E  0011               	retfie		f
  3936  000850                     __end_of_interruptHandler:
  3937                           	opt stack 0
  3938                           pclatu	equ	0xFFB
  3939                           pclath	equ	0xFFA
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           intcon3	equ	0xFF0
  3948                           indf0	equ	0xFEF
  3949                           postinc0	equ	0xFEE
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           postinc2	equ	0xFDE
  3956                           postdec2	equ	0xFDD
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function i2_printf *****************
  3962 ;; Defined at:
  3963 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3966 ;;		 -> STR_24(6), STR_23(9), STR_22(12), STR_20(7), 
  3967 ;;		 -> STR_18(3), STR_17(11), STR_15(3), STR_14(9), 
  3968 ;;		 -> STR_9(15), STR_8(3), STR_7(3), STR_6(17), 
  3969 ;;		 -> STR_5(6), STR_4(8), STR_3(3), STR_2(14), 
  3970 ;;		 -> STR_1(15), 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  printf          4    0        struct .
  3973 ;;  printf          2   23[COMRAM] unsigned int 
  3974 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  3975 ;;		 -> STR_45(7), final_set(40), current_set(5), 
  3976 ;;  printf          2   19[COMRAM] PTR void [1]
  3977 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3978 ;;  printf          2    0        unsigned int 
  3979 ;;  printf          1   25[COMRAM] char 
  3980 ;;  printf          1   18[COMRAM] char 
  3981 ;;  printf          1   17[COMRAM] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  2   12[COMRAM] int 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:       14 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    2
  3998 ;; This function calls:
  3999 ;;		i2___lwdiv
  4000 ;;		i2___lwmod
  4001 ;;		i2_putch
  4002 ;; This function is called by:
  4003 ;;		_interruptHandler
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text10
  4008  0011E4                     __ptext10:
  4009                           	opt stack 0
  4010  0011E4                     i2_printf:
  4011                           	opt stack 24
  4012                           
  4013                           ;doprnt.c: 466: va_list ap;
  4014                           ;doprnt.c: 499: signed char c;
  4015                           ;doprnt.c: 506: signed char prec;
  4016                           ;doprnt.c: 508: unsigned char flag;
  4017                           ;doprnt.c: 523: union {
  4018                           ;doprnt.c: 524: unsigned long vd;
  4019                           ;doprnt.c: 525: double integ;
  4020                           ;doprnt.c: 526: } tmpval;
  4021                           ;doprnt.c: 528: unsigned int val;
  4022                           ;doprnt.c: 529: unsigned len;
  4023                           ;doprnt.c: 530: const char * cp;
  4024                           ;doprnt.c: 533: *ap = __va_start();
  4025                           
  4026                           ;incstack = 0
  4027  0011E4  0E0F               	movlw	low (?i2_printf+2)
  4028  0011E6  6E14               	movwf	i2printf@ap,c
  4029  0011E8  0E00               	movlw	high (?i2_printf+2)
  4030  0011EA  6E15               	movwf	i2printf@ap+1,c
  4031                           
  4032                           ;doprnt.c: 536: while(c = *f++) {
  4033  0011EC  D0C8               	goto	i2u187_40
  4034  0011EE                     
  4035                           ;doprnt.c: 538: if(c != '%')
  4036  0011EE  0E25               	movlw	37
  4037  0011F0  181A               	xorwf	i2printf@c,w,c
  4038  0011F2  B4D8               	btfsc	status,2,c
  4039  0011F4  D004               	goto	i2l293
  4040                           
  4041                           ;doprnt.c: 540: {
  4042                           ;doprnt.c: 541: (putch(c) );
  4043  0011F6  501A               	movf	i2printf@c,w,c
  4044  0011F8  EC64  F00C         	call	i2_putch
  4045                           
  4046                           ;doprnt.c: 542: continue;
  4047  0011FC  D0C0               	goto	i2u187_40
  4048  0011FE                     i2l293:
  4049                           
  4050                           ;doprnt.c: 543: }
  4051                           ;doprnt.c: 548: flag = 0;
  4052  0011FE  0E00               	movlw	0
  4053  001200  6E12               	movwf	i2printf@flag,c
  4054                           
  4055                           ;doprnt.c: 635: switch(c = *f++) {
  4056  001202  D03F               	goto	i2l294
  4057  001204                     
  4058                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4059  001204  C014  FFD9         	movff	i2printf@ap,fsr2l
  4060  001208  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4061  00120C  CFDE F016          	movff	postinc2,i2printf@cp
  4062  001210  CFDD F017          	movff	postdec2,i2printf@cp+1
  4063  001214  0E02               	movlw	2
  4064  001216  2614               	addwf	i2printf@ap,f,c
  4065  001218  0E00               	movlw	0
  4066  00121A  2215               	addwfc	i2printf@ap+1,f,c
  4067                           
  4068                           ;doprnt.c: 740: if(!cp)
  4069  00121C  5016               	movf	i2printf@cp,w,c
  4070  00121E  1017               	iorwf	i2printf@cp+1,w,c
  4071  001220  A4D8               	btfss	status,2,c
  4072  001222  D01A               	goto	i2l302
  4073                           
  4074                           ;doprnt.c: 741: cp = "(null)";
  4075  001224  0EAC               	movlw	low STR_45
  4076  001226  6E16               	movwf	i2printf@cp,c
  4077  001228  0EFF               	movlw	high STR_45
  4078  00122A  6E17               	movwf	i2printf@cp+1,c
  4079                           
  4080                           ;doprnt.c: 777: while(*cp)
  4081  00122C  D015               	goto	i2l302
  4082  00122E                     
  4083                           ;doprnt.c: 778: (putch(*cp++) );
  4084  00122E  C016  FFF6         	movff	i2printf@cp,tblptrl
  4085  001232  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4086  001236  0E00               	movlw	low (__mediumconst shr (0+16))
  4087  001238  6EF8               	movwf	tblptru,c
  4088  00123A  0E0F               	movlw	(high __ramtop+-1)
  4089  00123C  64F7               	cpfsgt	tblptrh,c
  4090  00123E  D003               	bra	i2u179_47
  4091  001240  0008               	tblrd		*
  4092  001242  50F5               	movf	tablat,w,c
  4093  001244  D005               	bra	i2u179_40
  4094  001246                     i2u179_47:
  4095  001246  CFF6 FFE9          	movff	tblptrl,fsr0l
  4096  00124A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4097  00124E  50EF               	movf	indf0,w,c
  4098  001250                     i2u179_40:
  4099  001250  EC64  F00C         	call	i2_putch
  4100  001254  4A16               	infsnz	i2printf@cp,f,c
  4101  001256  2A17               	incf	i2printf@cp+1,f,c
  4102  001258                     i2l302:
  4103  001258  C016  FFF6         	movff	i2printf@cp,tblptrl
  4104  00125C  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4105  001260  0E00               	movlw	low (__mediumconst shr (0+16))
  4106  001262  6EF8               	movwf	tblptru,c
  4107  001264  0E0F               	movlw	(high __ramtop+-1)
  4108  001266  64F7               	cpfsgt	tblptrh,c
  4109  001268  D003               	bra	i2u180_47
  4110  00126A  0008               	tblrd		*
  4111  00126C  50F5               	movf	tablat,w,c
  4112  00126E  D005               	bra	i2u180_40
  4113  001270                     i2u180_47:
  4114  001270  CFF6 FFE9          	movff	tblptrl,fsr0l
  4115  001274  CFF7 FFEA          	movff	tblptrh,fsr0h
  4116  001278  50EF               	movf	indf0,w,c
  4117  00127A                     i2u180_40:
  4118  00127A  0900               	iorlw	0
  4119  00127C  B4D8               	btfsc	status,2,c
  4120  00127E  D07F               	goto	i2u187_40
  4121  001280  D7D6               	goto	i2l303
  4122  001282                     i2l294:
  4123  001282  C00D  FFF6         	movff	i2printf@f,tblptrl
  4124  001286  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4125  00128A  4A0D               	infsnz	i2printf@f,f,c
  4126  00128C  2A0E               	incf	i2printf@f+1,f,c
  4127  00128E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4128  00128E  6AF8               	clrf	tblptru,c
  4129  001290                     	endif
  4130  001290                     	if	0	;tblptru may be non-zero
  4131  001290                     	endif
  4132  001290  0008               	tblrd		*
  4133  001292  CFF5 F01A          	movff	tablat,i2printf@c
  4134  001296  501A               	movf	i2printf@c,w,c
  4135                           
  4136                           ; Switch size 1, requested type "space"
  4137                           ; Number of cases is 4, Range of values is 0 to 115
  4138                           ; switch strategies available:
  4139                           ; Name         Instructions Cycles
  4140                           ; simple_byte           13     7 (average)
  4141                           ;	Chosen strategy is simple_byte
  4142  001298  0A00               	xorlw	0	; case 0
  4143  00129A  B4D8               	btfsc	status,2,c
  4144  00129C  0012               	return	
  4145  00129E  0A64               	xorlw	100	; case 100
  4146  0012A0  B4D8               	btfsc	status,2,c
  4147  0012A2  D007               	goto	i2l299
  4148  0012A4  0A0D               	xorlw	13	; case 105
  4149  0012A6  B4D8               	btfsc	status,2,c
  4150  0012A8  D004               	goto	i2l299
  4151  0012AA  0A1A               	xorlw	26	; case 115
  4152  0012AC  B4D8               	btfsc	status,2,c
  4153  0012AE  D7AA               	goto	i2l300
  4154  0012B0  D066               	goto	i2u187_40
  4155  0012B2                     i2l299:
  4156                           
  4157                           ;doprnt.c: 1253: {
  4158                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4159  0012B2  C014  FFD9         	movff	i2printf@ap,fsr2l
  4160  0012B6  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4161  0012BA  CFDE F018          	movff	postinc2,i2printf@val
  4162  0012BE  CFDD F019          	movff	postdec2,i2printf@val+1
  4163  0012C2  0E02               	movlw	2
  4164  0012C4  2614               	addwf	i2printf@ap,f,c
  4165  0012C6  0E00               	movlw	0
  4166  0012C8  2215               	addwfc	i2printf@ap+1,f,c
  4167                           
  4168                           ;doprnt.c: 1261: if((int)val < 0) {
  4169  0012CA  AE19               	btfss	i2printf@val+1,7,c
  4170  0012CC  D006               	goto	i2l306
  4171                           
  4172                           ;doprnt.c: 1262: flag |= 0x03;
  4173  0012CE  0E03               	movlw	3
  4174  0012D0  1212               	iorwf	i2printf@flag,f,c
  4175                           
  4176                           ;doprnt.c: 1263: val = -val;
  4177  0012D2  6C18               	negf	i2printf@val,c
  4178  0012D4  1E19               	comf	i2printf@val+1,f,c
  4179  0012D6  B0D8               	btfsc	status,0,c
  4180  0012D8  2A19               	incf	i2printf@val+1,f,c
  4181  0012DA                     i2l306:
  4182                           
  4183                           ;doprnt.c: 1264: }
  4184                           ;doprnt.c: 1266: }
  4185                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4186  0012DA  0E01               	movlw	1
  4187  0012DC  6E1A               	movwf	i2printf@c,c
  4188  0012DE                     i2l2439:
  4189  0012DE  0E05               	movlw	5
  4190  0012E0  181A               	xorwf	i2printf@c,w,c
  4191  0012E2  B4D8               	btfsc	status,2,c
  4192  0012E4  D015               	goto	i2u185_40
  4193                           
  4194                           ;doprnt.c: 1306: if(val < dpowers[c])
  4195  0012E6  501A               	movf	i2printf@c,w,c
  4196  0012E8  0D02               	mullw	2
  4197  0012EA  0ECA               	movlw	low _dpowers
  4198  0012EC  24F3               	addwf	prodl,w,c
  4199  0012EE  6EF6               	movwf	tblptrl,c
  4200  0012F0  0EFE               	movlw	high _dpowers
  4201  0012F2  20F4               	addwfc	prodh,w,c
  4202  0012F4  6EF7               	movwf	tblptrh,c
  4203  0012F6                     	if	1	;There are 3 active tblptr bytes
  4204  0012F6  6AF8               	clrf	tblptru,c
  4205  0012F8  0E00               	movlw	low (__mediumconst shr (0+16))
  4206  0012FA  22F8               	addwfc	tblptru,f,c
  4207  0012FC                     	endif
  4208  0012FC  0009               	tblrd		*+
  4209  0012FE  50F5               	movf	tablat,w,c
  4210  001300  5C18               	subwf	i2printf@val,w,c
  4211  001302  0009               	tblrd		*+
  4212  001304  50F5               	movf	tablat,w,c
  4213  001306  5819               	subwfb	i2printf@val+1,w,c
  4214  001308  A0D8               	btfss	status,0,c
  4215  00130A  D002               	goto	i2u185_40
  4216                           
  4217                           ;doprnt.c: 1307: break;
  4218  00130C  2A1A               	incf	i2printf@c,f,c
  4219  00130E  D7E7               	goto	i2l2439
  4220  001310                     i2u185_40:
  4221                           
  4222                           ;doprnt.c: 1422: {
  4223                           ;doprnt.c: 1438: if(flag & 0x03)
  4224  001310  C012  F011         	movff	i2printf@flag,??i2_printf
  4225  001314  0E03               	movlw	3
  4226  001316  1611               	andwf	??i2_printf,f,c
  4227  001318  B4D8               	btfsc	status,2,c
  4228  00131A  D003               	goto	i2l310
  4229                           
  4230                           ;doprnt.c: 1439: (putch('-') );
  4231  00131C  0E2D               	movlw	45
  4232  00131E  EC64  F00C         	call	i2_putch
  4233  001322                     i2l310:
  4234                           
  4235                           ;doprnt.c: 1469: }
  4236                           ;doprnt.c: 1472: prec = c;
  4237  001322  C01A  F013         	movff	i2printf@c,i2printf@prec
  4238                           
  4239                           ;doprnt.c: 1474: while(prec--) {
  4240  001326  D027               	goto	i2l311
  4241  001328                     
  4242                           ;doprnt.c: 1478: {
  4243                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4244  001328  5013               	movf	i2printf@prec,w,c
  4245  00132A  0D02               	mullw	2
  4246  00132C  0ECA               	movlw	low _dpowers
  4247  00132E  24F3               	addwf	prodl,w,c
  4248  001330  6EF6               	movwf	tblptrl,c
  4249  001332  0EFE               	movlw	high _dpowers
  4250  001334  20F4               	addwfc	prodh,w,c
  4251  001336  6EF7               	movwf	tblptrh,c
  4252  001338                     	if	1	;There are 3 active tblptr bytes
  4253  001338  6AF8               	clrf	tblptru,c
  4254  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
  4255  00133C  22F8               	addwfc	tblptru,f,c
  4256  00133E                     	endif
  4257  00133E  0009               	tblrd		*+
  4258  001340  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4259  001344  000A               	tblrd		*-
  4260  001346  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4261  00134A  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4262  00134E  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4263  001352  ECED  F00A         	call	i2___lwdiv	;wreg free
  4264  001356  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4265  00135A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4266  00135E  0E00               	movlw	0
  4267  001360  6E0B               	movwf	i2___lwmod@divisor+1,c
  4268  001362  0E0A               	movlw	10
  4269  001364  6E0A               	movwf	i2___lwmod@divisor,c
  4270  001366  ECCC  F00B         	call	i2___lwmod	;wreg free
  4271  00136A  5008               	movf	?i2___lwmod,w,c
  4272  00136C  0F30               	addlw	48
  4273  00136E  6E1A               	movwf	i2printf@c,c
  4274                           
  4275                           ;doprnt.c: 1523: }
  4276                           ;doprnt.c: 1524: (putch(c) );
  4277  001370  501A               	movf	i2printf@c,w,c
  4278  001372  EC64  F00C         	call	i2_putch
  4279  001376                     i2l311:
  4280  001376  0613               	decf	i2printf@prec,f,c
  4281  001378  2813               	incf	i2printf@prec,w,c
  4282  00137A  A4D8               	btfss	status,2,c
  4283  00137C  D7D5               	goto	i2l312
  4284  00137E                     i2u187_40:
  4285  00137E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4286  001382  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4287  001386  4A0D               	infsnz	i2printf@f,f,c
  4288  001388  2A0E               	incf	i2printf@f+1,f,c
  4289  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4290  00138A  6AF8               	clrf	tblptru,c
  4291  00138C                     	endif
  4292  00138C                     	if	0	;tblptru may be non-zero
  4293  00138C                     	endif
  4294  00138C  0008               	tblrd		*
  4295  00138E  CFF5 F01A          	movff	tablat,i2printf@c
  4296  001392  501A               	movf	i2printf@c,w,c
  4297  001394  B4D8               	btfsc	status,2,c
  4298  001396  0012               	return	
  4299  001398  D72A               	goto	i2l292
  4300  00139A                     __end_ofi2_printf:
  4301                           	opt stack 0
  4302                           pclatu	equ	0xFFB
  4303                           pclath	equ	0xFFA
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon3	equ	0xFF0
  4312                           indf0	equ	0xFEF
  4313                           postinc0	equ	0xFEE
  4314                           fsr0h	equ	0xFEA
  4315                           fsr0l	equ	0xFE9
  4316                           wreg	equ	0xFE8
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function i2_putch *****************
  4326 ;; Defined at:
  4327 ;;		line 24 in file "lcd.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  data            1    wreg     unsigned char 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  data            1    2[COMRAM] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;Total ram usage:        1 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    1
  4348 ;; This function calls:
  4349 ;;		i2_lcdNibble
  4350 ;; This function is called by:
  4351 ;;		_interruptHandler
  4352 ;;		i2_printf
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text11
  4357  0018C8                     __ptext11:
  4358                           	opt stack 0
  4359  0018C8                     i2_putch:
  4360                           	opt stack 25
  4361                           
  4362                           ;incstack = 0
  4363                           ;i2putch@data stored from wreg
  4364  0018C8  6E03               	movwf	i2putch@data,c
  4365                           
  4366                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4367  0018CA  848C               	bsf	3980,2,c	;volatile
  4368                           
  4369                           ;lcd.c: 33: lcdNibble(data);
  4370  0018CC  5003               	movf	i2putch@data,w,c
  4371  0018CE  EC52  F00A         	call	i2_lcdNibble
  4372                           
  4373                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4374  0018D2  0EC8               	movlw	200
  4375  0018D4                     i2u287_47:
  4376  0018D4  D000               	nop2	
  4377  0018D6  2EE8               	decfsz	wreg,f,c
  4378  0018D8  D7FD               	bra	i2u287_47
  4379  0018DA  0012               	return		;funcret
  4380  0018DC                     __end_ofi2_putch:
  4381                           	opt stack 0
  4382                           pclatu	equ	0xFFB
  4383                           pclath	equ	0xFFA
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           prodh	equ	0xFF4
  4389                           prodl	equ	0xFF3
  4390                           intcon	equ	0xFF2
  4391                           intcon3	equ	0xFF0
  4392                           indf0	equ	0xFEF
  4393                           postinc0	equ	0xFEE
  4394                           fsr0h	equ	0xFEA
  4395                           fsr0l	equ	0xFE9
  4396                           wreg	equ	0xFE8
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function i2___lwmod *****************
  4406 ;; Defined at:
  4407 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  dividend        2    7[COMRAM] unsigned int 
  4410 ;;  divisor         2    9[COMRAM] unsigned int 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  2    7[COMRAM] unsigned int 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;Total ram usage:        5 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		i2_printf
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text12
  4436  001798                     __ptext12:
  4437                           	opt stack 0
  4438  001798                     i2___lwmod:
  4439                           	opt stack 25
  4440                           
  4441                           ;incstack = 0
  4442  001798  500A               	movf	i2___lwmod@divisor,w,c
  4443  00179A  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4444  00179C  B4D8               	btfsc	status,2,c
  4445  00179E  D018               	goto	i2l734
  4446  0017A0  0E01               	movlw	1
  4447  0017A2  6E0C               	movwf	i2___lwmod@counter,c
  4448  0017A4  D004               	goto	i2l729
  4449  0017A6  90D8               	bcf	status,0,c
  4450  0017A8  360A               	rlcf	i2___lwmod@divisor,f,c
  4451  0017AA  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4452  0017AC  2A0C               	incf	i2___lwmod@counter,f,c
  4453  0017AE                     i2l729:
  4454  0017AE  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4455  0017B0  D7FA               	goto	i2l730
  4456  0017B2                     i2u131_40:
  4457  0017B2  500A               	movf	i2___lwmod@divisor,w,c
  4458  0017B4  5C08               	subwf	i2___lwmod@dividend,w,c
  4459  0017B6  500B               	movf	i2___lwmod@divisor+1,w,c
  4460  0017B8  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4461  0017BA  A0D8               	btfss	status,0,c
  4462  0017BC  D004               	goto	i2l733
  4463  0017BE  500A               	movf	i2___lwmod@divisor,w,c
  4464  0017C0  5E08               	subwf	i2___lwmod@dividend,f,c
  4465  0017C2  500B               	movf	i2___lwmod@divisor+1,w,c
  4466  0017C4  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4467  0017C6                     i2l733:
  4468  0017C6  90D8               	bcf	status,0,c
  4469  0017C8  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4470  0017CA  320A               	rrcf	i2___lwmod@divisor,f,c
  4471  0017CC  2E0C               	decfsz	i2___lwmod@counter,f,c
  4472  0017CE  D7F1               	goto	i2u131_40
  4473  0017D0                     i2l734:
  4474  0017D0  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4475  0017D4  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4476  0017D8  0012               	return		;funcret
  4477  0017DA                     __end_ofi2___lwmod:
  4478                           	opt stack 0
  4479                           pclatu	equ	0xFFB
  4480                           pclath	equ	0xFFA
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           intcon3	equ	0xFF0
  4489                           indf0	equ	0xFEF
  4490                           postinc0	equ	0xFEE
  4491                           fsr0h	equ	0xFEA
  4492                           fsr0l	equ	0xFE9
  4493                           wreg	equ	0xFE8
  4494                           fsr1h	equ	0xFE2
  4495                           fsr1l	equ	0xFE1
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function i2___lwdiv *****************
  4503 ;; Defined at:
  4504 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  dividend        2    0[COMRAM] unsigned int 
  4507 ;;  divisor         2    2[COMRAM] unsigned int 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4510 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  2    0[COMRAM] unsigned int 
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;Total ram usage:        7 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		i2_printf
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text13
  4534  0015DA                     __ptext13:
  4535                           	opt stack 0
  4536  0015DA                     i2___lwdiv:
  4537                           	opt stack 25
  4538                           
  4539                           ;incstack = 0
  4540  0015DA  0E00               	movlw	0
  4541  0015DC  6E06               	movwf	i2___lwdiv@quotient+1,c
  4542  0015DE  0E00               	movlw	0
  4543  0015E0  6E05               	movwf	i2___lwdiv@quotient,c
  4544  0015E2  5003               	movf	i2___lwdiv@divisor,w,c
  4545  0015E4  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4546  0015E6  B4D8               	btfsc	status,2,c
  4547  0015E8  D01C               	goto	i2l724
  4548  0015EA  0E01               	movlw	1
  4549  0015EC  6E07               	movwf	i2___lwdiv@counter,c
  4550  0015EE  D004               	goto	i2l719
  4551  0015F0  90D8               	bcf	status,0,c
  4552  0015F2  3603               	rlcf	i2___lwdiv@divisor,f,c
  4553  0015F4  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4554  0015F6  2A07               	incf	i2___lwdiv@counter,f,c
  4555  0015F8                     i2l719:
  4556  0015F8  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4557  0015FA  D7FA               	goto	i2l720
  4558  0015FC                     i2u128_40:
  4559  0015FC  90D8               	bcf	status,0,c
  4560  0015FE  3605               	rlcf	i2___lwdiv@quotient,f,c
  4561  001600  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4562  001602  5003               	movf	i2___lwdiv@divisor,w,c
  4563  001604  5C01               	subwf	i2___lwdiv@dividend,w,c
  4564  001606  5004               	movf	i2___lwdiv@divisor+1,w,c
  4565  001608  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4566  00160A  A0D8               	btfss	status,0,c
  4567  00160C  D005               	goto	i2l723
  4568  00160E  5003               	movf	i2___lwdiv@divisor,w,c
  4569  001610  5E01               	subwf	i2___lwdiv@dividend,f,c
  4570  001612  5004               	movf	i2___lwdiv@divisor+1,w,c
  4571  001614  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4572  001616  8005               	bsf	i2___lwdiv@quotient,0,c
  4573  001618                     i2l723:
  4574  001618  90D8               	bcf	status,0,c
  4575  00161A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4576  00161C  3203               	rrcf	i2___lwdiv@divisor,f,c
  4577  00161E  2E07               	decfsz	i2___lwdiv@counter,f,c
  4578  001620  D7ED               	goto	i2u128_40
  4579  001622                     i2l724:
  4580  001622  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4581  001626  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4582  00162A  0012               	return		;funcret
  4583  00162C                     __end_ofi2___lwdiv:
  4584                           	opt stack 0
  4585                           pclatu	equ	0xFFB
  4586                           pclath	equ	0xFFA
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           intcon3	equ	0xFF0
  4595                           indf0	equ	0xFEF
  4596                           postinc0	equ	0xFEE
  4597                           fsr0h	equ	0xFEA
  4598                           fsr0l	equ	0xFE9
  4599                           wreg	equ	0xFE8
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function i2_initLCD *****************
  4609 ;; Defined at:
  4610 ;;		line 60 in file "lcd.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        1 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    2
  4631 ;; This function calls:
  4632 ;;		i2_lcdInst
  4633 ;; This function is called by:
  4634 ;;		_interruptHandler
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text14
  4639  001678                     __ptext14:
  4640                           	opt stack 0
  4641  001678                     i2_initLCD:
  4642                           	opt stack 24
  4643                           
  4644                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4645                           
  4646                           ;incstack = 0
  4647  001678  0EC3               	movlw	195
  4648  00167A  6E04               	movwf	??i2_initLCD& (0+255),c
  4649  00167C  0ECD               	movlw	205
  4650  00167E                     i2u288_47:
  4651  00167E  2EE8               	decfsz	wreg,f,c
  4652  001680  D7FE               	bra	i2u288_47
  4653  001682  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4654  001684  D7FC               	bra	i2u288_47
  4655  001686  F000               	nop	
  4656                           
  4657                           ;lcd.c: 69: lcdInst(0b00110011);
  4658  001688  0E33               	movlw	51
  4659  00168A  EC6E  F00C         	call	i2_lcdInst
  4660                           
  4661                           ;lcd.c: 70: lcdInst(0b00110010);
  4662  00168E  0E32               	movlw	50
  4663  001690  EC6E  F00C         	call	i2_lcdInst
  4664                           
  4665                           ;lcd.c: 71: lcdInst(0b00101000);
  4666  001694  0E28               	movlw	40
  4667  001696  EC6E  F00C         	call	i2_lcdInst
  4668                           
  4669                           ;lcd.c: 72: lcdInst(0b00001111);
  4670  00169A  0E0F               	movlw	15
  4671  00169C  EC6E  F00C         	call	i2_lcdInst
  4672                           
  4673                           ;lcd.c: 73: lcdInst(0b00000110);
  4674  0016A0  0E06               	movlw	6
  4675  0016A2  EC6E  F00C         	call	i2_lcdInst
  4676                           
  4677                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4678  0016A6  0E01               	movlw	1
  4679  0016A8  EC6E  F00C         	call	i2_lcdInst
  4680  0016AC  0EC3               	movlw	195
  4681  0016AE  6E04               	movwf	??i2_initLCD& (0+255),c
  4682  0016B0  0ECD               	movlw	205
  4683  0016B2                     i2u289_47:
  4684  0016B2  2EE8               	decfsz	wreg,f,c
  4685  0016B4  D7FE               	bra	i2u289_47
  4686  0016B6  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4687  0016B8  D7FC               	bra	i2u289_47
  4688  0016BA  F000               	nop	
  4689                           
  4690                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4691  0016BC  0E0F               	movlw	15
  4692  0016BE  EC6E  F00C         	call	i2_lcdInst
  4693  0016C2  0012               	return		;funcret
  4694  0016C4                     __end_ofi2_initLCD:
  4695                           	opt stack 0
  4696                           pclatu	equ	0xFFB
  4697                           pclath	equ	0xFFA
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon3	equ	0xFF0
  4706                           indf0	equ	0xFEF
  4707                           postinc0	equ	0xFEE
  4708                           fsr0h	equ	0xFEA
  4709                           fsr0l	equ	0xFE9
  4710                           wreg	equ	0xFE8
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function i2_lcdInst *****************
  4720 ;; Defined at:
  4721 ;;		line 11 in file "lcd.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  data            1    wreg     unsigned char 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  data            1    2[COMRAM] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;Total ram usage:        1 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    1
  4742 ;; This function calls:
  4743 ;;		i2_lcdNibble
  4744 ;; This function is called by:
  4745 ;;		_interruptHandler
  4746 ;;		i2_initLCD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text15
  4751  0018DC                     __ptext15:
  4752                           	opt stack 0
  4753  0018DC                     i2_lcdInst:
  4754                           	opt stack 25
  4755                           
  4756                           ;incstack = 0
  4757                           ;i2lcdInst@data stored from wreg
  4758  0018DC  6E03               	movwf	i2lcdInst@data,c
  4759                           
  4760                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4761  0018DE  948C               	bcf	3980,2,c	;volatile
  4762                           
  4763                           ;lcd.c: 20: lcdNibble(data);
  4764  0018E0  5003               	movf	i2lcdInst@data,w,c
  4765  0018E2  EC52  F00A         	call	i2_lcdNibble
  4766                           
  4767                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4768  0018E6  0EC8               	movlw	200
  4769  0018E8                     i2u290_47:
  4770  0018E8  D000               	nop2	
  4771  0018EA  2EE8               	decfsz	wreg,f,c
  4772  0018EC  D7FD               	bra	i2u290_47
  4773  0018EE  0012               	return		;funcret
  4774  0018F0                     __end_ofi2_lcdInst:
  4775                           	opt stack 0
  4776                           pclatu	equ	0xFFB
  4777                           pclath	equ	0xFFA
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           intcon3	equ	0xFF0
  4786                           indf0	equ	0xFEF
  4787                           postinc0	equ	0xFEE
  4788                           fsr0h	equ	0xFEA
  4789                           fsr0l	equ	0xFE9
  4790                           wreg	equ	0xFE8
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function i2_lcdNibble *****************
  4800 ;; Defined at:
  4801 ;;		line 37 in file "lcd.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  data            1    wreg     unsigned char 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  data            1    1[COMRAM] unsigned char 
  4806 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		i2_lcdInst
  4826 ;;		i2_putch
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text16
  4831  0014A4                     __ptext16:
  4832                           	opt stack 0
  4833  0014A4                     i2_lcdNibble:
  4834                           	opt stack 25
  4835                           
  4836                           ;incstack = 0
  4837                           ;i2lcdNibble@data stored from wreg
  4838  0014A4  6E02               	movwf	i2lcdNibble@data,c
  4839                           
  4840                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4841  0014A6  5002               	movf	i2lcdNibble@data,w,c
  4842  0014A8  0BF0               	andlw	240
  4843  0014AA  6E01               	movwf	i2lcdNibble@temp,c
  4844                           
  4845                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4846  0014AC  508C               	movf	3980,w,c	;volatile
  4847  0014AE  0B0F               	andlw	15
  4848  0014B0  6E8C               	movwf	3980,c	;volatile
  4849                           
  4850                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4851  0014B2  5001               	movf	i2lcdNibble@temp,w,c
  4852  0014B4  108C               	iorwf	3980,w,c	;volatile
  4853  0014B6  6E8C               	movwf	3980,c	;volatile
  4854                           
  4855                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4856  0014B8  0E00               	movlw	0
  4857  0014BA  BEF2               	btfsc	intcon,7,c	;volatile
  4858  0014BC  0E01               	movlw	1
  4859  0014BE  6E4A               	movwf	lcd@LCDinterruptState,c
  4860  0014C0  9EF2               	bcf	intcon,7,c	;volatile
  4861  0014C2  868C               	bsf	3980,3,c	;volatile
  4862  0014C4  0E53               	movlw	83
  4863  0014C6                     i2u291_47:
  4864  0014C6  2EE8               	decfsz	wreg,f,c
  4865  0014C8  D7FE               	bra	i2u291_47
  4866  0014CA  F000               	nop	
  4867  0014CC  968C               	bcf	3980,3,c	;volatile
  4868  0014CE  0EC8               	movlw	200
  4869  0014D0                     i2u292_47:
  4870  0014D0  D000               	nop2	
  4871  0014D2  2EE8               	decfsz	wreg,f,c
  4872  0014D4  D7FD               	bra	i2u292_47
  4873  0014D6  B04A               	btfsc	lcd@LCDinterruptState,0,c
  4874  0014D8  D002               	bra	i2u117_45
  4875  0014DA  9EF2               	bcf	intcon,7,c	;volatile
  4876  0014DC  D001               	bra	i2u117_46
  4877  0014DE                     i2u117_45:
  4878  0014DE  8EF2               	bsf	intcon,7,c	;volatile
  4879  0014E0                     i2u117_46:
  4880                           
  4881                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4882  0014E0  3802               	swapf	i2lcdNibble@data,w,c
  4883  0014E2  0BF0               	andlw	240
  4884  0014E4  6E02               	movwf	i2lcdNibble@data,c
  4885                           
  4886                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4887  0014E6  5002               	movf	i2lcdNibble@data,w,c
  4888  0014E8  0BF0               	andlw	240
  4889  0014EA  6E01               	movwf	i2lcdNibble@temp,c
  4890                           
  4891                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4892  0014EC  508C               	movf	3980,w,c	;volatile
  4893  0014EE  0B0F               	andlw	15
  4894  0014F0  6E8C               	movwf	3980,c	;volatile
  4895                           
  4896                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4897  0014F2  5001               	movf	i2lcdNibble@temp,w,c
  4898  0014F4  108C               	iorwf	3980,w,c	;volatile
  4899  0014F6  6E8C               	movwf	3980,c	;volatile
  4900                           
  4901                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4902  0014F8  0E00               	movlw	0
  4903  0014FA  BEF2               	btfsc	intcon,7,c	;volatile
  4904  0014FC  0E01               	movlw	1
  4905  0014FE  6E4A               	movwf	lcd@LCDinterruptState,c
  4906  001500  9EF2               	bcf	intcon,7,c	;volatile
  4907  001502  868C               	bsf	3980,3,c	;volatile
  4908  001504  0E53               	movlw	83
  4909  001506                     i2u293_47:
  4910  001506  2EE8               	decfsz	wreg,f,c
  4911  001508  D7FE               	bra	i2u293_47
  4912  00150A  F000               	nop	
  4913  00150C  968C               	bcf	3980,3,c	;volatile
  4914  00150E  0EC8               	movlw	200
  4915  001510                     i2u294_47:
  4916  001510  D000               	nop2	
  4917  001512  2EE8               	decfsz	wreg,f,c
  4918  001514  D7FD               	bra	i2u294_47
  4919  001516  B04A               	btfsc	lcd@LCDinterruptState,0,c
  4920  001518  D002               	bra	i2u118_45
  4921  00151A  9EF2               	bcf	intcon,7,c	;volatile
  4922  00151C  D001               	bra	i2u118_46
  4923  00151E                     i2u118_45:
  4924  00151E  8EF2               	bsf	intcon,7,c	;volatile
  4925  001520                     i2u118_46:
  4926  001520  0012               	return		;funcret
  4927  001522                     __end_ofi2_lcdNibble:
  4928                           	opt stack 0
  4929                           pclatu	equ	0xFFB
  4930                           pclath	equ	0xFFA
  4931                           tblptru	equ	0xFF8
  4932                           tblptrh	equ	0xFF7
  4933                           tblptrl	equ	0xFF6
  4934                           tablat	equ	0xFF5
  4935                           prodh	equ	0xFF4
  4936                           prodl	equ	0xFF3
  4937                           intcon	equ	0xFF2
  4938                           intcon3	equ	0xFF0
  4939                           indf0	equ	0xFEF
  4940                           postinc0	equ	0xFEE
  4941                           fsr0h	equ	0xFEA
  4942                           fsr0l	equ	0xFE9
  4943                           wreg	equ	0xFE8
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _strncmp *****************
  4953 ;; Defined at:
  4954 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  4957 ;;		 -> current_set(5), 
  4958 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  4959 ;;		 -> strs(100), 
  4960 ;;  len             2   10[COMRAM] unsigned int 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  2    6[COMRAM] int 
  4965 ;; Registers used:
  4966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4972 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;Total ram usage:        9 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_interruptHandler
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text17
  4986  00139A                     __ptext17:
  4987                           	opt stack 0
  4988  00139A                     _strncmp:
  4989                           	opt stack 26
  4990                           
  4991                           ;incstack = 0
  4992  00139A  D035               	goto	i2l886
  4993  00139C                     i2l2203:
  4994  00139C  C007  FFD9         	movff	strncmp@s1,fsr2l
  4995  0013A0  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  4996  0013A4  50DF               	movf	indf2,w,c
  4997  0013A6  B4D8               	btfsc	status,2,c
  4998  0013A8  D010               	goto	i2u150_40
  4999  0013AA  C007  FFD9         	movff	strncmp@s1,fsr2l
  5000  0013AE  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  5001  0013B2  50DF               	movf	indf2,w,c
  5002  0013B4  6E0D               	movwf	??_strncmp& (0+255),c
  5003  0013B6  C009  FFF6         	movff	strncmp@s2,tblptrl
  5004  0013BA  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  5005  0013BE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5006  0013BE  6AF8               	clrf	tblptru,c
  5007  0013C0                     	endif
  5008  0013C0                     	if	0	;tblptru may be non-zero
  5009  0013C0                     	endif
  5010  0013C0  0008               	tblrd		*
  5011  0013C2  50F5               	movf	tablat,w,c
  5012  0013C4  180D               	xorwf	??_strncmp,w,c
  5013  0013C6  B4D8               	btfsc	status,2,c
  5014  0013C8  D01A               	goto	i2l888
  5015  0013CA                     i2u150_40:
  5016  0013CA  C009  FFF6         	movff	strncmp@s2,tblptrl
  5017  0013CE  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  5018  0013D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5019  0013D2  6AF8               	clrf	tblptru,c
  5020  0013D4                     	endif
  5021  0013D4                     	if	0	;tblptru may be non-zero
  5022  0013D4                     	endif
  5023  0013D4  0008               	tblrd		*
  5024  0013D6  50F5               	movf	tablat,w,c
  5025  0013D8  6E0D               	movwf	??_strncmp& (0+255),c
  5026  0013DA  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  5027  0013DC  1E0D               	comf	??_strncmp,f,c
  5028  0013DE  1E0E               	comf	??_strncmp+1,f,c
  5029  0013E0  4A0D               	infsnz	??_strncmp,f,c
  5030  0013E2  2A0E               	incf	??_strncmp+1,f,c
  5031  0013E4  C007  FFD9         	movff	strncmp@s1,fsr2l
  5032  0013E8  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  5033  0013EC  50DF               	movf	indf2,w,c
  5034  0013EE  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  5035  0013F0  500F               	movf	??_strncmp+2,w,c
  5036  0013F2  240D               	addwf	??_strncmp,w,c
  5037  0013F4  6E07               	movwf	?_strncmp,c
  5038  0013F6  0E00               	movlw	0
  5039  0013F8  200E               	addwfc	??_strncmp+1,w,c
  5040  0013FA  6E08               	movwf	?_strncmp+1,c
  5041  0013FC  0012               	return	
  5042  0013FE                     i2l888:
  5043  0013FE  4A07               	infsnz	strncmp@s1,f,c
  5044  001400  2A08               	incf	strncmp@s1+1,f,c
  5045  001402  4A09               	infsnz	strncmp@s2,f,c
  5046  001404  2A0A               	incf	strncmp@s2+1,f,c
  5047  001406                     i2l886:
  5048  001406  060B               	decf	strncmp@len,f,c
  5049  001408  A0D8               	btfss	status,0,c
  5050  00140A  060C               	decf	strncmp@len+1,f,c
  5051  00140C  280B               	incf	strncmp@len,w,c
  5052  00140E  E1C6               	bnz	i2l2203
  5053  001410  280C               	incf	strncmp@len+1,w,c
  5054  001412  A4D8               	btfss	status,2,c
  5055  001414  D7C3               	goto	i2l887
  5056  001416  0E00               	movlw	0
  5057  001418  6E08               	movwf	?_strncmp+1,c
  5058  00141A  0E00               	movlw	0
  5059  00141C  6E07               	movwf	?_strncmp,c
  5060  00141E  0012               	return	
  5061  001420                     __end_of_strncmp:
  5062                           	opt stack 0
  5063                           pclatu	equ	0xFFB
  5064                           pclath	equ	0xFFA
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           intcon3	equ	0xFF0
  5073                           indf0	equ	0xFEF
  5074                           postinc0	equ	0xFEE
  5075                           fsr0h	equ	0xFEA
  5076                           fsr0l	equ	0xFE9
  5077                           wreg	equ	0xFE8
  5078                           fsr1h	equ	0xFE2
  5079                           fsr1l	equ	0xFE1
  5080                           indf2	equ	0xFDF
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           fsr2h	equ	0xFDA
  5084                           fsr2l	equ	0xFD9
  5085                           status	equ	0xFD8
  5086                           
  5087 ;; *************** function _strcpy *****************
  5088 ;; Defined at:
  5089 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  to              2    6[COMRAM] PTR unsigned char 
  5092 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  5093 ;;  from            2    8[COMRAM] PTR const unsigned char 
  5094 ;;		 -> STR_21(1), STR_19(1), STR_16(1), STR_13(2), 
  5095 ;;		 -> STR_12(2), STR_11(2), STR_10(2), current_set(5), 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  cp              2   10[COMRAM] PTR unsigned char 
  5098 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  2    6[COMRAM] PTR unsigned char 
  5101 ;; Registers used:
  5102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;Total ram usage:        6 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_interruptHandler
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text18
  5122  00170E                     __ptext18:
  5123                           	opt stack 0
  5124  00170E                     _strcpy:
  5125                           	opt stack 26
  5126                           
  5127                           ;incstack = 0
  5128  00170E  C007  F00B         	movff	strcpy@to,strcpy@cp
  5129  001712  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  5130  001716  D004               	goto	i2l880
  5131  001718  4A0B               	infsnz	strcpy@cp,f,c
  5132  00171A  2A0C               	incf	strcpy@cp+1,f,c
  5133  00171C  4A09               	infsnz	strcpy@from,f,c
  5134  00171E  2A0A               	incf	strcpy@from+1,f,c
  5135  001720                     i2l880:
  5136  001720  C009  FFF6         	movff	strcpy@from,tblptrl
  5137  001724  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  5138  001728  0E00               	movlw	low (__mediumconst shr (0+16))
  5139  00172A  6EF8               	movwf	tblptru,c
  5140  00172C  C00B  FFD9         	movff	strcpy@cp,fsr2l
  5141  001730  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  5142  001734  0E0F               	movlw	(high __ramtop+-1)
  5143  001736  64F7               	cpfsgt	tblptrh,c
  5144  001738  D003               	bra	i2u145_47
  5145  00173A  0008               	tblrd		*
  5146  00173C  50F5               	movf	tablat,w,c
  5147  00173E  D005               	bra	i2u145_40
  5148  001740                     i2u145_47:
  5149  001740  CFF6 FFE9          	movff	tblptrl,fsr0l
  5150  001744  CFF7 FFEA          	movff	tblptrh,fsr0h
  5151  001748  50EF               	movf	indf0,w,c
  5152  00174A                     i2u145_40:
  5153  00174A  6EDF               	movwf	indf2,c
  5154  00174C  50DF               	movf	indf2,w,c
  5155  00174E  B4D8               	btfsc	status,2,c
  5156  001750  0012               	return	
  5157  001752  D7E2               	goto	i2l881
  5158  001754                     __end_of_strcpy:
  5159                           	opt stack 0
  5160                           pclatu	equ	0xFFB
  5161                           pclath	equ	0xFFA
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           intcon	equ	0xFF2
  5169                           intcon3	equ	0xFF0
  5170                           indf0	equ	0xFEF
  5171                           postinc0	equ	0xFEE
  5172                           fsr0h	equ	0xFEA
  5173                           fsr0l	equ	0xFE9
  5174                           wreg	equ	0xFE8
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _strcat *****************
  5185 ;; Defined at:
  5186 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  to              2    0[COMRAM] PTR unsigned char 
  5189 ;;		 -> current_set(5), 
  5190 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5191 ;;		 -> temp_set(5), 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5194 ;;		 -> current_set(5), 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  2    0[COMRAM] PTR unsigned char 
  5197 ;; Registers used:
  5198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;Total ram usage:        6 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; This function calls:
  5211 ;;		Nothing
  5212 ;; This function is called by:
  5213 ;;		_interruptHandler
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           	psect	text19
  5218  0017DA                     __ptext19:
  5219                           	opt stack 0
  5220  0017DA                     _strcat:
  5221                           	opt stack 26
  5222                           
  5223                           ;incstack = 0
  5224  0017DA  C001  F005         	movff	strcat@to,strcat@cp
  5225  0017DE  C002  F006         	movff	strcat@to+1,strcat@cp+1
  5226  0017E2  D002               	goto	i2l863
  5227  0017E4  4A05               	infsnz	strcat@cp,f,c
  5228  0017E6  2A06               	incf	strcat@cp+1,f,c
  5229  0017E8                     i2l863:
  5230  0017E8  C005  FFD9         	movff	strcat@cp,fsr2l
  5231  0017EC  C006  FFDA         	movff	strcat@cp+1,fsr2h
  5232  0017F0  50DF               	movf	indf2,w,c
  5233  0017F2  B4D8               	btfsc	status,2,c
  5234  0017F4  D005               	goto	i2l866
  5235  0017F6  D7F6               	goto	i2l864
  5236  0017F8  4A05               	infsnz	strcat@cp,f,c
  5237  0017FA  2A06               	incf	strcat@cp+1,f,c
  5238  0017FC  4A03               	infsnz	strcat@from,f,c
  5239  0017FE  2A04               	incf	strcat@from+1,f,c
  5240  001800                     i2l866:
  5241  001800  C003  FFD9         	movff	strcat@from,fsr2l
  5242  001804  C004  FFDA         	movff	strcat@from+1,fsr2h
  5243  001808  C005  FFE1         	movff	strcat@cp,fsr1l
  5244  00180C  C006  FFE2         	movff	strcat@cp+1,fsr1h
  5245  001810  CFDF FFE7          	movff	indf2,indf1
  5246  001814  50E7               	movf	indf1,w,c
  5247  001816  B4D8               	btfsc	status,2,c
  5248  001818  0012               	return	
  5249  00181A  D7EE               	goto	i2l867
  5250  00181C                     __end_of_strcat:
  5251                           	opt stack 0
  5252                           pclatu	equ	0xFFB
  5253                           pclath	equ	0xFFA
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           intcon3	equ	0xFF0
  5262                           indf0	equ	0xFEF
  5263                           postinc0	equ	0xFEE
  5264                           fsr0h	equ	0xFEA
  5265                           fsr0l	equ	0xFE9
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _is_valid *****************
  5278 ;; Defined at:
  5279 ;;		line 454 in file "main.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  2   50[None  ] int 
  5286 ;; Registers used:
  5287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;Total ram usage:        2 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    1
  5300 ;; This function calls:
  5301 ;;		_strcmp
  5302 ;;		i2___wmul
  5303 ;; This function is called by:
  5304 ;;		_interruptHandler
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text20
  5309  000850                     __ptext20:
  5310                           	opt stack 0
  5311  000850                     _is_valid:
  5312                           	opt stack 25
  5313                           
  5314                           ;main.c: 458: if (strcmp(current_set2,"B")==0){
  5315                           
  5316                           ;incstack = 0
  5317  000850  0E52               	movlw	low _current_set2
  5318  000852  6E01               	movwf	strcmp@s1,c
  5319  000854  0E00               	movlw	high _current_set2
  5320  000856  6E02               	movwf	strcmp@s1+1,c
  5321  000858  0EFC               	movlw	low STR_10
  5322  00085A  6E03               	movwf	strcmp@s2,c
  5323  00085C  0EFF               	movlw	high STR_10
  5324  00085E  6E04               	movwf	strcmp@s2+1,c
  5325  000860  EC62  F00B         	call	_strcmp	;wreg free
  5326  000864  5001               	movf	?_strcmp,w,c
  5327  000866  1002               	iorwf	?_strcmp+1,w,c
  5328  000868  A4D8               	btfss	status,2,c
  5329  00086A  D009               	goto	i2l180
  5330                           
  5331                           ;main.c: 459: B=1*number;
  5332  00086C  C057  F03C         	movff	_number,_B
  5333  000870  C058  F03D         	movff	_number+1,_B+1
  5334                           
  5335                           ;main.c: 460: total_number = 1*number;
  5336  000874  C057  F040         	movff	_number,_total_number
  5337  000878  C058  F041         	movff	_number+1,_total_number+1
  5338                           
  5339                           ;main.c: 462: }
  5340  00087C  0012               	return	
  5341  00087E                     i2l180:
  5342                           
  5343                           ;main.c: 464: else if (strcmp(current_set2,"N")==0){
  5344  00087E  0E52               	movlw	low _current_set2
  5345  000880  6E01               	movwf	strcmp@s1,c
  5346  000882  0E00               	movlw	high _current_set2
  5347  000884  6E02               	movwf	strcmp@s1+1,c
  5348  000886  0EEB               	movlw	low (STR_32+2)
  5349  000888  6E03               	movwf	strcmp@s2,c
  5350  00088A  0EFF               	movlw	high (STR_32+2)
  5351  00088C  6E04               	movwf	strcmp@s2+1,c
  5352  00088E  EC62  F00B         	call	_strcmp	;wreg free
  5353  000892  5001               	movf	?_strcmp,w,c
  5354  000894  1002               	iorwf	?_strcmp+1,w,c
  5355  000896  A4D8               	btfss	status,2,c
  5356  000898  D009               	goto	i2l182
  5357                           
  5358                           ;main.c: 465: N=1*number;
  5359  00089A  C057  F03A         	movff	_number,_N
  5360  00089E  C058  F03B         	movff	_number+1,_N+1
  5361                           
  5362                           ;main.c: 466: total_number = 1*number;
  5363  0008A2  C057  F040         	movff	_number,_total_number
  5364  0008A6  C058  F041         	movff	_number+1,_total_number+1
  5365                           
  5366                           ;main.c: 468: }
  5367  0008AA  0012               	return	
  5368  0008AC                     i2l182:
  5369                           
  5370                           ;main.c: 469: else if (strcmp(current_set2,"S")==0){
  5371  0008AC  0E52               	movlw	low _current_set2
  5372  0008AE  6E01               	movwf	strcmp@s1,c
  5373  0008B0  0E00               	movlw	high _current_set2
  5374  0008B2  6E02               	movwf	strcmp@s1+1,c
  5375  0008B4  0EEF               	movlw	low (STR_33+2)
  5376  0008B6  6E03               	movwf	strcmp@s2,c
  5377  0008B8  0EFF               	movlw	high (STR_33+2)
  5378  0008BA  6E04               	movwf	strcmp@s2+1,c
  5379  0008BC  EC62  F00B         	call	_strcmp	;wreg free
  5380  0008C0  5001               	movf	?_strcmp,w,c
  5381  0008C2  1002               	iorwf	?_strcmp+1,w,c
  5382  0008C4  A4D8               	btfss	status,2,c
  5383  0008C6  D009               	goto	i2l184
  5384                           
  5385                           ;main.c: 470: S=1*number;
  5386  0008C8  C057  F038         	movff	_number,_S
  5387  0008CC  C058  F039         	movff	_number+1,_S+1
  5388                           
  5389                           ;main.c: 471: total_number = 1*number;
  5390  0008D0  C057  F040         	movff	_number,_total_number
  5391  0008D4  C058  F041         	movff	_number+1,_total_number+1
  5392                           
  5393                           ;main.c: 473: }
  5394  0008D8  0012               	return	
  5395  0008DA                     i2l184:
  5396                           
  5397                           ;main.c: 474: else if (strcmp(current_set2,"W")==0){
  5398  0008DA  0E52               	movlw	low _current_set2
  5399  0008DC  6E01               	movwf	strcmp@s1,c
  5400  0008DE  0E00               	movlw	high _current_set2
  5401  0008E0  6E02               	movwf	strcmp@s1+1,c
  5402  0008E2  0EF3               	movlw	low (STR_34+2)
  5403  0008E4  6E03               	movwf	strcmp@s2,c
  5404  0008E6  0EFF               	movlw	high (STR_34+2)
  5405  0008E8  6E04               	movwf	strcmp@s2+1,c
  5406  0008EA  EC62  F00B         	call	_strcmp	;wreg free
  5407  0008EE  5001               	movf	?_strcmp,w,c
  5408  0008F0  1002               	iorwf	?_strcmp+1,w,c
  5409  0008F2  A4D8               	btfss	status,2,c
  5410  0008F4  D009               	goto	i2l186
  5411                           
  5412                           ;main.c: 475: W=1*number;
  5413  0008F6  C057  F036         	movff	_number,_W
  5414  0008FA  C058  F037         	movff	_number+1,_W+1
  5415                           
  5416                           ;main.c: 476: total_number = 1*number;
  5417  0008FE  C057  F040         	movff	_number,_total_number
  5418  000902  C058  F041         	movff	_number+1,_total_number+1
  5419                           
  5420                           ;main.c: 478: }
  5421  000906  0012               	return	
  5422  000908                     i2l186:
  5423                           
  5424                           ;main.c: 479: else if (strcmp(current_set2,"BN")==0){
  5425  000908  0E52               	movlw	low _current_set2
  5426  00090A  6E01               	movwf	strcmp@s1,c
  5427  00090C  0E00               	movlw	high _current_set2
  5428  00090E  6E02               	movwf	strcmp@s1+1,c
  5429  000910  0EEA               	movlw	low (STR_32+1)
  5430  000912  6E03               	movwf	strcmp@s2,c
  5431  000914  0EFF               	movlw	high (STR_32+1)
  5432  000916  6E04               	movwf	strcmp@s2+1,c
  5433  000918  EC62  F00B         	call	_strcmp	;wreg free
  5434  00091C  5001               	movf	?_strcmp,w,c
  5435  00091E  1002               	iorwf	?_strcmp+1,w,c
  5436  000920  A4D8               	btfss	status,2,c
  5437  000922  D00E               	goto	i2l188
  5438                           
  5439                           ;main.c: 480: B = 1*number;
  5440  000924  C057  F03C         	movff	_number,_B
  5441  000928  C058  F03D         	movff	_number+1,_B+1
  5442                           
  5443                           ;main.c: 482: N = 1*number;
  5444  00092C  C057  F03A         	movff	_number,_N
  5445  000930  C058  F03B         	movff	_number+1,_N+1
  5446                           
  5447                           ;main.c: 483: total_number = 2*number;
  5448  000934  90D8               	bcf	status,0,c
  5449  000936  3457               	rlcf	_number,w,c
  5450  000938  6E40               	movwf	_total_number,c
  5451  00093A  3458               	rlcf	_number+1,w,c
  5452  00093C  6E41               	movwf	_total_number+1,c
  5453                           
  5454                           ;main.c: 484: }
  5455  00093E  0012               	return	
  5456  000940                     i2l188:
  5457                           
  5458                           ;main.c: 485: else if (strcmp(current_set2,"BS")==0){
  5459  000940  0E52               	movlw	low _current_set2
  5460  000942  6E01               	movwf	strcmp@s1,c
  5461  000944  0E00               	movlw	high _current_set2
  5462  000946  6E02               	movwf	strcmp@s1+1,c
  5463  000948  0EEE               	movlw	low (STR_33+1)
  5464  00094A  6E03               	movwf	strcmp@s2,c
  5465  00094C  0EFF               	movlw	high (STR_33+1)
  5466  00094E  6E04               	movwf	strcmp@s2+1,c
  5467  000950  EC62  F00B         	call	_strcmp	;wreg free
  5468  000954  5001               	movf	?_strcmp,w,c
  5469  000956  1002               	iorwf	?_strcmp+1,w,c
  5470  000958  A4D8               	btfss	status,2,c
  5471  00095A  D00E               	goto	i2l190
  5472                           
  5473                           ;main.c: 486: B = 1*number;
  5474  00095C  C057  F03C         	movff	_number,_B
  5475  000960  C058  F03D         	movff	_number+1,_B+1
  5476                           
  5477                           ;main.c: 488: S = 1*number;
  5478  000964  C057  F038         	movff	_number,_S
  5479  000968  C058  F039         	movff	_number+1,_S+1
  5480                           
  5481                           ;main.c: 489: total_number = 2*number;
  5482  00096C  90D8               	bcf	status,0,c
  5483  00096E  3457               	rlcf	_number,w,c
  5484  000970  6E40               	movwf	_total_number,c
  5485  000972  3458               	rlcf	_number+1,w,c
  5486  000974  6E41               	movwf	_total_number+1,c
  5487                           
  5488                           ;main.c: 490: }
  5489  000976  0012               	return	
  5490  000978                     i2l190:
  5491                           
  5492                           ;main.c: 492: else if (strcmp(current_set2,"BW")==0){
  5493  000978  0E52               	movlw	low _current_set2
  5494  00097A  6E01               	movwf	strcmp@s1,c
  5495  00097C  0E00               	movlw	high _current_set2
  5496  00097E  6E02               	movwf	strcmp@s1+1,c
  5497  000980  0EF2               	movlw	low (STR_34+1)
  5498  000982  6E03               	movwf	strcmp@s2,c
  5499  000984  0EFF               	movlw	high (STR_34+1)
  5500  000986  6E04               	movwf	strcmp@s2+1,c
  5501  000988  EC62  F00B         	call	_strcmp	;wreg free
  5502  00098C  5001               	movf	?_strcmp,w,c
  5503  00098E  1002               	iorwf	?_strcmp+1,w,c
  5504  000990  A4D8               	btfss	status,2,c
  5505  000992  D00E               	goto	i2l192
  5506                           
  5507                           ;main.c: 493: B = 1*number;
  5508  000994  C057  F03C         	movff	_number,_B
  5509  000998  C058  F03D         	movff	_number+1,_B+1
  5510                           
  5511                           ;main.c: 495: W = 1*number;
  5512  00099C  C057  F036         	movff	_number,_W
  5513  0009A0  C058  F037         	movff	_number+1,_W+1
  5514                           
  5515                           ;main.c: 496: total_number = 2*number;
  5516  0009A4  90D8               	bcf	status,0,c
  5517  0009A6  3457               	rlcf	_number,w,c
  5518  0009A8  6E40               	movwf	_total_number,c
  5519  0009AA  3458               	rlcf	_number+1,w,c
  5520  0009AC  6E41               	movwf	_total_number+1,c
  5521                           
  5522                           ;main.c: 497: }
  5523  0009AE  0012               	return	
  5524  0009B0                     i2l192:
  5525                           
  5526                           ;main.c: 498: else if (strcmp(current_set2,"BBN")==0){
  5527  0009B0  0E52               	movlw	low _current_set2
  5528  0009B2  6E01               	movwf	strcmp@s1,c
  5529  0009B4  0E00               	movlw	high _current_set2
  5530  0009B6  6E02               	movwf	strcmp@s1+1,c
  5531  0009B8  0EE9               	movlw	low STR_32
  5532  0009BA  6E03               	movwf	strcmp@s2,c
  5533  0009BC  0EFF               	movlw	high STR_32
  5534  0009BE  6E04               	movwf	strcmp@s2+1,c
  5535  0009C0  EC62  F00B         	call	_strcmp	;wreg free
  5536  0009C4  5001               	movf	?_strcmp,w,c
  5537  0009C6  1002               	iorwf	?_strcmp+1,w,c
  5538  0009C8  A4D8               	btfss	status,2,c
  5539  0009CA  D018               	goto	i2l194
  5540                           
  5541                           ;main.c: 499: B = 2*number;
  5542  0009CC  90D8               	bcf	status,0,c
  5543  0009CE  3457               	rlcf	_number,w,c
  5544  0009D0  6E3C               	movwf	_B,c
  5545  0009D2  3458               	rlcf	_number+1,w,c
  5546  0009D4  6E3D               	movwf	_B+1,c
  5547                           
  5548                           ;main.c: 501: N = 1*number;
  5549  0009D6  C057  F03A         	movff	_number,_N
  5550  0009DA  C058  F03B         	movff	_number+1,_N+1
  5551                           
  5552                           ;main.c: 502: total_number = 3*number;
  5553  0009DE  C057  F001         	movff	_number,i2___wmul@multiplier
  5554  0009E2  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5555  0009E6  0E00               	movlw	0
  5556  0009E8  6E04               	movwf	i2___wmul@multiplicand+1,c
  5557  0009EA  0E03               	movlw	3
  5558  0009EC  6E03               	movwf	i2___wmul@multiplicand,c
  5559  0009EE  EC39  F00C         	call	i2___wmul	;wreg free
  5560  0009F2  C001  F040         	movff	?i2___wmul,_total_number
  5561  0009F6  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5562                           
  5563                           ;main.c: 503: }
  5564  0009FA  0012               	return	
  5565  0009FC                     i2l194:
  5566                           
  5567                           ;main.c: 504: else if (strcmp(current_set2,"BBS")==0){
  5568  0009FC  0E52               	movlw	low _current_set2
  5569  0009FE  6E01               	movwf	strcmp@s1,c
  5570  000A00  0E00               	movlw	high _current_set2
  5571  000A02  6E02               	movwf	strcmp@s1+1,c
  5572  000A04  0EED               	movlw	low STR_33
  5573  000A06  6E03               	movwf	strcmp@s2,c
  5574  000A08  0EFF               	movlw	high STR_33
  5575  000A0A  6E04               	movwf	strcmp@s2+1,c
  5576  000A0C  EC62  F00B         	call	_strcmp	;wreg free
  5577  000A10  5001               	movf	?_strcmp,w,c
  5578  000A12  1002               	iorwf	?_strcmp+1,w,c
  5579  000A14  A4D8               	btfss	status,2,c
  5580  000A16  D018               	goto	i2l196
  5581                           
  5582                           ;main.c: 505: B = 2*number;
  5583  000A18  90D8               	bcf	status,0,c
  5584  000A1A  3457               	rlcf	_number,w,c
  5585  000A1C  6E3C               	movwf	_B,c
  5586  000A1E  3458               	rlcf	_number+1,w,c
  5587  000A20  6E3D               	movwf	_B+1,c
  5588                           
  5589                           ;main.c: 507: S = 1*number;
  5590  000A22  C057  F038         	movff	_number,_S
  5591  000A26  C058  F039         	movff	_number+1,_S+1
  5592                           
  5593                           ;main.c: 508: total_number = 3*number;
  5594  000A2A  C057  F001         	movff	_number,i2___wmul@multiplier
  5595  000A2E  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5596  000A32  0E00               	movlw	0
  5597  000A34  6E04               	movwf	i2___wmul@multiplicand+1,c
  5598  000A36  0E03               	movlw	3
  5599  000A38  6E03               	movwf	i2___wmul@multiplicand,c
  5600  000A3A  EC39  F00C         	call	i2___wmul	;wreg free
  5601  000A3E  C001  F040         	movff	?i2___wmul,_total_number
  5602  000A42  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5603                           
  5604                           ;main.c: 509: }
  5605  000A46  0012               	return	
  5606  000A48                     i2l196:
  5607                           
  5608                           ;main.c: 510: else if (strcmp(current_set2,"BBW")==0){
  5609  000A48  0E52               	movlw	low _current_set2
  5610  000A4A  6E01               	movwf	strcmp@s1,c
  5611  000A4C  0E00               	movlw	high _current_set2
  5612  000A4E  6E02               	movwf	strcmp@s1+1,c
  5613  000A50  0EF1               	movlw	low STR_34
  5614  000A52  6E03               	movwf	strcmp@s2,c
  5615  000A54  0EFF               	movlw	high STR_34
  5616  000A56  6E04               	movwf	strcmp@s2+1,c
  5617  000A58  EC62  F00B         	call	_strcmp	;wreg free
  5618  000A5C  5001               	movf	?_strcmp,w,c
  5619  000A5E  1002               	iorwf	?_strcmp+1,w,c
  5620  000A60  A4D8               	btfss	status,2,c
  5621  000A62  D018               	goto	i2l198
  5622                           
  5623                           ;main.c: 511: B = 2*number;
  5624  000A64  90D8               	bcf	status,0,c
  5625  000A66  3457               	rlcf	_number,w,c
  5626  000A68  6E3C               	movwf	_B,c
  5627  000A6A  3458               	rlcf	_number+1,w,c
  5628  000A6C  6E3D               	movwf	_B+1,c
  5629                           
  5630                           ;main.c: 513: W = 1*number;
  5631  000A6E  C057  F036         	movff	_number,_W
  5632  000A72  C058  F037         	movff	_number+1,_W+1
  5633                           
  5634                           ;main.c: 514: total_number = 3*number;
  5635  000A76  C057  F001         	movff	_number,i2___wmul@multiplier
  5636  000A7A  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5637  000A7E  0E00               	movlw	0
  5638  000A80  6E04               	movwf	i2___wmul@multiplicand+1,c
  5639  000A82  0E03               	movlw	3
  5640  000A84  6E03               	movwf	i2___wmul@multiplicand,c
  5641  000A86  EC39  F00C         	call	i2___wmul	;wreg free
  5642  000A8A  C001  F040         	movff	?i2___wmul,_total_number
  5643  000A8E  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5644                           
  5645                           ;main.c: 515: }
  5646  000A92  0012               	return	
  5647  000A94                     i2l198:
  5648                           
  5649                           ;main.c: 516: else if (strcmp(current_set2,"BNW")==0){
  5650  000A94  0E52               	movlw	low _current_set2
  5651  000A96  6E01               	movwf	strcmp@s1,c
  5652  000A98  0E00               	movlw	high _current_set2
  5653  000A9A  6E02               	movwf	strcmp@s1+1,c
  5654  000A9C  0ECC               	movlw	low (STR_41+1)
  5655  000A9E  6E03               	movwf	strcmp@s2,c
  5656  000AA0  0EFF               	movlw	high (STR_41+1)
  5657  000AA2  6E04               	movwf	strcmp@s2+1,c
  5658  000AA4  EC62  F00B         	call	_strcmp	;wreg free
  5659  000AA8  5001               	movf	?_strcmp,w,c
  5660  000AAA  1002               	iorwf	?_strcmp+1,w,c
  5661  000AAC  A4D8               	btfss	status,2,c
  5662  000AAE  D01B               	goto	i2l200
  5663                           
  5664                           ;main.c: 517: B = 1*number;
  5665  000AB0  C057  F03C         	movff	_number,_B
  5666  000AB4  C058  F03D         	movff	_number+1,_B+1
  5667                           
  5668                           ;main.c: 518: W = 1*number;
  5669  000AB8  C057  F036         	movff	_number,_W
  5670  000ABC  C058  F037         	movff	_number+1,_W+1
  5671                           
  5672                           ;main.c: 519: N = 1*number;
  5673  000AC0  C057  F03A         	movff	_number,_N
  5674  000AC4  C058  F03B         	movff	_number+1,_N+1
  5675                           
  5676                           ;main.c: 520: total_number = 3*number;
  5677  000AC8  C057  F001         	movff	_number,i2___wmul@multiplier
  5678  000ACC  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5679  000AD0  0E00               	movlw	0
  5680  000AD2  6E04               	movwf	i2___wmul@multiplicand+1,c
  5681  000AD4  0E03               	movlw	3
  5682  000AD6  6E03               	movwf	i2___wmul@multiplicand,c
  5683  000AD8  EC39  F00C         	call	i2___wmul	;wreg free
  5684  000ADC  C001  F040         	movff	?i2___wmul,_total_number
  5685  000AE0  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5686                           
  5687                           ;main.c: 521: }
  5688  000AE4  0012               	return	
  5689  000AE6                     i2l200:
  5690                           
  5691                           ;main.c: 522: else if (strcmp(current_set2,"BSW")==0){
  5692  000AE6  0E52               	movlw	low _current_set2
  5693  000AE8  6E01               	movwf	strcmp@s1,c
  5694  000AEA  0E00               	movlw	high _current_set2
  5695  000AEC  6E02               	movwf	strcmp@s1+1,c
  5696  000AEE  0ED6               	movlw	low (STR_40+1)
  5697  000AF0  6E03               	movwf	strcmp@s2,c
  5698  000AF2  0EFF               	movlw	high (STR_40+1)
  5699  000AF4  6E04               	movwf	strcmp@s2+1,c
  5700  000AF6  EC62  F00B         	call	_strcmp	;wreg free
  5701  000AFA  5001               	movf	?_strcmp,w,c
  5702  000AFC  1002               	iorwf	?_strcmp+1,w,c
  5703  000AFE  A4D8               	btfss	status,2,c
  5704  000B00  D01B               	goto	i2l202
  5705                           
  5706                           ;main.c: 523: B = 1*number;
  5707  000B02  C057  F03C         	movff	_number,_B
  5708  000B06  C058  F03D         	movff	_number+1,_B+1
  5709                           
  5710                           ;main.c: 524: S = 1*number;
  5711  000B0A  C057  F038         	movff	_number,_S
  5712  000B0E  C058  F039         	movff	_number+1,_S+1
  5713                           
  5714                           ;main.c: 525: N = 1*number;
  5715  000B12  C057  F03A         	movff	_number,_N
  5716  000B16  C058  F03B         	movff	_number+1,_N+1
  5717                           
  5718                           ;main.c: 526: total_number = 3*number;
  5719  000B1A  C057  F001         	movff	_number,i2___wmul@multiplier
  5720  000B1E  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5721  000B22  0E00               	movlw	0
  5722  000B24  6E04               	movwf	i2___wmul@multiplicand+1,c
  5723  000B26  0E03               	movlw	3
  5724  000B28  6E03               	movwf	i2___wmul@multiplicand,c
  5725  000B2A  EC39  F00C         	call	i2___wmul	;wreg free
  5726  000B2E  C001  F040         	movff	?i2___wmul,_total_number
  5727  000B32  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5728                           
  5729                           ;main.c: 527: }
  5730  000B36  0012               	return	
  5731  000B38                     i2l202:
  5732                           
  5733                           ;main.c: 528: else if (strcmp(current_set2,"BWW")==0){
  5734  000B38  0E52               	movlw	low _current_set2
  5735  000B3A  6E01               	movwf	strcmp@s1,c
  5736  000B3C  0E00               	movlw	high _current_set2
  5737  000B3E  6E02               	movwf	strcmp@s1+1,c
  5738  000B40  0EF5               	movlw	low STR_37
  5739  000B42  6E03               	movwf	strcmp@s2,c
  5740  000B44  0EFF               	movlw	high STR_37
  5741  000B46  6E04               	movwf	strcmp@s2+1,c
  5742  000B48  EC62  F00B         	call	_strcmp	;wreg free
  5743  000B4C  5001               	movf	?_strcmp,w,c
  5744  000B4E  1002               	iorwf	?_strcmp+1,w,c
  5745  000B50  A4D8               	btfss	status,2,c
  5746  000B52  D018               	goto	i2l204
  5747                           
  5748                           ;main.c: 529: B = 1*number;
  5749  000B54  C057  F03C         	movff	_number,_B
  5750  000B58  C058  F03D         	movff	_number+1,_B+1
  5751                           
  5752                           ;main.c: 530: W = 2*number;
  5753  000B5C  90D8               	bcf	status,0,c
  5754  000B5E  3457               	rlcf	_number,w,c
  5755  000B60  6E36               	movwf	_W,c
  5756  000B62  3458               	rlcf	_number+1,w,c
  5757  000B64  6E37               	movwf	_W+1,c
  5758                           
  5759                           ;main.c: 531: total_number = 3*number;
  5760  000B66  C057  F001         	movff	_number,i2___wmul@multiplier
  5761  000B6A  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  5762  000B6E  0E00               	movlw	0
  5763  000B70  6E04               	movwf	i2___wmul@multiplicand+1,c
  5764  000B72  0E03               	movlw	3
  5765  000B74  6E03               	movwf	i2___wmul@multiplicand,c
  5766  000B76  EC39  F00C         	call	i2___wmul	;wreg free
  5767  000B7A  C001  F040         	movff	?i2___wmul,_total_number
  5768  000B7E  C002  F041         	movff	?i2___wmul+1,_total_number+1
  5769                           
  5770                           ;main.c: 532: }
  5771  000B82  0012               	return	
  5772  000B84                     i2l204:
  5773                           
  5774                           ;main.c: 533: else if (strcmp(current_set2,"BNWW")==0){
  5775  000B84  0E52               	movlw	low _current_set2
  5776  000B86  6E01               	movwf	strcmp@s1,c
  5777  000B88  0E00               	movlw	high _current_set2
  5778  000B8A  6E02               	movwf	strcmp@s1+1,c
  5779  000B8C  0EDA               	movlw	low STR_38
  5780  000B8E  6E03               	movwf	strcmp@s2,c
  5781  000B90  0EFF               	movlw	high STR_38
  5782  000B92  6E04               	movwf	strcmp@s2+1,c
  5783  000B94  EC62  F00B         	call	_strcmp	;wreg free
  5784  000B98  5001               	movf	?_strcmp,w,c
  5785  000B9A  1002               	iorwf	?_strcmp+1,w,c
  5786  000B9C  A4D8               	btfss	status,2,c
  5787  000B9E  D01C               	goto	i2l206
  5788                           
  5789                           ;main.c: 534: B = 1*number;
  5790  000BA0  C057  F03C         	movff	_number,_B
  5791  000BA4  C058  F03D         	movff	_number+1,_B+1
  5792                           
  5793                           ;main.c: 535: N = 1*number;
  5794  000BA8  C057  F03A         	movff	_number,_N
  5795  000BAC  C058  F03B         	movff	_number+1,_N+1
  5796                           
  5797                           ;main.c: 536: W = 2*number;
  5798  000BB0  90D8               	bcf	status,0,c
  5799  000BB2  3457               	rlcf	_number,w,c
  5800  000BB4  6E36               	movwf	_W,c
  5801  000BB6  3458               	rlcf	_number+1,w,c
  5802  000BB8  6E37               	movwf	_W+1,c
  5803                           
  5804                           ;main.c: 537: total_number = 4*number;
  5805  000BBA  C057  F007         	movff	_number,??_is_valid
  5806  000BBE  C058  F008         	movff	_number+1,??_is_valid+1
  5807  000BC2  90D8               	bcf	status,0,c
  5808  000BC4  3607               	rlcf	??_is_valid,f,c
  5809  000BC6  3608               	rlcf	??_is_valid+1,f,c
  5810  000BC8  90D8               	bcf	status,0,c
  5811  000BCA  3607               	rlcf	??_is_valid,f,c
  5812  000BCC  3608               	rlcf	??_is_valid+1,f,c
  5813  000BCE  C007  F040         	movff	??_is_valid,_total_number
  5814  000BD2  C008  F041         	movff	??_is_valid+1,_total_number+1
  5815                           
  5816                           ;main.c: 538: }
  5817  000BD6  0012               	return	
  5818  000BD8                     i2l206:
  5819                           
  5820                           ;main.c: 539: else if (strcmp(current_set2,"BSWW")==0){
  5821  000BD8  0E52               	movlw	low _current_set2
  5822  000BDA  6E01               	movwf	strcmp@s1,c
  5823  000BDC  0E00               	movlw	high _current_set2
  5824  000BDE  6E02               	movwf	strcmp@s1+1,c
  5825  000BE0  0EDF               	movlw	low STR_39
  5826  000BE2  6E03               	movwf	strcmp@s2,c
  5827  000BE4  0EFF               	movlw	high STR_39
  5828  000BE6  6E04               	movwf	strcmp@s2+1,c
  5829  000BE8  EC62  F00B         	call	_strcmp	;wreg free
  5830  000BEC  5001               	movf	?_strcmp,w,c
  5831  000BEE  1002               	iorwf	?_strcmp+1,w,c
  5832  000BF0  A4D8               	btfss	status,2,c
  5833  000BF2  D01C               	goto	i2l208
  5834                           
  5835                           ;main.c: 540: B = 1*number;
  5836  000BF4  C057  F03C         	movff	_number,_B
  5837  000BF8  C058  F03D         	movff	_number+1,_B+1
  5838                           
  5839                           ;main.c: 541: S = 1*number;
  5840  000BFC  C057  F038         	movff	_number,_S
  5841  000C00  C058  F039         	movff	_number+1,_S+1
  5842                           
  5843                           ;main.c: 542: W = 2*number;
  5844  000C04  90D8               	bcf	status,0,c
  5845  000C06  3457               	rlcf	_number,w,c
  5846  000C08  6E36               	movwf	_W,c
  5847  000C0A  3458               	rlcf	_number+1,w,c
  5848  000C0C  6E37               	movwf	_W+1,c
  5849                           
  5850                           ;main.c: 543: total_number = 4*number;
  5851  000C0E  C057  F007         	movff	_number,??_is_valid
  5852  000C12  C058  F008         	movff	_number+1,??_is_valid+1
  5853  000C16  90D8               	bcf	status,0,c
  5854  000C18  3607               	rlcf	??_is_valid,f,c
  5855  000C1A  3608               	rlcf	??_is_valid+1,f,c
  5856  000C1C  90D8               	bcf	status,0,c
  5857  000C1E  3607               	rlcf	??_is_valid,f,c
  5858  000C20  3608               	rlcf	??_is_valid+1,f,c
  5859  000C22  C007  F040         	movff	??_is_valid,_total_number
  5860  000C26  C008  F041         	movff	??_is_valid+1,_total_number+1
  5861                           
  5862                           ;main.c: 545: }
  5863  000C2A  0012               	return	
  5864  000C2C                     i2l208:
  5865                           
  5866                           ;main.c: 546: else if (strcmp(current_set2,"BBSW")==0){
  5867  000C2C  0E52               	movlw	low _current_set2
  5868  000C2E  6E01               	movwf	strcmp@s1,c
  5869  000C30  0E00               	movlw	high _current_set2
  5870  000C32  6E02               	movwf	strcmp@s1+1,c
  5871  000C34  0ED5               	movlw	low STR_40
  5872  000C36  6E03               	movwf	strcmp@s2,c
  5873  000C38  0EFF               	movlw	high STR_40
  5874  000C3A  6E04               	movwf	strcmp@s2+1,c
  5875  000C3C  EC62  F00B         	call	_strcmp	;wreg free
  5876  000C40  5001               	movf	?_strcmp,w,c
  5877  000C42  1002               	iorwf	?_strcmp+1,w,c
  5878  000C44  A4D8               	btfss	status,2,c
  5879  000C46  D01C               	goto	i2l210
  5880                           
  5881                           ;main.c: 547: B = 2*number;
  5882  000C48  90D8               	bcf	status,0,c
  5883  000C4A  3457               	rlcf	_number,w,c
  5884  000C4C  6E3C               	movwf	_B,c
  5885  000C4E  3458               	rlcf	_number+1,w,c
  5886  000C50  6E3D               	movwf	_B+1,c
  5887                           
  5888                           ;main.c: 548: S = 1*number;
  5889  000C52  C057  F038         	movff	_number,_S
  5890  000C56  C058  F039         	movff	_number+1,_S+1
  5891                           
  5892                           ;main.c: 549: W = number;
  5893  000C5A  C057  F036         	movff	_number,_W
  5894  000C5E  C058  F037         	movff	_number+1,_W+1
  5895                           
  5896                           ;main.c: 550: total_number = 4*number;
  5897  000C62  C057  F007         	movff	_number,??_is_valid
  5898  000C66  C058  F008         	movff	_number+1,??_is_valid+1
  5899  000C6A  90D8               	bcf	status,0,c
  5900  000C6C  3607               	rlcf	??_is_valid,f,c
  5901  000C6E  3608               	rlcf	??_is_valid+1,f,c
  5902  000C70  90D8               	bcf	status,0,c
  5903  000C72  3607               	rlcf	??_is_valid,f,c
  5904  000C74  3608               	rlcf	??_is_valid+1,f,c
  5905  000C76  C007  F040         	movff	??_is_valid,_total_number
  5906  000C7A  C008  F041         	movff	??_is_valid+1,_total_number+1
  5907                           
  5908                           ;main.c: 551: }
  5909  000C7E  0012               	return	
  5910  000C80                     i2l210:
  5911                           
  5912                           ;main.c: 552: else if (strcmp(current_set2,"BBNW")==0){
  5913  000C80  0E52               	movlw	low _current_set2
  5914  000C82  6E01               	movwf	strcmp@s1,c
  5915  000C84  0E00               	movlw	high _current_set2
  5916  000C86  6E02               	movwf	strcmp@s1+1,c
  5917  000C88  0ECB               	movlw	low STR_41
  5918  000C8A  6E03               	movwf	strcmp@s2,c
  5919  000C8C  0EFF               	movlw	high STR_41
  5920  000C8E  6E04               	movwf	strcmp@s2+1,c
  5921  000C90  EC62  F00B         	call	_strcmp	;wreg free
  5922  000C94  5001               	movf	?_strcmp,w,c
  5923  000C96  1002               	iorwf	?_strcmp+1,w,c
  5924  000C98  A4D8               	btfss	status,2,c
  5925  000C9A  D01C               	goto	i2l212
  5926                           
  5927                           ;main.c: 553: B = 2*number;
  5928  000C9C  90D8               	bcf	status,0,c
  5929  000C9E  3457               	rlcf	_number,w,c
  5930  000CA0  6E3C               	movwf	_B,c
  5931  000CA2  3458               	rlcf	_number+1,w,c
  5932  000CA4  6E3D               	movwf	_B+1,c
  5933                           
  5934                           ;main.c: 554: N = 1*number;
  5935  000CA6  C057  F03A         	movff	_number,_N
  5936  000CAA  C058  F03B         	movff	_number+1,_N+1
  5937                           
  5938                           ;main.c: 555: W = 1*number;
  5939  000CAE  C057  F036         	movff	_number,_W
  5940  000CB2  C058  F037         	movff	_number+1,_W+1
  5941                           
  5942                           ;main.c: 556: total_number = 4*number;
  5943  000CB6  C057  F007         	movff	_number,??_is_valid
  5944  000CBA  C058  F008         	movff	_number+1,??_is_valid+1
  5945  000CBE  90D8               	bcf	status,0,c
  5946  000CC0  3607               	rlcf	??_is_valid,f,c
  5947  000CC2  3608               	rlcf	??_is_valid+1,f,c
  5948  000CC4  90D8               	bcf	status,0,c
  5949  000CC6  3607               	rlcf	??_is_valid,f,c
  5950  000CC8  3608               	rlcf	??_is_valid+1,f,c
  5951  000CCA  C007  F040         	movff	??_is_valid,_total_number
  5952  000CCE  C008  F041         	movff	??_is_valid+1,_total_number+1
  5953                           
  5954                           ;main.c: 557: }
  5955  000CD2  0012               	return	
  5956  000CD4                     i2l212:
  5957                           
  5958                           ;main.c: 558: else if (strcmp(current_set2,"BNNW")==0){
  5959  000CD4  0E52               	movlw	low _current_set2
  5960  000CD6  6E01               	movwf	strcmp@s1,c
  5961  000CD8  0E00               	movlw	high _current_set2
  5962  000CDA  6E02               	movwf	strcmp@s1+1,c
  5963  000CDC  0ED0               	movlw	low STR_42
  5964  000CDE  6E03               	movwf	strcmp@s2,c
  5965  000CE0  0EFF               	movlw	high STR_42
  5966  000CE2  6E04               	movwf	strcmp@s2+1,c
  5967  000CE4  EC62  F00B         	call	_strcmp	;wreg free
  5968  000CE8  5001               	movf	?_strcmp,w,c
  5969  000CEA  1002               	iorwf	?_strcmp+1,w,c
  5970  000CEC  A4D8               	btfss	status,2,c
  5971  000CEE  D01C               	goto	i2l214
  5972                           
  5973                           ;main.c: 559: B = 1*number;
  5974  000CF0  C057  F03C         	movff	_number,_B
  5975  000CF4  C058  F03D         	movff	_number+1,_B+1
  5976                           
  5977                           ;main.c: 560: N = 2*number;
  5978  000CF8  90D8               	bcf	status,0,c
  5979  000CFA  3457               	rlcf	_number,w,c
  5980  000CFC  6E3A               	movwf	_N,c
  5981  000CFE  3458               	rlcf	_number+1,w,c
  5982  000D00  6E3B               	movwf	_N+1,c
  5983                           
  5984                           ;main.c: 561: W = 1*number;
  5985  000D02  C057  F036         	movff	_number,_W
  5986  000D06  C058  F037         	movff	_number+1,_W+1
  5987                           
  5988                           ;main.c: 562: total_number = 4*number;
  5989  000D0A  C057  F007         	movff	_number,??_is_valid
  5990  000D0E  C058  F008         	movff	_number+1,??_is_valid+1
  5991  000D12  90D8               	bcf	status,0,c
  5992  000D14  3607               	rlcf	??_is_valid,f,c
  5993  000D16  3608               	rlcf	??_is_valid+1,f,c
  5994  000D18  90D8               	bcf	status,0,c
  5995  000D1A  3607               	rlcf	??_is_valid,f,c
  5996  000D1C  3608               	rlcf	??_is_valid+1,f,c
  5997  000D1E  C007  F040         	movff	??_is_valid,_total_number
  5998  000D22  C008  F041         	movff	??_is_valid+1,_total_number+1
  5999                           
  6000                           ;main.c: 563: }
  6001  000D26  0012               	return	
  6002  000D28                     i2l214:
  6003                           
  6004                           ;main.c: 564: else if (strcmp(current_set2,"BNNN")==0){
  6005  000D28  0E52               	movlw	low _current_set2
  6006  000D2A  6E01               	movwf	strcmp@s1,c
  6007  000D2C  0E00               	movlw	high _current_set2
  6008  000D2E  6E02               	movwf	strcmp@s1+1,c
  6009  000D30  0EC6               	movlw	low STR_43
  6010  000D32  6E03               	movwf	strcmp@s2,c
  6011  000D34  0EFF               	movlw	high STR_43
  6012  000D36  6E04               	movwf	strcmp@s2+1,c
  6013  000D38  EC62  F00B         	call	_strcmp	;wreg free
  6014  000D3C  5001               	movf	?_strcmp,w,c
  6015  000D3E  1002               	iorwf	?_strcmp+1,w,c
  6016  000D40  A4D8               	btfss	status,2,c
  6017  000D42  D021               	goto	i2l216
  6018                           
  6019                           ;main.c: 565: B = 1*number;
  6020  000D44  C057  F03C         	movff	_number,_B
  6021  000D48  C058  F03D         	movff	_number+1,_B+1
  6022                           
  6023                           ;main.c: 566: N = 3*number;
  6024  000D4C  C057  F001         	movff	_number,i2___wmul@multiplier
  6025  000D50  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  6026  000D54  0E00               	movlw	0
  6027  000D56  6E04               	movwf	i2___wmul@multiplicand+1,c
  6028  000D58  0E03               	movlw	3
  6029  000D5A  6E03               	movwf	i2___wmul@multiplicand,c
  6030  000D5C  EC39  F00C         	call	i2___wmul	;wreg free
  6031  000D60  C001  F03A         	movff	?i2___wmul,_N
  6032  000D64  C002  F03B         	movff	?i2___wmul+1,_N+1
  6033                           
  6034                           ;main.c: 567: total_number = 4*number;
  6035  000D68  C057  F007         	movff	_number,??_is_valid
  6036  000D6C  C058  F008         	movff	_number+1,??_is_valid+1
  6037  000D70  90D8               	bcf	status,0,c
  6038  000D72  3607               	rlcf	??_is_valid,f,c
  6039  000D74  3608               	rlcf	??_is_valid+1,f,c
  6040  000D76  90D8               	bcf	status,0,c
  6041  000D78  3607               	rlcf	??_is_valid,f,c
  6042  000D7A  3608               	rlcf	??_is_valid+1,f,c
  6043  000D7C  C007  F040         	movff	??_is_valid,_total_number
  6044  000D80  C008  F041         	movff	??_is_valid+1,_total_number+1
  6045                           
  6046                           ;main.c: 568: }
  6047  000D84  0012               	return	
  6048  000D86                     i2l216:
  6049                           
  6050                           ;main.c: 569: else if (strcmp(current_set2,"BWWW")==0){
  6051  000D86  0E52               	movlw	low _current_set2
  6052  000D88  6E01               	movwf	strcmp@s1,c
  6053  000D8A  0E00               	movlw	high _current_set2
  6054  000D8C  6E02               	movwf	strcmp@s1+1,c
  6055  000D8E  0EE4               	movlw	low STR_44
  6056  000D90  6E03               	movwf	strcmp@s2,c
  6057  000D92  0EFF               	movlw	high STR_44
  6058  000D94  6E04               	movwf	strcmp@s2+1,c
  6059  000D96  EC62  F00B         	call	_strcmp	;wreg free
  6060  000D9A  5001               	movf	?_strcmp,w,c
  6061  000D9C  1002               	iorwf	?_strcmp+1,w,c
  6062  000D9E  A4D8               	btfss	status,2,c
  6063  000DA0  0012               	return	
  6064                           
  6065                           ;main.c: 570: B = 1*number;
  6066  000DA2  C057  F03C         	movff	_number,_B
  6067  000DA6  C058  F03D         	movff	_number+1,_B+1
  6068                           
  6069                           ;main.c: 571: W = 3*number;
  6070  000DAA  C057  F001         	movff	_number,i2___wmul@multiplier
  6071  000DAE  C058  F002         	movff	_number+1,i2___wmul@multiplier+1
  6072  000DB2  0E00               	movlw	0
  6073  000DB4  6E04               	movwf	i2___wmul@multiplicand+1,c
  6074  000DB6  0E03               	movlw	3
  6075  000DB8  6E03               	movwf	i2___wmul@multiplicand,c
  6076  000DBA  EC39  F00C         	call	i2___wmul	;wreg free
  6077  000DBE  C001  F036         	movff	?i2___wmul,_W
  6078  000DC2  C002  F037         	movff	?i2___wmul+1,_W+1
  6079                           
  6080                           ;main.c: 572: total_number = 4*number;
  6081  000DC6  C057  F007         	movff	_number,??_is_valid
  6082  000DCA  C058  F008         	movff	_number+1,??_is_valid+1
  6083  000DCE  90D8               	bcf	status,0,c
  6084  000DD0  3607               	rlcf	??_is_valid,f,c
  6085  000DD2  3608               	rlcf	??_is_valid+1,f,c
  6086  000DD4  90D8               	bcf	status,0,c
  6087  000DD6  3607               	rlcf	??_is_valid,f,c
  6088  000DD8  3608               	rlcf	??_is_valid+1,f,c
  6089  000DDA  C007  F040         	movff	??_is_valid,_total_number
  6090  000DDE  C008  F041         	movff	??_is_valid+1,_total_number+1
  6091  000DE2  0012               	return	
  6092  000DE4                     __end_of_is_valid:
  6093                           	opt stack 0
  6094                           pclatu	equ	0xFFB
  6095                           pclath	equ	0xFFA
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           intcon3	equ	0xFF0
  6104                           indf0	equ	0xFEF
  6105                           postinc0	equ	0xFEE
  6106                           fsr0h	equ	0xFEA
  6107                           fsr0l	equ	0xFE9
  6108                           wreg	equ	0xFE8
  6109                           indf1	equ	0xFE7
  6110                           fsr1h	equ	0xFE2
  6111                           fsr1l	equ	0xFE1
  6112                           indf2	equ	0xFDF
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function i2___wmul *****************
  6120 ;; Defined at:
  6121 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  multiplier      2    0[COMRAM] unsigned int 
  6124 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  __wmul          2    4[COMRAM] unsigned int 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  2    0[COMRAM] unsigned int 
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0, prodl, prodh
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;Total ram usage:        6 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_interruptHandler
  6146 ;;		_is_valid
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text21
  6151  001872                     __ptext21:
  6152                           	opt stack 0
  6153  001872                     i2___wmul:
  6154                           	opt stack 26
  6155                           
  6156                           ;incstack = 0
  6157  001872  5001               	movf	i2___wmul@multiplier,w,c
  6158  001874  0203               	mulwf	i2___wmul@multiplicand,c
  6159  001876  CFF3 F005          	movff	prodl,i2___wmul@product
  6160  00187A  CFF4 F006          	movff	prodh,i2___wmul@product+1
  6161  00187E  5001               	movf	i2___wmul@multiplier,w,c
  6162  001880  0204               	mulwf	i2___wmul@multiplicand+1,c
  6163  001882  50F3               	movf	prodl,w,c
  6164  001884  2606               	addwf	i2___wmul@product+1,f,c
  6165  001886  5002               	movf	i2___wmul@multiplier+1,w,c
  6166  001888  0203               	mulwf	i2___wmul@multiplicand,c
  6167  00188A  50F3               	movf	prodl,w,c
  6168  00188C  2606               	addwf	i2___wmul@product+1,f,c
  6169  00188E  C005  F001         	movff	i2___wmul@product,?i2___wmul
  6170  001892  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  6171  001896  0012               	return	
  6172  001898                     __end_ofi2___wmul:
  6173                           	opt stack 0
  6174                           pclatu	equ	0xFFB
  6175                           pclath	equ	0xFFA
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon3	equ	0xFF0
  6184                           indf0	equ	0xFEF
  6185                           postinc0	equ	0xFEE
  6186                           fsr0h	equ	0xFEA
  6187                           fsr0l	equ	0xFE9
  6188                           wreg	equ	0xFE8
  6189                           indf1	equ	0xFE7
  6190                           fsr1h	equ	0xFE2
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _strcmp *****************
  6200 ;; Defined at:
  6201 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  6204 ;;		 -> current_set2(5), 
  6205 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  6206 ;;		 -> STR_44(5), STR_43(5), STR_42(5), STR_41(5), 
  6207 ;;		 -> STR_40(5), STR_39(5), STR_38(5), STR_37(4), 
  6208 ;;		 -> STR_36(4), STR_35(4), STR_34(4), STR_33(4), 
  6209 ;;		 -> STR_32(4), STR_31(3), STR_30(3), STR_29(3), 
  6210 ;;		 -> STR_28(2), STR_27(2), STR_26(2), STR_25(2), 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  r               1    5[COMRAM] char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  2    0[COMRAM] int 
  6215 ;; Registers used:
  6216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;Total ram usage:        6 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_is_valid
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text22
  6236  0016C4                     __ptext22:
  6237                           	opt stack 0
  6238  0016C4                     _strcmp:
  6239                           	opt stack 25
  6240                           
  6241                           ;incstack = 0
  6242  0016C4  D004               	goto	i2l872
  6243  0016C6  4A01               	infsnz	strcmp@s1,f,c
  6244  0016C8  2A02               	incf	strcmp@s1+1,f,c
  6245  0016CA  4A03               	infsnz	strcmp@s2,f,c
  6246  0016CC  2A04               	incf	strcmp@s2+1,f,c
  6247  0016CE                     i2l872:
  6248  0016CE  C001  FFD9         	movff	strcmp@s1,fsr2l
  6249  0016D2  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6250  0016D6  50DF               	movf	indf2,w,c
  6251  0016D8  6E05               	movwf	??_strcmp& (0+255),c
  6252  0016DA  C003  FFF6         	movff	strcmp@s2,tblptrl
  6253  0016DE  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  6254  0016E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6255  0016E2  6AF8               	clrf	tblptru,c
  6256  0016E4                     	endif
  6257  0016E4                     	if	0	;tblptru may be non-zero
  6258  0016E4                     	endif
  6259  0016E4  0008               	tblrd		*
  6260  0016E6  50F5               	movf	tablat,w,c
  6261  0016E8  0800               	sublw	0
  6262  0016EA  2405               	addwf	??_strcmp,w,c
  6263  0016EC  6E06               	movwf	strcmp@r,c
  6264  0016EE  5006               	movf	strcmp@r,w,c
  6265  0016F0  A4D8               	btfss	status,2,c
  6266  0016F2  D007               	goto	i2u120_40
  6267  0016F4  C001  FFD9         	movff	strcmp@s1,fsr2l
  6268  0016F8  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6269  0016FC  50DF               	movf	indf2,w,c
  6270  0016FE  A4D8               	btfss	status,2,c
  6271  001700  D7E2               	goto	i2l873
  6272  001702                     i2u120_40:
  6273  001702  5006               	movf	strcmp@r,w,c
  6274  001704  6E01               	movwf	?_strcmp,c
  6275  001706  6A02               	clrf	?_strcmp+1,c
  6276  001708  BE01               	btfsc	?_strcmp,7,c
  6277  00170A  0602               	decf	?_strcmp+1,f,c
  6278  00170C  0012               	return	
  6279  00170E                     __end_of_strcmp:
  6280                           	opt stack 0
  6281                           pclatu	equ	0xFFB
  6282                           pclath	equ	0xFFA
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           intcon3	equ	0xFF0
  6291                           indf0	equ	0xFEF
  6292                           postinc0	equ	0xFEE
  6293                           fsr0h	equ	0xFEA
  6294                           fsr0l	equ	0xFE9
  6295                           wreg	equ	0xFE8
  6296                           indf1	equ	0xFE7
  6297                           fsr1h	equ	0xFE2
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _check *****************
  6307 ;; Defined at:
  6308 ;;		line 588 in file "main.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  2    0[COMRAM] int 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;Total ram usage:        2 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_interruptHandler
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text23
  6336  001522                     __ptext23:
  6337                           	opt stack 0
  6338  001522                     _check:
  6339                           	opt stack 26
  6340                           
  6341                           ;main.c: 589: if (B>2||N>3||S>2||W>4||total_number >4){
  6342                           
  6343                           ;incstack = 0
  6344  001522  BE3D               	btfsc	_B+1,7,c
  6345  001524  D006               	goto	i2u172_40
  6346  001526  503D               	movf	_B+1,w,c
  6347  001528  E124               	bnz	i2l2371
  6348  00152A  0E03               	movlw	3
  6349  00152C  5C3C               	subwf	_B,w,c
  6350  00152E  B0D8               	btfsc	status,0,c
  6351  001530  D020               	goto	i2u176_40
  6352  001532                     i2u172_40:
  6353  001532  BE3B               	btfsc	_N+1,7,c
  6354  001534  D006               	goto	i2u173_40
  6355  001536  503B               	movf	_N+1,w,c
  6356  001538  E11C               	bnz	i2l2371
  6357  00153A  0E04               	movlw	4
  6358  00153C  5C3A               	subwf	_N,w,c
  6359  00153E  B0D8               	btfsc	status,0,c
  6360  001540  D018               	goto	i2u176_40
  6361  001542                     i2u173_40:
  6362  001542  BE39               	btfsc	_S+1,7,c
  6363  001544  D006               	goto	i2u174_40
  6364  001546  5039               	movf	_S+1,w,c
  6365  001548  E114               	bnz	i2l2371
  6366  00154A  0E03               	movlw	3
  6367  00154C  5C38               	subwf	_S,w,c
  6368  00154E  B0D8               	btfsc	status,0,c
  6369  001550  D010               	goto	i2u176_40
  6370  001552                     i2u174_40:
  6371  001552  BE37               	btfsc	_W+1,7,c
  6372  001554  D006               	goto	i2u175_40
  6373  001556  5037               	movf	_W+1,w,c
  6374  001558  E10C               	bnz	i2l2371
  6375  00155A  0E05               	movlw	5
  6376  00155C  5C36               	subwf	_W,w,c
  6377  00155E  B0D8               	btfsc	status,0,c
  6378  001560  D008               	goto	i2u176_40
  6379  001562                     i2u175_40:
  6380  001562  BE41               	btfsc	_total_number+1,7,c
  6381  001564  D00B               	goto	i2l222
  6382  001566  5041               	movf	_total_number+1,w,c
  6383  001568  E104               	bnz	i2l2371
  6384  00156A  0E05               	movlw	5
  6385  00156C  5C40               	subwf	_total_number,w,c
  6386  00156E  A0D8               	btfss	status,0,c
  6387  001570  D005               	goto	i2l222
  6388  001572                     i2u176_40:
  6389  001572                     i2l2371:
  6390                           
  6391                           ;main.c: 593: return 0;
  6392  001572  0E00               	movlw	0
  6393  001574  6E02               	movwf	?_check+1,c
  6394  001576  0E00               	movlw	0
  6395  001578  6E01               	movwf	?_check,c
  6396  00157A  0012               	return	
  6397  00157C                     i2l222:
  6398                           
  6399                           ;main.c: 594: }
  6400                           ;main.c: 595: return 1;
  6401  00157C  0E00               	movlw	0
  6402  00157E  6E02               	movwf	?_check+1,c
  6403  001580  0E01               	movlw	1
  6404  001582  6E01               	movwf	?_check,c
  6405  001584  0012               	return	
  6406  001586                     __end_of_check:
  6407                           	opt stack 0
  6408                           pclatu	equ	0xFFB
  6409                           pclath	equ	0xFFA
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           intcon	equ	0xFF2
  6417                           intcon3	equ	0xFF0
  6418                           indf0	equ	0xFEF
  6419                           postinc0	equ	0xFEE
  6420                           fsr0h	equ	0xFEA
  6421                           fsr0l	equ	0xFE9
  6422                           wreg	equ	0xFE8
  6423                           indf1	equ	0xFE7
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           pclatu	equ	0xFFB
  6433                           pclath	equ	0xFFA
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           intcon3	equ	0xFF0
  6442                           indf0	equ	0xFEF
  6443                           postinc0	equ	0xFEE
  6444                           fsr0h	equ	0xFEA
  6445                           fsr0l	equ	0xFE9
  6446                           wreg	equ	0xFE8
  6447                           indf1	equ	0xFE7
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457                           	psect	rparam
  6458  0000                     pclatu	equ	0xFFB
  6459                           pclath	equ	0xFFA
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           intcon3	equ	0xFF0
  6468                           indf0	equ	0xFEF
  6469                           postinc0	equ	0xFEE
  6470                           fsr0h	equ	0xFEA
  6471                           fsr0l	equ	0xFE9
  6472                           wreg	equ	0xFE8
  6473                           indf1	equ	0xFE7
  6474                           fsr1h	equ	0xFE2
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           fsr2h	equ	0xFDA
  6480                           fsr2l	equ	0xFD9
  6481                           status	equ	0xFD8
  6482                           
  6483                           	psect	temp
  6484  000059                     btemp:
  6485                           	opt stack 0
  6486  000059                     	ds	1
  6487  0000                     int$flags	set	btemp
  6488  0000                     wtemp6	set	btemp+1
  6489                           pclatu	equ	0xFFB
  6490                           pclath	equ	0xFFA
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           intcon3	equ	0xFF0
  6499                           indf0	equ	0xFEF
  6500                           postinc0	equ	0xFEE
  6501                           fsr0h	equ	0xFEA
  6502                           fsr0l	equ	0xFE9
  6503                           wreg	equ	0xFE8
  6504                           indf1	equ	0xFE7
  6505                           fsr1h	equ	0xFE2
  6506                           fsr1l	equ	0xFE1
  6507                           indf2	equ	0xFDF
  6508                           postinc2	equ	0xFDE
  6509                           postdec2	equ	0xFDD
  6510                           fsr2h	equ	0xFDA
  6511                           fsr2l	equ	0xFD9
  6512                           status	equ	0xFD8


Data Sizes:
    Strings     192
    Constant    133
    Data        0
    BSS         300
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     53      88
    BANK0           128     30      95
    BANK1           256      0     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_21(CODE[1]), STR_19(CODE[1]), STR_16(CODE[1]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[5]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[4]), 
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[2]), STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(COMRAM[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_24(CODE[6]), STR_23(CODE[9]), STR_22(CODE[12]), STR_20(CODE[7]), 
		 -> STR_18(CODE[3]), STR_17(CODE[11]), STR_15(CODE[3]), STR_14(CODE[9]), 
		 -> STR_9(CODE[15]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[17]), 
		 -> STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[3]), STR_2(CODE[14]), 
		 -> STR_1(CODE[15]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_45(CODE[7]), final_set(BANK0[40]), current_set(BANK0[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(COMRAM[5]), final_set(BANK0[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4949
                                             26 BANK0      4     4      0
                             ___wmul
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    2942
                                             12 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1518
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0    9293
                                             26 COMRAM    27    27      0
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            20    16      4    1272
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    3808
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     677
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _lcdNibble

 _interruptHandler (ROOT)
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1E      5F       5       74.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     35      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17F      34        0.0%
DATA                 0      0     17F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 13:17:08 2018

                        _B 003C                          _N 003A                          _S 0038  
                        _W 0036                __CFG_CPD$ON 000000        ___wmul@multiplicand 00C3  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l120 0EF2                        l122 1004                        l123 0F68  
                      l300 103E                        l117 0E18                        l310 1162  
                      l302 1094                        l118 0E68                        l311 11BC  
                      l303 1068                        l119 0EBA                        l312 1168  
                      l306 111A                        l292 1026                        l293 1036  
                      l294 10BE                        l720 159E                        l730 1764  
                      l723 15C6                        l299 10F0                        l724 15D0  
                      l733 1784                        l734 178E                        l719 15A6  
                      l729 176C               __CFG_CPB$OFF 000000              _assembly_step 0090  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l2995 111E                       STR_1 FF5E                       STR_2 FF6D  
                     STR_3 FFF9                       STR_4 FFA4                       STR_5 FFBA  
                     STR_6 FF3E                       STR_7 FFF9                       STR_8 FF4C  
                     STR_9 FF4F                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       u2320 15AA                       u2400 10B6  
                     _LATD 000F8C                       u2305 14A0                       _LATE 000F8D  
                     u2306 14A2                       u2350 1770                       u2407 10AC  
                     u2450 1150                       u2470 11C6                       u2390 108A  
                     u2295 145E                       u2607 0E30                       u2296 1460  
                     u2617 0E54                       u2707 1668                       u2627 0EAC  
                     u2717 18C0                       u2397 1080                       u2637 0EE4  
                     u2727 1446                       u2647 0F1C                       u2737 1450  
                     u2657 0F4E                       u2747 1488                       u2667 0FD0  
                     u2757 1492                       u2677 0FF0                       u2687 18A8  
                     u2697 1634                       _main 0DE4   __end_of_interruptHandler 0850  
                     _keys FEB9                       _temp 004B                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0059                       _strs FEDA                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 18DC              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 14A4           __end_of_LCD_LEFT FED5               _total_number 0040  
                    ?_main 0001                      STR_10 FFFC                      STR_11 FFEB  
                    STR_12 FFEF                      STR_20 FFB3                      STR_21 FF5D  
                    STR_13 FFF3                      STR_30 FFEE                      STR_14 FF92  
                    STR_22 FF7B                      STR_31 FFF2                      STR_15 FFF9  
                    STR_23 FF9B                      STR_16 FF5D                      STR_32 FFE9  
                    STR_40 FFD5                      STR_24 FFC0                      STR_25 FFFC  
                    STR_33 FFED                      STR_41 FFCB                      STR_17 FF87  
                    STR_26 FFEB                      STR_18 FFF9                      STR_34 FFF1  
                    STR_42 FFD0                      STR_19 FF5D                      STR_27 FFEF  
                    STR_35 FFCC                      STR_43 FFC6                      STR_28 FFF3  
                    STR_36 FFD6                      STR_44 FFE4                      STR_29 FFEA  
                    STR_37 FFF5                      STR_45 FFAC                      STR_38 FFDA  
                    STR_39 FFDF            __end_of___lwdiv 15DA                      i2l200 0AE6  
          __end_of___lwmod 1798                      i2l210 0C80                      i2l202 0B38  
                    i2l212 0CD4                      i2l204 0B84                      i2l300 1204  
                    i2l140 0176                      i2l133 0096                      i2l222 157C  
                    i2l214 0D28                      i2l206 0BD8                      i2l310 1322  
                    i2l302 1258                      i2l150 0320                      i2l142 01BE  
                    i2l311 1376                      i2l303 122E                      i2l151 0362  
                    i2l135 0246                      i2l216 0D86                      i2l208 0C2C  
                    i2l312 1328                      i2l144 0206                      i2l136 00E6  
                    i2l145 022C                      i2l306 12DA                      i2l170 065A  
                    i2l146 0570                      i2l154 039E                      i2l138 012E  
                    i2l171 0662                      i2l147 0260                      i2l180 087E  
                    i2l172 066C                      i2l156 049C                      i2l148 02A0  
                    i2l173 072E                      i2l165 0694                      i2l149 02E0  
                    i2l190 0978                      i2l182 08AC                      i2l166 0642  
                    i2l175 0780                      i2l167 06CE                      i2l159 051C  
                    i2l192 09B0                      i2l184 08DA                      i2l168 064A  
                    i2l177 07DA                      i2l169 0652                      i2l194 09FC  
                    i2l186 0908                      i2l196 0A48                      i2l188 0940  
                    i2l292 11EE                      i2l293 11FE                      i2l198 0A94  
                    i2l294 1282                      i2l720 15F0                      i2l730 17A6  
                    i2l723 1618                      i2l299 12B2                      i2l724 1622  
                    i2l733 17C6                      i2l734 17D0                      i2l719 15F8  
                    i2l729 17AE                      i2l863 17E8                      i2l872 16CE  
                    i2l864 17E4                      i2l880 1720                      i2l873 16C6  
                    i2l881 1718                      i2l866 1800                      i2l867 17F8  
                    i2l886 1406                      i2l887 139C                      i2l888 13FE  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 18C8  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 1678  
                    _check 1522             __CFG_EBTRB$OFF 000000            __end_of_dpowers FED4  
                    _error 0044                      _valid 0042                      _state 0092  
                    _putch 1898                      main@i 00DD                      pclath 000FFA  
                    tablat 000FF5          _LCDinterruptState 004C           __end_ofi2___wmul 1898  
                    status 000FD8                      wtemp6 005A            __end_of_strncmp 1420  
           __CFG_PBADEN$ON 000000           __end_ofi2_printf 139A         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042            __initialization 181C         __size_ofi2_lcdInst 0014  
             __end_of_main 101A               __end_of_keys FECA                 i2printf@ap 0014  
               i2printf@cp 0016               __end_of_strs FF3E         __size_ofi2_initLCD 004C  
           __CFG_OSC$HSPLL 000000          __end_of_LCD_RIGHT FED6                     ??_main 00DB  
            __activetblptr 000003                     ?_check 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2203 139C                     i2l2371 1572                     i2l2439 12DE  
                   i2l2811 0804                     i2l2809 0802                     i2l2695 04B4  
                ??i2_putch 0003             __CFG_XINST$OFF 000000                     ___wmul 184A  
           __CFG_STVREN$ON 000000                  ??___lwdiv 00C5                  ??___lwmod 00CC  
         __end_of_is_valid 0DE4                     clear_0 1822                     clear_1 182E  
                   clear_2 183A                     _number 0057                  ??_lcdInst 00C3  
                   _printf 101A                     _strcat 17DA                     _strcmp 16C4  
                   _strcpy 170E                  ??_initLCD 00C4          __end_ofi2___lwdiv 162C  
             __mediumconst FEB8          __end_ofi2___lwmod 17DA                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8          __end_ofi2_lcdInst 18F0  
                ??_strncmp 000D          __end_ofi2_initLCD 16C4                 __accesstop 0080  
  __end_of__initialization 1840              ___rparam_used 000001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_check 1586              __end_of_putch 18B0  
              i2printf@val 0018                  ?i2___wmul 0001         __size_of_lcdNibble 0084  
              i2putch@data 0003                  ?i2_printf 000D                    ??_check 0003  
                  ??_putch 00C3                 __pbssBANK0 0080                 __pbssBANK1 0100  
        ?_interruptHandler 0001         ??_interruptHandler 001B               ?i2_lcdNibble 0001  
                  ?___wmul 00C1                    ?_printf 00CD                    ?_strcat 0001  
                  ?_strcmp 0001                    ?_strcpy 0007                 ??i2___wmul 0005  
               ??i2_printf 0011       lcd@LCDinterruptState 004A                    i2_putch 18C8  
                ?_is_valid 0001          __end_of_lcdNibble 14A4                    __Hparam 0000  
                  __Lparam 0000            __size_of___wmul 0028                    ___lwdiv 1586  
                  ___lwmod 1754   interruptHandler@keypress 0035                    __pcinit 181C  
                  __ramtop 1000                    _lcdInst 18B0                    __ptext0 0DE4  
                  __ptext1 101A                    __ptext2 1898                    __ptext3 1754  
                  __ptext4 1586                    __ptext5 162C                    __ptext6 18B0  
                  __ptext7 1420                    __ptext8 184A            __size_of_printf 01CA  
          __size_of_strcat 0042            __size_of_strcmp 004A            __size_of_strcpy 0046  
                  _initLCD 162C                    _counter 0048                    _dpowers FECA  
                _LCD_RIGHT FED5                    _strncmp 139A             __pintcode_body 0012  
     end_of_initialization 1840      __end_of_LCD_SIZE_HORZ FED8      __end_of_LCD_SIZE_VERT FED7  
             _final_number 0080                    int_func 0012        i2___wmul@multiplier 0001  
               ??_is_valid 0007                    printf@c 00DA                    printf@f 00CD  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                  strcmp@r 0006                 _prev_state 003E          i2___lwdiv@divisor 0003  
                i2___lwdiv 15DA                  i2___lwmod 1798          i2___lwdiv@counter 0007  
                i2_lcdInst 18DC                  i2_initLCD 1678             __end_of___wmul 1872  
     __size_ofi2_lcdNibble 007E              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 11E4             __end_of_strcat 181C             __end_of_strcmp 170E  
             i2printf@flag 0012             __end_of_strcpy 1754               i2printf@prec 0013  
      start_initialization 181C          __size_ofi2___wmul 0026                  i2printf@c 001A  
                i2printf@f 000D                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 01B6                 ?i2_lcdInst 0001               _counter_step 0046  
               ?i2_initLCD 0001          interruptHandler@i 0032                   ??___wmul 00C5  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 00D1  __size_of_interruptHandler 0848  
                 ??_strcat 0005                   ??_strcmp 0005                   ??_strcpy 000B  
              __pbssCOMRAM 0036              __pcstackBANK0 00C1          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001               _current_set2 0052  
        __size_of_is_valid 0594           ___lwdiv@dividend 00C1          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FEB8                  _lcdNibble 1420  
                 ?___lwdiv 00C1                   ?___lwmod 00C8                  _final_set 0094  
                 ?_lcdInst 0001                   ?_initLCD 0001             __size_of_check 0064  
         ___lwdiv@quotient 00C6                   ?_strncmp 0007                ??i2___lwdiv 0005  
              ??i2___lwmod 000C             __size_of_putch 0018                   _LCD_LEFT FED4  
              ??i2_lcdInst 0003             ___wmul@product 00C5                   _LATDbits 000F8C  
              ??i2_initLCD 0004                   i2u120_40 1702                   i2u131_40 17B2  
                 i2u212_40 04B4                   i2u117_45 14DE                   i2u117_46 14E0  
                 i2u150_40 13CA                   i2u214_40 052C                   i2u118_45 151E  
                 i2u118_46 1520                   i2u128_40 15FC                   i2u145_40 174A  
                 i2u209_40 039C                   i2u145_47 1740                   i2u172_40 1532  
                 i2u180_40 127A                   i2u180_47 1270                   i2u173_40 1542  
                 i2u174_40 1552                   i2u175_40 1562                   i2u176_40 1572  
                 i2u280_47 04FE                   i2u185_40 1310                   i2u281_47 0546  
                 i2u290_47 18E8                   i2u282_47 05B2                   i2u187_40 137E  
                 i2u179_40 1250                   i2u291_47 14C6                   i2u179_47 1246  
                 i2u283_47 0686                   i2u292_47 14D0                   i2u284_47 06EE  
                 i2u276_47 0220                   i2u293_47 1506                   i2u285_47 070E  
                 i2u277_47 0236                   i2u294_47 1510                   i2u286_47 07B0  
                 i2u278_47 0446                   i2u287_47 18D4                   i2u279_47 0484  
                 i2u288_47 167E                   i2u289_47 16B2           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001          ___wmul@multiplier 00C1                   i2___wmul 1872  
            lcdNibble@data 00C2                 printf@flag 00D2              lcdNibble@temp 00C1  
               printf@prec 00D3                   i2_printf 11E4             _LCD_HORZ_LIMIT FED9  
     interruptHandler@temp 0034           __size_ofi2_putch 0014                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000      i2___wmul@multiplicand 0003  
         __size_of___lwdiv 0054           __size_of___lwmod 0044           _interruptHandler 0008  
         __size_of_lcdInst 0018           __size_of_initLCD 004C                _current_set 00BC  
               strcat@from 0003     __end_of_LCD_HORZ_LIMIT FEDA            ___lwdiv@divisor 00C3  
          ___lwdiv@counter 00C5                   __ptext10 11E4                   __ptext11 18C8  
                 __ptext20 0850                   __ptext12 1798                   __ptext21 1872  
                 __ptext13 15DA                   __ptext22 16C4                   __ptext14 1678  
                 __ptext23 1522                   __ptext15 18DC                   __ptext16 14A4  
                 __ptext17 139A                   __ptext18 170E                   __ptext19 17DA  
                 _fastener 0100             _LCD_VERT_LIMIT FED8           __size_of_strncmp 0086  
               strcpy@from 0009              __size_of_main 0236                   _is_valid 0850  
               strncmp@len 000B                   _temp_set 004D              ??i2_lcdNibble 0001  
              ??_lcdNibble 00C1                   int$flags 0059                  printf@val 00D8  
                putch@data 00C3                 _INTCONbits 000FF2     __end_of_LCD_VERT_LIMIT FED9  
                 intlevel2 0000              _LCD_SIZE_HORZ FED7           ___lwmod@dividend 00C8  
            _LCD_SIZE_VERT FED6                  strncmp@s1 0007                  strncmp@s2 0009  
                 printf@ap 00D4                   printf@cp 00D6                lcdInst@data 00C3  
      __end_ofi2_lcdNibble 1522                   strcat@cp 0005                   strcat@to 0001  
                 strcmp@s1 0001                   strcmp@s2 0003            ___lwmod@divisor 00CA  
                 strcpy@cp 000B                   strcpy@to 0007            ___lwmod@counter 00CC  
