

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Sep 15 00:35:38 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.42
    23                           ; Generated 13/04/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  001426                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _UART
    62  001426  14                 	db	low _uart
    63  001427  00                 	db	high _uart
    64                           
    65                           	psect	smallconst
    66  001000                     __psmallconst:
    67                           	opt stack 0
    68  001000  00                 	db	0
    69  001001                     _keys:
    70                           	opt stack 0
    71  001001  31                 	db	49
    72  001002  32                 	db	50
    73  001003  33                 	db	51
    74  001004  41                 	db	65
    75  001005  34                 	db	52
    76  001006  35                 	db	53
    77  001007  36                 	db	54
    78  001008  42                 	db	66
    79  001009  37                 	db	55
    80  00100A  38                 	db	56
    81  00100B  39                 	db	57
    82  00100C  43                 	db	67
    83  00100D  2A                 	db	42
    84  00100E  30                 	db	48
    85  00100F  23                 	db	35
    86  001010  44                 	db	68
    87  001011  00                 	db	0
    88  001012                     __end_of_keys:
    89                           	opt stack 0
    90  001012                     _LCD_LEFT:
    91                           	opt stack 0
    92  001012  00                 	db	0
    93  001013                     __end_of_LCD_LEFT:
    94                           	opt stack 0
    95  001013                     _LCD_RIGHT:
    96                           	opt stack 0
    97  001013  01                 	db	1
    98  001014                     __end_of_LCD_RIGHT:
    99                           	opt stack 0
   100  001014                     _LCD_SIZE_VERT:
   101                           	opt stack 0
   102  001014  02                 	db	2
   103  001015                     __end_of_LCD_SIZE_VERT:
   104                           	opt stack 0
   105  001015                     _LCD_SIZE_HORZ:
   106                           	opt stack 0
   107  001015  10                 	db	16
   108  001016                     __end_of_LCD_SIZE_HORZ:
   109                           	opt stack 0
   110  001016                     _LCD_VERT_LIMIT:
   111                           	opt stack 0
   112  001016  02                 	db	2
   113  001017                     __end_of_LCD_VERT_LIMIT:
   114                           	opt stack 0
   115  001017                     _LCD_HORZ_LIMIT:
   116                           	opt stack 0
   117  001017  28                 	db	40
   118  001018                     __end_of_LCD_HORZ_LIMIT:
   119                           	opt stack 0
   120  0000                     _SPBRG	set	4015
   121  0000                     _RCREG	set	4014
   122  0000                     _RCSTAbits	set	4011
   123  0000                     _TXREG	set	4013
   124  0000                     _TXSTAbits	set	4012
   125  0000                     _INTCONbits	set	4082
   126  0000                     _LATDbits	set	3980
   127  0000                     _ADCON1	set	4033
   128  0000                     _ADCON0	set	4034
   129  0000                     _TRISE	set	3990
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISB	set	3987
   133  0000                     _TRISA	set	3986
   134  0000                     _LATE	set	3981
   135  0000                     _LATD	set	3980
   136  0000                     _LATC	set	3979
   137  0000                     _LATB	set	3978
   138  0000                     _LATA	set	3977
   139  0000                     _TRISC7	set	31911
   140  0000                     _TRISC6	set	31910
   141  0000                     _RCIE	set	31981
   142  0000                     _RCIF	set	31989
   143  0000                     _TXIE	set	31980
   144  0000                     _TRMT	set	32097
   145  0000                     _TXIF	set	31988
   146  0000                     _nRBPU	set	32655
   147                           
   148                           ; #config settings
   149  001018  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           	psect	cinit
   152  0013CC                     __pcinit:
   153                           	opt stack 0
   154  0013CC                     start_initialization:
   155                           	opt stack 0
   156  0013CC                     __initialization:
   157                           	opt stack 0
   158                           
   159                           ; Initialize objects allocated to COMRAM (2 bytes)
   160                           ; load TBLPTR registers with __pidataCOMRAM
   161  0013CC  0E26               	movlw	low __pidataCOMRAM
   162  0013CE  6EF6               	movwf	tblptrl,c
   163  0013D0  0E14               	movlw	high __pidataCOMRAM
   164  0013D2  6EF7               	movwf	tblptrh,c
   165  0013D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   166  0013D6  6EF8               	movwf	tblptru,c
   167  0013D8  0009               	tblrd		*+	;fetch initializer
   168  0013DA  CFF5 F03A          	movff	tablat,__pdataCOMRAM
   169  0013DE  0009               	tblrd		*+	;fetch initializer
   170  0013E0  CFF5 F03B          	movff	tablat,__pdataCOMRAM+1
   171                           
   172                           ; Clear objects allocated to COMRAM (31 bytes)
   173  0013E4  EE00  F001         	lfsr	0,__pbssCOMRAM
   174  0013E8  0E1F               	movlw	31
   175  0013EA                     clear_0:
   176  0013EA  6AEE               	clrf	postinc0,c
   177  0013EC  06E8               	decf	wreg,f,c
   178  0013EE  E1FD               	bnz	clear_0
   179  0013F0                     end_of_initialization:
   180                           	opt stack 0
   181  0013F0                     __end_of__initialization:
   182                           	opt stack 0
   183  0013F0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   184  0013F2  6EF8               	movwf	tblptru,c
   185  0013F4  0E10               	movlw	high __Lsmallconst
   186  0013F6  6EF7               	movwf	tblptrh,c
   187  0013F8  0100               	movlb	0
   188  0013FA  EFE8  F008         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	bssCOMRAM
   197  000001                     __pbssCOMRAM:
   198                           	opt stack 0
   199  000001                     lcd@LCDinterruptState:
   200                           	opt stack 0
   201  000001                     	ds	1
   202  000002                     _UARTinterruptState:
   203                           	opt stack 0
   204  000002                     	ds	1
   205  000003                     	ds	1
   206  000004                     _arr_dataRX:
   207                           	opt stack 0
   208  000004                     	ds	16
   209  000014                     _uart:
   210                           	opt stack 0
   211  000014                     	ds	12
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           tblptrl	equ	0xFF6
   215                           tablat	equ	0xFF5
   216                           postinc0	equ	0xFEE
   217                           wreg	equ	0xFE8
   218                           
   219                           	psect	dataCOMRAM
   220  00003A                     __pdataCOMRAM:
   221                           	opt stack 0
   222  00003A                     _UART:
   223                           	opt stack 0
   224  00003A                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           
   232                           	psect	cstackCOMRAM
   233  000020                     __pcstackCOMRAM:
   234                           	opt stack 0
   235  000020                     ??_uartReceiveBlocking:
   236  000020                     ?___aldiv:
   237                           	opt stack 0
   238  000020                     lcdNibble@temp:
   239                           	opt stack 0
   240  000020                     ___aldiv@dividend:
   241                           	opt stack 0
   242                           
   243                           ; 4 bytes @ 0x0
   244  000020                     	ds	1
   245  000021                     lcdNibble@data:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x1
   249  000021                     	ds	1
   250  000022                     lcdInst@data:
   251                           	opt stack 0
   252  000022                     putch@data:
   253                           	opt stack 0
   254  000022                     uartReceiveBlocking@temp:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x2
   258  000022                     	ds	1
   259  000023                     ??_initLCD:
   260  000023                     uartReceiveBlocking@numBytes:
   261                           	opt stack 0
   262                           
   263                           ; 1 bytes @ 0x3
   264  000023                     	ds	1
   265  000024                     uartReceiveBlocking@numReceives:
   266                           	opt stack 0
   267  000024                     ___aldiv@divisor:
   268                           	opt stack 0
   269                           
   270                           ; 4 bytes @ 0x4
   271  000024                     	ds	4
   272  000028                     ___aldiv@counter:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x8
   276  000028                     	ds	1
   277  000029                     ___aldiv@sign:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x9
   281  000029                     	ds	1
   282  00002A                     ___aldiv@quotient:
   283                           	opt stack 0
   284                           
   285                           ; 4 bytes @ 0xA
   286  00002A                     	ds	4
   287  00002E                     UART_Init@baud:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0xE
   291  00002E                     	ds	4
   292  000032                     ??_UART_Init:
   293                           
   294                           ; 1 bytes @ 0x12
   295  000032                     	ds	4
   296  000036                     ??_main:
   297                           
   298                           ; 1 bytes @ 0x16
   299  000036                     	ds	3
   300  000039                     main@keyData:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0x19
   304  000039                     	ds	1
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312 ;;
   313 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   314 ;;
   315 ;; *************** function _main *****************
   316 ;; Defined at:
   317 ;;		line 24 in file "main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;  keyData         1   25[COMRAM] unsigned char 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   333 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;Total ram usage:        4 bytes
   336 ;; Hardware stack levels required when called:    3
   337 ;; This function calls:
   338 ;;		_UART_Init
   339 ;;		_initLCD
   340 ;;		_putch
   341 ;;		_uartReceiveBlocking
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  0011D0                     __ptext0:
   349                           	opt stack 0
   350  0011D0                     _main:
   351                           	opt stack 28
   352                           
   353                           ;main.c: 30: LATA = 0x00;
   354                           
   355                           ;incstack = 0
   356  0011D0  0E00               	movlw	0
   357  0011D2  6E89               	movwf	3977,c	;volatile
   358                           
   359                           ;main.c: 31: LATB = 0x00;
   360  0011D4  0E00               	movlw	0
   361  0011D6  6E8A               	movwf	3978,c	;volatile
   362                           
   363                           ;main.c: 32: LATC = 0x00;
   364  0011D8  0E00               	movlw	0
   365  0011DA  6E8B               	movwf	3979,c	;volatile
   366                           
   367                           ;main.c: 33: LATD = 0x00;
   368  0011DC  0E00               	movlw	0
   369  0011DE  6E8C               	movwf	3980,c	;volatile
   370                           
   371                           ;main.c: 34: LATE = 0x00;
   372  0011E0  0E00               	movlw	0
   373  0011E2  6E8D               	movwf	3981,c	;volatile
   374                           
   375                           ;main.c: 38: TRISA = 0xFF;
   376  0011E4  6892               	setf	3986,c	;volatile
   377                           
   378                           ;main.c: 39: TRISB = 0xFF;
   379  0011E6  6893               	setf	3987,c	;volatile
   380                           
   381                           ;main.c: 40: TRISC = 0b10000000;
   382  0011E8  0E80               	movlw	128
   383  0011EA  6E94               	movwf	3988,c	;volatile
   384                           
   385                           ;main.c: 44: TRISD = 0x00;
   386  0011EC  0E00               	movlw	0
   387  0011EE  6E95               	movwf	3989,c	;volatile
   388                           
   389                           ;main.c: 45: TRISE = 0x00;
   390  0011F0  0E00               	movlw	0
   391  0011F2  6E96               	movwf	3990,c	;volatile
   392                           
   393                           ;main.c: 47: nRBPU = 0;
   394  0011F4  9EF1               	bcf	intcon2,7,c	;volatile
   395                           
   396                           ;main.c: 51: ADCON0 = 0x00;
   397  0011F6  0E00               	movlw	0
   398  0011F8  6EC2               	movwf	4034,c	;volatile
   399                           
   400                           ;main.c: 52: ADCON1 = 0b00001111;
   401  0011FA  0E0F               	movlw	15
   402  0011FC  6EC1               	movwf	4033,c	;volatile
   403                           
   404                           ;main.c: 56: initLCD();
   405  0011FE  ECC0  F009         	call	_initLCD	;wreg free
   406                           
   407                           ;main.c: 59: UART_Init(9600);
   408  001202  0E80               	movlw	128
   409  001204  6E2E               	movwf	UART_Init@baud,c
   410  001206  0E25               	movlw	37
   411  001208  6E2F               	movwf	UART_Init@baud+1,c
   412  00120A  0E00               	movlw	0
   413  00120C  6E30               	movwf	UART_Init@baud+2,c
   414  00120E  0E00               	movlw	0
   415  001210  6E31               	movwf	UART_Init@baud+3,c
   416  001212  EC40  F009         	call	_UART_Init	;wreg free
   417  001216                     l1200:
   418                           
   419                           ;main.c: 64: uartReceiveBlocking(1);
   420  001216  0E01               	movlw	1
   421  001218  EC0D  F008         	call	_uartReceiveBlocking
   422                           
   423                           ;main.c: 67: unsigned char keyData = UART -> _dataRX[0];
   424  00121C  EE20 F004          	lfsr	2,4
   425  001220  503A               	movf	_UART,w,c
   426  001222  26D9               	addwf	fsr2l,f,c
   427  001224  503B               	movf	_UART+1,w,c
   428  001226  22DA               	addwfc	fsr2h,f,c
   429  001228  CFDE F036          	movff	postinc2,??_main
   430  00122C  CFDD F037          	movff	postdec2,??_main+1
   431  001230  C036  FFD9         	movff	??_main,fsr2l
   432  001234  C037  FFDA         	movff	??_main+1,fsr2h
   433  001238  50DF               	movf	indf2,w,c
   434  00123A  6E39               	movwf	main@keyData,c
   435  00123C                     l1204:
   436                           
   437                           ;main.c: 72: uartReceiveBlocking(1);
   438  00123C  0E01               	movlw	1
   439  00123E  EC0D  F008         	call	_uartReceiveBlocking
   440                           
   441                           ;main.c: 76: if(UART -> _dataRX[0] == 0xF0){ break; }
   442  001242  EE20 F004          	lfsr	2,4
   443  001246  503A               	movf	_UART,w,c
   444  001248  26D9               	addwf	fsr2l,f,c
   445  00124A  503B               	movf	_UART+1,w,c
   446  00124C  22DA               	addwfc	fsr2h,f,c
   447  00124E  CFDE F036          	movff	postinc2,??_main
   448  001252  CFDD F037          	movff	postdec2,??_main+1
   449  001256  C036  FFD9         	movff	??_main,fsr2l
   450  00125A  C037  FFDA         	movff	??_main+1,fsr2h
   451  00125E  0EF0               	movlw	240
   452  001260  18DE               	xorwf	postinc2,w,c
   453  001262  A4D8               	btfss	status,2,c
   454  001264  D7EB               	goto	l1204
   455                           
   456                           ;main.c: 77: }
   457                           ;main.c: 79: putch(keys[keyData]);
   458  001266  5039               	movf	main@keyData,w,c
   459  001268  0D01               	mullw	1
   460  00126A  0E01               	movlw	low _keys
   461  00126C  24F3               	addwf	prodl,w,c
   462  00126E  6EF6               	movwf	tblptrl,c
   463  001270  0E10               	movlw	high _keys
   464  001272  20F4               	addwfc	prodh,w,c
   465  001274  6EF7               	movwf	tblptrh,c
   466  001276                     	if	0	;There are less than 3 active tblptr bytes
   467  001276                     	endif
   468  001276  0008               	tblrd		*
   469  001278  50F5               	movf	tablat,w,c
   470  00127A  ECFF  F009         	call	_putch
   471  00127E  D7CB               	goto	l1200
   472  001280                     __end_of_main:
   473                           	opt stack 0
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           prodh	equ	0xFF4
   479                           prodl	equ	0xFF3
   480                           intcon2	equ	0xFF1
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           indf2	equ	0xFDF
   484                           postinc2	equ	0xFDE
   485                           postdec2	equ	0xFDD
   486                           fsr2h	equ	0xFDA
   487                           fsr2l	equ	0xFD9
   488                           status	equ	0xFD8
   489                           
   490 ;; *************** function _uartReceiveBlocking *****************
   491 ;; Defined at:
   492 ;;		line 103 in file "UART_PIC.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;  numBytes        1    wreg     unsigned char 
   495 ;; Auto vars:     Size  Location     Type
   496 ;;  numBytes        1    3[COMRAM] unsigned char 
   497 ;;  numReceives     1    4[COMRAM] unsigned char 
   498 ;;  temp            1    2[COMRAM] unsigned char 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;Total ram usage:        5 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_main
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text1
   522  00101A                     __ptext1:
   523                           	opt stack 0
   524  00101A                     _uartReceiveBlocking:
   525                           	opt stack 30
   526                           
   527                           ;incstack = 0
   528                           ;uartReceiveBlocking@numBytes stored from wreg
   529  00101A  6E23               	movwf	uartReceiveBlocking@numBytes,c
   530  00101C                     l956:
   531  00101C  EE20 F009          	lfsr	2,9
   532  001020  503A               	movf	_UART,w,c
   533  001022  26D9               	addwf	fsr2l,f,c
   534  001024  503B               	movf	_UART+1,w,c
   535  001026  22DA               	addwfc	fsr2h,f,c
   536  001028  50DF               	movf	indf2,w,c
   537  00102A  B4D8               	btfsc	status,2,c
   538  00102C  D7F7               	goto	l956
   539                           
   540                           ;UART_PIC.c: 117: UART -> _stateRX = UART_STATE_BUSY;
   541  00102E  EE20 F009          	lfsr	2,9
   542  001032  503A               	movf	_UART,w,c
   543  001034  26D9               	addwf	fsr2l,f,c
   544  001036  503B               	movf	_UART+1,w,c
   545  001038  22DA               	addwfc	fsr2h,f,c
   546  00103A  0E00               	movlw	0
   547  00103C  6EDF               	movwf	indf2,c
   548                           
   549                           ;UART_PIC.c: 120: unsigned char numReceives = 0;
   550  00103E  0E00               	movlw	0
   551  001040  6E24               	movwf	uartReceiveBlocking@numReceives,c
   552                           
   553                           ;UART_PIC.c: 121: UART -> _lastReceiveFERR = 1;
   554  001042  EE20 F00A          	lfsr	2,10
   555  001046  503A               	movf	_UART,w,c
   556  001048  26D9               	addwf	fsr2l,f,c
   557  00104A  503B               	movf	_UART+1,w,c
   558  00104C  22DA               	addwfc	fsr2h,f,c
   559  00104E  0E01               	movlw	1
   560  001050  6EDF               	movwf	indf2,c
   561                           
   562                           ;UART_PIC.c: 122: UART -> _lastReceiveOERR = 1;
   563  001052  EE20 F00B          	lfsr	2,11
   564  001056  503A               	movf	_UART,w,c
   565  001058  26D9               	addwf	fsr2l,f,c
   566  00105A  503B               	movf	_UART+1,w,c
   567  00105C  22DA               	addwfc	fsr2h,f,c
   568  00105E  0E01               	movlw	1
   569  001060  6EDF               	movwf	indf2,c
   570                           
   571                           ;UART_PIC.c: 125: RCSTAbits.CREN = 1;
   572  001062  88AB               	bsf	4011,4,c	;volatile
   573                           
   574                           ;UART_PIC.c: 126: unsigned char temp = RCREG;
   575  001064  CFAE F022          	movff	4014,uartReceiveBlocking@temp	;volatile
   576                           
   577                           ;UART_PIC.c: 129: while(numReceives < numBytes){
   578  001068  D040               	goto	l990
   579  00106A                     l187:
   580  00106A  AA9E               	btfss	3998,5,c	;volatile
   581  00106C  D7FE               	goto	l187
   582                           
   583                           ;UART_PIC.c: 135: if(RCSTAbits.FERR){
   584  00106E  A4AB               	btfss	4011,2,c	;volatile
   585  001070  D008               	goto	l972
   586                           
   587                           ;UART_PIC.c: 139: UART -> _lastReceiveFERR = 1;
   588  001072  EE20 F00A          	lfsr	2,10
   589  001076  503A               	movf	_UART,w,c
   590  001078  26D9               	addwf	fsr2l,f,c
   591  00107A  503B               	movf	_UART+1,w,c
   592  00107C  22DA               	addwfc	fsr2h,f,c
   593  00107E  0E01               	movlw	1
   594  001080  D007               	goto	L1
   595  001082                     l972:
   596                           
   597                           ;UART_PIC.c: 141: else{
   598                           ;UART_PIC.c: 142: UART -> _lastReceiveFERR = 0;
   599  001082  EE20 F00A          	lfsr	2,10
   600  001086  503A               	movf	_UART,w,c
   601  001088  26D9               	addwf	fsr2l,f,c
   602  00108A  503B               	movf	_UART+1,w,c
   603  00108C  22DA               	addwfc	fsr2h,f,c
   604  00108E  0E00               	movlw	0
   605  001090                     L1:
   606  001090  6EDF               	movwf	indf2,c
   607                           
   608                           ;UART_PIC.c: 143: }
   609                           ;UART_PIC.c: 146: UARTinterruptState = INTCONbits.GIE;
   610  001092  0E00               	movlw	0
   611  001094  BEF2               	btfsc	intcon,7,c	;volatile
   612  001096  0E01               	movlw	1
   613  001098  6E02               	movwf	_UARTinterruptState,c	;volatile
   614                           
   615                           ;UART_PIC.c: 147: (INTCONbits.GIE = 0);
   616  00109A  9EF2               	bcf	intcon,7,c	;volatile
   617                           
   618                           ;UART_PIC.c: 148: UART -> _dataRX[numReceives] = RCREG;
   619  00109C  5024               	movf	uartReceiveBlocking@numReceives,w,c
   620  00109E  0D01               	mullw	1
   621  0010A0  EE20 F004          	lfsr	2,4
   622  0010A4  503A               	movf	_UART,w,c
   623  0010A6  26D9               	addwf	fsr2l,f,c
   624  0010A8  503B               	movf	_UART+1,w,c
   625  0010AA  22DA               	addwfc	fsr2h,f,c
   626  0010AC  CFDE F020          	movff	postinc2,??_uartReceiveBlocking
   627  0010B0  CFDD F021          	movff	postdec2,??_uartReceiveBlocking+1
   628  0010B4  50F3               	movf	prodl,w,c
   629  0010B6  2420               	addwf	??_uartReceiveBlocking,w,c
   630  0010B8  6ED9               	movwf	fsr2l,c
   631  0010BA  50F4               	movf	prodh,w,c
   632  0010BC  2021               	addwfc	??_uartReceiveBlocking+1,w,c
   633  0010BE  6EDA               	movwf	fsr2h,c
   634  0010C0  CFAE FFDF          	movff	4014,indf2	;volatile
   635                           
   636                           ;UART_PIC.c: 149: INTCONbits.GIE = UARTinterruptState;
   637  0010C4  B002               	btfsc	_UARTinterruptState,0,c	;volatile
   638  0010C6  D002               	bra	u135
   639  0010C8  9EF2               	bcf	intcon,7,c	;volatile
   640  0010CA  D001               	bra	u136
   641  0010CC                     u135:
   642  0010CC  8EF2               	bsf	intcon,7,c	;volatile
   643  0010CE                     u136:
   644                           
   645                           ;UART_PIC.c: 153: if(RCSTAbits.OERR){
   646  0010CE  A2AB               	btfss	4011,1,c	;volatile
   647  0010D0  D003               	goto	l986
   648                           
   649                           ;UART_PIC.c: 155: RCSTAbits.CREN = 0;
   650  0010D2  98AB               	bcf	4011,4,c	;volatile
   651                           
   652                           ;UART_PIC.c: 156: RCSTAbits.CREN = 1;
   653  0010D4  88AB               	bsf	4011,4,c	;volatile
   654                           
   655                           ;UART_PIC.c: 157: }
   656  0010D6  D008               	goto	l988
   657  0010D8                     l986:
   658                           
   659                           ;UART_PIC.c: 158: else{
   660                           ;UART_PIC.c: 159: UART -> _lastReceiveOERR = 0;
   661  0010D8  EE20 F00B          	lfsr	2,11
   662  0010DC  503A               	movf	_UART,w,c
   663  0010DE  26D9               	addwf	fsr2l,f,c
   664  0010E0  503B               	movf	_UART+1,w,c
   665  0010E2  22DA               	addwfc	fsr2h,f,c
   666  0010E4  0E00               	movlw	0
   667  0010E6  6EDF               	movwf	indf2,c
   668  0010E8                     l988:
   669                           
   670                           ;UART_PIC.c: 160: }
   671                           ;UART_PIC.c: 162: numReceives++;
   672  0010E8  2A24               	incf	uartReceiveBlocking@numReceives,f,c
   673  0010EA                     l990:
   674  0010EA  5023               	movf	uartReceiveBlocking@numBytes,w,c
   675  0010EC  5C24               	subwf	uartReceiveBlocking@numReceives,w,c
   676  0010EE  A0D8               	btfss	status,0,c
   677  0010F0  D7BC               	goto	l187
   678                           
   679                           ;UART_PIC.c: 163: }
   680                           ;UART_PIC.c: 166: UART -> _stateRX = UART_STATE_READY;
   681  0010F2  EE20 F009          	lfsr	2,9
   682  0010F6  503A               	movf	_UART,w,c
   683  0010F8  26D9               	addwf	fsr2l,f,c
   684  0010FA  503B               	movf	_UART+1,w,c
   685  0010FC  22DA               	addwfc	fsr2h,f,c
   686  0010FE  0E01               	movlw	1
   687  001100  6EDF               	movwf	indf2,c
   688  001102  0012               	return		;funcret
   689  001104                     __end_of_uartReceiveBlocking:
   690                           	opt stack 0
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           prodh	equ	0xFF4
   696                           prodl	equ	0xFF3
   697                           intcon	equ	0xFF2
   698                           intcon2	equ	0xFF1
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           indf2	equ	0xFDF
   702                           postinc2	equ	0xFDE
   703                           postdec2	equ	0xFDD
   704                           fsr2h	equ	0xFDA
   705                           fsr2l	equ	0xFD9
   706                           status	equ	0xFD8
   707                           
   708 ;; *************** function _putch *****************
   709 ;; Defined at:
   710 ;;		line 24 in file "lcd.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  data            1    wreg     unsigned char 
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  data            1    2[COMRAM] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, status,2, status,0, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;Total ram usage:        1 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    1
   731 ;; This function calls:
   732 ;;		_lcdNibble
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text2
   739  0013FE                     __ptext2:
   740                           	opt stack 0
   741  0013FE                     _putch:
   742                           	opt stack 29
   743                           
   744                           ;incstack = 0
   745                           ;putch@data stored from wreg
   746  0013FE  6E22               	movwf	putch@data,c
   747                           
   748                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   749  001400  848C               	bsf	3980,2,c	;volatile
   750                           
   751                           ;lcd.c: 33: lcdNibble(data);
   752  001402  5022               	movf	putch@data,w,c
   753  001404  EC81  F009         	call	_lcdNibble
   754                           
   755                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   756  001408  0EC8               	movlw	200
   757  00140A                     u387:
   758  00140A  D000               	nop2	
   759  00140C  2EE8               	decfsz	wreg,f,c
   760  00140E  D7FD               	bra	u387
   761  001410  0012               	return		;funcret
   762  001412                     __end_of_putch:
   763                           	opt stack 0
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           prodh	equ	0xFF4
   769                           prodl	equ	0xFF3
   770                           intcon	equ	0xFF2
   771                           intcon2	equ	0xFF1
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           indf2	equ	0xFDF
   775                           postinc2	equ	0xFDE
   776                           postdec2	equ	0xFDD
   777                           fsr2h	equ	0xFDA
   778                           fsr2l	equ	0xFD9
   779                           status	equ	0xFD8
   780                           
   781 ;; *************** function _initLCD *****************
   782 ;; Defined at:
   783 ;;		line 60 in file "lcd.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   801 ;;Total ram usage:        1 bytes
   802 ;; Hardware stack levels used:    1
   803 ;; Hardware stack levels required when called:    2
   804 ;; This function calls:
   805 ;;		_lcdInst
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text3
   812  001380                     __ptext3:
   813                           	opt stack 0
   814  001380                     _initLCD:
   815                           	opt stack 28
   816                           
   817                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   818                           
   819                           ;incstack = 0
   820  001380  0EC3               	movlw	195
   821  001382  6E23               	movwf	??_initLCD& (0+255),c
   822  001384  0ECD               	movlw	205
   823  001386                     u397:
   824  001386  2EE8               	decfsz	wreg,f,c
   825  001388  D7FE               	bra	u397
   826  00138A  2E23               	decfsz	??_initLCD& (0+255),f,c
   827  00138C  D7FC               	bra	u397
   828  00138E  F000               	nop	
   829                           
   830                           ;lcd.c: 69: lcdInst(0b00110011);
   831  001390  0E33               	movlw	51
   832  001392  EC09  F00A         	call	_lcdInst
   833                           
   834                           ;lcd.c: 70: lcdInst(0b00110010);
   835  001396  0E32               	movlw	50
   836  001398  EC09  F00A         	call	_lcdInst
   837                           
   838                           ;lcd.c: 71: lcdInst(0b00101000);
   839  00139C  0E28               	movlw	40
   840  00139E  EC09  F00A         	call	_lcdInst
   841                           
   842                           ;lcd.c: 72: lcdInst(0b00001111);
   843  0013A2  0E0F               	movlw	15
   844  0013A4  EC09  F00A         	call	_lcdInst
   845                           
   846                           ;lcd.c: 73: lcdInst(0b00000110);
   847  0013A8  0E06               	movlw	6
   848  0013AA  EC09  F00A         	call	_lcdInst
   849                           
   850                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   851  0013AE  0E01               	movlw	1
   852  0013B0  EC09  F00A         	call	_lcdInst
   853  0013B4  0EC3               	movlw	195
   854  0013B6  6E23               	movwf	??_initLCD& (0+255),c
   855  0013B8  0ECD               	movlw	205
   856  0013BA                     u407:
   857  0013BA  2EE8               	decfsz	wreg,f,c
   858  0013BC  D7FE               	bra	u407
   859  0013BE  2E23               	decfsz	??_initLCD& (0+255),f,c
   860  0013C0  D7FC               	bra	u407
   861  0013C2  F000               	nop	
   862                           
   863                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   864  0013C4  0E0F               	movlw	15
   865  0013C6  EC09  F00A         	call	_lcdInst
   866  0013CA  0012               	return		;funcret
   867  0013CC                     __end_of_initLCD:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           prodh	equ	0xFF4
   874                           prodl	equ	0xFF3
   875                           intcon	equ	0xFF2
   876                           intcon2	equ	0xFF1
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           indf2	equ	0xFDF
   880                           postinc2	equ	0xFDE
   881                           postdec2	equ	0xFDD
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           status	equ	0xFD8
   885                           
   886 ;; *************** function _lcdInst *****************
   887 ;; Defined at:
   888 ;;		line 11 in file "lcd.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  data            1    wreg     unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  data            1    2[COMRAM] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;Total ram usage:        1 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    1
   909 ;; This function calls:
   910 ;;		_lcdNibble
   911 ;; This function is called by:
   912 ;;		_initLCD
   913 ;;		_lcd_set_cursor
   914 ;;		_lcd_shift_cursor
   915 ;;		_lcd_shift_display
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text4
   920  001412                     __ptext4:
   921                           	opt stack 0
   922  001412                     _lcdInst:
   923                           	opt stack 28
   924                           
   925                           ;incstack = 0
   926                           ;lcdInst@data stored from wreg
   927  001412  6E22               	movwf	lcdInst@data,c
   928                           
   929                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   930  001414  948C               	bcf	3980,2,c	;volatile
   931                           
   932                           ;lcd.c: 20: lcdNibble(data);
   933  001416  5022               	movf	lcdInst@data,w,c
   934  001418  EC81  F009         	call	_lcdNibble
   935                           
   936                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   937  00141C  0EC8               	movlw	200
   938  00141E                     u417:
   939  00141E  D000               	nop2	
   940  001420  2EE8               	decfsz	wreg,f,c
   941  001422  D7FD               	bra	u417
   942  001424  0012               	return		;funcret
   943  001426                     __end_of_lcdInst:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           prodh	equ	0xFF4
   950                           prodl	equ	0xFF3
   951                           intcon	equ	0xFF2
   952                           intcon2	equ	0xFF1
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           indf2	equ	0xFDF
   956                           postinc2	equ	0xFDE
   957                           postdec2	equ	0xFDD
   958                           fsr2h	equ	0xFDA
   959                           fsr2l	equ	0xFD9
   960                           status	equ	0xFD8
   961                           
   962 ;; *************** function _lcdNibble *****************
   963 ;; Defined at:
   964 ;;		line 37 in file "lcd.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  data            1    wreg     unsigned char 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  data            1    1[COMRAM] unsigned char 
   969 ;;  temp            1    0[COMRAM] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;Total ram usage:        2 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_lcdInst
   989 ;;		_putch
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text5
   994  001302                     __ptext5:
   995                           	opt stack 0
   996  001302                     _lcdNibble:
   997                           	opt stack 29
   998                           
   999                           ;incstack = 0
  1000                           ;lcdNibble@data stored from wreg
  1001  001302  6E21               	movwf	lcdNibble@data,c
  1002                           
  1003                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1004  001304  5021               	movf	lcdNibble@data,w,c
  1005  001306  0BF0               	andlw	240
  1006  001308  6E20               	movwf	lcdNibble@temp,c
  1007                           
  1008                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1009  00130A  508C               	movf	3980,w,c	;volatile
  1010  00130C  0B0F               	andlw	15
  1011  00130E  6E8C               	movwf	3980,c	;volatile
  1012                           
  1013                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1014  001310  5020               	movf	lcdNibble@temp,w,c
  1015  001312  108C               	iorwf	3980,w,c	;volatile
  1016  001314  6E8C               	movwf	3980,c	;volatile
  1017                           
  1018                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1019  001316  0E00               	movlw	0
  1020  001318  BEF2               	btfsc	intcon,7,c	;volatile
  1021  00131A  0E01               	movlw	1
  1022  00131C  6E01               	movwf	lcd@LCDinterruptState,c
  1023  00131E  9EF2               	bcf	intcon,7,c	;volatile
  1024  001320  868C               	bsf	3980,3,c	;volatile
  1025  001322  0E53               	movlw	83
  1026  001324                     u427:
  1027  001324  2EE8               	decfsz	wreg,f,c
  1028  001326  D7FE               	bra	u427
  1029  001328  F000               	nop	
  1030  00132A  968C               	bcf	3980,3,c	;volatile
  1031  00132C  0EC8               	movlw	200
  1032  00132E                     u437:
  1033  00132E  D000               	nop2	
  1034  001330  2EE8               	decfsz	wreg,f,c
  1035  001332  D7FD               	bra	u437
  1036  001334  B001               	btfsc	lcd@LCDinterruptState,0,c
  1037  001336  D002               	bra	u15
  1038  001338  9EF2               	bcf	intcon,7,c	;volatile
  1039  00133A  D001               	bra	u16
  1040  00133C                     u15:
  1041  00133C  8EF2               	bsf	intcon,7,c	;volatile
  1042  00133E                     u16:
  1043                           
  1044                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1045  00133E  3821               	swapf	lcdNibble@data,w,c
  1046  001340  0BF0               	andlw	240
  1047  001342  6E21               	movwf	lcdNibble@data,c
  1048                           
  1049                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1050  001344  5021               	movf	lcdNibble@data,w,c
  1051  001346  0BF0               	andlw	240
  1052  001348  6E20               	movwf	lcdNibble@temp,c
  1053                           
  1054                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1055  00134A  508C               	movf	3980,w,c	;volatile
  1056  00134C  0B0F               	andlw	15
  1057  00134E  6E8C               	movwf	3980,c	;volatile
  1058                           
  1059                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1060  001350  5020               	movf	lcdNibble@temp,w,c
  1061  001352  108C               	iorwf	3980,w,c	;volatile
  1062  001354  6E8C               	movwf	3980,c	;volatile
  1063                           
  1064                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1065  001356  0E00               	movlw	0
  1066  001358  BEF2               	btfsc	intcon,7,c	;volatile
  1067  00135A  0E01               	movlw	1
  1068  00135C  6E01               	movwf	lcd@LCDinterruptState,c
  1069  00135E  9EF2               	bcf	intcon,7,c	;volatile
  1070  001360  868C               	bsf	3980,3,c	;volatile
  1071  001362  0E53               	movlw	83
  1072  001364                     u447:
  1073  001364  2EE8               	decfsz	wreg,f,c
  1074  001366  D7FE               	bra	u447
  1075  001368  F000               	nop	
  1076  00136A  968C               	bcf	3980,3,c	;volatile
  1077  00136C  0EC8               	movlw	200
  1078  00136E                     u457:
  1079  00136E  D000               	nop2	
  1080  001370  2EE8               	decfsz	wreg,f,c
  1081  001372  D7FD               	bra	u457
  1082  001374  B001               	btfsc	lcd@LCDinterruptState,0,c
  1083  001376  D002               	bra	u25
  1084  001378  9EF2               	bcf	intcon,7,c	;volatile
  1085  00137A  D001               	bra	u26
  1086  00137C                     u25:
  1087  00137C  8EF2               	bsf	intcon,7,c	;volatile
  1088  00137E                     u26:
  1089  00137E  0012               	return		;funcret
  1090  001380                     __end_of_lcdNibble:
  1091                           	opt stack 0
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           intcon	equ	0xFF2
  1099                           intcon2	equ	0xFF1
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           indf2	equ	0xFDF
  1103                           postinc2	equ	0xFDE
  1104                           postdec2	equ	0xFDD
  1105                           fsr2h	equ	0xFDA
  1106                           fsr2l	equ	0xFD9
  1107                           status	equ	0xFD8
  1108                           
  1109 ;; *************** function _UART_Init *****************
  1110 ;; Defined at:
  1111 ;;		line 200 in file "UART_PIC.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  baud            4   14[COMRAM] long 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;Total ram usage:        8 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    1
  1132 ;; This function calls:
  1133 ;;		___aldiv
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text6
  1140  001280                     __ptext6:
  1141                           	opt stack 0
  1142  001280                     _UART_Init:
  1143                           	opt stack 29
  1144                           
  1145                           ;UART_PIC.c: 213: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
  1146                           
  1147                           ;incstack = 0
  1148  001280  0E00               	movlw	0
  1149  001282  6E20               	movwf	___aldiv@dividend,c
  1150  001284  0E5A               	movlw	90
  1151  001286  6E21               	movwf	___aldiv@dividend+1,c
  1152  001288  0E62               	movlw	98
  1153  00128A  6E22               	movwf	___aldiv@dividend+2,c
  1154  00128C  0E02               	movlw	2
  1155  00128E  6E23               	movwf	___aldiv@dividend+3,c
  1156  001290  C02E  F032         	movff	UART_Init@baud,??_UART_Init
  1157  001294  C02F  F033         	movff	UART_Init@baud+1,??_UART_Init+1
  1158  001298  C030  F034         	movff	UART_Init@baud+2,??_UART_Init+2
  1159  00129C  C031  F035         	movff	UART_Init@baud+3,??_UART_Init+3
  1160  0012A0  0E06               	movlw	6
  1161  0012A2                     u365:
  1162  0012A2  90D8               	bcf	status,0,c
  1163  0012A4  3632               	rlcf	??_UART_Init,f,c
  1164  0012A6  3633               	rlcf	??_UART_Init+1,f,c
  1165  0012A8  3634               	rlcf	??_UART_Init+2,f,c
  1166  0012AA  3635               	rlcf	??_UART_Init+3,f,c
  1167  0012AC  2EE8               	decfsz	wreg,f,c
  1168  0012AE  D7F9               	goto	u365
  1169  0012B0  C032  F024         	movff	??_UART_Init,___aldiv@divisor
  1170  0012B4  C033  F025         	movff	??_UART_Init+1,___aldiv@divisor+1
  1171  0012B8  C034  F026         	movff	??_UART_Init+2,___aldiv@divisor+2
  1172  0012BC  C035  F027         	movff	??_UART_Init+3,___aldiv@divisor+3
  1173  0012C0  EC82  F008         	call	___aldiv	;wreg free
  1174  0012C4  0420               	decf	?___aldiv,w,c
  1175  0012C6  6EAF               	movwf	4015,c	;volatile
  1176                           
  1177                           ;UART_PIC.c: 216: TXSTAbits.TX9 = 0;
  1178  0012C8  9CAC               	bcf	4012,6,c	;volatile
  1179                           
  1180                           ;UART_PIC.c: 217: TXSTAbits.SYNC = 0;
  1181  0012CA  98AC               	bcf	4012,4,c	;volatile
  1182                           
  1183                           ;UART_PIC.c: 218: TXSTAbits.TXEN = 1;
  1184  0012CC  8AAC               	bsf	4012,5,c	;volatile
  1185                           
  1186                           ;UART_PIC.c: 221: RCSTAbits.RX9 = 0;
  1187  0012CE  9CAB               	bcf	4011,6,c	;volatile
  1188                           
  1189                           ;UART_PIC.c: 222: RCSTAbits.CREN = 1;
  1190  0012D0  88AB               	bsf	4011,4,c	;volatile
  1191                           
  1192                           ;UART_PIC.c: 225: UART -> _stateTX = UART_STATE_READY;
  1193  0012D2  EE20 F008          	lfsr	2,8
  1194  0012D6  503A               	movf	_UART,w,c
  1195  0012D8  26D9               	addwf	fsr2l,f,c
  1196  0012DA  503B               	movf	_UART+1,w,c
  1197  0012DC  22DA               	addwfc	fsr2h,f,c
  1198  0012DE  0E01               	movlw	1
  1199  0012E0  6EDF               	movwf	indf2,c
  1200                           
  1201                           ;UART_PIC.c: 226: UART -> _stateRX = UART_STATE_READY;
  1202  0012E2  EE20 F009          	lfsr	2,9
  1203  0012E6  503A               	movf	_UART,w,c
  1204  0012E8  26D9               	addwf	fsr2l,f,c
  1205  0012EA  503B               	movf	_UART+1,w,c
  1206  0012EC  22DA               	addwfc	fsr2h,f,c
  1207  0012EE  0E01               	movlw	1
  1208  0012F0  6EDF               	movwf	indf2,c
  1209                           
  1210                           ;UART_PIC.c: 229: uart._dataRX = arr_dataRX;
  1211  0012F2  0E04               	movlw	low _arr_dataRX
  1212  0012F4  6E18               	movwf	_uart+4,c	;volatile
  1213  0012F6  0E00               	movlw	high _arr_dataRX
  1214  0012F8  6E19               	movwf	_uart+5,c	;volatile
  1215                           
  1216                           ;UART_PIC.c: 232: TRISC6 = 0;
  1217  0012FA  9C94               	bcf	3988,6,c	;volatile
  1218                           
  1219                           ;UART_PIC.c: 233: TRISC7 = 1;
  1220  0012FC  8E94               	bsf	3988,7,c	;volatile
  1221                           
  1222                           ;UART_PIC.c: 236: RCSTAbits.SPEN = 1;
  1223  0012FE  8EAB               	bsf	4011,7,c	;volatile
  1224  001300  0012               	return		;funcret
  1225  001302                     __end_of_UART_Init:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           prodh	equ	0xFF4
  1232                           prodl	equ	0xFF3
  1233                           intcon	equ	0xFF2
  1234                           intcon2	equ	0xFF1
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           indf2	equ	0xFDF
  1238                           postinc2	equ	0xFDE
  1239                           postdec2	equ	0xFDD
  1240                           fsr2h	equ	0xFDA
  1241                           fsr2l	equ	0xFD9
  1242                           status	equ	0xFD8
  1243                           
  1244 ;; *************** function ___aldiv *****************
  1245 ;; Defined at:
  1246 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  dividend        4    0[COMRAM] long 
  1249 ;;  divisor         4    4[COMRAM] long 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  quotient        4   10[COMRAM] long 
  1252 ;;  sign            1    9[COMRAM] unsigned char 
  1253 ;;  counter         1    8[COMRAM] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  4    0[COMRAM] long 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1263 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;Total ram usage:       14 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_UART_Init
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text7
  1277  001104                     __ptext7:
  1278                           	opt stack 0
  1279  001104                     ___aldiv:
  1280                           	opt stack 29
  1281                           
  1282                           ;incstack = 0
  1283  001104  0E00               	movlw	0
  1284  001106  6E29               	movwf	___aldiv@sign,c
  1285  001108  AE27               	btfss	___aldiv@divisor+3,7,c
  1286  00110A  D00A               	goto	l1128
  1287  00110C  1E27               	comf	___aldiv@divisor+3,f,c
  1288  00110E  1E26               	comf	___aldiv@divisor+2,f,c
  1289  001110  1E25               	comf	___aldiv@divisor+1,f,c
  1290  001112  6C24               	negf	___aldiv@divisor,c
  1291  001114  0E00               	movlw	0
  1292  001116  2225               	addwfc	___aldiv@divisor+1,f,c
  1293  001118  2226               	addwfc	___aldiv@divisor+2,f,c
  1294  00111A  2227               	addwfc	___aldiv@divisor+3,f,c
  1295  00111C  0E01               	movlw	1
  1296  00111E  6E29               	movwf	___aldiv@sign,c
  1297  001120                     l1128:
  1298  001120  AE23               	btfss	___aldiv@dividend+3,7,c
  1299  001122  D00A               	goto	l1134
  1300  001124  1E23               	comf	___aldiv@dividend+3,f,c
  1301  001126  1E22               	comf	___aldiv@dividend+2,f,c
  1302  001128  1E21               	comf	___aldiv@dividend+1,f,c
  1303  00112A  6C20               	negf	___aldiv@dividend,c
  1304  00112C  0E00               	movlw	0
  1305  00112E  2221               	addwfc	___aldiv@dividend+1,f,c
  1306  001130  2222               	addwfc	___aldiv@dividend+2,f,c
  1307  001132  2223               	addwfc	___aldiv@dividend+3,f,c
  1308  001134  0E01               	movlw	1
  1309  001136  1A29               	xorwf	___aldiv@sign,f,c
  1310  001138                     l1134:
  1311  001138  0E00               	movlw	0
  1312  00113A  6E2A               	movwf	___aldiv@quotient,c
  1313  00113C  0E00               	movlw	0
  1314  00113E  6E2B               	movwf	___aldiv@quotient+1,c
  1315  001140  0E00               	movlw	0
  1316  001142  6E2C               	movwf	___aldiv@quotient+2,c
  1317  001144  0E00               	movlw	0
  1318  001146  6E2D               	movwf	___aldiv@quotient+3,c
  1319  001148  5024               	movf	___aldiv@divisor,w,c
  1320  00114A  1025               	iorwf	___aldiv@divisor+1,w,c
  1321  00114C  1026               	iorwf	___aldiv@divisor+2,w,c
  1322  00114E  1027               	iorwf	___aldiv@divisor+3,w,c
  1323  001150  B4D8               	btfsc	status,2,c
  1324  001152  D02A               	goto	l1156
  1325  001154  0E01               	movlw	1
  1326  001156  6E28               	movwf	___aldiv@counter,c
  1327  001158  D006               	goto	l1142
  1328  00115A                     l1140:
  1329  00115A  90D8               	bcf	status,0,c
  1330  00115C  3624               	rlcf	___aldiv@divisor,f,c
  1331  00115E  3625               	rlcf	___aldiv@divisor+1,f,c
  1332  001160  3626               	rlcf	___aldiv@divisor+2,f,c
  1333  001162  3627               	rlcf	___aldiv@divisor+3,f,c
  1334  001164  2A28               	incf	___aldiv@counter,f,c
  1335  001166                     l1142:
  1336  001166  AE27               	btfss	___aldiv@divisor+3,7,c
  1337  001168  D7F8               	goto	l1140
  1338  00116A                     l1144:
  1339  00116A  90D8               	bcf	status,0,c
  1340  00116C  362A               	rlcf	___aldiv@quotient,f,c
  1341  00116E  362B               	rlcf	___aldiv@quotient+1,f,c
  1342  001170  362C               	rlcf	___aldiv@quotient+2,f,c
  1343  001172  362D               	rlcf	___aldiv@quotient+3,f,c
  1344  001174  5024               	movf	___aldiv@divisor,w,c
  1345  001176  5C20               	subwf	___aldiv@dividend,w,c
  1346  001178  5025               	movf	___aldiv@divisor+1,w,c
  1347  00117A  5821               	subwfb	___aldiv@dividend+1,w,c
  1348  00117C  5026               	movf	___aldiv@divisor+2,w,c
  1349  00117E  5822               	subwfb	___aldiv@dividend+2,w,c
  1350  001180  5027               	movf	___aldiv@divisor+3,w,c
  1351  001182  5823               	subwfb	___aldiv@dividend+3,w,c
  1352  001184  A0D8               	btfss	status,0,c
  1353  001186  D009               	goto	l1152
  1354  001188  5024               	movf	___aldiv@divisor,w,c
  1355  00118A  5E20               	subwf	___aldiv@dividend,f,c
  1356  00118C  5025               	movf	___aldiv@divisor+1,w,c
  1357  00118E  5A21               	subwfb	___aldiv@dividend+1,f,c
  1358  001190  5026               	movf	___aldiv@divisor+2,w,c
  1359  001192  5A22               	subwfb	___aldiv@dividend+2,f,c
  1360  001194  5027               	movf	___aldiv@divisor+3,w,c
  1361  001196  5A23               	subwfb	___aldiv@dividend+3,f,c
  1362  001198  802A               	bsf	___aldiv@quotient,0,c
  1363  00119A                     l1152:
  1364  00119A  90D8               	bcf	status,0,c
  1365  00119C  3227               	rrcf	___aldiv@divisor+3,f,c
  1366  00119E  3226               	rrcf	___aldiv@divisor+2,f,c
  1367  0011A0  3225               	rrcf	___aldiv@divisor+1,f,c
  1368  0011A2  3224               	rrcf	___aldiv@divisor,f,c
  1369  0011A4  2E28               	decfsz	___aldiv@counter,f,c
  1370  0011A6  D7E1               	goto	l1144
  1371  0011A8                     l1156:
  1372  0011A8  5029               	movf	___aldiv@sign,w,c
  1373  0011AA  B4D8               	btfsc	status,2,c
  1374  0011AC  D008               	goto	l1160
  1375  0011AE  1E2D               	comf	___aldiv@quotient+3,f,c
  1376  0011B0  1E2C               	comf	___aldiv@quotient+2,f,c
  1377  0011B2  1E2B               	comf	___aldiv@quotient+1,f,c
  1378  0011B4  6C2A               	negf	___aldiv@quotient,c
  1379  0011B6  0E00               	movlw	0
  1380  0011B8  222B               	addwfc	___aldiv@quotient+1,f,c
  1381  0011BA  222C               	addwfc	___aldiv@quotient+2,f,c
  1382  0011BC  222D               	addwfc	___aldiv@quotient+3,f,c
  1383  0011BE                     l1160:
  1384  0011BE  C02A  F020         	movff	___aldiv@quotient,?___aldiv
  1385  0011C2  C02B  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1386  0011C6  C02C  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1387  0011CA  C02D  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1388  0011CE  0012               	return	
  1389  0011D0                     __end_of___aldiv:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           intcon	equ	0xFF2
  1398                           intcon2	equ	0xFF1
  1399                           postinc0	equ	0xFEE
  1400                           wreg	equ	0xFE8
  1401                           indf2	equ	0xFDF
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           prodh	equ	0xFF4
  1412                           prodl	equ	0xFF3
  1413                           intcon	equ	0xFF2
  1414                           intcon2	equ	0xFF1
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           indf2	equ	0xFDF
  1418                           postinc2	equ	0xFDE
  1419                           postdec2	equ	0xFDD
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424                           	psect	rparam
  1425  0000                     tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           prodh	equ	0xFF4
  1430                           prodl	equ	0xFF3
  1431                           intcon	equ	0xFF2
  1432                           intcon2	equ	0xFF1
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           indf2	equ	0xFDF
  1436                           postinc2	equ	0xFDE
  1437                           postdec2	equ	0xFDD
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      59
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     798
                                             22 COMRAM     4     4      0
                          _UART_Init
                            _initLCD
                              _putch
                _uartReceiveBlocking
 ---------------------------------------------------------------------------------
 (1) _uartReceiveBlocking                                  5     5      0      45
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _putch
     _lcdNibble
   _uartReceiveBlocking

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      3B       1       46.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B      34        0.0%
DATA                 0      0      3B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Sep 15 00:35:38 2017

                            u15 133C                              u16 133E                              u25 137C  
                            u26 137E                     __CFG_CPD$ON 000000                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                             l187 106A                             l972 1082  
                           l956 101C                             l990 10EA                             l986 10D8  
                           l988 10E8                    __CFG_CPB$OFF 000000                             u135 10CC  
                           u136 10CE                             u407 13BA                             u417 141E  
                           u427 1324                             u365 12A2                             u437 132E  
                           u447 1364                             u457 136E                             u387 140A  
                           u397 1386                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l1200 1216                            l1140 115A  
                          l1204 123C                            l1142 1166                            l1134 1138  
                          l1160 11BE                            l1152 119A                            l1144 116A  
                          l1128 1120                            l1156 11A8                     main@keyData 0039  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            _RCIE 007CED  
                          _RCIF 007CF5                            _UART 003A                            _TRMT 007D61  
                          _TXIE 007CEC                            _TXIF 007CF4                            _main 11D0  
                          _keys 1001                            _uart 0014                            fsr2h 000FDA  
                          indf2 000FDF                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000                __end_of_LCD_LEFT 1013  
               __end_of___aldiv 11D0                           ?_main 0020                           _RCREG 000FAE  
                         _SPBRG 000FAF                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                         _TXREG 000FAD                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdInst 1426                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                         _nRBPU 007F8F              __size_of_UART_Init 0082                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 13CC  
                __CFG_EBTRB$OFF 000000                           _putch 13FE                           tablat 000FF5  
             _LCDinterruptState 0003                           status 000FD8                  __CFG_PBADEN$ON 000000  
               __initialization 13CC                    __end_of_main 1280                    __end_of_keys 1012  
                __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT 1014                          ??_main 0036  
                 __activetblptr 000001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        ?_putch 0020                          _TRISC6 007CA6                          _TRISC7 007CA7  
                __CFG_XINST$OFF 000000               __end_of_UART_Init 1302                       ??___aldiv 0028  
                __CFG_STVREN$ON 000000                          clear_0 13EA                       ??_lcdInst 0022  
                     ??_initLCD 0023                    __pdataCOMRAM 003A    __size_of_uartReceiveBlocking 00EA  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                      __accesstop 0080         __end_of__initialization 13F0  
                 ___rparam_used 000001  uartReceiveBlocking@numReceives 0024                  __pcstackCOMRAM 0020  
                 __end_of_putch 1412              __size_of_lcdNibble 007E                         ??_putch 0022  
                    _arr_dataRX 0004            lcd@LCDinterruptState 0001         uartReceiveBlocking@temp 0022  
             __end_of_lcdNibble 1380                         __Hparam 0000                         __Lparam 0000  
                       ___aldiv 1104                    __psmallconst 1000                         __pcinit 13CC  
                       __ramtop 1000                         _lcdInst 1412                         __ptext0 11D0  
                       __ptext1 101A                         __ptext2 13FE                         __ptext3 1380  
                       __ptext4 1412                         __ptext5 1302                         __ptext6 1280  
                       __ptext7 1104                         _initLCD 1380                ___aldiv@dividend 0020  
                     _LCD_RIGHT 1013            end_of_initialization 13F0           __end_of_LCD_SIZE_HORZ 1016  
         __end_of_LCD_SIZE_VERT 1015             _uartReceiveBlocking 101A                       _RCSTAbits 000FAB  
              ___aldiv@quotient 002A                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _UART_Init 1280            ?_uartReceiveBlocking 0020  
                     _TXSTAbits 000FAC                      ?_UART_Init 002E                   __pidataCOMRAM 1426  
         ??_uartReceiveBlocking 0020             start_initialization 13CC                __CFG_LPT1OSC$OFF 000000  
                   __pbssCOMRAM 0001               __CFG_CCP2MX$PORTC 000000              _UARTinterruptState 0002  
                 UART_Init@baud 002E                       _lcdNibble 1302                        ?___aldiv 0020  
                   ??_UART_Init 0032                        ?_lcdInst 0020                        ?_initLCD 0020  
                   __smallconst 1000                  __size_of_putch 0014     uartReceiveBlocking@numBytes 0023  
                      _LCD_LEFT 1012                 ___aldiv@divisor 0024                 ___aldiv@counter 0028  
                      _LATDbits 000F8C                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0020  
                 lcdNibble@data 0021                   lcdNibble@temp 0020                  _LCD_HORZ_LIMIT 1017  
                      __Hrparam 0000                        __Lrparam 0000                    __Lsmallconst 1000  
            __CFG_BOREN$SBORDIS 000000                __size_of___aldiv 00CC                __size_of_lcdInst 0014  
              __size_of_initLCD 004C          __end_of_LCD_HORZ_LIMIT 1018                  _LCD_VERT_LIMIT 1016  
                 __size_of_main 00B0                     ??_lcdNibble 0020     __end_of_uartReceiveBlocking 1104  
                     putch@data 0022                      _INTCONbits 000FF2          __end_of_LCD_VERT_LIMIT 1017  
                 _LCD_SIZE_HORZ 1015                   _LCD_SIZE_VERT 1014                     lcdInst@data 0022  
                  ___aldiv@sign 0029  
