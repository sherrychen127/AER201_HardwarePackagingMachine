

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jan 07 23:09:14 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.42
    26                           ; Generated 13/04/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4620 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001                     _VIOLET:
    65                           	opt stack 0
    66  001001  00D3               	dw	211
    67  001003  0094               	dw	148
    68  001005                     __end_of_VIOLET:
    69                           	opt stack 0
    70  001005                     _INDIGO:
    71                           	opt stack 0
    72  001005  0082               	dw	130
    73  001007  004B               	dw	75
    74  001009                     __end_of_INDIGO:
    75                           	opt stack 0
    76  001009                     _BLUE:
    77                           	opt stack 0
    78  001009  00FF               	dw	255
    79  00100B  0000               	dw	0
    80  00100D                     __end_of_BLUE:
    81                           	opt stack 0
    82  00100D                     _GREEN:
    83                           	opt stack 0
    84  00100D  FF00               	dw	65280
    85  00100F  0000               	dw	0
    86  001011                     __end_of_GREEN:
    87                           	opt stack 0
    88  001011                     _YELLOW:
    89                           	opt stack 0
    90  001011  FF00               	dw	65280
    91  001013  00FF               	dw	255
    92  001015                     __end_of_YELLOW:
    93                           	opt stack 0
    94  001015                     _ORANGE:
    95                           	opt stack 0
    96  001015  8C00               	dw	35840
    97  001017  00FF               	dw	255
    98  001019                     __end_of_ORANGE:
    99                           	opt stack 0
   100  001019                     _RED:
   101                           	opt stack 0
   102  001019  0000               	dw	0
   103  00101B  00FF               	dw	255
   104  00101D                     __end_of_RED:
   105                           	opt stack 0
   106  00101D                     _WHITE:
   107                           	opt stack 0
   108  00101D  FFFF               	dw	65535
   109  00101F  00FF               	dw	255
   110  001021                     __end_of_WHITE:
   111                           	opt stack 0
   112  001021                     _GREY:
   113                           	opt stack 0
   114  001021  8080               	dw	32896
   115  001023  0080               	dw	128
   116  001025                     __end_of_GREY:
   117                           	opt stack 0
   118  001025                     _BLACK:
   119                           	opt stack 0
   120  001025  0000               	dw	0
   121  001027  0000               	dw	0
   122  001029                     __end_of_BLACK:
   123                           	opt stack 0
   124  001029  C7                 	db	199
   125  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   126                           	opt stack 0
   127  00102A                     GLCD_PIC@INST_VMCTR1:
   128                           	opt stack 0
   129  00102A  C5                 	db	197
   130  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   131                           	opt stack 0
   132  00102B                     GLCD_PIC@INST_PWCTR5:
   133                           	opt stack 0
   134  00102B  C4                 	db	196
   135  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   136                           	opt stack 0
   137  00102C                     GLCD_PIC@INST_PWCTR4:
   138                           	opt stack 0
   139  00102C  C3                 	db	195
   140  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   141                           	opt stack 0
   142  00102D                     GLCD_PIC@INST_PWCTR3:
   143                           	opt stack 0
   144  00102D  C2                 	db	194
   145  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   146                           	opt stack 0
   147  00102E                     GLCD_PIC@INST_PWCTR2:
   148                           	opt stack 0
   149  00102E  C1                 	db	193
   150  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   151                           	opt stack 0
   152  00102F                     GLCD_PIC@INST_PWCTR1:
   153                           	opt stack 0
   154  00102F  C0                 	db	192
   155  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   156                           	opt stack 0
   157  001030                     GLCD_PIC@INST_INVCTR:
   158                           	opt stack 0
   159  001030  B4                 	db	180
   160  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   161                           	opt stack 0
   162  001031                     GLCD_PIC@INST_FRMCTR3:
   163                           	opt stack 0
   164  001031  B3                 	db	179
   165  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   166                           	opt stack 0
   167  001032                     GLCD_PIC@INST_FRMCTR2:
   168                           	opt stack 0
   169  001032  B2                 	db	178
   170  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   171                           	opt stack 0
   172  001033                     GLCD_PIC@INST_FRMCTR1:
   173                           	opt stack 0
   174  001033  B1                 	db	177
   175  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   176                           	opt stack 0
   177  001034                     GLCD_PIC@INST_COLMOD:
   178                           	opt stack 0
   179  001034  3A                 	db	58
   180  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   181                           	opt stack 0
   182  001035  39                 	db	57
   183  001036                     __end_ofGLCD_PIC@INST_IDMON:
   184                           	opt stack 0
   185  001036                     GLCD_PIC@INST_IDMOFF:
   186                           	opt stack 0
   187  001036  38                 	db	56
   188  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   189                           	opt stack 0
   190  001037                     GLCD_PIC@INST_MADCTL:
   191                           	opt stack 0
   192  001037  36                 	db	54
   193  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   194                           	opt stack 0
   195  001038  35                 	db	53
   196  001039                     __end_ofGLCD_PIC@INST_TEON:
   197                           	opt stack 0
   198  001039  34                 	db	52
   199  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   200                           	opt stack 0
   201  00103A  30                 	db	48
   202  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   203                           	opt stack 0
   204  00103B                     GLCD_PIC@INST_RAMWR:
   205                           	opt stack 0
   206  00103B  2C                 	db	44
   207  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   208                           	opt stack 0
   209  00103C                     GLCD_PIC@INST_RASET:
   210                           	opt stack 0
   211  00103C  2B                 	db	43
   212  00103D                     __end_ofGLCD_PIC@INST_RASET:
   213                           	opt stack 0
   214  00103D                     GLCD_PIC@INST_CASET:
   215                           	opt stack 0
   216  00103D  2A                 	db	42
   217  00103E                     __end_ofGLCD_PIC@INST_CASET:
   218                           	opt stack 0
   219  00103E                     GLCD_PIC@INST_DISPON:
   220                           	opt stack 0
   221  00103E  29                 	db	41
   222  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   223                           	opt stack 0
   224  00103F  28                 	db	40
   225  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   226                           	opt stack 0
   227  001040                     GLCD_PIC@INST_GAMSET:
   228                           	opt stack 0
   229  001040  26                 	db	38
   230  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   231                           	opt stack 0
   232  001041  21                 	db	33
   233  001042                     __end_ofGLCD_PIC@INST_INVON:
   234                           	opt stack 0
   235  001042                     GLCD_PIC@INST_INVOFF:
   236                           	opt stack 0
   237  001042  20                 	db	32
   238  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   239                           	opt stack 0
   240  001043                     GLCD_PIC@INST_NORON:
   241                           	opt stack 0
   242  001043  13                 	db	19
   243  001044                     __end_ofGLCD_PIC@INST_NORON:
   244                           	opt stack 0
   245  001044  12                 	db	18
   246  001045                     __end_ofGLCD_PIC@INST_PTLON:
   247                           	opt stack 0
   248  001045                     GLCD_PIC@INST_SLPOUT:
   249                           	opt stack 0
   250  001045  11                 	db	17
   251  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   252                           	opt stack 0
   253  001046  10                 	db	16
   254  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   255                           	opt stack 0
   256  001047                     GLCD_PIC@INST_SWRESET:
   257                           	opt stack 0
   258  001047  01                 	db	1
   259  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   260                           	opt stack 0
   261  001048  00                 	db	0
   262  001049                     __end_ofGLCD_PIC@INST_NOP:
   263                           	opt stack 0
   264  001049  C7                 	db	199
   265  00104A                     __end_of_INST_VMOFCTR2:
   266                           	opt stack 0
   267  00104A  C5                 	db	197
   268  00104B                     __end_of_INST_VMCTR1:
   269                           	opt stack 0
   270  00104B  C4                 	db	196
   271  00104C                     __end_of_INST_PWCTR5:
   272                           	opt stack 0
   273  00104C  C3                 	db	195
   274  00104D                     __end_of_INST_PWCTR4:
   275                           	opt stack 0
   276  00104D  C2                 	db	194
   277  00104E                     __end_of_INST_PWCTR3:
   278                           	opt stack 0
   279  00104E  C1                 	db	193
   280  00104F                     __end_of_INST_PWCTR2:
   281                           	opt stack 0
   282  00104F  C0                 	db	192
   283  001050                     __end_of_INST_PWCTR1:
   284                           	opt stack 0
   285  001050  B4                 	db	180
   286  001051                     __end_of_INST_INVCTR:
   287                           	opt stack 0
   288  001051  B3                 	db	179
   289  001052                     __end_of_INST_FRMCTR3:
   290                           	opt stack 0
   291  001052  B2                 	db	178
   292  001053                     __end_of_INST_FRMCTR2:
   293                           	opt stack 0
   294  001053  B1                 	db	177
   295  001054                     __end_of_INST_FRMCTR1:
   296                           	opt stack 0
   297  001054  3A                 	db	58
   298  001055                     __end_of_INST_COLMOD:
   299                           	opt stack 0
   300  001055  39                 	db	57
   301  001056                     __end_of_INST_IDMON:
   302                           	opt stack 0
   303  001056  38                 	db	56
   304  001057                     __end_of_INST_IDMOFF:
   305                           	opt stack 0
   306  001057  36                 	db	54
   307  001058                     __end_of_INST_MADCTL:
   308                           	opt stack 0
   309  001058  35                 	db	53
   310  001059                     __end_of_INST_TEON:
   311                           	opt stack 0
   312  001059  34                 	db	52
   313  00105A                     __end_of_INST_TEOFF:
   314                           	opt stack 0
   315  00105A  30                 	db	48
   316  00105B                     __end_of_INST_PTLAR:
   317                           	opt stack 0
   318  00105B  2C                 	db	44
   319  00105C                     __end_of_INST_RAMWR:
   320                           	opt stack 0
   321  00105C  2B                 	db	43
   322  00105D                     __end_of_INST_RASET:
   323                           	opt stack 0
   324  00105D  2A                 	db	42
   325  00105E                     __end_of_INST_CASET:
   326                           	opt stack 0
   327  00105E  29                 	db	41
   328  00105F                     __end_of_INST_DISPON:
   329                           	opt stack 0
   330  00105F  28                 	db	40
   331  001060                     __end_of_INST_DISPOFF:
   332                           	opt stack 0
   333  001060  26                 	db	38
   334  001061                     __end_of_INST_GAMSET:
   335                           	opt stack 0
   336  001061                     _INST_INVON:
   337                           	opt stack 0
   338  001061  21                 	db	33
   339  001062                     __end_of_INST_INVON:
   340                           	opt stack 0
   341  001062                     _INST_INVOFF:
   342                           	opt stack 0
   343  001062  20                 	db	32
   344  001063                     __end_of_INST_INVOFF:
   345                           	opt stack 0
   346  001063  13                 	db	19
   347  001064                     __end_of_INST_NORON:
   348                           	opt stack 0
   349  001064  12                 	db	18
   350  001065                     __end_of_INST_PTLON:
   351                           	opt stack 0
   352  001065  11                 	db	17
   353  001066                     __end_of_INST_SLPOUT:
   354                           	opt stack 0
   355  001066  10                 	db	16
   356  001067                     __end_of_INST_SLPIN:
   357                           	opt stack 0
   358  001067  01                 	db	1
   359  001068                     __end_of_INST_SWRESET:
   360                           	opt stack 0
   361  001068  00                 	db	0
   362  001069                     __end_of_INST_NOP:
   363                           	opt stack 0
   364  001069                     _GLCD_SIZE_VERT:
   365                           	opt stack 0
   366  001069  80                 	db	128
   367  00106A                     __end_of_GLCD_SIZE_VERT:
   368                           	opt stack 0
   369  00106A                     _GLCD_SIZE_HORZ:
   370                           	opt stack 0
   371  00106A  80                 	db	128
   372  00106B                     __end_of_GLCD_SIZE_HORZ:
   373                           	opt stack 0
   374  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   375                           	opt stack 0
   376  00106B  A0                 	db	160
   377  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   378                           	opt stack 0
   379  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   380                           	opt stack 0
   381  00106C  80                 	db	128
   382  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   383                           	opt stack 0
   384  0000                     _TRISDbits	set	3989
   385  0000                     _LATDbits	set	3980
   386  0000                     _TRISCbits	set	3988
   387  0000                     _SSPCON1	set	4038
   388  0000                     _SSPSTAT	set	4039
   389  0000                     _SSPCON1bits	set	4038
   390  0000                     _SSPSTATbits	set	4039
   391  0000                     _SSPBUF	set	4041
   392  0000                     _ADCON1	set	4033
   393  0000                     _ADCON0	set	4034
   394  0000                     _TRISE	set	3990
   395  0000                     _TRISD	set	3989
   396  0000                     _TRISC	set	3988
   397  0000                     _TRISB	set	3987
   398  0000                     _TRISA	set	3986
   399  0000                     _LATE	set	3981
   400  0000                     _LATD	set	3980
   401  0000                     _LATC	set	3979
   402  0000                     _LATB	set	3978
   403  0000                     _LATA	set	3977
   404  0000                     _SSPIF	set	31987
   405                           
   406                           ; #config settings
   407  00106D  00                 	db	0	; dummy byte at the end
   408  0000                     
   409                           	psect	cinit
   410  001EE0                     __pcinit:
   411                           	opt stack 0
   412  001EE0                     start_initialization:
   413                           	opt stack 0
   414  001EE0                     __initialization:
   415                           	opt stack 0
   416                           
   417                           ; Clear objects allocated to COMRAM (1 bytes)
   418  001EE0  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   419  001EE2                     end_of_initialization:
   420                           	opt stack 0
   421  001EE2                     __end_of__initialization:
   422                           	opt stack 0
   423  001EE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   424  001EE4  6EF8               	movwf	tblptru,c
   425  001EE6  0100               	movlb	0
   426  001EE8  EF37  F008         	goto	_main	;jump to C main() function
   427                           tblptru	equ	0xFF8
   428                           
   429                           	psect	bssCOMRAM
   430  00002A                     __pbssCOMRAM:
   431                           	opt stack 0
   432  00002A                     _MADCTLbits:
   433                           	opt stack 0
   434  00002A                     	ds	1
   435                           tblptru	equ	0xFF8
   436                           
   437                           	psect	cstackCOMRAM
   438  000001                     __pcstackCOMRAM:
   439                           	opt stack 0
   440  000001                     ??_spiTransfer:
   441  000001                     ?___wmul:
   442                           	opt stack 0
   443  000001                     ?___awdiv:
   444                           	opt stack 0
   445  000001                     spiInit@divider:
   446                           	opt stack 0
   447  000001                     ___wmul@multiplier:
   448                           	opt stack 0
   449  000001                     ___awdiv@dividend:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x0
   453  000001                     	ds	1
   454  000002                     spiTransfer@byteToTransfer:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x1
   458  000002                     	ds	1
   459  000003                     spiSend@val:
   460                           	opt stack 0
   461  000003                     ___wmul@multiplicand:
   462                           	opt stack 0
   463  000003                     ___awdiv@divisor:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x2
   467  000003                     	ds	1
   468  000004                     glcdTransfer@cmd:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x3
   472  000004                     	ds	1
   473  000005                     ??_glcdTransfer:
   474  000005                     ___awdiv@counter:
   475                           	opt stack 0
   476  000005                     ___wmul@product:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x4
   480  000005                     	ds	1
   481  000006                     glcdTransfer@byte:
   482                           	opt stack 0
   483  000006                     ___awdiv@sign:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x5
   487  000006                     	ds	1
   488  000007                     glcdDrawRectangle@XE:
   489                           	opt stack 0
   490  000007                     glcdSetCOLMOD@numBitsPerPixel:
   491                           	opt stack 0
   492  000007                     glcdSetOrigin@corner:
   493                           	opt stack 0
   494  000007                     ___awdiv@quotient:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x6
   498  000007                     	ds	1
   499  000008                     glcdDrawRectangle@YS:
   500                           	opt stack 0
   501  000008                     glcdSetCOLMOD@rawData:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x7
   505  000008                     	ds	1
   506  000009                     ?___awmod:
   507                           	opt stack 0
   508  000009                     glcdDrawRectangle@YE:
   509                           	opt stack 0
   510  000009                     ___awmod@dividend:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x8
   514  000009                     	ds	1
   515  00000A                     glcdDrawRectangle@color:
   516                           	opt stack 0
   517                           
   518                           ; 4 bytes @ 0x9
   519  00000A                     	ds	1
   520  00000B                     ___awmod@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0xA
   524  00000B                     	ds	2
   525  00000D                     ___awmod@counter:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0xC
   529  00000D                     	ds	1
   530  00000E                     ??_glcdDrawRectangle:
   531  00000E                     ___awmod@sign:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xD
   535  00000E                     	ds	4
   536  000012                     glcdDrawRectangle@numLoops:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x11
   540  000012                     	ds	2
   541  000014                     glcdDrawRectangle@i:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x13
   545  000014                     	ds	2
   546  000016                     glcdDrawRectangle@colorData:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x15
   550  000016                     	ds	3
   551  000019                     glcdDrawRectangle@XS:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x18
   555  000019                     	ds	1
   556  00001A                     ??_initGLCD:
   557  00001A                     glcdDrawPixel@YS:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x19
   561  00001A                     	ds	1
   562  00001B                     glcdDrawPixel@color:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x1A
   566  00001B                     	ds	4
   567  00001F                     ??_glcdDrawPixel:
   568                           
   569                           ; 1 bytes @ 0x1E
   570  00001F                     	ds	1
   571  000020                     glcdDrawPixel@XS:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1F
   575  000020                     	ds	1
   576  000021                     ??_main:
   577                           
   578                           ; 1 bytes @ 0x20
   579  000021                     	ds	2
   580  000023                     main@rotation:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x22
   584  000023                     	ds	1
   585  000024                     _main$1095:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x23
   589  000024                     	ds	4
   590  000028                     main@y:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x27
   594  000028                     	ds	1
   595  000029                     main@x:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x28
   599  000029                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 20 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  x               1   40[COMRAM] unsigned char 
   612 ;;  y               1   39[COMRAM] unsigned char 
   613 ;;  rotation        1   34[COMRAM] unsigned char 
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   624 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   626 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;Total ram usage:        9 bytes
   628 ;; Hardware stack levels required when called:    5
   629 ;; This function calls:
   630 ;;		___awdiv
   631 ;;		___awmod
   632 ;;		___wmul
   633 ;;		_glcdDrawPixel
   634 ;;		_glcdDrawRectangle
   635 ;;		_glcdSetOrigin
   636 ;;		_glcdTransfer
   637 ;;		_initGLCD
   638 ;; This function is called by:
   639 ;;		Startup code after reset
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text0
   644  00106E                     __ptext0:
   645                           	opt stack 0
   646  00106E                     _main:
   647                           	opt stack 26
   648                           
   649                           ;main.c: 26: LATA = 0x00;
   650                           
   651                           ;incstack = 0
   652  00106E  0E00               	movlw	0
   653  001070  6E89               	movwf	3977,c	;volatile
   654                           
   655                           ;main.c: 27: LATB = 0x00;
   656  001072  0E00               	movlw	0
   657  001074  6E8A               	movwf	3978,c	;volatile
   658                           
   659                           ;main.c: 28: LATC = 0x00;
   660  001076  0E00               	movlw	0
   661  001078  6E8B               	movwf	3979,c	;volatile
   662                           
   663                           ;main.c: 29: LATD = 0x00;
   664  00107A  0E00               	movlw	0
   665  00107C  6E8C               	movwf	3980,c	;volatile
   666                           
   667                           ;main.c: 30: LATE = 0x00;
   668  00107E  0E00               	movlw	0
   669  001080  6E8D               	movwf	3981,c	;volatile
   670                           
   671                           ;main.c: 34: TRISA = 0xFF;
   672  001082  6892               	setf	3986,c	;volatile
   673                           
   674                           ;main.c: 35: TRISB = 0xFF;
   675  001084  6893               	setf	3987,c	;volatile
   676                           
   677                           ;main.c: 36: TRISC = 0b10000000;
   678  001086  0E80               	movlw	128
   679  001088  6E94               	movwf	3988,c	;volatile
   680                           
   681                           ;main.c: 40: TRISD = 0b00000001;
   682  00108A  0E01               	movlw	1
   683  00108C  6E95               	movwf	3989,c	;volatile
   684                           
   685                           ;main.c: 46: TRISE = 0b00000100;
   686  00108E  0E04               	movlw	4
   687  001090  6E96               	movwf	3990,c	;volatile
   688                           
   689                           ;main.c: 53: ADCON0 = 0x00;
   690  001092  0E00               	movlw	0
   691  001094  6EC2               	movwf	4034,c	;volatile
   692                           
   693                           ;main.c: 54: ADCON1 = 0b00001111;
   694  001096  0E0F               	movlw	15
   695  001098  6EC1               	movwf	4033,c	;volatile
   696                           
   697                           ;main.c: 58: initGLCD();
   698  00109A  ECCE  F00B         	call	_initGLCD	;wreg free
   699                           
   700                           ;main.c: 61: unsigned char rotation = 0, x = 0, y = 0;
   701  00109E  0E00               	movlw	0
   702  0010A0  6E23               	movwf	main@rotation,c
   703  0010A2  0E00               	movlw	0
   704  0010A4  6E29               	movwf	main@x,c
   705  0010A6  0E00               	movlw	0
   706  0010A8  6E28               	movwf	main@y,c
   707  0010AA                     l133:
   708                           
   709                           ;main.c: 66: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, RED);
   710  0010AA  0E6A               	movlw	low _GLCD_SIZE_HORZ
   711  0010AC  6EF6               	movwf	tblptrl,c
   712  0010AE                     	if	1	;There is more than 1 active tblptr byte
   713  0010AE  0E10               	movlw	high _GLCD_SIZE_HORZ
   714  0010B0  6EF7               	movwf	tblptrh,c
   715  0010B2                     	endif
   716  0010B2                     	if	0	;There are less than 3 active tblptr bytes
   717  0010B2                     	endif
   718  0010B2  0008               	tblrd		*
   719  0010B4  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   720  0010B8  0E00               	movlw	0
   721  0010BA  6E08               	movwf	glcdDrawRectangle@YS,c
   722  0010BC  0E69               	movlw	low _GLCD_SIZE_VERT
   723  0010BE  6EF6               	movwf	tblptrl,c
   724  0010C0                     	if	1	;There is more than 1 active tblptr byte
   725  0010C0  0E10               	movlw	high _GLCD_SIZE_VERT
   726  0010C2  6EF7               	movwf	tblptrh,c
   727  0010C4                     	endif
   728  0010C4                     	if	0	;There are less than 3 active tblptr bytes
   729  0010C4                     	endif
   730  0010C4  0008               	tblrd		*
   731  0010C6  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   732  0010CA  0E19               	movlw	low _RED
   733  0010CC  6EF6               	movwf	tblptrl,c
   734  0010CE                     	if	1	;There is more than 1 active tblptr byte
   735  0010CE  0E10               	movlw	high _RED
   736  0010D0  6EF7               	movwf	tblptrh,c
   737  0010D2                     	endif
   738  0010D2                     	if	0	;There are less than 3 active tblptr bytes
   739  0010D2                     	endif
   740  0010D2  0009               	tblrd		*+
   741  0010D4  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   742  0010D8  0009               	tblrd		*+
   743  0010DA  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   744  0010DE  0009               	tblrd		*+
   745  0010E0  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   746  0010E4  000A               	tblrd		*-
   747  0010E6  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   748  0010EA  0E00               	movlw	0
   749  0010EC  EC54  F00D         	call	_glcdDrawRectangle
   750                           
   751                           ;main.c: 67: _delay((unsigned long)((1000)*(40000000/4000.0)));
   752  0010F0  0E33               	movlw	51
   753  0010F2  6E22               	movwf	(??_main+1)& (0+255),c
   754  0010F4  0EBB               	movlw	187
   755  0010F6  6E21               	movwf	??_main& (0+255),c
   756  0010F8  0EE0               	movlw	224
   757  0010FA                     u897:
   758  0010FA  2EE8               	decfsz	wreg,f,c
   759  0010FC  D7FE               	bra	u897
   760  0010FE  2E21               	decfsz	??_main& (0+255),f,c
   761  001100  D7FC               	bra	u897
   762  001102  2E22               	decfsz	(??_main+1)& (0+255),f,c
   763  001104  D7FA               	bra	u897
   764                           
   765                           ;main.c: 70: glcdDrawRectangle(0, 18, 0, GLCD_SIZE_VERT, RED);
   766  001106  0E12               	movlw	18
   767  001108  6E07               	movwf	glcdDrawRectangle@XE,c
   768  00110A  0E00               	movlw	0
   769  00110C  6E08               	movwf	glcdDrawRectangle@YS,c
   770  00110E  0E69               	movlw	low _GLCD_SIZE_VERT
   771  001110  6EF6               	movwf	tblptrl,c
   772  001112                     	if	1	;There is more than 1 active tblptr byte
   773  001112  0E10               	movlw	high _GLCD_SIZE_VERT
   774  001114  6EF7               	movwf	tblptrh,c
   775  001116                     	endif
   776  001116                     	if	0	;There are less than 3 active tblptr bytes
   777  001116                     	endif
   778  001116  0008               	tblrd		*
   779  001118  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   780  00111C  0E19               	movlw	low _RED
   781  00111E  6EF6               	movwf	tblptrl,c
   782  001120                     	if	1	;There is more than 1 active tblptr byte
   783  001120  0E10               	movlw	high _RED
   784  001122  6EF7               	movwf	tblptrh,c
   785  001124                     	endif
   786  001124                     	if	0	;There are less than 3 active tblptr bytes
   787  001124                     	endif
   788  001124  0009               	tblrd		*+
   789  001126  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   790  00112A  0009               	tblrd		*+
   791  00112C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   792  001130  0009               	tblrd		*+
   793  001132  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   794  001136  000A               	tblrd		*-
   795  001138  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   796  00113C  0E00               	movlw	0
   797  00113E  EC54  F00D         	call	_glcdDrawRectangle
   798                           
   799                           ;main.c: 71: glcdDrawRectangle(18, 36, 0, GLCD_SIZE_VERT, ORANGE);
   800  001142  0E24               	movlw	36
   801  001144  6E07               	movwf	glcdDrawRectangle@XE,c
   802  001146  0E00               	movlw	0
   803  001148  6E08               	movwf	glcdDrawRectangle@YS,c
   804  00114A  0E69               	movlw	low _GLCD_SIZE_VERT
   805  00114C  6EF6               	movwf	tblptrl,c
   806  00114E                     	if	1	;There is more than 1 active tblptr byte
   807  00114E  0E10               	movlw	high _GLCD_SIZE_VERT
   808  001150  6EF7               	movwf	tblptrh,c
   809  001152                     	endif
   810  001152                     	if	0	;There are less than 3 active tblptr bytes
   811  001152                     	endif
   812  001152  0008               	tblrd		*
   813  001154  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   814  001158  0E15               	movlw	low _ORANGE
   815  00115A  6EF6               	movwf	tblptrl,c
   816  00115C                     	if	1	;There is more than 1 active tblptr byte
   817  00115C  0E10               	movlw	high _ORANGE
   818  00115E  6EF7               	movwf	tblptrh,c
   819  001160                     	endif
   820  001160                     	if	0	;There are less than 3 active tblptr bytes
   821  001160                     	endif
   822  001160  0009               	tblrd		*+
   823  001162  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   824  001166  0009               	tblrd		*+
   825  001168  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   826  00116C  0009               	tblrd		*+
   827  00116E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   828  001172  000A               	tblrd		*-
   829  001174  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   830  001178  0E12               	movlw	18
   831  00117A  EC54  F00D         	call	_glcdDrawRectangle
   832                           
   833                           ;main.c: 72: glcdDrawRectangle(36, 54, 0, GLCD_SIZE_VERT, YELLOW);
   834  00117E  0E36               	movlw	54
   835  001180  6E07               	movwf	glcdDrawRectangle@XE,c
   836  001182  0E00               	movlw	0
   837  001184  6E08               	movwf	glcdDrawRectangle@YS,c
   838  001186  0E69               	movlw	low _GLCD_SIZE_VERT
   839  001188  6EF6               	movwf	tblptrl,c
   840  00118A                     	if	1	;There is more than 1 active tblptr byte
   841  00118A  0E10               	movlw	high _GLCD_SIZE_VERT
   842  00118C  6EF7               	movwf	tblptrh,c
   843  00118E                     	endif
   844  00118E                     	if	0	;There are less than 3 active tblptr bytes
   845  00118E                     	endif
   846  00118E  0008               	tblrd		*
   847  001190  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   848  001194  0E11               	movlw	low _YELLOW
   849  001196  6EF6               	movwf	tblptrl,c
   850  001198                     	if	1	;There is more than 1 active tblptr byte
   851  001198  0E10               	movlw	high _YELLOW
   852  00119A  6EF7               	movwf	tblptrh,c
   853  00119C                     	endif
   854  00119C                     	if	0	;There are less than 3 active tblptr bytes
   855  00119C                     	endif
   856  00119C  0009               	tblrd		*+
   857  00119E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   858  0011A2  0009               	tblrd		*+
   859  0011A4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   860  0011A8  0009               	tblrd		*+
   861  0011AA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   862  0011AE  000A               	tblrd		*-
   863  0011B0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   864  0011B4  0E24               	movlw	36
   865  0011B6  EC54  F00D         	call	_glcdDrawRectangle
   866                           
   867                           ;main.c: 73: glcdDrawRectangle(54, 72, 0, GLCD_SIZE_VERT, GREEN);
   868  0011BA  0E48               	movlw	72
   869  0011BC  6E07               	movwf	glcdDrawRectangle@XE,c
   870  0011BE  0E00               	movlw	0
   871  0011C0  6E08               	movwf	glcdDrawRectangle@YS,c
   872  0011C2  0E69               	movlw	low _GLCD_SIZE_VERT
   873  0011C4  6EF6               	movwf	tblptrl,c
   874  0011C6                     	if	1	;There is more than 1 active tblptr byte
   875  0011C6  0E10               	movlw	high _GLCD_SIZE_VERT
   876  0011C8  6EF7               	movwf	tblptrh,c
   877  0011CA                     	endif
   878  0011CA                     	if	0	;There are less than 3 active tblptr bytes
   879  0011CA                     	endif
   880  0011CA  0008               	tblrd		*
   881  0011CC  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   882  0011D0  0E0D               	movlw	low _GREEN
   883  0011D2  6EF6               	movwf	tblptrl,c
   884  0011D4                     	if	1	;There is more than 1 active tblptr byte
   885  0011D4  0E10               	movlw	high _GREEN
   886  0011D6  6EF7               	movwf	tblptrh,c
   887  0011D8                     	endif
   888  0011D8                     	if	0	;There are less than 3 active tblptr bytes
   889  0011D8                     	endif
   890  0011D8  0009               	tblrd		*+
   891  0011DA  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   892  0011DE  0009               	tblrd		*+
   893  0011E0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   894  0011E4  0009               	tblrd		*+
   895  0011E6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   896  0011EA  000A               	tblrd		*-
   897  0011EC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   898  0011F0  0E36               	movlw	54
   899  0011F2  EC54  F00D         	call	_glcdDrawRectangle
   900                           
   901                           ;main.c: 74: glcdDrawRectangle(72, 90, 0, GLCD_SIZE_VERT, BLUE);
   902  0011F6  0E5A               	movlw	90
   903  0011F8  6E07               	movwf	glcdDrawRectangle@XE,c
   904  0011FA  0E00               	movlw	0
   905  0011FC  6E08               	movwf	glcdDrawRectangle@YS,c
   906  0011FE  0E69               	movlw	low _GLCD_SIZE_VERT
   907  001200  6EF6               	movwf	tblptrl,c
   908  001202                     	if	1	;There is more than 1 active tblptr byte
   909  001202  0E10               	movlw	high _GLCD_SIZE_VERT
   910  001204  6EF7               	movwf	tblptrh,c
   911  001206                     	endif
   912  001206                     	if	0	;There are less than 3 active tblptr bytes
   913  001206                     	endif
   914  001206  0008               	tblrd		*
   915  001208  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   916  00120C  0E09               	movlw	low _BLUE
   917  00120E  6EF6               	movwf	tblptrl,c
   918  001210                     	if	1	;There is more than 1 active tblptr byte
   919  001210  0E10               	movlw	high _BLUE
   920  001212  6EF7               	movwf	tblptrh,c
   921  001214                     	endif
   922  001214                     	if	0	;There are less than 3 active tblptr bytes
   923  001214                     	endif
   924  001214  0009               	tblrd		*+
   925  001216  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   926  00121A  0009               	tblrd		*+
   927  00121C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   928  001220  0009               	tblrd		*+
   929  001222  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   930  001226  000A               	tblrd		*-
   931  001228  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   932  00122C  0E48               	movlw	72
   933  00122E  EC54  F00D         	call	_glcdDrawRectangle
   934                           
   935                           ;main.c: 75: glcdDrawRectangle(90, 108, 0, GLCD_SIZE_VERT, INDIGO);
   936  001232  0E6C               	movlw	108
   937  001234  6E07               	movwf	glcdDrawRectangle@XE,c
   938  001236  0E00               	movlw	0
   939  001238  6E08               	movwf	glcdDrawRectangle@YS,c
   940  00123A  0E69               	movlw	low _GLCD_SIZE_VERT
   941  00123C  6EF6               	movwf	tblptrl,c
   942  00123E                     	if	1	;There is more than 1 active tblptr byte
   943  00123E  0E10               	movlw	high _GLCD_SIZE_VERT
   944  001240  6EF7               	movwf	tblptrh,c
   945  001242                     	endif
   946  001242                     	if	0	;There are less than 3 active tblptr bytes
   947  001242                     	endif
   948  001242  0008               	tblrd		*
   949  001244  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   950  001248  0E05               	movlw	low _INDIGO
   951  00124A  6EF6               	movwf	tblptrl,c
   952  00124C                     	if	1	;There is more than 1 active tblptr byte
   953  00124C  0E10               	movlw	high _INDIGO
   954  00124E  6EF7               	movwf	tblptrh,c
   955  001250                     	endif
   956  001250                     	if	0	;There are less than 3 active tblptr bytes
   957  001250                     	endif
   958  001250  0009               	tblrd		*+
   959  001252  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   960  001256  0009               	tblrd		*+
   961  001258  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   962  00125C  0009               	tblrd		*+
   963  00125E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   964  001262  000A               	tblrd		*-
   965  001264  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   966  001268  0E5A               	movlw	90
   967  00126A  EC54  F00D         	call	_glcdDrawRectangle
   968                           
   969                           ;main.c: 76: glcdDrawRectangle(108, 128, 0, GLCD_SIZE_VERT, VIOLET);
   970  00126E  0E80               	movlw	128
   971  001270  6E07               	movwf	glcdDrawRectangle@XE,c
   972  001272  0E00               	movlw	0
   973  001274  6E08               	movwf	glcdDrawRectangle@YS,c
   974  001276  0E69               	movlw	low _GLCD_SIZE_VERT
   975  001278  6EF6               	movwf	tblptrl,c
   976  00127A                     	if	1	;There is more than 1 active tblptr byte
   977  00127A  0E10               	movlw	high _GLCD_SIZE_VERT
   978  00127C  6EF7               	movwf	tblptrh,c
   979  00127E                     	endif
   980  00127E                     	if	0	;There are less than 3 active tblptr bytes
   981  00127E                     	endif
   982  00127E  0008               	tblrd		*
   983  001280  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   984  001284  0E01               	movlw	low _VIOLET
   985  001286  6EF6               	movwf	tblptrl,c
   986  001288                     	if	1	;There is more than 1 active tblptr byte
   987  001288  0E10               	movlw	high _VIOLET
   988  00128A  6EF7               	movwf	tblptrh,c
   989  00128C                     	endif
   990  00128C                     	if	0	;There are less than 3 active tblptr bytes
   991  00128C                     	endif
   992  00128C  0009               	tblrd		*+
   993  00128E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   994  001292  0009               	tblrd		*+
   995  001294  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   996  001298  0009               	tblrd		*+
   997  00129A  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   998  00129E  000A               	tblrd		*-
   999  0012A0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1000  0012A4  0E6C               	movlw	108
  1001  0012A6  EC54  F00D         	call	_glcdDrawRectangle
  1002                           
  1003                           ;main.c: 79: _delay((unsigned long)((500)*(40000000/4000.0)));
  1004  0012AA  0E1A               	movlw	26
  1005  0012AC  6E22               	movwf	(??_main+1)& (0+255),c
  1006  0012AE  0E5E               	movlw	94
  1007  0012B0  6E21               	movwf	??_main& (0+255),c
  1008  0012B2  0E6E               	movlw	110
  1009  0012B4                     u907:
  1010  0012B4  2EE8               	decfsz	wreg,f,c
  1011  0012B6  D7FE               	bra	u907
  1012  0012B8  2E21               	decfsz	??_main& (0+255),f,c
  1013  0012BA  D7FC               	bra	u907
  1014  0012BC  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1015  0012BE  D7FA               	bra	u907
  1016  0012C0  D000               	nop2	
  1017                           
  1018                           ;main.c: 80: glcdTransfer(INST_INVON, 1);
  1019  0012C2  0E01               	movlw	1
  1020  0012C4  6E04               	movwf	glcdTransfer@cmd,c
  1021  0012C6  0E61               	movlw	low _INST_INVON
  1022  0012C8  6EF6               	movwf	tblptrl,c
  1023  0012CA                     	if	1	;There is more than 1 active tblptr byte
  1024  0012CA  0E10               	movlw	high _INST_INVON
  1025  0012CC  6EF7               	movwf	tblptrh,c
  1026  0012CE                     	endif
  1027  0012CE                     	if	0	;There are less than 3 active tblptr bytes
  1028  0012CE                     	endif
  1029  0012CE  0008               	tblrd		*
  1030  0012D0  50F5               	movf	tablat,w,c
  1031  0012D2  EC37  F00F         	call	_glcdTransfer
  1032                           
  1033                           ;main.c: 81: _delay((unsigned long)((500)*(40000000/4000.0)));
  1034  0012D6  0E1A               	movlw	26
  1035  0012D8  6E22               	movwf	(??_main+1)& (0+255),c
  1036  0012DA  0E5E               	movlw	94
  1037  0012DC  6E21               	movwf	??_main& (0+255),c
  1038  0012DE  0E6E               	movlw	110
  1039  0012E0                     u917:
  1040  0012E0  2EE8               	decfsz	wreg,f,c
  1041  0012E2  D7FE               	bra	u917
  1042  0012E4  2E21               	decfsz	??_main& (0+255),f,c
  1043  0012E6  D7FC               	bra	u917
  1044  0012E8  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1045  0012EA  D7FA               	bra	u917
  1046  0012EC  D000               	nop2	
  1047                           
  1048                           ;main.c: 82: glcdTransfer(INST_INVOFF, 1);
  1049  0012EE  0E01               	movlw	1
  1050  0012F0  6E04               	movwf	glcdTransfer@cmd,c
  1051  0012F2  0E62               	movlw	low _INST_INVOFF
  1052  0012F4  6EF6               	movwf	tblptrl,c
  1053  0012F6                     	if	1	;There is more than 1 active tblptr byte
  1054  0012F6  0E10               	movlw	high _INST_INVOFF
  1055  0012F8  6EF7               	movwf	tblptrh,c
  1056  0012FA                     	endif
  1057  0012FA                     	if	0	;There are less than 3 active tblptr bytes
  1058  0012FA                     	endif
  1059  0012FA  0008               	tblrd		*
  1060  0012FC  50F5               	movf	tablat,w,c
  1061  0012FE  EC37  F00F         	call	_glcdTransfer
  1062                           
  1063                           ;main.c: 83: _delay((unsigned long)((500)*(40000000/4000.0)));
  1064  001302  0E1A               	movlw	26
  1065  001304  6E22               	movwf	(??_main+1)& (0+255),c
  1066  001306  0E5E               	movlw	94
  1067  001308  6E21               	movwf	??_main& (0+255),c
  1068  00130A  0E6E               	movlw	110
  1069  00130C                     u927:
  1070  00130C  2EE8               	decfsz	wreg,f,c
  1071  00130E  D7FE               	bra	u927
  1072  001310  2E21               	decfsz	??_main& (0+255),f,c
  1073  001312  D7FC               	bra	u927
  1074  001314  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1075  001316  D7FA               	bra	u927
  1076  001318  D000               	nop2	
  1077                           
  1078                           ;main.c: 86: glcdDrawPixel(0, 0, WHITE);
  1079  00131A  0E00               	movlw	0
  1080  00131C  6E1A               	movwf	glcdDrawPixel@YS,c
  1081  00131E  0E1D               	movlw	low _WHITE
  1082  001320  6EF6               	movwf	tblptrl,c
  1083  001322                     	if	1	;There is more than 1 active tblptr byte
  1084  001322  0E10               	movlw	high _WHITE
  1085  001324  6EF7               	movwf	tblptrh,c
  1086  001326                     	endif
  1087  001326                     	if	0	;There are less than 3 active tblptr bytes
  1088  001326                     	endif
  1089  001326  0009               	tblrd		*+
  1090  001328  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1091  00132C  0009               	tblrd		*+
  1092  00132E  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1093  001332  0009               	tblrd		*+
  1094  001334  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1095  001338  000A               	tblrd		*-
  1096  00133A  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1097  00133E  0E00               	movlw	0
  1098  001340  EC8E  F00E         	call	_glcdDrawPixel
  1099                           
  1100                           ;main.c: 87: _delay((unsigned long)((500)*(40000000/4000.0)));
  1101  001344  0E1A               	movlw	26
  1102  001346  6E22               	movwf	(??_main+1)& (0+255),c
  1103  001348  0E5E               	movlw	94
  1104  00134A  6E21               	movwf	??_main& (0+255),c
  1105  00134C  0E6E               	movlw	110
  1106  00134E                     u937:
  1107  00134E  2EE8               	decfsz	wreg,f,c
  1108  001350  D7FE               	bra	u937
  1109  001352  2E21               	decfsz	??_main& (0+255),f,c
  1110  001354  D7FC               	bra	u937
  1111  001356  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1112  001358  D7FA               	bra	u937
  1113  00135A  D000               	nop2	
  1114                           
  1115                           ;main.c: 88: glcdDrawPixel(GLCD_SIZE_HORZ, 0, WHITE);
  1116  00135C  0E00               	movlw	0
  1117  00135E  6E1A               	movwf	glcdDrawPixel@YS,c
  1118  001360  0E1D               	movlw	low _WHITE
  1119  001362  6EF6               	movwf	tblptrl,c
  1120  001364                     	if	1	;There is more than 1 active tblptr byte
  1121  001364  0E10               	movlw	high _WHITE
  1122  001366  6EF7               	movwf	tblptrh,c
  1123  001368                     	endif
  1124  001368                     	if	0	;There are less than 3 active tblptr bytes
  1125  001368                     	endif
  1126  001368  0009               	tblrd		*+
  1127  00136A  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1128  00136E  0009               	tblrd		*+
  1129  001370  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1130  001374  0009               	tblrd		*+
  1131  001376  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1132  00137A  000A               	tblrd		*-
  1133  00137C  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1134  001380  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1135  001382  6EF6               	movwf	tblptrl,c
  1136  001384                     	if	1	;There is more than 1 active tblptr byte
  1137  001384  0E10               	movlw	high _GLCD_SIZE_HORZ
  1138  001386  6EF7               	movwf	tblptrh,c
  1139  001388                     	endif
  1140  001388                     	if	0	;There are less than 3 active tblptr bytes
  1141  001388                     	endif
  1142  001388  0008               	tblrd		*
  1143  00138A  50F5               	movf	tablat,w,c
  1144  00138C  EC8E  F00E         	call	_glcdDrawPixel
  1145                           
  1146                           ;main.c: 89: _delay((unsigned long)((500)*(40000000/4000.0)));
  1147  001390  0E1A               	movlw	26
  1148  001392  6E22               	movwf	(??_main+1)& (0+255),c
  1149  001394  0E5E               	movlw	94
  1150  001396  6E21               	movwf	??_main& (0+255),c
  1151  001398  0E6E               	movlw	110
  1152  00139A                     u947:
  1153  00139A  2EE8               	decfsz	wreg,f,c
  1154  00139C  D7FE               	bra	u947
  1155  00139E  2E21               	decfsz	??_main& (0+255),f,c
  1156  0013A0  D7FC               	bra	u947
  1157  0013A2  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1158  0013A4  D7FA               	bra	u947
  1159  0013A6  D000               	nop2	
  1160                           
  1161                           ;main.c: 90: glcdDrawPixel(GLCD_SIZE_HORZ, GLCD_SIZE_VERT, WHITE);
  1162  0013A8  0E69               	movlw	low _GLCD_SIZE_VERT
  1163  0013AA  6EF6               	movwf	tblptrl,c
  1164  0013AC                     	if	1	;There is more than 1 active tblptr byte
  1165  0013AC  0E10               	movlw	high _GLCD_SIZE_VERT
  1166  0013AE  6EF7               	movwf	tblptrh,c
  1167  0013B0                     	endif
  1168  0013B0                     	if	0	;There are less than 3 active tblptr bytes
  1169  0013B0                     	endif
  1170  0013B0  0008               	tblrd		*
  1171  0013B2  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1172  0013B6  0E1D               	movlw	low _WHITE
  1173  0013B8  6EF6               	movwf	tblptrl,c
  1174  0013BA                     	if	1	;There is more than 1 active tblptr byte
  1175  0013BA  0E10               	movlw	high _WHITE
  1176  0013BC  6EF7               	movwf	tblptrh,c
  1177  0013BE                     	endif
  1178  0013BE                     	if	0	;There are less than 3 active tblptr bytes
  1179  0013BE                     	endif
  1180  0013BE  0009               	tblrd		*+
  1181  0013C0  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1182  0013C4  0009               	tblrd		*+
  1183  0013C6  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1184  0013CA  0009               	tblrd		*+
  1185  0013CC  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1186  0013D0  000A               	tblrd		*-
  1187  0013D2  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1188  0013D6  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1189  0013D8  6EF6               	movwf	tblptrl,c
  1190  0013DA                     	if	1	;There is more than 1 active tblptr byte
  1191  0013DA  0E10               	movlw	high _GLCD_SIZE_HORZ
  1192  0013DC  6EF7               	movwf	tblptrh,c
  1193  0013DE                     	endif
  1194  0013DE                     	if	0	;There are less than 3 active tblptr bytes
  1195  0013DE                     	endif
  1196  0013DE  0008               	tblrd		*
  1197  0013E0  50F5               	movf	tablat,w,c
  1198  0013E2  EC8E  F00E         	call	_glcdDrawPixel
  1199                           
  1200                           ;main.c: 91: _delay((unsigned long)((500)*(40000000/4000.0)));
  1201  0013E6  0E1A               	movlw	26
  1202  0013E8  6E22               	movwf	(??_main+1)& (0+255),c
  1203  0013EA  0E5E               	movlw	94
  1204  0013EC  6E21               	movwf	??_main& (0+255),c
  1205  0013EE  0E6E               	movlw	110
  1206  0013F0                     u957:
  1207  0013F0  2EE8               	decfsz	wreg,f,c
  1208  0013F2  D7FE               	bra	u957
  1209  0013F4  2E21               	decfsz	??_main& (0+255),f,c
  1210  0013F6  D7FC               	bra	u957
  1211  0013F8  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1212  0013FA  D7FA               	bra	u957
  1213  0013FC  D000               	nop2	
  1214                           
  1215                           ;main.c: 92: glcdDrawPixel(0, GLCD_SIZE_VERT, WHITE);
  1216  0013FE  0E69               	movlw	low _GLCD_SIZE_VERT
  1217  001400  6EF6               	movwf	tblptrl,c
  1218  001402                     	if	1	;There is more than 1 active tblptr byte
  1219  001402  0E10               	movlw	high _GLCD_SIZE_VERT
  1220  001404  6EF7               	movwf	tblptrh,c
  1221  001406                     	endif
  1222  001406                     	if	0	;There are less than 3 active tblptr bytes
  1223  001406                     	endif
  1224  001406  0008               	tblrd		*
  1225  001408  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1226  00140C  0E1D               	movlw	low _WHITE
  1227  00140E  6EF6               	movwf	tblptrl,c
  1228  001410                     	if	1	;There is more than 1 active tblptr byte
  1229  001410  0E10               	movlw	high _WHITE
  1230  001412  6EF7               	movwf	tblptrh,c
  1231  001414                     	endif
  1232  001414                     	if	0	;There are less than 3 active tblptr bytes
  1233  001414                     	endif
  1234  001414  0009               	tblrd		*+
  1235  001416  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1236  00141A  0009               	tblrd		*+
  1237  00141C  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1238  001420  0009               	tblrd		*+
  1239  001422  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1240  001426  000A               	tblrd		*-
  1241  001428  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1242  00142C  0E00               	movlw	0
  1243  00142E  EC8E  F00E         	call	_glcdDrawPixel
  1244                           
  1245                           ;main.c: 93: _delay((unsigned long)((500)*(40000000/4000.0)));
  1246  001432  0E1A               	movlw	26
  1247  001434  6E22               	movwf	(??_main+1)& (0+255),c
  1248  001436  0E5E               	movlw	94
  1249  001438  6E21               	movwf	??_main& (0+255),c
  1250  00143A  0E6E               	movlw	110
  1251  00143C                     u967:
  1252  00143C  2EE8               	decfsz	wreg,f,c
  1253  00143E  D7FE               	bra	u967
  1254  001440  2E21               	decfsz	??_main& (0+255),f,c
  1255  001442  D7FC               	bra	u967
  1256  001444  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1257  001446  D7FA               	bra	u967
  1258  001448  D000               	nop2	
  1259                           
  1260                           ;main.c: 96: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1261  00144A  0E00               	movlw	0
  1262  00144C  6E29               	movwf	main@x,c
  1263  00144E                     l1877:
  1264  00144E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1265  001450  6EF6               	movwf	tblptrl,c
  1266  001452                     	if	1	;There is more than 1 active tblptr byte
  1267  001452  0E10               	movlw	high _GLCD_SIZE_HORZ
  1268  001454  6EF7               	movwf	tblptrh,c
  1269  001456                     	endif
  1270  001456                     	if	0	;There are less than 3 active tblptr bytes
  1271  001456                     	endif
  1272  001456  0009               	tblrd		*+
  1273  001458  50F5               	movf	tablat,w,c
  1274  00145A  5C29               	subwf	main@x,w,c
  1275  00145C  B0D8               	btfsc	status,0,c
  1276  00145E  D082               	goto	l1895
  1277                           
  1278                           ;main.c: 97: if(x % (GLCD_SIZE_VERT/16) == 0){
  1279  001460  C029  F009         	movff	main@x,___awmod@dividend
  1280  001464  6A0A               	clrf	___awmod@dividend+1,c
  1281  001466  0E00               	movlw	0
  1282  001468  6E04               	movwf	___awdiv@divisor+1,c
  1283  00146A  0E10               	movlw	16
  1284  00146C  6E03               	movwf	___awdiv@divisor,c
  1285  00146E  0E69               	movlw	low _GLCD_SIZE_VERT
  1286  001470  6EF6               	movwf	tblptrl,c
  1287  001472                     	if	1	;There is more than 1 active tblptr byte
  1288  001472  0E10               	movlw	high _GLCD_SIZE_VERT
  1289  001474  6EF7               	movwf	tblptrh,c
  1290  001476                     	endif
  1291  001476                     	if	0	;There are less than 3 active tblptr bytes
  1292  001476                     	endif
  1293  001476  0008               	tblrd		*
  1294  001478  50F5               	movf	tablat,w,c
  1295  00147A  6E01               	movwf	___awdiv@dividend,c
  1296  00147C  6A02               	clrf	___awdiv@dividend+1,c
  1297  00147E  EC14  F00E         	call	___awdiv	;wreg free
  1298  001482  C001  F00B         	movff	?___awdiv,___awmod@divisor
  1299  001486  C002  F00C         	movff	?___awdiv+1,___awmod@divisor+1
  1300  00148A  EC56  F00E         	call	___awmod	;wreg free
  1301  00148E  5009               	movf	?___awmod,w,c
  1302  001490  100A               	iorwf	?___awmod+1,w,c
  1303  001492  A4D8               	btfss	status,2,c
  1304  001494  D036               	goto	l1887
  1305                           
  1306                           ;main.c: 98: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1307  001496  C029  F001         	movff	main@x,___wmul@multiplier
  1308  00149A  6A02               	clrf	___wmul@multiplier+1,c
  1309  00149C  0E08               	movlw	8
  1310  00149E  6E04               	movwf	___wmul@multiplicand+1,c
  1311  0014A0  0E00               	movlw	0
  1312  0014A2  6E03               	movwf	___wmul@multiplicand,c
  1313  0014A4  EC4B  F00F         	call	___wmul	;wreg free
  1314  0014A8  C001  F024         	movff	?___wmul,_main$1095
  1315  0014AC  C002  F025         	movff	?___wmul+1,_main$1095+1
  1316  0014B0  0E00               	movlw	0
  1317  0014B2  BE25               	btfsc	_main$1095+1,7,c
  1318  0014B4  0EFF               	movlw	-1
  1319  0014B6  6E26               	movwf	_main$1095+2,c
  1320  0014B8  6E27               	movwf	_main$1095+3,c
  1321                           
  1322                           ;main.c: 98: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1323  0014BA  C029  F009         	movff	main@x,___awmod@dividend
  1324  0014BE  6A0A               	clrf	___awmod@dividend+1,c
  1325  0014C0  0E00               	movlw	0
  1326  0014C2  6E0C               	movwf	___awmod@divisor+1,c
  1327  0014C4  0E03               	movlw	3
  1328  0014C6  6E0B               	movwf	___awmod@divisor,c
  1329  0014C8  EC56  F00E         	call	___awmod	;wreg free
  1330  0014CC  5009               	movf	?___awmod,w,c
  1331  0014CE  0D21               	mullw	33
  1332  0014D0  CFF3 F01A          	movff	prodl,glcdDrawPixel@YS
  1333  0014D4  C024  F01B         	movff	_main$1095,glcdDrawPixel@color
  1334  0014D8  C025  F01C         	movff	_main$1095+1,glcdDrawPixel@color+1
  1335  0014DC  C026  F01D         	movff	_main$1095+2,glcdDrawPixel@color+2
  1336  0014E0  C027  F01E         	movff	_main$1095+3,glcdDrawPixel@color+3
  1337  0014E4  0E69               	movlw	low _GLCD_SIZE_VERT
  1338  0014E6  6EF6               	movwf	tblptrl,c
  1339  0014E8                     	if	1	;There is more than 1 active tblptr byte
  1340  0014E8  0E10               	movlw	high _GLCD_SIZE_VERT
  1341  0014EA  6EF7               	movwf	tblptrh,c
  1342  0014EC                     	endif
  1343  0014EC                     	if	0	;There are less than 3 active tblptr bytes
  1344  0014EC                     	endif
  1345  0014EC  0008               	tblrd		*
  1346  0014EE  CFF5 F021          	movff	tablat,??_main
  1347  0014F2  5029               	movf	main@x,w,c
  1348  0014F4  0D08               	mullw	8
  1349  0014F6  50F3               	movf	prodl,w,c
  1350  0014F8  0800               	sublw	0
  1351  0014FA  2421               	addwf	??_main,w,c
  1352  0014FC  EC8E  F00E         	call	_glcdDrawPixel
  1353                           
  1354                           ;main.c: 99: }
  1355  001500  D028               	goto	l1891
  1356  001502                     l1887:
  1357                           
  1358                           ;main.c: 100: else{
  1359                           ;main.c: 101: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1360  001502  C029  F001         	movff	main@x,___wmul@multiplier
  1361  001506  6A02               	clrf	___wmul@multiplier+1,c
  1362  001508  0E08               	movlw	8
  1363  00150A  6E04               	movwf	___wmul@multiplicand+1,c
  1364  00150C  0E00               	movlw	0
  1365  00150E  6E03               	movwf	___wmul@multiplicand,c
  1366  001510  EC4B  F00F         	call	___wmul	;wreg free
  1367  001514  C001  F024         	movff	?___wmul,_main$1095
  1368  001518  C002  F025         	movff	?___wmul+1,_main$1095+1
  1369  00151C  0E00               	movlw	0
  1370  00151E  BE25               	btfsc	_main$1095+1,7,c
  1371  001520  0EFF               	movlw	-1
  1372  001522  6E26               	movwf	_main$1095+2,c
  1373  001524  6E27               	movwf	_main$1095+3,c
  1374                           
  1375                           ;main.c: 100: else{
  1376                           ;main.c: 101: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1377  001526  0E69               	movlw	low _GLCD_SIZE_VERT
  1378  001528  6EF6               	movwf	tblptrl,c
  1379  00152A                     	if	1	;There is more than 1 active tblptr byte
  1380  00152A  0E10               	movlw	high _GLCD_SIZE_VERT
  1381  00152C  6EF7               	movwf	tblptrh,c
  1382  00152E                     	endif
  1383  00152E                     	if	0	;There are less than 3 active tblptr bytes
  1384  00152E                     	endif
  1385  00152E  0008               	tblrd		*
  1386  001530  CFF5 F021          	movff	tablat,??_main
  1387  001534  5029               	movf	main@x,w,c
  1388  001536  0800               	sublw	0
  1389  001538  2421               	addwf	??_main,w,c
  1390  00153A  6E1A               	movwf	glcdDrawPixel@YS,c
  1391  00153C  C024  F01B         	movff	_main$1095,glcdDrawPixel@color
  1392  001540  C025  F01C         	movff	_main$1095+1,glcdDrawPixel@color+1
  1393  001544  C026  F01D         	movff	_main$1095+2,glcdDrawPixel@color+2
  1394  001548  C027  F01E         	movff	_main$1095+3,glcdDrawPixel@color+3
  1395  00154C  5029               	movf	main@x,w,c
  1396  00154E  EC8E  F00E         	call	_glcdDrawPixel
  1397  001552                     l1891:
  1398                           
  1399                           ;main.c: 102: }
  1400                           ;main.c: 103: _delay((unsigned long)((10)*(40000000/4000.0)));
  1401  001552  0E82               	movlw	130
  1402  001554  6E21               	movwf	??_main& (0+255),c
  1403  001556  0EDE               	movlw	222
  1404  001558                     u977:
  1405  001558  2EE8               	decfsz	wreg,f,c
  1406  00155A  D7FE               	bra	u977
  1407  00155C  2E21               	decfsz	??_main& (0+255),f,c
  1408  00155E  D7FC               	bra	u977
  1409  001560  2A29               	incf	main@x,f,c
  1410  001562  D775               	goto	l1877
  1411  001564                     l1895:
  1412                           
  1413                           ;main.c: 104: }
  1414                           ;main.c: 107: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1415  001564  0E00               	movlw	0
  1416  001566  6E28               	movwf	main@y,c
  1417  001568                     l1897:
  1418  001568  0E69               	movlw	low _GLCD_SIZE_VERT
  1419  00156A  6EF6               	movwf	tblptrl,c
  1420  00156C                     	if	1	;There is more than 1 active tblptr byte
  1421  00156C  0E10               	movlw	high _GLCD_SIZE_VERT
  1422  00156E  6EF7               	movwf	tblptrh,c
  1423  001570                     	endif
  1424  001570                     	if	0	;There are less than 3 active tblptr bytes
  1425  001570                     	endif
  1426  001570  0009               	tblrd		*+
  1427  001572  50F5               	movf	tablat,w,c
  1428  001574  5C28               	subwf	main@y,w,c
  1429  001576  B0D8               	btfsc	status,0,c
  1430  001578  D028               	goto	l1917
  1431                           
  1432                           ;main.c: 108: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1433  00157A  0E00               	movlw	0
  1434  00157C  6E29               	movwf	main@x,c
  1435  00157E                     l1903:
  1436  00157E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1437  001580  6EF6               	movwf	tblptrl,c
  1438  001582                     	if	1	;There is more than 1 active tblptr byte
  1439  001582  0E10               	movlw	high _GLCD_SIZE_HORZ
  1440  001584  6EF7               	movwf	tblptrh,c
  1441  001586                     	endif
  1442  001586                     	if	0	;There are less than 3 active tblptr bytes
  1443  001586                     	endif
  1444  001586  0009               	tblrd		*+
  1445  001588  50F5               	movf	tablat,w,c
  1446  00158A  5C29               	subwf	main@x,w,c
  1447  00158C  B0D8               	btfsc	status,0,c
  1448  00158E  D01B               	goto	l1913
  1449                           
  1450                           ;main.c: 109: glcdDrawPixel(x, y, x*y*16);
  1451  001590  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1452  001594  5029               	movf	main@x,w,c
  1453  001596  0228               	mulwf	main@y,c
  1454  001598  3AF3               	swapf	prodl,f,c
  1455  00159A  3AF4               	swapf	prodh,f,c
  1456  00159C  0EF0               	movlw	240
  1457  00159E  16F4               	andwf	prodh,f,c
  1458  0015A0  50F3               	movf	prodl,w,c
  1459  0015A2  0B0F               	andlw	15
  1460  0015A4  12F4               	iorwf	prodh,f,c
  1461  0015A6  0EF0               	movlw	240
  1462  0015A8  16F3               	andwf	prodl,f,c
  1463  0015AA  CFF3 F01B          	movff	prodl,glcdDrawPixel@color
  1464  0015AE  CFF4 F01C          	movff	prodh,glcdDrawPixel@color+1
  1465  0015B2  0E00               	movlw	0
  1466  0015B4  BE1C               	btfsc	glcdDrawPixel@color+1,7,c
  1467  0015B6  0EFF               	movlw	-1
  1468  0015B8  6E1D               	movwf	glcdDrawPixel@color+2,c
  1469  0015BA  6E1E               	movwf	glcdDrawPixel@color+3,c
  1470  0015BC  5029               	movf	main@x,w,c
  1471  0015BE  EC8E  F00E         	call	_glcdDrawPixel
  1472  0015C2  2A29               	incf	main@x,f,c
  1473  0015C4  D7DC               	goto	l1903
  1474  0015C6                     l1913:
  1475  0015C6  2A28               	incf	main@y,f,c
  1476  0015C8  D7CF               	goto	l1897
  1477  0015CA                     l1917:
  1478                           
  1479                           ;main.c: 110: }
  1480                           ;main.c: 111: }
  1481                           ;main.c: 114: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1482  0015CA  0E00               	movlw	0
  1483  0015CC  6E28               	movwf	main@y,c
  1484  0015CE                     l1919:
  1485  0015CE  0E69               	movlw	low _GLCD_SIZE_VERT
  1486  0015D0  6EF6               	movwf	tblptrl,c
  1487  0015D2                     	if	1	;There is more than 1 active tblptr byte
  1488  0015D2  0E10               	movlw	high _GLCD_SIZE_VERT
  1489  0015D4  6EF7               	movwf	tblptrh,c
  1490  0015D6                     	endif
  1491  0015D6                     	if	0	;There are less than 3 active tblptr bytes
  1492  0015D6                     	endif
  1493  0015D6  0009               	tblrd		*+
  1494  0015D8  50F5               	movf	tablat,w,c
  1495  0015DA  5C28               	subwf	main@y,w,c
  1496  0015DC  B0D8               	btfsc	status,0,c
  1497  0015DE  D033               	goto	l1941
  1498                           
  1499                           ;main.c: 115: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1500  0015E0  0E00               	movlw	0
  1501  0015E2  6E29               	movwf	main@x,c
  1502  0015E4                     l1925:
  1503  0015E4  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1504  0015E6  6EF6               	movwf	tblptrl,c
  1505  0015E8                     	if	1	;There is more than 1 active tblptr byte
  1506  0015E8  0E10               	movlw	high _GLCD_SIZE_HORZ
  1507  0015EA  6EF7               	movwf	tblptrh,c
  1508  0015EC                     	endif
  1509  0015EC                     	if	0	;There are less than 3 active tblptr bytes
  1510  0015EC                     	endif
  1511  0015EC  0009               	tblrd		*+
  1512  0015EE  50F5               	movf	tablat,w,c
  1513  0015F0  5C29               	subwf	main@x,w,c
  1514  0015F2  B0D8               	btfsc	status,0,c
  1515  0015F4  D026               	goto	l1937
  1516                           
  1517                           ;main.c: 116: glcdDrawPixel(x, y, (x+8)*(y+8));
  1518  0015F6  0E08               	movlw	8
  1519  0015F8  2429               	addwf	main@x,w,c
  1520  0015FA  6E01               	movwf	___wmul@multiplier,c
  1521  0015FC  6A02               	clrf	___wmul@multiplier+1,c
  1522  0015FE  0E00               	movlw	0
  1523  001600  2202               	addwfc	___wmul@multiplier+1,f,c
  1524  001602  0E08               	movlw	8
  1525  001604  2428               	addwf	main@y,w,c
  1526  001606  6E03               	movwf	___wmul@multiplicand,c
  1527  001608  6A04               	clrf	___wmul@multiplicand+1,c
  1528  00160A  0E00               	movlw	0
  1529  00160C  2204               	addwfc	___wmul@multiplicand+1,f,c
  1530  00160E  EC4B  F00F         	call	___wmul	;wreg free
  1531  001612  C001  F024         	movff	?___wmul,_main$1095
  1532  001616  C002  F025         	movff	?___wmul+1,_main$1095+1
  1533  00161A  0E00               	movlw	0
  1534  00161C  BE25               	btfsc	_main$1095+1,7,c
  1535  00161E  0EFF               	movlw	-1
  1536  001620  6E26               	movwf	_main$1095+2,c
  1537  001622  6E27               	movwf	_main$1095+3,c
  1538                           
  1539                           ;main.c: 116: glcdDrawPixel(x, y, (x+8)*(y+8));
  1540  001624  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1541  001628  C024  F01B         	movff	_main$1095,glcdDrawPixel@color
  1542  00162C  C025  F01C         	movff	_main$1095+1,glcdDrawPixel@color+1
  1543  001630  C026  F01D         	movff	_main$1095+2,glcdDrawPixel@color+2
  1544  001634  C027  F01E         	movff	_main$1095+3,glcdDrawPixel@color+3
  1545  001638  5029               	movf	main@x,w,c
  1546  00163A  EC8E  F00E         	call	_glcdDrawPixel
  1547  00163E  2A29               	incf	main@x,f,c
  1548  001640  D7D1               	goto	l1925
  1549  001642                     l1937:
  1550  001642  2A28               	incf	main@y,f,c
  1551  001644  D7C4               	goto	l1919
  1552  001646                     l1941:
  1553                           
  1554                           ;main.c: 117: }
  1555                           ;main.c: 118: }
  1556                           ;main.c: 127: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1557  001646  0E00               	movlw	0
  1558  001648  6E28               	movwf	main@y,c
  1559  00164A                     l1943:
  1560  00164A  0E69               	movlw	low _GLCD_SIZE_VERT
  1561  00164C  6EF6               	movwf	tblptrl,c
  1562  00164E                     	if	1	;There is more than 1 active tblptr byte
  1563  00164E  0E10               	movlw	high _GLCD_SIZE_VERT
  1564  001650  6EF7               	movwf	tblptrh,c
  1565  001652                     	endif
  1566  001652                     	if	0	;There are less than 3 active tblptr bytes
  1567  001652                     	endif
  1568  001652  0009               	tblrd		*+
  1569  001654  50F5               	movf	tablat,w,c
  1570  001656  5C28               	subwf	main@y,w,c
  1571  001658  B0D8               	btfsc	status,0,c
  1572  00165A  D024               	goto	l1963
  1573                           
  1574                           ;main.c: 128: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1575  00165C  0E00               	movlw	0
  1576  00165E  6E29               	movwf	main@x,c
  1577  001660                     l1949:
  1578  001660  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1579  001662  6EF6               	movwf	tblptrl,c
  1580  001664                     	if	1	;There is more than 1 active tblptr byte
  1581  001664  0E10               	movlw	high _GLCD_SIZE_HORZ
  1582  001666  6EF7               	movwf	tblptrh,c
  1583  001668                     	endif
  1584  001668                     	if	0	;There are less than 3 active tblptr bytes
  1585  001668                     	endif
  1586  001668  0009               	tblrd		*+
  1587  00166A  50F5               	movf	tablat,w,c
  1588  00166C  5C29               	subwf	main@x,w,c
  1589  00166E  B0D8               	btfsc	status,0,c
  1590  001670  D017               	goto	l1959
  1591                           
  1592                           ;main.c: 129: glcdDrawPixel(x, y, GREEN);
  1593  001672  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1594  001676  0E0D               	movlw	low _GREEN
  1595  001678  6EF6               	movwf	tblptrl,c
  1596  00167A                     	if	1	;There is more than 1 active tblptr byte
  1597  00167A  0E10               	movlw	high _GREEN
  1598  00167C  6EF7               	movwf	tblptrh,c
  1599  00167E                     	endif
  1600  00167E                     	if	0	;There are less than 3 active tblptr bytes
  1601  00167E                     	endif
  1602  00167E  0009               	tblrd		*+
  1603  001680  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1604  001684  0009               	tblrd		*+
  1605  001686  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1606  00168A  0009               	tblrd		*+
  1607  00168C  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1608  001690  000A               	tblrd		*-
  1609  001692  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1610  001696  5029               	movf	main@x,w,c
  1611  001698  EC8E  F00E         	call	_glcdDrawPixel
  1612  00169C  2A29               	incf	main@x,f,c
  1613  00169E  D7E0               	goto	l1949
  1614  0016A0                     l1959:
  1615  0016A0  2A28               	incf	main@y,f,c
  1616  0016A2  D7D3               	goto	l1943
  1617  0016A4                     l1963:
  1618                           
  1619                           ;main.c: 130: }
  1620                           ;main.c: 131: }
  1621                           ;main.c: 137: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1622  0016A4  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1623  0016A6  6EF6               	movwf	tblptrl,c
  1624  0016A8                     	if	1	;There is more than 1 active tblptr byte
  1625  0016A8  0E10               	movlw	high _GLCD_SIZE_HORZ
  1626  0016AA  6EF7               	movwf	tblptrh,c
  1627  0016AC                     	endif
  1628  0016AC                     	if	0	;There are less than 3 active tblptr bytes
  1629  0016AC                     	endif
  1630  0016AC  0008               	tblrd		*
  1631  0016AE  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1632  0016B2  0E00               	movlw	0
  1633  0016B4  6E08               	movwf	glcdDrawRectangle@YS,c
  1634  0016B6  0E69               	movlw	low _GLCD_SIZE_VERT
  1635  0016B8  6EF6               	movwf	tblptrl,c
  1636  0016BA                     	if	1	;There is more than 1 active tblptr byte
  1637  0016BA  0E10               	movlw	high _GLCD_SIZE_VERT
  1638  0016BC  6EF7               	movwf	tblptrh,c
  1639  0016BE                     	endif
  1640  0016BE                     	if	0	;There are less than 3 active tblptr bytes
  1641  0016BE                     	endif
  1642  0016BE  0008               	tblrd		*
  1643  0016C0  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1644  0016C4  0E25               	movlw	low _BLACK
  1645  0016C6  6EF6               	movwf	tblptrl,c
  1646  0016C8                     	if	1	;There is more than 1 active tblptr byte
  1647  0016C8  0E10               	movlw	high _BLACK
  1648  0016CA  6EF7               	movwf	tblptrh,c
  1649  0016CC                     	endif
  1650  0016CC                     	if	0	;There are less than 3 active tblptr bytes
  1651  0016CC                     	endif
  1652  0016CC  0009               	tblrd		*+
  1653  0016CE  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1654  0016D2  0009               	tblrd		*+
  1655  0016D4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1656  0016D8  0009               	tblrd		*+
  1657  0016DA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1658  0016DE  000A               	tblrd		*-
  1659  0016E0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1660  0016E4  0E00               	movlw	0
  1661  0016E6  EC54  F00D         	call	_glcdDrawRectangle
  1662                           
  1663                           ;main.c: 138: for(y = 0; y < 5; y++){
  1664  0016EA  0E00               	movlw	0
  1665  0016EC  6E28               	movwf	main@y,c
  1666  0016EE                     l1967:
  1667  0016EE  0E04               	movlw	4
  1668  0016F0  6428               	cpfsgt	main@y,c
  1669  0016F2  D001               	goto	l1971
  1670  0016F4  D03C               	goto	l1999
  1671  0016F6                     l1971:
  1672                           
  1673                           ;main.c: 139: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1674  0016F6  0E00               	movlw	0
  1675  0016F8  6E29               	movwf	main@x,c
  1676  0016FA                     l1973:
  1677  0016FA  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1678  0016FC  6EF6               	movwf	tblptrl,c
  1679  0016FE                     	if	1	;There is more than 1 active tblptr byte
  1680  0016FE  0E10               	movlw	high _GLCD_SIZE_HORZ
  1681  001700  6EF7               	movwf	tblptrh,c
  1682  001702                     	endif
  1683  001702                     	if	0	;There are less than 3 active tblptr bytes
  1684  001702                     	endif
  1685  001702  0009               	tblrd		*+
  1686  001704  50F5               	movf	tablat,w,c
  1687  001706  5C29               	subwf	main@x,w,c
  1688  001708  B0D8               	btfsc	status,0,c
  1689  00170A  D01F               	goto	l1985
  1690                           
  1691                           ;main.c: 140: glcdDrawPixel(x, y, WHITE);
  1692  00170C  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1693  001710  0E1D               	movlw	low _WHITE
  1694  001712  6EF6               	movwf	tblptrl,c
  1695  001714                     	if	1	;There is more than 1 active tblptr byte
  1696  001714  0E10               	movlw	high _WHITE
  1697  001716  6EF7               	movwf	tblptrh,c
  1698  001718                     	endif
  1699  001718                     	if	0	;There are less than 3 active tblptr bytes
  1700  001718                     	endif
  1701  001718  0009               	tblrd		*+
  1702  00171A  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1703  00171E  0009               	tblrd		*+
  1704  001720  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1705  001724  0009               	tblrd		*+
  1706  001726  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1707  00172A  000A               	tblrd		*-
  1708  00172C  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1709  001730  5029               	movf	main@x,w,c
  1710  001732  EC8E  F00E         	call	_glcdDrawPixel
  1711                           
  1712                           ;main.c: 141: _delay((unsigned long)((5)*(40000000/4000.0)));
  1713  001736  0E41               	movlw	65
  1714  001738  6E21               	movwf	??_main& (0+255),c
  1715  00173A  0EEE               	movlw	238
  1716  00173C                     u987:
  1717  00173C  2EE8               	decfsz	wreg,f,c
  1718  00173E  D7FE               	bra	u987
  1719  001740  2E21               	decfsz	??_main& (0+255),f,c
  1720  001742  D7FC               	bra	u987
  1721  001744  D000               	nop2	
  1722  001746  2A29               	incf	main@x,f,c
  1723  001748  D7D8               	goto	l1973
  1724  00174A                     l1985:
  1725  00174A  2A28               	incf	main@y,f,c
  1726  00174C  D7D0               	goto	l1967
  1727  00174E                     l1989:
  1728                           
  1729                           ;main.c: 148: glcdSetOrigin(1);
  1730  00174E  0E01               	movlw	1
  1731  001750  ECC5  F00E         	call	_glcdSetOrigin
  1732                           
  1733                           ;main.c: 149: break;
  1734  001754  D021               	goto	l2001
  1735  001756                     l1991:
  1736                           
  1737                           ;main.c: 151: glcdSetOrigin(2);
  1738  001756  0E02               	movlw	2
  1739  001758  ECC5  F00E         	call	_glcdSetOrigin
  1740                           
  1741                           ;main.c: 152: break;
  1742  00175C  D01D               	goto	l2001
  1743  00175E                     l1993:
  1744                           
  1745                           ;main.c: 154: glcdSetOrigin(3);
  1746  00175E  0E03               	movlw	3
  1747  001760  ECC5  F00E         	call	_glcdSetOrigin
  1748                           
  1749                           ;main.c: 155: break;
  1750  001764  D019               	goto	l2001
  1751  001766                     l1995:
  1752                           
  1753                           ;main.c: 157: glcdSetOrigin(0);
  1754  001766  0E00               	movlw	0
  1755  001768  ECC5  F00E         	call	_glcdSetOrigin
  1756                           
  1757                           ;main.c: 159: }
  1758                           
  1759                           ;main.c: 158: break;
  1760  00176C  D015               	goto	l2001
  1761  00176E                     l1999:
  1762  00176E  5023               	movf	main@rotation,w,c
  1763  001770  0B03               	andlw	3
  1764  001772  6E21               	movwf	??_main& (0+255),c
  1765  001774  6A22               	clrf	(??_main+1)& (0+255),c
  1766                           
  1767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1768                           ; Switch size 1, requested type "space"
  1769                           ; Number of cases is 1, Range of values is 0 to 0
  1770                           ; switch strategies available:
  1771                           ; Name         Instructions Cycles
  1772                           ; simple_byte            4     3 (average)
  1773                           ;	Chosen strategy is simple_byte
  1774  001776  5022               	movf	??_main+1,w,c
  1775  001778  0A00               	xorlw	0	; case 0
  1776  00177A  A4D8               	btfss	status,2,c
  1777  00177C  D00D               	goto	l2001
  1778                           
  1779                           ; Switch size 1, requested type "space"
  1780                           ; Number of cases is 4, Range of values is 0 to 3
  1781                           ; switch strategies available:
  1782                           ; Name         Instructions Cycles
  1783                           ; simple_byte           13     7 (average)
  1784                           ;	Chosen strategy is simple_byte
  1785  00177E  5021               	movf	??_main,w,c
  1786  001780  0A00               	xorlw	0	; case 0
  1787  001782  B4D8               	btfsc	status,2,c
  1788  001784  D7E4               	goto	l1989
  1789  001786  0A01               	xorlw	1	; case 1
  1790  001788  B4D8               	btfsc	status,2,c
  1791  00178A  D7E5               	goto	l1991
  1792  00178C  0A03               	xorlw	3	; case 2
  1793  00178E  B4D8               	btfsc	status,2,c
  1794  001790  D7E6               	goto	l1993
  1795  001792  0A01               	xorlw	1	; case 3
  1796  001794  B4D8               	btfsc	status,2,c
  1797  001796  D7E7               	goto	l1995
  1798  001798                     l2001:
  1799                           
  1800                           ;main.c: 160: rotation++;
  1801  001798  2A23               	incf	main@rotation,f,c
  1802  00179A  D487               	goto	l133
  1803  00179C                     __end_of_main:
  1804                           	opt stack 0
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           prodh	equ	0xFF4
  1810                           prodl	equ	0xFF3
  1811                           wreg	equ	0xFE8
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _initGLCD *****************
  1815 ;; Defined at:
  1816 ;;		line 238 in file "GLCD_PIC_V1.1.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;Total ram usage:        2 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    4
  1837 ;; This function calls:
  1838 ;;		_glcdDrawRectangle
  1839 ;;		_glcdSetCOLMOD
  1840 ;;		_glcdTransfer
  1841 ;;		_spiInit
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text1
  1848  00179C                     __ptext1:
  1849                           	opt stack 0
  1850  00179C                     _initGLCD:
  1851                           	opt stack 26
  1852                           
  1853                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
  1854                           
  1855                           ;incstack = 0
  1856  00179C  808C               	bsf	3980,0,c	;volatile
  1857                           
  1858                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
  1859  00179E  828C               	bsf	3980,1,c	;volatile
  1860                           
  1861                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
  1862  0017A0  9095               	bcf	3989,0,c	;volatile
  1863                           
  1864                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
  1865  0017A2  9295               	bcf	3989,1,c	;volatile
  1866                           
  1867                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
  1868  0017A4  0E04               	movlw	4
  1869  0017A6  EC1B  F00F         	call	_spiInit
  1870                           
  1871                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(40000000/4000.0)));
  1872  0017AA  0E02               	movlw	2
  1873  0017AC  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1874  0017AE  0E04               	movlw	4
  1875  0017B0  6E1A               	movwf	??_initGLCD& (0+255),c
  1876  0017B2  0EBA               	movlw	186
  1877  0017B4                     u997:
  1878  0017B4  2EE8               	decfsz	wreg,f,c
  1879  0017B6  D7FE               	bra	u997
  1880  0017B8  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1881  0017BA  D7FC               	bra	u997
  1882  0017BC  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1883  0017BE  D7FA               	bra	u997
  1884  0017C0  D000               	nop2	
  1885                           
  1886                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
  1887  0017C2  0E01               	movlw	1
  1888  0017C4  6E04               	movwf	glcdTransfer@cmd,c
  1889  0017C6  0E47               	movlw	low GLCD_PIC@INST_SWRESET
  1890  0017C8  6EF6               	movwf	tblptrl,c
  1891  0017CA                     	if	1	;There is more than 1 active tblptr byte
  1892  0017CA  0E10               	movlw	high GLCD_PIC@INST_SWRESET
  1893  0017CC  6EF7               	movwf	tblptrh,c
  1894  0017CE                     	endif
  1895  0017CE                     	if	0	;There are less than 3 active tblptr bytes
  1896  0017CE                     	endif
  1897  0017CE  0008               	tblrd		*
  1898  0017D0  50F5               	movf	tablat,w,c
  1899  0017D2  EC37  F00F         	call	_glcdTransfer
  1900  0017D6  0E07               	movlw	7
  1901  0017D8  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1902  0017DA  0E99               	movlw	153
  1903  0017DC  6E1A               	movwf	??_initGLCD& (0+255),c
  1904  0017DE  0E49               	movlw	73
  1905  0017E0                     u1007:
  1906  0017E0  2EE8               	decfsz	wreg,f,c
  1907  0017E2  D7FE               	bra	u1007
  1908  0017E4  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1909  0017E6  D7FC               	bra	u1007
  1910  0017E8  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1911  0017EA  D7FA               	bra	u1007
  1912  0017EC  F000               	nop	
  1913                           
  1914                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
  1915  0017EE  0E01               	movlw	1
  1916  0017F0  6E04               	movwf	glcdTransfer@cmd,c
  1917  0017F2  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
  1918  0017F4  6EF6               	movwf	tblptrl,c
  1919  0017F6                     	if	1	;There is more than 1 active tblptr byte
  1920  0017F6  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
  1921  0017F8  6EF7               	movwf	tblptrh,c
  1922  0017FA                     	endif
  1923  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  1924  0017FA                     	endif
  1925  0017FA  0008               	tblrd		*
  1926  0017FC  50F5               	movf	tablat,w,c
  1927  0017FE  EC37  F00F         	call	_glcdTransfer
  1928  001802  0E07               	movlw	7
  1929  001804  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1930  001806  0E99               	movlw	153
  1931  001808  6E1A               	movwf	??_initGLCD& (0+255),c
  1932  00180A  0E49               	movlw	73
  1933  00180C                     u1017:
  1934  00180C  2EE8               	decfsz	wreg,f,c
  1935  00180E  D7FE               	bra	u1017
  1936  001810  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1937  001812  D7FC               	bra	u1017
  1938  001814  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1939  001816  D7FA               	bra	u1017
  1940  001818  F000               	nop	
  1941                           
  1942                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  1943  00181A  0E01               	movlw	1
  1944  00181C  6E04               	movwf	glcdTransfer@cmd,c
  1945  00181E  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
  1946  001820  6EF6               	movwf	tblptrl,c
  1947  001822                     	if	1	;There is more than 1 active tblptr byte
  1948  001822  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
  1949  001824  6EF7               	movwf	tblptrh,c
  1950  001826                     	endif
  1951  001826                     	if	0	;There are less than 3 active tblptr bytes
  1952  001826                     	endif
  1953  001826  0008               	tblrd		*
  1954  001828  50F5               	movf	tablat,w,c
  1955  00182A  EC37  F00F         	call	_glcdTransfer
  1956                           
  1957                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
  1958  00182E  0E00               	movlw	0
  1959  001830  6E04               	movwf	glcdTransfer@cmd,c
  1960  001832  0E00               	movlw	0
  1961  001834  EC37  F00F         	call	_glcdTransfer
  1962                           
  1963                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
  1964  001838  0E00               	movlw	0
  1965  00183A  6E04               	movwf	glcdTransfer@cmd,c
  1966  00183C  0E06               	movlw	6
  1967  00183E  EC37  F00F         	call	_glcdTransfer
  1968                           
  1969                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
  1970  001842  0E00               	movlw	0
  1971  001844  6E04               	movwf	glcdTransfer@cmd,c
  1972  001846  0E03               	movlw	3
  1973  001848  EC37  F00F         	call	_glcdTransfer
  1974                           
  1975                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  1976  00184C  0E01               	movlw	1
  1977  00184E  6E04               	movwf	glcdTransfer@cmd,c
  1978  001850  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
  1979  001852  6EF6               	movwf	tblptrl,c
  1980  001854                     	if	1	;There is more than 1 active tblptr byte
  1981  001854  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
  1982  001856  6EF7               	movwf	tblptrh,c
  1983  001858                     	endif
  1984  001858                     	if	0	;There are less than 3 active tblptr bytes
  1985  001858                     	endif
  1986  001858  0008               	tblrd		*
  1987  00185A  50F5               	movf	tablat,w,c
  1988  00185C  EC37  F00F         	call	_glcdTransfer
  1989                           
  1990                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
  1991  001860  0E00               	movlw	0
  1992  001862  6E04               	movwf	glcdTransfer@cmd,c
  1993  001864  0E01               	movlw	1
  1994  001866  EC37  F00F         	call	_glcdTransfer
  1995                           
  1996                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
  1997  00186A  0E00               	movlw	0
  1998  00186C  6E04               	movwf	glcdTransfer@cmd,c
  1999  00186E  0E2C               	movlw	44
  2000  001870  EC37  F00F         	call	_glcdTransfer
  2001                           
  2002                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
  2003  001874  0E00               	movlw	0
  2004  001876  6E04               	movwf	glcdTransfer@cmd,c
  2005  001878  0E2D               	movlw	45
  2006  00187A  EC37  F00F         	call	_glcdTransfer
  2007                           
  2008                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  2009  00187E  0E01               	movlw	1
  2010  001880  6E04               	movwf	glcdTransfer@cmd,c
  2011  001882  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
  2012  001884  6EF6               	movwf	tblptrl,c
  2013  001886                     	if	1	;There is more than 1 active tblptr byte
  2014  001886  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
  2015  001888  6EF7               	movwf	tblptrh,c
  2016  00188A                     	endif
  2017  00188A                     	if	0	;There are less than 3 active tblptr bytes
  2018  00188A                     	endif
  2019  00188A  0008               	tblrd		*
  2020  00188C  50F5               	movf	tablat,w,c
  2021  00188E  EC37  F00F         	call	_glcdTransfer
  2022                           
  2023                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
  2024  001892  0E00               	movlw	0
  2025  001894  6E04               	movwf	glcdTransfer@cmd,c
  2026  001896  0E01               	movlw	1
  2027  001898  EC37  F00F         	call	_glcdTransfer
  2028                           
  2029                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
  2030  00189C  0E00               	movlw	0
  2031  00189E  6E04               	movwf	glcdTransfer@cmd,c
  2032  0018A0  0E2C               	movlw	44
  2033  0018A2  EC37  F00F         	call	_glcdTransfer
  2034                           
  2035                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  2036  0018A6  0E00               	movlw	0
  2037  0018A8  6E04               	movwf	glcdTransfer@cmd,c
  2038  0018AA  0E2D               	movlw	45
  2039  0018AC  EC37  F00F         	call	_glcdTransfer
  2040                           
  2041                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  2042  0018B0  0E01               	movlw	1
  2043  0018B2  6E04               	movwf	glcdTransfer@cmd,c
  2044  0018B4  0E30               	movlw	low GLCD_PIC@INST_INVCTR
  2045  0018B6  6EF6               	movwf	tblptrl,c
  2046  0018B8                     	if	1	;There is more than 1 active tblptr byte
  2047  0018B8  0E10               	movlw	high GLCD_PIC@INST_INVCTR
  2048  0018BA  6EF7               	movwf	tblptrh,c
  2049  0018BC                     	endif
  2050  0018BC                     	if	0	;There are less than 3 active tblptr bytes
  2051  0018BC                     	endif
  2052  0018BC  0008               	tblrd		*
  2053  0018BE  50F5               	movf	tablat,w,c
  2054  0018C0  EC37  F00F         	call	_glcdTransfer
  2055                           
  2056                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  2057  0018C4  0E00               	movlw	0
  2058  0018C6  6E04               	movwf	glcdTransfer@cmd,c
  2059  0018C8  0E00               	movlw	0
  2060  0018CA  EC37  F00F         	call	_glcdTransfer
  2061                           
  2062                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  2063  0018CE  0E01               	movlw	1
  2064  0018D0  6E04               	movwf	glcdTransfer@cmd,c
  2065  0018D2  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
  2066  0018D4  6EF6               	movwf	tblptrl,c
  2067  0018D6                     	if	1	;There is more than 1 active tblptr byte
  2068  0018D6  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
  2069  0018D8  6EF7               	movwf	tblptrh,c
  2070  0018DA                     	endif
  2071  0018DA                     	if	0	;There are less than 3 active tblptr bytes
  2072  0018DA                     	endif
  2073  0018DA  0008               	tblrd		*
  2074  0018DC  50F5               	movf	tablat,w,c
  2075  0018DE  EC37  F00F         	call	_glcdTransfer
  2076                           
  2077                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  2078  0018E2  0E00               	movlw	0
  2079  0018E4  6E04               	movwf	glcdTransfer@cmd,c
  2080  0018E6  0EA2               	movlw	162
  2081  0018E8  EC37  F00F         	call	_glcdTransfer
  2082                           
  2083                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  2084  0018EC  0E00               	movlw	0
  2085  0018EE  6E04               	movwf	glcdTransfer@cmd,c
  2086  0018F0  0E02               	movlw	2
  2087  0018F2  EC37  F00F         	call	_glcdTransfer
  2088                           
  2089                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  2090  0018F6  0E00               	movlw	0
  2091  0018F8  6E04               	movwf	glcdTransfer@cmd,c
  2092  0018FA  0E84               	movlw	132
  2093  0018FC  EC37  F00F         	call	_glcdTransfer
  2094                           
  2095                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  2096  001900  0E01               	movlw	1
  2097  001902  6E04               	movwf	glcdTransfer@cmd,c
  2098  001904  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  2099  001906  6EF6               	movwf	tblptrl,c
  2100  001908                     	if	1	;There is more than 1 active tblptr byte
  2101  001908  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  2102  00190A  6EF7               	movwf	tblptrh,c
  2103  00190C                     	endif
  2104  00190C                     	if	0	;There are less than 3 active tblptr bytes
  2105  00190C                     	endif
  2106  00190C  0008               	tblrd		*
  2107  00190E  50F5               	movf	tablat,w,c
  2108  001910  EC37  F00F         	call	_glcdTransfer
  2109                           
  2110                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  2111  001914  0E00               	movlw	0
  2112  001916  6E04               	movwf	glcdTransfer@cmd,c
  2113  001918  0EC5               	movlw	197
  2114  00191A  EC37  F00F         	call	_glcdTransfer
  2115                           
  2116                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  2117  00191E  0E01               	movlw	1
  2118  001920  6E04               	movwf	glcdTransfer@cmd,c
  2119  001922  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  2120  001924  6EF6               	movwf	tblptrl,c
  2121  001926                     	if	1	;There is more than 1 active tblptr byte
  2122  001926  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  2123  001928  6EF7               	movwf	tblptrh,c
  2124  00192A                     	endif
  2125  00192A                     	if	0	;There are less than 3 active tblptr bytes
  2126  00192A                     	endif
  2127  00192A  0008               	tblrd		*
  2128  00192C  50F5               	movf	tablat,w,c
  2129  00192E  EC37  F00F         	call	_glcdTransfer
  2130                           
  2131                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  2132  001932  0E00               	movlw	0
  2133  001934  6E04               	movwf	glcdTransfer@cmd,c
  2134  001936  0E0A               	movlw	10
  2135  001938  EC37  F00F         	call	_glcdTransfer
  2136                           
  2137                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  2138  00193C  0E00               	movlw	0
  2139  00193E  6E04               	movwf	glcdTransfer@cmd,c
  2140  001940  0E00               	movlw	0
  2141  001942  EC37  F00F         	call	_glcdTransfer
  2142                           
  2143                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  2144  001946  0E01               	movlw	1
  2145  001948  6E04               	movwf	glcdTransfer@cmd,c
  2146  00194A  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  2147  00194C  6EF6               	movwf	tblptrl,c
  2148  00194E                     	if	1	;There is more than 1 active tblptr byte
  2149  00194E  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  2150  001950  6EF7               	movwf	tblptrh,c
  2151  001952                     	endif
  2152  001952                     	if	0	;There are less than 3 active tblptr bytes
  2153  001952                     	endif
  2154  001952  0008               	tblrd		*
  2155  001954  50F5               	movf	tablat,w,c
  2156  001956  EC37  F00F         	call	_glcdTransfer
  2157                           
  2158                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  2159  00195A  0E00               	movlw	0
  2160  00195C  6E04               	movwf	glcdTransfer@cmd,c
  2161  00195E  0E8A               	movlw	138
  2162  001960  EC37  F00F         	call	_glcdTransfer
  2163                           
  2164                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  2165  001964  0E00               	movlw	0
  2166  001966  6E04               	movwf	glcdTransfer@cmd,c
  2167  001968  0E2A               	movlw	42
  2168  00196A  EC37  F00F         	call	_glcdTransfer
  2169                           
  2170                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  2171  00196E  0E01               	movlw	1
  2172  001970  6E04               	movwf	glcdTransfer@cmd,c
  2173  001972  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  2174  001974  6EF6               	movwf	tblptrl,c
  2175  001976                     	if	1	;There is more than 1 active tblptr byte
  2176  001976  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  2177  001978  6EF7               	movwf	tblptrh,c
  2178  00197A                     	endif
  2179  00197A                     	if	0	;There are less than 3 active tblptr bytes
  2180  00197A                     	endif
  2181  00197A  0008               	tblrd		*
  2182  00197C  50F5               	movf	tablat,w,c
  2183  00197E  EC37  F00F         	call	_glcdTransfer
  2184                           
  2185                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  2186  001982  0E00               	movlw	0
  2187  001984  6E04               	movwf	glcdTransfer@cmd,c
  2188  001986  0E8A               	movlw	138
  2189  001988  EC37  F00F         	call	_glcdTransfer
  2190                           
  2191                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  2192  00198C  0E00               	movlw	0
  2193  00198E  6E04               	movwf	glcdTransfer@cmd,c
  2194  001990  0E2A               	movlw	42
  2195  001992  EC37  F00F         	call	_glcdTransfer
  2196                           
  2197                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  2198  001996  0E01               	movlw	1
  2199  001998  6E04               	movwf	glcdTransfer@cmd,c
  2200  00199A  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  2201  00199C  6EF6               	movwf	tblptrl,c
  2202  00199E                     	if	1	;There is more than 1 active tblptr byte
  2203  00199E  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  2204  0019A0  6EF7               	movwf	tblptrh,c
  2205  0019A2                     	endif
  2206  0019A2                     	if	0	;There are less than 3 active tblptr bytes
  2207  0019A2                     	endif
  2208  0019A2  0008               	tblrd		*
  2209  0019A4  50F5               	movf	tablat,w,c
  2210  0019A6  EC37  F00F         	call	_glcdTransfer
  2211                           
  2212                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  2213  0019AA  0E00               	movlw	0
  2214  0019AC  6E04               	movwf	glcdTransfer@cmd,c
  2215  0019AE  0E3C               	movlw	60
  2216  0019B0  EC37  F00F         	call	_glcdTransfer
  2217                           
  2218                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  2219  0019B4  0E01               	movlw	1
  2220  0019B6  6E04               	movwf	glcdTransfer@cmd,c
  2221  0019B8  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  2222  0019BA  6EF6               	movwf	tblptrl,c
  2223  0019BC                     	if	1	;There is more than 1 active tblptr byte
  2224  0019BC  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  2225  0019BE  6EF7               	movwf	tblptrh,c
  2226  0019C0                     	endif
  2227  0019C0                     	if	0	;There are less than 3 active tblptr bytes
  2228  0019C0                     	endif
  2229  0019C0  0008               	tblrd		*
  2230  0019C2  50F5               	movf	tablat,w,c
  2231  0019C4  EC37  F00F         	call	_glcdTransfer
  2232                           
  2233                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  2234  0019C8  0E12               	movlw	18
  2235  0019CA  ECF3  F00E         	call	_glcdSetCOLMOD
  2236                           
  2237                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  2238  0019CE  0E01               	movlw	1
  2239  0019D0  6E04               	movwf	glcdTransfer@cmd,c
  2240  0019D2  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  2241  0019D4  6EF6               	movwf	tblptrl,c
  2242  0019D6                     	if	1	;There is more than 1 active tblptr byte
  2243  0019D6  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  2244  0019D8  6EF7               	movwf	tblptrh,c
  2245  0019DA                     	endif
  2246  0019DA                     	if	0	;There are less than 3 active tblptr bytes
  2247  0019DA                     	endif
  2248  0019DA  0008               	tblrd		*
  2249  0019DC  50F5               	movf	tablat,w,c
  2250  0019DE  EC37  F00F         	call	_glcdTransfer
  2251                           
  2252                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  2253  0019E2  0E00               	movlw	0
  2254  0019E4  6E04               	movwf	glcdTransfer@cmd,c
  2255  0019E6  0E01               	movlw	1
  2256  0019E8  EC37  F00F         	call	_glcdTransfer
  2257                           
  2258                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  2259  0019EC  0E01               	movlw	1
  2260  0019EE  6E04               	movwf	glcdTransfer@cmd,c
  2261  0019F0  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  2262  0019F2  6EF6               	movwf	tblptrl,c
  2263  0019F4                     	if	1	;There is more than 1 active tblptr byte
  2264  0019F4  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  2265  0019F6  6EF7               	movwf	tblptrh,c
  2266  0019F8                     	endif
  2267  0019F8                     	if	0	;There are less than 3 active tblptr bytes
  2268  0019F8                     	endif
  2269  0019F8  0008               	tblrd		*
  2270  0019FA  50F5               	movf	tablat,w,c
  2271  0019FC  EC37  F00F         	call	_glcdTransfer
  2272                           
  2273                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  2274  001A00  0E01               	movlw	1
  2275  001A02  6E04               	movwf	glcdTransfer@cmd,c
  2276  001A04  0E43               	movlw	low GLCD_PIC@INST_NORON
  2277  001A06  6EF6               	movwf	tblptrl,c
  2278  001A08                     	if	1	;There is more than 1 active tblptr byte
  2279  001A08  0E10               	movlw	high GLCD_PIC@INST_NORON
  2280  001A0A  6EF7               	movwf	tblptrh,c
  2281  001A0C                     	endif
  2282  001A0C                     	if	0	;There are less than 3 active tblptr bytes
  2283  001A0C                     	endif
  2284  001A0C  0008               	tblrd		*
  2285  001A0E  50F5               	movf	tablat,w,c
  2286  001A10  EC37  F00F         	call	_glcdTransfer
  2287                           
  2288                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  2289  001A14  8C2A               	bsf	_MADCTLbits,6,c
  2290                           
  2291                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  2292  001A16  8E2A               	bsf	_MADCTLbits,7,c
  2293                           
  2294                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  2295  001A18  8A2A               	bsf	_MADCTLbits,5,c
  2296                           
  2297                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  2298  001A1A  982A               	bcf	_MADCTLbits,4,c
  2299                           
  2300                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  2301  001A1C  962A               	bcf	_MADCTLbits,3,c
  2302                           
  2303                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  2304  001A1E  942A               	bcf	_MADCTLbits,2,c
  2305                           
  2306                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2307  001A20  0E01               	movlw	1
  2308  001A22  6E04               	movwf	glcdTransfer@cmd,c
  2309  001A24  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  2310  001A26  6EF6               	movwf	tblptrl,c
  2311  001A28                     	if	1	;There is more than 1 active tblptr byte
  2312  001A28  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  2313  001A2A  6EF7               	movwf	tblptrh,c
  2314  001A2C                     	endif
  2315  001A2C                     	if	0	;There are less than 3 active tblptr bytes
  2316  001A2C                     	endif
  2317  001A2C  0008               	tblrd		*
  2318  001A2E  50F5               	movf	tablat,w,c
  2319  001A30  EC37  F00F         	call	_glcdTransfer
  2320  001A34  0E00               	movlw	0
  2321  001A36  6E04               	movwf	glcdTransfer@cmd,c
  2322  001A38  502A               	movf	_MADCTLbits,w,c
  2323  001A3A  EC37  F00F         	call	_glcdTransfer
  2324                           
  2325                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  2326  001A3E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2327  001A40  6EF6               	movwf	tblptrl,c
  2328  001A42                     	if	1	;There is more than 1 active tblptr byte
  2329  001A42  0E10               	movlw	high _GLCD_SIZE_HORZ
  2330  001A44  6EF7               	movwf	tblptrh,c
  2331  001A46                     	endif
  2332  001A46                     	if	0	;There are less than 3 active tblptr bytes
  2333  001A46                     	endif
  2334  001A46  0008               	tblrd		*
  2335  001A48  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  2336  001A4C  0E00               	movlw	0
  2337  001A4E  6E08               	movwf	glcdDrawRectangle@YS,c
  2338  001A50  0E69               	movlw	low _GLCD_SIZE_VERT
  2339  001A52  6EF6               	movwf	tblptrl,c
  2340  001A54                     	if	1	;There is more than 1 active tblptr byte
  2341  001A54  0E10               	movlw	high _GLCD_SIZE_VERT
  2342  001A56  6EF7               	movwf	tblptrh,c
  2343  001A58                     	endif
  2344  001A58                     	if	0	;There are less than 3 active tblptr bytes
  2345  001A58                     	endif
  2346  001A58  0008               	tblrd		*
  2347  001A5A  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  2348  001A5E  0E25               	movlw	low _BLACK
  2349  001A60  6EF6               	movwf	tblptrl,c
  2350  001A62                     	if	1	;There is more than 1 active tblptr byte
  2351  001A62  0E10               	movlw	high _BLACK
  2352  001A64  6EF7               	movwf	tblptrh,c
  2353  001A66                     	endif
  2354  001A66                     	if	0	;There are less than 3 active tblptr bytes
  2355  001A66                     	endif
  2356  001A66  0009               	tblrd		*+
  2357  001A68  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  2358  001A6C  0009               	tblrd		*+
  2359  001A6E  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  2360  001A72  0009               	tblrd		*+
  2361  001A74  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  2362  001A78  000A               	tblrd		*-
  2363  001A7A  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  2364  001A7E  0E00               	movlw	0
  2365  001A80  EC54  F00D         	call	_glcdDrawRectangle
  2366                           
  2367                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  2368  001A84  0E01               	movlw	1
  2369  001A86  6E04               	movwf	glcdTransfer@cmd,c
  2370  001A88  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  2371  001A8A  6EF6               	movwf	tblptrl,c
  2372  001A8C                     	if	1	;There is more than 1 active tblptr byte
  2373  001A8C  0E10               	movlw	high GLCD_PIC@INST_DISPON
  2374  001A8E  6EF7               	movwf	tblptrh,c
  2375  001A90                     	endif
  2376  001A90                     	if	0	;There are less than 3 active tblptr bytes
  2377  001A90                     	endif
  2378  001A90  0008               	tblrd		*
  2379  001A92  50F5               	movf	tablat,w,c
  2380  001A94  EC37  F00F         	call	_glcdTransfer
  2381                           
  2382                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(40000000/4000.0)));
  2383  001A98  0E82               	movlw	130
  2384  001A9A  6E1A               	movwf	??_initGLCD& (0+255),c
  2385  001A9C  0EDE               	movlw	222
  2386  001A9E                     u1027:
  2387  001A9E  2EE8               	decfsz	wreg,f,c
  2388  001AA0  D7FE               	bra	u1027
  2389  001AA2  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  2390  001AA4  D7FC               	bra	u1027
  2391  001AA6  0012               	return		;funcret
  2392  001AA8                     __end_of_initGLCD:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           wreg	equ	0xFE8
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _spiInit *****************
  2404 ;; Defined at:
  2405 ;;		line 54 in file "SPI_PIC.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  divider         1    wreg     unsigned char 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  divider         1    0[COMRAM] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;Total ram usage:        1 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_initGLCD
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text2
  2433  001E36                     __ptext2:
  2434                           	opt stack 0
  2435  001E36                     _spiInit:
  2436                           	opt stack 29
  2437                           
  2438                           ;incstack = 0
  2439                           ;spiInit@divider stored from wreg
  2440  001E36  6E01               	movwf	spiInit@divider,c
  2441                           
  2442                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  2443  001E38  9AC6               	bcf	4038,5,c	;volatile
  2444                           
  2445                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  2446  001E3A  0E00               	movlw	0
  2447  001E3C  6EC7               	movwf	4039,c	;volatile
  2448                           
  2449                           ;SPI_PIC.c: 71: switch(divider){
  2450  001E3E  D007               	goto	l1595
  2451  001E40                     l1589:
  2452                           
  2453                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  2454  001E40  0E11               	movlw	17
  2455  001E42  D003               	goto	L3
  2456  001E44                     l1591:
  2457                           
  2458                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  2459  001E44  0E12               	movlw	18
  2460  001E46  D001               	goto	L3
  2461  001E48                     l1593:
  2462                           
  2463                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  2464  001E48  0E10               	movlw	16
  2465  001E4A                     L3:
  2466  001E4A  6EC6               	movwf	4038,c	;volatile
  2467                           
  2468                           ;SPI_PIC.c: 83: }
  2469  001E4C  D00B               	goto	l193
  2470  001E4E                     l1595:
  2471  001E4E  5001               	movf	spiInit@divider,w,c
  2472                           
  2473                           ; Switch size 1, requested type "space"
  2474                           ; Number of cases is 3, Range of values is 4 to 64
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; simple_byte           10     6 (average)
  2478                           ;	Chosen strategy is simple_byte
  2479  001E50  0A04               	xorlw	4	; case 4
  2480  001E52  B4D8               	btfsc	status,2,c
  2481  001E54  D7F9               	goto	l1593
  2482  001E56  0A14               	xorlw	20	; case 16
  2483  001E58  B4D8               	btfsc	status,2,c
  2484  001E5A  D7F2               	goto	l1589
  2485  001E5C  0A50               	xorlw	80	; case 64
  2486  001E5E  B4D8               	btfsc	status,2,c
  2487  001E60  D7F1               	goto	l1591
  2488  001E62  D7F2               	goto	l1593
  2489  001E64                     l193:
  2490                           
  2491                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  2492  001E64  9A94               	bcf	3988,5,c	;volatile
  2493                           
  2494                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  2495  001E66  8894               	bsf	3988,4,c	;volatile
  2496                           
  2497                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  2498  001E68  9694               	bcf	3988,3,c	;volatile
  2499                           
  2500                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  2501  001E6A  8AC6               	bsf	4038,5,c	;volatile
  2502  001E6C  0012               	return		;funcret
  2503  001E6E                     __end_of_spiInit:
  2504                           	opt stack 0
  2505                           tblptru	equ	0xFF8
  2506                           tblptrh	equ	0xFF7
  2507                           tblptrl	equ	0xFF6
  2508                           tablat	equ	0xFF5
  2509                           prodh	equ	0xFF4
  2510                           prodl	equ	0xFF3
  2511                           wreg	equ	0xFE8
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _glcdSetCOLMOD *****************
  2515 ;; Defined at:
  2516 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  numBitsPerPi    1    wreg     unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  2521 ;;  rawData         2    7[COMRAM] unsigned short 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:        3 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    3
  2538 ;; This function calls:
  2539 ;;		_glcdTransfer
  2540 ;; This function is called by:
  2541 ;;		_initGLCD
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text3
  2546  001DE6                     __ptext3:
  2547                           	opt stack 0
  2548  001DE6                     _glcdSetCOLMOD:
  2549                           	opt stack 26
  2550                           
  2551                           ;incstack = 0
  2552                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  2553  001DE6  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  2554                           
  2555                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  2556                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  2557  001DE8  D00D               	goto	l1609
  2558  001DEA                     l1599:
  2559                           
  2560                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  2561  001DEA  0E00               	movlw	0
  2562  001DEC  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2563  001DEE  0E03               	movlw	3
  2564  001DF0  D003               	goto	L5
  2565  001DF2                     l1601:
  2566                           
  2567                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  2568  001DF2  0E00               	movlw	0
  2569  001DF4  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2570  001DF6  0E05               	movlw	5
  2571  001DF8                     L5:
  2572  001DF8  6E08               	movwf	glcdSetCOLMOD@rawData,c
  2573                           
  2574                           ;GLCD_PIC_V1.1.c: 186: break;
  2575  001DFA  D00D               	goto	l1611
  2576  001DFC                     l1605:
  2577                           
  2578                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  2579  001DFC  0E00               	movlw	0
  2580  001DFE  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2581  001E00  0E06               	movlw	6
  2582  001E02  D7FA               	goto	L5
  2583  001E04                     l1609:
  2584  001E04  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  2585                           
  2586                           ; Switch size 1, requested type "space"
  2587                           ; Number of cases is 3, Range of values is 12 to 18
  2588                           ; switch strategies available:
  2589                           ; Name         Instructions Cycles
  2590                           ; simple_byte           10     6 (average)
  2591                           ;	Chosen strategy is simple_byte
  2592  001E06  0A0C               	xorlw	12	; case 12
  2593  001E08  B4D8               	btfsc	status,2,c
  2594  001E0A  D7EF               	goto	l1599
  2595  001E0C  0A1C               	xorlw	28	; case 16
  2596  001E0E  B4D8               	btfsc	status,2,c
  2597  001E10  D7F0               	goto	l1601
  2598  001E12  0A02               	xorlw	2	; case 18
  2599  001E14  D7F3               	goto	l1605
  2600  001E16                     l1611:
  2601                           
  2602                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  2603  001E16  0E01               	movlw	1
  2604  001E18  6E04               	movwf	glcdTransfer@cmd,c
  2605  001E1A  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  2606  001E1C  6EF6               	movwf	tblptrl,c
  2607  001E1E                     	if	1	;There is more than 1 active tblptr byte
  2608  001E1E  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  2609  001E20  6EF7               	movwf	tblptrh,c
  2610  001E22                     	endif
  2611  001E22                     	if	0	;There are less than 3 active tblptr bytes
  2612  001E22                     	endif
  2613  001E22  0008               	tblrd		*
  2614  001E24  50F5               	movf	tablat,w,c
  2615  001E26  EC37  F00F         	call	_glcdTransfer
  2616                           
  2617                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  2618  001E2A  0E00               	movlw	0
  2619  001E2C  6E04               	movwf	glcdTransfer@cmd,c
  2620  001E2E  5008               	movf	glcdSetCOLMOD@rawData,w,c
  2621  001E30  EC37  F00F         	call	_glcdTransfer
  2622  001E34  0012               	return		;funcret
  2623  001E36                     __end_of_glcdSetCOLMOD:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           prodh	equ	0xFF4
  2630                           prodl	equ	0xFF3
  2631                           wreg	equ	0xFE8
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _glcdSetOrigin *****************
  2635 ;; Defined at:
  2636 ;;		line 195 in file "GLCD_PIC_V1.1.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  corner          1    wreg     unsigned char 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  corner          1    6[COMRAM] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;Total ram usage:        1 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		_glcdTransfer
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text4
  2665  001D8A                     __ptext4:
  2666                           	opt stack 0
  2667  001D8A                     _glcdSetOrigin:
  2668                           	opt stack 27
  2669                           
  2670                           ;incstack = 0
  2671                           ;glcdSetOrigin@corner stored from wreg
  2672  001D8A  6E07               	movwf	glcdSetOrigin@corner,c
  2673                           
  2674                           ;GLCD_PIC_V1.1.c: 207: switch(corner){
  2675  001D8C  D00E               	goto	l1737
  2676  001D8E                     l338:
  2677                           
  2678                           ;GLCD_PIC_V1.1.c: 214: MADCTLbits.MY = 1;
  2679  001D8E  8E2A               	bsf	_MADCTLbits,7,c
  2680                           
  2681                           ;GLCD_PIC_V1.1.c: 215: MADCTLbits.MX = 0;
  2682  001D90  9C2A               	bcf	_MADCTLbits,6,c
  2683  001D92  D005               	goto	L7
  2684  001D94                     l339:
  2685                           
  2686                           ;GLCD_PIC_V1.1.c: 219: MADCTLbits.MY = 0;
  2687  001D94  9E2A               	bcf	_MADCTLbits,7,c
  2688                           
  2689                           ;GLCD_PIC_V1.1.c: 220: MADCTLbits.MX = 0;
  2690  001D96  9C2A               	bcf	_MADCTLbits,6,c
  2691  001D98  D006               	goto	L8
  2692  001D9A                     l340:
  2693                           
  2694                           ;GLCD_PIC_V1.1.c: 224: MADCTLbits.MY = 0;
  2695  001D9A  9E2A               	bcf	_MADCTLbits,7,c
  2696                           
  2697                           ;GLCD_PIC_V1.1.c: 225: MADCTLbits.MX = 1;
  2698  001D9C  8C2A               	bsf	_MADCTLbits,6,c
  2699  001D9E                     L7:
  2700                           
  2701                           ;GLCD_PIC_V1.1.c: 226: MADCTLbits.MV = 0;
  2702  001D9E  9A2A               	bcf	_MADCTLbits,5,c
  2703                           
  2704                           ;GLCD_PIC_V1.1.c: 227: break;
  2705  001DA0  D012               	goto	l1739
  2706  001DA2                     l341:
  2707                           
  2708                           ;GLCD_PIC_V1.1.c: 229: MADCTLbits.MY = 1;
  2709  001DA2  8E2A               	bsf	_MADCTLbits,7,c
  2710                           
  2711                           ;GLCD_PIC_V1.1.c: 230: MADCTLbits.MX = 1;
  2712  001DA4  8C2A               	bsf	_MADCTLbits,6,c
  2713  001DA6                     L8:
  2714                           
  2715                           ;GLCD_PIC_V1.1.c: 231: MADCTLbits.MV = 1;
  2716  001DA6  8A2A               	bsf	_MADCTLbits,5,c
  2717                           
  2718                           ;GLCD_PIC_V1.1.c: 233: }
  2719                           
  2720                           ;GLCD_PIC_V1.1.c: 232: break;
  2721  001DA8  D00E               	goto	l1739
  2722  001DAA                     l1737:
  2723  001DAA  5007               	movf	glcdSetOrigin@corner,w,c
  2724                           
  2725                           ; Switch size 1, requested type "space"
  2726                           ; Number of cases is 4, Range of values is 0 to 3
  2727                           ; switch strategies available:
  2728                           ; Name         Instructions Cycles
  2729                           ; simple_byte           13     7 (average)
  2730                           ;	Chosen strategy is simple_byte
  2731  001DAC  0A00               	xorlw	0	; case 0
  2732  001DAE  B4D8               	btfsc	status,2,c
  2733  001DB0  D7F8               	goto	l341
  2734  001DB2  0A01               	xorlw	1	; case 1
  2735  001DB4  B4D8               	btfsc	status,2,c
  2736  001DB6  D7EB               	goto	l338
  2737  001DB8  0A03               	xorlw	3	; case 2
  2738  001DBA  B4D8               	btfsc	status,2,c
  2739  001DBC  D7EB               	goto	l339
  2740  001DBE  0A01               	xorlw	1	; case 3
  2741  001DC0  B4D8               	btfsc	status,2,c
  2742  001DC2  D7EB               	goto	l340
  2743  001DC4  D7EE               	goto	l341
  2744  001DC6                     l1739:
  2745                           
  2746                           ;GLCD_PIC_V1.1.c: 235: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2747  001DC6  0E01               	movlw	1
  2748  001DC8  6E04               	movwf	glcdTransfer@cmd,c
  2749  001DCA  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  2750  001DCC  6EF6               	movwf	tblptrl,c
  2751  001DCE                     	if	1	;There is more than 1 active tblptr byte
  2752  001DCE  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  2753  001DD0  6EF7               	movwf	tblptrh,c
  2754  001DD2                     	endif
  2755  001DD2                     	if	0	;There are less than 3 active tblptr bytes
  2756  001DD2                     	endif
  2757  001DD2  0008               	tblrd		*
  2758  001DD4  50F5               	movf	tablat,w,c
  2759  001DD6  EC37  F00F         	call	_glcdTransfer
  2760  001DDA  0E00               	movlw	0
  2761  001DDC  6E04               	movwf	glcdTransfer@cmd,c
  2762  001DDE  502A               	movf	_MADCTLbits,w,c
  2763  001DE0  EC37  F00F         	call	_glcdTransfer
  2764  001DE4  0012               	return		;funcret
  2765  001DE6                     __end_of_glcdSetOrigin:
  2766                           	opt stack 0
  2767                           tblptru	equ	0xFF8
  2768                           tblptrh	equ	0xFF7
  2769                           tblptrl	equ	0xFF6
  2770                           tablat	equ	0xFF5
  2771                           prodh	equ	0xFF4
  2772                           prodl	equ	0xFF3
  2773                           wreg	equ	0xFE8
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _glcdDrawPixel *****************
  2777 ;; Defined at:
  2778 ;;		line 147 in file "GLCD_PIC_V1.1.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  XS              1    wreg     unsigned char 
  2781 ;;  YS              1   25[COMRAM] unsigned char 
  2782 ;;  color           4   26[COMRAM] unsigned long 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  XS              1   31[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2794 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;Total ram usage:        7 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    4
  2801 ;; This function calls:
  2802 ;;		_glcdDrawRectangle
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text5
  2809  001D1C                     __ptext5:
  2810                           	opt stack 0
  2811  001D1C                     _glcdDrawPixel:
  2812                           	opt stack 26
  2813                           
  2814                           ;incstack = 0
  2815                           ;glcdDrawPixel@XS stored from wreg
  2816  001D1C  6E20               	movwf	glcdDrawPixel@XS,c
  2817                           
  2818                           ;GLCD_PIC_V1.1.c: 160: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  2819  001D1E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2820  001D20  6EF6               	movwf	tblptrl,c
  2821  001D22                     	if	1	;There is more than 1 active tblptr byte
  2822  001D22  0E10               	movlw	high _GLCD_SIZE_HORZ
  2823  001D24  6EF7               	movwf	tblptrh,c
  2824  001D26                     	endif
  2825  001D26                     	if	0	;There are less than 3 active tblptr bytes
  2826  001D26                     	endif
  2827  001D26  0009               	tblrd		*+
  2828  001D28  50F5               	movf	tablat,w,c
  2829  001D2A  5C20               	subwf	glcdDrawPixel@XS,w,c
  2830  001D2C  A0D8               	btfss	status,0,c
  2831  001D2E  D009               	goto	l321
  2832  001D30  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2833  001D32  6EF6               	movwf	tblptrl,c
  2834  001D34                     	if	1	;There is more than 1 active tblptr byte
  2835  001D34  0E10               	movlw	high _GLCD_SIZE_HORZ
  2836  001D36  6EF7               	movwf	tblptrh,c
  2837  001D38                     	endif
  2838  001D38                     	if	0	;There are less than 3 active tblptr bytes
  2839  001D38                     	endif
  2840  001D38  0008               	tblrd		*
  2841  001D3A  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2842  001D3E  041F               	decf	??_glcdDrawPixel,w,c
  2843  001D40  6E20               	movwf	glcdDrawPixel@XS,c
  2844  001D42                     l321:
  2845                           
  2846                           ;GLCD_PIC_V1.1.c: 161: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  2847  001D42  0E69               	movlw	low _GLCD_SIZE_VERT
  2848  001D44  6EF6               	movwf	tblptrl,c
  2849  001D46                     	if	1	;There is more than 1 active tblptr byte
  2850  001D46  0E10               	movlw	high _GLCD_SIZE_VERT
  2851  001D48  6EF7               	movwf	tblptrh,c
  2852  001D4A                     	endif
  2853  001D4A                     	if	0	;There are less than 3 active tblptr bytes
  2854  001D4A                     	endif
  2855  001D4A  0009               	tblrd		*+
  2856  001D4C  50F5               	movf	tablat,w,c
  2857  001D4E  5C1A               	subwf	glcdDrawPixel@YS,w,c
  2858  001D50  A0D8               	btfss	status,0,c
  2859  001D52  D009               	goto	l1731
  2860  001D54  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2861  001D56  6EF6               	movwf	tblptrl,c
  2862  001D58                     	if	1	;There is more than 1 active tblptr byte
  2863  001D58  0E10               	movlw	high _GLCD_SIZE_HORZ
  2864  001D5A  6EF7               	movwf	tblptrh,c
  2865  001D5C                     	endif
  2866  001D5C                     	if	0	;There are less than 3 active tblptr bytes
  2867  001D5C                     	endif
  2868  001D5C  0008               	tblrd		*
  2869  001D5E  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2870  001D62  041F               	decf	??_glcdDrawPixel,w,c
  2871  001D64  6E1A               	movwf	glcdDrawPixel@YS,c
  2872  001D66                     l1731:
  2873                           
  2874                           ;GLCD_PIC_V1.1.c: 164: glcdDrawRectangle(XS, XS, YS, YS, color);
  2875  001D66  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  2876  001D6A  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  2877  001D6E  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  2878  001D72  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  2879  001D76  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  2880  001D7A  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  2881  001D7E  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  2882  001D82  5020               	movf	glcdDrawPixel@XS,w,c
  2883  001D84  EC54  F00D         	call	_glcdDrawRectangle
  2884  001D88  0012               	return		;funcret
  2885  001D8A                     __end_of_glcdDrawPixel:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           prodh	equ	0xFF4
  2892                           prodl	equ	0xFF3
  2893                           wreg	equ	0xFE8
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _glcdDrawRectangle *****************
  2897 ;; Defined at:
  2898 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  XS              1    wreg     unsigned char 
  2901 ;;  XE              1    6[COMRAM] unsigned char 
  2902 ;;  YS              1    7[COMRAM] unsigned char 
  2903 ;;  YE              1    8[COMRAM] unsigned char 
  2904 ;;  color           4    9[COMRAM] unsigned long 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  XS              1   24[COMRAM] unsigned char 
  2907 ;;  i               2   19[COMRAM] unsigned short 
  2908 ;;  colorData       3   21[COMRAM] unsigned char [3]
  2909 ;;  numLoops        2   17[COMRAM] unsigned short 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:       19 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    3
  2926 ;; This function calls:
  2927 ;;		___wmul
  2928 ;;		_glcdTransfer
  2929 ;;		_spiSend
  2930 ;; This function is called by:
  2931 ;;		_main
  2932 ;;		_glcdDrawPixel
  2933 ;;		_initGLCD
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text6
  2938  001AA8                     __ptext6:
  2939                           	opt stack 0
  2940  001AA8                     _glcdDrawRectangle:
  2941                           	opt stack 26
  2942                           
  2943                           ;incstack = 0
  2944                           ;glcdDrawRectangle@XS stored from wreg
  2945  001AA8  6E19               	movwf	glcdDrawRectangle@XS,c
  2946                           
  2947                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  2948  001AAA  BC2A               	btfsc	_MADCTLbits,6,c
  2949  001AAC  AA2A               	btfss	_MADCTLbits,5,c
  2950  001AAE  D005               	goto	l307
  2951                           
  2952                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  2953  001AB0  0E03               	movlw	3
  2954  001AB2  2608               	addwf	glcdDrawRectangle@YS,f,c
  2955                           
  2956                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  2957  001AB4  0E03               	movlw	3
  2958  001AB6  2609               	addwf	glcdDrawRectangle@YE,f,c
  2959  001AB8  D015               	goto	l1531
  2960  001ABA                     l307:
  2961                           
  2962                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  2963  001ABA  AE2A               	btfss	_MADCTLbits,7,c
  2964  001ABC  D008               	goto	l309
  2965                           
  2966                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  2967  001ABE  0E02               	movlw	2
  2968  001AC0  2608               	addwf	glcdDrawRectangle@YS,f,c
  2969                           
  2970                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  2971  001AC2  0E02               	movlw	2
  2972  001AC4  2609               	addwf	glcdDrawRectangle@YE,f,c
  2973                           
  2974                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  2975  001AC6  0E03               	movlw	3
  2976  001AC8  2619               	addwf	glcdDrawRectangle@XS,f,c
  2977                           
  2978                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  2979  001ACA  0E03               	movlw	3
  2980  001ACC  D00E               	goto	L10
  2981  001ACE                     l309:
  2982                           
  2983                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  2984  001ACE  AC2A               	btfss	_MADCTLbits,6,c
  2985  001AD0  D007               	goto	l1529
  2986                           
  2987                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  2988  001AD2  0E02               	movlw	2
  2989  001AD4  2608               	addwf	glcdDrawRectangle@YS,f,c
  2990                           
  2991                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  2992  001AD6  0E02               	movlw	2
  2993  001AD8  2609               	addwf	glcdDrawRectangle@YE,f,c
  2994                           
  2995                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  2996  001ADA  2A19               	incf	glcdDrawRectangle@XS,f,c
  2997                           
  2998                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  2999  001ADC  2A07               	incf	glcdDrawRectangle@XE,f,c
  3000                           
  3001                           ;GLCD_PIC_V1.1.c: 78: }
  3002  001ADE  D006               	goto	l1535
  3003  001AE0                     l1529:
  3004                           
  3005                           ;GLCD_PIC_V1.1.c: 79: else{
  3006                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  3007  001AE0  2A08               	incf	glcdDrawRectangle@YS,f,c
  3008                           
  3009                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  3010  001AE2  2A09               	incf	glcdDrawRectangle@YE,f,c
  3011  001AE4                     l1531:
  3012                           
  3013                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  3014  001AE4  0E02               	movlw	2
  3015  001AE6  2619               	addwf	glcdDrawRectangle@XS,f,c
  3016                           
  3017                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  3018  001AE8  0E02               	movlw	2
  3019  001AEA                     L10:
  3020  001AEA  2607               	addwf	glcdDrawRectangle@XE,f,c
  3021  001AEC                     l1535:
  3022                           
  3023                           ;GLCD_PIC_V1.1.c: 85: }
  3024                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  3025  001AEC  0E01               	movlw	1
  3026  001AEE  6E04               	movwf	glcdTransfer@cmd,c
  3027  001AF0  0E3C               	movlw	low GLCD_PIC@INST_RASET
  3028  001AF2  6EF6               	movwf	tblptrl,c
  3029  001AF4                     	if	1	;There is more than 1 active tblptr byte
  3030  001AF4  0E10               	movlw	high GLCD_PIC@INST_RASET
  3031  001AF6  6EF7               	movwf	tblptrh,c
  3032  001AF8                     	endif
  3033  001AF8                     	if	0	;There are less than 3 active tblptr bytes
  3034  001AF8                     	endif
  3035  001AF8  0008               	tblrd		*
  3036  001AFA  50F5               	movf	tablat,w,c
  3037  001AFC  EC37  F00F         	call	_glcdTransfer
  3038                           
  3039                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  3040  001B00  0E00               	movlw	0
  3041  001B02  6E04               	movwf	glcdTransfer@cmd,c
  3042  001B04  0E00               	movlw	0
  3043  001B06  EC37  F00F         	call	_glcdTransfer
  3044                           
  3045                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  3046  001B0A  0E00               	movlw	0
  3047  001B0C  6E04               	movwf	glcdTransfer@cmd,c
  3048  001B0E  5019               	movf	glcdDrawRectangle@XS,w,c
  3049  001B10  EC37  F00F         	call	_glcdTransfer
  3050                           
  3051                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  3052  001B14  0E00               	movlw	0
  3053  001B16  6E04               	movwf	glcdTransfer@cmd,c
  3054  001B18  0E00               	movlw	0
  3055  001B1A  EC37  F00F         	call	_glcdTransfer
  3056                           
  3057                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  3058  001B1E  0E00               	movlw	0
  3059  001B20  6E04               	movwf	glcdTransfer@cmd,c
  3060  001B22  0407               	decf	glcdDrawRectangle@XE,w,c
  3061  001B24  EC37  F00F         	call	_glcdTransfer
  3062                           
  3063                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  3064  001B28  0E01               	movlw	1
  3065  001B2A  6E04               	movwf	glcdTransfer@cmd,c
  3066  001B2C  0E3D               	movlw	low GLCD_PIC@INST_CASET
  3067  001B2E  6EF6               	movwf	tblptrl,c
  3068  001B30                     	if	1	;There is more than 1 active tblptr byte
  3069  001B30  0E10               	movlw	high GLCD_PIC@INST_CASET
  3070  001B32  6EF7               	movwf	tblptrh,c
  3071  001B34                     	endif
  3072  001B34                     	if	0	;There are less than 3 active tblptr bytes
  3073  001B34                     	endif
  3074  001B34  0008               	tblrd		*
  3075  001B36  50F5               	movf	tablat,w,c
  3076  001B38  EC37  F00F         	call	_glcdTransfer
  3077                           
  3078                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  3079  001B3C  0E00               	movlw	0
  3080  001B3E  6E04               	movwf	glcdTransfer@cmd,c
  3081  001B40  0E00               	movlw	0
  3082  001B42  EC37  F00F         	call	_glcdTransfer
  3083                           
  3084                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  3085  001B46  0E00               	movlw	0
  3086  001B48  6E04               	movwf	glcdTransfer@cmd,c
  3087  001B4A  5008               	movf	glcdDrawRectangle@YS,w,c
  3088  001B4C  EC37  F00F         	call	_glcdTransfer
  3089                           
  3090                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  3091  001B50  0E00               	movlw	0
  3092  001B52  6E04               	movwf	glcdTransfer@cmd,c
  3093  001B54  0E00               	movlw	0
  3094  001B56  EC37  F00F         	call	_glcdTransfer
  3095                           
  3096                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  3097  001B5A  0E00               	movlw	0
  3098  001B5C  6E04               	movwf	glcdTransfer@cmd,c
  3099  001B5E  0409               	decf	glcdDrawRectangle@YE,w,c
  3100  001B60  EC37  F00F         	call	_glcdTransfer
  3101                           
  3102                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  3103  001B64  0E01               	movlw	1
  3104  001B66  6E04               	movwf	glcdTransfer@cmd,c
  3105  001B68  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  3106  001B6A  6EF6               	movwf	tblptrl,c
  3107  001B6C                     	if	1	;There is more than 1 active tblptr byte
  3108  001B6C  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  3109  001B6E  6EF7               	movwf	tblptrh,c
  3110  001B70                     	endif
  3111  001B70                     	if	0	;There are less than 3 active tblptr bytes
  3112  001B70                     	endif
  3113  001B70  0008               	tblrd		*
  3114  001B72  50F5               	movf	tablat,w,c
  3115  001B74  EC37  F00F         	call	_glcdTransfer
  3116                           
  3117                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  3118  001B78  5019               	movf	glcdDrawRectangle@XS,w,c
  3119  001B7A  1807               	xorwf	glcdDrawRectangle@XE,w,c
  3120  001B7C  A4D8               	btfss	status,2,c
  3121  001B7E  D014               	goto	l1563
  3122  001B80  5008               	movf	glcdDrawRectangle@YS,w,c
  3123  001B82  1809               	xorwf	glcdDrawRectangle@YE,w,c
  3124  001B84  A4D8               	btfss	status,2,c
  3125  001B86  D010               	goto	l1563
  3126                           
  3127                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  3128  001B88  0E00               	movlw	0
  3129  001B8A  6E04               	movwf	glcdTransfer@cmd,c
  3130  001B8C  500A               	movf	glcdDrawRectangle@color,w,c
  3131  001B8E  EC37  F00F         	call	_glcdTransfer
  3132                           
  3133                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  3134  001B92  0E00               	movlw	0
  3135  001B94  6E04               	movwf	glcdTransfer@cmd,c
  3136  001B96  500B               	movf	glcdDrawRectangle@color+1,w,c
  3137  001B98  EC37  F00F         	call	_glcdTransfer
  3138                           
  3139                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  3140  001B9C  0E00               	movlw	0
  3141  001B9E  6E04               	movwf	glcdTransfer@cmd,c
  3142  001BA0  500C               	movf	glcdDrawRectangle@color+2,w,c
  3143  001BA2  EC37  F00F         	call	_glcdTransfer
  3144                           
  3145                           ;GLCD_PIC_V1.1.c: 117: }
  3146  001BA6  0012               	return	
  3147  001BA8                     l1563:
  3148                           
  3149                           ;GLCD_PIC_V1.1.c: 118: else{
  3150                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  3151  001BA8  5019               	movf	glcdDrawRectangle@XS,w,c
  3152  001BAA  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  3153  001BAC  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  3154  001BAE  1E0E               	comf	??_glcdDrawRectangle,f,c
  3155  001BB0  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  3156  001BB2  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  3157  001BB4  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  3158  001BB6  5007               	movf	glcdDrawRectangle@XE,w,c
  3159  001BB8  240E               	addwf	??_glcdDrawRectangle,w,c
  3160  001BBA  6E01               	movwf	___wmul@multiplier,c
  3161  001BBC  0E00               	movlw	0
  3162  001BBE  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  3163  001BC0  6E02               	movwf	___wmul@multiplier+1,c
  3164  001BC2  5008               	movf	glcdDrawRectangle@YS,w,c
  3165  001BC4  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  3166  001BC6  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  3167  001BC8  1E10               	comf	??_glcdDrawRectangle+2,f,c
  3168  001BCA  1E11               	comf	??_glcdDrawRectangle+3,f,c
  3169  001BCC  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  3170  001BCE  2A11               	incf	??_glcdDrawRectangle+3,f,c
  3171  001BD0  5009               	movf	glcdDrawRectangle@YE,w,c
  3172  001BD2  2410               	addwf	??_glcdDrawRectangle+2,w,c
  3173  001BD4  6E03               	movwf	___wmul@multiplicand,c
  3174  001BD6  0E00               	movlw	0
  3175  001BD8  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  3176  001BDA  6E04               	movwf	___wmul@multiplicand+1,c
  3177  001BDC  EC4B  F00F         	call	___wmul	;wreg free
  3178  001BE0  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  3179  001BE4  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  3180                           
  3181                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  3182                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  3183  001BE8  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  3184                           
  3185                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  3186  001BEC  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  3187                           
  3188                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  3189  001BF0  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  3190                           
  3191                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  3192  001BF4  908C               	bcf	3980,0,c	;volatile
  3193                           
  3194                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  3195  001BF6  828C               	bsf	3980,1,c	;volatile
  3196                           
  3197                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  3198  001BF8  0E00               	movlw	0
  3199  001BFA  6E15               	movwf	glcdDrawRectangle@i+1,c
  3200  001BFC  0E00               	movlw	0
  3201  001BFE  6E14               	movwf	glcdDrawRectangle@i,c
  3202  001C00  D00B               	goto	l1581
  3203  001C02                     l1577:
  3204                           
  3205                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  3206  001C02  5016               	movf	glcdDrawRectangle@colorData,w,c
  3207  001C04  EC76  F00F         	call	_spiSend
  3208                           
  3209                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  3210  001C08  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  3211  001C0A  EC76  F00F         	call	_spiSend
  3212                           
  3213                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  3214  001C0E  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  3215  001C10  EC76  F00F         	call	_spiSend
  3216  001C14  4A14               	infsnz	glcdDrawRectangle@i,f,c
  3217  001C16  2A15               	incf	glcdDrawRectangle@i+1,f,c
  3218  001C18                     l1581:
  3219  001C18  5012               	movf	glcdDrawRectangle@numLoops,w,c
  3220  001C1A  5C14               	subwf	glcdDrawRectangle@i,w,c
  3221  001C1C  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  3222  001C1E  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  3223  001C20  A0D8               	btfss	status,0,c
  3224  001C22  D7EF               	goto	l1577
  3225                           
  3226                           ;GLCD_PIC_V1.1.c: 142: }
  3227                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  3228  001C24  808C               	bsf	3980,0,c	;volatile
  3229  001C26  0012               	return	
  3230  001C28                     __end_of_glcdDrawRectangle:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           wreg	equ	0xFE8
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _glcdTransfer *****************
  3242 ;; Defined at:
  3243 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  byte            1    wreg     unsigned char 
  3246 ;;  cmd             1    3[COMRAM] unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  byte            1    5[COMRAM] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3258 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;Total ram usage:        3 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    2
  3265 ;; This function calls:
  3266 ;;		_spiSend
  3267 ;; This function is called by:
  3268 ;;		_main
  3269 ;;		_glcdDrawRectangle
  3270 ;;		_glcdSetCOLMOD
  3271 ;;		_glcdSetOrigin
  3272 ;;		_initGLCD
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text7
  3277  001E6E                     __ptext7:
  3278                           	opt stack 0
  3279  001E6E                     _glcdTransfer:
  3280                           	opt stack 27
  3281                           
  3282                           ;incstack = 0
  3283                           ;glcdTransfer@byte stored from wreg
  3284  001E6E  6E06               	movwf	glcdTransfer@byte,c
  3285                           
  3286                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  3287  001E70  0404               	decf	glcdTransfer@cmd,w,c
  3288  001E72  B4D8               	btfsc	status,2,c
  3289  001E74  D003               	goto	u470
  3290  001E76  6A05               	clrf	??_glcdTransfer& (0+255),c
  3291  001E78  2A05               	incf	??_glcdTransfer& (0+255),f,c
  3292  001E7A  D001               	goto	u488
  3293  001E7C                     u470:
  3294  001E7C  6A05               	clrf	??_glcdTransfer& (0+255),c
  3295  001E7E                     u488:
  3296  001E7E  4605               	rlncf	??_glcdTransfer,f,c
  3297  001E80  508C               	movf	3980,w,c	;volatile
  3298  001E82  1805               	xorwf	??_glcdTransfer,w,c
  3299  001E84  0BFD               	andlw	-3
  3300  001E86  1805               	xorwf	??_glcdTransfer,w,c
  3301  001E88  6E8C               	movwf	3980,c	;volatile
  3302                           
  3303                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  3304  001E8A  908C               	bcf	3980,0,c	;volatile
  3305                           
  3306                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  3307  001E8C  5006               	movf	glcdTransfer@byte,w,c
  3308  001E8E  EC76  F00F         	call	_spiSend
  3309                           
  3310                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  3311  001E92  808C               	bsf	3980,0,c	;volatile
  3312  001E94  0012               	return		;funcret
  3313  001E96                     __end_of_glcdTransfer:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           wreg	equ	0xFE8
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function _spiSend *****************
  3325 ;; Defined at:
  3326 ;;		line 33 in file "SPI_PIC.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  val             1    wreg     unsigned char 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  val             1    2[COMRAM] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;Total ram usage:        1 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    1
  3347 ;; This function calls:
  3348 ;;		_spiTransfer
  3349 ;; This function is called by:
  3350 ;;		_glcdTransfer
  3351 ;;		_glcdDrawRectangle
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text8
  3356  001EEC                     __ptext8:
  3357                           	opt stack 0
  3358  001EEC                     _spiSend:
  3359                           	opt stack 27
  3360                           
  3361                           ;incstack = 0
  3362                           ;spiSend@val stored from wreg
  3363  001EEC  6E03               	movwf	spiSend@val,c
  3364                           
  3365                           ;SPI_PIC.c: 41: spiTransfer(val);
  3366  001EEE  5003               	movf	spiSend@val,w,c
  3367  001EF0  EC5E  F00F         	call	_spiTransfer
  3368  001EF4  0012               	return		;funcret
  3369  001EF6                     __end_of_spiSend:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           wreg	equ	0xFE8
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function _spiTransfer *****************
  3381 ;; Defined at:
  3382 ;;		line 12 in file "SPI_PIC.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  byteToTransf    1    wreg     unsigned char 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      unsigned char 
  3389 ;; Registers used:
  3390 ;;		wreg, status,2
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;Total ram usage:        2 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_spiSend
  3406 ;;		_spiReceive
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text9
  3411  001EBC                     __ptext9:
  3412                           	opt stack 0
  3413  001EBC                     _spiTransfer:
  3414                           	opt stack 27
  3415                           
  3416                           ;incstack = 0
  3417                           ;spiTransfer@byteToTransfer stored from wreg
  3418  001EBC  6E02               	movwf	spiTransfer@byteToTransfer,c
  3419                           
  3420                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  3421  001EBE  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  3422  001EC2                     l1493:
  3423  001EC2  B69E               	btfsc	3998,3,c	;volatile
  3424  001EC4  D002               	goto	u450
  3425  001EC6  0E01               	movlw	1
  3426  001EC8  D001               	goto	u452
  3427  001ECA                     u450:
  3428  001ECA  0E00               	movlw	0
  3429  001ECC                     u452:
  3430  001ECC  6E01               	movwf	??_spiTransfer& (0+255),c
  3431  001ECE  B0C7               	btfsc	4039,0,c	;volatile
  3432  001ED0  D002               	goto	u460
  3433  001ED2  0E01               	movlw	1
  3434  001ED4  D001               	goto	u462
  3435  001ED6                     u460:
  3436  001ED6  0E00               	movlw	0
  3437  001ED8                     u462:
  3438  001ED8  1001               	iorwf	??_spiTransfer,w,c
  3439  001EDA  E1F3               	bnz	l1493
  3440                           
  3441                           ;SPI_PIC.c: 30: return SSPBUF;
  3442  001EDC  50C9               	movf	4041,w,c	;volatile
  3443  001EDE  0012               	return	
  3444  001EE0                     __end_of_spiTransfer:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           wreg	equ	0xFE8
  3453                           status	equ	0xFD8
  3454                           
  3455 ;; *************** function ___wmul *****************
  3456 ;; Defined at:
  3457 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  multiplier      2    0[COMRAM] unsigned int 
  3460 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  product         2    4[COMRAM] unsigned int 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  2    0[COMRAM] unsigned int 
  3465 ;; Registers used:
  3466 ;;		wreg, status,2, status,0, prodl, prodh
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3472 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;Total ram usage:        6 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_main
  3482 ;;		_glcdDrawRectangle
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text10
  3487  001E96                     __ptext10:
  3488                           	opt stack 0
  3489  001E96                     ___wmul:
  3490                           	opt stack 28
  3491                           
  3492                           ;incstack = 0
  3493  001E96  5001               	movf	___wmul@multiplier,w,c
  3494  001E98  0203               	mulwf	___wmul@multiplicand,c
  3495  001E9A  CFF3 F005          	movff	prodl,___wmul@product
  3496  001E9E  CFF4 F006          	movff	prodh,___wmul@product+1
  3497  001EA2  5001               	movf	___wmul@multiplier,w,c
  3498  001EA4  0204               	mulwf	___wmul@multiplicand+1,c
  3499  001EA6  50F3               	movf	prodl,w,c
  3500  001EA8  2606               	addwf	___wmul@product+1,f,c
  3501  001EAA  5002               	movf	___wmul@multiplier+1,w,c
  3502  001EAC  0203               	mulwf	___wmul@multiplicand,c
  3503  001EAE  50F3               	movf	prodl,w,c
  3504  001EB0  2606               	addwf	___wmul@product+1,f,c
  3505  001EB2  C005  F001         	movff	___wmul@product,?___wmul
  3506  001EB6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3507  001EBA  0012               	return	
  3508  001EBC                     __end_of___wmul:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           wreg	equ	0xFE8
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function ___awmod *****************
  3520 ;; Defined at:
  3521 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  dividend        2    8[COMRAM] int 
  3524 ;;  divisor         2   10[COMRAM] int 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  sign            1   13[COMRAM] unsigned char 
  3527 ;;  counter         1   12[COMRAM] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  2    8[COMRAM] int 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3537 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;Total ram usage:        6 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text11
  3551  001CAC                     __ptext11:
  3552                           	opt stack 0
  3553  001CAC                     ___awmod:
  3554                           	opt stack 30
  3555                           
  3556                           ;incstack = 0
  3557  001CAC  0E00               	movlw	0
  3558  001CAE  6E0E               	movwf	___awmod@sign,c
  3559  001CB0  AE0A               	btfss	___awmod@dividend+1,7,c
  3560  001CB2  D006               	goto	l1795
  3561  001CB4  6C09               	negf	___awmod@dividend,c
  3562  001CB6  1E0A               	comf	___awmod@dividend+1,f,c
  3563  001CB8  B0D8               	btfsc	status,0,c
  3564  001CBA  2A0A               	incf	___awmod@dividend+1,f,c
  3565  001CBC  0E01               	movlw	1
  3566  001CBE  6E0E               	movwf	___awmod@sign,c
  3567  001CC0                     l1795:
  3568  001CC0  AE0C               	btfss	___awmod@divisor+1,7,c
  3569  001CC2  D004               	goto	l1799
  3570  001CC4  6C0B               	negf	___awmod@divisor,c
  3571  001CC6  1E0C               	comf	___awmod@divisor+1,f,c
  3572  001CC8  B0D8               	btfsc	status,0,c
  3573  001CCA  2A0C               	incf	___awmod@divisor+1,f,c
  3574  001CCC                     l1799:
  3575  001CCC  500B               	movf	___awmod@divisor,w,c
  3576  001CCE  100C               	iorwf	___awmod@divisor+1,w,c
  3577  001CD0  B4D8               	btfsc	status,2,c
  3578  001CD2  D018               	goto	l1815
  3579  001CD4  0E01               	movlw	1
  3580  001CD6  6E0D               	movwf	___awmod@counter,c
  3581  001CD8  D004               	goto	l1805
  3582  001CDA                     l1803:
  3583  001CDA  90D8               	bcf	status,0,c
  3584  001CDC  360B               	rlcf	___awmod@divisor,f,c
  3585  001CDE  360C               	rlcf	___awmod@divisor+1,f,c
  3586  001CE0  2A0D               	incf	___awmod@counter,f,c
  3587  001CE2                     l1805:
  3588  001CE2  AE0C               	btfss	___awmod@divisor+1,7,c
  3589  001CE4  D7FA               	goto	l1803
  3590  001CE6                     l1807:
  3591  001CE6  500B               	movf	___awmod@divisor,w,c
  3592  001CE8  5C09               	subwf	___awmod@dividend,w,c
  3593  001CEA  500C               	movf	___awmod@divisor+1,w,c
  3594  001CEC  580A               	subwfb	___awmod@dividend+1,w,c
  3595  001CEE  A0D8               	btfss	status,0,c
  3596  001CF0  D004               	goto	l1811
  3597  001CF2  500B               	movf	___awmod@divisor,w,c
  3598  001CF4  5E09               	subwf	___awmod@dividend,f,c
  3599  001CF6  500C               	movf	___awmod@divisor+1,w,c
  3600  001CF8  5A0A               	subwfb	___awmod@dividend+1,f,c
  3601  001CFA                     l1811:
  3602  001CFA  90D8               	bcf	status,0,c
  3603  001CFC  320C               	rrcf	___awmod@divisor+1,f,c
  3604  001CFE  320B               	rrcf	___awmod@divisor,f,c
  3605  001D00  2E0D               	decfsz	___awmod@counter,f,c
  3606  001D02  D7F1               	goto	l1807
  3607  001D04                     l1815:
  3608  001D04  500E               	movf	___awmod@sign,w,c
  3609  001D06  B4D8               	btfsc	status,2,c
  3610  001D08  D004               	goto	l1819
  3611  001D0A  6C09               	negf	___awmod@dividend,c
  3612  001D0C  1E0A               	comf	___awmod@dividend+1,f,c
  3613  001D0E  B0D8               	btfsc	status,0,c
  3614  001D10  2A0A               	incf	___awmod@dividend+1,f,c
  3615  001D12                     l1819:
  3616  001D12  C009  F009         	movff	___awmod@dividend,?___awmod
  3617  001D16  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3618  001D1A  0012               	return	
  3619  001D1C                     __end_of___awmod:
  3620                           	opt stack 0
  3621                           tblptru	equ	0xFF8
  3622                           tblptrh	equ	0xFF7
  3623                           tblptrl	equ	0xFF6
  3624                           tablat	equ	0xFF5
  3625                           prodh	equ	0xFF4
  3626                           prodl	equ	0xFF3
  3627                           wreg	equ	0xFE8
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function ___awdiv *****************
  3631 ;; Defined at:
  3632 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  dividend        2    0[COMRAM] int 
  3635 ;;  divisor         2    2[COMRAM] int 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  quotient        2    6[COMRAM] int 
  3638 ;;  sign            1    5[COMRAM] unsigned char 
  3639 ;;  counter         1    4[COMRAM] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  2    0[COMRAM] int 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;Total ram usage:        8 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_main
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text12
  3663  001C28                     __ptext12:
  3664                           	opt stack 0
  3665  001C28                     ___awdiv:
  3666                           	opt stack 30
  3667                           
  3668                           ;incstack = 0
  3669  001C28  0E00               	movlw	0
  3670  001C2A  6E06               	movwf	___awdiv@sign,c
  3671  001C2C  AE04               	btfss	___awdiv@divisor+1,7,c
  3672  001C2E  D006               	goto	l1751
  3673  001C30  6C03               	negf	___awdiv@divisor,c
  3674  001C32  1E04               	comf	___awdiv@divisor+1,f,c
  3675  001C34  B0D8               	btfsc	status,0,c
  3676  001C36  2A04               	incf	___awdiv@divisor+1,f,c
  3677  001C38  0E01               	movlw	1
  3678  001C3A  6E06               	movwf	___awdiv@sign,c
  3679  001C3C                     l1751:
  3680  001C3C  AE02               	btfss	___awdiv@dividend+1,7,c
  3681  001C3E  D006               	goto	l1757
  3682  001C40  6C01               	negf	___awdiv@dividend,c
  3683  001C42  1E02               	comf	___awdiv@dividend+1,f,c
  3684  001C44  B0D8               	btfsc	status,0,c
  3685  001C46  2A02               	incf	___awdiv@dividend+1,f,c
  3686  001C48  0E01               	movlw	1
  3687  001C4A  1A06               	xorwf	___awdiv@sign,f,c
  3688  001C4C                     l1757:
  3689  001C4C  0E00               	movlw	0
  3690  001C4E  6E08               	movwf	___awdiv@quotient+1,c
  3691  001C50  0E00               	movlw	0
  3692  001C52  6E07               	movwf	___awdiv@quotient,c
  3693  001C54  5003               	movf	___awdiv@divisor,w,c
  3694  001C56  1004               	iorwf	___awdiv@divisor+1,w,c
  3695  001C58  B4D8               	btfsc	status,2,c
  3696  001C5A  D01C               	goto	l1779
  3697  001C5C  0E01               	movlw	1
  3698  001C5E  6E05               	movwf	___awdiv@counter,c
  3699  001C60  D004               	goto	l1765
  3700  001C62                     l1763:
  3701  001C62  90D8               	bcf	status,0,c
  3702  001C64  3603               	rlcf	___awdiv@divisor,f,c
  3703  001C66  3604               	rlcf	___awdiv@divisor+1,f,c
  3704  001C68  2A05               	incf	___awdiv@counter,f,c
  3705  001C6A                     l1765:
  3706  001C6A  AE04               	btfss	___awdiv@divisor+1,7,c
  3707  001C6C  D7FA               	goto	l1763
  3708  001C6E                     l1767:
  3709  001C6E  90D8               	bcf	status,0,c
  3710  001C70  3607               	rlcf	___awdiv@quotient,f,c
  3711  001C72  3608               	rlcf	___awdiv@quotient+1,f,c
  3712  001C74  5003               	movf	___awdiv@divisor,w,c
  3713  001C76  5C01               	subwf	___awdiv@dividend,w,c
  3714  001C78  5004               	movf	___awdiv@divisor+1,w,c
  3715  001C7A  5802               	subwfb	___awdiv@dividend+1,w,c
  3716  001C7C  A0D8               	btfss	status,0,c
  3717  001C7E  D005               	goto	l1775
  3718  001C80  5003               	movf	___awdiv@divisor,w,c
  3719  001C82  5E01               	subwf	___awdiv@dividend,f,c
  3720  001C84  5004               	movf	___awdiv@divisor+1,w,c
  3721  001C86  5A02               	subwfb	___awdiv@dividend+1,f,c
  3722  001C88  8007               	bsf	___awdiv@quotient,0,c
  3723  001C8A                     l1775:
  3724  001C8A  90D8               	bcf	status,0,c
  3725  001C8C  3204               	rrcf	___awdiv@divisor+1,f,c
  3726  001C8E  3203               	rrcf	___awdiv@divisor,f,c
  3727  001C90  2E05               	decfsz	___awdiv@counter,f,c
  3728  001C92  D7ED               	goto	l1767
  3729  001C94                     l1779:
  3730  001C94  5006               	movf	___awdiv@sign,w,c
  3731  001C96  B4D8               	btfsc	status,2,c
  3732  001C98  D004               	goto	l1783
  3733  001C9A  6C07               	negf	___awdiv@quotient,c
  3734  001C9C  1E08               	comf	___awdiv@quotient+1,f,c
  3735  001C9E  B0D8               	btfsc	status,0,c
  3736  001CA0  2A08               	incf	___awdiv@quotient+1,f,c
  3737  001CA2                     l1783:
  3738  001CA2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3739  001CA6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3740  001CAA  0012               	return	
  3741  001CAC                     __end_of___awdiv:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           wreg	equ	0xFE8
  3750                           status	equ	0xFD8
  3751                           tblptru	equ	0xFF8
  3752                           tblptrh	equ	0xFF7
  3753                           tblptrl	equ	0xFF6
  3754                           tablat	equ	0xFF5
  3755                           prodh	equ	0xFF4
  3756                           prodl	equ	0xFF3
  3757                           wreg	equ	0xFE8
  3758                           status	equ	0xFD8
  3759                           
  3760                           	psect	rparam
  3761  0000                     tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           wreg	equ	0xFE8
  3768                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_glcdDrawPixel
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdSetOrigin->_glcdTransfer
    _glcdDrawPixel->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   51913
                                             32 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                             ___wmul
                      _glcdDrawPixel
                  _glcdDrawRectangle
                      _glcdSetOrigin
                       _glcdTransfer
                           _initGLCD
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   18973
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4772
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdSetOrigin                                        1     1      0    4746
                                              6 COMRAM     1     1      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdDrawPixel                                        7     2      5   11131
                                             25 COMRAM     7     2      5
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7    9455
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4724
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___wmul
   _glcdDrawPixel
     ___awmod (ARG)
       ___awdiv (ARG)
     _glcdDrawRectangle (ARG)
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _glcdSetOrigin
     _glcdTransfer
       _spiSend
         _spiTransfer
   _glcdTransfer
     _spiSend
       _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jan 07 23:09:14 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                       __CFG_CPD$ON 000000                        ___awdiv@sign 0006  
               ___wmul@multiplicand 0003                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                               l133 10AA                                 l321 1D42  
                               l307 1ABA                                 l340 1D9A  
                               l309 1ACE                                 l341 1DA2  
                               l193 1E64                                 l338 1D8E  
                               l339 1D94                        __CFG_CPB$OFF 000000  
                               _RED 1019                                 u450 1ECA  
                               u460 1ED6                                 u452 1ECC  
                               u462 1ED8                                 u470 1E7C  
                               u488 1E7E                                 u907 12B4  
                               u917 12E0                                 u927 130C  
                               u937 134E                                 u947 139A  
                               u957 13F0                                 u967 143C  
                               u977 1558                                 u897 10FA  
         __end_ofGLCD_PIC@INST_TEON 1039                                 u987 173C  
                               u997 17B4                        ___awmod@sign 000E  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l2001 1798  
                              l1601 1DF2                                l1531 1AE4  
                              l1611 1E16                                l1605 1DFC  
                              l1535 1AEC                                l1529 1AE0  
                              l1609 1E04                                l1811 1CFA  
                              l1803 1CDA                                l1563 1BA8  
                              l1731 1D66                                l1805 1CE2  
                              l1493 1EC2                                l1581 1C18  
                              l1751 1C3C                                l1807 1CE6  
                              l1815 1D04                                l1591 1E44  
                              l1903 157E                                l1577 1C02  
                              l1737 1DAA                                l1593 1E48  
                              l1913 15C6                                l1763 1C62  
                              l1819 1D12                                l1739 1DC6  
                              l1595 1E4E                                l1765 1C6A  
                              l1757 1C4C                                l1589 1E40  
                              l1925 15E4                                l1941 1646  
                              l1917 15CA                                l1783 1CA2  
                              l1775 1C8A                                l1767 1C6E  
                              l1599 1DEA                                l1943 164A  
                              l1919 15CE                                l1937 1642  
                              l1779 1C94                                l1795 1CC0  
                              l1971 16F6                                l1963 16A4  
                              l1891 1552                                l1973 16FA  
                              l1949 1660                                l1877 144E  
                              l1799 1CCC                                l1991 1756  
                              l1967 16EE                                l1959 16A0  
                              l1887 1502                                l1895 1564  
                              l1993 175E                                l1985 174A  
                              l1897 1568                                l1995 1766  
                              l1989 174E                                l1999 176E  
                              _BLUE 1009                                u1007 17E0  
                              u1017 180C                                u1027 1A9E  
                              _LATA 000F89                                _LATB 000F8A  
                              _LATC 000F8B                                _LATD 000F8C  
                              _LATE 000F8D                                _GREY 1021  
                              _main 106E                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                   __end_of___awdiv 1CAC                               _BLACK 1025  
                   __end_of___awmod 1D1C                    __end_of_INST_NOP 1069  
                   ___awdiv@divisor 0003                               _GREEN 100D  
                   ___awdiv@counter 0005                               _WHITE 101D  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _SSPIF 007CF3  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000       __end_ofGLCD_PIC@INST_VMOFCTR2 102A  
                    __CFG_EBTRB$OFF 000000                               main@x 0029  
                             main@y 0028                     __end_of_spiInit 1E6E  
                             tablat 000FF5                     __end_of_spiSend 1EF6  
                      main@rotation 0023                               status 000FD8  
                    __CFG_PBADEN$ON 000000                        __end_of_BLUE 100D  
                      __end_of_GREY 1025                     __initialization 1EE0  
                      __end_of_main 179C        glcdSetCOLMOD@numBitsPerPixel 0007  
                    __CFG_OSC$HSPLL 000000                              ??_main 0021  
                     __activetblptr 000002                              _ADCON0 000FC2  
                            _ADCON1 000FC1                     glcdDrawPixel@XS 0020  
                   glcdDrawPixel@YS 001A                    ___awdiv@dividend 0001  
                 _glcdDrawRectangle 1AA8                   __end_of_INST_TEON 1059  
                            _INDIGO 1005                __end_of_glcdTransfer 1E96  
                            _ORANGE 1015                  ?_glcdDrawRectangle 0007  
                            _VIOLET 1001                              _YELLOW 1011  
                            _SSPBUF 000FC9                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0012                 ??_glcdDrawRectangle 000E  
                            ___wmul 1E96                    __end_of_initGLCD 1AA8  
                         ??___awdiv 0005                      __CFG_STVREN$ON 000000  
                         ??___awmod 000D                    ___awdiv@quotient 0007  
                   ___awmod@divisor 000B            __end_ofGLCD_PIC@INST_NOP 1049  
                   ___awmod@counter 000D                        ?_spiTransfer 0001  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle 1C28                          __accesstop 0080  
           __end_of__initialization 1EE2                       __end_of_BLACK 1029  
                     ___rparam_used 000001                       __end_of_GREEN 1011  
                     __end_of_WHITE 1021         __end_ofGLCD_PIC@INST_GAMSET 1041  
       __end_ofGLCD_PIC@INST_COLMOD 1035         __end_ofGLCD_PIC@INST_MADCTL 1038  
       __end_ofGLCD_PIC@INST_DISPON 103F         __end_ofGLCD_PIC@INST_IDMOFF 1037  
                    __pcstackCOMRAM 0001         __end_ofGLCD_PIC@INST_INVCTR 1031  
       __end_ofGLCD_PIC@INST_INVOFF 1043         __end_ofGLCD_PIC@INST_PWCTR1 1030  
       __end_ofGLCD_PIC@INST_PWCTR2 102F         __end_ofGLCD_PIC@INST_PWCTR3 102E  
       __end_ofGLCD_PIC@INST_PWCTR4 102D         __end_ofGLCD_PIC@INST_PWCTR5 102C  
       __end_ofGLCD_PIC@INST_VMCTR1 102B         __end_ofGLCD_PIC@INST_SLPOUT 1046  
               glcdSetOrigin@corner 0007               __end_of_glcdDrawPixel 1D8A  
                     _INST_VMOFCTR2 1049               __end_of_glcdSetCOLMOD 1E36  
             __end_of_glcdSetOrigin 1DE6                             ?___wmul 0001  
                glcdDrawRectangle@i 0014                  __end_of_INST_CASET 105E  
                __end_of_INST_IDMON 1056                  __end_of_INST_INVON 1062  
                __end_of_INST_RASET 105D                  __end_of_INST_RAMWR 105C  
                __end_of_INST_TEOFF 105A                  __end_of_INST_NORON 1064  
                __end_of_INST_PTLAR 105B                  __end_of_INST_SLPIN 1067  
                __end_of_INST_PTLON 1065               __size_of_glcdTransfer 0028  
        __size_of_glcdDrawRectangle 0180           spiTransfer@byteToTransfer 0002  
                           _SSPCON1 000FC6                             _SSPSTAT 000FC7  
                         ?_initGLCD 0001                  glcdDrawPixel@color 001B  
                           __Hparam 0000                      _GLCD_SIZE_HORZ 106A  
                           __Lparam 0000                      _GLCD_SIZE_VERT 1069  
              __end_of_INST_DISPOFF 1060                __end_of_INST_FRMCTR1 1054  
              __end_of_INST_FRMCTR2 1053                __end_of_INST_FRMCTR3 1052  
                           ___awdiv 1C28                             ___awmod 1CAC  
                   __size_of___wmul 0026                        __psmallconst 1000  
                           __pcinit 1EE0                        _glcdTransfer 1E6E  
                           __ramtop 1000                             __ptext0 106E  
                           __ptext1 179C                             __ptext2 1E36  
                           __ptext3 1DE6                             __ptext4 1D8A  
                           __ptext5 1D1C                             __ptext6 1AA8  
                           __ptext7 1E6E                             __ptext8 1EEC  
                           __ptext9 1EBC                __end_of_INST_SWRESET 1068  
                  ___awmod@dividend 0009                             _spiInit 1E36  
                           _spiSend 1EEC                __size_of_spiTransfer 0024  
              end_of_initialization 1EE2               GLCD_PIC@INST_VMOFCTR2 1029  
                        ??_initGLCD 001A                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 106B                           _INST_TEON 1058  
            __end_of_GLCD_SIZE_VERT 106A                    glcdTransfer@byte 0006  
                    spiInit@divider 0001                           _TRISCbits 000F94  
                         _TRISDbits 000F95                      __end_of_INDIGO 1009  
                    __end_of_ORANGE 1019                      __end_of_VIOLET 1005  
                    __end_of_YELLOW 1015        __end_ofGLCD_PIC@INST_DISPOFF 1040  
      __end_ofGLCD_PIC@INST_FRMCTR1 1034        __end_ofGLCD_PIC@INST_FRMCTR2 1033  
      __end_ofGLCD_PIC@INST_FRMCTR3 1032                      __end_of___wmul 1EBC  
      __end_ofGLCD_PIC@INST_SWRESET 1048                 start_initialization 1EE0  
                       __end_of_RED 101D              glcdDrawRectangle@color 000A  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D          _GLCD_ADDRESSABLE_SIZE_HORZ 106C  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C          _GLCD_ADDRESSABLE_SIZE_VERT 106B  
                       __pbssCOMRAM 002A          __end_ofGLCD_PIC@INST_CASET 103E  
        __end_ofGLCD_PIC@INST_IDMON 1036          __end_ofGLCD_PIC@INST_INVON 1042  
        __end_ofGLCD_PIC@INST_RASET 103D          __end_ofGLCD_PIC@INST_RAMWR 103C  
                      _INST_DISPOFF 105F          __end_ofGLCD_PIC@INST_TEOFF 103A  
        __end_ofGLCD_PIC@INST_NORON 1044          __end_ofGLCD_PIC@INST_PTLAR 103B  
        __end_ofGLCD_PIC@INST_SLPIN 1047          __end_ofGLCD_PIC@INST_PTLON 1045  
                      _INST_FRMCTR1 1053                        _INST_FRMCTR2 1052  
                      _INST_FRMCTR3 1051                   __size_of_initGLCD 030C  
                      _INST_SWRESET 1067              __size_of_glcdDrawPixel 006E  
                         _main$1095 0024                   __CFG_CCP2MX$PORTC 000000  
                          ?___awdiv 0001                            ?___awmod 0009  
            __size_of_glcdSetCOLMOD 0050                         __smallconst 1000  
               glcdDrawRectangle@XE 0007                 glcdDrawRectangle@YE 0009  
               glcdDrawRectangle@XS 0019                 glcdDrawRectangle@YS 0008  
               __end_of_INST_GAMSET 1061                            ?_spiInit 0001  
               __end_of_INST_COLMOD 1055                            ?_spiSend 0001  
               __end_of_INST_MADCTL 1058                 __end_of_INST_DISPON 105F  
               __end_of_INST_IDMOFF 1057                GLCD_PIC@INST_DISPOFF 103F  
               __end_of_INST_INVCTR 1051                 __end_of_INST_INVOFF 1063  
            __size_of_glcdSetOrigin 005C                GLCD_PIC@INST_FRMCTR1 1033  
              GLCD_PIC@INST_FRMCTR2 1032                GLCD_PIC@INST_FRMCTR3 1031  
               __end_of_INST_PWCTR1 1050                 __end_of_INST_PWCTR2 104F  
               __end_of_INST_PWCTR3 104E                 __end_of_INST_PWCTR4 104D  
               __end_of_INST_PWCTR5 104C                 __end_of_INST_VMCTR1 104B  
               __end_of_INST_SLPOUT 1066                      ___wmul@product 0005  
                          _LATDbits 000F8C                GLCD_PIC@INST_SWRESET 1047  
                          _INST_NOP 1068                          spiSend@val 0003  
                  __CFG_WDTPS$32768 000000                     glcdTransfer@cmd 0004  
                 ___wmul@multiplier 0001                       ??_spiTransfer 0001  
              glcdSetCOLMOD@rawData 0008                       _glcdDrawPixel 1D1C  
                     _glcdSetCOLMOD 1DE6                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                     _glcdSetOrigin 1D8A                    __size_of___awdiv 0084  
                  __size_of___awmod 0070                         _INST_GAMSET 1060  
                       _INST_COLMOD 1054                         _INST_MADCTL 1057  
                       _INST_DISPON 105E                         _INST_IDMOFF 1056  
                       _INST_INVCTR 1050                         _INST_INVOFF 1062  
                    ?_glcdDrawPixel 001A                         _INST_PWCTR1 104F  
                       _INST_PWCTR2 104E                         _INST_PWCTR3 104D  
                       _INST_PWCTR4 104C                         _INST_PWCTR5 104B  
                       _INST_VMCTR1 104A                         _INST_SLPOUT 1065  
                          __ptext10 1E96                            __ptext11 1CAC  
                          __ptext12 1C28                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 104A  
                        _MADCTLbits 002A                 __end_of_spiTransfer 1EE0  
                    ?_glcdSetCOLMOD 0001                            _initGLCD 179C  
               GLCD_PIC@INST_GAMSET 1040                 GLCD_PIC@INST_COLMOD 1034  
               GLCD_PIC@INST_MADCTL 1037                 GLCD_PIC@INST_DISPON 103E  
               GLCD_PIC@INST_IDMOFF 1036                       __size_of_main 072E  
               GLCD_PIC@INST_INVCTR 1030                 GLCD_PIC@INST_INVOFF 1042  
               GLCD_PIC@INST_PWCTR1 102F                 GLCD_PIC@INST_PWCTR2 102E  
               GLCD_PIC@INST_PWCTR3 102D                 GLCD_PIC@INST_PWCTR4 102C  
               GLCD_PIC@INST_PWCTR5 102B                 GLCD_PIC@INST_VMCTR1 102A  
               GLCD_PIC@INST_SLPOUT 1045                      ?_glcdSetOrigin 0001  
                        _INST_CASET 105D                          _INST_IDMON 1055  
                        _INST_INVON 1061                          _INST_RASET 105C  
                        _INST_RAMWR 105B                          _INST_TEOFF 1059  
                        _INST_NORON 1063                          _INST_PTLAR 105A  
                        _INST_SLPIN 1066                          _INST_PTLON 1064  
                GLCD_PIC@INST_CASET 103D                  GLCD_PIC@INST_IDMON 1035  
                GLCD_PIC@INST_INVON 1041                  GLCD_PIC@INST_RASET 103C  
                GLCD_PIC@INST_RAMWR 103B                  GLCD_PIC@INST_TEOFF 1039  
                GLCD_PIC@INST_NORON 1043                  GLCD_PIC@INST_PTLAR 103A  
                GLCD_PIC@INST_SLPIN 1046                  GLCD_PIC@INST_PTLON 1044  
        glcdDrawRectangle@colorData 0016                       ?_glcdTransfer 0004  
                   ??_glcdDrawPixel 001F                         _spiTransfer 1EBC  
                 GLCD_PIC@INST_TEON 1038                         _SSPCON1bits 000FC6  
                   ??_glcdSetCOLMOD 0007                    GLCD_PIC@INST_NOP 1048  
                   ??_glcdSetOrigin 0007  
