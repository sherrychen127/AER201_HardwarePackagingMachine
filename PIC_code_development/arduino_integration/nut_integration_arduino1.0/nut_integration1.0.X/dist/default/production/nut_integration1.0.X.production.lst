

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 18:46:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001754                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  001754  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _ADON	set	32272
   172  001025                     STR_7:
   173  001025  72                 	db	114	;'r'
   174  001026  65                 	db	101	;'e'
   175  001027  6D                 	db	109	;'m'
   176  001028  61                 	db	97	;'a'
   177  001029  69                 	db	105	;'i'
   178  00102A  6E                 	db	110	;'n'
   179  00102B  20                 	db	32
   180  00102C  4E                 	db	78	;'N'
   181  00102D  75                 	db	117	;'u'
   182  00102E  74                 	db	116	;'t'
   183  00102F  73                 	db	115	;'s'
   184  001030  3A                 	db	58	;':'
   185  001031  25                 	db	37
   186  001032  64                 	db	100	;'d'
   187  001033  00                 	db	0
   188  001034                     STR_3:
   189  001034  64                 	db	100	;'d'
   190  001035  6F                 	db	111	;'o'
   191  001036  6E                 	db	110	;'n'
   192  001037  65                 	db	101	;'e'
   193  001038  00                 	db	0
   194  0000                     
   195                           ; #config settings
   196  001039  00                 	db	0	; dummy byte at the end
   197  0000                     
   198                           	psect	cinit
   199  0016B2                     __pcinit:
   200                           	opt stack 0
   201  0016B2                     start_initialization:
   202                           	opt stack 0
   203  0016B2                     __initialization:
   204                           	opt stack 0
   205                           
   206                           ; Initialize objects allocated to COMRAM (2 bytes)
   207                           ; load TBLPTR registers with __pidataCOMRAM
   208  0016B2  0E54               	movlw	low __pidataCOMRAM
   209  0016B4  6EF6               	movwf	tblptrl,c
   210  0016B6  0E17               	movlw	high __pidataCOMRAM
   211  0016B8  6EF7               	movwf	tblptrh,c
   212  0016BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   213  0016BC  6EF8               	movwf	tblptru,c
   214  0016BE  0009               	tblrd		*+	;fetch initializer
   215  0016C0  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   216  0016C4  0009               	tblrd		*+	;fetch initializer
   217  0016C6  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   218                           
   219                           ; Clear objects allocated to COMRAM (15 bytes)
   220  0016CA  EE00  F01B         	lfsr	0,__pbssCOMRAM
   221  0016CE  0E0F               	movlw	15
   222  0016D0                     clear_0:
   223  0016D0  6AEE               	clrf	postinc0,c
   224  0016D2  06E8               	decf	wreg,f,c
   225  0016D4  E1FD               	bnz	clear_0
   226  0016D6                     end_of_initialization:
   227                           	opt stack 0
   228  0016D6                     __end_of__initialization:
   229                           	opt stack 0
   230  0016D6  0100               	movlb	0
   231  0016D8  EF1D  F008         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	bssCOMRAM
   240  00001B                     __pbssCOMRAM:
   241                           	opt stack 0
   242  00001B                     _i:
   243                           	opt stack 0
   244  00001B                     	ds	2
   245  00001D                     _analog_result:
   246                           	opt stack 0
   247  00001D                     	ds	2
   248  00001F                     _N_spacingTime:
   249                           	opt stack 0
   250  00001F                     	ds	2
   251  000021                     _N_remain:
   252                           	opt stack 0
   253  000021                     	ds	2
   254  000023                     _N_counter:
   255                           	opt stack 0
   256  000023                     	ds	2
   257  000025                     _state:
   258                           	opt stack 0
   259  000025                     	ds	2
   260  000027                     lcd@LCDinterruptState:
   261                           	opt stack 0
   262  000027                     	ds	1
   263  000028                     _data:
   264                           	opt stack 0
   265  000028                     	ds	1
   266  000029                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	dataCOMRAM
   275  00002A                     __pdataCOMRAM:
   276                           	opt stack 0
   277  00002A                     _max:
   278                           	opt stack 0
   279  00002A                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  000001                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  000001                     ??_I2C_Master_Wait:
   291  000001                     ?___lwdiv:
   292                           	opt stack 0
   293  000001                     ?___lldiv:
   294                           	opt stack 0
   295  000001                     lcdNibble@temp:
   296                           	opt stack 0
   297  000001                     ___lwdiv@dividend:
   298                           	opt stack 0
   299  000001                     ___lldiv@dividend:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x0
   303  000001                     	ds	1
   304  000002                     lcdNibble@data:
   305                           	opt stack 0
   306  000002                     I2C_Master_Read@ackBit:
   307                           	opt stack 0
   308  000002                     I2C_Master_Write@byteToWrite:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x1
   312  000002                     	ds	1
   313  000003                     lcdInst@data:
   314                           	opt stack 0
   315  000003                     putch@data:
   316                           	opt stack 0
   317  000003                     I2C_Master_Read@receivedByte:
   318                           	opt stack 0
   319  000003                     ___lwdiv@divisor:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2
   323  000003                     	ds	1
   324  000004                     ??_initLCD:
   325  000004                     
   326                           ; 1 bytes @ 0x3
   327  000004                     	ds	1
   328  000005                     ___lwdiv@quotient:
   329                           	opt stack 0
   330  000005                     ___lldiv@divisor:
   331                           	opt stack 0
   332                           
   333                           ; 4 bytes @ 0x4
   334  000005                     	ds	2
   335  000007                     ___lwdiv@counter:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x6
   339  000007                     	ds	1
   340  000008                     ?___lwmod:
   341                           	opt stack 0
   342  000008                     ___lwmod@dividend:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x7
   346  000008                     	ds	1
   347  000009                     ___lldiv@quotient:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x8
   351  000009                     	ds	1
   352  00000A                     ___lwmod@divisor:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x9
   356  00000A                     	ds	2
   357  00000C                     ___lwmod@counter:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0xB
   361  00000C                     	ds	1
   362  00000D                     ?_printf:
   363                           	opt stack 0
   364  00000D                     ___lldiv@counter:
   365                           	opt stack 0
   366  00000D                     printf@f:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0xC
   370  00000D                     	ds	1
   371  00000E                     I2C_Master_Init@clockFreq:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0xD
   375  00000E                     	ds	3
   376  000011                     ??_printf:
   377                           
   378                           ; 1 bytes @ 0x10
   379  000011                     	ds	1
   380  000012                     ??_I2C_Master_Init:
   381  000012                     printf@ap:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x11
   385  000012                     	ds	2
   386  000014                     printf@flag:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x13
   390  000014                     	ds	1
   391  000015                     printf@prec:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x14
   395  000015                     	ds	1
   396  000016                     printf@val:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x15
   400  000016                     	ds	2
   401  000018                     printf@c:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x17
   405  000018                     	ds	1
   406  000019                     ??_main:
   407                           
   408                           ; 1 bytes @ 0x18
   409  000019                     	ds	2
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 65 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;Total ram usage:        2 bytes
   441 ;; Hardware stack levels required when called:    3
   442 ;; This function calls:
   443 ;;		_I2C_Master_Init
   444 ;;		_I2C_Master_Read
   445 ;;		_I2C_Master_Start
   446 ;;		_I2C_Master_Stop
   447 ;;		_I2C_Master_Write
   448 ;;		_initLCD
   449 ;;		_lcdInst
   450 ;;		_motorStart_1
   451 ;;		_motorStop_1
   452 ;;		_printf
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  00103A                     __ptext0:
   460                           	opt stack 0
   461  00103A                     _main:
   462                           	opt stack 28
   463                           
   464                           ;main.c: 73: LATA = 0x00;
   465                           
   466                           ;incstack = 0
   467  00103A  0E00               	movlw	0
   468  00103C  6E89               	movwf	3977,c	;volatile
   469                           
   470                           ;main.c: 74: LATB = 0x00;
   471  00103E  0E00               	movlw	0
   472  001040  6E8A               	movwf	3978,c	;volatile
   473                           
   474                           ;main.c: 75: LATC = 0x00;
   475  001042  0E00               	movlw	0
   476  001044  6E8B               	movwf	3979,c	;volatile
   477                           
   478                           ;main.c: 76: LATD = 0x00;
   479  001046  0E00               	movlw	0
   480  001048  6E8C               	movwf	3980,c	;volatile
   481                           
   482                           ;main.c: 77: LATE = 0x00;
   483  00104A  0E00               	movlw	0
   484  00104C  6E8D               	movwf	3981,c	;volatile
   485                           
   486                           ;main.c: 81: TRISA = 0xFF;
   487  00104E  6892               	setf	3986,c	;volatile
   488                           
   489                           ;main.c: 82: TRISB = 0xFF;
   490  001050  6893               	setf	3987,c	;volatile
   491                           
   492                           ;main.c: 83: TRISC = 0x00;
   493  001052  0E00               	movlw	0
   494  001054  6E94               	movwf	3988,c	;volatile
   495                           
   496                           ;main.c: 87: TRISD = 0x00;
   497  001056  0E00               	movlw	0
   498  001058  6E95               	movwf	3989,c	;volatile
   499                           
   500                           ;main.c: 88: TRISE = 0x00;
   501  00105A  0E00               	movlw	0
   502  00105C  6E96               	movwf	3990,c	;volatile
   503                           
   504                           ;main.c: 91: ADCON0 = 0x00;
   505  00105E  0E00               	movlw	0
   506  001060  6EC2               	movwf	4034,c	;volatile
   507                           
   508                           ;main.c: 92: ADCON1 = 0x0B;
   509  001062  0E0B               	movlw	11
   510  001064  6EC1               	movwf	4033,c	;volatile
   511                           
   512                           ;main.c: 93: ADCON2bits.ADFM = 1;
   513  001066  8EC0               	bsf	4032,7,c	;volatile
   514                           
   515                           ;main.c: 97: initLCD();
   516  001068  ECC8  F00A         	call	_initLCD	;wreg free
   517                           
   518                           ;main.c: 101: I2C_Master_Init(100000);
   519  00106C  0EA0               	movlw	160
   520  00106E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   521  001070  0E86               	movlw	134
   522  001072  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   523  001074  0E01               	movlw	1
   524  001076  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   525  001078  0E00               	movlw	0
   526  00107A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   527  00107C  EC71  F00A         	call	_I2C_Master_Init	;wreg free
   528                           
   529                           ;main.c: 102: I2C_Master_Start();
   530  001080  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
   531                           
   532                           ;main.c: 105: I2C_Master_Write(0b00010000);
   533  001084  0E00               	movlw	0
   534  001086  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   535  001088  0E10               	movlw	16
   536  00108A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   537  00108C  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   538                           
   539                           ;main.c: 106: I2C_Master_Stop();
   540  001090  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
   541                           
   542                           ;main.c: 108: I2C_Master_Start();
   543  001094  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
   544                           
   545                           ;main.c: 109: I2C_Master_Write(0b00010000);
   546  001098  0E00               	movlw	0
   547  00109A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   548  00109C  0E10               	movlw	16
   549  00109E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   550  0010A0  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   551                           
   552                           ;main.c: 110: I2C_Master_Write('1');
   553  0010A4  0E00               	movlw	0
   554  0010A6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   555  0010A8  0E31               	movlw	49
   556  0010AA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   557  0010AC  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   558                           
   559                           ;main.c: 111: I2C_Master_Stop();
   560  0010B0  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
   561                           
   562                           ;main.c: 121: initLCD();
   563  0010B4  ECC8  F00A         	call	_initLCD	;wreg free
   564                           
   565                           ;main.c: 122: printf("%d",N_counter);
   566  0010B8  0E31               	movlw	low (STR_7+12)
   567  0010BA  6E0D               	movwf	printf@f,c
   568  0010BC  0E10               	movlw	high (STR_7+12)
   569  0010BE  6E0E               	movwf	printf@f+1,c
   570  0010C0  C023  F00F         	movff	_N_counter,?_printf+2
   571  0010C4  C024  F010         	movff	_N_counter+1,?_printf+3
   572  0010C8  EC5A  F009         	call	_printf	;wreg free
   573                           
   574                           ;main.c: 123: _delay((unsigned long)((100)*(40000000/4000.0)));
   575  0010CC  0E06               	movlw	6
   576  0010CE  6E1A               	movwf	(??_main+1)& (0+255),c
   577  0010D0  0E13               	movlw	19
   578  0010D2  6E19               	movwf	??_main& (0+255),c
   579  0010D4  0EAE               	movlw	174
   580  0010D6                     u617:
   581  0010D6  2EE8               	decfsz	wreg,f,c
   582  0010D8  D7FE               	bra	u617
   583  0010DA  2E19               	decfsz	??_main& (0+255),f,c
   584  0010DC  D7FC               	bra	u617
   585  0010DE  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   586  0010E0  D7FA               	bra	u617
   587                           
   588                           ;main.c: 124: motorStart_1();
   589  0010E2  EC13  F00B         	call	_motorStart_1	;wreg free
   590  0010E6                     
   591                           ;main.c: 127: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   592  0010E6  0E80               	movlw	128
   593  0010E8  EC8A  F00B         	call	_lcdInst
   594  0010EC  0E41               	movlw	65
   595  0010EE  6E19               	movwf	??_main& (0+255),c
   596  0010F0  0EEE               	movlw	238
   597  0010F2                     u627:
   598  0010F2  2EE8               	decfsz	wreg,f,c
   599  0010F4  D7FE               	bra	u627
   600  0010F6  2E19               	decfsz	??_main& (0+255),f,c
   601  0010F8  D7FC               	bra	u627
   602  0010FA  D000               	nop2	
   603                           
   604                           ;main.c: 128: if (N_counter >= max){
   605  0010FC  502A               	movf	_max,w,c
   606  0010FE  5C23               	subwf	_N_counter,w,c
   607  001100  5024               	movf	_N_counter+1,w,c
   608  001102  0A80               	xorlw	128
   609  001104  6E19               	movwf	??_main& (0+255),c
   610  001106  502B               	movf	_max+1,w,c
   611  001108  0A80               	xorlw	128
   612  00110A  5819               	subwfb	??_main& (0+255),w,c
   613  00110C  A0D8               	btfss	status,0,c
   614  00110E  D003               	goto	l102
   615                           
   616                           ;main.c: 129: motorStop_1();
   617  001110  ECEE  F00A         	call	_motorStop_1	;wreg free
   618                           
   619                           ;main.c: 130: break;
   620  001114  D021               	goto	l103
   621  001116                     l102:
   622                           
   623                           ;main.c: 131: }
   624                           ;main.c: 133: I2C_Master_Start();
   625  001116  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
   626                           
   627                           ;main.c: 134: I2C_Master_Write(0b00010001);
   628  00111A  0E00               	movlw	0
   629  00111C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   630  00111E  0E11               	movlw	17
   631  001120  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   632  001122  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   633                           
   634                           ;main.c: 135: data = I2C_Master_Read(1);
   635  001126  0E01               	movlw	1
   636  001128  EC6E  F00B         	call	_I2C_Master_Read
   637  00112C  6E28               	movwf	_data,c
   638                           
   639                           ;main.c: 136: I2C_Master_Stop();
   640  00112E  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
   641                           
   642                           ;main.c: 138: if (data == 'a'){
   643  001132  0E61               	movlw	97
   644  001134  1828               	xorwf	_data,w,c
   645  001136  A4D8               	btfss	status,2,c
   646  001138  D002               	goto	l104
   647                           
   648                           ;main.c: 139: N_counter ++;
   649  00113A  4A23               	infsnz	_N_counter,f,c
   650  00113C  2A24               	incf	_N_counter+1,f,c
   651  00113E                     l104:
   652                           
   653                           ;main.c: 140: }
   654                           ;main.c: 141: data = 'b';
   655  00113E  0E62               	movlw	98
   656  001140  6E28               	movwf	_data,c
   657                           
   658                           ;main.c: 143: printf("%d",N_counter);
   659  001142  0E31               	movlw	low (STR_7+12)
   660  001144  6E0D               	movwf	printf@f,c
   661  001146  0E10               	movlw	high (STR_7+12)
   662  001148  6E0E               	movwf	printf@f+1,c
   663  00114A  C023  F00F         	movff	_N_counter,?_printf+2
   664  00114E  C024  F010         	movff	_N_counter+1,?_printf+3
   665  001152  EC5A  F009         	call	_printf	;wreg free
   666  001156  D7C7               	goto	l101
   667  001158                     l103:
   668                           
   669                           ;main.c: 144: }
   670                           ;main.c: 147: N_counter = 0;
   671  001158  0E00               	movlw	0
   672  00115A  6E24               	movwf	_N_counter+1,c
   673  00115C  0E00               	movlw	0
   674  00115E  6E23               	movwf	_N_counter,c
   675                           
   676                           ;main.c: 148: motorStop_1();
   677  001160  ECEE  F00A         	call	_motorStop_1	;wreg free
   678                           
   679                           ;main.c: 149: initLCD();
   680  001164  ECC8  F00A         	call	_initLCD	;wreg free
   681                           
   682                           ;main.c: 150: printf("done");
   683  001168  0E34               	movlw	low STR_3
   684  00116A  6E0D               	movwf	printf@f,c
   685  00116C  0E10               	movlw	high STR_3
   686  00116E  6E0E               	movwf	printf@f+1,c
   687  001170  EC5A  F009         	call	_printf	;wreg free
   688                           
   689                           ;main.c: 152: _delay((unsigned long)((400)*(40000000/4000.0)));
   690  001174  0E15               	movlw	21
   691  001176  6E1A               	movwf	(??_main+1)& (0+255),c
   692  001178  0E4B               	movlw	75
   693  00117A  6E19               	movwf	??_main& (0+255),c
   694  00117C  0EBE               	movlw	190
   695  00117E                     u637:
   696  00117E  2EE8               	decfsz	wreg,f,c
   697  001180  D7FE               	bra	u637
   698  001182  2E19               	decfsz	??_main& (0+255),f,c
   699  001184  D7FC               	bra	u637
   700  001186  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   701  001188  D7FA               	bra	u637
   702  00118A  D000               	nop2	
   703                           
   704                           ;main.c: 155: I2C_Master_Init(100000);
   705  00118C  0EA0               	movlw	160
   706  00118E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   707  001190  0E86               	movlw	134
   708  001192  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   709  001194  0E01               	movlw	1
   710  001196  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   711  001198  0E00               	movlw	0
   712  00119A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   713  00119C  EC71  F00A         	call	_I2C_Master_Init	;wreg free
   714                           
   715                           ;main.c: 156: I2C_Master_Start();
   716  0011A0  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
   717                           
   718                           ;main.c: 157: I2C_Master_Write(0b00010000);
   719  0011A4  0E00               	movlw	0
   720  0011A6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   721  0011A8  0E10               	movlw	16
   722  0011AA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   723  0011AC  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   724                           
   725                           ;main.c: 158: I2C_Master_Stop();
   726  0011B0  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
   727                           
   728                           ;main.c: 162: I2C_Master_Start();
   729  0011B4  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
   730                           
   731                           ;main.c: 163: I2C_Master_Write(0b00010000);
   732  0011B8  0E00               	movlw	0
   733  0011BA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   734  0011BC  0E10               	movlw	16
   735  0011BE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   736  0011C0  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   737                           
   738                           ;main.c: 164: I2C_Master_Write('2');
   739  0011C4  0E00               	movlw	0
   740  0011C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   741  0011C8  0E32               	movlw	50
   742  0011CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   743  0011CC  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
   744                           
   745                           ;main.c: 165: I2C_Master_Stop();
   746  0011D0  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
   747                           
   748                           ;main.c: 166: _delay((unsigned long)((800)*(40000000/4000.0)));
   749  0011D4  0E29               	movlw	41
   750  0011D6  6E1A               	movwf	(??_main+1)& (0+255),c
   751  0011D8  0E96               	movlw	150
   752  0011DA  6E19               	movwf	??_main& (0+255),c
   753  0011DC  0E7F               	movlw	127
   754  0011DE                     u647:
   755  0011DE  2EE8               	decfsz	wreg,f,c
   756  0011E0  D7FE               	bra	u647
   757  0011E2  2E19               	decfsz	??_main& (0+255),f,c
   758  0011E4  D7FC               	bra	u647
   759  0011E6  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   760  0011E8  D7FA               	bra	u647
   761  0011EA  F000               	nop	
   762                           
   763                           ;main.c: 168: motorStart_1();
   764  0011EC  EC13  F00B         	call	_motorStart_1	;wreg free
   765                           
   766                           ;main.c: 171: initLCD();
   767  0011F0  ECC8  F00A         	call	_initLCD	;wreg free
   768                           
   769                           ;main.c: 172: N_spacingTime = 0;
   770  0011F4  0E00               	movlw	0
   771  0011F6  6E20               	movwf	_N_spacingTime+1,c
   772  0011F8  0E00               	movlw	0
   773  0011FA  6E1F               	movwf	_N_spacingTime,c
   774                           
   775                           ;main.c: 173: initLCD();
   776  0011FC  ECC8  F00A         	call	_initLCD	;wreg free
   777                           
   778                           ;main.c: 174: printf("%d", N_remain);
   779  001200  0E31               	movlw	low (STR_7+12)
   780  001202  6E0D               	movwf	printf@f,c
   781  001204  0E10               	movlw	high (STR_7+12)
   782  001206  6E0E               	movwf	printf@f+1,c
   783  001208  C021  F00F         	movff	_N_remain,?_printf+2
   784  00120C  C022  F010         	movff	_N_remain+1,?_printf+3
   785  001210  EC5A  F009         	call	_printf	;wreg free
   786  001214                     
   787                           ;main.c: 178: if (N_spacingTime >= 30000){
   788  001214  BE20               	btfsc	_N_spacingTime+1,7,c
   789  001216  D009               	goto	l107
   790  001218  0E30               	movlw	48
   791  00121A  5C1F               	subwf	_N_spacingTime,w,c
   792  00121C  0E75               	movlw	117
   793  00121E  5820               	subwfb	_N_spacingTime+1,w,c
   794  001220  A0D8               	btfss	status,0,c
   795  001222  D003               	goto	l107
   796                           
   797                           ;main.c: 179: motorStop_1();
   798  001224  ECEE  F00A         	call	_motorStop_1	;wreg free
   799                           
   800                           ;main.c: 180: break;
   801  001228  D02D               	goto	l108
   802  00122A                     l107:
   803                           
   804                           ;main.c: 185: N_remain ++;
   805  00122A  4A21               	infsnz	_N_remain,f,c
   806  00122C  2A22               	incf	_N_remain+1,f,c
   807                           
   808                           ;main.c: 187: N_spacingTime = 0;
   809  00122E  0E00               	movlw	0
   810  001230  6E20               	movwf	_N_spacingTime+1,c
   811  001232  0E00               	movlw	0
   812  001234  6E1F               	movwf	_N_spacingTime,c
   813                           
   814                           ;main.c: 188: }
   815                           ;main.c: 189: printf("%d", N_remain);
   816  001236  0E31               	movlw	low (STR_7+12)
   817  001238  6E0D               	movwf	printf@f,c
   818  00123A  0E10               	movlw	high (STR_7+12)
   819  00123C  6E0E               	movwf	printf@f+1,c
   820  00123E  C021  F00F         	movff	_N_remain,?_printf+2
   821  001242  C022  F010         	movff	_N_remain+1,?_printf+3
   822  001246  EC5A  F009         	call	_printf	;wreg free
   823                           
   824                           ;main.c: 196: lcdInst(0xC0);;
   825  00124A  0EC0               	movlw	192
   826  00124C  EC8A  F00B         	call	_lcdInst
   827                           
   828                           ;main.c: 197: printf("%d",N_spacingTime);
   829  001250  0E31               	movlw	low (STR_7+12)
   830  001252  6E0D               	movwf	printf@f,c
   831  001254  0E10               	movlw	high (STR_7+12)
   832  001256  6E0E               	movwf	printf@f+1,c
   833  001258  C01F  F00F         	movff	_N_spacingTime,?_printf+2
   834  00125C  C020  F010         	movff	_N_spacingTime+1,?_printf+3
   835  001260  EC5A  F009         	call	_printf	;wreg free
   836                           
   837                           ;main.c: 199: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   838  001264  0E80               	movlw	128
   839  001266  EC8A  F00B         	call	_lcdInst
   840  00126A  0E41               	movlw	65
   841  00126C  6E19               	movwf	??_main& (0+255),c
   842  00126E  0EEE               	movlw	238
   843  001270                     u657:
   844  001270  2EE8               	decfsz	wreg,f,c
   845  001272  D7FE               	bra	u657
   846  001274  2E19               	decfsz	??_main& (0+255),f,c
   847  001276  D7FC               	bra	u657
   848  001278  D000               	nop2	
   849                           
   850                           ;main.c: 202: N_spacingTime +=200;
   851  00127A  0EC8               	movlw	200
   852  00127C  261F               	addwf	_N_spacingTime,f,c
   853  00127E  0E00               	movlw	0
   854  001280  2220               	addwfc	_N_spacingTime+1,f,c
   855  001282  D7C8               	goto	l106
   856  001284                     l108:
   857                           
   858                           ;main.c: 210: initLCD();
   859                           
   860                           ;main.c: 205: }
   861                           ;main.c: 209: while(1){
   862  001284  ECC8  F00A         	call	_initLCD	;wreg free
   863                           
   864                           ;main.c: 211: printf("remain Nuts:%d",N_remain);
   865  001288  0E25               	movlw	low STR_7
   866  00128A  6E0D               	movwf	printf@f,c
   867  00128C  0E10               	movlw	high STR_7
   868  00128E  6E0E               	movwf	printf@f+1,c
   869  001290  C021  F00F         	movff	_N_remain,?_printf+2
   870  001294  C022  F010         	movff	_N_remain+1,?_printf+3
   871  001298  EC5A  F009         	call	_printf	;wreg free
   872                           
   873                           ;main.c: 212: _delay((unsigned long)((1000)*(40000000/4000.0)));
   874  00129C  0E33               	movlw	51
   875  00129E  6E1A               	movwf	(??_main+1)& (0+255),c
   876  0012A0  0EBB               	movlw	187
   877  0012A2  6E19               	movwf	??_main& (0+255),c
   878  0012A4  0EE0               	movlw	224
   879  0012A6                     u667:
   880  0012A6  2EE8               	decfsz	wreg,f,c
   881  0012A8  D7FE               	bra	u667
   882  0012AA  2E19               	decfsz	??_main& (0+255),f,c
   883  0012AC  D7FC               	bra	u667
   884  0012AE  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   885  0012B0  D7FA               	bra	u667
   886  0012B2  D7E8               	goto	l108
   887  0012B4                     __end_of_main:
   888                           	opt stack 0
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           status	equ	0xFD8
   896                           
   897 ;; *************** function _printf *****************
   898 ;; Defined at:
   899 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  f               2   12[COMRAM] PTR const unsigned char 
   902 ;;		 -> STR_7(15), STR_6(3), STR_5(3), STR_4(3), 
   903 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  tmpval          4    0        struct .
   906 ;;  cp              3    0        PTR const unsigned char 
   907 ;;  val             2   21[COMRAM] unsigned int 
   908 ;;  ap              2   17[COMRAM] PTR void [1]
   909 ;;		 -> ?_printf(2), 
   910 ;;  len             2    0        unsigned int 
   911 ;;  c               1   23[COMRAM] char 
   912 ;;  prec            1   20[COMRAM] char 
   913 ;;  flag            1   19[COMRAM] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2   12[COMRAM] int 
   916 ;; Registers used:
   917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;Total ram usage:       12 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    2
   930 ;; This function calls:
   931 ;;		___lwdiv
   932 ;;		___lwmod
   933 ;;		_putch
   934 ;; This function is called by:
   935 ;;		_main
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text1
   940  0012B4                     __ptext1:
   941                           	opt stack 0
   942  0012B4                     _printf:
   943                           	opt stack 28
   944                           
   945                           ;doprnt.c: 466: va_list ap;
   946                           ;doprnt.c: 499: signed char c;
   947                           ;doprnt.c: 506: signed char prec;
   948                           ;doprnt.c: 508: unsigned char flag;
   949                           ;doprnt.c: 523: union {
   950                           ;doprnt.c: 524: unsigned long vd;
   951                           ;doprnt.c: 525: double integ;
   952                           ;doprnt.c: 526: } tmpval;
   953                           ;doprnt.c: 528: unsigned int val;
   954                           ;doprnt.c: 529: unsigned len;
   955                           ;doprnt.c: 530: const char * cp;
   956                           ;doprnt.c: 533: *ap = __va_start();
   957                           
   958                           ;incstack = 0
   959  0012B4  0E0F               	movlw	low (?_printf+2)
   960  0012B6  6E12               	movwf	printf@ap,c
   961  0012B8  0E00               	movlw	high (?_printf+2)
   962  0012BA  6E13               	movwf	printf@ap+1,c
   963                           
   964                           ;doprnt.c: 536: while(c = *f++) {
   965  0012BC  D084               	goto	u560
   966  0012BE                     
   967                           ;doprnt.c: 538: if(c != '%')
   968  0012BE  0E25               	movlw	37
   969  0012C0  1818               	xorwf	printf@c,w,c
   970  0012C2  B4D8               	btfsc	status,2,c
   971  0012C4  D004               	goto	l272
   972                           
   973                           ;doprnt.c: 540: {
   974                           ;doprnt.c: 541: (putch(c) );
   975  0012C6  5018               	movf	printf@c,w,c
   976  0012C8  EC80  F00B         	call	_putch
   977                           
   978                           ;doprnt.c: 542: continue;
   979  0012CC  D07C               	goto	u560
   980  0012CE                     l272:
   981                           
   982                           ;doprnt.c: 543: }
   983                           ;doprnt.c: 548: flag = 0;
   984  0012CE  0E00               	movlw	0
   985  0012D0  6E14               	movwf	printf@flag,c
   986                           
   987                           ;doprnt.c: 822: }
   988                           
   989                           ;doprnt.c: 813: continue;
   990                           
   991                           ;doprnt.c: 802: default:
   992                           
   993                           ;doprnt.c: 698: case 'i':
   994                           ;doprnt.c: 699: break;
   995                           
   996                           ;doprnt.c: 697: case 'd':
   997                           
   998                           ;doprnt.c: 638: goto alldone;
   999                           
  1000                           ;doprnt.c: 637: case 0:
  1001                           
  1002                           ;doprnt.c: 635: switch(c = *f++) {
  1003  0012D2  C00D  FFF6         	movff	printf@f,tblptrl
  1004  0012D6  C00E  FFF7         	movff	printf@f+1,tblptrh
  1005  0012DA  4A0D               	infsnz	printf@f,f,c
  1006  0012DC  2A0E               	incf	printf@f+1,f,c
  1007  0012DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1008  0012DE  6AF8               	clrf	tblptru,c
  1009  0012E0                     	endif
  1010  0012E0                     	if	0	;tblptru may be non-zero
  1011  0012E0                     	endif
  1012  0012E0  0008               	tblrd		*
  1013  0012E2  CFF5 F018          	movff	tablat,printf@c
  1014  0012E6  5018               	movf	printf@c,w,c
  1015                           
  1016                           ; Switch size 1, requested type "space"
  1017                           ; Number of cases is 3, Range of values is 0 to 105
  1018                           ; switch strategies available:
  1019                           ; Name         Instructions Cycles
  1020                           ; simple_byte           10     6 (average)
  1021                           ;	Chosen strategy is simple_byte
  1022  0012E8  0A00               	xorlw	0	; case 0
  1023  0012EA  B4D8               	btfsc	status,2,c
  1024  0012EC  0012               	return	
  1025  0012EE  0A64               	xorlw	100	; case 100
  1026  0012F0  B4D8               	btfsc	status,2,c
  1027  0012F2  D003               	goto	l278
  1028  0012F4  0A0D               	xorlw	13	; case 105
  1029  0012F6  A4D8               	btfss	status,2,c
  1030  0012F8  D066               	goto	u560
  1031  0012FA                     l278:
  1032                           
  1033                           ;doprnt.c: 1253: {
  1034                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1035  0012FA  C012  FFD9         	movff	printf@ap,fsr2l
  1036  0012FE  C013  FFDA         	movff	printf@ap+1,fsr2h
  1037  001302  CFDE F016          	movff	postinc2,printf@val
  1038  001306  CFDD F017          	movff	postdec2,printf@val+1
  1039  00130A  0E02               	movlw	2
  1040  00130C  2612               	addwf	printf@ap,f,c
  1041  00130E  0E00               	movlw	0
  1042  001310  2213               	addwfc	printf@ap+1,f,c
  1043                           
  1044                           ;doprnt.c: 1261: if((int)val < 0) {
  1045  001312  AE17               	btfss	printf@val+1,7,c
  1046  001314  D006               	goto	l280
  1047                           
  1048                           ;doprnt.c: 1262: flag |= 0x03;
  1049  001316  0E03               	movlw	3
  1050  001318  1214               	iorwf	printf@flag,f,c
  1051                           
  1052                           ;doprnt.c: 1263: val = -val;
  1053  00131A  6C16               	negf	printf@val,c
  1054  00131C  1E17               	comf	printf@val+1,f,c
  1055  00131E  B0D8               	btfsc	status,0,c
  1056  001320  2A17               	incf	printf@val+1,f,c
  1057  001322                     l280:
  1058                           
  1059                           ;doprnt.c: 1264: }
  1060                           ;doprnt.c: 1266: }
  1061                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1062  001322  0E01               	movlw	1
  1063  001324  6E18               	movwf	printf@c,c
  1064  001326                     l1453:
  1065  001326  0E05               	movlw	5
  1066  001328  1818               	xorwf	printf@c,w,c
  1067  00132A  B4D8               	btfsc	status,2,c
  1068  00132C  D015               	goto	u540
  1069                           
  1070                           ;doprnt.c: 1306: if(val < dpowers[c])
  1071  00132E  5018               	movf	printf@c,w,c
  1072  001330  0D02               	mullw	2
  1073  001332  0E12               	movlw	low _dpowers
  1074  001334  24F3               	addwf	prodl,w,c
  1075  001336  6EF6               	movwf	tblptrl,c
  1076  001338  0E10               	movlw	high _dpowers
  1077  00133A  20F4               	addwfc	prodh,w,c
  1078  00133C  6EF7               	movwf	tblptrh,c
  1079  00133E                     	if	1	;There are 3 active tblptr bytes
  1080  00133E  6AF8               	clrf	tblptru,c
  1081  001340  0E00               	movlw	low (__mediumconst shr (0+16))
  1082  001342  22F8               	addwfc	tblptru,f,c
  1083  001344                     	endif
  1084  001344  0009               	tblrd		*+
  1085  001346  50F5               	movf	tablat,w,c
  1086  001348  5C16               	subwf	printf@val,w,c
  1087  00134A  0009               	tblrd		*+
  1088  00134C  50F5               	movf	tablat,w,c
  1089  00134E  5817               	subwfb	printf@val+1,w,c
  1090  001350  A0D8               	btfss	status,0,c
  1091  001352  D002               	goto	u540
  1092                           
  1093                           ;doprnt.c: 1307: break;
  1094  001354  2A18               	incf	printf@c,f,c
  1095  001356  D7E7               	goto	l1453
  1096  001358                     u540:
  1097                           
  1098                           ;doprnt.c: 1422: {
  1099                           ;doprnt.c: 1438: if(flag & 0x03)
  1100  001358  C014  F011         	movff	printf@flag,??_printf
  1101  00135C  0E03               	movlw	3
  1102  00135E  1611               	andwf	??_printf,f,c
  1103  001360  B4D8               	btfsc	status,2,c
  1104  001362  D003               	goto	l284
  1105                           
  1106                           ;doprnt.c: 1439: (putch('-') );
  1107  001364  0E2D               	movlw	45
  1108  001366  EC80  F00B         	call	_putch
  1109  00136A                     l284:
  1110                           
  1111                           ;doprnt.c: 1469: }
  1112                           ;doprnt.c: 1472: prec = c;
  1113  00136A  C018  F015         	movff	printf@c,printf@prec
  1114                           
  1115                           ;doprnt.c: 1474: while(prec--) {
  1116  00136E  D027               	goto	l285
  1117  001370                     
  1118                           ;doprnt.c: 1478: {
  1119                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1120  001370  5015               	movf	printf@prec,w,c
  1121  001372  0D02               	mullw	2
  1122  001374  0E12               	movlw	low _dpowers
  1123  001376  24F3               	addwf	prodl,w,c
  1124  001378  6EF6               	movwf	tblptrl,c
  1125  00137A  0E10               	movlw	high _dpowers
  1126  00137C  20F4               	addwfc	prodh,w,c
  1127  00137E  6EF7               	movwf	tblptrh,c
  1128  001380                     	if	1	;There are 3 active tblptr bytes
  1129  001380  6AF8               	clrf	tblptru,c
  1130  001382  0E00               	movlw	low (__mediumconst shr (0+16))
  1131  001384  22F8               	addwfc	tblptru,f,c
  1132  001386                     	endif
  1133  001386  0009               	tblrd		*+
  1134  001388  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1135  00138C  000A               	tblrd		*-
  1136  00138E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1137  001392  C016  F001         	movff	printf@val,___lwdiv@dividend
  1138  001396  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1139  00139A  EC9F  F00A         	call	___lwdiv	;wreg free
  1140  00139E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1141  0013A2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1142  0013A6  0E00               	movlw	0
  1143  0013A8  6E0B               	movwf	___lwmod@divisor+1,c
  1144  0013AA  0E0A               	movlw	10
  1145  0013AC  6E0A               	movwf	___lwmod@divisor,c
  1146  0013AE  EC38  F00B         	call	___lwmod	;wreg free
  1147  0013B2  5008               	movf	?___lwmod,w,c
  1148  0013B4  0F30               	addlw	48
  1149  0013B6  6E18               	movwf	printf@c,c
  1150                           
  1151                           ;doprnt.c: 1523: }
  1152                           ;doprnt.c: 1524: (putch(c) );
  1153  0013B8  5018               	movf	printf@c,w,c
  1154  0013BA  EC80  F00B         	call	_putch
  1155  0013BE                     l285:
  1156  0013BE  0615               	decf	printf@prec,f,c
  1157  0013C0  2815               	incf	printf@prec,w,c
  1158  0013C2  A4D8               	btfss	status,2,c
  1159  0013C4  D7D5               	goto	l286
  1160  0013C6                     u560:
  1161  0013C6  C00D  FFF6         	movff	printf@f,tblptrl
  1162  0013CA  C00E  FFF7         	movff	printf@f+1,tblptrh
  1163  0013CE  4A0D               	infsnz	printf@f,f,c
  1164  0013D0  2A0E               	incf	printf@f+1,f,c
  1165  0013D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1166  0013D2  6AF8               	clrf	tblptru,c
  1167  0013D4                     	endif
  1168  0013D4                     	if	0	;tblptru may be non-zero
  1169  0013D4                     	endif
  1170  0013D4  0008               	tblrd		*
  1171  0013D6  CFF5 F018          	movff	tablat,printf@c
  1172  0013DA  5018               	movf	printf@c,w,c
  1173  0013DC  B4D8               	btfsc	status,2,c
  1174  0013DE  0012               	return	
  1175  0013E0  D76E               	goto	l271
  1176  0013E2                     __end_of_printf:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           prodh	equ	0xFF4
  1183                           prodl	equ	0xFF3
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           postinc2	equ	0xFDE
  1187                           postdec2	equ	0xFDD
  1188                           fsr2h	equ	0xFDA
  1189                           fsr2l	equ	0xFD9
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _putch *****************
  1193 ;; Defined at:
  1194 ;;		line 24 in file "lcd.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  data            1    wreg     unsigned char 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  data            1    2[COMRAM] unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;Total ram usage:        1 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    1
  1215 ;; This function calls:
  1216 ;;		_lcdNibble
  1217 ;; This function is called by:
  1218 ;;		_printf
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text2
  1223  001700                     __ptext2:
  1224                           	opt stack 0
  1225  001700                     _putch:
  1226                           	opt stack 28
  1227                           
  1228                           ;incstack = 0
  1229                           ;putch@data stored from wreg
  1230  001700  6E03               	movwf	putch@data,c
  1231                           
  1232                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1233  001702  848C               	bsf	3980,2,c	;volatile
  1234                           
  1235                           ;lcd.c: 33: lcdNibble(data);
  1236  001704  5003               	movf	putch@data,w,c
  1237  001706  EC32  F00A         	call	_lcdNibble
  1238                           
  1239                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1240  00170A  0EC8               	movlw	200
  1241  00170C                     u677:
  1242  00170C  D000               	nop2	
  1243  00170E  2EE8               	decfsz	wreg,f,c
  1244  001710  D7FD               	bra	u677
  1245  001712  0012               	return		;funcret
  1246  001714                     __end_of_putch:
  1247                           	opt stack 0
  1248                           tblptru	equ	0xFF8
  1249                           tblptrh	equ	0xFF7
  1250                           tblptrl	equ	0xFF6
  1251                           tablat	equ	0xFF5
  1252                           prodh	equ	0xFF4
  1253                           prodl	equ	0xFF3
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postinc2	equ	0xFDE
  1257                           postdec2	equ	0xFDD
  1258                           fsr2h	equ	0xFDA
  1259                           fsr2l	equ	0xFD9
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function ___lwmod *****************
  1263 ;; Defined at:
  1264 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  dividend        2    7[COMRAM] unsigned int 
  1267 ;;  divisor         2    9[COMRAM] unsigned int 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  counter         1   11[COMRAM] unsigned char 
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  2    7[COMRAM] unsigned int 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;Total ram usage:        5 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; This function calls:
  1286 ;;		Nothing
  1287 ;; This function is called by:
  1288 ;;		_printf
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text3
  1293  001670                     __ptext3:
  1294                           	opt stack 0
  1295  001670                     ___lwmod:
  1296                           	opt stack 29
  1297                           
  1298                           ;incstack = 0
  1299  001670  500A               	movf	___lwmod@divisor,w,c
  1300  001672  100B               	iorwf	___lwmod@divisor+1,w,c
  1301  001674  B4D8               	btfsc	status,2,c
  1302  001676  D018               	goto	l708
  1303  001678  0E01               	movlw	1
  1304  00167A  6E0C               	movwf	___lwmod@counter,c
  1305  00167C  D004               	goto	l703
  1306  00167E  90D8               	bcf	status,0,c
  1307  001680  360A               	rlcf	___lwmod@divisor,f,c
  1308  001682  360B               	rlcf	___lwmod@divisor+1,f,c
  1309  001684  2A0C               	incf	___lwmod@counter,f,c
  1310  001686                     l703:
  1311  001686  AE0B               	btfss	___lwmod@divisor+1,7,c
  1312  001688  D7FA               	goto	l704
  1313  00168A                     u480:
  1314  00168A  500A               	movf	___lwmod@divisor,w,c
  1315  00168C  5C08               	subwf	___lwmod@dividend,w,c
  1316  00168E  500B               	movf	___lwmod@divisor+1,w,c
  1317  001690  5809               	subwfb	___lwmod@dividend+1,w,c
  1318  001692  A0D8               	btfss	status,0,c
  1319  001694  D004               	goto	l707
  1320  001696  500A               	movf	___lwmod@divisor,w,c
  1321  001698  5E08               	subwf	___lwmod@dividend,f,c
  1322  00169A  500B               	movf	___lwmod@divisor+1,w,c
  1323  00169C  5A09               	subwfb	___lwmod@dividend+1,f,c
  1324  00169E                     l707:
  1325  00169E  90D8               	bcf	status,0,c
  1326  0016A0  320B               	rrcf	___lwmod@divisor+1,f,c
  1327  0016A2  320A               	rrcf	___lwmod@divisor,f,c
  1328  0016A4  2E0C               	decfsz	___lwmod@counter,f,c
  1329  0016A6  D7F1               	goto	u480
  1330  0016A8                     l708:
  1331  0016A8  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1332  0016AC  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1333  0016B0  0012               	return		;funcret
  1334  0016B2                     __end_of___lwmod:
  1335                           	opt stack 0
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           prodh	equ	0xFF4
  1341                           prodl	equ	0xFF3
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postinc2	equ	0xFDE
  1345                           postdec2	equ	0xFDD
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function ___lwdiv *****************
  1351 ;; Defined at:
  1352 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  dividend        2    0[COMRAM] unsigned int 
  1355 ;;  divisor         2    2[COMRAM] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  quotient        2    4[COMRAM] unsigned int 
  1358 ;;  counter         1    6[COMRAM] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  2    0[COMRAM] unsigned int 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1369 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;Total ram usage:        7 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_printf
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text4
  1382  00153E                     __ptext4:
  1383                           	opt stack 0
  1384  00153E                     ___lwdiv:
  1385                           	opt stack 29
  1386                           
  1387                           ;incstack = 0
  1388  00153E  0E00               	movlw	0
  1389  001540  6E06               	movwf	___lwdiv@quotient+1,c
  1390  001542  0E00               	movlw	0
  1391  001544  6E05               	movwf	___lwdiv@quotient,c
  1392  001546  5003               	movf	___lwdiv@divisor,w,c
  1393  001548  1004               	iorwf	___lwdiv@divisor+1,w,c
  1394  00154A  B4D8               	btfsc	status,2,c
  1395  00154C  D01C               	goto	l698
  1396  00154E  0E01               	movlw	1
  1397  001550  6E07               	movwf	___lwdiv@counter,c
  1398  001552  D004               	goto	l693
  1399  001554  90D8               	bcf	status,0,c
  1400  001556  3603               	rlcf	___lwdiv@divisor,f,c
  1401  001558  3604               	rlcf	___lwdiv@divisor+1,f,c
  1402  00155A  2A07               	incf	___lwdiv@counter,f,c
  1403  00155C                     l693:
  1404  00155C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1405  00155E  D7FA               	goto	l694
  1406  001560                     u450:
  1407  001560  90D8               	bcf	status,0,c
  1408  001562  3605               	rlcf	___lwdiv@quotient,f,c
  1409  001564  3606               	rlcf	___lwdiv@quotient+1,f,c
  1410  001566  5003               	movf	___lwdiv@divisor,w,c
  1411  001568  5C01               	subwf	___lwdiv@dividend,w,c
  1412  00156A  5004               	movf	___lwdiv@divisor+1,w,c
  1413  00156C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1414  00156E  A0D8               	btfss	status,0,c
  1415  001570  D005               	goto	l697
  1416  001572  5003               	movf	___lwdiv@divisor,w,c
  1417  001574  5E01               	subwf	___lwdiv@dividend,f,c
  1418  001576  5004               	movf	___lwdiv@divisor+1,w,c
  1419  001578  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1420  00157A  8005               	bsf	___lwdiv@quotient,0,c
  1421  00157C                     l697:
  1422  00157C  90D8               	bcf	status,0,c
  1423  00157E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1424  001580  3203               	rrcf	___lwdiv@divisor,f,c
  1425  001582  2E07               	decfsz	___lwdiv@counter,f,c
  1426  001584  D7ED               	goto	u450
  1427  001586                     l698:
  1428  001586  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1429  00158A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1430  00158E  0012               	return		;funcret
  1431  001590                     __end_of___lwdiv:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           prodh	equ	0xFF4
  1438                           prodl	equ	0xFF3
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postinc2	equ	0xFDE
  1442                           postdec2	equ	0xFDD
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _motorStop_1 *****************
  1448 ;; Defined at:
  1449 ;;		line 284 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    2
  1470 ;; This function calls:
  1471 ;;		_I2C_Master_Init
  1472 ;;		_I2C_Master_Start
  1473 ;;		_I2C_Master_Stop
  1474 ;;		_I2C_Master_Write
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text5
  1481  0015DC                     __ptext5:
  1482                           	opt stack 0
  1483  0015DC                     _motorStop_1:
  1484                           	opt stack 28
  1485                           
  1486                           ;main.c: 285: I2C_Master_Init(100000);
  1487                           
  1488                           ;incstack = 0
  1489  0015DC  0EA0               	movlw	160
  1490  0015DE  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1491  0015E0  0E86               	movlw	134
  1492  0015E2  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1493  0015E4  0E01               	movlw	1
  1494  0015E6  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1495  0015E8  0E00               	movlw	0
  1496  0015EA  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1497  0015EC  EC71  F00A         	call	_I2C_Master_Init	;wreg free
  1498                           
  1499                           ;main.c: 286: I2C_Master_Start();
  1500  0015F0  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1501                           
  1502                           ;main.c: 288: I2C_Master_Write(0b00010000);
  1503  0015F4  0E00               	movlw	0
  1504  0015F6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1505  0015F8  0E10               	movlw	16
  1506  0015FA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1507  0015FC  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1508                           
  1509                           ;main.c: 289: I2C_Master_Stop();
  1510  001600  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1511                           
  1512                           ;main.c: 292: I2C_Master_Start();
  1513  001604  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1514                           
  1515                           ;main.c: 293: I2C_Master_Write(0b00010000);
  1516  001608  0E00               	movlw	0
  1517  00160A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1518  00160C  0E10               	movlw	16
  1519  00160E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1520  001610  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1521                           
  1522                           ;main.c: 294: I2C_Master_Write('6');
  1523  001614  0E00               	movlw	0
  1524  001616  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1525  001618  0E36               	movlw	54
  1526  00161A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1527  00161C  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1528                           
  1529                           ;main.c: 295: I2C_Master_Stop();
  1530  001620  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1531  001624  0012               	return		;funcret
  1532  001626                     __end_of_motorStop_1:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           prodh	equ	0xFF4
  1539                           prodl	equ	0xFF3
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postinc2	equ	0xFDE
  1543                           postdec2	equ	0xFDD
  1544                           fsr2h	equ	0xFDA
  1545                           fsr2l	equ	0xFD9
  1546                           status	equ	0xFD8
  1547                           
  1548 ;; *************** function _motorStart_1 *****************
  1549 ;; Defined at:
  1550 ;;		line 269 in file "main.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;Total ram usage:        0 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    2
  1571 ;; This function calls:
  1572 ;;		_I2C_Master_Init
  1573 ;;		_I2C_Master_Start
  1574 ;;		_I2C_Master_Stop
  1575 ;;		_I2C_Master_Write
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text6
  1582  001626                     __ptext6:
  1583                           	opt stack 0
  1584  001626                     _motorStart_1:
  1585                           	opt stack 28
  1586                           
  1587                           ;main.c: 270: I2C_Master_Init(100000);
  1588                           
  1589                           ;incstack = 0
  1590  001626  0EA0               	movlw	160
  1591  001628  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1592  00162A  0E86               	movlw	134
  1593  00162C  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1594  00162E  0E01               	movlw	1
  1595  001630  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1596  001632  0E00               	movlw	0
  1597  001634  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1598  001636  EC71  F00A         	call	_I2C_Master_Init	;wreg free
  1599                           
  1600                           ;main.c: 271: I2C_Master_Start();
  1601  00163A  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1602                           
  1603                           ;main.c: 273: I2C_Master_Write(0b00010000);
  1604  00163E  0E00               	movlw	0
  1605  001640  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1606  001642  0E10               	movlw	16
  1607  001644  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1608  001646  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1609                           
  1610                           ;main.c: 274: I2C_Master_Stop();
  1611  00164A  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1612                           
  1613                           ;main.c: 277: I2C_Master_Start();
  1614  00164E  ECA6  F00B         	call	_I2C_Master_Start	;wreg free
  1615                           
  1616                           ;main.c: 278: I2C_Master_Write(0b00010000);
  1617  001652  0E00               	movlw	0
  1618  001654  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1619  001656  0E10               	movlw	16
  1620  001658  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1621  00165A  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1622                           
  1623                           ;main.c: 279: I2C_Master_Write('5');
  1624  00165E  0E00               	movlw	0
  1625  001660  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1626  001662  0E35               	movlw	53
  1627  001664  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1628  001666  EC9D  F00B         	call	_I2C_Master_Write	;wreg free
  1629                           
  1630                           ;main.c: 280: I2C_Master_Stop();
  1631  00166A  ECA2  F00B         	call	_I2C_Master_Stop	;wreg free
  1632  00166E  0012               	return		;funcret
  1633  001670                     __end_of_motorStart_1:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           prodh	equ	0xFF4
  1640                           prodl	equ	0xFF3
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           postinc2	equ	0xFDE
  1644                           postdec2	equ	0xFDD
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _I2C_Master_Write *****************
  1650 ;; Defined at:
  1651 ;;		line 108 in file "I2C.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1665 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;Total ram usage:        2 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		_I2C_Master_Wait
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;;		_motorStart_1
  1677 ;;		_motorStop_1
  1678 ;;		_motorStart_0
  1679 ;;		_motorStop_0
  1680 ;;		_motorStart_2
  1681 ;;		_motorStop_2
  1682 ;;		_motorStart_3
  1683 ;;		_motorStop_3
  1684 ;;		_count_nuts
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text7
  1689  00173A                     __ptext7:
  1690                           	opt stack 0
  1691  00173A                     _I2C_Master_Write:
  1692                           	opt stack 28
  1693                           
  1694                           ;I2C.c: 116: I2C_Master_Wait();
  1695                           
  1696                           ;incstack = 0
  1697  00173A  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  1698                           
  1699                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1700  00173E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1701  001742  0012               	return		;funcret
  1702  001744                     __end_of_I2C_Master_Write:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           prodh	equ	0xFF4
  1709                           prodl	equ	0xFF3
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           postinc2	equ	0xFDE
  1713                           postdec2	equ	0xFDD
  1714                           fsr2h	equ	0xFDA
  1715                           fsr2l	equ	0xFD9
  1716                           status	equ	0xFD8
  1717                           
  1718 ;; *************** function _I2C_Master_Stop *****************
  1719 ;; Defined at:
  1720 ;;		line 95 in file "I2C.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    1
  1741 ;; This function calls:
  1742 ;;		_I2C_Master_Wait
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;;		_motorStart_1
  1746 ;;		_motorStop_1
  1747 ;;		_motorStart_0
  1748 ;;		_motorStop_0
  1749 ;;		_motorStart_2
  1750 ;;		_motorStop_2
  1751 ;;		_motorStart_3
  1752 ;;		_motorStop_3
  1753 ;;		_count_nuts
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text8
  1758  001744                     __ptext8:
  1759                           	opt stack 0
  1760  001744                     _I2C_Master_Stop:
  1761                           	opt stack 28
  1762                           
  1763                           ;I2C.c: 104: I2C_Master_Wait();
  1764                           
  1765                           ;incstack = 0
  1766  001744  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  1767                           
  1768                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1769  001748  84C5               	bsf	4037,2,c	;volatile
  1770  00174A  0012               	return		;funcret
  1771  00174C                     __end_of_I2C_Master_Stop:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _I2C_Master_Start *****************
  1788 ;; Defined at:
  1789 ;;		line 69 in file "I2C.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    1
  1810 ;; This function calls:
  1811 ;;		_I2C_Master_Wait
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;;		_motorStart_1
  1815 ;;		_motorStop_1
  1816 ;;		_motorStart_0
  1817 ;;		_motorStop_0
  1818 ;;		_motorStart_2
  1819 ;;		_motorStop_2
  1820 ;;		_motorStart_3
  1821 ;;		_motorStop_3
  1822 ;;		_count_nuts
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text9
  1827  00174C                     __ptext9:
  1828                           	opt stack 0
  1829  00174C                     _I2C_Master_Start:
  1830                           	opt stack 28
  1831                           
  1832                           ;I2C.c: 78: I2C_Master_Wait();
  1833                           
  1834                           ;incstack = 0
  1835  00174C  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  1836                           
  1837                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1838  001750  80C5               	bsf	4037,0,c	;volatile
  1839  001752  0012               	return		;funcret
  1840  001754                     __end_of_I2C_Master_Start:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           postinc2	equ	0xFDE
  1851                           postdec2	equ	0xFDD
  1852                           fsr2h	equ	0xFDA
  1853                           fsr2l	equ	0xFD9
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function _I2C_Master_Init *****************
  1857 ;; Defined at:
  1858 ;;		line 14 in file "I2C.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2, status,0, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;Total ram usage:        8 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    1
  1879 ;; This function calls:
  1880 ;;		___lldiv
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;;		_motorStart_1
  1884 ;;		_motorStop_1
  1885 ;;		_motorStart_0
  1886 ;;		_motorStop_0
  1887 ;;		_motorStart_2
  1888 ;;		_motorStop_2
  1889 ;;		_motorStart_3
  1890 ;;		_motorStop_3
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text10
  1895  0014E2                     __ptext10:
  1896                           	opt stack 0
  1897  0014E2                     _I2C_Master_Init:
  1898                           	opt stack 28
  1899                           
  1900                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1901                           
  1902                           ;incstack = 0
  1903  0014E2  9AC6               	bcf	4038,5,c	;volatile
  1904                           
  1905                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1906  0014E4  8694               	bsf	3988,3,c	;volatile
  1907                           
  1908                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1909  0014E6  8894               	bsf	3988,4,c	;volatile
  1910                           
  1911                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1912  0014E8  0E80               	movlw	128
  1913  0014EA  6EC7               	movwf	4039,c	;volatile
  1914                           
  1915                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1916  0014EC  0E28               	movlw	40
  1917  0014EE  6EC6               	movwf	4038,c	;volatile
  1918                           
  1919                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1920  0014F0  0E00               	movlw	0
  1921  0014F2  6EC5               	movwf	4037,c	;volatile
  1922                           
  1923                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  1924  0014F4  0E00               	movlw	0
  1925  0014F6  6E01               	movwf	___lldiv@dividend,c
  1926  0014F8  0E5A               	movlw	90
  1927  0014FA  6E02               	movwf	___lldiv@dividend+1,c
  1928  0014FC  0E62               	movlw	98
  1929  0014FE  6E03               	movwf	___lldiv@dividend+2,c
  1930  001500  0E02               	movlw	2
  1931  001502  6E04               	movwf	___lldiv@dividend+3,c
  1932  001504  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  1933  001508  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  1934  00150C  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  1935  001510  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  1936  001514  0E02               	movlw	2
  1937  001516                     u435:
  1938  001516  90D8               	bcf	status,0,c
  1939  001518  3612               	rlcf	??_I2C_Master_Init,f,c
  1940  00151A  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1941  00151C  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1942  00151E  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1943  001520  2EE8               	decfsz	wreg,f,c
  1944  001522  D7F9               	goto	u435
  1945  001524  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1946  001528  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1947  00152C  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1948  001530  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1949  001534  ECF1  F009         	call	___lldiv	;wreg free
  1950  001538  0401               	decf	?___lldiv,w,c
  1951  00153A  6EC8               	movwf	4040,c	;volatile
  1952  00153C  0012               	return		;funcret
  1953  00153E                     __end_of_I2C_Master_Init:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function ___lldiv *****************
  1970 ;; Defined at:
  1971 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  dividend        4    0[COMRAM] unsigned long 
  1974 ;;  divisor         4    4[COMRAM] unsigned long 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  quotient        4    8[COMRAM] unsigned long 
  1977 ;;  counter         1   12[COMRAM] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  4    0[COMRAM] unsigned long 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1987 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;Total ram usage:       13 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_I2C_Master_Init
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text11
  2001  0013E2                     __ptext11:
  2002                           	opt stack 0
  2003  0013E2                     ___lldiv:
  2004                           	opt stack 28
  2005                           
  2006                           ;incstack = 0
  2007  0013E2  0E00               	movlw	0
  2008  0013E4  6E09               	movwf	___lldiv@quotient,c
  2009  0013E6  0E00               	movlw	0
  2010  0013E8  6E0A               	movwf	___lldiv@quotient+1,c
  2011  0013EA  0E00               	movlw	0
  2012  0013EC  6E0B               	movwf	___lldiv@quotient+2,c
  2013  0013EE  0E00               	movlw	0
  2014  0013F0  6E0C               	movwf	___lldiv@quotient+3,c
  2015  0013F2  5005               	movf	___lldiv@divisor,w,c
  2016  0013F4  1006               	iorwf	___lldiv@divisor+1,w,c
  2017  0013F6  1007               	iorwf	___lldiv@divisor+2,w,c
  2018  0013F8  1008               	iorwf	___lldiv@divisor+3,w,c
  2019  0013FA  B4D8               	btfsc	status,2,c
  2020  0013FC  D02A               	goto	l645
  2021  0013FE  0E01               	movlw	1
  2022  001400  6E0D               	movwf	___lldiv@counter,c
  2023  001402  D006               	goto	l640
  2024  001404  90D8               	bcf	status,0,c
  2025  001406  3605               	rlcf	___lldiv@divisor,f,c
  2026  001408  3606               	rlcf	___lldiv@divisor+1,f,c
  2027  00140A  3607               	rlcf	___lldiv@divisor+2,f,c
  2028  00140C  3608               	rlcf	___lldiv@divisor+3,f,c
  2029  00140E  2A0D               	incf	___lldiv@counter,f,c
  2030  001410                     l640:
  2031  001410  AE08               	btfss	___lldiv@divisor+3,7,c
  2032  001412  D7F8               	goto	l641
  2033  001414                     u410:
  2034  001414  90D8               	bcf	status,0,c
  2035  001416  3609               	rlcf	___lldiv@quotient,f,c
  2036  001418  360A               	rlcf	___lldiv@quotient+1,f,c
  2037  00141A  360B               	rlcf	___lldiv@quotient+2,f,c
  2038  00141C  360C               	rlcf	___lldiv@quotient+3,f,c
  2039  00141E  5005               	movf	___lldiv@divisor,w,c
  2040  001420  5C01               	subwf	___lldiv@dividend,w,c
  2041  001422  5006               	movf	___lldiv@divisor+1,w,c
  2042  001424  5802               	subwfb	___lldiv@dividend+1,w,c
  2043  001426  5007               	movf	___lldiv@divisor+2,w,c
  2044  001428  5803               	subwfb	___lldiv@dividend+2,w,c
  2045  00142A  5008               	movf	___lldiv@divisor+3,w,c
  2046  00142C  5804               	subwfb	___lldiv@dividend+3,w,c
  2047  00142E  A0D8               	btfss	status,0,c
  2048  001430  D009               	goto	l644
  2049  001432  5005               	movf	___lldiv@divisor,w,c
  2050  001434  5E01               	subwf	___lldiv@dividend,f,c
  2051  001436  5006               	movf	___lldiv@divisor+1,w,c
  2052  001438  5A02               	subwfb	___lldiv@dividend+1,f,c
  2053  00143A  5007               	movf	___lldiv@divisor+2,w,c
  2054  00143C  5A03               	subwfb	___lldiv@dividend+2,f,c
  2055  00143E  5008               	movf	___lldiv@divisor+3,w,c
  2056  001440  5A04               	subwfb	___lldiv@dividend+3,f,c
  2057  001442  8009               	bsf	___lldiv@quotient,0,c
  2058  001444                     l644:
  2059  001444  90D8               	bcf	status,0,c
  2060  001446  3208               	rrcf	___lldiv@divisor+3,f,c
  2061  001448  3207               	rrcf	___lldiv@divisor+2,f,c
  2062  00144A  3206               	rrcf	___lldiv@divisor+1,f,c
  2063  00144C  3205               	rrcf	___lldiv@divisor,f,c
  2064  00144E  2E0D               	decfsz	___lldiv@counter,f,c
  2065  001450  D7E1               	goto	u410
  2066  001452                     l645:
  2067  001452  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2068  001456  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2069  00145A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2070  00145E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2071  001462  0012               	return		;funcret
  2072  001464                     __end_of___lldiv:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           prodh	equ	0xFF4
  2079                           prodl	equ	0xFF3
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postinc2	equ	0xFDE
  2083                           postdec2	equ	0xFDD
  2084                           fsr2h	equ	0xFDA
  2085                           fsr2l	equ	0xFD9
  2086                           status	equ	0xFD8
  2087                           
  2088 ;; *************** function _initLCD *****************
  2089 ;; Defined at:
  2090 ;;		line 60 in file "lcd.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;Total ram usage:        1 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    2
  2111 ;; This function calls:
  2112 ;;		_lcdInst
  2113 ;; This function is called by:
  2114 ;;		_main
  2115 ;;		_count_nuts
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text12
  2120  001590                     __ptext12:
  2121                           	opt stack 0
  2122  001590                     _initLCD:
  2123                           	opt stack 28
  2124                           
  2125                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2126                           
  2127                           ;incstack = 0
  2128  001590  0EC3               	movlw	195
  2129  001592  6E04               	movwf	??_initLCD& (0+255),c
  2130  001594  0ECD               	movlw	205
  2131  001596                     u687:
  2132  001596  2EE8               	decfsz	wreg,f,c
  2133  001598  D7FE               	bra	u687
  2134  00159A  2E04               	decfsz	??_initLCD& (0+255),f,c
  2135  00159C  D7FC               	bra	u687
  2136  00159E  F000               	nop	
  2137                           
  2138                           ;lcd.c: 69: lcdInst(0b00110011);
  2139  0015A0  0E33               	movlw	51
  2140  0015A2  EC8A  F00B         	call	_lcdInst
  2141                           
  2142                           ;lcd.c: 70: lcdInst(0b00110010);
  2143  0015A6  0E32               	movlw	50
  2144  0015A8  EC8A  F00B         	call	_lcdInst
  2145                           
  2146                           ;lcd.c: 71: lcdInst(0b00101000);
  2147  0015AC  0E28               	movlw	40
  2148  0015AE  EC8A  F00B         	call	_lcdInst
  2149                           
  2150                           ;lcd.c: 72: lcdInst(0b00001111);
  2151  0015B2  0E0F               	movlw	15
  2152  0015B4  EC8A  F00B         	call	_lcdInst
  2153                           
  2154                           ;lcd.c: 73: lcdInst(0b00000110);
  2155  0015B8  0E06               	movlw	6
  2156  0015BA  EC8A  F00B         	call	_lcdInst
  2157                           
  2158                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2159  0015BE  0E01               	movlw	1
  2160  0015C0  EC8A  F00B         	call	_lcdInst
  2161  0015C4  0EC3               	movlw	195
  2162  0015C6  6E04               	movwf	??_initLCD& (0+255),c
  2163  0015C8  0ECD               	movlw	205
  2164  0015CA                     u697:
  2165  0015CA  2EE8               	decfsz	wreg,f,c
  2166  0015CC  D7FE               	bra	u697
  2167  0015CE  2E04               	decfsz	??_initLCD& (0+255),f,c
  2168  0015D0  D7FC               	bra	u697
  2169  0015D2  F000               	nop	
  2170                           
  2171                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2172  0015D4  0E0F               	movlw	15
  2173  0015D6  EC8A  F00B         	call	_lcdInst
  2174  0015DA  0012               	return		;funcret
  2175  0015DC                     __end_of_initLCD:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           prodh	equ	0xFF4
  2182                           prodl	equ	0xFF3
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postinc2	equ	0xFDE
  2186                           postdec2	equ	0xFDD
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _lcdInst *****************
  2192 ;; Defined at:
  2193 ;;		line 11 in file "lcd.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  data            1    wreg     unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  data            1    2[COMRAM] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;Total ram usage:        1 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    1
  2214 ;; This function calls:
  2215 ;;		_lcdNibble
  2216 ;; This function is called by:
  2217 ;;		_main
  2218 ;;		_initLCD
  2219 ;;		_lcd_set_cursor
  2220 ;;		_lcd_shift_cursor
  2221 ;;		_lcd_shift_display
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text13
  2226  001714                     __ptext13:
  2227                           	opt stack 0
  2228  001714                     _lcdInst:
  2229                           	opt stack 29
  2230                           
  2231                           ;incstack = 0
  2232                           ;lcdInst@data stored from wreg
  2233  001714  6E03               	movwf	lcdInst@data,c
  2234                           
  2235                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2236  001716  948C               	bcf	3980,2,c	;volatile
  2237                           
  2238                           ;lcd.c: 20: lcdNibble(data);
  2239  001718  5003               	movf	lcdInst@data,w,c
  2240  00171A  EC32  F00A         	call	_lcdNibble
  2241                           
  2242                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2243  00171E  0EC8               	movlw	200
  2244  001720                     u707:
  2245  001720  D000               	nop2	
  2246  001722  2EE8               	decfsz	wreg,f,c
  2247  001724  D7FD               	bra	u707
  2248  001726  0012               	return		;funcret
  2249  001728                     __end_of_lcdInst:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postinc2	equ	0xFDE
  2260                           postdec2	equ	0xFDD
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _lcdNibble *****************
  2266 ;; Defined at:
  2267 ;;		line 37 in file "lcd.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  data            1    wreg     unsigned char 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  data            1    1[COMRAM] unsigned char 
  2272 ;;  temp            1    0[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;Total ram usage:        2 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_lcdInst
  2292 ;;		_putch
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text14
  2297  001464                     __ptext14:
  2298                           	opt stack 0
  2299  001464                     _lcdNibble:
  2300                           	opt stack 28
  2301                           
  2302                           ;incstack = 0
  2303                           ;lcdNibble@data stored from wreg
  2304  001464  6E02               	movwf	lcdNibble@data,c
  2305                           
  2306                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2307  001466  5002               	movf	lcdNibble@data,w,c
  2308  001468  0BF0               	andlw	240
  2309  00146A  6E01               	movwf	lcdNibble@temp,c
  2310                           
  2311                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2312  00146C  508C               	movf	3980,w,c	;volatile
  2313  00146E  0B0F               	andlw	15
  2314  001470  6E8C               	movwf	3980,c	;volatile
  2315                           
  2316                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2317  001472  5001               	movf	lcdNibble@temp,w,c
  2318  001474  108C               	iorwf	3980,w,c	;volatile
  2319  001476  6E8C               	movwf	3980,c	;volatile
  2320                           
  2321                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2322  001478  0E00               	movlw	0
  2323  00147A  BEF2               	btfsc	intcon,7,c	;volatile
  2324  00147C  0E01               	movlw	1
  2325  00147E  6E27               	movwf	lcd@LCDinterruptState,c
  2326  001480  9EF2               	bcf	intcon,7,c	;volatile
  2327  001482  868C               	bsf	3980,3,c	;volatile
  2328  001484  0E53               	movlw	83
  2329  001486                     u717:
  2330  001486  2EE8               	decfsz	wreg,f,c
  2331  001488  D7FE               	bra	u717
  2332  00148A  F000               	nop	
  2333  00148C  968C               	bcf	3980,3,c	;volatile
  2334  00148E  0EC8               	movlw	200
  2335  001490                     u727:
  2336  001490  D000               	nop2	
  2337  001492  2EE8               	decfsz	wreg,f,c
  2338  001494  D7FD               	bra	u727
  2339  001496  B027               	btfsc	lcd@LCDinterruptState,0,c
  2340  001498  D002               	bra	u15
  2341  00149A  9EF2               	bcf	intcon,7,c	;volatile
  2342  00149C  D001               	bra	u16
  2343  00149E                     u15:
  2344  00149E  8EF2               	bsf	intcon,7,c	;volatile
  2345  0014A0                     u16:
  2346                           
  2347                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2348  0014A0  3802               	swapf	lcdNibble@data,w,c
  2349  0014A2  0BF0               	andlw	240
  2350  0014A4  6E02               	movwf	lcdNibble@data,c
  2351                           
  2352                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2353  0014A6  5002               	movf	lcdNibble@data,w,c
  2354  0014A8  0BF0               	andlw	240
  2355  0014AA  6E01               	movwf	lcdNibble@temp,c
  2356                           
  2357                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2358  0014AC  508C               	movf	3980,w,c	;volatile
  2359  0014AE  0B0F               	andlw	15
  2360  0014B0  6E8C               	movwf	3980,c	;volatile
  2361                           
  2362                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2363  0014B2  5001               	movf	lcdNibble@temp,w,c
  2364  0014B4  108C               	iorwf	3980,w,c	;volatile
  2365  0014B6  6E8C               	movwf	3980,c	;volatile
  2366                           
  2367                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2368  0014B8  0E00               	movlw	0
  2369  0014BA  BEF2               	btfsc	intcon,7,c	;volatile
  2370  0014BC  0E01               	movlw	1
  2371  0014BE  6E27               	movwf	lcd@LCDinterruptState,c
  2372  0014C0  9EF2               	bcf	intcon,7,c	;volatile
  2373  0014C2  868C               	bsf	3980,3,c	;volatile
  2374  0014C4  0E53               	movlw	83
  2375  0014C6                     u737:
  2376  0014C6  2EE8               	decfsz	wreg,f,c
  2377  0014C8  D7FE               	bra	u737
  2378  0014CA  F000               	nop	
  2379  0014CC  968C               	bcf	3980,3,c	;volatile
  2380  0014CE  0EC8               	movlw	200
  2381  0014D0                     u747:
  2382  0014D0  D000               	nop2	
  2383  0014D2  2EE8               	decfsz	wreg,f,c
  2384  0014D4  D7FD               	bra	u747
  2385  0014D6  B027               	btfsc	lcd@LCDinterruptState,0,c
  2386  0014D8  D002               	bra	u25
  2387  0014DA  9EF2               	bcf	intcon,7,c	;volatile
  2388  0014DC  D001               	bra	u26
  2389  0014DE                     u25:
  2390  0014DE  8EF2               	bsf	intcon,7,c	;volatile
  2391  0014E0                     u26:
  2392  0014E0  0012               	return		;funcret
  2393  0014E2                     __end_of_lcdNibble:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           intcon	equ	0xFF2
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           postinc2	equ	0xFDE
  2405                           postdec2	equ	0xFDD
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function _I2C_Master_Read *****************
  2411 ;; Defined at:
  2412 ;;		line 120 in file "I2C.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  ackBit          1    wreg     unsigned char 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  ackBit          1    1[COMRAM] unsigned char 
  2417 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      unsigned char 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;Total ram usage:        2 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    1
  2434 ;; This function calls:
  2435 ;;		_I2C_Master_Wait
  2436 ;; This function is called by:
  2437 ;;		_main
  2438 ;;		_count_nuts
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text15
  2443  0016DC                     __ptext15:
  2444                           	opt stack 0
  2445  0016DC                     _I2C_Master_Read:
  2446                           	opt stack 29
  2447                           
  2448                           ;incstack = 0
  2449                           ;I2C_Master_Read@ackBit stored from wreg
  2450  0016DC  6E02               	movwf	I2C_Master_Read@ackBit,c
  2451                           
  2452                           ;I2C.c: 130: unsigned char receivedByte;
  2453                           ;I2C.c: 132: I2C_Master_Wait();
  2454  0016DE  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  2455                           
  2456                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2457  0016E2  86C5               	bsf	4037,3,c	;volatile
  2458                           
  2459                           ;I2C.c: 135: I2C_Master_Wait();
  2460  0016E4  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  2461                           
  2462                           ;I2C.c: 136: receivedByte = SSPBUF;
  2463  0016E8  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2464                           
  2465                           ;I2C.c: 138: I2C_Master_Wait();
  2466  0016EC  EC94  F00B         	call	_I2C_Master_Wait	;wreg free
  2467                           
  2468                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2469  0016F0  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2470  0016F2  D002               	bra	u235
  2471  0016F4  9AC5               	bcf	4037,5,c	;volatile
  2472  0016F6  D001               	bra	u236
  2473  0016F8                     u235:
  2474  0016F8  8AC5               	bsf	4037,5,c	;volatile
  2475  0016FA                     u236:
  2476                           
  2477                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2478  0016FA  88C5               	bsf	4037,4,c	;volatile
  2479                           
  2480                           ;I2C.c: 142: return receivedByte;
  2481  0016FC  5003               	movf	I2C_Master_Read@receivedByte,w,c
  2482  0016FE  0012               	return	
  2483  001700                     __end_of_I2C_Master_Read:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           tblptrh	equ	0xFF7
  2487                           tblptrl	equ	0xFF6
  2488                           tablat	equ	0xFF5
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           intcon	equ	0xFF2
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postinc2	equ	0xFDE
  2495                           postdec2	equ	0xFDD
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _I2C_Master_Wait *****************
  2501 ;; Defined at:
  2502 ;;		line 51 in file "I2C.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;Total ram usage:        1 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_I2C_Master_Start
  2526 ;;		_I2C_Master_Stop
  2527 ;;		_I2C_Master_Write
  2528 ;;		_I2C_Master_Read
  2529 ;;		_I2C_Master_RepeatedStart
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text16
  2534  001728                     __ptext16:
  2535                           	opt stack 0
  2536  001728                     _I2C_Master_Wait:
  2537                           	opt stack 28
  2538                           
  2539                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2540                           
  2541                           ;incstack = 0
  2542  001728  B4C7               	btfsc	4039,2,c	;volatile
  2543  00172A  D7FE               	goto	_I2C_Master_Wait
  2544  00172C  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2545  001730  0E1F               	movlw	31
  2546  001732  1601               	andwf	??_I2C_Master_Wait,f,c
  2547  001734  B4D8               	btfsc	status,2,c
  2548  001736  0012               	return	
  2549  001738  D7F7               	goto	_I2C_Master_Wait
  2550  00173A                     __end_of_I2C_Master_Wait:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           prodh	equ	0xFF4
  2557                           prodl	equ	0xFF3
  2558                           intcon	equ	0xFF2
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           postinc2	equ	0xFDE
  2562                           postdec2	equ	0xFDD
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           intcon	equ	0xFF2
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postinc2	equ	0xFDE
  2576                           postdec2	equ	0xFDD
  2577                           fsr2h	equ	0xFDA
  2578                           fsr2l	equ	0xFD9
  2579                           status	equ	0xFD8
  2580                           
  2581                           	psect	rparam
  2582  0000                     tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    36
    Data        2
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_1->_I2C_Master_Init
    _motorStart_1->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12493
                                             24 COMRAM     2     2      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_1
                        _motorStop_1
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1633
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          0     0      0    3550
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         0     0      0    3550
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2454
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      34        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 18:46:23 2018

                          _i 001B                           u15 149E                           u16 14A0  
                         u25 14DE                           u26 14E0                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l101 10E6  
                        l102 1116                          l103 1158                          l104 113E  
                        l106 1214                          l107 122A                          l108 1284  
                        l271 12BE                          l280 1322                          l272 12CE  
                        l284 136A                          l285 13BE                          l286 1370  
                        l278 12FA                          l703 1686                          l640 1410  
                        l704 167E                          l641 1404                          l707 169E  
                        l644 1444                          l708 16A8                          l645 1452  
                        l693 155C                          l694 1554                          l697 157C  
                        l698 1586                 __CFG_CPB$OFF 000000                          u410 1414  
                        u235 16F8                          u236 16FA                          u450 1560  
                        u435 1516                          u540 1358                          u480 168A  
                        u560 13C6                          u617 10D6                          u707 1720  
                        u627 10F2                          u717 1486                          u637 117E  
                        u727 1490                          u647 11DE                          u737 14C6  
                        u657 1270                          u747 14D0                          u667 12A6  
                        u677 170C                          u687 1596                          u697 15CA  
                        _max 002A                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1453 1326                         _ADON 007E10  
                       STR_1 1031                         STR_2 1031                         STR_3 1034  
                       STR_4 1031                         STR_5 1031                         STR_6 1031  
                       STR_7 1025                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       _data 0028                         _main 103A                         _keys 1001  
                       fsr2h 000FDA                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 1020  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 1464              __end_of___lwdiv 1590              __end_of___lwmod 16B2  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 1728                _N_spacingTime 001F  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 15DC  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C                        _array 101C  
                      _state 0025                        _putch 1700                        tablat 000FF5  
          _LCDinterruptState 0029                        status 000FD8  I2C_Master_Read@receivedByte 0003  
             __CFG_PBADEN$ON 000000              __initialization 16B2                 __end_of_main 12B4  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1021  
                     ??_main 0019                __activetblptr 000003            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0004                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       ?_putch 0001                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lldiv 0009                    ??___lwdiv 0005                    ??___lwmod 000C  
                     clear_0 16D0                 ?_motorStop_1 0001                    ??_lcdInst 0003  
                     _printf 12B4                    ??_initLCD 0004                 __pdataCOMRAM 002A  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 16D6  
              ___rparam_used 000001               __pcstackCOMRAM 0001                __end_of_array 101F  
              __end_of_putch 1714           __size_of_lcdNibble 007E                      ??_putch 0003  
                    ?_printf 000D         lcd@LCDinterruptState 0027                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 14E2  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 13E2  
                    ___lwdiv 153E                      ___lwmod 1670                 __psmallconst 1000  
                    __pcinit 16B2                      __ramtop 1000                      _lcdInst 1714  
                    __ptext0 103A                      __ptext1 12B4                      __ptext2 1700  
                    __ptext3 1670                      __ptext4 153E                      __ptext5 15DC  
                    __ptext6 1626                      __ptext7 173A                      __ptext8 1744  
                    __ptext9 174C              __size_of_printf 012E                      _initLCD 1590  
       __size_of_motorStop_1 004A                      _dpowers 1012                ?_motorStart_1 0001  
                  _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008         end_of_initialization 16D6  
      __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                    printf@c 0018                      printf@f 000D                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               ??_motorStart_1 0016  
                  _TRISCbits 000F94                    _TRISDbits 000F95                __pidataCOMRAM 1754  
             __end_of_printf 13E2                    _N_counter 0023          start_initialization 16B2  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001  
          ??_I2C_Master_Stop 0002     I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0011                _analog_result 001D                  __pbssCOMRAM 001B  
           _I2C_Master_Start 174C             _I2C_Master_Write 173A         __end_of_motorStart_1 1670  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1464  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
                   ?_lcdInst 0001                     ?_initLCD 0001                  __smallconst 1000  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 101F  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_1 0016                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 0002                   printf@flag 0014                lcdNibble@temp 0001  
                 printf@prec 0015               _LCD_HORZ_LIMIT 1024                     _N_remain 0021  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
           __size_of_lcdInst 0014              _I2C_Master_Init 14E2              _I2C_Master_Read 16DC  
           __size_of_initLCD 004C              _I2C_Master_Wait 1728              _I2C_Master_Stop 1744  
     __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_1 1626              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 14E2                     __ptext11 13E2  
                   __ptext12 1590                     __ptext13 1714                     __ptext14 1464  
                   __ptext15 16DC                     __ptext16 1728               _LCD_VERT_LIMIT 1023  
      __size_of_motorStart_1 004A                __size_of_main 027A                  ??_lcdNibble 0001  
                  printf@val 0016  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 1754     __end_of_I2C_Master_Write 1744                   _INTCONbits 000FF2  
               _motorStart_1 1626       __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 153E      __end_of_I2C_Master_Read 1700  
    __end_of_I2C_Master_Wait 173A      __end_of_I2C_Master_Stop 174C                  lcdInst@data 0003  
                _motorStop_1 15DC             ___lldiv@quotient 0009              ___lwmod@divisor 000A  
            ___lwmod@counter 000C                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
