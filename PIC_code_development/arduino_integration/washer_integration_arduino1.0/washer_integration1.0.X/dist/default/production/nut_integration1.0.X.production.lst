

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 12:39:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001900                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _max
    72  001900  0004               	dw	4
    73                           
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _keys:
    79                           	opt stack 0
    80  001001  31                 	db	49
    81  001002  32                 	db	50
    82  001003  33                 	db	51
    83  001004  41                 	db	65
    84  001005  34                 	db	52
    85  001006  35                 	db	53
    86  001007  36                 	db	54
    87  001008  42                 	db	66
    88  001009  37                 	db	55
    89  00100A  38                 	db	56
    90  00100B  39                 	db	57
    91  00100C  43                 	db	67
    92  00100D  2A                 	db	42
    93  00100E  30                 	db	48
    94  00100F  23                 	db	35
    95  001010  44                 	db	68
    96  001011  00                 	db	0
    97  001012                     __end_of_keys:
    98                           	opt stack 0
    99  001012                     _dpowers:
   100                           	opt stack 0
   101  001012  0001               	dw	1
   102  001014  000A               	dw	10
   103  001016  0064               	dw	100
   104  001018  03E8               	dw	1000
   105  00101A  2710               	dw	10000
   106  00101C                     __end_of_dpowers:
   107                           	opt stack 0
   108  00101C                     _hexpowers:
   109                           	opt stack 0
   110  00101C  0001               	dw	1
   111  00101E  0010               	dw	16
   112  001020  0100               	dw	256
   113  001022  1000               	dw	4096
   114  001024                     __end_of_hexpowers:
   115                           	opt stack 0
   116  001024                     _array:
   117                           	opt stack 0
   118  001024  31                 	db	49
   119  001025  30                 	db	48
   120  001026  00                 	db	0
   121  001027                     __end_of_array:
   122                           	opt stack 0
   123  001027                     _LCD_LEFT:
   124                           	opt stack 0
   125  001027  00                 	db	0
   126  001028                     __end_of_LCD_LEFT:
   127                           	opt stack 0
   128  001028                     _LCD_RIGHT:
   129                           	opt stack 0
   130  001028  01                 	db	1
   131  001029                     __end_of_LCD_RIGHT:
   132                           	opt stack 0
   133  001029                     _LCD_SIZE_VERT:
   134                           	opt stack 0
   135  001029  02                 	db	2
   136  00102A                     __end_of_LCD_SIZE_VERT:
   137                           	opt stack 0
   138  00102A                     _LCD_SIZE_HORZ:
   139                           	opt stack 0
   140  00102A  10                 	db	16
   141  00102B                     __end_of_LCD_SIZE_HORZ:
   142                           	opt stack 0
   143  00102B                     _LCD_VERT_LIMIT:
   144                           	opt stack 0
   145  00102B  02                 	db	2
   146  00102C                     __end_of_LCD_VERT_LIMIT:
   147                           	opt stack 0
   148  00102C                     _LCD_HORZ_LIMIT:
   149                           	opt stack 0
   150  00102C  28                 	db	40
   151  00102D                     __end_of_LCD_HORZ_LIMIT:
   152                           	opt stack 0
   153  0000                     _SSPBUF	set	4041
   154  0000                     _SSPCON2bits	set	4037
   155  0000                     _SSPADD	set	4040
   156  0000                     _SSPCON2	set	4037
   157  0000                     _SSPCON1	set	4038
   158  0000                     _SSPSTAT	set	4039
   159  0000                     _TRISCbits	set	3988
   160  0000                     _SSPCON1bits	set	4038
   161  0000                     _TRISDbits	set	3989
   162  0000                     _LATDbits	set	3980
   163  0000                     _ADRESH	set	4036
   164  0000                     _ADRESL	set	4035
   165  0000                     _ADCON0bits	set	4034
   166  0000                     _INTCONbits	set	4082
   167  0000                     _ADCON2bits	set	4032
   168  0000                     _ADCON1	set	4033
   169  0000                     _ADCON0	set	4034
   170  0000                     _TRISE	set	3990
   171  0000                     _TRISD	set	3989
   172  0000                     _TRISC	set	3988
   173  0000                     _TRISB	set	3987
   174  0000                     _TRISA	set	3986
   175  0000                     _LATE	set	3981
   176  0000                     _LATD	set	3980
   177  0000                     _LATC	set	3979
   178  0000                     _LATB	set	3978
   179  0000                     _LATA	set	3977
   180  0000                     _OSCCON	set	4051
   181  0000                     _ADON	set	32272
   182  0000                     _INT1IE	set	32643
   183  00102D                     STR_8:
   184  00102D  30                 	db	48	;'0'
   185  00102E  31                 	db	49	;'1'
   186  00102F  32                 	db	50	;'2'
   187  001030  33                 	db	51	;'3'
   188  001031  34                 	db	52	;'4'
   189  001032  35                 	db	53	;'5'
   190  001033  36                 	db	54	;'6'
   191  001034  37                 	db	55	;'7'
   192  001035  38                 	db	56	;'8'
   193  001036  39                 	db	57	;'9'
   194  001037  61                 	db	97	;'a'
   195  001038  62                 	db	98	;'b'
   196  001039  63                 	db	99	;'c'
   197  00103A  64                 	db	100	;'d'
   198  00103B  65                 	db	101	;'e'
   199  00103C  66                 	db	102	;'f'
   200  00103D  00                 	db	0
   201  00103E                     STR_7:
   202  00103E  72                 	db	114	;'r'
   203  00103F  65                 	db	101	;'e'
   204  001040  6D                 	db	109	;'m'
   205  001041  61                 	db	97	;'a'
   206  001042  69                 	db	105	;'i'
   207  001043  6E                 	db	110	;'n'
   208  001044  20                 	db	32
   209  001045  4E                 	db	78	;'N'
   210  001046  75                 	db	117	;'u'
   211  001047  74                 	db	116	;'t'
   212  001048  73                 	db	115	;'s'
   213  001049  3A                 	db	58	;':'
   214  00104A  25                 	db	37
   215  00104B  64                 	db	100	;'d'
   216  00104C  00                 	db	0
   217  00104D                     STR_5:
   218  00104D  52                 	db	82	;'R'
   219  00104E  41                 	db	65	;'A'
   220  00104F  32                 	db	50	;'2'
   221  001050  3A                 	db	58	;':'
   222  001051  20                 	db	32
   223  001052  25                 	db	37
   224  001053  2E                 	db	46
   225  001054  33                 	db	51	;'3'
   226  001055  78                 	db	120	;'x'
   227  001056  00                 	db	0
   228  001057                     STR_2:
   229  001057  64                 	db	100	;'d'
   230  001058  6F                 	db	111	;'o'
   231  001059  6E                 	db	110	;'n'
   232  00105A  65                 	db	101	;'e'
   233  00105B  00                 	db	0
   234  0000                     
   235                           ; #config settings
   236  00105C  00                 	db	0	; dummy byte at the end
   237  0000                     
   238                           	psect	cinit
   239  001860                     __pcinit:
   240                           	opt stack 0
   241  001860                     start_initialization:
   242                           	opt stack 0
   243  001860                     __initialization:
   244                           	opt stack 0
   245                           
   246                           ; Initialize objects allocated to COMRAM (2 bytes)
   247                           ; load TBLPTR registers with __pidataCOMRAM
   248  001860  0E00               	movlw	low __pidataCOMRAM
   249  001862  6EF6               	movwf	tblptrl,c
   250  001864  0E19               	movlw	high __pidataCOMRAM
   251  001866  6EF7               	movwf	tblptrh,c
   252  001868  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   253  00186A  6EF8               	movwf	tblptru,c
   254  00186C  0009               	tblrd		*+	;fetch initializer
   255  00186E  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   256  001872  0009               	tblrd		*+	;fetch initializer
   257  001874  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   258                           
   259                           ; Clear objects allocated to COMRAM (14 bytes)
   260  001878  EE00  F01C         	lfsr	0,__pbssCOMRAM
   261  00187C  0E0E               	movlw	14
   262  00187E                     clear_0:
   263  00187E  6AEE               	clrf	postinc0,c
   264  001880  06E8               	decf	wreg,f,c
   265  001882  E1FD               	bnz	clear_0
   266  001884                     end_of_initialization:
   267                           	opt stack 0
   268  001884                     __end_of__initialization:
   269                           	opt stack 0
   270  001884  0E00               	movlw	low (__Lmediumconst shr (0+16))
   271  001886  6EF8               	movwf	tblptru,c
   272  001888  0100               	movlb	0
   273  00188A  EF2F  F008         	goto	_main	;jump to C main() function
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssCOMRAM
   282  00001C                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00001C                     _i:
   285                           	opt stack 0
   286  00001C                     	ds	2
   287  00001E                     _analog_result:
   288                           	opt stack 0
   289  00001E                     	ds	2
   290  000020                     _N_spacingTime:
   291                           	opt stack 0
   292  000020                     	ds	2
   293  000022                     _N_remain:
   294                           	opt stack 0
   295  000022                     	ds	2
   296  000024                     _N_counter:
   297                           	opt stack 0
   298  000024                     	ds	2
   299  000026                     _state:
   300                           	opt stack 0
   301  000026                     	ds	2
   302  000028                     lcd@LCDinterruptState:
   303                           	opt stack 0
   304  000028                     	ds	1
   305  000029                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	dataCOMRAM
   314  00002A                     __pdataCOMRAM:
   315                           	opt stack 0
   316  00002A                     _max:
   317                           	opt stack 0
   318  00002A                     	ds	2
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	cstackCOMRAM
   327  000001                     __pcstackCOMRAM:
   328                           	opt stack 0
   329  000001                     ??_isdigit:
   330  000001                     ??_I2C_Master_Wait:
   331  000001                     ?_readADC:
   332                           	opt stack 0
   333  000001                     ?___lwdiv:
   334                           	opt stack 0
   335  000001                     ?___lldiv:
   336                           	opt stack 0
   337  000001                     lcdNibble@temp:
   338                           	opt stack 0
   339  000001                     ___lwdiv@dividend:
   340                           	opt stack 0
   341  000001                     ___lldiv@dividend:
   342                           	opt stack 0
   343                           
   344                           ; 4 bytes @ 0x0
   345  000001                     	ds	1
   346  000002                     lcdNibble@data:
   347                           	opt stack 0
   348  000002                     _isdigit$854:
   349                           	opt stack 0
   350  000002                     I2C_Master_Write@byteToWrite:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x1
   354  000002                     	ds	1
   355  000003                     ??_readADC:
   356  000003                     lcdInst@data:
   357                           	opt stack 0
   358  000003                     putch@data:
   359                           	opt stack 0
   360  000003                     isdigit@c:
   361                           	opt stack 0
   362  000003                     ___lwdiv@divisor:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x2
   366  000003                     	ds	1
   367  000004                     ??_initLCD:
   368  000004                     
   369                           ; 1 bytes @ 0x3
   370  000004                     	ds	1
   371  000005                     readADC@channel:
   372                           	opt stack 0
   373  000005                     ___lwdiv@quotient:
   374                           	opt stack 0
   375  000005                     ___lldiv@divisor:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x4
   379  000005                     	ds	2
   380  000007                     ___lwdiv@counter:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000007                     	ds	1
   385  000008                     ?___lwmod:
   386                           	opt stack 0
   387  000008                     ___lwmod@dividend:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x7
   391  000008                     	ds	1
   392  000009                     ___lldiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x8
   396  000009                     	ds	1
   397  00000A                     ___lwmod@divisor:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x9
   401  00000A                     	ds	2
   402  00000C                     ___lwmod@counter:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xB
   406  00000C                     	ds	1
   407  00000D                     ?_printf:
   408                           	opt stack 0
   409  00000D                     ___lldiv@counter:
   410                           	opt stack 0
   411  00000D                     printf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xC
   415  00000D                     	ds	1
   416  00000E                     I2C_Master_Init@clockFreq:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0xD
   420  00000E                     	ds	3
   421  000011                     ??_printf:
   422                           
   423                           ; 1 bytes @ 0x10
   424  000011                     	ds	1
   425  000012                     ??_I2C_Master_Init:
   426  000012                     printf@idx:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x11
   430  000012                     	ds	1
   431  000013                     printf@ap:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x12
   435  000013                     	ds	2
   436  000015                     printf@flag:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x14
   440  000015                     	ds	1
   441  000016                     printf@val:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x15
   445  000016                     	ds	2
   446  000018                     printf@prec:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x17
   450  000018                     	ds	1
   451  000019                     printf@c:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x18
   455  000019                     	ds	1
   456  00001A                     ??_main:
   457                           
   458                           ; 1 bytes @ 0x19
   459  00001A                     	ds	2
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467 ;;
   468 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   469 ;;
   470 ;; *************** function _main *****************
   471 ;; Defined at:
   472 ;;		line 63 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;Total ram usage:        2 bytes
   491 ;; Hardware stack levels required when called:    3
   492 ;; This function calls:
   493 ;;		_I2C_Master_Init
   494 ;;		_I2C_Master_Start
   495 ;;		_I2C_Master_Stop
   496 ;;		_I2C_Master_Write
   497 ;;		_initLCD
   498 ;;		_lcdInst
   499 ;;		_motorStart_1
   500 ;;		_motorStop_1
   501 ;;		_printf
   502 ;;		_readADC
   503 ;; This function is called by:
   504 ;;		Startup code after reset
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text0
   509  00105E                     __ptext0:
   510                           	opt stack 0
   511  00105E                     _main:
   512                           	opt stack 28
   513                           
   514                           ;main.c: 66: OSCCON = 0xF2;
   515                           
   516                           ;incstack = 0
   517  00105E  0EF2               	movlw	242
   518  001060  6ED3               	movwf	4051,c	;volatile
   519                           
   520                           ;main.c: 71: LATA = 0x00;
   521  001062  0E00               	movlw	0
   522  001064  6E89               	movwf	3977,c	;volatile
   523                           
   524                           ;main.c: 72: LATB = 0x00;
   525  001066  0E00               	movlw	0
   526  001068  6E8A               	movwf	3978,c	;volatile
   527                           
   528                           ;main.c: 73: LATC = 0x00;
   529  00106A  0E00               	movlw	0
   530  00106C  6E8B               	movwf	3979,c	;volatile
   531                           
   532                           ;main.c: 74: LATD = 0x00;
   533  00106E  0E00               	movlw	0
   534  001070  6E8C               	movwf	3980,c	;volatile
   535                           
   536                           ;main.c: 75: LATE = 0x00;
   537  001072  0E00               	movlw	0
   538  001074  6E8D               	movwf	3981,c	;volatile
   539                           
   540                           ;main.c: 79: TRISA = 0xFF;
   541  001076  6892               	setf	3986,c	;volatile
   542                           
   543                           ;main.c: 80: TRISB = 0xFF;
   544  001078  6893               	setf	3987,c	;volatile
   545                           
   546                           ;main.c: 81: TRISC = 0x00;
   547  00107A  0E00               	movlw	0
   548  00107C  6E94               	movwf	3988,c	;volatile
   549                           
   550                           ;main.c: 85: TRISD = 0x00;
   551  00107E  0E00               	movlw	0
   552  001080  6E95               	movwf	3989,c	;volatile
   553                           
   554                           ;main.c: 86: TRISE = 0x00;
   555  001082  0E00               	movlw	0
   556  001084  6E96               	movwf	3990,c	;volatile
   557                           
   558                           ;main.c: 89: ADCON0 = 0x00;
   559  001086  0E00               	movlw	0
   560  001088  6EC2               	movwf	4034,c	;volatile
   561                           
   562                           ;main.c: 90: ADCON1 = 0x0B;
   563  00108A  0E0B               	movlw	11
   564  00108C  6EC1               	movwf	4033,c	;volatile
   565                           
   566                           ;main.c: 91: ADCON2bits.ADFM = 1;
   567  00108E  8EC0               	bsf	4032,7,c	;volatile
   568                           
   569                           ;main.c: 95: initLCD();
   570  001090  EC83  F00B         	call	_initLCD	;wreg free
   571                           
   572                           ;main.c: 99: I2C_Master_Init(100000);
   573  001094  0EA0               	movlw	160
   574  001096  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   575  001098  0E86               	movlw	134
   576  00109A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   577  00109C  0E01               	movlw	1
   578  00109E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   579  0010A0  0E00               	movlw	0
   580  0010A2  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   581  0010A4  EC2C  F00B         	call	_I2C_Master_Init	;wreg free
   582                           
   583                           ;main.c: 100: I2C_Master_Start();
   584  0010A8  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
   585                           
   586                           ;main.c: 103: I2C_Master_Write(0b00010000);
   587  0010AC  0E00               	movlw	0
   588  0010AE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   589  0010B0  0E10               	movlw	16
   590  0010B2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   591  0010B4  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   592                           
   593                           ;main.c: 104: I2C_Master_Stop();
   594  0010B8  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
   595                           
   596                           ;main.c: 106: I2C_Master_Start();
   597  0010BC  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
   598                           
   599                           ;main.c: 107: I2C_Master_Write(0b00010000);
   600  0010C0  0E00               	movlw	0
   601  0010C2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   602  0010C4  0E10               	movlw	16
   603  0010C6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   604  0010C8  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   605                           
   606                           ;main.c: 108: I2C_Master_Write('1');
   607  0010CC  0E00               	movlw	0
   608  0010CE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   609  0010D0  0E31               	movlw	49
   610  0010D2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   611  0010D4  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   612                           
   613                           ;main.c: 109: I2C_Master_Stop();
   614  0010D8  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
   615                           
   616                           ;main.c: 112: INT1IE = 1;
   617  0010DC  86F0               	bsf	intcon3,3,c	;volatile
   618                           
   619                           ;main.c: 113: (INTCONbits.GIE = 1);
   620  0010DE  8EF2               	bsf	intcon,7,c	;volatile
   621                           
   622                           ;main.c: 123: initLCD();
   623  0010E0  EC83  F00B         	call	_initLCD	;wreg free
   624                           
   625                           ;main.c: 125: _delay((unsigned long)((100)*(40000000/4000.0)));
   626  0010E4  0E06               	movlw	6
   627  0010E6  6E1B               	movwf	(??_main+1)& (0+255),c
   628  0010E8  0E13               	movlw	19
   629  0010EA  6E1A               	movwf	??_main& (0+255),c
   630  0010EC  0EAE               	movlw	174
   631  0010EE                     u887:
   632  0010EE  2EE8               	decfsz	wreg,f,c
   633  0010F0  D7FE               	bra	u887
   634  0010F2  2E1A               	decfsz	??_main& (0+255),f,c
   635  0010F4  D7FC               	bra	u887
   636  0010F6  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   637  0010F8  D7FA               	bra	u887
   638                           
   639                           ;main.c: 126: motorStart_1();
   640  0010FA  ECCE  F00B         	call	_motorStart_1	;wreg free
   641  0010FE                     l1698:
   642                           
   643                           ;main.c: 134: if (N_counter >= max){
   644  0010FE  502A               	movf	_max,w,c
   645  001100  5C24               	subwf	_N_counter,w,c
   646  001102  5025               	movf	_N_counter+1,w,c
   647  001104  0A80               	xorlw	128
   648  001106  6E1A               	movwf	??_main& (0+255),c
   649  001108  502B               	movf	_max+1,w,c
   650  00110A  0A80               	xorlw	128
   651  00110C  581A               	subwfb	??_main& (0+255),w,c
   652  00110E  A0D8               	btfss	status,0,c
   653  001110  D003               	goto	l104
   654                           
   655                           ;main.c: 135: motorStop_1();
   656  001112  ECA9  F00B         	call	_motorStop_1	;wreg free
   657                           
   658                           ;main.c: 136: break;
   659  001116  D018               	goto	l105
   660  001118                     l104:
   661                           
   662                           ;main.c: 137: }
   663                           ;main.c: 138: if (readADC(1)<=250 ){
   664  001118  0E01               	movlw	1
   665  00111A  EC14  F00C         	call	_readADC
   666  00111E  5002               	movf	?_readADC+1,w,c
   667  001120  E1EE               	bnz	l1698
   668  001122  0EFB               	movlw	251
   669  001124  5C01               	subwf	?_readADC,w,c
   670  001126  B0D8               	btfsc	status,0,c
   671  001128  D7EA               	goto	l103
   672                           
   673                           ;main.c: 140: N_counter ++;
   674  00112A  4A24               	infsnz	_N_counter,f,c
   675  00112C  2A25               	incf	_N_counter+1,f,c
   676                           
   677                           ;main.c: 141: initLCD();
   678  00112E  EC83  F00B         	call	_initLCD	;wreg free
   679                           
   680                           ;main.c: 142: printf("%d", N_counter);
   681  001132  0E4A               	movlw	low (STR_7+12)
   682  001134  6E0D               	movwf	printf@f,c
   683  001136  0E10               	movlw	high (STR_7+12)
   684  001138  6E0E               	movwf	printf@f+1,c
   685  00113A  C024  F00F         	movff	_N_counter,?_printf+2
   686  00113E  C025  F010         	movff	_N_counter+1,?_printf+3
   687  001142  EC76  F009         	call	_printf	;wreg free
   688  001146  D7DB               	goto	l103
   689  001148                     l105:
   690                           
   691                           ;main.c: 144: }
   692                           ;main.c: 146: }
   693                           ;main.c: 149: initLCD();
   694  001148  EC83  F00B         	call	_initLCD	;wreg free
   695                           
   696                           ;main.c: 150: printf("done");
   697  00114C  0E57               	movlw	low STR_2
   698  00114E  6E0D               	movwf	printf@f,c
   699  001150  0E10               	movlw	high STR_2
   700  001152  6E0E               	movwf	printf@f+1,c
   701  001154  EC76  F009         	call	_printf	;wreg free
   702                           
   703                           ;main.c: 151: _delay((unsigned long)((800)*(40000000/4000.0)));
   704  001158  0E29               	movlw	41
   705  00115A  6E1B               	movwf	(??_main+1)& (0+255),c
   706  00115C  0E96               	movlw	150
   707  00115E  6E1A               	movwf	??_main& (0+255),c
   708  001160  0E7F               	movlw	127
   709  001162                     u897:
   710  001162  2EE8               	decfsz	wreg,f,c
   711  001164  D7FE               	bra	u897
   712  001166  2E1A               	decfsz	??_main& (0+255),f,c
   713  001168  D7FC               	bra	u897
   714  00116A  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   715  00116C  D7FA               	bra	u897
   716  00116E  F000               	nop	
   717                           
   718                           ;main.c: 156: I2C_Master_Init(100000);
   719  001170  0EA0               	movlw	160
   720  001172  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   721  001174  0E86               	movlw	134
   722  001176  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   723  001178  0E01               	movlw	1
   724  00117A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   725  00117C  0E00               	movlw	0
   726  00117E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   727  001180  EC2C  F00B         	call	_I2C_Master_Init	;wreg free
   728                           
   729                           ;main.c: 157: I2C_Master_Start();
   730  001184  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
   731                           
   732                           ;main.c: 158: I2C_Master_Write(0b00010000);
   733  001188  0E00               	movlw	0
   734  00118A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   735  00118C  0E10               	movlw	16
   736  00118E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   737  001190  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   738                           
   739                           ;main.c: 159: I2C_Master_Stop();
   740  001194  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
   741                           
   742                           ;main.c: 163: I2C_Master_Start();
   743  001198  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
   744                           
   745                           ;main.c: 164: I2C_Master_Write(0b00010000);
   746  00119C  0E00               	movlw	0
   747  00119E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   748  0011A0  0E10               	movlw	16
   749  0011A2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   750  0011A4  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   751                           
   752                           ;main.c: 165: I2C_Master_Write('2');
   753  0011A8  0E00               	movlw	0
   754  0011AA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   755  0011AC  0E32               	movlw	50
   756  0011AE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   757  0011B0  EC73  F00C         	call	_I2C_Master_Write	;wreg free
   758                           
   759                           ;main.c: 166: I2C_Master_Stop();
   760  0011B4  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
   761                           
   762                           ;main.c: 169: initLCD();
   763  0011B8  EC83  F00B         	call	_initLCD	;wreg free
   764                           
   765                           ;main.c: 170: motorStart_1();
   766  0011BC  ECCE  F00B         	call	_motorStart_1	;wreg free
   767                           
   768                           ;main.c: 172: N_spacingTime = 0;
   769  0011C0  0E00               	movlw	0
   770  0011C2  6E21               	movwf	_N_spacingTime+1,c
   771  0011C4  0E00               	movlw	0
   772  0011C6  6E20               	movwf	_N_spacingTime,c
   773                           
   774                           ;main.c: 173: initLCD();
   775  0011C8  EC83  F00B         	call	_initLCD	;wreg free
   776                           
   777                           ;main.c: 174: printf("%d", N_remain);
   778  0011CC  0E4A               	movlw	low (STR_7+12)
   779  0011CE  6E0D               	movwf	printf@f,c
   780  0011D0  0E10               	movlw	high (STR_7+12)
   781  0011D2  6E0E               	movwf	printf@f+1,c
   782  0011D4  C022  F00F         	movff	_N_remain,?_printf+2
   783  0011D8  C023  F010         	movff	_N_remain+1,?_printf+3
   784  0011DC  EC76  F009         	call	_printf	;wreg free
   785  0011E0                     
   786                           ;main.c: 178: if (N_spacingTime >= 30000){
   787  0011E0  BE21               	btfsc	_N_spacingTime+1,7,c
   788  0011E2  D009               	goto	l109
   789  0011E4  0E30               	movlw	48
   790  0011E6  5C20               	subwf	_N_spacingTime,w,c
   791  0011E8  0E75               	movlw	117
   792  0011EA  5821               	subwfb	_N_spacingTime+1,w,c
   793  0011EC  A0D8               	btfss	status,0,c
   794  0011EE  D003               	goto	l109
   795                           
   796                           ;main.c: 179: motorStop_1();
   797  0011F0  ECA9  F00B         	call	_motorStop_1	;wreg free
   798                           
   799                           ;main.c: 180: break;
   800  0011F4  D063               	goto	l110
   801  0011F6                     l109:
   802                           
   803                           ;main.c: 181: }
   804                           ;main.c: 183: if (readADC(1)<=275 ){
   805  0011F6  0E01               	movlw	1
   806  0011F8  EC14  F00C         	call	_readADC
   807  0011FC  0E14               	movlw	20
   808  0011FE  5C01               	subwf	?_readADC,w,c
   809  001200  0E01               	movlw	1
   810  001202  5802               	subwfb	?_readADC+1,w,c
   811  001204  B0D8               	btfsc	status,0,c
   812  001206  D012               	goto	l111
   813                           
   814                           ;main.c: 185: N_remain ++;
   815  001208  4A22               	infsnz	_N_remain,f,c
   816  00120A  2A23               	incf	_N_remain+1,f,c
   817                           
   818                           ;main.c: 186: initLCD();
   819  00120C  EC83  F00B         	call	_initLCD	;wreg free
   820                           
   821                           ;main.c: 187: printf("%d", N_remain);
   822  001210  0E4A               	movlw	low (STR_7+12)
   823  001212  6E0D               	movwf	printf@f,c
   824  001214  0E10               	movlw	high (STR_7+12)
   825  001216  6E0E               	movwf	printf@f+1,c
   826  001218  C022  F00F         	movff	_N_remain,?_printf+2
   827  00121C  C023  F010         	movff	_N_remain+1,?_printf+3
   828  001220  EC76  F009         	call	_printf	;wreg free
   829                           
   830                           ;main.c: 189: N_spacingTime = 0;
   831  001224  0E00               	movlw	0
   832  001226  6E21               	movwf	_N_spacingTime+1,c
   833  001228  0E00               	movlw	0
   834  00122A  6E20               	movwf	_N_spacingTime,c
   835  00122C                     l111:
   836                           
   837                           ;main.c: 191: }
   838                           ;main.c: 193: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   839  00122C  0E01               	movlw	1
   840  00122E  EC60  F00C         	call	_lcdInst
   841  001232  0EC3               	movlw	195
   842  001234  6E1A               	movwf	??_main& (0+255),c
   843  001236  0ECD               	movlw	205
   844  001238                     u907:
   845  001238  2EE8               	decfsz	wreg,f,c
   846  00123A  D7FE               	bra	u907
   847  00123C  2E1A               	decfsz	??_main& (0+255),f,c
   848  00123E  D7FC               	bra	u907
   849  001240  F000               	nop	
   850                           
   851                           ;main.c: 194: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   852  001242  0E80               	movlw	128
   853  001244  EC60  F00C         	call	_lcdInst
   854  001248  0E41               	movlw	65
   855  00124A  6E1A               	movwf	??_main& (0+255),c
   856  00124C  0EEE               	movlw	238
   857  00124E                     u917:
   858  00124E  2EE8               	decfsz	wreg,f,c
   859  001250  D7FE               	bra	u917
   860  001252  2E1A               	decfsz	??_main& (0+255),f,c
   861  001254  D7FC               	bra	u917
   862  001256  D000               	nop2	
   863                           
   864                           ;main.c: 196: printf("RA2: %.3x", readADC(1));
   865  001258  0E4D               	movlw	low STR_5
   866  00125A  6E0D               	movwf	printf@f,c
   867  00125C  0E10               	movlw	high STR_5
   868  00125E  6E0E               	movwf	printf@f+1,c
   869  001260  0E01               	movlw	1
   870  001262  EC14  F00C         	call	_readADC
   871  001266  C001  F00F         	movff	?_readADC,?_printf+2
   872  00126A  C002  F010         	movff	?_readADC+1,?_printf+3
   873  00126E  EC76  F009         	call	_printf	;wreg free
   874                           
   875                           ;main.c: 200: _delay((unsigned long)((2)*(40000000/4000.0)));
   876  001272  0E1A               	movlw	26
   877  001274  6E1A               	movwf	??_main& (0+255),c
   878  001276  0EF8               	movlw	248
   879  001278                     u927:
   880  001278  2EE8               	decfsz	wreg,f,c
   881  00127A  D7FE               	bra	u927
   882  00127C  2E1A               	decfsz	??_main& (0+255),f,c
   883  00127E  D7FC               	bra	u927
   884  001280  D000               	nop2	
   885                           
   886                           ;main.c: 203: lcdInst(0xC0);;
   887  001282  0EC0               	movlw	192
   888  001284  EC60  F00C         	call	_lcdInst
   889                           
   890                           ;main.c: 204: printf("%d",N_spacingTime);
   891  001288  0E4A               	movlw	low (STR_7+12)
   892  00128A  6E0D               	movwf	printf@f,c
   893  00128C  0E10               	movlw	high (STR_7+12)
   894  00128E  6E0E               	movwf	printf@f+1,c
   895  001290  C020  F00F         	movff	_N_spacingTime,?_printf+2
   896  001294  C021  F010         	movff	_N_spacingTime+1,?_printf+3
   897  001298  EC76  F009         	call	_printf	;wreg free
   898                           
   899                           ;main.c: 206: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   900  00129C  0E80               	movlw	128
   901  00129E  EC60  F00C         	call	_lcdInst
   902  0012A2  0E41               	movlw	65
   903  0012A4  6E1A               	movwf	??_main& (0+255),c
   904  0012A6  0EEE               	movlw	238
   905  0012A8                     u937:
   906  0012A8  2EE8               	decfsz	wreg,f,c
   907  0012AA  D7FE               	bra	u937
   908  0012AC  2E1A               	decfsz	??_main& (0+255),f,c
   909  0012AE  D7FC               	bra	u937
   910  0012B0  D000               	nop2	
   911                           
   912                           ;main.c: 209: N_spacingTime +=200;
   913  0012B2  0EC8               	movlw	200
   914  0012B4  2620               	addwf	_N_spacingTime,f,c
   915  0012B6  0E00               	movlw	0
   916  0012B8  2221               	addwfc	_N_spacingTime+1,f,c
   917  0012BA  D792               	goto	l108
   918  0012BC                     l110:
   919                           
   920                           ;main.c: 217: initLCD();
   921                           
   922                           ;main.c: 212: }
   923                           ;main.c: 216: while(1){
   924  0012BC  EC83  F00B         	call	_initLCD	;wreg free
   925                           
   926                           ;main.c: 218: printf("remain Nuts:%d",N_remain);
   927  0012C0  0E3E               	movlw	low STR_7
   928  0012C2  6E0D               	movwf	printf@f,c
   929  0012C4  0E10               	movlw	high STR_7
   930  0012C6  6E0E               	movwf	printf@f+1,c
   931  0012C8  C022  F00F         	movff	_N_remain,?_printf+2
   932  0012CC  C023  F010         	movff	_N_remain+1,?_printf+3
   933  0012D0  EC76  F009         	call	_printf	;wreg free
   934                           
   935                           ;main.c: 219: _delay((unsigned long)((1000)*(40000000/4000.0)));
   936  0012D4  0E33               	movlw	51
   937  0012D6  6E1B               	movwf	(??_main+1)& (0+255),c
   938  0012D8  0EBB               	movlw	187
   939  0012DA  6E1A               	movwf	??_main& (0+255),c
   940  0012DC  0EE0               	movlw	224
   941  0012DE                     u947:
   942  0012DE  2EE8               	decfsz	wreg,f,c
   943  0012E0  D7FE               	bra	u947
   944  0012E2  2E1A               	decfsz	??_main& (0+255),f,c
   945  0012E4  D7FC               	bra	u947
   946  0012E6  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   947  0012E8  D7FA               	bra	u947
   948  0012EA  D7E8               	goto	l110
   949  0012EC                     __end_of_main:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           intcon	equ	0xFF2
   956                           intcon3	equ	0xFF0
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _readADC *****************
   962 ;; Defined at:
   963 ;;		line 224 in file "main.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  channel         1    wreg     unsigned char 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  channel         1    4[COMRAM] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    0[COMRAM] unsigned short 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   979 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;Total ram usage:        5 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text1
   991  001828                     __ptext1:
   992                           	opt stack 0
   993  001828                     _readADC:
   994                           	opt stack 30
   995                           
   996                           ;incstack = 0
   997                           ;readADC@channel stored from wreg
   998  001828  6E05               	movwf	readADC@channel,c
   999                           
  1000                           ;main.c: 233: ADCON0 = (channel & 0x0F) << 2;
  1001  00182A  C005  F003         	movff	readADC@channel,??_readADC
  1002  00182E  0E0F               	movlw	15
  1003  001830  1603               	andwf	??_readADC,f,c
  1004  001832  90D8               	bcf	status,0,c
  1005  001834  3603               	rlcf	??_readADC,f,c
  1006  001836  90D8               	bcf	status,0,c
  1007  001838  3403               	rlcf	??_readADC,w,c
  1008  00183A  6EC2               	movwf	4034,c	;volatile
  1009                           
  1010                           ;main.c: 234: ADON = 1;
  1011  00183C  80C2               	bsf	4034,0,c	;volatile
  1012                           
  1013                           ;main.c: 235: ADCON0bits.GO = 1;
  1014  00183E  82C2               	bsf	4034,1,c	;volatile
  1015  001840  B2C2               	btfsc	4034,1,c	;volatile
  1016  001842  D7FE               	goto	l120
  1017                           
  1018                           ;main.c: 237: analog_result = ADRESL + (ADRESH*256);
  1019  001844  50C4               	movf	4036,w,c	;volatile
  1020  001846  6E04               	movwf	(??_readADC+1)& (0+255),c
  1021  001848  6A03               	clrf	??_readADC& (0+255),c
  1022  00184A  50C3               	movf	4035,w,c	;volatile
  1023  00184C  2403               	addwf	??_readADC,w,c
  1024  00184E  6E1E               	movwf	_analog_result,c
  1025  001850  0E00               	movlw	0
  1026  001852  2004               	addwfc	??_readADC+1,w,c
  1027  001854  6E1F               	movwf	_analog_result+1,c
  1028                           
  1029                           ;main.c: 238: return analog_result;
  1030  001856  C01E  F001         	movff	_analog_result,?_readADC
  1031  00185A  C01F  F002         	movff	_analog_result+1,?_readADC+1
  1032  00185E  0012               	return	
  1033  001860                     __end_of_readADC:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           intcon	equ	0xFF2
  1040                           intcon3	equ	0xFF0
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _printf *****************
  1046 ;; Defined at:
  1047 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1050 ;;		 -> STR_7(15), STR_6(3), STR_5(10), STR_4(3), 
  1051 ;;		 -> STR_3(3), STR_2(5), STR_1(3), 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  idx             1   17[COMRAM] unsigned char 
  1054 ;;  tmpval          4    0        struct .
  1055 ;;  cp              3    0        PTR const unsigned char 
  1056 ;;  val             2   21[COMRAM] unsigned int 
  1057 ;;  ap              2   18[COMRAM] PTR void [1]
  1058 ;;		 -> ?_printf(2), 
  1059 ;;  len             2    0        unsigned int 
  1060 ;;  c               1   24[COMRAM] char 
  1061 ;;  prec            1   23[COMRAM] char 
  1062 ;;  flag            1   20[COMRAM] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  2   12[COMRAM] int 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;Total ram usage:       13 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    2
  1079 ;; This function calls:
  1080 ;;		___lwdiv
  1081 ;;		___lwmod
  1082 ;;		_isdigit
  1083 ;;		_putch
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text2
  1090  0012EC                     __ptext2:
  1091                           	opt stack 0
  1092  0012EC                     _printf:
  1093                           	opt stack 28
  1094                           
  1095                           ;doprnt.c: 466: va_list ap;
  1096                           ;doprnt.c: 499: signed char c;
  1097                           ;doprnt.c: 506: signed char prec;
  1098                           ;doprnt.c: 508: unsigned char flag;
  1099                           ;doprnt.c: 523: union {
  1100                           ;doprnt.c: 524: unsigned long vd;
  1101                           ;doprnt.c: 525: double integ;
  1102                           ;doprnt.c: 526: } tmpval;
  1103                           ;doprnt.c: 528: unsigned int val;
  1104                           ;doprnt.c: 529: unsigned len;
  1105                           ;doprnt.c: 530: const char * cp;
  1106                           ;doprnt.c: 533: *ap = __va_start();
  1107                           
  1108                           ;incstack = 0
  1109  0012EC  0E0F               	movlw	low (?_printf+2)
  1110  0012EE  6E13               	movwf	printf@ap,c
  1111  0012F0  0E00               	movlw	high (?_printf+2)
  1112  0012F2  6E14               	movwf	printf@ap+1,c
  1113                           
  1114                           ;doprnt.c: 536: while(c = *f++) {
  1115  0012F4  D124               	goto	u820
  1116  0012F6                     
  1117                           ;doprnt.c: 538: if(c != '%')
  1118  0012F6  0E25               	movlw	37
  1119  0012F8  1819               	xorwf	printf@c,w,c
  1120  0012FA  B4D8               	btfsc	status,2,c
  1121  0012FC  D004               	goto	l273
  1122                           
  1123                           ;doprnt.c: 540: {
  1124                           ;doprnt.c: 541: (putch(c) );
  1125  0012FE  5019               	movf	printf@c,w,c
  1126  001300  EC56  F00C         	call	_putch
  1127                           
  1128                           ;doprnt.c: 542: continue;
  1129  001304  D11C               	goto	u820
  1130  001306                     l273:
  1131                           
  1132                           ;doprnt.c: 543: }
  1133                           ;doprnt.c: 548: flag = 0;
  1134  001306  0E00               	movlw	0
  1135  001308  6E15               	movwf	printf@flag,c
  1136                           
  1137                           ;doprnt.c: 611: if(*f == '.') {
  1138  00130A  C00D  FFF6         	movff	printf@f,tblptrl
  1139  00130E  C00E  FFF7         	movff	printf@f+1,tblptrh
  1140  001312                     	if	0	;tblptru may be non-zero
  1141  001312                     	endif
  1142  001312                     	if	0	;tblptru may be non-zero
  1143  001312                     	endif
  1144  001312  0008               	tblrd		*
  1145  001314  50F5               	movf	tablat,w,c
  1146  001316  0A2E               	xorlw	46
  1147  001318  A4D8               	btfss	status,2,c
  1148  00131A  D01F               	goto	l274
  1149                           
  1150                           ;doprnt.c: 613: f++;
  1151  00131C  4A0D               	infsnz	printf@f,f,c
  1152  00131E  2A0E               	incf	printf@f+1,f,c
  1153                           
  1154                           ;doprnt.c: 620: {
  1155                           ;doprnt.c: 621: prec = 0;
  1156  001320  0E00               	movlw	0
  1157  001322  6E18               	movwf	printf@prec,c
  1158                           
  1159                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1160  001324  D00F               	goto	l275
  1161  001326                     
  1162                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1163  001326  C00D  FFF6         	movff	printf@f,tblptrl
  1164  00132A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1165  00132E                     	if	0	;tblptru may be non-zero
  1166  00132E                     	endif
  1167  00132E                     	if	0	;tblptru may be non-zero
  1168  00132E                     	endif
  1169  00132E  0008               	tblrd		*
  1170  001330  CFF5 F011          	movff	tablat,??_printf
  1171  001334  5018               	movf	printf@prec,w,c
  1172  001336  0D0A               	mullw	10
  1173  001338  50F3               	movf	prodl,w,c
  1174  00133A  2411               	addwf	??_printf,w,c
  1175  00133C  0FD0               	addlw	208
  1176  00133E  6E18               	movwf	printf@prec,c
  1177  001340  4A0D               	infsnz	printf@f,f,c
  1178  001342  2A0E               	incf	printf@f+1,f,c
  1179  001344                     l275:
  1180  001344  C00D  FFF6         	movff	printf@f,tblptrl
  1181  001348  C00E  FFF7         	movff	printf@f+1,tblptrh
  1182  00134C                     	if	0	;tblptru may be non-zero
  1183  00134C                     	endif
  1184  00134C                     	if	0	;tblptru may be non-zero
  1185  00134C                     	endif
  1186  00134C  0008               	tblrd		*
  1187  00134E  50F5               	movf	tablat,w,c
  1188  001350  EC47  F00C         	call	_isdigit
  1189  001354  A0D8               	btfss	status,0,c
  1190  001356  D006               	goto	l279
  1191  001358  D7E6               	goto	l276
  1192  00135A                     l274:
  1193                           
  1194                           ;doprnt.c: 626: prec = 0;
  1195  00135A  0E00               	movlw	0
  1196  00135C  6E18               	movwf	printf@prec,c
  1197                           
  1198                           ;doprnt.c: 630: }
  1199                           ;doprnt.c: 635: switch(c = *f++) {
  1200  00135E  D002               	goto	l279
  1201  001360                     
  1202                           ;doprnt.c: 721: flag |= 0x80;
  1203  001360  8E15               	bsf	printf@flag,7,c
  1204                           
  1205                           ;doprnt.c: 723: break;
  1206  001362  D017               	goto	l284
  1207  001364                     l279:
  1208  001364  C00D  FFF6         	movff	printf@f,tblptrl
  1209  001368  C00E  FFF7         	movff	printf@f+1,tblptrh
  1210  00136C  4A0D               	infsnz	printf@f,f,c
  1211  00136E  2A0E               	incf	printf@f+1,f,c
  1212  001370                     	if	0	;tblptru may be non-zero
  1213  001370                     	endif
  1214  001370                     	if	0	;tblptru may be non-zero
  1215  001370                     	endif
  1216  001370  0008               	tblrd		*
  1217  001372  CFF5 F019          	movff	tablat,printf@c
  1218  001376  5019               	movf	printf@c,w,c
  1219                           
  1220                           ; Switch size 1, requested type "space"
  1221                           ; Number of cases is 4, Range of values is 0 to 120
  1222                           ; switch strategies available:
  1223                           ; Name         Instructions Cycles
  1224                           ; simple_byte           13     7 (average)
  1225                           ;	Chosen strategy is simple_byte
  1226  001378  0A00               	xorlw	0	; case 0
  1227  00137A  B4D8               	btfsc	status,2,c
  1228  00137C  0012               	return	
  1229  00137E  0A64               	xorlw	100	; case 100
  1230  001380  B4D8               	btfsc	status,2,c
  1231  001382  D007               	goto	l284
  1232  001384  0A0D               	xorlw	13	; case 105
  1233  001386  B4D8               	btfsc	status,2,c
  1234  001388  D004               	goto	l284
  1235  00138A  0A11               	xorlw	17	; case 120
  1236  00138C  B4D8               	btfsc	status,2,c
  1237  00138E  D7E8               	goto	l285
  1238  001390  D0D6               	goto	u820
  1239  001392                     l284:
  1240                           
  1241                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1242  001392  BE15               	btfsc	printf@flag,7,c
  1243  001394  D015               	goto	l287
  1244                           
  1245                           ;doprnt.c: 1253: {
  1246                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1247  001396  C013  FFD9         	movff	printf@ap,fsr2l
  1248  00139A  C014  FFDA         	movff	printf@ap+1,fsr2h
  1249  00139E  CFDE F016          	movff	postinc2,printf@val
  1250  0013A2  CFDD F017          	movff	postdec2,printf@val+1
  1251  0013A6  0E02               	movlw	2
  1252  0013A8  2613               	addwf	printf@ap,f,c
  1253  0013AA  0E00               	movlw	0
  1254  0013AC  2214               	addwfc	printf@ap+1,f,c
  1255                           
  1256                           ;doprnt.c: 1261: if((int)val < 0) {
  1257  0013AE  AE17               	btfss	printf@val+1,7,c
  1258  0013B0  D013               	goto	l289
  1259                           
  1260                           ;doprnt.c: 1262: flag |= 0x03;
  1261  0013B2  0E03               	movlw	3
  1262  0013B4  1215               	iorwf	printf@flag,f,c
  1263                           
  1264                           ;doprnt.c: 1263: val = -val;
  1265  0013B6  6C16               	negf	printf@val,c
  1266  0013B8  1E17               	comf	printf@val+1,f,c
  1267  0013BA  B0D8               	btfsc	status,0,c
  1268  0013BC  2A17               	incf	printf@val+1,f,c
  1269                           
  1270                           ;doprnt.c: 1264: }
  1271                           ;doprnt.c: 1266: }
  1272  0013BE  D00C               	goto	l289
  1273  0013C0                     l287:
  1274                           
  1275                           ;doprnt.c: 1268: else
  1276                           ;doprnt.c: 1273: {
  1277                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1278  0013C0  C013  FFD9         	movff	printf@ap,fsr2l
  1279  0013C4  C014  FFDA         	movff	printf@ap+1,fsr2h
  1280  0013C8  CFDE F016          	movff	postinc2,printf@val
  1281  0013CC  CFDD F017          	movff	postdec2,printf@val+1
  1282  0013D0  0E02               	movlw	2
  1283  0013D2  2613               	addwf	printf@ap,f,c
  1284  0013D4  0E00               	movlw	0
  1285  0013D6  2214               	addwfc	printf@ap+1,f,c
  1286  0013D8                     l289:
  1287                           
  1288                           ;doprnt.c: 1287: }
  1289                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1290  0013D8  5018               	movf	printf@prec,w,c
  1291  0013DA  A4D8               	btfss	status,2,c
  1292  0013DC  D036               	goto	l291
  1293  0013DE  5016               	movf	printf@val,w,c
  1294  0013E0  1017               	iorwf	printf@val+1,w,c
  1295  0013E2  A4D8               	btfss	status,2,c
  1296  0013E4  D032               	goto	l291
  1297                           
  1298                           ;doprnt.c: 1291: prec++;
  1299  0013E6  2A18               	incf	printf@prec,f,c
  1300                           
  1301                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1302  0013E8  D030               	goto	l291
  1303  0013EA                     
  1304                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1305  0013EA  0E01               	movlw	1
  1306  0013EC  6E19               	movwf	printf@c,c
  1307  0013EE                     l1604:
  1308  0013EE  0E05               	movlw	5
  1309  0013F0  1819               	xorwf	printf@c,w,c
  1310  0013F2  B4D8               	btfsc	status,2,c
  1311  0013F4  D032               	goto	l296
  1312                           
  1313                           ;doprnt.c: 1306: if(val < dpowers[c])
  1314  0013F6  5019               	movf	printf@c,w,c
  1315  0013F8  0D02               	mullw	2
  1316  0013FA  0E12               	movlw	low _dpowers
  1317  0013FC  24F3               	addwf	prodl,w,c
  1318  0013FE  6EF6               	movwf	tblptrl,c
  1319  001400  0E10               	movlw	high _dpowers
  1320  001402  20F4               	addwfc	prodh,w,c
  1321  001404  6EF7               	movwf	tblptrh,c
  1322  001406                     	if	0	;There are less than 3 active tblptr bytes
  1323  001406                     	endif
  1324  001406  0009               	tblrd		*+
  1325  001408  50F5               	movf	tablat,w,c
  1326  00140A  5C16               	subwf	printf@val,w,c
  1327  00140C  0009               	tblrd		*+
  1328  00140E  50F5               	movf	tablat,w,c
  1329  001410  5817               	subwfb	printf@val+1,w,c
  1330  001412  A0D8               	btfss	status,0,c
  1331  001414  D022               	goto	l296
  1332                           
  1333                           ;doprnt.c: 1307: break;
  1334  001416  2A19               	incf	printf@c,f,c
  1335  001418  D7EA               	goto	l1604
  1336  00141A                     
  1337                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1338  00141A  0E01               	movlw	1
  1339  00141C  6E19               	movwf	printf@c,c
  1340  00141E                     l1618:
  1341  00141E  0E04               	movlw	4
  1342  001420  1819               	xorwf	printf@c,w,c
  1343  001422  B4D8               	btfsc	status,2,c
  1344  001424  D01A               	goto	l296
  1345                           
  1346                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1347  001426  5019               	movf	printf@c,w,c
  1348  001428  0D02               	mullw	2
  1349  00142A  0E1C               	movlw	low _hexpowers
  1350  00142C  24F3               	addwf	prodl,w,c
  1351  00142E  6EF6               	movwf	tblptrl,c
  1352  001430  0E10               	movlw	high _hexpowers
  1353  001432  20F4               	addwfc	prodh,w,c
  1354  001434  6EF7               	movwf	tblptrh,c
  1355  001436                     	if	0	;There are less than 3 active tblptr bytes
  1356  001436                     	endif
  1357  001436  0009               	tblrd		*+
  1358  001438  50F5               	movf	tablat,w,c
  1359  00143A  5C16               	subwf	printf@val,w,c
  1360  00143C  0009               	tblrd		*+
  1361  00143E  50F5               	movf	tablat,w,c
  1362  001440  5817               	subwfb	printf@val+1,w,c
  1363  001442  A0D8               	btfss	status,0,c
  1364  001444  D00A               	goto	l296
  1365                           
  1366                           ;doprnt.c: 1318: break;
  1367  001446  2A19               	incf	printf@c,f,c
  1368  001448  D7EA               	goto	l1618
  1369  00144A                     l291:
  1370  00144A  5015               	movf	printf@flag,w,c
  1371  00144C  0B80               	andlw	128
  1372                           
  1373                           ; Switch size 1, requested type "space"
  1374                           ; Number of cases is 2, Range of values is 0 to 128
  1375                           ; switch strategies available:
  1376                           ; Name         Instructions Cycles
  1377                           ; simple_byte            7     4 (average)
  1378                           ;	Chosen strategy is simple_byte
  1379  00144E  0A00               	xorlw	0	; case 0
  1380  001450  B4D8               	btfsc	status,2,c
  1381  001452  D7CB               	goto	l292
  1382  001454  0A80               	xorlw	128	; case 128
  1383  001456  B4D8               	btfsc	status,2,c
  1384  001458  D7E0               	goto	l297
  1385  00145A                     l296:
  1386                           
  1387                           ;doprnt.c: 1339: if(c < prec)
  1388  00145A  5019               	movf	printf@c,w,c
  1389  00145C  0A80               	xorlw	128
  1390  00145E  6E11               	movwf	??_printf& (0+255),c
  1391  001460  5018               	movf	printf@prec,w,c
  1392  001462  0A80               	xorlw	128
  1393  001464  5C11               	subwf	??_printf& (0+255),w,c
  1394  001466  B0D8               	btfsc	status,0,c
  1395  001468  D003               	goto	l301
  1396                           
  1397                           ;doprnt.c: 1340: c = prec;
  1398  00146A  C018  F019         	movff	printf@prec,printf@c
  1399  00146E  D009               	goto	l303
  1400  001470                     l301:
  1401                           
  1402                           ;doprnt.c: 1341: else if(prec < c)
  1403  001470  5018               	movf	printf@prec,w,c
  1404  001472  0A80               	xorlw	128
  1405  001474  6E11               	movwf	??_printf& (0+255),c
  1406  001476  5019               	movf	printf@c,w,c
  1407  001478  0A80               	xorlw	128
  1408  00147A  5C11               	subwf	??_printf& (0+255),w,c
  1409  00147C  A0D8               	btfss	status,0,c
  1410                           
  1411                           ;doprnt.c: 1342: prec = c;
  1412  00147E  C019  F018         	movff	printf@c,printf@prec
  1413  001482                     l303:
  1414                           
  1415                           ;doprnt.c: 1422: {
  1416                           ;doprnt.c: 1438: if(flag & 0x03)
  1417  001482  C015  F011         	movff	printf@flag,??_printf
  1418  001486  0E03               	movlw	3
  1419  001488  1611               	andwf	??_printf,f,c
  1420  00148A  B4D8               	btfsc	status,2,c
  1421  00148C  D054               	goto	l305
  1422                           
  1423                           ;doprnt.c: 1439: (putch('-') );
  1424  00148E  0E2D               	movlw	45
  1425  001490  EC56  F00C         	call	_putch
  1426                           
  1427                           ;doprnt.c: 1469: }
  1428                           ;doprnt.c: 1474: while(prec--) {
  1429  001494  D050               	goto	l305
  1430  001496                     
  1431                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1432  001496  5018               	movf	printf@prec,w,c
  1433  001498  0D02               	mullw	2
  1434  00149A  0E12               	movlw	low _dpowers
  1435  00149C  24F3               	addwf	prodl,w,c
  1436  00149E  6EF6               	movwf	tblptrl,c
  1437  0014A0  0E10               	movlw	high _dpowers
  1438  0014A2  20F4               	addwfc	prodh,w,c
  1439  0014A4  6EF7               	movwf	tblptrh,c
  1440  0014A6                     	if	0	;There are less than 3 active tblptr bytes
  1441  0014A6                     	endif
  1442  0014A6  0009               	tblrd		*+
  1443  0014A8  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1444  0014AC  000A               	tblrd		*-
  1445  0014AE  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1446  0014B2  C016  F001         	movff	printf@val,___lwdiv@dividend
  1447  0014B6  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1448  0014BA  EC5A  F00B         	call	___lwdiv	;wreg free
  1449  0014BE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1450  0014C2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1451  0014C6  0E00               	movlw	0
  1452  0014C8  6E0B               	movwf	___lwmod@divisor+1,c
  1453  0014CA  0E0A               	movlw	10
  1454  0014CC  6E0A               	movwf	___lwmod@divisor,c
  1455  0014CE  ECF3  F00B         	call	___lwmod	;wreg free
  1456  0014D2  5008               	movf	?___lwmod,w,c
  1457  0014D4  0F30               	addlw	48
  1458  0014D6  6E19               	movwf	printf@c,c
  1459                           
  1460                           ;doprnt.c: 1491: break;
  1461  0014D8  D02B               	goto	l309
  1462  0014DA                     
  1463                           ;doprnt.c: 1499: {
  1464                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1465  0014DA  C016  F001         	movff	printf@val,___lwdiv@dividend
  1466  0014DE  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1467  0014E2  5018               	movf	printf@prec,w,c
  1468  0014E4  0D02               	mullw	2
  1469  0014E6  0E1C               	movlw	low _hexpowers
  1470  0014E8  24F3               	addwf	prodl,w,c
  1471  0014EA  6EF6               	movwf	tblptrl,c
  1472  0014EC  0E10               	movlw	high _hexpowers
  1473  0014EE  20F4               	addwfc	prodh,w,c
  1474  0014F0  6EF7               	movwf	tblptrh,c
  1475  0014F2                     	if	0	;There are less than 3 active tblptr bytes
  1476  0014F2                     	endif
  1477  0014F2  0009               	tblrd		*+
  1478  0014F4  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1479  0014F8  000A               	tblrd		*-
  1480  0014FA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1481  0014FE  EC5A  F00B         	call	___lwdiv	;wreg free
  1482  001502  5001               	movf	?___lwdiv,w,c
  1483  001504  0B0F               	andlw	15
  1484  001506  6E12               	movwf	printf@idx,c
  1485                           
  1486                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1487  001508  5012               	movf	printf@idx,w,c
  1488  00150A  0D01               	mullw	1
  1489  00150C  0E2D               	movlw	low STR_8
  1490  00150E  24F3               	addwf	prodl,w,c
  1491  001510  6EF6               	movwf	tblptrl,c
  1492  001512  0E10               	movlw	high STR_8
  1493  001514  20F4               	addwfc	prodh,w,c
  1494  001516  6EF7               	movwf	tblptrh,c
  1495  001518                     	if	0	;There are less than 3 active tblptr bytes
  1496  001518                     	endif
  1497  001518  0008               	tblrd		*
  1498  00151A  CFF5 F019          	movff	tablat,printf@c
  1499                           
  1500                           ;doprnt.c: 1523: }
  1501                           
  1502                           ;doprnt.c: 1508: }
  1503                           ;doprnt.c: 1510: break;
  1504  00151E  D008               	goto	l309
  1505  001520  5015               	movf	printf@flag,w,c
  1506  001522  0B80               	andlw	128
  1507                           
  1508                           ; Switch size 1, requested type "space"
  1509                           ; Number of cases is 2, Range of values is 0 to 128
  1510                           ; switch strategies available:
  1511                           ; Name         Instructions Cycles
  1512                           ; simple_byte            7     4 (average)
  1513                           ;	Chosen strategy is simple_byte
  1514  001524  0A00               	xorlw	0	; case 0
  1515  001526  B4D8               	btfsc	status,2,c
  1516  001528  D7B6               	goto	l308
  1517  00152A  0A80               	xorlw	128	; case 128
  1518  00152C  B4D8               	btfsc	status,2,c
  1519  00152E  D7D5               	goto	l310
  1520  001530                     l309:
  1521                           
  1522                           ;doprnt.c: 1524: (putch(c) );
  1523  001530  5019               	movf	printf@c,w,c
  1524  001532  EC56  F00C         	call	_putch
  1525  001536                     l305:
  1526  001536  0618               	decf	printf@prec,f,c
  1527  001538  2818               	incf	printf@prec,w,c
  1528  00153A  A4D8               	btfss	status,2,c
  1529  00153C  D7F1               	goto	l307
  1530  00153E                     u820:
  1531  00153E  C00D  FFF6         	movff	printf@f,tblptrl
  1532  001542  C00E  FFF7         	movff	printf@f+1,tblptrh
  1533  001546  4A0D               	infsnz	printf@f,f,c
  1534  001548  2A0E               	incf	printf@f+1,f,c
  1535  00154A                     	if	0	;tblptru may be non-zero
  1536  00154A                     	endif
  1537  00154A                     	if	0	;tblptru may be non-zero
  1538  00154A                     	endif
  1539  00154A  0008               	tblrd		*
  1540  00154C  CFF5 F019          	movff	tablat,printf@c
  1541  001550  5019               	movf	printf@c,w,c
  1542  001552  B4D8               	btfsc	status,2,c
  1543  001554  0012               	return	
  1544  001556  D6CF               	goto	l272
  1545  001558                     __end_of_printf:
  1546                           	opt stack 0
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           intcon	equ	0xFF2
  1554                           intcon3	equ	0xFF0
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postinc2	equ	0xFDE
  1558                           postdec2	equ	0xFDD
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function _putch *****************
  1564 ;; Defined at:
  1565 ;;		line 24 in file "lcd.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  data            1    wreg     unsigned char 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  data            1    2[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;Total ram usage:        1 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    1
  1586 ;; This function calls:
  1587 ;;		_lcdNibble
  1588 ;; This function is called by:
  1589 ;;		_printf
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text3
  1594  0018AC                     __ptext3:
  1595                           	opt stack 0
  1596  0018AC                     _putch:
  1597                           	opt stack 28
  1598                           
  1599                           ;incstack = 0
  1600                           ;putch@data stored from wreg
  1601  0018AC  6E03               	movwf	putch@data,c
  1602                           
  1603                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1604  0018AE  848C               	bsf	3980,2,c	;volatile
  1605                           
  1606                           ;lcd.c: 33: lcdNibble(data);
  1607  0018B0  5003               	movf	putch@data,w,c
  1608  0018B2  ECED  F00A         	call	_lcdNibble
  1609                           
  1610                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1611  0018B6  0EC8               	movlw	200
  1612  0018B8                     u957:
  1613  0018B8  D000               	nop2	
  1614  0018BA  2EE8               	decfsz	wreg,f,c
  1615  0018BC  D7FD               	bra	u957
  1616  0018BE  0012               	return		;funcret
  1617  0018C0                     __end_of_putch:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodh	equ	0xFF4
  1624                           prodl	equ	0xFF3
  1625                           intcon	equ	0xFF2
  1626                           intcon3	equ	0xFF0
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _isdigit *****************
  1636 ;; Defined at:
  1637 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  c               1    wreg     unsigned char 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;  c               1    2[COMRAM] unsigned char 
  1642 ;; Return value:  Size  Location     Type
  1643 ;;		None               void
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;Total ram usage:        3 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_printf
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text4
  1665  00188E                     __ptext4:
  1666                           	opt stack 0
  1667  00188E                     _isdigit:
  1668                           	opt stack 29
  1669                           
  1670                           ;incstack = 0
  1671                           ;isdigit@c stored from wreg
  1672  00188E  6E03               	movwf	isdigit@c,c
  1673  001890  0E00               	movlw	0
  1674  001892  6E02               	movwf	_isdigit$854,c
  1675  001894  0E3A               	movlw	58
  1676  001896  6003               	cpfslt	isdigit@c,c
  1677  001898  D005               	goto	l643
  1678  00189A  0E2F               	movlw	47
  1679  00189C  6403               	cpfsgt	isdigit@c,c
  1680  00189E  D002               	goto	l643
  1681  0018A0  0E01               	movlw	1
  1682  0018A2  6E02               	movwf	_isdigit$854,c
  1683  0018A4                     l643:
  1684  0018A4  C002  F001         	movff	_isdigit$854,??_isdigit
  1685  0018A8  3001               	rrcf	??_isdigit,w,c
  1686  0018AA  0012               	return	
  1687  0018AC                     __end_of_isdigit:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           prodh	equ	0xFF4
  1694                           prodl	equ	0xFF3
  1695                           intcon	equ	0xFF2
  1696                           intcon3	equ	0xFF0
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postinc2	equ	0xFDE
  1700                           postdec2	equ	0xFDD
  1701                           fsr2h	equ	0xFDA
  1702                           fsr2l	equ	0xFD9
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function ___lwmod *****************
  1706 ;; Defined at:
  1707 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  dividend        2    7[COMRAM] unsigned int 
  1710 ;;  divisor         2    9[COMRAM] unsigned int 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  counter         1   11[COMRAM] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  2    7[COMRAM] unsigned int 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;Total ram usage:        5 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_printf
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text5
  1736  0017E6                     __ptext5:
  1737                           	opt stack 0
  1738  0017E6                     ___lwmod:
  1739                           	opt stack 29
  1740                           
  1741                           ;incstack = 0
  1742  0017E6  500A               	movf	___lwmod@divisor,w,c
  1743  0017E8  100B               	iorwf	___lwmod@divisor+1,w,c
  1744  0017EA  B4D8               	btfsc	status,2,c
  1745  0017EC  D018               	goto	l737
  1746  0017EE  0E01               	movlw	1
  1747  0017F0  6E0C               	movwf	___lwmod@counter,c
  1748  0017F2  D004               	goto	l732
  1749  0017F4  90D8               	bcf	status,0,c
  1750  0017F6  360A               	rlcf	___lwmod@divisor,f,c
  1751  0017F8  360B               	rlcf	___lwmod@divisor+1,f,c
  1752  0017FA  2A0C               	incf	___lwmod@counter,f,c
  1753  0017FC                     l732:
  1754  0017FC  AE0B               	btfss	___lwmod@divisor+1,7,c
  1755  0017FE  D7FA               	goto	l733
  1756  001800                     u630:
  1757  001800  500A               	movf	___lwmod@divisor,w,c
  1758  001802  5C08               	subwf	___lwmod@dividend,w,c
  1759  001804  500B               	movf	___lwmod@divisor+1,w,c
  1760  001806  5809               	subwfb	___lwmod@dividend+1,w,c
  1761  001808  A0D8               	btfss	status,0,c
  1762  00180A  D004               	goto	l736
  1763  00180C  500A               	movf	___lwmod@divisor,w,c
  1764  00180E  5E08               	subwf	___lwmod@dividend,f,c
  1765  001810  500B               	movf	___lwmod@divisor+1,w,c
  1766  001812  5A09               	subwfb	___lwmod@dividend+1,f,c
  1767  001814                     l736:
  1768  001814  90D8               	bcf	status,0,c
  1769  001816  320B               	rrcf	___lwmod@divisor+1,f,c
  1770  001818  320A               	rrcf	___lwmod@divisor,f,c
  1771  00181A  2E0C               	decfsz	___lwmod@counter,f,c
  1772  00181C  D7F1               	goto	u630
  1773  00181E                     l737:
  1774  00181E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1775  001822  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1776  001826  0012               	return		;funcret
  1777  001828                     __end_of___lwmod:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           intcon	equ	0xFF2
  1786                           intcon3	equ	0xFF0
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           postinc2	equ	0xFDE
  1790                           postdec2	equ	0xFDD
  1791                           fsr2h	equ	0xFDA
  1792                           fsr2l	equ	0xFD9
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function ___lwdiv *****************
  1796 ;; Defined at:
  1797 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  dividend        2    0[COMRAM] unsigned int 
  1800 ;;  divisor         2    2[COMRAM] unsigned int 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  quotient        2    4[COMRAM] unsigned int 
  1803 ;;  counter         1    6[COMRAM] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  2    0[COMRAM] unsigned int 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;Total ram usage:        7 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_printf
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text6
  1827  0016B4                     __ptext6:
  1828                           	opt stack 0
  1829  0016B4                     ___lwdiv:
  1830                           	opt stack 29
  1831                           
  1832                           ;incstack = 0
  1833  0016B4  0E00               	movlw	0
  1834  0016B6  6E06               	movwf	___lwdiv@quotient+1,c
  1835  0016B8  0E00               	movlw	0
  1836  0016BA  6E05               	movwf	___lwdiv@quotient,c
  1837  0016BC  5003               	movf	___lwdiv@divisor,w,c
  1838  0016BE  1004               	iorwf	___lwdiv@divisor+1,w,c
  1839  0016C0  B4D8               	btfsc	status,2,c
  1840  0016C2  D01C               	goto	l727
  1841  0016C4  0E01               	movlw	1
  1842  0016C6  6E07               	movwf	___lwdiv@counter,c
  1843  0016C8  D004               	goto	l722
  1844  0016CA  90D8               	bcf	status,0,c
  1845  0016CC  3603               	rlcf	___lwdiv@divisor,f,c
  1846  0016CE  3604               	rlcf	___lwdiv@divisor+1,f,c
  1847  0016D0  2A07               	incf	___lwdiv@counter,f,c
  1848  0016D2                     l722:
  1849  0016D2  AE04               	btfss	___lwdiv@divisor+1,7,c
  1850  0016D4  D7FA               	goto	l723
  1851  0016D6                     u600:
  1852  0016D6  90D8               	bcf	status,0,c
  1853  0016D8  3605               	rlcf	___lwdiv@quotient,f,c
  1854  0016DA  3606               	rlcf	___lwdiv@quotient+1,f,c
  1855  0016DC  5003               	movf	___lwdiv@divisor,w,c
  1856  0016DE  5C01               	subwf	___lwdiv@dividend,w,c
  1857  0016E0  5004               	movf	___lwdiv@divisor+1,w,c
  1858  0016E2  5802               	subwfb	___lwdiv@dividend+1,w,c
  1859  0016E4  A0D8               	btfss	status,0,c
  1860  0016E6  D005               	goto	l726
  1861  0016E8  5003               	movf	___lwdiv@divisor,w,c
  1862  0016EA  5E01               	subwf	___lwdiv@dividend,f,c
  1863  0016EC  5004               	movf	___lwdiv@divisor+1,w,c
  1864  0016EE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1865  0016F0  8005               	bsf	___lwdiv@quotient,0,c
  1866  0016F2                     l726:
  1867  0016F2  90D8               	bcf	status,0,c
  1868  0016F4  3204               	rrcf	___lwdiv@divisor+1,f,c
  1869  0016F6  3203               	rrcf	___lwdiv@divisor,f,c
  1870  0016F8  2E07               	decfsz	___lwdiv@counter,f,c
  1871  0016FA  D7ED               	goto	u600
  1872  0016FC                     l727:
  1873  0016FC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1874  001700  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1875  001704  0012               	return		;funcret
  1876  001706                     __end_of___lwdiv:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           prodh	equ	0xFF4
  1883                           prodl	equ	0xFF3
  1884                           intcon	equ	0xFF2
  1885                           intcon3	equ	0xFF0
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postinc2	equ	0xFDE
  1889                           postdec2	equ	0xFDD
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _motorStop_1 *****************
  1895 ;; Defined at:
  1896 ;;		line 291 in file "main.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		_I2C_Master_Init
  1919 ;;		_I2C_Master_Start
  1920 ;;		_I2C_Master_Stop
  1921 ;;		_I2C_Master_Write
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text7
  1928  001752                     __ptext7:
  1929                           	opt stack 0
  1930  001752                     _motorStop_1:
  1931                           	opt stack 28
  1932                           
  1933                           ;main.c: 292: I2C_Master_Init(100000);
  1934                           
  1935                           ;incstack = 0
  1936  001752  0EA0               	movlw	160
  1937  001754  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1938  001756  0E86               	movlw	134
  1939  001758  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1940  00175A  0E01               	movlw	1
  1941  00175C  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1942  00175E  0E00               	movlw	0
  1943  001760  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1944  001762  EC2C  F00B         	call	_I2C_Master_Init	;wreg free
  1945                           
  1946                           ;main.c: 293: I2C_Master_Start();
  1947  001766  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
  1948                           
  1949                           ;main.c: 295: I2C_Master_Write(0b00010000);
  1950  00176A  0E00               	movlw	0
  1951  00176C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1952  00176E  0E10               	movlw	16
  1953  001770  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1954  001772  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  1955                           
  1956                           ;main.c: 296: I2C_Master_Stop();
  1957  001776  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
  1958                           
  1959                           ;main.c: 299: I2C_Master_Start();
  1960  00177A  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
  1961                           
  1962                           ;main.c: 300: I2C_Master_Write(0b00010000);
  1963  00177E  0E00               	movlw	0
  1964  001780  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1965  001782  0E10               	movlw	16
  1966  001784  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1967  001786  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  1968                           
  1969                           ;main.c: 301: I2C_Master_Write('6');
  1970  00178A  0E00               	movlw	0
  1971  00178C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1972  00178E  0E36               	movlw	54
  1973  001790  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1974  001792  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  1975                           
  1976                           ;main.c: 302: I2C_Master_Stop();
  1977  001796  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
  1978  00179A  0012               	return		;funcret
  1979  00179C                     __end_of_motorStop_1:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           prodh	equ	0xFF4
  1986                           prodl	equ	0xFF3
  1987                           intcon	equ	0xFF2
  1988                           intcon3	equ	0xFF0
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postinc2	equ	0xFDE
  1992                           postdec2	equ	0xFDD
  1993                           fsr2h	equ	0xFDA
  1994                           fsr2l	equ	0xFD9
  1995                           status	equ	0xFD8
  1996                           
  1997 ;; *************** function _motorStart_1 *****************
  1998 ;; Defined at:
  1999 ;;		line 276 in file "main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    2
  2020 ;; This function calls:
  2021 ;;		_I2C_Master_Init
  2022 ;;		_I2C_Master_Start
  2023 ;;		_I2C_Master_Stop
  2024 ;;		_I2C_Master_Write
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text8
  2031  00179C                     __ptext8:
  2032                           	opt stack 0
  2033  00179C                     _motorStart_1:
  2034                           	opt stack 28
  2035                           
  2036                           ;main.c: 277: I2C_Master_Init(100000);
  2037                           
  2038                           ;incstack = 0
  2039  00179C  0EA0               	movlw	160
  2040  00179E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2041  0017A0  0E86               	movlw	134
  2042  0017A2  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2043  0017A4  0E01               	movlw	1
  2044  0017A6  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2045  0017A8  0E00               	movlw	0
  2046  0017AA  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2047  0017AC  EC2C  F00B         	call	_I2C_Master_Init	;wreg free
  2048                           
  2049                           ;main.c: 278: I2C_Master_Start();
  2050  0017B0  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
  2051                           
  2052                           ;main.c: 280: I2C_Master_Write(0b00010000);
  2053  0017B4  0E00               	movlw	0
  2054  0017B6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2055  0017B8  0E10               	movlw	16
  2056  0017BA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2057  0017BC  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  2058                           
  2059                           ;main.c: 281: I2C_Master_Stop();
  2060  0017C0  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
  2061                           
  2062                           ;main.c: 284: I2C_Master_Start();
  2063  0017C4  EC7C  F00C         	call	_I2C_Master_Start	;wreg free
  2064                           
  2065                           ;main.c: 285: I2C_Master_Write(0b00010000);
  2066  0017C8  0E00               	movlw	0
  2067  0017CA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2068  0017CC  0E10               	movlw	16
  2069  0017CE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2070  0017D0  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  2071                           
  2072                           ;main.c: 286: I2C_Master_Write('5');
  2073  0017D4  0E00               	movlw	0
  2074  0017D6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2075  0017D8  0E35               	movlw	53
  2076  0017DA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2077  0017DC  EC73  F00C         	call	_I2C_Master_Write	;wreg free
  2078                           
  2079                           ;main.c: 287: I2C_Master_Stop();
  2080  0017E0  EC78  F00C         	call	_I2C_Master_Stop	;wreg free
  2081  0017E4  0012               	return		;funcret
  2082  0017E6                     __end_of_motorStart_1:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           intcon3	equ	0xFF0
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           postinc2	equ	0xFDE
  2095                           postdec2	equ	0xFDD
  2096                           fsr2h	equ	0xFDA
  2097                           fsr2l	equ	0xFD9
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function _I2C_Master_Write *****************
  2101 ;; Defined at:
  2102 ;;		line 108 in file "I2C.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        2 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    1
  2123 ;; This function calls:
  2124 ;;		_I2C_Master_Wait
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;;		_motorStart_1
  2128 ;;		_motorStop_1
  2129 ;;		_motorStart_0
  2130 ;;		_motorStop_0
  2131 ;;		_motorStart_2
  2132 ;;		_motorStop_2
  2133 ;;		_motorStart_3
  2134 ;;		_motorStop_3
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text9
  2139  0018E6                     __ptext9:
  2140                           	opt stack 0
  2141  0018E6                     _I2C_Master_Write:
  2142                           	opt stack 28
  2143                           
  2144                           ;I2C.c: 116: I2C_Master_Wait();
  2145                           
  2146                           ;incstack = 0
  2147  0018E6  EC6A  F00C         	call	_I2C_Master_Wait	;wreg free
  2148                           
  2149                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2150  0018EA  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2151  0018EE  0012               	return		;funcret
  2152  0018F0                     __end_of_I2C_Master_Write:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           tblptrh	equ	0xFF7
  2156                           tblptrl	equ	0xFF6
  2157                           tablat	equ	0xFF5
  2158                           prodh	equ	0xFF4
  2159                           prodl	equ	0xFF3
  2160                           intcon	equ	0xFF2
  2161                           intcon3	equ	0xFF0
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _I2C_Master_Stop *****************
  2171 ;; Defined at:
  2172 ;;		line 95 in file "I2C.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    1
  2193 ;; This function calls:
  2194 ;;		_I2C_Master_Wait
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;;		_motorStart_1
  2198 ;;		_motorStop_1
  2199 ;;		_motorStart_0
  2200 ;;		_motorStop_0
  2201 ;;		_motorStart_2
  2202 ;;		_motorStop_2
  2203 ;;		_motorStart_3
  2204 ;;		_motorStop_3
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text10
  2209  0018F0                     __ptext10:
  2210                           	opt stack 0
  2211  0018F0                     _I2C_Master_Stop:
  2212                           	opt stack 28
  2213                           
  2214                           ;I2C.c: 104: I2C_Master_Wait();
  2215                           
  2216                           ;incstack = 0
  2217  0018F0  EC6A  F00C         	call	_I2C_Master_Wait	;wreg free
  2218                           
  2219                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  2220  0018F4  84C5               	bsf	4037,2,c	;volatile
  2221  0018F6  0012               	return		;funcret
  2222  0018F8                     __end_of_I2C_Master_Stop:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           intcon3	equ	0xFF0
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           postinc2	equ	0xFDE
  2235                           postdec2	equ	0xFDD
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _I2C_Master_Start *****************
  2241 ;; Defined at:
  2242 ;;		line 69 in file "I2C.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    1
  2263 ;; This function calls:
  2264 ;;		_I2C_Master_Wait
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;;		_motorStart_1
  2268 ;;		_motorStop_1
  2269 ;;		_motorStart_0
  2270 ;;		_motorStop_0
  2271 ;;		_motorStart_2
  2272 ;;		_motorStop_2
  2273 ;;		_motorStart_3
  2274 ;;		_motorStop_3
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text11
  2279  0018F8                     __ptext11:
  2280                           	opt stack 0
  2281  0018F8                     _I2C_Master_Start:
  2282                           	opt stack 28
  2283                           
  2284                           ;I2C.c: 78: I2C_Master_Wait();
  2285                           
  2286                           ;incstack = 0
  2287  0018F8  EC6A  F00C         	call	_I2C_Master_Wait	;wreg free
  2288                           
  2289                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2290  0018FC  80C5               	bsf	4037,0,c	;volatile
  2291  0018FE  0012               	return		;funcret
  2292  001900                     __end_of_I2C_Master_Start:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           intcon	equ	0xFF2
  2301                           intcon3	equ	0xFF0
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postinc2	equ	0xFDE
  2305                           postdec2	equ	0xFDD
  2306                           fsr2h	equ	0xFDA
  2307                           fsr2l	equ	0xFD9
  2308                           status	equ	0xFD8
  2309                           
  2310 ;; *************** function _I2C_Master_Wait *****************
  2311 ;; Defined at:
  2312 ;;		line 51 in file "I2C.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;Total ram usage:        1 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_I2C_Master_Start
  2336 ;;		_I2C_Master_Stop
  2337 ;;		_I2C_Master_Write
  2338 ;;		_I2C_Master_RepeatedStart
  2339 ;;		_I2C_Master_Read
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text12
  2344  0018D4                     __ptext12:
  2345                           	opt stack 0
  2346  0018D4                     _I2C_Master_Wait:
  2347                           	opt stack 28
  2348                           
  2349                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2350                           
  2351                           ;incstack = 0
  2352  0018D4  B4C7               	btfsc	4039,2,c	;volatile
  2353  0018D6  D7FE               	goto	_I2C_Master_Wait
  2354  0018D8  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2355  0018DC  0E1F               	movlw	31
  2356  0018DE  1601               	andwf	??_I2C_Master_Wait,f,c
  2357  0018E0  B4D8               	btfsc	status,2,c
  2358  0018E2  0012               	return	
  2359  0018E4  D7F7               	goto	_I2C_Master_Wait
  2360  0018E6                     __end_of_I2C_Master_Wait:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           intcon	equ	0xFF2
  2369                           intcon3	equ	0xFF0
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _I2C_Master_Init *****************
  2379 ;; Defined at:
  2380 ;;		line 14 in file "I2C.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;Total ram usage:        8 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		___lldiv
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;;		_motorStart_1
  2406 ;;		_motorStop_1
  2407 ;;		_motorStart_0
  2408 ;;		_motorStop_0
  2409 ;;		_motorStart_2
  2410 ;;		_motorStop_2
  2411 ;;		_motorStart_3
  2412 ;;		_motorStop_3
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text13
  2417  001658                     __ptext13:
  2418                           	opt stack 0
  2419  001658                     _I2C_Master_Init:
  2420                           	opt stack 28
  2421                           
  2422                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2423                           
  2424                           ;incstack = 0
  2425  001658  9AC6               	bcf	4038,5,c	;volatile
  2426                           
  2427                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2428  00165A  8694               	bsf	3988,3,c	;volatile
  2429                           
  2430                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2431  00165C  8894               	bsf	3988,4,c	;volatile
  2432                           
  2433                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2434  00165E  0E80               	movlw	128
  2435  001660  6EC7               	movwf	4039,c	;volatile
  2436                           
  2437                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2438  001662  0E28               	movlw	40
  2439  001664  6EC6               	movwf	4038,c	;volatile
  2440                           
  2441                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2442  001666  0E00               	movlw	0
  2443  001668  6EC5               	movwf	4037,c	;volatile
  2444                           
  2445                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2446  00166A  0E00               	movlw	0
  2447  00166C  6E01               	movwf	___lldiv@dividend,c
  2448  00166E  0E5A               	movlw	90
  2449  001670  6E02               	movwf	___lldiv@dividend+1,c
  2450  001672  0E62               	movlw	98
  2451  001674  6E03               	movwf	___lldiv@dividend+2,c
  2452  001676  0E02               	movlw	2
  2453  001678  6E04               	movwf	___lldiv@dividend+3,c
  2454  00167A  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2455  00167E  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2456  001682  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2457  001686  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2458  00168A  0E02               	movlw	2
  2459  00168C                     u565:
  2460  00168C  90D8               	bcf	status,0,c
  2461  00168E  3612               	rlcf	??_I2C_Master_Init,f,c
  2462  001690  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2463  001692  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2464  001694  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2465  001696  2EE8               	decfsz	wreg,f,c
  2466  001698  D7F9               	goto	u565
  2467  00169A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2468  00169E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2469  0016A2  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2470  0016A6  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2471  0016AA  ECAC  F00A         	call	___lldiv	;wreg free
  2472  0016AE  0401               	decf	?___lldiv,w,c
  2473  0016B0  6EC8               	movwf	4040,c	;volatile
  2474  0016B2  0012               	return		;funcret
  2475  0016B4                     __end_of_I2C_Master_Init:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           prodh	equ	0xFF4
  2482                           prodl	equ	0xFF3
  2483                           intcon	equ	0xFF2
  2484                           intcon3	equ	0xFF0
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function ___lldiv *****************
  2494 ;; Defined at:
  2495 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  dividend        4    0[COMRAM] unsigned long 
  2498 ;;  divisor         4    4[COMRAM] unsigned long 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  quotient        4    8[COMRAM] unsigned long 
  2501 ;;  counter         1   12[COMRAM] unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  4    0[COMRAM] unsigned long 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2511 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;Total ram usage:       13 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_I2C_Master_Init
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text14
  2525  001558                     __ptext14:
  2526                           	opt stack 0
  2527  001558                     ___lldiv:
  2528                           	opt stack 28
  2529                           
  2530                           ;incstack = 0
  2531  001558  0E00               	movlw	0
  2532  00155A  6E09               	movwf	___lldiv@quotient,c
  2533  00155C  0E00               	movlw	0
  2534  00155E  6E0A               	movwf	___lldiv@quotient+1,c
  2535  001560  0E00               	movlw	0
  2536  001562  6E0B               	movwf	___lldiv@quotient+2,c
  2537  001564  0E00               	movlw	0
  2538  001566  6E0C               	movwf	___lldiv@quotient+3,c
  2539  001568  5005               	movf	___lldiv@divisor,w,c
  2540  00156A  1006               	iorwf	___lldiv@divisor+1,w,c
  2541  00156C  1007               	iorwf	___lldiv@divisor+2,w,c
  2542  00156E  1008               	iorwf	___lldiv@divisor+3,w,c
  2543  001570  B4D8               	btfsc	status,2,c
  2544  001572  D02A               	goto	l674
  2545  001574  0E01               	movlw	1
  2546  001576  6E0D               	movwf	___lldiv@counter,c
  2547  001578  D006               	goto	l669
  2548  00157A  90D8               	bcf	status,0,c
  2549  00157C  3605               	rlcf	___lldiv@divisor,f,c
  2550  00157E  3606               	rlcf	___lldiv@divisor+1,f,c
  2551  001580  3607               	rlcf	___lldiv@divisor+2,f,c
  2552  001582  3608               	rlcf	___lldiv@divisor+3,f,c
  2553  001584  2A0D               	incf	___lldiv@counter,f,c
  2554  001586                     l669:
  2555  001586  AE08               	btfss	___lldiv@divisor+3,7,c
  2556  001588  D7F8               	goto	l670
  2557  00158A                     u540:
  2558  00158A  90D8               	bcf	status,0,c
  2559  00158C  3609               	rlcf	___lldiv@quotient,f,c
  2560  00158E  360A               	rlcf	___lldiv@quotient+1,f,c
  2561  001590  360B               	rlcf	___lldiv@quotient+2,f,c
  2562  001592  360C               	rlcf	___lldiv@quotient+3,f,c
  2563  001594  5005               	movf	___lldiv@divisor,w,c
  2564  001596  5C01               	subwf	___lldiv@dividend,w,c
  2565  001598  5006               	movf	___lldiv@divisor+1,w,c
  2566  00159A  5802               	subwfb	___lldiv@dividend+1,w,c
  2567  00159C  5007               	movf	___lldiv@divisor+2,w,c
  2568  00159E  5803               	subwfb	___lldiv@dividend+2,w,c
  2569  0015A0  5008               	movf	___lldiv@divisor+3,w,c
  2570  0015A2  5804               	subwfb	___lldiv@dividend+3,w,c
  2571  0015A4  A0D8               	btfss	status,0,c
  2572  0015A6  D009               	goto	l673
  2573  0015A8  5005               	movf	___lldiv@divisor,w,c
  2574  0015AA  5E01               	subwf	___lldiv@dividend,f,c
  2575  0015AC  5006               	movf	___lldiv@divisor+1,w,c
  2576  0015AE  5A02               	subwfb	___lldiv@dividend+1,f,c
  2577  0015B0  5007               	movf	___lldiv@divisor+2,w,c
  2578  0015B2  5A03               	subwfb	___lldiv@dividend+2,f,c
  2579  0015B4  5008               	movf	___lldiv@divisor+3,w,c
  2580  0015B6  5A04               	subwfb	___lldiv@dividend+3,f,c
  2581  0015B8  8009               	bsf	___lldiv@quotient,0,c
  2582  0015BA                     l673:
  2583  0015BA  90D8               	bcf	status,0,c
  2584  0015BC  3208               	rrcf	___lldiv@divisor+3,f,c
  2585  0015BE  3207               	rrcf	___lldiv@divisor+2,f,c
  2586  0015C0  3206               	rrcf	___lldiv@divisor+1,f,c
  2587  0015C2  3205               	rrcf	___lldiv@divisor,f,c
  2588  0015C4  2E0D               	decfsz	___lldiv@counter,f,c
  2589  0015C6  D7E1               	goto	u540
  2590  0015C8                     l674:
  2591  0015C8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2592  0015CC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2593  0015D0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2594  0015D4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2595  0015D8  0012               	return		;funcret
  2596  0015DA                     __end_of___lldiv:
  2597                           	opt stack 0
  2598                           tblptru	equ	0xFF8
  2599                           tblptrh	equ	0xFF7
  2600                           tblptrl	equ	0xFF6
  2601                           tablat	equ	0xFF5
  2602                           prodh	equ	0xFF4
  2603                           prodl	equ	0xFF3
  2604                           intcon	equ	0xFF2
  2605                           intcon3	equ	0xFF0
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postinc2	equ	0xFDE
  2609                           postdec2	equ	0xFDD
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function _initLCD *****************
  2615 ;; Defined at:
  2616 ;;		line 60 in file "lcd.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;Total ram usage:        1 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    2
  2637 ;; This function calls:
  2638 ;;		_lcdInst
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text15
  2645  001706                     __ptext15:
  2646                           	opt stack 0
  2647  001706                     _initLCD:
  2648                           	opt stack 28
  2649                           
  2650                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2651                           
  2652                           ;incstack = 0
  2653  001706  0EC3               	movlw	195
  2654  001708  6E04               	movwf	??_initLCD& (0+255),c
  2655  00170A  0ECD               	movlw	205
  2656  00170C                     u967:
  2657  00170C  2EE8               	decfsz	wreg,f,c
  2658  00170E  D7FE               	bra	u967
  2659  001710  2E04               	decfsz	??_initLCD& (0+255),f,c
  2660  001712  D7FC               	bra	u967
  2661  001714  F000               	nop	
  2662                           
  2663                           ;lcd.c: 69: lcdInst(0b00110011);
  2664  001716  0E33               	movlw	51
  2665  001718  EC60  F00C         	call	_lcdInst
  2666                           
  2667                           ;lcd.c: 70: lcdInst(0b00110010);
  2668  00171C  0E32               	movlw	50
  2669  00171E  EC60  F00C         	call	_lcdInst
  2670                           
  2671                           ;lcd.c: 71: lcdInst(0b00101000);
  2672  001722  0E28               	movlw	40
  2673  001724  EC60  F00C         	call	_lcdInst
  2674                           
  2675                           ;lcd.c: 72: lcdInst(0b00001111);
  2676  001728  0E0F               	movlw	15
  2677  00172A  EC60  F00C         	call	_lcdInst
  2678                           
  2679                           ;lcd.c: 73: lcdInst(0b00000110);
  2680  00172E  0E06               	movlw	6
  2681  001730  EC60  F00C         	call	_lcdInst
  2682                           
  2683                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2684  001734  0E01               	movlw	1
  2685  001736  EC60  F00C         	call	_lcdInst
  2686  00173A  0EC3               	movlw	195
  2687  00173C  6E04               	movwf	??_initLCD& (0+255),c
  2688  00173E  0ECD               	movlw	205
  2689  001740                     u977:
  2690  001740  2EE8               	decfsz	wreg,f,c
  2691  001742  D7FE               	bra	u977
  2692  001744  2E04               	decfsz	??_initLCD& (0+255),f,c
  2693  001746  D7FC               	bra	u977
  2694  001748  F000               	nop	
  2695                           
  2696                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2697  00174A  0E0F               	movlw	15
  2698  00174C  EC60  F00C         	call	_lcdInst
  2699  001750  0012               	return		;funcret
  2700  001752                     __end_of_initLCD:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon	equ	0xFF2
  2709                           intcon3	equ	0xFF0
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _lcdInst *****************
  2719 ;; Defined at:
  2720 ;;		line 11 in file "lcd.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  data            1    wreg     unsigned char 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  data            1    2[COMRAM] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;Total ram usage:        1 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    1
  2741 ;; This function calls:
  2742 ;;		_lcdNibble
  2743 ;; This function is called by:
  2744 ;;		_main
  2745 ;;		_initLCD
  2746 ;;		_lcd_set_cursor
  2747 ;;		_lcd_shift_cursor
  2748 ;;		_lcd_shift_display
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text16
  2753  0018C0                     __ptext16:
  2754                           	opt stack 0
  2755  0018C0                     _lcdInst:
  2756                           	opt stack 29
  2757                           
  2758                           ;incstack = 0
  2759                           ;lcdInst@data stored from wreg
  2760  0018C0  6E03               	movwf	lcdInst@data,c
  2761                           
  2762                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2763  0018C2  948C               	bcf	3980,2,c	;volatile
  2764                           
  2765                           ;lcd.c: 20: lcdNibble(data);
  2766  0018C4  5003               	movf	lcdInst@data,w,c
  2767  0018C6  ECED  F00A         	call	_lcdNibble
  2768                           
  2769                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2770  0018CA  0EC8               	movlw	200
  2771  0018CC                     u987:
  2772  0018CC  D000               	nop2	
  2773  0018CE  2EE8               	decfsz	wreg,f,c
  2774  0018D0  D7FD               	bra	u987
  2775  0018D2  0012               	return		;funcret
  2776  0018D4                     __end_of_lcdInst:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           intcon	equ	0xFF2
  2785                           intcon3	equ	0xFF0
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _lcdNibble *****************
  2795 ;; Defined at:
  2796 ;;		line 37 in file "lcd.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  data            1    wreg     unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  data            1    1[COMRAM] unsigned char 
  2801 ;;  temp            1    0[COMRAM] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;Total ram usage:        2 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_lcdInst
  2821 ;;		_putch
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text17
  2826  0015DA                     __ptext17:
  2827                           	opt stack 0
  2828  0015DA                     _lcdNibble:
  2829                           	opt stack 28
  2830                           
  2831                           ;incstack = 0
  2832                           ;lcdNibble@data stored from wreg
  2833  0015DA  6E02               	movwf	lcdNibble@data,c
  2834                           
  2835                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2836  0015DC  5002               	movf	lcdNibble@data,w,c
  2837  0015DE  0BF0               	andlw	240
  2838  0015E0  6E01               	movwf	lcdNibble@temp,c
  2839                           
  2840                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2841  0015E2  508C               	movf	3980,w,c	;volatile
  2842  0015E4  0B0F               	andlw	15
  2843  0015E6  6E8C               	movwf	3980,c	;volatile
  2844                           
  2845                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2846  0015E8  5001               	movf	lcdNibble@temp,w,c
  2847  0015EA  108C               	iorwf	3980,w,c	;volatile
  2848  0015EC  6E8C               	movwf	3980,c	;volatile
  2849                           
  2850                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2851  0015EE  0E00               	movlw	0
  2852  0015F0  BEF2               	btfsc	intcon,7,c	;volatile
  2853  0015F2  0E01               	movlw	1
  2854  0015F4  6E28               	movwf	lcd@LCDinterruptState,c
  2855  0015F6  9EF2               	bcf	intcon,7,c	;volatile
  2856  0015F8  868C               	bsf	3980,3,c	;volatile
  2857  0015FA  0E53               	movlw	83
  2858  0015FC                     u997:
  2859  0015FC  2EE8               	decfsz	wreg,f,c
  2860  0015FE  D7FE               	bra	u997
  2861  001600  F000               	nop	
  2862  001602  968C               	bcf	3980,3,c	;volatile
  2863  001604  0EC8               	movlw	200
  2864  001606                     u1007:
  2865  001606  D000               	nop2	
  2866  001608  2EE8               	decfsz	wreg,f,c
  2867  00160A  D7FD               	bra	u1007
  2868  00160C  B028               	btfsc	lcd@LCDinterruptState,0,c
  2869  00160E  D002               	bra	u15
  2870  001610  9EF2               	bcf	intcon,7,c	;volatile
  2871  001612  D001               	bra	u16
  2872  001614                     u15:
  2873  001614  8EF2               	bsf	intcon,7,c	;volatile
  2874  001616                     u16:
  2875                           
  2876                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2877  001616  3802               	swapf	lcdNibble@data,w,c
  2878  001618  0BF0               	andlw	240
  2879  00161A  6E02               	movwf	lcdNibble@data,c
  2880                           
  2881                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2882  00161C  5002               	movf	lcdNibble@data,w,c
  2883  00161E  0BF0               	andlw	240
  2884  001620  6E01               	movwf	lcdNibble@temp,c
  2885                           
  2886                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2887  001622  508C               	movf	3980,w,c	;volatile
  2888  001624  0B0F               	andlw	15
  2889  001626  6E8C               	movwf	3980,c	;volatile
  2890                           
  2891                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2892  001628  5001               	movf	lcdNibble@temp,w,c
  2893  00162A  108C               	iorwf	3980,w,c	;volatile
  2894  00162C  6E8C               	movwf	3980,c	;volatile
  2895                           
  2896                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2897  00162E  0E00               	movlw	0
  2898  001630  BEF2               	btfsc	intcon,7,c	;volatile
  2899  001632  0E01               	movlw	1
  2900  001634  6E28               	movwf	lcd@LCDinterruptState,c
  2901  001636  9EF2               	bcf	intcon,7,c	;volatile
  2902  001638  868C               	bsf	3980,3,c	;volatile
  2903  00163A  0E53               	movlw	83
  2904  00163C                     u1017:
  2905  00163C  2EE8               	decfsz	wreg,f,c
  2906  00163E  D7FE               	bra	u1017
  2907  001640  F000               	nop	
  2908  001642  968C               	bcf	3980,3,c	;volatile
  2909  001644  0EC8               	movlw	200
  2910  001646                     u1027:
  2911  001646  D000               	nop2	
  2912  001648  2EE8               	decfsz	wreg,f,c
  2913  00164A  D7FD               	bra	u1027
  2914  00164C  B028               	btfsc	lcd@LCDinterruptState,0,c
  2915  00164E  D002               	bra	u25
  2916  001650  9EF2               	bcf	intcon,7,c	;volatile
  2917  001652  D001               	bra	u26
  2918  001654                     u25:
  2919  001654  8EF2               	bsf	intcon,7,c	;volatile
  2920  001656                     u26:
  2921  001656  0012               	return		;funcret
  2922  001658                     __end_of_lcdNibble:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           prodh	equ	0xFF4
  2929                           prodl	equ	0xFF3
  2930                           intcon	equ	0xFF2
  2931                           intcon3	equ	0xFF0
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postinc2	equ	0xFDE
  2935                           postdec2	equ	0xFDD
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           prodh	equ	0xFF4
  2944                           prodl	equ	0xFF3
  2945                           intcon	equ	0xFF2
  2946                           intcon3	equ	0xFF0
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           postinc2	equ	0xFDE
  2950                           postdec2	equ	0xFDD
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955                           	psect	rparam
  2956  0000                     tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           intcon	equ	0xFF2
  2963                           intcon3	equ	0xFF0
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    44
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[3]), STR_5(CODE[10]), STR_4(CODE[3]), 
		 -> STR_3(CODE[3]), STR_2(CODE[5]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_1->_I2C_Master_Init
    _motorStart_1->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12747
                                             25 COMRAM     2     2      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_1
                        _motorStop_1
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    2351
                                             12 COMRAM    13     9      4
                            ___lwdiv
                            ___lwmod
                            _isdigit
                              _putch
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2302
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      34        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 12:39:46 2018

                          _i 001C                           u15 1614                           u16 1616  
                         u25 1654                           u26 1656                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l110 12BC  
                        l111 122C                          l103 10FE                          l120 1840  
                        l104 1118                          l105 1148                          l108 11E0  
                        l301 1470                          l109 11F6                          l310 14DA  
                        l303 1482                          l305 1536                          l307 1520  
                        l308 1496                          l309 1530                          l272 12F6  
                        l273 1306                          l274 135A                          l291 144A  
                        l275 1344                          l292 13EA                          l284 1392  
                        l276 1326                          l285 1360                          l287 13C0  
                        l279 1364                          l296 145A                          l297 141A  
                        l289 13D8                          l722 16D2                          l723 16CA  
                        l643 18A4                          l732 17FC                          l733 17F4  
                        l670 157A                          l726 16F2                          l727 16FC  
                        l736 1814                          l673 15BA                          l737 181E  
                        l674 15C8                          l669 1586                 __CFG_CPB$OFF 000000  
                        u600 16D6                          u540 158A                          u630 1800  
                        u820 153E                          u565 168C                          u907 1238  
                        u917 124E                          u927 1278                          u937 12A8  
                        u947 12DE                          u957 18B8                          u967 170C  
                        u887 10EE                          u977 1740                          u897 1162  
                        u987 18CC                          u997 15FC                          _max 002A  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1604 13EE                         l1618 141E                         l1698 10FE  
                       _ADON 007E10                         STR_1 104A                         STR_2 1057  
                       STR_3 104A                         STR_4 104A                         STR_5 104D  
                       STR_6 104A                         STR_7 103E                         STR_8 102D  
                       u1007 1606                         u1017 163C                         u1027 1646  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _main 105E  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1028             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 15DA  
            __end_of___lwdiv 1706              __end_of___lwmod 1828                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 18D4                _N_spacingTime 0020               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 1860              __end_of_initLCD 1752  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C                        _array 1024  
            __end_of_isdigit 18AC                        _state 0026                        _putch 18AC  
                      tablat 000FF5            _LCDinterruptState 0029                        status 000FD8  
             __CFG_PBADEN$ON 000000              __initialization 1860                 __end_of_main 12EC  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1029  
                     ??_main 001A                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0004                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       ?_putch 0001                       _INT1IE 007F83  
                     _OSCCON 000FD3                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 187E  
               ?_motorStop_1 0001                    ??_lcdInst 0003                       _printf 12EC  
                  ??_readADC 0003                    ??_initLCD 0004                 __pdataCOMRAM 002A  
                  ??_isdigit 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1884                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_array 1027                __end_of_putch 18C0           __size_of_lcdNibble 007E  
                    ??_putch 0003                      ?_printf 000D         lcd@LCDinterruptState 0028  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 1658                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 1558                      ___lwdiv 16B4                      ___lwmod 17E6  
               __psmallconst 1000                      __pcinit 1860                      __ramtop 1000  
                    _lcdInst 18C0                      __ptext0 105E                      __ptext1 1828  
                    __ptext2 12EC                      __ptext3 18AC                      __ptext4 188E  
                    __ptext5 17E6                      __ptext6 16B4                      __ptext7 1752  
                    __ptext8 179C                      __ptext9 18E6              __size_of_printf 026C  
                    _readADC 1828                      _initLCD 1706            __end_of_hexpowers 1024  
       __size_of_motorStop_1 004A                      _dpowers 1012                      _isdigit 188E  
              ?_motorStart_1 0001                    _LCD_RIGHT 1028     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008         end_of_initialization 1884  
      __end_of_LCD_SIZE_HORZ 102B        __end_of_LCD_SIZE_VERT 102A                __Lmediumconst 0000  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                      printf@c 0019                      printf@f 000D  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             ??_motorStart_1 0016                    _TRISCbits 000F94                    _TRISDbits 000F95  
              __pidataCOMRAM 1900               __end_of_printf 1558                    _N_counter 0024  
        start_initialization 1860            ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001  
          ??_I2C_Master_Stop 0002     I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0011                _analog_result 001E                  __pbssCOMRAM 001C  
           _I2C_Master_Start 18F8             _I2C_Master_Write 18E6         __end_of_motorStart_1 17E6  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 15DA  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
                   ?_lcdInst 0001                     ?_readADC 0001                     ?_initLCD 0001  
                __smallconst 1000                     ?_isdigit 0001                    _hexpowers 101C  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 1027  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_1 0016                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 0002                   printf@flag 0015                lcdNibble@temp 0001  
                 printf@prec 0018               _LCD_HORZ_LIMIT 102C                     _N_remain 0022  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0005                  _isdigit$854 0002             __size_of_lcdInst 0014  
            _I2C_Master_Init 1658             __size_of_readADC 0038             __size_of_initLCD 004C  
            _I2C_Master_Wait 18D4              _I2C_Master_Stop 18F0       __end_of_LCD_HORZ_LIMIT 102D  
        __end_of_motorStop_1 179C             __size_of_isdigit 001E              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 18F0                     __ptext11 18F8  
                   __ptext12 18D4                     __ptext13 1658                     __ptext14 1558  
                   __ptext15 1706                     __ptext16 18C0                     __ptext17 15DA  
             _LCD_VERT_LIMIT 102B        __size_of_motorStart_1 004A                __size_of_main 028E  
                ??_lcdNibble 0001                    printf@idx 0012                    printf@val 0016  
I2C_Master_Write@byteToWrite 0002                    putch@data 0003     __end_of_I2C_Master_Start 1900  
   __end_of_I2C_Master_Write 18F0                   _INTCONbits 000FF2                 _motorStart_1 179C  
     __end_of_LCD_VERT_LIMIT 102C                     isdigit@c 0003                _LCD_SIZE_HORZ 102A  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1029             ___lldiv@dividend 0001  
                   printf@ap 0013      __end_of_I2C_Master_Init 16B4      __end_of_I2C_Master_Wait 18E6  
    __end_of_I2C_Master_Stop 18F8                  lcdInst@data 0003                  _motorStop_1 1752  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
